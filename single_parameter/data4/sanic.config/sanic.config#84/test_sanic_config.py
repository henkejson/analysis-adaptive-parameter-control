# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import inspect as module_1
import sanic.helpers as module_2


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    bool_0 = False
    config_0 = module_0.Config(keep_alive=bool_0)


def test_case_2():
    bool_0 = False
    none_type_0 = None
    config_0 = module_0.Config(none_type_0, bool_0, bool_0)
    config_0.__getattr__(config_0)


def test_case_3():
    bool_0 = False
    config_0 = module_0.Config(keep_alive=bool_0)
    config_0.__getattr__(bool_0)


def test_case_4():
    bool_0 = False
    var_0 = module_1.getmembers(bool_0, bool_0)
    config_0 = module_0.Config(keep_alive=var_0)
    config_0.__getattr__(var_0)


def test_case_5():
    bool_0 = False
    config_0 = module_0.Config(keep_alive=bool_0)
    none_type_0 = config_0.register_type(bool_0)
    config_0.__getattr__(bool_0)


def test_case_6():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_7():
    str_0 = "8m+l\"\nxA%O'`Y\r"
    var_0 = module_1.getmembers(str_0)
    none_type_0 = None
    module_0.Config(env_prefix=var_0, keep_alive=none_type_0)


def test_case_8():
    int_0 = 2894
    config_0 = module_0.Config()
    var_0 = module_1.getmembers(int_0)
    module_0.Config(var_0, var_0, var_0, converters=var_0)


def test_case_9():
    bool_0 = False
    config_0 = module_0.Config(keep_alive=bool_0)
    config_0.update_config(bool_0)


def test_case_10():
    config_0 = module_0.Config()
    str_0 = "+59@r>>l&#Y"
    none_type_0 = config_0.__setitem__(str_0, config_0)
    var_0 = config_0.update_config(config_0)
    var_0.update_config(config_0)


def test_case_11():
    config_0 = module_0.Config()
    none_type_0 = None
    none_type_1 = config_0.register_type(none_type_0)
    config_0.register_type(none_type_0)


def test_case_12():
    str_0 = "MuYyWdQ7/Q"
    var_0 = module_1.getmembers(str_0)
    default_0 = module_2.Default()
    var_1 = default_0.__repr__()
    var_2 = default_0.__repr__()
    str_1 = "="
    config_0 = module_0.Config(keep_alive=var_0, converters=var_2)
    var_3 = module_1.isclass(str_1)
    var_3.load_environment_vars(var_2)


def test_case_13():
    config_0 = module_0.Config()
    bytes_0 = b"B\xf3N\x10b\xfb/\x0b\xeb@w>\x1dY"
    config_0.update_config(bytes_0)


def test_case_14():
    config_0 = module_0.Config()
    none_type_0 = config_0.update()
    str_0 = "_FALLBACK_ERROR_FORMAT"
    none_type_1 = config_0.__setitem__(str_0, str_0)
    none_type_2 = config_0.register_type(config_0)
    module_0.Config(config_0, none_type_1, none_type_0, converters=none_type_0)
