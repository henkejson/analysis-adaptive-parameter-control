# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)
    config_1 = module_0.Config(env_prefix=var_0)


def test_case_2():
    none_type_0 = None
    config_0 = module_0.Config(none_type_0)
    config_0.__getattr__(none_type_0)


def test_case_3():
    none_type_0 = None
    config_0 = module_0.Config()
    none_type_1 = config_0.register_type(none_type_0)


def test_case_4():
    config_0 = module_0.Config()
    config_0.__getattr__(config_0)


def test_case_5():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_6():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)
    config_1 = module_0.Config(env_prefix=var_0)
    module_0.Config(config_0, config_0)


def test_case_7():
    config_0 = module_0.Config()
    complex_0 = 2062.31 + 2481.9j
    config_0.__setitem__(complex_0, complex_0)


def test_case_8():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)
    config_1 = module_0.Config(config_0, converters=config_0)


def test_case_9():
    none_type_0 = None
    config_0 = module_0.Config()
    config_0.update_config(none_type_0)


def test_case_10():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)
    var_1 = var_0.__repr__()
    config_0.update_config(var_1)


def test_case_11():
    dict_0 = {}
    bool_0 = False
    config_0 = module_0.Config(dict_0, keep_alive=bool_0)


def test_case_12():
    config_0 = module_0.Config()
    dict_0 = {}
    config_1 = module_0.Config(dict_0)
    var_0 = config_1.update_config(config_1)
    config_2 = module_0.Config(config_1, converters=var_0)
    config_3 = module_0.Config(config_0, keep_alive=var_0)
    config_4 = module_0.Config()
    none_type_0 = config_1.register_type(var_0)
    config_1.register_type(var_0)
