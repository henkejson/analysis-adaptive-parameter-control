# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import inspect as module_1


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0)


def test_case_2():
    bytes_0 = b"\xc8^\xc9\x9e\xea"
    module_0.Config(bytes_0, converters=bytes_0)


def test_case_3():
    bytes_0 = b"HTTP Version Not Supported"
    config_0 = module_0.Config()
    config_0.__getattr__(bytes_0)


def test_case_4():
    bool_0 = True
    var_0 = module_1.isclass(bool_0)
    str_0 = "G"
    config_0 = module_0.Config(var_0, str_0)
    config_1 = module_0.Config(converters=config_0)


def test_case_5():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0)
    config_0.__setitem__(none_type_0, none_type_0)


def test_case_6():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_7():
    list_0 = []
    str_0 = "Sp#-r-c`2&os-(j;MOM"
    config_0 = module_0.Config(converters=list_0)
    var_0 = config_0.load_environment_vars()
    config_0.update_config(str_0)


def test_case_8():
    bool_0 = True
    module_0.Config(keep_alive=bool_0, converters=bool_0)


def test_case_9():
    bool_0 = False
    config_0 = module_0.Config(keep_alive=bool_0, converters=bool_0)


def test_case_10():
    list_0 = []
    config_0 = module_0.Config()
    none_type_0 = None
    config_1 = module_0.Config(keep_alive=none_type_0, converters=none_type_0)
    none_type_1 = config_1.register_type(config_1)
    var_0 = config_0.update_config(config_0)
    config_0.__getattr__(list_0)


def test_case_11():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0)
    config_0.update_config(none_type_0)


def test_case_12():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)
    config_1 = module_0.Config(env_prefix=var_0, keep_alive=var_0)
    none_type_0 = config_0.register_type(var_0)
    none_type_1 = None
    config_0.register_type(none_type_1)
