# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import sanic.utils as module_1
import inspect as module_2


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    bool_0 = True
    module_0.Config(keep_alive=bool_0, converters=bool_0)


def test_case_2():
    str_0 = "+\\I9Nw~\rYlwI\\7"
    config_0 = module_0.Config(env_prefix=str_0)


def test_case_3():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_4():
    config_0 = module_0.Config()
    none_type_0 = None
    config_0.update_config(none_type_0)


def test_case_5():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0)
    none_type_1 = config_0.register_type(none_type_0)
    var_0 = config_0.update_config(config_0)
    config_0.register_type(none_type_0)


def test_case_6():
    bool_0 = False
    int_0 = -1976
    dict_0 = {bool_0: bool_0, int_0: int_0}
    config_0 = module_0.Config(converters=dict_0)


def test_case_7():
    str_0 = "G"
    config_0 = module_0.Config(env_prefix=str_0)


def test_case_8():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0)


def test_case_9():
    str_0 = "G"
    config_0 = module_0.Config(env_prefix=str_0)
    module_1.load_module_from_file_location(config_0)


def test_case_10():
    bytes_0 = b":status"
    module_0.Config(bytes_0)


def test_case_11():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    config_0 = module_0.Config()
    config_0.__getattr__(list_0)


def test_case_12():
    bool_0 = False
    config_0 = module_0.Config(keep_alive=bool_0)


def test_case_13():
    str_0 = "["
    config_0 = module_0.Config(env_prefix=str_0)
    config_0.update_config(str_0)


def test_case_14():
    str_0 = "_"
    config_0 = module_0.Config(env_prefix=str_0)
    dict_0 = {}
    module_1.load_module_from_file_location(dict_0)


def test_case_15():
    bool_0 = True
    str_0 = "G"
    str_1 = "The directories that are monitored for auto-reload.\n\n        Returns:\n            Set[str]: The set of directories that are monitored for\n                auto-reload.\n        "
    dict_0 = {str_1: str_0, str_1: str_0, str_0: str_0, str_1: str_0}
    bool_1 = False
    none_type_0 = None
    config_0 = module_0.Config(dict_0, keep_alive=bool_1, converters=none_type_0)
    none_type_1 = config_0.register_type(config_0)
    none_type_2 = module_2.isclass(bool_0)
    none_type_3 = config_0.update(**config_0)
    config_1 = module_0.Config(env_prefix=str_0)
    config_0.load_environment_vars(str_0)
