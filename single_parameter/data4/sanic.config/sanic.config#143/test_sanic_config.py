# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import sanic.constants as module_1
import inspect as module_2


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    local_cert_creator_0 = module_1.LocalCertCreator.AUTO
    config_0 = module_0.Config(converters=local_cert_creator_0)


def test_case_2():
    bool_0 = True
    config_0 = module_0.Config(keep_alive=bool_0)
    config_0.update_config(bool_0)


def test_case_3():
    str_0 = "O2\x0c\r%mcM"
    config_0 = module_0.Config(env_prefix=str_0)


def test_case_4():
    bool_0 = False
    str_0 = "3h5(U0W1sGt8"
    str_1 = "A@R\toH(w6:\x0b~"
    dict_0 = {str_1: str_0, str_1: bool_0}
    config_0 = module_0.Config(dict_0)
    var_0 = module_2.getmembers(str_0, bool_0)
    var_0.register_type(str_0)


def test_case_5():
    none_type_0 = None
    config_0 = module_0.Config()
    config_0.update_config(none_type_0)


def test_case_6():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_7():
    str_0 = "S"
    config_0 = module_0.Config(env_prefix=str_0)


def test_case_8():
    none_type_0 = None
    bool_0 = False
    str_0 = "4Q5BP"
    var_0 = module_2.isdatadescriptor(bool_0)
    config_0 = module_0.Config(converters=str_0)
    config_1 = module_0.Config(env_prefix=none_type_0)
    var_1 = config_1.load_environment_vars()
    var_2 = config_1.load_environment_vars()
    var_1.register(bool_0, var_0)


def test_case_9():
    str_0 = "_"
    config_0 = module_0.Config(env_prefix=str_0)
    config_0.__getattr__(str_0)


def test_case_10():
    bool_0 = False
    config_0 = module_0.Config(keep_alive=bool_0)
    none_type_0 = None
    list_0 = [none_type_0, config_0, none_type_0]
    config_0.__getattr__(list_0)


def test_case_11():
    str_0 = "zK7e4yxZG$^!k~,?"
    config_0 = module_0.Config()
    config_0.update_config(str_0)


def test_case_12():
    local_cert_creator_0 = module_1.LocalCertCreator.TRUSTME
    module_0.Config(converters=local_cert_creator_0)


def test_case_13():
    str_0 = "_"
    config_0 = module_0.Config(env_prefix=str_0)


def test_case_14():
    config_0 = module_0.Config()
    local_cert_creator_0 = module_1.LocalCertCreator.AUTO
    str_0 = "S"
    config_1 = module_0.Config(env_prefix=str_0)
    var_0 = module_2.isclass(config_1)
    config_2 = module_0.Config(converters=local_cert_creator_0)
    var_1 = config_2.update_config(config_2)
    config_2.load_environment_vars(str_0)
