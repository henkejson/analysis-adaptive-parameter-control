# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import inspect as module_1


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    none_type_0 = None
    var_0 = module_1.isclass(none_type_0)
    config_0 = module_0.Config(keep_alive=var_0, converters=none_type_0)


def test_case_2():
    none_type_0 = None
    var_0 = module_1.isclass(none_type_0)
    bool_0 = True
    config_0 = module_0.Config(env_prefix=var_0, keep_alive=bool_0, converters=var_0)


def test_case_3():
    config_0 = module_0.Config()
    none_type_0 = config_0.update()
    var_0 = config_0.load_environment_vars()
    bytes_0 = b"/\xd9\xc2zz\xba\xa4.%\xb6-l\xfa\xe0"
    config_0.update_config(bytes_0)


def test_case_4():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)
    none_type_0 = config_0.register_type(var_0)


def test_case_5():
    str_0 = "l$"
    dict_0 = {}
    int_0 = 1122
    config_0 = module_0.Config(dict_0, keep_alive=int_0)
    none_type_0 = None
    config_1 = module_0.Config(none_type_0)
    none_type_1 = config_1.__setitem__(str_0, str_0)


def test_case_6():
    complex_0 = 3642.761722 - 377.848159j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    str_0 = "Parse RFC 7239 Forwarded headers.\n    The value of `by` or `secret` must match `config.FORWARDED_SECRET`\n    :return: dict with keys and values, or None if nothing matched\n    "
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=str_0, keep_alive=none_type_0)
    config_0.__getattr__(list_0)


def test_case_7():
    float_0 = -411.95
    module_0.Config(converters=float_0)


def test_case_8():
    none_type_0 = None
    config_0 = module_0.Config(converters=none_type_0)
    config_1 = module_0.Config(config_0, keep_alive=none_type_0)


def test_case_9():
    none_type_0 = None
    config_0 = module_0.Config()
    config_0.__getattr__(none_type_0)


def test_case_10():
    config_0 = module_0.Config()
    none_type_0 = None
    config_0.update_config(none_type_0)


def test_case_11():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_12():
    config_0 = module_0.Config()
    none_type_0 = config_0.update(**config_0)


def test_case_13():
    config_0 = module_0.Config()
    str_0 = "\r#$_cG\x0bJ"
    none_type_0 = config_0.__setitem__(str_0, config_0)
    config_1 = module_0.Config(converters=str_0)
    var_0 = config_0.update_config(config_0)
    none_type_1 = config_0.register_type(config_0)
    config_0.update_config(var_0)


def test_case_14():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)
    none_type_0 = config_0.register_type(var_0)
    config_0.register_type(none_type_0)


def test_case_15():
    config_0 = module_0.Config()
    str_0 = ""
    config_0.load_environment_vars(str_0)


def test_case_16():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)
    str_0 = "LOCAL_CERT_CREATOR"
    config_0.__setattr__(str_0, str_0)
