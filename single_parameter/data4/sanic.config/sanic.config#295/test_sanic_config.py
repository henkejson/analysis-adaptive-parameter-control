# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import inspect as module_1
import builtins as module_2


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    str_0 = 'U8"u'
    none_type_0 = None
    config_0 = module_0.Config(none_type_0, none_type_0, none_type_0, converters=str_0)
    var_0 = config_0.load_environment_vars()
    module_1.getmembers(str_0, str_0)


def test_case_2():
    set_0 = set()
    config_0 = module_0.Config(keep_alive=set_0)


def test_case_3():
    str_0 = 'U8"u'
    config_0 = module_0.Config(env_prefix=str_0)
    config_1 = module_0.Config(env_prefix=str_0)
    var_0 = config_1.update_config(config_1)
    var_0.__instancecheck__(var_0, config_1)


def test_case_4():
    config_0 = module_0.Config()
    str_0 = "_"
    none_type_0 = config_0.__setattr__(str_0, config_0)
    var_0 = module_1.isdatadescriptor(str_0)
    config_1 = module_0.Config(none_type_0, str_0, converters=config_0)
    var_1 = config_0.update_config(config_1)
    config_2 = module_0.Config()
    module_0.Config(str_0)


def test_case_5():
    config_0 = module_0.Config()
    config_0.create_empty_request()


def test_case_6():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_7():
    set_0 = set()
    config_0 = module_0.Config()
    config_0.update_config(set_0)


def test_case_8():
    config_0 = module_0.Config()
    str_0 = "HS'UG"
    none_type_0 = config_0.__setitem__(str_0, str_0)
    str_1 = "_"
    none_type_1 = config_0.__setattr__(str_1, config_0)
    config_1 = module_0.Config(env_prefix=none_type_1)
    config_2 = module_0.Config(none_type_1, str_1, converters=config_0)
    var_0 = config_0.update_config(config_2)
    config_3 = module_0.Config(keep_alive=var_0)
    config_0.update_config(none_type_1)


def test_case_9():
    str_0 = 'U8"u'
    set_0 = set()
    config_0 = module_0.Config(keep_alive=set_0)
    var_0 = config_0.load_environment_vars()
    var_1 = config_0.update_config(config_0)
    config_1 = module_0.Config()
    none_type_0 = config_0.register_type(var_0)
    config_1.update_config(str_0)


def test_case_10():
    str_0 = "Return a response object with file data.\n\n    Args:\n        location (Union[str, PurePath]): Location of file on system.\n        status (int, optional): HTTP response code. Won't enforce the passed in status if only a part of the content will be sent (206) or file is being validated (304). Defaults to 200.\n        request_headers (Optional[Header], optional): The request headers.\n        validate_when_requested (bool, optional): If `True`, will validate the file when requested. Defaults to True.\n        mime_type (Optional[str], optional): Specific mime_type.\n        headers (Optional[Dict[str, str]], optional): Custom Headers.\n        filename (Optional[str], optional): Override filename.\n        last_modified (Optional[Union[datetime, float, int, Default]], optional): The last modified date and time of the file.\n        max_age (Optional[Union[float, int]], optional): Max age for cache control.\n        no_store (Optional[bool], optional): Any cache should not store this response. Defaults to None.\n        _range (Optional[Range], optional):\n\n    Returns:\n        HTTPResponse: The response object with the file data.\n    "
    set_0 = set()
    config_0 = module_0.Config(keep_alive=set_0)
    none_type_0 = config_0.__setattr__(str_0, str_0)
    config_0.__getattr__(config_0)


def test_case_11():
    str_0 = 'U["['
    none_type_0 = None
    module_0.Config(none_type_0, converters=str_0)


def test_case_12():
    config_0 = module_0.Config()
    str_0 = "_"
    config_1 = module_0.Config(env_prefix=str_0)
    object_0 = module_2.object()
    var_0 = module_1.getmembers(config_1)


def test_case_13():
    str_0 = ""
    none_type_0 = None
    config_0 = module_0.Config(none_type_0)
    config_0.load_environment_vars(str_0)


def test_case_14():
    config_0 = module_0.Config()
    str_0 = "L"
    none_type_0 = config_0.__setattr__(str_0, config_0)
    module_0.Config(none_type_0, str_0, converters=config_0)


def test_case_15():
    config_0 = module_0.Config()
    str_0 = "_"
    str_1 = "LOCAL_CERT_CREATOR"
    config_0.__setattr__(str_1, str_0)
