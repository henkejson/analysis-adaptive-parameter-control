# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import inspect as module_1


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    bytes_0 = b"\x9bi\xa2"
    config_0 = module_0.Config(keep_alive=bytes_0, converters=bytes_0)


def test_case_2():
    str_0 = "{=,9\rE!:`R2V$I( HN"
    config_0 = module_0.Config(env_prefix=str_0, keep_alive=str_0)
    none_type_0 = config_0.update()


def test_case_3():
    str_0 = "{=,9\rE!:`R2V$I( HN"
    int_0 = -1814
    str_1 = "Z-St$SRc5"
    dict_0 = {str_0: int_0, str_1: str_0, str_1: str_1}
    config_0 = module_0.Config(dict_0, str_1)
    none_type_0 = None
    none_type_1 = config_0.register_type(none_type_0)


def test_case_4():
    str_0 = "The `return_asyncio_server` argument is deprecated and ignored. It will be removed in v24.3."
    module_0.Config(env_prefix=str_0, converters=str_0)


def test_case_5():
    none_type_0 = None
    str_0 = "G"
    config_0 = module_0.Config(
        env_prefix=str_0, keep_alive=none_type_0, converters=none_type_0
    )


def test_case_6():
    str_0 = "{n,9jE!:`R2V$I# HN"
    config_0 = module_0.Config(env_prefix=str_0, keep_alive=str_0)
    bool_0 = True
    bool_1 = False
    config_1 = module_0.Config(env_prefix=bool_1, converters=bool_1)
    module_0.DescriptorMeta(bool_0)


def test_case_7():
    str_0 = "{=,9\rE!:`R2V$I( HN"
    config_0 = module_0.Config(env_prefix=str_0, keep_alive=str_0)
    var_0 = module_1.isclass(str_0)
    config_0.__instancecheck__(str_0, str_0)


def test_case_8():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_9():
    none_type_0 = None
    bool_0 = False
    config_0 = module_0.Config(keep_alive=bool_0, converters=bool_0)
    config_0.update_config(none_type_0)


def test_case_10():
    bytes_0 = b"\x9bi\xa2"
    config_0 = module_0.Config(keep_alive=bytes_0, converters=bytes_0)
    config_0.update_config(bytes_0)


def test_case_11():
    bytes_0 = b"i\xa2"
    config_0 = module_0.Config(keep_alive=bytes_0, converters=bytes_0)
    config_0.__getattr__(config_0)
