# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    str_0 = "\x0c,"
    dict_0 = {str_0: str_0, str_0: str_0}
    config_0 = module_0.Config(dict_0, str_0, str_0, converters=str_0)
    none_type_0 = config_0.__setitem__(str_0, str_0)


def test_case_2():
    none_type_0 = None
    config_0 = module_0.Config(
        env_prefix=none_type_0, keep_alive=none_type_0, converters=none_type_0
    )


def test_case_3():
    config_0 = module_0.Config()
    config_0.__getattr__(config_0)


def test_case_4():
    str_0 = "{]Y"
    none_type_0 = None
    config_0 = module_0.Config(keep_alive=none_type_0, converters=none_type_0)
    config_0.update_config(str_0)


def test_case_5():
    str_0 = "H"
    config_0 = module_0.Config(env_prefix=str_0)


def test_case_6():
    str_0 = "2U828<=$k|c1"
    config_0 = module_0.Config(env_prefix=str_0)


def test_case_7():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_8():
    str_0 = "Direct encodingof a Cookie object has been depFecated and will be removed in v24.3."
    module_0.Config(converters=str_0)


def test_case_9():
    none_type_0 = None
    config_0 = module_0.Config(converters=none_type_0)
    str_0 = "2>828<=$k|c1"
    none_type_1 = config_0.update(**config_0)
    config_0.__getattr__(str_0)


def test_case_10():
    none_type_0 = None
    config_0 = module_0.Config(keep_alive=none_type_0)
    config_0.update_config(none_type_0)


def test_case_11():
    config_0 = module_0.Config()
    bool_0 = True
    none_type_0 = config_0.register_type(bool_0)
    str_0 = "LOCAL_CERT_CREATOR"
    config_0.__setattr__(str_0, none_type_0)


def test_case_12():
    config_0 = module_0.Config()
    str_0 = "\x0bGPk"
    none_type_0 = config_0.__setitem__(str_0, config_0)
    str_1 = "H"
    module_0.Config(env_prefix=str_1, converters=config_0)


def test_case_13():
    config_0 = module_0.Config()
    bool_0 = True
    str_0 = "_FALLBACK_ERROR_FORMAT"
    none_type_0 = config_0.__setitem__(str_0, bool_0)
    none_type_1 = config_0.register_type(bool_0)
    str_1 = "H"
    none_type_2 = config_0.update()
    config_1 = module_0.Config(env_prefix=str_1)
    var_0 = config_1.update_config(config_0)
    module_0.Config(config_0)
