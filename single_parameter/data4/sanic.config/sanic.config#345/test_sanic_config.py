# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    str_0 = "L"
    config_0 = module_0.Config(env_prefix=str_0, keep_alive=str_0)


def test_case_2():
    config_0 = module_0.Config()
    config_1 = module_0.Config(config_0)


def test_case_3():
    none_type_0 = None
    config_0 = module_0.Config()
    config_0.__getattr__(none_type_0)


def test_case_4():
    config_0 = module_0.Config()
    config_1 = config_0.update_config(config_0)


def test_case_5():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0, keep_alive=none_type_0)
    var_0 = config_0.update_config(config_0)


def test_case_6():
    none_type_0 = None
    config_0 = module_0.Config()
    config_0.update_config(none_type_0)


def test_case_7():
    str_0 = "L"
    module_0.Config(env_prefix=str_0, converters=str_0)


def test_case_8():
    str_0 = "X0S{Z\x0buHaOI$"
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=str_0, keep_alive=none_type_0)
    none_type_1 = config_0.update(**config_0)
    none_type_2 = config_0.update()
    config_0.update_config(str_0)


def test_case_9():
    str_0 = "X0S{Z\x0buHaOK$"
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=str_0, keep_alive=none_type_0)
    none_type_1 = None
    config_1 = module_0.Config(none_type_0, converters=none_type_1)
    none_type_2 = config_0.update()
    none_type_3 = config_1.update(**config_1)
    config_2 = module_0.Config()
    config_0.__getattr__(config_2)


def test_case_10():
    bytes_0 = b"Gateway Timeout"
    module_0.Config(env_prefix=bytes_0, converters=bytes_0)


def test_case_11():
    str_0 = "L"
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=str_0, keep_alive=none_type_0)
    none_type_1 = config_0.update(**config_0)
    str_1 = "LOCAL_CERT_CREATOR"
    config_0.__setitem__(str_1, config_0)


def test_case_12():
    str_0 = "_"
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=str_0, keep_alive=none_type_0)
    none_type_1 = config_0.update(**config_0)
    none_type_2 = config_0.register_type(str_0)
    none_type_3 = config_0.update()
    config_0.update_config(none_type_2)
