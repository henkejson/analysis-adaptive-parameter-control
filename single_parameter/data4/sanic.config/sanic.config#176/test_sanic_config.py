# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import inspect as module_1


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    config_0 = module_0.Config()
    str_0 = "Rj\\R'p['>o ^xr(]aq^P"
    str_1 = "'Q)cT_S_\x0b33Ku"
    var_0 = module_1.isclass(str_1)
    none_type_0 = config_0.register_type(str_0)
    config_1 = module_0.Config(keep_alive=var_0)
    none_type_1 = config_0.update()
    config_2 = module_0.Config()
    var_1 = config_2.update_config(config_0)
    var_2 = module_1.getmembers(config_2)
    list_0 = [var_2]
    none_type_2 = config_0.update(*list_0, **config_2)
    config_2.update_config(var_2)


def test_case_2():
    none_type_0 = None
    none_type_1 = None
    config_0 = module_0.Config(env_prefix=none_type_1, converters=none_type_1)
    none_type_2 = config_0.register_type(none_type_0)


def test_case_3():
    str_0 = "Returns an empty response to the client.\n\n    Args:\n        status (int, optional): HTTP response code. Defaults to `204`.\n        headers ([type], optional): Custom HTTP headers. Defaults to `None`.\n\n    Returns:\n        HTTPResponse: An empty response to the client.\n    "
    config_0 = module_0.Config(env_prefix=str_0, keep_alive=str_0)
    module_0.DescriptorMeta(str_0)


def test_case_4():
    config_0 = module_0.Config()
    none_type_0 = None
    config_0.respond(none_type_0)


def test_case_5():
    none_type_0 = None
    config_0 = module_0.Config(none_type_0, keep_alive=none_type_0)
    config_0.update_config(none_type_0)


def test_case_6():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_7():
    none_type_0 = None
    config_0 = module_0.Config(converters=none_type_0)
    none_type_1 = config_0.register_type(config_0)
    str_0 = "parsed_form"
    none_type_2 = config_0.__setitem__(str_0, config_0)
    module_0.DescriptorMeta(none_type_1)


def test_case_8():
    config_0 = module_0.Config()
    config_0.__getattr__(config_0)


def test_case_9():
    config_0 = module_0.Config()
    str_0 = "Rj\\R'p['>o ^xr(]aq^P"
    str_1 = "'Q)cT_S_\x0b33Ku"
    var_0 = module_1.isclass(str_1)
    none_type_0 = config_0.register_type(str_0)
    config_1 = module_0.Config()
    var_1 = config_1.update_config(config_0)
    var_2 = module_1.getmembers(config_1)
    none_type_1 = config_1.__setattr__(str_1, var_2)
    list_0 = [var_2]
    none_type_2 = config_0.update(*list_0, **config_1)
    str_2 = "__init__"
    config_1.update_config(str_2)


def test_case_10():
    str_0 = "#@Qr^\x0c)"
    str_1 = "yG*"
    dict_0 = {str_0: str_0, str_1: str_1}
    config_0 = module_0.Config(dict_0)


def test_case_11():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.Config(env_prefix=dict_0, converters=bool_0)


def test_case_12():
    config_0 = module_0.Config()
    var_0 = module_0.Config(config_0, converters=config_0)
    module_1.getmembers(config_0, config_0)


def test_case_13():
    config_0 = module_0.Config()
    none_type_0 = config_0.register_type(config_0)
    str_0 = "Rj\\R'p['>o ^xr(]aq^P"
    module_0.Config(converters=str_0)


def test_case_14():
    config_0 = module_0.Config()
    var_0 = module_1.getmembers(config_0)
    list_0 = [var_0]
    none_type_0 = config_0.update(*list_0, **config_0)
