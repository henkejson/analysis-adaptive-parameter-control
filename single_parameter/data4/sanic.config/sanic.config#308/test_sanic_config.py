# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import sanic.errorpages as module_1
import inspect as module_2


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    str_0 = "8{`L.\tq"
    config_0 = module_0.Config(keep_alive=str_0)
    module_1.check_error_format(str_0)


def test_case_2():
    config_0 = module_0.Config()
    str_0 = 'The main application instance\n\n    You will create an instance of this class and use it to register\n    routes, listeners, middleware, blueprints, error handlers, etc.\n\n    By convention, it is often called `app`. It must be named using\n    the `name` parameter and is roughly constrained to the same\n    restrictions as a Python module name, however, it can contain\n    hyphens (`-`).\n\n    ```python\n    # will cause an error because it contains spaces\n    Sanic("This is not legal")\n    ```\n\n    ```python\n    # this is legal\n    Sanic("Hyphens-are-legal_or_also_underscores")\n    ```\n\n    Args:\n        name (str): The name of the application. Must be a valid\n            Python module name (including hyphens).\n        config (Optional[config_type]): The configuration to use for\n            the application. Defaults to `None`.\n        ctx (Optional[ctx_type]): The context to use for the\n            application. Defaults to `None`.\n        router (Optional[Router]): The router to use for the\n            application. Defaults to `None`.\n        signal_router (Optional[SignalRouter]): The signal router to\n            use for the application. Defaults to `None`.\n        error_handler (Optional[ErrorHandler]): The error handler to\n            use for the application. Defaults to `None`.\n        env_prefix (Optional[str]): The prefix to use for environment\n            variables. Defaults to `SANIC_`.\n        request_class (Optional[Type[Request]]): The request class to\n            use for the application. Defaults to `Request`.\n        strict_slashes (bool): Whether to enforce strict slashes.\n            Defaults to `False`.\n        log_config (Optional[Dict[str, Any]]): The logging configuration\n            to use for the application. Defaults to `None`.\n        configure_logging (bool): Whether to configure logging.\n            Defaults to `True`.\n        dumps (Optional[Callable[..., AnyStr]]): The function to use\n            for serializing JSON. Defaults to `None`.\n        loads (Optional[Callable[..., Any]]): The function to use\n            for deserializing JSON. Defaults to `None`.\n        inspector (bool): Whether to enable the inspector. Defaults\n            to `False`.\n        inspector_class (Optional[Type[Inspector]]): The inspector\n            class to use for the application. Defaults to `None`.\n        certloader_class (Optional[Type[CertLoader]]): The certloader\n            class to use for the application. Defaults to `None`.\n    '
    var_0 = module_2.isclass(str_0)
    none_type_0 = config_0.register_type(var_0)
    none_type_1 = config_0.__setitem__(str_0, str_0)
    config_1 = module_0.Config(env_prefix=none_type_0, converters=var_0)
    config_2 = module_0.Config(config_1)
    none_type_1.update_config(var_0)


def test_case_3():
    config_0 = module_0.Config()
    list_0 = [config_0]
    config_1 = module_0.Config(config_0)
    none_type_0 = config_0.update(*list_0)


def test_case_4():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_5():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_0.Config(converters=list_0)


def test_case_6():
    str_0 = "~5O"
    config_0 = module_0.Config()
    config_1 = module_0.Config(env_prefix=str_0)
    config_0.load_environment_vars(config_0)


def test_case_7():
    config_0 = module_0.Config()
    var_0 = module_2.getmembers(config_0)
    config_0.update_config(var_0)


def test_case_8():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)
    str_0 = 'The main application instance\n\n    You will create an instance of this class and use it to register\n    routes, listeners, middleware, blueprints, error handlers, etc.\n\n    By convention, it is often called `app`. It must be named using\n    the `name` parameter and is roughly constrained to the same\n    restrictions as a Python module name, however, it can contain\n    hyphens (`-`).\n\n    ```python\n    # will cause an error because it contains spaces\n    Sanic("This is not legal")\n    ```\n\n    ```python\n    # this is legal\n    Sanic("Hyphens-are-legal_or_also_underscores")\n    ```\n\n    Args:\n        name (str): The name of the application. Must be a valid\n            Python module name (including hyphens).\n        config (Optional[config_type]): The configuration to use for\n            the application. Defaults to `None`.\n        ctx (Optional[ctx_type]): The context to use for the\n            application. Defaults to `None`.\n        router (Optional[Router]): The router to use for the\n            application. Defaults to `None`.\n        signal_router (Optional[SignalRouter]): The signal router to\n            use for the application. Defaults to `None`.\n        error_handler (Optional[ErrorHandler]): The error handler to\n            use for the application. Defaults to `None`.\n        env_prefix (Optional[str]): The prefix to use for environment\n            variables. Defaults to `SANIC_`.\n        request_class (Optional[Type[Request]]): The request class to\n            use for the application. Defaults to `Request`.\n        strict_slashes (bool): Whether to enforce strict slashes.\n            Defaults to `False`.\n        log_config (Optional[Dict[str, Any]]): The logging configuration\n            to use for the application. Defaults to `None`.\n        configure_logging (bool): Whether to configure logging.\n            Defaults to `True`.\n        dumps (Optional[Callable[..., AnyStr]]): The function to use\n            for serializing JSON. Defaults to `None`.\n        loads (Optional[Callable[..., Any]]): The function to use\n            for deserializing JSON. Defaults to `None`.\n        inspector (bool): Whether to enable the inspector. Defaults\n            to `False`.\n        inspector_class (Optional[Type[Inspector]]): The inspector\n            class to use for the application. Defaults to `None`.\n        certloader_class (Optional[Type[CertLoader]]): The certloader\n            class to use for the application. Defaults to `None`.\n    '
    config_0.update_config(str_0)


def test_case_9():
    str_0 = "y.\\Mg9y!ChY(0"
    str_1 = "M|x\\-5C?"
    config_0 = module_0.Config(env_prefix=str_0, converters=str_1)
    none_type_0 = None
    var_0 = module_2.isclass(none_type_0)
    var_0.init_for_request()


def test_case_10():
    config_0 = module_0.Config()
    config_0.__getattr__(config_0)


def test_case_11():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)
    config_0.update_config(var_0)


def test_case_12():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)
    config_0.__setitem__(var_0, var_0)


def test_case_13():
    config_0 = module_0.Config()
    str_0 = "LOCAL_CERT_CREATOR"
    config_0.__setattr__(str_0, config_0)
