# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import sanic.constants as module_1
import inspect as module_2


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    tuple_0 = ()
    bytes_0 = b"Locked"
    config_0 = module_0.Config(tuple_0, converters=bytes_0)


def test_case_2():
    bool_0 = False
    config_0 = module_0.Config(env_prefix=bool_0, keep_alive=bool_0)


def test_case_3():
    str_0 = "6H\x0bjyy\r\r\\/#ATSz"
    module_0.Config(str_0)


def test_case_4():
    local_cert_creator_0 = module_1.LocalCertCreator.TRUSTME
    config_0 = module_0.Config()
    config_1 = module_0.Config(keep_alive=config_0)
    var_0 = module_2.getmembers(config_0)
    var_0.__getattr__(local_cert_creator_0)


def test_case_5():
    local_cert_creator_0 = module_1.LocalCertCreator.TRUSTME
    none_type_0 = None
    config_0 = module_0.Config(none_type_0)
    none_type_1 = None
    config_1 = module_0.Config(keep_alive=local_cert_creator_0, converters=none_type_1)
    config_1.__getattr__(config_1)


def test_case_6():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_7():
    local_cert_creator_0 = module_1.LocalCertCreator.MKCERT
    config_0 = module_0.Config(env_prefix=local_cert_creator_0)
    none_type_0 = config_0.update(**config_0)


def test_case_8():
    config_0 = module_0.Config()
    none_type_0 = None
    config_0.update_config(none_type_0)


def test_case_9():
    config_0 = module_0.Config()
    str_0 = "*RR&Hy"
    none_type_0 = None
    none_type_1 = config_0.__setitem__(str_0, none_type_0)
    config_1 = module_0.Config(keep_alive=config_0)
    config_0.update_config(none_type_0)


def test_case_10():
    local_cert_creator_0 = module_1.LocalCertCreator.TRUSTME
    config_0 = module_0.Config()
    none_type_0 = None
    none_type_1 = config_0.register_type(none_type_0)
    config_0.update_config(local_cert_creator_0)


def test_case_11():
    config_0 = module_0.Config()
    str_0 = "*RR&Hy"
    none_type_0 = None
    module_0.Config(env_prefix=none_type_0, converters=str_0)
