# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import inspect as module_1


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    config_0 = module_0.Config()
    config_1 = module_0.Config(keep_alive=config_0, converters=config_0)
    var_0 = module_1.getmembers(config_1)


def test_case_2():
    config_0 = module_0.Config()
    config_1 = module_0.Config(keep_alive=config_0, converters=config_0)
    none_type_0 = None
    config_2 = module_0.Config(env_prefix=none_type_0, keep_alive=none_type_0)
    config_1.update_config(none_type_0)


def test_case_3():
    config_0 = module_0.Config()
    none_type_0 = None
    config_1 = module_0.Config(config_0, keep_alive=none_type_0)
    config_2 = module_0.Config(keep_alive=config_0, converters=config_0)
    var_0 = config_0.load_environment_vars()
    var_1 = module_1.isdatadescriptor(config_2)
    var_2 = module_1.getmembers(config_2)
    none_type_1 = config_2.register_type(var_1)
    var_3 = config_2.update_config(config_0)


def test_case_4():
    config_0 = module_0.Config()
    config_0.__getattr__(config_0)


def test_case_5():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_6():
    config_0 = module_0.Config()
    var_0 = module_1.isdatadescriptor(config_0)
    config_0.update_config(var_0)


def test_case_7():
    str_0 = ""
    config_0 = module_0.Config()
    config_0.update_config(str_0)


def test_case_8():
    config_0 = module_0.Config()
    var_0 = config_0.__repr__()
    str_0 = 'Q$\r"(rVfvPP'
    none_type_0 = config_0.__setitem__(str_0, str_0)


def test_case_9():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0, keep_alive=none_type_0)
    str_0 = "Gj0V6\\r Y"
    config_1 = module_0.Config(env_prefix=str_0)
    module_1.getmembers(none_type_0, str_0)


def test_case_10():
    str_0 = "tU;_J"
    config_0 = module_0.Config()
    none_type_0 = config_0.register_type(str_0)
    none_type_1 = config_0.__setattr__(str_0, config_0)
    config_0.register_type(str_0)


def test_case_11():
    none_type_0 = None
    str_0 = "_"
    config_0 = module_0.Config(none_type_0, str_0)
