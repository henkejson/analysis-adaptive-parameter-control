# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import inspect as module_1
import sanic.constants as module_2


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    config_0 = module_0.Config()
    str_0 = "X\rP'-+]B\nt&@"
    none_type_0 = config_0.__setattr__(str_0, config_0)
    config_1 = module_0.Config(
        env_prefix=str_0, keep_alive=config_0, converters=config_0
    )
    none_type_1 = config_1.register_type(config_1)


def test_case_2():
    str_0 = '\\AT"9aWP3'
    str_1 = "lH\\\x0c}Wzy\\O{k"
    str_2 = "\t"
    dict_0 = {str_0: str_0, str_1: str_1, str_2: str_2}
    config_0 = module_0.Config(dict_0)


def test_case_3():
    config_0 = module_0.Config()
    str_0 = "X\rP'-+]B\nt@"
    none_type_0 = config_0.__setattr__(str_0, config_0)
    config_0.__getattr__(none_type_0)


def test_case_4():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_5():
    config_0 = module_0.Config()
    var_0 = module_1.getmembers(config_0)
    list_0 = [config_0, var_0, config_0]
    str_0 = "N\r)2\x0cWgwkQ"
    none_type_0 = config_0.__setitem__(str_0, var_0)
    none_type_1 = config_0.update(*list_0)
    config_1 = module_0.Config(converters=var_0)
    var_1 = config_0.update_config(config_0)
    var_1.update(**config_1)


def test_case_6():
    config_0 = module_0.Config()
    str_0 = "X\rP'-+]B\nt&@"
    none_type_0 = config_0.__setattr__(str_0, config_0)
    config_0.update_config(str_0)


def test_case_7():
    config_0 = module_0.Config()
    var_0 = module_1.getmembers(config_0)
    list_0 = [config_0, var_0, config_0]
    none_type_0 = config_0.update(*list_0)
    config_0.__getattr__(list_0)


def test_case_8():
    config_0 = module_0.Config()
    var_0 = module_1.isdatadescriptor(config_0)
    config_0.update_config(var_0)


def test_case_9():
    config_0 = module_0.Config()
    var_0 = module_1.getmembers(config_0)
    list_0 = [config_0, var_0, config_0]
    none_type_0 = config_0.update(*list_0)
    config_1 = module_0.Config(env_prefix=none_type_0, converters=config_0)
    none_type_0.update(**config_1)


def test_case_10():
    config_0 = module_0.Config()
    var_0 = module_2.LocalCertCreator.TRUSTME
    module_0.Config(converters=var_0)


def test_case_11():
    config_0 = module_0.Config()
    var_0 = module_1.getmembers(config_0)
    config_1 = module_0.Config(converters=var_0)
    var_1 = config_0.update_config(config_0)
    str_0 = "LOCAL_CERT_CREATOR"
    config_0.__setattr__(str_0, config_0)


def test_case_12():
    str_0 = ""
    config_0 = module_0.Config(env_prefix=str_0, keep_alive=str_0)
    config_0.load_environment_vars(str_0)


def test_case_13():
    config_0 = module_0.Config()
    var_0 = module_1.getmembers(config_0)
    list_0 = [config_0, var_0, config_0]
    none_type_0 = config_0.update(*list_0)
    config_1 = module_0.Config(converters=var_0)
    none_type_0.update(**config_1)


def test_case_14():
    config_0 = module_0.Config()
    var_0 = module_1.getmembers(config_0)
    list_0 = [var_0, var_0, var_0]
    none_type_0 = config_0.update(*list_0)
    config_1 = module_0.Config(converters=var_0)
    var_1 = config_0.update_config(config_0)
    str_0 = "a\nSS}#wQ*$/Unck{"
    str_1 = "-zcx4\r%B}t ZHVAnPwF"
    none_type_1 = config_0.__setattr__(str_1, var_1)
    config_2 = module_0.Config(config_0)
    var_2 = var_1.__repr__()
    config_2.update_config(str_0)
