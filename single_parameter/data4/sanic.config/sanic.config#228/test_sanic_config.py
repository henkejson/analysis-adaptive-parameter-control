# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    none_type_0 = None
    config_0 = module_0.Config()
    config_1 = module_0.Config(keep_alive=none_type_0, converters=config_0)
    var_0 = config_1.update_config(config_1)
    config_1.load_environment_vars(config_0)


def test_case_2():
    str_0 = "USE_UVLOOP"
    config_0 = module_0.Config(keep_alive=str_0)


def test_case_3():
    str_0 = "n_>l`+t\x0cOHg9"
    config_0 = module_0.Config(env_prefix=str_0)
    int_0 = -346
    config_0.update_config(int_0)


def test_case_4():
    str_0 = "cUC"
    str_1 = "\n        Run a HTTP connection.\n\n        Timeouts and some additional error handling occur here, while most of\n        everything else happens in class Http or in code called from there.\n        "
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_1: str_1}
    config_0 = module_0.Config(dict_0)


def test_case_5():
    config_0 = module_0.Config()
    list_0 = config_0.update_config(config_0)


def test_case_6():
    str_0 = "n=tF3mP#IkH#(yUu1\x0b"
    module_0.Config(keep_alive=str_0, converters=str_0)


def test_case_7():
    config_0 = module_0.Config()
    str_0 = "8*liNIa/dZgM-}KYXb"
    none_type_0 = None
    none_type_1 = config_0.register_type(none_type_0)
    int_0 = 507
    str_0.__setitem__(str_0, int_0)


def test_case_8():
    config_0 = module_0.Config()
    str_0 = "8*liNIa/dZgM-}KYXb"
    int_0 = 507
    none_type_0 = config_0.__setitem__(str_0, int_0)


def test_case_9():
    set_0 = set()
    config_0 = module_0.Config(env_prefix=set_0)
    none_type_0 = config_0.update()


def test_case_10():
    config_0 = module_0.Config()
    str_0 = "8*liNIa/dZgM-}KYXb"
    config_0.__getattr__(str_0)


def test_case_11():
    config_0 = module_0.Config()
    config_0.__getattr__(config_0)


def test_case_12():
    bytes_0 = b"#"
    config_0 = module_0.Config()
    config_0.update_config(bytes_0)


def test_case_13():
    str_0 = "_FALLBACK_ERROR_FORMAT"
    str_1 = "[send]: "
    str_2 = "_&-ETPu?O&\x0bYd|r}"
    dict_0 = {str_0: str_0, str_1: str_0, str_2: str_1}
    module_0.Config(dict_0, converters=dict_0)


def test_case_14():
    config_0 = module_0.Config()
    str_0 = "LOCAL_CERT_CREATOR"
    config_0.__setattr__(str_0, config_0)
