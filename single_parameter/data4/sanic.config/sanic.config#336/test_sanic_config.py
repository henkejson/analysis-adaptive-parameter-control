# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import inspect as module_1
import sanic.errorpages as module_2


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    str_0 = 'A][)"Kr<Ts}Q&Z9'
    config_0 = module_0.Config(keep_alive=str_0, converters=str_0)


def test_case_2():
    bytes_0 = b"\x0eS\xc3\xd62\xf0\xf2w<"
    none_type_0 = None
    var_0 = module_1.getmembers(bytes_0, none_type_0)
    none_type_1 = None
    config_0 = module_0.Config(env_prefix=none_type_1)
    config_0.__getattr__(var_0)


def test_case_3():
    config_0 = module_0.Config()
    str_0 = "Rx+$"
    str_1 = "9A$>("
    none_type_0 = config_0.__setitem__(str_1, str_1)
    var_0 = config_0.update_config(config_0)
    module_0.Config(str_0, str_0)


def test_case_4():
    none_type_0 = None
    config_0 = module_0.Config(
        none_type_0, keep_alive=none_type_0, converters=none_type_0
    )
    config_0.update_config(none_type_0)


def test_case_5():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_6():
    config_0 = module_0.Config()
    str_0 = "Rx+$"
    none_type_0 = config_0.__setitem__(str_0, config_0)
    str_1 = 'Update app.config.\n\n        .. note::\n\n            Only upper case settings are considered\n\n        See [Configuration](/en/guide/deployment/configuration) for more details.\n\n        Args:\n            config (Union[bytes, str, dict, Any]): Path to py file holding\n                settings, dict holding settings, or any object holding\n                settings.\n\n        Examples:\n            You can upload app config by providing path to py file\n            holding settings.\n\n            ```python\n            # /some/py/file\n            A = 1\n            B = 2\n            ```\n\n            ```python\n            config.update_config("${some}/py/file")\n            ```\n\n            Yes you can put environment variable here, but they must be provided\n            in format: ``${some_env_var}``, and mark that ``$some_env_var`` is\n            treated as plain string.\n\n            You can upload app config by providing dict holding settings.\n\n            ```python\n            d = {"A": 1, "B": 2}\n            config.update_config(d)\n            ```\n\n            You can upload app config by providing any object holding settings,\n            but in such case config.__dict__ will be used as dict holding settings.\n\n            ```python\n            class C:\n                A = 1\n                B = 2\n\n            config.update_config(C)\n            ```\n        '
    none_type_1 = config_0.__setitem__(str_1, str_1)
    config_0.__getattr__(config_0)


def test_case_7():
    str_0 = "EA"
    config_0 = module_0.Config(env_prefix=str_0)
    none_type_0 = config_0.update()
    none_type_1 = config_0.update()
    module_2.check_error_format(none_type_0)


def test_case_8():
    config_0 = module_0.Config()
    str_0 = "Rx+$"
    none_type_0 = config_0.__setitem__(str_0, config_0)
    var_0 = config_0.load_environment_vars()
    str_1 = "**F\r"
    config_0.update_config(str_1)


def test_case_9():
    str_0 = "@R>!FR:l=o2<"
    module_0.Config(keep_alive=str_0, converters=str_0)


def test_case_10():
    none_type_0 = None
    config_0 = module_0.Config(
        none_type_0, keep_alive=none_type_0, converters=none_type_0
    )
    var_0 = config_0.update_config(config_0)
    config_0.__getattr__(none_type_0)


def test_case_11():
    config_0 = module_0.Config()
    str_0 = "Rx+$"
    var_0 = module_1.isdatadescriptor(str_0)
    str_1 = "LOCAL_CERT_CREATOR"
    config_0.__setitem__(str_1, str_1)


def test_case_12():
    config_0 = module_0.Config()
    str_0 = "FALLBACK_ERROR_FORMAT"
    config_0.__setattr__(str_0, config_0)


def test_case_13():
    str_0 = ""
    config_0 = module_0.Config()
    config_0.load_environment_vars(str_0)
