# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import inspect as module_1


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    str_0 = "M"
    dict_0 = {str_0: str_0}
    config_0 = module_0.Config(dict_0, keep_alive=dict_0, converters=str_0)


def test_case_2():
    str_0 = "S"
    module_0.Config(env_prefix=str_0, converters=str_0)


def test_case_3():
    bool_0 = True
    config_0 = module_0.Config()
    config_0.__getattr__(bool_0)


def test_case_4():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0)
    none_type_1 = config_0.register_type(config_0)
    config_0.__getattr__(config_0)


def test_case_5():
    bool_0 = True
    config_0 = module_0.Config()
    config_0.update_config(bool_0)


def test_case_6():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_7():
    str_0 = "S"
    config_0 = module_0.Config(env_prefix=str_0)
    var_0 = module_1.isdatadescriptor(str_0)


def test_case_8():
    str_0 = "]T\\jR>4NQ0:"
    config_0 = module_0.Config(env_prefix=str_0)
    config_0.update_config(str_0)


def test_case_9():
    int_0 = 301
    config_0 = module_0.Config(keep_alive=int_0)
    none_type_0 = config_0.register_type(int_0)
    config_0.register_type(int_0)


def test_case_10():
    str_0 = "_"
    config_0 = module_0.Config(env_prefix=str_0)
    var_0 = config_0.update_config(config_0)
    none_type_0 = config_0.register_type(config_0)
    config_0.update_config(var_0)
