# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    none_type_0 = None
    config_0 = module_0.Config(none_type_0, none_type_0, converters=none_type_0)
    float_0 = 1301.600665
    module_0.DescriptorMeta(float_0, *float_0)


def test_case_2():
    none_type_0 = None
    str_0 = ";\nYum.vL\\d"
    int_0 = 301
    dict_0 = {str_0: int_0}
    none_type_1 = None
    config_0 = module_0.Config(dict_0, keep_alive=none_type_1, converters=none_type_1)
    config_0.__getattr__(none_type_0)


def test_case_3():
    float_0 = -1093.34
    config_0 = module_0.Config()
    config_0.update_config(float_0)


def test_case_4():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_5():
    bool_0 = True
    none_type_0 = None
    none_type_1 = None
    config_0 = module_0.Config(none_type_1, none_type_1, converters=none_type_1)
    config_0.__setitem__(bool_0, none_type_0)


def test_case_6():
    str_0 = ";\nYum.vL\\d"
    int_0 = 301
    dict_0 = {str_0: int_0}
    none_type_0 = None
    config_0 = module_0.Config(dict_0, keep_alive=none_type_0, converters=none_type_0)
    config_0.__getattr__(config_0)


def test_case_7():
    str_0 = "o"
    config_0 = module_0.Config(keep_alive=str_0)
    float_0 = -1093.34
    config_1 = module_0.Config()
    config_1.update_config(float_0)


def test_case_8():
    config_0 = module_0.Config()
    none_type_0 = config_0.register_type(config_0)
    var_0 = config_0.load_environment_vars()
    var_0.__getattr__(var_0)


def test_case_9():
    str_0 = "Set up the event loop.\n\n        An internal method that sets up the event loop to uvloop if\n        possible, or a Windows selector loop if on Windows.\n\n        Returns:\n            None\n        "
    config_0 = module_0.Config()
    config_0.update_config(str_0)


def test_case_10():
    bool_0 = True
    module_0.Config(converters=bool_0)


def test_case_11():
    bool_0 = True
    config_0 = module_0.Config()
    module_0.Config(env_prefix=bool_0)


def test_case_12():
    config_0 = module_0.Config()
    none_type_0 = config_0.register_type(config_0)
    config_0.register_type(config_0)


def test_case_13():
    bool_0 = False
    none_type_0 = None
    list_0 = [bool_0, none_type_0]
    config_0 = module_0.Config(none_type_0, none_type_0, converters=list_0)
    config_1 = module_0.Config()
    str_0 = "MOTD"
    none_type_1 = config_1.__setitem__(str_0, config_1)
    config_0.__getattr__(bool_0)


def test_case_14():
    str_0 = "LOCAL_CERT_CREATOR"
    config_0 = module_0.Config()
    config_0.__setitem__(str_0, str_0)
