# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import inspect as module_1
import sanic.http.http1 as module_2


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    str_0 = "f\t\\`1F(s=V1GXG>zQ"
    module_0.Config(env_prefix=str_0, keep_alive=str_0, converters=str_0)


def test_case_2():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0, keep_alive=none_type_0)


def test_case_3():
    none_type_0 = None
    none_type_1 = None
    config_0 = module_0.Config(env_prefix=none_type_1)
    config_0.__getattr__(none_type_0)


def test_case_4():
    config_0 = module_0.Config()
    config_0.__getattr__(config_0)


def test_case_5():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0, keep_alive=none_type_0)
    config_0.update_config(none_type_0)


def test_case_6():
    config_0 = module_0.Config()
    none_type_0 = config_0.update_config(config_0)


def test_case_7():
    config_0 = module_0.Config()
    none_type_0 = None
    config_1 = module_0.Config(converters=none_type_0)
    dict_0 = {}
    config_2 = module_0.Config()
    config_2.__setitem__(dict_0, dict_0)


def test_case_8():
    bool_0 = False
    var_0 = module_1.getmembers(bool_0, bool_0)
    module_0.Config(var_0, converters=var_0)


def test_case_9():
    config_0 = module_0.Config()
    none_type_0 = config_0.update(**config_0)


def test_case_10():
    config_0 = module_0.Config()
    config_1 = module_0.Config(keep_alive=config_0)


def test_case_11():
    bool_0 = False
    str_0 = "A container to manipulate cookies.\n\n    CookieJar dynamically writes headers as cookies are added and removed\n    It gets around the limitation of one header per name by using the\n    MultiHeader class to provide a unique key that encodes to Set-Cookie.\n\n    Args:\n        headers (Header): The headers object to write cookies to.\n    "
    config_0 = module_0.Config()
    config_1 = module_0.Config(env_prefix=str_0, keep_alive=bool_0)
    var_0 = config_0.update_config(config_1)
    none_type_0 = config_1.update()


def test_case_12():
    str_0 = 'TRp94$"Ps1\n"gc_c'
    config_0 = module_0.Config()
    config_0.update_config(str_0)


def test_case_13():
    str_0 = "B<QrXf>"
    config_0 = module_0.Config(converters=str_0)
    int_0 = 100000000
    dict_0 = {str_0: str_0, str_0: int_0}
    module_2.Http(dict_0)
