# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    int_0 = 1119
    module_0.Config(converters=int_0)


def test_case_2():
    dict_0 = {}
    config_0 = module_0.Config(dict_0, keep_alive=dict_0)


def test_case_3():
    str_0 = "Restart the worker.\n\n        Args:\n            name (str): The name of the process to restart.\n            all_workers (bool): Whether to restart all workers.\n            zero_downtime (bool): Whether to restart with zero downtime.\n        "
    config_0 = module_0.Config(env_prefix=str_0)


def test_case_4():
    str_0 = "NFC"
    none_type_0 = None
    config_0 = module_0.Config(
        none_type_0, keep_alive=none_type_0, converters=none_type_0
    )
    config_0.__getattr__(str_0)


def test_case_5():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0, converters=none_type_0)
    config_0.__setitem__(none_type_0, none_type_0)


def test_case_6():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0, converters=none_type_0)
    config_0.update_config(none_type_0)


def test_case_7():
    none_type_0 = None
    dict_0 = {none_type_0: none_type_0, none_type_0: none_type_0}
    config_0 = module_0.Config(converters=dict_0)
    config_0.__setattr__(none_type_0, config_0)


def test_case_8():
    none_type_0 = None
    config_0 = module_0.Config(keep_alive=none_type_0)
    config_0.__getattr__(config_0)


def test_case_9():
    bool_0 = True
    str_0 = 'Returns loaded module provided as a file path.\n\n    :param args:\n        Corresponds to importlib.util.spec_from_file_location location\n        parameters,but with this differences:\n        - It has to be of a string or bytes type.\n        - You can also use here environment variables\n          in format ${some_env_var}.\n          Mark that $some_env_var will not be resolved as environment variable.\n    :encoding:\n        If location parameter is of a bytes type, then use this encoding\n        to decode it into string.\n    :param args:\n        Corresponds to the rest of importlib.util.spec_from_file_location\n        parameters.\n    :param kwargs:\n        Corresponds to the rest of importlib.util.spec_from_file_location\n        parameters.\n\n    For example You can:\n\n        some_module = load_module_from_file_location(\n            "some_module_name",\n            "/some/path/${some_env_var}"\n        )\n    '
    none_type_0 = None
    config_0 = module_0.Config(none_type_0, keep_alive=bool_0, converters=none_type_0)
    config_0.update_config(str_0)


def test_case_10():
    str_0 = "Restart the worker.\n\n        Args:\n            name (str): The name of the process to restart.\n            all_workers (bool): Whether to restart all workers.\n            zero_downtime (bool): Whether to restart with zero downtime.\n        "
    config_0 = module_0.Config(env_prefix=str_0)
    var_0 = config_0.update_config(config_0)


def test_case_11():
    str_0 = 'Returns loaded module provided as a file path.\n\n    :param args:\n        Corresponds to importlib.util.spec_from_file_location location\n        parameters,but with this differences:\n        - It has to be of a string or bytes type.\n        - You can also use here environment variables\n          in format ${some_env_var}.\n          Mark that $some_env_var will not be resolved as environment variable.\n    :encoding:\n        If location parameter is of a bytes type, then use this encoding\n        to decode it into string.\n    :param args:\n        Corresponds to the rest of importlib.util.spec_from_file_location\n        parameters.\n    :param kwargs:\n        Corresponds to the rest of importlib.util.spec_from_file_location\n        parameters.\n\n    For example You can:\n\n        some_module = load_module_from_file_location(\n            "some_module_name",\n            "/some/path/${some_env_var}"\n        )\n    '
    module_0.Config(str_0, str_0)


def test_case_12():
    none_type_0 = None
    dict_0 = {none_type_0: none_type_0, none_type_0: none_type_0}
    config_0 = module_0.Config(converters=dict_0)
    config_0.register_type(none_type_0)
