# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import inspect as module_1
import sanic.helpers as module_2
import sanic.errorpages as module_3


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    none_type_0 = None
    str_0 = "\\ER"
    dict_0 = {str_0: str_0, str_0: str_0}
    bool_0 = False
    config_0 = module_0.Config(dict_0, keep_alive=bool_0, converters=bool_0)
    config_0.update_config(none_type_0)


def test_case_2():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0)


def test_case_3():
    str_0 = "WvNZHv~rkr/^kWV"
    module_0.Config(str_0)


def test_case_4():
    config_0 = module_0.Config()
    var_0 = module_1.getmembers(config_0)
    config_0.update_config(var_0)


def test_case_5():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)
    config_0.__getattr__(config_0)


def test_case_6():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)
    config_0.update_config(var_0)


def test_case_7():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_8():
    config_0 = module_0.Config()
    default_0 = module_2.Default()
    none_type_0 = config_0.register_type(default_0)


def test_case_9():
    config_0 = module_0.Config()
    none_type_0 = config_0.register_type(config_0)
    str_0 = "W vNjZHv~rkr/T^kWV"
    none_type_1 = config_0.__setitem__(str_0, config_0)
    config_0.__getattr__(config_0)


def test_case_10():
    none_type_0 = None
    var_0 = none_type_0.__repr__()
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    module_0.Config(keep_alive=none_type_0, converters=var_2)


def test_case_11():
    config_0 = module_0.Config()
    none_type_0 = config_0.register_type(config_0)
    str_0 = "W vNjZHv~rkr/T^kWV"
    none_type_1 = config_0.__setitem__(str_0, config_0)
    none_type_2 = config_0.__setattr__(str_0, none_type_1)
    config_0.update_config(str_0)


def test_case_12():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    str_0 = "SameSite"
    config_0 = module_0.Config(env_prefix=str_0)
    config_0.update(*list_0)


def test_case_13():
    str_0 = "A matching result of a MIME string against a header.\n\n    This class is a representation of a matching result of a MIME string\n    against a header. It encapsulates the MIME string, the header, and\n    provides methods for matching against other MIME strings.\n\n    Args:\n        mime (str): The MIME string to match.\n        header (MediaType): The header to match against, if any.\n    "
    set_0 = {str_0, str_0, str_0}
    config_0 = module_0.Config(converters=set_0)
    int_0 = 677
    module_3.check_error_format(int_0)
