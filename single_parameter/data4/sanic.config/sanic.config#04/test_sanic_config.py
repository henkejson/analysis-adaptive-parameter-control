# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import sanic.constants as module_1


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    none_type_0 = None
    str_0 = "4diVO`YFN<\x0bkJo"
    config_0 = module_0.Config(keep_alive=str_0)
    config_0.update_config(none_type_0)


def test_case_2():
    local_cert_creator_0 = module_1.LocalCertCreator.TRUSTME
    config_0 = module_0.Config(env_prefix=local_cert_creator_0)


def test_case_3():
    none_type_0 = None
    str_0 = "J5\ta0(;|>6rS"
    bool_0 = True
    dict_0 = {str_0: str_0, str_0: bool_0, str_0: str_0, str_0: bool_0}
    config_0 = module_0.Config(dict_0, keep_alive=bool_0)
    config_0.update_config(none_type_0)


def test_case_4():
    none_type_0 = None
    config_0 = module_0.Config(keep_alive=none_type_0, converters=none_type_0)
    config_0.__getattr__(config_0)


def test_case_5():
    bytes_0 = b"f\xd5T+\xc9\xefp\xdfg5\xd9\xbd\xc1\x89\xeeR\x1e\x9c\xac\x9b"
    config_0 = module_0.Config(converters=bytes_0)
    var_0 = config_0.update_config(config_0)


def test_case_6():
    str_0 = "mv\t"
    config_0 = module_0.Config()
    config_0.update_config(str_0)


def test_case_7():
    none_type_0 = None
    config_0 = module_0.Config(keep_alive=none_type_0, converters=none_type_0)
    config_0.__getattr__(none_type_0)


def test_case_8():
    none_type_0 = None
    config_0 = module_0.Config(
        none_type_0, none_type_0, none_type_0, converters=none_type_0
    )
    config_0.update_config(none_type_0)


def test_case_9():
    bool_0 = False
    config_0 = module_0.Config(converters=bool_0)
    var_0 = config_0.update_config(config_0)


def test_case_10():
    config_0 = module_0.Config()
    none_type_0 = None
    none_type_1 = config_0.register_type(none_type_0)
    config_1 = module_0.Config(keep_alive=none_type_0)
    str_0 = "4diVO`YFN<\x0bkJo"
    none_type_2 = config_0.__setattr__(str_0, str_0)
    config_0.register_type(none_type_2)


def test_case_11():
    bytes_0 = b"f\xd5T+\xc9\xefp\xdfg5\xd9\xbd\xc1\x89\xeeR\x1e\x9c\xac\x9b"
    none_type_0 = None
    str_0 = "J5\ta0(;|>6rS"
    config_0 = module_0.Config(keep_alive=bytes_0, converters=none_type_0)
    config_1 = module_0.Config(none_type_0)
    none_type_1 = config_1.__setitem__(str_0, none_type_0)
    var_0 = bytes_0.__repr__()
    var_1 = config_1.update_config(config_0)


def test_case_12():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0, converters=none_type_0)
    config_1 = module_0.Config()
    str_0 = "LOCAL_CERT_CREATOR"
    config_0.__setattr__(str_0, none_type_0)


def test_case_13():
    none_type_0 = None
    config_0 = module_0.Config(
        none_type_0, none_type_0, none_type_0, converters=none_type_0
    )
    str_0 = "websocket_max_size"
    none_type_1 = config_0.__setattr__(str_0, none_type_0)
    config_1 = module_0.Config(keep_alive=none_type_0, converters=none_type_0)
    str_1 = "KEEP_AIVE"
    local_cert_creator_0 = module_1.LocalCertCreator.MKCERT
    none_type_2 = config_0.__setattr__(local_cert_creator_0, config_0)
    str_2 = "|tr"
    str_3 = "8-\\\tJtpcBQoyC|"
    bool_0 = False
    bool_1 = True
    str_4 = "_FALLBACK_ERROR_FORMAT"
    dict_0 = {str_2: str_1, str_3: bool_0, str_3: bool_1, str_4: str_3}
    module_0.Config(dict_0, converters=none_type_1)
