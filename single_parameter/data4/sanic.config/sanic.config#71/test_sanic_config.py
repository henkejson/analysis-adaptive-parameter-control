# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    complex_0 = -361.43023 + 932j
    config_0 = module_0.Config(keep_alive=complex_0)


def test_case_2():
    config_0 = module_0.Config()
    none_type_0 = None
    config_0.update_config(none_type_0)


def test_case_3():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_4():
    int_0 = 3328
    config_0 = module_0.Config(keep_alive=int_0)
    none_type_0 = config_0.register_type(int_0)
    var_0 = config_0.update_config(config_0)
    config_0.update_config(int_0)


def test_case_5():
    complex_0 = -361.43023 + 932j
    config_0 = module_0.Config(keep_alive=complex_0)
    bool_0 = True
    config_0.__setitem__(bool_0, complex_0)


def test_case_6():
    bool_0 = True
    none_type_0 = None
    module_0.Config(bool_0, bool_0, converters=none_type_0)


def test_case_7():
    complex_0 = -361.43023 + 932j
    config_0 = module_0.Config(keep_alive=complex_0)
    config_0.__getattr__(config_0)


def test_case_8():
    int_0 = -3204
    bool_0 = False
    config_0 = module_0.Config(keep_alive=bool_0)
    config_1 = module_0.Config(keep_alive=int_0)
    none_type_0 = config_0.register_type(int_0)
    str_0 = "LOCAL_CERT_CREATOR"
    config_1.__setitem__(str_0, config_0)


def test_case_9():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0, converters=none_type_0)
    list_0 = [config_0, none_type_0, none_type_0, none_type_0]
    config_0.update(*list_0, **config_0)


def test_case_10():
    int_0 = 3322
    bool_0 = False
    config_0 = module_0.Config(keep_alive=bool_0)
    none_type_0 = None
    module_0.Config(keep_alive=none_type_0, converters=int_0)


def test_case_11():
    bool_0 = True
    none_type_0 = None
    module_0.Config(env_prefix=bool_0, converters=none_type_0)


def test_case_12():
    int_0 = 3344
    config_0 = module_0.Config(keep_alive=int_0)
    bytes_0 = b"\x7f}\x1b\xb7"
    config_0.update_config(bytes_0)


def test_case_13():
    str_0 = "Set the serving state of the application.\n\n        This method is used to set the serving state of the application.\n        It is used internally by Sanic and should not typically be called\n        manually.\n\n        Args:\n            serving (bool): Whether the application is serving.\n        "
    bool_0 = False
    dict_0 = {str_0: bool_0, str_0: str_0}
    module_0.Config(dict_0, bool_0, converters=str_0)


def test_case_14():
    int_0 = 3328
    config_0 = module_0.Config(keep_alive=int_0)
    list_0 = [config_0, int_0]
    config_1 = module_0.Config(converters=list_0)
    none_type_0 = config_0.register_type(list_0)
    var_0 = config_0.update_config(config_0)
    config_0.update_config(int_0)
