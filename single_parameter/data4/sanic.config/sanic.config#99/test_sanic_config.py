# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0


def test_case_0():
    none_type_0 = None
    config_0 = module_0.Config(converters=none_type_0)


def test_case_1():
    int_0 = -5382
    module_0.Config(int_0)


def test_case_2():
    str_0 = "\x0cPhoe`59ayjj'"
    complex_0 = -2607.495 + 953.343624j
    config_0 = module_0.Config()
    none_type_0 = config_0.register_type(str_0)
    config_0.__getattr__(complex_0)


def test_case_3():
    config_0 = module_0.Config()
    config_0.__getattr__(config_0)


def test_case_4():
    str_0 = "%z"
    config_0 = module_0.Config(env_prefix=str_0, converters=str_0)


def test_case_5():
    none_type_0 = None
    config_0 = module_0.Config(keep_alive=none_type_0)
    none_type_1 = config_0.update(**config_0)


def test_case_6():
    str_0 = "%z"
    config_0 = module_0.Config(env_prefix=str_0, converters=str_0)
    var_0 = config_0.update_config(config_0)


def test_case_7():
    none_type_0 = None
    str_0 = "d"
    config_0 = module_0.Config(keep_alive=none_type_0)
    config_0.update_config(str_0)


def test_case_8():
    none_type_0 = None
    config_0 = module_0.Config(keep_alive=none_type_0)
    str_0 = "A matching result of a MIME string against a header.\n\n    This class is a representation of a matching result of a MIME string\n    against a header. It encapsulates the MIME string, the header, and\n    provides methods for matching against other MIME strings.\n\n    Args:\n        mime (str): The MIME string to match.\n        header (MediaType): The header to match against, if any.\n    "
    none_type_1 = config_0.__setitem__(str_0, str_0)
    none_type_2 = config_0.update(**config_0)


def test_case_9():
    bool_0 = False
    config_0 = module_0.Config(keep_alive=bool_0)


def test_case_10():
    str_0 = "\x0cPhoe`59ayjj'"
    module_0.Config(converters=str_0)


def test_case_11():
    none_type_0 = None
    config_0 = module_0.Config(keep_alive=none_type_0)
    config_0.update_config(none_type_0)


def test_case_12():
    config_0 = module_0.Config()
    bool_0 = True
    var_0 = config_0.update_config(config_0)
    none_type_0 = None
    config_1 = module_0.Config(env_prefix=none_type_0)
    config_0.update_config(bool_0)
