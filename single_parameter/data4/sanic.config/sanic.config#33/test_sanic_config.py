# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import sanic.constants as module_1
import sanic.errorpages as module_2
import inspect as module_3


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    local_cert_creator_0 = module_1.LocalCertCreator.TRUSTME
    dict_0 = {
        local_cert_creator_0: local_cert_creator_0,
        local_cert_creator_0: local_cert_creator_0,
    }
    dict_1 = {}
    none_type_0 = None
    config_0 = module_0.Config(dict_1, none_type_0)
    config_0.__getattr__(dict_0)


def test_case_2():
    complex_0 = -1007.5 - 625.515j
    config_0 = module_0.Config()
    config_1 = module_0.Config(config_0, keep_alive=complex_0, converters=config_0)
    none_type_0 = None
    none_type_1 = config_0.update()
    none_type_2 = config_0.update()
    str_0 = "B@B9K"
    none_type_3 = config_1.__setitem__(str_0, complex_0)
    none_type_4 = config_0.register_type(config_0)
    var_0 = config_0.update_config(config_0)
    config_2 = module_0.Config()
    module_2.check_error_format(none_type_0)


def test_case_3():
    config_0 = module_0.Config()
    var_0 = module_3.getmembers(config_0)
    config_0.update_config(var_0)


def test_case_4():
    config_0 = module_0.Config()
    none_type_0 = None
    config_0.update_config(none_type_0)


def test_case_5():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_6():
    none_type_0 = None
    str_0 = "E m(O8-.hB>$E/Rs%6"
    config_0 = module_0.Config(converters=none_type_0)
    module_0.Config(none_type_0, converters=str_0)


def test_case_7():
    str_0 = 'A helper method to register class-based view or functions as a handler to the application url routes.\n\n        Args:\n            handler (RouteHandler): Function or class-based view used as a route handler.\n            uri (str): Path of the URL.\n            methods (Iterable[str]): List or tuple of methods allowed; these are overridden if using an HTTPMethodView.\n            host (Optional[Union[str, List[str]]]): Hostname or hostnames to match for this route.\n            strict_slashes (Optional[bool]): If set, a route\'s slashes will be strict. E.g. `/foo` will not match `/foo/`.\n            version (Optional[Union[int, str, float]]): Version of the API for this route.\n            name (Optional[str]): User-defined route name for `url_for`.\n            stream (bool): Boolean specifying if the handler is a stream handler.\n            version_prefix (str): URL path that should be before the version value; default: ``/v``.\n            error_format (Optional[str]): Custom error format string.\n            unquote (bool): Boolean specifying if the handler requires unquoting.\n            ctx_kwargs (Any): Keyword arguments that begin with a `ctx_*` prefix will be appended to the route context (``route.ctx``). See below for examples.\n\n        Returns:\n            RouteHandler: The route handler.\n\n        Examples:\n            ```python\n            from sanic import Sanic, text\n\n            app = Sanic("test")\n\n            async def handler(request):\n                return text("OK")\n\n            app.add_route(handler, "/test", methods=["GET", "POST"])\n            ```\n\n            You can use `ctx_kwargs` to add custom context to the route. This\n            can often be useful when wanting to add metadata to a route that\n            can be used by other parts of the application (like middleware).\n\n            ```python\n            from sanic import Sanic, text\n\n            app = Sanic("test")\n\n            async def handler(request):\n                return text("OK")\n\n            async def custom_middleware(request):\n                if request.route.ctx.monitor:\n                    do_some_monitoring()\n\n            app.add_route(handler, "/test", methods=["GET", "POST"], ctx_monitor=True)\n            app.register_middleware(custom_middleware)\n        '
    str_1 = "-R"
    dict_0 = {str_0: str_0, str_1: str_1, str_0: str_0, str_0: str_0}
    none_type_0 = None
    config_0 = module_0.Config(none_type_0, none_type_0, dict_0, converters=dict_0)
    config_0.update(**str_0)


def test_case_8():
    config_0 = module_0.Config()
    none_type_0 = config_0.register_type(config_0)
    config_0.update_config(none_type_0)


def test_case_9():
    config_0 = module_0.Config()
    str_0 = "<"
    none_type_0 = config_0.__setitem__(str_0, str_0)
    var_0 = config_0.update_config(config_0)
    none_type_1 = None
    config_0.update_config(none_type_1)


def test_case_10():
    str_0 = "3mBH+\nZSLJ5)!pXw-Y>"
    str_1 = "_method"
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=str_1, converters=none_type_0)
    config_0.update_config(str_0)


def test_case_11():
    str_0 = ""
    none_type_0 = None
    config_0 = module_0.Config(converters=none_type_0)
    config_0.load_environment_vars(str_0)
