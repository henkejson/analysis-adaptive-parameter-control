# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    none_type_0 = None
    config_0 = module_0.Config()
    str_0 = ".yc"
    config_1 = module_0.Config(none_type_0, converters=str_0)
    config_1.__getattr__(config_1)


def test_case_2():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0)
    config_0.__getattr__(none_type_0)


def test_case_3():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)
    var_1 = var_0.__bool__()
    none_type_0 = config_0.register_type(var_1)
    var_1.register(var_0, config_0)


def test_case_4():
    config_0 = module_0.Config()
    none_type_0 = None
    config_0.update_config(none_type_0)


def test_case_5():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_6():
    config_0 = module_0.Config()
    bool_0 = True
    var_0 = config_0.load_environment_vars()
    config_1 = module_0.Config(keep_alive=bool_0)
    none_type_0 = None
    config_0.__setattr__(config_0, none_type_0)


def test_case_7():
    none_type_0 = None
    str_0 = "g]5&n.d#P+x4:f<UU]Y$"
    module_0.Config(none_type_0, converters=str_0)


def test_case_8():
    str_0 = "_`\x0b]\raU8Z2zsB\x0ce|w<qz"
    none_type_0 = None
    config_0 = module_0.Config(converters=none_type_0)
    none_type_1 = config_0.__setitem__(str_0, str_0)
    config_1 = module_0.Config()


def test_case_9():
    str_0 = "_FALLBACK_ERROR_FORMAT"
    dict_0 = {str_0: str_0}
    module_0.Config(dict_0, str_0)


def test_case_10():
    config_0 = module_0.Config()
    config_0.__getattr__(config_0)


def test_case_11():
    none_type_0 = None
    str_0 = ".pyc"
    str_1 = "g]5&n.d#P+x4:f<UU]Y$"
    config_0 = module_0.Config(none_type_0, converters=str_0)
    config_0.update_config(str_1)


def test_case_12():
    config_0 = module_0.Config()
    none_type_0 = None
    module_0.Config(env_prefix=config_0, keep_alive=none_type_0)


def test_case_13():
    none_type_0 = None
    str_0 = "LOCAL_CERT_CREATOR"
    dict_0 = {str_0: none_type_0}
    config_0 = module_0.Config()
    config_0.update(**dict_0)
