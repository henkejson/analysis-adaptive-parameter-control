# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import inspect as module_1
import sanic.utils as module_2
import sanic.constants as module_3


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    str_0 = "?$cQ~FM`|%o*."
    config_0 = module_0.Config(keep_alive=str_0)


def test_case_2():
    bool_0 = True
    module_0.Config(env_prefix=bool_0)


def test_case_3():
    str_0 = "Required\n========\n  Positional"
    module_0.Config(str_0)


def test_case_4():
    config_0 = module_0.Config()
    none_type_0 = config_0.update(**config_0)


def test_case_5():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_6():
    bool_0 = False
    config_0 = module_0.Config()
    config_0.update_config(bool_0)


def test_case_7():
    str_0 = "*79"
    config_0 = module_0.Config(converters=str_0)


def test_case_8():
    str_0 = "_callback_check_timeouts"
    none_type_0 = None
    bool_0 = False
    config_0 = module_0.Config(none_type_0, none_type_0, bool_0)
    none_type_1 = config_0.__setitem__(str_0, str_0)
    str_1 = "HTTP/1.1"
    var_0 = module_1.isclass(str_1)
    var_1 = var_0.__bool__()
    var_1.respond(str_1)


def test_case_9():
    none_type_0 = None
    config_0 = module_0.Config(
        env_prefix=none_type_0, keep_alive=none_type_0, converters=none_type_0
    )
    var_0 = config_0.update_config(config_0)


def test_case_10():
    bytes_0 = b"\x07\xdcs\xa3\x0c\xf5/g"
    none_type_0 = None
    config_0 = module_0.Config(keep_alive=none_type_0)
    config_0.__getattr__(bytes_0)


def test_case_11():
    str_0 = '{!s}="{!s}"'
    none_type_0 = None
    config_0 = module_0.Config(none_type_0, none_type_0)
    config_0.update_config(str_0)


def test_case_12():
    complex_0 = 947.92869 - 1493.33j
    module_0.Config(converters=complex_0)


def test_case_13():
    none_type_0 = None
    config_0 = module_0.Config(keep_alive=none_type_0)
    var_0 = config_0.update_config(config_0)
    config_0.__getattr__(config_0)


def test_case_14():
    config_0 = module_0.Config()
    list_0 = []
    none_type_0 = config_0.register_type(list_0)
    config_0.register_type(list_0)


def test_case_15():
    config_0 = module_0.Config()
    none_type_0 = config_0.register_type(config_0)
    str_0 = "FALLBACK_ERROR_FORMAT"
    none_type_1 = config_0.__setitem__(str_0, none_type_0)
    str_1 = '@\x0cw"pe|c;4FXl!\x0b&\x0cs},'
    config_1 = module_0.Config()
    module_2.load_module_from_file_location(str_1, config_0)


def test_case_16():
    config_0 = module_0.Config()
    none_type_0 = config_0.register_type(config_0)
    str_0 = "FALLBACK_ERROR_FORMAT"
    none_type_1 = config_0.__setitem__(str_0, none_type_0)
    config_0.__setitem__(str_0, none_type_1)


def test_case_17():
    config_0 = module_0.Config()
    local_cert_creator_0 = module_3.LocalCertCreator.MKCERT
    str_0 = "FALLBACK_ERROR_FORMAT"
    config_0.__setitem__(str_0, local_cert_creator_0)


def test_case_18():
    config_0 = module_0.Config()
    str_0 = "25TV\\qM8(@p"
    none_type_0 = config_0.__setattr__(str_0, str_0)
    none_type_1 = config_0.register_type(config_0)
    list_0 = []
    none_type_2 = config_0.update()
    none_type_3 = config_0.register_type(list_0)
    str_1 = "LOCAL_CERT_CREATOR"
    config_0.__setitem__(str_1, none_type_3)
