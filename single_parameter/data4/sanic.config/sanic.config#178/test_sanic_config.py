# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import inspect as module_1


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    bool_0 = True
    module_0.Config(keep_alive=bool_0, converters=bool_0)


def test_case_2():
    bool_0 = True
    config_0 = module_0.Config(keep_alive=bool_0)
    var_0 = config_0.update_config(config_0)


def test_case_3():
    str_0 = "-V4hOzXu\x0c"
    config_0 = module_0.Config(env_prefix=str_0)
    config_0.__getattr__(str_0)


def test_case_4():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_5():
    str_0 = "INSPECTOR_HOST"
    str_1 = "HAx1G~*a_W Ue\nkG/,"
    str_2 = "s[,"
    bool_0 = False
    dict_0 = {str_0: str_0, str_1: str_1, str_0: str_1, str_2: bool_0}
    config_0 = module_0.Config(dict_0)
    config_0.update_config(bool_0)


def test_case_6():
    config_0 = module_0.Config()
    none_type_0 = None
    config_0.update_config(none_type_0)


def test_case_7():
    bool_0 = True
    config_0 = module_0.Config(keep_alive=bool_0)
    str_0 = "~h "
    str_1 = "@("
    none_type_0 = config_0.__setitem__(str_1, str_0)


def test_case_8():
    bool_0 = True
    var_0 = module_1.isdatadescriptor(bool_0)
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=var_0, keep_alive=none_type_0)
    config_0.update_config(bool_0)


def test_case_9():
    bool_0 = True
    var_0 = module_1.isdatadescriptor(bool_0)
    config_0 = module_0.Config()
    config_0.__getattr__(config_0)


def test_case_10():
    config_0 = module_0.Config()
    none_type_0 = config_0.register_type(config_0)
    none_type_0.__subclasscheck__(none_type_0, none_type_0)


def test_case_11():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)
    var_1 = config_0.load_environment_vars()
    none_type_0 = config_0.register_type(var_1)
    config_0.register_type(var_0)


def test_case_12():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    config_0 = module_0.Config(converters=dict_0)
    var_0 = config_0.update_config(config_0)
    bool_1 = False
    config_0.update_config(bool_1)


def test_case_13():
    bool_0 = True
    config_0 = module_0.Config()
    bytes_0 = b"Not Implemented"
    none_type_0 = config_0.register_type(bytes_0)
    str_0 = "REQUEST_TIMEOUT"
    str_1 = "^8oG|\t\nc[4+=J\x0c\t"
    list_0 = [bool_0]
    none_type_1 = config_0.__setattr__(str_1, list_0)
    config_0.update_config(str_0)


def test_case_14():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    config_0 = module_0.Config(converters=dict_0)
    var_0 = config_0.update_config(config_0)
    str_0 = "LOCAL_CERT_CREATOR"
    config_0.__setitem__(str_0, dict_0)
