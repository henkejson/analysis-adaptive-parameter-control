# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import inspect as module_1


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    bool_0 = False
    none_type_0 = None
    config_0 = module_0.Config(keep_alive=bool_0, converters=none_type_0)
    none_type_1 = config_0.update()


def test_case_2():
    str_0 = "S"
    config_0 = module_0.Config(env_prefix=str_0)


def test_case_3():
    bool_0 = False
    none_type_0 = None
    config_0 = module_0.Config(none_type_0, bool_0, converters=none_type_0)
    none_type_1 = config_0.update()
    none_type_2 = config_0.update(**config_0)


def test_case_4():
    set_0 = set()
    descriptor_meta_0 = module_1.isclass(set_0)
    config_0 = module_0.Config()
    str_0 = "Return a tuple of the priority and definition order.\n\n        This is used to sort the middleware.\n\n        Returns:\n            tuple[int, int]: The priority and definition order.\n        "
    module_0.Config(env_prefix=str_0, converters=str_0)


def test_case_5():
    none_type_0 = None
    config_0 = module_0.Config(converters=none_type_0)
    config_0.__getattr__(none_type_0)


def test_case_6():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_7():
    bool_0 = False
    config_0 = module_0.Config(bool_0)
    config_0.update_config(bool_0)


def test_case_8():
    bool_0 = False
    str_0 = (
        "cannot call recv while another task is already waiting for the next message"
    )
    config_0 = module_0.Config(env_prefix=str_0, keep_alive=bool_0)
    var_0 = module_1.getmembers(str_0)
    config_1 = module_0.Config(config_0, converters=bool_0)
    bool_1 = True
    var_0.respond(bool_1)


def test_case_9():
    config_0 = module_0.Config()
    config_0.__getattr__(config_0)


def test_case_10():
    str_0 = "_;K[\\OfNntJd!TF"
    str_1 = "append_const"
    list_0 = [str_1, str_1, str_1]
    config_0 = module_0.Config(env_prefix=str_0)
    none_type_0 = config_0.__setitem__(str_1, list_0)
    config_0.update_config(str_1)


def test_case_11():
    str_0 = "S"
    module_0.Config(env_prefix=str_0, converters=str_0)


def test_case_12():
    str_0 = "_"
    str_1 = "append_const"
    config_0 = module_0.Config(env_prefix=str_0)
    var_0 = config_0.update_config(config_0)
    none_type_0 = config_0.__setattr__(str_0, str_1)
    config_0.update_config(var_0)
