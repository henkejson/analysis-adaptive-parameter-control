# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import inspect as module_1


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    none_type_0 = None
    config_0 = module_0.Config()
    config_1 = module_0.Config(converters=config_0)
    none_type_1 = config_0.register_type(config_0)
    list_0 = []
    none_type_2 = config_1.update(*list_0, **config_0)
    config_1.update_config(none_type_0)


def test_case_2():
    bool_0 = True
    config_0 = module_0.Config(keep_alive=bool_0)
    config_0.update_config(bool_0)


def test_case_3():
    none_type_0 = None
    config_0 = module_0.Config(none_type_0, none_type_0)
    var_0 = config_0.update_config(config_0)
    config_0.update_config(var_0)


def test_case_4():
    config_0 = module_0.Config()
    var_0 = module_1.getmembers(config_0)
    var_1 = config_0.update_config(config_0)


def test_case_5():
    config_0 = module_0.Config()
    none_type_0 = None
    config_0.update_config(none_type_0)


def test_case_6():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_7():
    bytes_0 = b"n\xb2\xaa\xb2\x89\xe2GS#"
    module_0.Config(converters=bytes_0)


def test_case_8():
    bool_0 = True
    config_0 = module_0.Config(keep_alive=bool_0)
    none_type_0 = None
    var_0 = module_1.isclass(bool_0)
    var_1 = module_1.getmembers(bool_0, none_type_0)
    config_1 = module_0.Config()
    module_0.Config(env_prefix=bool_0, converters=none_type_0)


def test_case_9():
    config_0 = module_0.Config()
    none_type_0 = config_0.register_type(config_0)
    int_0 = 1634
    set_0 = {int_0, int_0, int_0}
    config_0.__getattr__(set_0)


def test_case_10():
    bool_0 = True
    module_0.Config(bool_0, bool_0, bool_0)


def test_case_11():
    str_0 = "0L.#|tY6;w:n47"
    none_type_0 = None
    config_0 = module_0.Config(keep_alive=none_type_0)
    config_0.update_config(str_0)


def test_case_12():
    str_0 = "P"
    config_0 = module_0.Config(keep_alive=str_0)
    var_0 = config_0.load_environment_vars(str_0)
    var_1 = config_0.load_environment_vars()


def test_case_13():
    bool_0 = True
    config_0 = module_0.Config(keep_alive=bool_0)
    var_0 = config_0.update_config(config_0)
    str_0 = "LOCAL_CERT_CREATOR"
    config_0.__setitem__(str_0, var_0)
