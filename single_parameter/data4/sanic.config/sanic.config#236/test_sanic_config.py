# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import inspect as module_1


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    config_0 = module_0.Config()
    none_type_0 = None
    bytes_0 = b",RQYws"
    config_1 = module_0.Config(env_prefix=none_type_0, keep_alive=bytes_0)
    config_2 = module_0.Config(keep_alive=none_type_0)
    str_0 = 'B"?n?^* 8 ek%8\x0bM'
    module_0.Config(converters=str_0)


def test_case_2():
    none_type_0 = None
    bytes_0 = b",RQYws"
    config_0 = module_0.Config(env_prefix=none_type_0, keep_alive=bytes_0)
    none_type_1 = None
    config_1 = module_0.Config(config_0, converters=none_type_1)


def test_case_3():
    config_0 = module_0.Config()
    module_0.Config(env_prefix=config_0)


def test_case_4():
    config_0 = module_0.Config()
    module_1.getmembers(config_0, config_0)


def test_case_5():
    config_0 = module_0.Config()
    var_0 = config_0.load_environment_vars()
    config_0.__getattr__(config_0)


def test_case_6():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_7():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0, converters=none_type_0)
    none_type_1 = config_0.register_type(none_type_0)
    var_0 = config_0.load_environment_vars()
    none_type_2 = config_0.update()
    none_type_3 = config_0.update()


def test_case_8():
    config_0 = module_0.Config()
    none_type_0 = None
    config_1 = module_0.Config(converters=config_0)
    none_type_1 = config_0.register_type(config_0)
    none_type_2 = config_0.update(**config_0)
    config_2 = module_0.Config(env_prefix=none_type_1)
    var_0 = config_0.update_config(config_2)
    config_0.update_config(none_type_0)


def test_case_9():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0, converters=none_type_0)
    var_0 = config_0.load_environment_vars()
    none_type_1 = config_0.update()


def test_case_10():
    config_0 = module_0.Config()
    none_type_0 = None
    none_type_1 = config_0.register_type(config_0)
    config_1 = module_0.Config(env_prefix=none_type_1)
    str_0 = "FALLBACK_ERROR_FORMAT"
    none_type_2 = config_1.__setattr__(str_0, none_type_1)
    var_0 = module_1.isclass(config_0)
    str_1 = var_0.__str__()
    config_2 = module_0.Config(converters=none_type_0)
    var_1 = config_2.update_config(config_0)
    config_2.update_config(str_1)


def test_case_11():
    none_type_0 = None
    config_0 = module_0.Config(none_type_0, converters=none_type_0)
    config_0.update_config(none_type_0)


def test_case_12():
    config_0 = module_0.Config()
    none_type_0 = None
    none_type_1 = config_0.register_type(config_0)
    none_type_2 = config_0.update(**config_0)
    str_0 = "Run one or none of the below subcommands. Using inspect without a subcommand will fetch general information about the state of the application instance.\n\nOr, you can optionally follow inspect with a subcommand. If you have created a custom Inspector instance, then you can run custom commands. See https://sanic.dev/en/guide/deployment/inspector.html for more details."
    config_1 = module_0.Config(keep_alive=none_type_1)
    none_type_3 = config_0.__setitem__(str_0, str_0)
    var_0 = config_1.load_environment_vars(str_0)
    var_0.register(config_1, none_type_0)


def test_case_13():
    config_0 = module_0.Config()
    none_type_0 = config_0.update(**config_0)
    str_0 = "FALLBACK_ERROR_FORMAT"
    none_type_1 = config_0.__setattr__(str_0, none_type_0)
    config_1 = module_0.Config(none_type_1, none_type_1, converters=none_type_1)


def test_case_14():
    config_0 = module_0.Config()
    str_0 = "FALLBACK_ERROR_FORMAT"
    config_0.__setattr__(str_0, config_0)


def test_case_15():
    config_0 = module_0.Config()
    none_type_0 = config_0.register_type(config_0)
    none_type_1 = config_0.update(**config_0)
    str_0 = "FALLBACK_ERROR_FORMAT"
    none_type_2 = config_0.__setattr__(str_0, none_type_0)
    config_0.__setattr__(str_0, none_type_1)


def test_case_16():
    config_0 = module_0.Config()
    none_type_0 = config_0.register_type(config_0)
    none_type_1 = config_0.update(**config_0)
    str_0 = "LOCAL_CERT_CREATOR"
    config_0.__setattr__(str_0, none_type_0)
