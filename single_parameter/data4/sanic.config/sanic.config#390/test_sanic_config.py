# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    config_0 = module_0.Config()
    str_0 = "*\\"
    config_1 = module_0.Config(keep_alive=str_0)


def test_case_2():
    none_type_0 = None
    config_0 = module_0.Config(converters=none_type_0)
    none_type_1 = None
    config_1 = module_0.Config(env_prefix=none_type_1)


def test_case_3():
    config_0 = module_0.Config()
    bool_0 = False
    config_0.head_response_ignored(config_0, bool_0)


def test_case_4():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)
    config_0.update_config(var_0)


def test_case_5():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_6():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)
    none_type_0 = config_0.register_type(var_0)
    none_type_1 = None
    config_0.register_type(none_type_1)


def test_case_7():
    config_0 = module_0.Config()
    config_1 = module_0.Config(config_0)


def test_case_8():
    config_0 = module_0.Config()
    bytes_0 = b"1\x95*\x831j\xf4\xf0\xa3\xe6P%\xcb\xf1"
    config_0.update_config(bytes_0)


def test_case_9():
    config_0 = module_0.Config()
    str_0 = "\\"
    config_1 = module_0.Config(converters=str_0)
    var_0 = config_0.update_config(config_0)
    none_type_0 = config_0.__setattr__(str_0, config_0)
    str_1 = "QI,X"
    none_type_1 = config_1.__setitem__(str_1, config_1)
    none_type_2 = config_0.__setitem__(str_0, var_0)
    config_0.update_config(var_0)


def test_case_10():
    config_0 = module_0.Config()
    str_0 = "\x0c}xTNfc(P=7U"
    none_type_0 = config_0.__setattr__(str_0, str_0)
    config_0.__getattr__(config_0)


def test_case_11():
    int_0 = 8000
    str_0 = 'S\r4 H)b~"W\t\x0c'
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=str_0, keep_alive=none_type_0)
    config_0.__getattr__(int_0)


def test_case_12():
    config_0 = module_0.Config()
    str_0 = "*\\"
    config_1 = module_0.Config(converters=str_0)
    var_0 = config_0.update_config(config_0)
    none_type_0 = config_0.__setattr__(str_0, config_0)
    none_type_1 = config_0.register_type(none_type_0)
    none_type_2 = config_0.__setitem__(str_0, none_type_1)
    str_1 = "LOCAL_CERT_CREATOR"
    config_1.__setitem__(str_1, none_type_2)
