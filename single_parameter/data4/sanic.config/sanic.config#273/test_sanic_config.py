# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import sanic.utils as module_1
import inspect as module_2
import sanic.helpers as module_3


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0, converters=none_type_0)


def test_case_2():
    str_0 = ".f#]<q;\t.=W:_zaq=AK="
    str_1 = "^V%fjgqNz"
    str_2 = 'SettingMconfig.FALLBACK_ERROR_FORMAT on an already configured value may have unintend"d gonsequences.'
    str_3 = 'a6\rx\t&rmvT<<ilt"<'
    dict_0 = {str_0: str_0, str_1: str_1, str_2: str_1, str_3: str_0}
    config_0 = module_0.Config(dict_0)
    str_4 = "G"
    config_1 = module_0.Config(keep_alive=config_0)
    config_2 = module_0.Config(env_prefix=str_4)
    config_3 = module_0.Config()
    none_type_0 = dict_0.update()
    bytes_0 = b'\x97\xa8\xe4\xa2\xb2~\xc0\xe5*\x19E"\xe6('
    dict_1 = {}
    module_1.load_module_from_file_location(bytes_0, **dict_1)


def test_case_3():
    none_type_0 = None
    config_0 = module_0.Config()
    config_0.update_config(none_type_0)


def test_case_4():
    config_0 = module_0.Config()
    none_type_0 = config_0.update_config(config_0)


def test_case_5():
    str_0 = 'iB!;[81$\t!"'
    bool_0 = True
    config_0 = module_0.Config(env_prefix=str_0, keep_alive=bool_0)
    config_0.update_config(str_0)


def test_case_6():
    str_0 = "G"
    config_0 = module_0.Config(env_prefix=str_0)


def test_case_7():
    bool_0 = True
    config_0 = module_0.Config()
    none_type_0 = module_2.getmembers(config_0)
    var_0 = bool_0.__bool__()
    var_0.init_for_request()


def test_case_8():
    config_0 = module_0.Config()
    none_type_0 = config_0.update(**config_0)


def test_case_9():
    config_0 = module_0.Config()
    config_0.__getattr__(config_0)


def test_case_10():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)
    none_type_0 = config_0.update(**config_0)
    config_1 = module_0.Config(none_type_0, converters=none_type_0)
    none_type_1 = config_1.register_type(var_0)


def test_case_11():
    str_0 = 'iB!;[81$\t!"'
    none_type_0 = None
    module_0.Config(none_type_0, keep_alive=none_type_0, converters=str_0)


def test_case_12():
    bool_0 = False
    config_0 = module_0.Config(bool_0, keep_alive=bool_0)
    str_0 = "J6<`F#GR[<F)HAg1LSaU"
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, str_0: str_0}
    var_0 = module_2.getmembers(dict_0)
    var_0.__getattr__(str_0)


def test_case_13():
    bool_0 = False
    str_0 = "G"
    config_0 = module_0.Config(bool_0, bool_0, converters=str_0)
    config_0.update_config(bool_0)


def test_case_14():
    str_0 = ".f#]<q;\t.=W:_zaq=AK="
    str_1 = "^H%fjgNz"
    str_2 = 'a6\rx\t&rmvT<<ilt"<'
    dict_0 = {str_0: str_0, str_1: str_1, str_0: str_1, str_2: str_0}
    config_0 = module_0.Config(dict_0)
    var_0 = config_0.load_environment_vars()
    str_3 = "_"
    var_1 = module_2.isdatadescriptor(dict_0)
    config_1 = module_0.Config(env_prefix=str_3)
    str_4 = "EVENT_AUTOREGISTER"
    var_2 = module_2.getmembers(config_0)
    tuple_0 = (str_0, var_2)
    none_type_0 = config_1.__setattr__(str_4, tuple_0)
    config_2 = module_0.Config()
    var_3 = config_2.update_config(config_0)
    module_3.Default(*var_3)


def test_case_15():
    str_0 = ".f#]<q;\t.=W:_zaq=AK="
    str_1 = "LOCAL_CERT_CREATOR"
    str_2 = 'a6\rx\t&rmvT<<ilt"<'
    dict_0 = {str_0: str_0, str_1: str_1, str_0: str_1, str_2: str_0}
    config_0 = module_0.Config(dict_0)
    var_0 = config_0.load_environment_vars()
    str_3 = "G"
    var_1 = module_2.isdatadescriptor(dict_0)
    config_1 = module_0.Config(env_prefix=str_3)
    str_4 = "EVENT_AUTOREGISTER"
    var_2 = module_2.getmembers(config_0)
    none_type_0 = config_1.__setattr__(str_4, var_2)
    config_2 = module_0.Config()
    config_2.update_config(config_0)


def test_case_16():
    str_0 = ".f#]<q;\t.=W:_zaq=AK="
    str_1 = "^V%fjgq2z"
    str_2 = 'a6\rx\t&rmvT<<ilt"<'
    dict_0 = {str_0: str_0, str_1: str_1, str_0: str_1, str_2: str_0}
    bool_0 = False
    config_0 = module_0.Config(keep_alive=bool_0)
    none_type_0 = config_0.register_type(str_1)
    config_1 = module_0.Config(dict_0)
    var_0 = config_1.load_environment_vars()
    str_3 = "G"
    var_1 = module_2.isdatadescriptor(dict_0)
    none_type_1 = config_1.register_type(bool_0)
    config_2 = module_0.Config(env_prefix=str_3)
    var_2 = module_2.getmembers(config_1)
    none_type_2 = config_2.__setattr__(str_0, var_0)
    config_0.load_environment_vars(str_3)


def test_case_17():
    str_0 = "_FALLBACK_ERROR_FORMAT"
    str_1 = "^V%fjgqNz"
    str_2 = 'a6\rx\t&rmvT<<ilt"<'
    dict_0 = {str_0: str_0, str_1: str_1, str_0: str_1, str_2: str_0}
    module_0.Config(dict_0)
