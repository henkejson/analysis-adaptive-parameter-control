# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import inspect as module_1


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    str_0 = "417 Expectation Failed\n\n    Args:\n        message (Optional[Union[str, bytes]], optional): The message to be sent to the client. If `None`\n            then the HTTP status 'Bad Request' will be sent. Defaults to `None`.\n        quiet (Optional[bool], optional): When `True`, the error traceback will be suppressed\n            from the logs. Defaults to `None`.\n        context (Optional[Dict[str, Any]], optional): Additional mapping of key/value data that will be\n            sent to the client upon exception. Defaults to `None`.\n        extra (Optional[Dict[str, Any]], optional): Additional mapping of key/value data that will NOT be\n            sent to the client when in PRODUCTION mode. Defaults to `None`.\n        headers (Optional[Dict[str, Any]], optional): Additional headers that should be sent with the HTTP\n            response. Defaults to `None`.\n    "
    module_0.Config(converters=str_0)


def test_case_2():
    bool_0 = True
    none_type_0 = None
    config_0 = module_0.Config(keep_alive=bool_0, converters=none_type_0)
    bool_1 = True
    none_type_1 = config_0.register_type(bool_1)
    str_0 = "N);u\t?aT0%@|@SUp\rDZ\t"
    none_type_2 = config_0.__setattr__(str_0, str_0)
    none_type_3 = config_0.register_type(none_type_2)
    var_0 = config_0.load_environment_vars()


def test_case_3():
    float_0 = 24.3
    none_type_0 = None
    config_0 = module_0.Config(none_type_0, none_type_0)
    config_0.update_config(float_0)


def test_case_4():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_0.Config(list_0)


def test_case_5():
    config_0 = module_0.Config()
    str_0 = "417 Expectation Failed\n\n    Args:\n        message (Optional[Union[str, bytes]], optional): The message to be sent to the client. If `None`\n            then the HTTP status 'Bad Request' will be sent. Defaults to `None`.\n        quiet (Optional[bool], optional): When `True`, the error traceback will be suppressed\n            from the logs. Defaults to `None`.\n        context (Optional[Dict[str, Any]], optional): Additional mapping of key/value data that will be\n            sent to the client upon exception. Defaults to `None`.\n        extra (Optional[Dict[str, Any]], optional): Additional mapping of key/value data that will NOT be\n            sent to the client when in PRODUCTION mode. Defaults to `None`.\n        headers (Optional[Dict[str, Any]], optional): Additional headers that should be sent with the HTTP\n            response. Defaults to `None`.\n    "
    none_type_0 = config_0.update(**config_0)
    config_0.__getattr__(str_0)


def test_case_6():
    none_type_0 = None
    config_0 = module_0.Config()
    config_0.update_config(none_type_0)


def test_case_7():
    config_0 = module_0.Config()
    none_type_0 = config_0.update(**config_0)
    config_0.__setitem__(config_0, config_0)


def test_case_8():
    config_0 = module_0.Config()
    none_type_0 = config_0.update(**config_0)
    str_0 = "dd8#5"
    str_1 = '\r"P'
    none_type_1 = config_0.__setitem__(str_1, config_0)
    var_0 = config_0.load_environment_vars()
    none_type_2 = None
    var_1 = config_0.load_environment_vars()
    config_1 = module_0.Config(env_prefix=str_0, keep_alive=none_type_2)
    config_1.__getattr__(none_type_0)


def test_case_9():
    config_0 = module_0.Config()
    none_type_0 = config_0.update(**config_0)


def test_case_10():
    none_type_0 = None
    config_0 = module_0.Config(none_type_0, keep_alive=none_type_0)
    str_0 = "S%b/#e$'\x0b)#0rK(|"
    config_0.update_config(str_0)


def test_case_11():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)
    var_0.register_type(var_0)


def test_case_12():
    none_type_0 = None
    config_0 = module_0.Config(none_type_0, keep_alive=none_type_0)
    var_0 = module_1.getmembers(config_0)
    config_0.__getattr__(var_0)


def test_case_13():
    config_0 = module_0.Config()
    config_1 = module_0.Config(config_0, converters=config_0)
    var_0 = config_0.update_config(config_0)
    none_type_0 = config_0.update(**config_0)
    none_type_1 = config_0.register_type(var_0)
    str_0 = ""
    var_0.__getattr__(str_0)


def test_case_14():
    config_0 = module_0.Config()
    str_0 = "_FALLBACK_ERROR_FORMAT"
    none_type_0 = config_0.__setitem__(str_0, config_0)
    var_0 = config_0.update_config(config_0)
    module_1.getmembers(config_0, config_0)
