# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import inspect as module_1


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    config_0 = module_0.Config()
    bool_0 = False
    int_0 = 424
    list_0 = [config_0, bool_0, config_0, int_0]
    str_0 = "S8%kmx0~@:"
    var_0 = module_1.isdatadescriptor(str_0)
    var_1 = var_0.__repr__()
    tuple_0 = (list_0, str_0, var_1)
    config_1 = module_0.Config(converters=tuple_0)


def test_case_2():
    none_type_0 = None
    config_0 = module_0.Config(none_type_0, none_type_0, none_type_0)
    config_0.update_config(none_type_0)


def test_case_3():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_4():
    config_0 = module_0.Config()
    str_0 = "X^OZxb\\`_.G)kRR"
    none_type_0 = config_0.update()
    var_0 = module_1.isdatadescriptor(str_0)
    config_0.__getattr__(var_0)


def test_case_5():
    config_0 = module_0.Config()
    str_0 = "L"
    var_0 = config_0.load_environment_vars(str_0)
    none_type_0 = config_0.register_type(config_0)


def test_case_6():
    config_0 = module_0.Config()
    config_1 = module_0.Config(config_0)
    str_0 = "X^OZxb\\`_.G)kRR"
    var_0 = config_0.update_config(config_0)
    str_1 = 'Ze&"t7xx<sj+sbQWoL'
    none_type_0 = config_0.__setattr__(str_1, str_0)
    config_0.update(*var_0)


def test_case_7():
    config_0 = module_0.Config()
    str_0 = "L"
    var_0 = config_0.load_environment_vars(str_0)


def test_case_8():
    config_0 = module_0.Config()
    list_0 = []
    none_type_0 = config_0.register_type(list_0)
    bytes_0 = b"*"
    config_0.update_config(bytes_0)


def test_case_9():
    float_0 = -327.0
    str_0 = "a"
    config_0 = module_0.Config(env_prefix=str_0)
    config_0.update_config(float_0)


def test_case_10():
    bytes_0 = b"z\x16\x9b\xd1\xae\xe8\xc1\x19\xed\x8c4"
    var_0 = module_1.isdatadescriptor(bytes_0)
    config_0 = module_0.Config(keep_alive=var_0, converters=var_0)
    var_0.__getattr__(bytes_0)


def test_case_11():
    config_0 = module_0.Config()
    config_0.__getattr__(config_0)


def test_case_12():
    config_0 = module_0.Config()
    set_0 = set()
    none_type_0 = config_0.register_type(set_0)
    config_0.register_type(set_0)


def test_case_13():
    config_0 = module_0.Config()
    none_type_0 = config_0.register_type(config_0)
    var_0 = config_0.update_config(config_0)
    str_0 = "LOCAL_CERT_CREATOR"
    none_type_1 = None
    config_0.__setattr__(str_0, none_type_1)


def test_case_14():
    none_type_0 = None
    config_0 = module_0.Config(none_type_0)
    none_type_1 = config_0.register_type(none_type_0)
    str_0 = "L"
    module_0.Config(env_prefix=str_0, keep_alive=str_0, converters=str_0)


def test_case_15():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)
    str_0 = "_"
    var_1 = config_0.load_environment_vars(str_0)
    none_type_0 = config_0.register_type(var_0)
    config_0.update_config(none_type_0)
