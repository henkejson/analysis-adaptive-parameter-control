# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import sanic.helpers as module_1
import inspect as module_2
import sanic.errorpages as module_3


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    tuple_0 = ()
    float_0 = -2559.59009
    module_0.Config(keep_alive=tuple_0, converters=float_0)


def test_case_2():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0, converters=none_type_0)


def test_case_3():
    default_0 = module_1.Default()
    module_0.Config(default_0)


def test_case_4():
    config_0 = module_0.Config()
    default_0 = module_2.isclass(config_0)
    config_0.__getattr__(config_0)


def test_case_5():
    int_0 = 303
    list_0 = [int_0, int_0]
    module_0.Config(converters=list_0)


def test_case_6():
    config_0 = module_0.Config()
    none_type_0 = config_0.update()
    config_1 = module_0.Config(converters=config_0)
    config_0.update_config(none_type_0)


def test_case_7():
    config_0 = module_0.Config()
    config_0.register(config_0, config_0)


def test_case_8():
    str_0 = "S"
    config_0 = module_0.Config(keep_alive=str_0)
    config_1 = module_0.Config(env_prefix=str_0)
    module_3.check_error_format(config_1)


def test_case_9():
    str_0 = "S"
    config_0 = module_0.Config(env_prefix=str_0)


def test_case_10():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_11():
    list_0 = []
    none_type_0 = None
    config_0 = module_0.Config(keep_alive=none_type_0)
    config_0.update_config(list_0)


def test_case_12():
    str_0 = "LOCAL_CERT_CREATOR"
    dict_0 = {str_0: str_0}
    config_0 = module_0.Config(dict_0, keep_alive=str_0)
    config_0.update_config(dict_0)


def test_case_13():
    str_0 = "LOCAL_CERT_CREATOR"
    dict_0 = {str_0: str_0}
    config_0 = module_0.Config(dict_0, keep_alive=str_0)
    config_0.update_config(str_0)


def test_case_14():
    str_0 = "S"
    config_0 = module_0.Config(env_prefix=str_0)
    module_0.Config(config_0, str_0, converters=str_0)
