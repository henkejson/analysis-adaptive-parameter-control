# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import inspect as module_1
import sanic.http.http1 as module_2


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    config_0 = module_0.Config()
    config_1 = module_0.Config(config_0, converters=config_0)
    none_type_0 = None
    config_0.__setattr__(config_0, none_type_0)


def test_case_2():
    bool_0 = True
    config_0 = module_0.Config(keep_alive=bool_0)
    config_0.update_config(bool_0)


def test_case_3():
    str_0 = "S"
    config_0 = module_0.Config(env_prefix=str_0)


def test_case_4():
    none_type_0 = None
    var_0 = module_1.isdatadescriptor(none_type_0)
    var_1 = module_1.getmembers(var_0)
    module_0.Config(var_1, keep_alive=none_type_0)


def test_case_5():
    str_0 = "g6%8*\nMQGqE>ks5}"
    dict_0 = {str_0: str_0}
    config_0 = module_0.Config(dict_0, keep_alive=dict_0)
    none_type_0 = config_0.__setattr__(str_0, dict_0)
    str_1 = "\n        Property to access the WorkerManager instance.\n\n        This property provides access to the WorkerManager object controlling\n        the worker processes. It can only be accessed from the main process.\n\n        .. note::\n            Make sure to only access this property from the main process,\n            as attempting to do so from a worker process will result\n            in an exception.\n\n        See [WorkerManager](/en/guide/deployment/manager) for details.\n\n        Returns:\n            WorkerManager: The manager responsible for managing\n                worker processes.\n\n        Raises:\n            SanicException: If an attempt is made to access the manager\n                from a worker process or if the manager is not initialized.\n\n        Example:\n            ```python\n            app.manager.manage(...)\n            ```\n        "
    str_2 = "8P!fP\tSC^f"
    dict_1 = {str_0: none_type_0, str_1: none_type_0, str_2: none_type_0}
    none_type_1 = config_0.update(**dict_1)
    config_0.__getattr__(none_type_0)


def test_case_6():
    none_type_0 = None
    config_0 = module_0.Config(
        none_type_0, none_type_0, none_type_0, converters=none_type_0
    )
    none_type_1 = config_0.register_type(none_type_0)
    config_0.__getattr__(config_0)


def test_case_7():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_8():
    config_0 = module_0.Config()
    none_type_0 = config_0.register_type(config_0)
    config_0.register_type(config_0)


def test_case_9():
    str_0 = ""
    config_0 = module_0.Config(env_prefix=str_0)
    config_0.update_config(str_0)


def test_case_10():
    str_0 = "_"
    config_0 = module_0.Config(env_prefix=str_0)
    var_0 = config_0.update_config(config_0)
    module_2.Http(config_0)


def test_case_11():
    str_0 = "S"
    config_0 = module_0.Config(env_prefix=str_0)
    var_0 = config_0.load_environment_vars()
    var_1 = config_0.update_config(config_0)
    module_0.Config(env_prefix=str_0, keep_alive=var_0, converters=config_0)
