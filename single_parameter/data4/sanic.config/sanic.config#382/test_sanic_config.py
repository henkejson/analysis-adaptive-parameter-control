# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import inspect as module_1


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    none_type_0 = None
    bytes_0 = b'\xc4WE\xe4\r\xef\xecRZ\xa1\xd8\xd72"i\x00\x826?Q'
    config_0 = module_0.Config(env_prefix=none_type_0, keep_alive=bytes_0)


def test_case_2():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0, converters=none_type_0)


def test_case_3():
    str_0 = "encode"
    dict_0 = {str_0: str_0, str_0: str_0}
    none_type_0 = None
    config_0 = module_0.Config(dict_0, converters=none_type_0)


def test_case_4():
    config_0 = module_0.Config()
    none_type_0 = None
    config_0.update_config(none_type_0)


def test_case_5():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_6():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)
    str_0 = "NOISY_EXCEPTIONS"
    none_type_0 = config_0.__setitem__(str_0, config_0)
    bytes_0 = b"\x1f\x04\xab5\x18k=u\xc7\x1a\xa7\xde\x8a\xda\x1f\x07y`\xac"
    var_0.head_response_ignored(bytes_0, var_0)


def test_case_7():
    config_0 = module_0.Config()
    var_0 = module_1.getmembers(config_0)
    config_0.update_config(var_0)


def test_case_8():
    none_type_0 = None
    config_0 = module_0.Config(none_type_0, keep_alive=none_type_0)
    config_0.__getattr__(config_0)


def test_case_9():
    str_0 = ".*"
    config_0 = module_0.Config()
    config_0.update_config(str_0)


def test_case_10():
    str_0 = "WEBSOCKET_PING_TIMEOUT"
    module_0.Config(keep_alive=str_0, converters=str_0)


def test_case_11():
    str_0 = "F#0\x0btC:sWsrFhkgqv\tJ"
    set_0 = set()
    config_0 = module_0.Config(env_prefix=str_0, converters=set_0)


def test_case_12():
    float_0 = 463.725
    config_0 = module_0.Config(keep_alive=float_0)
    none_type_0 = config_0.update(**config_0)
    config_1 = module_0.Config(converters=config_0)
    config_0.update_config(float_0)


def test_case_13():
    float_0 = 463.15649049327703
    config_0 = module_0.Config(keep_alive=float_0)
    list_0 = []
    none_type_0 = config_0.update(*list_0, **config_0)
    none_type_1 = config_0.register_type(float_0)
    str_0 = "LOCAL_CERT_CREATOR"
    config_0.__setitem__(str_0, float_0)


def test_case_14():
    str_0 = ""
    config_0 = module_0.Config(converters=str_0)
    config_0.load_environment_vars(str_0)
