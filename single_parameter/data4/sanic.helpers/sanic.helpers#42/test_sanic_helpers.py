# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.helpers as module_0
import inspect as module_1


def test_case_0():
    str_0 = ""
    module_0.has_message_body(str_0)


def test_case_1():
    bool_0 = True
    str_0 = bool_0.__str__()
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.remove_entity_headers(dict_0, dict_0)


def test_case_2():
    bool_0 = module_0.is_atty()


def test_case_3():
    dict_0 = {}
    module_0.is_hop_by_hop_header(dict_0)


def test_case_4():
    default_0 = module_0.Default()
    var_0 = default_0.__repr__()
    bool_0 = module_0.is_atty()


def test_case_5():
    default_0 = module_0.Default()
    str_0 = default_0.__str__()
    module_0.is_entity_header(default_0)


def test_case_6():
    bool_0 = True
    var_0 = module_0.has_message_body(bool_0)
    var_1 = var_0.__repr__()
    str_0 = var_1.__str__()
    var_2 = var_1.__repr__()
    dict_0 = {var_2: bool_0, bool_0: var_2, var_2: bool_0}
    module_0.remove_entity_headers(dict_0, var_1)


def test_case_7():
    int_0 = 288
    var_0 = module_0.has_message_body(int_0)
    none_type_0 = None
    bool_0 = module_0.is_atty()
    module_0.remove_entity_headers(none_type_0)


def test_case_8():
    bool_0 = True
    var_0 = bool_0.__repr__()
    bool_1 = module_0.is_atty()
    float_0 = 204.0
    var_1 = var_0.__repr__()
    var_2 = module_0.has_message_body(float_0)
    var_3 = module_1.ismodule(var_2)
    var_4 = var_3.__repr__()
    str_0 = var_3.__str__()
    var_5 = float_0.__repr__()
    var_6 = module_0.has_message_body(var_3)
    str_1 = var_2.__str__()
    var_7 = module_0.is_hop_by_hop_header(str_1)
    default_0 = module_0.Default()
    var_8 = var_7.__repr__()
    var_9 = var_8.__repr__()
    dict_0 = {var_9: str_0, str_0: var_7, var_8: var_8}
    str_2 = var_3.__str__()
    var_10 = module_0.remove_entity_headers(dict_0, var_5)
    default_1 = module_0.Default()
    str_3 = default_0.__str__()
    str_4 = var_0.__str__()
    module_0.is_entity_header(bool_0)
