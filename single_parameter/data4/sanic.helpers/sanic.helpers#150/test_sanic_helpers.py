# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.helpers as module_0
import inspect as module_1
import builtins as module_2


def test_case_0():
    float_0 = 276.0
    var_0 = module_0.has_message_body(float_0)


def test_case_1():
    int_0 = 126
    str_0 = int_0.__str__()
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: int_0}
    var_0 = module_0.remove_entity_headers(dict_0, dict_0)


def test_case_2():
    bool_0 = module_0.is_atty()


def test_case_3():
    bool_0 = False
    module_0.is_entity_header(bool_0)


def test_case_4():
    bool_0 = False
    var_0 = module_0.has_message_body(bool_0)
    bool_1 = module_0.is_atty()
    module_0.is_hop_by_hop_header(var_0)


def test_case_5():
    default_0 = module_0.Default()
    var_0 = default_0.__repr__()
    bool_0 = module_0.is_atty()
    int_0 = 2886
    var_1 = module_1.ismodule(int_0)
    var_2 = var_1.__repr__()
    object_0 = module_2.object()
    module_0.is_hop_by_hop_header(default_0)


def test_case_6():
    int_0 = 31
    bool_0 = module_0.is_atty()
    var_0 = module_0.has_message_body(int_0)
    default_0 = module_0.Default()
    str_0 = var_0.__str__()
    str_1 = default_0.__str__()
    none_type_0 = None
    module_0.is_hop_by_hop_header(none_type_0)


def test_case_7():
    bool_0 = module_0.is_atty()
    int_0 = 204
    dict_0 = {}
    var_0 = module_0.has_message_body(bool_0)
    var_1 = module_0.remove_entity_headers(dict_0)
    var_2 = module_0.has_message_body(var_0)
    var_3 = module_0.has_message_body(int_0)
    default_0 = module_0.Default()
    str_0 = var_3.__str__()
    str_1 = default_0.__str__()
    var_4 = var_2.__repr__()
    var_5 = var_4.__repr__()
    var_6 = module_0.is_hop_by_hop_header(str_0)
    var_7 = default_0.__repr__()
    object_0 = module_2.object()
    var_8 = module_0.is_entity_header(var_4)
    dict_1 = {str_1: var_2, var_8: str_0, var_0: var_4, var_2: var_3, var_4: int_0}
    module_0.remove_entity_headers(dict_1, var_1)
