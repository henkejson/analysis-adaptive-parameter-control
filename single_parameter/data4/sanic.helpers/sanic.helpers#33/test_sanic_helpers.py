# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.helpers as module_0
import inspect as module_1


def test_case_0():
    bool_0 = True
    var_0 = module_0.has_message_body(bool_0)


def test_case_1():
    dict_0 = {}
    var_0 = module_0.remove_entity_headers(dict_0)


def test_case_2():
    bool_0 = module_0.is_atty()


def test_case_3():
    list_0 = []
    module_0.is_entity_header(list_0)


def test_case_4():
    bool_0 = True
    module_0.is_hop_by_hop_header(bool_0)


def test_case_5():
    default_0 = module_0.Default()
    str_0 = default_0.__str__()


def test_case_6():
    int_0 = 1659
    var_0 = module_0.has_message_body(int_0)
    str_0 = var_0.__str__()
    bool_0 = True
    module_0.is_hop_by_hop_header(bool_0)


def test_case_7():
    str_0 = "\n        Close the WebSocket Connection\n        When the opening handshake succeeds, :meth:`connection_open` starts\n        this coroutine in a task. It waits for the data transfer phase to\n        complete then it closes the TCP connection cleanly.\n        When the opening handshake fails, :meth:`fail_connection` does the\n        same. There's no data transfer phase in that case.\n        "
    dict_0 = {str_0: str_0}
    var_0 = module_0.remove_entity_headers(dict_0)


def test_case_8():
    none_type_0 = None
    var_0 = module_1.ismodule(none_type_0)
    var_1 = module_0.has_message_body(var_0)
    dict_0 = {}
    var_2 = module_0.remove_entity_headers(dict_0)
    bool_0 = module_0.is_atty()
    bool_1 = True
    var_3 = module_0.has_message_body(bool_1)
    var_4 = var_1.__repr__()
    str_0 = var_4.__str__()
    int_0 = 304
    var_5 = module_0.has_message_body(int_0)
    str_1 = var_4.__str__()
    var_6 = module_1.ismodule(str_0)
    var_7 = var_6.__repr__()
    module_0.import_string(var_6)
