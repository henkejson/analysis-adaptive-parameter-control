# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.helpers as module_0
import inspect as module_1


def test_case_0():
    set_0 = set()
    module_0.has_message_body(set_0)


def test_case_1():
    float_0 = -1718.0
    module_0.remove_entity_headers(float_0)


def test_case_2():
    bool_0 = module_0.is_atty()


def test_case_3():
    set_0 = set()
    module_0.is_entity_header(set_0)


def test_case_4():
    int_0 = 2028
    module_0.is_hop_by_hop_header(int_0)


def test_case_5():
    bool_0 = module_0.is_atty()
    bool_1 = module_0.is_atty()
    var_0 = module_0.has_message_body(bool_0)
    default_0 = module_0.Default()
    var_1 = default_0.__repr__()
    var_2 = module_0.has_message_body(var_0)
    str_0 = default_0.__str__()


def test_case_6():
    int_0 = 1734
    var_0 = module_0.has_message_body(int_0)
    module_0.remove_entity_headers(int_0, int_0)


def test_case_7():
    float_0 = -1718.0
    var_0 = module_0.has_message_body(float_0)


def test_case_8():
    int_0 = 203
    var_0 = int_0.__repr__()
    dict_0 = {var_0: int_0, var_0: int_0, int_0: int_0, int_0: int_0}
    module_0.remove_entity_headers(dict_0)


def test_case_9():
    int_0 = 203
    var_0 = module_0.has_message_body(int_0)
    var_1 = var_0.__repr__()
    str_0 = var_1.__str__()
    bool_0 = module_0.is_atty()
    str_1 = var_1.__str__()
    dict_0 = {var_1: int_0, var_1: var_1, var_1: var_0, var_1: var_1}
    var_2 = module_0.remove_entity_headers(dict_0)


def test_case_10():
    default_0 = module_0.Default()
    int_0 = 204
    var_0 = module_0.has_message_body(int_0)
    var_1 = var_0.__repr__()
    var_2 = module_0.is_hop_by_hop_header(var_1)
    bool_0 = module_0.is_atty()
    var_3 = module_0.is_hop_by_hop_header(var_1)
    str_0 = default_0.__str__()
    var_4 = module_0.has_message_body(bool_0)
    str_1 = var_1.__str__()
    dict_0 = {var_1: var_3, bool_0: str_1, var_3: var_0, var_3: var_4}
    var_5 = bool_0.__repr__()
    var_6 = module_1.ismodule(dict_0)
