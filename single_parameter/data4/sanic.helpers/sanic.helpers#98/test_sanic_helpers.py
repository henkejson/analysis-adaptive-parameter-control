# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.helpers as module_0
import inspect as module_1


def test_case_0():
    none_type_0 = None
    module_0.has_message_body(none_type_0)


def test_case_1():
    list_0 = []
    var_0 = module_1.ismodule(list_0)
    bool_0 = module_0.is_atty()
    var_1 = module_0.has_message_body(var_0)
    module_0.remove_entity_headers(var_0)


def test_case_2():
    str_0 = "Tv+f\r}%qd\x0c+tA"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.remove_entity_headers(dict_0)
    list_0 = []
    var_1 = module_1.ismodule(list_0)
    module_0.is_hop_by_hop_header(list_0)


def test_case_3():
    dict_0 = {}
    var_0 = module_0.remove_entity_headers(dict_0)
    var_1 = var_0.__repr__()
    module_0.has_message_body(dict_0)


def test_case_4():
    bool_0 = module_0.is_atty()


def test_case_5():
    bool_0 = True
    module_0.is_entity_header(bool_0)


def test_case_6():
    str_0 = "XXZ"
    var_0 = module_0.is_hop_by_hop_header(str_0)
    bool_0 = module_0.is_atty()
    default_0 = module_0.Default()
    str_1 = var_0.__str__()


def test_case_7():
    complex_0 = 49 + 37.20614j
    default_0 = module_0.Default()
    bool_0 = module_0.is_atty()
    tuple_0 = (complex_0,)
    var_0 = default_0.__repr__()
    var_1 = default_0.__repr__()
    var_2 = module_0.has_message_body(bool_0)
    var_3 = module_0.is_entity_header(var_1)
    module_0.remove_entity_headers(tuple_0)


def test_case_8():
    default_0 = module_0.Default()
    str_0 = default_0.__str__()
    list_0 = []
    bool_0 = module_0.is_atty()
    module_0.remove_entity_headers(list_0)


def test_case_9():
    int_0 = 339
    var_0 = module_0.has_message_body(int_0)
    str_0 = "extension-header"
    dict_0 = {str_0: str_0}
    var_1 = module_0.remove_entity_headers(dict_0)
    var_2 = var_1.__repr__()
    var_3 = module_1.ismodule(var_2)
    default_0 = module_0.Default()
    str_1 = default_0.__str__()
    var_4 = module_0.is_hop_by_hop_header(var_2)
    var_5 = module_0.is_entity_header(str_0)
    default_1 = module_0.Default()
    bool_0 = module_0.is_atty()
    str_2 = default_0.__str__()
    var_6 = var_2.__repr__()
    str_3 = var_3.__str__()


def test_case_10():
    int_0 = 461
    var_0 = module_0.has_message_body(int_0)
    str_0 = "extension-header"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    var_1 = module_0.remove_entity_headers(dict_0, dict_0)
    str_1 = var_0.__str__()
    var_2 = var_1.__repr__()
    var_3 = module_1.ismodule(var_1)
    module_0.has_message_body(var_1)


def test_case_11():
    int_0 = 304
    var_0 = module_0.has_message_body(int_0)
    str_0 = "extension-header"
    str_1 = var_0.__str__()
    dict_0 = {str_0: str_0}
    var_1 = module_0.remove_entity_headers(dict_0)
    var_2 = var_1.__repr__()
    var_3 = module_0.is_hop_by_hop_header(str_0)
    bool_0 = module_0.is_atty()
    str_2 = str_0.__str__()
    default_0 = module_0.Default()
    str_3 = default_0.__str__()
    var_4 = module_0.is_hop_by_hop_header(var_2)
    var_5 = module_0.has_message_body(var_3)
    bool_1 = module_0.is_atty()
    default_1 = module_0.Default()
    module_0.has_message_body(dict_0)
