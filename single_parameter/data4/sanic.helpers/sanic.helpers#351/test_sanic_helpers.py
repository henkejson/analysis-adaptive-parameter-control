# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.helpers as module_0
import inspect as module_1


def test_case_0():
    bool_0 = False
    var_0 = module_0.has_message_body(bool_0)
    str_0 = var_0.__str__()


def test_case_1():
    none_type_0 = None
    module_0.remove_entity_headers(none_type_0)


def test_case_2():
    bool_0 = module_0.is_atty()


def test_case_3():
    bytes_0 = b"Temporary Redirect"
    bool_0 = module_0.is_entity_header(bytes_0)
    bool_1 = module_0.is_atty()


def test_case_4():
    none_type_0 = None
    module_0.is_hop_by_hop_header(none_type_0)


def test_case_5():
    default_0 = module_0.Default()
    str_0 = default_0.__str__()
    var_0 = str_0.__repr__()
    dict_0 = {var_0: var_0, var_0: var_0, str_0: var_0}
    var_1 = module_0.remove_entity_headers(dict_0)


def test_case_6():
    int_0 = 418
    default_0 = module_0.Default()
    str_0 = module_0.has_message_body(int_0)
    str_1 = int_0.__str__()
    var_0 = str_0.__repr__()
    var_1 = default_0.__repr__()
    bool_0 = module_0.is_atty()
    dict_0 = {var_1: var_1, int_0: var_0, str_0: bool_0}
    module_0.remove_entity_headers(dict_0)


def test_case_7():
    bytes_0 = b"S\xeefM(O\xb9\x1a\xc0\xecy]\xe3\xf9\x17_\xd2}"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    var_0 = module_0.remove_entity_headers(dict_0)


def test_case_8():
    int_0 = 304
    default_0 = module_0.Default()
    str_0 = default_0.__str__()
    var_0 = default_0.__repr__()
    var_1 = module_0.has_message_body(int_0)
    str_1 = default_0.__str__()
    str_2 = var_1.__str__()
    var_2 = module_0.has_message_body(var_1)
    str_3 = "tQ@nf?f(84GpnpyQiO"
    str_4 = var_2.__str__()
    var_3 = module_0.is_hop_by_hop_header(str_3)
    var_4 = module_1.ismodule(var_0)
    bool_0 = module_0.is_atty()
    var_5 = var_1.__repr__()
    bool_1 = module_0.is_atty()
    default_1 = module_0.Default()
    var_6 = module_0.is_hop_by_hop_header(var_5)
    var_7 = var_2.__repr__()
    dict_0 = {var_7: str_2, int_0: var_1, var_1: bool_1}
    str_5 = var_4.__str__()
    var_8 = var_5.__repr__()
    module_0.remove_entity_headers(dict_0)
