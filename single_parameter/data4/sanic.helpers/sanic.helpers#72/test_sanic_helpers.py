# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.helpers as module_0
import inspect as module_1
import builtins as module_2


def test_case_0():
    bool_0 = module_0.is_atty()
    bool_1 = module_0.is_atty()
    var_0 = module_0.has_message_body(bool_1)


def test_case_1():
    none_type_0 = None
    module_0.remove_entity_headers(none_type_0)


def test_case_2():
    bool_0 = module_0.is_atty()


def test_case_3():
    default_0 = module_0.Default()


def test_case_4():
    list_0 = []
    module_0.is_entity_header(list_0)


def test_case_5():
    str_0 = ")atW*_A?G~>b}:'5<*Xi"
    var_0 = module_0.is_hop_by_hop_header(str_0)
    var_1 = module_0.is_hop_by_hop_header(str_0)
    str_1 = var_1.__str__()
    bool_0 = module_0.is_atty()
    var_2 = module_0.has_message_body(bool_0)


def test_case_6():
    bool_0 = module_0.is_atty()
    default_0 = module_0.Default()
    var_0 = default_0.__repr__()
    str_0 = var_0.__str__()
    module_0.is_hop_by_hop_header(bool_0)


def test_case_7():
    int_0 = 1534
    var_0 = module_1.ismodule(int_0)
    int_1 = 205
    var_1 = var_0.__repr__()
    var_2 = module_0.has_message_body(int_1)
    str_0 = "!c"
    var_3 = module_0.Default()
    var_4 = var_0.__repr__()
    str_1 = var_3.__str__()
    dict_0 = {str_0: str_0, str_0: str_0}
    bool_0 = module_0.is_atty()
    var_5 = module_0.remove_entity_headers(dict_0)
    var_6 = module_0.has_message_body(bool_0)
    var_7 = module_0.has_message_body(var_6)
    module_0.Default(*var_5)


def test_case_8():
    bool_0 = module_0.is_atty()
    float_0 = 2153.187
    bool_1 = module_0.is_atty()
    var_0 = module_0.has_message_body(float_0)
    var_1 = module_0.has_message_body(float_0)
    var_2 = var_1.__repr__()


def test_case_9():
    str_0 = "http.lifecycle.read_body"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.remove_entity_headers(dict_0)


def test_case_10():
    int_0 = 1534
    var_0 = module_0.has_message_body(int_0)
    str_0 = var_0.__str__()
    int_1 = 204
    var_1 = module_0.has_message_body(int_1)
    str_1 = "!c"
    str_2 = var_0.__str__()
    var_2 = module_0.is_hop_by_hop_header(str_1)
    str_3 = var_2.__str__()
    bool_0 = module_0.is_atty()
    var_3 = module_0.is_entity_header(str_1)
    module_0.import_string(var_3)


def test_case_11():
    int_0 = 1192
    var_0 = module_0.has_message_body(int_0)
    str_0 = "content-encoding"
    dict_0 = {str_0: str_0, str_0: str_0}
    bool_0 = module_0.is_atty()
    var_1 = module_0.remove_entity_headers(dict_0)
    var_2 = module_0.has_message_body(bool_0)


def test_case_12():
    int_0 = 1534
    var_0 = module_0.has_message_body(int_0)
    int_1 = 205
    var_1 = module_0.has_message_body(int_1)
    str_0 = "content-encoding"
    str_1 = var_0.__str__()
    var_2 = module_0.is_hop_by_hop_header(str_0)
    dict_0 = {str_1: str_1, str_0: str_0}
    bool_0 = module_0.is_atty()
    default_0 = module_0.Default()
    var_3 = module_0.remove_entity_headers(dict_0)
    default_1 = module_0.Default()
    var_4 = module_0.has_message_body(bool_0)
    var_5 = module_0.remove_entity_headers(dict_0, dict_0)
    module_2.object(*var_4)
