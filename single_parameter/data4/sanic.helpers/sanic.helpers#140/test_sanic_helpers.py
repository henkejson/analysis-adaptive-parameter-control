# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.helpers as module_0
import builtins as module_1
import inspect as module_2


def test_case_0():
    default_0 = module_0.Default()
    module_0.has_message_body(default_0)


def test_case_1():
    dict_0 = {}
    var_0 = module_0.remove_entity_headers(dict_0)


def test_case_2():
    bool_0 = module_0.is_atty()


def test_case_3():
    str_0 = 'Decorate a function handler to create a route definition using the **DELETE** HTTP method.\n\n        Args:\n            uri (str): URL to be tagged to the DELETE method of HTTP.\n            host (Optional[Union[str, List[str]]]): Host IP or FQDN for the\n                service to use.\n            strict_slashes (Optional[bool]): Instruct Sanic to check if the\n                request URLs need to terminate with a */*.\n            version (Optional[Union[int, str, float]]): API Version.\n            name (Optional[str]): Unique name that can be used to identify\n                the Route.\n            ignore_body (bool): Whether or not to ignore the body in the\n                request. Defaults to `False`.\n            version_prefix (str): URL path that should be before the version\n                value. Defaults to `"/v"`.\n            error_format (Optional[str]): Custom error format string.\n            **ctx_kwargs (Any): Keyword arguments that begin with a `ctx_*`\n                prefix will be appended to the route context (`route.ctx`).\n\n        Returns:\n            RouteHandler: Object decorated with route method.\n        '
    dict_0 = {str_0: str_0}
    var_0 = module_0.remove_entity_headers(dict_0, dict_0)


def test_case_4():
    dict_0 = {}
    var_0 = module_0.remove_entity_headers(dict_0)
    bool_0 = module_0.is_atty()
    bool_1 = module_0.is_atty()
    module_0.is_hop_by_hop_header(bool_1)


def test_case_5():
    int_0 = 313
    var_0 = module_0.has_message_body(int_0)
    var_1 = var_0.__repr__()
    bool_0 = module_0.is_atty()
    object_0 = module_1.object()
    default_0 = module_0.Default()
    str_0 = default_0.__str__()


def test_case_6():
    bool_0 = module_0.is_atty()
    bool_1 = module_0.is_atty()
    float_0 = 20.0
    var_0 = module_0.has_message_body(float_0)


def test_case_7():
    int_0 = 302
    var_0 = module_0.has_message_body(int_0)
    bool_0 = module_0.is_atty()


def test_case_8():
    str_0 = "'9\x0c2zm?*^Ky"
    var_0 = module_2.ismodule(str_0)
    var_1 = module_2.ismodule(var_0)
    str_1 = var_1.__str__()
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    var_2 = module_0.remove_entity_headers(dict_0, str_0)
    str_2 = var_2.__str__()
    int_0 = 304
    var_3 = module_0.has_message_body(int_0)
    var_4 = var_3.__repr__()
    bool_0 = module_0.is_atty()
    object_0 = module_1.object()
    default_0 = module_0.Default()
    str_3 = var_0.__str__()
    str_4 = default_0.__str__()
    var_5 = module_0.is_hop_by_hop_header(var_4)
    module_0.has_message_body(str_3)


def test_case_9():
    str_0 = "Content-Length"
    var_0 = module_2.ismodule(str_0)
    var_1 = module_2.ismodule(var_0)
    str_1 = var_1.__str__()
    str_2 = var_1.__str__()
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    object_0 = module_1.object()
    bool_0 = module_0.is_atty()
    var_2 = module_0.remove_entity_headers(dict_0)
    object_1 = module_1.object(**var_2)
    str_3 = var_1.__str__()
    str_4 = str_3.__str__()
    module_0.is_hop_by_hop_header(bool_0)


def test_case_10():
    str_0 = "Content-Length"
    var_0 = module_2.ismodule(str_0)
    var_1 = module_2.ismodule(var_0)
    str_1 = var_1.__str__()
    str_2 = var_1.__str__()
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    var_2 = module_0.remove_entity_headers(dict_0, str_0)
    object_0 = module_1.object()
    bool_0 = module_0.is_atty()
    var_3 = module_0.remove_entity_headers(dict_0, dict_0)
    module_1.object(**var_3)
