# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.helpers as module_0
import inspect as module_1


def test_case_0():
    tuple_0 = ()
    module_0.has_message_body(tuple_0)


def test_case_1():
    str_0 = ":app?"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.remove_entity_headers(dict_0)


def test_case_2():
    bool_0 = module_0.is_atty()


def test_case_3():
    bytes_0 = b"\xfb\x1b\x8a\xd3)x$\x83\xdcM\x95\xde"
    var_0 = module_0.is_hop_by_hop_header(bytes_0)
    str_0 = var_0.__str__()


def test_case_4():
    default_0 = module_0.Default()
    var_0 = default_0.__repr__()
    bool_0 = module_0.is_atty()
    var_1 = default_0.__repr__()
    module_0.remove_entity_headers(default_0)


def test_case_5():
    default_0 = module_0.Default()
    str_0 = default_0.__str__()
    int_0 = 28
    bool_0 = module_0.is_atty()
    module_0.is_entity_header(int_0)


def test_case_6():
    int_0 = 4096
    var_0 = module_0.has_message_body(int_0)
    bool_0 = module_0.is_atty()
    module_0.is_entity_header(var_0)


def test_case_7():
    int_0 = 4121
    var_0 = module_0.has_message_body(int_0)
    bool_0 = module_0.is_atty()
    str_0 = var_0.__str__()
    var_1 = module_0.Default()
    bool_1 = module_0.is_atty()
    var_2 = module_0.has_message_body(bool_0)


def test_case_8():
    bool_0 = module_0.is_atty()
    str_0 = "Ppq("
    var_0 = module_0.has_message_body(bool_0)
    dict_0 = {
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: var_0,
    }
    var_1 = module_0.remove_entity_headers(dict_0)
    float_0 = 304.0
    var_2 = str_0.__repr__()
    var_3 = module_0.has_message_body(float_0)
    bool_1 = module_0.is_atty()
    default_0 = module_0.Default()
    bool_2 = module_0.is_atty()
    str_1 = default_0.__str__()
    var_4 = module_0.is_hop_by_hop_header(str_0)
    var_5 = module_0.remove_entity_headers(var_1)
    var_6 = module_1.ismodule(var_0)
    var_7 = module_0.remove_entity_headers(dict_0)
    default_1 = module_0.Default()
    default_2 = module_0.Default()
    module_0.is_hop_by_hop_header(bool_2)
