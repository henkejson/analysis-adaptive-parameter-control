# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.helpers as module_0


def test_case_0():
    bool_0 = module_0.is_atty()
    var_0 = module_0.has_message_body(bool_0)


def test_case_1():
    bytes_0 = b"\xe3\x07\xcdU"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    var_0 = module_0.remove_entity_headers(dict_0)


def test_case_2():
    bool_0 = module_0.is_atty()


def test_case_3():
    bytes_0 = b"\xe3\x07\xcdU"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    var_0 = module_0.remove_entity_headers(dict_0)
    var_1 = module_0.is_hop_by_hop_header(bytes_0)


def test_case_4():
    bool_0 = False
    none_type_0 = None
    module_0.remove_entity_headers(bool_0, none_type_0)


def test_case_5():
    dict_0 = {}
    bool_0 = module_0.is_atty()
    var_0 = module_0.has_message_body(bool_0)
    var_1 = module_0.remove_entity_headers(dict_0)
    default_0 = module_0.Default()
    var_2 = default_0.__repr__()


def test_case_6():
    dict_0 = {}
    default_0 = module_0.Default()
    str_0 = default_0.__str__()
    int_0 = 237
    var_0 = module_0.has_message_body(int_0)
    bool_0 = module_0.is_atty()
    bool_1 = module_0.is_atty()
    var_1 = module_0.remove_entity_headers(dict_0)
    var_2 = module_0.has_message_body(var_0)
    var_3 = module_0.has_message_body(bool_0)
    module_0.Default(**var_3)


def test_case_7():
    bool_0 = module_0.is_atty()
    bool_1 = module_0.is_atty()
    int_0 = 203
    default_0 = module_0.Default()
    var_0 = module_0.has_message_body(int_0)
    module_0.is_hop_by_hop_header(int_0)


def test_case_8():
    bool_0 = module_0.is_atty()
    bool_1 = module_0.is_atty()
    default_0 = module_0.Default()
    str_0 = default_0.__str__()
    dict_0 = {str_0: str_0, default_0: str_0}
    int_0 = 204
    default_1 = module_0.Default()
    var_0 = module_0.has_message_body(int_0)
    bool_2 = module_0.is_atty()
    var_1 = module_0.is_hop_by_hop_header(str_0)
    var_2 = default_0.__repr__()
    var_3 = module_0.is_entity_header(var_2)
    module_0.remove_entity_headers(dict_0)
