# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import codetiming._timer as module_0
import dataclasses as module_1


def test_case_0():
    float_arg_0 = module_0.FloatArg()


def test_case_1():
    timer_0 = module_0.Timer()
    float_arg_0 = module_0.FloatArg()
    dict_0 = {}
    timer_error_0 = module_0.TimerError(**dict_0)
    none_type_0 = timer_0.start()
    timer_0.__enter__()


def test_case_2():
    timer_0 = module_0.Timer()
    timer_1 = timer_0.__enter__()


def test_case_3():
    timer_0 = module_0.Timer()
    timer_1 = timer_0.__enter__()
    float_0 = timer_1.stop()
    timer_0.__exit__()


def test_case_4():
    timer_0 = module_0.Timer()
    timer_1 = timer_0.__enter__()
    none_type_0 = timer_0.__exit__()


def test_case_5():
    str_0 = "N\x0b2.w\x0b=T+z"
    float_arg_0 = module_0.FloatArg()
    timer_0 = module_0.Timer(initial_text=str_0, logger=float_arg_0)
    timer_0.start()


def test_case_6():
    str_0 = "Q-/,) "
    timer_0 = module_0.Timer(str_0)
    timer_1 = timer_0.__enter__()
    timer_error_0 = module_0.TimerError()
    str_1 = "N\x0b2.wt0T+z"
    timer_2 = module_0.Timer(str_1)
    timer_error_1 = module_0.TimerError()
    float_0 = timer_1.stop()
    float_arg_0 = module_0.FloatArg()
    timer_1.__exit__()


def test_case_7():
    timer_0 = module_0.Timer()
    timer_1 = timer_0.__enter__()
    timer_2 = module_0.Timer(initial_text=timer_0)
    var_0 = timer_1.__repr__()
    var_1 = timer_1.__eq__(var_0)
    none_type_0 = timer_2.start()
    var_2 = var_0.__repr__()
    var_2.min(timer_1)


def test_case_8():
    timer_0 = module_0.Timer()
    list_0 = [timer_0, timer_0, timer_0, timer_0]
    timer_1 = timer_0.__enter__()
    none_type_0 = None
    timer_2 = module_0.Timer(none_type_0)
    timer_3 = module_0.Timer(timer_1, none_type_0, timer_1)
    var_0 = module_1.dataclass(eq=timer_3, order=list_0, frozen=timer_2)
    var_1 = var_0.__repr__()
    var_2 = timer_2.__eq__(timer_3)
    none_type_1 = timer_3.start()
    var_3 = var_0.__repr__()
    none_type_2 = timer_2.start()
    var_1.copy()


def test_case_9():
    timer_0 = module_0.Timer()
    timer_1 = timer_0.__enter__()
    str_0 = "N\x0b2.w\x0b=T+z"
    float_arg_0 = module_0.FloatArg()
    none_type_0 = timer_0.__exit__()
    timer_2 = module_0.Timer(initial_text=str_0, logger=float_arg_0)
    timer_3 = module_0.Timer(none_type_0, float_arg_0, none_type_0)
    timer_4 = module_0.Timer(text=timer_1, initial_text=str_0, logger=none_type_0)
    timer_5 = module_0.Timer(logger=none_type_0)
    var_0 = timer_4.__repr__()
    var_1 = var_0.__len__()
    none_type_1 = timer_4.start()
    var_0.__contains__(none_type_0)


def test_case_10():
    none_type_0 = None
    timer_0 = module_0.Timer(logger=none_type_0)
    none_type_1 = timer_0.start()
    timer_1 = module_0.Timer(none_type_0)
    timer_2 = module_0.Timer()
    timer_3 = timer_2.__enter__()
    none_type_2 = timer_0.__exit__()
    str_0 = "N\x0b2.=Tz"
    var_0 = timer_2.__call__(timer_2)
    timer_4 = module_0.Timer()
    timer_5 = module_0.Timer(str_0)
    var_1 = timer_5.__repr__()
    var_2 = module_1.dataclass(
        init=timer_3, order=timer_4, match_args=var_0, slots=none_type_0
    )
    var_2.__len__()


def test_case_11():
    timer_0 = module_0.Timer()
    list_0 = [timer_0]
    timer_1 = timer_0.__enter__()
    none_type_0 = None
    timer_2 = module_0.Timer(none_type_0, timer_1, logger=list_0)
    timer_3 = timer_2.__enter__()
    var_0 = timer_1.__call__(none_type_0)
    timer_2.__exit__()
