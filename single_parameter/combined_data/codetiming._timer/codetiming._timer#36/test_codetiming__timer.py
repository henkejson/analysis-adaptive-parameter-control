# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import codetiming._timer as module_0
import dataclasses as module_1


def test_case_0():
    float_arg_0 = module_0.FloatArg()


def test_case_1():
    str_0 = "Elapsed time: {:0.4f} seconds"
    timer_0 = module_0.Timer(str_0)
    timer_1 = timer_0.__enter__()
    timer_2 = module_0.Timer(str_0, logger=str_0)
    timer_1.__enter__()


def test_case_2():
    timer_0 = module_0.Timer()
    timer_1 = module_0.Timer(initial_text=timer_0, logger=timer_0)
    timer_2 = timer_1.__enter__()


def test_case_3():
    timer_0 = module_0.Timer()
    none_type_0 = timer_0.start()
    none_type_1 = timer_0.__exit__()


def test_case_4():
    str_0 = ":Y>|-\niA}Ae"
    timer_error_0 = module_0.TimerError()
    timer_0 = module_0.Timer(str_0, initial_text=str_0, logger=str_0)
    var_0 = timer_0.__repr__()
    timer_0.start()


def test_case_5():
    timer_0 = module_0.Timer()
    timer_0.__exit__()


def test_case_6():
    none_type_0 = None
    none_type_1 = None
    timer_0 = module_0.Timer(none_type_1, logger=none_type_0)
    var_0 = timer_0.__eq__(none_type_0)
    timer_1 = timer_0.__enter__()
    none_type_2 = timer_0.__exit__()
    timer_0.__exit__()


def test_case_7():
    str_0 = "Elapsed time: {:0.4f} seconds"
    timer_0 = module_0.Timer(str_0)
    timer_1 = timer_0.__enter__()
    float_0 = timer_1.stop()


def test_case_8():
    none_type_0 = None
    none_type_1 = None
    float_0 = -2974.8
    bool_0 = True
    timer_0 = module_0.Timer(bool_0, initial_text=bool_0)
    none_type_2 = timer_0.start()
    var_0 = module_1.dataclass(
        repr=none_type_0, eq=none_type_0, frozen=none_type_1, match_args=float_0
    )
    timer_error_0 = module_0.TimerError()
    var_1 = var_0.__repr__()
    timer_1 = module_0.Timer()
    var_2 = var_1.__eq__(none_type_1)
    var_2.__exit__()


def test_case_9():
    timer_0 = module_0.Timer()
    timer_1 = module_0.Timer(text=timer_0, initial_text=timer_0, logger=timer_0)
    timer_2 = timer_1.__enter__()
    list_0 = [timer_1, timer_1]
    none_type_0 = timer_1.__exit__(*list_0)
    var_0 = timer_0.__repr__()
    var_0.mean(none_type_0)
