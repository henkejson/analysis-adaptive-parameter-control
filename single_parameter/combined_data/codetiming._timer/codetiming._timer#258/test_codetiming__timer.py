# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import codetiming._timer as module_0
import dataclasses as module_1


def test_case_0():
    timer_error_0 = module_0.TimerError()


def test_case_1():
    complex_0 = -3310.65 + 2534.6j
    timer_0 = module_0.Timer(initial_text=complex_0)
    none_type_0 = timer_0.start()


def test_case_2():
    timer_0 = module_0.Timer()
    timer_0.stop()


def test_case_3():
    timer_0 = module_0.Timer()
    none_type_0 = timer_0.start()
    none_type_1 = timer_0.__exit__()


def test_case_4():
    float_arg_0 = module_0.FloatArg()
    none_type_0 = None
    timer_0 = module_0.Timer(none_type_0, logger=none_type_0)
    timer_1 = timer_0.__enter__()


def test_case_5():
    complex_0 = -3310.65 + 2534.6j
    timer_0 = module_0.Timer(initial_text=complex_0)
    timer_1 = timer_0.__enter__()
    timer_1.start()


def test_case_6():
    none_type_0 = None
    timer_0 = module_0.Timer(none_type_0, logger=none_type_0)
    timer_1 = timer_0.__enter__()
    none_type_1 = timer_0.__exit__()


def test_case_7():
    timer_0 = module_0.Timer()
    str_0 = "T"
    float_0 = 1564.172
    timer_1 = module_0.Timer(text=float_0, initial_text=str_0)
    timer_2 = timer_1.__enter__()
    var_0 = module_1.field(kw_only=str_0)
    module_0.TimerError(*float_0)


def test_case_8():
    str_0 = "Dv~I\r.f<M\x0c"
    dict_0 = {str_0: str_0}
    timer_0 = module_0.Timer(dict_0, initial_text=dict_0)
    none_type_0 = timer_0.start()
    str_0.stop()


def test_case_9():
    complex_0 = -3310.65 + 2534.6j
    timer_0 = module_0.Timer(complex_0)
    timer_1 = timer_0.__enter__()
    list_0 = [timer_0]
    none_type_0 = timer_0.__exit__(*list_0)
    none_type_1 = timer_1.start()
    timer_1.start()
