# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import codetiming._timer as module_0
import dataclasses as module_1


def test_case_0():
    timer_0 = module_0.Timer()


def test_case_1():
    timer_0 = module_0.Timer()
    none_type_0 = timer_0.start()
    timer_0.__enter__()


def test_case_2():
    timer_0 = module_0.Timer()
    none_type_0 = timer_0.start()


def test_case_3():
    timer_0 = module_0.Timer()
    timer_0.__exit__()


def test_case_4():
    float_arg_0 = module_0.FloatArg()
    none_type_0 = None
    float_arg_1 = module_0.FloatArg()
    timer_0 = module_0.Timer(none_type_0, logger=float_arg_1)
    timer_1 = timer_0.__enter__()


def test_case_5():
    dict_0 = {}
    timer_error_0 = module_0.TimerError()
    timer_0 = module_0.Timer()
    timer_1 = timer_0.__enter__()
    none_type_0 = timer_0.__exit__()
    float_arg_0 = module_0.FloatArg(**dict_0)
    timer_2 = module_0.Timer(text=none_type_0, logger=none_type_0)
    none_type_1 = None
    var_0 = timer_1.__repr__()
    float_arg_1 = module_0.FloatArg()
    timer_3 = module_0.Timer(text=float_arg_1, logger=none_type_1)
    timer_4 = timer_2.__enter__()


def test_case_6():
    timer_0 = module_0.Timer()
    none_type_0 = timer_0.start()
    float_0 = timer_0.stop()


def test_case_7():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0}
    timer_0 = module_0.Timer(none_type_0, initial_text=none_type_0, logger=none_type_0)
    none_type_1 = timer_0.start()
    float_0 = timer_0.stop()
    none_type_2 = timer_0.start()
    var_0 = module_1.field(default_factory=none_type_0, compare=set_0)
    timer_1 = module_0.Timer(text=var_0, initial_text=var_0, logger=set_0)
    timer_0.start()


def test_case_8():
    timer_error_0 = module_0.TimerError()
    none_type_0 = None
    str_0 = "Ho"
    timer_0 = module_0.Timer(none_type_0, initial_text=str_0)
    timer_1 = timer_0.__enter__()
    none_type_1 = timer_0.__exit__()
    var_0 = timer_1.__repr__()
    float_arg_0 = module_0.FloatArg()
    timer_2 = module_0.Timer()
    timer_3 = timer_2.__enter__()


def test_case_9():
    timer_error_0 = module_0.TimerError()
    bool_0 = True
    timer_0 = module_0.Timer(text=bool_0, initial_text=timer_error_0)
    timer_1 = timer_0.__enter__()
    float_arg_0 = module_0.FloatArg()
    dict_0 = {bool_0: float_arg_0, bool_0: float_arg_0}
    timer_2 = module_0.Timer(timer_1, initial_text=dict_0)
    var_0 = timer_2.__repr__()
    var_0.__enter__()


def test_case_10():
    complex_0 = -576.2032 + 3558.712j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    str_0 = "Timer started"
    timer_0 = module_0.Timer(list_0, str_0)
    timer_error_0 = module_0.TimerError()
    timer_1 = timer_0.__enter__()
    timer_0.__exit__()


def test_case_11():
    timer_error_0 = module_0.TimerError()
    bool_0 = True
    timer_0 = module_0.Timer(text=bool_0, initial_text=timer_error_0)
    timer_1 = timer_0.__enter__()
    float_arg_0 = module_0.FloatArg()
    dict_0 = {bool_0: float_arg_0, bool_0: float_arg_0}
    timer_2 = module_0.Timer(timer_1, initial_text=dict_0)
    var_0 = timer_2.__enter__()
    var_0.__enter__()


def test_case_12():
    dict_0 = {}
    timer_error_0 = module_1.dataclass(kw_only=dict_0, slots=dict_0)
    none_type_0 = None
    none_type_1 = None
    timer_0 = module_0.Timer(none_type_0, timer_error_0, none_type_1)
    timer_1 = timer_0.__enter__()
    timer_0.__exit__()
