# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import codetiming._timer as module_0


def test_case_0():
    float_arg_0 = module_0.FloatArg()


def test_case_1():
    timer_0 = module_0.Timer()
    timer_1 = timer_0.__enter__()
    timer_0.start()


def test_case_2():
    float_arg_0 = module_0.FloatArg()
    timer_0 = module_0.Timer(initial_text=float_arg_0)
    timer_1 = timer_0.__enter__()


def test_case_3():
    float_arg_0 = module_0.FloatArg()
    timer_0 = module_0.Timer(initial_text=float_arg_0)
    timer_1 = timer_0.__enter__()
    float_0 = timer_1.stop()
    timer_1.__exit__()


def test_case_4():
    timer_0 = module_0.Timer()
    timer_1 = timer_0.__enter__()
    none_type_0 = timer_0.__exit__()


def test_case_5():
    set_0 = set()
    timer_0 = module_0.Timer(logger=set_0)
    timer_1 = timer_0.__enter__()
    var_0 = timer_1.__eq__(timer_1)
    timer_0.__enter__()


def test_case_6():
    set_0 = set()
    timer_0 = module_0.Timer(logger=set_0)
    timer_1 = timer_0.__enter__()
    float_0 = timer_0.stop()
    var_0 = timer_1.__eq__(timer_1)
    timer_2 = timer_0.__enter__()
    list_0 = []
    var_1 = timer_0.__repr__()
    float_1 = timer_0.stop()
    timer_error_0 = module_0.TimerError()
    timer_3 = module_0.Timer(timer_error_0, timer_0, timer_error_0)
    timer_0.__exit__(*list_0)


def test_case_7():
    float_arg_0 = module_0.FloatArg()
    none_type_0 = None
    timer_0 = module_0.Timer(float_arg_0, none_type_0, float_arg_0)
    none_type_1 = timer_0.start()
    str_0 = "$$d"
    bool_0 = False
    list_0 = [float_arg_0, str_0, bool_0]
    timer_0.__exit__(*list_0)


def test_case_8():
    str_0 = "]=fIa\x0bo0I{"
    timer_0 = module_0.Timer()
    str_1 = "$?_dAdFvr^Jda![15"
    timer_1 = module_0.Timer(initial_text=str_0, logger=str_1)
    timer_1.__enter__()


def test_case_9():
    str_0 = "Timer is running. Use .stop() to stop it"
    timer_0 = module_0.Timer(str_0)
    timer_1 = timer_0.__enter__()
    none_type_0 = timer_1.__exit__()
