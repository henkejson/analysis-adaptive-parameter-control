# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import codetiming._timer as module_0
import dataclasses as module_1


def test_case_0():
    float_arg_0 = module_0.FloatArg()


def test_case_1():
    bool_0 = True
    timer_0 = module_0.Timer(initial_text=bool_0)
    timer_1 = timer_0.__enter__()
    none_type_0 = timer_1.__exit__()
    timer_0.__exit__()


def test_case_2():
    timer_0 = module_0.Timer()
    timer_1 = timer_0.__enter__()
    none_type_0 = timer_1.__exit__()


def test_case_3():
    bool_0 = True
    timer_0 = module_0.Timer(initial_text=bool_0)
    timer_1 = timer_0.__enter__()
    timer_1.__enter__()


def test_case_4():
    none_type_0 = None
    timer_0 = module_0.Timer(logger=none_type_0)
    timer_1 = timer_0.__enter__()
    var_0 = timer_0.__call__(timer_1)
    none_type_1 = timer_1.__exit__()


def test_case_5():
    bool_0 = True
    timer_0 = module_0.Timer(initial_text=bool_0)
    timer_1 = timer_0.__enter__()
    none_type_0 = timer_0.__exit__()


def test_case_6():
    none_type_0 = None
    str_0 = "Y"
    timer_0 = module_0.Timer(text=none_type_0, initial_text=str_0)
    timer_1 = timer_0.__enter__()
    var_0 = timer_1.__call__(none_type_0)
    timer_1.__exit__()


def test_case_7():
    timer_0 = module_0.Timer()
    str_0 = "Timer"
    timer_1 = module_0.Timer(str_0, str_0)
    var_0 = timer_0.__repr__()
    timer_2 = timer_1.__enter__()
    var_1 = module_0.Timer(text=timer_1)
    none_type_0 = timer_2.__exit__()
    var_1.__exit__(*var_0)


def test_case_8():
    bool_0 = True
    str_0 = "2l0v>@O"
    timer_0 = module_0.Timer(bool_0, str_0, bool_0)
    timer_1 = timer_0.__enter__()
    module_1.field(
        default=timer_1,
        repr=str_0,
        hash=timer_0,
        compare=timer_0,
        metadata=bool_0,
        kw_only=str_0,
    )


def test_case_9():
    bool_0 = True
    timer_0 = module_0.Timer(initial_text=bool_0)
    timer_1 = timer_0.__enter__()
    timer_2 = module_0.Timer(text=timer_0, logger=timer_0)
    var_0 = timer_2.__call__(bool_0)
    var_0.__call__(timer_1)
