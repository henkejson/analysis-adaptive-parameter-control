# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import codetiming._timer as module_0
import contextlib as module_1


def test_case_0():
    timer_0 = module_0.Timer()


def test_case_1():
    timer_0 = module_0.Timer()
    timer_1 = timer_0.__enter__()
    var_0 = timer_1.__repr__()
    timer_0.start()


def test_case_2():
    timer_0 = module_0.Timer()
    none_type_0 = timer_0.start()


def test_case_3():
    timer_0 = module_0.Timer()
    timer_0.stop()


def test_case_4():
    timer_0 = module_0.Timer()
    none_type_0 = timer_0.start()
    float_0 = timer_0.stop()


def test_case_5():
    timer_0 = module_0.Timer()
    timer_1 = timer_0.__enter__()


def test_case_6():
    timer_0 = module_0.Timer()
    var_0 = timer_0.__call__(timer_0)
    var_1 = var_0.__call__(var_0)


def test_case_7():
    none_type_0 = None
    timer_0 = module_0.Timer(logger=none_type_0)
    timer_1 = timer_0.__enter__()
    timer_0.__enter__()


def test_case_8():
    str_0 = "=_y=r@$+A"
    timer_0 = module_0.Timer(str_0, str_0, str_0)
    timer_1 = timer_0.__enter__()
    none_type_0 = None
    none_type_1 = timer_0.__exit__()
    timer_2 = timer_0.__enter__()
    float_0 = timer_1.stop()
    list_0 = [none_type_0]
    timer_3 = timer_1.__enter__()
    timer_error_0 = module_0.TimerError(*list_0)
    timer_4 = module_0.Timer(none_type_0, initial_text=none_type_0)
    bool_0 = False
    var_0 = timer_4.__repr__()
    module_0.FloatArg(*bool_0)


def test_case_9():
    str_0 = "=_y=r@$+A"
    timer_0 = module_0.Timer(str_0, str_0, str_0)
    var_0 = timer_0.__eq__(str_0)
    timer_1 = timer_0.__enter__()
    none_type_0 = None
    none_type_1 = timer_0.__exit__()
    timer_2 = module_0.Timer(text=var_0, initial_text=var_0)
    timer_3 = timer_0.__enter__()
    list_0 = [none_type_0]
    timer_4 = timer_2.__enter__()
    timer_error_0 = module_0.TimerError(*list_0)
    timer_5 = module_0.Timer(none_type_0, initial_text=none_type_0)
    bool_0 = False
    module_0.FloatArg(*bool_0)


def test_case_10():
    str_0 = "o+Y3"
    str_1 = "[v5N$lvUDO|!F"
    context_decorator_0 = module_1.ContextDecorator()
    timer_0 = module_0.Timer(str_0, str_1, context_decorator_0)
    var_0 = context_decorator_0.__call__(context_decorator_0)
    none_type_0 = timer_0.start()
    var_1 = context_decorator_0.__call__(str_1)
    timer_0.__enter__()


def test_case_11():
    str_0 = "=_y=r@$+A"
    none_type_0 = None
    timer_0 = module_0.Timer(none_type_0, str_0, str_0, none_type_0)
    var_0 = timer_0.__eq__(str_0)
    timer_1 = timer_0.__enter__()
    none_type_1 = None
    none_type_2 = timer_0.__exit__()
    timer_2 = module_0.Timer(text=var_0, initial_text=var_0)
    timer_3 = timer_0.__enter__()
    list_0 = [none_type_1]
    timer_4 = timer_2.__enter__()
    timer_error_0 = module_0.TimerError(*list_0)
    timer_5 = module_0.Timer(none_type_1, initial_text=none_type_1)
    bool_0 = False
    module_0.FloatArg(*bool_0)
