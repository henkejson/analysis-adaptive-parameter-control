# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import codetiming._timer as module_0
import dataclasses as module_1


def test_case_0():
    timer_error_0 = module_0.TimerError()


def test_case_1():
    timer_error_0 = module_0.TimerError()
    dict_0 = {}
    none_type_0 = None
    timer_0 = module_0.Timer(timer_error_0, dict_0, none_type_0, timer_error_0)
    timer_1 = timer_0.__enter__()
    timer_2 = module_0.Timer()
    timer_3 = module_0.Timer(none_type_0, timer_0)


def test_case_2():
    float_arg_0 = module_0.FloatArg()
    timer_0 = module_0.Timer()
    timer_1 = module_0.Timer(initial_text=timer_0)
    timer_2 = timer_1.__enter__()
    float_0 = timer_2.stop()
    var_0 = timer_1.__repr__()
    timer_error_0 = module_0.TimerError()
    none_type_0 = timer_1.start()
    timer_0.stop()


def test_case_3():
    float_arg_0 = module_0.FloatArg()
    timer_0 = module_0.Timer()
    var_0 = timer_0.__eq__(timer_0)
    timer_1 = module_0.Timer()
    none_type_0 = timer_1.start()
    timer_2 = module_0.Timer(initial_text=var_0)
    none_type_1 = timer_1.__exit__()
    bytes_0 = b"\x85O\x9f)\x9f\x99\xd2\x01\xe8"
    timer_3 = module_0.Timer(bytes_0, float_arg_0)
    var_1 = module_1.field(kw_only=float_arg_0)
    var_2 = timer_1.__eq__(var_1)
    timer_4 = module_0.Timer()
    float_arg_1 = module_0.FloatArg()
    timer_5 = module_0.Timer()


def test_case_4():
    float_arg_0 = module_0.FloatArg()
    none_type_0 = None
    timer_0 = module_0.Timer(float_arg_0, logger=none_type_0)
    timer_1 = module_0.Timer()
    timer_2 = module_0.Timer()
    none_type_1 = timer_2.start()
    none_type_2 = timer_0.start()
    timer_3 = module_0.Timer(initial_text=timer_1)
    var_0 = timer_2.__eq__(timer_2)
    none_type_3 = timer_2.__exit__()
    bytes_0 = b"\x85O\x9f)\x9f\x99\xd2\x01\xe8"
    timer_4 = module_0.Timer(bytes_0, float_arg_0)
    var_1 = module_1.field(kw_only=float_arg_0)
    var_1.__copy__()


def test_case_5():
    timer_error_0 = module_0.TimerError()
    dict_0 = {}
    none_type_0 = None
    timer_0 = module_0.Timer(timer_error_0, dict_0, none_type_0, timer_error_0)
    timer_1 = timer_0.__enter__()
    timer_0.__enter__()


def test_case_6():
    float_arg_0 = module_0.FloatArg()
    none_type_0 = None
    timer_0 = module_0.Timer(float_arg_0, initial_text=float_arg_0, logger=none_type_0)
    none_type_1 = timer_0.start()
    timer_1 = module_0.Timer()
    none_type_2 = timer_1.start()
    var_0 = timer_1.__eq__(timer_0)
    float_0 = timer_0.stop()
    var_1 = var_0.__ror__(none_type_0)
    var_0.popitem()


def test_case_7():
    float_arg_0 = module_0.FloatArg()
    timer_0 = module_0.Timer()
    timer_1 = module_0.Timer()
    timer_2 = module_0.Timer(timer_0, initial_text=float_arg_0)
    none_type_0 = timer_2.start()
    var_0 = timer_0.__eq__(timer_2)
    timer_0.__exit__(*var_0)


def test_case_8():
    float_arg_0 = module_0.FloatArg()
    timer_0 = module_0.Timer()
    timer_1 = timer_0.__repr__()
    timer_2 = module_0.Timer(text=timer_1, initial_text=float_arg_0)
    timer_3 = module_0.Timer()
    none_type_0 = timer_3.start()
    timer_4 = module_0.Timer(initial_text=timer_1)
    var_0 = timer_3.__eq__(timer_3)
    timer_5 = module_0.Timer(none_type_0, logger=var_0)
    var_1 = timer_4.__call__(var_0)
    var_2 = timer_4.__repr__()
    timer_error_0 = module_0.TimerError()
    timer_4.start()


def test_case_9():
    float_arg_0 = module_0.FloatArg()
    timer_0 = module_0.Timer()
    timer_1 = module_0.Timer()
    timer_2 = module_0.Timer()
    tuple_0 = ()
    bool_0 = False
    timer_3 = module_0.Timer(initial_text=tuple_0, logger=bool_0)
    none_type_0 = None
    var_0 = timer_0.__eq__(none_type_0)
    timer_4 = module_0.Timer(var_0, timer_0, var_0)
    timer_5 = timer_4.__enter__()
    var_1 = timer_1.__call__(timer_4)
    var_2 = timer_3.__repr__()
    timer_error_0 = module_0.TimerError()
    float_0 = timer_5.stop()
    var_3 = module_1.field(repr=none_type_0)
    var_4 = var_3.__repr__()
    var_5 = var_1.__eq__(timer_1)
    var_4.copy()
