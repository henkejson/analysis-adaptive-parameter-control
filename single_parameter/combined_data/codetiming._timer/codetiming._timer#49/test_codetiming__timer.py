# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import codetiming._timer as module_0


def test_case_0():
    timer_0 = module_0.Timer()


def test_case_1():
    timer_0 = module_0.Timer()
    none_type_0 = timer_0.start()
    timer_0.__enter__()


def test_case_2():
    timer_0 = module_0.Timer()
    none_type_0 = timer_0.start()


def test_case_3():
    timer_0 = module_0.Timer()
    timer_0.stop()


def test_case_4():
    timer_0 = module_0.Timer()
    none_type_0 = timer_0.start()
    float_0 = timer_0.stop()


def test_case_5():
    timer_0 = module_0.Timer()
    timer_1 = timer_0.__enter__()


def test_case_6():
    timer_0 = module_0.Timer()
    none_type_0 = timer_0.start()
    none_type_1 = timer_0.__exit__()


def test_case_7():
    dict_0 = {}
    none_type_0 = None
    timer_0 = module_0.Timer(logger=none_type_0)
    float_arg_0 = module_0.FloatArg(**dict_0)
    timer_1 = timer_0.__enter__()
    float_0 = timer_0.stop()
    timer_error_0 = module_0.TimerError()
    timer_2 = module_0.Timer(initial_text=none_type_0)
    timer_error_1 = module_0.TimerError()
    timer_3 = module_0.Timer(text=float_arg_0)


def test_case_8():
    str_0 = "3)"
    timer_0 = module_0.Timer(text=str_0, initial_text=str_0, logger=str_0)
    timer_0.__enter__()


def test_case_9():
    bytes_0 = b"\xe8,\x00p4\x9b\xf3X~\xdc\x88Q\x1b\x7f\xfc\xad\x90\x1cb"
    timer_error_0 = module_0.TimerError()
    bool_0 = False
    list_0 = [bool_0, bytes_0]
    timer_error_1 = module_0.TimerError(*list_0)
    str_0 = "XQ[.]e\no5![o"
    bytes_1 = b"n\xa7i\xff\xf9\xbf@\xe3Z^\xe2\x00\x85"
    timer_0 = module_0.Timer(str_0, initial_text=bytes_1)
    timer_error_2 = module_0.TimerError()
    timer_1 = timer_0.__enter__()
    timer_0.start()


def test_case_10():
    timer_error_0 = module_0.TimerError()
    complex_0 = 863 + 2166.93j
    float_arg_0 = module_0.FloatArg()
    timer_0 = module_0.Timer(timer_error_0, initial_text=complex_0)
    none_type_0 = timer_0.start()
    float_0 = timer_0.stop()
    timer_0.__exit__()


def test_case_11():
    timer_error_0 = module_0.TimerError()
    timer_0 = module_0.Timer(initial_text=timer_error_0)
    complex_0 = 863 + 2166.93j
    float_arg_0 = module_0.FloatArg()
    timer_1 = timer_0.__enter__()
    timer_2 = module_0.Timer(timer_error_0, initial_text=complex_0)
    none_type_0 = timer_2.start()
    none_type_1 = timer_2.__exit__()
    module_0.TimerError(**none_type_1)


def test_case_12():
    timer_error_0 = module_0.TimerError()
    bool_0 = True
    timer_0 = module_0.Timer(initial_text=bool_0)
    complex_0 = -4962.315 - 1016.451256j
    float_arg_0 = module_0.FloatArg()
    timer_1 = timer_0.__eq__(bool_0)
    timer_2 = module_0.Timer(timer_error_0, timer_0, complex_0)
    none_type_0 = timer_2.start()
    none_type_1 = timer_2.__exit__()
    list_0 = [timer_1]
    timer_1.__exit__(*list_0)
