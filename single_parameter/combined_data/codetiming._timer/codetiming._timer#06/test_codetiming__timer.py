# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import codetiming._timer as module_0
import dataclasses as module_1


def test_case_0():
    timer_error_0 = module_0.TimerError()


def test_case_1():
    str_0 = "name"
    timer_0 = module_0.Timer(text=str_0, initial_text=str_0)
    none_type_0 = timer_0.start()
    var_0 = module_1.field(default=none_type_0)
    none_type_1 = timer_0.__exit__()
    none_type_2 = timer_0.start()
    timer_0.__enter__()


def test_case_2():
    float_arg_0 = module_0.FloatArg()
    timer_0 = module_0.Timer(initial_text=float_arg_0)
    none_type_0 = timer_0.start()


def test_case_3():
    bool_0 = True
    timer_0 = module_0.Timer(initial_text=bool_0)
    timer_1 = module_0.Timer()
    timer_2 = timer_0.__enter__()
    timer_1.__exit__()


def test_case_4():
    none_type_0 = None
    timer_0 = module_0.Timer(none_type_0)
    timer_1 = timer_0.__enter__()
    none_type_1 = timer_1.__exit__()


def test_case_5():
    float_arg_0 = module_0.FloatArg()
    bool_0 = True
    none_type_0 = None
    timer_0 = module_0.Timer(text=float_arg_0, logger=none_type_0)
    none_type_1 = timer_0.start()
    timer_1 = module_0.Timer(initial_text=bool_0, logger=none_type_0)
    none_type_2 = timer_1.start()
    timer_1.__enter__()


def test_case_6():
    float_arg_0 = module_0.FloatArg()
    none_type_0 = None
    timer_0 = module_0.Timer(text=float_arg_0, logger=none_type_0)
    none_type_1 = timer_0.start()
    var_0 = timer_0.__call__(timer_0)
    none_type_2 = timer_0.__exit__()
    list_0 = []
    float_arg_1 = module_0.FloatArg(*list_0)
    timer_1 = module_0.Timer(float_arg_1, initial_text=list_0)


def test_case_7():
    str_0 = "name"
    timer_0 = module_0.Timer(text=str_0, initial_text=str_0)
    timer_1 = timer_0.__enter__()
    none_type_0 = timer_1.__exit__()


def test_case_8():
    none_type_0 = None
    str_0 = " does not support item assignment. Use '.add()' to update values."
    timer_0 = module_0.Timer(none_type_0, str_0)
    list_0 = [timer_0, timer_0]
    none_type_1 = timer_0.start()
    timer_1 = module_0.Timer(timer_0, list_0, timer_0)
    timer_2 = module_0.Timer()
    float_arg_0 = module_0.FloatArg()
    timer_3 = module_0.Timer(initial_text=float_arg_0)
    timer_4 = timer_1.__enter__()
    none_type_2 = timer_3.start()
    var_0 = module_1.field(default=none_type_0, repr=none_type_0, kw_only=none_type_1)
    none_type_3 = timer_3.__exit__()
    none_type_4 = timer_2.start()


def test_case_9():
    none_type_0 = None
    str_0 = " does not support item assignment. Use '.add()' to update values."
    timer_0 = module_0.Timer(none_type_0, str_0)
    none_type_1 = timer_0.start()
    timer_1 = module_0.Timer(timer_0, logger=none_type_0)
    float_arg_0 = module_0.FloatArg()
    str_1 = "JH+V`\x0b~1}F=V'DDpsGoB"
    timer_2 = module_0.Timer(str_1)
    none_type_2 = timer_2.start()
    none_type_3 = timer_2.__exit__()
    timer_0.start()


def test_case_10():
    none_type_0 = None
    str_0 = " does not support item assignment. Use '.add()' to update values."
    timer_0 = module_0.Timer(none_type_0, str_0)
    none_type_1 = None
    list_0 = module_1.dataclass(init=str_0, repr=none_type_1)
    none_type_2 = timer_0.start()
    timer_1 = module_0.Timer(none_type_1, list_0, none_type_1)
    var_0 = timer_1.__repr__()
    timer_2 = module_0.Timer()
    float_arg_0 = module_0.FloatArg()
    timer_3 = module_0.Timer(initial_text=float_arg_0)
    timer_4 = timer_1.__enter__()
    var_1 = module_1.field(default=timer_1)
    timer_1.__exit__()
