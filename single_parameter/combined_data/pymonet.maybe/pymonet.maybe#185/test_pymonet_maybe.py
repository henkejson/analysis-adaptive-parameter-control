# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    tuple_0 = ()
    maybe_0 = module_0.Maybe(tuple_0, tuple_0)


def test_case_2():
    bytes_0 = b"\xed\xc1\xd13\x0c<\xfa\xbb\xe7\xef\x15\xcf\xc7\xdb\xed\x07J"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    bytes_0.to_box()


def test_case_3():
    none_type_0 = None
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    maybe_0 = module_0.Maybe(bool_0, dict_0)
    bool_1 = maybe_0.__eq__(none_type_0)


def test_case_4():
    bytes_0 = b"\xed\xc1\xd13\x0c<\xfa\xbb\xe7\xef\x15\xcf\xc7\xdb\xed\x07J"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    dict_0 = maybe_0.to_box()
    var_0 = maybe_0.map(dict_0)
    none_type_0 = None
    var_1 = maybe_0.bind(none_type_0)
    var_2 = maybe_0.to_box()
    var_3 = var_2.to_either()
    var_3.to_either()


def test_case_5():
    bytes_0 = b"\xf2\xc8[N%\\E\x14A\xc1'T\x0f"
    none_type_0 = None
    maybe_0 = module_0.Maybe(bytes_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    maybe_0.map(maybe_0)


def test_case_6():
    int_0 = -449
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.filter(int_0)
    var_1 = var_0.ap(int_0)
    var_2 = maybe_0.bind(var_1)
    var_3 = maybe_0.to_validation()
    var_4 = maybe_0.to_try()
    var_5 = var_1.to_validation()


def test_case_7():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.bind(none_type_0)


def test_case_8():
    int_0 = -449
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.filter(int_0)
    var_1 = var_0.ap(int_0)
    maybe_1 = module_0.Maybe(int_0, int_0)
    var_2 = maybe_1.to_validation()


def test_case_9():
    float_0 = 1766.28
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.ap(float_0)


def test_case_10():
    none_type_0 = None
    tuple_0 = ()
    maybe_0 = module_0.Maybe(tuple_0, tuple_0)
    maybe_0.filter(none_type_0)


def test_case_11():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_either()
    maybe_1 = module_0.Maybe(bool_0, maybe_0)
    var_1 = maybe_1.to_box()
    var_2 = var_1.to_either()
    var_3 = maybe_1.get_or_else(var_1)
    maybe_2 = module_0.Maybe(none_type_0, none_type_0)
    maybe_2.filter(maybe_2)


def test_case_12():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.get_or_else(bool_0)
    var_0.to_validation()


def test_case_13():
    str_0 = "|6M;5[V\n}7\r5TU("
    none_type_0 = None
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.bind(none_type_0)
    var_1 = var_0.to_either()
    var_1.get_or_else(var_1)


def test_case_14():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    bool_0 = False
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_0, none_type_0)
    var_0 = maybe_0.to_either()
    var_0.map(tuple_1)


def test_case_15():
    none_type_0 = None
    tuple_0 = ()
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.ap(none_type_0)
    var_1 = var_0.filter(none_type_0)
    var_2 = var_1.to_box()
    maybe_1 = module_0.Maybe(tuple_0, tuple_0)
    maybe_1.filter(none_type_0)


def test_case_16():
    int_0 = -3476
    bool_0 = False
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_try()
    var_1.to_lazy()


def test_case_17():
    bytes_0 = b"\x8e#\x1d_\xe0~\xf8\x02\x06\x17\x9e"
    complex_0 = -1525.323569 + 1407.1663j
    bool_0 = False
    maybe_0 = module_0.Maybe(complex_0, bool_0)
    maybe_1 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_1.to_lazy()
    bool_1 = maybe_1.__eq__(maybe_1)
    var_1 = var_0.to_validation()
    var_1.get_or_else(var_1)


def test_case_18():
    complex_0 = 2275.92893 + 2382.3j
    tuple_0 = ()
    bool_0 = True
    maybe_0 = module_0.Maybe(tuple_0, bool_0)
    var_0 = maybe_0.to_try()
    var_0.ap(complex_0)


def test_case_19():
    list_0 = []
    maybe_0 = module_0.Maybe(list_0, list_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.get_or_else(list_0)
    var_2 = maybe_0.to_validation()
    maybe_1 = module_0.Maybe(list_0, list_0)
    var_3 = maybe_0.to_try()
    var_4 = maybe_1.to_try()
    var_5 = var_4.get_or_else(var_4)
    var_5.ap(var_3)


def test_case_20():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.ap(bool_0)
    maybe_1 = module_0.Maybe(var_0, maybe_0)
    var_1 = maybe_0.ap(bool_0)
    var_2 = maybe_0.bind(var_0)
    var_3 = maybe_1.to_lazy()
    var_4 = var_2.bind(var_0)
    bool_1 = maybe_1.__eq__(var_2)
    var_5 = maybe_1.to_validation()
    var_6 = var_1.map(var_3)
    var_7 = var_4.filter(var_6)
    var_8 = maybe_1.to_lazy()
    maybe_2 = module_0.Maybe(var_0, var_5)
    maybe_3 = module_0.Maybe(var_5, var_1)
    var_9 = maybe_0.get_or_else(var_8)
    var_10 = maybe_2.bind(var_7)
    var_11 = maybe_3.to_either()
    var_12 = var_7.map(var_5)
    var_8.filter(var_9)


def test_case_21():
    none_type_0 = None
    bool_0 = False
    set_0 = set()
    maybe_0 = module_0.Maybe(bool_0, set_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.map(none_type_0)
    var_2 = var_1.to_try()
    var_1.filter(var_0)


def test_case_22():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    maybe_0.ap(bool_0)
