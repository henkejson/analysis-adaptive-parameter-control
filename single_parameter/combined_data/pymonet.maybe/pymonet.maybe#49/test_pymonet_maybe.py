# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    str_0 = "Lazy[T, U]"
    maybe_0 = module_0.Maybe(str_0, str_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    none_type_0 = None
    float_0 = 1647.1
    maybe_0 = module_0.Maybe(float_0, float_0)
    bool_0 = maybe_0.__eq__(none_type_0)


def test_case_3():
    none_type_0 = None
    bytes_0 = b"\x0eM\xce\x18)\xbd\xa6\x12\xefs\x0b\x94\xf7\x0b"
    list_0 = [bytes_0]
    maybe_0 = module_0.Maybe(list_0, list_0)
    var_0 = maybe_0.ap(none_type_0)
    var_1 = maybe_0.ap(none_type_0)
    var_2 = var_1.map(var_1)
    var_3 = var_1.to_lazy()


def test_case_4():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.to_try()
    var_2 = maybe_0.to_box()
    maybe_0.map(var_2)


def test_case_5():
    tuple_0 = ()
    none_type_0 = None
    bool_0 = True
    bool_1 = True
    maybe_0 = module_0.Maybe(tuple_0, bool_1)
    var_0 = maybe_0.bind(tuple_0)
    var_1 = var_0.to_validation()
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    var_2 = maybe_1.to_lazy()
    maybe_2 = module_0.Maybe(tuple_0, none_type_0)
    maybe_2.filter(maybe_2)


def test_case_6():
    int_0 = -2496
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.map(int_0)
    var_1 = maybe_0.to_lazy()
    int_1 = 1
    var_2 = maybe_0.filter(var_1)
    var_3 = maybe_0.to_either()
    var_4 = maybe_0.bind(int_1)
    var_5 = maybe_0.to_validation()
    bool_1 = maybe_0.__eq__(int_0)
    list_0 = [int_1]
    var_6 = var_4.to_validation()
    var_7 = var_4.filter(maybe_0)
    var_8 = maybe_0.to_either()
    var_9 = var_2.filter(var_1)
    maybe_1 = module_0.Maybe(var_4, list_0)
    bytes_0 = b"9\xb9"
    var_10 = var_0.to_validation()
    maybe_2 = module_0.Maybe(bytes_0, maybe_1)
    var_11 = maybe_0.map(var_5)
    maybe_3 = module_0.Maybe(bytes_0, bool_0)
    maybe_4 = module_0.Maybe(var_2, var_3)
    var_12 = var_7.to_box()
    var_13 = maybe_3.map(var_3)
    var_14 = var_0.map(maybe_1)
    var_15 = var_14.get_or_else(var_4)
    maybe_5 = module_0.Maybe(var_6, bool_1)
    bool_2 = maybe_5.__eq__(list_0)
    bool_3 = var_0.__eq__(maybe_5)
    maybe_5.bind(bool_1)


def test_case_7():
    int_0 = 0
    str_0 = "\n        :param semigroup: other semigroup to concat\n        :type semigroup: Sum[B]\n        :returns: new Sum with sum of concat semigroups values\n        :rtype: Sum[A]\n        "
    none_type_0 = None
    maybe_0 = module_0.Maybe(str_0, none_type_0)
    var_0 = maybe_0.to_box()
    maybe_0.ap(int_0)


def test_case_8():
    str_0 = "\n    All is a Monoid that will combine 2 values of any type using logical conjunction on their coerced Boolean values.\n    "
    list_0 = [str_0, str_0, str_0]
    bool_0 = True
    maybe_0 = module_0.Maybe(list_0, bool_0)
    var_0 = maybe_0.filter(str_0)


def test_case_9():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.to_lazy()
    maybe_0.filter(var_0)


def test_case_10():
    str_0 = "l@0lvcArp\ntQ2_"
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.get_or_else(str_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(str_0, bool_1)


def test_case_11():
    float_0 = -467.3903
    none_type_0 = None
    str_0 = "\n    Data type for storage any type of data\n    "
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.bind(none_type_0)
    var_2 = var_1.ap(float_0)


def test_case_12():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_box()
    bool_1 = maybe_0.__eq__(bool_0)
    var_1 = var_0.to_try()
    var_1.to_either()


def test_case_13():
    float_0 = -193.38557
    bool_0 = True
    bool_1 = False
    maybe_0 = module_0.Maybe(float_0, bool_1)
    var_0 = maybe_0.to_box()
    maybe_1 = module_0.Maybe(float_0, bool_0)
    var_1 = maybe_0.to_lazy()
    var_0.filter(var_1)


def test_case_14():
    complex_0 = 429.14803 - 356.6306j
    list_0 = [complex_0]
    int_0 = -1046
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.filter(list_0)
    var_1 = var_0.to_try()
    var_1.to_validation()


def test_case_15():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_try()
    bool_1 = maybe_0.__eq__(var_0)
    var_1 = maybe_0.to_either()
    var_2 = maybe_0.get_or_else(var_0)
    bool_2 = var_2.__eq__(var_0)


def test_case_16():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_validation()
    bool_1 = maybe_0.__eq__(var_0)
    var_1 = maybe_0.to_either()
    var_2 = var_1.to_try()


def test_case_17():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_try()
    maybe_1 = module_0.Maybe(var_0, bool_0)
    var_1 = maybe_1.map(bool_0)
    var_2 = var_1.to_validation()
    var_3 = var_1.to_box()
    var_4 = var_3.to_try()
    var_5 = maybe_1.map(var_3)
    var_6 = maybe_0.bind(var_2)
    var_7 = maybe_1.to_box()
    bool_1 = maybe_1.__eq__(bool_0)
    var_8 = maybe_1.to_lazy()
    var_9 = var_1.ap(var_8)
    maybe_2 = module_0.Maybe(bool_0, var_8)
    var_10 = var_5.to_box()
    var_11 = var_8.to_either()
    var_12 = maybe_1.to_lazy()
    bool_2 = var_2.__eq__(var_11)
    var_0.to_box()


def test_case_18():
    bytes_0 = b")\xaa\x02"
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.to_try()
    var_2 = var_0.to_either()
    var_3 = var_0.bind(bytes_0)
    var_3.to_validation()


def test_case_19():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_validation()
    bool_1 = maybe_0.__eq__(var_0)
    var_1 = maybe_0.to_either()
    var_2 = maybe_0.get_or_else(var_0)
    bool_2 = var_2.__eq__(var_0)


def test_case_20():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.filter(maybe_0)
    bool_1 = maybe_0.__eq__(var_0)
    var_1 = maybe_0.to_either()
    var_2 = maybe_0.get_or_else(var_0)
    bool_2 = var_2.__eq__(var_0)


def test_case_21():
    int_0 = -2496
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.map(int_0)
    var_1 = maybe_0.to_lazy()
    bytes_0 = b"\x91\xcd9c_."
    int_1 = 1
    var_2 = maybe_0.filter(var_1)
    var_3 = maybe_0.to_either()
    var_4 = maybe_0.bind(int_1)
    var_5 = maybe_0.to_validation()
    float_0 = -1420.8197
    bool_1 = maybe_0.__eq__(int_0)
    list_0 = [float_0]
    var_6 = var_4.to_validation()
    var_7 = var_4.filter(maybe_0)
    var_8 = var_7.to_lazy()
    maybe_1 = module_0.Maybe(var_4, list_0)
    maybe_2 = module_0.Maybe(var_3, bytes_0)
    bool_2 = var_0.__eq__(maybe_2)
    var_9 = var_0.to_lazy()
    var_10 = var_7.ap(int_1)
    maybe_3 = module_0.Maybe(list_0, var_0)
    var_11 = maybe_2.to_box()
    var_12 = var_4.to_either()
    var_8.to_lazy()


def test_case_22():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.to_box()
    var_0.filter(var_0)
