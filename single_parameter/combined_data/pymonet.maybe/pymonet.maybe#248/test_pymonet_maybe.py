# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    generic_0 = module_1.Generic()
    bool_0 = False
    maybe_0 = module_0.Maybe(generic_0, bool_0)
    bool_1 = True
    maybe_1 = module_0.Maybe(generic_0, bool_1)
    var_0 = maybe_1.bind(bool_1)
    var_1 = maybe_1.to_try()
    var_2 = maybe_1.to_try()
    var_3 = var_0.to_validation()
    var_4 = maybe_1.filter(var_3)
    bool_2 = maybe_1.__eq__(bool_1)
    var_5 = var_1.map(var_1)


def test_case_3():
    generic_0 = module_1.Generic()
    bool_0 = False
    maybe_0 = module_0.Maybe(generic_0, bool_0)
    bool_1 = True
    maybe_1 = module_0.Maybe(generic_0, bool_1)
    var_0 = maybe_1.to_box()
    var_1 = maybe_1.filter(bool_1)
    var_2 = var_1.get_or_else(maybe_1)
    var_3 = maybe_1.to_try()
    var_4 = maybe_1.to_try()
    bool_2 = var_0.__eq__(generic_0)
    var_5 = var_3.get_or_else(var_3)
    bool_3 = var_4.__eq__(bool_2)
    bytes_0 = b"r\xa5_\xa2K\xc5\xa6\x1ft\xa2X<\x15\x1c\x11/\xa4\x1d\x1f\xb1"
    tuple_0 = (var_4, bool_3, var_0, bytes_0)
    var_6 = maybe_1.map(tuple_0)


def test_case_4():
    bool_0 = True
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    maybe_0.map(maybe_0)


def test_case_5():
    generic_0 = module_1.Generic()
    bool_0 = False
    maybe_0 = module_0.Maybe(generic_0, bool_0)
    bool_1 = True
    maybe_1 = module_0.Maybe(generic_0, bool_1)
    var_0 = maybe_1.filter(bool_1)
    var_1 = var_0.get_or_else(maybe_1)
    var_2 = maybe_0.to_validation()
    maybe_0.bind(var_1)


def test_case_6():
    float_0 = -2624.82231
    none_type_0 = None
    int_0 = 1726
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.ap(none_type_0)
    var_1 = var_0.ap(float_0)
    var_2 = var_1.to_either()
    var_3 = var_2.to_lazy()


def test_case_7():
    none_type_0 = None
    none_type_1 = None
    maybe_0 = module_0.Maybe(none_type_1, none_type_1)
    maybe_0.ap(none_type_0)


def test_case_8():
    str_0 = "One[value={}]"
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    maybe_0.filter(maybe_0)


def test_case_9():
    generic_0 = module_1.Generic()
    bool_0 = False
    maybe_0 = module_0.Maybe(generic_0, bool_0)
    bool_1 = True
    maybe_1 = module_0.Maybe(generic_0, bool_1)
    var_0 = maybe_1.filter(bool_1)
    var_1 = var_0.get_or_else(maybe_1)
    var_2 = maybe_1.to_try()
    var_3 = maybe_1.to_try()
    var_4 = var_0.to_validation()
    var_5 = maybe_1.filter(var_4)
    var_6 = maybe_1.get_or_else(generic_0)
    bool_2 = maybe_1.__eq__(bool_1)
    var_7 = var_2.map(var_2)


def test_case_10():
    bool_0 = False
    none_type_0 = None
    bool_1 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_1)
    var_0 = maybe_0.get_or_else(bool_0)
    var_0.to_lazy()


def test_case_11():
    str_0 = "One[value={}]"
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.to_either()


def test_case_12():
    none_type_0 = None
    str_0 = "\n        Transform Validation to Try.\n\n        :returns: Lazy monad with function returning Validation value\n        :rtype: Lazy[Function() -> (A | None)]\n        "
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_validation()
    var_1.get_or_else(none_type_0)


def test_case_13():
    generic_0 = module_1.Generic()
    none_type_0 = None
    maybe_0 = module_0.Maybe(generic_0, none_type_0)
    var_0 = maybe_0.to_box()
    bool_0 = True
    maybe_1 = module_0.Maybe(generic_0, bool_0)
    var_1 = maybe_1.to_box()
    var_2 = maybe_1.filter(bool_0)
    var_3 = var_2.get_or_else(maybe_1)
    var_4 = var_0.ap(var_3)
    bool_1 = False
    var_5 = var_0.to_try()
    var_6 = var_4.to_validation()
    var_7 = var_2.map(bool_1)
    var_8 = var_7.ap(bool_0)
    bool_2 = maybe_1.__eq__(var_8)
    bool_3 = var_6.__eq__(var_4)
    maybe_0.filter(var_1)


def test_case_14():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    maybe_0 = module_0.Maybe(dict_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_either()
    float_0 = -3424.791314
    maybe_1 = module_0.Maybe(float_0, float_0)
    var_2 = maybe_1.to_lazy()
    var_3 = var_2.map(var_1)


def test_case_15():
    complex_0 = -106 + 1432.855983j
    set_0 = {complex_0, complex_0, complex_0, complex_0}
    bool_0 = False
    maybe_0 = module_0.Maybe(set_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = var_0.to_lazy()
    var_1.to_lazy()


def test_case_16():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    var_1 = maybe_0.to_lazy()
    var_2 = maybe_0.bind(var_1)
    var_3 = maybe_0.get_or_else(var_2)
    var_4 = var_1.bind(bool_0)
    var_5 = var_1.to_validation()
    var_1.get_or_else(var_1)


def test_case_17():
    generic_0 = module_1.Generic()
    bool_0 = True
    maybe_0 = module_0.Maybe(generic_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.filter(bool_0)
    var_2 = var_1.get_or_else(maybe_0)
    var_3 = maybe_0.to_try()
    var_4 = maybe_0.to_try()
    var_5 = var_1.to_validation()
    var_6 = var_2.to_validation()
    var_7 = var_4.filter(var_0)
    bool_1 = maybe_0.__eq__(var_1)
    var_8 = var_3.bind(var_5)


def test_case_18():
    generic_0 = module_1.Generic()
    bool_0 = False
    maybe_0 = module_0.Maybe(generic_0, bool_0)
    bool_1 = True
    maybe_1 = module_0.Maybe(generic_0, bool_1)
    var_0 = maybe_1.to_box()
    var_1 = maybe_1.bind(var_0)
    var_2 = maybe_1.filter(bool_1)
    var_3 = var_2.get_or_else(maybe_1)
    bool_2 = False
    var_4 = var_2.bind(bool_2)
    var_5 = var_0.to_try()
    var_6 = var_4.to_try()
    var_7 = var_1.bind(var_5)
    var_8 = var_7.to_validation()
    var_9 = var_7.filter(generic_0)
    maybe_2 = module_0.Maybe(bool_2, var_2)
    bool_3 = maybe_2.__eq__(var_4)
    var_10 = maybe_1.map(bool_1)


def test_case_19():
    generic_0 = module_1.Generic()
    none_type_0 = None
    maybe_0 = module_0.Maybe(generic_0, none_type_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    bool_1 = True
    maybe_1 = module_0.Maybe(generic_0, bool_1)
    var_0 = maybe_0.to_box()
    var_1 = maybe_1.bind(var_0)
    var_2 = maybe_1.filter(bool_1)
    var_3 = var_2.get_or_else(maybe_1)
    var_4 = maybe_0.ap(var_3)
    var_5 = var_0.to_try()
    var_6 = var_4.to_validation()
    maybe_0.map(maybe_0)
