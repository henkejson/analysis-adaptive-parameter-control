# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    bytes_0 = b'\x9a+\xcf\x97\x1f\xb9\x7f\x10\x1c\xcd\xfc"\xebz\xe3h\x07}\xbc\xa7'
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, bytes_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    bool_0.filter(bool_0)


def test_case_3():
    bytes_0 = b'\x9a+\xcf\x97\x1f\xb9\x7f\x10\x1c\xcd\xfc"\xebz\xe3h\x07}\xbc\xa7'
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = maybe_0.__eq__(bytes_0)
    maybe_0.filter(bytes_0)


def test_case_4():
    none_type_0 = None
    bool_0 = False
    str_0 = "&'F1"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.map(bool_0)
    var_1 = var_0.to_lazy()
    var_1.filter(none_type_0)


def test_case_5():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.to_box()
    maybe_0.ap(maybe_0)


def test_case_6():
    str_0 = "\n    All is a Monoid that will combine 2 values of any type using logical conjunction on their coerced Boolean values.\n    "
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.to_box()
    var_2 = maybe_0.bind(var_0)
    var_3 = maybe_0.filter(var_1)
    var_4 = maybe_0.map(var_1)
    var_5 = maybe_0.to_validation()
    bool_0 = maybe_0.__eq__(maybe_0)
    var_6 = var_2.to_try()
    var_7 = var_2.to_try()
    var_8 = var_4.filter(var_5)
    var_9 = var_8.map(var_6)
    var_10 = var_1.to_either()
    bool_1 = var_7.__eq__(var_10)
    var_11 = var_6.map(var_1)
    complex_0 = -359.85 + 1186.6681j
    var_12 = var_5.to_try()
    var_13 = var_3.to_lazy()
    complex_0.filter(var_6)


def test_case_7():
    str_0 = "-U-'\t.8A"
    set_0 = {str_0}
    int_0 = 858
    bool_0 = False
    maybe_0 = module_0.Maybe(int_0, bool_0)
    maybe_0.bind(set_0)


def test_case_8():
    int_0 = 1446
    bool_0 = False
    none_type_0 = None
    bool_1 = True
    maybe_0 = module_0.Maybe(int_0, bool_1)
    var_0 = maybe_0.filter(bool_0)
    var_1 = var_0.ap(none_type_0)
    var_2 = var_1.to_box()
    var_3 = var_2.to_lazy()
    var_4 = var_3.to_either()
    bool_2 = var_4.__eq__(bool_0)
    maybe_1 = module_0.Maybe(int_0, bool_0)
    var_4.get_or_else(var_4)


def test_case_9():
    int_0 = 1550
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.get_or_else(bool_0)
    var_1 = maybe_0.filter(var_0)
    var_2 = maybe_0.to_lazy()
    var_3 = maybe_0.to_try()
    var_4 = maybe_0.get_or_else(var_2)


def test_case_10():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    none_type_0 = None
    var_0 = maybe_0.get_or_else(none_type_0)
    maybe_0.ap(maybe_0)


def test_case_11():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_validation()
    var_1.to_validation()


def test_case_12():
    bytes_0 = b'\x9a+\xcf\x97\x1f\xb9\x7f\x10\x1c\xcd\xfc"\xebz\xe3h\x07}\xbc\xa7'
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, bytes_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.get_or_else(maybe_0)
    var_2 = var_1.filter(var_0)
    var_3 = maybe_0.to_box()
    var_4 = var_1.get_or_else(bool_0)
    var_4.to_either()


def test_case_13():
    complex_0 = 1356.1822 - 574j
    str_0 = "\n        :returns: False\n        :rtype: Boolean\n        "
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_validation()
    bool_1 = False
    maybe_1 = module_0.Maybe(dict_0, bool_1)
    var_1 = maybe_1.to_lazy()
    var_2 = var_1.to_either()
    maybe_1.bind(complex_0)


def test_case_14():
    bytes_0 = b'\x9a+\xcf\x97\x1f\xb9\x7f\x10\x1c\xcd\xfc"\xebz\xe3h\x07}\xbc\xa7'
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = maybe_0.to_try()
    maybe_0.filter(bytes_0)


def test_case_15():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_validation()


def test_case_16():
    none_type_0 = None
    bool_0 = False
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_validation()
    var_0.filter(none_type_0)


def test_case_17():
    bytes_0 = b'\x9a+\xcf\x97\x1f\xb9\x7f\x10\x1c\xcd\xfc"\xebz\xe3h\x07}\xbc\xa7'
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, bytes_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    int_0 = -1381
    var_0 = maybe_0.filter(int_0)
    var_1 = maybe_0.to_lazy()
    var_2 = var_0.get_or_else(int_0)
    var_3 = var_0.filter(var_2)
    var_4 = var_1.to_box()
    var_5 = var_3.get_or_else(maybe_0)
    var_2.get_or_else(int_0)


def test_case_18():
    set_0 = set()
    maybe_0 = module_0.Maybe(set_0, set_0)
    var_0 = maybe_0.to_box()
    bool_0 = maybe_0.__eq__(maybe_0)
    none_type_0 = None
    var_0.filter(none_type_0)


def test_case_19():
    str_0 = "\n    All is a Monoid that will combine 2 values of any type using logical conjunction on their coerced Boolean values.\n    "
    maybe_0 = module_0.Maybe(str_0, str_0)
    none_type_0 = None
    bool_0 = True
    maybe_1 = module_0.Maybe(str_0, bool_0)
    bool_1 = maybe_1.__eq__(maybe_0)
    var_0 = maybe_0.filter(none_type_0)
    var_1 = maybe_0.to_lazy()
    var_2 = maybe_0.get_or_else(str_0)
    var_2.filter(var_2)
