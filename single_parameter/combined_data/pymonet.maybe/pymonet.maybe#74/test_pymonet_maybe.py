# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1
import builtins as module_2


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    int_0 = 1
    maybe_0 = module_0.Maybe(int_0, int_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    bool_1 = maybe_0.to_box()
    bool_2 = maybe_0.__eq__(int_0)
    var_0 = maybe_0.filter(int_0)
    var_1 = var_0.to_lazy()
    var_2 = module_0.Maybe(bool_0, var_1)
    bool_3 = int_0.__eq__(var_1)
    none_type_0 = None
    maybe_1 = module_0.Maybe(var_2, none_type_0)
    float_0 = 1483.5
    none_type_0.ap(float_0)


def test_case_3():
    str_0 = "\n        Transform Validation to Try.\n\n        :returns: Lazy monad with function returning Validation value\n        :rtype: Lazy[Function() -> (A | None)]\n        "
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.bind(var_0)
    maybe_1 = module_0.Maybe(str_0, bool_0)
    var_2 = maybe_1.ap(str_0)
    bool_1 = maybe_0.__eq__(var_0)


def test_case_4():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_validation()
    str_0 = "$@.$Qd'~(z=nKr"
    maybe_1 = module_0.Maybe(str_0, str_0)
    var_1 = maybe_1.to_lazy()
    var_2 = maybe_1.map(maybe_1)
    var_3 = maybe_1.ap(str_0)
    var_4 = maybe_1.get_or_else(maybe_1)
    var_5 = maybe_1.to_try()
    var_6 = maybe_1.map(var_3)


def test_case_5():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_0.ap(maybe_0)


def test_case_6():
    int_0 = 812
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.filter(int_0)
    var_1 = var_0.to_validation()
    var_2 = var_1.to_box()
    var_3 = var_2.to_try()
    var_3.map(int_0)


def test_case_7():
    str_0 = "(Bf\td2Wkov\r"
    str_1 = "RD"
    bool_0 = True
    maybe_0 = module_0.Maybe(str_1, bool_0)
    var_0 = maybe_0.get_or_else(str_0)
    var_0.to_lazy()


def test_case_8():
    list_0 = []
    bytes_0 = b"~T\xba\x9d\xe2\xe1\x97j\xcd0"
    none_type_0 = None
    maybe_0 = module_0.Maybe(bytes_0, none_type_0)
    var_0 = maybe_0.get_or_else(list_0)
    var_0.to_validation()


def test_case_9():
    bytes_0 = b"\xbf\r\xadc"
    bytes_1 = b"\xe1v\x08\xa2\x04Kki'\xe5\xcc\xdc~\x02*M0\x94"
    maybe_0 = module_0.Maybe(bytes_0, bytes_1)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.map(maybe_0)
    var_2 = var_1.bind(var_0)
    none_type_0 = None
    bytes_2 = b"_"
    maybe_1 = module_0.Maybe(bytes_2, bytes_2)
    var_3 = maybe_1.ap(none_type_0)
    var_4 = var_3.get_or_else(maybe_0)
    var_5 = var_4.to_validation()
    var_6 = var_1.to_box()
    var_7 = var_5.to_box()
    var_8 = var_4.get_or_else(var_5)


def test_case_10():
    generic_0 = module_1.Generic()
    bool_0 = False
    maybe_0 = module_0.Maybe(generic_0, bool_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.to_lazy()


def test_case_11():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_validation()


def test_case_12():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_lazy()


def test_case_13():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_lazy()


def test_case_14():
    complex_0 = -391 + 1282.29494j
    tuple_0 = (complex_0,)
    bool_0 = True
    maybe_0 = module_0.Maybe(tuple_0, bool_0)
    var_0 = maybe_0.to_try()


def test_case_15():
    str_0 = "^+Pt0x1ta\x0c}`c\x0b"
    none_type_0 = None
    maybe_0 = module_0.Maybe(str_0, none_type_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.to_lazy()
    bool_0 = var_1.__eq__(var_0)
    maybe_0.ap(none_type_0)


def test_case_16():
    none_type_0 = None
    bytes_0 = b"\x88EG\xf9\xa0\xf4b\xc7\xa6\x8dF\x80"
    maybe_0 = module_0.Maybe(bytes_0, none_type_0)
    var_0 = maybe_0.to_validation()
    var_1 = var_0.to_either()
    var_1.ap(none_type_0)


def test_case_17():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bytes_0 = b"\\\xaf\xda\x90\xac2Q\xd6}\xd3\x15\x8c+\xc1\x9e\x1ae\xc6\r\xba"
    float_0 = -1949.067
    str_0 = "\n        Call success_callback function with monad value when monad is not successfully.\n\n        :params fail_callback: function to apply with monad value.\n        :type fail_callback: Function(A)\n        :returns: self\n        :rtype: Try[A]\n        "
    maybe_1 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_1.ap(float_0)
    var_1 = var_0.filter(bytes_0)
    var_2 = var_1.to_try()
    bool_0 = var_0.__eq__(var_2)
    var_3 = maybe_1.to_lazy()
    var_4 = var_1.to_box()
    var_5 = var_1.to_box()
    var_6 = var_1.filter(var_2)
    var_7 = maybe_0.ap(var_3)
    var_7.to_box()


def test_case_18():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bytes_0 = b"\\\xaf\xda\x90\xac2Q\xd6}\xd3\x15\x8c+\xc1\x9e\x1ae\xc6\r\xba"
    float_0 = -1949.067
    str_0 = "\n        Call success_callback function with monad value when monad is not successfully.\n\n        :params fail_callback: function to apply with monad value.\n        :type fail_callback: Function(A)\n        :returns: self\n        :rtype: Try[A]\n        "
    maybe_1 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_1.ap(float_0)
    var_1 = var_0.filter(bytes_0)
    var_2 = var_1.to_try()
    none_type_1 = None
    bytes_1 = b""
    maybe_2 = module_0.Maybe(none_type_1, bytes_1)
    var_3 = maybe_2.to_lazy()
    var_4 = var_3.map(var_2)
    var_4.to_either()


def test_case_19():
    none_type_0 = None
    bytes_0 = b"\xd5\xf8?\r"
    bool_0 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    maybe_0.filter(none_type_0)


def test_case_20():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    float_0 = -1949.067
    str_0 = "\n        Call success_callback function with monad value when monad is not successfully.\n\n        :params fail_callback: function to apply with monad value.\n        :type fail_callback: Function(A)\n        :returns: self\n        :rtype: Try[A]\n        "
    maybe_1 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_1.ap(float_0)
    var_1 = var_0.filter(var_0)
    var_2 = var_1.to_try()
    bool_0 = maybe_0.__eq__(var_0)
    var_3 = maybe_0.get_or_else(maybe_1)
    object_0 = module_2.object()
    var_2.ap(object_0)


def test_case_21():
    int_0 = 3593
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_try()
    var_1 = var_0.get_or_else(int_0)
    int_1 = -2213
    bool_0 = False
    maybe_1 = module_0.Maybe(int_1, bool_0)
    bool_1 = maybe_1.__eq__(maybe_1)
    maybe_1.map(int_0)


def test_case_22():
    int_0 = 1
    maybe_0 = module_0.Maybe(int_0, int_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_try()
    var_1 = var_0.filter(var_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    bool_2 = maybe_0.__eq__(int_0)
    var_2 = maybe_0.filter(bool_2)
    var_3 = maybe_0.get_or_else(bool_0)
    var_4 = maybe_0.to_try()
    var_5 = maybe_0.bind(bool_2)
    var_6 = var_2.filter(bool_0)
    var_7 = maybe_0.to_validation()
    maybe_1 = module_0.Maybe(var_7, bool_2)
    bool_3 = var_3.__eq__(bool_1)
    bool_4 = maybe_0.__eq__(var_7)
    var_8 = var_6.ap(int_0)
    var_9 = var_4.get_or_else(var_4)
    var_10 = var_9.get_or_else(bool_2)
    maybe_1.bind(var_10)
