# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    str_0 = "`;-Q5\tT8]4Ku-h4"
    maybe_0 = module_0.Maybe(str_0, str_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.ap(bool_0)
    bool_1 = maybe_0.__eq__(bool_0)
    var_1 = maybe_0.to_lazy()
    var_2 = var_0.bind(maybe_0)


def test_case_3():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.ap(bool_0)
    bool_1 = maybe_0.__eq__(bool_0)
    var_1 = maybe_0.to_lazy()
    var_2 = maybe_0.to_either()
    var_3 = var_0.bind(maybe_0)
    var_4 = maybe_0.map(var_2)


def test_case_4():
    none_type_0 = None
    none_type_1 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_1, bool_0)
    maybe_0.map(none_type_0)


def test_case_5():
    bytes_0 = b"\xff{J\xa5O\xd7\xe32\xe8\xe6\xd4"
    bool_0 = False
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_0, bytes_0)
    var_0 = maybe_0.bind(none_type_0)
    maybe_1 = module_0.Maybe(bytes_0, bool_0)
    var_1 = maybe_1.to_lazy()
    bool_1 = maybe_1.__eq__(maybe_1)
    maybe_1.bind(maybe_1)


def test_case_6():
    bool_0 = False
    str_0 = ">"
    none_type_0 = None
    maybe_0 = module_0.Maybe(str_0, bool_0)
    maybe_0.ap(none_type_0)


def test_case_7():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.ap(maybe_0)
    var_1 = var_0.to_box()
    var_2 = maybe_0.ap(maybe_0)
    var_3 = var_2.bind(maybe_0)
    var_4 = var_2.to_lazy()
    var_5 = maybe_0.to_validation()
    var_6 = maybe_0.map(var_2)
    var_7 = maybe_0.filter(var_5)


def test_case_8():
    bool_0 = True
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_try()
    maybe_0.filter(maybe_0)


def test_case_9():
    complex_0 = 1420.165692 - 37.39j
    str_0 = "Map[value={}]"
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    var_1 = maybe_0.filter(complex_0)
    var_2 = var_1.to_validation()
    var_3 = var_2.to_either()
    tuple_0 = ()
    var_4 = var_1.to_box()
    maybe_1 = module_0.Maybe(tuple_0, tuple_0)


def test_case_10():
    str_0 = "p$(j<Y-W\r)]s#?"
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_try()
    var_1.ap(str_0)


def test_case_11():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.ap(bool_0)
    bool_1 = var_0.__eq__(bool_0)
    var_1 = var_0.to_box()
    var_2 = maybe_0.to_either()
    var_3 = var_0.bind(maybe_0)
    var_4 = var_0.to_lazy()


def test_case_12():
    str_0 = ".)fs@wRUSIP"
    maybe_0 = module_0.Maybe(str_0, str_0)
    bool_0 = False
    maybe_1 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_1.to_box()
    list_0 = [str_0, str_0]
    list_1 = [list_0, str_0, list_0]
    maybe_2 = module_0.Maybe(list_1, str_0)
    var_1 = maybe_2.to_try()
    bool_1 = var_1.__eq__(list_0)
    var_1.to_lazy()


def test_case_13():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_try()
    bool_1 = False
    maybe_1 = module_0.Maybe(bool_1, bool_1)
    maybe_1.filter(var_0)


def test_case_14():
    bool_0 = True
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_try()
    var_0.to_validation()


def test_case_15():
    set_0 = set()
    list_0 = [set_0, set_0]
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_0.bind(list_0)


def test_case_16():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_validation()
    var_1 = var_0.to_try()


def test_case_17():
    complex_0 = 413.53169 + 835.96481j
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
    bool_0 = True
    maybe_0 = module_0.Maybe(list_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_validation()
    var_1.ap(complex_0)


def test_case_18():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.filter(maybe_0)
    var_1 = maybe_0.ap(var_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(var_1, bool_1)
    var_2 = var_1.to_validation()
    var_3 = maybe_1.get_or_else(var_2)


def test_case_19():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.ap(bool_0)
    bool_1 = var_0.__eq__(var_0)
    var_1 = var_0.to_box()
    var_2 = var_1.to_either()
    var_2.bind(var_2)


def test_case_20():
    str_0 = "`;-Q5\tT8]4Ku-h4"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.map(str_0)
    var_1 = var_0.to_validation()
    maybe_1 = module_0.Maybe(str_0, str_0)
    maybe_2 = module_0.Maybe(str_0, var_0)
    var_2 = maybe_1.map(var_0)
    var_3 = var_0.to_validation()
    var_4 = maybe_0.ap(maybe_1)
    var_5 = maybe_1.to_lazy()
    bool_0 = var_2.__eq__(maybe_1)
    var_6 = var_0.to_try()
    var_7 = var_2.to_either()
    var_8 = maybe_0.map(var_4)
    var_9 = var_0.bind(var_4)
    var_7.get_or_else(maybe_2)


def test_case_21():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_1.to_lazy()
    var_1 = var_0.to_try()
    var_1.to_box()
