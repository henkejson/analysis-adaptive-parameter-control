# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1 = module_0.Maybe(maybe_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_1.to_validation()
    bool_0 = var_1.__eq__(none_type_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    var_2 = var_0.to_either()
    var_3 = maybe_1.to_try()
    var_3.map(var_3)


def test_case_3():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_try()
    bool_1 = maybe_0.__eq__(var_0)
    maybe_0.filter(maybe_0)


def test_case_4():
    str_0 = "X"
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_try()
    str_1 = "H!*R1^5P|"
    maybe_1 = module_0.Maybe(str_1, str_1)
    var_2 = maybe_1.map(str_0)


def test_case_5():
    none_type_0 = None
    bool_0 = False
    bool_1 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_1)
    var_0 = maybe_0.ap(none_type_0)
    var_1 = var_0.ap(bool_0)
    bool_2 = False
    maybe_1 = module_0.Maybe(var_1, bool_2)
    var_2 = var_1.ap(bool_1)
    var_3 = var_2.to_validation()
    var_4 = var_0.get_or_else(bool_2)
    bool_3 = True
    maybe_2 = module_0.Maybe(var_4, bool_3)
    bool_4 = maybe_2.__eq__(var_1)
    var_5 = maybe_1.to_either()
    var_6 = maybe_2.to_try()
    var_7 = maybe_2.map(var_5)
    var_8 = var_2.to_try()
    var_9 = var_0.filter(bool_1)
    maybe_1.map(var_6)


def test_case_6():
    int_0 = -876
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.bind(bool_0)
    var_2 = var_1.to_lazy()
    var_3 = var_2.to_either()
    var_4 = var_3.to_lazy()


def test_case_7():
    dict_0 = {}
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, dict_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.to_lazy()
    var_2 = var_1.to_validation()
    maybe_0.bind(maybe_0)


def test_case_8():
    float_0 = 590.0
    complex_0 = -2909.5312 - 215j
    bool_0 = True
    maybe_0 = module_0.Maybe(complex_0, bool_0)
    var_0 = maybe_0.filter(float_0)
    none_type_0 = None
    var_1 = var_0.ap(float_0)
    var_2 = var_1.bind(none_type_0)


def test_case_9():
    int_0 = -1669
    set_0 = {int_0, int_0}
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    maybe_0.ap(set_0)


def test_case_10():
    float_0 = 590.0
    complex_0 = -2909.5312 - 215j
    bool_0 = True
    maybe_0 = module_0.Maybe(complex_0, bool_0)
    var_0 = maybe_0.filter(float_0)
    bool_1 = True
    none_type_0 = None
    maybe_1 = module_0.Maybe(bool_1, none_type_0)


def test_case_11():
    none_type_0 = None
    bool_0 = False
    bool_1 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_1)
    var_0 = maybe_0.ap(none_type_0)
    var_1 = var_0.get_or_else(bool_0)
    var_1.filter(none_type_0)


def test_case_12():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.get_or_else(none_type_0)
    bool_0 = False
    var_1 = maybe_0.get_or_else(bool_0)
    var_2 = maybe_0.to_validation()
    bool_1 = var_2.__eq__(none_type_0)
    bool_2 = maybe_0.__eq__(maybe_0)
    var_0.to_either()


def test_case_13():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_either()
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)


def test_case_14():
    none_type_0 = None
    str_0 = "!|egw+"
    tuple_0 = (str_0,)
    maybe_0 = module_0.Maybe(tuple_0, tuple_0)
    var_0 = maybe_0.to_box()
    var_0.ap(none_type_0)


def test_case_15():
    int_0 = -876
    bool_0 = False
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.to_box()
    var_0.to_box()


def test_case_16():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_try()
    bool_1 = maybe_0.__eq__(var_0)
    none_type_1 = None
    maybe_1 = module_0.Maybe(none_type_1, none_type_1)
    var_1 = maybe_1.to_lazy()
    var_1.to_lazy()


def test_case_17():
    list_0 = []
    none_type_0 = None
    str_0 = "\n    One is a Monoid that will combine 2 values of any type using logical disjunction OR on their coerced Boolean values.\n    "
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_try()
    var_1 = var_0.bind(none_type_0)
    var_2 = var_1.get_or_else(list_0)


def test_case_18():
    str_0 = "\n        Return rejected Task with stored value argument.\n\n        :param value: value to store in Task\n        :type value: A\n        :returns: rejected Task\n        :rtype: Task[Function(reject, _) -> A]\n        "
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = var_0.to_box()
    var_2 = var_0.to_either()
    var_2.ap(none_type_0)


def test_case_19():
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_0, none_type_0)
    var_0 = maybe_0.to_validation()


def test_case_20():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.ap(none_type_0)
    var_1 = var_0.ap(var_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(var_1, bool_1)
    var_2 = var_0.get_or_else(bool_1)
    bool_2 = True
    maybe_2 = module_0.Maybe(var_2, bool_2)
    bool_3 = maybe_2.__eq__(var_1)
    var_3 = maybe_1.to_either()
    var_4 = maybe_2.to_try()
    var_5 = var_0.filter(bool_0)
    maybe_1.filter(none_type_0)


def test_case_21():
    none_type_0 = None
    bool_0 = False
    bool_1 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_1)
    var_0 = maybe_0.ap(none_type_0)
    var_1 = var_0.ap(bool_0)
    bool_2 = False
    maybe_1 = module_0.Maybe(var_1, bool_2)
    var_2 = var_1.ap(bool_1)
    var_3 = var_2.to_validation()
    var_4 = var_0.get_or_else(bool_2)
    maybe_2 = module_0.Maybe(var_4, var_3)
    bool_3 = maybe_2.__eq__(var_1)
    var_5 = maybe_1.to_either()
    var_6 = maybe_2.to_try()
    var_7 = maybe_2.map(var_5)
    var_8 = var_0.get_or_else(var_5)
    var_9 = var_0.filter(bool_1)
    var_10 = var_7.to_validation()
    maybe_1.filter(var_8)
