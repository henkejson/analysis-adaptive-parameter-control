# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    int_0 = 1444
    bool_0 = False
    maybe_0 = module_0.Maybe(int_0, bool_0)
    int_1 = 1641
    dict_0 = {int_1: int_1, int_1: int_1, int_1: int_1}
    none_type_0 = None
    bool_1 = True
    var_0 = maybe_0.to_box()
    maybe_1 = module_0.Maybe(int_1, bool_1)
    var_1 = maybe_1.filter(dict_0)
    var_2 = maybe_0.to_try()
    bool_2 = maybe_0.__eq__(bool_0)
    var_3 = var_1.get_or_else(none_type_0)
    maybe_2 = module_0.Maybe(var_0, bool_1)
    maybe_0.filter(var_2)


def test_case_3():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.filter(maybe_0)
    bool_1 = var_0.__eq__(var_0)
    bool_2 = maybe_0.__eq__(maybe_0)
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    var_1 = var_0.to_box()
    var_2 = var_0.filter(var_0)
    float_0 = 158.3
    var_3 = var_0.to_either()
    maybe_2 = module_0.Maybe(bool_1, var_0)
    var_4 = maybe_2.ap(float_0)
    var_5 = maybe_2.to_box()
    var_6 = maybe_2.map(float_0)
    var_7 = var_6.ap(maybe_1)
    var_8 = var_7.map(var_3)
    var_9 = var_5.ap(maybe_0)
    var_10 = var_9.map(var_3)
    var_11 = var_10.to_try()
    var_12 = var_0.to_lazy()


def test_case_4():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    int_0 = -3000
    list_0 = [int_0, maybe_0, maybe_0]
    maybe_0.map(list_0)


def test_case_5():
    bool_0 = False
    bytes_0 = b"Q\x96\x8a\x07Ju\xba\x9e\xed\x07YL\xde\xf3C\xc5\x00"
    bool_1 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_1)
    var_0 = maybe_0.to_lazy()
    none_type_0 = None
    bool_2 = False
    maybe_1 = module_0.Maybe(bool_0, bool_2)
    int_0 = -1764
    maybe_2 = module_0.Maybe(int_0, int_0)
    var_1 = maybe_2.bind(var_0)
    var_2 = maybe_2.to_either()
    var_2.filter(none_type_0)


def test_case_6():
    bool_0 = False
    bool_1 = True
    bool_2 = False
    maybe_0 = module_0.Maybe(bool_1, bool_2)
    maybe_0.bind(bool_0)


def test_case_7():
    bool_0 = True
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_1, bool_1)
    var_0 = maybe_0.ap(bool_0)


def test_case_8():
    none_type_0 = None
    bytes_0 = b"\x9f{y"
    bool_0 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    maybe_0.ap(none_type_0)


def test_case_9():
    none_type_0 = None
    str_0 = ']c|5}q[M"F^V#'
    maybe_0 = module_0.Maybe(none_type_0, str_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    var_1 = var_0.ap(var_0)
    var_2 = maybe_0.to_lazy()
    var_3 = var_2.to_either()


def test_case_10():
    none_type_0 = None
    bool_0 = False
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.get_or_else(none_type_0)
    var_0.to_lazy()


def test_case_11():
    int_0 = -2026
    str_0 = "\n        Return monad value when is successfully.\n        Othercase return default_value argument.\n\n        :params default_value: value to return when monad is not successfully.\n        :type default_value: B\n        :returns: monad value\n        :rtype: A | B\n        "
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.get_or_else(maybe_0)
    var_2 = maybe_0.to_box()
    var_3 = var_1.to_lazy()
    var_4 = maybe_0.to_validation()
    var_2.bind(int_0)


def test_case_12():
    str_0 = "\n9d*\nUs*@J\x0bv\t%<+?p\r"
    none_type_0 = None
    maybe_0 = module_0.Maybe(str_0, none_type_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_validation()
    none_type_1 = None
    maybe_1 = module_0.Maybe(str_0, none_type_1)


def test_case_13():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1 = module_0.Maybe(maybe_0, maybe_0)
    var_0 = maybe_1.to_box()
    int_0 = -668
    maybe_2 = module_0.Maybe(none_type_0, int_0)
    var_1 = maybe_0.to_validation()


def test_case_14():
    bytes_0 = b"%\xbc,7\x8f\xb8.'\xba\xd8\xb6M"
    bytes_1 = b"WVFVTVr\x84\x90qj\xfe+.\x07 5\x9a\x9b"
    set_0 = {bytes_1}
    none_type_0 = None
    maybe_0 = module_0.Maybe(set_0, none_type_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_validation()
    var_2 = var_1.to_box()
    var_3 = var_2.to_lazy()
    var_4 = var_3.to_either()
    var_5 = var_4.to_box()
    var_5.map(bytes_0)


def test_case_15():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_lazy()
    bool_1 = False
    maybe_1 = module_0.Maybe(var_0, bool_1)
    var_1 = maybe_1.to_either()
    var_2 = var_1.to_validation()


def test_case_16():
    str_0 = "f0Yoz"
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.to_try()
    var_2 = var_0.to_lazy()
    bytes_0 = b"\x89\x19\xd24\xb1\xf0\xedj\xb9\xc3k\x00\xd5V"
    bool_1 = False
    maybe_1 = module_0.Maybe(bool_0, var_2)
    maybe_2 = module_0.Maybe(bytes_0, bool_1)
    var_3 = maybe_1.bind(var_1)
    var_4 = var_1.bind(var_0)
    var_5 = var_3.bind(var_2)
    var_6 = maybe_1.bind(var_0)
    maybe_3 = module_0.Maybe(bytes_0, maybe_2)
    var_7 = maybe_0.to_validation()
    var_7.map(bytes_0)


def test_case_17():
    str_0 = 'E9\r!"0iC?#^T7j:G\r{N'
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_try()
    var_1 = var_0.get_or_else(str_0)
    var_1.to_lazy()


def test_case_18():
    int_0 = -1278
    set_0 = {int_0, int_0, int_0}
    maybe_0 = module_0.Maybe(set_0, set_0)
    var_0 = maybe_0.to_validation()
    var_1 = var_0.to_lazy()
    var_2 = var_1.to_box()
    var_2.to_box()


def test_case_19():
    complex_0 = 4259.1892 - 1348.289j
    none_type_0 = None
    bool_0 = False
    bool_1 = False
    set_0 = {bool_1, bool_1, bool_1}
    maybe_0 = module_0.Maybe(set_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.to_lazy()
    var_2 = var_1.to_box()
    maybe_1 = module_0.Maybe(complex_0, bool_1)
    var_3 = maybe_1.to_either()
    var_3.get_or_else(none_type_0)


def test_case_20():
    int_0 = 1444
    bool_0 = True
    int_1 = 1641
    bool_1 = True
    maybe_0 = module_0.Maybe(int_1, bool_1)
    var_0 = maybe_0.filter(bool_0)
    var_1 = var_0.to_lazy()
    var_2 = maybe_0.filter(int_0)
    bool_2 = maybe_0.__eq__(var_2)
    bool_3 = False
    var_3 = var_2.filter(bool_3)
    maybe_1 = module_0.Maybe(maybe_0, bool_1)


def test_case_21():
    int_0 = 1444
    bool_0 = False
    maybe_0 = module_0.Maybe(int_0, bool_0)
    bool_1 = True
    maybe_1 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_1.map(bool_0)
    var_1 = var_0.to_either()
    var_2 = var_0.bind(var_1)
    var_3 = var_2.to_box()
    list_0 = []
    maybe_2 = module_0.Maybe(list_0, bool_0)
    var_4 = var_0.filter(var_3)
    var_5 = maybe_1.to_lazy()
    var_6 = maybe_0.to_validation()
    bool_2 = maybe_0.__eq__(var_2)
    var_7 = maybe_0.to_box()
    var_6.ap(var_1)


def test_case_22():
    int_0 = 1444
    bool_0 = False
    maybe_0 = module_0.Maybe(int_0, bool_0)
    int_1 = 1641
    bool_1 = maybe_0.__eq__(maybe_0)
    maybe_1 = module_0.Maybe(int_0, int_1)
    var_0 = maybe_1.to_validation()
    var_0.get_or_else(bool_1)
