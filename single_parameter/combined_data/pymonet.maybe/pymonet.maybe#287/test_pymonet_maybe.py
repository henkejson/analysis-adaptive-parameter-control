# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1


def test_case_0():
    float_0 = 801.752
    maybe_0 = module_0.Maybe(float_0, float_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_validation()
    var_1 = var_0.to_lazy()
    var_0.ap(bool_1)


def test_case_3():
    list_0 = []
    int_0 = -1525
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.bind(list_0)
    var_1 = var_0.to_box()
    var_2 = var_0.map(var_1)
    bool_0 = var_2.__eq__(list_0)
    var_3 = var_0.to_validation()
    var_4 = var_3.to_lazy()


def test_case_4():
    str_0 = "\t\rGw!x=p"
    float_0 = 2738.093
    maybe_0 = module_0.Maybe(str_0, float_0)
    str_1 = 'D("Q'
    var_0 = maybe_0.to_validation()
    maybe_1 = module_0.Maybe(str_1, str_1)
    bool_0 = False
    maybe_2 = module_0.Maybe(maybe_1, bool_0)
    maybe_2.map(float_0)


def test_case_5():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_lazy()
    bool_1 = maybe_0.__eq__(maybe_0)
    var_1 = maybe_0.to_validation()
    var_2 = var_0.to_either()
    maybe_0.bind(var_1)


def test_case_6():
    str_0 = "\n        Take 2 functions call only one of then with either value and return her result.\n\n        :params error: function to call when Either is Left\n        :type error: Function(A) -> B\n        :params success: function to call when Either is Right\n        :type success: Function(A) -> B\n        :returns: result of success handler when Eihter is Right, result of error handler when Eihter is Left\n        :rtpye: B\n        "
    int_0 = 2465
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.bind(str_0)
    bool_0 = maybe_0.__eq__(str_0)
    var_1 = var_0.to_box()
    var_2 = var_1.to_try()
    var_3 = var_0.to_lazy()
    var_4 = var_0.ap(var_0)
    var_5 = var_1.to_try()
    var_6 = maybe_0.map(var_4)
    var_7 = var_6.get_or_else(var_6)
    var_8 = var_3.ap(var_1)
    var_8.to_box()


def test_case_7():
    none_type_0 = None
    list_0 = []
    bool_0 = True
    int_0 = 1
    tuple_0 = (list_0, bool_0, int_0)
    none_type_1 = None
    maybe_0 = module_0.Maybe(tuple_0, none_type_1)
    maybe_0.ap(none_type_0)


def test_case_8():
    tuple_0 = ()
    bool_0 = True
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.filter(tuple_0)
    var_2 = var_1.to_box()
    var_3 = var_2.to_try()


def test_case_9():
    generic_0 = module_1.Generic()
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.filter(bool_0)
    list_0 = [set_0, var_0, maybe_0]
    maybe_1 = module_0.Maybe(list_0, none_type_0)
    maybe_1.filter(generic_0)


def test_case_10():
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.filter(none_type_0)
    str_0 = "\n        Applies the function inside the Either[A] structure to another applicative type.\n\n        :param applicative: applicative contains function\n        :type applicative: Either[B]\n        :returns: new Either with result of contains function\n        :rtype: Either[A(B)]\n        "
    dict_0 = {bool_0: str_0}
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    var_1 = maybe_1.to_validation()
    maybe_2 = module_0.Maybe(dict_0, var_1)
    var_2 = maybe_2.get_or_else(maybe_1)
    var_3 = maybe_2.get_or_else(bool_0)


def test_case_11():
    none_type_0 = None
    none_type_1 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_1, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.get_or_else(none_type_0)
    var_0.bind(var_1)


def test_case_12():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_either()
    list_0 = []
    none_type_0 = None
    maybe_1 = module_0.Maybe(list_0, none_type_0)
    var_1 = maybe_1.to_try()
    var_1.to_either()


def test_case_13():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_lazy()
    var_2 = var_1.to_try()
    var_2.to_try()


def test_case_14():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_either()


def test_case_15():
    str_0 = "\n        Applies the function inside the Either[A] structure to another applicative type.\n\n        :param applicative: applicative contains function\n        :type applicative: Either[B]\n        :returns: new Either with result of contains function\n        :rtype: Either[A(B)]\n        "
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    bool_0 = False
    maybe_0 = module_0.Maybe(dict_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_either()
    var_1.map(var_1)


def test_case_16():
    str_0 = "\n        Return resolved Task with stored value argument.\n\n        :param value: value to store in Task\n        :type value: A\n        :returns: resolved Task\n        :rtype: Task[Function(_, resolve) -> A]\n        "
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, str_0)
    bool_0 = maybe_0.__eq__(none_type_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    var_1 = var_0.to_validation()
    var_2 = maybe_0.filter(var_0)
    var_3 = var_2.bind(none_type_0)
    var_4 = var_0.bind(var_1)
    var_5 = var_0.to_lazy()
    var_6 = var_2.filter(var_0)
    var_7 = var_5.to_try()
    var_8 = maybe_0.get_or_else(var_3)
    var_9 = var_3.to_either()
    var_10 = var_2.to_try()


def test_case_17():
    float_0 = 378.2487
    list_0 = [float_0, float_0]
    bool_0 = False
    maybe_0 = module_0.Maybe(list_0, bool_0)
    var_0 = maybe_0.to_try()
    bool_1 = False
    maybe_1 = module_0.Maybe(var_0, bool_1)
    var_1 = maybe_1.to_validation()
    var_2 = var_1.to_box()
    var_3 = var_2.to_validation()
    var_4 = var_3.to_try()
    var_4.to_lazy()


def test_case_18():
    tuple_0 = ()
    bool_0 = True
    maybe_0 = module_0.Maybe(tuple_0, bool_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.filter(tuple_0)
    var_2 = maybe_0.to_box()
    var_3 = var_1.to_validation()
    var_4 = var_3.to_try()


def test_case_19():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.filter(none_type_0)
    var_1 = var_0.map(maybe_0)
    bool_1 = var_1.__eq__(maybe_0)
    var_2 = maybe_0.get_or_else(var_1)
    var_3 = var_2.to_validation()
    var_3.filter(var_3)


def test_case_20():
    str_0 = "\n        Return resolved Task with stored value argument.\n\n        :param value: value to store in Task\n        :type value: A\n        :returns: resolved Task\n        :rtype: Task[Function(_, resolve) -> A]\n        "
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, str_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.bind(var_0)
    var_2 = var_1.to_validation()
    var_3 = maybe_0.filter(var_2)
    bool_0 = var_3.__eq__(maybe_0)
    var_4 = var_0.get_or_else(var_2)
    var_5 = var_1.to_validation()
    var_6 = var_1.filter(var_2)
    var_7 = var_3.bind(var_5)
    var_8 = var_3.bind(var_7)
    var_9 = var_2.to_lazy()
