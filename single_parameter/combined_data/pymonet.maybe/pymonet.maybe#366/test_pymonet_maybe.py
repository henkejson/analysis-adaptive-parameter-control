# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    float_0 = -3727.64336
    none_type_0 = None
    maybe_0 = module_0.Maybe(float_0, none_type_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_lazy()
    complex_0 = -2100.63 + 1583j
    bool_0 = var_0.__eq__(var_0)
    maybe_1 = module_0.Maybe(complex_0, complex_0)
    bool_1 = maybe_0.__eq__(var_0)
    var_2 = maybe_1.ap(none_type_0)
    var_3 = var_2.to_validation()
    var_3.get_or_else(float_0)


def test_case_3():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.to_lazy()
    var_2 = var_0.to_validation()
    bytes_0 = b"\xb1\xcb\x15Q\xf2\xfa3\xb9"
    bool_0 = True
    maybe_1 = module_0.Maybe(bytes_0, bool_0)
    var_3 = maybe_1.to_try()
    var_4 = maybe_1.map(none_type_0)
    var_3.ap(bool_0)


def test_case_4():
    bytes_0 = b"\xc0\xd2\xe5\xdd\xae'\xe2\xf4'\xa6\x9f\xd3\xf2H\xdd\xcd"
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    maybe_0.map(bytes_0)


def test_case_5():
    bool_0 = False
    bool_1 = True
    float_0 = -2352.06287
    dict_0 = {}
    bool_2 = True
    maybe_0 = module_0.Maybe(bool_0, bool_2)
    var_0 = maybe_0.ap(dict_0)
    var_1 = var_0.bind(float_0)
    var_2 = var_1.map(bool_0)
    var_3 = var_2.ap(bool_1)
    var_4 = var_3.get_or_else(bool_0)
    bool_3 = maybe_0.__eq__(bool_0)
    var_5 = var_3.to_try()
    var_5.to_lazy()


def test_case_6():
    none_type_0 = None
    bool_0 = True
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    maybe_0.bind(none_type_0)


def test_case_7():
    bool_0 = True
    str_0 = ";[LpY?]1@L{xX]5x=(G"
    tuple_0 = (bool_0, bool_0, str_0)
    none_type_0 = None
    none_type_1 = None
    bool_1 = True
    maybe_0 = module_0.Maybe(none_type_1, bool_1)
    var_0 = maybe_0.ap(none_type_0)
    var_1 = var_0.to_try()
    var_2 = var_1.filter(tuple_0)


def test_case_8():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_0.ap(bool_0)


def test_case_9():
    str_0 = "0\x0cS;Bkb"
    bool_0 = False
    float_0 = 1207.44
    maybe_0 = module_0.Maybe(float_0, float_0)
    var_0 = maybe_0.filter(bool_0)
    var_1 = var_0.to_either()
    var_1.get_or_else(str_0)


def test_case_10():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    maybe_0.filter(none_type_0)


def test_case_11():
    str_0 = "&c]'m^>BVQ7a!0uY]"
    bool_0 = True
    tuple_0 = (bool_0,)
    maybe_0 = module_0.Maybe(tuple_0, bool_0)
    var_0 = maybe_0.get_or_else(str_0)
    var_0.to_lazy()


def test_case_12():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.get_or_else(none_type_0)
    var_1 = maybe_0.to_either()
    var_2 = var_1.to_box()
    var_3 = var_2.to_validation()
    maybe_0.ap(var_2)


def test_case_13():
    int_0 = 752
    bool_0 = False
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.to_either()
    var_0.to_either()


def test_case_14():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.filter(var_0)
    var_2 = maybe_0.to_either()
    var_3 = maybe_0.to_box()
    var_4 = maybe_0.to_box()
    var_3.bind(maybe_0)


def test_case_15():
    str_0 = "TJWi=wC\n9*'K'tI2"
    float_0 = -61.114285
    maybe_0 = module_0.Maybe(float_0, float_0)
    var_0 = maybe_0.to_lazy()
    var_0.filter(str_0)


def test_case_16():
    float_0 = -3727.64336
    bool_0 = False
    maybe_0 = module_0.Maybe(float_0, bool_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(float_0, none_type_0)
    var_0 = maybe_1.to_box()
    var_1 = maybe_1.get_or_else(none_type_0)
    complex_0 = -2100.63 + 1583j
    bool_1 = var_0.__eq__(var_0)
    var_2 = maybe_0.to_try()
    maybe_2 = module_0.Maybe(complex_0, complex_0)
    bool_2 = maybe_1.__eq__(var_0)
    var_3 = maybe_2.ap(none_type_0)
    var_4 = var_3.to_validation()
    var_4.get_or_else(float_0)


def test_case_17():
    float_0 = -2890.625
    bool_0 = True
    maybe_0 = module_0.Maybe(float_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = var_0.to_either()


def test_case_18():
    none_type_0 = None
    none_type_1 = None
    bytes_0 = b""
    maybe_0 = module_0.Maybe(none_type_1, bytes_0)
    var_0 = maybe_0.to_validation()
    bool_0 = var_0.__eq__(none_type_0)


def test_case_19():
    bool_0 = False
    bool_1 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_1, bool_1)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.to_lazy()
    var_2 = maybe_0.to_box()
    bool_2 = maybe_0.__eq__(none_type_0)
    maybe_1 = module_0.Maybe(bool_0, bool_1)
    var_3 = var_0.to_box()
    var_4 = maybe_0.to_either()
    var_3.bind(var_4)


def test_case_20():
    int_0 = -3997
    bool_0 = False
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_box()
    var_1.get_or_else(int_0)


def test_case_21():
    dict_0 = {}
    bool_0 = True
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.ap(dict_0)
    maybe_1 = module_0.Maybe(bool_1, bool_0)
    bool_2 = maybe_0.__eq__(var_0)
    var_1 = maybe_0.ap(bool_2)
    var_2 = maybe_0.ap(maybe_1)
    var_3 = var_0.to_validation()
    var_4 = var_3.to_lazy()
    var_5 = var_2.bind(dict_0)
    var_6 = var_0.ap(var_2)


def test_case_22():
    str_0 = "\n    Min is a Monoid that will combines 2 numbers, resulting in the smallest of the two.\n    "
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    none_type_0 = None
    bool_1 = True
    maybe_1 = module_0.Maybe(none_type_0, bool_1)
    bool_2 = maybe_1.__eq__(maybe_0)
    str_1 = "\n        Two Lazy are equals where both are evaluated both have the same value and constructor functions.\n        "
    maybe_2 = module_0.Maybe(str_1, str_1)
    var_0 = maybe_2.get_or_else(str_1)
    str_2 = "CkG"
    var_1 = maybe_2.to_validation()
    var_2 = maybe_2.filter(var_1)
    str_3 = "TvX<3aT"
    maybe_3 = module_0.Maybe(str_3, bool_2)
    maybe_4 = module_0.Maybe(str_2, str_2)
    var_3 = maybe_4.to_try()
