# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.get_or_else(bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    bool_2 = False
    maybe_1 = module_0.Maybe(bool_2, bool_2)
    var_1 = maybe_1.to_validation()


def test_case_3():
    bytes_0 = b"\xfd!1B\x12\x12-k]\xe6K\x14gG\xa2_\x9f("
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    none_type_0 = None
    var_0 = maybe_0.filter(bytes_0)
    bool_0 = maybe_0.__eq__(bytes_0)
    var_1 = var_0.filter(bytes_0)
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1.filter(maybe_1)


def test_case_4():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.get_or_else(bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    var_1 = maybe_0.map(var_0)
    var_0.to_try()


def test_case_5():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_box()
    maybe_1 = module_0.Maybe(var_0, var_0)
    maybe_0.ap(maybe_0)


def test_case_6():
    str_0 = "N~fWv[8ERrwpS_hV\nI"
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.bind(none_type_0)
    var_1 = maybe_0.to_either()
    var_2 = var_1.ap(str_0)
    var_3 = var_2.to_box()
    var_4 = var_1.bind(var_1)
    var_5 = var_3.to_lazy()
    var_6 = var_5.to_box()
    var_7 = var_5.to_try()


def test_case_7():
    bytes_0 = b"\xcf\xb3"
    set_0 = set()
    dict_0 = {bytes_0: bytes_0, bytes_0: set_0}
    bool_0 = False
    maybe_0 = module_0.Maybe(dict_0, bool_0)
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    bool_1 = False
    maybe_2 = module_0.Maybe(dict_0, bool_1)
    bool_2 = maybe_0.__eq__(bool_0)
    bool_3 = maybe_2.__eq__(dict_0)
    bool_4 = maybe_2.__eq__(bytes_0)
    var_0 = maybe_2.to_validation()
    var_1 = maybe_2.to_either()
    bool_5 = set_0.__eq__(maybe_2)
    list_0 = [bool_4, bytes_0]
    bool_6 = var_1.__eq__(list_0)
    maybe_2.bind(dict_0)


def test_case_8():
    bytes_0 = b"\x9e=zT\xfb\xc0J\x9d\x87\xdb\xf1\xf2f\xd2}\x1f\xa4\xc2l\x7f"
    none_type_0 = None
    int_0 = 0
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.ap(none_type_0)
    var_1 = var_0.ap(bytes_0)
    var_2 = var_1.to_try()
    var_2.to_box()


def test_case_9():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    int_0 = 392
    var_0 = maybe_0.filter(int_0)


def test_case_10():
    str_0 = "[yX5;?&\\E\x0b\tS<+"
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_lazy()
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1.filter(var_0)


def test_case_11():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.get_or_else(bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    bool_2 = False
    maybe_1 = module_0.Maybe(bool_2, bool_2)
    var_1 = maybe_1.get_or_else(bool_0)


def test_case_12():
    bool_0 = True
    set_0 = {bool_0}
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_1 = module_0.Maybe(bool_0, set_0)
    var_0 = maybe_1.to_either()
    var_1 = var_0.to_box()
    var_2 = var_1.to_try()


def test_case_13():
    dict_0 = {}
    bool_0 = False
    maybe_0 = module_0.Maybe(dict_0, bool_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_try()
    var_1.to_box()


def test_case_14():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.get_or_else(bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    var_1 = maybe_0.to_validation()
    var_2 = maybe_0.to_box()
    var_0.to_try()


def test_case_15():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.get_or_else(bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    maybe_1 = maybe_0.to_lazy()
    maybe_1.get_or_else(bool_0)


def test_case_16():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_box()
    var_2 = var_1.to_either()
    var_3 = var_2.to_validation()


def test_case_17():
    float_0 = -354.0
    maybe_0 = module_0.Maybe(float_0, float_0)
    maybe_1 = module_0.Maybe(float_0, maybe_0)
    bool_0 = maybe_0.__eq__(maybe_1)
    var_0 = maybe_0.to_box()
    var_1 = maybe_1.to_try()
    var_1.to_box()


def test_case_18():
    bytes_0 = b"\xcf\x05"
    set_0 = set()
    dict_0 = {bytes_0: bytes_0, bytes_0: set_0}
    bool_0 = False
    maybe_0 = module_0.Maybe(dict_0, bool_0)
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    bool_1 = False
    maybe_2 = module_0.Maybe(dict_0, bool_1)
    bool_2 = maybe_0.__eq__(bool_0)
    bool_3 = maybe_2.__eq__(dict_0)
    bool_4 = maybe_2.to_try()
    var_0 = maybe_2.to_validation()
    var_1 = maybe_2.to_either()
    var_2 = maybe_2.to_box()
    bool_5 = var_2.__eq__(maybe_2)
    list_0 = [bool_4, bytes_0]
    bool_6 = var_1.__eq__(list_0)
    maybe_2.bind(var_2)


def test_case_19():
    str_0 = "{s]&/S&J2r~)\x0b^h"
    str_1 = "W^3Jxe"
    maybe_0 = module_0.Maybe(str_1, str_1)
    var_0 = maybe_0.get_or_else(maybe_0)
    var_1 = maybe_0.to_validation()
    maybe_1 = module_0.Maybe(var_1, var_1)
    var_2 = maybe_1.get_or_else(str_0)
    var_2.to_box()


def test_case_20():
    complex_0 = 217.976522 + 2876.9j
    int_0 = -4278
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_either()
    var_1.ap(complex_0)


def test_case_21():
    float_0 = -354.0
    maybe_0 = module_0.Maybe(float_0, float_0)
    maybe_1 = module_0.Maybe(float_0, maybe_0)
    bool_0 = maybe_0.__eq__(maybe_1)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.filter(var_0)
    var_2 = maybe_0.map(var_0)
    float_0.to_try()


def test_case_22():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.get_or_else(bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    bool_2 = False
    maybe_1 = module_0.Maybe(bool_2, bool_2)
    var_1 = module_0.Maybe(maybe_0, bool_1)
