# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import builtins as module_0
import pymonet.maybe as module_1


def test_case_0():
    object_0 = module_0.object()
    maybe_0 = module_1.Maybe(object_0, object_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_1.Maybe(none_type_0, none_type_0)


def test_case_2():
    str_0 = "\n        :param semigroup: other semigroup to concat\n        atype se\\igroup: Last[B]\n        :returns: new Last with last value\n        :rtype: Last[A]\n)       "
    maybe_0 = module_1.Maybe(str_0, str_0)
    var_0 = maybe_0.filter(maybe_0)
    maybe_1 = module_1.Maybe(var_0, var_0)
    bool_0 = var_0.__eq__(maybe_1)
    var_1 = var_0.ap(var_0)
    maybe_2 = module_1.Maybe(bool_0, bool_0)
    var_2 = maybe_1.to_validation()
    maybe_2.filter(bool_0)


def test_case_3():
    str_0 = "\n        :param semigroup: other semigroup to concat\n        atype se\\igroup: Last[B]\n        :returns: new Last with last value\n        :rtype: Last[A]\n)       "
    maybe_0 = module_1.Maybe(str_0, str_0)
    var_0 = maybe_0.filter(maybe_0)
    maybe_1 = module_1.Maybe(var_0, var_0)
    bool_0 = var_0.__eq__(maybe_1)
    var_1 = var_0.ap(var_0)
    maybe_2 = module_1.Maybe(bool_0, bool_0)
    var_2 = maybe_1.to_validation()
    var_3 = var_1.map(maybe_0)
    maybe_2.filter(bool_0)


def test_case_4():
    none_type_0 = None
    maybe_0 = module_1.Maybe(none_type_0, none_type_0)
    maybe_0.map(maybe_0)


def test_case_5():
    str_0 = "\n        :param semigroup: other semigroup to concat\n        :type semigroup: Last[B]\n        :returns: new Last with last value\n        :rtype: Last[A]\n        "
    bool_0 = True
    maybe_0 = module_1.Maybe(str_0, str_0)
    var_0 = maybe_0.filter(maybe_0)
    none_type_0 = None
    var_1 = var_0.bind(none_type_0)
    var_2 = var_0.ap(var_0)
    var_3 = maybe_0.bind(var_2)
    maybe_1 = module_1.Maybe(bool_0, var_0)
    bool_1 = maybe_0.__eq__(maybe_1)
    var_4 = maybe_0.ap(var_0)
    var_5 = var_4.to_either()
    var_6 = maybe_0.to_lazy()
    maybe_2 = module_1.Maybe(bool_1, bool_1)
    var_7 = var_4.get_or_else(var_4)
    maybe_3 = module_1.Maybe(var_3, var_6)
    var_8 = maybe_1.to_validation()
    var_9 = var_2.bind(bool_1)
    maybe_2.filter(none_type_0)


def test_case_6():
    bool_0 = True
    maybe_0 = module_1.Maybe(bool_0, bool_0)
    none_type_0 = None
    maybe_1 = module_1.Maybe(none_type_0, none_type_0)
    bool_1 = maybe_1.__eq__(none_type_0)
    var_0 = maybe_0.ap(maybe_0)
    var_1 = var_0.filter(bool_1)
    var_2 = maybe_0.ap(none_type_0)
    maybe_1.bind(bool_1)


def test_case_7():
    str_0 = "\n    Sum is a Monoid that will combine 2 numbers under addition.\n    "
    bool_0 = True
    tuple_0 = (str_0, bool_0)
    int_0 = 1032
    maybe_0 = module_1.Maybe(int_0, int_0)
    var_0 = maybe_0.ap(tuple_0)
    var_1 = var_0.to_validation()


def test_case_8():
    bool_0 = False
    none_type_0 = None
    maybe_0 = module_1.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    maybe_0.ap(bool_0)


def test_case_9():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_1.Maybe(none_type_0, bool_0)
    object_0 = module_0.object()
    var_0 = maybe_0.ap(none_type_0)
    var_1 = maybe_0.to_box()
    var_2 = maybe_0.get_or_else(object_0)
    var_3 = maybe_0.filter(var_2)


def test_case_10():
    none_type_0 = None
    set_0 = set()
    maybe_0 = module_1.Maybe(set_0, set_0)
    maybe_0.filter(none_type_0)


def test_case_11():
    list_0 = []
    maybe_0 = module_1.Maybe(list_0, list_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.to_try()
    bool_0 = False
    maybe_1 = module_1.Maybe(list_0, bool_0)
    var_2 = maybe_1.get_or_else(list_0)


def test_case_12():
    bool_0 = True
    none_type_0 = None
    bool_1 = True
    maybe_0 = module_1.Maybe(none_type_0, bool_1)
    var_0 = maybe_0.to_either()
    var_0.get_or_else(bool_0)


def test_case_13():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_1.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_either()
    var_0.bind(none_type_0)


def test_case_14():
    bool_0 = True
    bool_1 = False
    maybe_0 = module_1.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.to_lazy()
    var_2 = var_1.to_validation()
    str_0 = ""
    maybe_0.ap(str_0)


def test_case_15():
    set_0 = set()
    str_0 = ""
    bool_0 = True
    maybe_0 = module_1.Maybe(str_0, bool_0)
    var_0 = maybe_0.ap(set_0)
    var_1 = var_0.to_lazy()
    var_2 = var_1.to_validation()
    var_3 = var_2.to_lazy()


def test_case_16():
    int_0 = 968
    bool_0 = False
    maybe_0 = module_1.Maybe(int_0, bool_0)
    var_0 = maybe_0.to_lazy()


def test_case_17():
    str_0 = "\n        :param semigroup: other semigroup to concat\n        atype se\\igroup: Last[B]\n        :returns: new Last with last value\n        :rtype: Last[A]\n)       "
    bool_0 = True
    maybe_0 = module_1.Maybe(str_0, str_0)
    var_0 = maybe_0.filter(maybe_0)
    maybe_1 = module_1.Maybe(bool_0, var_0)
    bool_1 = var_0.__eq__(maybe_1)
    var_1 = var_0.ap(var_0)
    var_2 = maybe_1.to_try()
    maybe_2 = module_1.Maybe(bool_1, bool_1)
    var_3 = maybe_1.to_validation()
    var_4 = var_1.map(maybe_0)
    maybe_2.filter(var_2)


def test_case_18():
    str_0 = "a$GOQJV"
    object_0 = module_0.object()
    bool_0 = False
    maybe_0 = module_1.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_try()
    var_0.to_try()


def test_case_19():
    none_type_0 = None
    none_type_1 = None
    maybe_0 = module_1.Maybe(none_type_1, none_type_1)
    var_0 = maybe_0.to_validation()
    var_1 = var_0.to_lazy()
    var_2 = var_1.to_either()
    var_2.ap(none_type_0)


def test_case_20():
    str_0 = "\n        :param semigroup: other semigroup to concat\n        :type semigroup: Last[B]\n        :returns: new Last with last value\n        :rtype: Last[A]\n        "
    none_type_0 = None
    maybe_0 = module_1.Maybe(str_0, none_type_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    maybe_0.ap(none_type_0)


def test_case_21():
    str_0 = "\n        :param semigroup: other semigroup to concat\n        :type semigroup: Last[B]\n        :returns: new Last with last value\n        :rtype: Last[A]\n        "
    maybe_0 = module_1.Maybe(str_0, str_0)
    var_0 = maybe_0.filter(maybe_0)
    none_type_0 = None
    none_type_1 = None
    var_1 = var_0.bind(none_type_1)
    var_2 = maybe_0.to_either()
    var_3 = var_1.bind(var_2)
    maybe_1 = module_1.Maybe(var_3, str_0)
    var_4 = var_0.get_or_else(none_type_1)
    bool_0 = maybe_1.__eq__(maybe_0)
    var_5 = var_2.ap(var_0)
    var_6 = maybe_1.filter(var_5)
    var_7 = maybe_1.ap(var_2)
    var_8 = var_3.to_box()
    var_9 = var_8.to_either()
    var_9.bind(none_type_0)
