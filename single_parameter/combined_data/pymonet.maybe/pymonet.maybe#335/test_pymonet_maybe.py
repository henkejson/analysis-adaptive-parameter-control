# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    str_0 = "\n        Returns new ImmutableList with argument value on the begin of list\n        and other list elements after it\n\n        :param new_element: element to append on the begin of list\n        :type fn: A\n        :returns: ImmutableList[A]\n        "
    maybe_0 = module_0.Maybe(str_0, str_0)
    bool_0 = True
    maybe_1 = module_0.Maybe(maybe_0, bool_0)
    maybe_2 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.bind(maybe_2)
    bool_1 = False
    bool_2 = maybe_2.__eq__(maybe_2)
    maybe_3 = module_0.Maybe(maybe_0, bool_1)
    bool_3 = var_0.__eq__(maybe_0)


def test_case_3():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0}
    list_0 = [tuple_0, dict_0, tuple_0, tuple_0]
    maybe_0 = module_0.Maybe(dict_0, list_0)
    maybe_1 = module_0.Maybe(dict_0, dict_0)
    bool_0 = maybe_1.__eq__(tuple_0)


def test_case_4():
    str_0 = "\n        Returns new ImmutableList with argument value on the begin of list\n        and other list elements after it\n\n        :param new_element: element to append on the begin of list\n        :type fn: A\n        :returns: ImmutableList[A]\n        "
    maybe_0 = module_0.Maybe(str_0, str_0)
    bool_0 = True
    maybe_1 = module_0.Maybe(maybe_0, bool_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.bind(var_0)
    bool_1 = var_1.__eq__(str_0)
    var_2 = var_1.filter(var_0)
    maybe_2 = module_0.Maybe(bool_1, var_1)
    var_3 = var_1.map(bool_0)
    var_4 = var_3.to_either()
    var_5 = var_3.to_try()


def test_case_5():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_either()
    maybe_1 = module_0.Maybe(none_type_0, var_0)
    maybe_0.ap(maybe_0)


def test_case_6():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_try()
    str_0 = "g7!gR(:dkvAy]ism2"
    none_type_1 = None
    maybe_1 = module_0.Maybe(none_type_1, none_type_1)
    maybe_1.bind(str_0)


def test_case_7():
    int_0 = -1155
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.filter(int_0)
    bool_0 = False
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    maybe_1.filter(int_0)


def test_case_8():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_try()
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1.filter(maybe_1)


def test_case_9():
    bool_0 = False
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_try()
    tuple_0 = (bool_1,)
    set_0 = {tuple_0, tuple_0, bool_1, bool_1}
    maybe_1 = module_0.Maybe(bool_1, bool_0)
    bool_2 = maybe_1.__eq__(tuple_0)
    maybe_2 = module_0.Maybe(set_0, tuple_0)
    var_1 = maybe_2.get_or_else(bool_0)
    var_1.to_validation()


def test_case_10():
    int_0 = 31
    bool_0 = False
    maybe_0 = module_0.Maybe(int_0, bool_0)
    list_0 = [bool_0, bool_0]
    var_0 = maybe_0.get_or_else(list_0)
    var_0.map(var_0)


def test_case_11():
    str_0 = "\n        Returns new ImmutableList with argument value on the begin of list\n        and other list elements after it\n\n        :param new_element: element to append on the begin of list\n        :type fn: A\n        :returns: ImmutableList[A]\n        "
    maybe_0 = module_0.Maybe(str_0, str_0)
    bool_0 = True
    maybe_1 = module_0.Maybe(maybe_0, bool_0)
    var_0 = maybe_0.filter(maybe_0)
    maybe_2 = module_0.Maybe(maybe_0, bool_0)
    var_1 = maybe_2.to_either()
    var_2 = var_1.to_try()


def test_case_12():
    bool_0 = True
    set_0 = {bool_0}
    maybe_0 = module_0.Maybe(set_0, set_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.filter(var_0)
    var_2 = maybe_0.to_validation()
    var_2.filter(maybe_0)


def test_case_13():
    bool_0 = False
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_try()
    tuple_0 = (bool_1,)
    maybe_1 = module_0.Maybe(bool_1, bool_0)
    bool_2 = maybe_1.__eq__(tuple_0)
    var_1 = maybe_1.to_box()
    var_2 = var_1.to_try()
    maybe_1.filter(var_1)


def test_case_14():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_lazy()


def test_case_15():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.to_lazy()
    maybe_0.filter(none_type_0)


def test_case_16():
    bool_0 = False
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_try()
    tuple_0 = (bool_1,)
    set_0 = {tuple_0, tuple_0, bool_1, bool_1}
    maybe_1 = module_0.Maybe(bool_1, bool_0)
    bool_2 = maybe_1.__eq__(tuple_0)
    maybe_2 = module_0.Maybe(set_0, tuple_0)
    tuple_0.to_validation()


def test_case_17():
    none_type_0 = None
    int_0 = -3593
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.to_lazy()
    var_2 = maybe_0.to_validation()
    var_2.map(none_type_0)


def test_case_18():
    str_0 = "\n        Returns new ImmutableList with argument value on the begin of list\n        and other list elements after it\n\n        :param new_element: element to append on the begin of list\n        :type fn: A\n        :returns: ImmutableList[A]\n        "
    maybe_0 = module_0.Maybe(str_0, str_0)
    bool_0 = False
    maybe_1 = module_0.Maybe(maybe_0, bool_0)
    var_0 = maybe_0.bind(maybe_0)
    bool_1 = maybe_1.__eq__(maybe_1)
    var_1 = var_0.to_either()
    var_2 = var_0.to_try()
    bool_2 = False
    maybe_2 = module_0.Maybe(bool_0, bool_2)
    bool_3 = maybe_2.__eq__(maybe_1)
    bool_4 = True
    bool_5 = True
    maybe_3 = module_0.Maybe(bool_4, bool_5)
    var_3 = maybe_2.get_or_else(maybe_0)
    var_4 = maybe_2.to_validation()


def test_case_19():
    str_0 = "DipPnpRV8[*K["
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_try()
    var_1.to_try()


def test_case_20():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_either()
    var_2 = var_1.to_validation()
    var_2.filter(bool_0)


def test_case_21():
    str_0 = "\n        Returns new ImmutableList with argument value on the begin of list\n        and other list elements after it\n\n        :param new_element: element to append on the begin of list\n        :type fn: A\n        :returns: ImmutableList[A]\n        "
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.bind(maybe_0)
    var_1 = var_0.to_try()
    var_2 = maybe_0.ap(var_1)
    var_3 = var_0.filter(var_2)
    bool_0 = True
    maybe_1 = module_0.Maybe(var_1, bool_0)
    var_4 = var_3.to_validation()
