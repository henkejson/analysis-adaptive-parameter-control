# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1
import builtins as module_2


def test_case_0():
    bytes_0 = b"& \x8c\xb1^\xdax\xcfnp\xa6\xab;\x83."
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    bytes_0 = b"& \x8c\xb1^\xdax\xcfnp\xa6\xab;\x83."
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_either()
    bool_0 = maybe_0.__eq__(maybe_0)


def test_case_3():
    float_0 = -2941.0
    maybe_0 = module_0.Maybe(float_0, float_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.map(maybe_0)
    bool_0 = var_1.__eq__(var_0)


def test_case_4():
    bytes_0 = b"& \x8c\xb1^\xdax\xcfnp\xa6\xab;\x83."
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.map(bytes_0)
    bool_0 = maybe_0.__eq__(maybe_0)


def test_case_5():
    str_0 = ".O3T.7\\UrV3&)SGKy"
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.map(str_0)


def test_case_6():
    str_0 = "(:O)P<w`g\t)"
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.bind(none_type_0)
    var_1 = var_0.filter(none_type_0)
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1.filter(str_0)


def test_case_7():
    str_0 = "ImmutableList: you can not add any other instace than ImmutableList"
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.bind(str_0)


def test_case_8():
    bool_0 = False
    none_type_0 = None
    bool_1 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_1)
    var_0 = maybe_0.to_lazy()
    maybe_1 = module_0.Maybe(var_0, bool_1)
    var_1 = maybe_1.ap(bool_0)
    var_2 = var_1.to_box()
    var_3 = var_2.to_try()


def test_case_9():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, none_type_0)
    bool_1 = maybe_0.__eq__(bool_0)
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    maybe_1.ap(bool_0)


def test_case_10():
    generic_0 = module_1.Generic()
    int_0 = 1
    object_0 = module_2.object()
    maybe_0 = module_0.Maybe(object_0, object_0)
    var_0 = maybe_0.filter(int_0)


def test_case_11():
    int_0 = -4985
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1 = module_0.Maybe(none_type_0, int_0)
    var_0 = maybe_0.to_validation()
    maybe_0.filter(int_0)


def test_case_12():
    bytes_0 = b"& \x8c\xb1^\xdax\xcfnp\xa6\xab;\x83."
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    maybe_1 = module_0.Maybe(bytes_0, bytes_0)
    none_type_0 = None
    var_0 = maybe_0.filter(none_type_0)
    var_1 = maybe_1.to_box()
    var_2 = maybe_0.get_or_else(maybe_0)
    bool_0 = maybe_1.__eq__(var_2)


def test_case_13():
    float_0 = 1119.6853
    complex_0 = 862.297627 + 1914j
    none_type_0 = None
    maybe_0 = module_0.Maybe(complex_0, none_type_0)
    var_0 = maybe_0.get_or_else(float_0)
    var_0.to_either()


def test_case_14():
    none_type_0 = None
    bool_0 = False
    bool_1 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_1)
    bool_2 = maybe_0.__eq__(bool_0)
    var_0 = maybe_0.filter(none_type_0)
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_1 = maybe_1.to_box()
    maybe_2 = module_0.Maybe(none_type_0, bool_2)
    var_2 = maybe_1.to_either()
    maybe_1.filter(var_1)


def test_case_15():
    str_0 = "(:O)P<w`g\t)"
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.bind(none_type_0)
    var_1 = var_0.filter(none_type_0)
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_2 = maybe_1.to_box()
    maybe_1.filter(str_0)


def test_case_16():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()


def test_case_17():
    bytes_0 = b"& \x8c\xb1^\xdax\xcfnp\xa6\xab;\x83."
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    maybe_1 = module_0.Maybe(bytes_0, bytes_0)
    none_type_0 = None
    maybe_2 = module_0.Maybe(bytes_0, none_type_0)
    var_0 = maybe_0.to_try()
    none_type_1 = None
    var_1 = maybe_0.filter(none_type_1)
    var_2 = maybe_1.to_box()
    var_3 = maybe_0.get_or_else(maybe_0)
    bool_0 = maybe_1.__eq__(var_3)


def test_case_18():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_try()
    var_0.to_validation()


def test_case_19():
    object_0 = module_2.object()
    bool_0 = True
    maybe_0 = module_0.Maybe(object_0, bool_0)
    str_0 = 'g"Yv{k>z'
    maybe_1 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_1.filter(maybe_0)
    var_1 = var_0.to_validation()


def test_case_20():
    float_0 = -2941.0
    maybe_0 = module_0.Maybe(float_0, float_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.to_lazy()
    var_2 = maybe_0.get_or_else(maybe_0)
    var_3 = maybe_0.filter(var_2)
    var_4 = var_0.map(var_1)
    var_5 = maybe_0.to_validation()
    maybe_1 = module_0.Maybe(maybe_0, var_1)
    var_6 = maybe_0.to_lazy()
    var_7 = var_6.to_validation()
    var_8 = var_1.to_validation()
    var_9 = var_4.to_lazy()


def test_case_21():
    float_0 = -2941.0
    maybe_0 = module_0.Maybe(float_0, float_0)
    bool_0 = True
    maybe_1 = module_0.Maybe(float_0, bool_0)
    none_type_0 = None
    var_0 = maybe_0.bind(none_type_0)
    var_1 = maybe_0.map(maybe_1)
    var_2 = maybe_1.ap(maybe_0)
    var_3 = var_0.filter(var_2)
    var_4 = var_2.map(var_2)
    var_5 = var_4.filter(var_2)
    var_6 = var_5.to_try()
    var_7 = var_6.get_or_else(none_type_0)
    bool_1 = False
    maybe_2 = module_0.Maybe(bool_0, bool_1)
    var_8 = var_5.to_box()
    var_9 = maybe_1.to_box()
    list_0 = [var_4, bool_0, var_3]
    maybe_3 = module_0.Maybe(list_0, var_7)
    maybe_4 = module_0.Maybe(var_6, var_6)
    var_10 = var_6.filter(float_0)
    var_11 = var_4.bind(var_8)
    var_12 = var_11.to_box()
    bool_2 = var_1.__eq__(maybe_4)


def test_case_22():
    bool_0 = True
    list_0 = [bool_0]
    bool_1 = True
    maybe_0 = module_0.Maybe(list_0, bool_1)
    var_0 = maybe_0.bind(list_0)
    var_1 = var_0.to_try()
    var_2 = var_0.ap(var_1)
    set_0 = set()
    var_3 = var_0.to_either()
    maybe_1 = module_0.Maybe(set_0, set_0)
    var_4 = var_0.filter(var_2)
    var_5 = var_4.ap(var_3)
    bool_2 = maybe_1.__eq__(maybe_1)
    var_6 = maybe_1.to_validation()


def test_case_23():
    str_0 = "(:O)P<w`g\t)"
    none_type_0 = None
    maybe_0 = module_0.Maybe(str_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_try()
    var_2 = var_0.to_box()
    var_3 = maybe_0.to_either()
    maybe_1 = module_0.Maybe(var_1, var_3)
    var_2.bind(var_1)
