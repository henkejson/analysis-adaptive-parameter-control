# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import builtins as module_1


def test_case_0():
    int_0 = 1376
    maybe_0 = module_0.Maybe(int_0, int_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_box()
    var_0.to_box()


def test_case_3():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = maybe_0.__eq__(none_type_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.to_box()


def test_case_4():
    int_0 = 1622
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.get_or_else(int_0)
    var_2 = maybe_0.to_lazy()
    maybe_1 = module_0.Maybe(maybe_0, var_2)
    var_3 = maybe_0.map(maybe_0)
    bool_0 = False
    maybe_2 = module_0.Maybe(maybe_1, bool_0)
    var_4 = var_2.map(var_2)
    var_2.get_or_else(maybe_0)


def test_case_5():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.get_or_else(var_0)
    maybe_0.map(none_type_0)


def test_case_6():
    bytes_0 = b'E\xd3\\#\x13\x8bX"\xb5\x1a\xb5\xafs\xbf\x01!8U\x88'
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.ap(maybe_0)
    var_1 = maybe_0.to_either()
    var_2 = maybe_0.map(bytes_0)
    var_3 = var_2.to_box()
    var_4 = var_2.ap(bytes_0)
    var_5 = maybe_0.bind(maybe_0)
    bool_0 = var_1.__eq__(var_5)
    list_0 = [var_5, var_3]
    bool_1 = var_0.__eq__(var_5)
    var_6 = var_2.ap(list_0)
    int_0 = 1376
    maybe_1 = module_0.Maybe(int_0, int_0)
    var_7 = var_5.to_try()
    maybe_2 = module_0.Maybe(maybe_1, var_7)
    var_8 = maybe_1.filter(var_1)


def test_case_7():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    bool_1 = maybe_0.__eq__(none_type_0)
    var_0 = maybe_0.get_or_else(none_type_0)
    var_1 = maybe_0.to_box()
    bool_2 = var_1.__eq__(none_type_0)
    maybe_0.bind(var_0)


def test_case_8():
    int_0 = -1028
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.to_lazy()
    float_0 = -3131.11
    var_1 = maybe_0.ap(float_0)
    var_2 = var_0.to_either()


def test_case_9():
    bool_0 = True
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_lazy()
    maybe_1 = module_0.Maybe(bool_0, bool_1)
    none_type_0 = None
    bool_2 = True
    bool_3 = False
    maybe_2 = module_0.Maybe(bool_2, bool_3)
    maybe_2.ap(none_type_0)


def test_case_10():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.filter(var_0)
    bool_1 = maybe_0.__eq__(none_type_0)
    var_2 = maybe_0.to_either()
    var_3 = maybe_0.to_lazy()
    var_4 = maybe_0.to_either()
    var_5 = var_4.to_validation()
    var_0.to_box()


def test_case_11():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_1 = maybe_0.__eq__(bool_0)
    int_0 = -229
    var_0 = maybe_0.get_or_else(int_0)
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    var_1 = maybe_1.to_validation()
    maybe_1.filter(none_type_0)


def test_case_12():
    int_0 = 4598
    list_0 = [int_0]
    int_1 = -769
    maybe_0 = module_0.Maybe(int_1, int_1)
    var_0 = maybe_0.get_or_else(list_0)
    var_0.to_lazy()


def test_case_13():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    object_0 = module_1.object()
    maybe_0 = module_0.Maybe(set_0, object_0)
    var_0 = maybe_0.to_either()
    bool_1 = True
    bool_2 = True
    maybe_1 = module_0.Maybe(bool_1, bool_2)
    var_1 = maybe_1.to_box()
    var_2 = maybe_1.to_try()


def test_case_14():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_either()
    bool_1 = maybe_0.__eq__(none_type_0)
    var_1 = module_1.object()
    bool_2 = maybe_0.__eq__(maybe_0)
    maybe_1 = module_0.Maybe(none_type_0, bool_1)
    var_2 = maybe_0.to_box()
    maybe_2 = module_0.Maybe(bool_0, none_type_0)
    var_1.to_validation()


def test_case_15():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_0.to_lazy()


def test_case_16():
    bool_0 = True
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.to_validation()
    var_1.get_or_else(bool_1)


def test_case_17():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_try()
    str_0 = "\n    Return the first element of the list which matches the keys, or None if no element matches.\n\n    :param collection: collection to search\n    :type collection: List[A]\n    :param key: function to decide witch element should be found\n    :type key: Function(A) -> Boolean\n    :returns: element of collection or None\n    :rtype: A | None\n    "
    maybe_1 = module_0.Maybe(str_0, str_0)
    var_1 = maybe_1.to_validation()
    var_2 = maybe_1.to_validation()
    var_3 = maybe_1.to_lazy()
    var_3.filter(var_3)


def test_case_18():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_try()
    var_0.to_try()


def test_case_19():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_validation()
    dict_0 = {}
    maybe_1 = module_0.Maybe(dict_0, dict_0)
    var_1 = maybe_1.to_lazy()
    var_2 = var_1.to_try()
    var_2.map(var_0)


def test_case_20():
    bytes_0 = b'E\xd3\\#\x13\x8bX"\xb5\x1a\xb5\xafs\xbf\x01!8U\x88'
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.ap(maybe_0)
    var_1 = maybe_0.to_either()
    var_2 = maybe_0.map(bytes_0)
    var_3 = var_2.to_box()
    var_4 = var_2.ap(bytes_0)
    var_5 = maybe_0.bind(maybe_0)
    bool_0 = var_1.__eq__(var_5)
    bool_1 = maybe_0.__eq__(var_0)
    var_6 = var_4.to_try()
    list_0 = [var_5, var_3]
    bool_2 = var_0.__eq__(var_5)
    var_6.ap(list_0)
