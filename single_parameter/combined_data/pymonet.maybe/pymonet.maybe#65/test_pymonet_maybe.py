# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    bytes_0 = b"\xdf\xe0\x9a\n"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.bind(var_0)
    maybe_1 = module_0.Maybe(bool_0, var_0)
    var_2 = maybe_0.to_try()
    var_3 = maybe_0.filter(var_0)
    var_4 = var_1.map(bool_0)
    bool_1 = False
    var_5 = var_4.to_box()
    maybe_2 = module_0.Maybe(var_5, bool_1)
    var_6 = maybe_1.get_or_else(maybe_2)
    var_7 = var_1.to_validation()
    var_8 = maybe_1.get_or_else(var_1)
    bool_2 = var_1.__eq__(var_8)
    var_6.filter(maybe_2)


def test_case_3():
    bytes_0 = b"$4"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_either()
    bool_0 = False
    bool_1 = False
    maybe_1 = module_0.Maybe(bool_0, bool_1)
    bool_2 = maybe_1.__eq__(var_0)


def test_case_4():
    complex_0 = -1170 - 1428.215995j
    maybe_0 = module_0.Maybe(complex_0, complex_0)
    var_0 = maybe_0.filter(complex_0)
    var_1 = var_0.map(complex_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1.filter(complex_0)


def test_case_5():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.bind(maybe_0)
    bool_1 = maybe_0.__eq__(none_type_0)
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1.bind(none_type_0)


def test_case_6():
    str_0 = "\n        Take function and call constructor function passing returned value to fn function.\n\n        It's only way to call function store in Lazy\n        :param fn: Function(constructor_fn) -> B\n        :returns: result od folder function\n        :rtype: B\n        "
    float_0 = 1290.0
    set_0 = {float_0, float_0}
    maybe_0 = module_0.Maybe(set_0, float_0)
    var_0 = maybe_0.ap(str_0)


def test_case_7():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.ap(none_type_0)


def test_case_8():
    complex_0 = -1170 - 1428.215995j
    maybe_0 = module_0.Maybe(complex_0, complex_0)
    var_0 = maybe_0.filter(complex_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1.filter(complex_0)


def test_case_9():
    complex_0 = -1170 - 1428.215995j
    maybe_0 = module_0.Maybe(complex_0, complex_0)
    var_0 = maybe_0.filter(complex_0)
    var_1 = var_0.map(complex_0)
    var_2 = var_1.get_or_else(complex_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1.filter(complex_0)


def test_case_10():
    complex_0 = 607.58 - 1224.21j
    str_0 = "C4M:'r4p\\;O@xS4"
    none_type_0 = None
    maybe_0 = module_0.Maybe(str_0, none_type_0)
    var_0 = maybe_0.get_or_else(complex_0)


def test_case_11():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_either()


def test_case_12():
    str_0 = "hXm'fPa\t\neZ_t\"%G.uI1"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    dict_1 = {bool_0: str_0}
    tuple_0 = (dict_0, maybe_0, maybe_0, dict_1)
    str_1 = "\n`q?@C\x0bK8bXt3Rd*%"
    maybe_1 = module_0.Maybe(str_1, str_1)
    var_0 = maybe_1.to_box()
    var_0.ap(tuple_0)


def test_case_13():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_box()


def test_case_14():
    set_0 = set()
    bool_0 = True
    maybe_0 = module_0.Maybe(set_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_0.to_lazy()


def test_case_15():
    str_0 = "UYl"
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_lazy()


def test_case_16():
    str_0 = "*\x0bB1>'="
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_try()
    var_1 = var_0.get_or_else(str_0)
    var_1.to_box()


def test_case_17():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_try()
    var_0.to_box()


def test_case_18():
    float_0 = 1747.43
    int_0 = -3052
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.ap(float_0)
    var_1 = maybe_0.to_validation()
    var_1.map(float_0)


def test_case_19():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.get_or_else(none_type_0)
    var_1 = maybe_0.to_try()
    var_2 = maybe_0.to_try()
    var_3 = maybe_0.to_either()
    var_4 = maybe_0.to_box()
    var_5 = var_4.to_either()
    var_6 = maybe_0.to_validation()
    var_3.get_or_else(var_3)


def test_case_20():
    bytes_0 = b'G.L"\xdbt\xc1\r'
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_box()
    var_2 = var_1.to_validation()
    var_3 = var_2.to_lazy()
    var_4 = var_3.to_either()
    var_5 = var_4.to_try()
    var_5.map(bytes_0)


def test_case_21():
    tuple_0 = ()
    bool_0 = False
    maybe_0 = module_0.Maybe(tuple_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.to_lazy()
    var_2 = var_1.to_try()
    var_3 = var_1.map(bool_0)
    var_0.to_lazy()


def test_case_22():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = maybe_0.__eq__(bool_0)
    bool_2 = False
    bytes_0 = b"\x15\xd66\x07"
    var_0 = maybe_0.bind(bytes_0)
    maybe_1 = module_0.Maybe(bool_0, bool_1)
    var_1 = maybe_0.to_try()
    var_2 = maybe_0.filter(bytes_0)
    var_3 = var_0.to_validation()
    bool_3 = var_0.__eq__(bool_2)
    bool_4 = False
    maybe_2 = module_0.Maybe(var_0, bool_4)
    maybe_2.ap(maybe_2)


def test_case_23():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.bind(var_0)
    maybe_1 = module_0.Maybe(bool_0, var_0)
    var_2 = maybe_0.to_try()
    var_3 = maybe_0.filter(var_0)
    var_4 = var_1.bind(maybe_1)
    bool_1 = False
    bytes_0 = b"3R\\\xee\xec\x01"
    var_5 = maybe_1.ap(bytes_0)
    var_6 = var_1.ap(maybe_1)
    maybe_2 = module_0.Maybe(var_3, bool_1)
    var_7 = maybe_1.get_or_else(maybe_2)
    var_8 = var_1.to_validation()
    var_9 = var_8.to_box()
    bool_2 = var_1.__eq__(maybe_1)
    var_7.filter(maybe_2)
