# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import builtins as module_1


def test_case_0():
    bytes_0 = b"\xe3>+Bv"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)


def test_case_1():
    str_0 = ""
    maybe_0 = module_0.Maybe(str_0, str_0)


def test_case_2():
    int_0 = 773
    object_0 = module_1.object()
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.ap(object_0)
    bool_1 = var_0.__eq__(int_0)


def test_case_3():
    none_type_0 = None
    str_0 = "L.=pm?"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.filter(none_type_0)
    var_1 = var_0.to_lazy()
    bool_0 = var_1.__eq__(var_1)
    var_2 = maybe_0.to_lazy()
    var_3 = var_0.ap(var_1)
    var_4 = maybe_0.to_box()
    var_5 = var_4.to_validation()
    var_6 = var_3.to_validation()
    var_7 = var_0.map(var_3)


def test_case_4():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = True
    bool_2 = False
    maybe_1 = module_0.Maybe(bool_1, bool_2)
    maybe_1.map(maybe_0)


def test_case_5():
    int_0 = -3096
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.to_box()
    maybe_1 = module_0.Maybe(maybe_0, maybe_0)
    var_1 = maybe_0.to_validation()
    var_2 = maybe_0.bind(int_0)


def test_case_6():
    float_0 = -1476.4316
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = maybe_0.__eq__(float_0)
    var_0 = maybe_0.get_or_else(bool_0)
    var_1 = maybe_0.to_lazy()
    bool_1 = maybe_0.__eq__(float_0)
    bool_2 = False
    maybe_1 = module_0.Maybe(float_0, bool_2)
    var_2 = maybe_1.to_lazy()
    maybe_0.bind(bool_2)


def test_case_7():
    none_type_0 = None
    str_0 = "4.=p1?"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.filter(none_type_0)
    bool_0 = var_0.__eq__(var_0)
    var_1 = var_0.map(bool_0)
    var_2 = var_0.to_lazy()
    bool_1 = False
    maybe_1 = module_0.Maybe(var_0, bool_1)
    var_3 = maybe_0.filter(maybe_1)
    var_4 = maybe_1.ap(var_2)
    var_5 = maybe_0.get_or_else(var_4)
    var_6 = var_0.to_validation()
    var_7 = var_0.map(none_type_0)
    maybe_1.filter(var_6)


def test_case_8():
    int_0 = 752
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.bind(var_0)
    var_2 = maybe_0.filter(var_0)
    var_3 = maybe_0.to_box()
    bool_0 = maybe_0.__eq__(int_0)
    var_0.to_lazy()


def test_case_9():
    none_type_0 = None
    str_0 = "L.=pm?"
    maybe_0 = module_0.Maybe(str_0, none_type_0)
    maybe_0.filter(none_type_0)


def test_case_10():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.bind(bool_0)
    var_1 = maybe_0.to_try()
    var_2 = var_0.get_or_else(var_0)
    var_3 = var_2.to_either()
    var_4 = var_3.to_validation()
    var_5 = maybe_0.bind(var_1)


def test_case_11():
    list_0 = []
    list_1 = [list_0]
    int_0 = 1
    bool_0 = False
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.get_or_else(list_1)


def test_case_12():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_validation()


def test_case_13():
    none_type_0 = None
    none_type_1 = None
    maybe_0 = module_0.Maybe(none_type_1, none_type_1)
    var_0 = maybe_0.to_box()
    var_0.get_or_else(none_type_0)


def test_case_14():
    str_0 = ""
    str_1 = "\n        Take function, store it and call with Task value during calling fork function.\n        Return new Task with result of called.\n\n        :param fn: mapper function\n        :type fn: Function(value) -> B\n        :returns: new Task with mapped resolve attribute\n        :rtype: Task[Function(resolve, reject -> A | B]\n        "
    maybe_0 = module_0.Maybe(str_0, str_1)
    var_0 = maybe_0.to_lazy()


def test_case_15():
    object_0 = module_1.object()
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_either()
    complex_0 = 2378.805333 - 2818.61027j
    set_0 = set()
    maybe_1 = module_0.Maybe(set_0, set_0)
    var_1 = maybe_1.to_lazy()
    var_2 = maybe_1.get_or_else(complex_0)
    var_2.get_or_else(object_0)


def test_case_16():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_1 = maybe_0.__eq__(bool_0)
    var_0 = maybe_0.get_or_else(bool_0)
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    var_1 = maybe_1.to_try()
    var_1.to_either()


def test_case_17():
    bytes_0 = b"\xe3>v+Bv"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_validation()


def test_case_18():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_validation()


def test_case_19():
    none_type_0 = None
    str_0 = "L.=pm?"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.filter(none_type_0)
    var_1 = var_0.to_lazy()
    var_2 = var_0.to_box()
    var_3 = maybe_0.to_box()
    bool_0 = var_0.__eq__(none_type_0)
    var_4 = maybe_0.to_lazy()
    maybe_1 = var_4.to_try()


def test_case_20():
    float_0 = -1476.4316
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = maybe_0.__eq__(float_0)
    var_0 = maybe_0.get_or_else(bool_0)
    var_1 = maybe_0.to_lazy()
    bool_1 = maybe_0.__eq__(float_0)
    maybe_1 = module_0.Maybe(float_0, bool_0)
    var_2 = maybe_1.to_lazy()
    var_3 = module_0.Maybe(float_0, bool_0)
    var_4 = var_3.get_or_else(var_1)
    var_5 = var_2.to_try()
    var_5.map(maybe_1)


def test_case_21():
    none_type_0 = None
    str_0 = "L.=pm?"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.filter(none_type_0)
    var_1 = var_0.to_lazy()
    bool_0 = var_0.__eq__(maybe_0)
    var_2 = var_0.to_box()
    var_3 = maybe_0.to_box()
    bool_1 = var_0.__eq__(none_type_0)
    var_4 = maybe_0.to_lazy()
    var_5 = var_4.to_try()


def test_case_22():
    str_0 = "L.=pm?"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.filter(maybe_0)
    bool_0 = var_0.__eq__(var_0)
    var_1 = var_0.to_lazy()
    bool_1 = False
    maybe_1 = module_0.Maybe(var_0, bool_1)
    var_2 = var_0.to_validation()
    maybe_1.filter(var_2)


def test_case_23():
    str_0 = "0:FWTLhp?5{HH]f#p"
    float_0 = 207.307
    set_0 = {float_0, float_0, float_0, float_0}
    bool_0 = True
    maybe_0 = module_0.Maybe(set_0, bool_0)
    var_0 = maybe_0.ap(str_0)
    list_0 = []
    maybe_1 = module_0.Maybe(list_0, list_0)
    bool_1 = maybe_1.__eq__(maybe_1)
    var_1 = maybe_1.to_either()
    maybe_2 = module_0.Maybe(var_1, var_1)
    var_2 = maybe_1.to_lazy()
    var_1.map(var_2)
