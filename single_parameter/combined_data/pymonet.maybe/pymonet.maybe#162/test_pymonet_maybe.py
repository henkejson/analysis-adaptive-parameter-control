# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    int_0 = 2956
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    none_type_0 = None
    bool_1 = maybe_0.__eq__(none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_try()
    var_2 = var_0.bind(int_0)
    maybe_1 = module_0.Maybe(int_0, int_0)
    var_3 = var_2.map(var_0)
    bool_2 = var_3.__eq__(bool_0)
    var_3.to_box()


def test_case_3():
    int_0 = 3900
    bool_0 = True
    bool_1 = True
    maybe_0 = module_0.Maybe(int_0, bool_1)
    maybe_1 = module_0.Maybe(int_0, bool_0)
    maybe_2 = module_0.Maybe(maybe_1, bool_0)
    var_0 = maybe_2.map(maybe_1)
    var_1 = maybe_2.to_try()
    var_1.to_validation()


def test_case_4():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.map(none_type_0)


def test_case_5():
    float_0 = -3466.8
    float_1 = -25.06
    dict_0 = {float_1: float_1, float_1: float_1}
    bool_0 = True
    maybe_0 = module_0.Maybe(dict_0, bool_0)
    var_0 = maybe_0.bind(float_0)


def test_case_6():
    int_0 = 1046
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_0.bind(int_0)


def test_case_7():
    bytes_0 = b"\xfd\xcf\xaa\xf2@\x04\xe1"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.ap(bytes_0)
    var_1 = var_0.to_lazy()
    maybe_1 = module_0.Maybe(bytes_0, bytes_0)
    var_2 = maybe_1.to_box()
    str_0 = "'&qeF~$$B"
    var_3 = maybe_1.filter(str_0)
    var_4 = maybe_1.map(maybe_0)
    var_2.filter(bytes_0)


def test_case_8():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    str_0 = "|\\>"
    var_0 = maybe_0.get_or_else(str_0)
    var_1 = maybe_0.to_try()
    maybe_0.ap(var_1)


def test_case_9():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.filter(bool_0)
    var_1 = var_0.to_validation()
    var_2 = var_1.to_lazy()


def test_case_10():
    list_0 = []
    float_0 = -1088.6
    bool_0 = False
    maybe_0 = module_0.Maybe(float_0, bool_0)
    maybe_0.filter(list_0)


def test_case_11():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.get_or_else(bool_0)
    var_0.to_either()


def test_case_12():
    none_type_0 = None
    str_0 = "MvZc0\x0cB&p"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_box()
    var_2 = var_1.to_validation()
    var_2.filter(none_type_0)


def test_case_13():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_try()
    bool_0 = False
    var_1 = maybe_0.to_either()
    var_2 = maybe_0.get_or_else(bool_0)
    var_3 = maybe_0.get_or_else(none_type_0)
    maybe_0.ap(maybe_0)


def test_case_14():
    none_type_0 = None
    str_0 = "\n        :returns: Copy of self\n        :rtype: Left[A]\n        "
    maybe_0 = module_0.Maybe(none_type_0, str_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_try()
    var_1.to_either()


def test_case_15():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_box()
    var_0.ap(none_type_0)


def test_case_16():
    tuple_0 = ()
    bool_0 = True
    maybe_0 = module_0.Maybe(tuple_0, bool_0)
    none_type_0 = None
    bool_1 = maybe_0.__eq__(none_type_0)
    maybe_1 = module_0.Maybe(tuple_0, tuple_0)
    var_0 = maybe_1.to_lazy()
    tuple_0.to_lazy()


def test_case_17():
    int_0 = 0
    str_0 = "fbpaxLG$"
    none_type_0 = None
    maybe_0 = module_0.Maybe(str_0, none_type_0)
    var_0 = maybe_0.to_try()
    var_1 = var_0.get_or_else(int_0)
    bytes_0 = b"\x8c\xf2"
    bool_0 = True
    maybe_1 = module_0.Maybe(bytes_0, bool_0)
    var_2 = maybe_1.to_validation()
    var_2.get_or_else(var_1)


def test_case_18():
    bytes_0 = b'\xe6`E\xba\xd8\x07\x85\xe5P\xe9\xa3\xbe"?\xb9+3\xf7\x14\x02'
    bool_0 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.to_validation()
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_1 = maybe_1.to_try()
    maybe_1.filter(var_1)


def test_case_19():
    str_0 = "8\x0b\x0bWK\x0b^W^*\t"
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_validation()
    var_1.filter(str_0)


def test_case_20():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_box()
    bool_0 = maybe_0.__eq__(maybe_0)
    var_0.ap(none_type_0)


def test_case_21():
    none_type_0 = None
    bool_0 = False
    bytes_0 = b"w\x9a\x88\xe8\x1a\xf8\n[%\xc6\x9bL\xd0"
    maybe_0 = module_0.Maybe(none_type_0, bytes_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_lazy()
    var_2 = maybe_0.filter(none_type_0)
    var_3 = maybe_0.to_either()
    var_4 = maybe_0.ap(bytes_0)
    var_5 = maybe_0.to_lazy()
    var_6 = var_4.map(none_type_0)
    var_7 = var_5.to_box()
    bool_1 = var_2.__eq__(maybe_0)
    bool_2 = var_7.__eq__(bool_1)
    maybe_1 = module_0.Maybe(bool_0, var_5)
    var_8 = var_1.map(var_7)
    var_9 = var_6.to_lazy()
    var_10 = maybe_1.map(var_1)
    var_11 = var_10.to_try()
    var_12 = var_8.ap(bool_0)
    var_13 = var_4.to_lazy()
    var_14 = var_7.to_try()
    var_15 = var_11.get_or_else(var_6)


def test_case_22():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.get_or_else(maybe_0)
    var_2 = maybe_0.filter(var_1)
    var_3 = maybe_0.to_lazy()
    var_4 = var_3.map(var_0)
    var_5 = maybe_0.get_or_else(bool_0)
    var_6 = var_1.to_lazy()
    var_7 = var_3.ap(maybe_0)
    var_8 = var_2.ap(var_3)
    maybe_1 = module_0.Maybe(var_2, var_7)
    var_9 = maybe_1.get_or_else(var_7)
    var_10 = maybe_1.to_either()
    var_11 = maybe_1.get_or_else(var_7)
    list_0 = [var_9, bool_0, var_0, var_1]
    var_12 = var_8.ap(list_0)
    var_13 = var_0.to_try()
    bool_1 = var_2.__eq__(var_1)
    var_5.to_try()
