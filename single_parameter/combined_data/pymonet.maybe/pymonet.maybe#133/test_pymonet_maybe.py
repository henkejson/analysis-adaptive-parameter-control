# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    str_0 = 'U-9+2"A5FaZ*'
    maybe_0 = module_0.Maybe(str_0, str_0)


def test_case_1():
    tuple_0 = ()
    maybe_0 = module_0.Maybe(tuple_0, tuple_0)


def test_case_2():
    bool_0 = False
    int_0 = -1977
    tuple_0 = (int_0,)
    bool_1 = False
    maybe_0 = module_0.Maybe(tuple_0, bool_1)
    none_type_0 = None
    maybe_1 = module_0.Maybe(maybe_0, none_type_0)
    bool_2 = maybe_1.__eq__(bool_0)


def test_case_3():
    bool_0 = False
    str_0 = "\\"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.map(bool_0)
    bool_1 = maybe_0.__eq__(bool_0)
    var_1 = maybe_0.to_try()
    var_2 = maybe_0.ap(bool_0)
    var_3 = var_0.filter(var_2)
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    maybe_1.filter(maybe_1)


def test_case_4():
    none_type_0 = None
    set_0 = set()
    bool_0 = False
    maybe_0 = module_0.Maybe(set_0, bool_0)
    maybe_1 = module_0.Maybe(maybe_0, bool_0)
    maybe_1.map(none_type_0)


def test_case_5():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.ap(bool_0)
    var_1 = maybe_0.bind(none_type_0)
    var_2 = var_1.ap(var_1)
    none_type_0.ap(none_type_0)


def test_case_6():
    bool_0 = False
    str_0 = "\\"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    bool_1 = maybe_0.__eq__(bool_0)
    var_1 = maybe_0.to_try()
    var_2 = maybe_0.ap(bool_0)
    var_3 = var_0.filter(var_2)
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    maybe_1.filter(maybe_1)


def test_case_7():
    int_0 = -1143
    int_1 = 3375
    list_0 = []
    maybe_0 = module_0.Maybe(int_1, list_0)
    maybe_0.ap(int_0)


def test_case_8():
    bool_0 = False
    str_0 = "\\"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.filter(bool_0)
    bool_1 = True
    maybe_1 = module_0.Maybe(bool_1, bool_0)
    var_2 = maybe_0.to_box()
    maybe_1.filter(maybe_1)


def test_case_9():
    int_0 = -1977
    tuple_0 = (int_0,)
    bool_0 = False
    maybe_0 = module_0.Maybe(tuple_0, bool_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(maybe_0, none_type_0)
    var_0 = maybe_0.to_try()
    maybe_0.filter(var_0)


def test_case_10():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    none_type_0 = None
    int_0 = -711
    maybe_0 = module_0.Maybe(none_type_0, int_0)
    var_0 = maybe_0.get_or_else(set_0)


def test_case_11():
    bytes_0 = b"\xd6-_\x8fB*\r"
    bytes_1 = b"\xe1\xb1M\xfa\xe6V\x8aM\xe6\xc80;"
    bool_0 = False
    maybe_0 = module_0.Maybe(bytes_1, bool_0)
    var_0 = maybe_0.get_or_else(bytes_0)
    var_0.to_try()


def test_case_12():
    none_type_0 = None
    complex_0 = 2403.847391 - 565.277279j
    bytes_0 = b"\x16\xea\x0e\xe3e\x1f\x88<\x1b\xd29\xc3\x8f"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.map(var_0)
    var_2 = maybe_0.filter(complex_0)
    var_3 = var_2.ap(none_type_0)
    var_4 = var_3.to_either()
    var_4.to_either()


def test_case_13():
    dict_0 = {}
    none_type_0 = None
    maybe_0 = module_0.Maybe(dict_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.to_either()
    var_2 = maybe_0.to_validation()
    var_3 = var_2.to_lazy()
    int_0 = 1
    var_4 = maybe_0.get_or_else(none_type_0)
    var_3.get_or_else(int_0)


def test_case_14():
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_0, none_type_0)
    var_0 = maybe_0.to_box()


def test_case_15():
    float_0 = -4648.33798
    bool_0 = True
    maybe_0 = module_0.Maybe(float_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_either()
    var_2 = maybe_0.get_or_else(var_0)
    var_3 = var_2.bind(var_1)
    var_4 = var_0.to_box()


def test_case_16():
    bool_0 = False
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_either()
    var_1.bind(bool_0)


def test_case_17():
    str_0 = "p"
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_try()
    var_0.to_either()


def test_case_18():
    bool_0 = False
    str_0 = "\\"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    bool_1 = maybe_0.__eq__(bool_0)
    var_1 = maybe_0.ap(bool_0)
    maybe_1 = module_0.Maybe(var_0, var_0)
    var_2 = var_0.filter(var_1)
    var_3 = var_1.to_validation()
    maybe_2 = module_0.Maybe(var_0, bool_0)
    bytes_0 = b"$\xe8\xcaY\x04\xf5`\xa1v&\xd7\x9a]\xdb"
    maybe_3 = module_0.Maybe(maybe_2, bytes_0)
    maybe_2.filter(bool_0)


def test_case_19():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_1.to_validation()
    maybe_1.filter(var_0)


def test_case_20():
    int_0 = -1977
    tuple_0 = (int_0,)
    bool_0 = False
    maybe_0 = module_0.Maybe(tuple_0, bool_0)
    maybe_0.bind(int_0)


def test_case_21():
    str_0 = ",I1E_"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.to_either()
    var_2 = maybe_0.filter(var_1)
    bool_0 = maybe_0.__eq__(var_2)
    var_3 = var_2.to_lazy()
    var_4 = var_2.to_validation()
    var_4.to_validation()


def test_case_22():
    float_0 = -94.53513
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(float_0, bool_0)
    var_0 = maybe_0.map(none_type_0)
    var_1 = var_0.to_validation()
    var_2 = var_1.to_try()
    bytes_0 = b"J\x96\xbba'\xc9\x1f\xbd\xf0\xb7A\xe3\x03v*"
    bool_1 = var_0.__eq__(maybe_0)
    maybe_1 = module_0.Maybe(float_0, bytes_0)
    none_type_1 = None
    var_3 = maybe_1.to_lazy()
    var_4 = maybe_1.filter(var_3)
    none_type_2 = None
    bool_2 = bytes_0.__eq__(none_type_1)
    maybe_2 = module_0.Maybe(var_1, none_type_2)
    var_5 = var_4.filter(float_0)
    var_6 = maybe_2.to_either()
    var_7 = var_6.to_lazy()
    var_8 = var_7.to_validation()
    var_9 = var_7.to_validation()
    var_10 = maybe_1.map(var_1)
    var_11 = maybe_0.to_either()
    maybe_3 = module_0.Maybe(none_type_0, var_10)
    var_12 = maybe_0.to_either()
    maybe_4 = module_0.Maybe(bytes_0, var_6)
    var_13 = maybe_0.filter(var_6)
    bool_3 = var_11.__eq__(var_7)
    bool_4 = True
    maybe_5 = module_0.Maybe(maybe_4, bool_4)
    var_11.get_or_else(var_9)


def test_case_23():
    none_type_0 = None
    bool_0 = True
    str_0 = "}LVtAe6e25\t}\\a"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.ap(none_type_0)
    var_1 = maybe_0.filter(var_0)
    var_2 = maybe_0.get_or_else(maybe_0)
    var_3 = var_2.ap(var_2)
    bool_1 = maybe_0.__eq__(bool_0)
    var_4 = maybe_0.to_try()
    var_5 = var_1.map(maybe_0)
    var_6 = maybe_0.ap(bool_0)
    var_7 = var_0.to_lazy()
    var_8 = var_0.to_box()
    int_0 = -1235
    var_9 = var_4.bind(int_0)
    var_10 = var_6.to_try()
    bool_2 = False
    maybe_1 = module_0.Maybe(none_type_0, bool_2)
    maybe_2 = module_0.Maybe(bool_1, bool_2)
    var_11 = var_4.get_or_else(none_type_0)
    var_12 = var_4.filter(var_4)
    bool_3 = maybe_2.__eq__(maybe_2)
    bool_4 = var_6.__eq__(var_9)
    var_4.to_box()
