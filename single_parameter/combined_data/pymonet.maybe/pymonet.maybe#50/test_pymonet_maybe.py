# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1


def test_case_0():
    bytes_0 = b"Y\x92-\xd5h\xfa\xbb\xb4c\x08P\x84|"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    float_0 = -1073.7
    bool_0 = False
    maybe_0 = module_0.Maybe(float_0, bool_0)
    bool_1 = maybe_0.__eq__(bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = var_0.to_box()
    var_2 = maybe_0.get_or_else(bool_0)
    var_1.filter(var_0)


def test_case_3():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    none_type_0 = None
    var_0 = maybe_0.filter(none_type_0)
    bool_1 = var_0.__eq__(var_0)
    var_1 = maybe_0.to_validation()
    none_type_1 = None
    var_2 = maybe_0.map(none_type_1)


def test_case_4():
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.map(bool_0)


def test_case_5():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    generic_0 = module_1.Generic()
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.ap(generic_0)
    var_2 = maybe_0.to_validation()
    bool_1 = False
    var_3 = maybe_0.to_lazy()
    var_4 = var_2.to_box()
    var_5 = maybe_0.bind(bool_1)
    var_2.get_or_else(generic_0)


def test_case_6():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_validation()
    maybe_0.bind(none_type_0)


def test_case_7():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bytes_0 = b"\x12\x9a2\x07|\xa7\xbd\xc94"
    var_0 = maybe_0.ap(bytes_0)
    var_1 = maybe_0.to_validation()
    var_2 = maybe_0.to_either()
    var_3 = maybe_0.filter(var_1)
    bool_1 = var_2.__eq__(bool_0)
    bytes_0.to_either()


def test_case_8():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.ap(none_type_0)
    var_1 = var_0.ap(none_type_0)
    var_2 = var_1.to_validation()
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1.ap(none_type_0)


def test_case_9():
    bytes_0 = b".\x98\x99-\xcb\x13\xc9\x0f\xac\xedW\x03\xe3\x98\x92\x07\x12"
    int_0 = 1
    bool_0 = False
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.to_validation()
    maybe_0.filter(bytes_0)


def test_case_10():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    complex_0 = 399 + 193.059108j
    set_0 = {complex_0, complex_0}
    maybe_0 = module_0.Maybe(set_0, complex_0)
    var_0 = maybe_0.get_or_else(list_0)


def test_case_11():
    float_0 = -2545.8
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.get_or_else(bool_0)
    var_0.filter(float_0)


def test_case_12():
    tuple_0 = ()
    maybe_0 = module_0.Maybe(tuple_0, tuple_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_validation()
    maybe_0.map(var_0)


def test_case_13():
    str_0 = "\n        :param semigroup: other semigroup to concat\n        :type semigroup: First[B]\n        :returns: new First with first value\n        :rtype: First[A]\n        "
    bool_0 = False
    bool_1 = False
    maybe_0 = module_0.Maybe(str_0, bool_1)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_lazy()
    maybe_1 = module_0.Maybe(bool_0, str_0)
    var_2 = maybe_1.to_validation()
    var_2.filter(var_1)


def test_case_14():
    bytes_0 = b"\x0b\x18\n\xb2_\x1a\x8f\xf9\xbbV\xcfbZ\xc7\xcd\x168!"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_lazy()


def test_case_15():
    bytes_0 = b""
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_lazy()


def test_case_16():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_try()


def test_case_17():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.get_or_else(maybe_0)
    maybe_0.filter(none_type_0)


def test_case_18():
    complex_0 = -373.092 - 2256j
    maybe_0 = module_0.Maybe(complex_0, complex_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_box()
    var_2 = var_1.to_either()
    var_3 = var_2.to_try()
    var_3.to_box()


def test_case_19():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    float_0 = -397.735
    var_0 = maybe_0.ap(float_0)
    var_1 = maybe_0.filter(var_0)
    bool_1 = var_1.__eq__(bool_0)
    var_2 = maybe_0.bind(var_0)
    maybe_1 = module_0.Maybe(bool_1, var_0)
    var_3 = var_0.to_either()
    var_4 = var_3.bind(var_0)
    bool_2 = var_3.__eq__(var_1)
    var_5 = var_4.to_box()
    bool_3 = False
    maybe_2 = module_0.Maybe(var_0, bool_3)
    bool_4 = maybe_2.__eq__(maybe_1)
    var_6 = maybe_1.map(maybe_1)
    bool_5 = False
    var_7 = var_6.filter(bool_5)
    var_8 = var_1.get_or_else(var_3)


def test_case_20():
    bool_0 = False
    set_0 = set()
    maybe_0 = module_0.Maybe(set_0, set_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_either()
    var_1.filter(bool_0)


def test_case_21():
    float_0 = -1073.7
    bool_0 = False
    maybe_0 = module_0.Maybe(float_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    bool_2 = maybe_0.__eq__(bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = var_0.to_box()
    var_2 = maybe_0.get_or_else(bool_0)
    var_1.filter(var_0)
