# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    str_0 = ",4s1pp!mi-#>"
    maybe_0 = module_0.Maybe(str_0, str_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = True
    maybe_2 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = False
    var_0 = maybe_2.ap(bool_1)
    bool_2 = var_0.__eq__(none_type_0)
    var_1 = maybe_1.to_try()
    bool_3 = maybe_1.__eq__(var_0)
    var_2 = var_0.get_or_else(var_0)
    var_3 = maybe_2.to_lazy()
    var_4 = var_0.ap(bool_2)
    var_1.to_validation()


def test_case_3():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    none_type_0 = None
    tuple_0 = ()
    bool_1 = maybe_0.__eq__(tuple_0)
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_box()
    none_type_1 = None
    var_1 = maybe_0.get_or_else(none_type_1)
    var_2 = maybe_0.to_lazy()
    var_3 = var_2.to_box()
    var_4 = var_2.to_box()
    var_5 = maybe_0.to_either()


def test_case_4():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = True
    maybe_2 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = False
    var_0 = maybe_2.ap(bool_1)
    bool_2 = var_0.__eq__(none_type_0)
    var_1 = maybe_1.to_try()
    bool_3 = maybe_1.__eq__(var_0)
    var_2 = var_0.get_or_else(var_0)
    var_3 = maybe_2.to_lazy()
    var_4 = var_3.ap(var_0)
    var_5 = maybe_2.map(var_0)


def test_case_5():
    bool_0 = True
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_box()
    maybe_0.map(var_0)


def test_case_6():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_lazy()
    var_2 = var_1.to_either()
    var_3 = maybe_0.to_either()
    var_4 = maybe_0.bind(maybe_0)
    var_5 = maybe_0.to_either()
    var_6 = var_5.to_box()
    var_7 = var_4.to_box()
    var_8 = var_4.bind(var_3)
    var_9 = var_8.map(var_1)
    var_10 = maybe_0.to_box()
    var_11 = var_10.to_lazy()
    var_12 = var_4.map(var_10)
    var_6.get_or_else(var_2)


def test_case_7():
    bool_0 = True
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_try()
    maybe_0.bind(var_0)


def test_case_8():
    bool_0 = True
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.ap(maybe_0)
    var_1 = var_0.to_try()
    var_2 = maybe_0.filter(var_1)
    var_3 = maybe_0.to_either()
    bool_2 = var_3.__eq__(var_1)
    var_4 = var_3.ap(var_3)
    var_1.to_box()


def test_case_9():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = True
    maybe_2 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = False
    var_0 = maybe_2.ap(bool_1)
    bool_2 = var_0.__eq__(none_type_0)
    var_1 = maybe_1.to_try()
    bool_3 = maybe_1.__eq__(var_0)
    var_2 = var_0.get_or_else(var_0)
    var_3 = maybe_2.to_lazy()
    var_4 = maybe_0.ap(var_3)
    var_5 = maybe_0.to_lazy()
    var_6 = var_5.to_validation()


def test_case_10():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.filter(none_type_0)


def test_case_11():
    int_0 = -1126
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.to_validation()
    var_1 = var_0.to_lazy()
    var_2 = var_0.to_lazy()
    var_3 = var_2.to_either()
    var_4 = maybe_0.get_or_else(var_0)
    var_5 = var_2.map(var_2)
    var_6 = var_2.map(var_2)
    var_3.filter(var_3)


def test_case_12():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_lazy()
    none_type_0 = None
    tuple_0 = ()
    maybe_1 = module_0.Maybe(tuple_0, tuple_0)
    var_1 = maybe_1.get_or_else(none_type_0)
    var_1.get_or_else(none_type_0)


def test_case_13():
    str_0 = "GW~@OX]h&O_L5"
    float_0 = 302.941656
    maybe_0 = module_0.Maybe(float_0, float_0)
    var_0 = maybe_0.to_either()
    var_0.get_or_else(str_0)


def test_case_14():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_either()
    maybe_0.filter(var_0)


def test_case_15():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.to_try()
    var_2 = var_0.to_either()
    var_2.filter(var_0)


def test_case_16():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_either()


def test_case_17():
    list_0 = []
    bool_0 = True
    maybe_0 = module_0.Maybe(list_0, bool_0)
    var_0 = maybe_0.to_try()


def test_case_18():
    list_0 = []
    bool_0 = False
    maybe_0 = module_0.Maybe(list_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_0.get_or_else(list_0)


def test_case_19():
    str_0 = "\\S["
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, str_0)
    var_0 = maybe_0.to_validation()
    bool_1 = maybe_0.__eq__(maybe_0)
    var_1 = maybe_0.map(var_0)
    var_2 = var_0.to_box()
    var_3 = maybe_0.map(var_0)
    var_4 = maybe_0.to_box()
    bool_2 = var_0.__eq__(var_0)
    var_5 = var_4.to_validation()
    var_6 = maybe_0.to_try()
    var_7 = var_2.to_try()
    var_8 = var_4.ap(maybe_0)
    var_9 = var_1.to_either()
    var_10 = var_2.to_try()
    var_11 = var_3.filter(var_4)
    var_6.to_either()


def test_case_20():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_1.to_box()
    bool_0 = True
    maybe_2 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = False
    var_1 = maybe_2.ap(bool_1)
    bool_2 = var_1.__eq__(none_type_0)
    var_2 = maybe_1.to_try()
    bool_3 = maybe_0.__eq__(maybe_0)
    bool_4 = maybe_1.__eq__(var_1)
    maybe_1.bind(var_1)
