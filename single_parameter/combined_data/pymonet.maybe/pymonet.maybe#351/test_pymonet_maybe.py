# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    int_0 = -764
    none_type_0 = None
    bool_0 = True
    dict_0 = {none_type_0: int_0}
    maybe_0 = module_0.Maybe(int_0, dict_0)
    var_0 = maybe_0.get_or_else(none_type_0)
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    var_1 = maybe_1.bind(int_0)
    var_2 = maybe_1.to_validation()
    bool_1 = var_1.__eq__(maybe_1)


def test_case_3():
    bytes_0 = b"\xa9\xaa\xac3\x98\xf9$T\x82h\tE\xeeOM"
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    list_0 = [maybe_0, bytes_0]
    tuple_0 = (list_0, list_0)
    bool_1 = maybe_0.__eq__(tuple_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    var_1 = maybe_0.to_box()
    var_2 = maybe_0.ap(var_0)
    var_3 = var_0.bind(var_0)
    bool_2 = var_3.__eq__(var_2)
    maybe_1 = module_0.Maybe(bool_0, var_1)


def test_case_4():
    int_0 = -241
    none_type_0 = None
    str_0 = "D"
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.ap(none_type_0)
    var_1 = var_0.map(int_0)
    var_2 = var_1.to_try()
    var_2.to_try()


def test_case_5():
    float_0 = 3248.60999
    bool_0 = False
    maybe_0 = module_0.Maybe(float_0, bool_0)
    var_0 = maybe_0.to_validation()
    maybe_0.ap(maybe_0)


def test_case_6():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_0.bind(bool_0)


def test_case_7():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.filter(var_0)
    var_2 = var_1.to_either()
    var_3 = var_2.ap(var_0)
    var_4 = var_1.filter(var_0)


def test_case_8():
    bytes_0 = b"\xf1x,\xf6\x94qd\x94\xab8\xfdg\xd6\xf6\xac\xcc7\x12"
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.filter(bytes_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(maybe_0, none_type_0)
    maybe_1.filter(maybe_0)


def test_case_9():
    bytes_0 = b"\x96t\\\xc4\xf7\x8f\xd5"
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.to_box()
    bool_1 = False
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_1 = maybe_1.get_or_else(bool_1)
    var_1.bind(var_0)


def test_case_10():
    set_0 = set()
    int_0 = 1
    maybe_0 = module_0.Maybe(int_0, set_0)
    var_0 = maybe_0.to_either()
    var_0.ap(maybe_0)


def test_case_11():
    list_0 = []
    maybe_0 = module_0.Maybe(list_0, list_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_try()
    var_0.to_box()


def test_case_12():
    bool_0 = True
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_lazy()
    var_0.to_lazy()


def test_case_13():
    str_0 = "\n        Take function and applied this function with monad value and returns new monad with mapped value.\n\n        :params mapper: function to apply on monad value\n        :type mapper: Function(A) -> B\n        :returns: for successfully new Try with mapped value, othercase copy of self\n        :rtype: Try[B]\n        "
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    bool_0 = False
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    var_1 = maybe_1.to_lazy()
    var_2 = maybe_1.get_or_else(str_0)
    var_3 = maybe_1.to_validation()
    bool_1 = var_3.__eq__(var_3)
    var_4 = var_3.to_either()
    var_5 = var_3.to_try()
    var_5.filter(var_1)


def test_case_14():
    set_0 = set()
    int_0 = -2486
    maybe_0 = module_0.Maybe(set_0, int_0)
    var_0 = maybe_0.to_try()
    var_0.to_try()


def test_case_15():
    str_0 = "BY6{T?qB)~&\\*d=XT"
    bool_0 = True
    bool_1 = False
    maybe_0 = module_0.Maybe(str_0, bool_1)
    var_0 = maybe_0.to_try()
    maybe_1 = module_0.Maybe(var_0, bool_0)
    var_1 = maybe_1.map(var_0)
    var_2 = var_1.filter(str_0)
    var_3 = maybe_1.ap(var_0)
    maybe_2 = module_0.Maybe(var_3, bool_0)
    none_type_0 = None
    maybe_3 = module_0.Maybe(none_type_0, str_0)
    maybe_4 = module_0.Maybe(var_3, str_0)
    var_4 = maybe_4.to_either()
    var_5 = var_1.map(var_0)
    maybe_0.filter(var_3)


def test_case_16():
    bool_0 = False
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.to_either()
    var_2 = var_0.to_either()
    var_3 = var_2.to_try()
    var_3.to_box()


def test_case_17():
    complex_0 = -5980.70938 - 3370j
    none_type_0 = None
    maybe_0 = module_0.Maybe(complex_0, complex_0)
    var_0 = maybe_0.filter(complex_0)
    bool_0 = True
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    var_1 = maybe_1.to_box()
    bool_1 = var_1.__eq__(maybe_0)
    var_2 = maybe_0.get_or_else(var_1)
    maybe_2 = module_0.Maybe(var_1, complex_0)
    var_3 = var_0.ap(bool_1)
    var_4 = var_0.ap(maybe_2)
    var_5 = maybe_2.to_validation()
    var_6 = var_3.to_box()
    bool_2 = maybe_2.__eq__(var_3)


def test_case_18():
    str_0 = "\n        Take function and applied this function with monad value and returns new monad with mapped value.\n\n        :params mapper: function to apply on monad value\n        :type mapper: Function(A) -> B\n        :returns: for successfully new Try with mapped value, othercase copy of self\n        :rtype: Try[B]\n        "
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_1.to_lazy()
    bool_1 = False
    maybe_2 = module_0.Maybe(none_type_0, bool_1)
    var_1 = var_0.to_box()
    var_2 = maybe_2.to_lazy()
    var_3 = maybe_2.get_or_else(str_0)
    var_4 = maybe_2.to_validation()
    bool_2 = var_4.__eq__(var_4)
    var_5 = var_4.to_either()
    var_6 = var_4.to_try()
    var_6.filter(var_2)


def test_case_19():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_box()
    bool_1 = var_0.__eq__(maybe_0)
    var_0.ap(bool_1)
