# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1
import builtins as module_2


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    int_0 = -601
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.get_or_else(int_0)
    var_1 = maybe_0.filter(int_0)
    var_2 = var_1.to_try()
    maybe_1 = module_0.Maybe(bool_0, var_2)
    bool_1 = var_1.__eq__(maybe_1)
    bool_2 = False
    var_3 = maybe_0.map(var_2)
    bool_3 = maybe_0.__eq__(bool_2)
    maybe_2 = module_0.Maybe(int_0, bool_2)
    var_4 = maybe_2.to_validation()
    var_5 = maybe_2.to_validation()
    maybe_3 = module_0.Maybe(var_5, maybe_2)
    var_6 = maybe_2.to_either()
    var_7 = var_4.to_lazy()
    var_8 = var_7.to_validation()
    var_9 = var_4.to_try()
    var_10 = var_1.to_lazy()


def test_case_3():
    dict_0 = {}
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    var_1 = maybe_0.map(var_0)
    var_2 = maybe_0.to_lazy()
    var_3 = maybe_0.bind(dict_0)


def test_case_4():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    maybe_0.map(var_0)


def test_case_5():
    float_0 = 1663.533
    str_0 = "Maybe[T]"
    list_0 = [str_0]
    maybe_0 = module_0.Maybe(list_0, str_0)
    var_0 = maybe_0.bind(float_0)
    var_1 = var_0.to_try()


def test_case_6():
    bytes_0 = b"\xb9x\xdeO\x03\xbf\x0b\x1d\x91K"
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_either()
    none_type_1 = None
    maybe_1 = module_0.Maybe(none_type_1, none_type_1)
    var_1 = maybe_1.to_either()
    var_2 = var_1.to_lazy()
    var_3 = var_2.to_try()
    maybe_2 = module_0.Maybe(bytes_0, none_type_1)
    var_4 = maybe_2.to_lazy()
    maybe_3 = module_0.Maybe(bytes_0, bytes_0)
    maybe_2.bind(var_4)


def test_case_7():
    none_type_0 = None
    bool_0 = True
    bool_1 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_1)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.ap(bool_1)
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    var_2 = maybe_1.to_validation()
    var_2.get_or_else(var_2)


def test_case_8():
    generic_0 = module_1.Generic()
    str_0 = "[#~35a2+SSS(tXnB|o"
    bytes_0 = b""
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    maybe_0.ap(str_0)


def test_case_9():
    int_0 = -625
    str_0 = "PY\x0ciWG]C~&%"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.filter(int_0)
    var_1 = var_0.to_try()
    var_1.to_either()


def test_case_10():
    bool_0 = False
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_1, bool_1)
    var_0 = maybe_0.to_validation()
    var_1 = var_0.to_box()
    maybe_1 = module_0.Maybe(bool_0, bool_1)
    maybe_1.filter(var_1)


def test_case_11():
    bytes_0 = b"\x877\x8e\xa5_\xe6\xc8"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_either()


def test_case_12():
    none_type_0 = None
    bool_0 = False
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_validation()
    var_1.ap(none_type_0)


def test_case_13():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.to_lazy()


def test_case_14():
    object_0 = module_2.object()
    set_0 = {object_0, object_0}
    bool_0 = False
    maybe_0 = module_0.Maybe(set_0, bool_0)
    var_0 = maybe_0.to_try()
    var_0.map(set_0)


def test_case_15():
    list_0 = []
    str_0 = ":wc#"
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_validation()
    maybe_1 = module_0.Maybe(str_0, none_type_0)
    maybe_1.map(list_0)


def test_case_16():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = True
    maybe_1 = module_0.Maybe(bool_1, bool_1)
    var_0 = maybe_1.to_lazy()
    var_1 = var_0.map(maybe_0)
    var_1.to_validation()


def test_case_17():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.to_either()
    var_2 = maybe_0.to_lazy()
    var_3 = maybe_0.to_try()
    bool_0 = False
    maybe_1 = module_0.Maybe(maybe_0, bool_0)
    var_4 = var_2.to_either()
    var_5 = var_4.to_validation()
    var_6 = var_2.bind(maybe_0)
    complex_0 = 799.9 - 1116.3665j
    var_7 = var_0.to_either()
    var_8 = var_2.bind(complex_0)
    var_4.map(var_4)


def test_case_18():
    int_0 = -601
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.filter(int_0)
    var_1 = var_0.to_try()
    maybe_1 = module_0.Maybe(bool_0, var_1)
    bool_1 = var_0.__eq__(maybe_1)
    bool_2 = True
    var_2 = maybe_0.map(var_1)
    maybe_2 = module_0.Maybe(int_0, bool_2)
    var_3 = var_2.to_either()
    var_4 = maybe_2.to_validation()
    var_5 = var_3.bind(var_4)
    var_6 = var_5.to_try()
    var_5.to_either()


def test_case_19():
    int_0 = -601
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.get_or_else(int_0)
    var_1 = maybe_0.filter(int_0)
    var_2 = var_1.to_try()
    maybe_1 = module_0.Maybe(bool_0, var_2)
    bool_1 = var_1.__eq__(maybe_1)
    var_3 = maybe_0.map(var_2)
    bool_2 = maybe_0.__eq__(maybe_0)
    maybe_2 = module_0.Maybe(int_0, bool_0)
    var_4 = maybe_2.to_validation()
    var_5 = maybe_2.to_validation()
    maybe_3 = module_0.Maybe(var_5, maybe_2)
    var_6 = var_1.to_lazy()
    var_7 = var_4.to_lazy()
    var_8 = maybe_0.to_validation()
    var_9 = maybe_3.to_validation()
    var_10 = maybe_2.bind(var_2)


def test_case_20():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.to_lazy()
    bool_0 = maybe_0.__eq__(maybe_0)
    var_1.get_or_else(none_type_0)
