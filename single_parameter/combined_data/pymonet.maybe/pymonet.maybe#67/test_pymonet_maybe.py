# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import builtins as module_1


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    object_0 = module_1.object()
    maybe_0 = module_0.Maybe(object_0, object_0)
    var_0 = maybe_0.to_either()
    maybe_1 = module_0.Maybe(var_0, var_0)
    var_1 = maybe_0.filter(var_0)
    var_2 = maybe_0.to_box()
    bool_0 = maybe_1.__eq__(maybe_0)
    var_3 = var_0.to_lazy()
    var_4 = maybe_0.get_or_else(object_0)
    var_4.to_lazy()


def test_case_3():
    none_type_0 = None
    str_0 = "p`q~<"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.ap(none_type_0)
    var_1 = var_0.to_lazy()
    var_2 = var_0.map(str_0)
    bool_0 = var_2.__eq__(var_1)
    var_3 = var_0.to_either()
    var_1.filter(var_3)


def test_case_4():
    none_type_0 = None
    complex_0 = -3247.744202 + 1108.4j
    maybe_0 = module_0.Maybe(complex_0, none_type_0)
    var_0 = maybe_0.to_try()
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1.map(var_0)


def test_case_5():
    object_0 = module_1.object()
    maybe_0 = module_0.Maybe(object_0, object_0)
    var_0 = maybe_0.to_either()
    none_type_0 = None
    var_1 = maybe_0.filter(var_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_2 = maybe_0.to_box()
    var_3 = maybe_0.map(var_2)
    var_4 = var_1.filter(none_type_0)
    bool_1 = var_1.__eq__(var_3)
    var_5 = maybe_0.to_box()
    var_6 = var_4.to_try()
    var_7 = maybe_0.to_try()
    var_8 = maybe_0.to_box()
    var_9 = var_2.to_lazy()
    var_10 = var_3.bind(var_9)


def test_case_6():
    str_0 = "Q6mN#I"
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    maybe_0.bind(str_0)


def test_case_7():
    none_type_0 = None
    str_0 = "p`q~<"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.ap(none_type_0)
    var_1 = var_0.to_lazy()
    var_2 = var_1.to_box()
    var_3 = var_2.to_lazy()
    var_3.to_lazy()


def test_case_8():
    list_0 = []
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.ap(list_0)


def test_case_9():
    str_0 = "hu"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.get_or_else(str_0)
    var_1 = maybe_0.filter(var_0)
    var_0.to_box()


def test_case_10():
    str_0 = "\x0c4Kk\nu\x0bf"
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_0.filter(str_0)


def test_case_11():
    none_type_0 = None
    dict_0 = {}
    maybe_0 = module_0.Maybe(dict_0, dict_0)
    var_0 = maybe_0.get_or_else(none_type_0)


def test_case_12():
    int_0 = 9
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_try()
    var_1.to_box()


def test_case_13():
    int_0 = -2488
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_box()
    var_2 = var_1.to_lazy()
    var_3 = var_2.to_validation()
    var_3.map(int_0)


def test_case_14():
    str_0 = "\x0c4Kk\nu\x0bf"
    bool_0 = False
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.filter(str_0)
    var_1 = var_0.to_box()


def test_case_15():
    bytes_0 = b"\x05\x92\x05\xcbY\xbd\x1c\x1f~{3#\x99\x1d"
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.to_box()
    maybe_1 = module_0.Maybe(var_0, maybe_0)
    maybe_2 = module_0.Maybe(bool_0, maybe_1)
    maybe_0.map(bytes_0)


def test_case_16():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_validation()
    var_2 = var_0.to_box()
    var_3 = maybe_0.to_either()
    var_4 = var_3.to_try()
    tuple_0 = (var_1,)
    var_1.ap(tuple_0)


def test_case_17():
    object_0 = module_1.object()
    maybe_0 = module_0.Maybe(object_0, object_0)
    var_0 = maybe_0.to_either()
    maybe_1 = module_0.Maybe(var_0, var_0)
    var_1 = maybe_0.filter(var_0)
    bool_0 = maybe_1.__eq__(var_1)
    var_2 = maybe_0.to_either()
    var_3 = maybe_0.to_lazy()
    var_4 = maybe_0.to_lazy()
    var_5 = var_1.get_or_else(var_4)
    var_6 = maybe_1.to_box()
    var_7 = maybe_1.to_try()


def test_case_18():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_try()


def test_case_19():
    bool_0 = False
    str_0 = "\n        Returns new ImmutableList with only this elements that passed\n        info argument returns True\n\n        :param fn: function to call with ImmutableList value\n        :type fn: Function(A) -> bool\n        :returns: ImmutableList[A]\n        "
    bool_1 = True
    maybe_0 = module_0.Maybe(str_0, bool_1)
    var_0 = maybe_0.to_validation()
    var_0.bind(bool_0)


def test_case_20():
    int_0 = -1082
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_validation()
    bool_0 = var_0.__eq__(int_0)
    var_1 = maybe_0.to_try()
    var_2 = var_1.get_or_else(maybe_0)
    var_2.to_try()


def test_case_21():
    object_0 = module_1.object()
    maybe_0 = module_0.Maybe(object_0, object_0)
    var_0 = maybe_0.get_or_else(object_0)
    maybe_1 = module_0.Maybe(var_0, var_0)
    var_1 = maybe_0.filter(var_0)
    var_2 = maybe_0.to_box()
    bool_0 = maybe_1.__eq__(maybe_0)
    var_0.to_lazy()
