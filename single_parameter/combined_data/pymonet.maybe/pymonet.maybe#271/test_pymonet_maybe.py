# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = maybe_0.__eq__(maybe_1)
    maybe_0.filter(none_type_0)


def test_case_3():
    bytes_0 = b"\x06nF\xc4\xf8\xc76\n\x9a\x8f\xc0\xba/\xf3k\xbd"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_either()
    bool_0 = maybe_0.__eq__(bytes_0)
    bool_1 = maybe_0.__eq__(bytes_0)
    bool_2 = True
    maybe_1 = module_0.Maybe(bool_1, bool_2)


def test_case_4():
    none_type_0 = None
    set_0 = {none_type_0}
    maybe_0 = module_0.Maybe(none_type_0, set_0)
    var_0 = maybe_0.map(none_type_0)
    var_1 = var_0.filter(none_type_0)
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1.filter(none_type_0)


def test_case_5():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.to_box()
    maybe_0.map(var_1)


def test_case_6():
    str_0 = "\n        :param semigroup: other semigroup to concat\n        :type semigroup: All[B]\n        :returns: new All with last truly value or first falsy\n        :rtype: All[A | B]\n        "
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_validation()
    var_2 = maybe_0.to_lazy()
    var_3 = var_2.to_either()
    bool_0 = var_3.__eq__(str_0)
    var_4 = maybe_0.bind(var_2)


def test_case_7():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = True
    maybe_0.bind(bool_1)


def test_case_8():
    bytes_0 = b"@\x84\x1f\xf0\xc2"
    bool_0 = True
    bool_1 = False
    bool_2 = True
    maybe_0 = module_0.Maybe(bool_1, bool_2)
    var_0 = maybe_0.ap(bool_0)
    var_1 = var_0.to_validation()
    var_2 = var_1.to_either()
    var_2.get_or_else(bytes_0)


def test_case_9():
    bool_0 = True
    none_type_0 = None
    none_type_1 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_1)
    bool_1 = maybe_0.__eq__(maybe_0)
    maybe_0.ap(bool_0)


def test_case_10():
    none_type_0 = None
    set_0 = {none_type_0}
    maybe_0 = module_0.Maybe(none_type_0, set_0)
    var_0 = maybe_0.filter(none_type_0)
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1.filter(none_type_0)


def test_case_11():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.filter(none_type_0)


def test_case_12():
    float_0 = -2126.9776
    tuple_0 = (float_0,)
    complex_0 = 1960.184 + 1481j
    tuple_1 = (tuple_0, complex_0)
    bytes_0 = b";\xbe\xf0\xc0\xe6)!\xcb~X\xd9\xe6.\xe3E\x8cN\xdc"
    none_type_0 = None
    bytes_1 = b"\x97\xf37C\x8fIe\x94[&\x90v\xa0'T\x9c\x867"
    maybe_0 = module_0.Maybe(none_type_0, bytes_1)
    var_0 = maybe_0.filter(maybe_0)
    var_1 = var_0.get_or_else(bytes_0)
    var_1.get_or_else(tuple_1)


def test_case_13():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    maybe_1 = maybe_0.get_or_else(bool_0)
    var_0 = maybe_0.to_lazy()
    maybe_0.filter(var_0)


def test_case_14():
    bytes_0 = b";\xbe\xf0\xc0\xe6)!\xcb~X\xd9\xe6.\xe3E\x8cN\xdc"
    none_type_0 = None
    bytes_1 = b"\x97\xf37C\x8fIe\x94[&\x90v\xa0'T\x9c\x867"
    maybe_0 = module_0.Maybe(none_type_0, bytes_1)
    var_0 = maybe_0.to_either()
    var_0.get_or_else(bytes_0)


def test_case_15():
    bytes_0 = b"V)\x8e\xfe\xe8\xcbm\x9c"
    bool_0 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_try()
    maybe_1 = module_0.Maybe(var_1, bytes_0)
    var_2 = maybe_1.to_box()
    var_2.to_box()


def test_case_16():
    str_0 = "Sum"
    none_type_0 = None
    maybe_0 = module_0.Maybe(str_0, none_type_0)
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0]
    maybe_1 = module_0.Maybe(list_0, str_0)
    var_0 = maybe_1.to_lazy()


def test_case_17():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.ap(bool_0)
    maybe_1 = var_0.bind(var_0)
    var_1 = maybe_1.to_try()
    var_1.to_box()


def test_case_18():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_validation()
    var_1 = var_0.to_lazy()
    var_2 = maybe_0.to_try()
    bool_1 = var_2.__eq__(bool_0)
    bytes_0 = b"Uouf<\x8b\x17'\x01Q\xf7\x8aN,\xc4"
    maybe_0.map(bytes_0)


def test_case_19():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.to_lazy()
    var_2 = var_1.to_validation()
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_3 = maybe_1.get_or_else(none_type_0)
    var_3.get_or_else(none_type_0)


def test_case_20():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.ap(bool_0)
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_1 = maybe_1.to_try()
    var_1.to_box()


def test_case_21():
    str_0 = "$l`f+NVF=P9#;ppR0R."
    maybe_0 = module_0.Maybe(str_0, str_0)
    maybe_1 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_1.filter(str_0)
    var_1 = var_0.bind(maybe_1)
    maybe_2 = module_0.Maybe(var_1, var_1)
    var_2 = var_0.bind(var_0)
    var_3 = var_0.to_either()
    var_4 = maybe_2.filter(var_0)
    var_5 = maybe_1.get_or_else(var_4)
    var_6 = var_1.to_try()
    var_7 = var_4.to_either()
    var_8 = maybe_2.to_box()
    bool_0 = maybe_1.__eq__(maybe_2)
    int_0 = -1205
    bool_1 = maybe_2.__eq__(str_0)
    maybe_3 = module_0.Maybe(var_8, int_0)
    var_9 = maybe_3.get_or_else(var_7)
    maybe_4 = module_0.Maybe(var_9, bool_1)
    maybe_4.filter(maybe_2)
