# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    int_0 = 669
    maybe_0 = module_0.Maybe(int_0, int_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    int_0 = 669
    maybe_0 = module_0.Maybe(int_0, int_0)
    none_type_0 = None
    bool_0 = maybe_0.__eq__(none_type_0)
    var_0 = maybe_0.map(int_0)
    var_1 = maybe_0.to_box()
    bool_1 = maybe_0.__eq__(maybe_0)
    var_2 = var_0.to_lazy()
    var_3 = maybe_0.to_box()
    var_1.filter(var_3)


def test_case_3():
    int_0 = -2126
    bool_0 = False
    maybe_0 = module_0.Maybe(int_0, bool_0)
    bool_1 = maybe_0.__eq__(int_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.map(var_0)
    var_1.to_validation()


def test_case_4():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    bool_1 = True
    maybe_0 = module_0.Maybe(dict_0, bool_1)
    list_0 = [dict_0]
    var_0 = maybe_0.ap(bool_0)
    var_1 = maybe_0.get_or_else(list_0)
    var_2 = maybe_0.ap(bool_1)
    maybe_1 = module_0.Maybe(list_0, bool_0)
    var_3 = maybe_1.ap(bool_1)
    var_4 = var_0.map(var_2)


def test_case_5():
    int_0 = 0
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(int_0, bool_1)
    var_0 = maybe_1.to_validation()
    var_1 = maybe_1.to_try()
    var_2 = maybe_1.to_try()
    maybe_1.map(int_0)


def test_case_6():
    none_type_0 = None
    str_0 = "\n        Create not empty maybe.\n\n        :param mapper: value to store in Maybe\n        :type mapper: Any\n        :returns: Maybe[Any]\n        "
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.bind(none_type_0)
    none_type_1 = None
    var_1 = var_0.to_validation()
    var_2 = var_0.filter(var_1)
    var_3 = var_2.to_try()
    var_4 = maybe_0.map(var_3)
    var_5 = maybe_0.get_or_else(none_type_1)


def test_case_7():
    complex_0 = 1552.3 - 382.24j
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_0.bind(complex_0)


def test_case_8():
    bytes_0 = b"'\xe1fa\xe2"
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.ap(bytes_0)


def test_case_9():
    str_0 = 'P#"'
    maybe_0 = module_0.Maybe(str_0, str_0)
    bool_0 = False
    var_0 = maybe_0.filter(bool_0)
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    var_1 = maybe_1.to_box()
    maybe_1.filter(str_0)


def test_case_10():
    int_0 = 271
    bool_0 = False
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.to_box()
    maybe_0.filter(maybe_0)


def test_case_11():
    set_0 = set()
    maybe_0 = module_0.Maybe(set_0, set_0)
    var_0 = maybe_0.to_try()
    maybe_1 = module_0.Maybe(set_0, set_0)
    var_1 = maybe_1.get_or_else(set_0)
    none_type_0 = None
    var_2 = maybe_1.to_box()
    maybe_2 = module_0.Maybe(maybe_1, none_type_0)
    maybe_2.map(var_2)


def test_case_12():
    none_type_0 = None
    str_0 = "\n        Create not empty maybe.\n\n        :param mapper: value to store in Maybe\n        :type mapper: Any\n        :returns: Maybe[Any]\n        "
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.bind(none_type_0)
    none_type_1 = None
    var_1 = var_0.to_validation()
    var_2 = var_0.filter(var_1)
    var_3 = var_2.to_try()
    var_4 = maybe_0.map(var_3)
    bool_0 = True
    maybe_1 = module_0.Maybe(none_type_1, bool_0)
    var_5 = maybe_1.to_either()
    var_6 = maybe_0.get_or_else(none_type_1)


def test_case_13():
    bytes_0 = b'/\xbb\xa6\xc0x\xfbg\x7f"\xce\xb9@'
    bool_0 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.to_either()
    maybe_0.map(var_0)


def test_case_14():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_box()


def test_case_15():
    set_0 = set()
    list_0 = [set_0, set_0, set_0]
    int_0 = 0
    dict_0 = {int_0: int_0, int_0: int_0}
    bool_0 = False
    maybe_0 = module_0.Maybe(int_0, bool_0)
    tuple_0 = (int_0, dict_0, maybe_0, int_0)
    maybe_1 = module_0.Maybe(tuple_0, tuple_0)
    var_0 = maybe_1.to_lazy()
    var_0.get_or_else(list_0)


def test_case_16():
    bool_0 = False
    none_type_0 = None
    bool_1 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_1)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_box()
    var_1.map(bool_0)


def test_case_17():
    bytes_0 = b"\xba\xed\xc50\x8d\xe6"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.map(bytes_0)
    var_2 = var_1.to_either()
    bool_0 = maybe_0.__eq__(bytes_0)
    var_3 = var_1.to_box()
    maybe_1 = module_0.Maybe(bool_0, var_3)
    maybe_2 = module_0.Maybe(bytes_0, bytes_0)
    var_4 = maybe_2.to_validation()
    none_type_0 = None
    maybe_3 = module_0.Maybe(var_3, var_2)
    none_type_1 = None
    var_5 = var_1.filter(none_type_1)
    bool_1 = var_5.__eq__(maybe_2)
    var_6 = maybe_3.ap(none_type_0)
    bool_2 = False
    var_7 = maybe_2.filter(var_6)
    bool_2.filter(var_1)


def test_case_18():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_1.to_try()
    var_1 = var_0.map(none_type_0)
    var_1.to_validation()
