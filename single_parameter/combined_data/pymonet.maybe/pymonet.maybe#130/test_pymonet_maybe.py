# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import builtins as module_1


def test_case_0():
    str_0 = "\n        Take 2 functions call only one of then with either value and return her result.\n\n        :params error: function to call when Either is Left\n        :type error: Function(A) -> B\n        :params success: function to call when Either is Right\n        :type success: Function(A) -> B\n        :returns: result of success handler when Eihter is Right, result of error handler when Eihter is Left\n        :rtpye: B\n        "
    maybe_0 = module_0.Maybe(str_0, str_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    int_0 = 0
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.to_lazy()
    bool_0 = maybe_0.__eq__(maybe_0)


def test_case_3():
    bool_0 = True
    object_0 = module_1.object()
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_1, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = var_0.to_lazy()
    maybe_1 = module_0.Maybe(object_0, bool_1)
    var_2 = maybe_0.filter(var_1)
    var_3 = var_1.to_validation()
    bool_2 = maybe_1.__eq__(var_1)
    var_4 = maybe_1.filter(bool_1)
    var_5 = maybe_0.map(bool_0)
    var_6 = var_4.map(var_4)
    var_3.get_or_else(var_3)


def test_case_4():
    set_0 = set()
    int_0 = 660
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.map(set_0)
    var_1 = var_0.to_lazy()
    var_2 = var_1.to_box()
    var_3 = var_2.to_validation()
    var_3.to_validation()


def test_case_5():
    bool_0 = False
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.to_box()
    maybe_0.map(var_1)


def test_case_6():
    bool_0 = False
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    bytes_0 = b"]\xc1F\x91;y\x92"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    maybe_1 = module_0.Maybe(dict_0, bytes_0)
    var_0 = maybe_1.bind(bool_0)
    var_1 = var_0.to_either()
    var_2 = maybe_1.filter(var_1)
    var_3 = var_2.filter(var_1)
    var_4 = var_3.bind(var_1)
    var_5 = var_0.filter(var_1)


def test_case_7():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.get_or_else(var_0)
    var_2 = maybe_0.to_lazy()
    maybe_0.bind(none_type_0)


def test_case_8():
    float_0 = -2017.8
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(float_0, bool_1)
    int_0 = -65
    str_0 = "/LR\r|mAyT-x;,M"
    maybe_2 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_2.to_lazy()
    var_1 = maybe_2.ap(int_0)


def test_case_9():
    list_0 = []
    maybe_0 = module_0.Maybe(list_0, list_0)
    var_0 = maybe_0.to_either()
    bool_0 = False
    maybe_1 = module_0.Maybe(list_0, bool_0)
    var_1 = maybe_1.to_try()
    maybe_1.ap(maybe_1)


def test_case_10():
    str_0 = "3QK^r&"
    set_0 = set()
    maybe_0 = module_0.Maybe(set_0, set_0)
    maybe_0.filter(str_0)


def test_case_11():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    none_type_0 = None
    bool_1 = True
    bool_2 = True
    maybe_1 = module_0.Maybe(bool_1, bool_2)
    var_0 = maybe_1.get_or_else(none_type_0)
    var_0.filter(maybe_0)


def test_case_12():
    tuple_0 = ()
    maybe_0 = module_0.Maybe(tuple_0, tuple_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.to_either()
    var_0.to_either()


def test_case_13():
    bytes_0 = b"\xcf/{\xf4b\x17\x9c\xf0`\xb6p\xa6\xd9\xba"
    dict_0 = {bytes_0: bytes_0}
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_0, dict_0)
    none_type_0 = None
    var_0 = maybe_0.to_box()
    maybe_1 = module_0.Maybe(bool_0, none_type_0)
    var_1 = maybe_0.filter(dict_0)
    maybe_1.filter(none_type_0)


def test_case_14():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()


def test_case_15():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_try()
    bool_1 = False
    maybe_1 = module_0.Maybe(bool_1, bool_1)


def test_case_16():
    bool_0 = True
    object_0 = module_1.object()
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_1, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = var_0.to_lazy()
    maybe_1 = module_0.Maybe(object_0, bool_1)
    var_2 = maybe_1.to_validation()
    var_3 = maybe_1.to_try()
    var_4 = var_3.get_or_else(bool_0)
    var_5 = maybe_1.ap(bool_1)
    var_3.to_try()


def test_case_17():
    none_type_0 = None
    none_type_1 = None
    maybe_0 = module_0.Maybe(none_type_1, none_type_1)
    var_0 = maybe_0.to_validation()
    var_0.ap(none_type_0)


def test_case_18():
    dict_0 = {}
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(dict_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_either()
    var_1.get_or_else(none_type_0)


def test_case_19():
    int_0 = 1
    maybe_0 = module_0.Maybe(int_0, int_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_validation()


def test_case_20():
    none_type_0 = None
    tuple_0 = ()
    none_type_1 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_1, bool_0)
    var_0 = maybe_0.filter(tuple_0)
    int_0 = 555
    maybe_1 = module_0.Maybe(int_0, int_0)
    var_1 = maybe_1.to_lazy()
    none_type_2 = None
    bool_1 = True
    maybe_2 = module_0.Maybe(none_type_2, bool_1)
    bool_2 = var_0.__eq__(maybe_1)
    var_2 = maybe_2.to_either()
    int_1 = -2023
    var_3 = maybe_0.ap(int_1)
    bool_3 = maybe_1.__eq__(maybe_1)
    maybe_3 = module_0.Maybe(bool_1, bool_0)
    var_4 = maybe_0.to_either()
    var_5 = var_3.bind(var_3)
    maybe_4 = module_0.Maybe(var_4, var_2)
    var_6 = maybe_3.get_or_else(int_0)
    var_4.get_or_else(none_type_0)
