# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    bool_0 = True
    bool_1 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.ap(bool_1)
    bool_2 = bool_1.__eq__(none_type_0)
    bool_3 = var_0.__eq__(var_0)
    var_1 = maybe_0.to_box()
    var_2 = var_0.to_either()
    var_1.to_box()


def test_case_3():
    float_0 = -379.06
    bool_0 = True
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.bind(float_0)
    var_1 = maybe_0.to_box()
    maybe_1 = module_0.Maybe(float_0, float_0)
    bool_2 = maybe_1.__eq__(maybe_1)
    maybe_2 = module_0.Maybe(bool_2, maybe_1)
    var_2 = maybe_1.to_either()
    var_3 = maybe_1.map(var_2)
    var_4 = maybe_1.to_validation()
    var_5 = var_2.to_lazy()
    var_6 = maybe_0.map(maybe_2)
    bool_3 = maybe_0.__eq__(var_2)
    var_7 = maybe_1.to_try()
    var_8 = var_4.to_try()
    var_9 = var_2.to_try()


def test_case_4():
    float_0 = -3592.0
    bool_0 = True
    maybe_0 = module_0.Maybe(float_0, bool_0)
    var_0 = maybe_0.bind(float_0)
    var_1 = var_0.map(float_0)
    var_2 = var_1.get_or_else(float_0)
    var_2.ap(float_0)


def test_case_5():
    bytes_0 = b"E\x8ao\xbd\xca\xc3\xa6*Z[V\x1e\n\x83n\x0c"
    none_type_0 = None
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.ap(bytes_0)
    var_1 = var_0.filter(none_type_0)
    var_2 = var_1.bind(bytes_0)
    var_3 = var_2.to_lazy()
    var_3.to_lazy()


def test_case_6():
    complex_0 = -487.05966 + 772.5228j
    list_0 = [complex_0, complex_0]
    bool_0 = False
    maybe_0 = module_0.Maybe(list_0, bool_0)
    maybe_0.bind(complex_0)


def test_case_7():
    bytes_0 = b"\xdc\xd7\x93.}\x82;\xecW\x96\xbb\xcc\x12\xcfn\xcbn\xcc\xdc\xd4"
    tuple_0 = ()
    list_0 = [tuple_0]
    maybe_0 = module_0.Maybe(list_0, tuple_0)
    maybe_0.ap(bytes_0)


def test_case_8():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    int_0 = -1371
    maybe_1 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_1.filter(maybe_0)
    var_1 = maybe_1.to_either()
    maybe_0.filter(var_1)


def test_case_9():
    bool_0 = False
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.get_or_else(bool_0)
    var_0.bind(none_type_0)


def test_case_10():
    float_0 = -3592.0
    bool_0 = True
    maybe_0 = module_0.Maybe(float_0, bool_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.bind(float_0)
    var_2 = var_1.map(float_0)
    var_3 = var_2.get_or_else(float_0)
    var_3.ap(float_0)


def test_case_11():
    none_type_0 = None
    bool_0 = True
    dict_0 = {bool_0: none_type_0, bool_0: none_type_0}
    maybe_0 = module_0.Maybe(dict_0, none_type_0)
    var_0 = maybe_0.to_either()
    var_0.to_either()


def test_case_12():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.to_validation()
    var_1.filter(var_1)


def test_case_13():
    none_type_0 = None
    bool_0 = False
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_box()
    var_0.ap(none_type_0)


def test_case_14():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    int_0 = -2426
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.ap(tuple_1)


def test_case_15():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_0.filter(none_type_0)


def test_case_16():
    bool_0 = False
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    str_0 = "\n    Last is a Monoid that will always return the lastest, value when 2 Last instances are combined.\n    "
    bool_2 = False
    maybe_1 = module_0.Maybe(str_0, bool_2)
    var_0 = maybe_1.ap(maybe_0)
    var_1 = var_0.to_try()
    var_1.to_box()


def test_case_17():
    set_0 = set()
    bool_0 = set_0.__eq__(set_0)
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_try()
    var_0.ap(bool_0)


def test_case_18():
    str_0 = "h"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.to_validation()


def test_case_19():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.ap(bool_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_2 = maybe_1.to_validation()
    var_2.to_validation()


def test_case_20():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    maybe_0 = module_0.Maybe(set_0, bool_0)
    var_0 = maybe_0.filter(bool_0)
    var_1 = maybe_0.map(maybe_0)
    bool_1 = True
    tuple_0 = (bool_1, bool_1)
    var_2 = var_0.bind(tuple_0)
    var_3 = maybe_0.bind(bool_0)
    var_4 = var_0.get_or_else(var_0)
    var_5 = var_1.to_lazy()
    var_6 = var_3.to_lazy()
    var_7 = var_3.to_lazy()
    bool_2 = maybe_0.__eq__(maybe_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(var_1, tuple_0)
    var_8 = maybe_1.to_box()
    maybe_2 = module_0.Maybe(none_type_0, var_7)
    var_9 = var_1.to_validation()
    var_10 = var_5.to_try()


def test_case_21():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.get_or_else(none_type_0)
    var_1 = maybe_0.to_lazy()
    var_2 = var_1.to_validation()
    var_1.to_lazy()


def test_case_22():
    float_0 = -379.06
    bool_0 = True
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.bind(float_0)
    var_1 = maybe_0.to_box()
    maybe_1 = module_0.Maybe(var_0, var_1)
    bool_2 = var_1.__eq__(bool_0)
    bool_3 = False
    maybe_2 = module_0.Maybe(bool_2, bool_3)
    maybe_3 = module_0.Maybe(var_1, float_0)
    var_2 = maybe_3.to_either()
    var_3 = maybe_1.map(bool_1)
    var_4 = var_2.to_validation()
    var_5 = maybe_2.to_lazy()
    maybe_2.map(maybe_2)


def test_case_23():
    float_0 = -379.06
    bool_0 = True
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.bind(float_0)
    var_1 = maybe_0.to_box()
    maybe_1 = module_0.Maybe(float_0, float_0)
    bool_2 = maybe_1.__eq__(maybe_1)
    maybe_2 = module_0.Maybe(bool_2, maybe_1)
    var_2 = maybe_1.to_either()
    var_3 = maybe_1.map(var_2)
    var_4 = maybe_1.to_validation()
    var_5 = var_2.to_lazy()
    var_6 = maybe_0.map(maybe_2)
    maybe_3 = module_0.Maybe(maybe_0, bool_2)
    bool_3 = var_0.__eq__(maybe_2)
    var_7 = var_1.to_try()
    var_8 = maybe_3.to_try()
    var_9 = var_6.get_or_else(var_5)
    var_10 = var_9.to_try()


def test_case_24():
    str_0 = ""
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    int_0 = -1547
    bool_1 = True
    maybe_1 = module_0.Maybe(int_0, bool_1)
    bool_2 = maybe_1.__eq__(maybe_0)
    bytes_0 = b"\xf7\xb5!\x99\x0f,Da"
    none_type_0 = None
    none_type_1 = None
    maybe_2 = module_0.Maybe(none_type_1, none_type_1)
    var_0 = maybe_2.get_or_else(none_type_0)
    bool_3 = maybe_2.__eq__(maybe_2)
    var_0.get_or_else(bytes_0)
