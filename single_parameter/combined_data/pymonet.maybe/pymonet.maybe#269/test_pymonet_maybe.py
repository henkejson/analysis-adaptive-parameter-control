# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    bytes_0 = b"\x9aD#\xda+\x003@\rD"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    bool_0 = True
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    none_type_0 = None
    var_0 = maybe_0.to_either()
    maybe_1 = module_0.Maybe(none_type_0, var_0)
    var_1 = maybe_1.to_validation()
    bool_2 = maybe_0.__eq__(maybe_0)
    var_2 = maybe_0.map(none_type_0)
    var_3 = var_2.filter(var_0)
    var_4 = maybe_0.to_try()
    var_5 = var_2.to_lazy()
    var_6 = maybe_0.ap(var_4)
    var_7 = var_6.to_validation()
    var_8 = var_2.map(var_7)


def test_case_3():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.filter(var_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_2 = maybe_1.ap(maybe_0)
    var_3 = var_2.to_lazy()
    bool_1 = maybe_1.__eq__(var_0)
    maybe_1.filter(bool_0)


def test_case_4():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.filter(var_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_2 = maybe_1.ap(maybe_0)
    var_3 = var_2.to_lazy()
    maybe_1.filter(bool_0)


def test_case_5():
    str_0 = ">\r}K`{^s]Xz<I/41kEdp"
    none_type_0 = None
    maybe_0 = module_0.Maybe(str_0, none_type_0)
    var_0 = maybe_0.to_box()
    maybe_0.map(var_0)


def test_case_6():
    float_0 = -2740.272
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_try()
    set_0 = {float_0}
    maybe_1 = module_0.Maybe(float_0, set_0)
    var_1 = maybe_1.bind(float_0)
    var_2 = var_1.bind(var_0)
    var_3 = var_2.get_or_else(float_0)
    bool_1 = True
    maybe_2 = module_0.Maybe(float_0, bool_1)
    none_type_1 = None
    var_4 = maybe_0.get_or_else(none_type_0)
    maybe_3 = module_0.Maybe(maybe_2, none_type_1)
    var_5 = var_0.map(var_0)
    var_6 = maybe_2.to_box()


def test_case_7():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = maybe_0.__eq__(none_type_0)
    bytes_0 = b"\xaa\xc8\xa6\x1f\xe7Y\xfct\x18J\x01{[\xbd\xca%\xe4\xc1\x8e"
    bool_2 = maybe_0.__eq__(bool_0)
    var_0 = maybe_0.to_try()
    bool_3 = False
    maybe_1 = module_0.Maybe(bytes_0, bool_3)
    var_1 = maybe_1.get_or_else(none_type_0)
    maybe_2 = module_0.Maybe(none_type_0, var_0)
    maybe_1.bind(var_1)


def test_case_8():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    none_type_0 = None
    var_0 = maybe_0.to_either()
    maybe_1 = module_0.Maybe(none_type_0, var_0)
    var_1 = maybe_1.to_validation()
    bool_1 = var_0.to_validation()
    var_2 = maybe_0.map(none_type_0)
    var_3 = var_2.filter(var_0)
    var_4 = var_2.to_lazy()
    var_5 = var_2.ap(bool_1)
    var_6 = var_0.map(var_0)
    var_7 = var_2.to_box()


def test_case_9():
    str_0 = "\n    Min is a Monoid that will combines 2 numbers, resulting in the smallest of the two.\n    "
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.ap(str_0)


def test_case_10():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.filter(bool_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1.filter(bool_0)


def test_case_11():
    bytes_0 = b"\x9aD#\xda+\x003@\rD"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    bool_0 = True
    var_0 = maybe_0.get_or_else(bool_0)
    var_0.map(var_0)


def test_case_12():
    none_type_0 = None
    str_0 = ""
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.get_or_else(none_type_0)
    var_0.to_box()


def test_case_13():
    complex_0 = 908.137476 - 4457.37583j
    maybe_0 = module_0.Maybe(complex_0, complex_0)
    var_0 = maybe_0.to_either()
    var_0.filter(complex_0)


def test_case_14():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.filter(bool_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_1 = maybe_1.to_either()
    maybe_1.filter(bool_0)


def test_case_15():
    none_type_0 = None
    int_0 = 1206
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_validation()
    var_1.get_or_else(none_type_0)


def test_case_16():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.filter(maybe_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_1 = maybe_0.to_lazy()
    maybe_1.filter(bool_0)


def test_case_17():
    list_0 = []
    maybe_0 = module_0.Maybe(list_0, list_0)
    var_0 = maybe_0.to_lazy()


def test_case_18():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_try()


def test_case_19():
    bool_0 = False
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.to_either()
    maybe_0.filter(var_1)


def test_case_20():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.filter(var_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_2 = maybe_0.to_lazy()
    maybe_1.filter(bool_0)


def test_case_21():
    list_0 = []
    maybe_0 = module_0.Maybe(list_0, list_0)
    var_0 = maybe_0.to_validation()


def test_case_22():
    bool_0 = False
    tuple_0 = (bool_0,)
    maybe_0 = module_0.Maybe(bool_0, tuple_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.map(tuple_0)
    var_2 = maybe_0.map(var_1)
    var_3 = var_2.to_box()
    var_4 = maybe_0.filter(bool_0)
    var_5 = maybe_0.to_box()
    var_6 = var_0.to_box()
    maybe_1 = module_0.Maybe(maybe_0, var_4)
    bool_1 = False
    maybe_2 = module_0.Maybe(var_5, bool_1)
    var_5.filter(maybe_0)


def test_case_23():
    int_0 = -917
    int_1 = 1
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.filter(bool_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    maybe_2 = module_0.Maybe(none_type_0, none_type_0)
    maybe_3 = module_0.Maybe(int_1, maybe_1)
    var_1 = maybe_1.ap(maybe_0)
    var_2 = maybe_1.to_box()
    var_3 = var_2.to_either()
    var_4 = var_1.to_lazy()
    bool_1 = maybe_2.__eq__(var_0)
    maybe_2.filter(bool_0)


def test_case_24():
    list_0 = []
    maybe_0 = module_0.Maybe(list_0, list_0)
    var_0 = maybe_0.to_either()
    none_type_0 = None
    var_1 = maybe_0.to_validation()
    var_2 = maybe_0.to_lazy()
    var_3 = var_2.to_validation()
    maybe_0.map(none_type_0)


def test_case_25():
    bool_0 = True
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    none_type_0 = None
    var_0 = maybe_0.to_either()
    maybe_1 = module_0.Maybe(none_type_0, var_0)
    var_1 = maybe_1.to_validation()
    bool_2 = maybe_0.__eq__(maybe_0)
    maybe_0.map(none_type_0)
