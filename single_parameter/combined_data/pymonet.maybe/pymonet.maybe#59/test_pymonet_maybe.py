# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    str_0 = "Box[U]"
    maybe_0 = module_0.Maybe(str_0, str_0)


def test_case_1():
    tuple_0 = ()
    maybe_0 = module_0.Maybe(tuple_0, tuple_0)


def test_case_2():
    str_0 = "Box[U]"
    maybe_0 = module_0.Maybe(str_0, str_0)
    bool_0 = maybe_0.__eq__(str_0)


def test_case_3():
    bytes_0 = b"to\xbb\x90\xa2\xf7\x1b\xben\xfa\xf7\xcc\xed!"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.ap(maybe_0)
    var_1 = maybe_0.map(bytes_0)
    var_2 = maybe_0.bind(var_0)
    none_type_0 = None
    bool_0 = var_1.__eq__(bytes_0)
    maybe_1 = module_0.Maybe(none_type_0, bytes_0)
    bool_1 = maybe_0.__eq__(var_2)


def test_case_4():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.map(none_type_0)


def test_case_5():
    bytes_0 = b"to\xbb\x90\xa2\xf7\x1b\xben\xfa\xf7\xcc\xed!"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.ap(maybe_0)
    var_1 = maybe_0.to_try()
    var_2 = maybe_0.bind(var_1)
    none_type_0 = None
    bool_0 = var_1.__eq__(bytes_0)
    maybe_1 = module_0.Maybe(none_type_0, bytes_0)
    bool_1 = maybe_0.__eq__(var_1)


def test_case_6():
    float_0 = 207.9
    bool_0 = False
    maybe_0 = module_0.Maybe(float_0, bool_0)
    int_0 = 1898
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1.bind(int_0)


def test_case_7():
    dict_0 = {}
    none_type_0 = None
    maybe_0 = module_0.Maybe(dict_0, dict_0)
    maybe_0.ap(none_type_0)


def test_case_8():
    tuple_0 = ()
    maybe_0 = module_0.Maybe(tuple_0, tuple_0)
    var_0 = maybe_0.to_lazy()
    maybe_0.filter(var_0)


def test_case_9():
    bool_0 = False
    float_0 = 4758.0
    set_0 = {float_0, float_0, float_0}
    maybe_0 = module_0.Maybe(set_0, float_0)
    var_0 = maybe_0.get_or_else(bool_0)
    var_0.to_lazy()


def test_case_10():
    none_type_0 = None
    bool_0 = False
    bool_1 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_1)
    var_0 = maybe_0.get_or_else(bool_0)
    var_0.to_either()


def test_case_11():
    int_0 = -943
    list_0 = []
    bool_0 = False
    maybe_0 = module_0.Maybe(int_0, bool_0)
    maybe_1 = module_0.Maybe(list_0, bool_0)
    maybe_2 = module_0.Maybe(maybe_0, maybe_0)
    var_0 = maybe_2.bind(bool_0)
    bool_1 = maybe_2.__eq__(maybe_2)
    var_1 = var_0.ap(maybe_1)
    var_2 = var_0.filter(var_1)
    var_3 = maybe_2.to_either()
    maybe_1.filter(bool_0)


def test_case_12():
    int_0 = -1922
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    int_1 = 618
    none_type_0 = None
    maybe_1 = module_0.Maybe(int_1, none_type_0)
    var_0 = maybe_1.to_either()
    var_1 = maybe_1.to_try()
    var_1.map(int_0)


def test_case_13():
    list_0 = []
    bool_0 = True
    maybe_0 = module_0.Maybe(list_0, bool_0)
    var_0 = maybe_0.filter(bool_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(bool_0, none_type_0)
    var_1 = maybe_0.to_box()
    maybe_1.filter(bool_0)


def test_case_14():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_validation()


def test_case_15():
    bytes_0 = b"to\xbb\x90\xa2\xf7\x1b\xben\xfa\xf7\xcc\xed!"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.filter(var_0)
    var_2 = maybe_0.ap(maybe_0)
    var_3 = maybe_0.map(bytes_0)
    var_4 = maybe_0.to_try()
    var_5 = maybe_0.bind(var_4)
    none_type_0 = None
    bool_0 = var_4.__eq__(bytes_0)
    maybe_1 = module_0.Maybe(none_type_0, bytes_0)
    bool_1 = maybe_0.__eq__(var_4)


def test_case_16():
    tuple_0 = ()
    maybe_0 = module_0.Maybe(tuple_0, tuple_0)
    var_0 = maybe_0.to_lazy()


def test_case_17():
    bytes_0 = b"X\xa2\xdcK\x19\xd0\xf2-\xed\x86#\x93A\x9f"
    str_0 = "Box[U]"
    none_type_0 = None
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.filter(bytes_0)
    var_1 = var_0.to_either()
    var_2 = var_0.to_validation()
    var_3 = var_0.map(var_0)
    var_4 = var_3.to_either()
    bool_0 = var_0.__eq__(var_3)
    var_5 = var_3.to_validation()
    var_6 = var_3.filter(none_type_0)
    var_7 = var_3.to_validation()
    var_8 = var_2.to_try()
    var_8.filter(var_4)


def test_case_18():
    int_0 = -943
    list_0 = []
    bool_0 = True
    maybe_0 = module_0.Maybe(list_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.filter(bool_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(int_0, none_type_0)
    var_1 = maybe_0.to_box()
    var_2 = maybe_1.to_validation()
    maybe_1.filter(var_2)


def test_case_19():
    bytes_0 = b"X\xa2\xdcK\x19\xd0\xf2-\xed\x86#\x93A\x9f"
    str_0 = "Box[U]"
    none_type_0 = None
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.filter(bytes_0)
    var_1 = var_0.to_either()
    var_2 = var_0.to_lazy()
    var_3 = var_2.to_validation()
    var_4 = var_0.map(var_0)
    var_5 = var_4.to_either()
    bool_0 = var_0.__eq__(var_4)
    var_6 = var_2.to_validation()
    var_7 = var_4.filter(none_type_0)
    var_8 = var_4.to_validation()
    var_9 = var_6.to_either()
    bool_1 = var_8.__eq__(var_8)


def test_case_20():
    bool_0 = False
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_validation()
    var_1.get_or_else(var_1)


def test_case_21():
    bytes_0 = b"to\xbb\x90\xa2\xf7\x1b\xben\xfa\xf7\xcc\xed!"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.ap(maybe_0)
    var_1 = var_0.map(var_0)
    var_2 = maybe_0.to_try()
    var_3 = var_1.bind(var_0)
    bool_0 = var_0.__eq__(var_0)
    bool_1 = maybe_0.__eq__(var_1)
