# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import builtins as module_1


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    float_0 = 658.826166
    maybe_0 = module_0.Maybe(float_0, float_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.to_box()
    var_2 = var_1.to_validation()


def test_case_3():
    none_type_0 = None
    set_0 = set()
    maybe_0 = module_0.Maybe(set_0, set_0)
    bool_0 = maybe_0.__eq__(set_0)
    var_0 = maybe_0.to_box()
    maybe_1 = module_0.Maybe(none_type_0, set_0)
    maybe_1.map(set_0)


def test_case_4():
    bytes_0 = b'\xbb"\x8d(.\xa2\x0e\x95h\xcc'
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.to_box()
    var_2 = maybe_0.to_lazy()
    var_3 = maybe_0.map(maybe_0)
    var_4 = var_1.to_lazy()
    var_5 = var_3.get_or_else(var_3)
    var_6 = var_4.ap(bool_0)


def test_case_5():
    int_0 = 272
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    list_0 = [int_0, int_0]
    maybe_1 = module_0.Maybe(list_0, int_0)
    var_0 = maybe_1.bind(list_0)
    var_1 = var_0.filter(maybe_0)
    var_2 = maybe_1.map(int_0)
    var_3 = var_0.to_lazy()
    var_4 = var_0.to_lazy()


def test_case_6():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_box()
    maybe_0.bind(none_type_0)


def test_case_7():
    object_0 = module_1.object()
    set_0 = {object_0, object_0, object_0}
    list_0 = [object_0, object_0, set_0, set_0]
    list_1 = [set_0, object_0, object_0, list_0]
    maybe_0 = module_0.Maybe(list_1, object_0)
    var_0 = maybe_0.ap(maybe_0)
    var_1 = var_0.map(maybe_0)
    var_2 = maybe_0.to_validation()
    var_3 = maybe_0.filter(var_2)
    var_4 = maybe_0.to_box()
    var_5 = var_1.to_box()


def test_case_8():
    str_0 = "L]~q]:#GiL"
    bytes_0 = b"\xc0\x00Io\x8c\xd5\xb3\xd2\x9b\x0eI\xc4I(\x03\x9e\xb9"
    bool_0 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    maybe_0.ap(str_0)


def test_case_9():
    int_0 = 284
    list_0 = [int_0, int_0]
    maybe_0 = module_0.Maybe(list_0, int_0)
    var_0 = maybe_0.bind(list_0)
    var_1 = var_0.get_or_else(var_0)
    none_type_0 = None
    var_2 = maybe_0.filter(var_1)
    var_3 = var_0.map(var_2)
    var_4 = var_2.to_validation()
    var_5 = var_1.get_or_else(maybe_0)
    maybe_1 = module_0.Maybe(var_5, none_type_0)
    var_6 = var_2.to_try()
    var_7 = var_0.to_box()
    maybe_1.filter(var_4)


def test_case_10():
    dict_0 = {}
    float_0 = 1476.894
    bytes_0 = b"0m"
    set_0 = {bytes_0}
    none_type_0 = None
    maybe_0 = module_0.Maybe(set_0, none_type_0)
    var_0 = maybe_0.get_or_else(float_0)
    var_0.get_or_else(dict_0)


def test_case_11():
    set_0 = set()
    str_0 = "\n        It takes as a parameter function returning another Validation.\n        Function is called with Validation value and returns new Validation with previous value\n        and concated new and old errors.\n\n        :param monad: monad contains function\n        :type monad: Function(A) -> Validation[Any, List[E]]\n        :returns: new validation with stored errors\n        :rtype: Validation[A, List[E]]\n        "
    int_0 = 4383
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.ap(str_0)
    var_2 = var_1.to_box()
    var_2.ap(set_0)


def test_case_12():
    bytes_0 = b"#"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    tuple_0 = (bytes_0, maybe_0)
    list_0 = [tuple_0, maybe_0, bytes_0]
    list_1 = [bytes_0, bytes_0, tuple_0, bytes_0]
    tuple_1 = (list_0, list_1)
    bool_0 = False
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_1.to_either()
    tuple_2 = (maybe_1, var_0, var_0)
    maybe_2 = module_0.Maybe(tuple_2, var_0)
    var_1 = maybe_2.to_validation()
    bool_1 = maybe_1.__eq__(bool_0)
    var_1.get_or_else(tuple_1)


def test_case_13():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.to_box()


def test_case_14():
    none_type_0 = None
    set_0 = set()
    maybe_0 = module_0.Maybe(set_0, set_0)
    bool_0 = maybe_0.__eq__(none_type_0)
    bool_1 = maybe_0.__eq__(set_0)
    var_0 = maybe_0.to_box()
    maybe_1 = maybe_0.to_lazy()
    var_1 = maybe_1.map(set_0)


def test_case_15():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    bytes_0 = b"O\xe3\x97\xd7\x83\x84i\x1e\xcfb\x0b\xe0\xb3i\x96\xbc\xbe\x0b\xdb\x95"
    maybe_0 = module_0.Maybe(list_0, bytes_0)
    var_0 = maybe_0.to_try()


def test_case_16():
    int_0 = -3011
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.to_lazy()
    var_2 = maybe_0.to_box()
    var_3 = var_2.to_lazy()
    var_2.ap(int_0)


def test_case_17():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1 = module_0.Maybe(maybe_0, none_type_0)
    var_0 = maybe_1.to_validation()
    var_0.to_validation()


def test_case_18():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_try()
    var_2 = var_1.get_or_else(none_type_0)
    var_2.bind(none_type_0)


def test_case_19():
    float_0 = 658.826166
    maybe_0 = module_0.Maybe(float_0, float_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.to_box()
    var_2 = var_0.to_validation()
    var_3 = maybe_0.to_try()
    var_0.to_lazy()


def test_case_20():
    object_0 = module_1.object()
    set_0 = {object_0, object_0, object_0}
    list_0 = [object_0, object_0, set_0, set_0]
    list_1 = [set_0, object_0, object_0, list_0]
    maybe_0 = module_0.Maybe(list_1, object_0)
    bool_0 = False
    maybe_1 = module_0.Maybe(list_0, bool_0)
    var_0 = maybe_0.map(maybe_0)
    bool_1 = maybe_1.__eq__(var_0)
    var_1 = maybe_0.ap(object_0)
    var_2 = maybe_0.to_box()
    var_3 = var_1.to_box()
    var_4 = maybe_1.to_validation()
    var_5 = maybe_1.to_lazy()
    var_6 = maybe_0.get_or_else(var_1)
    var_3.map(maybe_0)


def test_case_21():
    int_0 = 284
    bool_0 = False
    maybe_0 = module_0.Maybe(int_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    list_0 = maybe_0.to_try()
    maybe_1 = module_0.Maybe(list_0, int_0)
    var_0 = maybe_1.bind(list_0)
    var_1 = var_0.to_box()
    bytes_0 = b"5\xbc%\r\x9e`\xf8\xbb]j"
    var_2 = var_0.filter(var_1)
    set_0 = set()
    maybe_2 = module_0.Maybe(set_0, bool_0)
    var_3 = maybe_1.ap(maybe_1)
    var_4 = maybe_1.map(var_1)
    bool_2 = var_0.__eq__(var_1)
    var_5 = var_0.map(bool_0)
    var_6 = maybe_0.ap(var_5)
    var_7 = maybe_2.to_box()
    var_8 = var_4.to_box()
    var_9 = maybe_2.to_validation()
    var_10 = var_0.to_lazy()
    var_11 = var_6.get_or_else(var_7)
    var_12 = var_6.map(bytes_0)
    var_1.get_or_else(var_9)
