# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)


def test_case_3():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = maybe_0.__eq__(none_type_0)


def test_case_4():
    bytes_0 = b"I\xe1\x10\x17\xff\xc5\xdd\x1b\x87\xa9\x01"
    float_0 = 458.927
    str_0 = "wmF]M"
    maybe_0 = module_0.Maybe(float_0, bytes_0)
    bool_0 = maybe_0.__eq__(float_0)
    var_0 = maybe_0.map(bytes_0)
    maybe_1 = module_0.Maybe(str_0, float_0)
    var_1 = maybe_1.filter(str_0)
    var_2 = maybe_0.to_try()
    var_3 = maybe_1.to_validation()
    var_4 = var_3.to_either()


def test_case_5():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.map(none_type_0)


def test_case_6():
    str_0 = "\n    In mathematics and computer science, currying is the technique of translating the evaluation of a function.\n    It that takes multiple arguments (or a tuple of arguments) into evaluating a sequence of functions.\n    each with a single argument.\n    "
    bool_0 = False
    bool_1 = False
    tuple_0 = (bool_0, bool_1)
    float_0 = -1536.844
    maybe_0 = module_0.Maybe(float_0, float_0)
    var_0 = maybe_0.ap(tuple_0)
    var_1 = var_0.bind(str_0)
    var_2 = var_1.to_either()
    var_3 = var_2.to_validation()
    var_4 = var_3.to_try()
    var_4.to_either()


def test_case_7():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_0.bind(bool_0)


def test_case_8():
    tuple_0 = ()
    int_0 = 1
    set_0 = {int_0}
    maybe_0 = module_0.Maybe(set_0, int_0)
    var_0 = maybe_0.ap(tuple_0)
    var_1 = var_0.to_validation()


def test_case_9():
    bytes_0 = b"\x833Q\xb2\x9e\xf7\xbf\xe8\x8e%\xd4"
    bool_0 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    maybe_0.ap(bytes_0)


def test_case_10():
    bytes_0 = b"S#\xe9\xf3A\xf3\xeb\xbd%\x80zX\xf4E\x1d<"
    int_0 = -1063
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.filter(int_0)
    var_1 = var_0.ap(bytes_0)
    tuple_0 = (var_1,)
    maybe_1 = module_0.Maybe(var_1, tuple_0)
    bool_0.to_lazy()


def test_case_11():
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.filter(none_type_0)
    list_0 = []
    maybe_1 = module_0.Maybe(list_0, list_0)
    maybe_1.filter(maybe_1)


def test_case_12():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.map(bool_0)
    var_1 = var_0.to_lazy()
    var_2 = maybe_0.filter(var_1)
    var_3 = var_2.bind(var_1)
    var_4 = var_1.to_try()
    var_5 = maybe_0.ap(var_3)
    var_6 = var_2.bind(maybe_0)
    var_7 = var_3.get_or_else(var_0)
    var_8 = var_2.to_lazy()
    var_9 = var_6.get_or_else(var_3)
    var_10 = maybe_0.to_box()
    bool_1 = False
    var_11 = var_1.to_try()
    maybe_1 = module_0.Maybe(var_11, bool_1)
    var_12 = var_6.ap(var_10)
    var_13 = var_6.filter(var_12)
    var_14 = var_13.get_or_else(var_13)
    var_15 = var_14.to_box()
    var_16 = var_3.to_try()


def test_case_13():
    bool_0 = True
    bool_1 = True
    str_0 = "\n        If Maybe is empty return default_value, in other case.\n\n        :param default_value: value to return if Maybe is empty\n        :type default_value: Any\n        :returns: value of Maybe or default_value\n        :rtype: A\n        "
    none_type_0 = None
    maybe_0 = module_0.Maybe(str_0, none_type_0)
    var_0 = maybe_0.get_or_else(bool_1)
    var_0.filter(bool_0)


def test_case_14():
    float_0 = -3582.0224
    maybe_0 = module_0.Maybe(float_0, float_0)
    var_0 = maybe_0.to_validation()
    bool_0 = maybe_0.__eq__(var_0)
    var_1 = maybe_0.to_validation()
    var_2 = maybe_0.to_either()


def test_case_15():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_try()
    var_1.to_either()


def test_case_16():
    bytes_0 = b"S#\xe9\xf3A\xf3\xeb\xbd%\x80zX\xf4E\x1d<"
    int_0 = -1063
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.filter(int_0)
    var_1 = var_0.ap(bytes_0)
    tuple_0 = (var_1,)
    maybe_1 = module_0.Maybe(var_1, tuple_0)
    var_2 = maybe_1.to_box()
    var_3 = var_2.to_lazy()
    var_4 = var_3.to_either()


def test_case_17():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    maybe_0 = module_0.Maybe(list_0, bool_0)
    var_0 = maybe_0.to_box()
    var_0.to_box()


def test_case_18():
    bool_0 = True
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.map(bool_0)
    var_1 = var_0.to_lazy()
    var_2 = maybe_0.filter(var_1)
    var_3 = var_1.to_try()
    var_4 = var_3.get_or_else(bool_1)
    var_4.to_box()


def test_case_19():
    int_0 = 1355
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.to_box()
    var_2 = maybe_0.to_lazy()
    var_3 = var_1.to_try()
    maybe_1 = module_0.Maybe(int_0, none_type_0)
    maybe_2 = module_0.Maybe(int_0, bool_0)
    var_4 = maybe_1.to_either()
    var_5 = maybe_1.to_validation()
    var_6 = var_5.to_try()


def test_case_20():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_try()
    var_0.to_validation()


def test_case_21():
    float_0 = -3582.0224
    none_type_0 = None
    maybe_0 = module_0.Maybe(float_0, none_type_0)
    var_0 = module_0.Maybe(maybe_0, float_0)
    bool_0 = maybe_0.__eq__(var_0)
    var_1 = maybe_0.to_validation()
    var_1.filter(var_1)


def test_case_22():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    bool_1 = False
    maybe_0 = module_0.Maybe(dict_0, bool_1)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_validation()
