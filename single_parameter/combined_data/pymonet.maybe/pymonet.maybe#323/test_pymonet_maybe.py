# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import builtins as module_1


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    tuple_0 = ()
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, tuple_0)
    bool_0 = True
    maybe_1 = module_0.Maybe(tuple_0, bool_0)
    maybe_2 = module_0.Maybe(tuple_0, tuple_0)
    bool_1 = maybe_2.__eq__(maybe_0)
    var_0 = maybe_2.to_lazy()


def test_case_3():
    float_0 = 395.64
    int_0 = 37
    set_0 = {int_0, int_0}
    bool_0 = False
    maybe_0 = module_0.Maybe(set_0, bool_0)
    bool_1 = maybe_0.__eq__(float_0)
    object_0 = module_1.object()
    object_0.to_validation()


def test_case_4():
    list_0 = []
    complex_0 = 220.735 + 204.8961j
    maybe_0 = module_0.Maybe(complex_0, complex_0)
    var_0 = maybe_0.ap(list_0)
    bool_0 = False
    var_1 = var_0.map(bool_0)
    maybe_1 = module_0.Maybe(var_0, bool_0)
    var_2 = maybe_1.to_try()
    var_3 = maybe_0.filter(var_0)
    var_2.bind(var_0)


def test_case_5():
    dict_0 = {}
    maybe_0 = module_0.Maybe(dict_0, dict_0)
    var_0 = maybe_0.get_or_else(dict_0)
    var_1 = maybe_0.to_box()
    maybe_0.map(var_1)


def test_case_6():
    str_0 = "Tz;:"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.to_lazy()
    bool_0 = maybe_0.__eq__(maybe_0)
    var_1 = maybe_0.bind(str_0)
    var_2 = var_1.ap(bool_0)
    maybe_1 = module_0.Maybe(maybe_0, maybe_0)
    var_3 = maybe_0.to_validation()
    var_3.ap(maybe_1)


def test_case_7():
    bytes_0 = b"\x07/D\xeb\xad\xd4\x85\xb2q\xc1j\xeb\x89\x9bX\xc2\xe8\xc3"
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.bind(bytes_0)


def test_case_8():
    bytes_0 = b"\xde\x05\xf5Q\xaeT\xc3\x895\xfd;\xde\xd6\xde\x9d`\xe2\xeb\x8e"
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_try()
    bool_1 = maybe_0.__eq__(none_type_0)
    maybe_1 = module_0.Maybe(none_type_0, bytes_0)
    var_1 = maybe_0.to_lazy()
    maybe_0.ap(bytes_0)


def test_case_9():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.filter(none_type_0)
    complex_0 = 4109.1 - 56.741043j
    maybe_1 = module_0.Maybe(var_0, complex_0)


def test_case_10():
    str_0 = '1X"j5bxBY:4qw0'
    list_0 = []
    maybe_0 = module_0.Maybe(list_0, list_0)
    maybe_0.filter(str_0)


def test_case_11():
    str_0 = "3}6T\t/f%MT1tqw\n9"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.filter(str_0)
    none_type_0 = None
    var_1 = maybe_0.get_or_else(none_type_0)
    var_1.map(str_0)


def test_case_12():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.get_or_else(bool_0)
    maybe_0.filter(var_0)


def test_case_13():
    str_0 = "\n        Evaluate function and memoize her output or return memoized value when function was evaluated.\n\n        :returns: result of function in Lazy\n        :rtype: A\n        "
    set_0 = {str_0}
    list_0 = [str_0, set_0, set_0]
    maybe_0 = module_0.Maybe(str_0, list_0)
    var_0 = maybe_0.to_either()


def test_case_14():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_try()
    bool_0 = var_0.__eq__(maybe_0)
    var_2 = maybe_0.to_lazy()
    var_2.to_lazy()


def test_case_15():
    bytes_0 = b"T\xaf\x95\x1f"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(maybe_0, none_type_0)
    var_0 = maybe_0.get_or_else(maybe_1)
    var_1 = maybe_0.filter(var_0)
    var_2 = maybe_1.to_lazy()
    var_3 = var_1.to_box()
    maybe_1.filter(var_3)


def test_case_16():
    tuple_0 = ()
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, tuple_0)
    maybe_1 = module_0.Maybe(tuple_0, tuple_0)
    var_0 = maybe_1.to_lazy()


def test_case_17():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_try()
    var_0.ap(none_type_0)


def test_case_18():
    str_0 = 's"(\\s~z(p?'
    list_0 = [str_0, str_0]
    none_type_0 = None
    maybe_0 = module_0.Maybe(list_0, none_type_0)
    var_0 = maybe_0.to_try()
    var_0.to_lazy()


def test_case_19():
    str_0 = "Tz;:"
    maybe_0 = module_0.Maybe(str_0, str_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.ap(bool_0)
    maybe_1 = module_0.Maybe(maybe_0, maybe_0)
    var_2 = maybe_0.to_validation()
    var_2.ap(maybe_1)


def test_case_20():
    tuple_0 = ()
    dict_0 = {}
    bool_0 = False
    maybe_0 = module_0.Maybe(dict_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_0.get_or_else(tuple_0)


def test_case_21():
    str_0 = "Tz;:"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.to_lazy()
    bool_0 = maybe_0.__eq__(maybe_0)
    var_1 = maybe_0.to_try()
    bool_1 = maybe_0.__eq__(var_0)
    maybe_1 = module_0.Maybe(bool_0, bool_1)
    bool_2 = maybe_0.__eq__(var_1)
    var_2 = var_0.to_validation()
    list_0 = [bool_0]
    maybe_1.ap(list_0)


def test_case_22():
    bytes_0 = b'\xcb\xb0\xbf!\xc4"\x13fs\x16\x17]Z5\x9e>?\xce\xb5\xd7'
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(maybe_0, none_type_0)
    var_0 = maybe_0.filter(bytes_0)
    var_1 = maybe_1.to_lazy()
    var_2 = var_1.to_validation()
    maybe_1.filter(var_2)


def test_case_23():
    bytes_0 = b"\x19n3\x06\xe6\x8c\x0b\xeeI\x14\xaa"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.ap(maybe_0)
    bool_0 = True
    maybe_1 = module_0.Maybe(bytes_0, bool_0)
    bool_1 = maybe_1.__eq__(bool_0)
    var_1 = var_0.map(var_0)
    var_2 = var_1.get_or_else(bool_1)
    var_3 = maybe_1.get_or_else(var_1)
    var_4 = var_1.bind(var_3)
    maybe_2 = module_0.Maybe(bytes_0, var_0)
    var_5 = var_1.to_validation()
    maybe_3 = module_0.Maybe(bytes_0, var_2)
    var_6 = var_1.map(bool_0)
    var_7 = maybe_1.map(var_3)
    var_8 = var_6.to_either()
    var_9 = var_7.to_lazy()
    var_10 = var_0.bind(var_8)
    bool_2 = var_0.__eq__(maybe_3)
    var_11 = var_10.to_validation()
    var_12 = var_4.ap(var_10)
    var_13 = var_1.filter(var_1)
    var_14 = var_12.ap(var_7)
    bool_3 = bool_2.__eq__(var_12)
    var_15 = var_3.to_try()
    var_16 = var_13.ap(var_7)
    maybe_4 = module_0.Maybe(var_11, var_2)
    maybe_4.filter(var_12)
