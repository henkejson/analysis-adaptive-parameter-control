# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1


def test_case_0():
    int_0 = -1137
    var_0 = module_0.Maybe(int_0, int_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_box()
    bool_0 = maybe_0.__eq__(maybe_0)
    var_1 = maybe_0.to_try()
    maybe_0.filter(var_0)


def test_case_3():
    int_0 = 2587
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.to_box()
    bool_0 = maybe_0.__eq__(var_1)
    var_2 = maybe_0.to_lazy()


def test_case_4():
    bytes_0 = b'Y\xf2F\x8f\xa4\xc8\xf2Z\x8c\xef"\xec9tM\xee\xfa<\x83'
    bool_0 = False
    tuple_0 = (bool_0,)
    bool_1 = True
    maybe_0 = module_0.Maybe(tuple_0, bool_1)
    var_0 = maybe_0.map(bytes_0)
    none_type_0 = None
    var_1 = var_0.map(none_type_0)
    var_2 = var_0.to_lazy()
    var_3 = var_2.to_either()


def test_case_5():
    list_0 = []
    none_type_0 = None
    maybe_0 = module_0.Maybe(list_0, none_type_0)
    bool_0 = True
    maybe_1 = module_0.Maybe(list_0, bool_0)
    var_0 = maybe_1.to_box()
    var_1 = maybe_1.to_lazy()
    var_2 = maybe_1.bind(var_0)


def test_case_6():
    tuple_0 = ()
    bool_0 = False
    maybe_0 = module_0.Maybe(tuple_0, bool_0)
    maybe_1 = module_0.Maybe(maybe_0, bool_0)
    var_0 = maybe_0.to_box()
    maybe_0.bind(var_0)


def test_case_7():
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.ap(none_type_0)
    var_1 = var_0.to_either()
    var_2 = maybe_0.filter(none_type_0)
    maybe_1 = module_0.Maybe(maybe_0, none_type_0)
    maybe_1.filter(none_type_0)


def test_case_8():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_0.ap(bool_0)


def test_case_9():
    none_type_0 = None
    none_type_1 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_1, bool_0)
    var_0 = maybe_0.filter(none_type_0)


def test_case_10():
    int_0 = 2587
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.to_box()
    var_2 = maybe_0.get_or_else(int_0)
    bool_0 = maybe_0.__eq__(var_1)
    var_3 = maybe_0.to_lazy()


def test_case_11():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_box()
    bool_0 = maybe_0.__eq__(maybe_0)
    var_1 = maybe_0.to_try()
    var_2 = maybe_0.to_box()
    var_3 = maybe_0.get_or_else(none_type_0)


def test_case_12():
    bytes_0 = b"Wb\xd5\r\x04]\xb4\xa4\xd75\x01\x11\xb6K\xa8\xd5\xcd\xc0"
    none_type_0 = None
    maybe_0 = module_0.Maybe(bytes_0, none_type_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_try()


def test_case_13():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_box()
    var_0.to_box()


def test_case_14():
    list_0 = []
    none_type_0 = None
    maybe_0 = module_0.Maybe(list_0, none_type_0)
    maybe_1 = maybe_0.to_lazy()
    var_0 = maybe_1.to_box()
    maybe_1.to_lazy()


def test_case_15():
    int_0 = -1132
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.to_validation()


def test_case_16():
    str_0 = '"\r]Xn<[.VGz;'
    str_1 = "\n        Returns new ImmutableList with each element mapped into\n        result of argument called with each element of ImmutableList\n\n        :param fn: function to call with ImmutableList value\n        :type fn: Function(A) -> B\n        :returns: ImmutableList[B]\n        "
    list_0 = [str_0, str_0, str_1]
    list_1 = [list_0, list_0]
    generic_0 = module_1.Generic()
    bytes_0 = b"d$\x99\x83\xcb\xdb\x1dx\\8\xa2\xec\xc1Q\x14w\nD"
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, list_1)
    var_0 = maybe_0.get_or_else(bytes_0)
    bool_0 = var_0.__eq__(generic_0)
    dict_0 = {str_0: list_0, str_1: str_1, str_1: str_1, str_1: list_1}
    bool_1 = False
    maybe_1 = module_0.Maybe(dict_0, bool_1)
    var_1 = maybe_1.to_validation()


def test_case_17():
    int_0 = -1132
    int_0.to_validation()


def test_case_18():
    int_0 = 89
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    tuple_0 = (dict_0, int_0, dict_0, dict_0)
    maybe_0 = module_0.Maybe(tuple_0, int_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_box()
    var_2 = var_1.to_either()


def test_case_19():
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.ap(none_type_0)
    var_1 = var_0.to_either()
    var_2 = maybe_0.to_box()
    var_3 = maybe_0.filter(var_2)
    maybe_1 = module_0.Maybe(bool_0, none_type_0)
    bool_1 = var_0.__eq__(var_0)
    maybe_1.filter(none_type_0)


def test_case_20():
    list_0 = []
    maybe_0 = module_0.Maybe(list_0, list_0)
    var_0 = maybe_0.get_or_else(list_0)
    maybe_0.ap(maybe_0)


def test_case_21():
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.filter(var_0)
    var_2 = maybe_0.to_validation()
    maybe_1 = module_0.Maybe(var_2, none_type_0)
    maybe_2 = module_0.Maybe(bool_0, bool_0)
    var_3 = maybe_2.ap(bool_0)
    var_4 = maybe_2.to_lazy()
    var_5 = maybe_2.ap(bool_0)
    bool_1 = var_3.__eq__(var_3)
    var_6 = var_5.to_validation()
    var_7 = maybe_1.to_box()
    var_8 = maybe_2.to_try()
    maybe_3 = module_0.Maybe(maybe_1, var_5)
    var_9 = var_8.map(var_5)
    var_10 = maybe_2.map(var_3)
    bool_2 = maybe_1.__eq__(var_3)
    var_7.get_or_else(var_9)
