# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.to_box()
    var_2 = maybe_0.to_either()
    bool_1 = maybe_0.__eq__(var_0)
    var_3 = maybe_0.to_lazy()
    bool_2 = maybe_0.__eq__(maybe_0)
    var_1.map(var_0)


def test_case_3():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.map(var_0)
    var_2 = var_1.to_validation()
    var_3 = maybe_0.to_either()
    var_4 = maybe_0.to_try()


def test_case_4():
    bytes_0 = b"\x11\x07\xdb=\x0f\xf0'Rb\xc9"
    list_0 = [bytes_0, bytes_0, bytes_0]
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.map(list_0)


def test_case_5():
    str_0 = "$b4bua"
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.bind(var_0)


def test_case_6():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    maybe_0.bind(none_type_0)


def test_case_7():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.ap(none_type_0)
    var_1 = var_0.to_either()
    var_1.get_or_else(var_0)


def test_case_8():
    float_0 = -2688.41258
    bool_0 = True
    maybe_0 = module_0.Maybe(float_0, bool_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(float_0, bool_1)
    maybe_1.ap(float_0)


def test_case_9():
    bytes_0 = b"\xd0I$*E;\r\xcc\x9c"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.filter(var_0)
    maybe_1 = module_0.Maybe(maybe_0, maybe_0)


def test_case_10():
    bool_0 = False
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_lazy()
    maybe_0.filter(bool_1)


def test_case_11():
    str_0 = "_m#Y wNP$NA7rC<^&7D!"
    tuple_0 = (str_0,)
    str_1 = "\n        Take mapper function and returns result of them called with Right value.\n\n        :param mapper: function to apply on Right value\n        :type mapper: Function(A) -> Either[B]\n        :returns: result of mapper\n        :rtype: Either[B]\n        "
    maybe_0 = module_0.Maybe(tuple_0, str_1)
    float_0 = -219.595
    str_2 = "q`1J3.c"
    maybe_1 = module_0.Maybe(str_2, str_2)
    var_0 = maybe_1.get_or_else(float_0)
    var_0.to_validation()


def test_case_12():
    bytes_0 = b"\x0bQ\x81#"
    bool_0 = False
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.get_or_else(none_type_0)
    maybe_1 = module_0.Maybe(bytes_0, bool_0)
    var_1 = maybe_0.to_box()
    var_2 = maybe_0.to_either()
    var_3 = maybe_1.get_or_else(var_2)
    maybe_0.map(maybe_1)


def test_case_13():
    generic_0 = module_1.Generic()
    set_0 = {generic_0}
    maybe_0 = module_0.Maybe(set_0, set_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.filter(var_0)
    var_2 = maybe_0.to_try()


def test_case_14():
    bool_0 = False
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_lazy()
    var_1.to_lazy()


def test_case_15():
    set_0 = set()
    maybe_0 = module_0.Maybe(set_0, set_0)
    var_0 = maybe_0.to_box()


def test_case_16():
    str_0 = "\n        Evaluate function and memoize her output or return memoized value when function was evaluated.\n\n        :returns: result of function in Lazy\n        :rtype: A\n        "
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.to_lazy()


def test_case_17():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()


def test_case_18():
    float_0 = -348.14009
    maybe_0 = module_0.Maybe(float_0, float_0)
    var_0 = maybe_0.to_try()


def test_case_19():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_try()
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)


def test_case_20():
    complex_0 = 1366 - 2496.48798j
    dict_0 = {complex_0: complex_0}
    bool_0 = False
    maybe_0 = module_0.Maybe(dict_0, bool_0)
    var_0 = maybe_0.to_validation()
    bool_1 = True
    maybe_1 = module_0.Maybe(var_0, bool_1)
    var_1 = maybe_0.to_validation()


def test_case_21():
    generic_0 = module_1.Generic()
    set_0 = {generic_0}
    maybe_0 = module_0.Maybe(set_0, set_0)
    bool_0 = True
    maybe_1 = module_0.Maybe(maybe_0, bool_0)
    var_0 = maybe_1.to_validation()
    maybe_2 = module_0.Maybe(maybe_1, var_0)
    var_1 = maybe_2.to_lazy()
    var_2 = var_1.to_either()
    var_3 = maybe_0.to_try()


def test_case_22():
    generic_0 = module_1.Generic()
    set_0 = {generic_0}
    maybe_0 = module_0.Maybe(set_0, set_0)
    bool_0 = True
    var_0 = maybe_0.map(bool_0)
    bool_1 = var_0.__eq__(maybe_0)
    var_1 = var_0.to_try()
    var_1.to_either()


def test_case_23():
    dict_0 = {}
    complex_0 = -1077.5 - 3679.9j
    bool_0 = False
    maybe_0 = module_0.Maybe(complex_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_box()
    var_2 = var_1.to_either()
    var_2.get_or_else(dict_0)


def test_case_24():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    none_type_1 = None
    maybe_1 = module_0.Maybe(none_type_0, none_type_1)
    var_0 = maybe_1.to_box()
    var_1 = var_0.to_lazy()
    bool_1 = maybe_1.__eq__(maybe_1)
    var_2 = var_1.to_either()
    bool_2 = True
    var_3 = maybe_1.to_validation()
    maybe_2 = module_0.Maybe(none_type_1, bool_2)
    var_0.filter(var_1)
