# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    complex_0 = -2416 + 549.3268j
    maybe_0 = module_0.Maybe(complex_0, complex_0)
    bool_0 = maybe_0.__eq__(complex_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.to_validation()
    var_2 = var_1.to_either()
    var_3 = var_0.map(var_0)
    var_3.to_either()


def test_case_3():
    bool_0 = False
    bool_1 = False
    bytes_0 = b"\xad\xa4+\xac\xde\xcd\xe6"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.map(bool_1)
    var_1 = var_0.to_validation()
    var_2 = var_1.to_either()
    var_3 = var_2.to_try()
    var_3.bind(bool_0)


def test_case_4():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_try()
    maybe_0.ap(maybe_0)


def test_case_5():
    str_0 = "\n        Transform Either to Try.\n\n        :returns: resolved Try monad with previous value. Right is resolved successfully, Left not.\n        :rtype: Box[A]\n        "
    bytes_0 = b"q>f\xbc\xdb\x12P\xa67\xdb/\x87\xc9nJC\xda"
    int_0 = 22
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.bind(bytes_0)
    var_2 = var_1.map(str_0)
    var_3 = var_2.to_try()


def test_case_6():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_try()
    maybe_0.bind(var_0)


def test_case_7():
    none_type_0 = None
    int_0 = -4275
    set_0 = {int_0, int_0, int_0}
    maybe_0 = module_0.Maybe(set_0, set_0)
    var_0 = maybe_0.ap(none_type_0)
    var_1 = var_0.to_validation()
    bool_0 = maybe_0.__eq__(set_0)
    var_2 = maybe_0.ap(var_0)
    var_3 = maybe_0.to_box()
    var_4 = var_1.to_either()
    var_5 = var_0.to_lazy()
    var_6 = var_5.ap(var_2)


def test_case_8():
    none_type_0 = None
    none_type_1 = None
    set_0 = {none_type_1, none_type_1, none_type_1, none_type_1}
    maybe_0 = module_0.Maybe(none_type_1, set_0)
    maybe_1 = module_0.Maybe(maybe_0, none_type_1)
    maybe_1.ap(none_type_0)


def test_case_9():
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.filter(none_type_0)
    var_1 = maybe_0.get_or_else(none_type_0)
    maybe_1 = module_0.Maybe(none_type_0, var_1)
    maybe_1.filter(var_0)


def test_case_10():
    complex_0 = -2726 - 795.82237j
    bool_0 = False
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.get_or_else(complex_0)
    var_0.to_validation()


def test_case_11():
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.filter(none_type_0)
    var_1 = maybe_0.to_either()
    tuple_0 = ()
    maybe_1 = module_0.Maybe(none_type_0, tuple_0)
    maybe_1.filter(var_1)


def test_case_12():
    bool_0 = False
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_1, bool_0)
    var_0 = maybe_0.to_either()
    var_0.bind(bool_0)


def test_case_13():
    str_0 = "\n        Transform Maybe into Validation.\n\n        :returns: successfull Validation monad with previous value or None when Maybe is empty\n        :rtype: Validation[A, []]\n        "
    dict_0 = {str_0: str_0, str_0: str_0}
    float_0 = 4309.61664
    none_type_0 = None
    float_1 = -812.16596
    bool_0 = True
    maybe_0 = module_0.Maybe(float_1, bool_0)
    var_0 = maybe_0.bind(none_type_0)
    var_1 = var_0.map(float_0)
    maybe_1 = module_0.Maybe(var_1, bool_0)
    var_2 = maybe_1.filter(dict_0)
    var_3 = var_2.to_box()
    none_type_1 = None
    maybe_2 = module_0.Maybe(none_type_1, none_type_1)
    var_4 = maybe_2.to_box()
    var_4.to_box()


def test_case_14():
    int_0 = -1427
    int_1 = 3745
    dict_0 = {int_1: int_1}
    tuple_0 = (dict_0,)
    none_type_0 = None
    maybe_0 = module_0.Maybe(tuple_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_either()
    var_2 = var_1.to_box()
    var_2.ap(int_0)


def test_case_15():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_try()


def test_case_16():
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.filter(none_type_0)
    var_1 = maybe_0.to_validation()
    tuple_0 = ()
    maybe_1 = module_0.Maybe(none_type_0, tuple_0)
    maybe_1.filter(var_1)


def test_case_17():
    float_0 = 5432.0
    bool_0 = False
    maybe_0 = module_0.Maybe(float_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = var_0.to_lazy()
    var_2 = var_1.ap(float_0)
    var_1.filter(var_1)


def test_case_18():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    bool_1.to_validation()


def test_case_19():
    str_0 = "\n        Transform Either to Try.\n\n        :returns: resolved Try monad with previous value. Right is resolved successfully, Left not.\n        :rtype: Box[A]\n        "
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.filter(none_type_0)
    bool_1 = maybe_0.__eq__(str_0)
    var_1 = maybe_0.to_try()
    var_2 = maybe_0.to_either()
    var_3 = var_2.to_lazy()
    var_4 = var_2.to_try()
    var_5 = maybe_0.to_validation()
    var_6 = var_5.to_box()
    var_7 = maybe_0.bind(var_0)
    str_1 = "%{D\x0bVIA"
    var_8 = var_3.map(str_1)
    maybe_1 = module_0.Maybe(var_7, var_5)
    var_9 = maybe_1.to_lazy()
    var_10 = var_4.bind(var_3)
    var_11 = var_10.bind(var_1)
    bool_2 = maybe_0.__eq__(maybe_1)
    var_12 = maybe_1.to_lazy()
    bool_3 = var_7.__eq__(var_12)
    var_5.get_or_else(var_5)


def test_case_20():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.to_validation()
    var_2 = var_1.to_box()
    bool_0 = maybe_0.__eq__(maybe_0)
    var_3 = maybe_0.to_validation()
    var_1.filter(var_3)
