# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import builtins as module_1


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    bytes_0 = b"*@\x02\xd4Q\xa4\xc1\x8b\xf4y\x0f\xbd\xc5"
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    tuple_0 = (bool_0,)
    var_0 = maybe_0.ap(tuple_0)
    var_1 = var_0.filter(var_0)
    var_2 = maybe_0.to_validation()
    var_3 = maybe_0.to_validation()
    var_4 = maybe_0.get_or_else(var_3)
    var_5 = maybe_0.to_either()
    bool_1 = maybe_0.__eq__(var_1)
    tuple_0.to_box()


def test_case_3():
    float_0 = -4797.7
    bool_0 = True
    maybe_0 = module_0.Maybe(float_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_lazy()
    var_2 = maybe_0.to_either()
    bool_1 = False
    complex_0 = -2340.8444 + 1288.7945j
    bool_2 = maybe_0.__eq__(complex_0)
    str_0 = "\n        Transform Validation to Either.\n\n        :returns: Right monad with previous value when Validation has no errors, in other case Left with errors list\n        :rtype: Right[A] | Left[E]\n        "
    bool_3 = False
    var_3 = var_2.bind(bool_1)
    maybe_1 = module_0.Maybe(str_0, bool_3)
    var_4 = maybe_1.get_or_else(complex_0)
    var_4.ap(bool_1)


def test_case_4():
    bytes_0 = b"U\xf8\x0f\xf3g=U\x95\x91/\xd6\xc5\x0cF\x1d/\xcdU4"
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    tuple_0 = ()
    tuple_1 = (maybe_0, tuple_0)
    maybe_1 = module_0.Maybe(maybe_0, tuple_1)
    var_0 = maybe_1.ap(bytes_0)
    str_0 = "Min[value={}]"
    maybe_2 = module_0.Maybe(str_0, str_0)
    var_1 = maybe_1.to_validation()
    var_2 = maybe_1.map(str_0)
    var_3 = maybe_1.to_box()
    var_4 = maybe_2.to_box()
    var_5 = var_3.to_try()
    var_6 = maybe_2.get_or_else(str_0)
    var_7 = maybe_2.to_try()


def test_case_5():
    none_type_0 = None
    bool_0 = False
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    maybe_0.map(none_type_0)


def test_case_6():
    dict_0 = {}
    maybe_0 = module_0.Maybe(dict_0, dict_0)
    bool_0 = True
    bool_1 = True
    maybe_1 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_1.get_or_else(maybe_1)
    float_0 = 986.142
    var_1 = maybe_1.ap(float_0)
    var_2 = maybe_1.bind(float_0)
    var_3 = maybe_1.to_lazy()


def test_case_7():
    bool_0 = False
    bytes_0 = b"\xb7V\x85\xaa \xa2\x1d\t\xb4"
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.get_or_else(bytes_0)
    maybe_0.bind(maybe_0)


def test_case_8():
    bool_0 = False
    set_0 = {bool_0}
    bytes_0 = b"G\xf5\x10"
    bool_1 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_1)
    var_0 = maybe_0.ap(set_0)
    var_1 = var_0.to_validation()
    var_2 = var_1.to_either()


def test_case_9():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_box()
    maybe_0.ap(bool_0)


def test_case_10():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.filter(maybe_0)


def test_case_11():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.get_or_else(none_type_0)
    var_1 = maybe_0.to_validation()
    var_1.map(var_1)


def test_case_12():
    set_0 = set()
    tuple_0 = (set_0, set_0)
    int_0 = -338
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.to_either()
    var_0.get_or_else(tuple_0)


def test_case_13():
    float_0 = -3429.0
    bool_0 = False
    maybe_0 = module_0.Maybe(float_0, bool_0)
    bool_1 = True
    maybe_1 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_either()
    maybe_0.filter(var_0)


def test_case_14():
    str_0 = "\n    The Either type represents values with two possibilities: B value of type Either[A, B] is either Left[A or Right[B]\n    But not both in the same time.\n    "
    set_0 = {str_0}
    bool_0 = False
    maybe_0 = module_0.Maybe(set_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_0.to_lazy()


def test_case_15():
    list_0 = []
    object_0 = module_1.object(*list_0)
    none_type_0 = None
    maybe_0 = module_0.Maybe(object_0, none_type_0)
    var_0 = maybe_0.to_try()


def test_case_16():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_validation()


def test_case_17():
    int_0 = 3344
    none_type_0 = None
    bytes_0 = b"\xde\xca\x84\xfa\x115\xb88\x84\xb1\xe5\xd3m\x84\\\xb0\xfc"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    bool_0 = True
    str_0 = "PyG,q]irQ]P/_lA2]^a_"
    bytes_1 = b"-\xb8\xa8N5\xb3\xb8w\xa6M\xda\xe3#\xeb"
    tuple_0 = (str_0, bytes_1, str_0)
    dict_0 = {tuple_0: bytes_1}
    int_1 = 778
    maybe_1 = module_0.Maybe(int_1, int_1)
    var_0 = maybe_1.filter(dict_0)
    var_1 = var_0.ap(bool_0)
    var_2 = var_1.get_or_else(maybe_0)
    var_3 = var_2.filter(none_type_0)
    var_4 = var_3.to_lazy()
    var_5 = var_4.to_validation()
    var_5.ap(int_0)


def test_case_18():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_validation()
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_1 = maybe_1.to_lazy()
    var_2 = var_1.to_box()
    var_2.to_box()


def test_case_19():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_try()
    bool_1 = var_0.__eq__(none_type_0)
    bytes_0 = b"*@\x02\xd4Q\xa4\xc1\x8b\xf4y\x0f\xbd\xc5"
    bool_2 = False
    maybe_1 = module_0.Maybe(bool_1, bool_2)
    var_1 = maybe_0.to_box()
    var_2 = maybe_0.bind(var_1)
    maybe_2 = module_0.Maybe(bytes_0, var_0)
    var_3 = maybe_0.to_either()
    tuple_0 = (var_3,)
    var_4 = maybe_2.to_validation()
    var_5 = maybe_2.ap(tuple_0)
    var_6 = var_5.filter(var_5)
    var_7 = maybe_2.to_validation()
    var_8 = var_4.to_either()
    var_9 = maybe_2.to_validation()
    var_10 = maybe_2.get_or_else(var_9)
    bool_3 = maybe_2.__eq__(var_6)
    var_11 = var_5.to_validation()
    bool_4 = var_11.__eq__(var_8)
    maybe_3 = module_0.Maybe(bool_4, var_1)


def test_case_20():
    none_type_0 = None
    bytes_0 = b""
    maybe_0 = module_0.Maybe(none_type_0, bytes_0)
    var_0 = maybe_0.to_try()
    bool_0 = maybe_0.__eq__(maybe_0)
    maybe_0.map(bool_0)
