# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    dict_0 = {}
    bool_0 = True
    maybe_0 = module_0.Maybe(dict_0, bool_0)
    none_type_0 = None
    var_0 = maybe_0.to_try()
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    var_1 = maybe_0.map(none_type_0)
    var_2 = var_0.bind(dict_0)
    var_3 = maybe_0.filter(maybe_1)
    var_4 = var_3.to_box()
    bool_1 = var_2.__eq__(dict_0)
    var_5 = var_1.to_either()
    var_6 = var_4.ap(maybe_1)
    bool_2 = var_3.__eq__(var_6)
    var_7 = var_2.get_or_else(var_0)
    bool_3 = maybe_1.__eq__(var_4)


def test_case_3():
    str_0 = 'j4=rA}p|e;*K"$L6s'
    bool_0 = True
    none_type_0 = None
    bytes_0 = b"\xc8\x10\xba\xb2\x98k[9\x16"
    bool_1 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_1)
    var_0 = maybe_0.filter(bool_0)
    var_1 = var_0.bind(none_type_0)
    var_2 = var_1.ap(str_0)
    var_3 = var_0.map(var_2)
    var_4 = var_3.map(bool_0)


def test_case_4():
    int_0 = -243
    dict_0 = {int_0: int_0}
    bool_0 = False
    maybe_0 = module_0.Maybe(int_0, bool_0)
    bool_1 = maybe_0.__eq__(dict_0)
    maybe_0.map(maybe_0)


def test_case_5():
    str_0 = 'j4=rA}p|e;*K"$L6s'
    bool_0 = False
    none_type_0 = None
    bytes_0 = b"\xc8\x10\xba\xb2\x98k[9\x16"
    bool_1 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_1)
    var_0 = maybe_0.filter(bool_0)
    var_1 = var_0.bind(none_type_0)
    var_2 = var_1.ap(str_0)
    var_3 = var_2.to_box()
    var_3.map(bool_0)


def test_case_6():
    int_0 = -243
    dict_0 = {int_0: int_0}
    bool_0 = False
    maybe_0 = module_0.Maybe(int_0, bool_0)
    bool_1 = maybe_0.__eq__(dict_0)
    maybe_0.bind(maybe_0)


def test_case_7():
    str_0 = "\tt"
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.ap(bool_0)
    maybe_1 = module_0.Maybe(bool_0, var_0)
    var_1 = maybe_1.filter(str_0)
    var_2 = var_1.to_box()


def test_case_8():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_0.ap(bool_0)


def test_case_9():
    bool_0 = False
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_0, none_type_0)
    var_0 = maybe_0.to_try()
    maybe_0.filter(var_0)


def test_case_10():
    none_type_0 = None
    int_0 = 621
    maybe_0 = module_0.Maybe(none_type_0, int_0)
    var_0 = maybe_0.get_or_else(none_type_0)
    var_0.to_lazy()


def test_case_11():
    bytes_0 = b'\xfe!\xed\xc1^{"\xc0\x9f\xc4r\xd6\x94\x0c\x1d\x91\xf0'
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.get_or_else(bytes_0)
    var_0.to_try()


def test_case_12():
    str_0 = "I&i^\x0c.\n:i^6C6Dq1Z e:"
    bool_0 = True
    dict_0 = {str_0: bool_0, str_0: str_0}
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.to_either()
    var_0.filter(dict_0)


def test_case_13():
    str_0 = "\n        Two Validations are equals when values and errors lists are equal.\n        "
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_either()
    maybe_0.ap(str_0)


def test_case_14():
    float_0 = 948.141539
    bool_0 = False
    maybe_0 = module_0.Maybe(float_0, bool_0)
    var_0 = maybe_0.to_box()


def test_case_15():
    int_0 = 51
    dict_0 = {int_0: int_0, int_0: int_0}
    tuple_0 = (dict_0,)
    float_0 = 742.12
    list_0 = [float_0, float_0, float_0]
    bool_0 = True
    maybe_0 = module_0.Maybe(list_0, bool_0)
    var_0 = maybe_0.ap(tuple_0)
    var_1 = var_0.to_lazy()


def test_case_16():
    bool_0 = False
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.to_try()
    maybe_0.filter(var_1)


def test_case_17():
    str_0 = "s_"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.to_try()
    var_0.to_either()


def test_case_18():
    str_0 = "\n        :param semigroup: other semigroup to concat\n        :type semigroup: Last[B]\n        :returns: new Last with last value\n        :rtype: Last[A]\n        "
    str_1 = ")\tB\tCm)QX0{fOk7od?"
    maybe_0 = module_0.Maybe(str_0, str_1)
    var_0 = maybe_0.to_validation()


def test_case_19():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, none_type_0)
    var_0 = maybe_0.to_validation()
    bool_1 = var_0.__eq__(bool_0)
    maybe_1 = module_0.Maybe(none_type_0, bool_0)


def test_case_20():
    complex_0 = -3645.8594 - 4488.990923j
    int_0 = -1896
    bool_0 = False
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_either()
    float_0 = -4482.61
    maybe_1 = module_0.Maybe(var_1, float_0)
    var_2 = maybe_1.bind(complex_0)
    var_3 = var_2.to_box()
    bool_1 = True
    maybe_2 = module_0.Maybe(bool_1, bool_1)
    var_4 = maybe_2.to_box()
    var_4.to_box()


def test_case_21():
    bool_0 = False
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    none_type_0 = None
    var_0 = maybe_0.to_try()
    maybe_1 = module_0.Maybe(bool_1, var_0)
    var_1 = maybe_0.map(bool_0)
    var_2 = var_0.bind(var_0)
    var_3 = var_1.filter(bool_0)
    var_4 = maybe_0.to_box()
    var_5 = var_1.map(var_4)
    bool_2 = var_4.__eq__(var_5)
    var_6 = var_3.to_lazy()
    var_7 = var_6.to_either()
    var_2.ap(none_type_0)


def test_case_22():
    dict_0 = {}
    bool_0 = True
    maybe_0 = module_0.Maybe(dict_0, bool_0)
    none_type_0 = None
    var_0 = maybe_0.to_try()
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    var_1 = maybe_1.ap(maybe_0)
    var_2 = maybe_0.map(none_type_0)
    var_3 = var_0.bind(dict_0)
    var_4 = maybe_0.filter(var_0)
    var_5 = maybe_0.to_box()
    bool_1 = var_5.__eq__(var_5)
    bool_2 = False
    maybe_2 = module_0.Maybe(var_4, bool_2)
    bool_3 = var_4.__eq__(maybe_2)
    var_6 = maybe_0.to_either()
    var_5.ap(var_5)


def test_case_23():
    int_0 = -243
    bool_0 = False
    maybe_0 = module_0.Maybe(int_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    maybe_0.ap(int_0)
