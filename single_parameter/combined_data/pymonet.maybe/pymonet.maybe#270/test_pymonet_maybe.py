# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1


def test_case_0():
    bytes_0 = b"K5\xeeY"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    int_0 = 1262
    maybe_1 = module_0.Maybe(int_0, int_0)
    maybe_2 = module_0.Maybe(maybe_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_2)
    maybe_3 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_lazy()


def test_case_3():
    int_0 = 0
    bool_0 = False
    maybe_0 = module_0.Maybe(int_0, bool_0)
    none_type_0 = None
    bool_1 = maybe_0.__eq__(none_type_0)
    var_0 = maybe_0.to_try()
    bool_2 = True
    maybe_0.ap(bool_2)


def test_case_4():
    generic_0 = module_1.Generic()
    bool_0 = True
    maybe_0 = module_0.Maybe(generic_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.bind(generic_0)
    var_1 = var_0.to_try()
    bool_2 = bool_1.__eq__(generic_0)
    var_2 = maybe_0.map(var_0)
    var_3 = var_1.get_or_else(var_0)


def test_case_5():
    generic_0 = module_1.Generic()
    bool_0 = False
    maybe_0 = module_0.Maybe(generic_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_try()
    bool_2 = var_0.__eq__(var_1)
    maybe_0.map(var_0)


def test_case_6():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    int_0 = 1262
    maybe_1 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_1.bind(maybe_1)
    var_1 = maybe_1.filter(int_0)


def test_case_7():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.bind(none_type_0)


def test_case_8():
    float_0 = 4128.9587
    maybe_0 = module_0.Maybe(float_0, float_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.ap(maybe_0)
    var_2 = var_0.bind(var_0)
    var_3 = var_0.filter(maybe_0)
    var_4 = maybe_0.to_try()


def test_case_9():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0}
    maybe_0 = module_0.Maybe(set_0, set_0)
    var_0 = maybe_0.filter(maybe_0)
    maybe_1 = module_0.Maybe(tuple_0, tuple_0)
    maybe_1.filter(set_0)


def test_case_10():
    bytes_0 = b"\xae5\xafY"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.get_or_else(maybe_0)


def test_case_11():
    str_0 = 'Cy~+"%x4~g'
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    int_0 = 255
    bool_1 = False
    maybe_1 = module_0.Maybe(bool_1, bool_1)
    var_0 = maybe_1.get_or_else(int_0)
    var_0.to_validation()


def test_case_12():
    complex_0 = -2961.10566 - 3588.6j
    maybe_0 = module_0.Maybe(complex_0, complex_0)
    var_0 = maybe_0.to_either()


def test_case_13():
    str_0 = "\n        Transform Lazy into successful Validation with constructor_fn result.\n\n        :returns: successfull Validation monad with previous value\n        :rtype: Validation[A, []]\n        "
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    dict_0 = {}
    maybe_1 = module_0.Maybe(dict_0, dict_0)
    var_0 = maybe_1.to_either()
    maybe_1.bind(str_0)


def test_case_14():
    int_0 = -2
    tuple_0 = (int_0,)
    tuple_1 = (tuple_0,)
    tuple_2 = ()
    set_0 = {tuple_2, tuple_2, tuple_2}
    maybe_0 = module_0.Maybe(set_0, set_0)
    var_0 = maybe_0.filter(tuple_1)
    var_1 = var_0.to_box()
    var_2 = maybe_0.get_or_else(tuple_0)
    var_3 = maybe_0.to_lazy()
    var_4 = maybe_0.to_try()


def test_case_15():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_try()
    maybe_1 = module_0.Maybe(maybe_0, bool_0)
    var_1 = maybe_1.to_lazy()
    var_2 = var_0.get_or_else(maybe_0)
    none_type_0 = None
    maybe_2 = module_0.Maybe(bool_0, none_type_0)
    maybe_3 = module_0.Maybe(var_1, var_1)
    bool_1 = maybe_2.__eq__(var_1)
    maybe_4 = module_0.Maybe(var_0, maybe_1)
    var_0.to_lazy()


def test_case_16():
    bool_0 = True
    str_0 = "$=^"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.to_validation()
    var_1 = var_0.to_lazy()
    var_2 = var_1.ap(bool_0)


def test_case_17():
    str_0 = "JZw~C"
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_0.map(var_0)


def test_case_18():
    int_0 = -2
    tuple_0 = (int_0,)
    tuple_1 = (tuple_0,)
    tuple_2 = ()
    set_0 = {tuple_2, tuple_2, tuple_2}
    maybe_0 = module_0.Maybe(set_0, set_0)
    var_0 = maybe_0.filter(tuple_1)
    bool_0 = maybe_0.__eq__(var_0)
    none_type_0 = None
    var_1 = maybe_0.to_lazy()
    var_2 = var_1.to_try()
    var_2.filter(none_type_0)


def test_case_19():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_try()
    maybe_1 = module_0.Maybe(maybe_0, bool_0)
    var_1 = maybe_1.to_lazy()
    var_2 = var_0.get_or_else(maybe_0)
    var_3 = var_0.get_or_else(var_0)
    var_4 = var_1.to_either()
    var_3.to_either()


def test_case_20():
    bool_0 = True
    int_0 = 1262
    maybe_0 = module_0.Maybe(int_0, int_0)
    maybe_1 = module_0.Maybe(maybe_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_1)
    maybe_2 = module_0.Maybe(bool_0, bool_1)
    none_type_0 = None
    maybe_3 = module_0.Maybe(int_0, none_type_0)
    var_0 = maybe_1.to_validation()
