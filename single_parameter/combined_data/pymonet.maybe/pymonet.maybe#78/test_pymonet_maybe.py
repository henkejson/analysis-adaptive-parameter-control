# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    complex_0 = -1920.0753 - 1910j
    maybe_0 = module_0.Maybe(complex_0, complex_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.to_either()
    var_2 = maybe_0.to_try()
    bool_0 = maybe_0.__eq__(var_0)
    var_1.to_either()


def test_case_3():
    bool_0 = False
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_0, none_type_0)
    var_0 = maybe_0.to_box()
    maybe_1 = module_0.Maybe(bool_0, var_0)
    var_1 = maybe_0.ap(maybe_1)
    var_0.to_box()


def test_case_4():
    str_0 = ""
    none_type_0 = None
    maybe_0 = module_0.Maybe(str_0, none_type_0)
    var_0 = maybe_0.to_validation()
    maybe_0.map(var_0)


def test_case_5():
    int_0 = -1341
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.ap(maybe_0)
    bool_0 = False
    var_1 = var_0.filter(maybe_0)
    var_2 = maybe_0.bind(int_0)
    maybe_1 = module_0.Maybe(maybe_0, bool_0)
    var_3 = var_2.to_lazy()
    maybe_1.filter(maybe_0)


def test_case_6():
    none_type_0 = None
    tuple_0 = ()
    maybe_0 = module_0.Maybe(tuple_0, tuple_0)
    maybe_0.bind(none_type_0)


def test_case_7():
    float_0 = 822.643915
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.ap(float_0)


def test_case_8():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.to_lazy()
    maybe_0.filter(var_1)


def test_case_9():
    none_type_0 = None
    none_type_1 = None
    none_type_2 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_2, bool_0)
    var_0 = maybe_0.ap(none_type_1)
    var_1 = var_0.bind(none_type_0)
    var_2 = var_1.get_or_else(var_0)
    var_3 = var_1.to_try()
    var_3.to_box()


def test_case_10():
    int_0 = -1341
    maybe_0 = module_0.Maybe(int_0, int_0)
    bool_0 = False
    list_0 = [bool_0]
    bool_1 = maybe_0.__eq__(list_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.to_validation()
    var_2 = maybe_0.ap(var_0)
    bool_2 = False
    var_3 = var_2.filter(var_0)
    maybe_1 = module_0.Maybe(maybe_0, bool_2)
    var_4 = maybe_0.to_lazy()
    var_5 = maybe_0.get_or_else(maybe_0)
    var_6 = maybe_1.get_or_else(var_4)
    var_7 = maybe_0.to_box()
    var_8 = var_6.filter(var_7)
    var_9 = maybe_0.to_either()
    maybe_1.filter(var_1)


def test_case_11():
    float_0 = 1380.311
    set_0 = {float_0}
    complex_0 = -3556.05537 - 1515.39j
    maybe_0 = module_0.Maybe(complex_0, complex_0)
    maybe_1 = module_0.Maybe(maybe_0, maybe_0)
    var_0 = maybe_1.to_either()
    var_0.filter(set_0)


def test_case_12():
    int_0 = 0
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.to_box()


def test_case_13():
    complex_0 = -1920.0753 - 1910j
    maybe_0 = module_0.Maybe(complex_0, complex_0)
    var_0 = maybe_0.to_try()


def test_case_14():
    bytes_0 = b"!"
    bool_0 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    list_0 = []
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_1.to_try()
    var_0.ap(list_0)


def test_case_15():
    int_0 = -1341
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.ap(var_0)
    bool_0 = False
    var_2 = var_1.filter(var_0)
    var_3 = maybe_0.bind(int_0)
    maybe_1 = module_0.Maybe(maybe_0, bool_0)
    var_4 = var_0.to_lazy()
    maybe_1.filter(maybe_0)


def test_case_16():
    complex_0 = 2792.5963 + 4846.4269j
    bool_0 = False
    maybe_0 = module_0.Maybe(complex_0, bool_0)
    var_0 = maybe_0.to_validation()
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1.filter(maybe_1)


def test_case_17():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    bool_1 = True
    maybe_0 = module_0.Maybe(list_0, bool_1)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_try()
    var_1.to_either()


def test_case_18():
    bytes_0 = b"\xa5#T\xbe\xab\xfb\x8f\x16w}v\x11\xf6\xc4\xd2"
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_try()
    none_type_1 = None
    bool_0 = True
    maybe_1 = module_0.Maybe(bytes_0, bool_0)
    var_2 = maybe_1.ap(none_type_1)
    dict_0 = {bytes_0: bytes_0}
    var_3 = maybe_1.to_lazy()
    var_4 = var_3.ap(bytes_0)
    maybe_2 = module_0.Maybe(dict_0, dict_0)
    maybe_3 = module_0.Maybe(maybe_2, dict_0)


def test_case_19():
    tuple_0 = ()
    str_0 = "J&OzO#`wWr-@t\r"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_lazy()
    bool_0 = True
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    var_2 = maybe_1.ap(str_0)
    var_3 = var_0.to_try()
    var_4 = maybe_1.map(str_0)
    var_5 = var_4.bind(tuple_0)
    var_6 = var_4.to_lazy()
    var_7 = var_0.to_validation()
    var_8 = var_5.to_validation()
    bool_1 = maybe_0.__eq__(var_2)
    bool_2 = maybe_1.__eq__(var_7)
    var_9 = maybe_1.to_either()
    var_10 = maybe_1.to_try()
    var_11 = var_4.get_or_else(var_10)
    var_7.to_validation()


def test_case_20():
    tuple_0 = ()
    str_0 = "J&OzO#`wWr-@t\r"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_lazy()
    bool_0 = True
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    var_2 = maybe_1.ap(str_0)
    var_3 = var_0.to_try()
    var_4 = maybe_1.map(str_0)
    var_5 = var_4.bind(tuple_0)
    var_6 = var_4.to_lazy()
    var_7 = var_5.map(bool_0)
    var_8 = var_5.to_validation()
    bool_1 = maybe_0.__eq__(var_2)
    bool_2 = maybe_1.__eq__(var_7)
    var_9 = maybe_1.to_either()
    var_10 = maybe_1.to_try()
    var_11 = var_4.get_or_else(var_10)
    var_11.to_lazy()


def test_case_21():
    list_0 = []
    maybe_0 = module_0.Maybe(list_0, list_0)
    var_0 = maybe_0.to_try()
    bool_0 = maybe_0.__eq__(maybe_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(maybe_0, none_type_0)
    var_1 = maybe_1.to_box()
