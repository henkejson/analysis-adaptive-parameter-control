# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    float_0 = 980.623
    maybe_0 = module_0.Maybe(float_0, float_0)


def test_case_1():
    list_0 = []
    maybe_0 = module_0.Maybe(list_0, list_0)


def test_case_2():
    none_type_0 = None
    bytes_0 = b"\x9b\xce\x83"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = maybe_1.__eq__(bytes_0)
    var_1 = var_0.ap(maybe_1)
    var_2 = maybe_0.filter(var_0)
    var_3 = var_1.bind(var_1)
    bool_1 = maybe_0.__eq__(maybe_0)
    var_4 = var_3.to_lazy()
    var_5 = var_2.to_validation()
    maybe_1.filter(var_3)


def test_case_3():
    none_type_0 = None
    bytes_0 = b"\x9b\xce\x83"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = maybe_1.__eq__(bytes_0)
    var_1 = var_0.ap(maybe_1)
    var_2 = maybe_0.filter(var_0)
    var_3 = maybe_0.to_lazy()
    var_4 = module_0.Maybe(var_0, none_type_0)
    maybe_1.filter(var_2)


def test_case_4():
    str_0 = ""
    str_1 = "*RtO!y.Po[4g"
    bool_0 = True
    maybe_0 = module_0.Maybe(str_1, bool_0)
    var_0 = maybe_0.map(str_0)


def test_case_5():
    complex_0 = 2564.815024 - 1524.3j
    str_0 = "Callable[[U], Lazy[U, W]]"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.map(complex_0)
    var_1 = var_0.to_box()
    bool_0 = True
    var_2 = maybe_0.bind(var_1)
    bool_1 = False
    maybe_1 = module_0.Maybe(bool_0, bool_1)
    var_3 = maybe_1.to_either()
    var_3.filter(var_1)


def test_case_6():
    none_type_0 = None
    str_0 = "OHgbE^"
    list_0 = [str_0]
    bool_0 = False
    maybe_0 = module_0.Maybe(list_0, bool_0)
    maybe_0.bind(none_type_0)


def test_case_7():
    none_type_0 = None
    bytes_0 = b"\xc7\xcc"
    maybe_0 = module_0.Maybe(none_type_0, bytes_0)
    var_0 = maybe_0.ap(none_type_0)
    var_1 = var_0.to_either()
    var_2 = var_1.to_try()
    var_2.ap(none_type_0)


def test_case_8():
    str_0 = ">piK"
    set_0 = {str_0, str_0, str_0}
    int_0 = 1211
    bool_0 = False
    maybe_0 = module_0.Maybe(int_0, bool_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(maybe_0, bool_1)
    maybe_1.ap(set_0)


def test_case_9():
    none_type_0 = None
    bytes_0 = b"\x9b\xce\x83"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.ap(none_type_0)
    var_1 = maybe_0.get_or_else(maybe_0)
    maybe_1 = module_0.Maybe(var_0, none_type_0)
    var_2 = maybe_0.ap(maybe_0)
    var_3 = maybe_0.filter(var_1)
    var_4 = var_2.to_box()
    maybe_1.filter(var_4)


def test_case_10():
    complex_0 = -1049 - 1536.66j
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, complex_0)
    var_0 = maybe_0.to_validation()
    none_type_0 = None
    maybe_1 = module_0.Maybe(bool_0, none_type_0)
    var_1 = maybe_1.get_or_else(complex_0)
    var_1.to_box()


def test_case_11():
    list_0 = []
    none_type_0 = None
    maybe_0 = module_0.Maybe(list_0, none_type_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_try()


def test_case_12():
    complex_0 = 1680.09 + 1105.268j
    bool_0 = False
    maybe_0 = module_0.Maybe(complex_0, bool_0)
    var_0 = maybe_0.to_box()
    var_0.ap(complex_0)


def test_case_13():
    bytes_0 = b"\xd4\xda\x19H\x1cLh\xad\x17\x1e="
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_validation()


def test_case_14():
    none_type_0 = None
    bytes_0 = b"\x9b\xce\x83"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.ap(none_type_0)
    var_1 = maybe_0.get_or_else(maybe_0)
    maybe_1 = module_0.Maybe(var_0, none_type_0)
    bool_0 = maybe_0.get_or_else(bytes_0)
    var_2 = maybe_0.ap(maybe_0)
    var_3 = var_0.ap(maybe_1)
    var_4 = maybe_0.filter(var_1)
    var_5 = var_2.to_box()
    var_6 = var_3.to_box()
    bool_1 = var_2.__eq__(var_2)
    var_7 = var_4.to_try()
    var_8 = var_6.to_lazy()
    var_9 = maybe_1.to_lazy()
    maybe_1.filter(var_6)


def test_case_15():
    none_type_0 = None
    bytes_0 = b"\x9b\xce\x83"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.ap(none_type_0)
    var_1 = maybe_0.get_or_else(maybe_0)
    maybe_1 = module_0.Maybe(var_0, none_type_0)
    var_2 = maybe_0.ap(maybe_0)
    var_3 = maybe_0.filter(var_1)
    var_4 = var_2.to_box()
    var_5 = var_3.to_try()
    maybe_1.filter(var_4)


def test_case_16():
    bool_0 = False
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_0, none_type_0)
    var_0 = maybe_0.to_try()
    maybe_0.filter(var_0)


def test_case_17():
    int_0 = -4224
    int_1 = 0
    maybe_0 = module_0.Maybe(int_1, int_1)
    var_0 = maybe_0.to_validation()
    var_0.filter(int_0)


def test_case_18():
    none_type_0 = None
    bytes_0 = b"\x9b\xce\x83"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.get_or_else(maybe_0)
    maybe_1 = module_0.Maybe(var_0, none_type_0)
    bool_0 = maybe_1.__eq__(bytes_0)
    var_2 = maybe_0.ap(maybe_0)
    var_3 = var_0.ap(maybe_1)
    var_4 = maybe_0.filter(var_1)
    maybe_2 = module_0.Maybe(var_2, maybe_0)
    var_5 = var_3.bind(var_3)
    complex_0 = -283.68 - 1566.6j
    maybe_3 = module_0.Maybe(complex_0, none_type_0)
    bool_1 = var_1.__eq__(maybe_3)
    var_6 = var_0.to_try()
    var_7 = maybe_3.to_lazy()
    var_8 = var_7.to_validation()
    maybe_1.filter(bool_0)


def test_case_19():
    bytes_0 = b"\x9b\x83"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    bool_0 = True
    maybe_1 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_1.get_or_else(maybe_1)
    var_1 = maybe_1.filter(maybe_1)
    var_2 = var_1.ap(var_0)
    var_3 = maybe_0.ap(maybe_1)
    var_4 = maybe_0.to_validation()
    var_5 = maybe_1.to_box()
    var_6 = var_4.to_try()
    bool_1 = var_3.__eq__(maybe_0)
    var_7 = maybe_1.to_either()
    bool_2 = False
    maybe_2 = module_0.Maybe(var_6, bool_2)
    maybe_3 = module_0.Maybe(maybe_1, maybe_2)
    maybe_2.filter(var_3)


def test_case_20():
    bytes_0 = b"\xf0[\xafJ\xba\xef\xfe\xdeWl\xec"
    bool_0 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.to_either()
    maybe_0.map(var_0)


def test_case_21():
    int_0 = 2862
    tuple_0 = (int_0,)
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    maybe_0.filter(tuple_0)
