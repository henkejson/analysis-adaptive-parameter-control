# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    bytes_0 = b"\xe0"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)


def test_case_1():
    bytes_0 = b""
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)


def test_case_2():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.bind(none_type_0)
    var_1 = maybe_0.to_try()
    var_2 = maybe_0.filter(var_1)
    var_3 = maybe_0.get_or_else(bool_0)
    bool_1 = True
    maybe_1 = module_0.Maybe(none_type_0, bool_1)
    var_4 = var_0.map(maybe_0)
    var_5 = var_4.map(var_1)
    var_6 = var_4.to_either()
    var_7 = maybe_1.get_or_else(var_0)
    bool_2 = False
    maybe_2 = module_0.Maybe(var_6, var_3)
    bool_3 = var_0.__eq__(bool_2)


def test_case_3():
    str_0 = "/\x0c*nZgB%5h"
    dict_0 = {str_0: str_0}
    maybe_0 = module_0.Maybe(dict_0, dict_0)
    var_0 = maybe_0.map(str_0)
    var_1 = maybe_0.to_box()
    var_2 = var_1.to_try()
    var_3 = var_0.map(var_2)
    var_4 = maybe_0.to_lazy()
    var_5 = var_1.to_either()
    maybe_1 = module_0.Maybe(var_2, str_0)


def test_case_4():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = True
    var_0 = maybe_0.to_lazy()
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    var_1 = maybe_0.to_validation()
    var_2 = var_1.to_try()
    maybe_0.map(bool_0)


def test_case_5():
    int_0 = 3748
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.to_try()
    str_0 = "uC"
    maybe_1 = module_0.Maybe(int_0, str_0)
    var_1 = maybe_1.to_either()
    var_2 = maybe_0.bind(var_1)
    var_3 = maybe_0.to_lazy()


def test_case_6():
    bool_0 = True
    str_0 = "\n        Transform Either to Try.\n\n        :returns: resolved Try monad with previous value. Right is resolved successfully, Left not.\n        :rtype: Box[A]\n        "
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.bind(bool_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(str_0, bool_1)
    var_1 = var_0.get_or_else(var_0)
    none_type_0 = None
    complex_0 = 1332.92433 + 2907.140104j
    bool_2 = False
    maybe_2 = module_0.Maybe(complex_0, bool_2)
    var_2 = maybe_0.filter(var_0)
    maybe_3 = module_0.Maybe(none_type_0, bool_2)
    var_3 = maybe_2.to_try()
    maybe_2.bind(var_3)


def test_case_7():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0}
    int_0 = 1
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.ap(set_0)
    tuple_1 = ()
    maybe_1 = module_0.Maybe(tuple_1, tuple_1)
    maybe_1.filter(var_0)


def test_case_8():
    int_0 = 0
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, int_0)
    maybe_0.ap(bool_0)


def test_case_9():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.bind(none_type_0)
    var_1 = maybe_0.to_try()
    var_2 = maybe_0.filter(var_1)
    var_3 = maybe_0.to_try()
    var_3.to_try()


def test_case_10():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.get_or_else(none_type_0)


def test_case_11():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    list_0 = [bool_0, bool_0]
    var_0 = maybe_0.get_or_else(list_0)
    maybe_0.filter(bool_0)


def test_case_12():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    float_0 = 747.0965
    bool_1 = False
    maybe_0 = module_0.Maybe(float_0, bool_1)
    bool_2 = False
    var_0 = maybe_0.to_either()
    maybe_1 = module_0.Maybe(maybe_0, bool_2)
    var_1 = maybe_1.get_or_else(list_0)
    var_0.ap(var_0)


def test_case_13():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.to_box()
    var_2 = maybe_0.to_lazy()
    var_3 = var_2.to_validation()
    var_4 = var_2.ap(var_3)
    var_5 = maybe_0.get_or_else(maybe_0)
    var_6 = var_3.to_box()
    var_7 = var_4.ap(var_2)
    var_2.to_lazy()


def test_case_14():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_box()


def test_case_15():
    int_0 = 1935
    tuple_0 = (int_0,)
    int_1 = 4696
    maybe_0 = module_0.Maybe(int_1, int_0)
    set_0 = maybe_0.to_validation()
    bool_0 = maybe_0.__eq__(set_0)
    var_0 = maybe_0.to_validation()
    maybe_1 = module_0.Maybe(set_0, tuple_0)
    var_1 = maybe_0.map(maybe_1)
    var_2 = var_0.to_box()
    var_3 = var_1.to_try()
    var_0.map(var_2)


def test_case_16():
    bytes_0 = b"\xd0)\x9d\xf7\xb4}d1\x88]\x13j\xb7\xa4R\x8e\x8d\x06"
    bool_0 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.to_validation()


def test_case_17():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.bind(none_type_0)
    var_1 = maybe_0.to_try()
    var_2 = maybe_0.get_or_else(bool_0)
    bool_1 = True
    maybe_1 = module_0.Maybe(none_type_0, bool_1)
    bool_2 = maybe_0.__eq__(maybe_1)
    var_2.to_validation()


def test_case_18():
    int_0 = 1961
    tuple_0 = (int_0,)
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, tuple_0)
    var_0 = maybe_0.ap(int_0)
    var_1 = var_0.filter(none_type_0)
    var_2 = var_1.bind(none_type_0)
    var_3 = var_2.get_or_else(tuple_0)
    int_1 = 4703
    var_4 = maybe_0.map(var_1)
    maybe_1 = module_0.Maybe(int_1, int_0)
    bool_0 = maybe_1.__eq__(var_0)
    bool_1 = maybe_1.__eq__(tuple_0)
    var_5 = maybe_1.to_validation()
    var_6 = var_1.to_lazy()
    bool_2 = var_1.__eq__(var_0)
    var_7 = maybe_1.to_validation()
    var_3.to_box()


def test_case_19():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    maybe_0.bind(none_type_0)
