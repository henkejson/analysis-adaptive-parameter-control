# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    str_0 = "\n        :returns: True\n        :rtype: Boolean\n        "
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.bind(maybe_0)
    bool_0 = True
    maybe_1 = module_0.Maybe(str_0, bool_0)
    bool_1 = var_0.__eq__(var_0)
    var_1 = maybe_1.to_validation()
    var_2 = maybe_1.to_box()
    var_3 = maybe_1.to_lazy()
    var_4 = maybe_0.ap(var_1)
    var_5 = var_1.to_either()
    var_5.filter(maybe_1)


def test_case_3():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = maybe_0.__eq__(bool_0)
    var_0 = maybe_0.filter(maybe_0)
    maybe_1 = module_0.Maybe(var_0, bool_1)
    var_1 = maybe_0.to_try()
    maybe_1.filter(var_1)


def test_case_4():
    str_0 = "F"
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    bool_1 = maybe_0.__eq__(bool_0)
    var_0 = maybe_0.filter(maybe_0)
    maybe_1 = module_0.Maybe(var_0, bool_1)
    var_1 = maybe_0.to_try()
    var_2 = var_0.map(maybe_0)
    maybe_1.filter(var_1)


def test_case_5():
    str_0 = "\n        Call success_callback function with monad value when monad is successfully.\n\n        :params success_callback: function to apply with monad value.\n        :type success_callback: Function(A)\n        :returns: self\n        :rtype: Try[A]\n        "
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_box()
    maybe_0.map(str_0)


def test_case_6():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.to_either()
    bool_0 = var_1.__eq__(var_1)
    var_2 = maybe_0.to_try()
    var_3 = maybe_0.get_or_else(var_0)
    maybe_0.bind(maybe_0)


def test_case_7():
    none_type_0 = None
    bool_0 = False
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.ap(none_type_0)


def test_case_8():
    bytes_0 = b"\xf0"
    int_0 = -2235
    bool_0 = False
    maybe_0 = module_0.Maybe(int_0, bool_0)
    maybe_0.ap(bytes_0)


def test_case_9():
    str_0 = ')`ID)"\n2}P+5hl~j(|'
    bool_0 = False
    float_0 = 1244.16214
    maybe_0 = module_0.Maybe(bool_0, float_0)
    var_0 = maybe_0.filter(str_0)
    var_1 = var_0.filter(str_0)
    var_2 = var_1.to_validation()


def test_case_10():
    str_0 = "\x0b:2^"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0]
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.get_or_else(list_0)
    var_0.to_box()


def test_case_11():
    int_0 = 222
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.get_or_else(int_0)
    var_0.map(none_type_0)


def test_case_12():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = maybe_0.__eq__(bool_0)
    var_0 = maybe_0.filter(maybe_0)
    var_1 = maybe_0.to_either()
    maybe_1 = module_0.Maybe(var_0, bool_1)
    var_2 = maybe_0.to_try()
    maybe_1.filter(var_2)


def test_case_13():
    bool_0 = True
    str_0 = "\n    Data type for storage any type of function.\n    This function (and all his mappers) will be called only during calling fold method\n    "
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_either()
    bool_1 = maybe_0.__eq__(bool_0)
    bool_2 = var_0.__eq__(str_0)
    var_1 = maybe_0.to_validation()
    var_1.get_or_else(var_1)


def test_case_14():
    str_0 = "\n        :param fork: function to call during fork\n        :type fork: Function(reject, resolve) -> Any\n        "
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.filter(var_0)
    var_2 = maybe_0.to_lazy()
    maybe_1 = module_0.Maybe(str_0, bool_0)


def test_case_15():
    str_0 = "|bxAa`#&t"
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_box()
    var_0.ap(str_0)


def test_case_16():
    str_0 = ",,#t"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_validation()
    var_2 = var_1.to_either()
    var_2.to_either()


def test_case_17():
    bool_0 = False
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_box()
    bytes_0 = b"\xfe\x9aR\x92Y\xb3H\xc8N\x85a\xfb"
    maybe_0.filter(bytes_0)


def test_case_18():
    str_0 = "F"
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    bool_1 = maybe_0.__eq__(bool_0)
    var_0 = maybe_0.ap(maybe_0)
    maybe_1 = module_0.Maybe(str_0, bool_1)
    var_1 = maybe_1.to_try()
    var_2 = var_0.filter(var_1)
    maybe_1.filter(var_1)


def test_case_19():
    list_0 = []
    bool_0 = False
    maybe_0 = module_0.Maybe(list_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_0.to_validation()


def test_case_20():
    int_0 = -3019
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.ap(maybe_0)
    var_1 = var_0.ap(var_0)
    var_2 = maybe_0.to_validation()
    int_1 = 3509
    bytes_0 = b"w3"
    var_3 = var_1.bind(bytes_0)
    var_4 = maybe_0.map(int_1)
    var_5 = maybe_0.map(maybe_0)
    var_6 = var_3.to_box()
    bool_0 = maybe_0.__eq__(var_5)
    var_7 = var_0.map(var_4)
    var_8 = maybe_0.to_lazy()
    bool_1 = maybe_0.__eq__(var_4)
    var_9 = maybe_0.to_try()
    var_10 = maybe_0.to_try()
    var_10.to_lazy()


def test_case_21():
    str_0 = "F"
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    bool_1 = maybe_0.__eq__(bool_0)
    var_0 = maybe_0.ap(maybe_0)
    var_1 = maybe_0.filter(var_0)
    var_2 = var_0.to_either()
    var_3 = var_1.to_box()
    var_4 = maybe_0.filter(var_0)
    maybe_1 = module_0.Maybe(var_1, bool_1)
    var_5 = var_4.to_try()
    bool_2 = maybe_1.__eq__(maybe_1)
    var_6 = var_0.map(var_3)
    maybe_1.filter(var_5)
