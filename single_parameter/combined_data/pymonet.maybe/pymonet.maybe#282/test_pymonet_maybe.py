# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1
import builtins as module_2


def test_case_0():
    str_0 = "\n        Returns new ImmutableList with each element mapped into\n        result of argument called with each element of ImmutableList\n\n        :param fn: function to call with ImmutableList value\n        :type fn: Function(A) -> B\n        :returns: ImmutableList[B]\n        "
    maybe_0 = module_0.Maybe(str_0, str_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    str_0 = "KA8#hJ\x0c(L YJs{a>r\n="
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.filter(str_0)
    maybe_1 = module_0.Maybe(bool_0, maybe_0)
    bool_1 = False
    maybe_2 = module_0.Maybe(bool_1, bool_1)
    bool_2 = maybe_2.__eq__(var_0)
    maybe_2.filter(bool_2)


def test_case_3():
    str_0 = "KA8#hJ\x0c(L YJs{a>r\n="
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.filter(str_0)
    var_2 = var_1.ap(var_0)
    var_3 = maybe_0.to_lazy()
    maybe_1 = module_0.Maybe(bool_0, var_0)
    maybe_2 = module_0.Maybe(str_0, maybe_1)
    bool_1 = False
    maybe_3 = module_0.Maybe(bool_1, bool_1)
    bool_2 = maybe_2.__eq__(var_2)
    var_4 = maybe_0.bind(var_2)
    maybe_3.filter(bool_2)


def test_case_4():
    none_type_0 = None
    str_0 = "\n        Returns new ImmutableList with each element mapped into\n        result of argument called with each element of ImmutableList\n\n        :param fn: function to call with ImmutableList value\n        :type fn: Function(A) -> B\n        :returns: ImmutableList[B]\n        "
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.map(none_type_0)
    var_1 = var_0.to_box()
    var_2 = var_1.to_validation()
    var_3 = var_2.to_try()


def test_case_5():
    str_0 = "\n        Transform Box into Validation.\n\n        :returns: successfull Validation monad with previous value\n        :rtype: Validation[A, []]\n        "
    generic_0 = module_1.Generic()
    maybe_0 = module_0.Maybe(generic_0, generic_0)
    var_0 = maybe_0.ap(str_0)
    maybe_1 = module_0.Maybe(generic_0, var_0)
    none_type_0 = None
    maybe_2 = module_0.Maybe(generic_0, none_type_0)
    bool_0 = maybe_1.__eq__(maybe_2)
    bytes_0 = b"\x92\xf4d\x10\xc7\xf7\xf7\xec?R5Y0\x95\xe5"
    var_1 = var_0.ap(bytes_0)
    maybe_2.map(var_1)


def test_case_6():
    int_0 = 1
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.ap(maybe_0)
    var_1 = maybe_0.map(var_0)
    var_2 = maybe_0.bind(var_0)
    var_3 = maybe_0.filter(int_0)
    var_4 = maybe_0.to_try()
    var_4.to_validation()


def test_case_7():
    bytes_0 = b"\x81\xa8\x9f\x0bt\xe0\xa9\x9c\xa5\x10\xf3\t\xc6\xc8\x87"
    none_type_0 = None
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.map(bytes_0)
    var_1 = var_0.bind(none_type_0)
    bool_0 = False
    maybe_1 = module_0.Maybe(bytes_0, bool_0)
    bool_1 = False
    maybe_1.bind(bool_1)


def test_case_8():
    str_0 = "=zb"
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.ap(str_0)


def test_case_9():
    object_0 = module_2.object()
    int_0 = 666
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.filter(maybe_0)
    bool_0 = False
    maybe_1 = module_0.Maybe(maybe_0, bool_0)
    maybe_1.filter(object_0)


def test_case_10():
    str_0 = "ImmutableList: you can not add any other instace than ImmutableList"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.get_or_else(str_0)
    set_0 = {str_0}
    maybe_1 = module_0.Maybe(set_0, set_0)


def test_case_11():
    bytes_0 = b"\x9d"
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.get_or_else(bytes_0)
    int_0 = 18
    maybe_1 = module_0.Maybe(int_0, int_0)
    var_1 = maybe_1.to_lazy()
    var_2 = var_1.to_validation()
    bool_1 = var_2.__eq__(var_0)


def test_case_12():
    tuple_0 = ()
    bool_0 = True
    maybe_0 = module_0.Maybe(tuple_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.map(bool_0)
    var_2 = maybe_0.to_either()
    bool_1 = maybe_0.__eq__(var_1)
    var_2.to_either()


def test_case_13():
    bytes_0 = b"\x04,\x1f\xe1\x96\xf5\x95Se4\xe8"
    none_type_0 = None
    maybe_0 = module_0.Maybe(bytes_0, none_type_0)
    var_0 = maybe_0.to_either()
    none_type_1 = None
    bool_0 = True
    maybe_1 = module_0.Maybe(none_type_1, bool_0)
    var_1 = maybe_1.filter(var_0)


def test_case_14():
    set_0 = set()
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, set_0)
    var_0 = maybe_0.to_box()
    var_0.ap(bool_0)


def test_case_15():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_0.to_lazy()


def test_case_16():
    str_0 = "KA8#hJ\x0c(L YJs{a>r\n="
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.filter(str_0)
    maybe_1 = module_0.Maybe(bool_0, var_0)
    bool_1 = False
    var_2 = maybe_1.to_try()
    maybe_2 = module_0.Maybe(bool_1, bool_1)
    bool_2 = maybe_2.__eq__(var_1)
    maybe_2.filter(bool_2)


def test_case_17():
    none_type_0 = None
    bytes_0 = b" \xcd\xa4\x17\x03\xa2\xfa\xc0\x81\x04A\xf9"
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.bind(bytes_0)
    var_1 = var_0.to_either()
    var_2 = var_1.to_lazy()
    var_3 = var_2.to_box()
    var_4 = var_3.to_lazy()
    var_5 = var_4.to_validation()
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_6 = maybe_1.to_try()
    var_7 = maybe_1.get_or_else(var_6)
    var_6.bind(none_type_0)


def test_case_18():
    str_0 = "KA8#hJ\x0c(L YJs{a>r\n="
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.filter(str_0)
    maybe_1 = module_0.Maybe(bool_0, var_0)
    bool_1 = False
    maybe_2 = module_0.Maybe(bool_1, bool_1)
    bool_2 = maybe_2.__eq__(var_1)
    maybe_2.filter(bool_2)


def test_case_19():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1 = module_0.Maybe(maybe_0, maybe_0)
    var_0 = maybe_1.ap(maybe_0)
    var_1 = maybe_1.to_box()
    var_2 = var_1.ap(maybe_1)
    var_3 = maybe_1.bind(var_0)
    var_4 = var_0.to_validation()
    var_5 = var_0.map(var_0)
    var_6 = maybe_1.ap(var_4)
    var_7 = var_0.get_or_else(maybe_1)
    var_8 = maybe_1.to_lazy()
    var_9 = maybe_0.to_validation()
    var_10 = maybe_0.ap(var_0)
    var_11 = var_10.get_or_else(maybe_0)
    var_12 = var_7.filter(var_6)
    var_13 = maybe_1.get_or_else(maybe_1)
    var_14 = var_10.map(var_11)


def test_case_20():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    maybe_0 = module_0.Maybe(dict_0, bool_0)
    bool_1 = maybe_0.__eq__(dict_0)
    var_0 = maybe_0.to_lazy()
    maybe_1 = module_0.Maybe(maybe_0, dict_0)
    var_1 = maybe_0.to_lazy()
    var_2 = maybe_0.to_lazy()
    var_3 = var_2.to_try()
    var_4 = var_1.to_box()
    maybe_0.map(var_2)


def test_case_21():
    bool_0 = True
    str_0 = "KA8#hJ\x0c(L YJs{a>r\n="
    bool_1 = True
    maybe_0 = module_0.Maybe(str_0, bool_1)
    var_0 = maybe_0.filter(str_0)
    var_1 = var_0.ap(bool_0)
    maybe_1 = module_0.Maybe(str_0, str_0)
    bool_2 = maybe_1.__eq__(str_0)
    var_2 = maybe_1.map(maybe_1)
    maybe_2 = module_0.Maybe(var_1, var_0)
    int_0 = 1
    tuple_0 = (maybe_0,)
    bool_3 = False
    maybe_3 = module_0.Maybe(tuple_0, bool_3)
    none_type_0 = None
    maybe_4 = module_0.Maybe(int_0, none_type_0)
    bool_4 = maybe_4.__eq__(maybe_4)
    var_3 = var_2.ap(maybe_1)
    maybe_4.map(var_1)
