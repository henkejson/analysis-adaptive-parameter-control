# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1
import builtins as module_2


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    float_0 = -1571.21
    maybe_0 = module_0.Maybe(float_0, float_0)
    var_0 = maybe_0.bind(maybe_0)
    var_1 = var_0.bind(maybe_0)
    bool_0 = maybe_0.__eq__(var_0)
    maybe_1 = module_0.Maybe(maybe_0, bool_0)
    var_2 = var_1.bind(maybe_0)
    var_3 = var_1.to_lazy()
    bool_0.to_box()


def test_case_3():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_validation()
    bool_1 = maybe_0.__eq__(var_0)
    var_0.to_validation()


def test_case_4():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.map(var_0)
    var_2 = maybe_0.ap(bool_0)
    var_3 = var_2.to_try()
    var_4 = maybe_0.map(var_2)
    var_5 = var_4.filter(var_2)
    var_6 = var_5.to_validation()
    var_7 = var_6.to_box()
    maybe_1 = module_0.Maybe(var_2, var_7)
    var_8 = var_0.map(var_0)


def test_case_5():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.to_box()
    maybe_1 = module_0.Maybe(none_type_0, var_0)
    maybe_0.map(maybe_0)


def test_case_6():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_lazy()
    maybe_0.bind(var_0)


def test_case_7():
    int_0 = 0
    generic_0 = module_1.Generic()
    none_type_0 = None
    maybe_0 = module_0.Maybe(generic_0, int_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_try()
    maybe_1 = module_0.Maybe(none_type_0, int_0)
    var_2 = maybe_1.to_box()
    maybe_1.ap(generic_0)


def test_case_8():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.filter(none_type_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(none_type_0, bool_1)
    maybe_1.filter(bool_1)


def test_case_9():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.filter(none_type_0)
    var_1 = var_0.get_or_else(none_type_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(none_type_0, bool_1)
    maybe_1.filter(bool_1)


def test_case_10():
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.get_or_else(bool_0)
    var_0.to_either()


def test_case_11():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_box()
    var_2 = var_1.to_try()
    var_2.to_box()


def test_case_12():
    bytes_0 = b"\xf5\x84\xa1\x91\xce%\xd4!K\x18\xa3\xbe\xde]"
    bool_0 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    maybe_1 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_1.bind(var_0)
    var_2 = maybe_1.to_validation()
    var_3 = var_1.to_either()
    var_4 = var_1.filter(var_3)
    bool_1 = maybe_0.__eq__(var_1)
    var_5 = var_1.to_box()
    var_6 = var_1.get_or_else(maybe_1)
    var_7 = var_4.to_try()
    var_8 = var_5.to_try()
    var_9 = maybe_1.ap(var_7)
    maybe_0.filter(var_4)


def test_case_13():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.filter(none_type_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(none_type_0, bool_1)
    var_1 = maybe_0.to_box()
    maybe_1.filter(bool_1)


def test_case_14():
    str_0 = "Fk?6g\thR}"
    none_type_0 = None
    maybe_0 = module_0.Maybe(str_0, none_type_0)
    var_0 = maybe_0.to_lazy()


def test_case_15():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_try()
    var_0.to_box()


def test_case_16():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_0.to_validation()


def test_case_17():
    object_0 = module_2.object()
    object_0.to_either()


def test_case_18():
    str_0 = '?<"i/esdoIYHqX,!}\nX'
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.filter(str_0)
    bool_1 = True
    maybe_1 = module_0.Maybe(bool_0, bool_1)
    bool_2 = var_0.__eq__(var_0)
    var_1 = maybe_0.ap(str_0)
    var_2 = var_1.to_try()
    var_3 = var_0.to_lazy()
    var_4 = var_1.map(var_1)
    var_5 = maybe_0.to_try()
    var_6 = maybe_0.ap(str_0)
    var_7 = var_6.to_try()
    bool_3 = var_7.__eq__(str_0)
    var_8 = var_0.ap(maybe_0)
    var_9 = var_5.filter(var_7)
    var_10 = var_5.map(str_0)
    var_11 = maybe_0.bind(bool_2)
    bool_4 = maybe_0.__eq__(var_4)
    var_12 = var_3.to_either()
    var_9.to_box()


def test_case_19():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_validation()
    var_2 = var_1.to_either()
    var_3 = var_2.to_lazy()
    var_4 = var_3.ap(none_type_0)
    var_4.to_validation()


def test_case_20():
    str_0 = '?<"i/esdoI`YHqX,!}\nX'
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    bool_1 = maybe_1.__eq__(maybe_1)
    var_0 = maybe_0.ap(str_0)
    var_1 = var_0.to_try()
    var_1.to_lazy()


def test_case_21():
    bytes_0 = b"\xf5\x84\xa1\x91\x97%\xd4!K\x18\xa3\xbe\xde5"
    bool_0 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    maybe_1 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_1.map(bytes_0)
    var_1 = maybe_1.ap(bytes_0)
    var_2 = maybe_1.bind(var_1)
    var_3 = maybe_1.get_or_else(maybe_1)
    var_4 = maybe_1.get_or_else(maybe_0)
    var_5 = var_2.to_either()
    int_0 = 450
    var_6 = var_2.filter(var_5)
    var_7 = maybe_1.get_or_else(var_3)
    bool_1 = maybe_0.__eq__(var_4)
    bool_2 = var_1.__eq__(var_7)
    var_8 = maybe_1.map(var_3)
    var_9 = var_1.ap(var_7)
    var_10 = var_4.to_either()
    var_11 = var_6.to_try()
    maybe_2 = module_0.Maybe(maybe_0, int_0)
    var_12 = var_7.to_try()
    bool_3 = var_10.__eq__(var_2)
    var_13 = maybe_1.ap(var_11)
    maybe_0.filter(var_6)
