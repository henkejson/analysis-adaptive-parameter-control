# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    float_0 = -1188.01
    maybe_0 = module_0.Maybe(float_0, float_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    none_type_1 = None
    bool_0 = maybe_0.__eq__(maybe_0)
    maybe_0.filter(none_type_1)


def test_case_3():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    none_type_0 = None
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.get_or_else(maybe_0)
    var_2 = var_1.to_either()
    bool_1 = maybe_0.__eq__(none_type_0)
    var_2.to_either()


def test_case_4():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    none_type_0 = None
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.get_or_else(maybe_0)
    var_2 = var_1.to_either()
    bool_1 = maybe_0.__eq__(none_type_0)
    var_3 = maybe_0.to_validation()
    var_4 = var_3.to_box()
    var_5 = maybe_0.map(none_type_0)
    var_6 = maybe_0.to_box()
    var_7 = var_1.to_try()
    var_4.to_box()


def test_case_5():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_box()
    maybe_0.map(var_0)


def test_case_6():
    bool_0 = True
    int_0 = 1902
    maybe_0 = module_0.Maybe(int_0, bool_0)
    bool_1 = True
    tuple_0 = (bool_1,)
    set_0 = {int_0, tuple_0, int_0}
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.bind(var_0)
    bool_2 = var_1.__eq__(bool_1)
    bool_3 = False
    bool_4 = True
    maybe_1 = module_0.Maybe(bool_0, bool_4)
    var_2 = maybe_1.to_validation()
    set_1 = {bool_3}
    maybe_2 = module_0.Maybe(set_1, bool_3)
    maybe_2.ap(set_0)


def test_case_7():
    none_type_0 = None
    none_type_1 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_1, bool_0)
    maybe_0.bind(none_type_0)


def test_case_8():
    none_type_0 = None
    none_type_1 = None
    bool_0 = True
    int_0 = 1
    bool_1 = True
    maybe_0 = module_0.Maybe(int_0, bool_1)
    var_0 = maybe_0.ap(bool_0)
    var_1 = var_0.get_or_else(none_type_1)
    var_1.ap(none_type_0)


def test_case_9():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    none_type_1 = None
    maybe_1 = module_0.Maybe(none_type_1, none_type_1)
    bool_0 = maybe_0.__eq__(maybe_1)
    maybe_0.ap(bool_0)


def test_case_10():
    int_0 = 1931
    bytes_0 = b'\x0e\x84Y"k\xec\x03\xf4\xd5,\x1aN]Y'
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.filter(var_0)
    var_2 = var_1.get_or_else(int_0)


def test_case_11():
    bytes_0 = b"\xd1\xc4\xe8G\x8f=\xeee\r\x9e&\x90\xab\xe0`\xca\xe3\x981\x84"
    str_0 = "\n    One is a Monoid that will combine 2 values of any type using logical disjunction OR on their coerced Boolean values.\n    "
    list_0 = [str_0]
    tuple_0 = (list_0, str_0, str_0)
    tuple_1 = (list_0, list_0, tuple_0)
    maybe_0 = module_0.Maybe(tuple_1, str_0)
    var_0 = maybe_0.get_or_else(bytes_0)


def test_case_12():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.get_or_else(none_type_0)
    var_0.to_lazy()


def test_case_13():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_either()
    maybe_0.filter(var_0)


def test_case_14():
    int_0 = 967
    none_type_0 = None
    maybe_0 = module_0.Maybe(int_0, none_type_0)
    var_0 = maybe_0.to_box()
    set_0 = set()
    none_type_1 = None
    bool_0 = True
    maybe_1 = module_0.Maybe(none_type_1, bool_0)
    var_1 = maybe_1.get_or_else(set_0)
    var_1.to_lazy()


def test_case_15():
    int_0 = 1931
    bytes_0 = b'\x0e\x84Y"k\xec\x03\xf4\xd5,\x1aN]Y'
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_validation()
    var_1.get_or_else(int_0)


def test_case_16():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_try()
    var_1.to_validation()


def test_case_17():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_1.to_try()
    bool_1 = False
    maybe_2 = module_0.Maybe(bool_0, bool_1)
    var_2 = maybe_0.filter(var_0)
    bool_2 = var_1.__eq__(maybe_2)
    maybe_2.filter(bool_2)


def test_case_18():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_try()
    var_0.to_lazy()


def test_case_19():
    bool_0 = True
    tuple_0 = ()
    bool_1 = True
    maybe_0 = module_0.Maybe(tuple_0, bool_1)
    var_0 = maybe_0.to_validation()
    var_1 = var_0.to_box()
    var_2 = var_1.to_validation()
    var_2.filter(bool_0)


def test_case_20():
    int_0 = 3557
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_0.get_or_else(int_0)


def test_case_21():
    bytes_0 = b"\xaf\x04\xad\xb2~\xe4\xfe\xfb"
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    none_type_1 = None
    maybe_1 = module_0.Maybe(none_type_1, bytes_0)
    var_0 = maybe_1.to_try()
    var_1 = maybe_1.to_lazy()
    bool_1 = maybe_1.__eq__(maybe_1)
    var_1.get_or_else(bytes_0)


def test_case_22():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_1.get_or_else(maybe_1)
    bool_1 = False
    maybe_2 = module_0.Maybe(bool_0, bool_1)
    var_1 = maybe_0.filter(maybe_1)
    bool_2 = var_0.__eq__(maybe_2)
    maybe_2.filter(bool_2)
