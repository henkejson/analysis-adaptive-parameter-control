# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import builtins as module_1


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_validation()
    var_2 = var_1.to_lazy()
    var_3 = maybe_0.filter(var_2)
    var_4 = maybe_0.filter(bool_0)
    maybe_1 = module_0.Maybe(var_3, var_0)
    bool_1 = var_3.__eq__(maybe_1)


def test_case_3():
    int_0 = -471
    dict_0 = {int_0: int_0}
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.filter(int_0)
    var_1 = maybe_0.ap(dict_0)
    var_2 = var_1.to_try()
    bool_1 = var_1.__eq__(bool_0)
    maybe_1 = module_0.Maybe(var_1, bool_1)
    maybe_1.filter(var_1)


def test_case_4():
    int_0 = -1523
    dict_0 = {int_0: int_0}
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.filter(int_0)
    var_1 = maybe_0.get_or_else(dict_0)
    var_2 = module_0.Maybe(var_1, var_1)
    var_3 = maybe_0.to_either()
    var_4 = var_2.map(var_2)
    bool_1 = var_2.__eq__(bool_0)
    maybe_1 = module_0.Maybe(var_2, bool_1)
    var_5 = maybe_0.to_validation()
    var_6 = module_0.Maybe(var_1, var_2)
    maybe_1.filter(var_2)


def test_case_5():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_0.ap(maybe_0)


def test_case_6():
    int_0 = -471
    dict_0 = {int_0: int_0}
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.filter(int_0)
    var_1 = maybe_0.get_or_else(dict_0)
    var_2 = maybe_0.bind(var_0)
    var_3 = maybe_0.ap(dict_0)
    var_4 = var_3.to_try()
    bool_1 = var_3.__eq__(bool_0)
    maybe_1 = module_0.Maybe(var_3, bool_1)
    var_5 = maybe_0.to_validation()
    var_6 = maybe_0.to_box()
    maybe_1.filter(var_3)


def test_case_7():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_0.bind(none_type_0)


def test_case_8():
    str_0 = "Rj/"
    maybe_0 = module_0.Maybe(str_0, str_0)
    none_type_0 = None
    var_0 = maybe_0.filter(none_type_0)


def test_case_9():
    int_0 = -471
    dict_0 = {int_0: int_0}
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.filter(int_0)
    var_1 = maybe_0.get_or_else(dict_0)
    var_2 = maybe_0.ap(dict_0)
    var_3 = var_2.to_try()
    bool_1 = var_2.__eq__(bool_0)
    maybe_1 = module_0.Maybe(var_2, bool_1)
    var_4 = maybe_0.to_validation()
    maybe_1.filter(var_2)


def test_case_10():
    bool_0 = True
    none_type_0 = None
    bool_1 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_1)
    var_0 = maybe_0.get_or_else(bool_0)
    var_0.to_box()


def test_case_11():
    str_0 = ">odXt"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.to_either()
    var_2 = maybe_0.to_either()
    var_3 = var_2.to_lazy()
    var_1.filter(var_3)


def test_case_12():
    str_0 = "+"
    maybe_0 = module_0.Maybe(str_0, str_0)
    bool_0 = False
    maybe_1 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_1.to_either()
    bool_1 = var_0.__eq__(var_0)
    var_1 = maybe_1.to_either()
    var_0.filter(var_1)


def test_case_13():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    bool_1 = True
    maybe_0 = module_0.Maybe(dict_0, bool_1)
    none_type_0 = None
    var_0 = maybe_0.to_box()
    var_0.get_or_else(none_type_0)


def test_case_14():
    str_0 = "W"
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_box()
    var_0.map(var_0)


def test_case_15():
    int_0 = -471
    dict_0 = {int_0: int_0}
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.get_or_else(dict_0)
    var_1 = maybe_0.filter(var_0)
    var_2 = maybe_0.ap(dict_0)
    bool_1 = var_2.__eq__(bool_0)
    maybe_1 = module_0.Maybe(var_2, bool_1)
    var_3 = maybe_0.to_validation()
    var_4 = var_2.to_lazy()
    maybe_1.bind(bool_0)


def test_case_16():
    bool_0 = True
    list_0 = [bool_0]
    list_1 = [bool_0, list_0, list_0]
    float_0 = -879.4
    str_0 = "\n        Transform Maybe into Validation.\n\n        :returns: successfull Validation monad with previous value or None when Maybe is empty\n        :rtype: Validation[A, []]\n        "
    bool_1 = True
    bool_2 = False
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.filter(bool_2)
    var_2 = var_1.ap(float_0)
    var_3 = var_2.to_either()
    maybe_1 = module_0.Maybe(bool_1, bool_2)
    var_4 = maybe_0.get_or_else(maybe_0)
    var_5 = var_1.filter(var_2)
    var_6 = maybe_1.to_lazy()
    var_7 = maybe_1.to_lazy()
    var_8 = var_6.to_either()
    var_9 = maybe_0.to_box()
    var_10 = var_4.to_validation()
    var_11 = var_6.bind(list_1)
    var_12 = var_4.to_box()
    var_8.get_or_else(str_0)


def test_case_17():
    int_0 = -415
    bytes_0 = b"\x12\xe1\x1ca\xa2\xa7\xdb\xa7+!\xbf\xa5\xcf/\r\xc1"
    bool_0 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.to_try()
    maybe_1 = module_0.Maybe(int_0, bytes_0)


def test_case_18():
    int_0 = -471
    dict_0 = {int_0: int_0}
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.filter(int_0)
    var_1 = maybe_0.ap(dict_0)
    bool_1 = var_1.__eq__(bool_0)
    maybe_1 = module_0.Maybe(var_1, bool_1)
    var_2 = maybe_0.to_validation()
    maybe_1.filter(var_1)


def test_case_19():
    dict_0 = {}
    complex_0 = -1846.04 - 1216.671861j
    dict_1 = {complex_0: complex_0, complex_0: complex_0, complex_0: complex_0}
    bool_0 = False
    maybe_0 = module_0.Maybe(dict_1, bool_0)
    var_0 = maybe_0.to_validation()
    var_0.ap(dict_0)


def test_case_20():
    bool_0 = True
    object_0 = module_1.object()
    list_0 = [object_0]
    list_1 = [bool_0, object_0, list_0]
    float_0 = -879.4
    str_0 = "\n        Transform Maybe into Validation.\n\n        :returns: successfull Validation monad with previous value or None when Maybe is empty\n        :rtype: Validation[A, []]\n        "
    bool_1 = True
    none_type_0 = None
    bool_2 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_2)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.filter(bool_2)
    var_2 = var_1.ap(float_0)
    var_3 = var_2.to_either()
    maybe_1 = module_0.Maybe(bool_1, var_0)
    var_4 = maybe_0.get_or_else(maybe_0)
    var_5 = var_1.filter(var_2)
    var_6 = maybe_1.to_lazy()
    var_7 = maybe_1.to_lazy()
    var_8 = var_6.to_either()
    var_9 = maybe_0.to_box()
    var_10 = var_4.to_validation()
    var_11 = var_6.bind(list_1)
    var_12 = var_4.to_box()
    var_8.get_or_else(str_0)


def test_case_21():
    int_0 = -471
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.filter(int_0)
    bool_1 = var_0.__eq__(var_0)
    var_1 = maybe_0.to_either()
    bool_2 = var_1.__eq__(bool_0)
    maybe_1 = module_0.Maybe(var_1, bool_2)
    var_2 = maybe_0.to_validation()
    var_3 = maybe_0.to_box()
    maybe_1.filter(bool_2)


def test_case_22():
    int_0 = -471
    dict_0 = {int_0: int_0}
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.filter(int_0)
    var_1 = maybe_0.get_or_else(dict_0)
    var_2 = maybe_0.filter(var_1)
    var_3 = maybe_0.ap(dict_0)
    bool_1 = var_3.__eq__(bool_0)
    var_4 = var_2.to_try()
    maybe_1 = module_0.Maybe(var_3, bool_1)
    var_5 = maybe_0.to_validation()
    bool_2 = True
    maybe_2 = module_0.Maybe(bool_2, bool_2)
    var_6 = var_2.filter(var_5)
    var_7 = maybe_1.ap(var_3)
    maybe_3 = module_0.Maybe(bool_0, var_3)
    var_8 = var_3.to_try()
    var_9 = maybe_2.bind(var_5)
    var_10 = maybe_0.map(maybe_1)
    var_11 = maybe_2.to_try()
    bool_3 = maybe_1.__eq__(maybe_1)
    maybe_1.filter(bool_1)
