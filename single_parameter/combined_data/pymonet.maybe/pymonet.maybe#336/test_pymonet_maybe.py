# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1


def test_case_0():
    str_0 = ":\rtQ3'"
    maybe_0 = module_0.Maybe(str_0, str_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    str_0 = "K]wA5ras')$2~\r|\\"
    maybe_0 = module_0.Maybe(str_0, str_0)
    str_1 = "0sh\x0cx5"
    var_0 = maybe_0.ap(str_0)
    var_1 = var_0.filter(var_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    maybe_1 = module_0.Maybe(str_1, str_1)
    var_2 = maybe_0.to_box()
    var_3 = maybe_0.to_lazy()
    var_4 = maybe_1.filter(var_0)
    maybe_2 = module_0.Maybe(str_1, bool_0)


def test_case_3():
    bool_0 = True
    none_type_0 = None
    none_type_1 = None
    maybe_0 = module_0.Maybe(none_type_1, bool_0)
    var_0 = maybe_0.filter(none_type_0)
    str_0 = "\n    The Either type represents values with two possibilities: B value of type Either[A, B] is either Left[A or Right[B]\n    But not both in the same time.\n    "
    maybe_1 = module_0.Maybe(str_0, none_type_0)
    var_1 = var_0.bind(maybe_1)
    bool_1 = maybe_0.__eq__(none_type_1)
    var_2 = var_0.to_validation()
    var_3 = maybe_0.map(var_2)
    var_4 = var_3.to_try()
    none_type_2 = None
    maybe_2 = module_0.Maybe(none_type_2, var_2)


def test_case_4():
    bool_0 = False
    tuple_0 = (bool_0,)
    float_0 = 1076.411
    str_0 = "dk+t5t@k8F{s"
    set_0 = {str_0, str_0, str_0, str_0}
    maybe_0 = module_0.Maybe(set_0, str_0)
    var_0 = maybe_0.map(float_0)
    var_1 = var_0.ap(tuple_0)


def test_case_5():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_validation()
    maybe_0.map(var_0)


def test_case_6():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_try()
    var_2 = maybe_0.bind(var_0)
    var_3 = var_1.get_or_else(var_2)
    tuple_0 = (var_0,)
    var_4 = maybe_0.get_or_else(tuple_0)
    var_0.get_or_else(var_0)


def test_case_7():
    bytes_0 = b"\xb9\xaf\t,\xab\x03IF?"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_lazy()
    set_0 = set()
    bool_0 = False
    maybe_1 = module_0.Maybe(set_0, bool_0)
    var_1 = maybe_1.to_validation()
    maybe_1.bind(var_1)


def test_case_8():
    none_type_0 = None
    float_0 = -3387.01
    bool_0 = False
    maybe_0 = module_0.Maybe(float_0, bool_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(none_type_0, bool_1)
    maybe_1.ap(none_type_0)


def test_case_9():
    str_0 = "K]qA5ras')$2~\r|\\"
    maybe_0 = module_0.Maybe(str_0, str_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(str_0, none_type_0)
    var_0 = maybe_0.filter(str_0)
    maybe_1.filter(str_0)


def test_case_10():
    bool_0 = False
    int_0 = 1851
    bool_1 = False
    maybe_0 = module_0.Maybe(int_0, bool_1)
    var_0 = maybe_0.get_or_else(bool_0)
    var_0.to_lazy()


def test_case_11():
    str_0 = "K]qA5ras')$2~\r|\\"
    maybe_0 = module_0.Maybe(str_0, str_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(str_0, none_type_0)
    var_0 = maybe_0.filter(str_0)
    var_1 = var_0.to_either()
    maybe_1.filter(str_0)


def test_case_12():
    str_0 = "K]wA5ras')$2~\r|\\"
    maybe_0 = module_0.Maybe(str_0, str_0)
    str_1 = "6rh&sxA5"
    none_type_0 = None
    maybe_1 = module_0.Maybe(str_1, none_type_0)
    var_0 = maybe_1.to_either()
    maybe_2 = module_0.Maybe(str_1, none_type_0)
    var_1 = maybe_0.to_either()
    var_2 = maybe_0.ap(str_0)
    var_3 = var_2.filter(var_2)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_4 = maybe_0.to_validation()
    var_5 = maybe_2.get_or_else(var_4)
    var_6 = var_3.map(var_3)
    maybe_3 = module_0.Maybe(maybe_0, maybe_0)
    var_7 = maybe_1.to_validation()
    var_8 = maybe_0.map(var_4)
    var_9 = var_3.to_validation()
    var_10 = var_6.to_validation()
    var_11 = var_3.to_try()
    var_12 = maybe_0.get_or_else(var_4)
    maybe_1.filter(var_12)


def test_case_13():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = False
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_lazy()
    var_2 = maybe_0.filter(var_1)
    maybe_1 = module_0.Maybe(maybe_0, bool_1)
    var_3 = maybe_0.ap(bool_0)


def test_case_14():
    str_0 = "K]wA5ras')$2~\r|\\"
    maybe_0 = module_0.Maybe(str_0, str_0)
    str_1 = "6rh&sxA5"
    none_type_0 = None
    maybe_1 = module_0.Maybe(str_1, none_type_0)
    maybe_2 = module_0.Maybe(str_1, none_type_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.ap(str_0)
    var_2 = var_1.filter(var_1)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_3 = maybe_0.to_validation()
    var_4 = maybe_2.get_or_else(var_3)
    maybe_3 = module_0.Maybe(maybe_0, var_0)
    maybe_4 = module_0.Maybe(maybe_0, maybe_0)
    var_5 = maybe_1.to_validation()
    var_6 = maybe_0.map(var_3)
    var_7 = var_2.to_validation()
    var_8 = maybe_3.to_validation()
    var_9 = var_2.to_try()
    var_10 = maybe_1.to_box()
    var_11 = maybe_0.get_or_else(var_3)
    maybe_1.filter(var_11)


def test_case_15():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = True
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.filter(bool_0)
    var_2 = maybe_0.to_lazy()
    none_type_0 = None
    maybe_1 = module_0.Maybe(bool_1, none_type_0)


def test_case_16():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_0.to_lazy()


def test_case_17():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.filter(none_type_0)
    var_2 = var_1.to_validation()
    var_2.filter(maybe_0)


def test_case_18():
    list_0 = []
    maybe_0 = module_0.Maybe(list_0, list_0)
    var_0 = maybe_0.to_validation()
    var_1 = var_0.to_box()
    var_2 = maybe_0.to_try()
    bool_0 = var_0.__eq__(list_0)
    var_3 = maybe_0.to_validation()
    str_0 = "ot=R]"
    maybe_1 = module_0.Maybe(str_0, str_0)
    var_4 = maybe_1.bind(list_0)
    bool_1 = var_1.__eq__(var_1)
    var_3.to_validation()


def test_case_19():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = var_0.to_try()
    var_1.to_box()


def test_case_20():
    str_0 = "K]qA5ras')$2~\r|\\"
    maybe_0 = module_0.Maybe(str_0, str_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(str_0, none_type_0)
    var_0 = maybe_0.filter(str_0)
    var_1 = maybe_1.to_validation()
    var_2 = var_0.to_either()
    maybe_1.filter(str_0)


def test_case_21():
    str_0 = "K]wA5ras')$2~\r|\\"
    maybe_0 = module_0.Maybe(str_0, str_0)
    str_1 = "6rh&sxA5"
    var_0 = maybe_0.ap(str_0)
    var_1 = var_0.filter(var_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    maybe_1 = module_0.Maybe(str_1, str_1)
    var_2 = maybe_0.to_box()
    var_3 = maybe_0.to_lazy()
    var_4 = var_3.to_try()
    module_1.Generic(**str_1)


def test_case_22():
    bool_0 = True
    none_type_0 = None
    none_type_1 = None
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.filter(none_type_1)
    str_0 = "\n    The Either type represents values with two possibilities: B value of type Either[A, B] is either Left[A or Right[B]\n    But not both in the same time.\n    "
    maybe_1 = module_0.Maybe(str_0, none_type_1)
    var_1 = var_0.bind(maybe_1)
    bool_1 = maybe_0.__eq__(none_type_0)
    var_2 = var_0.to_validation()
    var_3 = maybe_0.map(var_2)
    var_4 = var_3.to_try()
    var_5 = maybe_1.to_lazy()
    var_6 = var_5.to_either()
    bool_2 = maybe_0.__eq__(str_0)


def test_case_23():
    str_0 = "K]qA5ras')$2~\r|\\"
    maybe_0 = module_0.Maybe(str_0, str_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(str_0, none_type_0)
    maybe_2 = module_0.Maybe(str_0, none_type_0)
    var_0 = maybe_0.filter(str_0)
    bool_0 = maybe_0.__eq__(maybe_2)
    maybe_1.filter(str_0)


def test_case_24():
    bool_0 = True
    none_type_0 = None
    none_type_1 = None
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.filter(none_type_1)
    str_0 = "\n    The Either type represents values with two possibilities: B value of type Either[A, B] is either Left[A or Right[B]\n    But not both in the same time.\n    "
    maybe_1 = module_0.Maybe(str_0, none_type_1)
    var_1 = var_0.bind(maybe_1)
    bool_1 = maybe_0.__eq__(none_type_0)
    var_2 = var_0.to_validation()
    var_3 = maybe_0.map(var_2)
    var_4 = var_3.to_try()
    var_5 = maybe_1.to_lazy()
    var_6 = var_5.to_either()
    var_7 = var_3.to_lazy()
    bool_2 = maybe_1.__eq__(maybe_1)
