# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    int_0 = -789
    maybe_0 = module_0.Maybe(int_0, int_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    str_0 = "17BgZA8Gf(BPQaS"
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(bool_1, bool_1)
    bool_2 = maybe_1.__eq__(bool_1)


def test_case_3():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    var_1 = maybe_0.map(var_0)


def test_case_4():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.to_either()
    maybe_0.map(none_type_0)


def test_case_5():
    str_0 = "_f^F^;c+1("
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    bool_1 = maybe_0.__eq__(bool_0)
    maybe_1 = module_0.Maybe(str_0, str_0)
    bool_2 = maybe_0.__eq__(str_0)
    var_0 = maybe_1.bind(bool_1)
    var_1 = maybe_1.to_lazy()
    var_2 = maybe_1.to_either()
    var_3 = maybe_1.map(var_2)
    bool_3 = var_3.__eq__(bool_1)


def test_case_6():
    none_type_0 = None
    none_type_1 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_1, bool_0)
    maybe_0.bind(none_type_0)


def test_case_7():
    int_0 = 1
    float_0 = -190.245
    maybe_0 = module_0.Maybe(float_0, float_0)
    none_type_0 = None
    var_0 = maybe_0.ap(int_0)
    maybe_1 = module_0.Maybe(none_type_0, maybe_0)
    var_1 = maybe_0.filter(int_0)


def test_case_8():
    none_type_0 = None
    none_type_1 = None
    maybe_0 = module_0.Maybe(none_type_1, none_type_1)
    maybe_0.ap(none_type_0)


def test_case_9():
    str_0 = "\n    Create a new function that, when invoked,\n    caches the result of calling fn for a given argument set and returns the result.\n    Subsequent calls to the memoized fn with the same argument set will not result in an additional call to fn;\n    instead, the cached result for that set of arguments will be returned.\n\n    :param fn: function to invoke\n    :type fn: Function(A) -> B\n    :param key: function to decide if result should be taken from cache\n    :type key: Function(A, A) -> Boolean\n    :returns: new function invoking old one\n    :rtype: Function(A) -> B\n    "
    str_1 = "%p)37u`|%X^"
    bool_0 = False
    maybe_0 = module_0.Maybe(str_1, bool_0)
    maybe_0.filter(str_0)


def test_case_10():
    none_type_0 = None
    bytes_0 = b"\xf9\\\x11"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.get_or_else(none_type_0)


def test_case_11():
    none_type_0 = None
    none_type_1 = None
    maybe_0 = module_0.Maybe(none_type_1, none_type_1)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.to_try()
    var_2 = maybe_0.get_or_else(none_type_0)
    var_2.ap(var_2)


def test_case_12():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.filter(var_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(maybe_0, bool_1)
    maybe_1.filter(var_0)


def test_case_13():
    bool_0 = True
    none_type_0 = None
    bool_1 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_1)
    var_0 = maybe_0.to_box()
    var_0.bind(bool_0)


def test_case_14():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, none_type_0)
    bool_1 = maybe_0.__eq__(bool_0)
    var_0 = maybe_0.to_box()
    maybe_0.bind(none_type_0)


def test_case_15():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.filter(var_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(var_0, bool_1)
    maybe_1.filter(var_0)


def test_case_16():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_try()
    var_0.to_box()


def test_case_17():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.filter(var_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(var_0, bool_1)
    maybe_1.filter(none_type_0)


def test_case_18():
    float_0 = -2503.37515
    bool_0 = False
    maybe_0 = module_0.Maybe(float_0, bool_0)
    var_0 = maybe_0.to_validation()


def test_case_19():
    float_0 = 1753.8
    maybe_0 = module_0.Maybe(float_0, float_0)
    var_0 = maybe_0.bind(float_0)
    var_1 = maybe_0.bind(var_0)
    var_2 = var_1.to_box()
    var_3 = var_0.bind(var_2)
    var_4 = maybe_0.to_either()
    var_5 = maybe_0.to_lazy()
    var_6 = var_0.to_validation()
    var_7 = maybe_0.to_lazy()
    var_8 = var_4.to_lazy()
    var_9 = var_7.to_either()
    var_10 = var_1.filter(var_1)
    var_11 = var_7.to_either()
    bool_0 = var_5.__eq__(maybe_0)
    var_11.to_either()


def test_case_20():
    dict_0 = {}
    none_type_0 = None
    maybe_0 = module_0.Maybe(dict_0, none_type_0)
    none_type_1 = None
    maybe_1 = module_0.Maybe(none_type_1, none_type_1)
    var_0 = maybe_1.to_lazy()
    var_1 = var_0.to_try()
    var_1.to_box()


def test_case_21():
    str_0 = "_f^F^;c+1("
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    bool_1 = maybe_0.__eq__(bool_0)
    maybe_1 = module_0.Maybe(str_0, str_0)
    bool_2 = maybe_0.__eq__(str_0)
    var_0 = maybe_1.bind(bool_1)
    var_1 = maybe_1.to_lazy()
    var_2 = maybe_1.map(str_0)
    var_3 = maybe_1.ap(maybe_0)
    none_type_0 = None
    maybe_2 = module_0.Maybe(var_3, none_type_0)
    bool_3 = False
    maybe_3 = module_0.Maybe(none_type_0, bool_3)
    var_4 = maybe_3.to_validation()
    var_5 = var_3.to_box()
    var_6 = var_2.filter(var_1)
    bool_4 = maybe_2.__eq__(var_0)


def test_case_22():
    str_0 = "_f^F^;c+1("
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    bool_1 = maybe_0.__eq__(bool_0)
    bool_2 = maybe_0.__eq__(bool_0)
    maybe_1 = module_0.Maybe(str_0, str_0)
    bool_3 = maybe_0.__eq__(str_0)
    var_0 = maybe_1.bind(bool_2)
    var_1 = maybe_1.to_lazy()
    var_2 = maybe_1.to_try()
    var_3 = maybe_1.map(var_2)
    var_4 = maybe_1.ap(maybe_0)
    none_type_0 = None
    var_5 = maybe_0.to_box()
    maybe_2 = module_0.Maybe(none_type_0, var_5)
    var_6 = maybe_2.to_validation()
    var_7 = var_3.filter(var_1)
    bool_4 = var_4.__eq__(var_0)


def test_case_23():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_try()
    maybe_1 = module_0.Maybe(var_0, bool_1)
    var_0.get_or_else(var_1)
