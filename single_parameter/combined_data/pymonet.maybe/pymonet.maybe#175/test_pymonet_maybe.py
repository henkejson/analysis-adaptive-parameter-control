# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    int_0 = -3213
    maybe_0 = module_0.Maybe(int_0, int_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = maybe_0.__eq__(none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_either()
    var_0.filter(var_1)


def test_case_3():
    complex_0 = -464.360237 + 3260.844251j
    none_type_0 = None
    str_0 = "^~r5\t_1-xkLM*="
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.filter(none_type_0)
    var_1 = var_0.get_or_else(complex_0)
    var_2 = maybe_0.map(var_1)


def test_case_4():
    str_0 = "cD'\"PPVUZ//He{q*.jvq"
    maybe_0 = module_0.Maybe(str_0, str_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_1.to_validation()
    var_1 = maybe_1.to_validation()
    bytes_0 = b"\x15\x1a\x8eb\t\x15"
    bool_0 = maybe_1.__eq__(str_0)
    bool_1 = False
    var_2 = maybe_1.to_validation()
    var_3 = var_1.to_try()
    var_4 = maybe_1.to_validation()
    bool_2 = maybe_1.__eq__(var_2)
    maybe_2 = module_0.Maybe(bytes_0, bool_1)
    maybe_2.ap(maybe_1)


def test_case_5():
    str_0 = "Left[T]"
    str_1 = "q\nyNJjoeLb'E"
    maybe_0 = module_0.Maybe(str_1, str_1)
    none_type_0 = None
    var_0 = maybe_0.get_or_else(none_type_0)
    var_1 = maybe_0.filter(str_0)
    var_2 = var_1.bind(str_1)
    var_3 = maybe_0.to_lazy()
    var_4 = var_2.map(var_3)
    var_5 = var_1.to_try()
    var_6 = var_1.bind(var_2)
    var_7 = var_2.to_box()
    var_8 = var_3.bind(str_1)


def test_case_6():
    bytes_0 = b"\xa4\x8c\xdb"
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    maybe_0 = module_0.Maybe(dict_0, bool_0)
    maybe_0.bind(bytes_0)


def test_case_7():
    none_type_0 = None
    str_0 = ""
    int_0 = 530
    maybe_0 = module_0.Maybe(str_0, int_0)
    var_0 = maybe_0.ap(none_type_0)
    var_1 = var_0.to_lazy()
    var_2 = var_1.to_validation()


def test_case_8():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_0.ap(bool_0)


def test_case_9():
    bytes_0 = b"\xdd\r\xc7\x06\xa5l\xeb\xb4"
    int_0 = 261
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.filter(bytes_0)
    var_1 = var_0.to_either()


def test_case_10():
    none_type_0 = None
    str_0 = '<RKQ6WD&pn"'
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    maybe_0.filter(none_type_0)


def test_case_11():
    bytes_0 = b"\xb2\xdf{\x89M\xd7m\xa7]h.\xba\xe1\xbbN"
    bytes_1 = b",\xcbJJ\xac5w(\xc2\x8f\x83Oam\xf6\xafe"
    maybe_0 = module_0.Maybe(bytes_1, bytes_1)
    var_0 = maybe_0.get_or_else(bytes_0)
    var_0.to_box()


def test_case_12():
    list_0 = []
    maybe_0 = module_0.Maybe(list_0, list_0)
    bool_0 = False
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_1.get_or_else(list_0)


def test_case_13():
    list_0 = []
    list_1 = [list_0]
    bool_0 = False
    maybe_0 = module_0.Maybe(list_1, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = var_0.to_try()
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    bool_1 = maybe_1.__eq__(none_type_0)
    var_2 = maybe_1.to_lazy()
    var_3 = maybe_1.get_or_else(maybe_1)
    var_4 = maybe_1.to_either()
    var_3.filter(var_2)


def test_case_14():
    float_0 = -1415.154749
    bool_0 = True
    maybe_0 = module_0.Maybe(float_0, bool_0)
    var_0 = maybe_0.to_box()


def test_case_15():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_either()
    var_2 = var_1.to_lazy()
    var_3 = var_2.to_box()
    var_3.to_box()


def test_case_16():
    bool_0 = True
    complex_0 = -421 + 1136.673235j
    maybe_0 = module_0.Maybe(bool_0, complex_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_validation()


def test_case_17():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_lazy()
    maybe_0.filter(var_0)


def test_case_18():
    str_0 = "!<oF<5"
    set_0 = {str_0}
    int_0 = 947
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.to_try()
    var_1 = var_0.map(set_0)
    var_1.to_validation()


def test_case_19():
    complex_0 = 3464.8 - 3231.057j
    none_type_0 = None
    maybe_0 = module_0.Maybe(complex_0, none_type_0)
    var_0 = maybe_0.to_try()
    bool_0 = var_0.__eq__(complex_0)
    bool_1 = False
    tuple_0 = (complex_0, complex_0, bool_1)
    maybe_1 = module_0.Maybe(tuple_0, bool_1)
    var_1 = maybe_1.to_try()
    var_1.to_either()


def test_case_20():
    none_type_0 = None
    str_0 = "\n        Returns new ImmutableList with elements from previous one\n        and argument value on the end of list\n\n        :param new_element: element to append on the end of list\n        :type fn: A\n        :returns: ImmutableList[A]\n        "
    tuple_0 = (str_0, str_0)
    bool_0 = True
    maybe_0 = module_0.Maybe(tuple_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_0.ap(none_type_0)


def test_case_21():
    str_0 = ",fB]y#0"
    none_type_0 = None
    maybe_0 = module_0.Maybe(str_0, none_type_0)
    var_0 = maybe_0.to_validation()
    var_1 = var_0.to_lazy()
    var_1.get_or_else(str_0)


def test_case_22():
    str_0 = "q\nyNJjoeLb'E"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.filter(str_0)
    bool_0 = False
    maybe_1 = module_0.Maybe(var_0, bool_0)
    bool_1 = var_0.__eq__(maybe_0)
    maybe_2 = module_0.Maybe(var_0, bool_0)
    maybe_1.filter(maybe_1)


def test_case_23():
    str_0 = "Left[T]"
    str_1 = "q\nyNJjoeLb'E"
    maybe_0 = module_0.Maybe(str_1, str_1)
    none_type_0 = None
    var_0 = maybe_0.get_or_else(none_type_0)
    var_1 = maybe_0.filter(str_0)
    var_2 = var_1.bind(str_1)
    var_3 = maybe_0.to_either()
    var_4 = maybe_0.to_box()
    bool_0 = True
    maybe_1 = module_0.Maybe(var_3, bool_0)
    var_5 = maybe_1.to_box()
    var_6 = var_3.to_box()
    maybe_2 = module_0.Maybe(var_0, str_0)
    bool_1 = maybe_1.__eq__(maybe_1)
    var_7 = maybe_1.get_or_else(maybe_0)
    var_8 = maybe_1.to_either()
    var_9 = maybe_2.bind(str_0)
    var_10 = var_9.filter(var_8)
    var_8.get_or_else(none_type_0)


def test_case_24():
    str_0 = "Left[T]"
    none_type_0 = None
    maybe_0 = module_0.Maybe(str_0, none_type_0)
    var_0 = maybe_0.to_validation()
    bool_0 = maybe_0.__eq__(maybe_0)
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    var_1 = maybe_1.map(var_0)
    var_2 = maybe_1.map(var_0)
    maybe_0.map(str_0)
