# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1


def test_case_0():
    bytes_0 = b'\x9b\x92\xe8\xec\x86\xc3=\x14\x8b"\xd9\xee\x8f\xbbF$\xcb\xe4d\xc4'
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    str_0 = "Az"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.filter(str_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    bool_1 = False
    var_1 = var_0.to_validation()
    maybe_1 = module_0.Maybe(str_0, bool_1)
    bool_2 = maybe_1.__eq__(var_0)
    var_2 = maybe_1.to_validation()
    maybe_1.filter(maybe_1)


def test_case_3():
    str_0 = "Az"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.filter(str_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_1 = var_0.to_validation()
    bool_1 = maybe_0.__eq__(bool_0)
    maybe_1 = module_0.Maybe(str_0, bool_1)
    bool_2 = maybe_1.__eq__(var_0)
    maybe_1.filter(var_1)


def test_case_4():
    none_type_0 = None
    str_0 = "j!wKOTKB}\x0bP]N=8>e"
    tuple_0 = (str_0,)
    bytes_0 = b"\x18\x91"
    str_1 = "87KC|o?4\t]%< [bP\\U"
    dict_0 = {bytes_0: str_1}
    bool_0 = True
    maybe_0 = module_0.Maybe(dict_0, bool_0)
    var_0 = maybe_0.map(tuple_0)
    maybe_1 = module_0.Maybe(var_0, str_0)
    var_1 = maybe_1.ap(none_type_0)


def test_case_5():
    bool_0 = True
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    none_type_0 = None
    int_0 = 0
    maybe_1 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_1.get_or_else(int_0)
    maybe_1.map(none_type_0)


def test_case_6():
    str_0 = "4(r"
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    bytes_0 = b"\xbaA"
    bool_1 = True
    maybe_1 = module_0.Maybe(bytes_0, bool_1)
    var_0 = maybe_1.bind(maybe_1)


def test_case_7():
    none_type_0 = None
    bytes_0 = b"\x9e\x89\x88\xd3m(\x1bp\x1e\x18\x98tuW&\x17"
    bool_0 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    maybe_0.bind(none_type_0)


def test_case_8():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    str_0 = "\n        Returns Lazy with function returning argument.\n\n        :param value: value to return by Lazy constructor_fn\n        :type value: Any\n        :returns: Lazy with function returning argument\n        :rtype: Lazy[Function() -> A]\n        "
    maybe_0.ap(str_0)


def test_case_9():
    bytes_0 = b"\x16\x80j6i\xd1\xcf"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.filter(bytes_0)


def test_case_10():
    bytes_0 = b"C:\xe9\xf8\xae\xac\x9a\xb2\xbd/"
    none_type_0 = None
    maybe_0 = module_0.Maybe(bytes_0, none_type_0)
    var_0 = maybe_0.to_box()
    bool_0 = True
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    var_1 = maybe_1.get_or_else(bytes_0)


def test_case_11():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    none_type_0 = None
    set_0 = set()
    maybe_0 = module_0.Maybe(none_type_0, set_0)
    var_0 = maybe_0.get_or_else(dict_0)


def test_case_12():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_either()


def test_case_13():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_lazy()
    var_2 = var_0.to_box()
    var_3 = var_2.to_lazy()
    var_1.get_or_else(none_type_0)


def test_case_14():
    str_0 = "#xo6\\+#"
    bytes_0 = b"\x16\x80j6i\xd1\xcf"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.filter(str_0)
    var_1 = var_0.to_box()


def test_case_15():
    int_0 = 2406
    str_0 = "z|c,x4dEm"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_validation()
    var_2 = var_1.to_box()
    var_2.bind(int_0)


def test_case_16():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_validation()
    var_2 = var_0.to_try()


def test_case_17():
    str_0 = "Az"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.filter(str_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_1 = maybe_0.to_try()
    var_2 = var_0.map(str_0)
    bool_1 = False
    var_3 = var_0.to_validation()
    maybe_1 = module_0.Maybe(str_0, bool_1)
    bool_2 = maybe_1.__eq__(var_0)
    var_4 = var_0.to_validation()
    var_5 = var_2.ap(var_4)
    maybe_1.filter(var_0)


def test_case_18():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_try()
    var_0.to_lazy()


def test_case_19():
    str_0 = "#xo6\\+#"
    bytes_0 = b"\x16\x80j6i\xd1\xcf"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.filter(str_0)
    generic_0 = module_1.Generic()
    var_1 = var_0.filter(generic_0)
    var_2 = var_0.get_or_else(generic_0)
    var_3 = var_1.to_box()
    var_4 = var_1.to_validation()
    var_3.filter(var_2)


def test_case_20():
    bool_0 = False
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_0, none_type_0)
    var_0 = maybe_0.to_validation()
    str_0 = "$(={i ]%"
    var_0.ap(str_0)


def test_case_21():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.ap(bool_0)
    var_1 = maybe_0.to_validation()
    bool_1 = True
    maybe_1 = module_0.Maybe(bool_0, bool_1)
    var_2 = maybe_1.to_validation()
    var_3 = maybe_0.bind(bool_1)
    var_4 = var_0.bind(var_0)
    var_5 = maybe_0.to_validation()
    var_6 = var_3.to_lazy()
    var_7 = var_0.to_try()
    none_type_0 = None
    var_8 = maybe_1.bind(bool_0)
    var_9 = var_8.ap(var_3)
    maybe_2 = module_0.Maybe(none_type_0, none_type_0)
    bool_2 = maybe_2.__eq__(maybe_2)
    var_10 = maybe_2.to_lazy()
    var_11 = var_10.to_either()
    var_11.filter(var_6)
