# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import typing as module_0
import pymonet.maybe as module_1


def test_case_0():
    generic_0 = module_0.Generic()
    maybe_0 = module_1.Maybe(generic_0, generic_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_1.Maybe(none_type_0, none_type_0)


def test_case_2():
    bytes_0 = b"z\\\xcc\xfe\xba\x1am%`\x87"
    maybe_0 = module_1.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.ap(bytes_0)
    bool_0 = var_0.__eq__(bytes_0)
    var_1 = maybe_0.filter(maybe_0)
    var_2 = maybe_0.bind(bytes_0)
    var_3 = maybe_0.to_box()


def test_case_3():
    generic_0 = module_0.Generic()
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_1.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.map(generic_0)
    var_1 = var_0.to_box()
    var_2 = var_1.to_lazy()
    maybe_1 = module_1.Maybe(generic_0, generic_0)


def test_case_4():
    str_0 = ".S`kLdj^`<,a"
    bool_0 = False
    maybe_0 = module_1.Maybe(str_0, bool_0)
    maybe_0.map(str_0)


def test_case_5():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_1.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_try()
    maybe_1 = module_1.Maybe(bool_0, bool_0)
    maybe_1.bind(none_type_0)


def test_case_6():
    none_type_0 = None
    none_type_1 = None
    maybe_0 = module_1.Maybe(none_type_1, none_type_1)
    maybe_0.ap(none_type_0)


def test_case_7():
    bytes_0 = b"z\\\xcc\xfe\xba\x1am%`\x87"
    maybe_0 = module_1.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.filter(maybe_0)
    var_1 = maybe_0.to_box()
    var_2 = maybe_0.to_try()


def test_case_8():
    float_0 = 2011.8615
    maybe_0 = module_1.Maybe(float_0, float_0)
    var_0 = maybe_0.to_box()
    list_0 = []
    var_1 = var_0.to_try()
    none_type_0 = None
    maybe_1 = module_1.Maybe(list_0, none_type_0)
    maybe_1.filter(var_0)


def test_case_9():
    bytes_0 = b"z\\\xcc\xfe\xba\x1am%`\x87"
    maybe_0 = module_1.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.ap(bytes_0)
    bool_0 = var_0.__eq__(bytes_0)
    var_1 = var_0.get_or_else(bool_0)
    var_2 = maybe_0.filter(var_0)
    var_3 = var_2.bind(var_0)
    var_4 = var_0.to_validation()
    var_5 = maybe_0.to_box()
    var_6 = maybe_0.to_try()


def test_case_10():
    str_0 = " Z7vB[*W*[e6;M=CDO"
    bool_0 = False
    list_0 = []
    bool_1 = False
    maybe_0 = module_1.Maybe(list_0, bool_1)
    var_0 = maybe_0.get_or_else(bool_0)
    var_0.get_or_else(str_0)


def test_case_11():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_1.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.filter(none_type_0)
    var_1 = var_0.to_validation()
    float_0 = -2946.8475
    var_2 = maybe_0.to_either()
    var_3 = var_2.ap(none_type_0)
    var_4 = var_1.to_box()
    maybe_1 = module_1.Maybe(float_0, var_2)
    var_5 = maybe_1.to_validation()
    var_6 = var_2.map(var_3)
    var_5.get_or_else(none_type_0)


def test_case_12():
    none_type_0 = None
    maybe_0 = module_1.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_either()
    maybe_0.filter(var_0)


def test_case_13():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_1.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_box()
    maybe_0.filter(none_type_0)


def test_case_14():
    bool_0 = True
    maybe_0 = module_1.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.to_try()
    bytes_0 = b"[\x81\x94\xbb\x8a\xa42\xe4\x82\x98_\x1d\x1d\xcaO"
    var_2 = var_0.ap(var_0)
    var_3 = var_2.map(var_1)
    str_0 = 'q2\x0bI[FA="dQf+g!9a'
    bool_1 = True
    var_4 = maybe_0.to_either()
    maybe_1 = module_1.Maybe(str_0, bool_1)
    var_5 = maybe_1.ap(bytes_0)
    var_6 = var_2.ap(var_0)
    var_6.to_box()


def test_case_15():
    int_0 = 0
    maybe_0 = module_1.Maybe(int_0, int_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.to_try()
    bool_0 = maybe_0.__eq__(var_1)
    var_2 = maybe_0.to_lazy()
    var_3 = maybe_0.to_try()
    maybe_0.ap(maybe_0)


def test_case_16():
    bytes_0 = b"\xdc"
    maybe_0 = module_1.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_try()


def test_case_17():
    int_0 = -183
    none_type_0 = None
    set_0 = set()
    bool_0 = True
    maybe_0 = module_1.Maybe(set_0, bool_0)
    var_0 = maybe_0.to_try()
    var_1 = var_0.bind(int_0)
    maybe_1 = module_1.Maybe(int_0, none_type_0)
    var_2 = maybe_1.to_try()
    var_2.to_try()


def test_case_18():
    bytes_0 = b"z\\\xcc\xfe\xba\x1am%`\x87"
    maybe_0 = module_1.Maybe(bytes_0, bytes_0)
    maybe_1 = module_1.Maybe(bytes_0, maybe_0)
    var_0 = maybe_0.ap(bytes_0)
    bool_0 = maybe_0.__eq__(var_0)
    var_1 = var_0.filter(maybe_0)
    var_2 = maybe_0.bind(var_0)
    var_3 = maybe_0.to_box()
    var_4 = maybe_0.map(var_3)
    var_5 = var_0.to_validation()


def test_case_19():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    maybe_0 = module_1.Maybe(dict_0, none_type_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.to_validation()
    maybe_0.filter(dict_0)


def test_case_20():
    bytes_0 = b"z\\\xcc\xfe\xba\x1am%`\x87"
    bytes_0.to_validation()


def test_case_21():
    bool_0 = False
    maybe_0 = module_1.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.bind(bool_0)
    var_2 = var_1.bind(bool_0)
    var_2.to_either()


def test_case_22():
    bytes_0 = b"z\\\xcc\xfe\xba\x1am%`\x87"
    maybe_0 = module_1.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.ap(bytes_0)
    bool_0 = maybe_0.__eq__(var_0)
    var_1 = var_0.filter(maybe_0)
    var_2 = maybe_0.bind(var_0)
    var_3 = maybe_0.to_box()
    var_4 = var_0.to_try()


def test_case_23():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_1.Maybe(none_type_0, bool_0)
    maybe_1 = module_1.Maybe(maybe_0, bool_0)
    none_type_1 = None
    maybe_2 = module_1.Maybe(none_type_1, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.bind(maybe_0)
    var_2 = var_1.to_try()
    bool_1 = maybe_2.__eq__(var_1)
    var_3 = maybe_2.to_box()
    var_4 = maybe_2.map(none_type_0)
    var_0.to_validation()


def test_case_24():
    bool_0 = False
    maybe_0 = module_1.Maybe(bool_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    maybe_0.map(bool_0)
