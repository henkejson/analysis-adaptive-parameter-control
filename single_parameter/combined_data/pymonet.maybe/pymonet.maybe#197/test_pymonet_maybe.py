# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_validation()
    var_2 = var_1.to_try()
    none_type_1 = None
    bytes_0 = b""
    set_0 = {bytes_0, bytes_0, bytes_0}
    maybe_1 = module_0.Maybe(set_0, set_0)
    var_3 = maybe_1.bind(var_2)
    var_4 = maybe_1.ap(none_type_1)


def test_case_3():
    str_0 = 'pt*Vg0B\tN"a+6jrX\no'
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.map(str_0)
    var_1 = var_0.to_try()
    var_1.to_either()


def test_case_4():
    list_0 = []
    maybe_0 = module_0.Maybe(list_0, list_0)
    var_0 = maybe_0.to_either()
    maybe_0.map(var_0)


def test_case_5():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_either()
    maybe_0.bind(none_type_0)


def test_case_6():
    bool_0 = True
    set_0 = set()
    bytes_0 = b";\xe0\xab\xb2\x16\xd1\xcaGq\x07\x10!*q\xa6/\x18\xab#\x8b"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    maybe_0 = module_0.Maybe(list_0, bytes_0)
    var_0 = maybe_0.ap(set_0)
    var_1 = var_0.to_validation()
    var_1.bind(bool_0)


def test_case_7():
    none_type_0 = None
    bool_0 = False
    bytes_0 = b"K'\x9ds\xe5T\x18c\x8ei"
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    maybe_0.ap(bytes_0)


def test_case_8():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    none_type_0 = None
    var_0 = maybe_0.get_or_else(none_type_0)
    var_1 = maybe_0.filter(var_0)
    var_0.to_lazy()


def test_case_9():
    str_0 = "w,zE"
    maybe_0 = module_0.Maybe(str_0, str_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    str_1 = "\n        Take function Function(A) -> B and returns new Lazy with mapped result of Lazy constructor function.\n        Both mapper end constructor will be called only during calling fold method.\n\n        :param mapper: mapper function\n        :type mapper: Function(A) -> B\n        :returns: Lazy with mapped value\n        :rtype: Lazy[Function() -> B)]\n        "
    var_0 = maybe_0.to_lazy()
    bool_1 = False
    var_1 = var_0.bind(var_0)
    maybe_1 = module_0.Maybe(str_1, bool_1)
    var_2 = maybe_0.bind(str_1)
    var_3 = maybe_1.get_or_else(str_1)
    maybe_1.filter(var_1)


def test_case_10():
    list_0 = []
    bytes_0 = b"5\xc6oJ7lF\x91\xc3\x12\xfc/\xd3\xb0\x0c"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_lazy()
    bool_0 = True
    maybe_1 = module_0.Maybe(bytes_0, bool_0)
    var_1 = maybe_1.get_or_else(list_0)


def test_case_11():
    str_0 = "S?l\x0c\x0cLLZ!B1^I'WQW]JY"
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    str_1 = "\n        Take filterer function, when monad is successfully call filterer with monad value.\n        When filterer returns True method returns copy of monad, othercase\n        not successfully Try with previous value.\n\n        :params filterer: function to apply on monad value\n        :type filterer: Function(A) -> Boolean\n        :returns: Try with previous value\n        :rtype: Try[A]\n        "
    var_0 = maybe_0.get_or_else(str_1)


def test_case_12():
    none_type_0 = None
    none_type_1 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_1, bool_0)
    var_0 = maybe_0.to_either()
    var_0.get_or_else(none_type_0)


def test_case_13():
    str_0 = "w,zE"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.filter(var_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_2 = maybe_0.to_box()
    str_1 = "\n        Take function Function(A) -> B and returns new Lazy with mapped result of Lazy constructor function.\n        Both mapper end constructor will be called only during calling fold method.\n\n        :param mapper: mapper function\n        :type mapper: Function(A) -> B\n        :returns: Lazy with mapped value\n        :rtype: Lazy[Function() -> B)]\n        "
    var_3 = maybe_0.to_lazy()
    bool_1 = True
    var_4 = var_3.bind(var_3)
    maybe_1 = module_0.Maybe(str_1, bool_1)
    var_5 = maybe_0.bind(str_1)
    var_6 = maybe_1.get_or_else(str_1)
    var_7 = maybe_1.filter(var_4)
    int_0 = 220
    var_8 = var_5.bind(int_0)
    var_6.to_either()


def test_case_14():
    bool_0 = True
    bool_1 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_0, none_type_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_either()
    bool_2 = True
    maybe_1 = module_0.Maybe(bool_1, bool_2)
    var_2 = maybe_1.get_or_else(bool_0)
    var_2.get_or_else(maybe_1)


def test_case_15():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    none_type_1 = None
    maybe_1 = module_0.Maybe(none_type_1, none_type_1)
    var_0 = maybe_0.to_lazy()
    maybe_1.filter(var_0)


def test_case_16():
    bool_0 = False
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_0, none_type_0)
    var_0 = maybe_0.to_try()


def test_case_17():
    float_0 = -3569.88888
    bool_0 = True
    maybe_0 = module_0.Maybe(float_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = var_0.to_try()


def test_case_18():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_validation()


def test_case_19():
    str_0 = "w,zE"
    maybe_0 = module_0.Maybe(str_0, str_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    str_1 = "\n        Take function Function(A) -> B and returns new Lazy with mapped result of Lazy constructor function.\n        Both mapper end constructor will be called only during calling fold method.\n\n        :param mapper: mapper function\n        :type mapper: Function(A) -> B\n        :returns: Lazy with mapped value\n        :rtype: Lazy[Function() -> B)]\n        "
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.bind(var_0)
    var_2 = var_0.to_try()
    var_3 = maybe_0.bind(str_1)
    var_1.get_or_else(str_1)


def test_case_20():
    float_0 = 217.91
    none_type_0 = None
    maybe_0 = module_0.Maybe(float_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_box()
    var_1.get_or_else(float_0)


def test_case_21():
    str_0 = "w,yzE"
    maybe_0 = module_0.Maybe(str_0, str_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    str_1 = "\n=       Take function Function(A) -> B and returns new Lazy with mapped result of Lazy constructor function.\n        Both mapper end constructor will be called only during calling fold method.\n\n        :param mapper: mapper function\n        :type mapper: Function(A) -> B\n        :returns: Lazy with mapped value\n        :rtype: Lazy[Function() -> B)]\n        "
    var_0 = maybe_0.to_try()
    bool_1 = True
    maybe_1 = module_0.Maybe(str_1, bool_1)
    var_1 = maybe_0.bind(str_1)
    var_2 = maybe_1.get_or_else(str_1)
    var_3 = maybe_1.filter(var_0)
    var_2.to_either()


def test_case_22():
    str_0 = "w,zE"
    maybe_0 = module_0.Maybe(str_0, str_0)
    bool_0 = True
    maybe_1 = module_0.Maybe(maybe_0, bool_0)
    bool_1 = maybe_0.__eq__(str_0)
    int_0 = 1970
    var_0 = maybe_0.to_lazy()
    bool_2 = True
    var_1 = maybe_0.to_lazy()
    var_2 = maybe_1.bind(var_0)
    maybe_2 = module_0.Maybe(int_0, bool_1)
    var_3 = var_2.bind(int_0)
    none_type_0 = None
    var_4 = maybe_1.get_or_else(none_type_0)
    var_5 = var_2.filter(var_4)
    var_6 = var_5.bind(bool_2)
    var_7 = var_2.to_either()


def test_case_23():
    str_0 = "w,zE"
    maybe_0 = module_0.Maybe(str_0, str_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.ap(maybe_0)
    bool_1 = maybe_0.__eq__(var_0)
    var_1 = maybe_0.to_lazy()
    var_2 = var_1.bind(var_0)
    maybe_1 = module_0.Maybe(var_0, var_0)
    var_3 = var_0.bind(var_2)
    var_4 = var_3.bind(var_2)
    var_5 = maybe_0.get_or_else(var_2)
    var_6 = var_4.filter(var_0)
    var_7 = var_5.bind(maybe_0)
    str_1 = "xwP@d[-2Kio1"
    var_8 = var_6.filter(str_1)
    var_9 = var_8.to_either()
    var_10 = var_6.bind(var_5)
    var_11 = var_0.to_either()
    var_12 = var_4.to_validation()
    var_13 = var_8.ap(var_0)
    var_5.to_lazy()
