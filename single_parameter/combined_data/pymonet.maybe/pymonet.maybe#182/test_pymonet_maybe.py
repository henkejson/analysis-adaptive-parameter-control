# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1


def test_case_0():
    complex_0 = 666.2506 - 2204j
    maybe_0 = module_0.Maybe(complex_0, complex_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = maybe_0.__eq__(bool_0)


def test_case_3():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_1 = maybe_0.map(bool_0)


def test_case_4():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    maybe_0.map(var_0)


def test_case_5():
    int_0 = 1
    list_0 = [int_0]
    bool_0 = True
    maybe_0 = module_0.Maybe(list_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.filter(var_0)
    var_2 = maybe_0.to_validation()
    var_3 = maybe_0.get_or_else(maybe_0)
    var_4 = maybe_0.bind(var_3)
    var_5 = var_4.filter(var_3)
    var_6 = var_5.map(var_3)


def test_case_6():
    bytes_0 = b"*\x03\x1dA\x15\xb1H~\xdd\xf0S\xa1 \xbe\xa7\x8d\xf0\xe3z\xfc"
    bool_0 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(bool_1, bool_1)
    var_0 = maybe_1.to_either()
    var_1 = maybe_1.to_either()
    var_2 = var_0.to_box()
    var_3 = var_0.to_lazy()
    maybe_1.bind(var_2)


def test_case_7():
    list_0 = []
    int_0 = 1
    list_1 = [int_0]
    bool_0 = True
    maybe_0 = module_0.Maybe(list_1, bool_0)
    var_0 = maybe_0.ap(list_1)
    var_1 = maybe_0.filter(list_0)
    maybe_1 = module_0.Maybe(var_1, list_0)


def test_case_8():
    int_0 = 0
    str_0 = "Fist[value={}]"
    maybe_0 = module_0.Maybe(int_0, int_0)
    maybe_0.ap(str_0)


def test_case_9():
    list_0 = []
    int_0 = 1
    list_1 = [int_0]
    bool_0 = True
    maybe_0 = module_0.Maybe(list_1, bool_0)
    var_0 = maybe_0.filter(list_0)
    maybe_1 = module_0.Maybe(var_0, list_0)


def test_case_10():
    none_type_0 = None
    generic_0 = module_1.Generic()
    bool_0 = True
    maybe_0 = module_0.Maybe(generic_0, bool_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.ap(none_type_0)


def test_case_11():
    bool_0 = False
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_box()
    var_0.ap(bool_0)


def test_case_12():
    bytes_0 = b"\xfev\xa5\xbc\x99z\xb8\xac\xe1\x1c\xcf\xa7\x90\x03"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_lazy()


def test_case_13():
    list_0 = []
    int_0 = 1
    list_1 = [int_0]
    bool_0 = True
    maybe_0 = module_0.Maybe(list_1, bool_0)
    var_0 = maybe_0.to_lazy()
    maybe_1 = module_0.Maybe(var_0, list_0)
    bool_1 = maybe_0.__eq__(list_1)
    generic_0 = module_1.Generic()
    bool_2 = var_0.__eq__(generic_0)
    var_1 = maybe_0.filter(var_0)
    maybe_2 = module_0.Maybe(generic_0, list_0)
    var_2 = maybe_2.to_either()
    var_3 = var_0.to_either()
    var_4 = maybe_1.to_lazy()
    var_3.filter(bool_0)


def test_case_14():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.filter(none_type_0)
    var_1 = var_0.to_try()
    var_1.to_box()


def test_case_15():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_try()
    maybe_1 = module_0.Maybe(var_0, maybe_0)


def test_case_16():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = var_0.to_try()
    var_0.to_validation()


def test_case_17():
    generic_0 = module_1.Generic()
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_either()
    var_2 = var_0.map(generic_0)
    var_3 = var_2.to_try()
    var_4 = var_3.bind(generic_0)
    var_2.get_or_else(var_3)


def test_case_18():
    int_0 = 1
    bytes_0 = b"\x9b\x8d\n\xce\xaa7\x89\x14&K4\x84\xc3"
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.filter(bytes_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(int_0, none_type_0)
    maybe_1.filter(none_type_0)


def test_case_19():
    int_0 = 1
    bytes_0 = b"\x9b\x8d\n\xce\xaa7\x89\x14&K4\x84\xc3"
    bytes_1 = b"\x14\x81\xe8\xb4\x96\xb0\r"
    set_0 = {bytes_1}
    bool_0 = True
    maybe_0 = module_0.Maybe(set_0, bool_0)
    var_0 = maybe_0.filter(bytes_0)
    maybe_1 = module_0.Maybe(int_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    var_1 = var_0.to_either()
    var_2 = maybe_0.to_either()
    var_3 = var_1.map(var_1)
    var_4 = maybe_0.to_box()


def test_case_20():
    list_0 = []
    int_0 = 1
    list_1 = [int_0]
    bool_0 = True
    maybe_0 = module_0.Maybe(list_1, bool_0)
    var_0 = maybe_0.to_lazy()
    maybe_1 = module_0.Maybe(var_0, list_0)
    bool_1 = maybe_0.__eq__(list_1)
    generic_0 = module_1.Generic()
    bool_2 = var_0.__eq__(generic_0)
    var_1 = maybe_0.filter(var_0)
    var_2 = var_0.to_either()
    var_3 = var_0.to_either()
    var_3.filter(bool_0)


def test_case_21():
    none_type_0 = None
    int_0 = 1
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_box()
    bool_1 = var_0.__eq__(int_0)
    bytes_0 = b"\x9b\x8d\n\xce\xaa7\x89\x14&K4\x84\xc3"
    bytes_1 = b"\x14\x81\xe8\xb4\x96\xb0\r"
    bool_2 = maybe_0.__eq__(bool_0)
    var_1 = maybe_0.filter(bytes_0)
    maybe_1 = module_0.Maybe(int_0, bool_2)
    bool_3 = maybe_1.__eq__(maybe_1)
    str_0 = "?8$\n["
    maybe_2 = module_0.Maybe(str_0, var_0)
    var_2 = maybe_1.to_either()
    maybe_3 = module_0.Maybe(none_type_0, var_0)
    bytes_1.map(bytes_1)


def test_case_22():
    bool_0 = True
    bool_1 = True
    complex_0 = 272.4 + 869.2916j
    maybe_0 = module_0.Maybe(bool_1, bool_0)
    var_0 = maybe_0.bind(maybe_0)
    var_1 = maybe_0.to_either()
    var_2 = maybe_0.to_validation()
    var_3 = var_1.to_box()
    var_4 = var_1.map(var_3)
    bool_2 = var_2.__eq__(var_1)
    var_5 = maybe_0.bind(complex_0)
    int_0 = 1966
    maybe_1 = module_0.Maybe(int_0, int_0)
    var_6 = maybe_1.bind(var_1)
    var_7 = var_5.to_lazy()
    var_8 = var_1.to_try()
    var_9 = maybe_1.to_validation()
    var_10 = var_6.ap(var_3)
    bool_3 = var_5.__eq__(var_10)
    var_11 = var_6.bind(bool_1)
    var_12 = var_6.bind(var_6)
    var_13 = maybe_1.filter(var_7)
    var_14 = var_9.to_box()
    var_15 = var_13.to_try()
    bool_4 = var_13.__eq__(maybe_1)
    var_9.map(var_0)
