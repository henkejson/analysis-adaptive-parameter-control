# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    str_0 = '0YRbDPS*C%m%_"N~lDd'
    maybe_0 = module_0.Maybe(str_0, str_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    bool_0 = True
    int_0 = 1
    maybe_0 = module_0.Maybe(bool_0, int_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.to_either()
    var_2 = var_0.to_box()
    var_3 = maybe_0.get_or_else(bool_0)
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    bool_1 = maybe_1.__eq__(maybe_1)
    var_4 = maybe_1.to_validation()
    var_4.map(var_2)


def test_case_3():
    bool_0 = False
    str_0 = '9"'
    maybe_0 = module_0.Maybe(str_0, str_0)
    bool_1 = maybe_0.__eq__(bool_0)
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    maybe_1.ap(bool_0)


def test_case_4():
    str_0 = "\n        Return monad value.\n\n        :returns: monad value\n        :rtype: A\n        "
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.to_either()
    none_type_0 = None
    var_2 = maybe_0.map(none_type_0)
    bool_1 = var_1.__eq__(str_0)
    var_3 = var_2.ap(bool_1)
    var_4 = maybe_0.filter(var_1)
    var_5 = maybe_0.map(none_type_0)
    var_6 = var_5.to_box()


def test_case_5():
    bool_0 = False
    bool_1 = False
    tuple_0 = (bool_1,)
    maybe_0 = module_0.Maybe(tuple_0, bool_1)
    maybe_0.map(bool_0)


def test_case_6():
    str_0 = "sz;V_\t>"
    none_type_0 = None
    maybe_0 = module_0.Maybe(str_0, none_type_0)
    maybe_1 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_1.map(maybe_1)
    var_1 = var_0.bind(none_type_0)
    var_2 = var_0.filter(str_0)
    maybe_0.filter(maybe_0)


def test_case_7():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_try()
    bytes_0 = b"\xaf\xd5\xa8\x89AX\xb3\xac^\xe9\xbb\xae\xd4\x85\x08\xa9"
    tuple_0 = (bytes_0,)
    list_0 = [tuple_0, bytes_0, bool_0]
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    maybe_1.bind(list_0)


def test_case_8():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    maybe_0.ap(bool_0)


def test_case_9():
    none_type_0 = None
    float_0 = -2942.55243
    set_0 = {float_0}
    bool_0 = False
    maybe_0 = module_0.Maybe(float_0, bool_0)
    maybe_1 = module_0.Maybe(set_0, set_0)
    var_0 = maybe_1.filter(none_type_0)
    var_1 = maybe_1.get_or_else(none_type_0)
    var_1.to_lazy()


def test_case_10():
    int_0 = 1337
    none_type_0 = None
    str_0 = "\n        Return monad value.\n\n        :returns: monad value\n        :rtype: A\n        "
    bool_0 = False
    complex_0 = 1518 - 1810.714j
    maybe_0 = module_0.Maybe(int_0, complex_0)
    maybe_1 = module_0.Maybe(none_type_0, maybe_0)
    var_0 = maybe_1.to_lazy()
    maybe_2 = module_0.Maybe(str_0, bool_0)
    var_1 = maybe_1.to_either()
    var_2 = maybe_2.get_or_else(none_type_0)
    var_3 = maybe_1.get_or_else(none_type_0)
    var_3.to_try()


def test_case_11():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_either()
    var_0.filter(none_type_0)


def test_case_12():
    set_0 = set()
    maybe_0 = module_0.Maybe(set_0, set_0)
    var_0 = maybe_0.to_box()


def test_case_13():
    bytes_0 = b"\x1c\x13\x10N\xdeB\xe6\x1fa\xb5L\x99\xe2"
    str_0 = "T<&Ux"
    set_0 = {str_0}
    bool_0 = True
    maybe_0 = module_0.Maybe(set_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_validation()
    var_1.filter(bytes_0)


def test_case_14():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    bool_0 = False
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    var_1 = maybe_1.to_validation()
    var_1.get_or_else(bool_0)


def test_case_15():
    complex_0 = 475.515236 - 1081.4j
    dict_0 = {complex_0: complex_0, complex_0: complex_0}
    maybe_0 = module_0.Maybe(dict_0, complex_0)
    var_0 = maybe_0.to_try()


def test_case_16():
    none_type_0 = None
    str_0 = "Q4L-e?7+]!<+{!I|"
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.ap(none_type_0)
    var_1 = var_0.to_validation()
    bool_1 = False
    maybe_1 = module_0.Maybe(bool_1, bool_1)
    maybe_2 = module_0.Maybe(maybe_1, bool_1)
    var_2 = maybe_2.to_try()
    var_2.ap(var_1)


def test_case_17():
    none_type_0 = None
    str_0 = "\n        :param value: value to store in Box\n        :type value: Any\n        "
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_0.filter(none_type_0)


def test_case_18():
    complex_0 = 475.515236 - 1081.4j
    complex_0.to_try()


def test_case_19():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.to_try()
    var_2 = maybe_0.to_lazy()
    var_3 = var_2.map(bool_0)
    var_3.to_validation()


def test_case_20():
    tuple_0 = ()
    maybe_0 = module_0.Maybe(tuple_0, tuple_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_validation()
    var_1 = var_0.to_try()
    var_2 = maybe_0.to_either()
    var_3 = var_0.to_lazy()
    var_4 = maybe_0.to_either()
    var_5 = maybe_0.to_lazy()
    var_4.filter(var_5)


def test_case_21():
    bytes_0 = b"\t2\x15^`b\x8b\xecg\x974Z\x87\xf1\xf2n\xee-"
    str_0 = "sz;V_\t>"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.map(maybe_0)
    var_1 = var_0.bind(bytes_0)
    var_2 = var_1.to_lazy()
    var_3 = var_0.to_either()
    var_4 = var_0.to_box()
    maybe_1 = module_0.Maybe(var_2, bytes_0)
    maybe_2 = module_0.Maybe(var_0, var_2)
    var_5 = var_2.to_validation()
    maybe_3 = module_0.Maybe(var_3, var_3)
    bool_0 = var_0.__eq__(maybe_2)
    var_6 = var_0.to_either()
    var_7 = var_1.bind(var_6)
    var_8 = var_5.to_box()
    var_9 = var_4.to_validation()
    var_10 = var_6.to_box()
    var_11 = maybe_0.filter(var_10)


def test_case_22():
    str_0 = "sz;V_\t>"
    none_type_0 = None
    maybe_0 = module_0.Maybe(str_0, none_type_0)
    maybe_1 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_1.map(maybe_1)
    var_1 = var_0.filter(str_0)
    var_2 = var_1.to_try()
    maybe_0.filter(maybe_0)
