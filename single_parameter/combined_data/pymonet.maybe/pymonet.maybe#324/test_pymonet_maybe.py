# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import builtins as module_1


def test_case_0():
    str_0 = "pWys<*LX\x0b]|s;J-,EQ"
    var_0 = module_0.Maybe(str_0, str_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    bytes_0 = b"D_}\x9e\x95\xdd\xf3T\xf60\xad"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.filter(bytes_0)
    bool_0 = var_0.__eq__(maybe_0)
    var_1 = var_0.map(bool_0)
    var_2 = var_1.to_try()
    var_3 = var_1.ap(var_2)
    var_4 = var_2.map(var_3)
    var_5 = maybe_0.ap(maybe_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    var_6 = var_3.to_validation()
    maybe_1.filter(var_3)


def test_case_3():
    bytes_0 = b"\x86\xcf_}\x9e\x95\xdd\x19T\xf60\xfc\xad"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.filter(bytes_0)
    var_2 = var_1.to_either()
    maybe_1 = module_0.Maybe(var_1, var_1)
    bool_0 = maybe_1.__eq__(var_2)
    var_3 = maybe_1.filter(var_1)
    var_4 = var_3.to_box()
    var_4.to_box()


def test_case_4():
    object_0 = module_1.object()
    bool_0 = True
    maybe_0 = module_0.Maybe(object_0, bool_0)
    var_0 = maybe_0.map(object_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(object_0, bool_1)
    var_1 = maybe_1.to_validation()
    maybe_1.filter(var_1)


def test_case_5():
    tuple_0 = ()
    maybe_0 = module_0.Maybe(tuple_0, tuple_0)
    bool_0 = True
    var_0 = maybe_0.get_or_else(bool_0)
    bool_1 = False
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, bool_1)
    var_1 = maybe_1.to_validation()
    maybe_1.ap(maybe_1)


def test_case_6():
    float_0 = 1692.20674
    none_type_0 = None
    none_type_1 = None
    maybe_0 = module_0.Maybe(none_type_1, float_0)
    var_0 = maybe_0.bind(none_type_0)
    int_0 = 1171
    maybe_1 = module_0.Maybe(int_0, int_0)
    var_1 = maybe_1.to_box()
    var_1.map(maybe_1)


def test_case_7():
    bytes_0 = b"\x99"
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.map(bytes_0)
    var_1 = var_0.to_try()
    dict_0 = {}
    none_type_0 = None
    maybe_1 = module_0.Maybe(dict_0, none_type_0)
    var_2 = maybe_1.ap(var_1)
    var_3 = var_2.filter(var_1)
    var_4 = maybe_1.to_validation()
    maybe_1.bind(var_1)


def test_case_8():
    object_0 = module_1.object()
    bool_0 = True
    maybe_0 = module_0.Maybe(object_0, bool_0)
    var_0 = maybe_0.ap(object_0)
    var_1 = var_0.map(object_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(object_0, bool_1)
    var_2 = maybe_1.to_validation()
    maybe_1.filter(var_2)


def test_case_9():
    str_0 = "\n        Take function (A) -> B and applied this function on current Validation value.\n\n        :param mapper: mapper function\n        :type mapper: Function(A) -> B\n        :returns: new Validation with mapped value and previous errors\n        :rtype: Validation[B, List[E]]\n        "
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    str_1 = "2V wj5T/qA|-sUy`=V$\x0c"
    var_0 = maybe_0.to_either()
    maybe_0.ap(str_1)


def test_case_10():
    object_0 = module_1.object()
    bool_0 = True
    maybe_0 = module_0.Maybe(object_0, bool_0)
    var_0 = maybe_0.ap(object_0)
    var_1 = maybe_0.filter(var_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(object_0, bool_1)
    var_2 = maybe_1.to_validation()
    maybe_1.filter(var_2)


def test_case_11():
    int_0 = -504
    int_1 = 0
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = True
    maybe_1 = module_0.Maybe(bool_1, bool_1)
    var_0 = maybe_1.get_or_else(bool_1)
    var_1 = maybe_1.filter(int_1)
    var_2 = var_1.filter(none_type_0)
    var_3 = var_1.filter(int_0)
    var_4 = maybe_0.map(var_0)
    var_5 = maybe_1.to_either()


def test_case_12():
    list_0 = []
    maybe_0 = module_0.Maybe(list_0, list_0)
    var_0 = maybe_0.get_or_else(list_0)
    maybe_1 = module_0.Maybe(list_0, list_0)
    var_1 = maybe_1.to_either()
    maybe_1.filter(var_1)


def test_case_13():
    int_0 = -1763
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.to_box()
    var_0.ap(var_0)


def test_case_14():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_either()
    var_0.bind(var_1)


def test_case_15():
    bool_0 = True
    str_0 = "UpWys<*LX\x0b]|sE;J-,EQ"
    list_0 = [bool_0, str_0, bool_0]
    maybe_0 = module_0.Maybe(list_0, str_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_validation()
    var_2 = var_1.to_either()


def test_case_16():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    bool_0 = False
    var_1 = var_0.bind(var_0)
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    var_2 = maybe_1.ap(var_0)
    var_3 = maybe_0.to_try()
    var_2.to_lazy()


def test_case_17():
    bytes_0 = b"\xa9\n\xd4hL\n\x97\xfc\x0b\x11"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_try()


def test_case_18():
    float_0 = -435.1199
    none_type_0 = None
    maybe_0 = module_0.Maybe(float_0, none_type_0)
    var_0 = maybe_0.to_try()
    var_0.to_try()


def test_case_19():
    none_type_0 = None
    int_0 = 3309
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.to_validation()
    var_0.ap(none_type_0)


def test_case_20():
    str_0 = "UpWys<*LX\x0b]|sE;J-,EQ"
    str_0.to_either()


def test_case_21():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.to_try()
    var_1.to_try()


def test_case_22():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.to_lazy()
    var_2 = maybe_0.to_lazy()
    var_3 = var_1.to_try()
    var_3.to_try()
