# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1


def test_case_0():
    float_0 = 92.1
    maybe_0 = module_0.Maybe(float_0, float_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.get_or_else(none_type_0)


def test_case_3():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = maybe_0.__eq__(none_type_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(none_type_0, bool_1)
    var_0 = maybe_1.to_try()
    var_0.to_try()


def test_case_4():
    none_type_0 = None
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    bool_1 = True
    maybe_0 = module_0.Maybe(dict_0, bool_1)
    var_0 = maybe_0.map(none_type_0)
    var_1 = var_0.to_box()
    var_2 = var_1.to_try()
    var_2.to_lazy()


def test_case_5():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = maybe_0.__eq__(none_type_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(none_type_0, bool_1)
    var_0 = maybe_1.to_try()
    maybe_0.map(var_0)


def test_case_6():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_lazy()
    none_type_0 = None
    bool_1 = True
    maybe_1 = module_0.Maybe(none_type_0, bool_1)
    var_1 = maybe_1.bind(var_0)


def test_case_7():
    float_0 = -1771.3
    bool_0 = False
    dict_0 = {float_0: bool_0}
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.bind(dict_0)


def test_case_8():
    float_0 = 1745.7904
    bool_0 = True
    maybe_0 = module_0.Maybe(float_0, bool_0)
    var_0 = maybe_0.ap(maybe_0)
    var_1 = maybe_0.to_validation()
    var_2 = var_1.to_try()
    var_2.to_lazy()


def test_case_9():
    none_type_0 = None
    none_type_1 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_1, bool_0)
    maybe_0.ap(none_type_0)


def test_case_10():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_1.to_try()
    var_1 = maybe_1.to_either()
    var_2 = var_1.to_box()
    var_3 = maybe_1.filter(maybe_0)


def test_case_11():
    bytes_0 = b"\xe5\x93\x97ks\xb7U\xf6"
    list_0 = [bytes_0, bytes_0]
    int_0 = 3647
    bool_0 = False
    maybe_0 = module_0.Maybe(int_0, bool_0)
    maybe_0.filter(list_0)


def test_case_12():
    int_0 = -569
    bool_0 = False
    float_0 = 237.0
    bool_1 = True
    maybe_0 = module_0.Maybe(float_0, bool_1)
    var_0 = maybe_0.get_or_else(bool_0)
    var_0.bind(int_0)


def test_case_13():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.get_or_else(maybe_0)
    var_0.bind(var_1)


def test_case_14():
    generic_0 = module_1.Generic()
    int_0 = 4042
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_either()
    var_0.get_or_else(int_0)


def test_case_15():
    bytes_0 = b"\x87T\xd1\x14\r\xceK0\xd4\xe7\xf0\xe4\\\xf9"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    tuple_0 = ()
    maybe_0 = module_0.Maybe(tuple_0, tuple_0)
    var_0 = maybe_0.to_box()
    var_0.map(dict_0)


def test_case_16():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.to_try()
    var_2 = maybe_0.to_lazy()
    var_3 = var_2.ap(none_type_0)
    var_4 = var_2.to_try()
    var_3.to_box()


def test_case_17():
    float_0 = 1908.7
    bool_0 = True
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_try()
    bool_2 = var_0.__eq__(float_0)


def test_case_18():
    bool_0 = False
    float_0 = 1707.716
    dict_0 = {float_0: float_0}
    maybe_0 = module_0.Maybe(dict_0, float_0)
    var_0 = maybe_0.to_validation()
    var_0.get_or_else(bool_0)


def test_case_19():
    bool_0 = True
    float_0 = 1454.2
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    bool_2 = True
    maybe_1 = module_0.Maybe(maybe_0, bool_2)
    var_0 = maybe_0.to_validation()
    int_0 = -3741
    maybe_2 = module_0.Maybe(float_0, int_0)
    maybe_3 = module_0.Maybe(int_0, int_0)
    var_1 = maybe_3.to_either()
    var_2 = var_1.bind(float_0)
    var_3 = var_2.to_box()
    var_3.map(bool_0)


def test_case_20():
    float_0 = -266.439934
    maybe_0 = module_0.Maybe(float_0, float_0)
    var_0 = maybe_0.to_lazy()
    bool_0 = maybe_0.__eq__(float_0)
    var_1 = var_0.ap(maybe_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    var_2 = maybe_0.to_box()
    bool_2 = var_0.__eq__(bool_1)
    bool_3 = maybe_0.__eq__(maybe_0)
    var_3 = maybe_0.to_either()
    list_0 = []
    maybe_1 = module_0.Maybe(list_0, var_1)
    var_4 = maybe_1.to_try()
    var_5 = var_0.to_try()
    var_4.to_either()


def test_case_21():
    float_0 = -266.439934
    maybe_0 = module_0.Maybe(float_0, float_0)
    var_0 = maybe_0.to_lazy()
    bool_0 = maybe_0.__eq__(float_0)
    bool_1 = var_0.to_validation()
    var_1 = maybe_0.to_box()
    float_1 = -205.943
    bool_2 = var_0.__eq__(bool_1)
    bool_3 = maybe_0.__eq__(maybe_0)
    var_2 = maybe_0.filter(bool_3)
    var_3 = var_2.get_or_else(var_0)
    var_4 = var_2.to_either()
    var_5 = var_4.to_box()
    bool_4 = False
    maybe_1 = module_0.Maybe(float_1, bool_4)
    var_6 = var_4.to_lazy()
    var_7 = maybe_0.to_try()
    bool_5 = maybe_1.__eq__(maybe_0)
    var_8 = maybe_0.to_try()
    var_9 = var_4.map(var_4)
    var_10 = var_7.map(maybe_0)
    var_11 = maybe_0.to_try()
    var_12 = var_4.to_lazy()


def test_case_22():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_lazy()
    none_type_0 = None
    bool_1 = False
    maybe_1 = module_0.Maybe(none_type_0, bool_1)
    bool_2 = maybe_1.__eq__(maybe_1)
    var_1 = module_0.Maybe(var_0, var_0)
    maybe_2 = module_0.Maybe(var_0, bool_1)
    maybe_1.map(var_0)
