# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1


def test_case_0():
    int_0 = 1078
    maybe_0 = module_0.Maybe(int_0, int_0)


def test_case_1():
    bytes_0 = b""
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)


def test_case_2():
    float_0 = -47.6723
    bool_0 = True
    maybe_0 = module_0.Maybe(float_0, bool_0)
    var_0 = maybe_0.filter(float_0)
    bool_1 = False
    var_1 = var_0.map(bool_1)
    maybe_1 = module_0.Maybe(bool_1, bool_1)
    maybe_1.filter(maybe_1)


def test_case_3():
    bool_0 = False
    float_0 = 2440.0
    bool_1 = False
    maybe_0 = module_0.Maybe(float_0, bool_1)
    maybe_0.map(bool_0)


def test_case_4():
    bool_0 = True
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_1, bool_0)
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    maybe_2 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_2.to_box()
    var_1 = maybe_2.filter(var_0)
    var_2 = var_1.to_box()
    var_3 = maybe_2.map(var_0)
    var_4 = var_3.get_or_else(var_0)
    bool_2 = maybe_0.__eq__(var_1)
    var_5 = maybe_2.map(bool_0)
    var_6 = var_5.map(var_3)
    var_7 = maybe_2.ap(var_6)
    var_8 = var_3.bind(maybe_1)


def test_case_5():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.bind(bool_0)


def test_case_6():
    int_0 = 1178
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.ap(var_0)
    var_2 = maybe_0.to_box()
    var_3 = var_2.to_either()
    var_3.to_either()


def test_case_7():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_validation()
    maybe_0.ap(none_type_0)


def test_case_8():
    generic_0 = module_1.Generic()
    set_0 = set()
    bool_0 = True
    maybe_0 = module_0.Maybe(set_0, bool_0)
    var_0 = maybe_0.filter(generic_0)


def test_case_9():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.filter(bool_0)
    bool_1 = var_0.__eq__(bool_0)
    maybe_1 = module_0.Maybe(bool_1, bool_1)
    maybe_1.filter(maybe_1)


def test_case_10():
    str_0 = "~nD"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.get_or_else(maybe_0)


def test_case_11():
    bool_0 = False
    var_0 = module_0.Maybe(bool_0, bool_0)
    var_1 = var_0.get_or_else(var_0)


def test_case_12():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    maybe_2 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_2.to_box()
    var_1 = maybe_2.filter(var_0)
    var_2 = var_1.to_box()
    var_3 = maybe_2.map(var_0)
    var_4 = var_3.get_or_else(var_0)
    bool_1 = maybe_0.__eq__(var_1)
    var_5 = maybe_2.map(bool_1)
    var_6 = maybe_2.to_either()


def test_case_13():
    bool_0 = False
    str_0 = "Tu"
    float_0 = 2717.874229
    none_type_0 = None
    maybe_0 = module_0.Maybe(float_0, none_type_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_box()
    var_2 = var_1.to_try()
    bool_1 = True
    maybe_1 = module_0.Maybe(bool_1, bool_1)
    var_3 = maybe_1.map(var_2)
    var_4 = var_3.to_lazy()
    var_5 = var_4.to_either()
    var_6 = var_5.to_try()
    var_7 = var_6.get_or_else(str_0)
    var_7.map(bool_0)


def test_case_14():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_box()


def test_case_15():
    bytes_0 = b"\xfduH~\xb0\xf3\xc2\xd85\x9d\xcb"
    bool_0 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    maybe_1 = module_0.Maybe(maybe_0, maybe_0)
    var_0 = maybe_1.to_lazy()
    var_0.to_lazy()


def test_case_16():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_either()
    var_2 = var_1.to_try()
    str_0 = "S"
    int_0 = 667
    list_0 = [str_0, str_0, str_0, int_0]
    maybe_1 = module_0.Maybe(str_0, list_0)
    var_3 = maybe_1.to_validation()
    var_3.filter(str_0)


def test_case_17():
    bytes_0 = b'A"\xbc\x0b\xe00*\x17\xf9e\xcc\x9d\xe3\x81\xf2;\x0e'
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_try()
    var_0.to_lazy()


def test_case_18():
    generic_0 = module_1.Generic()
    set_0 = set()
    bool_0 = True
    maybe_0 = module_0.Maybe(set_0, bool_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_1.to_try()
    var_1 = maybe_0.to_validation()
    var_2 = maybe_0.to_try()
    maybe_1.filter(var_2)


def test_case_19():
    bool_0 = True
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_1, bool_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.filter(var_0)
    var_2 = maybe_0.to_validation()


def test_case_20():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    maybe_2 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_2.to_box()
    var_1 = maybe_2.filter(var_0)
    var_2 = var_1.to_box()
    var_3 = maybe_2.map(var_0)
    var_4 = var_3.get_or_else(var_0)
    bool_1 = maybe_0.__eq__(var_1)
    var_5 = maybe_2.map(bool_1)


def test_case_21():
    none_type_0 = None
    bool_0 = True
    bool_1 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_1)
    var_0 = maybe_0.to_box()
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    var_1 = maybe_1.bind(var_0)
    maybe_2 = module_0.Maybe(bool_0, bool_0)
    var_2 = maybe_2.to_box()
    var_3 = var_0.to_lazy()
    var_4 = maybe_2.filter(var_2)
    var_5 = var_4.to_box()
    var_6 = maybe_2.map(var_2)
    var_7 = maybe_1.get_or_else(none_type_0)
    var_8 = maybe_0.bind(var_2)
    var_9 = var_1.to_validation()
    var_10 = maybe_2.map(bool_0)
    var_11 = var_10.map(var_6)
    var_12 = maybe_2.to_either()
    var_13 = var_1.ap(var_5)
    var_14 = maybe_2.ap(none_type_0)
    var_15 = var_2.ap(var_12)
    var_16 = var_2.to_try()
    maybe_3 = module_0.Maybe(var_5, var_0)
    bool_2 = maybe_3.__eq__(var_1)


def test_case_22():
    str_0 = "\n        Transform Maybe to Try.\n\n        :returns: Lazy monad with function returning previous value in other case Left with None\n        :rtype: Lazy[Function() -> (A | None)]\n        "
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_try()
    var_0.to_validation()
