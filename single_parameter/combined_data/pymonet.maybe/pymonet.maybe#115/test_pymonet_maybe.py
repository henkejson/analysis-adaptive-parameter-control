# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import builtins as module_1


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.ap(bool_0)
    var_1 = var_0.bind(var_0)
    var_2 = var_0.to_box()
    bool_1 = var_0.__eq__(var_0)
    var_3 = var_1.filter(maybe_0)
    bool_2 = False
    maybe_1 = module_0.Maybe(var_3, bool_2)
    var_4 = var_3.bind(bool_1)
    maybe_1.filter(bool_1)


def test_case_3():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = maybe_0.__eq__(bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.to_box()
    int_0 = 2444
    var_1.bind(int_0)


def test_case_4():
    int_0 = 1138
    bool_0 = False
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.map(int_0)
    var_1 = var_0.to_either()
    var_2 = var_1.to_validation()
    var_2.to_validation()


def test_case_5():
    tuple_0 = ()
    maybe_0 = module_0.Maybe(tuple_0, tuple_0)
    maybe_0.map(maybe_0)


def test_case_6():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.bind(maybe_0)
    var_1 = var_0.filter(maybe_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(var_1, bool_1)
    maybe_1.filter(bool_0)


def test_case_7():
    str_0 = "\n    First is a Monoid that will always return the first, value when 2 First instances are combined.\n    "
    none_type_0 = None
    maybe_0 = module_0.Maybe(str_0, none_type_0)
    var_0 = maybe_0.to_either()
    maybe_0.bind(var_0)


def test_case_8():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.ap(bool_0)
    var_1 = var_0.bind(var_0)
    var_2 = var_0.to_box()
    bool_1 = True
    var_3 = var_1.filter(maybe_0)
    bool_2 = False
    maybe_1 = module_0.Maybe(var_3, bool_2)
    var_4 = var_3.bind(bool_1)
    maybe_1.filter(bool_0)


def test_case_9():
    none_type_0 = None
    none_type_1 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.to_validation()
    var_2 = maybe_0.to_try()
    maybe_1 = module_0.Maybe(none_type_1, none_type_1)
    maybe_1.ap(none_type_0)


def test_case_10():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.filter(maybe_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(var_1, bool_1)
    maybe_1.filter(bool_0)


def test_case_11():
    object_0 = module_1.object()
    bool_0 = True
    maybe_0 = module_0.Maybe(object_0, bool_0)
    var_0 = maybe_0.get_or_else(object_0)
    var_1 = maybe_0.to_lazy()
    var_0.bind(var_1)


def test_case_12():
    bytes_0 = b"\x8a\x08m8\x97\xfa\xe1\x16]M\x98\x01?\x1a\xc1\xb5\x14"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    none_type_0 = None
    maybe_0 = module_0.Maybe(dict_0, none_type_0)
    var_0 = maybe_0.get_or_else(bytes_0)
    var_1 = maybe_0.to_validation()
    str_0 = "jH1F2.Og@euW;0a;'\n"
    bool_0 = False
    maybe_1 = module_0.Maybe(str_0, bool_0)
    bool_1 = var_1.__eq__(none_type_0)
    var_2 = maybe_1.to_validation()
    bool_2 = var_0.__eq__(dict_0)
    var_3 = var_2.to_try()
    bool_3 = var_1.__eq__(bool_0)
    var_3.to_box()


def test_case_13():
    tuple_0 = ()
    bytes_0 = b"\xba\x82"
    list_0 = [bytes_0]
    none_type_0 = None
    maybe_0 = module_0.Maybe(list_0, none_type_0)
    var_0 = maybe_0.to_either()
    var_0.get_or_else(tuple_0)


def test_case_14():
    list_0 = []
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_box()
    var_0.ap(list_0)


def test_case_15():
    str_0 = ")O\t)\t?2Y5:]e"
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_box()
    str_1 = "y6 <@)Sr924p|}/Mu9"
    var_1 = maybe_0.to_lazy()
    var_2 = var_1.map(var_0)
    dict_0 = {str_1: str_1, str_1: str_1}
    maybe_1 = module_0.Maybe(dict_0, str_1)
    maybe_2 = module_0.Maybe(var_2, var_0)
    var_3 = maybe_1.filter(var_0)


def test_case_16():
    float_0 = 2728.76332
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_try()
    maybe_1 = module_0.Maybe(var_0, maybe_0)
    var_1 = maybe_1.to_box()
    var_1.map(float_0)


def test_case_17():
    int_0 = 3016
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    bool_1 = False
    var_0 = maybe_0.ap(int_0)
    var_1 = maybe_0.filter(bool_1)
    var_2 = var_1.to_box()
    var_3 = var_1.filter(var_2)
    var_4 = var_1.to_box()
    maybe_1 = module_0.Maybe(var_2, bool_1)
    var_5 = maybe_1.to_try()
    maybe_2 = module_0.Maybe(var_5, bool_1)
    var_6 = var_1.bind(bool_1)
    var_5.to_validation()


def test_case_18():
    bool_0 = False
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_1, bool_1)
    var_0 = maybe_0.ap(bool_0)
    var_1 = maybe_0.to_box()
    var_2 = maybe_0.to_validation()
    var_3 = var_2.to_try()
    var_4 = var_0.to_lazy()
    var_5 = var_4.to_box()
    var_6 = var_0.get_or_else(var_0)
    var_7 = var_4.to_box()
    bool_2 = var_0.__eq__(var_4)
    bool_3 = True
    var_8 = var_5.to_either()
    var_9 = var_8.to_try()
    var_10 = var_6.filter(var_8)
    bool_4 = False
    maybe_1 = module_0.Maybe(var_10, bool_4)
    var_11 = var_10.bind(bool_3)
    maybe_1.filter(var_9)


def test_case_19():
    none_type_0 = None
    none_type_1 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_1, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.map(none_type_0)
    var_1.to_box()


def test_case_20():
    complex_0 = 1294.207 - 1351.41j
    maybe_0 = module_0.Maybe(complex_0, complex_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.to_box()
    var_2 = maybe_0.map(var_1)
    bool_0 = maybe_0.__eq__(var_2)
    var_0.to_box()


def test_case_21():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_either()
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    bool_1 = maybe_1.__eq__(maybe_1)
    maybe_1.map(none_type_0)
