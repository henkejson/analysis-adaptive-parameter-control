# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import builtins as module_1


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.ap(maybe_0)
    bool_1 = maybe_0.__eq__(maybe_0)


def test_case_3():
    float_0 = -198.53
    bool_0 = False
    maybe_0 = module_0.Maybe(float_0, bool_0)
    var_0 = maybe_0.to_lazy()
    none_type_0 = None
    bool_1 = maybe_0.__eq__(none_type_0)
    maybe_0.map(none_type_0)


def test_case_4():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.filter(bool_0)
    var_1 = maybe_0.to_try()
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    var_2 = maybe_0.ap(maybe_0)
    var_3 = var_2.filter(maybe_0)
    var_4 = var_0.map(var_2)
    var_5 = maybe_0.to_either()
    var_6 = maybe_0.to_lazy()
    var_7 = maybe_0.to_either()
    bool_1 = var_7.__eq__(maybe_0)


def test_case_5():
    bool_0 = True
    int_0 = 910
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    maybe_0.map(int_0)


def test_case_6():
    none_type_0 = None
    int_0 = -3833
    object_0 = module_1.object()
    bytes_0 = b".\xe9\xa0\xf3-j\xd0\xd9<\xa4B\xbbl\n_\xd6\x93\x0f"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.ap(object_0)
    var_1 = var_0.bind(int_0)
    var_2 = var_1.map(none_type_0)
    none_type_1 = None
    maybe_1 = module_0.Maybe(none_type_1, none_type_1)
    var_3 = maybe_1.to_either()
    var_4 = maybe_0.filter(var_0)
    var_5 = maybe_1.to_either()
    var_6 = var_1.map(var_4)
    var_7 = maybe_0.to_either()
    var_8 = var_0.to_try()
    var_8.to_lazy()


def test_case_7():
    tuple_0 = ()
    bool_0 = False
    bool_1 = False
    tuple_1 = (bool_1, bool_1, bool_1)
    none_type_0 = None
    maybe_0 = module_0.Maybe(tuple_1, none_type_0)
    bool_2 = True
    maybe_1 = module_0.Maybe(maybe_0, bool_2)
    var_0 = maybe_1.ap(bool_0)
    var_1 = maybe_0.to_lazy()
    maybe_0.bind(tuple_0)


def test_case_8():
    bool_0 = False
    int_0 = 5260
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.ap(bool_0)
    var_1 = var_0.to_validation()


def test_case_9():
    tuple_0 = ()
    bool_0 = False
    maybe_0 = module_0.Maybe(tuple_0, bool_0)
    maybe_0.ap(tuple_0)


def test_case_10():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.filter(var_0)
    var_2 = var_1.to_box()
    var_3 = var_2.to_validation()


def test_case_11():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.filter(bool_0)
    var_1 = maybe_0.to_try()
    bool_1 = False
    maybe_1 = module_0.Maybe(var_0, bool_1)
    var_2 = maybe_1.to_either()
    maybe_1.filter(var_2)


def test_case_12():
    str_0 = "a]\r"
    bool_0 = True
    none_type_0 = None
    dict_0 = {none_type_0: str_0, none_type_0: none_type_0, none_type_0: bool_0}
    maybe_0 = module_0.Maybe(none_type_0, dict_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.bind(bool_0)
    maybe_1 = module_0.Maybe(str_0, bool_0)
    var_2 = maybe_1.get_or_else(bool_0)


def test_case_13():
    bytes_0 = b"\x89J.\xf5?\xa4yf\xf3"
    bool_0 = False
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.get_or_else(bytes_0)
    var_0.filter(bool_0)


def test_case_14():
    complex_0 = -124.4 - 3994.4j
    maybe_0 = module_0.Maybe(complex_0, complex_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_lazy()
    var_2 = var_0.to_try()
    var_3 = maybe_0.ap(var_0)


def test_case_15():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_box()
    var_0.to_box()


def test_case_16():
    tuple_0 = ()
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.ap(tuple_0)
    var_1 = var_0.to_try()
    var_1.to_box()


def test_case_17():
    bool_0 = False
    int_0 = -707
    tuple_0 = (bool_0, int_0)
    none_type_0 = None
    maybe_0 = module_0.Maybe(tuple_0, none_type_0)
    var_0 = maybe_0.to_try()


def test_case_18():
    float_0 = -198.53
    bool_0 = False
    maybe_0 = module_0.Maybe(float_0, bool_0)
    var_0 = maybe_0.to_lazy()
    none_type_0 = None
    bool_1 = maybe_0.__eq__(none_type_0)
    var_1 = var_0.to_box()
    var_2 = var_1.to_validation()
    var_3 = var_1.to_lazy()
    var_4 = maybe_0.to_validation()
    var_5 = var_3.to_validation()
    var_1.get_or_else(maybe_0)


def test_case_19():
    str_0 = "FNk/ed9A<?9.JAF_oG"
    bool_0 = True
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_box()
    var_2 = var_1.to_either()
    maybe_1 = module_0.Maybe(str_0, bool_0)
    var_3 = maybe_1.to_box()
    bool_2 = maybe_1.__eq__(str_0)
    var_4 = var_3.to_validation()
    bool_3 = True
    var_5 = var_1.to_either()
    maybe_2 = module_0.Maybe(str_0, bool_3)
    var_6 = maybe_2.to_box()
    var_7 = maybe_2.to_either()


def test_case_20():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.filter(bool_0)
    var_1 = maybe_0.to_try()
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    var_2 = maybe_0.ap(maybe_0)
    bytes_0 = b"\x08\x8f*+"
    maybe_2 = module_0.Maybe(maybe_1, bytes_0)
    var_3 = maybe_0.map(var_2)
    bool_1 = var_3.__eq__(var_1)
    var_4 = var_0.get_or_else(var_2)
    bool_2 = maybe_2.__eq__(var_4)
    var_5 = maybe_1.bind(var_3)
    var_6 = var_5.to_either()
    var_7 = var_2.to_try()
    var_1.to_either()


def test_case_21():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.filter(bool_0)
    var_1 = maybe_0.to_try()
    bool_1 = False
    maybe_1 = module_0.Maybe(var_0, bool_1)
    var_2 = var_0.to_validation()
    bool_2 = maybe_1.__eq__(maybe_1)
    var_3 = maybe_0.get_or_else(var_1)
    var_4 = maybe_0.to_either()
    maybe_1.filter(var_4)
