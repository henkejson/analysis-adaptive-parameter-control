# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    bytes_0 = b">\x00\xa9\xda\xf2N\xd5m"
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.map(bytes_0)
    bool_1 = maybe_0.__eq__(var_0)
    var_1 = var_0.to_validation()
    var_2 = maybe_0.to_box()
    var_3 = maybe_0.to_lazy()
    var_3.get_or_else(bytes_0)


def test_case_3():
    str_0 = "[0ICUG`w\rcnp/\x0bz8j"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.ap(dict_0)
    var_1 = var_0.to_either()
    bool_1 = var_0.__eq__(var_1)
    var_2 = maybe_0.to_validation()
    var_3 = var_1.to_lazy()
    var_4 = maybe_0.bind(dict_0)
    var_1.filter(var_0)


def test_case_4():
    complex_0 = -814.49 + 1529j
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.map(complex_0)


def test_case_5():
    bytes_0 = b">\x00\xa9\xda\xf2N\xd5m"
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.map(bytes_0)
    bool_1 = maybe_0.__eq__(var_0)
    var_1 = var_0.to_validation()
    var_2 = var_0.ap(var_1)
    var_3 = maybe_0.to_lazy()
    var_3.get_or_else(bytes_0)


def test_case_6():
    complex_0 = -2155.575579 - 996.742916j
    bool_0 = True
    maybe_0 = module_0.Maybe(complex_0, bool_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(complex_0, none_type_0)
    none_type_1 = None
    var_0 = maybe_0.to_lazy()
    maybe_1.ap(none_type_1)


def test_case_7():
    str_0 = '\']RMod4"5,1aY\\`UD<\x0c"'
    set_0 = {str_0, str_0, str_0, str_0}
    maybe_0 = module_0.Maybe(str_0, set_0)
    var_0 = maybe_0.filter(str_0)
    var_1 = maybe_0.get_or_else(set_0)
    int_0 = 2325
    none_type_0 = None
    maybe_1 = module_0.Maybe(set_0, none_type_0)
    maybe_2 = module_0.Maybe(int_0, var_1)
    var_2 = maybe_2.map(var_1)
    var_3 = maybe_2.get_or_else(set_0)


def test_case_8():
    list_0 = []
    maybe_0 = module_0.Maybe(list_0, list_0)
    maybe_0.filter(maybe_0)


def test_case_9():
    none_type_0 = None
    none_type_1 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_1, bool_0)
    var_0 = maybe_0.filter(none_type_0)
    var_1 = var_0.to_box()
    bytes_0 = b"\x18\xc4{\xfb"
    set_0 = {bytes_0, bytes_0, bytes_0}
    none_type_2 = None
    maybe_1 = module_0.Maybe(none_type_2, none_type_2)
    var_2 = maybe_1.get_or_else(set_0)
    var_2.to_box()


def test_case_10():
    bytes_0 = b"\x02{\x0b\x7f\xd829\xa3\xae\x93"
    str_0 = "up"
    none_type_0 = None
    maybe_0 = module_0.Maybe(str_0, bytes_0)
    var_0 = maybe_0.to_try()
    var_1 = var_0.get_or_else(none_type_0)
    maybe_1 = module_0.Maybe(str_0, str_0)
    var_2 = maybe_1.to_either()
    var_3 = var_2.to_box()
    var_4 = var_3.to_lazy()
    bool_0 = var_4.__eq__(bytes_0)


def test_case_11():
    complex_0 = -2155.575579 - 996.742916j
    bool_0 = True
    maybe_0 = module_0.Maybe(complex_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = var_0.to_lazy()
    var_2 = maybe_0.map(complex_0)
    var_3 = var_2.filter(var_1)
    var_4 = maybe_0.to_lazy()
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_5 = maybe_1.to_either()
    maybe_1.bind(var_5)


def test_case_12():
    str_0 = '\']RMod4"5,1aY\\`UD<\x0c"'
    set_0 = {str_0, str_0, str_0, str_0}
    maybe_0 = module_0.Maybe(str_0, set_0)
    var_0 = maybe_0.filter(str_0)
    var_1 = maybe_0.get_or_else(set_0)
    int_0 = 2325
    none_type_0 = None
    maybe_1 = module_0.Maybe(set_0, none_type_0)
    none_type_1 = None
    maybe_2 = module_0.Maybe(int_0, none_type_1)
    bool_0 = maybe_1.__eq__(none_type_0)
    var_2 = maybe_2.to_box()
    none_type_1.bind(maybe_0)


def test_case_13():
    str_0 = 'j]R2d~"5raY\\`UD<\x0c"'
    set_0 = {str_0, str_0, str_0, str_0}
    maybe_0 = module_0.Maybe(str_0, set_0)
    var_0 = maybe_0.filter(str_0)
    var_1 = maybe_0.get_or_else(set_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(set_0, none_type_0)
    none_type_1 = None
    maybe_2 = module_0.Maybe(var_1, none_type_1)
    var_2 = maybe_0.to_lazy()
    var_3 = var_0.to_try()
    var_4 = maybe_1.to_lazy()


def test_case_14():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_try()


def test_case_15():
    bytes_0 = b"\xc1\xcc5\xc8\xcf\xc3\xb5X\x995\xfdJ"
    none_type_0 = None
    maybe_0 = module_0.Maybe(bytes_0, none_type_0)
    var_0 = maybe_0.to_validation()


def test_case_16():
    str_0 = '\']RMod4"5,1aY\\`UD<\x0c"'
    set_0 = {str_0, str_0, str_0, str_0}
    maybe_0 = module_0.Maybe(str_0, set_0)
    var_0 = maybe_0.filter(str_0)
    var_1 = maybe_0.get_or_else(set_0)
    bool_0 = False
    maybe_1 = module_0.Maybe(set_0, bool_0)
    var_2 = maybe_0.to_lazy()
    bool_1 = var_2.__eq__(bool_0)
    maybe_2 = module_0.Maybe(set_0, str_0)
    var_3 = var_2.to_either()
    bool_2 = maybe_2.__eq__(var_1)
    var_4 = maybe_0.ap(maybe_0)
    maybe_1.filter(var_1)


def test_case_17():
    str_0 = '\']RMod4"5,1aY\\`UD<\x0c"'
    set_0 = {str_0, str_0, str_0, str_0}
    maybe_0 = module_0.Maybe(str_0, set_0)
    var_0 = maybe_0.filter(str_0)
    var_1 = maybe_0.get_or_else(set_0)
    bool_0 = False
    maybe_1 = module_0.Maybe(set_0, bool_0)
    none_type_0 = None
    var_2 = maybe_1.to_lazy()
    maybe_2 = module_0.Maybe(set_0, str_0)
    var_3 = maybe_2.bind(var_1)
    var_4 = maybe_2.to_box()
    bool_1 = maybe_2.__eq__(var_1)
    var_5 = var_0.ap(set_0)
    var_6 = maybe_2.filter(var_0)
    var_7 = var_2.to_validation()
    maybe_1.filter(none_type_0)


def test_case_18():
    str_0 = '\']RMod4"5,1aY\\`UD<\x0c"'
    set_0 = {str_0, str_0, str_0, str_0}
    maybe_0 = module_0.Maybe(str_0, set_0)
    var_0 = maybe_0.filter(str_0)
    var_1 = maybe_0.get_or_else(set_0)
    int_0 = 2325
    none_type_0 = None
    maybe_1 = module_0.Maybe(set_0, none_type_0)
    none_type_1 = None
    maybe_2 = module_0.Maybe(int_0, none_type_1)
    bool_0 = maybe_1.__eq__(none_type_0)
    bool_1 = maybe_1.__eq__(maybe_2)
    maybe_2.ap(none_type_1)


def test_case_19():
    bytes_0 = b">\x00\xa9\xda\xf2N\xd5m"
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bytes_0)
    var_0 = maybe_0.map(bytes_0)
    bool_1 = maybe_0.__eq__(var_0)
    var_1 = var_0.to_validation()
    var_2 = var_0.map(maybe_0)
    var_3 = maybe_0.to_lazy()
    bytes_0.to_lazy()
