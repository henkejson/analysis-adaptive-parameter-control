# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    set_0 = set()
    bool_0 = False
    maybe_0 = module_0.Maybe(set_0, bool_0)
    int_0 = 1070
    bool_1 = False
    maybe_1 = module_0.Maybe(int_0, bool_1)
    bool_2 = maybe_1.__eq__(maybe_0)


def test_case_3():
    none_type_0 = None
    str_0 = "Lazy[T, U]"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.map(maybe_0)
    bool_0 = maybe_0.__eq__(str_0)
    var_1 = maybe_0.to_either()
    var_2 = var_1.bind(none_type_0)
    var_3 = var_0.ap(var_1)
    var_4 = var_2.map(var_1)


def test_case_4():
    str_0 = "\n    Last is a Monoid that will always return the lastest, value when 2 Last instances are combined.\n    "
    maybe_0 = module_0.Maybe(str_0, str_0)
    bool_0 = False
    maybe_1 = module_0.Maybe(maybe_0, bool_0)
    var_0 = maybe_0.map(bool_0)
    var_1 = var_0.filter(var_0)
    maybe_1.filter(maybe_1)


def test_case_5():
    bool_0 = False
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_try()
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    maybe_1.map(bool_0)


def test_case_6():
    str_0 = "\n    Last is a Monoid that will always return the lastest, value when 2 Last instances are combined.\n    "
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.bind(maybe_0)
    bool_0 = False
    maybe_1 = module_0.Maybe(var_0, bool_0)
    var_1 = maybe_0.map(bool_0)
    var_2 = var_1.filter(var_1)
    maybe_1.filter(maybe_1)


def test_case_7():
    bool_0 = True
    none_type_0 = None
    bool_1 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_1)
    maybe_0.bind(bool_0)


def test_case_8():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_0.ap(none_type_0)


def test_case_9():
    int_0 = -31
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    var_1 = maybe_0.filter(var_0)
    var_2 = maybe_0.to_either()
    bool_0 = var_2.__eq__(var_2)
    float_0 = 971.6514
    var_3 = maybe_0.filter(float_0)
    var_4 = var_2.to_lazy()
    float_0.map(float_0)


def test_case_10():
    int_0 = -687
    bool_0 = False
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.get_or_else(bool_0)
    var_1 = maybe_0.to_validation()
    maybe_0.filter(var_1)


def test_case_11():
    dict_0 = {}
    bool_0 = False
    maybe_0 = module_0.Maybe(dict_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.to_box()
    bool_1 = False
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, bool_1)
    var_2 = maybe_0.to_validation()
    var_3 = maybe_1.to_either()
    var_4 = maybe_1.get_or_else(bool_1)
    var_5 = maybe_1.to_either()
    var_5.to_either()


def test_case_12():
    bytes_0 = b"\xbcZ\xff\x98\x9dE\xfb{"
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_either()
    var_1.get_or_else(bytes_0)


def test_case_13():
    str_0 = "q|R"
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_box()
    var_0.to_box()


def test_case_14():
    none_type_0 = None
    float_0 = -408.78
    maybe_0 = module_0.Maybe(float_0, float_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_either()
    var_1.get_or_else(none_type_0)


def test_case_15():
    list_0 = []
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_0.get_or_else(list_0)


def test_case_16():
    generic_0 = module_1.Generic()
    bool_0 = True
    bool_1 = True
    bool_2 = True
    maybe_0 = module_0.Maybe(generic_0, bool_2)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_lazy()
    var_2 = var_1.to_either()
    var_3 = var_2.to_box()
    maybe_1 = module_0.Maybe(bool_0, bool_1)
    var_4 = maybe_1.to_try()
    var_4.to_either()


def test_case_17():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_try()


def test_case_18():
    bytes_0 = b"\xa3\xdd\x9b.)\x95yO\xd2"
    set_0 = {bytes_0}
    maybe_0 = module_0.Maybe(set_0, bytes_0)
    var_0 = maybe_0.to_validation()


def test_case_19():
    bytes_0 = b"f\xf6w\x1d\xb4\xcc\xa8\xe9@\x9b\x15v"
    str_0 = "nf/Q\n"
    none_type_0 = None
    maybe_0 = module_0.Maybe(str_0, none_type_0)
    var_0 = maybe_0.to_validation()
    var_0.map(bytes_0)


def test_case_20():
    float_0 = 971.6514
    float_0.map(float_0)


def test_case_21():
    bool_0 = True
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_try()
    var_1.filter(bool_0)


def test_case_22():
    bytes_0 = b"_\x17\xde2\x12r"
    str_0 = "\n    Last is a Monoid that will always return the lastest, value when 2 Last instances are combined.\n    "
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.ap(bytes_0)
    bool_0 = var_0.__eq__(var_0)
    var_1 = maybe_0.bind(var_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(var_0, bool_1)
    var_2 = maybe_0.map(bool_1)
    var_3 = var_0.filter(var_0)
    var_4 = var_2.map(maybe_1)
    var_5 = maybe_1.to_try()
    maybe_1.filter(maybe_1)


def test_case_23():
    str_0 = "\n    Last is a Monoid that will always return the lastest, value when 2 Last instances are combined.\n    "
    maybe_0 = module_0.Maybe(str_0, str_0)
    none_type_0 = None
    list_0 = [maybe_0, str_0, none_type_0]
    var_0 = maybe_0.ap(list_0)
    var_1 = var_0.map(var_0)
    bool_0 = maybe_0.__eq__(var_0)
    var_2 = maybe_0.to_box()
    var_3 = var_1.get_or_else(none_type_0)
    var_3.to_either()
