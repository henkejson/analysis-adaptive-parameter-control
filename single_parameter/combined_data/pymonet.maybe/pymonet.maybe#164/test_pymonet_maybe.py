# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    bool_0 = False
    str_0 = "\n        Take mapper function and return new instance of Right with mapped value.\n\n        :param mapper: function to apply on Right value\n        :type mapper: Function(A) -> B\n        :returns: new Right with result of mapper\n        :rtype: Right[B]\n        "
    maybe_0 = module_0.Maybe(str_0, str_0)
    bool_1 = maybe_0.__eq__(str_0)
    maybe_1 = module_0.Maybe(bool_0, str_0)
    var_0 = maybe_1.to_lazy()


def test_case_3():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.map(maybe_0)
    var_1 = maybe_0.filter(maybe_0)
    list_0 = []
    maybe_1 = module_0.Maybe(list_0, list_0)
    maybe_1.filter(var_1)


def test_case_4():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.map(none_type_0)


def test_case_5():
    none_type_0 = None
    bool_0 = True
    str_0 = "\n    One is a Monoid that will combine 2 values of any type using logical disjunction OR on their coerced Boolean values.\n    "
    list_0 = [str_0, str_0]
    maybe_0 = module_0.Maybe(list_0, str_0)
    var_0 = maybe_0.filter(bool_0)
    var_1 = var_0.bind(none_type_0)


def test_case_6():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    bool_0 = maybe_0.__eq__(var_0)
    var_1 = maybe_0.to_validation()
    maybe_0.bind(none_type_0)


def test_case_7():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    none_type_0 = None
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.map(var_0)
    var_2 = var_1.to_either()
    var_3 = var_2.to_box()
    var_4 = var_1.ap(none_type_0)
    var_5 = var_4.filter(var_2)
    var_6 = var_1.to_validation()
    var_7 = maybe_0.map(var_6)
    var_8 = var_7.bind(var_1)
    var_9 = var_7.map(var_6)
    var_10 = var_4.to_box()


def test_case_8():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    maybe_0.ap(none_type_0)


def test_case_9():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.filter(maybe_0)
    list_0 = []
    maybe_1 = module_0.Maybe(list_0, list_0)
    maybe_1.filter(var_0)


def test_case_10():
    bool_0 = False
    str_0 = "\n        Take mapper function and return new instance of Right with mapped value.\n\n        :param mapper: function to apply on Right value\n        :type mapper: Function(A) -> B\n        :returns: new Right with result of mapper\n        :rtype: Right[B]\n        "
    maybe_0 = module_0.Maybe(str_0, str_0)
    bool_1 = maybe_0.__eq__(str_0)
    maybe_1 = module_0.Maybe(bool_0, str_0)
    var_0 = maybe_1.get_or_else(maybe_1)
    var_1 = maybe_1.bind(maybe_1)
    maybe_2 = module_0.Maybe(maybe_1, var_1)


def test_case_11():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    str_0 = "\n        Take mapper function and return new instance of Right with mapped value.\n\n        :param mapper: function to apply on Right value\n        :type mapper: Function(A) -> B\n        :returns: new Right with result of mapper\n        :rtype: Right[B]\n        "
    maybe_0 = module_0.Maybe(str_0, bool_0)
    none_type_0 = None
    bool_1 = maybe_0.__eq__(none_type_0)
    maybe_1 = module_0.Maybe(list_0, none_type_0)
    var_0 = maybe_0.get_or_else(list_0)
    var_1 = maybe_1.to_try()
    var_1.bind(var_0)


def test_case_12():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_validation()
    var_2 = var_0.to_box()
    var_2.get_or_else(bool_0)


def test_case_13():
    bool_0 = False
    list_0 = []
    bytes_0 = b"\xd16\xb7Y_i\x1d8\x00"
    set_0 = {bool_0}
    tuple_0 = (bool_0, list_0, bytes_0, set_0)
    bool_1 = False
    list_1 = []
    tuple_1 = (bool_1, list_1)
    maybe_0 = module_0.Maybe(tuple_1, list_1)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_box()
    var_2 = var_1.to_either()
    var_2.bind(tuple_0)


def test_case_14():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.map(var_0)
    var_2 = var_1.to_box()
    var_3 = maybe_0.filter(var_0)
    int_0 = 1240
    list_0 = []
    maybe_1 = module_0.Maybe(list_0, list_0)
    maybe_1.filter(int_0)


def test_case_15():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.to_lazy()
    var_1.filter(var_0)


def test_case_16():
    float_0 = 267.018
    bool_0 = False
    maybe_0 = module_0.Maybe(float_0, bool_0)
    bool_1 = True
    maybe_1 = module_0.Maybe(maybe_0, bool_1)
    var_0 = maybe_1.to_lazy()


def test_case_17():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_lazy()


def test_case_18():
    int_0 = 0
    set_0 = {int_0, int_0}
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.to_try()
    var_1.ap(set_0)


def test_case_19():
    complex_0 = -2887.355 + 1810.1j
    bool_0 = False
    maybe_0 = module_0.Maybe(complex_0, bool_0)
    var_0 = maybe_0.to_try()
    tuple_0 = (complex_0, var_0)
    bool_1 = True
    maybe_1 = module_0.Maybe(tuple_0, bool_1)


def test_case_20():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.map(var_0)
    var_2 = maybe_0.filter(var_0)
    var_3 = var_2.to_validation()
    int_0 = 1240
    list_0 = []
    maybe_1 = module_0.Maybe(list_0, list_0)
    maybe_1.filter(int_0)


def test_case_21():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_validation()
    bool_0 = var_0.to_either()
    maybe_1 = module_0.Maybe(var_0, none_type_0)
    none_type_1 = None
    maybe_0.filter(none_type_1)


def test_case_22():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_lazy()
    bool_1 = maybe_0.__eq__(maybe_0)
    var_1 = var_0.to_validation()
    maybe_1 = module_0.Maybe(bool_0, var_1)
    bool_2 = True
    var_2 = maybe_1.filter(bool_2)
    var_3 = maybe_1.to_either()
    var_4 = maybe_1.get_or_else(var_1)
    var_5 = var_0.ap(var_4)
    var_6 = var_1.to_box()
    var_7 = var_6.to_lazy()
    var_8 = var_6.to_validation()
    var_1.to_validation()


def test_case_23():
    bool_0 = False
    str_0 = "\n        Take mapper function and return new instance of Right with mapped value.\n\n        :param mapper: function to apply on Right value\n        :type mapper: Function(A) -> B\n        :returns: new Right with result of mapper\n        :rtype: Right[B]\n        "
    maybe_0 = module_0.Maybe(str_0, str_0)
    bool_1 = maybe_0.__eq__(str_0)
    maybe_1 = module_0.Maybe(bool_0, str_0)
    none_type_0 = None
    var_0 = maybe_0.filter(none_type_0)
    var_1 = maybe_1.map(var_0)
    list_0 = [bool_0, var_1]
    maybe_2 = module_0.Maybe(list_0, bool_0)
    bool_2 = maybe_1.__eq__(maybe_0)
    var_2 = var_0.to_validation()
    var_3 = var_0.to_box()


def test_case_24():
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    bool_1 = maybe_0.__eq__(maybe_0)
    var_1 = var_0.to_validation()
    maybe_1 = module_0.Maybe(bool_0, var_1)
    bool_2 = True
    var_2 = maybe_1.filter(bool_2)
    var_3 = maybe_1.to_either()
    var_4 = maybe_1.get_or_else(var_1)
    var_5 = var_0.ap(var_4)
    var_6 = var_1.to_box()
    var_7 = var_6.to_lazy()
    var_8 = var_6.to_validation()
    var_1.to_validation()


def test_case_25():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    bool_0 = maybe_0.__eq__(var_0)
    var_1 = maybe_0.to_validation()
    maybe_1 = module_0.Maybe(var_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    maybe_2 = module_0.Maybe(bool_1, bool_1)
    var_2 = maybe_1.get_or_else(var_0)
    var_3 = maybe_0.to_validation()
    var_3.bind(maybe_2)


def test_case_26():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.ap(bool_0)
    maybe_1 = module_0.Maybe(none_type_0, maybe_0)
    var_1 = maybe_1.filter(var_0)
    bool_1 = maybe_1.__eq__(var_0)
    var_2 = var_1.to_validation()
    var_3 = maybe_0.get_or_else(maybe_0)
    var_4 = var_1.bind(var_3)
    var_5 = maybe_1.get_or_else(bool_0)
    var_6 = maybe_0.bind(var_3)
    var_7 = maybe_0.bind(var_2)
    var_8 = var_6.bind(var_0)
    var_2.filter(var_8)
