# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import builtins as module_1
import typing as module_2


def test_case_0():
    int_0 = -474
    maybe_0 = module_0.Maybe(int_0, int_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bytes_0 = b"\n%"
    var_0 = maybe_0.ap(bytes_0)
    var_1 = maybe_0.ap(maybe_0)
    bool_1 = maybe_0.__eq__(var_1)
    var_2 = var_1.to_box()
    none_type_0 = None
    var_3 = var_1.get_or_else(bytes_0)
    var_4 = var_1.bind(none_type_0)
    var_5 = var_0.to_lazy()
    maybe_1 = module_0.Maybe(var_5, bool_0)
    bool_1.filter(bool_0)


def test_case_3():
    dict_0 = {}
    bool_0 = True
    maybe_0 = module_0.Maybe(dict_0, bool_0)
    var_0 = maybe_0.to_either()
    object_0 = module_1.object(**dict_0)
    float_0 = 2678.18667
    bool_1 = False
    maybe_1 = module_0.Maybe(float_0, bool_1)
    bool_2 = maybe_1.__eq__(object_0)


def test_case_4():
    int_0 = -2056
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.ap(int_0)
    bool_0 = var_0.__eq__(int_0)
    dict_0 = {int_0: int_0}
    var_1 = maybe_0.map(var_0)
    maybe_1 = module_0.Maybe(dict_0, int_0)
    list_0 = [int_0]
    var_2 = maybe_1.ap(maybe_1)
    var_3 = var_2.ap(dict_0)
    var_4 = var_3.to_try()
    module_2.Generic(*list_0)


def test_case_5():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.ap(maybe_0)


def test_case_6():
    list_0 = []
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.bind(list_0)


def test_case_7():
    int_0 = -2056
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.ap(int_0)
    bool_0 = var_0.__eq__(int_0)
    var_1 = maybe_0.to_lazy()
    list_0 = [int_0]
    list_0.ap(list_0)


def test_case_8():
    bytes_0 = b"Lm_8\xae\xbd\x95Uc\x0b(S+\x96\x03\xa5mg"
    bytes_1 = b"v\x1fm\x9d_\x06"
    maybe_0 = module_0.Maybe(bytes_1, bytes_1)
    var_0 = maybe_0.get_or_else(bytes_0)
    var_1 = maybe_0.to_box()
    var_2 = maybe_0.filter(var_1)
    var_0.to_box()


def test_case_9():
    bytes_0 = b"\x81"
    none_type_0 = None
    maybe_0 = module_0.Maybe(bytes_0, none_type_0)
    maybe_0.filter(none_type_0)


def test_case_10():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    tuple_0 = (set_0,)
    int_0 = -474
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.get_or_else(tuple_0)


def test_case_11():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.get_or_else(maybe_0)


def test_case_12():
    str_0 = "\n        :param semigroup: other semigroup to concat\n        :type semigroup: One[B]\n        :returns: new One with first truly value or last falsy\n        :rtype: One[A | B]\n        "
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_either()
    bool_1 = True
    maybe_1 = module_0.Maybe(bool_1, bool_1)
    var_1 = maybe_1.get_or_else(maybe_1)


def test_case_13():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.get_or_else(none_type_0)
    var_1 = maybe_0.to_box()
    var_1.to_box()


def test_case_14():
    bool_0 = False
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_lazy()
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    var_1 = maybe_1.to_try()
    var_1.bind(var_0)


def test_case_15():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_try()


def test_case_16():
    str_0 = "W^<@C\n\tq:D: yAw2ce8"
    dict_0 = {str_0: str_0, str_0: str_0}
    str_1 = "\n\rN"
    maybe_0 = module_0.Maybe(str_1, str_1)
    var_0 = maybe_0.to_validation()
    var_0.ap(dict_0)


def test_case_17():
    bool_0 = False
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_validation()
    maybe_0.filter(bool_0)


def test_case_18():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_either()
    var_2 = var_1.to_try()
    var_3 = var_2.get_or_else(bool_0)
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    var_4 = maybe_1.filter(bool_0)
    var_5 = var_4.filter(var_3)
    var_6 = var_5.filter(bool_0)
    none_type_0 = None
    maybe_2 = module_0.Maybe(none_type_0, none_type_0)
    var_7 = maybe_2.to_box()
    var_8 = maybe_2.to_either()
    var_9 = maybe_2.get_or_else(maybe_2)
    var_10 = var_7.to_try()
    var_11 = var_10.get_or_else(bool_0)
    maybe_2.filter(maybe_2)


def test_case_19():
    bool_0 = False
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_lazy()
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    var_1 = var_0.to_box()
    var_2 = maybe_1.to_try()
    var_2.bind(var_0)


def test_case_20():
    dict_0 = {}
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bytes_0 = b"\n%"
    var_0 = maybe_0.ap(bytes_0)
    var_1 = maybe_0.ap(maybe_0)
    bool_1 = maybe_0.__eq__(var_1)
    var_2 = var_1.to_box()
    none_type_0 = None
    var_3 = var_1.ap(none_type_0)
    var_4 = var_1.bind(none_type_0)
    var_5 = var_3.to_lazy()
    maybe_1 = module_0.Maybe(dict_0, bool_0)
    maybe_2 = module_0.Maybe(var_3, var_5)
    var_6 = var_3.filter(var_3)
    none_type_1 = None
    bool_2 = maybe_1.__eq__(maybe_2)
    bool_3 = True
    maybe_3 = module_0.Maybe(none_type_1, bool_0)
    var_7 = maybe_3.to_validation()
    var_8 = maybe_0.to_validation()
    var_9 = var_8.to_try()
    var_10 = var_7.to_either()
    var_11 = var_4.to_lazy()
    var_12 = var_11.bind(var_2)
    var_2.bind(bool_3)


def test_case_21():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.ap(none_type_0)
    var_2 = maybe_0.to_validation()
    bool_1 = False
    maybe_1 = module_0.Maybe(maybe_0, bool_1)
    var_3 = maybe_0.to_either()
    var_4 = var_0.to_either()
    var_5 = maybe_0.to_try()
    maybe_0.ap(maybe_1)
