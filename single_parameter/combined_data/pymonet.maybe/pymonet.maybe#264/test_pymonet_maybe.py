# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1


def test_case_0():
    bytes_0 = b"\x02\xbas\xc6\xaf^\xbf\xd9"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    none_type_0 = None
    var_0 = maybe_0.ap(none_type_0)
    var_1 = maybe_0.to_lazy()
    var_2 = maybe_0.to_box()
    var_3 = var_2.to_try()
    bool_2 = var_3.__eq__(maybe_0)
    var_3.to_validation()


def test_case_3():
    bytes_0 = b"\xbaB\xf0\x91p\x8e\tj\x8dAam\xea\xd1\xa3"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    bool_0 = maybe_0.__eq__(bytes_0)
    var_0 = maybe_0.ap(maybe_0)
    var_1 = var_0.filter(bool_0)
    var_2 = var_0.filter(bool_0)
    var_3 = maybe_0.to_either()
    var_4 = var_1.to_validation()


def test_case_4():
    list_0 = []
    bool_0 = False
    bool_1 = True
    str_0 = "3O>{\nC@;/i"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.bind(bool_0)
    var_1 = maybe_0.ap(bool_1)
    var_2 = maybe_0.filter(var_1)
    var_3 = var_1.ap(var_0)
    var_4 = var_1.ap(bool_0)
    bool_2 = maybe_0.__eq__(var_4)
    var_5 = var_4.ap(list_0)
    var_6 = var_5.to_try()
    int_0 = 0
    maybe_1 = module_0.Maybe(int_0, int_0)
    bool_3 = True
    maybe_2 = module_0.Maybe(var_6, bool_3)
    var_7 = maybe_0.map(var_4)
    var_8 = var_5.to_validation()


def test_case_5():
    complex_0 = 4094 + 3032.08217j
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    maybe_0.map(complex_0)


def test_case_6():
    generic_0 = module_1.Generic()
    maybe_0 = module_0.Maybe(generic_0, generic_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.bind(generic_0)
    bool_0 = var_0.__eq__(generic_0)
    var_2 = var_1.to_try()
    var_2.to_validation()


def test_case_7():
    float_0 = 1658.4
    bool_0 = False
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    maybe_0.bind(float_0)


def test_case_8():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = maybe_0.__eq__(none_type_0)
    bool_1 = maybe_0.__eq__(none_type_0)
    maybe_0.ap(bool_0)


def test_case_9():
    int_0 = 1469
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.filter(int_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(int_0, none_type_0)
    maybe_1.filter(none_type_0)


def test_case_10():
    none_type_0 = None
    str_0 = "\n    Data type for storage any type of function.\n    This function (and all his mappers) will be called only during calling fold method\n    "
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.get_or_else(none_type_0)
    var_0.to_box()


def test_case_11():
    list_0 = []
    none_type_0 = None
    none_type_1 = None
    maybe_0 = module_0.Maybe(none_type_1, list_0)
    var_0 = maybe_0.get_or_else(none_type_0)
    var_0.to_lazy()


def test_case_12():
    dict_0 = {}
    bool_0 = True
    maybe_0 = module_0.Maybe(dict_0, bool_0)
    var_0 = maybe_0.to_either()


def test_case_13():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_1.to_either()
    var_1 = maybe_0.ap(var_0)
    var_2 = var_1.filter(var_0)
    var_3 = var_1.ap(var_0)
    var_4 = var_1.to_validation()
    var_5 = maybe_0.to_either()
    maybe_1.filter(var_4)


def test_case_14():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    bytes_0 = b"\x11\xab\xec\x99\xcf\xbe\xaf\x87\x9dXU&"
    bool_1 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_1)
    var_0 = maybe_0.to_box()
    var_0.bind(dict_0)


def test_case_15():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    none_type_1 = None
    bool_0 = False
    bool_1 = True
    var_1 = maybe_0.to_lazy()
    maybe_1 = module_0.Maybe(bool_0, bool_1)
    var_2 = maybe_1.to_validation()
    var_3 = maybe_1.to_lazy()
    var_4 = var_3.to_try()
    var_4.ap(none_type_1)


def test_case_16():
    bytes_0 = b"\xee\x1b\x03 I\x10>\xfb\xa8\x04\xe9\xb78\xe7\xe8 \x19\xd8\x96 "
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_try()
    var_0.to_either()


def test_case_17():
    bool_0 = False
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_validation()
    var_2 = var_1.to_lazy()
    var_3 = var_2.to_box()
    list_0 = []
    str_0 = "X"
    bool_2 = False
    maybe_1 = module_0.Maybe(str_0, bool_2)
    var_4 = maybe_1.to_try()
    tuple_0 = ()
    bool_3 = True
    int_0 = 1
    set_0 = {bool_3, int_0, int_0, bool_3}
    tuple_1 = (tuple_0, bool_3, tuple_0, set_0)
    maybe_2 = module_0.Maybe(tuple_1, int_0)
    var_5 = maybe_2.bind(var_4)
    var_6 = var_5.bind(list_0)
    var_7 = var_6.to_validation()
    var_7.to_validation()


def test_case_18():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_validation()


def test_case_19():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_try()
    var_1.to_either()


def test_case_20():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    none_type_0 = None
    maybe_0.ap(none_type_0)
