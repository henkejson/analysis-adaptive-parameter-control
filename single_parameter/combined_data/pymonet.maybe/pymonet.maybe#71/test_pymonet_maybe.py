# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1
import builtins as module_2


def test_case_0():
    float_0 = -415.03
    maybe_0 = module_0.Maybe(float_0, float_0)


def test_case_1():
    list_0 = []
    maybe_0 = module_0.Maybe(list_0, list_0)


def test_case_2():
    dict_0 = {}
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.ap(dict_0)
    var_1 = var_0.filter(var_0)
    bool_1 = var_0.__eq__(maybe_0)
    none_type_1 = None
    maybe_1 = module_0.Maybe(none_type_1, none_type_1)
    maybe_1.filter(var_0)


def test_case_3():
    bool_0 = True
    dict_0 = {}
    dict_1 = {bool_0: dict_0, bool_0: dict_0, bool_0: bool_0, bool_0: bool_0}
    int_0 = 2935
    bytes_0 = b"p"
    bool_1 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_1)
    var_0 = maybe_0.ap(int_0)
    bool_2 = var_0.__eq__(int_0)
    var_1 = var_0.ap(dict_1)
    var_2 = maybe_0.to_validation()


def test_case_4():
    bool_0 = False
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.filter(bool_0)
    var_1 = maybe_0.to_box()
    var_2 = maybe_0.ap(maybe_0)
    bool_2 = maybe_0.__eq__(bool_1)
    var_3 = maybe_0.map(var_1)
    var_4 = maybe_0.to_try()
    var_4.to_lazy()


def test_case_5():
    none_type_0 = None
    set_0 = set()
    maybe_0 = module_0.Maybe(set_0, none_type_0)
    maybe_0.map(none_type_0)


def test_case_6():
    dict_0 = {}
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.ap(dict_0)
    var_1 = var_0.filter(var_0)
    var_2 = var_1.bind(var_0)
    none_type_1 = None
    maybe_1 = module_0.Maybe(none_type_1, none_type_1)
    maybe_1.filter(var_0)


def test_case_7():
    int_0 = 540
    str_0 = "aXX#SXg"
    none_type_0 = None
    maybe_0 = module_0.Maybe(str_0, none_type_0)
    maybe_0.bind(int_0)


def test_case_8():
    none_type_0 = None
    dict_0 = {}
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.ap(dict_0)
    var_1 = var_0.filter(var_0)
    none_type_1 = None
    maybe_1 = module_0.Maybe(none_type_1, none_type_1)
    maybe_1.filter(var_0)


def test_case_9():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0]
    maybe_1 = module_0.Maybe(dict_0, list_0)
    var_0 = maybe_1.map(list_0)
    bool_0 = True
    maybe_2 = module_0.Maybe(maybe_1, bool_0)
    var_1 = maybe_2.ap(dict_0)
    maybe_3 = module_0.Maybe(list_0, bool_0)
    var_2 = maybe_0.ap(maybe_2)
    var_3 = maybe_1.filter(maybe_0)
    var_4 = var_0.bind(var_1)
    bool_1 = maybe_2.__eq__(var_2)
    none_type_1 = None
    maybe_4 = module_0.Maybe(none_type_1, var_2)
    var_5 = var_2.filter(var_1)
    var_6 = maybe_1.map(var_1)


def test_case_10():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.filter(maybe_0)
    none_type_1 = None
    maybe_1 = module_0.Maybe(none_type_1, none_type_1)
    maybe_1.filter(none_type_0)


def test_case_11():
    generic_0 = module_1.Generic()
    bool_0 = True
    maybe_0 = module_0.Maybe(generic_0, bool_0)
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.get_or_else(generic_0)
    var_0.to_box()


def test_case_12():
    int_0 = 1
    bool_0 = False
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.get_or_else(int_0)
    var_1 = maybe_0.to_try()
    var_2 = maybe_0.to_either()
    var_2.get_or_else(maybe_0)


def test_case_13():
    none_type_0 = None
    dict_0 = {}
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.ap(dict_0)
    var_1 = var_0.filter(var_0)
    var_2 = var_1.bind(var_0)
    var_3 = var_0.to_validation()
    var_4 = var_2.to_validation()
    var_5 = var_1.to_either()
    object_0 = module_2.object()
    var_6 = var_3.to_box()
    maybe_1 = module_0.Maybe(var_4, var_6)
    var_7 = maybe_0.to_lazy()
    var_7.to_lazy()


def test_case_14():
    tuple_0 = ()
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = maybe_0.__eq__(tuple_0)
    bytes_0 = b"G\x81L\x90"
    maybe_1 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_1.to_box()
    var_1 = var_0.to_try()
    maybe_2 = module_0.Maybe(var_0, bytes_0)
    var_2 = var_0.to_lazy()
    var_3 = var_2.ap(tuple_0)
    var_4 = var_3.to_try()
    var_4.to_validation()


def test_case_15():
    str_0 = "\n    Perform left-to-right function composition.\n\n    :param value: argument of first applied function\n    :type value: Any\n    :param functions: list of functions to applied from left-to-right\n    :type functions: List[Function]\n    :returns: result of all functions\n    :rtype: Any\n    "
    int_0 = 480
    bool_0 = False
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.to_box()
    var_0.get_or_else(str_0)


def test_case_16():
    dict_0 = {}
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.ap(dict_0)
    var_1 = var_0.to_lazy()
    var_2 = var_1.bind(var_0)
    bool_1 = var_0.to_box()
    none_type_1 = None
    maybe_1 = module_0.Maybe(none_type_1, none_type_1)
    maybe_1.filter(var_0)


def test_case_17():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.to_either()
    var_2 = maybe_0.to_try()
    var_1.ap(maybe_0)


def test_case_18():
    none_type_0 = None
    none_type_1 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_1, bool_0)
    var_0 = maybe_0.to_try()
    var_1 = var_0.map(none_type_0)


def test_case_19():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_validation()
    var_0.map(none_type_0)


def test_case_20():
    str_0 = "Q#lBI\x0blZMTa87>!jcY*;"
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_validation()
    set_0 = {bool_0, bool_0}
    bool_1 = maybe_0.__eq__(maybe_0)
    maybe_0.map(set_0)


def test_case_21():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0]
    maybe_1 = module_0.Maybe(dict_0, list_0)
    var_0 = maybe_1.map(list_0)
    bool_0 = True
    var_1 = maybe_1.to_lazy()
    var_2 = var_1.to_try()
    maybe_2 = module_0.Maybe(maybe_1, bool_0)
    var_3 = maybe_2.ap(dict_0)
    maybe_3 = module_0.Maybe(list_0, bool_0)
    var_4 = maybe_0.ap(maybe_2)
    var_5 = maybe_1.filter(maybe_0)
    var_6 = var_0.bind(var_3)
    bool_1 = maybe_2.__eq__(var_4)
    none_type_1 = None
    maybe_4 = module_0.Maybe(none_type_1, var_4)
    var_7 = var_4.filter(var_3)
    var_8 = maybe_1.map(var_3)


def test_case_22():
    bytes_0 = b"\xa0"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.ap(bytes_0)
    var_1 = maybe_0.filter(var_0)
    bool_0 = False
    maybe_1 = module_0.Maybe(bytes_0, bool_0)
    var_2 = maybe_0.map(bytes_0)
    none_type_0 = None
    var_3 = maybe_0.to_lazy()
    bytes_1 = b"\xc2U~oQ\xed\xd6n$\xf0"
    tuple_0 = (bytes_1,)
    var_4 = var_0.map(maybe_0)
    maybe_2 = module_0.Maybe(bytes_1, bytes_1)
    var_5 = maybe_2.bind(tuple_0)
    var_6 = var_5.get_or_else(none_type_0)
    dict_0 = {}
    bool_1 = var_0.__eq__(maybe_2)
    var_7 = maybe_0.to_either()
    var_8 = var_5.to_validation()
    var_8.get_or_else(dict_0)


def test_case_23():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_try()
    var_1 = var_0.get_or_else(none_type_0)
    bool_1 = True
    maybe_1 = module_0.Maybe(bool_1, bool_1)
    var_2 = maybe_1.filter(bool_1)
    var_3 = maybe_1.to_either()
    maybe_2 = module_0.Maybe(bool_1, bool_1)
    var_4 = maybe_2.ap(bool_1)
    var_5 = var_4.ap(bool_1)
    var_6 = var_5.map(var_3)
    float_0 = -3374.9
    var_7 = maybe_1.ap(float_0)
    var_8 = var_4.ap(bool_1)
    var_9 = var_8.to_validation()
    var_10 = var_4.get_or_else(var_3)
    var_11 = var_8.to_box()
    bool_2 = False
    maybe_3 = module_0.Maybe(var_2, bool_2)
    var_12 = maybe_0.to_lazy()
    var_13 = var_12.to_box()
    bool_3 = var_13.__eq__(var_6)
    var_11.filter(none_type_0)
