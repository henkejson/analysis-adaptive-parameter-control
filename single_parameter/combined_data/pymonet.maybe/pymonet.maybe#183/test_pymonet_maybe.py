# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1


def test_case_0():
    str_0 = "Fg5"
    maybe_0 = module_0.Maybe(str_0, str_0)


def test_case_1():
    list_0 = []
    maybe_0 = module_0.Maybe(list_0, list_0)


def test_case_2():
    float_0 = -2026.95485
    bool_0 = True
    maybe_0 = module_0.Maybe(float_0, bool_0)
    none_type_0 = None
    var_0 = maybe_0.ap(none_type_0)
    generic_0 = module_1.Generic()
    bool_1 = False
    maybe_1 = module_0.Maybe(float_0, bool_1)
    var_1 = maybe_0.to_box()
    dict_0 = {generic_0: generic_0}
    maybe_2 = module_0.Maybe(dict_0, dict_0)
    var_2 = maybe_2.to_either()
    bool_2 = maybe_1.__eq__(var_0)
    maybe_3 = module_0.Maybe(var_1, bool_0)
    var_1.filter(var_2)


def test_case_3():
    str_0 = "M):yagE"
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0, dict_0]
    bool_0 = True
    maybe_0 = module_0.Maybe(list_0, bool_0)
    bool_1 = maybe_0.__eq__(str_0)


def test_case_4():
    int_0 = -854
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.bind(int_0)
    var_2 = var_1.to_validation()
    var_3 = var_2.to_lazy()
    maybe_1 = module_0.Maybe(int_0, bool_0)
    var_4 = maybe_1.to_either()
    maybe_2 = module_0.Maybe(maybe_0, var_2)
    var_5 = maybe_2.to_either()
    maybe_3 = module_0.Maybe(var_5, var_2)
    bool_1 = True
    maybe_4 = module_0.Maybe(bool_0, var_3)
    var_6 = var_0.get_or_else(maybe_0)
    var_7 = var_1.ap(bool_1)
    var_8 = maybe_0.filter(var_3)
    var_9 = maybe_4.map(var_4)


def test_case_5():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1.map(maybe_1)


def test_case_6():
    int_0 = -854
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.bind(int_0)
    var_2 = maybe_0.to_lazy()
    maybe_1 = module_0.Maybe(int_0, bool_0)
    var_3 = maybe_1.to_either()
    maybe_2 = module_0.Maybe(maybe_0, var_0)
    var_4 = maybe_2.to_either()
    maybe_3 = module_0.Maybe(var_4, var_4)
    bool_1 = True
    maybe_4 = module_0.Maybe(bool_0, var_2)
    var_5 = var_0.get_or_else(maybe_0)
    var_6 = var_1.ap(bool_1)
    var_7 = maybe_0.filter(var_2)
    maybe_5 = module_0.Maybe(bool_0, var_0)


def test_case_7():
    str_0 = "\x0cXI"
    maybe_0 = module_0.Maybe(str_0, str_0)
    none_type_0 = None
    none_type_1 = None
    maybe_1 = module_0.Maybe(none_type_1, none_type_0)
    var_0 = maybe_1.to_either()
    maybe_1.bind(var_0)


def test_case_8():
    str_0 = "\n        Take function and applied this function on current Validation value and returns folder result.\n\n        :param mapper: mapper function\n        :type mapper: Function(A) -> Validation[B, E]\n        :returns: new Validation with mapped value\n        :rtype: Validation[B, E]\n        "
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.ap(str_0)
    bool_0 = False
    maybe_1 = module_0.Maybe(str_0, bool_0)
    bool_1 = True
    maybe_2 = module_0.Maybe(str_0, bool_1)
    var_1 = maybe_2.get_or_else(maybe_1)
    var_1.ap(str_0)


def test_case_9():
    none_type_0 = None
    str_0 = "\n        Returns new ImmutableList with elements from previous one\n        and argument value on the end of list\n\n        :param new_element: element to append on the end of list\n        :type fn: A\n        :returns: ImmutableList[A]\n        "
    str_1 = "Fg5"
    maybe_0 = module_0.Maybe(str_0, str_1)
    var_0 = maybe_0.filter(none_type_0)


def test_case_10():
    float_0 = -2026.955
    bool_0 = True
    maybe_0 = module_0.Maybe(float_0, bool_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(float_0, bool_1)
    var_0 = maybe_0.filter(bool_1)
    maybe_1.filter(float_0)


def test_case_11():
    float_0 = -2026.95485
    none_type_0 = None
    generic_0 = module_1.Generic()
    bool_0 = False
    maybe_0 = module_0.Maybe(float_0, bool_0)
    dict_0 = {generic_0: generic_0}
    maybe_1 = module_0.Maybe(dict_0, dict_0)
    var_0 = maybe_1.get_or_else(none_type_0)
    maybe_0.filter(maybe_0)


def test_case_12():
    float_0 = -809.9464
    bool_0 = False
    tuple_0 = (bool_0,)
    maybe_0 = module_0.Maybe(float_0, bool_0)
    maybe_1 = module_0.Maybe(float_0, float_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_1.bind(tuple_0)
    none_type_0 = None
    bool_1 = False
    maybe_2 = module_0.Maybe(tuple_0, bool_1)
    bool_2 = True
    maybe_3 = module_0.Maybe(none_type_0, bool_2)
    maybe_4 = module_0.Maybe(tuple_0, none_type_0)
    bool_3 = False
    maybe_5 = module_0.Maybe(bool_2, var_1)
    var_2 = maybe_4.get_or_else(maybe_3)
    var_3 = maybe_3.get_or_else(none_type_0)
    var_4 = maybe_1.to_try()
    var_5 = var_1.to_try()
    maybe_6 = module_0.Maybe(tuple_0, bool_3)
    var_6 = maybe_6.get_or_else(float_0)


def test_case_13():
    int_0 = -854
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.to_either()


def test_case_14():
    bytes_0 = b"\x01"
    bool_0 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.to_either()
    none_type_0 = None
    bool_1 = False
    maybe_1 = module_0.Maybe(none_type_0, bool_1)
    var_1 = maybe_1.to_validation()
    var_1.get_or_else(bytes_0)


def test_case_15():
    bool_0 = False
    bytes_0 = b"\x08\xc4J"
    maybe_0 = module_0.Maybe(bool_0, bytes_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_either()
    var_2 = var_1.to_try()
    var_2.to_lazy()


def test_case_16():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_box()
    var_0.get_or_else(var_0)


def test_case_17():
    bytes_0 = b"i\xba#MC\xf7U\xab\t\xfeN\xd1\xac\x131\xe2x\xfe"
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = var_0.to_lazy()
    var_2 = maybe_0.to_try()
    var_3 = maybe_0.to_lazy()
    var_4 = var_3.to_box()
    var_5 = var_4.to_lazy()
    bool_1 = False
    var_6 = maybe_0.filter(bool_1)
    var_7 = var_5.to_either()
    var_8 = maybe_0.to_lazy()


def test_case_18():
    none_type_0 = None
    dict_0 = {}
    maybe_0 = module_0.Maybe(none_type_0, dict_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_try()


def test_case_19():
    bytes_0 = b"{=\xb9\x1b\xec7w\xc87\xad\x87O\xd4\xff\xba3"
    tuple_0 = (bytes_0,)
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    maybe_1 = module_0.Maybe(tuple_0, tuple_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_1.to_try()
    var_1.to_either()


def test_case_20():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    bool_1 = True
    maybe_0 = module_0.Maybe(dict_0, bool_1)
    bool_2 = False
    maybe_1 = module_0.Maybe(bool_2, bool_2)
    var_0 = maybe_1.to_try()


def test_case_21():
    bool_0 = False
    str_0 = "\n        Transform Validation to Try.\n\n        :returns: Lazy monad with function returning Validation value\n        :rtype: Lazy[Function() -> (A | None)]\n        "
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.to_validation()
    var_1 = var_0.to_try()
    var_1.filter(bool_0)


def test_case_22():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = var_0.to_box()
    var_1.map(none_type_0)


def test_case_23():
    float_0 = -2026.955
    bool_0 = True
    maybe_0 = module_0.Maybe(float_0, bool_0)
    none_type_0 = None
    var_0 = maybe_0.ap(none_type_0)
    generic_0 = module_1.Generic()
    bool_1 = False
    var_1 = maybe_0.filter(bool_1)
    var_2 = var_1.to_either()
    bool_2 = maybe_0.__eq__(var_0)
    maybe_1 = module_0.Maybe(var_0, var_1)
    var_3 = var_1.get_or_else(var_2)
    var_4 = maybe_1.ap(generic_0)
    var_5 = var_4.filter(var_2)
    bool_3 = True
    maybe_2 = module_0.Maybe(var_4, bool_3)
    var_2.to_either()


def test_case_24():
    complex_0 = 4757 - 687.5j
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_validation()
    var_2 = var_1.to_either()
    var_3 = var_0.to_validation()
    var_2.get_or_else(complex_0)
