# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    set_0 = set()
    maybe_0 = module_0.Maybe(set_0, set_0)


def test_case_2():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    none_type_0 = None
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_validation()
    var_2 = maybe_0.filter(none_type_0)
    var_3 = maybe_0.get_or_else(none_type_0)
    var_4 = maybe_0.to_either()
    var_5 = maybe_0.filter(var_3)
    int_0 = -184
    var_6 = maybe_0.map(var_1)
    maybe_1 = module_0.Maybe(int_0, int_0)
    var_7 = var_2.bind(maybe_0)
    var_8 = maybe_1.get_or_else(none_type_0)
    maybe_2 = module_0.Maybe(var_8, none_type_0)
    bool_1 = maybe_2.__eq__(var_5)
    maybe_2.filter(none_type_0)


def test_case_3():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_validation()
    var_2 = maybe_0.to_lazy()
    var_3 = maybe_0.to_either()
    var_4 = maybe_0.get_or_else(maybe_0)
    var_5 = var_0.to_either()
    bool_0 = maybe_0.__eq__(var_0)


def test_case_4():
    int_0 = 1
    tuple_0 = (int_0, int_0)
    complex_0 = 2244.536805 - 1195.099j
    bool_0 = True
    maybe_0 = module_0.Maybe(complex_0, bool_0)
    var_0 = maybe_0.map(tuple_0)


def test_case_5():
    bytes_0 = b"\xdc\xea\x96"
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0}
    tuple_1 = (tuple_0, dict_0, dict_0, dict_0)
    none_type_0 = None
    maybe_0 = module_0.Maybe(tuple_1, none_type_0)
    maybe_0.map(bytes_0)


def test_case_6():
    none_type_0 = None
    bool_0 = True
    bool_1 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_1)
    var_0 = maybe_0.get_or_else(bool_0)
    bool_2 = True
    maybe_1 = module_0.Maybe(bool_0, bool_2)
    var_1 = maybe_1.to_validation()
    var_2 = maybe_1.bind(var_1)
    var_3 = maybe_1.to_lazy()
    var_4 = var_3.to_validation()
    var_5 = var_4.to_box()
    var_5.bind(none_type_0)


def test_case_7():
    bool_0 = False
    list_0 = []
    bytes_0 = b"\x94\xcbkK\x16X\xf9e"
    none_type_0 = None
    bool_1 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_1)
    var_0 = maybe_0.ap(bytes_0)
    var_1 = var_0.to_lazy()
    var_2 = var_1.ap(list_0)
    var_3 = var_2.ap(bool_0)


def test_case_8():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    maybe_0.ap(none_type_0)


def test_case_9():
    none_type_0 = None
    none_type_1 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_1, bool_0)
    var_0 = maybe_0.filter(none_type_0)
    var_1 = var_0.to_box()
    bool_1 = False
    maybe_1 = module_0.Maybe(bool_1, bool_1)
    maybe_1.filter(var_1)


def test_case_10():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_0.filter(none_type_0)


def test_case_11():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_try()
    bytes_0 = b"!I\xf8}\xb8uc\xb3\x8e\xc7"
    bool_0 = True
    maybe_1 = module_0.Maybe(bytes_0, bool_0)
    var_1 = maybe_1.bind(var_0)
    var_2 = maybe_1.map(var_0)
    var_3 = var_1.bind(var_0)
    var_4 = var_3.to_lazy()
    var_5 = var_4.to_either()
    var_6 = var_3.get_or_else(var_5)
    var_5.to_either()


def test_case_12():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_either()
    var_0.to_either()


def test_case_13():
    complex_0 = 4874.53684 - 940.18873j
    bytes_0 = b"\x07\x04"
    bool_0 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.to_try()
    bool_1 = var_0.__eq__(complex_0)
    var_1 = maybe_0.to_box()
    var_1.to_box()


def test_case_14():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_lazy()


def test_case_15():
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_try()
    var_0.to_lazy()


def test_case_16():
    list_0 = []
    maybe_0 = module_0.Maybe(list_0, list_0)
    var_0 = maybe_0.to_try()
    var_0.to_either()


def test_case_17():
    none_type_0 = None
    dict_0 = {}
    str_0 = "\n        :param constructor_fn: function to call during fold method call\n        :type constructor_fn: Function() -> A\n        "
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = var_0.to_try()
    var_2 = var_1.get_or_else(dict_0)
    var_2.map(none_type_0)


def test_case_18():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_try()
    bool_0 = False
    bool_1 = True
    list_0 = [bool_0, bool_1, bool_0, bool_0]
    bool_2 = False
    maybe_1 = module_0.Maybe(list_0, bool_2)
    var_1 = maybe_1.to_validation()
    bool_3 = False
    none_type_1 = None
    maybe_2 = module_0.Maybe(none_type_1, none_type_1)
    var_2 = maybe_2.to_try()
    var_2.ap(bool_3)


def test_case_19():
    bytes_0 = b"\xba\x98eO\xa4\x86\x8b\xb5y^\x16\xf9\xd0\xcd0"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    str_0 = "XFZ]"
    bytes_1 = b"\xe9\x96e_9\xef\xa3\x93\xd7\x96FX\xcb\t\x10\xc5^i]\xf6"
    maybe_0 = module_0.Maybe(str_0, bytes_1)
    maybe_1 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_1.ap(var_0)
    var_2 = maybe_1.to_lazy()
    var_3 = var_2.to_either()
    var_4 = var_3.to_try()
    var_4.bind(dict_0)


def test_case_20():
    generic_0 = module_1.Generic()
    bool_0 = True
    maybe_0 = module_0.Maybe(generic_0, bool_0)
    var_0 = maybe_0.map(generic_0)
    bool_1 = maybe_0.__eq__(var_0)
    var_1 = maybe_0.to_lazy()
    var_2 = var_1.bind(generic_0)
    maybe_1 = module_0.Maybe(bool_0, maybe_0)
    var_3 = maybe_1.to_box()
    var_4 = maybe_1.to_validation()
    var_5 = maybe_0.to_box()
    maybe_2 = module_0.Maybe(maybe_1, bool_0)
    none_type_0 = None
    var_3.filter(none_type_0)


def test_case_21():
    int_0 = 2170
    none_type_0 = None
    maybe_0 = module_0.Maybe(int_0, none_type_0)
    var_0 = maybe_0.to_either()
    list_0 = [int_0]
    maybe_1 = module_0.Maybe(list_0, int_0)
    var_1 = maybe_1.get_or_else(maybe_1)
    bool_0 = maybe_1.__eq__(var_1)
    var_2 = maybe_1.to_either()
    bool_1 = True
    var_3 = var_2.bind(var_2)
    var_4 = var_2.ap(int_0)
    none_type_1 = None
    maybe_2 = module_0.Maybe(bool_1, none_type_1)
    var_5 = var_2.to_lazy()
    bool_2 = maybe_2.__eq__(maybe_2)
    var_4.filter(var_4)


def test_case_22():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_validation()
    var_2 = var_1.to_either()
    maybe_0.bind(var_0)
