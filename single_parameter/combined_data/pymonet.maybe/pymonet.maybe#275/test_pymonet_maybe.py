# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    bytes_0 = b"&\xe9\x0e\xa1\xd5\xfdd\xd5\x88\xbc\xfdm"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    maybe_0.bind(none_type_0)


def test_case_3():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    none_type_0 = None
    var_0 = maybe_0.to_lazy()
    bool_1 = False
    maybe_1 = module_0.Maybe(none_type_0, bool_1)
    var_1 = maybe_1.to_lazy()
    var_2 = maybe_0.map(maybe_1)
    var_3 = maybe_0.to_try()
    var_4 = maybe_0.bind(bool_1)
    var_5 = var_4.map(none_type_0)
    var_6 = var_4.to_validation()
    var_7 = maybe_0.filter(var_6)
    var_8 = var_4.bind(var_2)
    var_9 = var_2.get_or_else(var_4)
    bool_2 = maybe_0.__eq__(var_3)
    var_10 = maybe_0.to_validation()
    var_11 = var_7.to_lazy()
    var_12 = maybe_0.bind(var_11)
    var_13 = var_8.ap(none_type_0)
    maybe_1.filter(var_10)


def test_case_4():
    tuple_0 = ()
    none_type_0 = None
    bytes_0 = b"c\x81j\xf6y\t\xac\xe74\x0e\xea\xa6.`\xf3\x8fx(p\x98"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.ap(none_type_0)
    var_1 = var_0.map(tuple_0)
    var_2 = var_1.to_try()


def test_case_5():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    var_1 = maybe_0.to_lazy()
    maybe_0.map(var_1)


def test_case_6():
    float_0 = 1018.460701
    dict_0 = {float_0: float_0}
    bool_0 = True
    maybe_0 = module_0.Maybe(dict_0, bool_0)
    var_0 = maybe_0.bind(maybe_0)
    complex_0 = 2991.4646 + 338.780446j
    var_1 = maybe_0.ap(dict_0)
    var_2 = var_1.ap(complex_0)
    var_3 = maybe_0.filter(var_2)


def test_case_7():
    bool_0 = False
    list_0 = [bool_0]
    bytes_0 = b"p\xc5\x92\xf5\xd3\x19\\\xff)\xc7*"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.ap(list_0)


def test_case_8():
    str_0 = "\n        :param semigroup: other semigroup to concat\n        :type semigroup: Last[B]\n        :returns: new Last with last value\n        :rtype: Last[A]\n        "
    dict_0 = {str_0: str_0, str_0: str_0}
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_0.ap(dict_0)


def test_case_9():
    none_type_0 = None
    none_type_1 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_1, bool_0)
    maybe_0.filter(none_type_0)


def test_case_10():
    float_0 = 91.725298
    maybe_0 = module_0.Maybe(float_0, float_0)
    var_0 = maybe_0.to_box()
    bool_0 = var_0.__eq__(float_0)
    bool_1 = True
    var_1 = maybe_0.get_or_else(var_0)
    var_2 = maybe_0.to_lazy()
    var_3 = var_0.to_validation()
    var_4 = maybe_0.to_either()
    var_5 = var_2.to_box()
    bool_2 = True
    maybe_1 = module_0.Maybe(var_1, bool_2)
    maybe_2 = module_0.Maybe(float_0, bool_1)
    var_6 = maybe_2.to_either()


def test_case_11():
    none_type_0 = None
    bool_0 = False
    bool_1 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_1)
    var_0 = maybe_0.get_or_else(bool_0)
    var_0.filter(bool_0)


def test_case_12():
    bytes_0 = b"K=\xa6O\xb2\xbeY"
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_either()
    maybe_1 = module_0.Maybe(bytes_0, bytes_0)
    var_1 = maybe_1.to_try()
    var_1.to_box()


def test_case_13():
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_0, none_type_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.to_either()
    var_2 = maybe_0.to_either()
    var_3 = maybe_0.to_try()
    var_3.to_lazy()


def test_case_14():
    float_0 = 1018.460701
    dict_0 = {float_0: float_0}
    bool_0 = True
    maybe_0 = module_0.Maybe(dict_0, bool_0)
    var_0 = maybe_0.bind(maybe_0)
    complex_0 = 2991.4646 + 338.780446j
    var_1 = maybe_0.ap(dict_0)
    var_2 = maybe_0.to_validation()
    var_3 = var_1.ap(complex_0)
    var_4 = maybe_0.filter(var_3)
    var_5 = var_3.to_box()


def test_case_15():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_box()
    var_0.to_box()


def test_case_16():
    none_type_0 = None
    bytes_0 = b"ts\xcd\xd3\xf9\x96"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    bool_0 = True
    maybe_0 = module_0.Maybe(set_0, bool_0)
    var_0 = maybe_0.to_lazy()
    dict_0 = {}
    var_1 = maybe_0.bind(none_type_0)
    var_2 = maybe_0.filter(dict_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(maybe_0, bool_1)


def test_case_17():
    int_0 = -899
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.to_validation()


def test_case_18():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_0.to_validation()


def test_case_19():
    none_type_0 = None
    bool_0 = True
    bool_1 = True
    dict_0 = {bool_1: bool_1, bool_1: bool_1, bool_1: bool_1}
    bool_2 = False
    maybe_0 = module_0.Maybe(dict_0, bool_2)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_box()
    maybe_1 = module_0.Maybe(var_1, bool_1)
    var_2 = maybe_1.ap(bool_0)
    var_3 = var_2.to_either()
    var_4 = var_3.to_validation()
    var_4.get_or_else(none_type_0)


def test_case_20():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    none_type_0 = None
    var_0 = maybe_0.to_lazy()
    bool_1 = False
    maybe_1 = module_0.Maybe(none_type_0, bool_1)
    var_1 = maybe_0.filter(none_type_0)
    var_2 = maybe_0.bind(bool_1)
    bool_2 = maybe_0.__eq__(var_1)
    var_3 = var_2.ap(none_type_0)
    maybe_1.filter(maybe_0)


def test_case_21():
    int_0 = -2763
    maybe_0 = module_0.Maybe(int_0, int_0)
    bool_0 = maybe_0.__eq__(int_0)
    var_0 = maybe_0.ap(int_0)
    float_0 = -707.6
    bool_1 = var_0.__eq__(float_0)
    var_1 = maybe_0.map(int_0)
    var_2 = maybe_0.to_try()
    var_3 = maybe_0.bind(var_2)
    bool_2 = maybe_0.__eq__(var_3)
    var_4 = var_1.get_or_else(var_3)
    bool_3 = var_0.__eq__(bool_1)
    var_5 = var_3.to_validation()
    var_6 = var_3.to_either()
    var_7 = var_0.filter(var_5)
    bool_4 = var_3.__eq__(int_0)
    var_8 = var_3.to_either()
    var_9 = var_8.to_lazy()
    var_10 = var_3.ap(var_1)
    var_11 = var_8.to_lazy()
    var_12 = var_11.to_try()
    var_2.to_try()
