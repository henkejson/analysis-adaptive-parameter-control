# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    bytes_0 = b"\xe40^E\xaey-\x8a\x91`^\x1e\x91\xb0\x05\x94\xcf"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    str_0 = ""
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = module_0.Maybe(str_0, maybe_0)
    var_1 = var_0.to_box()
    maybe_1 = module_0.Maybe(str_0, str_0)
    bool_0 = maybe_1.__eq__(str_0)
    var_2 = maybe_1.to_try()
    var_2.to_try()


def test_case_3():
    bool_0 = True
    bytes_0 = b"T\xc5\xf0\x04\x87\x99\x1e\x10>\x82n~\x81"
    set_0 = {bytes_0}
    bool_1 = True
    maybe_0 = module_0.Maybe(set_0, bool_1)
    var_0 = maybe_0.map(bool_0)
    var_1 = var_0.to_box()
    var_2 = var_1.to_validation()


def test_case_4():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_try()
    str_0 = ""
    str_1 = "Y^A\ti]wR%\tjhGC;"
    maybe_1 = module_0.Maybe(str_0, str_1)
    var_1 = maybe_1.to_lazy()
    var_2 = var_1.to_either()
    var_3 = var_2.to_lazy()
    var_4 = var_3.bind(var_0)
    maybe_0.map(var_3)


def test_case_5():
    bytes_0 = b"\xbc\x14DT\x18\xa7\xba6?\xbf\x0eO\x0f\x06_\xe6\xdc"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.filter(bytes_0)
    var_1 = maybe_0.bind(maybe_0)
    bool_0 = False
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    var_2 = var_1.map(bytes_0)
    maybe_1.filter(maybe_1)


def test_case_6():
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.bind(bool_0)


def test_case_7():
    str_0 = '"xR'
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.ap(str_0)
    var_1 = maybe_0.to_box()
    var_2 = maybe_0.filter(var_0)
    var_3 = var_1.to_validation()


def test_case_8():
    dict_0 = {}
    bool_0 = dict_0.__eq__(dict_0)
    none_type_0 = None
    dict_1 = {}
    maybe_0 = module_0.Maybe(bool_0, dict_1)
    maybe_0.ap(none_type_0)


def test_case_9():
    bytes_0 = b"\x0f\x14DT\x18\xa7\xba6?\xbf\x0eO\x0f\x06_\xe6\xdc"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.filter(bytes_0)
    var_1 = var_0.to_lazy()
    bool_0 = False
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    maybe_1.filter(maybe_1)


def test_case_10():
    bytes_0 = b"\x0f\x14DT\x18\xa7\xba6?\xbf\x0eO\x0f\x06_\xe6\xdc"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.filter(bytes_0)
    var_1 = maybe_0.get_or_else(var_0)
    bool_0 = False
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    maybe_1.filter(maybe_1)


def test_case_11():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    maybe_1 = module_0.Maybe(maybe_0, bool_0)
    var_0.map(maybe_1)


def test_case_12():
    int_0 = -2101
    maybe_0 = module_0.Maybe(int_0, int_0)
    none_type_0 = None
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.ap(none_type_0)
    var_2 = maybe_0.map(none_type_0)
    var_3 = var_1.to_either()
    var_4 = var_3.to_try()
    var_5 = maybe_0.get_or_else(int_0)


def test_case_13():
    complex_0 = 3005.90123 + 68.28j
    none_type_0 = None
    maybe_0 = module_0.Maybe(complex_0, none_type_0)
    var_0 = maybe_0.to_either()
    none_type_1 = None
    bool_0 = True
    bool_1 = False
    tuple_0 = (bool_0, bool_1)
    none_type_2 = None
    maybe_1 = module_0.Maybe(tuple_0, none_type_2)
    var_1 = maybe_1.to_either()
    var_1.ap(none_type_1)


def test_case_14():
    bool_0 = False
    none_type_0 = None
    bool_1 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_1)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.to_lazy()
    var_0.map(bool_0)


def test_case_15():
    str_0 = "\n        Take mapper function and returns result of them called with Right value.\n\n        :param mapper: function to apply on Right value\n        :type mapper: Function(A) -> Either[B]\n        :returns: result of mapper\n        :rtype: Either[B]\n        "
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.to_lazy()
    var_0.to_lazy()


def test_case_16():
    str_0 = ""
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_box()
    maybe_1 = module_0.Maybe(str_0, str_0)
    bool_0 = maybe_1.__eq__(str_0)
    var_2 = var_1.to_try()
    var_3 = maybe_1.to_try()
    var_3.to_try()


def test_case_17():
    int_0 = -2101
    maybe_0 = module_0.Maybe(int_0, int_0)
    none_type_0 = None
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.ap(none_type_0)
    float_0 = -162.181496
    var_2 = maybe_0.filter(float_0)
    var_0.to_validation()


def test_case_18():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_try()
    var_0.to_box()


def test_case_19():
    int_0 = -1871
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = var_0.to_try()
    var_1.to_either()


def test_case_20():
    float_0 = 2255.5316
    bool_0 = False
    none_type_0 = None
    bool_1 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_1)
    maybe_1 = module_0.Maybe(float_0, bool_0)
    var_0 = maybe_1.to_validation()
    var_0.to_validation()


def test_case_21():
    bytes_0 = b"\xbc\x14DT\x18\xa7\xba6?\xbf\x0eO\x0f\x06_\xe6\xdc"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.filter(bytes_0)
    var_1 = var_0.to_lazy()
    bool_0 = False
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    var_2 = var_1.to_box()
    maybe_1.filter(maybe_1)


def test_case_22():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    maybe_1 = module_0.Maybe(maybe_0, bool_0)
    var_1 = var_0.map(maybe_1)
    var_2 = maybe_1.to_lazy()
    maybe_2 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = maybe_2.__eq__(var_1)


def test_case_23():
    bytes_0 = b"=\xe40^E\xaey-\x8a\x91`^\x1e\x91\xb0\x05\x94\xcf"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    var_1 = maybe_0.filter(var_0)
    var_2 = var_1.map(var_0)
    var_3 = maybe_0.ap(var_0)
    bool_0 = var_3.__eq__(var_0)
    var_4 = maybe_0.to_lazy()
    var_5 = var_3.to_validation()
    var_6 = var_1.to_try()
    var_6.to_box()


def test_case_24():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_lazy()
    bool_1 = var_0.__eq__(var_0)
    var_1 = maybe_0.to_box()
    maybe_0.ap(none_type_0)
