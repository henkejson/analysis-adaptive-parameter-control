# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import builtins as module_1


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    maybe_2 = module_0.Maybe(bool_0, bool_0)
    bool_1 = maybe_1.__eq__(maybe_0)
    var_0 = maybe_1.to_lazy()
    var_1 = maybe_2.bind(var_0)
    var_2 = maybe_2.to_try()
    var_3 = var_2.filter(var_2)


def test_case_3():
    object_0 = module_1.object()
    maybe_0 = module_0.Maybe(object_0, object_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, object_0)
    var_0 = maybe_0.map(maybe_0)
    var_1 = maybe_0.to_validation()
    var_2 = maybe_0.ap(var_1)
    var_3 = var_2.to_either()
    var_4 = var_1.to_lazy()
    bool_0 = True
    var_5 = maybe_1.filter(bool_0)
    var_6 = maybe_0.to_try()
    bool_1 = var_0.__eq__(object_0)
    maybe_2 = module_0.Maybe(var_2, var_2)
    var_7 = maybe_0.map(var_3)
    var_8 = maybe_0.to_box()
    var_9 = maybe_0.to_lazy()
    var_10 = var_5.to_try()


def test_case_4():
    bytes_0 = b"\xe2\xef\xeb\x0e5 \xb9\x04b\x8c\x1f\x18\xd4\xd8\xff\xae"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    none_type_0 = None
    var_0 = maybe_0.map(none_type_0)
    var_1 = maybe_0.to_validation()
    var_2 = maybe_0.ap(bytes_0)
    var_3 = var_2.to_try()
    var_4 = var_2.map(bytes_0)
    var_5 = maybe_0.to_try()
    bool_0 = var_4.__eq__(var_2)
    none_type_1 = None
    maybe_1 = module_0.Maybe(bytes_0, none_type_1)
    bool_1 = maybe_0.__eq__(var_4)
    var_6 = maybe_1.to_try()
    var_7 = maybe_1.to_lazy()


def test_case_5():
    str_0 = "Maybe[None]"
    list_0 = []
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    maybe_0.map(list_0)


def test_case_6():
    bytes_0 = b"~"
    bool_0 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    maybe_0.bind(bytes_0)


def test_case_7():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    int_0 = 0
    bool_1 = False
    maybe_0 = module_0.Maybe(int_0, bool_1)
    maybe_0.ap(tuple_0)


def test_case_8():
    bytes_0 = b"(\xd1\xc6\x8a\xb4\xd0\xdd\x0f\x0f\x1fFsaUw\xee\xfb\xb4=\x9a"
    none_type_0 = None
    bytes_1 = b"\xedG\xa2\xe1\x95\xd4\x8b\xd9`"
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_1, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.filter(var_0)
    var_2 = var_1.ap(var_0)
    var_3 = var_1.to_either()
    var_4 = maybe_0.ap(bool_0)
    var_5 = var_4.bind(bool_0)
    var_6 = var_4.ap(bytes_0)
    var_7 = var_0.bind(none_type_0)
    var_7.get_or_else(bytes_0)


def test_case_9():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.filter(none_type_0)


def test_case_10():
    none_type_0 = None
    none_type_1 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.get_or_else(none_type_1)
    var_1.filter(none_type_0)


def test_case_11():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.get_or_else(none_type_0)
    var_0.to_box()


def test_case_12():
    bytes_0 = b"\xd0\xfd\xf1\x7f\xfd0jlL\xe0\xd1"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_try()
    var_1.to_validation()


def test_case_13():
    complex_0 = -161.282 + 3342j
    maybe_0 = module_0.Maybe(complex_0, complex_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_1.to_box()
    var_1 = maybe_1.to_either()
    var_1.map(var_1)


def test_case_14():
    bytes_0 = b"\xe2\xef\xeb\x0e5 \xb9\x04b\x8c\x1f\x18\xd4\xd8\xff\xae"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    none_type_0 = None
    var_0 = maybe_0.map(none_type_0)
    var_1 = maybe_0.to_validation()
    var_2 = maybe_0.ap(bytes_0)
    var_3 = var_2.to_try()
    var_4 = var_2.map(bytes_0)
    var_5 = maybe_0.to_try()
    bool_0 = var_4.__eq__(var_2)
    none_type_1 = None
    maybe_1 = module_0.Maybe(bytes_0, none_type_1)
    var_6 = var_4.map(none_type_0)
    var_7 = var_2.to_box()
    var_8 = maybe_0.to_lazy()
    var_9 = var_4.to_try()


def test_case_15():
    none_type_0 = None
    str_0 = "=gIH"
    int_0 = -126
    maybe_0 = module_0.Maybe(str_0, int_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.map(str_0)
    maybe_1 = module_0.Maybe(str_0, var_1)
    var_2 = maybe_1.to_try()
    var_3 = var_2.filter(none_type_0)


def test_case_16():
    str_0 = "3hv%*Oa"
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_try()
    var_0.to_lazy()


def test_case_17():
    float_0 = -90.0
    bool_0 = False
    maybe_0 = module_0.Maybe(float_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_0.map(float_0)


def test_case_18():
    bytes_0 = b"c\x91\x9eO?\x02\xb7\x86d\x18X(\xef"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_lazy()
    bool_0 = var_0.__eq__(var_0)
    var_1 = maybe_0.to_try()
    var_2 = var_0.to_validation()
    var_3 = var_0.to_validation()
    var_0.filter(maybe_0)


def test_case_19():
    bytes_0 = b"\xef\x8e["
    none_type_0 = None
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.ap(none_type_0)
    none_type_1 = None
    bool_0 = False
    maybe_1 = module_0.Maybe(none_type_1, bool_0)
    var_1 = maybe_1.to_lazy()
    var_2 = var_1.to_try()
    var_2.to_lazy()


def test_case_20():
    complex_0 = 1864.941 + 1042.2946j
    none_type_0 = None
    maybe_0 = module_0.Maybe(complex_0, none_type_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.to_either()
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_2 = maybe_0.to_try()
    var_3 = maybe_1.get_or_else(complex_0)
    var_4 = var_1.to_try()
    bool_0 = maybe_1.__eq__(maybe_1)
    maybe_1.bind(var_3)
