# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import builtins as module_1


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    bool_0 = False
    var_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    object_0 = module_1.object()
    var_0 = maybe_0.filter(none_type_0)
    int_0 = -1192
    maybe_1 = module_0.Maybe(object_0, int_0)
    var_1 = maybe_1.get_or_else(none_type_0)
    var_1.to_box()


def test_case_3():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = maybe_0.__eq__(bool_0)
    var_0 = maybe_0.filter(maybe_0)
    var_1 = maybe_0.get_or_else(bool_1)
    var_2 = maybe_0.to_box()
    var_3 = var_0.to_either()
    var_4 = var_2.to_either()
    var_5 = var_3.to_try()
    var_6 = var_0.to_box()


def test_case_4():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    dict_0 = {}
    maybe_1 = module_0.Maybe(dict_0, dict_0)
    var_0 = maybe_1.to_validation()
    maybe_2 = module_0.Maybe(var_0, maybe_1)
    var_1 = maybe_2.map(maybe_0)
    var_2 = var_1.to_try()
    str_0 = "\n        Take 2 functions call only one of then with either value and return her result.\n\n        :params error: function to call when Either is Left\n        :type error: Function(A) -> B\n        :params success: function to call when Either is Right\n        :type success: Function(A) -> B\n        :returns: result of success handler when Eihter is Right, result of error handler when Eihter is Left\n        :rtpye: B\n        "
    maybe_3 = module_0.Maybe(str_0, str_0)
    var_3 = maybe_3.to_box()
    var_4 = var_3.to_validation()
    var_4.get_or_else(var_2)


def test_case_5():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.to_box()
    maybe_0.map(var_1)


def test_case_6():
    set_0 = set()
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_1 = module_0.Maybe(set_0, bool_0)
    var_0 = maybe_1.filter(set_0)
    var_1 = var_0.bind(set_0)
    maybe_2 = module_0.Maybe(set_0, set_0)
    maybe_2.filter(set_0)


def test_case_7():
    none_type_0 = None
    bool_0 = False
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    maybe_0.bind(none_type_0)


def test_case_8():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.filter(none_type_0)
    var_1 = var_0.to_either()
    var_2 = maybe_0.to_validation()
    var_3 = var_0.ap(none_type_0)


def test_case_9():
    int_0 = 0
    str_0 = "O+my9v8\nvq"
    none_type_0 = None
    maybe_0 = module_0.Maybe(str_0, none_type_0)
    maybe_0.ap(int_0)


def test_case_10():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.filter(none_type_0)
    var_1 = maybe_0.get_or_else(none_type_0)


def test_case_11():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_validation()
    maybe_0.filter(var_0)


def test_case_12():
    bool_0 = True
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.get_or_else(bool_0)
    var_0.to_validation()


def test_case_13():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = maybe_0.__eq__(bool_0)
    object_0 = module_1.object()
    var_0 = maybe_0.filter(maybe_0)
    bool_2 = False
    maybe_1 = module_0.Maybe(object_0, bool_2)
    var_1 = maybe_0.get_or_else(bool_1)
    var_2 = maybe_0.to_box()
    var_3 = maybe_1.to_either()
    var_4 = var_2.to_either()
    var_5 = var_3.to_try()
    var_6 = maybe_1.to_box()


def test_case_14():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_either()


def test_case_15():
    bytes_0 = b"\x8c\xfeR\x83\xbc\xd3\xef\x94\xe1"
    bool_0 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.to_box()


def test_case_16():
    complex_0 = 1025.24176 + 1140j
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = maybe_0.__eq__(complex_0)
    object_0 = module_1.object()
    none_type_0 = None
    var_0 = maybe_0.filter(none_type_0)
    var_1 = var_0.to_try()
    var_2 = maybe_0.ap(bool_1)
    var_3 = var_0.to_lazy()
    var_4 = var_0.to_either()
    var_5 = var_0.to_either()
    var_6 = var_0.filter(var_2)
    var_7 = maybe_0.to_either()
    var_1.to_box()


def test_case_17():
    float_0 = -129.9685
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_0.filter(float_0)


def test_case_18():
    none_type_0 = None
    bool_0 = False
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_try()
    var_1 = var_0.bind(none_type_0)
    str_0 = "\rXlMzswfzjN"
    maybe_1 = module_0.Maybe(str_0, str_0)


def test_case_19():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_try()


def test_case_20():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_validation()
    var_0.to_validation()


def test_case_21():
    bool_0 = False
    bool_0.to_either()


def test_case_22():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.get_or_else(bool_0)
    var_1 = maybe_0.ap(var_0)
    str_0 = "+\x0c\rQ\raOr9n|amkfi@j&"
    bool_2 = maybe_0.__eq__(str_0)
    var_2 = maybe_0.filter(var_1)
    bool_3 = True
    maybe_1 = module_0.Maybe(var_0, bool_3)
    var_3 = var_1.get_or_else(bool_0)
    var_4 = var_1.to_box()
    var_5 = maybe_0.map(none_type_0)
    var_6 = var_5.to_lazy()
    var_7 = var_6.to_either()
    var_8 = var_1.to_either()
    var_3.to_try()


def test_case_23():
    bool_0 = False
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_validation()
    var_2 = var_1.to_lazy()
    var_2.filter(none_type_0)


def test_case_24():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)


def test_case_25():
    bool_0 = True
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_try()
    bool_2 = maybe_0.__eq__(bool_1)
    var_1 = maybe_0.ap(bool_1)
    var_2 = maybe_0.ap(bool_0)
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    maybe_2 = module_0.Maybe(maybe_1, var_1)
    bool_3 = var_1.__eq__(maybe_2)
    var_3 = maybe_1.to_box()
    var_4 = maybe_2.to_try()
    var_5 = maybe_2.to_either()
    var_6 = maybe_1.get_or_else(bool_0)
    var_7 = var_2.get_or_else(var_2)
    var_8 = maybe_1.to_try()
    var_8.to_validation()
