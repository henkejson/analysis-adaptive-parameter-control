# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    bytes_0 = b"\xef\x94\x9f[\x16\xb4\xcf\xdbC%\x0e`\x0e\xc3\xf7\xba%\\\xd6\x1d"
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.bind(bytes_0)
    bool_1 = var_0.__eq__(var_0)


def test_case_3():
    bytes_0 = b"i\x8b\xac"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.filter(bytes_0)
    bool_0 = maybe_0.__eq__(bytes_0)
    maybe_1 = module_0.Maybe(maybe_0, bool_0)
    maybe_1.filter(bool_0)


def test_case_4():
    int_0 = 1
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.to_either()
    bool_1 = maybe_0.__eq__(maybe_0)
    var_1 = maybe_0.to_either()
    bool_2 = False
    var_2 = var_1.map(bool_2)
    maybe_1 = maybe_0.map(bool_1)
    var_3 = maybe_1.to_either()
    var_2.to_either()


def test_case_5():
    int_0 = 1
    bool_0 = False
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_box()
    bool_1 = maybe_0.__eq__(maybe_0)
    maybe_0.map(var_0)


def test_case_6():
    bytes_0 = b"\xa3\xed\xd1\xb5Z\xb5/H-\xc2\xcfy\xde\x02w\xb8"
    set_0 = set()
    bool_0 = True
    maybe_0 = module_0.Maybe(set_0, bool_0)
    bool_1 = maybe_0.__eq__(bytes_0)
    var_0 = maybe_0.ap(bytes_0)
    var_1 = var_0.to_either()
    var_2 = var_1.to_validation()
    var_3 = var_1.to_validation()
    bool_2 = False
    var_4 = var_0.to_either()
    var_5 = var_0.to_box()
    maybe_1 = module_0.Maybe(var_3, bool_2)
    var_6 = var_0.to_try()
    var_3.get_or_else(var_3)


def test_case_7():
    str_0 = "{~cG GZ@d;iOgb"
    bytes_0 = b"\x12\xa3\x8b{Z+\xbd\xeaA\x9f\x95\xdb\xcd=\x8d"
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    maybe_0.ap(bytes_0)


def test_case_8():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.to_box()
    maybe_0.filter(maybe_0)


def test_case_9():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.get_or_else(maybe_0)
    var_2 = maybe_0.to_try()
    var_2.to_box()


def test_case_10():
    none_type_0 = None
    str_0 = 'w|;h<x!2c"!oY+lI*\\:'
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_1 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_1.get_or_else(none_type_0)


def test_case_11():
    int_0 = 1
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.to_either()
    bool_1 = maybe_0.__eq__(maybe_0)
    var_1 = maybe_0.to_either()
    bool_2 = False
    bool_3 = True
    tuple_0 = (bool_3,)
    var_2 = var_1.map(bool_2)
    maybe_1 = module_0.Maybe(tuple_0, tuple_0)
    var_3 = maybe_1.to_either()
    var_4 = var_3.ap(bool_2)
    var_3.filter(var_1)


def test_case_12():
    bool_0 = True
    bytes_0 = b"4\x05\xb8?~\x104m9J\x15/"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_box()
    var_0.get_or_else(bool_0)


def test_case_13():
    int_0 = -1239
    none_type_0 = None
    bytes_0 = b"\xb0\xfc\xa42:w`\x18\xcc\x8b"
    maybe_0 = module_0.Maybe(none_type_0, bytes_0)
    var_0 = maybe_0.to_lazy()
    var_0.filter(int_0)


def test_case_14():
    bytes_0 = b"\x05\x0c\xa9T+\xf8"
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_1 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_1.to_lazy()
    var_1 = var_0.to_box()
    var_2 = maybe_1.to_either()
    var_3 = var_0.ap(var_2)
    var_4 = var_2.to_lazy()
    var_3.to_either()


def test_case_15():
    dict_0 = {}
    none_type_0 = None
    maybe_0 = module_0.Maybe(dict_0, none_type_0)
    var_0 = maybe_0.to_try()
    var_0.to_box()


def test_case_16():
    none_type_0 = None
    complex_0 = -4616.95403 - 969.316j
    bool_0 = True
    maybe_0 = module_0.Maybe(complex_0, bool_0)
    var_0 = maybe_0.bind(none_type_0)
    var_1 = var_0.get_or_else(complex_0)
    var_2 = var_0.to_box()
    bytes_0 = b"\xef\x94\x9f[\x16\xb4\xcf\xdbC%\x0e`\x0e\xc3\xf7\xba%\\\xd6\x1d"
    bool_1 = True
    var_3 = var_0.filter(bool_0)
    maybe_1 = module_0.Maybe(bytes_0, bool_1)
    var_4 = maybe_1.bind(maybe_0)
    var_5 = maybe_0.filter(var_2)
    var_6 = var_4.to_validation()
    var_6.filter(none_type_0)


def test_case_17():
    bytes_0 = b"\x0e\xe39\x89-\xfcq\xe3t\xc8-\xf1\xc4\xe8<5+\xb6"
    bool_0 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.to_validation()
    bool_1 = var_0.__eq__(bool_0)
    var_1 = maybe_0.to_try()
    var_2 = maybe_0.to_try()
    var_2.to_either()


def test_case_18():
    int_0 = 0
    bool_0 = True
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.get_or_else(int_0)
    bytes_0 = b"\x9a\xc1"
    bool_2 = True
    maybe_1 = module_0.Maybe(bytes_0, bool_2)
    var_1 = maybe_1.to_lazy()
    var_2 = var_1.to_try()
    var_2.to_either()


def test_case_19():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_validation()
    maybe_0.bind(var_0)


def test_case_20():
    bytes_0 = b"\xa3\xed\xd1\xb5Z\xb5/H-\xc2\xcfy\xde\x02w\xb8"
    set_0 = set()
    bool_0 = True
    maybe_0 = module_0.Maybe(set_0, bool_0)
    bool_1 = maybe_0.__eq__(bytes_0)
    var_0 = maybe_0.ap(bytes_0)
    maybe_1 = module_0.Maybe(bytes_0, var_0)
    bool_2 = True
    maybe_2 = module_0.Maybe(bool_1, bool_2)
    var_1 = var_0.ap(bool_1)
    var_2 = maybe_0.map(maybe_0)
    var_3 = maybe_1.to_box()
    maybe_3 = module_0.Maybe(var_2, var_1)
    var_4 = maybe_2.filter(var_0)
    maybe_4 = module_0.Maybe(bool_2, maybe_1)
    var_5 = var_4.bind(set_0)
    var_6 = maybe_4.filter(var_0)
    var_7 = maybe_1.to_validation()
    var_8 = var_7.to_box()
    var_9 = maybe_3.to_validation()
    var_10 = var_5.bind(var_0)
    bool_3 = var_5.__eq__(maybe_1)
    var_11 = var_6.to_box()
    var_12 = maybe_0.to_validation()
    var_12.map(var_11)
