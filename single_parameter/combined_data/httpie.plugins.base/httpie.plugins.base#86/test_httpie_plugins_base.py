# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import httpie.plugins.base as module_0


def test_case_0():
    transport_plugin_0 = module_0.TransportPlugin()


def test_case_1():
    int_0 = -2302
    auth_plugin_0 = module_0.AuthPlugin()
    auth_plugin_0.get_auth(password=int_0)


def test_case_2():
    transport_plugin_0 = module_0.TransportPlugin()
    transport_plugin_0.get_adapter()


def test_case_3():
    str_0 = "\n    Colorize using Pygments\n\n    This processor that applies syntax highlighting to the headers,\n    and also to the body if its content type is recognized.\n\n    "
    converter_plugin_0 = module_0.ConverterPlugin(str_0)


def test_case_4():
    str_0 = "USER[:PASS] | TOKEN"
    converter_plugin_0 = module_0.ConverterPlugin(str_0)
    converter_plugin_0.convert(str_0)


def test_case_5():
    module_0.FormatterPlugin()


def test_case_6():
    int_0 = 3541
    str_0 = '\n    Parse and validate Content-Range header.\n\n    <https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html>\n\n    :param content_range: the value of a Content-Range response header\n                          eg. "bytes 21010-47021/47022"\n    :param resumed_from: first byte pos. from the Range request header\n    :return: total size of the response body when fully downloaded.\n\n    '
    str_1 = "format_options"
    bool_0 = True
    str_2 = 'a"DHyl'
    dict_0 = {str_1: int_0, str_1: bool_0, str_2: int_0}
    formatter_plugin_0 = module_0.FormatterPlugin(**dict_0)
    str_3 = formatter_plugin_0.format_headers(str_0)
    str_4 = formatter_plugin_0.format_body(str_2, str_2)
    converter_plugin_0 = module_0.ConverterPlugin(str_0)
    module_0.FormatterPlugin()


def test_case_7():
    int_0 = 3541
    str_0 = '\n    Parse and vanidate Content-Range header.\n\n    <https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html>\n\n    :param content_range: the value of a Content-Range response header\n                          eg. "bytes 21010-47021/47022"\n    :param resumed_from: first byte pos. from the Range request header\n    :return: total size of the response body when fully downloaded.\n\n    '
    str_1 = "format_options"
    bool_0 = True
    dict_0 = {str_1: int_0, str_1: bool_0, str_1: int_0}
    formatter_plugin_0 = module_0.FormatterPlugin(**dict_0)
    str_2 = formatter_plugin_0.format_headers(str_0)
    str_3 = formatter_plugin_0.format_metadata(str_0)
    str_4 = formatter_plugin_0.format_body(str_1, str_1)
    converter_plugin_0 = module_0.ConverterPlugin(str_0)
    module_0.FormatterPlugin()
