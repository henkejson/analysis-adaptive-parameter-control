# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1


def test_case_0():
    float_0 = -476.66
    module_0.to_namedtuple(float_0)


def test_case_1():
    float_0 = -67.0
    set_0 = {float_0, float_0, float_0, float_0}
    tuple_0 = (float_0, set_0)
    var_0 = module_0.to_namedtuple(tuple_0)
    module_0.to_namedtuple(set_0)


def test_case_2():
    str_0 = "author"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_3():
    bytes_0 = b"xs&,\x9b\xc2\xf1\x80\xb3y"
    module_0.to_namedtuple(bytes_0)


def test_case_4():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_5():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    var_1 = module_0.to_namedtuple(var_0)
    var_2 = module_0.to_namedtuple(ordered_dict_0)
    var_3 = module_0.to_namedtuple(var_2)
    bytes_0 = b"\xe2\xf8\xb9\x01\x8c\xa5\xed\xb1\x0e&rdHE"
    var_4 = module_0.to_namedtuple(ordered_dict_0)
    tuple_0 = (var_1, bytes_0)
    var_5 = module_0.to_namedtuple(tuple_0)
    var_6 = module_0.to_namedtuple(ordered_dict_0)


def test_case_6():
    str_0 = "wm=-g\ry#\x0b#:*"
    dict_0 = {str_0: str_0, str_0: str_0}
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    none_type_0 = None
    list_0 = [none_type_0]
    module_1.OrderedDict(*list_0)


def test_case_7():
    list_0 = []
    list_1 = [list_0]
    var_0 = module_0.to_namedtuple(list_1)
    none_type_0 = None
    module_0.to_namedtuple(none_type_0)


def test_case_8():
    str_0 = "Normalize a given path.\n\n    The given ``path`` will be normalized in the following process.\n\n    #. :obj:`bytes` will be converted to a :obj:`str` using the encoding\n       given by :obj:`getfilesystemencoding() <sys.getfilesystemencoding>`.\n    #. :obj:`PosixPath <pathlib.PosixPath>` and\n       :obj:`WindowsPath <pathlib.WindowsPath>` will be converted\n       to a :obj:`str` using the :obj:`as_posix() <pathlib.PurePath.as_posix>`\n       method.\n    #. An initial component of ``~`` will be replaced by that userâ€™s\n       home directory.\n    #. Any environment variables will be expanded.\n    #. Non absolute paths will have the current working directory from\n       :obj:`os.getcwd() <os.cwd>`prepended.  If needed, use\n       :obj:`os.chdir() <os.chdir>` to change the current working directory\n       before calling this function.\n    #. Redundant separators and up-level references will be normalized, so\n       that ``A//B``, ``A/B/``, ``A/./B`` and ``A/foo/../B`` all become\n       ``A/B``.\n\n    Args:\n        path (:obj:`str`, :obj:`bytes` or :obj:`Path <pathlib.Path>`):\n            The path to be normalized.\n\n    :rtype:\n        :obj:`Path <pathlib.Path>`\n\n        * :obj:`PosixPath <pathlib.PosixPath>` or\n          :obj:`WindowsPath <pathlib.WindowsPath>` depending on the system.\n\n        .. Note:: :obj:`Path <pathlib.Path>` objects are immutable. Therefore,\n           any given ``path`` of type :obj:`Path <pathlib.Path>` will not be\n           the same object returned.\n\n    Example:\n\n        >>> from flutils.pathutils import normalize_path\n        >>> normalize_path('~/tmp/foo/../bar')\n        PosixPath('/home/test_user/tmp/bar')\n\n    "
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    bool_0 = False
    var_1 = module_0.to_namedtuple(dict_0)
    tuple_0 = (var_1,)
    var_2 = module_0.to_namedtuple(tuple_0)
    dict_1 = {var_2: var_1, bool_0: var_1}
    var_3 = module_0.to_namedtuple(dict_1)
    var_4 = module_0.to_namedtuple(var_3)
    bool_1 = False
    var_5 = module_0.to_namedtuple(var_3)
    module_0.to_namedtuple(bool_1)


def test_case_9():
    str_0 = "\x0cMv"
    tuple_0 = ()
    dict_0 = {str_0: tuple_0, tuple_0: str_0, tuple_0: tuple_0}
    tuple_1 = (str_0, dict_0)
    list_0 = [tuple_1]
    var_0 = module_0.to_namedtuple(list_0)
    var_1 = module_0.to_namedtuple(var_0)
    var_2 = module_0.to_namedtuple(var_1)
    int_0 = 2
    module_0.to_namedtuple(int_0)


def test_case_10():
    bytes_0 = b"F\xdb\xfdf\x8a\xe4\n\xa2\x1d[\xdc*\xa3\xba\xf6s}"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.to_namedtuple(dict_0)
