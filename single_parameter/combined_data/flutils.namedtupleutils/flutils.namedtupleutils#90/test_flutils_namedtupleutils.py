# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import builtins as module_0
import flutils.namedtupleutils as module_1
import collections as module_2


def test_case_0():
    object_0 = module_0.object()
    module_1.to_namedtuple(object_0)


def test_case_1():
    complex_0 = 3197.56303 - 1486.83176j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    var_0 = module_1.to_namedtuple(list_0)


def test_case_2():
    list_0 = []
    str_0 = "l17vcNAYw"
    dict_0 = {str_0: str_0, str_0: list_0, str_0: str_0, str_0: list_0}
    ordered_dict_0 = module_2.OrderedDict(*list_0, **dict_0)
    var_0 = module_1.to_namedtuple(ordered_dict_0)


def test_case_3():
    ordered_dict_0 = module_2.OrderedDict()
    var_0 = module_1.to_namedtuple(ordered_dict_0)


def test_case_4():
    bytes_0 = b"\x02\x17\xaf\xe1\xbb\x18c\xd7\x1c(\x8d\x8d&\x0c\x02"
    module_1.to_namedtuple(bytes_0)


def test_case_5():
    tuple_0 = ()
    var_0 = module_1.to_namedtuple(tuple_0)


def test_case_6():
    str_0 = "D"
    bool_0 = False
    dict_0 = {str_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    var_0 = module_1.to_namedtuple(dict_0)
    module_2.namedtuple(bool_0, bool_0)


def test_case_7():
    int_0 = 501
    str_0 = ""
    tuple_0 = (int_0, int_0, str_0, str_0)
    bytes_0 = b"\xbf\xb8\x07)\r\xcb\x91\xbc\x8e\xd5j\x05e"
    bool_0 = False
    dict_0 = {str_0: bool_0, int_0: int_0, bool_0: bool_0, bool_0: int_0}
    tuple_1 = (tuple_0, bytes_0, bool_0, dict_0)
    var_0 = module_1.to_namedtuple(tuple_1)
    module_1.to_namedtuple(int_0)


def test_case_8():
    list_0 = []
    str_0 = "l17vcNAYw"
    dict_0 = {str_0: str_0, str_0: list_0, str_0: str_0, str_0: list_0}
    ordered_dict_0 = module_2.OrderedDict(*list_0, **dict_0)
    var_0 = module_1.to_namedtuple(ordered_dict_0)
    var_1 = module_1.to_namedtuple(var_0)


def test_case_9():
    list_0 = []
    str_0 = "vK,Hz''%-p\rE@di="
    str_1 = "l17vcNAYw"
    dict_0 = {str_0: str_0, str_0: list_0, str_0: str_0, str_1: list_0}
    ordered_dict_0 = module_2.OrderedDict(*list_0, **dict_0)
    var_0 = module_1.to_namedtuple(ordered_dict_0)


def test_case_10():
    ordered_dict_0 = module_2.OrderedDict()
    var_0 = module_1.to_namedtuple(ordered_dict_0)
    var_1 = module_1.to_namedtuple(var_0)
    float_0 = -2283.03
    module_1.to_namedtuple(float_0)


def test_case_11():
    list_0 = []
    var_0 = module_1.to_namedtuple(list_0)


def test_case_12():
    tuple_0 = ()
    var_0 = module_1.to_namedtuple(tuple_0)
    dict_0 = {}
    var_1 = module_1.to_namedtuple(dict_0)
    var_2 = module_1.to_namedtuple(var_1)
    var_3 = module_1.to_namedtuple(var_1)
    var_4 = module_1.to_namedtuple(dict_0)
    var_5 = module_1.to_namedtuple(dict_0)
    var_6 = module_1.to_namedtuple(var_1)
    bytes_0 = b"4\xee;=\xad\xb4\x965u\x1ak\xb1\x8e"
    var_7 = module_2.OrderedDict()
    var_8 = module_1.to_namedtuple(dict_0)
    tuple_1 = (bytes_0,)
    var_9 = module_1.to_namedtuple(var_6)
    var_10 = module_1.to_namedtuple(var_1)
    var_11 = module_1.to_namedtuple(dict_0)
    var_12 = module_1.to_namedtuple(var_1)
    var_13 = module_1.to_namedtuple(var_8)
    var_14 = module_1.to_namedtuple(var_9)
    var_15 = module_1.to_namedtuple(var_11)
    var_16 = module_1.to_namedtuple(var_12)
    var_17 = module_2.OrderedDict()
    var_18 = module_1.to_namedtuple(var_5)
    dict_1 = {tuple_1: tuple_1, tuple_1: tuple_1, bytes_0: tuple_1, bytes_0: bytes_0}
    module_1.to_namedtuple(dict_1)


def test_case_13():
    bytes_0 = b"\xfa0\x07\n\xbc\xbfe\r\xf7\xe8\xae\xf2w"
    list_0 = [bytes_0, bytes_0, bytes_0]
    var_0 = module_1.to_namedtuple(list_0)
    var_1 = module_1.to_namedtuple(list_0)
    var_2 = module_1.to_namedtuple(var_1)
    var_3 = module_1.to_namedtuple(var_2)
    int_0 = 501
    str_0 = "D "
    tuple_0 = (int_0, int_0, str_0, str_0)
    bytes_1 = b"\xbf\xb8\x07)\r\xcb\x91\xbc\x8e\xd5j\x05e"
    bool_0 = False
    dict_0 = {str_0: bool_0, int_0: int_0, bool_0: bool_0, bool_0: int_0}
    tuple_1 = (tuple_0, bytes_1, bool_0, dict_0)
    var_4 = module_1.to_namedtuple(tuple_1)
    var_5 = module_1.to_namedtuple(var_4)
    module_1.to_namedtuple(bool_0)
