# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1


def test_case_0():
    bool_0 = False
    module_0.to_namedtuple(bool_0)


def test_case_1():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    var_0 = module_0.to_namedtuple(list_0)


def test_case_2():
    str_0 = "{k U.="
    module_0.to_namedtuple(str_0)


def test_case_3():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_4():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_5():
    float_0 = 329.0
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.to_namedtuple(dict_0)
    module_0.to_namedtuple(float_0)


def test_case_6():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_7():
    float_0 = 329.0
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_8():
    str_0 = "p8zk"
    dict_0 = {str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_9():
    str_0 = "@w+eC#4\x0b4\tW'\rIPAe"
    str_1 = "m~QI^tF8|W"
    dict_0 = {str_0: str_0, str_1: str_0, str_1: str_0}
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_10():
    str_0 = "\x0bC"
    dict_0 = {str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    ordered_dict_0 = module_1.OrderedDict()
    var_1 = module_0.to_namedtuple(var_0)
    float_0 = 329.0
    dict_1 = {float_0: float_0, float_0: float_0}
    list_0 = [float_0, float_0, float_0, dict_1]
    var_2 = module_0.to_namedtuple(list_0)
    ordered_dict_1 = module_1.OrderedDict(**ordered_dict_0)
    module_0.to_namedtuple(float_0)


def test_case_11():
    bytes_0 = b"1C\\\x99\xb2l\x02\xb8\xf5\x1d\xd1p@\x85P"
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    var_0 = module_0.to_namedtuple(tuple_0)
    dict_0 = {bytes_0: tuple_0, var_0: bytes_0}
    dict_1 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: dict_0}
    tuple_1 = (bytes_0, dict_1)
    module_0.to_namedtuple(tuple_1)
