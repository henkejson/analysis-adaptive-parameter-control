# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import builtins as module_0
import flutils.namedtupleutils as module_1
import collections as module_2


def test_case_0():
    object_0 = module_0.object()
    module_1.to_namedtuple(object_0)


def test_case_1():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    var_0 = module_1.to_namedtuple(dict_0)
    tuple_0 = (bool_0, dict_0, var_0, dict_0)
    var_1 = module_1.to_namedtuple(tuple_0)


def test_case_2():
    bool_0 = True
    str_0 = "?"
    dict_0 = {bool_0: bool_0, bool_0: bool_0, str_0: str_0}
    var_0 = module_1.to_namedtuple(dict_0)


def test_case_3():
    ordered_dict_0 = module_2.OrderedDict()
    var_0 = module_1.to_namedtuple(ordered_dict_0)


def test_case_4():
    str_0 = "?"
    module_1.to_namedtuple(str_0)


def test_case_5():
    tuple_0 = ()
    var_0 = module_1.to_namedtuple(tuple_0)


def test_case_6():
    dict_0 = {}
    var_0 = module_1.to_namedtuple(dict_0)


def test_case_7():
    str_0 = "f"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_1.to_namedtuple(dict_0)
    var_1 = module_1.to_namedtuple(var_0)


def test_case_8():
    bool_0 = True
    str_0 = "?"
    dict_0 = {bool_0: bool_0, bool_0: bool_0, str_0: str_0}
    var_0 = module_1.to_namedtuple(dict_0)
    var_1 = module_1.to_namedtuple(var_0)


def test_case_9():
    list_0 = []
    var_0 = module_1.to_namedtuple(list_0)


def test_case_10():
    bool_0 = False
    str_0 = "d"
    dict_0 = {bool_0: bool_0, bool_0: bool_0, str_0: str_0}
    var_0 = module_1.to_namedtuple(dict_0)


def test_case_11():
    bytes_0 = b"\x18i\xc8/\xd6\xb2N68\xb3\xde\xcd\x1b\xc1WE\xfa\xdb\xb2\xa3"
    dict_0 = {bytes_0: bytes_0}
    module_1.to_namedtuple(dict_0)


def test_case_12():
    ordered_dict_0 = module_2.OrderedDict()
    bool_0 = False
    str_0 = "\to"
    dict_0 = {bool_0: bool_0, bool_0: bool_0, str_0: str_0}
    var_0 = module_1.to_namedtuple(dict_0)
    module_2.namedtuple(var_0, ordered_dict_0, rename=ordered_dict_0, module=dict_0)
