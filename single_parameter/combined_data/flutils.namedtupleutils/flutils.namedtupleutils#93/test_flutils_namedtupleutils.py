# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1
import builtins as module_2


def test_case_0():
    none_type_0 = None
    module_0.to_namedtuple(none_type_0)


def test_case_1():
    complex_0 = 1180.410326 - 1528.3j
    list_0 = [complex_0]
    var_0 = module_0.to_namedtuple(list_0)
    module_1.namedtuple(var_0, list_0, module=var_0)


def test_case_2():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_3():
    dict_0 = {}
    tuple_0 = module_0.to_namedtuple(dict_0)


def test_case_4():
    str_0 = "Y)r@\nU1f"
    module_0.to_namedtuple(str_0)


def test_case_5():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_6():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_7():
    str_0 = "asq"
    dict_0 = {str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_8():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_9():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_10():
    dict_0 = {}
    tuple_0 = (dict_0, dict_0)
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_11():
    bool_0 = False
    tuple_0 = (bool_0, bool_0, bool_0)
    bytes_0 = b"\xd8"
    dict_0 = {tuple_0: bool_0, bytes_0: tuple_0, bool_0: tuple_0, bytes_0: bytes_0}
    module_0.to_namedtuple(dict_0)


def test_case_12():
    list_0 = []
    str_0 = ""
    str_1 = "bash"
    dict_0 = {str_0: list_0, str_1: str_1}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_13():
    str_0 = "asq"
    dict_0 = {str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_14():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)
    var_1 = module_0.to_namedtuple(list_0)
    str_0 = "Po\x0c"
    str_1 = "MUasq"
    dict_0 = {str_0: list_0, str_1: str_1}
    ordered_dict_0 = module_1.OrderedDict(*list_0, **dict_0)
    var_2 = module_1.namedtuple(str_1, str_1, module=str_1)
    var_3 = module_0.to_namedtuple(dict_0)
    var_4 = module_0.to_namedtuple(var_0)
    var_5 = module_0.to_namedtuple(var_3)
    object_0 = module_2.object()
    module_0.to_namedtuple(var_2)
