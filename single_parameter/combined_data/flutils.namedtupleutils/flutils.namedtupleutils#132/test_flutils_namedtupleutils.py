# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1


def test_case_0():
    bool_0 = True
    module_0.to_namedtuple(bool_0)


def test_case_1():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    list_0 = [bool_0, set_0]
    var_0 = module_0.to_namedtuple(list_0)


def test_case_2():
    str_0 = "tt"
    bytes_0 = b"\xdb\xbc\x8e\xa7\xab\x97B,\xed\x1a\xd3@\xe1\xb2"
    dict_0 = {str_0: bytes_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_3():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_4():
    bytes_0 = b"g \xf2\x1bV\x97^\xff\xd6\t\x13\xe4\xa8\x7f\xf3"
    module_0.to_namedtuple(bytes_0)


def test_case_5():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_6():
    str_0 = "The name of the cherry-picked module attribute; can be an empty str."
    dict_0 = {str_0: str_0}
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_7():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_8():
    str_0 = "FG\ryT!P\x0b66@otDn"
    bytes_0 = b"\xdb\xbc\x8e\xa7\xab\x97B,\xed\x1a\xd3@\xe1\xb2"
    dict_0 = {str_0: bytes_0}
    var_0 = module_0.to_namedtuple(dict_0)
    bool_0 = False
    tuple_0 = (var_0, var_0, str_0, bool_0)
    var_1 = module_0.to_namedtuple(var_0)
    bool_1 = False
    tuple_1 = (tuple_0, bool_1, bool_0)
    var_2 = module_0.to_namedtuple(tuple_1)
    dict_1 = {bool_1: bool_0, bytes_0: tuple_1}
    module_0.to_namedtuple(dict_1)


def test_case_9():
    str_0 = "t\x0c"
    bytes_0 = b"\xdb\xbc\x8e\xa7\xab\x97B,\xed\x1a\xd3@\xe1\xb2"
    dict_0 = {str_0: bytes_0}
    var_0 = module_0.to_namedtuple(dict_0)
    int_0 = -2546
    bool_0 = False
    tuple_0 = (var_0, int_0, str_0, bool_0)
    bool_1 = False
    tuple_1 = (tuple_0, bool_1, bool_0)
    var_1 = module_0.to_namedtuple(tuple_1)
    int_1 = 4004
    var_2 = module_0.to_namedtuple(var_1)
    module_0.to_namedtuple(int_1)
