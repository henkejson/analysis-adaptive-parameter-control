# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1


def test_case_0():
    none_type_0 = None
    module_0.to_namedtuple(none_type_0)


def test_case_1():
    bool_0 = True
    tuple_0 = (bool_0,)
    tuple_1 = (bool_0, bool_0, bool_0, tuple_0)
    var_0 = module_0.to_namedtuple(tuple_1)


def test_case_2():
    str_0 = "origin"
    dict_0 = {str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_3():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_4():
    bytes_0 = b""
    module_0.to_namedtuple(bytes_0)


def test_case_5():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_6():
    str_0 = "origin"
    dict_0 = {str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_7():
    str_0 = ")\n{\n!Q]V\x0b'n$6&"
    none_type_0 = None
    str_1 = "h9X,'|7cm`HnO='q^="
    dict_0 = {str_0: none_type_0, str_1: none_type_0}
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    var_0 = module_0.to_namedtuple(dict_0)
    module_1.namedtuple(
        ordered_dict_0, var_0, rename=none_type_0, defaults=none_type_0, module=str_1
    )


def test_case_8():
    bytes_0 = b"\xa4\xb1\x90Kh\x8e\xd8G\x1c\x05s\x8b\xf5\xff\xab\xb6\xc0;"
    dict_0 = {bytes_0: bytes_0}
    list_0 = [dict_0]
    bool_0 = False
    float_0 = -1733.29
    tuple_0 = (list_0, bool_0, float_0)
    list_1 = [float_0, tuple_0, float_0]
    dict_1 = {float_0: list_1}
    list_2 = [tuple_0, dict_1, bytes_0, list_0]
    module_0.to_namedtuple(list_2)


def test_case_9():
    str_0 = "origin"
    dict_0 = {str_0: str_0}
    tuple_0 = (dict_0,)
    var_0 = module_1.OrderedDict()
    var_1 = module_0.to_namedtuple(var_0)
    tuple_1 = (str_0, dict_0, tuple_0, var_1)
    var_2 = module_0.to_namedtuple(tuple_1)
    var_3 = module_0.to_namedtuple(var_1)


def test_case_10():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_11():
    list_0 = []
    list_1 = [list_0, list_0, list_0]
    var_0 = module_0.to_namedtuple(list_1)


def test_case_12():
    bytes_0 = b"\xa4\xb1\x90Kh\x8e\xd8G\x1c\x05s\x8b\xf5\xff\xab\xb6\xc0;"
    dict_0 = {}
    list_0 = [dict_0]
    bool_0 = True
    float_0 = -1733.29
    tuple_0 = (list_0, bool_0, float_0)
    list_1 = [float_0, tuple_0, float_0]
    dict_1 = {float_0: list_1}
    list_2 = [tuple_0, dict_1, bytes_0, list_0]
    var_0 = module_0.to_namedtuple(list_2)
    str_0 = "5'tE?X,IJ4DV`S'80HJw"
    module_0.to_namedtuple(str_0)


def test_case_13():
    str_0 = "\x0brigin"
    dict_0 = {str_0: str_0}
    list_0 = [dict_0]
    tuple_0 = (list_0,)
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)
    complex_0 = 1665.87 + 13.5347j
    var_2 = module_0.to_namedtuple(var_0)
    var_3 = module_0.to_namedtuple(list_0)
    tuple_1 = (str_0, dict_0, tuple_0, complex_0)
    var_4 = module_0.to_namedtuple(tuple_1)
    var_5 = module_0.to_namedtuple(dict_0)
