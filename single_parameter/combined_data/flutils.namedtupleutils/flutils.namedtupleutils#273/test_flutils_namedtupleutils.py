# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1


def test_case_0():
    bool_0 = False
    module_0.to_namedtuple(bool_0)


def test_case_1():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    list_1 = [list_0, list_0, list_0, list_0]
    var_0 = module_0.to_namedtuple(list_1)


def test_case_2():
    int_0 = -2197
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_3():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_4():
    str_0 = "G$-_("
    module_0.to_namedtuple(str_0)


def test_case_5():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_6():
    bytes_0 = b"\xa2\xbfHYZ\xc2\xcf\xf6\xab\x92\xf8\x90\xebc\x0c\x91"
    str_0 = "Q"
    none_type_0 = None
    dict_0 = {str_0: none_type_0, str_0: none_type_0, str_0: none_type_0}
    list_0 = []
    ordered_dict_0 = module_1.OrderedDict(*list_0, **dict_0)
    tuple_0 = (bytes_0, bytes_0, list_0, ordered_dict_0)
    var_0 = module_0.to_namedtuple(tuple_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_7():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_8():
    bytes_0 = b"\xd0\x05\xad\x1d\x19"
    bytes_1 = b"\xb3EG7"
    list_0 = [bytes_0, bytes_0, bytes_1, bytes_0]
    var_0 = module_0.to_namedtuple(list_0)
    list_1 = []
    var_1 = module_0.to_namedtuple(list_1)


def test_case_9():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_10():
    list_0 = []
    int_0 = -1131
    tuple_0 = (list_0, int_0, list_0)
    var_0 = module_0.to_namedtuple(tuple_0)
    var_1 = module_1.OrderedDict()
    bytes_0 = b""
    dict_0 = {bytes_0: bytes_0}
    module_0.to_namedtuple(dict_0)


def test_case_11():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_12():
    bytes_0 = b"\xa2\xbfHYZ\xc2\xcf\xf6\xab\x92\xf8\x90\xebc\x0c\x91"
    str_0 = "Q"
    none_type_0 = None
    str_1 = "4:`+g$GiIvRIJfTDz"
    dict_0 = {str_0: none_type_0, str_1: none_type_0, str_1: none_type_0}
    list_0 = []
    ordered_dict_0 = module_1.OrderedDict(*list_0, **dict_0)
    tuple_0 = (bytes_0, str_1, list_0, ordered_dict_0)
    var_0 = module_0.to_namedtuple(tuple_0)
    var_1 = module_0.to_namedtuple(var_0)
    module_0.to_namedtuple(str_1)


def test_case_13():
    bytes_0 = b"8X1\x8b\xdeW\xeb\x11\xfd\x0b\x91\x96O-\xc6t\xfc\xcb\xde"
    str_0 = "DK;r=PP9K89A"
    str_1 = "\tgQ"
    none_type_0 = None
    str_2 = "*]!Xpe"
    dict_0 = {str_1: none_type_0, str_2: none_type_0, str_2: none_type_0}
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    int_0 = 1030
    list_0 = [str_1, str_1]
    tuple_0 = (ordered_dict_0, int_0, ordered_dict_0, list_0)
    var_0 = module_0.to_namedtuple(tuple_0)
    list_1 = []
    str_3 = "q\x0b(2fN>"
    dict_1 = {str_3: str_0, str_0: str_0}
    ordered_dict_1 = module_1.OrderedDict(*list_1, **dict_1)
    tuple_1 = (bytes_0, str_0, list_1, ordered_dict_1)
    var_1 = module_0.to_namedtuple(tuple_1)
    int_1 = -2197
    dict_2 = {str_3: ordered_dict_0, int_1: var_1, int_1: int_0, int_1: int_0}
    var_2 = module_0.to_namedtuple(dict_2)
    var_3 = module_0.to_namedtuple(var_0)
    var_4 = module_0.to_namedtuple(var_1)
    var_5 = module_0.to_namedtuple(var_0)
    var_6 = module_0.to_namedtuple(dict_2)
    module_0.to_namedtuple(str_3)
