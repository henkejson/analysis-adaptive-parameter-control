# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1


def test_case_0():
    float_0 = 284.234
    module_0.to_namedtuple(float_0)


def test_case_1():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    var_0 = module_0.to_namedtuple(list_0)


def test_case_2():
    str_0 = "m"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_3():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_4():
    str_0 = "7C5&&HZ^F>piU&"
    module_0.to_namedtuple(str_0)


def test_case_5():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_6():
    int_0 = 357
    list_0 = [int_0]
    dict_0 = {int_0: int_0, int_0: int_0, int_0: list_0}
    bool_0 = True
    tuple_0 = (int_0, list_0, dict_0, bool_0)
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_7():
    list_0 = []
    int_0 = 80
    list_1 = [list_0, list_0, int_0]
    bytes_0 = b"v\xcf\x18u\x01)\x15"
    bool_0 = True
    tuple_0 = (bytes_0, bool_0, list_1)
    str_0 = "(*G@h5}BT&a(_9#W"
    dict_0 = {str_0: list_1}
    tuple_1 = (list_1, tuple_0, dict_0)
    var_0 = module_0.to_namedtuple(tuple_1)
    list_2 = []
    ordered_dict_0 = module_1.OrderedDict(*list_2)
    var_1 = module_0.to_namedtuple(ordered_dict_0)
    var_2 = module_0.to_namedtuple(var_1)
    ordered_dict_1 = module_1.OrderedDict(*var_1, **ordered_dict_0)
    dict_1 = {
        var_1: list_2,
        var_1: ordered_dict_0,
        var_1: list_2,
        var_2: ordered_dict_0,
    }
    var_3 = module_0.to_namedtuple(dict_1)
    tuple_2 = ()
    var_4 = module_0.to_namedtuple(tuple_2)
    bytes_1 = b"\xc2.\xa8(\xb8^\xfa\xf1\xc1~J\x98I\xdd"
    dict_2 = {bytes_1: tuple_0}
    module_0.to_namedtuple(dict_2)


def test_case_8():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_9():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_10():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_11():
    str_0 = "0\r[0|0klX"
    str_1 = "m"
    dict_0 = {str_0: str_0, str_1: str_1, str_0: str_0}
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    tuple_0 = (ordered_dict_0,)
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_12():
    str_0 = "m"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_13():
    int_0 = 80
    list_0 = [int_0, int_0, int_0]
    bytes_0 = b"v\xcf\x18u\x01)\x15"
    bool_0 = True
    tuple_0 = (bytes_0, bool_0, list_0)
    str_0 = "count\x0b"
    dict_0 = {str_0: list_0}
    tuple_1 = (list_0, tuple_0, dict_0)
    var_0 = module_0.to_namedtuple(tuple_1)
    var_1 = module_0.to_namedtuple(tuple_1)
    list_1 = []
    ordered_dict_0 = module_1.OrderedDict(*list_1)
    var_2 = module_0.to_namedtuple(ordered_dict_0)
    var_3 = module_0.to_namedtuple(var_2)
    ordered_dict_1 = module_1.OrderedDict(*var_2, **ordered_dict_0)
    dict_1 = {
        var_2: list_1,
        var_2: ordered_dict_0,
        var_2: list_1,
        var_3: ordered_dict_0,
    }
    var_4 = module_0.to_namedtuple(var_1)
    var_5 = module_0.to_namedtuple(dict_1)
    tuple_2 = ()
    var_6 = module_0.to_namedtuple(tuple_2)
    var_7 = module_0.to_namedtuple(var_5)
    var_8 = module_0.to_namedtuple(list_0)
    var_9 = module_0.to_namedtuple(list_0)
    var_10 = module_0.to_namedtuple(var_9)
    var_11 = module_0.to_namedtuple(list_1)
    var_12 = module_0.to_namedtuple(var_1)
