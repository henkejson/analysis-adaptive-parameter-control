# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1
import builtins as module_2


def test_case_0():
    bool_0 = False
    module_0.to_namedtuple(bool_0)


def test_case_1():
    ordered_dict_0 = module_1.OrderedDict()
    object_0 = module_2.object(**ordered_dict_0)
    tuple_0 = (ordered_dict_0, ordered_dict_0, ordered_dict_0, object_0)
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_2():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_3():
    bytes_0 = b"z\xf0\xc2\xa6\xe1p8\x00\xa46A\xf3n"
    module_0.to_namedtuple(bytes_0)


def test_case_4():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_5():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_6():
    bytes_0 = b"\x1bY\x02W\xfa\xb7;\x08\xd8\x0e\xe5n+\xf0\x1e\xf6\x8e\x8d\x88\xd7"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    var_0 = module_0.to_namedtuple(list_0)
    tuple_0 = (var_0,)
    var_1 = module_0.to_namedtuple(tuple_0)
    complex_0 = -1638.470509 - 1686.939405j
    dict_0 = {complex_0: complex_0}
    var_2 = module_0.to_namedtuple(dict_0)
    var_3 = module_0.to_namedtuple(var_0)
    bool_0 = False
    module_0.to_namedtuple(bool_0)


def test_case_7():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_8():
    ordered_dict_0 = module_1.OrderedDict()
    tuple_0 = (ordered_dict_0, ordered_dict_0, ordered_dict_0, ordered_dict_0)
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_9():
    ordered_dict_0 = module_1.OrderedDict()
    tuple_0 = module_0.to_namedtuple(ordered_dict_0)
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_10():
    none_type_0 = None
    str_0 = "user_options"
    dict_0 = {none_type_0: none_type_0, str_0: none_type_0, str_0: none_type_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_11():
    none_type_0 = None
    str_0 = "user_options"
    str_1 = "QTy(HM3 t%"
    dict_0 = {none_type_0: none_type_0, str_0: none_type_0, str_1: none_type_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_12():
    bytes_0 = b"\xee\xf7c\xa652\xc5\xb4\xbe"
    dict_0 = {bytes_0: bytes_0}
    tuple_0 = (bytes_0, dict_0, dict_0)
    module_0.to_namedtuple(tuple_0)


def test_case_13():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    var_0 = module_0.to_namedtuple(tuple_0)
    var_1 = module_0.to_namedtuple(tuple_0)
    none_type_0 = None
    str_0 = "\ruser_options"
    str_1 = "QTy(HM3 t%"
    dict_0 = {none_type_0: none_type_0, str_0: none_type_0, str_1: none_type_0}
    var_2 = module_0.to_namedtuple(var_1)
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    bytes_0 = b"\x0cc\xad\xb2\xbf\xc5'\xc0\x1ba\xc6\x1a\x0e"
    var_3 = module_0.to_namedtuple(var_1)
    var_4 = module_0.to_namedtuple(dict_0)
    var_5 = module_0.to_namedtuple(var_4)
    module_0.to_namedtuple(bytes_0)
