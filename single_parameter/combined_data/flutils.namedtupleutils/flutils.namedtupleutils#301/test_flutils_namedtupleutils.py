# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1
import builtins as module_2


def test_case_0():
    int_0 = -510
    module_0.to_namedtuple(int_0)


def test_case_1():
    float_0 = -1899.1055
    list_0 = [float_0, float_0, float_0, float_0]
    var_0 = module_0.to_namedtuple(list_0)


def test_case_2():
    int_0 = 163
    tuple_0 = (int_0,)
    var_0 = module_0.to_namedtuple(tuple_0)
    dict_0 = {var_0: var_0}
    var_1 = module_0.to_namedtuple(dict_0)


def test_case_3():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_4():
    str_0 = "encoding"
    module_0.to_namedtuple(str_0)


def test_case_5():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_6():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_7():
    bool_0 = True
    str_0 = "/6j"
    dict_0 = {str_0: str_0, bool_0: bool_0, str_0: str_0}
    tuple_0 = (bool_0, str_0, dict_0)
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_8():
    dict_0 = {}
    ordered_dict_0 = module_0.to_namedtuple(dict_0)
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_9():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_10():
    bytes_0 = b"J\xa6\xcc"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.to_namedtuple(dict_0)


def test_case_11():
    bool_0 = True
    str_0 = "n6j"
    dict_0 = {str_0: str_0, bool_0: bool_0, str_0: str_0}
    tuple_0 = (bool_0, str_0, dict_0)
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_12():
    bool_0 = True
    str_0 = "n6j"
    dict_0 = {str_0: str_0, bool_0: bool_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_13():
    bool_0 = True
    str_0 = "n6\x0b"
    dict_0 = {str_0: str_0, bool_0: bool_0, str_0: str_0}
    tuple_0 = (bool_0, str_0, dict_0)
    var_0 = module_0.to_namedtuple(tuple_0)
    var_1 = module_0.to_namedtuple(var_0)
    object_0 = module_2.object()
    module_0.to_namedtuple(str_0)
