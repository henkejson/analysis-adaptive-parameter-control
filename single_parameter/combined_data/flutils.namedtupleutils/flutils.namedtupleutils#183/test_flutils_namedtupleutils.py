# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import builtins as module_0
import flutils.namedtupleutils as module_1
import collections as module_2


def test_case_0():
    object_0 = module_0.object()
    module_1.to_namedtuple(object_0)


def test_case_1():
    complex_0 = 3343.1289 - 637.07113j
    str_0 = "num"
    dict_0 = {complex_0: complex_0, complex_0: complex_0, str_0: complex_0}
    var_0 = module_1.to_namedtuple(dict_0)
    var_1 = module_1.to_namedtuple(var_0)


def test_case_2():
    ordered_dict_0 = module_2.OrderedDict()
    var_0 = module_1.to_namedtuple(ordered_dict_0)


def test_case_3():
    str_0 = "0|>X]R"
    module_1.to_namedtuple(str_0)


def test_case_4():
    tuple_0 = ()
    var_0 = module_1.to_namedtuple(tuple_0)


def test_case_5():
    str_0 = "Cc}"
    int_0 = 249
    tuple_0 = (str_0, int_0, str_0)
    var_0 = module_1.to_namedtuple(tuple_0)
    ordered_dict_0 = module_2.OrderedDict()
    var_1 = module_1.to_namedtuple(ordered_dict_0)


def test_case_6():
    ordered_dict_0 = module_2.OrderedDict()
    var_0 = module_1.to_namedtuple(ordered_dict_0)
    var_1 = module_1.to_namedtuple(var_0)


def test_case_7():
    list_0 = []
    var_0 = module_1.to_namedtuple(list_0)


def test_case_8():
    dict_0 = {}
    tuple_0 = (dict_0,)
    var_0 = module_1.to_namedtuple(tuple_0)
    object_0 = module_0.object()
    module_1.to_namedtuple(object_0)


def test_case_9():
    dict_0 = {}
    var_0 = module_1.to_namedtuple(dict_0)


def test_case_10():
    bytes_0 = b"v\x1e\xe0Y."
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_1.to_namedtuple(dict_0)


def test_case_11():
    complex_0 = 3343.1289 - 637.07113j
    str_0 = "NX@P!@y"
    dict_0 = {complex_0: complex_0, complex_0: complex_0, str_0: complex_0}
    int_0 = -1042
    set_0 = set()
    object_0 = module_0.object(*set_0)
    var_0 = module_1.to_namedtuple(dict_0)
    module_1.to_namedtuple(int_0)


def test_case_12():
    complex_0 = 3343.1289 - 637.07113j
    str_0 = " um"
    dict_0 = {complex_0: complex_0, complex_0: complex_0, str_0: complex_0}
    int_0 = -1042
    bytes_0 = b"\xf8\xa2e-\xbc\xc7\xd1\x9e\xbe!P\xf2\xb2\xd7\n\xfe\x1f"
    set_0 = set()
    tuple_0 = (dict_0, int_0, bytes_0, set_0)
    var_0 = module_1.to_namedtuple(tuple_0)
    var_1 = module_1.to_namedtuple(var_0)
    int_1 = -723
    module_1.to_namedtuple(int_1)
