# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1
import builtins as module_2


def test_case_0():
    bool_0 = False
    module_0.to_namedtuple(bool_0)


def test_case_1():
    bool_0 = True
    tuple_0 = ()
    tuple_1 = (bool_0, tuple_0)
    var_0 = module_0.to_namedtuple(tuple_1)


def test_case_2():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_3():
    str_0 = 'A loader that creates a module which defers loading until attribute\n    access.\n\n    This class is a "derivative work" of the Python\n    :obj:`importlib.util.LazyLoader`, and is:\n\n    `Copyright Â© 2001-2018 Python Software Foundation; All Rights Reserved\n    <https://bit.ly/2JzG17l>.`_\n\n    This class differs from :obj:`importlib.util.LazyLoader` in that it\n    uses the :obj:`~flutils.moduleutils._LazyModule` class and the\n    ``factory`` class method was removed.\n    '
    module_0.to_namedtuple(str_0)


def test_case_4():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_5():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_6():
    str_0 = "fA4QUy_fQIFOg2zc"
    dict_0 = {str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_7():
    str_0 = "fA4yfQIFOg2zc"
    dict_0 = {str_0: str_0}
    dict_1 = module_0.to_namedtuple(dict_0)
    var_0 = module_0.to_namedtuple(dict_1)


def test_case_8():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    list_0 = [dict_0, dict_0, dict_0, dict_0]
    var_0 = module_0.to_namedtuple(list_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_9():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_10():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    list_0 = [dict_0, dict_0, dict_0, dict_0]
    var_0 = module_0.to_namedtuple(list_0)


def test_case_11():
    str_0 = "fA4QUy_fQIFOg2zc"
    str_1 = "-W)aw{2d7vM16Y:r~-\r&"
    dict_0 = {}
    dict_1 = {str_0: str_0, str_0: str_0, str_1: dict_0}
    var_0 = module_0.to_namedtuple(dict_1)
    var_1 = module_0.to_namedtuple(dict_1)


def test_case_12():
    bytes_0 = b"Q\xe0\x86\xe1\xc7\x05k\xc9c\x81\x1b\xdf"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    list_0 = [dict_0]
    module_0.to_namedtuple(list_0)


def test_case_13():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)
    str_0 = "fA4QUy_fQIFOzc\n"
    object_0 = module_2.object(*list_0)
    str_1 = "-W)aw{2d7vM1Y:r~-\r&"
    dict_0 = {}
    dict_1 = {str_0: object_0, str_0: object_0, str_1: dict_0}
    ordered_dict_0 = module_1.OrderedDict(*list_0, **dict_1)
    var_1 = module_0.to_namedtuple(var_0)
    var_2 = module_0.to_namedtuple(dict_1)
    var_3 = module_0.to_namedtuple(ordered_dict_0)
    tuple_0 = ()
    var_4 = module_0.to_namedtuple(tuple_0)
    var_5 = module_0.to_namedtuple(var_3)
    var_6 = module_0.to_namedtuple(list_0)
