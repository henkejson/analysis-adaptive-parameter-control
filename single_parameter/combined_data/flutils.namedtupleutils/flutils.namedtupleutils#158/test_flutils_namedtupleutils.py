# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1


def test_case_0():
    none_type_0 = None
    module_0.to_namedtuple(none_type_0)


def test_case_1():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    str_0 = "Generator that expands the given attr_map and yields an _AttrMapping\n    named tuple.\n\n    An attr_map is a tuple with each row containing a :term:`foreign-name`\n    which is a specially formatted string.\n    "
    tuple_0 = (dict_0, str_0, bool_0)
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_2():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_3():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_4():
    bytes_0 = b'\xcd\x06/\xa8:\xe5b\xb9\xb3Q"'
    module_0.to_namedtuple(bytes_0)


def test_case_5():
    list_0 = []
    ordered_dict_0 = module_0.to_namedtuple(list_0)


def test_case_6():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_7():
    str_0 = "*JK+)[H0"
    list_0 = [str_0, str_0]
    var_0 = module_0.to_namedtuple(list_0)


def test_case_8():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_9():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_10():
    bool_0 = False
    str_0 = ", is invalid."
    dict_0 = {bool_0: bool_0, str_0: bool_0, bool_0: str_0, bool_0: bool_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(dict_0)


def test_case_11():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    float_0 = -2195.1891
    set_0 = {float_0}
    list_1 = [list_0, set_0]
    var_0 = module_0.to_namedtuple(list_1)
    var_1 = module_0.to_namedtuple(var_0)
    bytes_0 = b"\x15H\xf0Re\x91\xc7\xf8j\xe5\x14\xb3O\xe9\x1b\xbc]"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    list_2 = [dict_0, bytes_0]
    module_0.to_namedtuple(list_2)


def test_case_12():
    str_0 = "RunCmd"
    dict_0 = {str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_13():
    str_0 = "RunCmd"
    dict_0 = {str_0: str_0, str_0: str_0}
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_14():
    str_0 = "RunCm "
    dict_0 = {str_0: str_0, str_0: str_0}
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    bool_0 = False
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    str_1 = "Os"
    tuple_0 = (ordered_dict_0, bool_0, str_0, str_1)
    var_1 = module_0.to_namedtuple(dict_0)
    var_2 = module_0.to_namedtuple(tuple_0)
    str_2 = "."
    var_3 = module_0.to_namedtuple(var_2)
    module_0.to_namedtuple(str_2)
