# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import builtins as module_1
import collections as module_2


def test_case_0():
    bool_0 = False
    module_0.to_namedtuple(bool_0)


def test_case_1():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0, object_0]
    var_0 = module_0.to_namedtuple(list_0)


def test_case_2():
    ordered_dict_0 = module_2.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_3():
    bytes_0 = b"\x1f\xb0\xbfKW\x1e\xf7%\x9a\x86"
    module_0.to_namedtuple(bytes_0)


def test_case_4():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_5():
    str_0 = "t"
    dict_0 = {str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_6():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_7():
    str_0 = "^<\\A$jt45fRrqO2Y a"
    str_1 = "Find all paths that match the given :term:`glob pattern`.\n\n    This function pre-processes the given ``pattern`` with\n    :obj:`~flutils.normalize_path`.\n\n    Args:\n        pattern (:obj:`str`, :obj:`bytes` or :obj:`Path <pathlib.Path>`):\n            The path to find; which may contain a :term:`glob pattern`.\n\n    :rtype:\n        :obj:`Generator <typing.Generator>`\n\n    Yields:\n        :obj:`pathlib.PosixPath` or :obj:`pathlib.WindowsPath`\n\n    Example:\n        >>> from flutils.pathutils import find_paths\n        >>> list(find_paths('~/tmp/*'))\n        [PosixPath('/home/test_user/tmp/file_one'),\n        PosixPath('/home/test_user/tmp/dir_one')]\n\n    "
    dict_0 = {str_0: str_0, str_1: str_0}
    ordered_dict_0 = module_2.OrderedDict(**dict_0)
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    none_type_0 = None
    module_0.to_namedtuple(none_type_0)


def test_case_8():
    str_0 = "!!jb\na:%Q\rC#_V'yEU.x"
    bytes_0 = b"\x11N\x94\x04k"
    dict_0 = {str_0: str_0, str_0: str_0, bytes_0: bytes_0, str_0: bytes_0}
    module_0.to_namedtuple(dict_0)


def test_case_9():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_10():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_11():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    set_0 = {bool_0}
    complex_0 = 3067.2274 - 2608.5843j
    bytes_0 = b"\x0fB\x8e\xbf2C\x9d\xd8:\xfeR"
    tuple_0 = (dict_0, set_0, complex_0, bytes_0)
    var_0 = module_0.to_namedtuple(tuple_0)
    int_0 = -664
    module_0.to_namedtuple(int_0)


def test_case_12():
    str_0 = "^<\\A$jt45fRrqO2Y a"
    str_1 = "\x0cka\t"
    dict_0 = {str_0: str_0, str_1: str_0}
    ordered_dict_0 = module_2.OrderedDict(**dict_0)
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    none_type_0 = None
    module_0.to_namedtuple(none_type_0)
