# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1
import builtins as module_2


def test_case_0():
    float_0 = 1234.76452
    module_0.to_namedtuple(float_0)


def test_case_1():
    dict_0 = {}
    int_0 = 2814
    list_0 = [int_0, dict_0, int_0]
    tuple_0 = (int_0, int_0, list_0, int_0)
    var_0 = module_0.to_namedtuple(tuple_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_2():
    str_0 = "is_subclass_of_any"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_3():
    ordered_dict_0 = module_1.OrderedDict()
    object_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_4():
    bytes_0 = b":[J\xaak\x93\xa6\xd0/\x8f\n=\xe5\xa0\xb8\xa0|\xac"
    module_0.to_namedtuple(bytes_0)


def test_case_5():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_6():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_7():
    str_0 = "is_subclass_of_any"
    str_1 = "\x0b5\\]|!\n3VVv\n\x0chtWit\r_"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_1: str_0}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_8():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_9():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    object_0 = module_2.object(*var_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_10():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    var_0 = module_0.to_namedtuple(dict_0)
    none_type_0 = None
    module_0.to_namedtuple(none_type_0)


def test_case_11():
    bytes_0 = b"\xa3\xb3\xed\x04\xbe\xab\xa9\x017\xd5\x05\x10\x9d\x9d"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.to_namedtuple(dict_0)


def test_case_12():
    str_0 = "is_subclass_of_any"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_13():
    str_0 = "has_any_callables"
    list_0 = []
    str_1 = "\np"
    dict_0 = {str_0: list_0, str_0: str_0, str_0: str_0, str_0: str_0, str_1: str_0}
    list_1 = [str_1, dict_0, dict_0]
    var_0 = module_0.to_namedtuple(list_1)
    var_1 = module_0.to_namedtuple(dict_0)
    var_2 = module_0.to_namedtuple(var_0)
    module_0.to_namedtuple(str_1)
