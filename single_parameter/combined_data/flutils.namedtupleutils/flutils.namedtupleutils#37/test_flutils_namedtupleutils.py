# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import builtins as module_0
import flutils.namedtupleutils as module_1
import collections as module_2


def test_case_0():
    object_0 = module_0.object()
    module_1.to_namedtuple(object_0)


def test_case_1():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    var_0 = module_1.to_namedtuple(list_0)
    str_0 = "@:BKm^<H.)by_9"
    dict_0 = {str_0: str_0, str_0: str_0}
    var_1 = module_1.to_namedtuple(dict_0)


def test_case_2():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    var_0 = module_1.to_namedtuple(dict_0)


def test_case_3():
    ordered_dict_0 = module_2.OrderedDict()
    var_0 = module_1.to_namedtuple(ordered_dict_0)


def test_case_4():
    str_0 = "@:BKm^<H.)by_9"
    module_1.to_namedtuple(str_0)


def test_case_5():
    tuple_0 = ()
    var_0 = module_1.to_namedtuple(tuple_0)


def test_case_6():
    str_0 = "a"
    dict_0 = {str_0: str_0}
    var_0 = module_1.to_namedtuple(dict_0)


def test_case_7():
    dict_0 = {}
    var_0 = module_1.to_namedtuple(dict_0)


def test_case_8():
    str_0 = "exists_as"
    dict_0 = {str_0: str_0, str_0: str_0}
    var_0 = module_1.to_namedtuple(dict_0)
    var_1 = module_1.to_namedtuple(var_0)


def test_case_9():
    str_0 = "@:BKm^<H.)by_9"
    dict_0 = {str_0: str_0, str_0: str_0}
    var_0 = module_1.to_namedtuple(dict_0)


def test_case_10():
    dict_0 = {}
    var_0 = module_1.to_namedtuple(dict_0)
    var_1 = module_1.to_namedtuple(dict_0)
    var_2 = module_1.to_namedtuple(var_1)
    var_3 = module_1.to_namedtuple(dict_0)


def test_case_11():
    list_0 = []
    var_0 = module_1.to_namedtuple(list_0)


def test_case_12():
    str_0 = "@:BKm^<H.)by_9"
    dict_0 = {str_0: str_0, str_0: str_0}
    ordered_dict_0 = module_2.OrderedDict(**dict_0)
    list_0 = [ordered_dict_0, ordered_dict_0, dict_0, dict_0]
    var_0 = module_1.to_namedtuple(list_0)


def test_case_13():
    bytes_0 = b"\xae\xb4}\xc5\xee\xd7\xb9\xc2"
    tuple_0 = ()
    dict_0 = {bytes_0: tuple_0}
    tuple_1 = (bytes_0, tuple_0, dict_0)
    int_0 = -1911
    tuple_2 = (tuple_1, int_0)
    bool_0 = True
    tuple_3 = (tuple_2, bool_0)
    module_1.to_namedtuple(tuple_3)


def test_case_14():
    str_0 = "\nq"
    dict_0 = {str_0: str_0, str_0: str_0}
    bool_0 = False
    var_0 = module_1.to_namedtuple(dict_0)
    module_1.to_namedtuple(bool_0)
