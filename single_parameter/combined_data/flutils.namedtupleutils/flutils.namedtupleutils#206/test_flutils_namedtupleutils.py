# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import builtins as module_1
import collections as module_2


def test_case_0():
    bool_0 = True
    module_0.to_namedtuple(bool_0)


def test_case_1():
    object_0 = module_1.object()
    int_0 = -2523
    tuple_0 = (object_0, int_0)
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_2():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_3():
    str_0 = '"8h0:z=5(jJr,gz(lJ'
    module_0.to_namedtuple(str_0)


def test_case_4():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_5():
    ordered_dict_0 = module_2.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_6():
    complex_0 = 1473.93994 + 2659.038922j
    dict_0 = {
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
    }
    str_0 = "iZl^=A&xj$2;"
    int_0 = 901
    tuple_0 = (dict_0, str_0, int_0, str_0)
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_7():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_8():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_9():
    int_0 = 933
    dict_0 = {int_0: int_0}
    list_0 = [dict_0, dict_0, int_0]
    var_0 = module_0.to_namedtuple(list_0)


def test_case_10():
    str_0 = "te"
    dict_0 = {str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(dict_0)
    var_2 = module_0.to_namedtuple(dict_0)
    var_3 = module_0.to_namedtuple(var_0)


def test_case_11():
    bytes_0 = b"\xcb\xb9\xa6Y\xc0\xfb"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    bytes_1 = b"\xacJ\xa7M\xcc\x15\xd1"
    dict_1 = {bytes_0: dict_0, bytes_1: bytes_1}
    list_0 = [dict_1, dict_1, dict_0]
    module_0.to_namedtuple(list_0)


def test_case_12():
    float_0 = 965.8819
    str_0 = "Ensure the given ``path`` does **NOT** exist.\n\n    *New in version 0.4.*\n\n    If the given ``path`` does exist, it will be deleted.\n\n    If the given ``path`` is a directory, this function will\n    recursively delete all of the directory's contents.\n\n    This function processes the given ``path`` with\n    :obj:`~flutils.normalize_path`.\n\n    Args:\n        path (:obj:`str`, :obj:`bytes` or :obj:`Path <pathlib.Path>`):\n            The path to remove.\n\n    :rtype: :obj:`None`\n\n    Example:\n        >>> from flutils.pathutils import path_absent\n        >>> path_absent('~/tmp/test_path')\n\n    "
    set_0 = {float_0, str_0, str_0, str_0}
    tuple_0 = (set_0,)
    var_0 = module_0.to_namedtuple(tuple_0)
    str_1 = "jsN'Bo#"
    bool_0 = True
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_1: bool_0}
    ordered_dict_0 = module_2.OrderedDict(**dict_0)
    var_1 = module_0.to_namedtuple(ordered_dict_0)
    module_0.to_namedtuple(float_0)


def test_case_13():
    str_0 = "\tl"
    none_type_0 = None
    dict_0 = {str_0: none_type_0, str_0: none_type_0}
    ordered_dict_0 = module_2.OrderedDict(**dict_0)
    tuple_0 = (ordered_dict_0,)
    var_0 = module_0.to_namedtuple(tuple_0)
    var_1 = module_0.to_namedtuple(var_0)
    dict_1 = {}
    var_2 = module_0.to_namedtuple(dict_1)
    var_3 = module_2.OrderedDict(*var_2, **ordered_dict_0)
    var_4 = module_0.to_namedtuple(var_2)
    var_5 = module_0.to_namedtuple(dict_1)
    var_6 = module_0.to_namedtuple(var_3)
    bytes_0 = b"x\xd3\xc9\x15Zs_\xa2\x0e\x1cBa5>\x86"
    module_0.to_namedtuple(bytes_0)
