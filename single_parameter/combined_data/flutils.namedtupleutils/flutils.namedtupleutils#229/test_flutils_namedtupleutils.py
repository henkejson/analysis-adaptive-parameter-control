# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import builtins as module_1
import collections as module_2


def test_case_0():
    none_type_0 = None
    module_0.to_namedtuple(none_type_0)


def test_case_1():
    int_0 = 1558
    str_0 = " Return code: "
    tuple_0 = (int_0, str_0)
    var_0 = module_0.to_namedtuple(tuple_0)
    bool_0 = True
    module_0.to_namedtuple(bool_0)


def test_case_2():
    str_0 = "G2s"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_3():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_4():
    str_0 = "K\rDR"
    module_0.to_namedtuple(str_0)


def test_case_5():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_6():
    complex_0 = 918.5 + 1603j
    dict_0 = {complex_0: complex_0}
    var_0 = module_0.to_namedtuple(dict_0)
    object_0 = module_1.object()
    module_0.to_namedtuple(object_0)


def test_case_7():
    ordered_dict_0 = module_2.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_8():
    str_0 = "The given 'setup_dir' of %r does NOT contain a setup.cfg file."
    str_1 = "Change ownership of a path.\n\n    This function processes the given ``path`` with\n    :obj:`~flutils.normalize_path`.\n\n    If the given ``path`` does NOT exist, nothing will be done.\n\n    Args:\n        path (:obj:`str`, :obj:`bytes` or :obj:`Path <pathlib.Path>`):\n            The path of the file or directory that will have it's ownership\n            changed.  This value can be a :term:`glob pattern`.\n        user (:obj:`str` or :obj:`int`, optional): The \"login name\" used to set\n            the owner of ``path``.  A value of ``'-1'`` will leave the\n            owner unchanged.  Defaults to the \"login name\" of the current user.\n        group (:obj:`str` or :obj:`int`, optional): The group name used to set\n            the group of ``path``.  A value of ``'-1'`` will leave the\n            group unchanged.  Defaults to the current user's group.\n        include_parent (:obj:`bool`, optional): A value of :obj:`True` will\n            chown the parent directory of the given ``path`` that contains\n            a :term:`glob pattern`.  Defaults to :obj:`False`.\n\n    Raises:\n        OSError: If the given :obj:`user` does not exist as a \"login\n            name\" for this operating system.\n        OSError: If the given :obj:`group` does not exist as a \"group\n            name\" for this operating system.\n\n    :rtype: :obj:`None`\n\n    Examples:\n        >>> from flutils.pathutils import chown\n        >>> chown('~/tmp/flutils.tests.osutils.txt')\n\n        Supports a :term:`glob pattern`.  So to recursively change the\n        ownership of a directory just do:\n\n        >>> chown('~/tmp/**')\n\n\n        To change ownership of all the directory's immediate contents:\n\n        >>> chown('~/tmp/*', user='foo', group='bar')\n\n    "
    dict_0 = {str_0: str_0, str_1: str_1, str_1: str_0}
    ordered_dict_0 = module_2.OrderedDict(**dict_0)
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_9():
    ordered_dict_0 = module_2.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    var_1 = module_0.to_namedtuple(ordered_dict_0)
    var_2 = module_0.to_namedtuple(var_1)
    var_3 = module_0.to_namedtuple(var_1)
    var_4 = module_0.to_namedtuple(var_0)


def test_case_10():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_11():
    str_0 = "G2s"
    str_1 = "/9){aYQ\\&=&:\njcM+\x0b6X"
    dict_0 = {str_1: str_1, str_0: str_0, str_1: str_1}
    var_0 = module_0.to_namedtuple(dict_0)
    tuple_0 = (str_1, var_0, var_0)
    var_1 = module_0.to_namedtuple(tuple_0)


def test_case_12():
    bytes_0 = b"bF+\x1b"
    list_0 = [bytes_0, bytes_0, bytes_0]
    int_0 = 940
    str_0 = "FVK(k{86hF6\x0b. "
    list_1 = [int_0, str_0, bytes_0]
    var_0 = module_0.to_namedtuple(list_1)
    dict_0 = {bytes_0: list_0, bytes_0: bytes_0, bytes_0: list_0}
    tuple_0 = (bytes_0, bytes_0, dict_0, dict_0)
    module_0.to_namedtuple(tuple_0)


def test_case_13():
    str_0 = "'p%jle"
    str_1 = "G2\n"
    str_2 = "/9){aYQ\\&=&:\njcM+\x0b6X"
    dict_0 = {str_0: str_0, str_1: str_0, str_1: str_1, str_2: str_0}
    ordered_dict_0 = module_2.OrderedDict(**dict_0)
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    var_1 = module_0.to_namedtuple(dict_0)
    module_2.OrderedDict(**var_1)
