# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1
import builtins as module_2


def test_case_0():
    int_0 = 1126
    module_0.to_namedtuple(int_0)


def test_case_1():
    int_0 = -1069
    list_0 = [int_0]
    list_1 = [list_0, list_0]
    str_0 = ""
    int_1 = -692
    tuple_0 = (list_1, int_0, str_0, int_1)
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_2():
    str_0 = "G$h&c|<3`\rTBt"
    dict_0 = {str_0: str_0}
    ordered_dict_0 = module_0.to_namedtuple(dict_0)


def test_case_3():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_4():
    str_0 = "is_loaded"
    module_0.to_namedtuple(str_0)


def test_case_5():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_6():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_7():
    str_0 = "ncding"
    dict_0 = {str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_8():
    str_0 = "G$hv&c|\r3`zrtt"
    str_1 = "e!X).0DGo*"
    dict_0 = {str_0: str_1}
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_9():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_10():
    bytes_0 = b")}\xea\x8a`"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.to_namedtuple(dict_0)


def test_case_11():
    bytes_0 = b"\xb8\xdaH%\xa6\xa5\x0f\xbd\t\xc0\xa7\x13\xfd\xc6=\xaaJr \xb2"
    int_0 = -2350
    str_0 = "\x0bmHEx\r"
    str_1 = "Convert particular objects into a namedtuple.\n\n    Args:\n        obj: The object to be converted (or have it's contents converted) to\n            a :obj:`NamedTuple <collections.namedtuple>`.\n\n    If the given type is of :obj:`list` or :obj:`tuple`, each item will be\n    recursively converted to a :obj:`NamedTuple <collections.namedtuple>`\n    provided the items can be converted. Items that cannot be converted\n    will still exist in the returned object.\n\n    If the given type is of :obj:`list` the return value will be a new\n    :obj:`list`.  This means the items are not changed in the given\n    ``obj``.\n\n    If the given type is of :obj:`Mapping <collections.abc.Mapping>`\n    (:obj:`dict`), keys that can be proper identifiers will become attributes\n    on the returned :obj:`NamedTuple <collections.namedtuple>`.  Additionally,\n    the attributes of the returned :obj:`NamedTuple <collections.namedtuple>`\n    are sorted alphabetically.\n\n    If the given type is of :obj:`OrderedDict <collections.OrderedDict>`,\n    the attributes of the returned :obj:`NamedTuple <collections.namedtuple>`\n    keep the same order as the given\n    :obj:`OrderedDict <collections.OrderedDict>` keys.\n\n    If the given type is of :obj:`SimpleNamespace <types.SimpleNamespace>`,\n    The attributes are sorted alphabetically in the returned\n    :obj:`NamedTuple <collections.NamedTuple>`.\n\n    Any identifier (key or attribute name) that starts with an underscore\n    cannot be used as a :obj:`NamedTuple <collections.namedtuple>` attribute.\n\n    All values are recursively converted.  This means a dictionary that\n    contains another dictionary, as one of it's values, will be converted\n    to a :obj:`NamedTuple <collections.namedtuple>` with the attribute's\n    value also converted to a :obj:`NamedTuple <collections.namedtuple>`.\n\n    :rtype:\n        :obj:`list`\n\n            A list with any of it's values converted to a\n            :obj:`NamedTuple <collections.namedtuple>`.\n\n        :obj:`tuple`\n\n            A tuple with any of it's values converted to a\n            :obj:`NamedTuple <collections.namedtuple>`.\n\n        :obj:`NamedTuple <collections.namedtuple>`.\n\n    Example:\n        >>> from flutils.namedtupleutils import to_namedtuple\n        >>> dic = {'a': 1, 'b': 2}\n        >>> to_namedtuple(dic)\n        NamedTuple(a=1, b=2)\n    "
    dict_0 = {str_0: str_1}
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    tuple_0 = (int_0, ordered_dict_0, ordered_dict_0)
    tuple_1 = (bytes_0, tuple_0)
    var_0 = module_0.to_namedtuple(tuple_1)
    var_1 = module_2.object()
    module_0.to_namedtuple(int_0)


def test_case_12():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0}
    var_0 = module_0.to_namedtuple(tuple_0)
    var_1 = module_0.to_namedtuple(dict_0)
    var_2 = module_0.to_namedtuple(tuple_0)
    var_3 = module_0.to_namedtuple(var_1)
    var_4 = module_0.to_namedtuple(dict_0)
    var_5 = module_0.to_namedtuple(var_0)
    var_6 = module_0.to_namedtuple(var_2)
    var_7 = module_0.to_namedtuple(var_5)
    var_8 = module_0.to_namedtuple(var_0)
    var_9 = module_0.to_namedtuple(var_0)
    var_10 = module_0.to_namedtuple(var_0)
    int_0 = 5
    var_11 = module_0.to_namedtuple(var_10)
    module_0.to_namedtuple(int_0)
