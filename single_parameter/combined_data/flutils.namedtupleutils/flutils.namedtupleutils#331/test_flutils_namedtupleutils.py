# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import builtins as module_0
import flutils.namedtupleutils as module_1
import collections as module_2


def test_case_0():
    object_0 = module_0.object()
    module_1.to_namedtuple(object_0)


def test_case_1():
    list_0 = []
    set_0 = set()
    tuple_0 = (list_0, set_0, list_0)
    var_0 = module_1.to_namedtuple(tuple_0)


def test_case_2():
    str_0 = "name"
    dict_0 = {str_0: str_0}
    var_0 = module_1.to_namedtuple(dict_0)


def test_case_3():
    ordered_dict_0 = module_2.OrderedDict()
    var_0 = module_1.to_namedtuple(ordered_dict_0)


def test_case_4():
    str_0 = "$uQn\\-9\n'Ejai"
    module_1.to_namedtuple(str_0)


def test_case_5():
    tuple_0 = ()
    var_0 = module_1.to_namedtuple(tuple_0)


def test_case_6():
    object_0 = module_0.object()
    dict_0 = {
        object_0: object_0,
        object_0: object_0,
        object_0: object_0,
        object_0: object_0,
    }
    tuple_0 = (object_0, dict_0)
    bytes_0 = b"\xc5\xfe\xb1-\xd61\x17\xb9\xaa)\\"
    tuple_1 = (tuple_0, dict_0, bytes_0)
    list_0 = []
    var_0 = module_1.to_namedtuple(list_0)
    var_1 = module_1.to_namedtuple(list_0)
    var_2 = module_1.to_namedtuple(var_1)
    var_3 = module_1.to_namedtuple(tuple_1)
    var_4 = module_1.to_namedtuple(list_0)
    var_5 = module_1.to_namedtuple(var_1)


def test_case_7():
    ordered_dict_0 = module_2.OrderedDict()
    var_0 = module_1.to_namedtuple(ordered_dict_0)
    var_1 = module_1.to_namedtuple(var_0)


def test_case_8():
    bool_0 = True
    str_0 = "Find all paths that match the given :term:`glob pattern`.\n\n    This function pre-processes the given ``pattern`` with\n    :obj:`~flutils.normalize_path`.\n\n    Args:\n        pattern (:obj:`str`, :obj:`bytes` or :obj:`Path <pathlib.Path>`):\n            The path to find; which may contain a :term:`glob pattern`.\n\n    :rtype:\n        :obj:`Generator <typing.Generator>`\n\n    Yields:\n        :obj:`pathlib.PosixPath` or :obj:`pathlib.WindowsPath`\n\n    Example:\n        >>> from flutils.pathutils import find_paths\n        >>> list(find_paths('~/tmp/*'))\n        [PosixPath('/home/test_user/tmp/file_one'),\n        PosixPath('/home/test_user/tmp/dir_one')]\n\n    "
    dict_0 = {str_0: str_0}
    ordered_dict_0 = module_2.OrderedDict(**dict_0)
    var_0 = module_1.to_namedtuple(ordered_dict_0)
    module_1.to_namedtuple(bool_0)


def test_case_9():
    list_0 = []
    var_0 = module_1.to_namedtuple(list_0)


def test_case_10():
    str_0 = "name"
    dict_0 = {str_0: str_0}
    var_0 = module_1.to_namedtuple(dict_0)
    var_1 = module_1.to_namedtuple(var_0)


def test_case_11():
    bytes_0 = b"\xba\x10\xcf9s\xbf\xb9\xe8\xed\x0f\x00u\x12"
    int_0 = -2266
    dict_0 = {bytes_0: bytes_0, bytes_0: int_0}
    module_1.to_namedtuple(dict_0)


def test_case_12():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0, dict_0]
    bool_0 = True
    tuple_0 = (list_0, list_0, bool_0)
    var_0 = module_1.to_namedtuple(tuple_0)
    str_0 = " mV"
    var_1 = module_1.to_namedtuple(list_0)
    dict_1 = {str_0: str_0}
    var_2 = module_1.to_namedtuple(dict_1)
    var_3 = module_1.to_namedtuple(tuple_0)
    var_4 = module_1.to_namedtuple(var_1)
    var_5 = module_1.to_namedtuple(var_1)
    var_6 = module_1.to_namedtuple(dict_1)
    module_2.namedtuple(var_0, tuple_0)
