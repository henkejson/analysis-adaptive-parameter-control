# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1


def test_case_0():
    bool_0 = False
    module_0.to_namedtuple(bool_0)


def test_case_1():
    str_0 = "SetupCfgCommand"
    int_0 = -1778
    dict_0 = {str_0: int_0}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_2():
    str_0 = "ijXA\x0c\rAozCbwVu A"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_3():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_4():
    bytes_0 = b"gD\xb6R"
    module_0.to_namedtuple(bytes_0)


def test_case_5():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_6():
    str_0 = "SetupCfgCommand"
    int_0 = -1778
    dict_0 = {str_0: int_0, int_0: int_0}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_7():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_8():
    bytes_0 = b"\xad\x08\xbd*lc"
    list_0 = [bytes_0, bytes_0]
    var_0 = module_0.to_namedtuple(list_0)


def test_case_9():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_10():
    bool_0 = True
    bytes_0 = b"\x08\x8b!V\x8fQ\xfa\x18"
    int_0 = 4
    dict_0 = {bool_0: bool_0, bool_0: bytes_0, bool_0: bytes_0, bytes_0: int_0}
    tuple_0 = (bytes_0, bool_0, bool_0, dict_0)
    module_0.to_namedtuple(tuple_0)


def test_case_11():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_12():
    str_0 = "SetupCfgCommand"
    int_0 = -1778
    dict_0 = {str_0: int_0, int_0: int_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_13():
    str_0 = "RetupCfgComman\n"
    int_0 = -1805
    dict_0 = {str_0: int_0, int_0: int_0}
    list_0 = [int_0, int_0, dict_0, dict_0]
    var_0 = module_0.to_namedtuple(list_0)
    module_1.namedtuple(int_0, list_0, defaults=var_0)
