# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1


def test_case_0():
    bool_0 = False
    module_0.to_namedtuple(bool_0)


def test_case_1():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    var_0 = module_0.to_namedtuple(list_0)
    bool_1 = True
    module_0.to_namedtuple(bool_1)


def test_case_2():
    bytes_0 = b'\x9c\xb5\xf4\xee3=\x16{8i"'
    dict_0 = {bytes_0: bytes_0}
    module_0.to_namedtuple(dict_0)


def test_case_3():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_4():
    bytes_0 = b"\x1d\xef\x06\x8c\x03\xf0uBaw_r;wz"
    module_0.to_namedtuple(bytes_0)


def test_case_5():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_6():
    bytes_0 = b"\x0c\x08"
    float_0 = -449.0
    tuple_0 = (float_0, float_0)
    list_0 = [tuple_0, tuple_0, tuple_0]
    set_0 = set()
    dict_0 = {tuple_0: tuple_0, float_0: float_0, bytes_0: float_0, float_0: bytes_0}
    tuple_1 = (tuple_0, list_0, set_0, dict_0)
    module_0.to_namedtuple(tuple_1)


def test_case_7():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_8():
    str_0 = "F;g\\rs+y\x0bmxpU"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0]
    tuple_0 = (str_0, dict_0, dict_0, list_0)
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_9():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_10():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_11():
    str_0 = "\tg"
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    var_0 = module_0.to_namedtuple(dict_0)
    module_0.to_namedtuple(str_0)


def test_case_12():
    str_0 = "Cgkyq"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)
    module_0.to_namedtuple(str_0)
