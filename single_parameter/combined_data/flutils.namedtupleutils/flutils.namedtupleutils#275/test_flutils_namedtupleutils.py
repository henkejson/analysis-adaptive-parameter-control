# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1


def test_case_0():
    float_0 = -400.10215
    module_0.to_namedtuple(float_0)


def test_case_1():
    bytes_0 = b"\xd5g\x85S\xd5\xec\x1d5~C\xf7\xf6\x9e\x81\xb9\x16\x8e\xe5\x0c\xec"
    int_0 = -1883
    tuple_0 = (bytes_0, int_0, int_0)
    var_0 = module_0.to_namedtuple(tuple_0)
    var_1 = module_0.to_namedtuple(tuple_0)
    var_2 = module_0.to_namedtuple(tuple_0)


def test_case_2():
    bytes_0 = b"\xcd\x1e\xbe<\x11"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.to_namedtuple(dict_0)


def test_case_3():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_4():
    bytes_0 = b"\xd5g\x85S\xd5\xec\x1d5~C\xf7\xf6\x9e\x81\xb9\x16\x8e\xe5\x0c\xec"
    module_0.to_namedtuple(bytes_0)


def test_case_5():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_6():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    var_0 = module_0.to_namedtuple(dict_0)
    tuple_0 = (var_0, var_0, var_0)
    var_1 = module_0.to_namedtuple(tuple_0)


def test_case_7():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_8():
    str_0 = "pFuk"
    dict_0 = {str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_9():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)
    tuple_0 = (var_0, var_0, var_0)
    var_1 = module_0.to_namedtuple(tuple_0)


def test_case_10():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_11():
    bool_0 = False
    tuple_0 = (bool_0,)
    var_0 = module_0.to_namedtuple(tuple_0)
    str_0 = "pFuk"
    dict_0 = {str_0: str_0, str_0: str_0}
    str_1 = "Return the character length of the given\n    :obj:`Sequence <typing.Sequence>` without counting any ANSI codes.\n\n    *New in version 0.6*\n\n    Args:\n         seq (:obj:`Sequence <typing.Sequence>`): A string or a list/tuple\n             of strings.\n\n    :rtype:\n        :obj:`int`\n\n    Example:\n        >>> from flutils.txtutils import len_without_ansi\n        >>> text = '\\x1b[38;5;209mfoobar\\x1b[0m'\n        >>> len_without_ansi(text)\n        6\n    "
    dict_1 = {var_0: dict_0, str_1: str_0}
    ordered_dict_0 = module_1.OrderedDict(**dict_1)
    list_0 = [dict_0, str_0]
    var_1 = module_0.to_namedtuple(list_0)
    var_2 = module_0.to_namedtuple(dict_1)


def test_case_12():
    bool_0 = False
    tuple_0 = (bool_0,)
    var_0 = module_0.to_namedtuple(tuple_0)
    str_0 = "pFuk\r"
    dict_0 = {str_0: str_0, str_0: str_0}
    str_1 = "Return the character length of the given\n    :obj:`Sequence <typing.Sequence>` without counting any ANSI codes.\n\n    *New in version 0.6*\n\n    Args:\n         seq (:obj:`Sequence <typing.Sequence>`): A string or a list/tuple\n             of strings.\n\n    :rtype:\n        :obj:`int`\n\n    Example:\n        >>> from flutils.txtutils import len_without_ansi\n        >>> text = '\\x1b[38;5;209mfoobar\\x1b[0m'\n        >>> len_without_ansi(text)\n        6\n    "
    dict_1 = {var_0: dict_0, str_1: str_0}
    ordered_dict_0 = module_1.OrderedDict(**dict_1)
    list_0 = [dict_0, str_0]
    var_1 = module_0.to_namedtuple(list_0)
    var_2 = module_0.to_namedtuple(dict_1)
