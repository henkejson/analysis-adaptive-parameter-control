# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1


def test_case_0():
    int_0 = 1744
    module_0.to_namedtuple(int_0)


def test_case_1():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_2():
    str_0 = "AhQH"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_3():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_4():
    bytes_0 = b"`\xf7\xa3\x90%F\x84\xdfe\xf1\xe8\xdfW\xe8]\xc5\x1c\x1a\x8b"
    module_0.to_namedtuple(bytes_0)


def test_case_5():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_6():
    float_0 = 1853.2
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    complex_0 = 1494.73637 - 191.715656j
    int_0 = -41
    tuple_0 = (dict_0, complex_0, float_0, int_0)
    var_0 = module_0.to_namedtuple(tuple_0)
    var_1 = module_0.to_namedtuple(var_0)
    module_0.to_namedtuple(complex_0)


def test_case_7():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)
    ordered_dict_0 = module_1.OrderedDict()
    var_1 = module_0.to_namedtuple(ordered_dict_0)
    var_2 = module_0.to_namedtuple(var_1)


def test_case_8():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_9():
    str_0 = "kKa3:\tKZWEL<*AN9QSe>"
    bytes_0 = b"H\x05\x14\xf2\xcb\xe3\x97"
    tuple_0 = (str_0, str_0, bytes_0)
    var_0 = module_0.to_namedtuple(tuple_0)
    float_0 = 1853.2
    dict_0 = {
        float_0: float_0,
        float_0: float_0,
        bytes_0: var_0,
        tuple_0: bytes_0,
        float_0: float_0,
        float_0: float_0,
    }
    var_1 = module_0.to_namedtuple(tuple_0)
    var_2 = module_0.to_namedtuple(var_0)
    tuple_1 = (dict_0, var_1, float_0, var_2)
    module_0.to_namedtuple(tuple_1)


def test_case_10():
    str_0 = "\n{;J@9z-H2u\x0cAKfjT'("
    str_1 = "LMK"
    dict_0 = {str_0: str_0, str_1: str_0, str_0: str_0}
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    str_2 = "%sCommand"
    module_0.to_namedtuple(str_2)


def test_case_11():
    str_0 = "\rNp"
    dict_0 = {str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    var_1 = module_0.to_namedtuple(ordered_dict_0)
    dict_1 = {var_1: var_1, var_1: var_1, var_1: var_1, var_1: var_1}
    int_0 = -41
    tuple_0 = (dict_1, var_1, int_0, int_0)
    var_2 = module_0.to_namedtuple(tuple_0)
    module_1.namedtuple(var_2, var_0, rename=dict_0)
