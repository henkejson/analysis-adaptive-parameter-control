# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import builtins as module_1
import collections as module_2


def test_case_0():
    none_type_0 = None
    module_0.to_namedtuple(none_type_0)


def test_case_1():
    object_0 = module_1.object()
    list_0 = [object_0]
    var_0 = module_0.to_namedtuple(list_0)


def test_case_2():
    bytes_0 = b"_\x8e1\xbf\xf7"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.to_namedtuple(dict_0)


def test_case_3():
    ordered_dict_0 = module_2.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_4():
    bytes_0 = b"_\x8es1\xbf\xf7"
    module_0.to_namedtuple(bytes_0)


def test_case_5():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_6():
    str_0 = 'eNaskNy&{k"v_I@'
    str_1 = "A :obj:`NamedTuple <typing.NamedTuple>` that holds a completed\n    process' information.\n\n    Attributes:\n         return_code (int): The process return code.\n         stdout (str): All lines of the ``stdout`` from the process.\n         stderr (str): All lines of the ``stderr`` from the process.\n         cmd (str): The command that the process ran.\n    "
    str_2 = ""
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0, str_2: str_0}
    ordered_dict_0 = module_2.OrderedDict(**dict_0)
    bool_0 = True
    tuple_0 = (ordered_dict_0, dict_0, bool_0, str_0)
    var_0 = module_0.to_namedtuple(tuple_0)
    dict_1 = {var_0: var_0, var_0: var_0, var_0: var_0, var_0: var_0}
    var_1 = module_0.to_namedtuple(dict_1)
    var_2 = module_0.to_namedtuple(var_0)
    var_3 = module_0.to_namedtuple(var_0)


def test_case_7():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_8():
    str_0 = "%s.%s"
    list_0 = [str_0, str_0, str_0]
    var_0 = module_0.to_namedtuple(list_0)


def test_case_9():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_10():
    ordered_dict_0 = module_2.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_11():
    str_0 = "`\x0c,"
    complex_0 = 1285.8 + 680.308j
    bool_0 = False
    tuple_0 = (complex_0, complex_0, bool_0)
    str_1 = "p"
    dict_0 = {str_0: str_0, str_0: tuple_0, str_0: tuple_0, str_1: str_1}
    ordered_dict_0 = module_2.OrderedDict(**dict_0)
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_12():
    complex_0 = 1285.8 + 680.308j
    tuple_0 = (complex_0, complex_0, complex_0)
    str_0 = "p"
    dict_0 = {str_0: str_0, str_0: tuple_0, str_0: tuple_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_13():
    str_0 = 'eNaskNy&{k"v_I@'
    none_type_0 = None
    str_1 = "F"
    str_2 = "A :obj:`NamedTuple <typing.NamedTuple>` that holds a completed\n    process' information.\n\n    Attributes:\n         return_code (int): The process return code.\n         stdout (str): All lines of the ``stdout`` from the process.\n         stderr (str): All lines of the ``stderr`` from the process.\n         cmd (str): The command that the process ran.\n    "
    str_3 = "M7lK47\n"
    dict_0 = {
        str_0: none_type_0,
        str_1: none_type_0,
        str_2: none_type_0,
        str_3: none_type_0,
    }
    ordered_dict_0 = module_2.OrderedDict(**dict_0)
    bool_0 = True
    tuple_0 = (ordered_dict_0, dict_0, bool_0, str_1)
    var_0 = module_0.to_namedtuple(tuple_0)
    float_0 = 928.40659
    var_1 = module_0.to_namedtuple(ordered_dict_0)
    dict_1 = {var_0: none_type_0, float_0: str_2, bool_0: bool_0}
    var_2 = module_0.to_namedtuple(dict_1)
    var_3 = module_0.to_namedtuple(var_1)
    module_0.to_namedtuple(float_0)
