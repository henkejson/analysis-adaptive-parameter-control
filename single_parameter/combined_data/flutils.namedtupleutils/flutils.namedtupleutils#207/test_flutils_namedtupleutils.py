# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1


def test_case_0():
    bool_0 = False
    module_0.to_namedtuple(bool_0)


def test_case_1():
    str_0 = "\x0c>gSY"
    int_0 = -5127
    list_0 = [str_0, int_0, int_0]
    var_0 = module_0.to_namedtuple(list_0)


def test_case_2():
    str_0 = "B"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_3():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_4():
    str_0 = "Parse the given tuple, with each row containing a :term:`foreign-name`\n    and return info needed for the cherry-picking-module.\n    "
    module_0.to_namedtuple(str_0)


def test_case_5():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_6():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_7():
    str_0 = "B"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_8():
    str_0 = 'TXS.K8r;#L"#1e@'
    str_1 = "B"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_1: str_0}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_9():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)
    list_0 = [dict_0, dict_0]
    module_1.namedtuple(list_0, var_0, module=var_1)


def test_case_10():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_11():
    str_0 = "*E$4-Ig"
    float_0 = -492.7711
    set_0 = {str_0, float_0, float_0, str_0}
    float_1 = 584.47222
    dict_0 = {str_0: float_1, float_0: str_0, float_1: float_0}
    tuple_0 = (str_0, float_0, set_0, dict_0)
    var_0 = module_0.to_namedtuple(tuple_0)
    tuple_1 = ()
    var_1 = module_0.to_namedtuple(tuple_1)


def test_case_12():
    bytes_0 = b"\xfc\xd7oP\xb4\x9fC`\x1b"
    str_0 = "5GL0jPr"
    dict_0 = {str_0: bytes_0, str_0: str_0, bytes_0: str_0}
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    bool_0 = False
    tuple_0 = (ordered_dict_0, bool_0, ordered_dict_0)
    module_0.to_namedtuple(tuple_0)


def test_case_13():
    bytes_0 = b"\xfc\xd7oP\xb4\x9fC`\x1b"
    str_0 = "\nrv"
    str_1 = "XEr"
    dict_0 = {str_0: bytes_0, str_0: str_0, str_1: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)
    none_type_0 = None
    module_0.to_namedtuple(none_type_0)
