# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1


def test_case_0():
    bool_0 = True
    module_0.to_namedtuple(bool_0)


def test_case_1():
    bool_0 = True
    str_0 = "et_osgroup"
    dict_0 = {}
    dict_1 = {str_0: bool_0, bool_0: str_0, bool_0: dict_0}
    var_0 = module_0.to_namedtuple(dict_1)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_2():
    str_0 = "get_os_group"
    dict_0 = {str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_3():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_4():
    str_0 = "3R"
    module_0.to_namedtuple(str_0)


def test_case_5():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_6():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_7():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)
    set_0 = module_0.to_namedtuple(var_0)


def test_case_8():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_9():
    str_0 = "@%j`"
    tuple_0 = (str_0,)
    var_0 = module_0.to_namedtuple(tuple_0)
    var_1 = module_0.to_namedtuple(tuple_0)
    var_2 = module_0.to_namedtuple(var_1)


def test_case_10():
    bool_0 = True
    str_0 = "{}a0"
    dict_0 = {}
    dict_1 = {str_0: bool_0, bool_0: str_0, bool_0: dict_0}
    tuple_0 = (bool_0, bool_0, str_0, dict_1)
    var_0 = module_0.to_namedtuple(tuple_0)
    var_1 = module_0.to_namedtuple(var_0)
    module_0.to_namedtuple(bool_0)


def test_case_11():
    bool_0 = False
    str_0 = "x "
    dict_0 = {}
    dict_1 = {str_0: bool_0, bool_0: str_0, bool_0: dict_0}
    tuple_0 = (bool_0, bool_0, str_0, dict_1)
    var_0 = module_0.to_namedtuple(tuple_0)
    var_1 = module_0.to_namedtuple(var_0)
    list_0 = [bool_0, bool_0, dict_1, bool_0, var_0]
    var_2 = module_0.to_namedtuple(list_0)
    var_3 = module_0.to_namedtuple(list_0)
    module_1.namedtuple(var_0, var_1, rename=dict_1, defaults=bool_0)


def test_case_12():
    bytes_0 = b"\x9fN@Z\xd4\xaec\xee\x1a"
    dict_0 = {}
    dict_1 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: dict_0}
    module_0.to_namedtuple(dict_1)
