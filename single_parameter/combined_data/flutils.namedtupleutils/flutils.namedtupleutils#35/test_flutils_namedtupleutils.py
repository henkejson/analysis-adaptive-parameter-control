# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1


def test_case_0():
    int_0 = 70
    module_0.to_namedtuple(int_0)


def test_case_1():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_2():
    int_0 = 1679
    dict_0 = {int_0: int_0}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_3():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_4():
    str_0 = "origin"
    module_0.to_namedtuple(str_0)


def test_case_5():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_6():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_7():
    str_0 = "@3O~n'L"
    tuple_0 = (str_0, str_0)
    var_0 = module_0.to_namedtuple(tuple_0)
    var_1 = module_0.to_namedtuple(tuple_0)


def test_case_8():
    str_0 = "origin"
    dict_0 = {str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_9():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)
    list_0 = [dict_0, dict_0, dict_0]
    var_1 = module_0.to_namedtuple(var_0)
    var_2 = module_0.to_namedtuple(list_0)


def test_case_10():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_11():
    str_0 = "origin"
    dict_0 = {str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_12():
    bytes_0 = b"\xab\xa9\x00i\xf6s1\x9dq\\\x84\xa2\x99[{\xdeQGm"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    list_0 = [dict_0]
    module_0.to_namedtuple(list_0)


def test_case_13():
    str_0 = "\x0b$K&*;<"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    float_0 = -296.0
    dict_1 = {float_0: float_0, var_0: var_0, float_0: float_0}
    tuple_0 = (dict_1,)
    var_1 = module_0.to_namedtuple(tuple_0)
    var_2 = module_0.to_namedtuple(var_1)
    module_0.to_namedtuple(float_0)


def test_case_14():
    str_0 = "\x0bB"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(dict_0)
    var_2 = module_0.to_namedtuple(var_0)
    object_0 = module_1.OrderedDict(*var_0)
    module_1.namedtuple(var_1, var_1, rename=var_0, defaults=var_0)
