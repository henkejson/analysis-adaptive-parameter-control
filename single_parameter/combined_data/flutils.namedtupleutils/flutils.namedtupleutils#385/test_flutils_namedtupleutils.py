# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1
import builtins as module_2


def test_case_0():
    int_0 = -953
    module_0.to_namedtuple(int_0)


def test_case_1():
    none_type_0 = None
    str_0 = "Fu"
    dict_0 = {
        str_0: none_type_0,
        str_0: none_type_0,
        str_0: none_type_0,
        str_0: none_type_0,
        str_0: none_type_0,
        str_0: none_type_0,
    }
    var_0 = module_0.to_namedtuple(dict_0)
    module_1.namedtuple(var_0, var_0, rename=var_0, defaults=str_0)


def test_case_2():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_3():
    str_0 = "K71y'&\x0b+6&\\y<P"
    module_0.to_namedtuple(str_0)


def test_case_4():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_5():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    list_0 = [bool_0, tuple_0]
    var_0 = module_0.to_namedtuple(list_0)
    dict_0 = {tuple_0: tuple_0, bool_0: list_0}
    var_1 = module_0.to_namedtuple(dict_0)
    var_2 = module_0.to_namedtuple(var_1)
    bool_1 = False
    module_0.to_namedtuple(bool_1)


def test_case_6():
    bytes_0 = b"X\x86my\xbaJ"
    list_0 = [bytes_0, bytes_0, bytes_0]
    var_0 = module_0.to_namedtuple(list_0)
    object_0 = module_2.object()
    bytes_1 = b"\xd9\xd4\x18\xdb\x81l\x85\nw\x7f\xdb2<|\x06\x99"
    module_1.namedtuple(object_0, bytes_1, rename=object_0)


def test_case_7():
    none_type_0 = None
    str_0 = "setup_dir"
    dict_0 = {
        str_0: none_type_0,
        str_0: none_type_0,
        str_0: none_type_0,
        str_0: none_type_0,
    }
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_8():
    bytes_0 = b"\xb2\xb9\x17\xbc\x7f1\xf8\xf0\xe3E\x9f"
    dict_0 = {bytes_0: bytes_0}
    module_0.to_namedtuple(dict_0)


def test_case_9():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_10():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    list_0 = [bool_0, tuple_0]
    var_0 = module_0.to_namedtuple(list_0)
    module_1.namedtuple(bool_0, list_0, rename=list_0, defaults=tuple_0, module=tuple_0)


def test_case_11():
    none_type_0 = None
    str_0 = "Fu"
    str_1 = 'UT9q+:;#K")'
    dict_0 = {
        str_1: none_type_0,
        str_0: none_type_0,
        str_1: none_type_0,
        str_1: none_type_0,
    }
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_12():
    str_0 = "J\n"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(dict_0)
    var_2 = module_0.to_namedtuple(var_1)
    bool_0 = True
    bool_1 = True
    tuple_0 = (var_0, bool_0, bool_1)
    var_3 = module_0.to_namedtuple(tuple_0)
    module_0.to_namedtuple(str_0)
