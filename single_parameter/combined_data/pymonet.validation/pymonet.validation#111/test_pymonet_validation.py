# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    str_0 = "icTryA"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(str_0)
    var_1 = validation_0.is_fail()
    var_2 = validation_0.to_lazy()
    validation_0.bind(validation_0)


def test_case_1():
    bytes_0 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_try()
    var_1 = validation_0.__eq__(bytes_0)
    var_2 = validation_0.to_box()
    var_3 = validation_0.__str__()
    var_0.map(var_3)


def test_case_2():
    str_0 = "<=\\Z#;`HH@"
    bool_0 = False
    set_0 = {str_0, str_0, bool_0, bool_0}
    dict_0 = {str_0: bool_0, str_0: bool_0, str_0: set_0}
    validation_0 = module_0.Validation(set_0, dict_0)
    var_0 = validation_0.__str__()
    var_0.to_box()


def test_case_3():
    complex_0 = 374.06062 - 409.3j
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_maybe()
    var_0.bind(complex_0)


def test_case_4():
    str_0 = "icTryA"
    str_0.ap(str_0)


def test_case_5():
    str_0 = "{cTryA"
    var_0 = module_0.Validation(str_0, str_0)


def test_case_6():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.is_fail()


def test_case_7():
    bytes_0 = b"<\xddRA}"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    none_type_0 = None
    validation_0.map(none_type_0)


def test_case_8():
    bool_0 = True
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(bool_0)
    validation_0.ap(validation_0)


def test_case_9():
    str_0 = "icTryA"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_box()


def test_case_10():
    bytes_0 = b"\x07nE\x1b\xdai\xf0\x8aY\xb6"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_maybe()


def test_case_11():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.to_try()


def test_case_12():
    bytes_0 = b"\x07nE\x1b\xdai\xf0\x8aY\xb6"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.__eq__(bytes_0)
    var_1.is_fail()


def test_case_13():
    dict_0 = {}
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, dict_0)
    var_0 = validation_0.to_either()
    var_0.is_success()


def test_case_14():
    bytes_0 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = module_0.Validation(validation_0, validation_0)
    var_1 = validation_0.to_try()
    validation_1 = module_0.Validation(bytes_0, var_0)
    var_2 = validation_1.__eq__(var_0)
    var_3 = validation_0.to_either()
    var_4 = validation_0.__eq__(bytes_0)
    var_5 = validation_0.to_box()
    var_6 = validation_0.__str__()
    var_1.map(var_6)


def test_case_15():
    bytes_0 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.__eq__(bytes_0)
    var_2 = validation_0.is_fail()
    var_1.ap(var_1)


def test_case_16():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    str_0 = "icTryA"
    validation_1 = module_0.Validation(str_0, str_0)
    var_0 = validation_1.to_either()
    var_1 = validation_1.__eq__(str_0)
    var_2 = validation_1.is_fail()
    var_3 = validation_1.to_lazy()
    validation_1.bind(validation_1)
