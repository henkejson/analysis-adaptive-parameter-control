# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bool_0 = False
    bool_1 = True
    validation_0 = module_0.Validation(bool_1, bool_0)
    var_0 = validation_0.__eq__(bool_1)
    validation_0.map(var_0)


def test_case_1():
    complex_0 = -753.98 - 2899.7885j
    set_0 = {complex_0, complex_0, complex_0, complex_0}
    validation_0 = module_0.Validation(complex_0, set_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.__str__()


def test_case_2():
    tuple_0 = ()
    list_0 = [tuple_0]
    validation_0 = module_0.Validation(list_0, tuple_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.__eq__(validation_0)
    validation_1 = module_0.Validation(var_1, var_0)
    bool_0 = True
    validation_2 = module_0.Validation(var_1, bool_0)
    var_2 = validation_0.to_either()
    var_2.is_fail()


def test_case_3():
    bytes_0 = b"\xa3Sj\xca\x8c*v\xb7)\xea\n"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.__str__()
    var_1.is_success()


def test_case_4():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_5():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.to_maybe()


def test_case_6():
    complex_0 = 2588.445 - 6681.2j
    set_0 = {complex_0, complex_0}
    validation_0 = module_0.Validation(complex_0, set_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.is_fail()


def test_case_7():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    none_type_0 = None
    validation_1 = module_0.Validation(validation_0, none_type_0)
    set_0 = set()
    dict_0 = {}
    validation_2 = module_0.Validation(dict_0, dict_0)
    validation_2.map(set_0)


def test_case_8():
    complex_0 = 2588.445 - 6681.2j
    set_0 = {complex_0, complex_0}
    validation_0 = module_0.Validation(complex_0, set_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_0.bind(set_0)


def test_case_9():
    none_type_0 = None
    none_type_1 = None
    validation_0 = module_0.Validation(none_type_1, none_type_1)
    validation_0.ap(none_type_0)


def test_case_10():
    int_0 = -1611
    list_0 = [int_0, int_0, int_0, int_0]
    validation_0 = module_0.Validation(list_0, int_0)
    var_0 = validation_0.to_box()
    validation_1 = module_0.Validation(list_0, list_0)
    var_1 = validation_1.to_try()
    var_2 = var_1.bind(int_0)
    var_2.is_fail()


def test_case_11():
    int_0 = -1582
    validation_0 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.to_lazy()
    var_0.is_fail()


def test_case_12():
    bytes_0 = b"*\xab\xff\xb8\xb3"
    none_type_0 = None
    validation_0 = module_0.Validation(bytes_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_maybe()
    var_2 = var_1.to_lazy()
    var_3 = var_2.bind(bytes_0)
    set_0 = {bytes_0, bytes_0}
    bool_0 = True
    validation_1 = module_0.Validation(bool_0, bool_0)
    validation_1.bind(set_0)


def test_case_13():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.to_try()


def test_case_14():
    bool_0 = False
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_maybe()
    bool_1 = False
    validation_1 = module_0.Validation(bool_1, bool_0)


def test_case_15():
    str_0 = "p6B,*D\\"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(validation_0)


def test_case_16():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.__str__()
    var_0.to_lazy()


def test_case_17():
    complex_0 = 2588.445 - 6681.2j
    set_0 = {complex_0, complex_0}
    validation_0 = module_0.Validation(complex_0, set_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_either()
    var_0.is_success()


def test_case_18():
    complex_0 = 2588.445 - 6681.2j
    set_0 = {complex_0, complex_0}
    validation_0 = module_0.Validation(complex_0, set_0)
    var_0 = validation_0.is_success()
    var_1 = validation_0.to_box()
    var_2 = validation_0.to_maybe()
    var_3 = validation_0.is_success()
    validation_1 = module_0.Validation(var_1, var_2)
    var_4 = validation_1.to_box()
    var_5 = validation_0.__eq__(validation_1)
    var_6 = var_4.to_lazy()
    var_7 = var_2.to_try()
    var_8 = var_1.__eq__(complex_0)
    var_0.to_maybe()
