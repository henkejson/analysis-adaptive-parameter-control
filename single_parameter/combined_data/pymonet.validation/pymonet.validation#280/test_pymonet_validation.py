# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(validation_0)


def test_case_1():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.__eq__(var_0)
    validation_0.is_fail()


def test_case_2():
    str_0 = "\\\x0bW?M\\0wmBkG"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_try()
    var_1 = validation_0.is_fail()
    var_2 = validation_0.__str__()
    var_0.to_either()


def test_case_3():
    str_0 = "kL:fL\x0cu=7-lT`b"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_try()
    var_1 = validation_0.to_either()
    var_2 = validation_0.to_either()
    var_3 = var_2.__str__()
    var_2.is_fail()


def test_case_4():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_maybe()
    var_0.is_success()


def test_case_5():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_6():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.to_either()


def test_case_7():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_0.is_fail()


def test_case_8():
    int_0 = -187
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, int_0)
    var_0 = validation_0.to_lazy()
    int_1 = 2957
    int_2 = -2315
    dict_0 = {int_2: int_2, int_2: int_2, int_2: int_2, int_2: int_2}
    none_type_1 = None
    validation_1 = module_0.Validation(dict_0, none_type_1)
    validation_1.map(int_1)


def test_case_9():
    int_0 = -2253
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.bind(int_0)


def test_case_10():
    bytes_0 = b"+\xae\xdcU%"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    int_0 = 1
    validation_2 = module_0.Validation(int_0, bytes_0)
    var_1 = validation_1.to_box()
    validation_1.ap(validation_0)


def test_case_11():
    bytes_0 = b"+\xae\xdcU%"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    int_0 = 1
    validation_2 = module_0.Validation(int_0, bytes_0)
    var_1 = validation_1.to_box()
    validation_1.to_maybe()


def test_case_12():
    bytes_0 = b"\xa4@\xad\x8f'\xdd<\xce\x05\xbaff\xdb#H"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_maybe()


def test_case_13():
    bool_0 = False
    str_0 = "\n    Perform left-to-right function composition.\n\n    :param value: argument of first applied function\n    :type value: Any\n    :param functions: list of functions to applied from left-to-right\n    :type functions: List[Function]\n    :returns: result of all functions\n    :rtype: Any\n    "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_maybe()
    var_2 = validation_0.__eq__(bool_0)
    var_3 = var_1.__str__()
    validation_1 = module_0.Validation(var_1, var_0)
    var_4 = validation_0.to_lazy()
    var_4.to_lazy()


def test_case_14():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.is_fail()
    var_2 = validation_0.__str__()
    var_1.is_fail()


def test_case_15():
    set_0 = set()
    none_type_0 = None
    none_type_1 = None
    validation_0 = module_0.Validation(none_type_1, set_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.__eq__(set_0)
    var_1.bind(none_type_0)


def test_case_16():
    int_0 = 0
    validation_0 = module_0.Validation(int_0, int_0)
    int_1 = 1
    validation_1 = module_0.Validation(int_1, int_1)
    var_0 = validation_1.__eq__(validation_0)
    var_0.to_try()
