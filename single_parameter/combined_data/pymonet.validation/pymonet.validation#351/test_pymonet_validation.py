# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bool_0 = True
    str_0 = "i7??9krv"
    dict_0 = {str_0: bool_0, str_0: str_0}
    validation_0 = module_0.Validation(bool_0, dict_0)
    var_0 = validation_0.__eq__(bool_0)
    var_0.is_fail()


def test_case_1():
    list_0 = []
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, list_0)
    var_0 = validation_0.__str__()
    set_0 = set()
    list_0.map(set_0)


def test_case_2():
    bytes_0 = b"\xaa4\x10\xc6\xf3\xb0+`\x1e\xda{\xca\xe0\x01"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    var_0.is_fail()


def test_case_3():
    bytes_0 = b"\xaa4\x10\xc6\xf3\xb0+`\x1e\xda{\xca\xe0\x01"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_lazy()
    var_2 = validation_0.to_either()
    var_3 = var_1.to_either()
    var_4 = validation_0.__eq__(var_0)
    var_2.is_fail()


def test_case_4():
    bool_0 = False
    str_0 = "i7??9k\x0bv"
    dict_0 = {str_0: bool_0, str_0: str_0}
    validation_0 = module_0.Validation(bool_0, dict_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.map(var_0)
    var_2 = var_1.__str__()


def test_case_5():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_6():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.__str__()


def test_case_7():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.is_fail()


def test_case_8():
    none_type_0 = None
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.map(none_type_0)


def test_case_9():
    str_0 = ""
    list_0 = [str_0]
    list_1 = [list_0, str_0, str_0, str_0]
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.ap(list_1)


def test_case_10():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_1.to_box()
    var_0.bind(none_type_0)


def test_case_11():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    validation_0.is_success()


def test_case_12():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.to_try()


def test_case_13():
    complex_0 = 1600.707708 - 4594.04126j
    list_0 = [complex_0, complex_0, complex_0]
    validation_0 = module_0.Validation(complex_0, list_0)
    var_0 = validation_0.to_either()
    validation_1 = module_0.Validation(var_0, list_0)
    var_1 = var_0.to_lazy()
    var_2 = var_1.map(complex_0)
    validation_1.bind(validation_1)


def test_case_14():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_0.is_fail()


def test_case_15():
    str_0 = ".;@Ve$Z9.:oUFo}-Z7,O"
    dict_0 = {str_0: str_0, str_0: str_0}
    bytes_0 = b'Y\x1d\xcb"\xd5\xcb\xd6\x1e\x14\x9f\xe1m\xb4\x90\nU)\x7f\x11'
    float_0 = -733.59946
    validation_0 = module_0.Validation(bytes_0, dict_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_either()
    var_2 = validation_0.is_success()
    var_3 = var_1.ap(float_0)
    var_4 = validation_0.to_either()
    var_5 = var_4.to_box()
    var_6 = validation_0.to_box()
    validation_1 = module_0.Validation(bytes_0, str_0)
    var_7 = validation_1.__str__()
    var_8 = validation_1.__eq__(validation_0)
    var_6.is_fail()


def test_case_16():
    dict_0 = {}
    bytes_0 = b'Y\x1d\xcb"\xd5\xcb\xd6\x1e\x14\x9f\xe1m\xb4\x90\nU)\x7f\x11'
    float_0 = -733.59946
    validation_0 = module_0.Validation(bytes_0, dict_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_either()
    var_2 = validation_0.is_success()
    var_1.ap(float_0)


def test_case_17():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_either()
    var_0.is_fail()
