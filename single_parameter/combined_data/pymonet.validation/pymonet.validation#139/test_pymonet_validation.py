# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    int_0 = 1220
    list_0 = [int_0, int_0]
    bool_0 = True
    list_1 = [bool_0, bool_0, bool_0, bool_0]
    validation_0 = module_0.Validation(list_1, bool_0)
    var_0 = validation_0.__eq__(list_0)
    var_0.bind(var_0)


def test_case_1():
    bytes_0 = b"\xa9:\xdf\xfc\x87\x9f\x82I\xf0\xe9\xac\xb3\xf5\x80"
    str_0 = "c8JBa_mA*5/yB6<aK5"
    bool_0 = True
    set_0 = {str_0, str_0, bool_0}
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.__str__()
    var_0.bind(bytes_0)


def test_case_2():
    bool_0 = False
    str_0 = "\n        :param semigroup: other semigroup to concat\n        :type semigroup: Sum[B]\n        :returns: new Sum with sum of concat semigroups values\n        :rtype: Sum[A]\n        "
    set_0 = {str_0, str_0, str_0, str_0}
    validation_0 = module_0.Validation(set_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_lazy()
    var_2 = validation_0.__eq__(set_0)
    var_3 = var_0.to_lazy()
    var_4 = var_3.to_maybe()
    var_5 = var_1.bind(bool_0)


def test_case_3():
    bool_0 = False
    list_0 = [bool_0]
    validation_0 = module_0.Validation(bool_0, list_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.__str__()
    var_1.to_lazy()


def test_case_4():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_5():
    str_0 = "\n        :param semigroup: other semigroup to concat\n        :type semigroup: Sum[B]\n        :returns: new Sum with sum of concat semigroups values\n        :rtype: Sum[A]\n        "
    set_0 = {str_0, str_0, str_0, str_0}
    validation_0 = module_0.Validation(set_0, str_0)
    var_0 = validation_0.is_fail()
    var_1 = validation_0.to_either()
    var_2 = validation_0.to_lazy()
    var_3 = validation_0.__eq__(set_0)
    var_4 = var_1.to_lazy()
    var_5 = var_4.to_maybe()
    var_1.to_either()


def test_case_6():
    int_0 = 2565
    bool_0 = False
    none_type_0 = None
    validation_0 = module_0.Validation(bool_0, none_type_0)
    validation_0.map(int_0)


def test_case_7():
    bool_0 = False
    str_0 = "rWP'd85*_&Z\x0bjBDd:_"
    validation_0 = module_0.Validation(str_0, str_0)
    validation_0.bind(bool_0)


def test_case_8():
    bool_0 = True
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    validation_0.ap(bool_0)


def test_case_9():
    bytes_0 = b"*\xee\xce\x84p\xaa\xbcFQ\xad\x07P\xec\xbdt\r\t\x8c\x1f!"
    str_0 = "\n        Create not empty maybe.\n\n        :param mapper: value to store in Maybe\n        :type mapper: Any\n        :returns: Maybe[Any]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.__eq__(bytes_0)
    var_1.to_lazy()


def test_case_10():
    bool_0 = False
    list_0 = [bool_0]
    validation_0 = module_0.Validation(bool_0, list_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.to_maybe()
    var_2 = var_1.__str__()
    var_3 = var_1.map(var_1)
    var_4 = var_1.to_lazy()
    var_5 = var_4.to_box()


def test_case_11():
    str_0 = "wa*O(S"
    bool_0 = True
    validation_0 = module_0.Validation(str_0, bool_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_either()
    validation_0.ap(var_0)


def test_case_12():
    bool_0 = False
    list_0 = [bool_0]
    validation_0 = module_0.Validation(bool_0, list_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.__str__()
    bool_1 = True
    var_2 = var_1.__eq__(bool_1)
    var_3 = validation_0.to_try()
    validation_1 = module_0.Validation(var_3, list_0)
    var_1.bind(validation_0)


def test_case_13():
    complex_0 = -929.8 - 3275.68831j
    none_type_0 = None
    validation_0 = module_0.Validation(complex_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)
    var_0.is_success()


def test_case_14():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.is_success()
    var_1 = validation_0.is_success()
    validation_1 = module_0.Validation(var_0, var_0)
    var_2 = var_1.__eq__(list_0)
    var_3 = validation_0.to_maybe()
    var_4 = var_1.__str__()
    var_2.ap(var_1)


def test_case_15():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.to_either()
    var_2 = var_0.to_try()
    var_3 = var_0.to_try()
    list_0.ap(var_0)


def test_case_16():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.__str__()
    bytes_0 = b"\xa9:\xdf\xfc\x87\x9f\x82I\xf0\xe9\xac\xb3\xf5\x80"
    str_0 = "c8JBa_mA*5yB6<aK5"
    validation_1 = module_0.Validation(bytes_0, str_0)
    var_1 = validation_1.__str__()
    var_2 = validation_1.to_maybe()
    set_0 = {str_0}
    var_3 = validation_1.to_lazy()
    validation_2 = module_0.Validation(set_0, set_0)
    var_4 = validation_2.to_maybe()
    var_5 = validation_2.__eq__(validation_2)
    var_6 = validation_2.is_fail()
    validation_2.map(validation_2)


def test_case_17():
    bytes_0 = b"\xa9:\xdf\xfc\x87\x9f\x82I\xf0\xe9\xac\xb3\xf5\x80"
    str_0 = "c8JBa_mA*5yB6<aK5"
    validation_0 = module_0.Validation(bytes_0, str_0)
    var_0 = validation_0.__str__()
    set_0 = {str_0}
    var_1 = validation_0.to_lazy()
    validation_1 = module_0.Validation(set_0, set_0)
    var_2 = validation_1.to_maybe()
    var_3 = validation_1.__eq__(validation_1)
    var_4 = validation_0.__eq__(validation_1)
    var_5 = validation_1.is_fail()
    validation_1.map(validation_1)
