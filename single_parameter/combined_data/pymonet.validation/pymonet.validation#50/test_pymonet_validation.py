# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    str_0 = "_S[(uY#^"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_lazy()
    var_2 = var_1.to_box()
    bool_0 = False
    var_3 = var_1.map(var_2)
    validation_1 = module_0.Validation(bool_0, bool_0)
    var_0.is_success()


def test_case_1():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(none_type_0)
    var_0.bind(none_type_0)


def test_case_2():
    str_0 = "M~o\n4WUXny\r<%wlioq"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_lazy()
    var_2 = validation_0.__str__()
    var_3 = var_1.to_box()


def test_case_3():
    bytes_0 = b"\xbd\xf3"
    str_0 = "\n8'q<\x0c62TI*,q0~"
    validation_0 = module_0.Validation(bytes_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_either()
    validation_1 = module_0.Validation(var_0, bytes_0)


def test_case_4():
    complex_0 = -181.14897 - 401.4954j
    dict_0 = {complex_0: complex_0}
    str_0 = " 3"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    validation_1 = module_0.Validation(dict_0, dict_0)
    var_1 = validation_1.to_box()
    var_2 = validation_1.to_box()
    validation_2 = module_0.Validation(complex_0, complex_0)
    var_3 = var_2.to_try()
    var_4 = validation_1.is_fail()
    str_1 = ""
    validation_3 = module_0.Validation(str_0, str_1)
    var_5 = validation_3.to_box()
    var_6 = validation_3.to_maybe()
    var_5.is_success()


def test_case_5():
    str_0 = "F#2!\x0b1!F];w+~"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_lazy()
    bool_0 = False
    var_2 = validation_0.to_maybe()
    validation_1 = module_0.Validation(bool_0, bool_0)
    validation_1.to_try()


def test_case_6():
    bytes_0 = b"0s\x0c"
    validation_0 = module_0.Validation(bytes_0, bytes_0)


def test_case_7():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.is_fail()


def test_case_8():
    dict_0 = {}
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, dict_0)
    validation_0.map(dict_0)


def test_case_9():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(none_type_0)
    validation_0.bind(validation_0)


def test_case_10():
    bool_0 = False
    str_0 = "_.K(uY#^"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_box()
    var_2 = var_1.to_try()
    bool_0.to_either()


def test_case_11():
    none_type_0 = None
    bytes_0 = b"\xafA\xe6\xdbK\xa7\x15s\xda\x9d\xabT"
    validation_0 = module_0.Validation(none_type_0, bytes_0)
    var_0 = validation_0.to_try()
    var_0.is_fail()


def test_case_12():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0}
    none_type_0 = None
    int_0 = -1944
    validation_0 = module_0.Validation(int_0, tuple_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_either()
    validation_1 = module_0.Validation(dict_0, none_type_0)


def test_case_13():
    bool_0 = True
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.ap(bool_0)


def test_case_14():
    bool_0 = True
    dict_0 = {}
    validation_0 = module_0.Validation(bool_0, dict_0)
    var_0 = validation_0.__str__()
    var_1 = var_0.__eq__(bool_0)
    var_2 = var_1.__str__()
    var_3 = var_2.__str__()
    var_3.is_success()


def test_case_15():
    str_0 = "_S[(uY#^"
    validation_0 = module_0.Validation(str_0, str_0)
    validation_1 = module_0.Validation(validation_0, validation_0)
    var_0 = validation_0.__eq__(validation_1)
    var_1 = validation_1.to_box()
    var_2 = var_1.__str__()
    var_3 = var_1.__eq__(var_0)
    var_2.to_try()
