# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    str_0 = "HEA\n&VO\\\rgD0\x0bAP"
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, str_0)
    var_0 = validation_0.__eq__(bool_0)


def test_case_1():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.__str__()
    var_2 = validation_0.to_either()
    var_3 = validation_0.to_box()
    var_3.map(var_1)


def test_case_2():
    str_0 = "HEA\n&VO\\\rgD0\x0bAP"
    validation_0 = module_0.Validation(str_0, str_0)
    none_type_0 = None
    var_0 = validation_0.to_either()
    var_1 = var_0.__eq__(none_type_0)
    var_2 = validation_0.__str__()
    var_3 = var_0.__str__()
    var_4 = var_0.to_try()


def test_case_3():
    float_0 = -1749.764204
    list_0 = [float_0, float_0, float_0, float_0]
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_lazy()
    list_0.to_either()


def test_case_4():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_5():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.to_either()


def test_case_6():
    bytes_0 = b"\xf2\xcd\xf2\xb6\n\x03\x14N\x81\x19Y"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.to_maybe()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    validation_1 = module_0.Validation(list_0, list_0)
    var_2 = validation_1.__eq__(list_0)
    var_3 = validation_1.__eq__(list_0)
    validation_2 = module_0.Validation(var_3, var_0)
    var_4 = var_0.__eq__(validation_0)
    bool_1 = True
    validation_3 = module_0.Validation(var_0, bool_1)
    validation_3.is_fail()


def test_case_7():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.map(none_type_0)


def test_case_8():
    bytes_0 = b"i\xcb\xbb\x04\xa6\x9c\x8c8\xa0\xd1\xef\x98\xb4\xdc\xfdL<\x91\x9bW"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, bytes_0)
    var_0 = validation_0.to_maybe()
    validation_0.bind(bytes_0)


def test_case_9():
    none_type_0 = None
    float_0 = 2864.72139
    validation_0 = module_0.Validation(float_0, float_0)
    validation_0.ap(none_type_0)


def test_case_10():
    bool_0 = True
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, bool_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.to_lazy()
    var_1.is_fail()


def test_case_11():
    int_0 = 0
    list_0 = [int_0, int_0]
    tuple_0 = (int_0, list_0)
    validation_0 = module_0.Validation(int_0, tuple_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.__str__()
    var_1.is_success()


def test_case_12():
    str_0 = "\x0cMYKbR\x0c\"RM%'O"
    none_type_0 = None
    float_0 = 1042.864998
    validation_0 = module_0.Validation(none_type_0, float_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_try()
    var_1.bind(str_0)


def test_case_13():
    str_0 = "HEA\n&VO\\\rgD0\x0bAP"
    bool_0 = True
    validation_0 = module_0.Validation(str_0, bool_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_0.to_try()


def test_case_14():
    str_0 = "HEA\n&VO\\\rgD0\x0bAP"
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, str_0)
    var_0 = validation_0.__eq__(bool_0)
    var_1 = validation_0.__str__()


def test_case_15():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)
    var_0.to_try()


def test_case_16():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.__eq__(list_0)
    var_1 = validation_0.__str__()
    var_2 = validation_0.to_either()
    var_3 = validation_0.__eq__(validation_0)
    validation_1 = module_0.Validation(validation_0, var_3)
    var_4 = validation_0.__eq__(validation_1)
    var_4.is_fail()
