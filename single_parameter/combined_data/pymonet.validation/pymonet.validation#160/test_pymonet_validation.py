# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_try()
    var_1 = validation_0.__eq__(var_0)
    var_1.to_try()


def test_case_1():
    int_0 = 1453
    str_0 = "nY6M#k_.{{b+\n~/(Jj,"
    validation_0 = module_0.Validation(int_0, str_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_either()
    var_2 = validation_0.__eq__(validation_0)
    var_2.to_maybe()


def test_case_2():
    int_0 = 1453
    str_0 = "nY6M#k_.{{b+\n~/(Jj,"
    validation_0 = module_0.Validation(int_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.is_fail()
    var_1.is_fail()


def test_case_3():
    complex_0 = 26.479 - 1157.8278j
    set_0 = {complex_0, complex_0, complex_0}
    tuple_0 = ()
    validation_0 = module_0.Validation(set_0, tuple_0)
    var_0 = validation_0.to_try()
    int_0 = 1453
    str_0 = "nY6M#k_.{{b+\n~/(Jj,"
    validation_1 = module_0.Validation(int_0, str_0)
    var_1 = validation_1.to_maybe()
    var_2 = validation_0.to_either()
    var_3 = var_1.__str__()
    var_4 = validation_1.__eq__(validation_1)
    validation_0.map(var_2)


def test_case_4():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_5():
    int_0 = -1959
    dict_0 = {int_0: int_0}
    none_type_0 = None
    validation_0 = module_0.Validation(dict_0, none_type_0)
    validation_0.to_try()


def test_case_6():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.bind(none_type_0)


def test_case_7():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.ap(bool_0)


def test_case_8():
    none_type_0 = None
    tuple_0 = ()
    validation_0 = module_0.Validation(none_type_0, tuple_0)
    var_0 = validation_0.to_box()
    var_0.to_box()


def test_case_9():
    str_0 = ""
    none_type_0 = None
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(none_type_0)
    validation_1 = module_0.Validation(str_0, str_0)
    var_1 = validation_1.to_lazy()
    validation_2 = module_0.Validation(var_1, validation_1)
    validation_2.is_success()


def test_case_10():
    complex_0 = 26.479 - 1157.8278j
    tuple_0 = ()
    validation_0 = module_0.Validation(complex_0, tuple_0)
    var_0 = validation_0.to_try()
    int_0 = 1453
    str_0 = "nY6M#k_.{{b+\n~/(Jj,"
    validation_1 = module_0.Validation(int_0, str_0)
    var_1 = validation_0.to_maybe()
    var_2 = validation_1.to_either()
    var_3 = validation_0.__str__()
    var_4 = validation_1.__eq__(validation_1)
    var_4.to_maybe()


def test_case_11():
    complex_0 = 26.479 - 1157.8278j
    set_0 = {complex_0, complex_0, complex_0}
    tuple_0 = ()
    validation_0 = module_0.Validation(set_0, tuple_0)
    var_0 = validation_0.__str__()
    validation_1 = validation_0.to_lazy()
    var_1 = validation_1.to_maybe()
    var_2 = var_1.to_either()
    var_3 = var_1.to_lazy()
    var_4 = validation_1.to_either()
    var_5 = validation_1.__str__()
    var_5.to_maybe()


def test_case_12():
    int_0 = 1453
    str_0 = "nY6M#k_.{{b+\n~/(Jj,"
    validation_0 = module_0.Validation(int_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.__eq__(validation_0)
    var_1.to_maybe()


def test_case_13():
    complex_0 = 26.479 - 1157.8278j
    tuple_0 = ()
    validation_0 = module_0.Validation(complex_0, tuple_0)
    var_0 = validation_0.to_try()
    str_0 = "nY6M#k_.{{b+\n~/(Jj,"
    validation_1 = module_0.Validation(var_0, str_0)
    var_1 = validation_0.to_lazy()
    var_2 = validation_0.__str__()
    var_3 = validation_1.__eq__(validation_0)
    var_0.is_fail()
