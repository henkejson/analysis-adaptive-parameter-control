# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0
import builtins as module_1


def test_case_0():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_maybe()
    validation_1 = module_0.Validation(validation_0, set_0)
    var_2 = validation_1.to_box()
    var_3 = var_2.__str__()
    var_1.ap(var_0)


def test_case_1():
    bytes_0 = b"\xe0\xbc$\xe5m\x16\xaa"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    validation_1 = module_0.Validation(var_0, var_0)
    var_1 = var_0.__str__()
    var_1.to_lazy()


def test_case_2():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_maybe()


def test_case_3():
    str_0 = "=H8"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_maybe()
    var_2 = validation_0.to_try()
    var_3 = var_2.bind(str_0)
    var_4 = var_3.__eq__(str_0)
    var_4.to_try()


def test_case_4():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_5():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.to_either()


def test_case_6():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.is_fail()


def test_case_7():
    bytes_0 = b"ZK?:\xfdt\xf3\x1b\x06\xd5Y\x8dwuB"
    float_0 = 565.480985
    validation_0 = module_0.Validation(float_0, float_0)
    validation_0.map(bytes_0)


def test_case_8():
    list_0 = []
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.bind(list_0)


def test_case_9():
    bytes_0 = b"0y\xb1\xa5X"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.ap(bytes_0)


def test_case_10():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_box()


def test_case_11():
    object_0 = module_1.object()
    none_type_0 = None
    complex_0 = 2174.116 - 1250.201148j
    validation_0 = module_0.Validation(complex_0, complex_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_either()
    var_1.ap(none_type_0)


def test_case_12():
    none_type_0 = None
    int_0 = 856
    tuple_0 = (int_0,)
    validation_0 = module_0.Validation(tuple_0, none_type_0)
    validation_0.to_try()


def test_case_13():
    dict_0 = {}
    bytes_0 = b"X\xceCb\xf1\xa6\xef\xf9"
    validation_0 = module_0.Validation(dict_0, bytes_0)
    var_0 = validation_0.is_fail()
    var_1 = validation_0.__eq__(bytes_0)
    var_1.to_lazy()


def test_case_14():
    str_0 = ">.e0iAy(Ys *"
    dict_0 = {str_0: str_0}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_either()
    validation_0.ap(str_0)


def test_case_15():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_box()
    var_2 = validation_0.__eq__(validation_0)
    var_3 = validation_0.to_maybe()
    var_3.map(var_3)


def test_case_16():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(validation_0)


def test_case_17():
    bytes_0 = b"+\\\xcb\x9d\x1c\xd1\x1a\xb2l\xb4bi"
    int_0 = -2781
    validation_0 = module_0.Validation(int_0, int_0)
    bool_0 = False
    validation_1 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_1.__eq__(validation_0)
    var_0.ap(bytes_0)
