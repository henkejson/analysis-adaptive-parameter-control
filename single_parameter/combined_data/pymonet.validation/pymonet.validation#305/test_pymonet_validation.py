# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bytes_0 = b"{\x82\xd5"
    none_type_0 = None
    validation_0 = module_0.Validation(bytes_0, none_type_0)
    none_type_1 = None
    dict_0 = {}
    var_0 = validation_0.__eq__(none_type_1)
    var_1 = validation_0.to_box()
    none_type_2 = None
    validation_1 = module_0.Validation(none_type_2, none_type_2)
    var_2 = validation_0.__eq__(dict_0)
    var_3 = validation_1.to_lazy()
    validation_0.__str__()


def test_case_1():
    dict_0 = {}
    int_0 = -1230
    validation_0 = module_0.Validation(int_0, dict_0)
    var_0 = validation_0.__str__()
    var_0.to_either()


def test_case_2():
    bytes_0 = b"\xb3\x80\xbaG\xe0n\x8f\xdc\xa6G\xe8\x84\xa2\xd7\x9bj?"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    var_0.to_try()


def test_case_3():
    str_0 = "\rKZIHH\t8e^["
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.to_either()
    var_2 = validation_0.to_maybe()
    var_3 = validation_0.to_lazy()
    var_4 = var_1.bind(str_0)
    var_5 = var_4.bind(str_0)
    var_6 = var_5.bind(str_0)
    var_7 = validation_0.is_fail()
    var_8 = var_6.to_try()
    var_3.is_success()


def test_case_4():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_maybe()
    bool_0 = True
    bool_1 = False
    validation_1 = module_0.Validation(bool_1, bool_1)
    validation_1.map(bool_0)


def test_case_5():
    bytes_0 = b"\x06"
    validation_0 = module_0.Validation(bytes_0, bytes_0)


def test_case_6():
    bytes_0 = b"\x11b\x86\x87\xfd\xbe\xd8Q\xacv>\x8a3\xf7+X\xa4\t\xbd"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_try()


def test_case_7():
    bool_0 = True
    none_type_0 = None
    validation_0 = module_0.Validation(bool_0, none_type_0)
    validation_0.is_fail()


def test_case_8():
    int_0 = -1807
    bytes_0 = b"\xbdm7\x830]o\xe9G\xf4L\x16C\xa3\xba"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_0.map(int_0)


def test_case_9():
    bool_0 = True
    bool_1 = True
    none_type_0 = None
    validation_0 = module_0.Validation(bool_1, none_type_0)
    validation_0.bind(bool_0)


def test_case_10():
    float_0 = -3902.56535
    bytes_0 = b"W\xb3-zUN\x18"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_0.ap(float_0)


def test_case_11():
    bytes_0 = b"\xf1,k"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_1 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_1.to_lazy()
    none_type_0 = None
    var_1 = validation_1.to_lazy()
    validation_1.ap(none_type_0)


def test_case_12():
    list_0 = []
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_either()
    var_1.bind(list_0)


def test_case_13():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_maybe()
    validation_1 = validation_0.to_either()
    var_1 = validation_0.is_fail()
    validation_1.ap(var_1)


def test_case_14():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.__eq__(validation_0)
    var_0.is_fail()


def test_case_15():
    bytes_0 = b"{\x82\xd5"
    none_type_0 = None
    validation_0 = module_0.Validation(bytes_0, none_type_0)
    none_type_1 = None
    var_0 = validation_0.__eq__(none_type_1)
    var_1 = validation_0.__eq__(validation_0)
    validation_1 = module_0.Validation(validation_0, var_0)
    var_2 = validation_1.__eq__(validation_0)
    var_3 = validation_0.to_lazy()
    validation_0.__str__()
