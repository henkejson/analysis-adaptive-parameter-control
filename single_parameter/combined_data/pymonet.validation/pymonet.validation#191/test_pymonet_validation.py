# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0
import builtins as module_1


def test_case_0():
    str_0 = "2l\x0c)\\"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_try()
    var_2 = validation_0.__eq__(var_0)
    var_3 = var_2.__eq__(var_2)
    var_4 = validation_0.to_box()
    var_5 = var_1.__str__()
    var_6 = validation_0.to_maybe()
    var_2.to_lazy()


def test_case_1():
    str_0 = "2Xl\x0c.\\"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.__eq__(validation_0)
    var_1.to_try()


def test_case_2():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)


def test_case_3():
    bytes_0 = b"\xb8@\xe6\xa0\xad\x0b\x03\xa5\xb2[\x1f\xddV\x05V"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_0.to_maybe()


def test_case_4():
    bytes_0 = b"\xd1\x1d\x0b!\x7f\x91\xe5"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.is_fail()


def test_case_5():
    none_type_0 = None
    int_0 = 2880
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.map(none_type_0)


def test_case_6():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.is_success()
    set_0 = {var_1}
    validation_0.bind(set_0)


def test_case_7():
    bool_0 = True
    bool_1 = False
    none_type_0 = None
    validation_0 = module_0.Validation(bool_1, none_type_0)
    validation_0.ap(bool_0)


def test_case_8():
    complex_0 = 2579.32202 - 2255.22j
    bool_0 = False
    set_0 = {bool_0}
    bool_1 = True
    bool_2 = False
    tuple_0 = (bool_0, set_0, bool_1, bool_2)
    validation_0 = module_0.Validation(complex_0, tuple_0)
    var_0 = validation_0.to_lazy()


def test_case_9():
    float_0 = -439.52
    validation_0 = module_0.Validation(float_0, float_0)
    validation_0.to_try()


def test_case_10():
    bytes_0 = b"\xcd\x0c\xfb\xd3"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)
    var_0.to_try()


def test_case_11():
    str_0 = "2Xl\x0c.\\"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    var_0.to_try()


def test_case_12():
    str_0 = "2X\x0c.\\"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_box()
    module_1.object(*var_0)


def test_case_13():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.is_success()
    var_1.to_lazy()


def test_case_14():
    str_0 = ""
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_maybe()
    var_2 = module_0.Validation(str_0, var_1)
    var_3 = var_1.to_try()
    var_4 = var_3.__eq__(var_0)
    var_4.to_either()


def test_case_15():
    int_0 = 1595
    list_0 = [int_0, int_0, int_0]
    str_0 = "2Xl\x0c.\\"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.to_either()
    validation_1 = module_0.Validation(var_1, list_0)
    var_2 = validation_1.__eq__(validation_0)
    validation_1.bind(str_0)
