# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    str_0 = "\n        Transform Validation to Maybe.\n\n        :returns: Maybe with Validation Value when Validation has no errors, in other case empty Maybe\n        :rtype: Maybe[A | None]\n        "
    str_1 = "'"
    validation_0 = module_0.Validation(str_1, str_1)
    var_0 = validation_0.__eq__(str_0)
    var_0.to_lazy()


def test_case_1():
    bytes_0 = b"\x05s\xade"
    float_0 = 96.83359
    validation_0 = module_0.Validation(bytes_0, float_0)
    set_0 = set()
    validation_1 = module_0.Validation(set_0, set_0)
    var_0 = validation_1.__str__()
    var_0.bind(validation_1)


def test_case_2():
    none_type_0 = None
    str_0 = "TM1TU5Ugsf;+Wq[?"
    validation_0 = module_0.Validation(none_type_0, str_0)
    var_0 = validation_0.__str__()
    var_0.is_fail()


def test_case_3():
    str_0 = "WOW@Is"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_maybe()
    var_2 = validation_0.is_fail()
    var_3 = validation_0.is_success()
    var_3.is_fail()


def test_case_4():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.__eq__(list_0)
    var_1.to_lazy()


def test_case_5():
    complex_0 = 2963.17484 + 867.7648114265413j
    validation_0 = module_0.Validation(complex_0, complex_0)


def test_case_6():
    float_0 = 2340.90742
    validation_0 = module_0.Validation(float_0, float_0)
    validation_0.is_fail()


def test_case_7():
    list_0 = []
    bytes_0 = b"8:-_\xc1\xd7@"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    validation_0 = module_0.Validation(set_0, set_0)
    validation_0.map(list_0)


def test_case_8():
    str_0 = "Min[value={}]"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_lazy()
    validation_0.bind(str_0)


def test_case_9():
    complex_0 = 2963.17484 + 892.629j
    validation_0 = module_0.Validation(complex_0, complex_0)
    bool_0 = False
    validation_1 = module_0.Validation(bool_0, bool_0)
    validation_1.ap(validation_0)


def test_case_10():
    bytes_0 = b"\x9e\x8ca\xe3\xb2\xf7\xb9\x80"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    list_0 = []
    validation_0 = module_0.Validation(dict_0, list_0)
    var_0 = validation_0.to_box()
    var_0.ap(bytes_0)


def test_case_11():
    bytes_0 = b"\x05s\xade"
    float_0 = 96.83359
    validation_0 = module_0.Validation(bytes_0, float_0)
    validation_1 = validation_0.__eq__(bytes_0)
    var_0 = validation_1.__str__()
    var_1 = validation_0.to_lazy()
    var_2 = var_1.to_try()
    var_0.ap(float_0)


def test_case_12():
    bytes_0 = b"\x1f;\xda\xdf\xfc\xc8\x1b\x10\x0fa\xb6*\x9e\x83\xba\xaa\x8c\xc1\x81T"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_try()
    var_0.is_success()


def test_case_13():
    str_0 = "'"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.__str__()
    var_0.to_box()


def test_case_14():
    str_0 = ""
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.__str__()
    var_2 = validation_0.to_either()
    var_0.to_either()


def test_case_15():
    str_0 = "\n        Transform Validation to Maybe.\n\n        :returns: Maybe with Validation Value when Validation has no errors, in other case empty Maybe\n        :rtype: Maybe[A | None]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(validation_0)
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    var_1 = validation_1.__eq__(validation_0)
    validation_1.__str__()
