# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_1 = validation_0.__eq__(validation_0)
    validation_1.to_lazy()


def test_case_1():
    float_0 = 3500.0227
    dict_0 = {float_0: float_0}
    none_type_0 = None
    validation_0 = module_0.Validation(dict_0, none_type_0)
    var_0 = validation_0.__eq__(float_0)
    var_0.to_either()


def test_case_2():
    none_type_0 = None
    bytes_0 = b"\xb3^\xcc\xfe\x80+\xa4J9to\xb6\xe4"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    var_0.map(none_type_0)


def test_case_3():
    bytes_0 = b"\xf2/\\n"
    tuple_0 = (bytes_0,)
    validation_0 = module_0.Validation(tuple_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_box()
    var_2 = var_1.to_either()
    validation_1 = module_0.Validation(var_2, var_1)


def test_case_4():
    bytes_0 = b'\x8cJ0\x0e\xcd\x1d\x01\x8c7\x95\xca\x89\xdb"\x08\x11\x81\xb2\x8e'
    none_type_0 = None
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_1 = module_0.Validation(validation_0, bytes_0)
    var_0 = validation_1.to_try()
    var_1 = validation_0.to_maybe()
    var_2 = validation_0.to_either()
    var_3 = var_2.to_lazy()
    none_type_0.to_maybe()


def test_case_5():
    str_0 = "Az$v-n BY=wD$Q"
    validation_0 = module_0.Validation(str_0, str_0)


def test_case_6():
    float_0 = -838.27
    bytes_0 = b"Y\xd0 \x0cT\x15\xff|g\xb7|\xc9\xeb\x9b\x9c6\x1c\x98\xa0c"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.is_fail()
    var_0.map(float_0)


def test_case_7():
    bytes_0 = b"\xe2]\x85<\xa7"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    bytes_1 = b""
    validation_1 = module_0.Validation(bytes_0, bytes_0)
    validation_0.map(bytes_1)


def test_case_8():
    str_0 = "\n        Take function and applied this function on current box value and returns mapped value.\n\n        :param mapper: mapper function\n        :type mapper: Function(A) -> B\n        :returns: new box with mapped value\n        :rtype: B\n        "
    list_0 = [str_0]
    none_type_0 = None
    validation_0 = module_0.Validation(list_0, none_type_0)
    validation_0.bind(validation_0)


def test_case_9():
    str_0 = ""
    str_1 = "#MZN8\\3nn5l"
    validation_0 = module_0.Validation(str_1, str_1)
    validation_0.ap(str_0)


def test_case_10():
    bytes_0 = b'\x8cJ0\x0e\xcd\x1d\x01\x8c7\x95\xca\x89\xdb"\x08\x11\x81\xb2\x8e'
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_1 = module_0.Validation(validation_0, bytes_0)
    var_0 = validation_1.to_try()
    var_1 = validation_0.to_box()
    var_2 = validation_1.to_either()
    int_0 = 2219
    int_0.to_lazy()


def test_case_11():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    str_0 = "t|-apwh'KJI:9ZLo\tV>"
    validation_1 = module_0.Validation(str_0, str_0)
    var_0 = validation_1.to_lazy()
    var_1 = var_0.to_either()
    var_2 = var_1.__str__()
    var_2.is_success()


def test_case_12():
    float_0 = 391.11582
    dict_0 = {float_0: float_0, float_0: float_0}
    complex_0 = -1290.764 + 3319.216999j
    validation_0 = module_0.Validation(dict_0, dict_0)
    none_type_0 = None
    bytes_0 = b""
    validation_1 = module_0.Validation(none_type_0, bytes_0)
    validation_2 = module_0.Validation(dict_0, none_type_0)
    var_0 = validation_2.__eq__(validation_0)
    validation_3 = module_0.Validation(complex_0, complex_0)
    validation_3.to_try()


def test_case_13():
    bytes_0 = b'\x8cJ0\x0e\xcd\x1d\x01\x8c7\x95\xca\x89\xdb"\x08\x11\x81\xb2\x8e'
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    none_type_0 = None
    bytes_1 = b""
    validation_1 = module_0.Validation(bytes_0, bytes_0)
    validation_2 = module_0.Validation(bytes_0, bytes_1)
    var_0 = validation_2.__eq__(bytes_0)
    bytes_2 = b""
    validation_3 = module_0.Validation(var_0, var_0)
    var_1 = validation_2.__str__()
    validation_4 = module_0.Validation(validation_3, validation_1)
    var_2 = validation_2.__eq__(none_type_0)
    validation_5 = module_0.Validation(var_0, bytes_2)
    var_3 = validation_0.to_try()
    var_4 = validation_5.to_either()
    var_5 = var_4.to_lazy()
    validation_4.to_maybe()


def test_case_14():
    bytes_0 = b'\x8cJ0\x0e\xcd\x1d\x01\x8c7\x95\xca\x89\xdb"\x08\x11\x81\xb2\x8e'
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.to_either()
    none_type_0 = None
    bytes_1 = b""
    validation_1 = module_0.Validation(bytes_0, bytes_0)
    validation_2 = module_0.Validation(var_0, bytes_1)
    var_2 = validation_1.__str__()
    var_3 = validation_2.__eq__(var_0)
    bytes_2 = b""
    validation_3 = module_0.Validation(var_0, var_0)
    var_4 = validation_2.to_maybe()
    var_5 = validation_2.__str__()
    validation_4 = module_0.Validation(validation_3, validation_1)
    var_6 = validation_2.__eq__(none_type_0)
    validation_5 = module_0.Validation(var_3, bytes_2)
    var_7 = validation_0.to_try()
    var_8 = validation_2.is_fail()
    var_5.is_fail()
