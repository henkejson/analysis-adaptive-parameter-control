# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(none_type_0)


def test_case_1():
    str_0 = "1LEg$+uVMuD).YG("
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    validation_1 = module_0.Validation(var_0, validation_0)
    var_1 = validation_1.to_lazy()
    var_1.is_success()


def test_case_2():
    bool_0 = True
    str_0 = ""
    set_0 = {str_0, str_0}
    validation_0 = module_0.Validation(set_0, str_0)
    var_0 = validation_0.to_either()
    var_0.map(bool_0)


def test_case_3():
    none_type_0 = None
    str_0 = 'Z!) :p9Sf=O"'
    int_0 = -803
    bytes_0 = b"\xd1\xd9\xb2Oo]\x1a \xac\xdc\x11B\xa9m\xd7\xf5b\x87W"
    tuple_0 = (str_0, int_0, bytes_0)
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.__eq__(none_type_0)
    validation_1 = module_0.Validation(int_0, bytes_0)
    var_1 = validation_1.to_lazy()
    var_2 = validation_1.to_either()
    var_3 = validation_1.to_maybe()
    var_4 = var_2.map(var_0)
    validation_1.map(var_2)


def test_case_4():
    bytes_0 = b"a\xa8\xec[\x08\xaeZ\x98\xd9\xb2\xaf\xe3\xc6"
    float_0 = 56.4449
    int_0 = -803
    validation_0 = module_0.Validation(int_0, bytes_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.to_maybe()
    validation_0.map(float_0)


def test_case_5():
    int_0 = 1436
    validation_0 = module_0.Validation(int_0, int_0)


def test_case_6():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.is_success()


def test_case_7():
    int_0 = 1436
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.is_fail()


def test_case_8():
    list_0 = []
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.map(list_0)


def test_case_9():
    none_type_0 = None
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    validation_0.bind(none_type_0)


def test_case_10():
    bytes_0 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_0.ap(bytes_0)


def test_case_11():
    int_0 = -741
    validation_0 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.to_box()


def test_case_12():
    bytes_0 = b" \xb8\xadG'3\xfe\xf4|^\x8d\x15\xc8\xec"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_lazy()


def test_case_13():
    none_type_0 = None
    float_0 = -1797.0
    validation_0 = module_0.Validation(none_type_0, float_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_try()
    str_0 = "gAYI<5\tN1?E?Mf.8{"
    none_type_1 = None
    validation_1 = module_0.Validation(str_0, none_type_1)
    validation_2 = module_0.Validation(str_0, str_0)
    var_2 = validation_2.is_success()
    var_3 = validation_2.is_fail()
    var_0.to_lazy()


def test_case_14():
    complex_0 = 1744.97 - 1806.6j
    none_type_0 = None
    validation_0 = module_0.Validation(complex_0, none_type_0)
    validation_0.to_try()


def test_case_15():
    str_0 = ""
    set_0 = {str_0, str_0}
    validation_0 = module_0.Validation(set_0, str_0)
    var_0 = validation_0.__str__()
    validation_1 = module_0.Validation(set_0, set_0)
    var_1 = validation_0.to_lazy()
    var_1.is_success()


def test_case_16():
    str_0 = 'Z!) :p9Sf=O"'
    int_0 = -803
    bytes_0 = b"\xd1\xd9\xb2Oo]\x1a \xac\xdc\x11B\xa9m\xd7\xf5b\x87W"
    tuple_0 = (str_0, int_0, bytes_0)
    none_type_0 = None
    validation_0 = module_0.Validation(tuple_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)
    var_0.to_lazy()


def test_case_17():
    bytes_0 = b"a\xa8\xec[\x08\xaeZ\x98\xd9\xb2\xaf\xe3\xc6"
    none_type_0 = None
    str_0 = 'Z!) :p9Sf=O"'
    int_0 = -803
    bytes_1 = b"\xd1\xd9\xb2Oo]\x1a \xac\xdc\x11B\xa9m\xd7\xf5b\x87W"
    tuple_0 = (str_0, int_0, bytes_1)
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.__eq__(none_type_0)
    validation_1 = module_0.Validation(int_0, bytes_1)
    var_1 = validation_1.to_lazy()
    bool_0 = True
    dict_0 = {bool_0: tuple_0}
    var_2 = var_1.ap(dict_0)
    var_3 = validation_1.to_maybe()
    var_4 = validation_0.__eq__(validation_1)
    var_0.map(bytes_0)


def test_case_18():
    bool_0 = False
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_box()
    var_2 = var_1.__str__()
    var_2.bind(bool_0)
