# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    str_0 = "\n        Take function, store it and call with Task value during calling fork function.\n        Return new Task with result of called.\n\n        :param fn: mapper function\n        :type fn: Function(value) -> B\n        :returns: new Task with mapped resolve attribute\n        :rtype: Task[Function(resolve, reject -> A | B]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    validation_1 = module_0.Validation(str_0, var_0)
    var_1 = validation_0.to_either()
    var_1.is_fail()


def test_case_1():
    tuple_0 = ()
    set_0 = {tuple_0}
    validation_0 = module_0.Validation(set_0, tuple_0)
    var_0 = validation_0.to_maybe()
    var_0.map(set_0)


def test_case_2():
    str_0 = "i3GpRe_\x0cPLGu6"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    validation_0.bind(var_0)


def test_case_3():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)


def test_case_4():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_try()


def test_case_5():
    int_0 = 385
    bytes_0 = b"\xd3\xcd{G\x94\xb2n"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.is_fail()
    var_1 = var_0.__eq__(int_0)


def test_case_6():
    bytes_0 = b"\xa4\xc8\x12z\x17\x99\xc5~\x93\xfc\x97\x9cs\\D\xbc"
    tuple_0 = (bytes_0,)
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    validation_0.map(tuple_0)


def test_case_7():
    bytes_0 = b"\xecQ\xfc\x9e\xbe\xc2\x1co\xd1\xd0\x1f&"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, bytes_0)
    var_0 = validation_0.to_try()
    validation_1 = module_0.Validation(none_type_0, bytes_0)
    validation_1.bind(bytes_0)


def test_case_8():
    str_0 = "}TB"
    str_1 = "!j$f\x0cCmU\rYF0.MwYi"
    list_0 = [str_1, str_1, str_1]
    validation_0 = module_0.Validation(list_0, list_0)
    validation_0.ap(str_0)


def test_case_9():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_0.is_fail()


def test_case_10():
    str_0 = 's>T-C1a|1XF\rsdZ|lSD"'
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.map(str_0)
    var_1.to_maybe()


def test_case_11():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(none_type_0)
    var_0.to_maybe()


def test_case_12():
    bytes_0 = b"\xecQ\xfc\x9e\xbe\xc2\x1co\xd1\xd0\x1f&"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, bytes_0)
    var_0 = validation_0.to_try()
    validation_1 = module_0.Validation(none_type_0, bytes_0)
    var_1 = validation_0.to_box()
    var_2 = validation_1.is_success()
    var_0.to_either()


def test_case_13():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_0.to_try()


def test_case_14():
    none_type_0 = None
    tuple_0 = ()
    validation_0 = module_0.Validation(none_type_0, tuple_0)
    var_0 = validation_0.to_either()
    var_0.bind(none_type_0)


def test_case_15():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.__str__()
    var_0.to_either()


def test_case_16():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_1 = module_0.Validation(none_type_0, validation_0)
    var_0 = validation_0.__eq__(validation_1)
    validation_1.to_try()
