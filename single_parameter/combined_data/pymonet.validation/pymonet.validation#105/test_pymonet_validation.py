# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    float_0 = 5093.749133
    list_0 = [float_0, float_0, float_0, float_0]
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(list_0)
    var_0.to_try()


def test_case_1():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.__str__()
    int_0 = 169
    bool_0 = False
    none_type_0 = None
    validation_1 = module_0.Validation(bool_0, none_type_0)
    validation_1.ap(int_0)


def test_case_2():
    none_type_0 = None
    bytes_0 = b"c\x1a\x0f\xbe\x04\xa2\x02\x082\x86\xac\xbf3\xc3K\xdf"
    validation_0 = module_0.Validation(none_type_0, bytes_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_box()
    var_2 = validation_0.__eq__(none_type_0)
    var_3 = validation_0.is_fail()
    var_4 = validation_0.to_maybe()
    var_3.is_success()


def test_case_3():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    validation_1 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_1.__eq__(validation_0)
    var_1 = validation_0.is_fail()
    var_2 = validation_1.to_either()
    var_3 = validation_1.to_box()
    var_2.map(var_0)


def test_case_4():
    none_type_0 = None
    bytes_0 = b"c\x1a\x0f\xbe\x04\xa2\x02\x082\x86\xac\xbf3\xc3K\xdf"
    validation_0 = module_0.Validation(none_type_0, bytes_0)
    var_0 = validation_0.to_maybe()
    bool_0 = False
    validation_1 = module_0.Validation(bool_0, bool_0)


def test_case_5():
    str_0 = "on49=M<)ok\x0cb"
    validation_0 = module_0.Validation(str_0, str_0)


def test_case_6():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    validation_1.map(none_type_0)


def test_case_7():
    bytes_0 = b"\xf6r\xd5%WX\x11\xda"
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    validation_0 = module_0.Validation(list_0, list_0)
    validation_0.bind(bytes_0)


def test_case_8():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    validation_0.ap(set_0)


def test_case_9():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_box()


def test_case_10():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_lazy()
    var_2 = validation_0.to_box()
    validation_0.map(var_0)


def test_case_11():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_box()
    var_2 = var_1.to_either()
    validation_1 = module_0.Validation(bool_0, bool_0)
    var_3 = validation_1.__eq__(validation_1)
    var_3.to_box()


def test_case_12():
    int_0 = 1
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.to_try()


def test_case_13():
    none_type_0 = None
    bytes_0 = b"c\x1a\x0f\xbe\x04\xa2\x02\x082\x86\xac\xbf3\xc3K\xdf"
    validation_0 = module_0.Validation(none_type_0, bytes_0)
    none_type_1 = None
    complex_0 = 2258 - 3373.9317j
    var_0 = validation_0.to_try()
    var_1 = var_0.__eq__(complex_0)
    var_2 = validation_0.to_either()
    var_3 = var_2.__eq__(none_type_1)
    var_0.to_either()


def test_case_14():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    validation_1 = validation_0.to_maybe()
    var_0 = validation_1.__eq__(validation_0)
    var_1 = validation_1.to_lazy()
    var_2 = validation_1.to_either()
    var_3 = validation_1.to_box()
    var_0.ap(dict_0)


def test_case_15():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    validation_1 = module_0.Validation(dict_0, validation_0)
    var_0 = validation_0.__eq__(validation_1)
    var_0.is_fail()
