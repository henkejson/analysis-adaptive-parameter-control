# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(none_type_0)
    var_1 = var_0.__str__()
    validation_0.to_try()


def test_case_1():
    bytes_0 = b"\xebh\xe8\xf9\xab\x98\xd0\x9f0H\\\x0e\x94\xef"
    str_0 = "\n        Take filterer function, when monad is successfully call filterer with monad value.\n        When filterer returns True method returns copy of monad, othercase\n        not successfully Try with previous value.\n\n        :params filterer: function to apply on monad value\n        :type filterer: Function(A) -> Boolean\n        :returns: Try with previous value\n        :rtype: Try[A]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.bind(bytes_0)
    bytes_1 = b"nWQ\xa9?n*\xcbt\xe1\xd5"
    tuple_0 = ()
    validation_1 = module_0.Validation(tuple_0, bytes_1)
    validation_2 = module_0.Validation(var_0, tuple_0)
    var_2 = var_0.__eq__(var_0)
    var_3 = var_1.to_box()
    var_4 = validation_2.__eq__(var_0)
    var_5 = validation_1.__str__()
    var_6 = var_0.bind(bytes_0)


def test_case_2():
    bytes_0 = b"U\x00 \xb2\xdf\x18\x83\x8f\x84[\t\xce\x18\x0fd\xac"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()


def test_case_3():
    str_0 = "\n        Take filterer function, when monad is successfully call filterer with monad value.\n        When filterer returns True method returns copy of monad, othercase\n        not successfully Try with previous value.\n\n        :params filterer: function to apply on monad value\n        :type filterer: Function(A) -> Boolean\n        :returns: Try with previous value\n        :rtype: Try[A]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_either()
    var_2 = var_1.bind(var_1)
    bytes_0 = b"nWQ\xa9?n*\xcbt\xe1\xd5"
    tuple_0 = ()
    var_3 = var_1.to_box()
    var_4 = var_1.to_lazy()
    validation_1 = module_0.Validation(tuple_0, bytes_0)
    validation_2 = module_0.Validation(var_1, tuple_0)
    var_5 = var_2.to_box()
    var_6 = validation_2.to_maybe()
    var_7 = var_6.to_either()
    var_8 = validation_2.to_try()
    var_9 = validation_2.__str__()
    var_10 = var_1.map(str_0)


def test_case_4():
    bytes_0 = b"\xebh\xe8\xf9\xab\x98\xd0\x9f0H\\\x0e\x94\xef"
    str_0 = "\n        Take filterer function, when monad is successfully call filterer with monad value.\n        When filterer returns True method returns copy of monad, othercase\n        not successfully Try with previous value.\n\n        :params filterer: function to apply on monad value\n        :type filterer: Function(A) -> Boolean\n        :returns: Try with previous value\n        :rtype: Try[A]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_either()
    var_2 = var_1.bind(bytes_0)
    bytes_1 = b"nWQ\xa9?n*\xcbt\xe1\xd5"
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0}
    list_0 = [set_0, set_0, tuple_0]
    validation_1 = module_0.Validation(list_0, set_0)
    var_3 = validation_1.is_success()
    var_4 = var_3.__eq__(bytes_1)


def test_case_5():
    str_0 = 'tFbf\\>TK"8IRBL}'
    validation_0 = module_0.Validation(str_0, str_0)


def test_case_6():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.is_fail()


def test_case_7():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.map(validation_0)


def test_case_8():
    bool_0 = True
    tuple_0 = (bool_0,)
    float_0 = 3561.0
    validation_0 = module_0.Validation(float_0, float_0)
    validation_0.bind(tuple_0)


def test_case_9():
    bytes_0 = b"\xebh\xe8\xf9\xab\x98\xd0\x9f0H\\\x0e\x94\xef"
    str_0 = "\n        Take filterer function, when monad is successfully call filterer with monad value.\n        When filterer returns True method returns copy of monad, othercase\n        not successfully Try with previous value.\n\n        :params filterer: function to apply on monad value\n        :type filterer: Function(A) -> Boolean\n        :returns: Try with previous value\n        :rtype: Try[A]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_either()
    var_2 = var_1.bind(bytes_0)
    tuple_0 = ()
    list_0 = [var_2, var_2, tuple_0]
    validation_1 = module_0.Validation(list_0, var_1)
    validation_2 = module_0.Validation(bytes_0, validation_1)
    var_3 = validation_1.__eq__(tuple_0)
    var_4 = var_2.to_box()
    var_5 = var_1.to_box()
    validation_2.ap(var_5)


def test_case_10():
    bytes_0 = b"\xebh\xe8\xf9\xab\x98\xd0\x9f0H\\\xf8\x94\xef"
    str_0 = "\n        Take filterer function, when monad is successfully call filterer with monad value.\n        When filterer returns True method returns copy of monad, othercase\n        not successfully Try with previous value.\n\n        :params filterer: function to apply on monad value\n        :type filterer: Function(A) -> Boolean\n        :returns: Try with previous value\n        :rtype: Try[A]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.bind(bytes_0)
    bytes_1 = b"nWQ\xa9?n*\xcbt\xe1\xd5"
    tuple_0 = ()
    validation_1 = module_0.Validation(tuple_0, bytes_1)
    validation_2 = module_0.Validation(var_0, tuple_0)
    var_2 = var_0.__eq__(var_0)
    var_3 = var_1.to_box()
    var_4 = validation_1.to_box()
    var_5 = var_3.to_lazy()
    var_6 = var_5.map(var_3)


def test_case_11():
    float_0 = 2038.98079
    validation_0 = module_0.Validation(float_0, float_0)
    var_0 = validation_0.to_lazy()


def test_case_12():
    bool_0 = True
    none_type_0 = None
    validation_0 = module_0.Validation(bool_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_box()
    var_2 = var_1.to_lazy()


def test_case_13():
    bytes_0 = b"\xebh\xe8\xf9\xab\x98\xd0\x9f0H\\\x0e\x94\xef"
    str_0 = "\n        Take filterer function, when monad is successfully call filterer with monad value.\n        When filterer returns True method returns copy of monad, othercase\n        not successfully Try with previous value.\n\n        :params filterer: function to apply on monad value\n        :type filterer: Function(A) -> Boolean\n        :returns: Try with previous value\n        :rtype: Try[A]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_either()
    var_2 = var_1.bind(bytes_0)
    bytes_1 = b"nWQ\xa9?n*\xcbt\xe1\xd5"
    tuple_0 = ()
    validation_1 = module_0.Validation(tuple_0, bytes_1)
    validation_2 = module_0.Validation(var_1, tuple_0)
    var_3 = validation_0.__eq__(validation_2)
    var_4 = var_2.to_box()
    var_3.to_box()


def test_case_14():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, tuple_1)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_lazy()
    var_0.ap(validation_0)


def test_case_15():
    bytes_0 = b"\xebh\xe8\xf9\xab\x98\xd0\x9f0H\\\x0e\x94\xef"
    str_0 = "\n        Take filterer function, when monad is successfully call filterer with monad value.\n        When filterer returns True method returns copy of monad, othercase\n        not successfully Try with previous value.\n\n        :params filterer: function to apply on monad value\n        :type filterer: Function(A) -> Boolean\n        :returns: Try with previous value\n        :rtype: Try[A]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.bind(bytes_0)
    tuple_0 = ()
    validation_1 = module_0.Validation(var_0, tuple_0)
    var_2 = validation_1.__eq__(str_0)
    var_3 = var_1.to_maybe()
    var_4 = var_3.to_box()
    var_5 = var_0.__eq__(bytes_0)
    var_6 = validation_1.__str__()
    var_6.bind(var_1)


def test_case_16():
    bytes_0 = b"\xebh\xe8\xf9\xab\x98\xd0\x9f0H\\\x0e\x94\xef"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(bytes_0)
    str_0 = ""
    validation_1 = module_0.Validation(str_0, str_0)
    var_1 = validation_1.__eq__(str_0)
    var_2 = validation_1.to_either()
    validation_1.ap(bytes_0)
