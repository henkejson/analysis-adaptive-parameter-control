# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bool_0 = False
    int_0 = 2054
    validation_0 = module_0.Validation(int_0, bool_0)
    var_0 = validation_0.__eq__(bool_0)
    var_0.ap(bool_0)


def test_case_1():
    none_type_0 = None
    bool_0 = False
    tuple_0 = (bool_0,)
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.__str__()
    var_1 = var_0.__eq__(var_0)
    var_1.map(none_type_0)


def test_case_2():
    str_0 = "\x0c]\x0c3LNoB.e"
    bool_0 = False
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    list_0 = []
    validation_1 = module_0.Validation(list_0, list_0)
    none_type_0 = None
    validation_2 = module_0.Validation(validation_1, none_type_0)
    validation_2.bind(bool_0)


def test_case_3():
    bytes_0 = b"[\r\xa1\x18M,\x9f^q\xd49"
    int_0 = -4547
    dict_0 = {bytes_0: int_0}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_lazy()


def test_case_4():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_5():
    bool_0 = False
    none_type_0 = None
    validation_0 = module_0.Validation(bool_0, none_type_0)
    validation_0.__str__()


def test_case_6():
    str_0 = "H,.*NY~|}Wq'rXde95]\x0b"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.is_fail()
    validation_0.bind(validation_0)


def test_case_7():
    bytes_0 = b"\x0e\xa5\xf4\xad-\xa5\xab\x93 \r\x8c\x86]\x1f\x9b"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.map(bytes_0)


def test_case_8():
    none_type_0 = None
    int_0 = 1
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    none_type_1 = None
    validation_0 = module_0.Validation(dict_0, none_type_1)
    validation_0.ap(none_type_0)


def test_case_9():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.__str__()


def test_case_10():
    bytes_0 = b"\xc2\xd41[\x9c<\xf0\x98t"
    set_0 = {bytes_0, bytes_0}
    validation_0 = module_0.Validation(set_0, bytes_0)
    var_0 = validation_0.to_lazy()
    var_0.is_success()


def test_case_11():
    int_0 = -277
    list_0 = [int_0]
    bool_0 = False
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, list_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_try()
    validation_1 = module_0.Validation(bool_0, none_type_0)
    bytes_0 = b"\xb1_\xef,lgx,i\xf7z\xa5\xc0\x00\xda\x16^s-"
    list_1 = [bytes_0, none_type_0]
    tuple_0 = (validation_1, bytes_0, list_1)
    complex_0 = -3641.57 + 1787.4486j
    tuple_1 = (tuple_0, complex_0, validation_1)
    str_0 = "P-f(\rI.Q kw0Yj"
    str_1 = "\n    One is a Monoid that will combine 2 values of any type using logical disjunction OR on their coerced Boolean values.\n    "
    validation_2 = module_0.Validation(str_1, str_1)
    var_2 = validation_2.__eq__(str_0)
    var_2.ap(tuple_1)


def test_case_12():
    int_0 = 0
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.to_try()


def test_case_13():
    bytes_0 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    tuple_0 = ()
    validation_1 = module_0.Validation(tuple_0, tuple_0)
    none_type_0 = None
    validation_2 = module_0.Validation(none_type_0, bytes_0)
    var_0 = validation_1.__eq__(validation_0)
    var_0.to_box()


def test_case_14():
    int_0 = -19
    str_0 = "\n        Create empty maybe.\n\n        :returns: Maybe[None]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_0.map(int_0)


def test_case_15():
    bytes_0 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_0.is_success()


def test_case_16():
    bytes_0 = b""
    none_type_0 = None
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.__eq__(none_type_0)
    var_1.is_fail()


def test_case_17():
    int_0 = 74
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.to_lazy()
    var_2 = var_1.map(int_0)
    list_0 = []
    validation_1 = module_0.Validation(list_0, list_0)
    var_3 = validation_1.to_box()
    var_4 = validation_1.__str__()
    var_5 = var_4.__eq__(var_3)
    var_3.ap(var_3)
