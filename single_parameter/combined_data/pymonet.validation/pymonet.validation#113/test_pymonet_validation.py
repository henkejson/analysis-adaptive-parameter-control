# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0
import builtins as module_1


def test_case_0():
    bool_0 = True
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(bool_0)
    validation_0.is_success()


def test_case_1():
    bool_0 = False
    set_0 = {bool_0}
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.__str__()
    validation_0.bind(bool_0)


def test_case_2():
    str_0 = "TG_;"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()


def test_case_3():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_box()
    var_2 = validation_0.to_either()
    var_3 = validation_0.to_maybe()
    var_4 = validation_0.to_box()
    var_5 = var_4.to_maybe()
    var_4.is_success()


def test_case_4():
    str_0 = "SG\x0c;"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.__eq__(validation_0)


def test_case_5():
    str_0 = "TG_;"
    validation_0 = module_0.Validation(str_0, str_0)


def test_case_6():
    object_0 = module_1.object()
    none_type_0 = None
    validation_0 = module_0.Validation(object_0, none_type_0)
    validation_0.is_fail()


def test_case_7():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.map(bool_0)


def test_case_8():
    object_0 = module_1.object()
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.bind(dict_0)


def test_case_9():
    float_0 = 1357.3692
    validation_0 = module_0.Validation(float_0, float_0)
    validation_0.ap(float_0)


def test_case_10():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_box()
    var_2 = var_0.__eq__(list_0)


def test_case_11():
    str_0 = "TG_;"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.__eq__(validation_0)


def test_case_12():
    bool_0 = False
    set_0 = {bool_0}
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.__eq__(validation_0)
    var_2 = validation_0.to_either()
    var_3 = var_0.to_try()
    validation_1 = module_0.Validation(var_0, var_2)
    validation_2 = module_0.Validation(var_2, var_1)
    var_4 = validation_1.__eq__(validation_0)
    validation_3 = module_0.Validation(bool_0, var_3)
    bytes_0 = b"X\xe9\xda1\xba\x1c\xfa)[\xa3\xf9"
    validation_4 = module_0.Validation(bytes_0, var_1)
    var_3.to_maybe()


def test_case_13():
    complex_0 = 642.461 - 2396.3072j
    validation_0 = module_0.Validation(complex_0, complex_0)
    validation_0.to_try()


def test_case_14():
    bool_0 = False
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.__str__()
    var_2 = validation_0.is_success()
    var_3 = validation_0.__eq__(validation_0)
    var_4 = validation_0.__str__()
    validation_0.bind(bool_0)
