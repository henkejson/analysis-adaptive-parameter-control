# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0
import builtins as module_1


def test_case_0():
    bool_0 = False
    bytes_0 = b"\xddC\xf5\xe4o\x1a\x95\xcf~\x80\xe7\xc3[\xec%\xf5\x87\xaa\x17u"
    validation_0 = module_0.Validation(bytes_0, bool_0)
    var_0 = validation_0.__eq__(bytes_0)
    validation_0.to_maybe()


def test_case_1():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_either()
    var_1.bind(var_1)


def test_case_2():
    str_0 = "\r"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, str_0)
    var_0 = validation_0.__str__()
    validation_0.map(str_0)


def test_case_3():
    none_type_0 = None
    none_type_0.to_maybe()


def test_case_4():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)


def test_case_5():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.to_maybe()


def test_case_6():
    int_0 = 2009
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.is_fail()


def test_case_7():
    int_0 = 1
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.map(int_0)


def test_case_8():
    bool_0 = False
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.bind(bool_0)


def test_case_9():
    tuple_0 = ()
    bytes_0 = b"\x82\xcf(G/\xcd\xc1\xb9\xe0\xb3(\xce\xe4\xf5zZ\xb3\xf2r"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_0.ap(tuple_0)


def test_case_10():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_box()


def test_case_11():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_0.is_fail()


def test_case_12():
    int_0 = -1796
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.to_try()


def test_case_13():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_maybe()
    var_2 = var_1.to_either()
    var_3 = var_2.__str__()
    var_3.ap(var_0)


def test_case_14():
    int_0 = 1
    list_0 = [int_0, int_0, int_0]
    bytes_0 = b"6\xe1\x166\xefB\xe4\xc6K?\x99\x98@L\x95/\x04\xf0w_"
    str_0 = "\n        Transform Validation to Try.\n\n        :returns: Lazy monad with function returning Validation value\n        :rtype: Lazy[Function() -> (A | None)]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(bytes_0)
    var_1 = var_0.__str__()
    var_2 = module_0.Validation(var_1, bytes_0)
    var_3 = var_2.to_lazy()
    var_4 = var_3.to_either()
    var_4.ap(list_0)


def test_case_15():
    bytes_0 = b":U\xb8&\x83e\x7f\n\xdc]\x84\x81\xd2C"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    tuple_0 = ()
    set_0 = {tuple_0}
    validation_1 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.__eq__(validation_0)


def test_case_16():
    bytes_0 = b"\xc1Zm\xfe\xa3\xe7i\xe2+\xf0\xbei\x11\x9f\xeb0\x80\xed\x04"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    validation_0.ap(bytes_0)


def test_case_17():
    bytes_0 = b"\xddC\xf5\xe4o\x1a\x95\xcf~\x80\xe7\xc3[\xec%\xf5\x87\xaa\x17u"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(bytes_0)
    var_1 = validation_0.to_maybe()
    tuple_0 = (var_0, var_0, bytes_0, var_0)
    none_type_0 = None
    var_2 = var_1.bind(tuple_0)
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    validation_1.to_maybe()


def test_case_18():
    bytes_0 = b":U\xb8&\x83e\x7f\n\xdc]\x84\x81\xd2C"
    none_type_0 = None
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(none_type_0)
    var_1 = validation_0.__eq__(validation_0)
    object_0 = module_1.object()
    validation_1 = module_0.Validation(var_0, var_1)
    var_2 = validation_1.__eq__(validation_0)
    var_3 = validation_0.to_maybe()
    var_3.is_fail()
