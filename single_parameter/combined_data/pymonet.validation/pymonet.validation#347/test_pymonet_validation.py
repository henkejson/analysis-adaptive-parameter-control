# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    none_type_0 = None
    dict_0 = {}
    bytes_0 = b"\x1br\xec"
    validation_0 = module_0.Validation(dict_0, bytes_0)
    var_0 = validation_0.__eq__(none_type_0)
    var_1 = validation_0.is_fail()
    var_0.to_try()


def test_case_1():
    bytes_0 = b"iiy\x90>\xca\xe3B\xb1"
    bytes_1 = b"Gm\x93cg\x96{\xa4\x1a\xe1\xf6"
    validation_0 = module_0.Validation(bytes_0, bytes_1)
    var_0 = validation_0.to_either()
    var_0.to_either()


def test_case_2():
    bool_0 = True
    bool_0.to_maybe()


def test_case_3():
    float_0 = -856.538618
    validation_0 = module_0.Validation(float_0, float_0)


def test_case_4():
    dict_0 = {}
    var_0 = module_0.Validation(dict_0, dict_0)
    var_1 = var_0.is_fail()
    var_2 = var_0.to_maybe()


def test_case_5():
    int_0 = -3887
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.map(int_0)


def test_case_6():
    bytes_0 = b"\x8fF\xb597\xdf\xf5"
    bool_0 = True
    validation_0 = module_0.Validation(bytes_0, bool_0)
    validation_0.bind(bool_0)


def test_case_7():
    bytes_0 = b"\x9bW\xce\x15r\xb5/\xc9VN\xf5tT"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    none_type_0 = None
    validation_0.ap(none_type_0)


def test_case_8():
    float_0 = 2835.47
    validation_0 = module_0.Validation(float_0, float_0)
    var_0 = validation_0.to_box()
    var_0.is_success()


def test_case_9():
    str_0 = "DxeUTC{z+Ln"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(str_0)
    var_1 = validation_0.to_lazy()
    var_2 = var_1.bind(str_0)
    var_3 = var_2.bind(str_0)


def test_case_10():
    bool_0 = False
    bool_1 = True
    validation_0 = module_0.Validation(bool_1, bool_1)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_try()
    var_2 = var_1.__eq__(bool_0)
    var_2.to_maybe()


def test_case_11():
    bool_0 = False
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, bool_0)
    validation_0.to_try()


def test_case_12():
    str_0 = "DxeUTC{z+Ln"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_box()
    var_2 = var_0.to_either()


def test_case_13():
    dict_0 = {}
    bytes_0 = b"\x1br\xec"
    validation_0 = module_0.Validation(dict_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.is_fail()
    var_2 = var_0.__str__()
    var_0.to_try()


def test_case_14():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_either()
    var_1.ap(var_0)


def test_case_15():
    str_0 = "\n    Perform left-to-right function composition.\n\n    :param value: argument of first applied function\n    :type value: Any\n    :param functions: list of functions to applied from left-to-right\n    :type functions: List[Function]\n    :returns: result of all functions\n    :rtype: Any\n    "
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, str_0)
    var_0 = validation_0.__str__()
    var_0.to_either()


def test_case_16():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    none_type_1 = None
    validation_1 = module_0.Validation(none_type_1, validation_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_1.__eq__(var_0)
    var_2 = validation_0.to_lazy()
    var_3 = validation_1.__eq__(validation_0)
    validation_0.to_try()


def test_case_17():
    none_type_0 = None
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.__eq__(none_type_0)
    var_1 = validation_0.is_fail()
    var_2 = validation_0.__str__()
    var_3 = validation_0.to_try()
    var_4 = validation_0.is_fail()
    var_1.to_maybe()
