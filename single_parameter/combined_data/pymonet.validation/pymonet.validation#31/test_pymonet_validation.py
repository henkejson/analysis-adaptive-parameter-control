# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(none_type_0)


def test_case_1():
    str_0 = 'Z9Od=A>:"b`YM@%'
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    var_0.bind(validation_0)


def test_case_2():
    list_0 = []
    str_0 = "Try[value={}, is_success={}]"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.map(list_0)
    str_0.to_lazy()


def test_case_3():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_box()
    var_2 = var_1.to_lazy()
    var_2.is_fail()


def test_case_4():
    dict_0 = {}
    dict_0.to_either()


def test_case_5():
    dict_0 = {}
    var_0 = module_0.Validation(dict_0, dict_0)


def test_case_6():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.__str__()


def test_case_7():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.is_fail()


def test_case_8():
    bool_0 = True
    bool_1 = False
    validation_0 = module_0.Validation(bool_0, bool_1)
    validation_0.map(bool_1)


def test_case_9():
    bool_0 = False
    str_0 = "\n    Maybe type is the most common way of representing nothingness (or the null type).\n    Maybe is effectively abstract and has two concrete subtypes: Box (also Some) and Nothing.\n    "
    validation_0 = module_0.Validation(str_0, str_0)
    validation_0.bind(bool_0)


def test_case_10():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.ap(none_type_0)


def test_case_11():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_box()


def test_case_12():
    bool_0 = True
    float_0 = -1342.61
    validation_0 = module_0.Validation(float_0, float_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_maybe()
    var_2 = var_1.__eq__(bool_0)
    var_2.to_either()


def test_case_13():
    bool_0 = False
    tuple_0 = (bool_0,)
    validation_0 = module_0.Validation(tuple_0, bool_0)
    validation_0.to_try()


def test_case_14():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_0.__str__()


def test_case_15():
    bytes_0 = b")\xab$-*E\xd9tb\x00\xeb9]Q"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_0.is_fail()


def test_case_16():
    none_type_0 = None
    str_0 = "Try[value={}, is_success={}]"
    validation_0 = module_0.Validation(str_0, str_0)
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(validation_1)
    var_1 = validation_0.to_lazy()
    var_2 = var_1.to_either()
    var_3 = var_2.__str__()
    var_4 = validation_0.to_box()


def test_case_17():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.is_success()
    var_2 = var_1.__str__()
    var_1.bind(var_1)


def test_case_18():
    int_0 = 3101
    none_type_0 = None
    list_0 = []
    validation_0 = module_0.Validation(int_0, none_type_0)
    validation_1 = module_0.Validation(validation_0, list_0)
    var_0 = validation_0.__eq__(validation_1)
    validation_1.__str__()
