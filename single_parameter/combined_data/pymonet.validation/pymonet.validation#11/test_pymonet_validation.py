# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    str_0 = "\x0c^RisC6Djkl^C+\\y"
    tuple_0 = (str_0,)
    validation_0 = module_0.Validation(tuple_0, str_0)
    var_0 = validation_0.__eq__(tuple_0)
    validation_0.bind(validation_0)


def test_case_1():
    str_0 = ">D[K\rRuxA%9WsDW,^="
    tuple_0 = (str_0,)
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_lazy()
    var_2 = var_1.to_either()
    var_3 = var_2.to_lazy()
    var_3.to_lazy()


def test_case_2():
    dict_0 = {}
    str_0 = "\t!a'|"
    dict_1 = {str_0: str_0, str_0: str_0, str_0: str_0}
    validation_0 = module_0.Validation(dict_0, dict_1)
    var_0 = validation_0.is_success()
    var_1 = validation_0.to_box()
    var_2 = var_1.to_either()
    var_3 = validation_0.to_maybe()
    var_2.is_fail()


def test_case_3():
    bytes_0 = b"\x92D\x87I5\x93\x9d\xf9\x96\xc23\xf7\x08\xcc"
    validation_0 = module_0.Validation(bytes_0, bytes_0)


def test_case_4():
    bool_0 = True
    none_type_0 = None
    validation_0 = module_0.Validation(bool_0, none_type_0)
    validation_0.to_either()


def test_case_5():
    complex_0 = -2707.1 - 3123.9j
    validation_0 = module_0.Validation(complex_0, complex_0)
    validation_0.is_fail()


def test_case_6():
    dict_0 = {}
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, dict_0)
    validation_0.map(dict_0)


def test_case_7():
    none_type_0 = None
    bytes_0 = b"\x8f}\xb3\xac^\x0f<\x92\x11\xb9\xa2b/\xbb|\x83\xe5\xb3"
    set_0 = {bytes_0, bytes_0, bytes_0}
    validation_0 = module_0.Validation(set_0, bytes_0)
    validation_0.ap(none_type_0)


def test_case_8():
    bytes_0 = b"\xd7\x0c\xeb\x83\xc0|\n\xeam\xe9%"
    none_type_0 = None
    validation_0 = module_0.Validation(bytes_0, none_type_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.to_lazy()
    var_1.is_success()


def test_case_9():
    float_0 = 1945.32805
    validation_0 = module_0.Validation(float_0, float_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.map(float_0)
    var_0.is_fail()


def test_case_10():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_maybe()
    var_1.ap(none_type_0)


def test_case_11():
    str_0 = "Try[value={}, is_success={}]"
    bytes_0 = b"P"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_try()
    var_1 = var_0.map(str_0)
    var_1.is_success()


def test_case_12():
    bytes_0 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_0.bind(bytes_0)


def test_case_13():
    str_0 = '89-+3JFE{laPK"[Z8h'
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    var_0.to_either()


def test_case_14():
    str_0 = '89-+3JFE{laPK"[Z8h'
    list_0 = []
    validation_0 = module_0.Validation(str_0, list_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.to_maybe()
    var_2 = validation_0.to_lazy()
    var_0.map(var_2)


def test_case_15():
    str_0 = '89-+3JFE{laPK"[Z8h'
    list_0 = []
    validation_0 = module_0.Validation(str_0, list_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.is_fail()
    var_2 = validation_0.__eq__(str_0)
    var_1.map(list_0)


def test_case_16():
    str_0 = '89-+3JFE{laPK"[Z8h'
    list_0 = []
    validation_0 = module_0.Validation(str_0, list_0)
    validation_1 = module_0.Validation(str_0, validation_0)
    var_0 = validation_1.__eq__(validation_0)
    var_1 = validation_1.to_box()
    validation_1.bind(list_0)


def test_case_17():
    str_0 = "I^al{7A_75hM"
    bool_0 = False
    validation_0 = module_0.Validation(str_0, bool_0)
    var_0 = validation_0.__eq__(validation_0)
    var_0.to_box()
