# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)


def test_case_1():
    str_0 = "M}S,v'/%,vKO\x0b}x "
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(str_0)
    var_0.is_fail()


def test_case_2():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_either()


def test_case_3():
    float_0 = -2319.9
    list_0 = [float_0, float_0, float_0]
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.__str__()
    validation_0.map(var_1)


def test_case_4():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_maybe()
    none_type_0 = None
    var_0.ap(none_type_0)


def test_case_5():
    list_0 = []
    bytes_0 = b"\xad\xa0\x8d}\x91k\xdb"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_try()
    list_1 = [var_1]
    validation_1 = module_0.Validation(var_0, list_1)
    var_2 = validation_1.__eq__(list_0)
    var_1.is_fail()


def test_case_6():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_7():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.is_fail()


def test_case_8():
    float_0 = -2319.9
    list_0 = [float_0, float_0, float_0]
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.__str__()
    validation_0.map(var_0)


def test_case_9():
    none_type_0 = None
    str_0 = "\n    All is a Monoid that will combine 2 values of any type using logical conjunction on their coerced Boolean values.\n    "
    validation_0 = module_0.Validation(str_0, str_0)
    bool_0 = True
    validation_1 = module_0.Validation(bool_0, none_type_0)
    validation_0.bind(none_type_0)


def test_case_10():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_0.ap(none_type_0)


def test_case_11():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.__eq__(validation_0)


def test_case_12():
    none_type_0 = None
    dict_0 = {
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        none_type_0: none_type_0,
    }
    bytes_0 = b"\xa4\x85H\x93\x1e\xb5\xe6\xe7D\x9f-"
    bool_0 = True
    tuple_0 = (dict_0, dict_0, bytes_0, bool_0)
    validation_0 = module_0.Validation(none_type_0, tuple_0)
    var_0 = validation_0.to_lazy()
    var_0.is_success()


def test_case_13():
    int_0 = 1273
    validation_0 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_try()
    validation_1 = module_0.Validation(int_0, int_0)
    var_0.to_lazy()


def test_case_14():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.to_try()


def test_case_15():
    float_0 = -2319.9
    list_0 = [float_0, float_0, float_0]
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.__str__()
    str_0 = 'iKXmu2tx\n.dY;_"e'
    validation_1 = module_0.Validation(list_0, str_0)
    var_1 = validation_0.__eq__(validation_1)
    var_1.to_try()


def test_case_16():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.__eq__(validation_0)
    var_2 = validation_0.to_try()
    var_3 = validation_0.__str__()
    var_1.is_success()
