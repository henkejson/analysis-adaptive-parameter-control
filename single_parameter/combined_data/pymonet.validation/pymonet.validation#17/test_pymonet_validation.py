# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0
import builtins as module_1


def test_case_0():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    bool_0 = True
    validation_1 = module_0.Validation(bool_0, bool_0)
    validation_2 = module_0.Validation(validation_1, validation_1)
    tuple_0 = (validation_2, validation_1, validation_1)
    complex_0 = -60.32 - 1359j
    validation_3 = module_0.Validation(complex_0, complex_0)
    var_0 = validation_3.__eq__(tuple_0)
    var_1 = var_0.__eq__(validation_0)


def test_case_1():
    str_0 = '" '
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    var_0.to_box()


def test_case_2():
    bytes_0 = b"UW\xeb\xfb\xca\x85\xab\xa9"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_0.to_either()


def test_case_3():
    str_0 = "SWCWyy/vs6-6 ua*59"
    validation_0 = module_0.Validation(str_0, str_0)
    validation_1 = module_0.Validation(validation_0, str_0)
    var_0 = validation_1.to_maybe()
    var_1 = validation_1.to_either()
    var_2 = validation_0.__str__()
    var_3 = var_1.__eq__(str_0)
    var_4 = validation_1.to_lazy()
    str_0.map(str_0)


def test_case_4():
    object_0 = module_1.object()
    validation_0 = module_0.Validation(object_0, object_0)


def test_case_5():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.is_fail()


def test_case_6():
    bool_0 = True
    str_0 = "ImmutableList: you can not add any other instace than ImmutableList"
    set_0 = {str_0, str_0}
    none_type_0 = None
    validation_0 = module_0.Validation(set_0, none_type_0)
    validation_0.map(bool_0)


def test_case_7():
    none_type_0 = None
    int_0 = 655
    int_1 = 1
    list_0 = [int_0, int_0, int_1]
    validation_0 = module_0.Validation(list_0, list_0)
    validation_0.bind(none_type_0)


def test_case_8():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_lazy()
    validation_0.ap(var_0)


def test_case_9():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_box()


def test_case_10():
    str_0 = "o"
    list_0 = [str_0, str_0, str_0]
    str_1 = "Y-I8C.kJ^l[p}"
    none_type_0 = None
    validation_0 = module_0.Validation(str_1, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_either()
    var_2 = var_1.to_maybe()
    var_3 = var_2.to_try()
    var_3.map(list_0)


def test_case_11():
    str_0 = "SWCWyy/vs6-6 ua*59"
    validation_0 = module_0.Validation(str_0, str_0)
    validation_1 = module_0.Validation(validation_0, str_0)
    var_0 = validation_1.to_try()
    validation_2 = module_0.Validation(validation_1, validation_1)
    var_1 = validation_1.to_either()
    var_2 = validation_0.__str__()
    var_3 = validation_0.__eq__(validation_0)
    var_4 = var_1.__eq__(str_0)
    var_5 = validation_1.to_lazy()
    var_3.map(str_0)


def test_case_12():
    str_0 = "SWCWyy/vs6-6 ua*59"
    validation_0 = module_0.Validation(str_0, str_0)
    validation_1 = module_0.Validation(validation_0, str_0)
    var_0 = validation_1.to_maybe()
    var_1 = validation_1.to_either()
    var_2 = validation_0.__str__()
    var_3 = validation_0.__eq__(validation_0)
    var_4 = var_1.__eq__(str_0)
    var_5 = validation_1.to_lazy()
    var_3.map(str_0)


def test_case_13():
    str_0 = "\r`"
    validation_0 = module_0.Validation(str_0, str_0)
    validation_1 = module_0.Validation(validation_0, str_0)
    var_0 = validation_1.to_maybe()
    validation_2 = module_0.Validation(validation_1, var_0)
    var_1 = validation_1.__eq__(validation_2)
    var_2 = var_0.__str__()
    validation_3 = module_0.Validation(var_1, var_1)
    var_3 = validation_0.__eq__(validation_3)
    validation_1.map(var_0)


def test_case_14():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.__eq__(tuple_0)
    var_1 = validation_0.__str__()
    int_0 = 86
    set_0 = {int_0, int_0, int_0}
    validation_1 = module_0.Validation(int_0, set_0)
    var_1.map(var_0)


def test_case_15():
    int_0 = 2297
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_maybe()
    var_0.bind(int_0)


def test_case_16():
    str_0 = "SWCWyy/vs6-6 ua*59"
    none_type_0 = None
    set_0 = set()
    validation_0 = module_0.Validation(str_0, set_0)
    var_0 = validation_0.to_either()
    var_0.ap(none_type_0)
