# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import builtins as module_0
import pymonet.validation as module_1


def test_case_0():
    int_0 = 1765
    object_0 = module_0.object()
    validation_0 = module_1.Validation(object_0, object_0)
    var_0 = validation_0.__eq__(int_0)
    var_0.is_fail()


def test_case_1():
    bool_0 = False
    bytes_0 = b"\x13"
    validation_0 = module_1.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    var_0.ap(bool_0)


def test_case_2():
    tuple_0 = ()
    bytes_0 = b"\x8b\xd7\xc2\xc8\x83\x16\xce\n\xb0\x05\x94w\x8b\xf8\xa8\x01~\x90"
    validation_0 = module_1.Validation(tuple_0, tuple_0)
    validation_1 = module_1.Validation(bytes_0, tuple_0)
    var_0 = validation_1.to_either()
    var_1 = validation_1.is_fail()
    var_2 = var_0.to_box()
    var_3 = var_2.to_either()
    var_4 = var_3.to_box()
    validation_2 = module_1.Validation(bytes_0, bytes_0)
    var_5 = validation_2.to_try()
    var_6 = validation_2.to_box()
    validation_2.bind(var_4)


def test_case_3():
    bytes_0 = b"\x04C\xf92\xdb\xc2\xf7\x02\xc0%\n\xc9\xd3\xea!\xee"
    validation_0 = module_1.Validation(bytes_0, bytes_0)
    validation_1 = module_1.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_1.to_either()
    var_0.map(validation_1)


def test_case_4():
    bytes_0 = b"\x04C\xf92\xdb\xc2\xf7\x02\xc0%\n\xc9\xd3\xea!\xee"
    validation_0 = module_1.Validation(bytes_0, bytes_0)


def test_case_5():
    none_type_0 = None
    validation_0 = module_1.Validation(none_type_0, none_type_0)
    validation_0.to_maybe()


def test_case_6():
    bytes_0 = b"\x04C\xf92\xdb\xc2\xf7\x02\xc0%\n\xc9\xd3\xea!\xee"
    validation_0 = module_1.Validation(bytes_0, bytes_0)
    validation_1 = module_1.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = var_0.__eq__(validation_1)
    var_2 = validation_1.is_fail()
    var_3 = validation_1.to_maybe()
    var_4 = var_0.__eq__(var_0)
    validation_1.map(bytes_0)


def test_case_7():
    str_0 = "4Z8-M=\n#cCz-F~#0"
    validation_0 = module_1.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    validation_0.map(validation_0)


def test_case_8():
    bool_0 = True
    validation_0 = module_1.Validation(bool_0, bool_0)
    validation_1 = module_1.Validation(bool_0, bool_0)
    validation_1.bind(validation_1)


def test_case_9():
    tuple_0 = ()
    validation_0 = module_1.Validation(tuple_0, tuple_0)
    validation_0.ap(tuple_0)


def test_case_10():
    tuple_0 = ()
    bool_0 = True
    validation_0 = module_1.Validation(bool_0, bool_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.__str__()
    var_1.bind(tuple_0)


def test_case_11():
    none_type_0 = None
    none_type_1 = None
    validation_0 = module_1.Validation(none_type_1, none_type_1)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_box()
    var_2 = var_1.__eq__(none_type_0)
    tuple_0 = ()
    validation_1 = module_1.Validation(tuple_0, tuple_0)
    validation_1.ap(tuple_0)


def test_case_12():
    bytes_0 = b"\x04C\xf92\xdb\xc2\xf7\x02\xc0%\n\xc9\xd3\xea!\xee"
    validation_0 = module_1.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = var_0.__eq__(validation_0)
    var_0.to_lazy()


def test_case_13():
    dict_0 = {}
    validation_0 = module_1.Validation(dict_0, dict_0)
    list_0 = validation_0.__str__()
    var_0 = validation_0.to_try()
    var_1 = validation_0.__eq__(var_0)
    var_2 = validation_0.is_fail()
    var_3 = var_0.__eq__(var_2)
    validation_1 = module_1.Validation(var_3, var_3)
    var_4 = validation_1.__eq__(var_2)
    validation_1.is_fail()


def test_case_14():
    bytes_0 = b"\x04C\xf92\xdb\xc2\xf7\x02\xc0%\n\xc9\xd3\xea!\xee"
    validation_0 = module_1.Validation(bytes_0, bytes_0)
    bool_0 = False
    validation_1 = module_1.Validation(bytes_0, bool_0)
    var_0 = validation_0.__eq__(validation_1)
    validation_1.is_fail()


def test_case_15():
    bytes_0 = b""
    validation_0 = module_1.Validation(bytes_0, bytes_0)
    validation_1 = module_1.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = var_0.__eq__(validation_1)
    var_2 = validation_1.to_maybe()
    validation_0.bind(validation_0)
