# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(none_type_0)
    none_type_1 = None
    validation_1 = module_0.Validation(none_type_0, var_0)
    validation_1.ap(none_type_1)


def test_case_1():
    str_0 = "d-5\x0b}]f"
    bytes_0 = b"^B\xaf\xd7\xbc"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    var_0.map(str_0)


def test_case_2():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.is_fail()
    var_1 = validation_0.to_either()
    var_0.is_fail()


def test_case_3():
    str_0 = "W;o[:Y\x0c!e"
    validation_0 = module_0.Validation(str_0, str_0)


def test_case_4():
    str_0 = "|?Jf/'k<A].SzNBoT"
    validation_0 = module_0.Validation(str_0, str_0)
    tuple_0 = validation_0.to_maybe()


def test_case_5():
    none_type_0 = None
    none_type_1 = None
    validation_0 = module_0.Validation(none_type_1, none_type_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_0.map(none_type_1)


def test_case_6():
    none_type_0 = None
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.bind(none_type_0)


def test_case_7():
    str_0 = "|?Jf/'k<A].SzNBoT"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_box()
    var_2 = validation_0.to_maybe()


def test_case_8():
    none_type_0 = None
    none_type_1 = None
    validation_0 = module_0.Validation(none_type_1, none_type_1)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.ap(none_type_0)
    var_1.is_success()


def test_case_9():
    str_0 = "|?Jf/'k<A].SzNBoT"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_1 = module_0.Validation(str_0, str_0)
    var_1 = validation_1.__eq__(var_0)
    var_2 = validation_1.__str__()
    var_3 = validation_1.to_box()
    var_4 = validation_0.__eq__(validation_1)
    var_5 = validation_1.to_try()
    validation_0.ap(none_type_0)


def test_case_10():
    none_type_0 = None
    none_type_1 = None
    validation_0 = module_0.Validation(none_type_1, none_type_0)
    var_0 = validation_0.__eq__(validation_0)
    none_type_2 = None
    var_1 = validation_0.__eq__(none_type_2)
    validation_0.ap(none_type_1)


def test_case_11():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_box()
    validation_0.to_try()


def test_case_12():
    str_0 = "3'C>`%nipiC"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.__str__()
    var_2 = validation_0.to_box()
    var_3 = var_0.__eq__(validation_0)
    var_4 = validation_0.is_success()
    validation_0.ap(var_4)


def test_case_13():
    str_0 = "|?Jf/'k<A].SzNBoT"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_1 = module_0.Validation(str_0, str_0)
    var_1 = validation_1.__eq__(var_0)
    var_2 = validation_1.__str__()
    var_3 = validation_1.to_box()
    var_4 = validation_0.__eq__(validation_1)
    validation_0.is_success()


def test_case_14():
    str_0 = "|?Jf/'k<A].SzNBoT"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    set_0 = {none_type_0, none_type_0}
    var_0 = validation_0.__eq__(set_0)
    dict_0 = {}
    validation_1 = module_0.Validation(var_0, dict_0)
    var_1 = validation_1.__str__()
    var_2 = var_1.__eq__(str_0)
    var_3 = validation_0.to_box()
    var_4 = var_3.__str__()
    var_2.to_box()


def test_case_15():
    str_0 = "jxBoFKUzdE_\r[V"
    tuple_0 = (str_0,)
    bytes_0 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_box()
    var_2 = var_1.__str__()
    var_2.ap(tuple_0)
