# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    float_0 = 1659.4
    validation_1 = module_0.Validation(float_0, float_0)
    var_0 = validation_1.__eq__(validation_0)
    var_0.to_lazy()


def test_case_1():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_1 = validation_0.__eq__(none_type_0)
    var_0 = validation_1.__eq__(validation_0)
    var_0.to_lazy()


def test_case_2():
    bytes_0 = b"\x16T\xed\x1a\x88\xcc\x04X\t"
    list_0 = [bytes_0, bytes_0, bytes_0]
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_either()


def test_case_3():
    bytes_0 = b"\xcb\x13\x93X]\xbe\xad\xad\xbe\xe8\x942\xe0\xc6\xc9\x93Mb"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_either()
    bytes_0.to_lazy()


def test_case_4():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)


def test_case_5():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.is_fail()


def test_case_6():
    str_0 = "^eu!hqi"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    bool_0 = True
    validation_0.map(bool_0)


def test_case_7():
    bytes_0 = b"f\xf4\xc6W0\x1f\x18\xb8\xfd\xa2\xe6\xd8L\x87-E\xef"
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.bind(bytes_0)


def test_case_8():
    bool_0 = True
    bool_1 = True
    none_type_0 = None
    validation_0 = module_0.Validation(bool_1, none_type_0)
    validation_0.ap(bool_0)


def test_case_9():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    float_0 = 1659.4
    validation_1 = module_0.Validation(float_0, float_0)
    var_0 = validation_1.to_box()
    var_1 = validation_1.__eq__(validation_0)
    var_1.to_lazy()


def test_case_10():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_lazy()
    validation_1 = module_0.Validation(var_0, var_0)
    var_1 = validation_1.__eq__(bool_0)
    var_1.to_lazy()


def test_case_11():
    str_0 = ";3Cr4\tsH]mv"
    none_type_0 = None
    bool_0 = False
    validation_0 = module_0.Validation(none_type_0, bool_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_try()
    var_1.ap(str_0)


def test_case_12():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.__str__()
    var_2 = validation_0.__eq__(bool_0)
    var_3 = var_0.to_try()
    var_4 = validation_0.to_try()


def test_case_13():
    str_0 = "q$(wli)YIh\x0cL18"
    validation_0 = module_0.Validation(str_0, str_0)
    validation_1 = module_0.Validation(str_0, str_0)
    var_0 = validation_1.to_lazy()
    var_1 = var_0.__str__()
    tuple_0 = ()
    validation_2 = module_0.Validation(tuple_0, tuple_0)
    validation_3 = module_0.Validation(validation_2, tuple_0)
    var_2 = validation_2.to_maybe()
    var_3 = var_0.to_either()
    var_3.bind(validation_1)


def test_case_14():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    validation_1 = module_0.Validation(set_0, set_0)
    var_0 = validation_1.__eq__(validation_0)
    var_1 = validation_1.to_lazy()
    var_2 = validation_0.to_either()
    bool_0 = True
    validation_1.map(bool_0)


def test_case_15():
    str_0 = "q$(wli)YIh\x0cL18"
    validation_0 = module_0.Validation(str_0, str_0)
    validation_1 = module_0.Validation(str_0, str_0)
    var_0 = validation_1.to_lazy()
    var_1 = var_0.__str__()
    tuple_0 = ()
    validation_2 = module_0.Validation(tuple_0, tuple_0)
    validation_3 = module_0.Validation(validation_2, tuple_0)
    var_2 = validation_2.to_maybe()
    var_3 = var_0.to_either()
    tuple_1 = validation_3.__str__()
    var_3.bind(validation_1)
