# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0
import builtins as module_1


def test_case_0():
    str_0 = "9um\rwD\\C)9e &'"
    none_type_0 = None
    validation_0 = module_0.Validation(str_0, none_type_0)
    var_0 = validation_0.__eq__(none_type_0)
    var_1 = none_type_0.__str__()
    var_2 = var_1.__str__()
    validation_1 = module_0.Validation(str_0, str_0)
    validation_2 = module_0.Validation(str_0, str_0)
    var_3 = validation_2.to_maybe()
    var_4 = var_3.to_try()
    var_5 = var_3.ap(none_type_0)
    list_0 = [str_0]
    validation_3 = module_0.Validation(str_0, list_0)


def test_case_1():
    str_0 = "9um\rwD\\C)9e &'"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    validation_1 = module_0.Validation(var_0, var_0)


def test_case_2():
    str_0 = "9um\rwD\\C)9e &'"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    validation_1 = module_0.Validation(var_0, var_0)
    var_1 = validation_1.to_maybe()
    var_0.ap(var_0)


def test_case_3():
    none_type_0 = None
    var_0 = none_type_0.__str__()


def test_case_4():
    int_0 = 1058
    validation_0 = module_0.Validation(int_0, int_0)


def test_case_5():
    object_0 = module_1.object()
    validation_0 = module_0.Validation(object_0, object_0)
    validation_0.to_maybe()


def test_case_6():
    int_0 = -2784
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.is_fail()


def test_case_7():
    str_0 = "9um\rwD\\C)9e &'"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    validation_1 = module_0.Validation(var_0, var_0)
    var_1 = validation_0.to_either()
    validation_0.map(var_1)


def test_case_8():
    str_0 = "\n    Return the first element of the list which matches the keys, or None if no element matches.\n\n    :param collection: collection to search\n    :type collection: List[A]\n    :param key: function to decide witch element should be found\n    :type key: Function(A) -> Boolean\n    :returns: element of collection or None\n    :rtype: A | None\n    "
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.bind(str_0)


def test_case_9():
    none_type_0 = None
    int_0 = -213
    set_0 = {none_type_0}
    tuple_0 = ()
    tuple_1 = (set_0, int_0, tuple_0)
    validation_0 = module_0.Validation(int_0, none_type_0)
    validation_0.ap(tuple_1)


def test_case_10():
    none_type_0 = None
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_1 = module_0.Validation(validation_0, bool_0)
    var_0 = validation_1.to_box()
    var_0.ap(none_type_0)


def test_case_11():
    object_0 = module_1.object()
    validation_0 = module_0.Validation(object_0, object_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.__str__()


def test_case_12():
    bytes_0 = b"\x02\x110\x8e["
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_try()
    var_1.to_try()


def test_case_13():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.to_try()


def test_case_14():
    str_0 = "0y4>\r2\x0b8,osiZ&B^9D"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = module_0.Validation(validation_0, str_0)
    var_1 = validation_0.to_either()


def test_case_15():
    str_0 = "9um\rwD\\C)9e &'"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(none_type_0)
    var_1 = var_0.__eq__(none_type_0)
    var_2 = none_type_0.__str__()
    validation_1 = module_0.Validation(str_0, str_0)
    var_3 = validation_1.__str__()
    validation_2 = module_0.Validation(var_3, var_3)
    var_4 = validation_0.__eq__(validation_2)
    var_5 = validation_2.to_maybe()
    validation_0.map(str_0)


def test_case_16():
    int_0 = -2784
    validation_0 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.__eq__(validation_0)
    var_0.to_either()


def test_case_17():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.__str__()
    var_0.is_fail()


def test_case_18():
    set_0 = set()
    none_type_0 = None
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_maybe()
    validation_1 = module_0.Validation(none_type_0, set_0)


def test_case_19():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_box()
    var_1.is_success()
