# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bytes_0 = b"\xb7\xa0k\xd5\xfb\xb5y4\x93bD]\xfb\xa1bL\x88\xe1x"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)


def test_case_1():
    str_0 = "\n        Transform Maybe into Validation.\n\n        :returns: successfull Validation monad with previous value or None when Maybe is empty\n        :rtype: Validation[A, []]\n        "
    list_0 = [str_0, str_0, str_0, str_0]
    bool_0 = True
    none_type_0 = None
    validation_0 = module_0.Validation(bool_0, none_type_0)
    var_0 = validation_0.__eq__(list_0)
    var_0.is_success()


def test_case_2():
    bytes_0 = b"\xb7\xa0k\xd5\xfb\xb5y4\x93b#D]\xfb\xa1bL\x88\xe1x"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.__eq__(validation_0)
    var_2 = validation_0.__str__()
    var_3 = validation_0.to_either()
    validation_1 = module_0.Validation(var_1, var_3)
    validation_2 = module_0.Validation(var_3, validation_1)
    validation_2.bind(var_3)


def test_case_3():
    bytes_0 = b"\xb7\xa0k\xd5\xfb\xb5y4\x93bD]\xfb\xa1bL\x88\xe1x"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()


def test_case_4():
    bytes_0 = b"\xb7\xa0k\xd5\xfb\xb5y4\x93bD]\xfb\xa1bL\x88\xe1x"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    int_0 = 1246
    var_1 = var_0.__eq__(int_0)
    validation_1 = module_0.Validation(int_0, var_0)
    var_1.to_try()


def test_case_5():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)


def test_case_6():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.is_fail()


def test_case_7():
    tuple_0 = ()
    set_0 = {tuple_0}
    validation_0 = module_0.Validation(set_0, set_0)
    validation_0.map(set_0)


def test_case_8():
    none_type_0 = None
    str_0 = "yd}OR\r-IvaIa$eMk4os"
    validation_0 = module_0.Validation(str_0, str_0)
    validation_1 = module_0.Validation(validation_0, str_0)
    validation_1.bind(none_type_0)


def test_case_9():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    int_0 = 1968
    bool_0 = True
    validation_1 = module_0.Validation(bool_0, bool_0)
    validation_1.ap(int_0)


def test_case_10():
    tuple_0 = ()
    str_0 = "\n        Transform Validation to Either.\n\n        :returns: Right monad with previous value when Validation has no errors, in other case Left with errors list\n        :rtype: Right[A] | Left[E]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_box()
    var_0.map(tuple_0)


def test_case_11():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.to_either()
    validation_0.ap(validation_0)


def test_case_12():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_try()
    bytes_0 = b"\x99\xe1YZ\xd8\xf6"
    validation_1 = module_0.Validation(bytes_0, bytes_0)


def test_case_13():
    set_0 = set()
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, set_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.is_fail()
    var_2 = var_0.__str__()
    var_2.to_either()


def test_case_14():
    bytes_0 = b"\x8d.\xbf"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_box()
    var_2 = validation_0.to_either()
    var_3 = validation_0.to_box()
    var_4 = var_3.to_try()
    var_3.ap(var_1)


def test_case_15():
    bytes_0 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.to_box()
    var_0.to_maybe()


def test_case_16():
    bytes_0 = b"\xb7\xa0k\xd5\xfb\xb54\x93bD]\xfb3bL\x88\xe1x"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_either()
    validation_1 = module_0.Validation(var_0, var_1)
    var_2 = validation_1.__eq__(validation_0)
    var_2.to_try()
