# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bytes_0 = b"\xf3\x89\xe7\xe8\xe5\x06\xd7\xdd\x17 J"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(bytes_0)


def test_case_1():
    str_0 = "\r/*mjfkNwVD="
    tuple_0 = ()
    validation_0 = module_0.Validation(str_0, tuple_0)
    var_0 = validation_0.__str__()
    var_0.to_lazy()


def test_case_2():
    bytes_0 = b'\xf5\xc4^^\x1edUy\xf2\x05"\x87'
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    var_1 = validation_1.__eq__(validation_1)
    tuple_0 = (var_1, var_1, var_1)
    validation_1.map(tuple_0)


def test_case_3():
    str_0 = "iMo="
    bool_0 = False
    complex_0 = 1824.569217 + 5531.8j
    set_0 = {str_0, str_0, bool_0, complex_0}
    list_0 = [complex_0]
    bytes_0 = b'=\xc2\x16r\xea\xb7"\x13\xfb'
    tuple_0 = (set_0, list_0, set_0, bytes_0)
    dict_0 = {str_0: str_0, str_0: bool_0, bool_0: bool_0, bool_0: tuple_0}
    tuple_1 = (dict_0, bool_0, bool_0, bytes_0)
    tuple_2 = (str_0, tuple_1)
    str_1 = "\n    Perform right-to-left function composition.\n\n    :param value: argument of first applied function\n    :type value: Any\n    :param functions: list of functions to applied from right-to-left\n    :type functions: List[Function]\n    :returns: result of all functions\n    :rtype: Any\n    "
    set_1 = set()
    bool_1 = True
    tuple_3 = (str_1, set_1, bool_1)
    validation_0 = module_0.Validation(tuple_3, str_1)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.ap(tuple_2)
    var_2 = var_1.__str__()
    var_2.is_fail()


def test_case_4():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_5():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.is_success()


def test_case_6():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.is_fail()


def test_case_7():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)
    tuple_0 = (var_0, var_0, var_0)
    validation_0.map(tuple_0)


def test_case_8():
    int_0 = -3104
    validation_0 = module_0.Validation(int_0, int_0)
    none_type_0 = None
    validation_0.bind(none_type_0)


def test_case_9():
    bool_0 = False
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.ap(bool_0)


def test_case_10():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.to_either()
    set_0 = {bool_0}
    validation_1 = module_0.Validation(set_0, bool_0)
    var_2 = validation_1.to_lazy()
    validation_1.ap(set_0)


def test_case_11():
    bool_0 = False
    str_0 = "Callable[[U], Lazy[U, W]]"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_1 = module_0.Validation(bool_0, validation_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.to_box()
    var_2 = var_0.to_maybe()
    var_3 = validation_0.to_lazy()
    var_1.map(str_0)


def test_case_12():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.to_try()


def test_case_13():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)
    var_0.map(none_type_0)


def test_case_14():
    bytes_0 = b""
    str_0 = "gWpe\\AgR}Z\ns)B\nF0|6"
    int_0 = -874
    validation_0 = module_0.Validation(str_0, bytes_0)
    var_0 = validation_0.to_maybe()
    none_type_0 = None
    var_1 = validation_0.__eq__(none_type_0)
    validation_0.map(int_0)


def test_case_15():
    str_0 = "gWpe\\AgR}Z\ns)B\nF0|6"
    int_0 = -874
    validation_0 = module_0.Validation(int_0, str_0)
    validation_1 = module_0.Validation(str_0, str_0)
    var_0 = validation_1.to_either()


def test_case_16():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_maybe()
    var_0.to_either()


def test_case_17():
    bytes_0 = b'\xf5\xc4^^\x1edUy\xf2\x05"\x87'
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    validation_1 = module_0.Validation(validation_0, validation_0)
    var_1 = validation_0.__eq__(validation_1)
    var_2 = var_1.__str__()
    validation_1.map(var_1)
