# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    int_0 = 2587
    str_0 = "\n        Take function and applied this function with monad value and returns new monad with mapped value.\n\n        :params mapper: function to apply on monad value\n        :type mapper: Function(A) -> B\n        :returns: for successfully new Try with mapped value, othercase copy of self\n        :rtype: Try[B]\n        "
    validation_0 = module_0.Validation(int_0, int_0)
    validation_1 = module_0.Validation(str_0, validation_0)
    var_0 = validation_1.__eq__(validation_1)
    validation_1.to_try()


def test_case_1():
    int_0 = 2587
    str_0 = "\n        Take function and applied this function with monad value and returns new monad with mapped value.\n\n        :params mapper: function to apply on monad value\n        :type mapper: Function(A) -> B\n        :returns: for successfully new Try with mapped value, othercase copy of self\n        :rtype: Try[B]\n        "
    validation_0 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.__eq__(str_0)
    validation_1 = module_0.Validation(var_0, validation_0)
    var_1 = validation_1.__eq__(validation_1)
    validation_1.to_try()


def test_case_2():
    dict_0 = {}
    int_0 = -228
    validation_0 = module_0.Validation(int_0, dict_0)
    var_0 = validation_0.__str__()
    var_0.is_fail()


def test_case_3():
    bytes_0 = b"\x1d\x9a\xa1\x8b\xbe\x9b"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    var_0.to_box()


def test_case_4():
    bool_0 = False
    str_0 = "\n        Two Lazy are equals where both are evaluated both have the same value and constructor functions.\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.__eq__(bool_0)
    var_1.is_fail()


def test_case_5():
    bytes_0 = b"D\x18\x82\xd8\x156w\xe3\xdf\xe5eF\x95QC\x00"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_box()
    var_2 = var_1.to_maybe()
    var_3 = var_1.to_try()
    var_2.ap(bytes_0)


def test_case_6():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_7():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.to_maybe()


def test_case_8():
    float_0 = 2395.3
    none_type_0 = None
    list_0 = [float_0, float_0, float_0]
    validation_0 = module_0.Validation(none_type_0, float_0)
    var_0 = validation_0.__eq__(list_0)
    validation_0.is_fail()


def test_case_9():
    str_0 = "\n        Take function and applied this function with monad value and returns function result.\n\n        :params binder: function to apply on monad value\n        :type binder: Function(A) -> Try[B]\n        :returns: for successfully result of binder, othercase copy of self\n        :rtype: Try[B]\n        "
    none_type_0 = None
    validation_0 = module_0.Validation(str_0, str_0)
    validation_0.map(none_type_0)


def test_case_10():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    bool_1 = False
    validation_0 = module_0.Validation(bool_1, bool_1)
    validation_0.bind(dict_0)


def test_case_11():
    float_0 = 540.0534
    str_0 = "All[value={}]"
    validation_0 = module_0.Validation(str_0, str_0)
    validation_0.ap(float_0)


def test_case_12():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_box()
    var_0.to_box()


def test_case_13():
    tuple_0 = ()
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.ap(tuple_0)


def test_case_14():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    none_type_0 = None
    set_0 = {tuple_1, tuple_1, tuple_0, tuple_0}
    dict_0 = {tuple_0: tuple_1, tuple_1: tuple_1, tuple_0: set_0, tuple_0: set_0}
    dict_1 = {}
    validation_0 = module_0.Validation(dict_0, dict_1)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_either()
    var_2 = var_1.__eq__(none_type_0)
    var_0.to_lazy()


def test_case_15():
    bool_0 = True
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_maybe()
    validation_1 = module_0.Validation(bool_0, bool_0)
    var_1 = validation_1.to_box()
    var_2 = validation_1.__eq__(validation_1)
    var_1.map(bool_0)


def test_case_16():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_lazy()
    validation_0.ap(var_0)


def test_case_17():
    bool_0 = True
    str_0 = "\n        Take function and applied this function with monad value and returns new monad with mapped value.\n\n        :params mapper: function to apply on monad value\n        :type mapper: Function(A) -> B\n        :returns: for successfully new Try with mapped value, othercase copy of self\n        :rtype: Try[B]\n        "
    validation_0 = module_0.Validation(str_0, bool_0)
    bool_1 = False
    validation_1 = module_0.Validation(bool_0, bool_1)
    var_0 = validation_0.__eq__(validation_1)
    validation_0.to_try()
