# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(bool_0)


def test_case_1():
    bytes_0 = b"\x19>\x11\xee*\xf3\xd12\x92p"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.__str__()
    validation_1 = module_0.Validation(var_0, var_0)
    var_2 = validation_1.__eq__(bytes_0)
    validation_0.ap(bytes_0)


def test_case_2():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.__eq__(list_0)
    var_1.to_box()


def test_case_3():
    bool_0 = False
    bytes_0 = b"\x19>\x11\xee*\xf3\xd12\x92p"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_either()
    validation_1 = module_0.Validation(bool_0, bytes_0)
    var_2 = validation_0.__str__()
    validation_2 = module_0.Validation(var_1, var_1)
    var_3 = validation_2.__eq__(bytes_0)
    var_3.ap(bytes_0)


def test_case_4():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)


def test_case_5():
    bytes_0 = b"\xea\xc0\xbei\xd2]%\x99\xe3^"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.is_fail()
    var_1 = validation_0.is_success()


def test_case_6():
    bytes_0 = b"kr|C\xc95\x1e\xd9[\x94\xff\x1fyi\x9d\xbf"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    none_type_0 = None
    var_0 = validation_0.__eq__(none_type_0)
    validation_0.map(bytes_0)


def test_case_7():
    str_0 = "r&yq%G\n4c*\t|'nbe7\n"
    none_type_0 = None
    validation_0 = module_0.Validation(str_0, none_type_0)
    validation_0.bind(none_type_0)


def test_case_8():
    float_0 = 1873.697604
    bool_0 = True
    none_type_0 = None
    validation_0 = module_0.Validation(bool_0, none_type_0)
    validation_0.ap(float_0)


def test_case_9():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_box()


def test_case_10():
    int_0 = -3752
    validation_0 = module_0.Validation(int_0, int_0)
    int_1 = 1799
    none_type_0 = None
    validation_1 = module_0.Validation(int_1, none_type_0)
    var_0 = validation_1.to_lazy()


def test_case_11():
    bool_0 = False
    bytes_0 = b"\x19>\x11\xee*\xf3\xd12\x92p"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, bytes_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_either()
    var_2 = var_1.to_box()
    var_3 = var_2.to_maybe()
    validation_1 = module_0.Validation(bool_0, bytes_0)
    validation_2 = module_0.Validation(var_1, var_1)
    var_4 = validation_2.__eq__(bytes_0)
    var_4.bind(validation_1)


def test_case_12():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.to_try()


def test_case_13():
    bool_0 = False
    bytes_0 = b"\x19>\x11\xee*\xf3\xd12\x92p"
    none_type_0 = None
    validation_0 = module_0.Validation(bool_0, bytes_0)
    var_0 = validation_0.__str__()
    validation_1 = module_0.Validation(bytes_0, none_type_0)
    var_1 = var_0.__str__()
    var_2 = validation_0.__eq__(validation_1)
    var_0.bind(validation_1)


def test_case_14():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    none_type_0 = None
    var_0 = validation_0.__eq__(none_type_0)
    var_1 = validation_0.__eq__(validation_0)
    var_2 = validation_0.to_either()
    var_1.ap(var_1)


def test_case_15():
    bytes_0 = b"\x19>\x11\xee*\xf3\xd12\x92p"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, bytes_0)
    var_0 = validation_0.to_either()
    none_type_1 = None
    var_1 = var_0.to_box()
    var_2 = var_1.to_lazy()
    var_3 = var_2.to_maybe()
    set_0 = set()
    validation_1 = module_0.Validation(none_type_1, set_0)
    var_4 = validation_1.__str__()
    validation_2 = module_0.Validation(var_3, var_1)
    var_5 = var_4.__eq__(validation_1)
    var_6 = var_0.bind(var_0)
