# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bool_0 = False
    none_type_0 = None
    validation_0 = module_0.Validation(bool_0, none_type_0)
    bytes_0 = b"\x86\xd8\xef%\xa7\x12\x0b\xcf"
    set_0 = {bytes_0}
    validation_1 = module_0.Validation(set_0, bool_0)
    var_0 = validation_1.__eq__(validation_0)
    var_0.to_maybe()


def test_case_1():
    int_0 = -478
    list_0 = [int_0, int_0, int_0, int_0]
    str_0 = ';"$R'
    bytes_0 = b"tU\x1f"
    float_0 = 198.96514
    tuple_0 = (bytes_0, float_0)
    validation_0 = module_0.Validation(tuple_0, bytes_0)
    var_0 = validation_0.__eq__(str_0)
    var_1 = var_0.__eq__(list_0)
    var_1.is_success()


def test_case_2():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    validation_0 = module_0.Validation(bool_0, set_0)
    var_0 = validation_0.to_maybe()


def test_case_3():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)


def test_case_4():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.to_try()


def test_case_5():
    bytes_0 = b"@\x1f"
    float_0 = 198.96514
    tuple_0 = (bytes_0, float_0)
    validation_0 = module_0.Validation(tuple_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.is_fail()
    var_2 = validation_0.__str__()
    var_0.is_fail()


def test_case_6():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.map(validation_0)


def test_case_7():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.bind(validation_0)


def test_case_8():
    set_0 = set()
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.ap(set_0)


def test_case_9():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_box()


def test_case_10():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_lazy()


def test_case_11():
    bytes_0 = b"l\xf7|D\x97\x97\xcd\x8c\r\x11<\xf3f^l\xb0a\xbe"
    complex_0 = -1521.6837 + 1514.5835j
    validation_0 = module_0.Validation(bytes_0, complex_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.map(bytes_0)
    var_2 = var_1.to_try()
    var_3 = var_2.bind(bytes_0)
    var_3.to_box()


def test_case_12():
    bytes_0 = b"@\x1f"
    float_0 = 198.96514
    tuple_0 = (bytes_0, float_0)
    validation_0 = module_0.Validation(tuple_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_maybe()
    var_2 = validation_0.is_fail()
    var_3 = validation_0.__str__()
    var_0.is_fail()


def test_case_13():
    bool_0 = False
    none_type_0 = None
    validation_0 = module_0.Validation(bool_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)
    var_0.to_maybe()


def test_case_14():
    bytes_0 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_maybe()
    var_2 = var_1.to_lazy()
    var_3 = var_2.map(bytes_0)
    var_3.is_fail()


def test_case_15():
    int_0 = -478
    list_0 = [int_0, int_0, int_0, int_0]
    bytes_0 = b""
    float_0 = 198.96514
    tuple_0 = (bytes_0, float_0)
    validation_0 = module_0.Validation(tuple_0, bytes_0)
    var_0 = validation_0.__eq__(list_0)
    var_1 = validation_0.to_maybe()
    var_2 = validation_0.is_fail()
    var_3 = validation_0.__str__()
    var_1.is_fail()
