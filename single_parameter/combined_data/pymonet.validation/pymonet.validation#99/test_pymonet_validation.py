# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    float_0 = 1722.23
    validation_0 = module_0.Validation(float_0, float_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = var_0.__str__()
    var_2 = var_0.__eq__(float_0)
    bool_0 = False
    var_0.ap(bool_0)


def test_case_1():
    float_0 = 1722.23
    none_type_0 = None
    none_type_1 = None
    validation_0 = module_0.Validation(float_0, none_type_1)
    var_0 = validation_0.__eq__(none_type_0)
    var_1 = var_0.__str__()
    var_2 = var_0.__eq__(float_0)
    var_2.to_lazy()


def test_case_2():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    none_type_0 = None
    var_0 = validation_0.__str__()
    validation_1 = module_0.Validation(none_type_0, validation_0)
    var_1 = validation_0.to_either()
    var_2 = var_1.__eq__(validation_1)
    var_3 = var_1.__eq__(var_1)
    var_4 = var_1.to_maybe()
    var_5 = var_4.__eq__(list_0)
    var_1.map(var_1)


def test_case_3():
    str_0 = ':C]eHr"(6vl|s\rr&2$-|'
    str_1 = "\n    The Either type represents values with two possibilities: B value of type Either[A, B] is either Left[A or Right[B]\n    But not both in the same time.\n    "
    validation_0 = module_0.Validation(str_1, str_0)
    var_0 = validation_0.__str__()
    validation_0.ap(str_0)


def test_case_4():
    str_0 = ""
    validation_0 = module_0.Validation(str_0, str_0)
    dict_0 = {}
    validation_1 = module_0.Validation(str_0, dict_0)
    var_0 = validation_1.to_either()
    var_1 = validation_1.to_maybe()
    var_2 = var_0.__str__()
    var_3 = validation_0.to_either()
    var_3.is_fail()


def test_case_5():
    bytes_0 = b"y\xde\x11\x14\xa4o\xb3\x1a\x86\x9fbb\xe4\x95\x05\xd3\x14\xa0\x9e"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.ap(dict_0)
    var_2 = var_1.to_lazy()
    var_1.is_fail()


def test_case_6():
    bytes_0 = b"`\x88\x00\xdf_"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    bool_0 = False
    validation_1 = module_0.Validation(bool_0, bool_0)
    var_1 = validation_1.to_lazy()
    var_1.to_lazy()


def test_case_7():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_8():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.is_success()


def test_case_9():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.is_fail()


def test_case_10():
    str_0 = "\n    Min is a Monoid that will combines 2 numbers, resulting in the smallest of the two.\n    "
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.map(str_0)


def test_case_11():
    set_0 = set()
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, set_0)
    validation_0.bind(none_type_0)


def test_case_12():
    int_0 = 1
    none_type_0 = None
    validation_0 = module_0.Validation(int_0, none_type_0)
    var_0 = validation_0.to_box()
    var_0.is_fail()


def test_case_13():
    int_0 = 1
    none_type_0 = None
    validation_0 = module_0.Validation(int_0, none_type_0)
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_0.to_lazy()


def test_case_14():
    float_0 = 1513.611
    validation_0 = module_0.Validation(float_0, float_0)
    validation_0.to_try()


def test_case_15():
    float_0 = 1722.23
    none_type_0 = None
    validation_0 = module_0.Validation(float_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = var_0.__str__()
    var_2 = var_0.__eq__(float_0)
    validation_1 = module_0.Validation(var_0, var_1)
    var_3 = validation_0.to_lazy()
    var_4 = var_3.to_try()
    var_4.to_lazy()


def test_case_16():
    str_0 = '0 l2@(-O I:M;"q8>v'
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_1 = module_0.Validation(var_0, var_0)
    var_1 = validation_0.__eq__(validation_1)
    var_0.to_lazy()
