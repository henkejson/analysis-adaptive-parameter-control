# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.__eq__(validation_0)


def test_case_1():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.__eq__(var_0)


def test_case_2():
    bytes_0 = b"\x88qr\xd6%\xb4e<Y"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.__str__()
    var_2 = var_0.to_try()
    var_0.is_success()


def test_case_3():
    bool_0 = False
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_maybe()
    var_2 = var_1.__eq__(bool_0)
    var_3 = validation_0.to_maybe()
    var_3.to_maybe()


def test_case_4():
    none_type_0 = None
    str_0 = "'"
    list_0 = [str_0, str_0]
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_try()
    var_1.ap(none_type_0)


def test_case_5():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)


def test_case_6():
    float_0 = -923.2594
    set_0 = {float_0, float_0, float_0}
    validation_0 = module_0.Validation(set_0, float_0)
    validation_0.__str__()


def test_case_7():
    int_0 = 3027
    bool_0 = True
    set_0 = {int_0, bool_0, bool_0, bool_0}
    validation_0 = module_0.Validation(set_0, int_0)
    validation_0.is_fail()


def test_case_8():
    none_type_0 = None
    none_type_1 = None
    validation_0 = module_0.Validation(none_type_1, none_type_1)
    validation_0.map(none_type_0)


def test_case_9():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_0.bind(bool_0)


def test_case_10():
    bytes_0 = b"\x1cB"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_box()
    float_0 = 3433.398433
    complex_0 = 556.3573 + 1356.225j
    validation_1 = module_0.Validation(complex_0, complex_0)
    validation_1.map(float_0)


def test_case_11():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_lazy()
    validation_0.to_either()


def test_case_12():
    int_0 = -1255
    int_1 = 282
    validation_0 = module_0.Validation(int_1, int_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_try()
    var_1.to_maybe()


def test_case_13():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.to_try()


def test_case_14():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_0.ap(var_0)


def test_case_15():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.__str__()
    var_0.to_lazy()


def test_case_16():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    int_0 = -107
    str_0 = ">f"
    validation_1 = module_0.Validation(int_0, str_0)
    var_0 = validation_0.__eq__(validation_1)
    var_0.is_success()
