# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0
import builtins as module_1


def test_case_0():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.__eq__(tuple_0)
    var_1 = var_0.__eq__(var_0)
    var_0.is_fail()


def test_case_1():
    bytes_0 = b"\xf1j\x1e\x99S"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.is_fail()
    var_1 = validation_0.__str__()
    var_2 = validation_0.is_fail()
    var_3 = validation_0.to_maybe()
    var_1.is_fail()


def test_case_2():
    str_0 = "\n        Take 2 functions call only one of then with either value and return her result.\n\n        :params error: function to call when Either is Left\n        :type error: Function(A) -> B\n        :params success: function to call when Either is Right\n        :type success: Function(A) -> B\n        :returns: result of success handler when Eihter is Right, result of error handler when Eihter is Left\n        :rtpye: B\n        "
    str_1 = "5&#-kZI`?59"
    set_0 = {str_1}
    validation_0 = module_0.Validation(set_0, str_1)
    validation_1 = module_0.Validation(set_0, str_1)
    var_0 = validation_0.to_either()
    var_1 = validation_1.to_box()
    var_2 = var_1.__eq__(str_0)
    var_2.to_try()


def test_case_3():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.to_box()
    var_1.is_success()


def test_case_4():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)


def test_case_5():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.to_maybe()


def test_case_6():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_box()
    var_1 = module_0.Validation(validation_0, validation_0)
    var_2 = var_1.__eq__(var_1)
    var_1.is_fail()


def test_case_7():
    bool_0 = True
    none_type_0 = None
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.map(none_type_0)


def test_case_8():
    int_0 = 2435
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.bind(int_0)


def test_case_9():
    none_type_0 = None
    bool_0 = True
    set_0 = {none_type_0, bool_0, bool_0}
    validation_0 = module_0.Validation(set_0, bool_0)
    validation_0.ap(none_type_0)


def test_case_10():
    int_0 = 1
    validation_0 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_lazy()
    var_2 = var_1.ap(var_0)
    validation_1 = module_0.Validation(int_0, var_1)
    var_1.is_fail()


def test_case_11():
    bytes_0 = b"\t\xbf\xa51\x12\x07u\x11\x0b\xb8"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.to_maybe()
    var_2 = var_0.bind(bytes_0)
    var_3 = var_0.ap(var_0)
    validation_1 = module_0.Validation(var_0, bytes_0)
    var_4 = validation_1.to_lazy()
    var_5 = validation_1.to_try()
    var_6 = var_5.__eq__(var_2)
    bool_0 = True
    list_0 = [bool_0, bool_0]
    none_type_0 = None
    validation_2 = module_0.Validation(list_0, none_type_0)
    var_7 = var_4.to_try()
    validation_2.to_maybe()


def test_case_12():
    float_0 = -1222.1113
    none_type_0 = None
    validation_0 = module_0.Validation(float_0, none_type_0)
    validation_0.to_try()


def test_case_13():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.__eq__(tuple_0)
    module_1.object(**var_1)


def test_case_14():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.__eq__(tuple_0)
    validation_1 = module_0.Validation(var_1, validation_0)
    var_2 = validation_1.__eq__(validation_1)
    var_1.ap(var_1)


def test_case_15():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.__eq__(validation_0)
    validation_1 = module_0.Validation(validation_0, validation_0)
    var_2 = validation_1.__eq__(validation_0)
    validation_0.map(var_1)
