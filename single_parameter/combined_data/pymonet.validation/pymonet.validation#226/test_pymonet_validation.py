# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bytes_0 = b"\x00\x12\xcc\x92\x1f"
    tuple_0 = (bytes_0,)
    set_0 = {tuple_0, tuple_0, bytes_0}
    str_0 = "I5?_9bv;Ymu P~{I4"
    none_type_0 = None
    validation_0 = module_0.Validation(str_0, none_type_0)
    var_0 = validation_0.__eq__(set_0)


def test_case_1():
    bytes_0 = b"\xdb#\xf8L\xef\n\xcc\xcf"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    var_0.is_success()


def test_case_2():
    str_0 = "_1"
    validation_0 = module_0.Validation(str_0, str_0)
    validation_1 = validation_0.is_fail()
    var_0 = validation_0.__str__()
    validation_2 = validation_0.to_maybe()
    var_1 = module_0.Validation(var_0, validation_1)
    var_1.map(var_1)


def test_case_3():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)


def test_case_4():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.is_success()


def test_case_5():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.is_fail()


def test_case_6():
    bytes_0 = b"\xa99\x14\xf5w\xdf"
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.bind(bytes_0)


def test_case_7():
    int_0 = 2695
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, int_0)
    bool_0 = True
    str_0 = "Lazy[T, W]"
    bool_1 = False
    tuple_0 = (none_type_0, str_0, bool_1)
    validation_1 = module_0.Validation(tuple_0, bool_0)
    validation_2 = module_0.Validation(bool_0, str_0)
    validation_2.ap(int_0)


def test_case_8():
    bytes_0 = b">+\x01\xa7"
    int_0 = -2116
    str_0 = "_1"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.__str__()
    validation_1 = module_0.Validation(var_1, var_0)
    var_2 = validation_1.__eq__(int_0)
    var_2.map(bytes_0)


def test_case_9():
    float_0 = 906.227
    none_type_0 = None
    validation_0 = module_0.Validation(float_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_maybe()
    var_2 = var_1.__str__()
    var_2.to_either()


def test_case_10():
    int_0 = -1534
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.to_try()


def test_case_11():
    bytes_0 = b"\xaeTs\xcfz"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()


def test_case_12():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    str_0 = ",~G<< 7"
    set_0 = {str_0}
    tuple_0 = (str_0, set_0)
    str_1 = "R$"
    validation_1 = module_0.Validation(str_1, str_1)
    var_0 = validation_1.to_try()
    var_1 = var_0.map(tuple_0)
    var_2 = validation_1.to_lazy()
    var_3 = validation_1.__eq__(validation_0)
    validation_0.__str__()


def test_case_13():
    str_0 = "_1"
    var_0 = str_0.__str__()
    validation_0 = module_0.Validation(var_0, str_0)
    var_1 = var_0.__str__()
    var_2 = validation_0.__eq__(validation_0)
    var_2.map(var_2)


def test_case_14():
    bytes_0 = b">+\x01\xa7"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.to_try()
    var_2 = var_0.to_lazy()
    str_0 = ""
    validation_1 = module_0.Validation(str_0, str_0)
    var_3 = validation_1.to_box()
    var_4 = var_3.__str__()
    var_5 = validation_1.__str__()
    var_6 = validation_0.to_box()
    var_6.to_box()


def test_case_15():
    bytes_0 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_0.to_either()


def test_case_16():
    str_0 = ""
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    validation_0.map(str_0)
