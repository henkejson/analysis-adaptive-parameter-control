# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    none_type_0 = None
    none_type_1 = None
    validation_0 = module_0.Validation(none_type_1, none_type_1)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.__eq__(none_type_0)
    validation_0.bind(none_type_1)


def test_case_1():
    str_0 = "h}Z:n"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.__str__()
    none_type_0 = None
    none_type_1 = None
    validation_1 = module_0.Validation(none_type_1, none_type_1)
    var_2 = validation_1.__eq__(validation_1)
    var_3 = validation_1.__eq__(none_type_0)
    var_2.is_success()


def test_case_2():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_maybe()
    dict_1 = {}
    validation_1 = module_0.Validation(dict_1, dict_0)
    bool_0 = True
    validation_2 = module_0.Validation(bool_0, bool_0)
    var_2 = validation_2.to_lazy()
    var_3 = var_2.ap(dict_0)
    bytes_0 = b"\x99\x8a"
    validation_3 = module_0.Validation(bytes_0, bytes_0)
    var_4 = validation_3.__str__()
    var_4.is_success()


def test_case_3():
    str_0 = "h!}Z:nU"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.is_fail()
    var_1 = validation_0.to_either()
    var_2 = var_1.__str__()
    var_3 = validation_0.to_maybe()
    none_type_0 = None
    var_4 = validation_0.__eq__(none_type_0)
    var_4.to_try()


def test_case_4():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_5():
    bool_0 = True
    set_0 = {bool_0}
    none_type_0 = None
    validation_0 = module_0.Validation(set_0, none_type_0)
    validation_0.__str__()


def test_case_6():
    bytes_0 = b"]\xfd\xef\x8a\xe6\xfb\xac\xca\nMu\x0b;T\xa8\xa2\xde"
    none_type_0 = None
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_0.map(none_type_0)


def test_case_7():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    none_type_0 = None
    validation_1 = module_0.Validation(list_0, none_type_0)
    validation_1.bind(validation_1)


def test_case_8():
    complex_0 = -229.68904 + 1147.03j
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.ap(complex_0)


def test_case_9():
    str_0 = "h!}Z:nU"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.to_box()
    var_2 = validation_0.__eq__(validation_0)
    var_3 = var_2.__eq__(var_0)
    var_3.to_try()


def test_case_10():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_lazy()
    var_0.is_fail()


def test_case_11():
    bytes_0 = b"\xd3\x0f"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.__str__()
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    var_2 = validation_1.to_lazy()
    var_3 = var_0.to_try()
    var_4 = var_2.__eq__(none_type_0)
    var_4.to_maybe()


def test_case_12():
    str_0 = "h!}Z:nU"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    none_type_0 = None
    none_type_1 = None
    validation_1 = module_0.Validation(none_type_1, none_type_1)
    var_1 = validation_1.__eq__(validation_1)
    var_2 = validation_1.__eq__(none_type_0)
    validation_1.to_try()


def test_case_13():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_lazy()
    none_type_0 = None
    validation_0.map(none_type_0)


def test_case_14():
    str_0 = "h!}Z:nU"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    none_type_0 = None
    none_type_1 = None
    validation_1 = module_0.Validation(none_type_1, none_type_1)
    var_1 = var_0.ap(none_type_0)
    var_2 = validation_1.__eq__(validation_0)
    var_2.bind(str_0)


def test_case_15():
    str_0 = "h!}Z:nU"
    int_0 = 640
    dict_0 = {}
    validation_0 = module_0.Validation(int_0, dict_0)
    var_0 = validation_0.to_maybe()
    none_type_0 = None
    complex_0 = 3653.4 + 233.24792j
    tuple_0 = (var_0, dict_0, str_0, complex_0)
    validation_1 = module_0.Validation(none_type_0, tuple_0)
    var_1 = validation_1.__eq__(var_0)
    var_2 = var_1.__eq__(dict_0)
    var_3 = var_2.__eq__(dict_0)
    var_4 = validation_1.to_box()
    var_0.is_fail()
