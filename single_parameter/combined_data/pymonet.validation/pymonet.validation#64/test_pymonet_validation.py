# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    none_type_0 = None
    tuple_0 = ()
    none_type_1 = None
    validation_0 = module_0.Validation(tuple_0, none_type_1)
    var_0 = validation_0.__eq__(none_type_0)
    var_1 = none_type_0.__str__()


def test_case_1():
    bytes_0 = b";\xf8\x9e\xf7P\xd2\x97NBI}\xdb\x92@\x04\xa6\x92\xf4"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_either()
    var_2 = validation_0.to_lazy()
    var_3 = validation_0.to_either()


def test_case_2():
    bytes_0 = b";\xf8\x9e\xf7P\xd2\x97NBI}\xdb\x92@\x04\xa6\x92\xf4"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_lazy()
    var_2 = validation_0.to_either()


def test_case_3():
    none_type_0 = None
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_maybe()
    var_0.map(none_type_0)


def test_case_4():
    str_0 = "!Ni!\x0bke!wL~*O"
    tuple_0 = (str_0,)
    validation_0 = module_0.Validation(tuple_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.is_success()
    none_type_0 = None
    var_2 = validation_0.to_either()
    validation_0.ap(none_type_0)


def test_case_5():
    none_type_0 = None
    none_type_0.to_lazy()


def test_case_6():
    complex_0 = -660.25 + 1383.2j
    validation_0 = module_0.Validation(complex_0, complex_0)


def test_case_7():
    bytes_0 = b"rpH\xc6\xdbC\\\xf6py\xf8\x0b"
    bool_0 = True
    validation_0 = module_0.Validation(bytes_0, bool_0)
    validation_0.__str__()


def test_case_8():
    bool_0 = True
    complex_0 = -660.25 + 1383.2j
    validation_0 = module_0.Validation(complex_0, bool_0)
    validation_0.is_fail()


def test_case_9():
    none_type_0 = None
    none_type_1 = None
    validation_0 = module_0.Validation(none_type_1, none_type_1)
    validation_0.map(none_type_0)


def test_case_10():
    int_0 = 1
    bytes_0 = b"Q\x16#\xb9l\x02\xa3K>\xd4"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_0.bind(int_0)


def test_case_11():
    str_0 = "!Ni!\x0bke!wL~*O"
    tuple_0 = (str_0,)
    validation_0 = module_0.Validation(tuple_0, str_0)
    var_0 = validation_0.__eq__(tuple_0)
    var_1 = validation_0.is_success()
    none_type_0 = None
    var_2 = validation_0.to_either()
    validation_0.ap(none_type_0)


def test_case_12():
    int_0 = -842
    list_0 = [int_0, int_0]
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_box()
    var_0.map(int_0)


def test_case_13():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()


def test_case_14():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_maybe()
    var_1.is_fail()


def test_case_15():
    bool_0 = True
    set_0 = {bool_0}
    none_type_0 = None
    validation_0 = module_0.Validation(set_0, none_type_0)
    validation_0.to_try()


def test_case_16():
    bytes_0 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_maybe()
    var_1.bind(bytes_0)


def test_case_17():
    str_0 = "{\rBby!2|\rX?4mt\\%sr4"
    complex_0 = 676.81755 - 325.3242614591857j
    validation_0 = module_0.Validation(complex_0, complex_0)
    validation_1 = module_0.Validation(str_0, str_0)
    var_0 = validation_1.__eq__(validation_0)
    var_0.is_success()


def test_case_18():
    str_0 = "{\rBby!2|\rX?4mt\\%sr4"
    complex_0 = 676.81755 - 325.3242614591857j
    validation_0 = module_0.Validation(complex_0, complex_0)
    var_0 = validation_0.__eq__(validation_0)
    str_1 = ""
    validation_1 = module_0.Validation(str_0, str_1)
    validation_1.map(str_0)


def test_case_19():
    int_0 = -1244
    tuple_0 = ()
    validation_0 = module_0.Validation(int_0, tuple_0)
    var_0 = validation_0.__str__()
    var_0.to_either()
