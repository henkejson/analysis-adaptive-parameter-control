# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(bool_0)
    validation_0.bind(var_0)


def test_case_1():
    none_type_0 = None
    str_0 = ">S2\\kERQ5w1Sj1Y>"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    str_0.ap(none_type_0)


def test_case_2():
    str_0 = "\x0b`.7F"
    validation_0 = module_0.Validation(str_0, str_0)


def test_case_3():
    int_0 = 1
    tuple_0 = (int_0,)
    bool_0 = True
    validation_0 = module_0.Validation(tuple_0, bool_0)
    validation_0.to_maybe()


def test_case_4():
    bool_0 = True
    complex_0 = -2153.1 - 23.3j
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: complex_0}
    validation_0 = module_0.Validation(dict_0, bool_0)
    validation_0.is_fail()


def test_case_5():
    str_0 = "vi-_!~Gs^1m_\x0bcmFoF"
    validation_0 = module_0.Validation(str_0, str_0)
    none_type_0 = None
    validation_0.map(none_type_0)


def test_case_6():
    int_0 = 137
    validation_0 = module_0.Validation(int_0, int_0)
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    validation_2 = module_0.Validation(none_type_0, none_type_0)
    validation_0.ap(none_type_0)


def test_case_7():
    bool_0 = True
    none_type_0 = None
    validation_0 = module_0.Validation(bool_0, none_type_0)
    var_0 = validation_0.to_box()
    var_0.is_fail()


def test_case_8():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    validation_0 = module_0.Validation(bool_0, set_0)
    var_0 = validation_0.to_lazy()


def test_case_9():
    int_0 = -2008
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.to_try()


def test_case_10():
    int_0 = 137
    validation_0 = module_0.Validation(int_0, int_0)
    none_type_0 = None
    validation_1 = validation_0.__eq__(validation_0)
    validation_2 = module_0.Validation(none_type_0, none_type_0)
    validation_0.ap(none_type_0)


def test_case_11():
    none_type_0 = None
    none_type_1 = None
    str_0 = "\n    Data type for storage any type of function.\n    This function (and all his mappers) will be called only during calling fold method\n    "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.__str__()
    validation_1 = module_0.Validation(none_type_0, str_0)
    var_1.bind(none_type_1)


def test_case_12():
    str_0 = "\x0b`.7FB"
    int_0 = 1401
    validation_0 = module_0.Validation(int_0, str_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.to_lazy()
    validation_1 = module_0.Validation(int_0, validation_0)
    var_2 = validation_0.__eq__(str_0)
    var_3 = var_1.to_box()
    var_4 = var_3.to_maybe()
    var_5 = validation_0.is_success()
    var_6 = var_4.to_try()
    var_7 = validation_0.is_success()
    var_6.to_either()


def test_case_13():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_maybe()
    var_0.bind(var_0)


def test_case_14():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_either()
    var_2 = var_1.to_lazy()
    var_1.to_either()


def test_case_15():
    str_0 = "vi-_!~Gs^1m_\x0bcmFoF"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    none_type_0 = None
    validation_0.map(none_type_0)


def test_case_16():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_either()
    var_2 = validation_0.__eq__(dict_0)
    var_3 = var_1.to_lazy()
    var_4 = validation_0.__str__()
    var_1.to_either()


def test_case_17():
    str_0 = "Validation.fail[None, \n    Data type for storage any type of function.\n    This function (and all his mappers) will be called only during calling fold method\n    ]"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, str_0)
    var_0 = validation_0.__str__()
    none_type_1 = None
    complex_0 = 4403.92207 - 338.1j
    validation_1 = module_0.Validation(str_0, complex_0)
    var_1 = validation_1.__eq__(none_type_1)
    var_2 = validation_0.__eq__(validation_1)
    validation_0.bind(validation_1)
