# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    complex_0 = -1741.9287 + 1981.28385j
    bytes_0 = b"\xa4P\x9f\x00\xcd\xe6\x82X\x97\xa1\xe3\xba\xa7\x11V\x97\xa7\x8c+"
    list_0 = [bytes_0]
    validation_0 = module_0.Validation(list_0, bytes_0)
    var_0 = validation_0.__eq__(complex_0)
    var_0.is_success()


def test_case_1():
    bytes_0 = b"\x1c\xca1b\xef\xbc\\\x80\xe8\x99H\xa8\x1f"
    list_0 = []
    validation_0 = module_0.Validation(bytes_0, list_0)
    var_0 = validation_0.__str__()
    var_0.is_success()


def test_case_2():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_lazy()
    var_2 = var_1.__str__()
    var_2.bind(validation_0)


def test_case_3():
    none_type_0 = None
    bytes_0 = b"Z0j\xb9\x8c\xd4\xf9"
    validation_0 = module_0.Validation(none_type_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.to_either()
    var_2 = var_0.map(validation_0)
    var_3 = module_0.Validation(bytes_0, bytes_0)
    validation_1 = module_0.Validation(var_3, var_3)


def test_case_4():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_5():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.__str__()


def test_case_6():
    float_0 = 119.3
    validation_0 = module_0.Validation(float_0, float_0)
    validation_0.is_fail()


def test_case_7():
    complex_0 = 3233.83 + 352.04j
    bytes_0 = b"\xa4P\x9f\x00\xcd\xe6\x82X\x97\xa1\xe3\xba\xa7\x11V\x97\xa7\x8c+"
    validation_0 = module_0.Validation(bytes_0, complex_0)
    list_0 = [bytes_0]
    validation_1 = module_0.Validation(list_0, bytes_0)
    var_0 = validation_1.__eq__(complex_0)
    validation_1.map(complex_0)


def test_case_8():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    validation_0.bind(dict_0)


def test_case_9():
    complex_0 = -1741.9287 + 1981.28385j
    bytes_0 = b"\xa4P\x9f\x00\xcd\xe6\x82X\x97\xa1\xe3\xba\xa7\x11V\x97\xa7\x8c+"
    list_0 = [bytes_0]
    validation_0 = module_0.Validation(list_0, bytes_0)
    var_0 = validation_0.__eq__(complex_0)
    validation_0.ap(var_0)


def test_case_10():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_box()
    var_0.is_fail()


def test_case_11():
    complex_0 = -1741.9287 + 1981.28385j
    bytes_0 = b"\xa4P\x9f\x00\xcd\xe6\x82X\x97\xa1\xe3\xba\xa7\x11V\x97\xa7\x8c+"
    str_0 = "\n        Transform Lazy into Box with constructor_fn result.\n\n        :returns: Box monad with constructor_fn result\n        :rtype: Box[A]\n        "
    validation_0 = module_0.Validation(bytes_0, str_0)
    var_0 = validation_0.to_maybe()
    validation_1 = validation_0.to_lazy()
    var_1 = validation_1.__eq__(complex_0)
    validation_0.ap(var_1)


def test_case_12():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_maybe()
    var_2 = var_1.__eq__(none_type_0)
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    validation_1.__str__()


def test_case_13():
    str_0 = "#wdaI%>BNA?IAj9|3]"
    none_type_0 = None
    validation_0 = module_0.Validation(str_0, none_type_0)
    validation_0.to_try()


def test_case_14():
    none_type_0 = None
    bytes_0 = b"Z0j\xb9\x8c\xd4\xf9"
    validation_0 = module_0.Validation(none_type_0, bytes_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.__eq__(validation_0)
    var_2 = var_0.__eq__(none_type_0)
    var_3 = validation_0.to_maybe()
    var_4 = var_3.to_try()
    var_0.ap(var_4)


def test_case_15():
    bytes_0 = b"\xa4P\x9f\x00\xcd\xe6\x82X\x97\xa1\xe3\xba\xa7\x11V\x97\xa7\x8c+"
    list_0 = [bytes_0]
    validation_0 = module_0.Validation(list_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)
    bytes_0.bind(bytes_0)


def test_case_16():
    complex_0 = -1741.9287 + 1981.28385j
    bytes_0 = b"\xa4P\x9f\x00\xcd\xe6\x82X\x97\xa1\xe3\xba\xa7\x11V\x97\xa7\x8c+"
    list_0 = [bytes_0]
    validation_0 = module_0.Validation(list_0, bytes_0)
    var_0 = validation_0.__eq__(complex_0)
    validation_1 = module_0.Validation(var_0, complex_0)
    var_1 = var_0.__eq__(var_0)
    var_2 = validation_0.__eq__(validation_1)
    var_2.bind(complex_0)


def test_case_17():
    int_0 = 3197
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_maybe()
    var_0.ap(int_0)
