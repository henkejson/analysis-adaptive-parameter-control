# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(bool_0)
    var_0.to_either()


def test_case_1():
    bytes_0 = b"=\t\x9a\x11{\xe8"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.__eq__(validation_0)
    var_2 = validation_0.is_fail()


def test_case_2():
    bytes_0 = b"y\xef\xa1 Y\xb5{\x8b\xb1\xa3\xed\xab\xd3\xae\\q\xbf"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_1 = validation_0.to_maybe()
    var_0 = validation_1.__eq__(validation_0)
    var_1 = validation_1.__str__()
    var_0.to_try()


def test_case_3():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_4():
    bytes_0 = b"@\x15\x970~\x03\xbf\xd2[\xc6*t"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.is_success()
    var_0.to_lazy()


def test_case_5():
    bytes_0 = b'\xde"I\xcb\xfe\t\x90H\xa6}fx\x82O\x93\xf8Q\x8bs5'
    float_0 = 4102.0
    validation_0 = module_0.Validation(float_0, float_0)
    validation_0.map(bytes_0)


def test_case_6():
    bytes_0 = b"=\t\x9a\x11{\xe8"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    validation_1 = module_0.Validation(validation_0, var_0)
    validation_2 = module_0.Validation(bytes_0, validation_1)
    var_1 = validation_2.__eq__(var_0)
    var_2 = var_0.to_try()
    validation_1.bind(validation_2)


def test_case_7():
    none_type_0 = None
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.ap(none_type_0)


def test_case_8():
    bytes_0 = b"=\t\x9a\x11{\xe8"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.__eq__(validation_0)
    var_2 = validation_0.to_box()
    var_0.is_success()


def test_case_9():
    bool_0 = True
    bool_1 = False
    validation_0 = module_0.Validation(bool_1, bool_1)
    var_0 = validation_0.__eq__(bool_0)
    var_1 = validation_0.to_lazy()
    var_0.ap(bool_1)


def test_case_10():
    bool_0 = False
    int_0 = -847
    validation_0 = module_0.Validation(bool_0, int_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_either()
    bool_1 = True
    validation_1 = module_0.Validation(bool_1, int_0)
    complex_0 = -240 + 937.1j
    var_2 = validation_1.__eq__(complex_0)
    var_2.ap(complex_0)


def test_case_11():
    bytes_0 = b"=\t\x9a\x11{\xe8"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_try()
    var_0.bind(bytes_0)


def test_case_12():
    bytes_0 = b"=\t\x9a\x11{\xe8"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    validation_1 = module_0.Validation(validation_0, validation_0)
    var_1 = validation_1.__eq__(validation_0)
    var_1.to_try()


def test_case_13():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    set_0 = set()
    validation_1 = module_0.Validation(bool_0, set_0)
    var_0 = validation_1.to_maybe()
    var_1 = var_0.__eq__(bool_0)
    var_1.to_either()


def test_case_14():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    validation_1 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_1.to_lazy()
    var_1 = validation_1.to_try()
    validation_2 = module_0.Validation(validation_0, var_1)
    var_2 = validation_1.to_box()
    var_3 = validation_1.is_fail()
    var_4 = validation_1.to_maybe()
    var_5 = var_4.to_either()
    var_6 = validation_1.__str__()
    var_7 = validation_1.to_maybe()
    var_8 = validation_1.to_try()
    var_8.to_try()


def test_case_15():
    none_type_0 = None
    list_0 = []
    validation_0 = module_0.Validation(none_type_0, list_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_try()
    var_2 = var_1.__eq__(var_0)
    var_1.to_maybe()
