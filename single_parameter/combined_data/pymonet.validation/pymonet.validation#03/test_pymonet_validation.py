# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0
import builtins as module_1


def test_case_0():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    bytes_0 = b"\r9\xde\xdc\xb8`Yvc\xdb8\x98\xec"
    validation_0 = module_0.Validation(bool_0, bytes_0)
    var_0 = bytes_0.__str__()
    none_type_0 = None
    var_1 = validation_0.__eq__(none_type_0)
    var_2 = validation_0.to_either()
    var_3 = var_2.map(none_type_0)
    var_1.bind(list_0)


def test_case_1():
    bytes_0 = b"I.\xca\\n2J\x85,E\x1e;\xf4g\x03KY\xbe"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_0.is_fail()


def test_case_2():
    int_0 = -2517
    validation_0 = module_0.Validation(int_0, int_0)


def test_case_3():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.is_success()


def test_case_4():
    none_type_0 = None
    str_0 = "\n    In mathematics and computer science, currying is the technique of translating the evaluation of a function.\n    It that takes multiple arguments (or a tuple of arguments) into evaluating a sequence of functions.\n    each with a single argument.\n    "
    validation_0 = module_0.Validation(str_0, none_type_0)
    validation_0.is_fail()


def test_case_5():
    bool_0 = True
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.map(bool_0)


def test_case_6():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    bytes_0 = b"\r9\xde\xdc\xb8`Yvc\xdb8\x98\xec"
    validation_0 = module_0.Validation(bool_0, bytes_0)
    var_0 = validation_0.__str__()
    var_1 = var_0.__str__()
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    var_2 = validation_1.__eq__(bool_0)
    validation_0.bind(list_0)


def test_case_7():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    int_0 = 1459
    validation_0.ap(int_0)


def test_case_8():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.to_box()
    var_1.to_box()


def test_case_9():
    none_type_0 = None
    bytes_0 = b"\xecEf\x96.\x8fU9\xdb\xe0<\xaf2\xff\xed"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.bind(none_type_0)
    var_1.is_success()


def test_case_10():
    bytes_0 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.is_fail()
    var_1 = var_0.__str__()
    bool_0 = False
    validation_1 = module_0.Validation(bool_0, bool_0)
    var_2 = validation_1.to_lazy()
    var_3 = var_2.to_try()
    var_3.to_try()


def test_case_11():
    bool_0 = False
    list_0 = [bool_0]
    validation_0 = module_0.Validation(list_0, bool_0)
    validation_0.to_try()


def test_case_12():
    bool_0 = True
    none_type_0 = None
    validation_0 = module_0.Validation(bool_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.__eq__(var_0)
    var_0.to_box()


def test_case_13():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    bytes_0 = b"\r9\xde\xdc\xb8`Yvc\xdb8\x98\xec"
    validation_0 = module_0.Validation(bool_0, bytes_0)
    var_0 = validation_0.__str__()
    var_1 = var_0.__str__()
    none_type_0 = None
    var_2 = validation_0.__eq__(none_type_0)
    var_3 = validation_0.to_either()
    var_4 = var_3.map(none_type_0)
    var_2.bind(list_0)


def test_case_14():
    bool_0 = True
    bytes_0 = b"\x1a\r9\xde\xdc\xb8`Yvc\xdb8\x98\xec"
    validation_0 = module_0.Validation(bool_0, bytes_0)
    var_0 = validation_0.__str__()
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    var_1 = validation_0.to_maybe()
    var_2 = validation_0.to_try()
    var_3 = validation_1.__eq__(validation_0)
    module_1.object(*var_0)


def test_case_15():
    none_type_0 = None
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.is_fail()
    var_2 = var_1.__eq__(none_type_0)
    list_0 = [var_2, tuple_0]
    validation_1 = module_0.Validation(list_0, validation_0)
    validation_1.to_try()


def test_case_16():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.__str__()
    dict_0.to_lazy()
