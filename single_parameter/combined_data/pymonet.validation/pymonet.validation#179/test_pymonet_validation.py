# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0
import builtins as module_1


def test_case_0():
    int_0 = -917
    validation_0 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.__eq__(int_0)


def test_case_1():
    str_0 = "\n        :param semigroup: other semigroup to concat\n        :type semigroup: Map[B\t\n        :returns: new Map with concated all values\n        :rtype: Map[A]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()


def test_case_2():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.is_fail()
    var_1 = validation_0.to_either()
    var_0.to_maybe()


def test_case_3():
    bytes_0 = b"O\x9e"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()


def test_case_4():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_5():
    bytes_0 = b"s<\xcf"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.is_fail()


def test_case_6():
    float_0 = -3019.583268648818
    validation_0 = module_0.Validation(float_0, float_0)
    validation_0.map(float_0)


def test_case_7():
    bytes_0 = b"s<\xcf"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_0.bind(bytes_0)


def test_case_8():
    str_0 = "hY"
    validation_0 = module_0.Validation(str_0, str_0)
    validation_0.ap(validation_0)


def test_case_9():
    int_0 = -894
    validation_0 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.to_box()


def test_case_10():
    str_0 = "QsLb?O[F&I"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_lazy()


def test_case_11():
    bytes_0 = b"\x1f\xbd\x8d\x13\xb5"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_box()
    var_1.map(bytes_0)


def test_case_12():
    bytes_0 = b"\xa7\x84\x1f\x8d\x07\xe0\r\x13\xc9z\xc1"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_try()


def test_case_13():
    int_0 = -834
    list_0 = []
    validation_0 = module_0.Validation(int_0, list_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.__str__()
    var_2 = validation_0.to_lazy()
    var_3 = validation_0.to_maybe()
    var_3.to_maybe()


def test_case_14():
    bytes_0 = b"\x1f\xbd\x8d\x07\xe0\r\x13\xb5\xc1"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_0.to_either()


def test_case_15():
    bytes_0 = b"\x87\x05\xc8B\xe2]\x1eK"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)


def test_case_16():
    list_0 = []
    object_0 = module_1.object(*list_0)
    validation_0 = module_0.Validation(object_0, list_0)
    bytes_0 = b"x\xa87\x86\xf7\x94\xca\xeb\xc1F\xf4=(\xa0\x104"
    validation_1 = module_0.Validation(object_0, bytes_0)
    var_0 = validation_0.__eq__(validation_1)
    var_1 = var_0.__str__()
    var_2 = validation_1.to_lazy()
    var_3 = validation_1.to_either()
    var_0.bind(list_0)
