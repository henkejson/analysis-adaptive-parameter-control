# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0
import builtins as module_1


def test_case_0():
    float_0 = 30.2
    bytes_0 = b"\xff\x01H\xf8I\xfeY\xfd\xda"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(float_0)


def test_case_1():
    list_0 = []
    str_0 = "jDUSy*q2Q\x0bOTAZaSX[T{"
    validation_0 = module_0.Validation(str_0, list_0)
    var_0 = validation_0.__str__()
    var_0.is_fail()


def test_case_2():
    str_0 = "FK:-~?Wx8hqE"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.__str__()
    var_2 = validation_0.__eq__(validation_0)
    var_3 = var_0.to_box()
    var_0.to_either()


def test_case_3():
    bytes_0 = b"T\x8fr#}\xdd\xc8\x02\x15bMJ{\x89\xfd\xa8"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.__eq__(bytes_0)


def test_case_4():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_maybe()
    validation_0.bind(list_0)


def test_case_5():
    bool_0 = False
    bool_1 = True
    tuple_0 = (bool_1, bool_0)
    validation_0 = module_0.Validation(bool_0, tuple_0)
    var_0 = validation_0.to_maybe()
    var_0.is_fail()


def test_case_6():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_7():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.is_fail()
    var_0.to_try()


def test_case_8():
    none_type_0 = None
    int_0 = -183
    none_type_1 = None
    validation_0 = module_0.Validation(int_0, none_type_1)
    validation_0.map(none_type_0)


def test_case_9():
    bool_0 = False
    none_type_0 = None
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.bind(none_type_0)


def test_case_10():
    bool_0 = True
    str_0 = "\n        Transform Lazy into Box with constructor_fn result.\n\n        :returns: Box monad with constructor_fn result\n        :rtype: Box[A]\n        "
    none_type_0 = None
    validation_0 = module_0.Validation(str_0, bool_0)
    validation_0.ap(none_type_0)


def test_case_11():
    str_0 = "+m\"&p6b'"
    bool_0 = True
    tuple_0 = (bool_0,)
    validation_0 = module_0.Validation(tuple_0, bool_0)
    var_0 = validation_0.__eq__(str_0)
    var_1 = validation_0.to_box()
    validation_0.to_either()


def test_case_12():
    bytes_0 = b"\x9bjw\x9c\x1cv\xe5RDEB\x93"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_lazy()
    var_0.is_success()


def test_case_13():
    bytes_0 = b"\xc2\x84\xb0\x8e$\xdc)\xa3\x04?"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.__str__()
    var_2 = validation_0.__str__()
    var_3 = var_2.__str__()
    var_4 = validation_0.is_success()
    var_5 = validation_0.to_lazy()
    var_6 = var_5.map(var_1)
    var_7 = var_0.to_either()
    var_8 = var_0.to_box()
    var_9 = var_8.__eq__(validation_0)
    var_4.to_try()


def test_case_14():
    object_0 = module_1.object()
    validation_0 = module_0.Validation(object_0, object_0)
    validation_0.to_try()


def test_case_15():
    int_0 = -883
    str_0 = "FK:-~?Wx8hqE"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.__str__()
    validation_1 = module_0.Validation(int_0, int_0)
    var_2 = validation_1.__eq__(validation_0)
    var_3 = validation_1.to_box()
    var_4 = var_3.to_either()
    var_5 = var_4.__eq__(var_4)
    bool_0 = True
    validation_2 = module_0.Validation(bool_0, var_3)


def test_case_16():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_either()
    bytes_0 = b")\xd6\xf6\xaf\x9f\x08\xb0\x00P\x17]("
    validation_1 = module_0.Validation(bytes_0, bytes_0)
    var_1 = validation_1.to_lazy()
    var_1.to_lazy()
