# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0
import builtins as module_1


def test_case_0():
    bytes_0 = b"\xde\x9a`\xfe"
    str_0 = "Q8\r)6]8"
    list_0 = [str_0, str_0]
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.is_fail()
    var_1 = validation_0.__eq__(bytes_0)
    var_0.is_success()


def test_case_1():
    bytes_0 = b"\xde\x9a`\xfe"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    var_0.to_either()


def test_case_2():
    str_0 = "DCS!Swtroh3;)"
    validation_0 = module_0.Validation(str_0, str_0)


def test_case_3():
    str_0 = "'M`6Nm\\a}D\x0cIto%r"
    none_type_0 = None
    validation_0 = module_0.Validation(str_0, none_type_0)
    validation_0.is_fail()


def test_case_4():
    list_0 = []
    object_0 = module_1.object(*list_0)
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.map(object_0)


def test_case_5():
    bool_0 = False
    bool_1 = False
    none_type_0 = None
    validation_0 = module_0.Validation(bool_1, none_type_0)
    validation_0.bind(bool_0)


def test_case_6():
    str_0 = "Q8\r`]8}"
    bool_0 = False
    list_0 = [str_0, str_0, bool_0, str_0]
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.is_fail()
    var_1 = validation_0.__eq__(var_0)
    var_2 = validation_0.to_either()
    validation_1 = module_0.Validation(var_2, bool_0)
    var_3 = var_2.to_maybe()
    validation_1.ap(var_2)


def test_case_7():
    str_0 = "OTXF-AWq+I\x0c"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.to_try()
    var_2 = var_1.__str__()
    var_2.to_lazy()


def test_case_8():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()


def test_case_9():
    float_0 = -234.0
    tuple_0 = (float_0,)
    str_0 = "A\x0ctEE>b5A"
    str_1 = "i9Xi"
    tuple_1 = (str_1, str_1, float_0)
    dict_0 = {tuple_0: float_0, tuple_0: float_0, float_0: str_0, tuple_0: tuple_1}
    validation_0 = module_0.Validation(dict_0, tuple_0)
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_1.to_lazy()
    var_1 = var_0.to_either()
    var_1.to_either()


def test_case_10():
    object_0 = module_1.object()
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_try()
    var_0.ap(object_0)


def test_case_11():
    str_0 = "Q8\r`]8}"
    bool_0 = False
    list_0 = [str_0, str_0]
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.is_fail()
    var_1 = validation_0.__eq__(var_0)
    var_2 = validation_0.to_either()
    validation_1 = module_0.Validation(var_2, bool_0)
    var_3 = var_2.to_maybe()
    var_4 = var_2.to_try()
    var_2.to_either()


def test_case_12():
    object_0 = module_1.object()
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_maybe()
    var_0.ap(object_0)


def test_case_13():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.__str__()
    var_2 = var_1.__eq__(var_1)
    var_3 = validation_0.__eq__(var_1)
    var_1.bind(var_1)


def test_case_14():
    str_0 = "Q8\r`]8}"
    bool_0 = False
    list_0 = [str_0, str_0, bool_0, str_0]
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.is_fail()
    var_1 = validation_0.__eq__(var_0)
    validation_1 = module_0.Validation(var_1, bool_0)
    var_2 = validation_0.to_maybe()
    var_1.ap(var_1)


def test_case_15():
    str_0 = "Q8\r`]8}"
    list_0 = [str_0, str_0]
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.is_fail()
    var_1 = validation_0.to_either()
    var_2 = validation_0.__eq__(var_0)
    validation_1 = module_0.Validation(list_0, var_1)
    var_3 = validation_0.__eq__(validation_1)
    var_3.is_success()


def test_case_16():
    str_0 = "Q8\r`]8}"
    list_0 = [str_0, str_0]
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.__eq__(validation_0)
    var_0.is_success()
