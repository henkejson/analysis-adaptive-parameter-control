# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    str_0 = "%d41\n^Gn4"
    validation_0 = module_0.Validation(str_0, str_0)
    validation_1 = module_0.Validation(str_0, str_0)
    var_0 = validation_1.__eq__(str_0)
    var_1 = validation_1.to_maybe()
    var_2 = validation_1.is_fail()


def test_case_1():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.__str__()
    var_0.is_success()


def test_case_2():
    str_0 = "%d41\n^Gn4"
    validation_0 = module_0.Validation(str_0, str_0)
    validation_1 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    validation_2 = module_0.Validation(var_0, str_0)
    var_1 = validation_2.__str__()
    var_2 = var_0.to_either()
    validation_1.bind(validation_0)


def test_case_3():
    str_0 = "%d41\n^Gn4"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(str_0)
    var_1 = validation_0.to_either()
    var_2 = var_1.bind(var_0)
    var_3 = var_1.to_box()


def test_case_4():
    str_0 = "%d41\n^Gn4"
    validation_0 = module_0.Validation(str_0, str_0)
    validation_1 = module_0.Validation(str_0, str_0)
    var_0 = validation_1.to_maybe()


def test_case_5():
    bytes_0 = b"\x93\xdfW7 "
    validation_0 = module_0.Validation(bytes_0, bytes_0)


def test_case_6():
    bytes_0 = b".\xd9\xea\xd9\x86"
    bool_0 = False
    complex_0 = 1297.565866 + 633.3j
    validation_0 = module_0.Validation(bool_0, complex_0)
    validation_0.map(bytes_0)


def test_case_7():
    none_type_0 = None
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.bind(none_type_0)


def test_case_8():
    int_0 = -998
    bytes_0 = b"\xeb\x1c\xb6v\x9e=\x1d$Z"
    none_type_0 = None
    validation_0 = module_0.Validation(bytes_0, none_type_0)
    var_0 = validation_0.__eq__(int_0)
    validation_0.ap(none_type_0)


def test_case_9():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_box()
    var_0.is_fail()


def test_case_10():
    str_0 = "%d41\n^Gn4"
    validation_0 = module_0.Validation(str_0, str_0)
    validation_1 = module_0.Validation(str_0, str_0)
    var_0 = validation_1.__eq__(str_0)
    var_1 = validation_0.to_either()
    var_2 = validation_0.to_lazy()
    var_3 = validation_1.is_fail()


def test_case_11():
    bytes_0 = b"\x8f[G\xdc\xc4\xb7\xc4\x168"
    list_0 = [bytes_0]
    validation_0 = module_0.Validation(list_0, bytes_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_try()
    var_1.bind(list_0)


def test_case_12():
    str_0 = "%d41\n^Gn4"
    validation_0 = module_0.Validation(str_0, str_0)
    validation_1 = module_0.Validation(str_0, str_0)
    var_0 = validation_1.__eq__(str_0)
    var_1 = validation_0.to_try()
    validation_1.ap(var_1)


def test_case_13():
    int_0 = -998
    bytes_0 = b"\xeb\x1c\xb6v\x9e=\x1d$Z"
    none_type_0 = None
    validation_0 = module_0.Validation(bytes_0, none_type_0)
    var_0 = validation_0.__eq__(int_0)
    var_1 = validation_0.__eq__(validation_0)


def test_case_14():
    str_0 = "%d41\n^Gn4"
    validation_0 = module_0.Validation(str_0, str_0)
    validation_1 = module_0.Validation(str_0, str_0)
    validation_2 = module_0.Validation(validation_1, validation_1)
    var_0 = validation_1.__eq__(validation_2)
    var_1 = validation_1.to_maybe()
    var_2 = validation_0.to_either()
    validation_1.bind(var_0)


def test_case_15():
    str_0 = ""
    validation_0 = module_0.Validation(str_0, str_0)
    validation_1 = module_0.Validation(str_0, str_0)
    var_0 = validation_1.__eq__(str_0)
    var_1 = validation_1.to_maybe()
    var_2 = validation_1.to_maybe()
    var_3 = validation_1.to_try()
    var_4 = validation_1.to_box()
    var_2.to_maybe()


def test_case_16():
    set_0 = set()
    str_0 = "\n        Applies the function inside the Lazy[A] structure to another applicative type for notempty Lazy.\n        For empty returns copy of itself\n\n        :param applicative: applicative contains function\n        :type applicative: Lazy[Function(A) -> B]\n        :returns: new Lazy with result of contains function\n        :rtype: Lazy[B]\n        "
    validation_0 = module_0.Validation(str_0, set_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_try()
    var_1.to_lazy()
