# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bool_0 = False
    none_type_0 = None
    validation_0 = module_0.Validation(bool_0, none_type_0)
    var_0 = validation_0.__eq__(bool_0)
    validation_0.to_either()


def test_case_1():
    bytes_0 = b"I\xea"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.is_success()
    var_1 = validation_0.to_either()
    var_2 = var_1.to_lazy()
    var_3 = var_2.to_box()
    var_4 = validation_0.to_lazy()
    validation_0.bind(var_2)


def test_case_2():
    bytes_0 = b"\x0eo\xc5\xfa\xcf9\xbfn\x19\x13\xfc4\x01\xec\x1c*\x80\xb3"
    validation_0 = module_0.Validation(bytes_0, bytes_0)


def test_case_3():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.to_either()


def test_case_4():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.is_fail()
    validation_0.map(validation_0)


def test_case_5():
    str_0 = "&?g+ti:ZF2GNp2h\r"
    validation_0 = module_0.Validation(str_0, str_0)
    validation_0.bind(validation_0)


def test_case_6():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.ap(none_type_0)


def test_case_7():
    str_0 = "\n        :param semigroup: other semigroup to concat\n        :type semigroup: Min[B]\n        :returns: new Min with smallest value\n        :rtype: Min[A | B]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_box()
    var_0.to_box()


def test_case_8():
    float_0 = 737.932648
    validation_0 = module_0.Validation(float_0, float_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_lazy()
    var_2 = var_1.bind(float_0)
    validation_0.__str__()


def test_case_9():
    float_0 = 737.9
    validation_0 = module_0.Validation(float_0, float_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_lazy()
    var_2 = var_1.bind(float_0)
    var_3 = var_1.__eq__(validation_0)
    var_4 = var_1.to_try()
    validation_0.ap(var_2)


def test_case_10():
    float_0 = 1373.22
    validation_0 = module_0.Validation(float_0, float_0)
    validation_0.to_try()


def test_case_11():
    str_0 = "\n        Take function Function(A) -> B and returns new Lazy with mapped result of Lazy constructor function.\n        Both mapper end constructor will be called only during calling fold method.\n\n        :param mapper: mapper function\n        :type mapper: Function(A) -> B\n        :returns: Lazy with mapped value\n        :rtype: Lazy[Function() -> B)]\n        "
    tuple_0 = ()
    validation_0 = module_0.Validation(str_0, tuple_0)
    var_0 = validation_0.__str__()
    var_0.to_either()


def test_case_12():
    str_0 = '"W67M'
    bytes_0 = b"\x18f\xff2\n\xfc"
    tuple_0 = (str_0, bytes_0)
    dict_0 = {tuple_0: bytes_0, bytes_0: bytes_0, bytes_0: str_0}
    validation_0 = module_0.Validation(dict_0, dict_0)
    validation_1 = module_0.Validation(validation_0, str_0)
    validation_2 = module_0.Validation(validation_1, tuple_0)
    var_0 = validation_0.to_maybe()
    var_0.is_success()


def test_case_13():
    set_0 = set()
    tuple_0 = (set_0,)
    str_0 = "\\fZGj>5tu'B7E,S20"
    float_0 = 738.5280380839719
    int_0 = 18
    tuple_1 = (tuple_0, str_0, float_0, int_0)
    validation_0 = module_0.Validation(tuple_1, set_0)
    var_0 = validation_0.is_fail()
    var_1 = validation_0.to_either()
    var_2 = var_1.__str__()
    var_3 = var_2.__eq__(var_1)
    var_0.to_lazy()


def test_case_14():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.__str__()
    var_2 = validation_0.__eq__(var_1)
    var_1.to_try()


def test_case_15():
    bytes_0 = b"I\xea"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    var_1 = var_0.__eq__(var_0)
    var_1.to_maybe()


def test_case_16():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.is_fail()
    var_1 = module_0.Validation(set_0, validation_0)
    var_2 = validation_0.__eq__(var_1)
    var_3 = validation_0.to_lazy()
    var_1.to_maybe()
