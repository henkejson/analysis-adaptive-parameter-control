# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    complex_0 = -474.6 + 427.530529j
    none_type_0 = None
    validation_0 = module_0.Validation(complex_0, complex_0)
    var_0 = validation_0.__eq__(none_type_0)
    var_1 = var_0.__eq__(complex_0)
    var_1.map(complex_0)


def test_case_1():
    bytes_0 = b"\x92\xdei"
    set_0 = {bytes_0, bytes_0}
    validation_0 = module_0.Validation(set_0, bytes_0)
    str_0 = "W"
    validation_1 = module_0.Validation(str_0, str_0)
    var_0 = validation_1.__str__()
    var_0.map(var_0)


def test_case_2():
    complex_0 = -474.6 + 427.530529j
    bytes_0 = b"\xfe{\xa7\xdf\xf9H\xc2E/dQi\xb4"
    none_type_0 = None
    none_type_1 = None
    validation_0 = module_0.Validation(complex_0, none_type_1)
    var_0 = validation_0.to_box()
    var_1 = var_0.to_lazy()
    var_2 = var_1.__eq__(none_type_0)
    var_3 = var_2.__str__()
    validation_1 = module_0.Validation(bytes_0, bytes_0)
    var_4 = validation_1.to_either()
    var_5 = validation_1.to_box()
    var_5.to_box()


def test_case_3():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    dict_0 = {}
    validation_1 = module_0.Validation(validation_0, dict_0)
    var_0 = validation_1.to_maybe()
    var_1 = var_0.__str__()
    var_1.to_lazy()


def test_case_4():
    bytes_0 = b"\x00\rT"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()


def test_case_5():
    complex_0 = -474.6 + 427.530529j
    validation_0 = module_0.Validation(complex_0, complex_0)


def test_case_6():
    str_0 = "uM`*\n4\x0c\x0c TTj0AR"
    bytes_0 = b"a\xa1p\xd97D@"
    tuple_0 = (str_0, bytes_0, bytes_0)
    int_0 = -2413
    validation_0 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.__eq__(tuple_0)
    bool_0 = False
    none_type_0 = None
    validation_1 = module_0.Validation(bool_0, none_type_0)
    validation_1.is_fail()


def test_case_7():
    str_0 = "\n        :param fork: function to call during fork\n        :type fork: Function(reject, resolve) -> Any\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    validation_0.map(str_0)


def test_case_8():
    bool_0 = False
    bytes_0 = b"\x8d\x05\x18]-\x8c\t\xd7/\x9fV0\x9d\xe6"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_0.bind(bool_0)


def test_case_9():
    float_0 = 779.138
    list_0 = [float_0, float_0, float_0]
    validation_0 = module_0.Validation(list_0, list_0)
    validation_0.ap(list_0)


def test_case_10():
    str_0 = "labPZ"
    bytes_0 = b"\x10h\xef\xb1\xd7\xe9\xf1\xf7"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_1 = module_0.Validation(str_0, validation_0)
    var_0 = validation_1.to_box()
    var_0.is_success()


def test_case_11():
    float_0 = 1717.8971
    none_type_0 = None
    validation_0 = module_0.Validation(float_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_0.is_success()


def test_case_12():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_try()
    var_1.is_fail()


def test_case_13():
    dict_0 = {}
    bytes_0 = b"\x02\xcfy\xa0\x8a\xc0\x1bV\x0e\x8e\xeao"
    validation_0 = module_0.Validation(bytes_0, dict_0)
    validation_1 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_1.to_try()
    var_0.is_success()


def test_case_14():
    tuple_0 = ()
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, tuple_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.__str__()
    var_2 = var_0.to_box()
    var_2.map(tuple_0)


def test_case_15():
    tuple_0 = ()
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, tuple_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.__str__()
    var_2 = var_0.to_box()
    var_2.map(tuple_0)


def test_case_16():
    bool_0 = True
    str_0 = "(.brTUtUv9,=oFHn"
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_0.ap(str_0)


def test_case_17():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_1 = module_0.Validation(validation_0, var_0)
    var_1 = validation_0.to_lazy()
    var_2 = var_1.to_maybe()
    var_3 = validation_0.__eq__(validation_1)
    validation_2 = module_0.Validation(var_1, validation_0)
    var_2.map(validation_0)
