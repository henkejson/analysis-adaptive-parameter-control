# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    complex_0 = -3316.50281 - 2916.2717j
    validation_0 = module_0.Validation(complex_0, complex_0)
    var_0 = validation_0.__eq__(complex_0)
    var_0.bind(complex_0)


def test_case_1():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.__str__()
    var_2 = validation_0.to_maybe()


def test_case_2():
    bytes_0 = b"\x11\x17\xa6\xd8N\x8aN\x1dl\xca\x90\xcf"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.map(bytes_0)
    var_2 = var_0.to_try()
    var_3 = validation_0.__str__()


def test_case_3():
    str_0 = "s46VTVa"
    validation_0 = module_0.Validation(str_0, str_0)


def test_case_4():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.is_fail()
    validation_0.map(list_0)


def test_case_5():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_0.map(var_0)


def test_case_6():
    str_0 = "\n        Take function and applied this function on current box value and returns mapped value.\n\n        :param mapper: mapper function\n        :type mapper: Function(A) -> B\n        :returns: new box with mapped value\n        :rtype: B\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    validation_0.bind(validation_0)


def test_case_7():
    tuple_0 = ()
    bool_0 = True
    set_0 = {bool_0, bool_0}
    validation_0 = module_0.Validation(set_0, bool_0)
    validation_0.ap(tuple_0)


def test_case_8():
    int_0 = -3576
    none_type_0 = None
    validation_0 = module_0.Validation(int_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_box()
    var_1.is_fail()


def test_case_9():
    bytes_0 = b"\r\x9d\xd5\xcb\xd7\xef+"
    set_0 = {bytes_0, bytes_0, bytes_0}
    complex_0 = 2772.03 + 1573.8232j
    validation_0 = module_0.Validation(set_0, complex_0)
    validation_0.to_try()


def test_case_10():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.is_success()
    validation_1 = module_0.Validation(validation_0, validation_0)
    var_2 = validation_0.to_box()
    none_type_0 = None
    validation_2 = module_0.Validation(validation_0, none_type_0)
    var_3 = validation_0.__str__()
    validation_2.is_success()


def test_case_11():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.__eq__(validation_0)
    list_0.to_maybe()


def test_case_12():
    none_type_0 = None
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    validation_1 = module_0.Validation(validation_0, none_type_0)
    var_0 = validation_0.to_either()
    none_type_1 = None
    var_1 = validation_1.__eq__(none_type_1)
    var_1.bind(list_0)


def test_case_13():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    validation_0 = module_0.Validation(list_0, list_0)
    validation_1 = module_0.Validation(validation_0, none_type_0)
    var_0 = validation_0.to_either()
    none_type_1 = None
    var_1 = validation_1.__eq__(none_type_1)
    var_1.bind(list_0)


def test_case_14():
    none_type_0 = None
    list_0 = [none_type_0]
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.is_fail()
    validation_1 = module_0.Validation(validation_0, none_type_0)
    var_1 = validation_0.to_maybe()
    var_2 = validation_0.__eq__(validation_0)
    var_3 = validation_0.__eq__(validation_1)
    var_2.bind(list_0)
