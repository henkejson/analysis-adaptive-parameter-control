# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0
import builtins as module_1


def test_case_0():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.__str__()


def test_case_1():
    str_0 = "\n        :param semigroup: other semigroup to concat\n        :type semigroup: All[B]\n        :returns: new All with last truly value or first falsy\n        :rtype: All[A | B]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.to_either()
    var_2 = var_1.ap(validation_0)
    var_0.to_box()


def test_case_2():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_try()
    validation_0.ap(validation_0)


def test_case_3():
    str_0 = "\n        Take function, store it and call with Task value during calling fork function.\n        Return result of called.\n\n        :param fn: mapper function\n        :type fn: Function(value) -> Task[reject, mapped_value]\n        :returns:  new Task with mapper resolve attribute\n        :rtype: Task[reject, mapped_value]\n        "
    validation_0 = module_0.Validation(str_0, str_0)


def test_case_4():
    bytes_0 = b"\xf1"
    int_0 = 1
    validation_0 = module_0.Validation(bytes_0, int_0)
    validation_0.is_fail()


def test_case_5():
    none_type_0 = None
    complex_0 = -540 + 3097j
    none_type_1 = None
    validation_0 = module_0.Validation(complex_0, none_type_1)
    validation_0.map(none_type_0)


def test_case_6():
    bytes_0 = b"S4\xe9"
    none_type_0 = None
    validation_0 = module_0.Validation(bytes_0, none_type_0)
    validation_0.bind(none_type_0)


def test_case_7():
    list_0 = []
    str_0 = "\n        Transform Validation to Box.\n\n        :returns: Box with Validation value\n        :rtype: Box[A]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.ap(list_0)
    var_1.to_box()


def test_case_8():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.__str__()
    var_2 = validation_0.to_try()
    var_2.map(var_1)


def test_case_9():
    int_0 = 1861
    none_type_0 = None
    validation_0 = module_0.Validation(int_0, none_type_0)
    var_0 = validation_0.__eq__(int_0)
    var_1 = var_0.__str__()
    var_1.bind(int_0)


def test_case_10():
    str_0 = 'k6/N]c"5<"[t(#$o<G'
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.is_fail()
    validation_1 = module_0.Validation(str_0, str_0)
    var_1 = var_0.__str__()
    var_2 = validation_0.to_lazy()
    var_3 = var_2.to_box()
    var_4 = validation_0.to_try()
    var_5 = var_2.bind(str_0)


def test_case_11():
    bool_0 = False
    str_0 = '5q\x0cXX\\s9EQkh|/7JP"_"'
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.ap(bool_0)
    var_2 = validation_0.is_fail()
    var_3 = validation_0.to_maybe()
    float_0 = 3777.7
    validation_1 = module_0.Validation(float_0, float_0)
    validation_1.is_fail()


def test_case_12():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.__eq__(validation_0)


def test_case_13():
    str_0 = "\n        :param semigroup: other semigroup to concat\n        :type semigroup: All[B]\n        :returns: new All with last truly value or first falsy\n        :rtype: All[A | B]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    var_0.to_try()


def test_case_14():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_lazy()
    var_2 = validation_0.to_either()
    complex_0 = -605.4 + 4037.569799j
    dict_1 = {complex_0: complex_0, complex_0: complex_0, complex_0: complex_0}
    validation_1 = module_0.Validation(dict_1, complex_0)
    validation_1.to_maybe()


def test_case_15():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.__str__()
    object_0 = module_1.object()
    var_1 = validation_0.to_lazy()
    bool_0 = True
    validation_1 = module_0.Validation(dict_0, bool_0)
    var_2 = validation_0.__eq__(validation_1)
    var_3 = var_0.__str__()
    validation_1.to_try()
