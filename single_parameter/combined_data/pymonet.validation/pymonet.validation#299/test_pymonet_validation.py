# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)
    var_0.to_either()


def test_case_1():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(none_type_0)
    var_0.to_try()


def test_case_2():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_either()
    var_0.is_success()


def test_case_3():
    str_0 = "0*f8%KSBKLBI5NSce="
    bytes_0 = b"\xf8\xe2\xb9\xfe\xd9\xb9\xc1}\xa3\xa8"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.__eq__(validation_0)
    var_2 = var_0.ap(str_0)
    validation_1 = module_0.Validation(bytes_0, bytes_0)
    var_3 = validation_1.to_box()
    var_4 = var_2.bind(bytes_0)


def test_case_4():
    str_0 = "\n        Call success_callback function with monad value when monad is successfully.\n\n        :params success_callback: function to apply with monad value.\n        :type success_callback: Function(A)\n        :returns: self\n        :rtype: Try[A]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_either()
    var_2 = var_1.to_box()
    var_3 = var_2.to_lazy()
    var_4 = var_3.to_box()
    var_4.bind(str_0)


def test_case_5():
    int_0 = 4327
    validation_0 = module_0.Validation(int_0, int_0)


def test_case_6():
    int_0 = -1222
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.is_success()


def test_case_7():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.is_fail()


def test_case_8():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_0.map(none_type_0)


def test_case_9():
    int_0 = -54
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, int_0)
    validation_0.bind(none_type_0)


def test_case_10():
    str_0 = "\n    Max is a Monoid that will combines 2 numbers, resulting in the largest of the two.\n    "
    validation_0 = module_0.Validation(str_0, str_0)
    validation_0.ap(validation_0)


def test_case_11():
    str_0 = "0*f8%KSBKLBI5NSce="
    bytes_0 = b"\xf8\xe2\xb9\xfe\xd9\xb9\xc1}\xa3\xa8"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.__eq__(validation_0)
    var_2 = var_0.ap(str_0)
    validation_1 = module_0.Validation(var_2, var_2)
    var_3 = validation_1.to_box()
    var_4 = validation_1.to_lazy()
    var_5 = var_4.bind(bytes_0)
    validation_1.map(validation_1)


def test_case_12():
    bool_0 = True
    float_0 = 1150.34016
    validation_0 = module_0.Validation(float_0, bool_0)
    var_0 = validation_0.to_lazy()
    bool_1 = False
    set_0 = set()
    validation_1 = module_0.Validation(set_0, set_0)
    var_1 = validation_1.to_lazy()
    var_2 = var_1.to_box()
    var_3 = var_2.__str__()
    var_4 = var_3.__eq__(bool_1)
    var_4.is_fail()


def test_case_13():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    none_type_0 = None
    validation_0 = module_0.Validation(list_0, none_type_0)
    validation_0.to_try()


def test_case_14():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.is_success()
    var_1.to_box()


def test_case_15():
    str_0 = "0*f8%KSBKLBI5NSce="
    bytes_0 = b"\xf8\xe2\xb9\xfe\xd9\xb9\xc1}\xa3\xa8"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_either()
    var_2 = validation_0.__eq__(validation_0)
    var_3 = var_1.ap(str_0)
    var_4 = var_1.to_box()
    var_5 = validation_0.to_lazy()
    var_6 = var_3.map(var_3)
    var_7 = var_5.ap(bytes_0)
    var_7.is_success()


def test_case_16():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_try()
    var_2 = var_1.__str__()
    var_0.bind(var_0)


def test_case_17():
    str_0 = "0*f8%KSBKLBI5NSce="
    bytes_0 = b"\xf8\xe2\xb9\xfe\xd9\xb9\xc1}\xa3\xa8"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.to_either()
    var_2 = validation_0.__eq__(validation_0)
    var_3 = var_1.ap(str_0)
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    var_4 = validation_1.__eq__(validation_0)
    var_5 = validation_1.to_lazy()
    var_6 = var_5.bind(bytes_0)
    validation_1.map(validation_1)
