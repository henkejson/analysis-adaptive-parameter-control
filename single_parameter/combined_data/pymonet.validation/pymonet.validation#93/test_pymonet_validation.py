# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bytes_0 = b"\r\xad\xd5ky_\xdf\xb68+t"
    int_0 = 172
    validation_0 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.__eq__(bytes_0)


def test_case_1():
    str_0 = "C#x!h_4"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    var_0.to_try()


def test_case_2():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.__str__()
    var_2 = var_0.to_try()
    bytes_0 = b"WS\x93\x15W\x8czZ<\x8e"
    var_3 = validation_0.__str__()
    var_0.ap(bytes_0)


def test_case_3():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_4():
    str_0 = "AP]oN3d\x0cAkida@X"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.is_fail()
    var_1 = var_0.__str__()


def test_case_5():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(bool_0)
    validation_0.map(bool_0)


def test_case_6():
    bytes_0 = b"\x8aV\xcdz\xf1"
    int_0 = 1114
    set_0 = {int_0, bytes_0}
    int_1 = 798
    validation_0 = module_0.Validation(int_1, bytes_0)
    validation_0.bind(set_0)


def test_case_7():
    tuple_0 = ()
    complex_0 = 2629.154 + 823.30744j
    validation_0 = module_0.Validation(complex_0, complex_0)
    validation_0.ap(tuple_0)


def test_case_8():
    bytes_0 = b"\x99\xff\x16"
    set_0 = {bytes_0, bytes_0, bytes_0}
    validation_0 = module_0.Validation(set_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = var_0.__str__()
    var_2 = validation_0.to_lazy()
    var_3 = validation_0.to_box()


def test_case_9():
    complex_0 = -1206.32 - 1206.52117j
    complex_1 = -543 - 1087.5j
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.ap(complex_1)
    var_2 = var_0.to_try()
    var_3 = var_1.ap(complex_0)
    var_3.is_fail()


def test_case_10():
    int_0 = -1091
    bytes_0 = b"\x99\xff\x16"
    validation_0 = module_0.Validation(int_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_try()
    var_2 = var_1.__str__()


def test_case_11():
    none_type_0 = None
    str_0 = "\n        :param fork: function to call during fork\n        :type fork: Function(reject, resolve) -> Any\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.__str__()
    var_1.map(none_type_0)


def test_case_12():
    int_0 = 2170
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_either()
    var_1.ap(int_0)


def test_case_13():
    bytes_0 = b"\x99\xff\x16"
    set_0 = {bytes_0, bytes_0, bytes_0}
    validation_0 = module_0.Validation(set_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.__eq__(validation_0)
    var_2 = validation_0.__str__()
    var_3 = module_0.Validation(var_0, validation_0)
    var_4 = var_3.to_lazy()
    var_5 = var_3.__eq__(validation_0)
    var_3.map(validation_0)
