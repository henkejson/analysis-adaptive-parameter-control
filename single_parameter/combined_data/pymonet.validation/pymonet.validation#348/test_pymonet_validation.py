# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    none_type_0 = None
    tuple_0 = ()
    dict_0 = {tuple_0: none_type_0, tuple_0: tuple_0, none_type_0: none_type_0}
    validation_0 = module_0.Validation(none_type_0, tuple_0)
    var_0 = validation_0.__eq__(tuple_0)
    str_0 = "aHQLWBLApv<O"
    validation_1 = module_0.Validation(dict_0, str_0)
    var_1 = validation_1.to_maybe()
    var_2 = var_1.to_either()
    var_2.is_fail()


def test_case_1():
    bytes_0 = b"\\b|\x98\x98\xe1C#"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_box()
    none_type_1 = None
    validation_1 = module_0.Validation(none_type_1, bytes_0)
    var_1 = validation_1.__eq__(validation_1)
    var_2 = validation_1.__str__()
    var_1.is_success()


def test_case_2():
    str_0 = "\n        Transform Box into Right either.\n\n        :returns: right Either monad with previous value\n        :rtype: Right[A]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.ap(str_0)
    var_2 = validation_0.to_either()
    validation_0.ap(validation_0)


def test_case_3():
    str_0 = "\n        Transform Box into Right either.\n\n        :returns: right Either monad with previous value\n        :rtype: Right[A]\n        "
    none_type_0 = None
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.ap(str_0)
    var_2 = var_1.to_either()
    var_3 = var_2.__eq__(none_type_0)
    validation_1 = module_0.Validation(str_0, str_0)
    validation_1.ap(validation_1)


def test_case_4():
    str_0 = "\n    All is a Monoid that will combine 2 values of any type using logical conjunction on their coerced Boolean values.\n    "
    validation_0 = module_0.Validation(str_0, str_0)


def test_case_5():
    str_0 = "\n    All is a Monoid that will combine 2 values of any type using logical conjunction on their coerced Boolean values.\n    "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_try()


def test_case_6():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.is_fail()


def test_case_7():
    bool_0 = True
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.map(bool_0)


def test_case_8():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.bind(validation_0)


def test_case_9():
    str_0 = "\n        Transform Box into Right either.\n\n        :returns: right Either monad with previous value\n        :rtype: Right[A]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    validation_0.ap(validation_0)


def test_case_10():
    complex_0 = 1109.24258 + 833.976623j
    validation_0 = module_0.Validation(complex_0, complex_0)
    var_0 = validation_0.to_box()
    validation_0.to_either()


def test_case_11():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_either()
    var_2 = var_1.to_try()


def test_case_12():
    complex_0 = 1109.24258 + 833.976623j
    validation_0 = module_0.Validation(complex_0, complex_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_box()
    validation_0.to_either()


def test_case_13():
    none_type_0 = None
    dict_0 = {}
    complex_0 = 1109.4267438505372 + 833.976623j
    validation_0 = module_0.Validation(complex_0, complex_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = module_0.Validation(complex_0, dict_0)
    var_2 = var_1.to_either()
    var_2.map(none_type_0)


def test_case_14():
    none_type_0 = None
    dict_0 = {}
    validation_0 = module_0.Validation(none_type_0, dict_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_maybe()
    var_2 = var_0.__eq__(var_1)
    var_3 = validation_0.__str__()
    var_3.is_success()


def test_case_15():
    bytes_0 = b"\\b|\x98\x98\xe1C#"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_box()
    none_type_1 = None
    validation_1 = module_0.Validation(none_type_1, bytes_0)
    var_1 = validation_1.__eq__(validation_1)
    var_2 = validation_0.__eq__(validation_1)
    var_1.is_success()
