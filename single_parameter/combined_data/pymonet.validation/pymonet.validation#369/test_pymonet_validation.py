# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    float_0 = -401.11
    dict_0 = {float_0: float_0, float_0: float_0}
    validation_0 = module_0.Validation(dict_0, float_0)
    var_0 = validation_0.__eq__(dict_0)
    var_0.bind(dict_0)


def test_case_1():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_try()
    var_1.ap(var_0)


def test_case_2():
    bytes_0 = b"\xe2"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(bytes_0)
    var_1 = validation_0.to_try()
    var_2 = validation_0.to_maybe()
    var_3 = var_1.map(validation_0)
    var_4 = validation_0.to_try()
    validation_0.map(bytes_0)


def test_case_3():
    float_0 = 3571.0
    validation_0 = module_0.Validation(float_0, float_0)


def test_case_4():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.__str__()


def test_case_5():
    float_0 = -717.0
    validation_0 = module_0.Validation(float_0, float_0)
    validation_0.is_fail()


def test_case_6():
    str_0 = "z\rh^]"
    set_0 = {str_0, str_0, str_0}
    complex_0 = -952.6 - 2136.0071j
    validation_0 = module_0.Validation(complex_0, complex_0)
    validation_0.map(set_0)


def test_case_7():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.bind(bool_0)


def test_case_8():
    bool_0 = True
    tuple_0 = ()
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.ap(tuple_0)


def test_case_9():
    float_0 = -1499.1
    validation_0 = module_0.Validation(float_0, float_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.to_maybe()
    var_1.bind(validation_0)


def test_case_10():
    complex_0 = -2184.3514 - 1858.2j
    validation_0 = module_0.Validation(complex_0, complex_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.__str__()


def test_case_11():
    int_0 = 1040
    none_type_0 = None
    validation_0 = module_0.Validation(int_0, none_type_0)
    validation_1 = module_0.Validation(int_0, int_0)
    validation_1.to_try()


def test_case_12():
    str_0 = "k!lQ^wPC"
    bool_0 = True
    dict_0 = {}
    tuple_0 = (bool_0, dict_0)
    validation_0 = module_0.Validation(tuple_0, dict_0)
    var_0 = validation_0.to_either()
    var_0.bind(str_0)


def test_case_13():
    float_0 = -401.11
    dict_0 = {float_0: float_0, float_0: float_0}
    validation_0 = module_0.Validation(dict_0, float_0)
    var_0 = validation_0.__eq__(dict_0)
    var_1 = module_0.Validation(float_0, dict_0)
    var_2 = var_1.__str__()
    var_3 = validation_0.to_box()
    var_3.is_fail()


def test_case_14():
    bytes_0 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(bytes_0)
    var_1 = validation_0.to_try()
    var_2 = validation_0.to_maybe()
    var_1.map(validation_0)


def test_case_15():
    bytes_0 = b"\xe2"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_box()
    var_2 = validation_0.__eq__(bytes_0)
    var_3 = validation_0.to_try()
    var_4 = validation_0.to_maybe()
    var_5 = var_3.map(validation_0)
    var_6 = var_5.map(bytes_0)
    validation_0.bind(var_4)


def test_case_16():
    bytes_0 = b"\xe2"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(bytes_0)
    var_1 = validation_0.__eq__(validation_0)
    var_2 = validation_0.to_maybe()
    var_1.map(validation_0)


def test_case_17():
    dict_0 = {}
    list_0 = [dict_0]
    validation_0 = module_0.Validation(dict_0, list_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_box()
    var_2 = var_1.__eq__(dict_0)
    var_2.bind(dict_0)


def test_case_18():
    bytes_0 = b"6\xc9\xba\xbct"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = module_0.Validation(bytes_0, validation_0)
    var_1 = validation_0.__eq__(validation_0)
    var_2 = validation_0.to_lazy()
    var_3 = validation_0.__eq__(var_0)
    var_3.map(var_3)
