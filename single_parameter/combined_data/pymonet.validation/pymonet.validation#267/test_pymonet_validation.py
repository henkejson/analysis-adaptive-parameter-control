# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0
import builtins as module_1


def test_case_0():
    bytes_0 = b"\x91\xf5}gT_\xf0\xc1-"
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    validation_0 = module_0.Validation(bool_0, list_0)
    var_0 = validation_0.__eq__(bytes_0)
    var_0.is_success()


def test_case_1():
    bytes_0 = b"\xbc\xf8\xf9\xd9L"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    var_0.bind(bytes_0)


def test_case_2():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_either()
    validation_1 = module_0.Validation(var_0, var_0)
    validation_1.__str__()


def test_case_3():
    float_0 = 2581.00995
    dict_0 = {}
    bytes_0 = b"Dbf\x06\x93- 6"
    tuple_0 = (float_0, dict_0, bytes_0)
    float_1 = 587.7381
    dict_1 = {}
    validation_0 = module_0.Validation(float_1, dict_1)
    var_0 = validation_0.to_maybe()
    var_0.bind(tuple_0)


def test_case_4():
    bytes_0 = b"\xbc\xf8\xf9\xd9L"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_lazy()
    var_2 = validation_0.is_success()
    var_3 = var_1.to_either()
    var_4 = validation_0.to_maybe()


def test_case_5():
    object_0 = module_1.object()
    object_0.is_success()


def test_case_6():
    str_0 = "\n        Transform Validation to Try.\n\n        :returns: Lazy monad with function returning Validation value\n        :rtype: Lazy[Function() -> (A | None)]\n        "
    validation_0 = module_0.Validation(str_0, str_0)


def test_case_7():
    object_0 = module_1.object()
    validation_0 = module_0.Validation(object_0, object_0)
    validation_0.to_either()


def test_case_8():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    none_type_0 = None
    var_0 = validation_0.is_fail()
    validation_1 = module_0.Validation(tuple_0, none_type_0)
    var_1 = validation_0.__str__()
    validation_0.bind(none_type_0)


def test_case_9():
    bytes_0 = b"\xbc\xf8\xf9\xd9L"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)
    complex_0 = -1929.786 + 904.683j
    validation_0.map(complex_0)


def test_case_10():
    bytes_0 = b"\x91\xf5}gT_\xf0\xc1-"
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    validation_0 = module_0.Validation(bool_0, list_0)
    var_0 = validation_0.__eq__(bytes_0)
    int_0 = -447
    validation_0.ap(int_0)


def test_case_11():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.to_try()
    var_1.to_maybe()


def test_case_12():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()


def test_case_13():
    str_0 = "D}1 "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_either()
    var_2 = var_1.to_maybe()
    var_3 = var_2.to_try()


def test_case_14():
    bool_0 = False
    bytes_0 = b"X\xdb\xdd\xee\xcd4"
    validation_0 = module_0.Validation(bytes_0, bool_0)
    validation_0.to_try()


def test_case_15():
    str_0 = "D}1 "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.is_success()
    var_1 = validation_0.to_lazy()
    var_2 = validation_0.to_either()


def test_case_16():
    bytes_0 = b"\xbc\xf8\xf9\xd9L"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)


def test_case_17():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_lazy()
    var_2 = validation_0.to_either()
    var_3 = var_2.to_maybe()
    var_4 = var_1.to_try()


def test_case_18():
    bytes_0 = b"\xbc\xf8\xf9\xd9L"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_1.__eq__(validation_0)
    var_0.to_lazy()
