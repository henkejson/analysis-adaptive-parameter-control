# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0
import builtins as module_1


def test_case_0():
    int_0 = 0
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(int_0)
    var_0.map(validation_0)


def test_case_1():
    object_0 = module_1.object()
    bytes_0 = b""
    validation_0 = module_0.Validation(object_0, bytes_0)
    var_0 = validation_0.__str__()
    var_0.bind(object_0)


def test_case_2():
    int_0 = -94
    validation_0 = module_0.Validation(int_0, int_0)
    bool_0 = True
    list_0 = [bool_0]
    validation_1 = module_0.Validation(list_0, list_0)
    var_0 = validation_1.__str__()
    bool_1 = True
    var_1 = validation_1.__eq__(bool_1)
    validation_2 = module_0.Validation(bool_1, bool_1)
    validation_3 = module_0.Validation(validation_2, int_0)
    validation_3.to_either()


def test_case_3():
    int_0 = 273
    list_0 = [int_0]
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_lazy()
    var_2 = module_0.Validation(var_0, validation_0)


def test_case_4():
    complex_0 = 986.7524 + 2408.47j
    validation_0 = module_0.Validation(complex_0, complex_0)


def test_case_5():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_lazy()
    validation_1 = module_0.Validation(var_0, var_0)
    validation_1.to_either()


def test_case_6():
    int_0 = -3567
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.is_fail()


def test_case_7():
    none_type_0 = None
    int_0 = 668
    validation_0 = module_0.Validation(none_type_0, int_0)
    validation_0.map(int_0)


def test_case_8():
    tuple_0 = ()
    bytes_0 = b"\x90\xc8\x98\r\x17"
    none_type_0 = None
    validation_0 = module_0.Validation(bytes_0, none_type_0)
    validation_0.bind(tuple_0)


def test_case_9():
    str_0 = "NzVQ]-~\\ALa0>@"
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    validation_0.ap(str_0)


def test_case_10():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_box()


def test_case_11():
    bytes_0 = b"4\xb5\xd7\xeb\x1a\x943r\xd0\x86\xbf\n%\xb4N\xa7<\xba\x1f"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.is_fail()
    var_1 = validation_0.to_lazy()
    var_2 = var_1.to_box()
    var_0.to_try()


def test_case_12():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.to_try()


def test_case_13():
    bytes_0 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.is_fail()
    none_type_0 = None
    bool_0 = False
    validation_1 = module_0.Validation(none_type_0, bool_0)
    validation_1.to_maybe()


def test_case_14():
    bool_0 = True
    list_0 = [bool_0]
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.__eq__(validation_0)
    validation_1 = module_0.Validation(validation_0, validation_0)
    var_2 = validation_1.__eq__(validation_0)
    var_0.to_maybe()


def test_case_15():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.to_try()
    validation_1 = module_0.Validation(var_1, validation_0)
    var_2 = validation_1.to_lazy()
    var_2.is_fail()


def test_case_16():
    bool_0 = True
    list_0 = [bool_0]
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.__str__()
    bool_1 = True
    var_1 = validation_0.__eq__(bool_0)
    validation_1 = module_0.Validation(bool_1, var_1)
    var_2 = validation_0.__eq__(list_0)
    var_3 = validation_0.to_maybe()
    validation_1.map(bool_1)
