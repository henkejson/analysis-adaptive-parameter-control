# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(none_type_0)
    var_0.map(none_type_0)


def test_case_1():
    str_0 = "h,e3L]E&("
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()


def test_case_2():
    str_0 = "h,e3L]E&("
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_either()


def test_case_3():
    str_0 = "p+Q#"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.__str__()
    var_2 = var_1.__str__()
    var_2.to_box()


def test_case_4():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)


def test_case_5():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.__str__()


def test_case_6():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.is_fail()


def test_case_7():
    bytes_0 = b"\xf1T\x8c8\xdd\xd7<\xed\x13~\x8br\xf5\xc5\xc3P"
    dict_0 = {bytes_0: bytes_0}
    validation_0 = module_0.Validation(dict_0, bytes_0)
    validation_1 = module_0.Validation(bytes_0, dict_0)
    var_0 = validation_0.__eq__(bytes_0)
    validation_1.map(validation_0)


def test_case_8():
    float_0 = 100.0
    validation_0 = module_0.Validation(float_0, float_0)
    validation_1 = module_0.Validation(validation_0, validation_0)
    validation_1.bind(validation_0)


def test_case_9():
    str_0 = "h:|3L]E&("
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_lazy()
    validation_0.ap(var_0)


def test_case_10():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_box()
    var_0.to_box()


def test_case_11():
    bytes_0 = b"\xf1T\x8c8\xdd\xd7<\xed\x13~\x8br\xf5\xc5\xc3P"
    dict_0 = {bytes_0: bytes_0}
    validation_0 = module_0.Validation(dict_0, bytes_0)
    validation_1 = module_0.Validation(bytes_0, dict_0)
    var_0 = validation_0.__eq__(bytes_0)
    var_1 = validation_1.to_maybe()
    var_2 = validation_0.to_lazy()
    var_3 = validation_0.__str__()


def test_case_12():
    bytes_0 = b"\xf1T\x8c8\xdd\xd7<\xed\x13~\x8br\xf5\xc5\xc3P"
    dict_0 = {bytes_0: bytes_0}
    validation_0 = module_0.Validation(dict_0, bytes_0)
    validation_1 = module_0.Validation(bytes_0, dict_0)
    var_0 = validation_0.to_try()
    var_1 = validation_0.__eq__(bytes_0)
    var_2 = validation_1.to_maybe()
    var_3 = validation_0.to_lazy()
    validation_2 = module_0.Validation(validation_0, var_1)
    var_4 = validation_1.to_maybe()
    var_5 = var_1.__eq__(var_0)
    var_6 = var_5.__str__()
    var_7 = var_3.to_maybe()
    var_8 = validation_0.__str__()


def test_case_13():
    list_0 = []
    set_0 = set()
    validation_0 = module_0.Validation(list_0, set_0)
    var_0 = validation_0.to_try()
    var_0.to_box()


def test_case_14():
    str_0 = "h:|3$E&(\t"
    validation_0 = module_0.Validation(str_0, str_0)
    set_0 = {str_0, str_0, str_0, str_0}
    validation_1 = module_0.Validation(set_0, set_0)
    var_0 = validation_1.__eq__(str_0)
    var_1 = validation_0.__eq__(validation_1)
    validation_0.map(var_0)


def test_case_15():
    str_0 = "h:|3L]E&("
    validation_0 = module_0.Validation(str_0, str_0)
    validation_1 = module_0.Validation(str_0, str_0)
    validation_2 = module_0.Validation(validation_1, validation_1)
    var_0 = validation_1.__eq__(validation_1)
    var_1 = validation_1.to_maybe()
    var_2 = var_1.to_lazy()
    var_2.is_success()


def test_case_16():
    bytes_0 = b"\xf1T\x8c8\xdd\xd7<\xed\x13~\x8br\xf5\xc5\xc3P"
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, bytes_0)
    var_0 = validation_0.to_either()
    validation_1 = module_0.Validation(bytes_0, dict_0)
    var_1 = validation_0.__eq__(validation_1)
    var_2 = validation_1.to_maybe()
    var_3 = validation_0.to_lazy()
    var_4 = validation_1.__str__()
    var_5 = var_4.__eq__(bytes_0)
    var_4.is_fail()


def test_case_17():
    int_0 = 2647
    set_0 = {int_0}
    tuple_0 = ()
    validation_0 = module_0.Validation(int_0, tuple_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_maybe()
    var_2 = var_1.__eq__(set_0)
    var_2.to_either()
