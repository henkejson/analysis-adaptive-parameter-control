# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0
import builtins as module_1


def test_case_0():
    bytes_0 = b"\xfb\x96\xed\x19\x98"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    str_0 = "@Tk.boQLs&3;e=ba"
    var_0 = validation_0.__eq__(validation_0)
    dict_0 = {str_0: str_0, str_0: str_0}
    var_1 = validation_0.__eq__(dict_0)
    validation_1 = module_0.Validation(dict_0, str_0)
    var_2 = validation_1.to_lazy()
    var_3 = validation_1.to_try()
    var_4 = validation_0.to_maybe()
    var_5 = var_4.to_lazy()
    str_1 = "cfQoP}9"
    var_6 = var_5.ap(str_1)
    var_7 = validation_0.__eq__(var_3)


def test_case_1():
    bytes_0 = b"\xfb\x96\xed\x19\x98"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.__str__()
    var_1.to_lazy()


def test_case_2():
    bytes_0 = b"\xffnY+H\xd6"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_0.is_success()


def test_case_3():
    bytes_0 = b"'bM\xf4\x1b\xae\x84\xd2qh\xd8Z\xe2\x04c\xe4\x0f=\xeco"
    validation_0 = module_0.Validation(bytes_0, bytes_0)


def test_case_4():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.is_fail()


def test_case_5():
    bool_0 = False
    str_0 = "\n    In mathematics, a semigroup is an algebraic structure\n    consisting of a set together with an associative binary operation.\n    A semigroup generalizes a monoid in that there might not exist an identity element.\n    It also (originally) generalized a group (a monoid with all inverses)\n    to a type where every element did not have to have an inverse, this the name semigroup.\n    "
    validation_0 = module_0.Validation(str_0, str_0)
    validation_0.map(bool_0)


def test_case_6():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.bind(none_type_0)


def test_case_7():
    bytes_0 = b"\xfb\x96\xed\x19\x98"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    str_0 = "@Tk.boQLs3;e=ba"
    var_0 = validation_0.__eq__(validation_0)
    dict_0 = {str_0: str_0, str_0: str_0, var_0: bytes_0}
    var_1 = validation_0.__eq__(dict_0)
    validation_1 = module_0.Validation(dict_0, str_0)
    var_2 = var_0.__str__()
    var_3 = validation_1.to_lazy()
    var_4 = validation_1.to_try()
    var_5 = validation_0.to_maybe()
    var_6 = var_5.to_lazy()
    validation_1.ap(var_1)


def test_case_8():
    bytes_0 = b"D\x19\xbf\xfe\xd0\xd9\xc8\xf5"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_box()
    var_0.ap(bytes_0)


def test_case_9():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_lazy()
    var_0.is_fail()


def test_case_10():
    none_type_0 = None
    none_type_1 = None
    validation_0 = module_0.Validation(none_type_1, none_type_1)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_box()
    var_1.bind(none_type_0)


def test_case_11():
    object_0 = module_1.object()
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.to_try()


def test_case_12():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.__eq__(dict_0)
    var_2 = validation_0.to_either()
    var_3 = var_2.to_lazy()
    var_1.bind(dict_0)


def test_case_13():
    bytes_0 = b"\xfb\x96\xed\x19\x98"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)
    var_0.to_maybe()


def test_case_14():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_maybe()
    var_2 = validation_0.__eq__(dict_0)
    var_3 = validation_0.to_either()
    var_4 = var_1.to_either()
    var_5 = var_3.to_lazy()
    var_2.bind(dict_0)


def test_case_15():
    bytes_0 = b"\xfb\x96\xed\x19\x98"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    str_0 = "@Tk.boQLs3;e=ba"
    var_0 = validation_0.__eq__(validation_0)
    dict_0 = {str_0: str_0, str_0: str_0, var_0: bytes_0}
    var_1 = validation_0.__eq__(dict_0)
    validation_1 = module_0.Validation(dict_0, str_0)
    var_2 = var_0.__str__()
    var_3 = var_0.__str__()
    var_4 = validation_1.to_lazy()
    var_5 = validation_1.__eq__(validation_0)
    var_6 = validation_0.to_box()
    validation_2 = module_0.Validation(validation_0, var_0)
    var_2.to_try()
