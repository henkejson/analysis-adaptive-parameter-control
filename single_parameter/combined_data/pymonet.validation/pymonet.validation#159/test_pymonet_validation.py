# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bytes_0 = b",\nP{Z\xdb\x92pu"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(bytes_0)


def test_case_1():
    bytes_0 = b"\xdc\xa3\xee\x16$\x91"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()


def test_case_2():
    bytes_0 = b"H\x01\xe9d'\xe3\x1di\x86"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()


def test_case_3():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.is_success()
    var_1 = validation_0.to_maybe()
    var_0.to_lazy()


def test_case_4():
    bytes_0 = b"#\xab4\x83\x96\xb8?\xfd\xd5nb-"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()


def test_case_5():
    bytes_0 = b"\nP\xb7Z\x81\xdb\xdf\xa2"
    validation_0 = module_0.Validation(bytes_0, bytes_0)


def test_case_6():
    bytes_0 = b"Z\xf4?\x08\xfe"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.is_success()


def test_case_7():
    bytes_0 = b"\nP\xb7Z\x0f\xdb\xdf"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.is_fail()


def test_case_8():
    bytes_0 = b"\\u"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_0.map(bytes_0)


def test_case_9():
    bytes_0 = b"\xe9\x1a,\xbbJDx?\x13lNT."
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_0.bind(validation_0)


def test_case_10():
    bytes_0 = b"O\xd7\xa0Rk\xdb\\Y\xe8\xaa"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_0.ap(bytes_0)


def test_case_11():
    bytes_0 = b"<y!\xafd5\xf7\x93\xa6ns\x0e|"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_box()


def test_case_12():
    bytes_0 = b"9\xca\xab\xfbI\n:\xbb\\\xd8N\xdf"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_lazy()


def test_case_13():
    bytes_0 = b"'@ez\xec\xb2/M\xaf\x98\x91\xda\x15\x7f\xe1p\xfb"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.map(bytes_0)
    var_2 = var_1.bind(bytes_0)
    var_2.to_box()


def test_case_14():
    bytes_0 = b"\xebbYx\xe4\x0bD\x85}\xdf\x9eL,"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_try()


def test_case_15():
    int_0 = 1
    validation_0 = module_0.Validation(int_0, int_0)
    str_0 = ""
    validation_1 = module_0.Validation(str_0, str_0)
    var_0 = validation_1.__str__()
    var_1 = validation_1.to_try()
    var_2 = var_1.__str__()
    var_2.bind(str_0)


def test_case_16():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_either()


def test_case_17():
    bytes_0 = b"\x14%N\x1c\xb5\xca\x98pP\xc3\x06\xb2\xb1\x1c\xa0O$@"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)


def test_case_18():
    none_type_0 = None
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    bool_1 = False
    dict_0 = {bool_1: bool_1}
    validation_1 = module_0.Validation(dict_0, bool_1)
    var_0 = validation_1.__eq__(validation_0)
    var_0.map(none_type_0)
