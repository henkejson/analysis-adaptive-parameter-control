# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import builtins as module_0
import pymonet.validation as module_1


def test_case_0():
    bool_0 = True
    object_0 = module_0.object()
    none_type_0 = None
    validation_0 = module_1.Validation(object_0, none_type_0)
    var_0 = validation_0.__eq__(bool_0)
    var_0.to_either()


def test_case_1():
    int_0 = -584
    tuple_0 = ()
    validation_0 = module_1.Validation(tuple_0, tuple_0)
    var_0 = validation_0.__eq__(int_0)
    var_1 = validation_0.__str__()
    tuple_0.to_lazy()


def test_case_2():
    float_0 = 152.37
    set_0 = {float_0, float_0}
    list_0 = [float_0, float_0, set_0, set_0]
    validation_0 = module_1.Validation(set_0, list_0)
    var_0 = validation_0.__str__()
    var_1 = var_0.__eq__(set_0)
    validation_0.bind(var_0)


def test_case_3():
    bool_0 = False
    tuple_0 = ()
    validation_0 = module_1.Validation(bool_0, tuple_0)
    var_0 = validation_0.to_either()
    var_0.to_either()


def test_case_4():
    str_0 = "<K#tdGw%-}"
    validation_0 = module_1.Validation(str_0, str_0)


def test_case_5():
    float_0 = -2352.42
    validation_0 = module_1.Validation(float_0, float_0)
    validation_0.to_maybe()


def test_case_6():
    bool_0 = True
    validation_0 = module_1.Validation(bool_0, bool_0)
    str_0 = "U"
    validation_1 = module_1.Validation(str_0, bool_0)
    validation_1.is_fail()


def test_case_7():
    none_type_0 = None
    validation_0 = module_1.Validation(none_type_0, none_type_0)
    validation_0.map(none_type_0)


def test_case_8():
    tuple_0 = ()
    str_0 = "\n        Take function Function(A) -> B and returns new Lazy with mapped result of Lazy constructor function.\n        Both mapper end constructor will be called only during calling fold method.\n\n        :param mapper: mapper function\n        :type mapper: Function(A) -> B\n        :returns: Lazy with mapped value\n        :rtype: Lazy[Function() -> B)]\n        "
    validation_0 = module_1.Validation(str_0, str_0)
    validation_0.bind(tuple_0)


def test_case_9():
    str_0 = "#uz%\rR*"
    bool_0 = True
    dict_0 = {str_0: bool_0}
    float_0 = -1993.92443
    none_type_0 = None
    validation_0 = module_1.Validation(float_0, none_type_0)
    validation_0.ap(dict_0)


def test_case_10():
    tuple_0 = ()
    int_0 = -3466
    tuple_1 = (int_0,)
    validation_0 = module_1.Validation(int_0, tuple_1)
    var_0 = validation_0.to_box()
    var_0.ap(tuple_0)


def test_case_11():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    none_type_0 = None
    validation_0 = module_1.Validation(tuple_1, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.__str__()
    var_1.to_box()


def test_case_12():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    validation_0 = module_1.Validation(dict_0, dict_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_maybe()
    var_1.to_maybe()


def test_case_13():
    object_0 = module_0.object()
    validation_0 = module_1.Validation(object_0, object_0)
    validation_0.to_try()


def test_case_14():
    bytes_0 = b"\xe7\xef\xfb+d\xeb\x0e:\xec\x06\x05\x13\xfc"
    validation_0 = module_1.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.is_fail()
    var_1.is_fail()


def test_case_15():
    tuple_0 = ()
    validation_0 = module_1.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.__str__()
    var_1.to_maybe()


def test_case_16():
    bytes_0 = b"\xb4\x8c\xaau\x0e_~C\x11\x9d\x1e,\xa5}\xa2\xe6\x94,\xce"
    str_0 = "*#UEA\\j\\rX.L"
    validation_0 = module_1.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.bind(bytes_0)
    var_2 = var_1.to_box()
    var_3 = var_2.to_maybe()
    var_3.to_maybe()


def test_case_17():
    tuple_0 = ()
    validation_0 = module_1.Validation(tuple_0, tuple_0)
    var_0 = validation_0.__eq__(validation_0)
    var_0.to_maybe()


def test_case_18():
    tuple_0 = ()
    none_type_0 = None
    validation_0 = module_1.Validation(none_type_0, none_type_0)
    var_0 = tuple_0.__str__()
    validation_1 = module_1.Validation(none_type_0, validation_0)
    var_1 = validation_1.__eq__(validation_0)
    var_0.to_lazy()
