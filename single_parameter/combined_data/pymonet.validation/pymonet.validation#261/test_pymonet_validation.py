# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bytes_0 = b"\xc5!\xaag5\xfey\xda"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_1 = module_0.Validation(bytes_0, validation_0)
    var_0 = validation_1.__eq__(validation_0)
    var_0.bind(bytes_0)


def test_case_1():
    str_0 = "]7'\\LjN.qCp@58"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_box()
    var_2 = var_1.to_try()
    var_0.is_fail()


def test_case_2():
    bytes_0 = b"\xc5!\xaag5\xfey\xda"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.is_success()
    var_1.to_try()


def test_case_3():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)


def test_case_4():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.to_either()


def test_case_5():
    float_0 = 88.633
    validation_0 = module_0.Validation(float_0, float_0)
    validation_0.is_fail()


def test_case_6():
    int_0 = -866
    bytes_0 = b"\x95\x85R\x84\xdf\xc8\xe5\xab\xb4z\x9dI\x99*"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_0.map(int_0)


def test_case_7():
    set_0 = set()
    none_type_0 = None
    validation_0 = module_0.Validation(set_0, set_0)
    validation_0.bind(none_type_0)


def test_case_8():
    dict_0 = {}
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.ap(dict_0)


def test_case_9():
    int_0 = -1957
    validation_0 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.to_box()


def test_case_10():
    str_0 = "\n        Transform Either to Maybe.\n\n        :returns: Maybe with previous value\n        :rtype: Maybe[A]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_either()
    bytes_0 = b"\xedK\x14\xac\xeag\x83!Iv\xb3[\x05\xc8"
    var_2 = validation_0.is_success()
    none_type_0 = None
    validation_1 = module_0.Validation(bytes_0, none_type_0)
    bool_0 = False
    validation_2 = module_0.Validation(bytes_0, bool_0)
    var_3 = validation_2.__eq__(bytes_0)
    var_3.to_try()


def test_case_11():
    complex_0 = -2513 + 468.33235j
    str_0 = "!$T$\x0b\\F\\z."
    validation_0 = module_0.Validation(complex_0, str_0)
    var_0 = validation_0.to_try()
    var_0.to_try()


def test_case_12():
    float_0 = 88.633
    validation_0 = module_0.Validation(float_0, float_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_0.is_fail()


def test_case_13():
    list_0 = []
    none_type_0 = None
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.__str__()
    var_2 = var_1.__str__()
    var_2.ap(none_type_0)


def test_case_14():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.to_maybe()
    var_2 = var_0.to_either()
    var_2.is_fail()


def test_case_15():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.__str__()
    var_0.is_success()


def test_case_16():
    bytes_0 = b"\xc5!\xaag5\xfey\xda"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    var_0.to_maybe()
