# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0
import builtins as module_1


def test_case_0():
    bytes_0 = b"E\xd94\xc2\x9d\x10\r\xff \xb1\x98"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(bytes_0)


def test_case_1():
    bytes_0 = b"E\xd94\xc2\x9dz\x10\xd9\r\xff \xb1\x98"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_maybe()
    validation_1 = module_0.Validation(bytes_0, bytes_0)
    var_2 = validation_1.__eq__(bytes_0)


def test_case_2():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    none_type_0 = None
    var_0 = validation_0.__eq__(none_type_0)
    var_1 = validation_0.to_either()
    validation_1 = module_0.Validation(var_1, validation_0)
    var_2 = var_1.__str__()
    validation_1.to_either()


def test_case_3():
    bytes_0 = b"\x0b?\xec\xd9\x89\xdbl\xea\x18v\xe6^"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.__str__()
    validation_1 = module_0.Validation(var_1, var_1)
    var_2 = validation_1.__str__()
    var_2.to_box()


def test_case_4():
    str_0 = "[KuF1k=Im%.LE<`"
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.is_fail()
    var_2 = validation_0.to_try()
    var_3 = validation_0.to_maybe()
    var_1.bind(str_0)


def test_case_5():
    bytes_0 = b"E\xd94\xc2\x9dz\x10\xd9\r\xff \xb1\x98"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    validation_1 = module_0.Validation(bytes_0, bytes_0)
    var_1 = validation_1.__eq__(bytes_0)


def test_case_6():
    bytes_0 = b"\xb8\xd6\x18\xcbQ\x90\x192<z\xdeu\x1c\xa2\x01\xc5\xd2\xd5i"
    bytes_0.to_lazy()


def test_case_7():
    bytes_0 = b"E\xd94\xc2\x9d\x10\r\xff \xb1\x98"
    validation_0 = module_0.Validation(bytes_0, bytes_0)


def test_case_8():
    int_0 = -2043
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.is_fail()


def test_case_9():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    validation_0.map(validation_0)


def test_case_10():
    str_0 = "QnDe@6"
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    validation_0.bind(str_0)


def test_case_11():
    none_type_0 = None
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.ap(none_type_0)


def test_case_12():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.to_either()


def test_case_13():
    bytes_0 = b"E\xd94\xc2\x9dz\xa4\xd9\r\xff \xb1\x98"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_1 = validation_0.to_lazy()
    var_1 = validation_1.__eq__(bytes_0)


def test_case_14():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.to_try()


def test_case_15():
    bytes_0 = b"E\xd94\xc2\x9dz\x10\xd9\r\xff \xb1\x98"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_either()
    var_2 = var_1.to_lazy()
    var_3 = var_2.to_maybe()
    var_4 = var_1.bind(bytes_0)
    var_5 = var_4.bind(var_1)
    var_6 = validation_0.to_lazy()
    var_7 = var_6.to_box()
    var_8 = validation_0.is_success()
    var_9 = validation_0.to_lazy()
    var_10 = validation_0.to_either()
    var_11 = var_3.to_either()
    validation_1 = module_0.Validation(var_11, var_7)
    var_2.is_fail()


def test_case_16():
    bytes_0 = b"E\xd94\xc2\x9dz\xa4\xd9\r\xff \xb1\x98"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_1 = module_0.Validation(bytes_0, bytes_0)
    var_1 = validation_1.__eq__(bytes_0)


def test_case_17():
    set_0 = set()
    str_0 = "y{DA"
    validation_0 = module_0.Validation(str_0, set_0)
    var_0 = validation_0.__str__()
    var_0.to_box()


def test_case_18():
    bytes_0 = b"\xb8\xd6\x18\xcbQ\x90\x192<\xdeu\x1c\xa2\x01\xc5\xd2\xd5i"
    bytes_1 = b".\xbe?"
    none_type_0 = None
    validation_0 = module_0.Validation(bytes_1, none_type_0)
    validation_1 = module_0.Validation(validation_0, bytes_0)
    var_0 = validation_1.to_try()
    var_1 = validation_0.__eq__(validation_1)
    module_1.object(*none_type_0)
