# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bytes_0 = b"{\xc5h\xa8+\x94\x86\xf6"
    int_0 = 2992
    validation_0 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.__eq__(bytes_0)
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    var_1 = var_0.__str__()
    var_2 = validation_0.to_lazy()
    validation_0.is_fail()


def test_case_1():
    str_0 = "\n    Sum is a Monoid that will combine 2 numbers under addition.\n    "
    float_0 = 599.2682
    validation_0 = module_0.Validation(float_0, str_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_box()
    var_2 = validation_0.to_maybe()
    var_3 = validation_0.__eq__(float_0)
    validation_1 = module_0.Validation(var_0, var_0)
    var_3.to_lazy()


def test_case_2():
    str_0 = "U"
    validation_0 = module_0.Validation(str_0, str_0)


def test_case_3():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.__str__()


def test_case_4():
    int_0 = 1
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.is_fail()


def test_case_5():
    int_0 = 4693
    str_0 = "\\Sy(GCA]?x!,C<ho<R5j"
    validation_0 = module_0.Validation(str_0, str_0)
    validation_0.map(int_0)


def test_case_6():
    none_type_0 = None
    str_0 = "U"
    validation_0 = module_0.Validation(str_0, str_0)
    validation_0.bind(none_type_0)


def test_case_7():
    int_0 = -670
    str_0 = "xe#|<\n5W%j~|9;&Ot Nf"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_try()
    validation_0.ap(int_0)


def test_case_8():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_box()
    var_0.to_box()


def test_case_9():
    bytes_0 = b"\xaa\xfd\xf3\xcd\xad\x07\x8b\xc3\xf8\x95\xa4\x03\x8f\xb8-\xf9\xdf"
    str_0 = "_\x0c% p"
    str_1 = "FeZ``V\x0b#'rSlk'<#^"
    validation_0 = module_0.Validation(str_0, str_1)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_box()
    var_2 = var_1.__eq__(bytes_0)


def test_case_10():
    str_0 = "\\Sy(GCA]?x!,C<ho<R5j"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.is_fail()
    var_0.is_fail()


def test_case_11():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_0.ap(var_0)


def test_case_12():
    str_0 = "\n    Sum is a Monoid that will combine 2 numbers under addition.\n    "
    float_0 = 599.2682
    validation_0 = module_0.Validation(float_0, str_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.__eq__(float_0)
    str_0.to_lazy()


def test_case_13():
    dict_0 = {}
    str_0 = "\n    Sum is a Monoid that will combine 2 numbers under addition.\n    "
    float_0 = 599.2682
    validation_0 = module_0.Validation(float_0, str_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.__eq__(float_0)
    var_2 = var_0.__eq__(dict_0)
    var_3 = validation_0.to_lazy()
    none_type_0 = None
    var_4 = var_1.__eq__(var_1)
    validation_1 = module_0.Validation(none_type_0, dict_0)
    var_5 = validation_1.to_either()
    var_6 = var_5.to_lazy()
    var_6.is_success()


def test_case_14():
    bool_0 = True
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_box()
    var_2 = var_1.to_try()
    var_2.bind(bool_0)


def test_case_15():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_maybe()
    str_0 = "\n    Sum is a Monoid that will combine 2 numbers under addition.\n    "
    float_0 = 599.2682
    validation_1 = module_0.Validation(float_0, str_0)
    var_1 = validation_1.__str__()
    var_2 = validation_1.__str__()
    var_3 = validation_1.to_box()
    var_4 = validation_1.to_maybe()
    var_5 = validation_1.__eq__(float_0)
    var_6 = validation_1.is_success()
    var_6.to_lazy()


def test_case_16():
    none_type_0 = None
    int_0 = 2992
    validation_0 = module_0.Validation(none_type_0, int_0)
    validation_1 = module_0.Validation(int_0, validation_0)
    var_0 = validation_1.__eq__(validation_0)
    validation_2 = module_0.Validation(int_0, var_0)
    validation_0.map(var_0)
