# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    str_0 = "yu(z&"
    list_0 = [str_0, str_0]
    validation_0 = module_0.Validation(str_0, list_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_lazy()
    var_2 = validation_0.to_maybe()
    var_3 = validation_0.__eq__(var_2)


def test_case_1():
    str_0 = "ImmutableList: you can not add any other instace than ImmutableList"
    list_0 = [str_0, str_0]
    validation_0 = module_0.Validation(str_0, list_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_lazy()
    var_2 = validation_0.to_maybe()


def test_case_2():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_3():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.to_try()


def test_case_4():
    complex_0 = 1481.6 + 961.255j
    validation_0 = module_0.Validation(complex_0, complex_0)
    validation_0.is_fail()


def test_case_5():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.map(validation_0)


def test_case_6():
    bytes_0 = b"\x8b\xcc\xd3\xfc\xc8"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_0.bind(bytes_0)


def test_case_7():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.is_fail()
    var_1 = validation_0.is_fail()
    var_2 = var_0.__eq__(var_0)
    validation_0.ap(validation_0)


def test_case_8():
    str_0 = 'yui("I'
    list_0 = [str_0, str_0]
    validation_0 = module_0.Validation(str_0, list_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_box()
    var_2 = validation_0.to_lazy()
    var_3 = validation_0.to_maybe()
    var_1.is_fail()


def test_case_9():
    bool_0 = False
    none_type_0 = None
    validation_0 = module_0.Validation(bool_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_try()
    var_1.to_lazy()


def test_case_10():
    bytes_0 = b"\xa4R\xac\xb58\x9d\x1d\xc1\x9a\x1eXE\x07\x8e\xff}\x86\xe7"
    bytes_1 = b"\xa4R\xac\xb58\x9d\xc1\x1eXE\x07\x8e\xff}\x86\xe7"
    validation_0 = module_0.Validation(bytes_0, bytes_1)
    validation_1 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = validation_1.to_try()
    var_2 = validation_1.__eq__(var_1)
    var_3 = validation_1.__str__()
    var_4 = validation_0.to_box()
    var_1.to_lazy()


def test_case_11():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.is_success()
    bytes_0 = b"\xa4R\xac\xb58\x9d\x1d\xc1\x9a\x1eXE\x07\x8e\xff}\x86\xe7"
    validation_1 = module_0.Validation(bytes_0, bytes_0)
    validation_2 = validation_0.to_either()
    var_0.to_box()


def test_case_12():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    float_0 = 1421.64446
    validation_1 = module_0.Validation(float_0, float_0)
    var_0 = validation_0.__eq__(validation_1)
    var_1 = validation_1.to_box()
    var_1.is_success()


def test_case_13():
    bytes_0 = b"\xa4R\xac\xb58\x9d\x1d\xc1\x9a\x1eXE\x07\x8e\xff}\x86\xe7"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, validation_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_either()
    var_2 = var_1.ap(validation_0)
    var_3 = validation_0.__eq__(validation_0)
    var_4 = var_1.to_maybe()
    var_5 = validation_0.__str__()
    var_3.bind(var_3)


def test_case_14():
    bytes_0 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.to_maybe()
    validation_0.map(var_1)


def test_case_15():
    bytes_0 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    var_0.to_box()
