# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0
import builtins as module_1


def test_case_0():
    str_0 = 'x"V{g/j0s]'
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, str_0)
    var_0 = validation_0.__eq__(none_type_0)
    var_1 = var_0.__eq__(str_0)
    var_1.to_box()


def test_case_1():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_maybe()
    var_2 = validation_0.__str__()
    var_0.is_success()


def test_case_2():
    bool_0 = True
    str_0 = "#h\tP_M"
    validation_0 = module_0.Validation(bool_0, str_0)
    var_0 = validation_0.to_maybe()


def test_case_3():
    str_0 = "G]mXx)`\\$:aLSy3dZ"
    validation_0 = module_0.Validation(str_0, str_0)


def test_case_4():
    str_0 = "G]mXx)`\\$:aLSy3dZ"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.is_success()


def test_case_5():
    str_0 = "*jf47j}"
    bytes_0 = b"\x00\xa5\x03\x00\xbeN\x89"
    set_0 = {bytes_0, bytes_0, bytes_0}
    tuple_0 = (set_0,)
    validation_0 = module_0.Validation(tuple_0, set_0)
    var_0 = validation_0.is_fail()
    var_1 = var_0.__eq__(str_0)


def test_case_6():
    int_0 = 0
    int_1 = 5672
    validation_0 = module_0.Validation(int_1, int_1)
    validation_0.map(int_0)


def test_case_7():
    int_0 = 76
    str_0 = "\n        Transform Either into Validation.\n\n        :returns: successfull Validation monad with previous value\n        :rtype: Validation[A, []]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    validation_0.bind(int_0)


def test_case_8():
    str_0 = "+8~ytX.(UI`Bnu3=P@~0"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.ap(str_0)


def test_case_9():
    float_0 = -2468.159731899205
    none_type_0 = None
    str_0 = 'x"V{g/j0s]'
    validation_0 = module_0.Validation(none_type_0, str_0)
    var_0 = validation_0.__eq__(float_0)
    var_1 = validation_0.to_box()
    var_2 = var_1.to_either()
    var_0.to_maybe()


def test_case_10():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    validation_0 = module_0.Validation(dict_0, bool_0)
    var_0 = validation_0.to_lazy()
    var_0.is_fail()


def test_case_11():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.to_try()


def test_case_12():
    bytes_0 = b"\xae\xda"
    str_0 = "W*lxa,7Suc'`"
    validation_0 = module_0.Validation(str_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.__str__()
    var_2 = var_1.__eq__(validation_0)
    dict_0 = {bytes_0: bytes_0}
    validation_1 = module_0.Validation(dict_0, bytes_0)
    validation_1.bind(var_2)


def test_case_13():
    bool_0 = False
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.is_fail()
    var_1 = validation_0.to_either()
    var_0.ap(bool_0)


def test_case_14():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0}
    bool_0 = False
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    none_type_0 = None
    var_0 = dict_0.__eq__(none_type_0)
    var_1 = validation_0.to_maybe()
    var_2 = var_1.to_either()
    var_2.map(bool_0)


def test_case_15():
    str_0 = "LJA>MaNyVC=[\rw?6"
    bytes_0 = b"\xae\xda"
    validation_0 = module_0.Validation(bytes_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_either()
    var_2 = var_1.to_box()
    str_1 = "W*lxa,7Suc'`"
    validation_1 = module_0.Validation(str_1, bytes_0)
    var_3 = validation_0.__eq__(validation_1)
    dict_0 = {bytes_0: bytes_0}
    validation_2 = module_0.Validation(dict_0, bytes_0)
    validation_2.bind(var_3)


def test_case_16():
    float_0 = -2501.451
    none_type_0 = None
    str_0 = 'x"V{g/j0s]'
    validation_0 = module_0.Validation(none_type_0, str_0)
    var_0 = validation_0.__eq__(float_0)
    var_1 = validation_0.__eq__(validation_0)
    var_2 = validation_0.to_box()
    var_3 = var_2.to_either()
    module_1.object(**str_0)
