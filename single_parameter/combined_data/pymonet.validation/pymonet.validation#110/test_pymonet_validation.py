# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bytes_0 = b"5\xf9@\xe5\xae\xa2p\xa9\xf1W!4\x08&\xac@"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(bytes_0)


def test_case_1():
    str_0 = 'q3W"y0[XLWH3l-e\rhk)'
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    validation_1 = module_0.Validation(str_0, str_0)
    var_1 = var_0.__eq__(str_0)
    var_0.to_either()


def test_case_2():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_either()
    var_0.bind(list_0)


def test_case_3():
    str_0 = '/;406j4M_oH"`X'
    list_0 = [str_0]
    bytes_0 = b"\xd8\x9dV)N&\xbc"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.__eq__(list_0)
    var_1.is_success()


def test_case_4():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_try()
    var_1 = validation_0.to_lazy()
    var_2 = validation_0.to_maybe()
    validation_0.bind(var_0)


def test_case_5():
    bytes_0 = b"ZN{\xa0\xc8"
    bytes_1 = b"5\xf9@\xe5\xae\xa2p\xa9\xf1W!4\x08&\xac@"
    validation_0 = module_0.Validation(bytes_1, bytes_1)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.ap(bytes_0)


def test_case_6():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_7():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.__eq__(var_0)
    validation_0.is_fail()


def test_case_8():
    none_type_0 = None
    bool_0 = True
    none_type_1 = None
    validation_0 = module_0.Validation(bool_0, none_type_1)
    var_0 = validation_0.__eq__(none_type_0)
    validation_0.map(none_type_1)


def test_case_9():
    set_0 = set()
    bool_0 = True
    tuple_0 = (bool_0,)
    bytes_0 = b"\xa6\xbe6\x10\x98\x13\x9a=\x8a\xe2\xf6\xac"
    validation_0 = module_0.Validation(tuple_0, bytes_0)
    validation_0.bind(set_0)


def test_case_10():
    int_0 = 0
    tuple_0 = (int_0,)
    none_type_0 = None
    validation_0 = module_0.Validation(tuple_0, none_type_0)
    validation_0.ap(int_0)


def test_case_11():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.__eq__(var_0)
    var_2 = var_0.to_lazy()
    var_3 = validation_0.to_lazy()
    var_4 = var_0.__str__()
    validation_1 = module_0.Validation(var_0, var_3)
    validation_0.is_success()


def test_case_12():
    bool_0 = False
    none_type_0 = None
    validation_0 = module_0.Validation(bool_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_0.to_lazy()


def test_case_13():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.__eq__(var_0)
    var_2 = validation_0.to_lazy()
    var_3 = validation_0.to_box()
    var_4 = var_0.__eq__(var_0)
    var_5 = var_3.__eq__(var_1)
    var_6 = var_2.to_either()
    var_7 = var_2.__eq__(var_5)
    var_0.to_box()


def test_case_14():
    none_type_0 = None
    bool_0 = False
    none_type_1 = None
    validation_0 = module_0.Validation(bool_0, none_type_1)
    var_0 = validation_0.__eq__(none_type_0)
    validation_0.to_try()


def test_case_15():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.__eq__(validation_0)
    var_1.ap(validation_0)


def test_case_16():
    bool_0 = False
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_box()
    complex_0 = -1821.60571 + 823.5428j
    tuple_0 = (var_0, complex_0, var_0)
    validation_1 = module_0.Validation(bool_0, tuple_0)
    var_1 = validation_0.__eq__(validation_1)
    var_2 = validation_1.to_try()
    var_3 = var_1.__eq__(var_2)
    var_4 = var_0.to_either()
    var_5 = var_2.__eq__(bool_0)
    var_3.to_box()


def test_case_17():
    bytes_0 = b"ZN{\xa0\xc8"
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.__str__()
    var_0.map(bytes_0)
