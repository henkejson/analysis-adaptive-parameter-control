# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    str_0 = 't41kZ,nI"#\tfS;$M'
    none_type_0 = None
    validation_0 = module_0.Validation(str_0, none_type_0)
    var_0 = validation_0.__eq__(str_0)
    var_0.is_success()


def test_case_1():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_box()
    var_1.is_success()


def test_case_2():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)


def test_case_3():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.is_success()


def test_case_4():
    bytes_0 = b">\x88<+x\xb9\xd5"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.__str__()
    var_2 = validation_0.is_fail()
    var_1.map(validation_0)


def test_case_5():
    bool_0 = True
    str_0 = "QfpYZ}l3"
    validation_0 = module_0.Validation(str_0, bool_0)
    validation_0.map(bool_0)


def test_case_6():
    bytes_0 = b"\\\xf6.\x0b\x93"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, validation_0)
    validation_1.bind(bytes_0)


def test_case_7():
    bytes_0 = b">\x88<+Y\xb9\xfbT\xd5"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_0.ap(validation_0)


def test_case_8():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_box()
    int_0 = 1
    str_0 = 'dkMn",a\r:'
    var_1 = validation_0.__eq__(str_0)
    validation_1 = module_0.Validation(int_0, int_0)
    validation_1.to_either()


def test_case_9():
    bytes_0 = b">\x88<+x\xb9\xd5"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_box()


def test_case_10():
    str_0 = 't41kZ,nI"#\tfS;$M'
    none_type_0 = None
    validation_0 = module_0.Validation(str_0, none_type_0)
    validation_0.to_try()


def test_case_11():
    bytes_0 = b">\x88<+x\xb9\xd5"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    bytes_1 = b"\\\xf6.C\x81\x0b\x93"
    var_1 = validation_0.__eq__(validation_0)
    var_2 = validation_0.to_maybe()
    validation_1 = module_0.Validation(var_0, var_2)
    var_3 = validation_0.is_fail()
    var_4 = validation_1.__eq__(validation_1)
    bytes_1.to_try()


def test_case_12():
    bytes_0 = b">\x88<+x\xb9\xd5"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    none_type_0 = None
    validation_1 = module_0.Validation(validation_0, none_type_0)


def test_case_13():
    bytes_0 = b">\x88<+x\xb9\xd5"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_either()
    bytes_1 = b"\\\xf6.C\x81\x0b\x93"
    validation_1 = module_0.Validation(var_1, bytes_1)
    var_2 = validation_1.__eq__(validation_0)
    var_3 = validation_0.to_maybe()
    validation_2 = module_0.Validation(var_1, var_3)
    validation_2.is_success()


def test_case_14():
    int_0 = -1828
    dict_0 = {}
    validation_0 = module_0.Validation(int_0, dict_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.__str__()
    var_1.to_try()


def test_case_15():
    bytes_0 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.to_either()
    bytes_1 = b"\\\xf6.C\x81\x0b\x93"
    validation_1 = module_0.Validation(var_1, bytes_1)
    var_2 = var_0.__eq__(validation_1)
    var_0.to_maybe()
