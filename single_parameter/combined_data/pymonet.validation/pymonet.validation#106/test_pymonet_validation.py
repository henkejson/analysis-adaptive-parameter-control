# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bytes_0 = b"\x03\xf54\x1d\x90\xcf\xc8C"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(bytes_0)
    var_0.ap(bytes_0)


def test_case_1():
    str_0 = ""
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    var_0.to_lazy()


def test_case_2():
    bytes_0 = b"\x15\xf9\xf8\x9aSV\x8d\xef\xfd\x91H\xa4\xc2\x11"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.__str__()
    var_2 = validation_0.to_maybe()
    var_3 = validation_0.to_lazy()
    validation_1 = module_0.Validation(var_2, var_2)
    validation_1.is_success()


def test_case_3():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_either()
    var_0.to_either()


def test_case_4():
    bytes_0 = b"\x15\xf9\xf8\x9aSV\x8d\xef\xfd\x91H\xa4\xc2\x11"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()


def test_case_5():
    complex_0 = -1512.3450829932817 + 134.42354j
    validation_0 = module_0.Validation(complex_0, complex_0)


def test_case_6():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.__str__()


def test_case_7():
    bool_0 = True
    bool_1 = False
    int_0 = 855
    bytes_0 = b"\xc7(\xe8\xee\x0c3\xd1"
    validation_0 = module_0.Validation(bool_1, int_0)
    var_0 = validation_0.__eq__(bool_0)
    set_0 = {bytes_0, bytes_0, bytes_0}
    validation_1 = module_0.Validation(set_0, set_0)
    var_1 = validation_1.is_fail()
    validation_1.ap(int_0)


def test_case_8():
    bytes_0 = b"\x15\xf9\xf8\x9aSV\x8d\xef\xfd\x91H\xa4\xc2\x11"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_maybe()
    var_2 = validation_0.__str__()
    validation_0.map(validation_0)


def test_case_9():
    str_0 = " nIBO;%Pc?Q\x0b='"
    int_0 = 180
    none_type_0 = None
    validation_0 = module_0.Validation(int_0, none_type_0)
    validation_0.bind(str_0)


def test_case_10():
    complex_0 = -1514.4966 + 134.42354j
    validation_0 = module_0.Validation(complex_0, complex_0)
    var_0 = validation_0.to_box()
    var_0.is_success()


def test_case_11():
    bytes_0 = b"\x15\xf9\xf8\x9aSV\x8d\xef\xfd\x91H\xa4\xc2\x11"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_maybe()
    var_2 = validation_0.to_lazy()
    var_3 = var_2.to_try()
    var_1.is_success()


def test_case_12():
    int_0 = 1
    bool_0 = False
    bytes_0 = b"Q\xf8W\x85jF\xfb%\xba\x10\xa5qv&:^"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, bytes_0)
    var_0 = validation_0.to_try()
    var_1 = var_0.__str__()
    validation_1 = module_0.Validation(bytes_0, bool_0)
    list_0 = [bool_0, bytes_0, bool_0, bool_0]
    none_type_1 = None
    validation_2 = module_0.Validation(list_0, none_type_1)
    var_2 = validation_2.__eq__(int_0)
    var_2.is_success()


def test_case_13():
    bytes_0 = b"\x03\xf54\x1d\x90\xcf\xc8C"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(bytes_0)
    validation_1 = module_0.Validation(var_0, validation_0)
    var_1 = validation_0.__eq__(validation_1)
    validation_1.is_success()


def test_case_14():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)
    var_0.to_maybe()


def test_case_15():
    str_0 = ""
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    var_0.ap(validation_0)
