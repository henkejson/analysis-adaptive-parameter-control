# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    str_0 = "x8]QghHU\nC@Dz"
    bytes_0 = b"\x97\xd6\x01\x11\xe4"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(str_0)
    var_0.is_success()


def test_case_1():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.is_fail()
    var_1 = validation_0.__str__()
    var_2 = validation_0.to_lazy()
    var_2.is_fail()


def test_case_2():
    none_type_0 = None
    str_0 = "\r\tP8[B\t&?3^Fk|mR[]("
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(str_0)
    var_1 = validation_0.__str__()
    var_2 = validation_0.to_box()
    var_1.bind(none_type_0)


def test_case_3():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    bool_0 = False
    validation_1 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_1.to_lazy()
    var_1 = validation_0.to_either()
    var_0.is_fail()


def test_case_4():
    str_0 = "B\\S:4z*Ek"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_maybe()
    var_2 = var_1.to_lazy()
    var_3 = var_2.to_try()
    validation_0.bind(var_0)


def test_case_5():
    str_0 = ">&{UY"
    dict_0 = {}
    none_type_0 = None
    validation_0 = module_0.Validation(str_0, dict_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_lazy()
    var_2 = var_1.bind(dict_0)
    var_3 = var_2.__eq__(none_type_0)
    var_3.to_either()


def test_case_6():
    bytes_0 = b"\xe8\x15\x95\x82\xe7\xfb\x00\xff\x94\xbf"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()


def test_case_7():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_8():
    bytes_0 = b"G\xb3\xc5\x92"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_0.map(bytes_0)


def test_case_9():
    none_type_0 = None
    int_0 = -505
    set_0 = {int_0, int_0, int_0}
    validation_0 = module_0.Validation(set_0, set_0)
    validation_0.bind(none_type_0)


def test_case_10():
    bool_0 = True
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.ap(bool_0)


def test_case_11():
    tuple_0 = ()
    bytes_0 = b"\xf4\x04\x08@\xc4E>0\x17=\xf9\xb1a=H"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_try()
    var_1.map(tuple_0)


def test_case_12():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.to_try()


def test_case_13():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_0.to_try()


def test_case_14():
    none_type_0 = None
    str_0 = "\r\tP8[B\t&?3^Fk|mR[]("
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = module_0.Validation(none_type_0, none_type_0)
    var_1 = validation_0.__eq__(validation_0)
    var_2 = validation_0.to_maybe()
    var_3 = validation_0.__eq__(var_0)
    var_4 = var_3.__str__()
    var_0.is_success()
