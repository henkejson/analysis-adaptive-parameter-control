# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    list_0 = []
    list_1 = [list_0, list_0]
    list_2 = [list_1]
    validation_0 = module_0.Validation(list_2, list_2)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = var_0.__str__()
    var_2 = var_1.__str__()
    var_2.to_try()


def test_case_1():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(bool_0)
    var_1 = var_0.__str__()
    var_2 = validation_0.to_lazy()
    var_1.bind(bool_0)


def test_case_2():
    bytes_0 = b'"\xcazw\x13Omu\xcfu+\\.\x19Bh\xe5\xb0\x82'
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_maybe()
    var_2 = validation_0.to_box()
    var_3 = validation_0.__str__()
    var_4 = var_3.__str__()
    var_5 = var_2.to_try()
    var_5.to_either()


def test_case_3():
    str_0 = ";"
    dict_0 = {str_0: str_0, str_0: str_0}
    validation_0 = module_0.Validation(dict_0, str_0)
    var_0 = validation_0.to_either()
    bytes_0 = b"\xa4\xc3\xc5i\xb8)\xbf\xfe\xb2}`&\xbazj^\x1b\x1a\x0fQ"
    dict_1 = {bytes_0: bytes_0, bytes_0: bytes_0}
    validation_1 = module_0.Validation(dict_1, dict_1)
    validation_1.ap(var_0)


def test_case_4():
    str_0 = ";"
    dict_0 = {str_0: str_0, str_0: str_0}
    validation_0 = module_0.Validation(dict_0, str_0)
    var_0 = validation_0.to_either()
    bytes_0 = b"\xa4\xc3\xc5i\xb8)\xbf\xfe\xb2}`&\xbazj^\x1b\x1a\x0fQ"
    dict_1 = {bytes_0: bytes_0, bytes_0: bytes_0}
    validation_1 = module_0.Validation(dict_1, dict_1)
    var_1 = validation_1.to_either()
    var_2 = validation_1.to_maybe()
    var_2.to_maybe()


def test_case_5():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)


def test_case_6():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    validation_1 = module_0.Validation(validation_0, validation_0)
    validation_1.is_fail()


def test_case_7():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.map(none_type_0)


def test_case_8():
    bool_0 = False
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, bool_0)
    validation_0.bind(bool_0)


def test_case_9():
    bool_0 = True
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.ap(bool_0)


def test_case_10():
    str_0 = "\n        Transform Either to Try.\n\n        :returns: Lazy monad with function returning previous value\n        :rtype: Lazy[Function() -> A]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_box()


def test_case_11():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    validation_0 = module_0.Validation(set_0, bool_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.__str__()
    var_1.to_box()


def test_case_12():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    none_type_1 = None
    var_1 = var_0.to_try()
    validation_1 = module_0.Validation(none_type_1, none_type_1)
    validation_0.to_try()


def test_case_13():
    complex_0 = 424.0024 - 2148.53j
    validation_0 = module_0.Validation(complex_0, complex_0)
    validation_0.to_try()


def test_case_14():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_box()
    var_2 = var_1.__str__()
    var_1.to_box()


def test_case_15():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_maybe()
    var_2 = validation_0.__str__()
    validation_0.ap(var_2)


def test_case_16():
    list_0 = []
    list_1 = [list_0, list_0]
    list_2 = [list_1]
    validation_0 = module_0.Validation(list_2, list_2)
    validation_1 = module_0.Validation(list_0, list_1)
    var_0 = validation_1.__eq__(validation_0)
    var_1 = validation_1.is_fail()
    var_1.to_maybe()
