# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    float_0 = -2876.11693
    validation_0 = module_0.Validation(float_0, float_0)
    var_0 = validation_0.__eq__(float_0)


def test_case_1():
    bytes_0 = b"\x11;\xf7\x9b`\xa7\x7fq\xdefp\x879m\xb3w"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()


def test_case_2():
    none_type_0 = None
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_either()
    var_0.ap(none_type_0)


def test_case_3():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    none_type_0 = None
    bytes_0 = b"\x11;\xf7\x9b`\xa7\x7fq\xdefp\x879m\xb3w"
    validation_0 = module_0.Validation(none_type_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.__str__()
    var_2 = validation_0.__eq__(dict_0)
    validation_0.ap(dict_0)


def test_case_4():
    str_0 = "3b##|\tW2X4K{XH9j/;\\d"
    set_0 = {str_0, str_0, str_0, str_0}
    set_1 = set()
    validation_0 = module_0.Validation(set_0, set_1)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_try()
    var_1.is_success()


def test_case_5():
    bool_0 = True
    int_0 = -411
    tuple_0 = (bool_0, int_0)
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_maybe()


def test_case_6():
    bool_0 = False
    bool_0.to_either()


def test_case_7():
    bytes_0 = b"\x8f"
    validation_0 = module_0.Validation(bytes_0, bytes_0)


def test_case_8():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.is_fail()


def test_case_9():
    float_0 = 2516.547
    str_0 = "|Yai\nvlW}Y,J8h \\u"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    validation_0.map(float_0)


def test_case_10():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    bool_0 = False
    bool_1 = False
    validation_1 = module_0.Validation(bool_0, bool_1)
    var_0 = validation_1.to_lazy()
    set_0 = {bool_0, bool_1}
    validation_0.bind(set_0)


def test_case_11():
    str_0 = "1"
    complex_0 = 2648 - 2211.5j
    set_0 = {str_0, complex_0}
    bytes_0 = b"\\^\xd2"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_0.ap(set_0)


def test_case_12():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_box()


def test_case_13():
    float_0 = -2876.11693
    validation_0 = module_0.Validation(float_0, float_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.__eq__(float_0)
    var_1.to_try()


def test_case_14():
    none_type_0 = None
    bool_0 = True
    validation_0 = module_0.Validation(none_type_0, bool_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_maybe()
    var_1.ap(bool_0)


def test_case_15():
    bytes_0 = b"\x11;\xf7\x9b`\xa7\x7fq\xdefp\x879m\xb3w"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_try()


def test_case_16():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.__str__()
    var_0.ap(dict_0)


def test_case_17():
    bytes_0 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.to_maybe()
    var_2 = validation_0.__eq__(validation_0)
    var_2.to_either()


def test_case_18():
    none_type_0 = None
    bytes_0 = b""
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    str_0 = "\n    Task are data-type for handle execution of functions (in lazy way)\n    transform results of this function and handle errors.\n    "
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    str_1 = "5_A;^o~"
    str_2 = "?&$i]H\n"
    dict_1 = {none_type_0: dict_0, str_0: dict_0, str_2: str_1, str_2: str_0}
    validation_1 = module_0.Validation(str_1, dict_1)
    var_1 = validation_1.__str__()
    var_2 = validation_0.to_maybe()
    var_3 = var_2.__eq__(var_0)
    validation_2 = module_0.Validation(dict_0, validation_0)
    var_4 = var_3.__str__()
    var_5 = validation_0.__eq__(validation_2)
    validation_1.ap(none_type_0)
