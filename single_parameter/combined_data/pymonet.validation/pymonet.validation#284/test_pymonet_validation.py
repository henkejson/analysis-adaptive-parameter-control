# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0
import builtins as module_1


def test_case_0():
    str_0 = "MO{f9Nh#E\x0c,<7cS<"
    int_0 = 9
    validation_0 = module_0.Validation(str_0, int_0)
    var_0 = validation_0.__eq__(validation_0)


def test_case_1():
    bytes_0 = b"\x83\xd3\xd4i\tO\x97S\xe1\xcc\xa2b\xe8\xd8(U\xc1\x11\xb9"
    list_0 = [bytes_0]
    list_1 = [list_0, list_0]
    tuple_0 = (list_1,)
    str_0 = "Fs/#LuTF|K$z6 2M'#"
    list_2 = [str_0]
    validation_0 = module_0.Validation(str_0, list_2)
    var_0 = validation_0.__eq__(tuple_0)


def test_case_2():
    bytes_0 = b"\xbb\xadB\xca\xa3\xd8"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_either()
    var_2 = validation_0.__eq__(var_0)
    var_3 = validation_0.to_either()
    var_2.is_fail()


def test_case_3():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_either()
    var_1.is_fail()


def test_case_4():
    dict_0 = {}
    var_0 = module_0.Validation(dict_0, dict_0)


def test_case_5():
    float_0 = -2192.7052
    validation_0 = module_0.Validation(float_0, float_0)
    validation_0.to_maybe()


def test_case_6():
    str_0 = "-vJm_"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.is_fail()
    var_0.is_success()


def test_case_7():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.map(bool_0)


def test_case_8():
    none_type_0 = None
    none_type_1 = None
    validation_0 = module_0.Validation(none_type_1, none_type_1)
    validation_0.bind(none_type_0)


def test_case_9():
    bytes_0 = b"HW"
    float_0 = 2463.85903
    validation_0 = module_0.Validation(float_0, float_0)
    validation_0.ap(bytes_0)


def test_case_10():
    str_0 = " @`Lf"
    bytes_0 = b"\x1bJ\x94m\x87P\xac,[\xbd\x93\x8e\xfd<l\xb8\x10jC\r"
    dict_0 = {str_0: str_0, str_0: str_0, bytes_0: bytes_0}
    validation_0 = module_0.Validation(dict_0, bytes_0)
    var_0 = validation_0.to_box()
    object_0 = module_1.object()


def test_case_11():
    bytes_0 = b"\xbb\xadB\xca\xa3\xd8"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.to_either()
    var_2 = var_0.to_lazy()
    var_3 = var_1.__eq__(validation_0)
    var_4 = var_2.to_either()
    validation_1 = module_0.Validation(var_3, var_0)
    var_5 = validation_1.to_lazy()
    var_4.is_fail()


def test_case_12():
    bytes_0 = b"\xbb\xadB\xca\xa3\xd8"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    int_0 = -129
    var_1 = validation_0.__eq__(int_0)
    var_2 = validation_0.to_either()
    var_3 = var_2.to_lazy()
    var_4 = var_3.__eq__(var_2)
    var_5 = validation_0.to_maybe()
    var_6 = var_2.map(validation_0)
    var_7 = validation_0.to_lazy()
    var_8 = var_7.to_maybe()
    var_9 = var_8.to_lazy()
    var_1.is_fail()


def test_case_13():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.to_try()


def test_case_14():
    str_0 = "0*&$^&BC5sl;i"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, str_0)
    validation_1 = module_0.Validation(str_0, str_0)
    var_0 = validation_1.to_either()
    var_1 = validation_1.__str__()
    var_0.is_success()


def test_case_15():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.__str__()
    var_1 = dict_0.__str__()
    var_0.to_box()


def test_case_16():
    bytes_0 = b"\xbb\xadB\xca\xa3\xd8"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_either()
    int_0 = -129
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    validation_2 = module_0.Validation(int_0, none_type_0)
    var_2 = var_1.to_try()
    var_3 = validation_0.__eq__(validation_2)
    validation_1.to_try()


def test_case_17():
    bytes_0 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.to_either()
    complex_0 = -255.55795 + 1991.921667j
    var_2 = validation_0.__eq__(complex_0)
    validation_1 = module_0.Validation(var_0, bytes_0)
    var_1.bind(validation_1)
