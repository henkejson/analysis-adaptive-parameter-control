# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0
import builtins as module_1


def test_case_0():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(none_type_0)
    var_0.bind(none_type_0)


def test_case_1():
    str_0 = "\n        :param semigroup: other semigroup to concat\n        :type semigroup: Sum[B]\n        :returns: new Sum with sum of concat semigroups values\n        :rtype: Sum[A]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    int_0 = -1826
    validation_0.bind(int_0)


def test_case_2():
    str_0 = "\n        :param semigroup: other semigroup to concat\n        :type semigroup: Map[B]\n        :returns: new Map with concated all values\n        :rtype: Map[A]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.ap(str_0)
    var_1.to_either()


def test_case_3():
    int_0 = 0
    set_0 = {int_0, int_0, int_0}
    int_1 = -1826
    validation_0 = module_0.Validation(int_1, set_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.to_maybe()


def test_case_4():
    bool_0 = True
    bool_0.to_lazy()


def test_case_5():
    object_0 = module_1.object()
    validation_0 = module_0.Validation(object_0, object_0)


def test_case_6():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.to_maybe()


def test_case_7():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.is_fail()


def test_case_8():
    int_0 = -374
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.map(int_0)


def test_case_9():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.bind(none_type_0)


def test_case_10():
    str_0 = "xZ}"
    validation_0 = module_0.Validation(str_0, str_0)
    str_1 = ",YboxBf\x0ct"
    validation_0.ap(str_1)


def test_case_11():
    none_type_0 = None
    int_0 = 1
    validation_0 = module_0.Validation(none_type_0, int_0)
    var_0 = validation_0.to_box()
    none_type_1 = None
    validation_1 = module_0.Validation(none_type_1, none_type_1)
    var_1 = validation_1.to_box()


def test_case_12():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.__eq__(none_type_0)
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    validation_1.is_success()


def test_case_13():
    str_0 = "\n        Transform Either to Try.\n\n        :returns: Lazy monad with function returning previous value\n        :rtype: Lazy[Function() -> A]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_try()
    var_2 = validation_0.__str__()
    var_3 = validation_0.is_fail()
    var_4 = validation_0.to_lazy()
    var_5 = var_4.to_maybe()
    var_6 = var_5.to_either()
    var_7 = var_4.__str__()
    var_8 = var_4.to_maybe()
    var_9 = var_8.__str__()
    var_10 = var_1.map(validation_0)
    validation_0.bind(var_7)


def test_case_14():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.to_try()


def test_case_15():
    none_type_0 = None
    int_0 = 1
    set_0 = {int_0}
    dict_0 = {}
    validation_0 = module_0.Validation(none_type_0, dict_0)
    var_0 = validation_0.__str__()
    object_0 = module_1.object(**dict_0)
    none_type_1 = None
    validation_1 = module_0.Validation(set_0, none_type_1)
    validation_1.bind(none_type_0)


def test_case_16():
    str_0 = "\n        :param semigroup: other semigroup to concat\n        :type semigroup: Sum[B]\n        :returns: new Sum with sum of concat semigroups values\n        :rtype: Sum[A]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    validation_1 = module_0.Validation(var_0, str_0)
    var_1 = validation_0.__eq__(validation_1)
    var_2 = validation_1.to_maybe()
    var_3 = var_2.to_try()
    var_4 = validation_1.__str__()
    var_5 = var_2.to_lazy()
    var_6 = var_2.map(validation_0)
    var_4.to_either()


def test_case_17():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    none_type_0 = None
    var_0 = validation_0.to_either()
    var_1 = validation_0.__eq__(none_type_0)
    var_1.to_either()


def test_case_18():
    str_0 = "\n        :param semigroup: other semigroup to concat\n        :type semigroup: Sum[B]\n        :returns: new Sum with sum of concat semigroups values\n        :rtype: Sum[A]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_maybe()
    var_2 = var_1.to_either()
    validation_1 = module_0.Validation(str_0, str_0)
    var_3 = validation_1.__str__()
    str_1 = ")H4'\nK\trPgi\x0b-4v["
    validation_2 = module_0.Validation(str_1, var_2)
    var_4 = validation_2.__eq__(validation_0)
    var_4.to_maybe()


def test_case_19():
    str_0 = ""
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_either()
    var_2 = validation_0.__eq__(var_0)
    var_3 = var_2.__str__()
    var_4 = validation_0.to_try()
    var_4.is_success()
