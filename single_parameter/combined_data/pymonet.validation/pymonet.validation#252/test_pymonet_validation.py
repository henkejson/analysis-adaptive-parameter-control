# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bytes_0 = b"%r\xa8xd\xf1"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.__eq__(var_0)
    var_2 = validation_0.to_box()
    var_1.to_either()


def test_case_1():
    bytes_0 = b"%r\xa8xd\xf1"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_box()


def test_case_2():
    bytes_0 = b"%r\xa8xd\xf1"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_1 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_maybe()
    var_2 = validation_0.to_box()
    var_3 = validation_0.to_either()
    var_3.is_fail()


def test_case_3():
    bytes_0 = b"rxd\xf1"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.is_fail()
    var_1 = validation_0.to_maybe()
    var_0.bind(validation_0)


def test_case_4():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_5():
    bytes_0 = b"\x9a\x12\x1c\xe3C\x05\xe3\xf6\x02!`M\x89h\x03\xea\x1a]D"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_1 = module_0.Validation(validation_0, bool_0)
    validation_1.map(dict_0)


def test_case_6():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.bind(none_type_0)


def test_case_7():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    bytes_0 = b"\x19\x16\xa5\x12j\x91\x0b\x92\xa5L\xbe\xcf\xfa"
    var_0 = validation_0.__eq__(none_type_0)
    int_0 = -2775
    validation_1 = module_0.Validation(bytes_0, int_0)
    validation_2 = module_0.Validation(validation_1, int_0)
    validation_2.ap(none_type_0)


def test_case_8():
    bytes_0 = b"u\xf3\xbb\x14\xddi\x18\x0176\x0f\xbe"
    tuple_0 = (bytes_0,)
    set_0 = {tuple_0, tuple_0, tuple_0}
    set_1 = set()
    float_0 = 2569.83
    validation_0 = module_0.Validation(float_0, float_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.ap(set_1)
    var_2 = var_1.ap(set_0)


def test_case_9():
    complex_0 = -3192.145 + 1972.23543j
    validation_0 = module_0.Validation(complex_0, complex_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_either()
    var_2 = var_1.to_try()
    var_2.is_fail()


def test_case_10():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    bytes_0 = b"E\xc6iy\x98\xe0e\xcd\x9f\xe2\xcf\xe5\x1ez\xa8G\x1aX\xfa"
    tuple_0 = (bytes_0,)
    validation_1 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_1.to_try()
    var_0.is_fail()


def test_case_11():
    none_type_0 = None
    bytes_0 = b"%r\xa8xd\xf1"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.__eq__(validation_0)
    var_2 = var_0.map(none_type_0)
    var_3 = var_2.to_maybe()
    var_4 = var_2.to_box()
    var_5 = validation_0.is_success()


def test_case_12():
    bytes_0 = b"\xe5\xfd\xf1\xd9\x0c`\xa6\xf5\x00\xfa\x92"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_1 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_1.to_either()
    validation_2 = module_0.Validation(validation_0, validation_1)
    var_1 = validation_1.__eq__(validation_2)
    var_1.map(validation_1)


def test_case_13():
    bytes_0 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_1 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    var_1 = validation_1.to_either()
    var_2 = validation_0.to_try()
    var_3 = validation_1.__eq__(validation_0)
    var_4 = validation_1.to_box()
    var_5 = validation_1.to_maybe()
    var_6 = var_5.to_box()
    var_0.to_box()
