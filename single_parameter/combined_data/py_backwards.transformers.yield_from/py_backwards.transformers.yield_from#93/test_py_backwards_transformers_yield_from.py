# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import typed_ast._ast3 as module_0
import py_backwards.transformers.yield_from as module_1


def test_case_0():
    starred_0 = module_0.Starred()
    yield_from_transformer_0 = module_1.YieldFromTransformer(starred_0)
    var_0 = yield_from_transformer_0.visit(starred_0)


def test_case_1():
    call_0 = module_0.Call()
    yield_from_transformer_0 = module_1.YieldFromTransformer(call_0)


def test_case_2():
    none_type_0 = None
    yield_from_transformer_0 = module_1.YieldFromTransformer(none_type_0)
    list_0 = [yield_from_transformer_0, none_type_0, none_type_0]
    while_0 = module_0.While(*list_0)
    a_s_t_0 = yield_from_transformer_0.visit(while_0)


def test_case_3():
    none_type_0 = None
    yield_from_transformer_0 = module_1.YieldFromTransformer(none_type_0)
    list_0 = []
    list_1 = [none_type_0, list_0, yield_from_transformer_0]
    while_0 = module_0.While(*list_1)
    a_s_t_0 = yield_from_transformer_0.visit(while_0)


def test_case_4():
    none_type_0 = None
    yield_from_transformer_0 = module_1.YieldFromTransformer(none_type_0)
    list_0 = [yield_from_transformer_0, none_type_0, none_type_0]
    list_1 = [none_type_0, list_0, yield_from_transformer_0]
    while_0 = module_0.While(*list_1)
    a_s_t_0 = yield_from_transformer_0.visit(while_0)
