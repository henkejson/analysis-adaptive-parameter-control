# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import typed_ast._ast3 as module_0
import py_backwards.transformers.yield_from as module_1
import typed_ast.ast3 as module_2


def test_case_0():
    str_0 = module_0.Str()
    yield_from_transformer_0 = module_1.YieldFromTransformer(str_0)
    yield_from_transformer_0.visit(yield_from_transformer_0)


def test_case_1():
    for_0 = module_0.For()
    yield_from_transformer_0 = module_1.YieldFromTransformer(for_0)


def test_case_2():
    none_type_0 = None
    yield_from_transformer_0 = module_1.YieldFromTransformer(none_type_0)
    list_0 = [none_type_0, none_type_0, none_type_0]
    with_0 = module_0.With(*list_0)
    a_s_t_0 = yield_from_transformer_0.visit(with_0)


def test_case_3():
    none_type_0 = None
    yield_from_transformer_0 = module_1.YieldFromTransformer(none_type_0)
    list_0 = [none_type_0, none_type_0, none_type_0]
    list_1 = [list_0, list_0, list_0]
    async_for_0 = module_0.AsyncFor(*list_1)
    a_s_t_0 = yield_from_transformer_0.visit(async_for_0)


def test_case_4():
    assign_0 = module_0.Assign()
    var_0 = module_2.copy_location(assign_0, assign_0)
    yield_from_transformer_0 = module_1.YieldFromTransformer(var_0)
    yield_from_transformer_1 = module_1.YieldFromTransformer(var_0)
    list_0 = [var_0, var_0, var_0]
    list_1 = [list_0, list_0, list_0]
    async_for_0 = module_0.AsyncFor(*list_1)
    yield_from_transformer_1.visit(async_for_0)
