# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import builtins as module_1
import inspect as module_2


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    str_0 = "K3wC!YW"
    config_0 = module_0.Config(env_prefix=str_0, converters=str_0)
    module_1.object(*config_0)


def test_case_2():
    config_0 = module_0.Config()
    config_1 = module_0.Config(keep_alive=config_0)
    set_0 = set()
    config_0.update_config(set_0)


def test_case_3():
    config_0 = module_0.Config()
    config_1 = module_0.Config(keep_alive=config_0)
    config_2 = module_0.Config(config_1, keep_alive=config_0)
    str_0 = "1N8HU)g4r]"
    var_0 = module_2.isclass(config_1)
    var_0.__setattr__(config_2, str_0)


def test_case_4():
    config_0 = module_0.Config()
    set_0 = set()
    config_0.update_config(set_0)


def test_case_5():
    config_0 = module_0.Config()
    config_1 = config_0.update_config(config_0)
    str_0 = "N8U)g4rI"
    config_0.update_config(str_0)


def test_case_6():
    config_0 = module_0.Config()
    set_0 = config_0.update_config(config_0)


def test_case_7():
    str_0 = "'%s' is invalid for Content Range"
    module_0.Config(converters=str_0)


def test_case_8():
    config_0 = module_0.Config()
    var_0 = module_2.getmembers(config_0)
    config_0.update_config(var_0)


def test_case_9():
    config_0 = module_0.Config()
    config_0.__getattr__(config_0)


def test_case_10():
    config_0 = module_0.Config()
    config_1 = module_0.Config(keep_alive=config_0)
    str_0 = "Mu"
    none_type_0 = config_1.__setitem__(str_0, str_0)
    set_0 = set()
    config_0.update_config(set_0)


def test_case_11():
    config_0 = module_0.Config()
    config_1 = module_0.Config(keep_alive=config_0)
    none_type_0 = config_0.update()
    config_2 = module_0.Config(env_prefix=none_type_0)
    var_0 = config_1.update_config(config_2)
    var_1 = config_0.update_config(config_1)


def test_case_12():
    config_0 = module_0.Config()
    bool_0 = False
    none_type_0 = config_0.register_type(bool_0)
    str_0 = "LOCAL_CERT_CREATOR"
    config_0.__setattr__(str_0, str_0)
