# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import sanic.constants as module_1
import inspect as module_2


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    str_0 = "X 1A^\\2a+>ek<"
    local_cert_creator_0 = module_1.LocalCertCreator.MKCERT
    dict_0 = {str_0: str_0, str_0: local_cert_creator_0}
    config_0 = module_0.Config(converters=dict_0)
    config_0.__getattr__(config_0)


def test_case_2():
    set_0 = set()
    config_0 = module_0.Config(keep_alive=set_0)
    str_0 = "cnMJ+5<"
    none_type_0 = None
    none_type_1 = config_0.__setattr__(str_0, none_type_0)


def test_case_3():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0)


def test_case_4():
    none_type_0 = None
    var_0 = module_2.isdatadescriptor(none_type_0)
    bool_0 = True
    config_0 = module_0.Config()
    config_0.__getattr__(bool_0)


def test_case_5():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0)
    config_0.update_config(none_type_0)


def test_case_6():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_7():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)
    bool_0 = False
    none_type_0 = config_0.register_type(bool_0)
    config_0.register_type(bool_0)


def test_case_8():
    str_0 = "S"
    dict_0 = {str_0: str_0, str_0: str_0}
    config_0 = module_0.Config(dict_0, str_0)


def test_case_9():
    config_0 = module_0.Config()
    config_1 = module_0.Config()
    config_0.__getattr__(config_1)


def test_case_10():
    config_0 = module_0.Config()
    str_0 = "use_uvloop"
    none_type_0 = config_0.__setitem__(str_0, config_0)


def test_case_11():
    config_0 = module_0.Config()
    str_0 = ". 't2A8wNFsi@%"
    var_0 = module_2.isclass(str_0)
    config_0.update_config(str_0)


def test_case_12():
    int_0 = 8192
    str_0 = "TOUCHUP"
    str_1 = "oKOEe\\X.JT0t&h?:3"
    str_2 = "C!/amGd!V\rl\x0b@`t\n\t"
    str_3 = "_FALLBACK_ERROR_FORMAT"
    int_1 = 4
    dict_0 = {str_1: str_0, str_2: int_0, str_3: int_1}
    module_0.Config(dict_0)
