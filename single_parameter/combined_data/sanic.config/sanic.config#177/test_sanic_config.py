# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import inspect as module_1


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    str_0 = "T_bX^Cq7V;r2CQLJ"
    module_0.Config(env_prefix=str_0, converters=str_0)


def test_case_2():
    bool_0 = False
    none_type_0 = None
    config_0 = module_0.Config(none_type_0, bool_0, bool_0)


def test_case_3():
    str_0 = "\x0b{"
    config_0 = module_0.Config(env_prefix=str_0)


def test_case_4():
    str_0 = "T_bX^Cq7V;r2CQLJ"
    var_0 = module_1.getmembers(str_0)
    config_0 = module_0.Config(env_prefix=str_0, converters=var_0)
    config_1 = module_0.Config(config_0)


def test_case_5():
    config_0 = module_0.Config()
    str_0 = "m'Yv_~<b4"
    config_0.__getattr__(str_0)


def test_case_6():
    config_0 = module_0.Config()
    none_type_0 = config_0.update()
    config_0.update_config(none_type_0)


def test_case_7():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_8():
    str_0 = "$'.}3ZS]XdA"
    str_1 = "VeTa'N'Y\"a)Hkq^ ;"
    dict_0 = {str_0: str_0, str_1: str_0, str_0: str_1}
    config_0 = module_0.Config(keep_alive=dict_0)
    config_0.update_config(str_1)


def test_case_9():
    str_0 = "\x0b{"
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)
    var_1 = config_0.load_environment_vars()
    none_type_0 = config_0.__setitem__(str_0, var_0)
    config_0.update_config(var_1)


def test_case_10():
    str_0 = "VeTa'N'Y\"a)Hkq^ ;"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    config_0 = module_0.Config(keep_alive=dict_0)
    none_type_0 = config_0.__setitem__(str_0, str_0)
    config_0.__getattr__(config_0)


def test_case_11():
    config_0 = module_0.Config()
    str_0 = ""
    config_0.load_environment_vars(str_0)


def test_case_12():
    str_0 = "LOCAL_CERT_CREATOR"
    config_0 = module_0.Config()
    none_type_0 = config_0.update()
    var_0 = config_0.update_config(config_0)
    var_1 = config_0.load_environment_vars()
    config_0.__setitem__(str_0, var_0)
