# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import sanic.errorpages as module_1


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0)


def test_case_2():
    none_type_0 = None
    config_0 = module_0.Config()
    config_0.__getattr__(none_type_0)


def test_case_3():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0)
    config_0.update_config(none_type_0)


def test_case_4():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_5():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0)
    config_1 = module_0.Config(env_prefix=none_type_0, keep_alive=config_0)


def test_case_6():
    none_type_0 = None
    config_0 = module_0.Config()
    str_0 = "Unable to load configuration %s"
    none_type_1 = config_0.__setitem__(str_0, none_type_0)
    config_1 = module_0.Config(env_prefix=none_type_1)
    config_1.update_config(str_0)


def test_case_7():
    config_0 = module_0.Config()
    none_type_0 = None
    none_type_1 = config_0.register_type(config_0)
    config_0.update_config(none_type_0)


def test_case_8():
    str_0 = "E@"
    config_0 = module_0.Config(env_prefix=str_0)


def test_case_9():
    dict_0 = {}
    str_0 = "Unable to load configuraton %s"
    none_type_0 = dict_0.__setitem__(str_0, dict_0)
    config_0 = module_0.Config(keep_alive=dict_0, converters=dict_0)
    var_0 = config_0.update_config(config_0)
    var_0.register(dict_0, dict_0)


def test_case_10():
    config_0 = module_0.Config()
    config_1 = module_0.Config(config_0)
    str_0 = "P!UDX+95Um+q"
    module_1.check_error_format(str_0)


def test_case_11():
    config_0 = module_0.Config()
    none_type_0 = config_0.register_type(config_0)
    config_0.__getattr__(config_0)


def test_case_12():
    config_0 = module_0.Config()
    none_type_0 = config_0.register_type(config_0)
    str_0 = "0{}"
    none_type_1 = config_0.__setattr__(str_0, config_0)
    config_0.register_type(config_0)
