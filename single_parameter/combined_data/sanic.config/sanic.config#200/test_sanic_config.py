# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import inspect as module_1


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    config_0 = module_0.Config()
    config_1 = module_0.Config(converters=config_0)
    str_0 = "+2"
    none_type_0 = config_0.__setattr__(str_0, str_0)
    var_0 = config_0.__getattr__(str_0)
    var_1 = config_0.update_config(config_0)
    var_1.__new__(config_0, var_1, var_0, var_0)


def test_case_2():
    bool_0 = True
    config_0 = module_0.Config(keep_alive=bool_0)


def test_case_3():
    none_type_0 = None
    config_0 = module_0.Config(none_type_0, none_type_0)


def test_case_4():
    str_0 = "e"
    none_type_0 = None
    str_1 = ' q-LI;$rjz#u/"'
    dict_0 = {str_0: none_type_0, str_1: none_type_0}
    config_0 = module_0.Config(dict_0)
    var_0 = config_0.load_environment_vars()


def test_case_5():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)
    config_0.__getattr__(var_0)


def test_case_6():
    none_type_0 = None
    config_0 = module_0.Config(none_type_0, converters=none_type_0)
    config_0.update_config(none_type_0)


def test_case_7():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_8():
    bool_0 = False
    str_0 = "@0\\D'l$\\G#aP"
    str_1 = "r6]urd/VO]r\n o\t"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_1}
    module_0.Config(dict_0, dict_0, bool_0, converters=str_0)


def test_case_9():
    config_0 = module_0.Config()
    str_0 = "=[WF@MA~{"
    none_type_0 = config_0.__setitem__(str_0, config_0)
    bool_0 = True
    bool_1 = False
    none_type_1 = config_0.register_type(bool_0)
    float_0 = 203.0
    var_0 = module_1.getmembers(float_0)
    var_0.register(bool_1, bool_1)


def test_case_10():
    str_0 = "r."
    config_0 = module_0.Config(env_prefix=str_0)


def test_case_11():
    none_type_0 = None
    config_0 = module_0.Config()
    var_0 = module_1.isdatadescriptor(none_type_0)
    config_0.__getattr__(config_0)


def test_case_12():
    config_0 = module_0.Config()
    str_0 = 'Decorator for registering a listener for the reload_process_stop event.\n\n        This event is fired only on the reload process and **NOT** on any\n        worker processes. This is similar to the main_process_stop event,\n        except that it is fired only when the reload process is stopped.\n\n        See [Listeners](/en/guide/basics/listeners) for more details.\n\n        Args:\n            listener (ListenerType[Sanic]): The listener handler to attach.\n\n        Examples:\n            ```python\n            @app.reload_process_stop\n            async def on_reload_process_stop(app: Sanic):\n                print("Reload process stopped")\n            ```\n        '
    none_type_0 = config_0.__setattr__(str_0, config_0)
    str_1 = "=[WF@MA~{"
    none_type_1 = config_0.__setitem__(str_1, config_0)
    config_0.update_config(str_1)


def test_case_13():
    config_0 = module_0.Config()
    var_0 = module_1.isdatadescriptor(config_0)
    none_type_0 = None
    config_1 = module_0.Config(converters=none_type_0)
    str_0 = "0M8^VHyvU"
    none_type_1 = config_0.__setattr__(str_0, none_type_0)
    none_type_2 = config_1.update()
    str_1 = "LOCAL_CERT_CREATOR"
    config_0.__setattr__(str_1, none_type_0)
