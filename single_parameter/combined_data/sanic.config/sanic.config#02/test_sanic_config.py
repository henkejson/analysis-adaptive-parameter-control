# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import inspect as module_1


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    str_0 = ",'LTU\x0b8N1l_0HmdL*"
    module_0.Config(env_prefix=str_0, converters=str_0)


def test_case_2():
    bool_0 = False
    var_0 = module_1.isclass(bool_0)
    var_1 = module_1.getmembers(var_0)
    var_2 = module_1.isdatadescriptor(var_1)
    config_0 = module_0.Config(keep_alive=var_2)


def test_case_3():
    none_type_0 = None
    config_0 = module_0.Config(none_type_0, none_type_0, converters=none_type_0)
    var_0 = module_1.getmembers(none_type_0)
    var_0.__subclasscheck__(none_type_0, none_type_0)


def test_case_4():
    config_0 = module_0.Config()
    none_type_0 = None
    config_0.update_config(none_type_0)


def test_case_5():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_6():
    bytes_0 = b")\xe2\xcb\xe6'\xf7K\xfa\xf8\x96U4\x0f\xee\xd2O0}\x90\xce"
    config_0 = module_0.Config()
    list_0 = [config_0]
    str_0 = "!m\r(3qav;Et]=E!1U)q"
    none_type_0 = config_0.register_type(str_0)
    none_type_1 = config_0.update(*list_0)
    config_1 = module_0.Config(converters=bytes_0)
    var_0 = module_1.isdatadescriptor(config_0)
    bool_0 = True
    config_1.update_config(bool_0)


def test_case_7():
    bool_0 = False
    str_0 = "1r0`bCSw[&,"
    config_0 = module_0.Config(bool_0, str_0, bool_0, converters=bool_0)
    var_0 = module_1.isclass(config_0)
    var_0.respond(var_0)


def test_case_8():
    str_0 = "1r0`bCSw[&,"
    module_0.Config(str_0, str_0, str_0, converters=str_0)


def test_case_9():
    bytes_0 = b")\xe2\xcb\xe6'\xf7K\xfa\xf8\x96U4\x0f\xee\xd2O0}\x90\xce"
    config_0 = module_0.Config()
    config_0.update_config(bytes_0)


def test_case_10():
    bytes_0 = b")\xe2\xcb\xe6'\xf7K\xfa\xf8\x96U4\x0f\xee\xd2O0}\x90\xce"
    config_0 = module_0.Config()
    list_0 = [config_0]
    none_type_0 = config_0.update(*list_0)
    str_0 = "&>"
    none_type_1 = config_0.__setitem__(str_0, list_0)
    config_1 = module_0.Config(converters=bytes_0)
    var_0 = module_1.isdatadescriptor(config_0)
    bool_0 = True
    config_1.update_config(bool_0)


def test_case_11():
    config_0 = module_0.Config()
    var_0 = config_0.load_environment_vars()
    config_0.__bool__()


def test_case_12():
    config_0 = module_0.Config()
    config_0.__getattr__(config_0)


def test_case_13():
    bytes_0 = b")\xe2\xcb\xe6'\xf7K\xf8\x96U4\x0f\xd2Oo}\x90\xce"
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)
    config_1 = module_0.Config(converters=bytes_0)
    str_0 = "LOCAL_CERT_CREATOR"
    config_1.__setattr__(str_0, var_0)
