# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    str_0 = "Z\tuE2713@:HIwO"
    none_type_0 = None
    config_0 = module_0.Config(none_type_0, none_type_0, none_type_0, converters=str_0)


def test_case_2():
    str_0 = "8Crgi%MzL2^W</\x0c"
    none_type_0 = None
    config_0 = module_0.Config(keep_alive=str_0)
    config_0.update_config(none_type_0)


def test_case_3():
    str_0 = "8Crgi%MzL2^W</\x0c"
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=str_0, keep_alive=none_type_0)


def test_case_4():
    str_0 = "6\x0cg0adQ7z84Kl>HuWS"
    str_1 = "Find a media type accepted by the client.\n\n        This method can be used to find which of the media types requested by\n        the client is most preferred against the ones given as arguments.\n\n        The ordering of preference is set by:\n        1. The order set by RFC 7231, s. 5.3.2, giving a higher priority\n            to q values and more specific type definitions,\n        2. The order of the arguments (first is most preferred), and\n        3. The first matching entry on the Accept header.\n\n        Wildcards are matched both ways. A match is usually found, as the\n        Accept headers typically include `*/*`, in particular if the header\n        is missing, is not manually set, or if the client is a browser.\n\n        Note: the returned object behaves as a string of the mime argument\n        that matched, and is empty/falsy if no match was found. The matched\n        header entry `MediaType` or `None` is available as the `m` attribute.\n\n        Args:\n            mimes (List[str]): Any MIME types to search for in order of preference.\n            accept_wildcards (bool): Match Accept entries with wildcards in them.\n\n        Returns:\n            Match: A match object with the mime string and the MediaType object.\n        "
    dict_0 = {str_0: str_0, str_1: str_1}
    config_0 = module_0.Config(dict_0, str_1)
    var_0 = config_0.__repr__()
    var_1 = config_0.load_environment_vars(var_0)
    module_0.Config(env_prefix=str_0, converters=var_0)


def test_case_5():
    none_type_0 = None
    config_0 = module_0.Config(converters=none_type_0)
    var_0 = config_0.update_config(config_0)
    config_0.__getattr__(var_0)


def test_case_6():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)
    config_0.update_config(var_0)


def test_case_7():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_8():
    none_type_0 = None
    config_0 = module_0.Config(keep_alive=none_type_0)
    var_0 = config_0.update_config(config_0)
    config_0.__setitem__(var_0, config_0)


def test_case_9():
    str_0 = "8CrgiMz2^W</\x0c"
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0, converters=str_0)
    config_0.__getattr__(config_0)


def test_case_10():
    str_0 = "Find a media type accepted by the client.\n\n        This method can be used to find which of the media types requested by\n        the client is most preferred against the ones given as arguments.\n\n        The ordering of preference is set by:\n        1. The order set by RFC 7231, s. 5.3.2, giving a higher priority\n            to q values and more specific type definitions,\n        2. The order of the arguments (first is most preferred), and\n        3. The first matching entry on the Accept header.\n\n        Wildcards are matched both ways. A match is usually found, as the\n        Accept headers typically include `*/*`, in particular if the header\n        is missing, is not manually set, or if the client is a browser.\n\n        Note: the returned object behaves as a string of the mime argument\n        that matched, and is empty/falsy if no match was found. The matched\n        header entry `MediaType` or `None` is available as the `m` attribute.\n\n        Args:\n            mimes (List[str]): Any MIME types to search for in order of preference.\n            accept_wildcards (bool): Match Accept entries with wildcards in them.\n\n        Returns:\n            Match: A match object with the mime string and the MediaType object.\n        "
    config_0 = module_0.Config()
    config_0.update_config(str_0)


def test_case_11():
    str_0 = "8Crgi%MzL2^W</\x0c"
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=str_0, converters=none_type_0)
    var_0 = config_0.update_config(config_0)
    str_1 = "LOCAL_CERT_CREATOR"
    config_0.__setitem__(str_1, var_0)


def test_case_12():
    str_0 = ""
    config_0 = module_0.Config()
    config_0.load_environment_vars(str_0)


def test_case_13():
    none_type_0 = None
    config_0 = module_0.Config(keep_alive=none_type_0)
    str_0 = "FALLBACK_ERROR_FORMAT"
    config_0.__setitem__(str_0, str_0)
