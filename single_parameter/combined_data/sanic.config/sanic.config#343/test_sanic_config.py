# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import sanic.constants as module_1
import inspect as module_2


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    str_0 = "Z\r#=u\n[l?\tK#GGSq\rE\x0b"
    dict_0 = {str_0: str_0, str_0: str_0}
    config_0 = module_0.Config(dict_0)
    var_0 = config_0.update_config(config_0)
    none_type_0 = config_0.register_type(config_0)
    config_1 = module_0.Config(converters=config_0)
    none_type_1 = None
    var_0.update_config(none_type_1)


def test_case_2():
    bool_0 = False
    config_0 = module_0.Config(keep_alive=bool_0)


def test_case_3():
    local_cert_creator_0 = module_1.LocalCertCreator.TRUSTME
    config_0 = module_0.Config(env_prefix=local_cert_creator_0)
    str_0 = "Register a custom type converter.\n\n        Allows for adding custom function to cast from a string value to any\n        other type. The function should raise ValueError if it is not the\n        correct type.\n\n        Args:\n            converter (Callable[[str], Any]): A function that takes a string\n                and returns a value of any type.\n\n        Examples:\n            ```python\n            def my_converter(value: str) -> Any:\n                # Do something to convert the value\n                return value\n\n            config.register_type(my_converter)\n            ```\n        "
    var_0 = module_2.isdatadescriptor(str_0)
    var_0.__instancecheck__(str_0, local_cert_creator_0)


def test_case_4():
    config_0 = module_0.Config()
    config_1 = module_0.Config(config_0)
    float_0 = -327.3515453762797
    config_1.update_config(float_0)


def test_case_5():
    config_0 = module_0.Config()
    var_0 = module_2.getmembers(config_0)


def test_case_6():
    str_0 = "Z\r#=u\n[l?\tK#GGSq\rE\x0b"
    dict_0 = {str_0: str_0, str_0: str_0}
    config_0 = module_0.Config(dict_0)
    none_type_0 = None
    none_type_1 = config_0.__setitem__(str_0, none_type_0)
    config_0.update_config(str_0)


def test_case_7():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0)
    config_0.__setitem__(config_0, config_0)


def test_case_8():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0)
    var_0 = module_2.isclass(none_type_0)
    none_type_1 = config_0.register_type(var_0)
    none_type_2 = config_0.update()
    str_0 = "websocket.receive"
    none_type_3 = config_0.update(**config_0)
    bool_0 = False
    var_1 = module_2.getmembers(str_0)
    var_2 = var_1.__repr__()
    var_2.__instancecheck__(bool_0, config_0)


def test_case_9():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_10():
    config_0 = module_0.Config()
    float_0 = -327.3515453762797
    config_0.update_config(float_0)


def test_case_11():
    config_0 = module_0.Config()
    config_0.__getattr__(config_0)


def test_case_12():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0)
    var_0 = module_2.isclass(none_type_0)
    none_type_1 = config_0.register_type(var_0)
    none_type_2 = config_0.update()
    none_type_3 = config_0.update(**config_0)
    config_0.register_type(var_0)


def test_case_13():
    str_0 = "kZH71#4y"
    str_1 = "F"
    dict_0 = {str_1: str_1}
    none_type_0 = None
    config_0 = module_0.Config(dict_0, converters=none_type_0)
    var_0 = module_2.isclass(str_0)
    config_1 = module_0.Config(config_0, str_0)
    str_2 = "LOCAL_CERT_CREATOR"
    config_1.__setattr__(str_2, str_2)
