# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import inspect as module_1


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    int_0 = 974
    module_0.Config(converters=int_0)


def test_case_2():
    int_0 = 424
    config_0 = module_0.Config(keep_alive=int_0)


def test_case_3():
    str_0 = "R+1^"
    config_0 = module_0.Config(env_prefix=str_0)


def test_case_4():
    int_0 = 412
    str_0 = "[@DYbk\x0bwxM^&L1K%UVN"
    dict_0 = {str_0: int_0, str_0: str_0}
    config_0 = module_0.Config(dict_0, keep_alive=dict_0, converters=dict_0)
    none_type_0 = None
    config_1 = module_0.Config(none_type_0, none_type_0, none_type_0)
    var_0 = config_1.load_environment_vars()
    config_2 = module_0.Config(keep_alive=int_0)


def test_case_5():
    str_0 = "L"
    none_type_0 = None
    config_0 = module_0.Config(none_type_0, str_0, none_type_0)
    config_0.__getattr__(none_type_0)


def test_case_6():
    str_0 = "_"
    config_0 = module_0.Config(converters=str_0)


def test_case_7():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0, keep_alive=none_type_0)


def test_case_8():
    str_0 = "CD"
    none_type_0 = None
    config_0 = module_0.Config(none_type_0, str_0)
    none_type_1 = config_0.__setattr__(str_0, config_0)
    config_0.update_config(str_0)


def test_case_9():
    str_0 = "[@DYbk\x0bwxM^&L1K%UVN"
    dict_0 = {str_0: str_0}
    config_0 = module_0.Config(dict_0, keep_alive=dict_0, converters=dict_0)
    none_type_0 = None
    config_1 = module_0.Config(none_type_0, none_type_0, none_type_0)
    config_2 = module_0.Config()
    var_0 = config_2.load_environment_vars(str_0)
    config_2.__getattr__(dict_0)


def test_case_10():
    config_0 = module_0.Config()
    none_type_0 = None
    config_0.update_config(none_type_0)


def test_case_11():
    str_0 = "_"
    config_0 = module_0.Config(converters=str_0)
    var_0 = config_0.update_config(config_0)


def test_case_12():
    str_0 = "L"
    none_type_0 = None
    config_0 = module_0.Config(none_type_0, str_0, none_type_0)
    var_0 = module_1.isdatadescriptor(str_0)


def test_case_13():
    config_0 = module_0.Config()
    list_0 = [config_0, config_0, config_0]
    none_type_0 = config_0.update(*list_0)


def test_case_14():
    str_0 = "Aba4u \r;\rNE"
    dict_0 = {str_0: str_0}
    config_0 = module_0.Config(dict_0, keep_alive=dict_0, converters=dict_0)
    none_type_0 = None
    module_0.Config(keep_alive=none_type_0, converters=str_0)


def test_case_15():
    str_0 = "LOCAL_CERT_CREATOR"
    dict_0 = {str_0: str_0}
    config_0 = module_0.Config(dict_0, keep_alive=dict_0, converters=dict_0)
    config_1 = module_0.Config()
    list_0 = [config_0, config_1, config_0, config_1]
    none_type_0 = config_1.update(*list_0)
    str_1 = "sanic-routing"
    none_type_1 = config_0.__setattr__(str_1, list_0)
    config_0.update(**config_0)


def test_case_16():
    str_0 = "L"
    none_type_0 = None
    module_0.Config(none_type_0, str_0, none_type_0, converters=str_0)


def test_case_17():
    str_0 = "_"
    none_type_0 = None
    config_0 = module_0.Config(none_type_0, str_0, none_type_0)
    config_1 = module_0.Config(
        none_type_0, keep_alive=none_type_0, converters=none_type_0
    )
    module_0.DescriptorMeta(str_0)
