# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import sanic.errorpages as module_1


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    str_0 = "MXbe_sFWr5uUDn)n"
    module_0.Config(converters=str_0)


def test_case_2():
    dict_0 = {}
    config_0 = module_0.Config(keep_alive=dict_0)


def test_case_3():
    str_0 = "L"
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=str_0, converters=none_type_0)


def test_case_4():
    bool_0 = True
    config_0 = module_0.Config(keep_alive=bool_0)
    config_1 = module_0.Config(config_0)
    var_0 = config_0.update_config(config_0)
    config_1.__getattr__(config_0)


def test_case_5():
    dict_0 = {}
    config_0 = module_0.Config(keep_alive=dict_0)
    var_0 = config_0.update_config(config_0)
    config_0.update_config(var_0)


def test_case_6():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_7():
    dict_0 = {}
    config_0 = module_0.Config(env_prefix=dict_0)


def test_case_8():
    dict_0 = {}
    config_0 = module_0.Config(keep_alive=dict_0)
    var_0 = config_0.update_config(config_0)
    config_0.init_for_request()


def test_case_9():
    bool_0 = True
    config_0 = module_0.Config(keep_alive=bool_0)
    bytes_0 = b"\xb3\x05\x18*\x87U\xe1s\x88\xdf\xd0\x9b\xdb"
    var_0 = config_0.update_config(config_0)
    config_0.update_config(bytes_0)


def test_case_10():
    bool_0 = True
    config_0 = module_0.Config(keep_alive=bool_0)
    config_1 = module_0.Config(config_0)
    var_0 = config_0.update_config(config_0)
    var_0.init_for_request()


def test_case_11():
    str_0 = "D\x0c"
    set_0 = {str_0}
    config_0 = module_0.Config(converters=set_0)


def test_case_12():
    str_0 = "L"
    module_0.Config(env_prefix=str_0, converters=str_0)


def test_case_13():
    str_0 = "}"
    str_1 = ":"
    dict_0 = {str_1: str_1, str_1: str_1, str_1: str_1}
    config_0 = module_0.Config(dict_0, str_1, converters=str_1)
    none_type_0 = config_0.__setattr__(str_0, str_0)
    str_2 = "_"
    none_type_1 = None
    config_1 = module_0.Config(env_prefix=str_2, converters=none_type_1)
    config_2 = module_0.Config(converters=config_1)
    var_0 = config_2.update_config(config_2)
    var_1 = config_2.update_config(config_0)
    module_1.check_error_format(var_0)
