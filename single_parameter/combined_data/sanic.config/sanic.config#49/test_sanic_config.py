# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import inspect as module_1


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    bool_0 = False
    var_0 = module_1.isdatadescriptor(bool_0)
    config_0 = module_0.Config(var_0, keep_alive=bool_0)
    module_0.DescriptorMeta(config_0)


def test_case_2():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0)
    var_0 = config_0.update_config(config_0)


def test_case_3():
    str_0 = "\tXV%"
    dict_0 = {str_0: str_0}
    none_type_0 = None
    config_0 = module_0.Config(dict_0, none_type_0, str_0)
    str_1 = "dPdUy"
    config_1 = module_0.Config()
    module_0.DescriptorMeta(str_1, *config_0)


def test_case_4():
    bool_0 = False
    var_0 = module_1.isdatadescriptor(bool_0)
    none_type_0 = None
    config_0 = module_0.Config(keep_alive=none_type_0)
    config_0.__getattr__(var_0)


def test_case_5():
    str_0 = "x-forwarded-port"
    complex_0 = -2904.179 - 1158.845j
    config_0 = module_0.Config()
    none_type_0 = config_0.__setitem__(str_0, complex_0)


def test_case_6():
    str_0 = 'xNP}-c\x0bki>"'
    config_0 = module_0.Config(env_prefix=str_0, keep_alive=str_0, converters=str_0)
    config_0.update_config(str_0)


def test_case_7():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0)
    config_0.update_config(none_type_0)


def test_case_8():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_9():
    str_0 = "\tXV%"
    dict_0 = {str_0: str_0}
    none_type_0 = None
    config_0 = module_0.Config(dict_0, none_type_0, str_0)
    str_1 = "bytes "
    config_0.update_config(str_1)


def test_case_10():
    str_0 = "\tXV%"
    dict_0 = {str_0: str_0}
    none_type_0 = None
    config_0 = module_0.Config(dict_0, none_type_0, str_0)
    str_1 = "dPdUy"
    str_2 = "bytes "
    dict_1 = {str_1: none_type_0, str_0: none_type_0, str_2: none_type_0}
    none_type_1 = config_0.update(**dict_1)
    config_1 = module_0.Config()
    var_0 = module_1.isclass(dict_0)
    none_type_2 = config_0.register_type(var_0)
    var_1 = module_1.isclass(config_1)
    config_0.register_type(var_0)


def test_case_11():
    str_0 = "\tXV%"
    dict_0 = {str_0: str_0}
    none_type_0 = None
    config_0 = module_0.Config(dict_0, none_type_0, str_0)
    none_type_1 = None
    var_0 = module_1.isclass(config_0)
    none_type_2 = config_0.register_type(str_0)
    var_1 = module_1.isclass(none_type_1)
    var_1.register_type(config_0)


def test_case_12():
    str_0 = "BSI<?#?V"
    str_1 = "bytes "
    bool_0 = False
    config_0 = module_0.Config(env_prefix=str_1, converters=bool_0)
    none_type_0 = config_0.__setitem__(str_0, config_0)


def test_case_13():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    config_0 = module_0.Config()
    str_0 = "KEEP_ALIVE"
    none_type_0 = config_0.__setattr__(str_0, list_0)
    config_0.__getattr__(list_0)


def test_case_14():
    bool_0 = False
    config_0 = module_0.Config(keep_alive=bool_0)
    none_type_0 = config_0.update()
    str_0 = "LOCAL_CERT_CREATOR"
    config_0.__setattr__(str_0, bool_0)


def test_case_15():
    str_0 = ""
    config_0 = module_0.Config()
    config_0.load_environment_vars(str_0)
