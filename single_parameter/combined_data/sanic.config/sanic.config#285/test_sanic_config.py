# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import inspect as module_1


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    str_0 = "*%!}~^u3/tj"
    bool_0 = False
    config_0 = module_0.Config(keep_alive=bool_0, converters=str_0)


def test_case_2():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)
    none_type_0 = None
    config_1 = module_0.Config(
        env_prefix=var_0, keep_alive=config_0, converters=none_type_0
    )
    config_0.update_config(none_type_0)


def test_case_3():
    str_0 = 'l">Qso}\x0c'
    bool_0 = False
    config_0 = module_0.Config(env_prefix=str_0, converters=bool_0)


def test_case_4():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)
    none_type_0 = None
    config_1 = module_0.Config(none_type_0)
    none_type_1 = config_0.register_type(config_0)
    config_1.__getattr__(none_type_0)


def test_case_5():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)
    config_1 = module_0.Config(var_0)
    config_1.__getattr__(config_1)


def test_case_6():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)
    config_1 = module_0.Config(var_0)
    none_type_0 = config_0.register_type(config_0)
    config_2 = config_1.update_config(config_0)


def test_case_7():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)
    config_1 = module_0.Config(env_prefix=var_0, converters=var_0)
    config_0.update_config(var_0)


def test_case_8():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)
    config_1 = module_0.Config(config_0, keep_alive=var_0)
    none_type_0 = None
    str_0 = "Uxft(b$:EQ"
    none_type_1 = config_1.register_type(none_type_0)
    var_0.update_config(str_0)


def test_case_9():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_10():
    config_0 = module_0.Config()
    none_type_0 = config_0.register_type(config_0)
    var_0 = module_1.isdatadescriptor(config_0)
    none_type_1 = None
    config_0.__setitem__(none_type_1, config_0)


def test_case_11():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)
    config_0.update_config(var_0)


def test_case_12():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)
    none_type_0 = config_0.register_type(var_0)
    config_0.register_type(var_0)


def test_case_13():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)
    none_type_0 = None
    config_1 = module_0.Config(env_prefix=var_0, converters=var_0)
    bytes_0 = b'";\\\x7f'
    none_type_1 = config_1.register_type(none_type_0)
    config_1.update_config(bytes_0)


def test_case_14():
    str_0 = "The route name\n\n        In the following pattern:\n\n        ```\n        <AppName>.[<BlueprintName>.]<HandlerName>\n        ```\n\n        Returns:\n            Optional[str]: The route name\n        "
    dict_0 = {str_0: str_0}
    config_0 = module_0.Config(dict_0, converters=dict_0)
    config_1 = module_0.Config()
    none_type_0 = config_1.update()
    str_1 = "LOCAL_CERT_CREATOR"
    config_1.__setitem__(str_1, none_type_0)
