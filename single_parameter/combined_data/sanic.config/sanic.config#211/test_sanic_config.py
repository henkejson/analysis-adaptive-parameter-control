# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import inspect as module_1


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    str_0 = "S"
    module_0.Config(env_prefix=str_0, converters=str_0)


def test_case_2():
    int_0 = 208
    config_0 = module_0.Config(keep_alive=int_0)


def test_case_3():
    str_0 = "S"
    config_0 = module_0.Config(env_prefix=str_0)


def test_case_4():
    bool_0 = True
    set_0 = module_1.isdatadescriptor(bool_0)
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0, keep_alive=none_type_0)
    config_0.__getattr__(set_0)


def test_case_5():
    int_0 = 228
    none_type_0 = None
    config_0 = module_0.Config(none_type_0)
    config_1 = module_0.Config(keep_alive=int_0)
    config_1.__getattr__(config_0)


def test_case_6():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_7():
    int_0 = 201
    config_0 = module_0.Config(keep_alive=int_0)
    config_0.update_config(int_0)


def test_case_8():
    str_0 = "Invalid for Content Range parameters"
    none_type_0 = None
    config_0 = module_0.Config(none_type_0, str_0, none_type_0)
    config_0.update_config(str_0)


def test_case_9():
    none_type_0 = None
    config_0 = module_0.Config(none_type_0)
    none_type_1 = config_0.register_type(config_0)
    none_type_2 = config_0.register_type(none_type_0)


def test_case_10():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0, converters=none_type_0)
    config_0.update_config(none_type_0)


def test_case_11():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0, keep_alive=none_type_0)
    config_1 = module_0.Config(config_0, converters=none_type_0)
    var_0 = config_0.update_config(config_1)
    module_0.DescriptorMeta(var_0, *var_0)


def test_case_12():
    none_type_0 = None
    config_0 = module_0.Config()
    none_type_1 = config_0.register_type(none_type_0)
    none_type_2 = config_0.update()
    config_0.register_type(none_type_2)


def test_case_13():
    none_type_0 = None
    str_0 = "_"
    config_0 = module_0.Config(none_type_0, str_0, converters=none_type_0)
    var_0 = config_0.update_config(config_0)
    module_0.Config(str_0)
