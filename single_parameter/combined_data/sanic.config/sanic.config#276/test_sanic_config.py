# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import inspect as module_1
import sanic.utils as module_2


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    none_type_0 = None
    bool_0 = True
    module_0.Config(keep_alive=none_type_0, converters=bool_0)


def test_case_2():
    str_0 = "J6X9R7l{70~g"
    none_type_0 = None
    config_0 = module_0.Config(keep_alive=str_0, converters=none_type_0)
    var_0 = config_0.update_config(config_0)
    config_0.update_config(var_0)


def test_case_3():
    config_0 = module_0.Config()
    float_0 = -2045.04
    none_type_0 = config_0.update()
    config_1 = module_0.Config(config_0)
    config_1.update_config(float_0)


def test_case_4():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_5():
    config_0 = module_0.Config()
    float_0 = -2045.04
    config_0.update_config(float_0)


def test_case_6():
    str_0 = "=\r<QT\x0c|[`tH2XD/Pr`"
    bool_0 = False
    none_type_0 = None
    config_0 = module_0.Config(keep_alive=str_0, converters=none_type_0)
    none_type_1 = config_0.register_type(bool_0)
    config_1 = module_0.Config(config_0)
    var_0 = config_0.update_config(config_1)


def test_case_7():
    str_0 = "_"
    config_0 = module_0.Config(env_prefix=str_0)


def test_case_8():
    str_0 = "_"
    config_0 = module_0.Config(env_prefix=str_0)
    config_0.__getattr__(str_0)


def test_case_9():
    config_0 = module_0.Config()
    config_0.__getattr__(config_0)


def test_case_10():
    str_0 = "!}0*gh$"
    none_type_0 = None
    config_0 = module_0.Config(none_type_0, keep_alive=none_type_0)
    none_type_1 = config_0.update()
    config_0.update_config(str_0)


def test_case_11():
    none_type_0 = None
    config_0 = module_0.Config(none_type_0, none_type_0)
    int_0 = 1909
    var_0 = module_1.isdatadescriptor(int_0)
    var_1 = module_1.isclass(var_0)
    list_0 = []
    var_2 = module_1.isdatadescriptor(list_0)
    module_2.load_module_from_file_location(var_2, list_0)


def test_case_12():
    bool_0 = False
    bytes_0 = b"T:NpC$\x17\xd6\xa7\x1d>\x9c"
    config_0 = module_0.Config(keep_alive=bool_0, converters=bytes_0)
    var_0 = config_0.load_environment_vars()
    var_0.init_for_request()


def test_case_13():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)
    none_type_0 = config_0.register_type(var_0)
    str_0 = ". You should rename one or more of them explicitly by using the `name` param, or changing the implicit name derived from the class and function name. For more details, please see https://sanic.dev/en/guide/release-notes/v23.3.html#duplicated-route-names-are-no-longer-allowed"
    none_type_1 = config_0.__setitem__(str_0, none_type_0)
    none_type_2 = None
    var_1 = config_0.__getattr__(str_0)
    config_0.register_type(none_type_2)


def test_case_14():
    str_0 = "LOCAL_CERT_CREATOR"
    none_type_0 = None
    none_type_1 = None
    config_0 = module_0.Config(converters=none_type_1)
    config_0.__setitem__(str_0, none_type_0)


def test_case_15():
    str_0 = "=\r<QT\x0c|[`tH2X&/Pr`"
    str_1 = "_FALLBACK_ERROR_FORMAT"
    dict_0 = {str_0: str_0, str_1: str_0, str_0: str_1}
    bool_0 = False
    none_type_0 = None
    config_0 = module_0.Config(keep_alive=str_0, converters=none_type_0)
    none_type_1 = config_0.register_type(bool_0)
    module_0.Config(dict_0)


def test_case_16():
    str_0 = "=\r<QT\x0c|[`tH2XD/Pr`"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    none_type_0 = None
    config_0 = module_0.Config(keep_alive=str_0, converters=none_type_0)
    str_1 = "L"
    config_1 = module_0.Config(env_prefix=str_1)
    var_0 = config_0.update_config(dict_0)
    config_2 = module_0.Config(keep_alive=var_0)
    config_0.update(**var_0)
