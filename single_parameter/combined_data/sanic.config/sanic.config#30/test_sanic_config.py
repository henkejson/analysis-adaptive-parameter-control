# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import inspect as module_1
import sanic.helpers as module_2
import sanic.errorpages as module_3
import sanic.utils as module_4


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    bytes_0 = b"\x1bn\x9e\xf4y\xd8\xa4\x9a\xb1\x8d\xb6x3\xb7\xfd\xb9\xd7"
    str_0 = "handle_request"
    config_0 = module_0.Config(env_prefix=str_0, converters=bytes_0)
    float_0 = -2134.7
    var_0 = module_1.isclass(float_0)
    var_0.init_for_request()


def test_case_2():
    default_0 = module_2.Default()
    module_0.Config(env_prefix=default_0, keep_alive=default_0)


def test_case_3():
    str_0 = "c(8`jQAp#BG5#\\ev"
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=str_0, converters=none_type_0)
    dict_0 = {str_0: str_0}
    module_0.Config(dict_0, dict_0)


def test_case_4():
    config_0 = module_0.Config()
    str_0 = ": An async function to fake a request to the application - "
    module_1.getmembers(config_0, str_0)


def test_case_5():
    str_0 = "23.12.0"
    none_type_0 = None
    str_1 = "Directory "
    config_0 = module_0.Config(keep_alive=none_type_0, converters=none_type_0)
    none_type_1 = config_0.__setattr__(str_0, none_type_0)
    config_0.update_config(str_1)


def test_case_6():
    str_0 = "26Gg"
    str_1 = "=on;]WyXuHA\n:\\u("
    dict_0 = {str_0: str_0, str_1: str_0}
    config_0 = module_0.Config(dict_0, converters=str_0)
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_0.Config(converters=list_0)


def test_case_7():
    complex_0 = -4587.5578 - 637.43j
    config_0 = module_0.Config(keep_alive=complex_0)
    none_type_0 = config_0.register_type(config_0)
    module_3.check_error_format(none_type_0)


def test_case_8():
    int_0 = -235
    var_0 = module_1.getmembers(int_0)
    config_0 = module_0.Config()
    config_0.__setitem__(var_0, int_0)


def test_case_9():
    str_0 = "S2$gX\x0c12\x0bm\\"
    none_type_0 = None
    set_0 = {none_type_0}
    config_0 = module_0.Config(env_prefix=none_type_0, keep_alive=str_0)
    config_0.update_config(set_0)


def test_case_10():
    config_0 = module_0.Config()
    none_type_0 = config_0.update()
    var_0 = config_0.load_environment_vars()
    config_1 = module_0.Config(var_0, converters=config_0)
    config_0.__getattr__(config_0)


def test_case_11():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_12():
    none_type_0 = None
    config_0 = module_0.Config()
    config_0.update_config(none_type_0)


def test_case_13():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)
    str_0 = "LOCAL_CERT_CREATOR"
    config_0.__setattr__(str_0, config_0)


def test_case_14():
    bool_0 = False
    str_0 = "L"
    config_0 = module_0.Config(env_prefix=str_0, keep_alive=bool_0, converters=bool_0)
    var_0 = config_0.load_environment_vars()
    var_1 = var_0.__bool__()
    module_4.load_module_from_file_location(var_1)
