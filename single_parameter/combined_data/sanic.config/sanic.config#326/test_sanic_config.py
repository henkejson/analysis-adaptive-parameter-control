# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import sanic.http.http1 as module_1
import inspect as module_2


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    bool_0 = True
    module_0.Config(keep_alive=bool_0, converters=bool_0)


def test_case_2():
    complex_0 = -289.1405 - 643.2j
    config_0 = module_0.Config(keep_alive=complex_0)
    config_0.update_config(complex_0)


def test_case_3():
    complex_0 = -289.1405 - 643.2j
    none_type_0 = None
    module_0.Config(env_prefix=complex_0, converters=none_type_0)


def test_case_4():
    config_0 = module_0.Config()
    module_1.Http(config_0)


def test_case_5():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_6():
    complex_0 = -289.1405 - 643.2j
    config_0 = module_0.Config(keep_alive=complex_0)
    none_type_0 = None
    config_1 = module_0.Config(env_prefix=none_type_0)
    config_0.update_config(complex_0)


def test_case_7():
    config_0 = module_0.Config()
    config_0.__setitem__(config_0, config_0)


def test_case_8():
    config_0 = module_0.Config()
    config_0.__getattr__(config_0)


def test_case_9():
    bytes_0 = b"y*%\xd9\x1b.\xd0\xcd"
    config_0 = module_0.Config(keep_alive=bytes_0)
    config_1 = module_0.Config()
    config_1.update_config(bytes_0)


def test_case_10():
    config_0 = module_0.Config()
    config_1 = module_0.Config(config_0)
    var_0 = module_2.isclass(config_0)
    none_type_0 = config_1.register_type(var_0)
    var_1 = config_0.update_config(config_1)
    config_1.__getattr__(var_1)


def test_case_11():
    str_0 = "2p(Pye1W1:F'V%RaT"
    int_0 = -4719
    str_1 = "LOCALHOST"
    dict_0 = {str_0: int_0, str_1: int_0, str_1: str_1}
    module_0.Config(dict_0, converters=str_1)


def test_case_12():
    complex_0 = -289.1405 - 643.2j
    str_0 = "?h{n"
    dict_0 = {str_0: str_0}
    config_0 = module_0.Config(dict_0, converters=str_0)
    config_1 = module_2.isdatadescriptor(complex_0)
    module_0.DescriptorMeta(config_1, *complex_0)


def test_case_13():
    config_0 = module_0.Config()
    config_1 = module_0.Config(config_0)
    var_0 = module_2.isclass(config_0)
    none_type_0 = config_0.register_type(config_0)
    none_type_1 = config_1.register_type(var_0)
    var_1 = var_0.__repr__()
    var_2 = config_0.update_config(config_1)
    str_0 = "LOCAL_CERT_CREATOR"
    config_1.__setitem__(str_0, str_0)
