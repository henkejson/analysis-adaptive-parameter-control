# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import inspect as module_1
import sanic.helpers as module_2


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    bool_0 = False
    config_0 = module_0.Config(env_prefix=bool_0, converters=bool_0)


def test_case_2():
    str_0 = ""
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    config_0 = module_0.Config(dict_0, keep_alive=str_0)
    bool_0 = True
    none_type_0 = None
    config_1 = module_0.Config(none_type_0)
    var_0 = module_1.isclass(bool_0)
    var_0.load_environment_vars()


def test_case_3():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_4():
    bool_0 = False
    config_0 = module_0.Config(bool_0, keep_alive=bool_0)
    none_type_0 = None
    config_0.__setitem__(config_0, none_type_0)


def test_case_5():
    config_0 = module_0.Config()
    none_type_0 = None
    config_0.update_config(none_type_0)


def test_case_6():
    bool_0 = False
    config_0 = module_0.Config(converters=bool_0)
    str_0 = '/k+k"0+D'
    var_0 = config_0.update_config(config_0)
    config_0.__getattr__(str_0)


def test_case_7():
    bool_0 = False
    config_0 = module_0.Config(converters=bool_0)
    str_0 = "=<Wa?qBx"
    config_0.update_config(str_0)


def test_case_8():
    bool_0 = False
    config_0 = module_0.Config(converters=bool_0)
    str_0 = 'qe"8RVd?(l,D'
    none_type_0 = None
    str_1 = '"6@#7\rqA'
    config_1 = module_0.Config(env_prefix=str_1, converters=str_0)
    str_2 = "yq:\rP<\\9MqR>8F=D"
    var_0 = config_0.update_config(config_0)
    var_1 = var_0.__repr__()
    var_1.__instancecheck__(str_2, none_type_0)


def test_case_9():
    bool_0 = True
    module_0.Config(env_prefix=bool_0, converters=bool_0)


def test_case_10():
    bool_0 = False
    config_0 = module_0.Config(bool_0, keep_alive=bool_0)
    config_0.__getattr__(config_0)


def test_case_11():
    str_0 = '"@#7\rqA'
    default_0 = module_2.Default()
    config_0 = module_0.Config(converters=str_0)


def test_case_12():
    bool_0 = False
    config_0 = module_0.Config(converters=bool_0)
    none_type_0 = None
    none_type_1 = config_0.register_type(none_type_0)
    none_type_2 = config_0.register_type(bool_0)
    config_0.register_type(none_type_2)
