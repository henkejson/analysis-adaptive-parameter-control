# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import inspect as module_1


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    str_0 = "_"
    config_0 = module_0.Config(env_prefix=str_0)
    config_1 = module_0.Config(
        env_prefix=str_0, keep_alive=config_0, converters=config_0
    )
    module_0.DescriptorMeta(str_0)


def test_case_2():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0)


def test_case_3():
    str_0 = "S"
    config_0 = module_0.Config(env_prefix=str_0)
    none_type_0 = config_0.register_type(config_0)
    module_0.DescriptorMeta(none_type_0)


def test_case_4():
    str_0 = "S"
    config_0 = module_0.Config(env_prefix=str_0)


def test_case_5():
    str_0 = "qC6sdCPx7@ga(f5"
    descriptor_meta_0 = module_1.getmembers(str_0)
    bytes_0 = b"Request-URI Too Long"
    module_0.Config(converters=bytes_0)


def test_case_6():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_7():
    str_0 = "eC6sdCPxp@ga(f5"
    config_0 = module_0.Config(env_prefix=str_0)
    var_0 = module_1.isclass(str_0)
    str_1 = "t9q@0"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_1}
    config_1 = module_0.Config(dict_0, str_0)
    var_1 = config_1.load_environment_vars()


def test_case_8():
    config_0 = module_0.Config()
    var_0 = module_1.getmembers(config_0)
    var_0.__getattr__(var_0)


def test_case_9():
    bytes_0 = b"S\xec\xf5\x8c\x0e\xceN\xeac"
    config_0 = module_0.Config()
    config_0.update_config(bytes_0)


def test_case_10():
    config_0 = module_0.Config()
    none_type_0 = None
    config_0.update_config(none_type_0)


def test_case_11():
    none_type_0 = None
    var_0 = module_1.isdatadescriptor(none_type_0)
    set_0 = {var_0, none_type_0, none_type_0, var_0}
    none_type_1 = None
    config_0 = module_0.Config(env_prefix=none_type_1)
    config_0.__getattr__(set_0)


def test_case_12():
    config_0 = module_0.Config()
    str_0 = "z%l\\QB\re\\4"
    str_1 = "qA1h^c"
    none_type_0 = config_0.__setattr__(str_0, str_1)
    none_type_1 = None
    none_type_2 = config_0.register_type(none_type_1)
    str_2 = "LOCAL_CERT_CREATOR"
    config_0.__setitem__(str_2, str_2)


def test_case_13():
    config_0 = module_0.Config()
    none_type_0 = config_0.register_type(config_0)
    str_0 = "S"
    config_0.load_environment_vars(str_0)
