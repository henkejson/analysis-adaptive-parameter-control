# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import builtins as module_1
import sanic.helpers as module_2
import inspect as module_3


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    bool_0 = False
    config_0 = module_0.Config(keep_alive=bool_0)


def test_case_2():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0)


def test_case_3():
    object_0 = module_1.object()
    config_0 = module_0.Config()
    config_0.update_config(object_0)


def test_case_4():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_5():
    config_0 = module_0.Config()
    str_0 = ""
    list_0 = []
    default_0 = module_2.Default(*list_0)
    var_0 = default_0.__repr__()
    var_1 = var_0.__repr__()
    none_type_0 = config_0.__setitem__(str_0, var_1)
    none_type_1 = config_0.update()
    var_2 = config_0.load_environment_vars()
    var_2.update_config(var_2)


def test_case_6():
    str_0 = "T!0[_z?eHBi@Ywk(gk"
    none_type_0 = None
    none_type_1 = None
    config_0 = module_0.Config(none_type_0, str_0, none_type_1, converters=none_type_1)
    bool_0 = False
    var_0 = module_3.getmembers(bool_0)
    var_0.register(none_type_1, none_type_1)


def test_case_7():
    str_0 = "Ambiguous restart with both a named process and all_workers=True"
    none_type_0 = None
    config_0 = module_0.Config(keep_alive=str_0)
    config_0.__getattr__(none_type_0)


def test_case_8():
    str_0 = "Ambiguous restart with both a named process and all_workers=True"
    config_0 = module_0.Config(keep_alive=str_0)
    config_0.update_config(str_0)


def test_case_9():
    object_0 = module_1.object()
    none_type_0 = None
    set_0 = {object_0, object_0}
    config_0 = module_0.Config(converters=set_0)
    config_0.update_config(none_type_0)


def test_case_10():
    object_0 = module_1.object()
    config_0 = module_0.Config()
    none_type_0 = None
    config_1 = module_0.Config(config_0)
    none_type_1 = config_0.update()
    var_0 = config_0.load_environment_vars()
    set_0 = {object_0, object_0}
    none_type_2 = config_0.update(**config_0)
    config_2 = module_0.Config(converters=set_0)
    config_0.update_config(none_type_0)


def test_case_11():
    config_0 = module_0.Config()
    none_type_0 = config_0.update(**config_0)
    list_0 = []
    default_0 = module_2.Default(*list_0)
    var_0 = default_0.__repr__()
    config_0.__getattr__(list_0)


def test_case_12():
    object_0 = module_1.object()
    str_0 = "Ambiguous restart with both a named process and all_workers=True"
    config_0 = module_0.Config()
    none_type_0 = config_0.update(**config_0)
    module_0.Config(converters=str_0)


def test_case_13():
    str_0 = ""
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    config_0 = module_0.Config(converters=dict_0)
    config_0.load_environment_vars(str_0)


def test_case_14():
    object_0 = module_1.object()
    str_0 = "Ambiguous restart with both a named process and all_workers=True"
    config_0 = module_0.Config()
    var_0 = config_0.load_environment_vars()
    none_type_0 = config_0.update(**config_0)
    str_1 = "LOCAL_CERT_CREATOR"
    none_type_1 = config_0.__setitem__(str_0, none_type_0)
    config_0.__setattr__(str_1, str_0)
