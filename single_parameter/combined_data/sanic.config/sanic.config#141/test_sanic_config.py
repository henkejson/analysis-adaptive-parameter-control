# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import sanic.errorpages as module_1
import inspect as module_2


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    config_0 = module_0.Config()
    none_type_0 = None
    config_1 = module_0.Config(env_prefix=none_type_0, keep_alive=none_type_0)


def test_case_2():
    none_type_0 = None
    config_0 = module_0.Config()
    config_1 = module_0.Config(none_type_0)
    config_2 = module_0.Config(config_0, none_type_0, none_type_0, converters=config_0)
    module_1.check_error_format(none_type_0)


def test_case_3():
    bool_0 = True
    none_type_0 = None
    config_0 = module_0.Config(keep_alive=bool_0, converters=none_type_0)
    config_1 = module_0.Config(none_type_0)
    bytes_0 = b"h\xf6J\x8b\xef\x16:\xa8kY"
    tuple_0 = (bytes_0,)
    var_0 = module_2.getmembers(tuple_0)


def test_case_4():
    none_type_0 = None
    bool_0 = False
    var_0 = module_2.isclass(bool_0)
    config_0 = module_0.Config(env_prefix=var_0, converters=var_0)
    config_0.__getattr__(none_type_0)


def test_case_5():
    config_0 = module_0.Config()
    none_type_0 = config_0.update(**config_0)


def test_case_6():
    config_0 = module_0.Config()
    none_type_0 = config_0.update_config(config_0)


def test_case_7():
    float_0 = -2593.0
    var_0 = module_2.isdatadescriptor(float_0)
    bytes_0 = b"g\xaf\x83\xdf"
    none_type_0 = None
    config_0 = module_0.Config(converters=none_type_0)
    var_1 = var_0.__repr__()
    config_0.update_config(bytes_0)


def test_case_8():
    config_0 = module_0.Config()
    none_type_0 = config_0.update(**config_0)
    str_0 = "4.Z'?;k"
    none_type_1 = config_0.__setitem__(str_0, config_0)


def test_case_9():
    config_0 = module_0.Config()
    config_0.__getattr__(config_0)


def test_case_10():
    config_0 = module_0.Config()
    none_type_0 = None
    config_0.update_config(none_type_0)


def test_case_11():
    str_0 = "EVENT_AUTOREGISTER"
    dict_0 = {str_0: str_0}
    none_type_0 = None
    config_0 = module_0.Config(dict_0, str_0, none_type_0)
    module_1.check_error_format(config_0)


def test_case_12():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)
    none_type_0 = None
    config_1 = module_0.Config(config_0, none_type_0, converters=var_0)
    none_type_1 = config_0.register_type(var_0)
    config_0.register_type(var_0)
