# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import sanic.errorpages as module_1
import inspect as module_2


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    str_0 = "Iterating over the CookieJar has been deprecated and will be removed in v24.3. To learn more, please see: https://sanic.dev/en/guide/release-notes/v23.3.html#response-cookies"
    config_0 = module_0.Config(env_prefix=str_0, keep_alive=str_0)
    module_1.check_error_format(config_0)


def test_case_2():
    bool_0 = True
    config_0 = module_0.Config()
    var_0 = config_0.load_environment_vars()
    module_0.Config(bool_0, converters=bool_0)


def test_case_3():
    str_0 = "Iterating over the CookieJar has been deprecated and will be removed in v24.3. To learn more, please see: https://sanic.dev/en/guide/release-notes/v23.3.html#response-cookies"
    config_0 = module_0.Config(env_prefix=str_0, keep_alive=str_0)
    var_0 = module_2.getmembers(config_0)
    var_0.register(str_0, str_0)


def test_case_4():
    config_0 = module_0.Config()
    config_0.__getattr__(config_0)


def test_case_5():
    config_0 = module_0.Config()
    str_0 = "(pG3g*abwW{uY-"
    none_type_0 = config_0.__setitem__(str_0, str_0)
    none_type_1 = None
    set_0 = set()
    var_0 = module_2.isclass(set_0)
    var_0.register(none_type_1, none_type_1)


def test_case_6():
    config_0 = module_0.Config()
    none_type_0 = None
    none_type_1 = config_0.register_type(none_type_0)
    config_0.update_config(none_type_1)


def test_case_7():
    bool_0 = True
    none_type_0 = None
    bool_1 = True
    config_0 = module_0.Config(env_prefix=none_type_0, keep_alive=bool_1)
    var_0 = module_2.getmembers(none_type_0)
    var_0.register(bool_0, none_type_0)


def test_case_8():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_9():
    none_type_0 = None
    config_0 = module_0.Config()
    config_0.update_config(none_type_0)


def test_case_10():
    config_0 = module_0.Config()
    str_0 = "(pG3g*abwW{uY-"
    config_0.update_config(str_0)


def test_case_11():
    str_0 = "handle_request"
    bool_0 = True
    dict_0 = {str_0: bool_0}
    module_0.Config(dict_0, converters=bool_0)


def test_case_12():
    str_0 = "_"
    config_0 = module_0.Config(env_prefix=str_0)
    none_type_0 = config_0.register_type(config_0)
    var_0 = module_2.isdatadescriptor(str_0)
    config_0.register_type(config_0)


def test_case_13():
    config_0 = module_0.Config()
    str_0 = "? ,@~CU\\z\x0cS|srKf=F"
    str_1 = "Container used for both request and response headers.\n    It is a subclass of  [CIMultiDict](https://multidict.readthedocs.io/en/stable/multidict.html#cimultidictproxy)\n\n    It allows for multiple values for a single key in keeping with the HTTP\n    spec. Also, all keys are *case in-sensitive*.\n\n    Please checkout [the MultiDict documentation](https://multidict.readthedocs.io/en/stable/multidict.html#multidict)\n    for more details about how to use the object. In general, it should work\n    very similar to a regular dictionary.\n    "
    none_type_0 = config_0.__setattr__(str_1, str_0)
    bool_0 = True
    var_0 = module_2.getmembers(bool_0, none_type_0)
    none_type_1 = config_0.register_type(var_0)
    none_type_2 = config_0.register_type(config_0)
    config_1 = module_0.Config(converters=str_0)
    var_1 = config_0.update_config(config_0)
    none_type_3 = config_0.__setitem__(str_0, str_0)
    none_type_4 = None
    var_2 = module_2.getmembers(config_0)
    var_3 = config_0.load_environment_vars(str_0)
    var_2.__getattr__(none_type_4)


def test_case_14():
    config_0 = module_0.Config()
    str_0 = "(pG3g*abwW{uY-"
    str_1 = "Q.jnq?AV23e*"
    none_type_0 = config_0.__setattr__(str_1, config_0)
    var_0 = config_0.update_config(config_0)
    none_type_1 = config_0.__setitem__(str_0, str_0)
    none_type_2 = None
    none_type_3 = config_0.register_type(none_type_2)
    none_type_4 = config_0.update()
    config_1 = module_0.Config(env_prefix=var_0, converters=var_0)
    var_1 = module_2.getmembers(config_0)
    str_2 = "LOCAL_CERT_CREATOR"
    config_0.__setitem__(str_2, var_0)


def test_case_15():
    config_0 = module_0.Config()
    str_0 = "_FALLBACK_ERROR_FORMAT"
    var_0 = config_0.update_config(config_0)
    none_type_0 = config_0.__setitem__(str_0, str_0)
    none_type_1 = None
    none_type_2 = config_0.register_type(none_type_1)
    var_1 = module_2.getmembers(config_0)
    config_0.update_config(var_0)


def test_case_16():
    str_0 = "_"
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=str_0)
    str_0.load_environment_vars(none_type_0)


def test_case_17():
    str_0 = ""
    config_0 = module_0.Config()
    config_0.load_environment_vars(str_0)
