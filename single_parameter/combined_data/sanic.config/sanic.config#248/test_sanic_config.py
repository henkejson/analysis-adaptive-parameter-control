# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import inspect as module_1


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    str_0 = "/"
    int_0 = 127
    str_1 = "┘\n"
    dict_0 = {str_0: int_0, str_1: int_0, str_1: str_1}
    bool_0 = True
    config_0 = module_0.Config(dict_0, str_1, bool_0)
    config_1 = module_0.Config()
    var_0 = config_1.update_config(dict_0)


def test_case_2():
    str_0 = "L"
    config_0 = module_0.Config(env_prefix=str_0)


def test_case_3():
    str_0 = "fgT!>8t"
    str_1 = "_FALLBACK_ERROR_FORMAT"
    str_2 = "H|5lzDJ9I,~&sh3'r"
    str_3 = "\t"
    str_4 = "\rB}k"
    dict_0 = {str_0: str_0, str_1: str_2, str_3: str_0, str_4: str_0}
    module_0.Config(dict_0)


def test_case_4():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_5():
    str_0 = "L"
    config_0 = module_0.Config(env_prefix=str_0)
    none_type_0 = None
    config_1 = module_1.getmembers(config_0, none_type_0)


def test_case_6():
    none_type_0 = None
    config_0 = module_0.Config(converters=none_type_0)
    dict_0 = {}
    none_type_1 = None
    config_1 = module_0.Config(dict_0, none_type_1, converters=dict_0)
    config_1.__getattr__(dict_0)


def test_case_7():
    config_0 = module_0.Config()
    none_type_0 = config_0.register_type(config_0)
    tuple_0 = (config_0,)
    none_type_1 = config_0.register_type(tuple_0)
    config_0.__getattr__(none_type_0)


def test_case_8():
    none_type_0 = None
    config_0 = module_0.Config(
        none_type_0, keep_alive=none_type_0, converters=none_type_0
    )
    var_0 = config_0.update_config(config_0)
    float_0 = 1889.274
    config_1 = module_0.Config(env_prefix=var_0, keep_alive=float_0)
    config_0.update_config(float_0)


def test_case_9():
    config_0 = module_0.Config()
    none_type_0 = None
    config_0.update_config(none_type_0)


def test_case_10():
    str_0 = "/"
    int_0 = -867
    str_1 = "┘\n"
    dict_0 = {str_0: int_0, str_1: int_0, str_1: str_1}
    bool_0 = True
    config_0 = module_0.Config(keep_alive=bool_0, converters=dict_0)
    config_1 = module_0.Config(dict_0, str_1, bool_0)
    config_2 = module_0.Config()
    var_0 = module_1.isdatadescriptor(config_2)
    config_2.__getattr__(int_0)


def test_case_11():
    config_0 = module_0.Config()
    str_0 = "NJ'\x0bLxh@qm3:h\nVG2)"
    config_0.update_config(str_0)


def test_case_12():
    bytes_0 = b"Unavailable For Legal Reasons"
    module_0.Config(converters=bytes_0)


def test_case_13():
    config_0 = module_0.Config()
    str_0 = "LOCAL_CERT_CREATOR"
    config_0.__setattr__(str_0, config_0)


def test_case_14():
    config_0 = module_0.Config()
    int_0 = -379
    var_0 = config_0.update_config(config_0)
    str_0 = "L"
    config_1 = module_0.Config(env_prefix=str_0)
    config_2 = module_0.Config(config_0, converters=var_0)
    none_type_0 = None
    var_1 = var_0.__bool__()
    config_3 = module_0.Config(var_1, converters=config_2)
    config_4 = module_0.Config(env_prefix=none_type_0)
    var_2 = module_1.isdatadescriptor(int_0)
    var_3 = module_1.isclass(config_4)
    var_4 = var_0.__bool__()
    module_0.Config(env_prefix=str_0, converters=config_1)
