# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import inspect as module_1
import sanic.constants as module_2


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    str_0 = "Retrieve an instantiated Sanic instance by name.\n\n        This method is best used when needing to get access to an already\n        defined application instance in another part of an app.\n\n        .. warning::\n            Be careful when using this method in the global scope as it is\n            possible that the import path running will cause it to error if\n            the imported global scope runs before the application instance\n            is created.\n\n            It is typically best used in a function or method that is called\n            after the application instance has been created.\n\n            ```python\n            def setup_routes():\n                app = Sanic.get_app()\n                app.add_route(handler_1, '/route1')\n                app.add_route(handler_2, '/route2')\n            ```\n\n        Args:\n            name (Optional[str], optional): Name of the application instance\n                to retrieve. When not specified, it will return the only\n                application instance if there is only one. If not specified\n                and there are multiple application instances, it will raise\n                an exception. Defaults to `None`.\n            force_create (bool, optional): If `True` and the named app does\n                not exist, a new instance will be created. Defaults to `False`.\n\n        Returns:\n            Sanic: The requested Sanic app instance.\n\n        Raises:\n            SanicException: If there are multiple or no Sanic apps found, or\n                if the specified name is not found.\n\n\n        Example:\n            ```python\n            app1 = Sanic(\"app1\")\n            app2 = Sanic.get_app(\"app1\")  # app2 is the same instance as app1\n            ```\n        "
    config_0 = module_0.Config(env_prefix=str_0)


def test_case_2():
    none_type_0 = None
    str_0 = "Ybd?nkqP%Mm+X"
    str_1 = "b-z(=i7H\x0b\tA"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: none_type_0, str_1: none_type_0}
    config_0 = module_0.Config(dict_0, converters=dict_0)
    config_0.__getattr__(none_type_0)


def test_case_3():
    config_0 = module_0.Config()
    var_0 = module_1.getmembers(config_0)


def test_case_4():
    config_0 = module_0.Config()
    config_0.__getattr__(config_0)


def test_case_5():
    bool_0 = False
    config_0 = module_0.Config(env_prefix=bool_0)


def test_case_6():
    none_type_0 = None
    bool_0 = True
    config_0 = module_0.Config(env_prefix=none_type_0, keep_alive=bool_0)
    config_0.update_config(none_type_0)


def test_case_7():
    config_0 = module_0.Config()
    var_0 = module_1.getmembers(config_0)
    config_0.update_config(var_0)


def test_case_8():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_9():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)
    config_0.__setitem__(config_0, config_0)


def test_case_10():
    config_0 = module_0.Config()
    none_type_0 = config_0.register_type(config_0)
    config_0.update_config(none_type_0)


def test_case_11():
    config_0 = module_0.Config()
    var_0 = module_2.LocalCertCreator.MKCERT
    config_0.update_config(var_0)


def test_case_12():
    config_0 = module_0.Config()
    none_type_0 = config_0.register_type(config_0)
    none_type_1 = config_0.update()
    config_0.register_type(config_0)


def test_case_13():
    config_0 = module_0.Config()
    str_0 = "LOCAL_CERT_CREATOR"
    config_0.__setitem__(str_0, str_0)
