# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import inspect as module_1
import sanic.constants as module_2


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    float_0 = -3072.2
    var_0 = module_1.isclass(float_0)
    bytes_0 = b'"t\xbe(\x8eC\x8d\xd5\xf9\x87Yr\x92\xa1\xf68\x00\x93p^'
    config_0 = module_0.Config(keep_alive=bytes_0, converters=bytes_0)
    var_0.update_config(var_0)


def test_case_2():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0, keep_alive=none_type_0)
    none_type_1 = config_0.register_type(none_type_0)
    config_1 = module_0.Config(keep_alive=none_type_0)
    var_0 = config_1.update_config(config_1)
    none_type_2 = config_1.register_type(config_1)
    config_1.update_config(none_type_0)


def test_case_3():
    str_0 = "7 @-->95sTI,dT!-l"
    dict_0 = {str_0: str_0}
    local_cert_creator_0 = module_2.LocalCertCreator.MKCERT
    module_0.Config(dict_0, keep_alive=local_cert_creator_0, converters=str_0)


def test_case_4():
    none_type_0 = None
    config_0 = module_0.Config(keep_alive=none_type_0)
    config_0.update_config(none_type_0)


def test_case_5():
    bytes_0 = b"\xf13"
    none_type_0 = None
    config_0 = module_0.Config(none_type_0)
    config_0.update_config(bytes_0)


def test_case_6():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_7():
    config_0 = module_0.Config()
    bool_0 = False
    config_0.__getattr__(bool_0)


def test_case_8():
    config_0 = module_0.Config()
    config_1 = module_0.Config()
    config_1.__getattr__(config_0)


def test_case_9():
    bool_0 = True
    descriptor_meta_0 = module_1.getmembers(bool_0)
    str_0 = "3b$<*"
    list_0 = [str_0]
    str_1 = '}"lkV\'J>e"GD'
    dict_0 = {str_0: list_0, str_1: list_0, str_1: str_1}
    module_0.Config(env_prefix=dict_0, keep_alive=bool_0)


def test_case_10():
    float_0 = -1891.17943
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_1.isclass(dict_0)
    config_0 = module_0.Config(keep_alive=var_0, converters=var_0)
    config_1 = module_0.Config()
    int_0 = 660
    config_1.__setitem__(var_0, int_0)


def test_case_11():
    str_0 = ""
    none_type_0 = None
    config_0 = module_0.Config(none_type_0, str_0, none_type_0)
    config_0.load_environment_vars(str_0)
