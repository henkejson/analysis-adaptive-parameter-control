# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import inspect as module_1
import sanic.constants as module_2


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    str_0 = "<K,>\rY}xk|L\x0c"
    config_0 = module_0.Config(env_prefix=str_0)


def test_case_2():
    none_type_0 = None
    str_0 = "9+u'!\\\"3\t\x0b>\\?u#K\n"
    str_1 = "-Kh;"
    str_2 = "JF:"
    dict_0 = {str_0: str_0, str_1: str_0, str_2: str_1}
    none_type_1 = None
    config_0 = module_0.Config(dict_0, keep_alive=none_type_1)
    config_0.__getattr__(none_type_0)


def test_case_3():
    config_0 = module_0.Config()
    var_0 = module_1.getmembers(config_0)


def test_case_4():
    config_0 = module_0.Config()
    var_0 = config_0.load_environment_vars()
    config_0.__getattr__(config_0)


def test_case_5():
    str_0 = "H"
    config_0 = module_0.Config(env_prefix=str_0)


def test_case_6():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0)


def test_case_7():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_8():
    config_0 = module_0.Config()
    var_0 = module_1.isdatadescriptor(config_0)
    config_0.update_config(var_0)


def test_case_9():
    str_0 = "/IgiTN<=?"
    bool_0 = False
    config_0 = module_0.Config(bool_0, str_0, converters=str_0)
    none_type_0 = config_0.__setitem__(str_0, str_0)
    list_0 = []
    int_0 = -2954
    var_0 = module_1.getmembers(int_0)
    var_0.__getattr__(list_0)


def test_case_10():
    bool_0 = True
    module_0.Config(env_prefix=bool_0, keep_alive=bool_0)


def test_case_11():
    str_0 = "H"
    config_0 = module_0.Config(env_prefix=str_0)
    none_type_0 = config_0.register_type(config_0)
    var_0 = config_0.update_config(config_0)


def test_case_12():
    config_0 = module_0.Config()
    none_type_0 = config_0.register_type(config_0)
    var_0 = module_2.LocalCertCreator.TRUSTME
    config_1 = module_0.Config(keep_alive=var_0)
    config_0.update_config(var_0)


def test_case_13():
    config_0 = module_0.Config()
    none_type_0 = config_0.register_type(config_0)
    config_0.register_type(config_0)


def test_case_14():
    str_0 = "_FALLBACK_ERROR_FORMAT"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.Config(dict_0, str_0)


def test_case_15():
    str_0 = "H"
    module_0.Config(env_prefix=str_0, converters=str_0)
