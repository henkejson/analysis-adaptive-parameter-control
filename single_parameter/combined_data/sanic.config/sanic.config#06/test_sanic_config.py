# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import inspect as module_1
import sanic.constants as module_2


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    int_0 = 1540
    module_0.Config(converters=int_0)


def test_case_2():
    str_0 = "YgK\rBxS{nD\x0b^VclA\tW"
    config_0 = module_0.Config(env_prefix=str_0, keep_alive=str_0)


def test_case_3():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0)


def test_case_4():
    config_0 = module_0.Config()
    none_type_0 = None
    config_0.__getattr__(none_type_0)


def test_case_5():
    config_0 = module_0.Config()
    none_type_0 = None
    config_0.update_config(none_type_0)


def test_case_6():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_7():
    config_0 = module_0.Config()
    config_1 = module_0.Config(converters=config_0)


def test_case_8():
    dict_0 = {}
    config_0 = module_0.Config(dict_0)
    config_1 = module_0.Config()
    str_0 = "LxZ/2r//MWY~\x0baGMEI["
    none_type_0 = config_1.__setitem__(str_0, str_0)
    config_2 = module_0.Config()


def test_case_9():
    str_0 = "\nN$.5jP\x0c-G_HH}^}Ka"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    config_0 = module_0.Config(dict_0, str_0)
    var_0 = config_0.load_environment_vars()
    dict_1 = {}
    config_1 = module_0.Config(dict_1)
    config_1.__getattr__(str_0)


def test_case_10():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    bool_1 = False
    var_0 = module_1.isdatadescriptor(bool_1)
    config_0 = module_0.Config(converters=var_0)
    config_0.__getattr__(dict_0)


def test_case_11():
    config_0 = module_0.Config()
    var_0 = module_2.LocalCertCreator.MKCERT
    var_1 = var_0.__repr__()
    config_0.update_config(var_1)


def test_case_12():
    bool_0 = False
    str_0 = "xi~1QE'H|@$b~W"
    descriptor_meta_0 = module_1.isclass(bool_0)
    module_0.Config(converters=str_0)


def test_case_13():
    config_0 = module_0.Config()
    var_0 = module_1.getmembers(config_0)
    list_0 = [var_0, var_0, config_0]
    str_0 = "\rXUq}n=Zir<cv"
    dict_0 = {str_0: var_0, str_0: var_0}
    none_type_0 = config_0.update(*list_0, **dict_0)
    var_0.register_type(none_type_0)
