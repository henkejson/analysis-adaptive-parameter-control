# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    dict_0 = {}
    str_0 = "(pS>N2raiOw{Z!"
    none_type_0 = None
    config_0 = module_0.Config(dict_0, str_0, none_type_0, converters=str_0)
    config_0.__getattr__(str_0)


def test_case_2():
    tuple_0 = ()
    config_0 = module_0.Config(keep_alive=tuple_0)


def test_case_3():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0, keep_alive=none_type_0)


def test_case_4():
    tuple_0 = ()
    config_0 = module_0.Config(keep_alive=tuple_0)
    var_0 = config_0.update_config(config_0)


def test_case_5():
    tuple_0 = ()
    config_0 = module_0.Config(keep_alive=tuple_0)
    config_0.update_config(tuple_0)


def test_case_6():
    str_0 = "(pS>N2raiOw{Z!"
    config_0 = module_0.Config()
    config_0.update_config(str_0)


def test_case_7():
    bool_0 = False
    str_0 = "H"
    config_0 = module_0.Config(bool_0, str_0)
    config_1 = module_0.Config()
    config_2 = module_0.Config(config_0)
    config_3 = module_0.Config()
    module_0.DescriptorMeta(config_3)


def test_case_8():
    config_0 = module_0.Config()
    config_1 = module_0.Config(keep_alive=config_0)
    config_1.__getattr__(config_1)


def test_case_9():
    bool_0 = False
    str_0 = "H"
    config_0 = module_0.Config(bool_0, str_0)
    config_1 = module_0.Config()
    str_1 = "mJ\tA/{Aj"
    config_0.update_config(str_1)


def test_case_10():
    config_0 = module_0.Config()
    none_type_0 = None
    config_1 = module_0.Config(keep_alive=none_type_0)
    str_0 = "N18p3D{P3'"
    module_0.Config(converters=str_0)


def test_case_11():
    bool_0 = False
    str_0 = "H"
    config_0 = module_0.Config(keep_alive=bool_0, converters=bool_0)
    module_0.Config(env_prefix=str_0, converters=config_0)


def test_case_12():
    str_0 = "VI!1>hodJ&\x0bBS0d\x0c"
    none_type_0 = None
    str_1 = "_FALLBACK_ERROR_FORMAT"
    str_2 = "B57"
    dict_0 = {str_0: none_type_0, str_1: none_type_0, str_2: str_2}
    module_0.Config(dict_0, str_1)


def test_case_13():
    bool_0 = False
    str_0 = "_"
    config_0 = module_0.Config(bool_0, str_0)
    config_1 = module_0.Config()
    var_0 = config_1.update_config(config_1)
    config_0.__getattr__(bool_0)
