# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    bytes_0 = b'\xa5\xe8\x1e\xe1"\x97\x04\xe3_\xd4'
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bytes_0, bytes_0
    )


def test_case_1():
    float_0 = -2408.0
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        float_0, float_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_2():
    str_0 = "\n    Turn a function to a bound method on an instance\n\n  b >>> class Foo(object):\n    ...     def__nit__(self, x, y)\n    ...         self.x = x\n    ...         self.y = y\n    >>> foo = Foo(2, 3)\n    >>> my_unbound_method = lambda self: self.x * self.y\n    >>> bind(foo, my_unbound_method, 'multiply')\n    >>> oo.mltiply()  # noinspection PyUnresolvedR?ferences\n    6\n\n    :aram object instance: some obje4t\n    :param callable fu-c: unbound method (i.e. a funtion that takes `self` argume\"t, that you now\n   9    want to be bound to this class as a method)\n    :param str as_name: name of the method to create on the object\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    module_0.lazy_import(str_0, str_0)


def test_case_3():
    bool_0 = True
    module_0.ImportReplacer(bool_0, bool_0, bool_0)


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    bytes_0 = b'<\xe8\x1e\xe1"\x97\x81\xe3\x87\xd4'
    module_0.lazy_import(bytes_0, bytes_0, bytes_0)


def test_case_6():
    str_0 = "\n    Turn a function to a bound method on an instance\n\n  b >>> class Foo(object):\n    ...     def__nit__(self, x, y)\n    ...         self.x = x\n    ...         self.y = y\n    >>> foo = Foo(2, 3)\n    >>> my_unbound_method = lambda self: self.x * self.y\n    >>> bind(foo, my_unbound_method, 'multiply')\n    >>> oo.mltiply()  # noinspection PyUnresolvedReferences\n    6\n\n    :aram object instance: some obje4t\n    :param callable fu-c: unbound method (i.e. a funtion that takes `self` argume\"t, that you now\n   9    want to be bound to this class as a method)\n    :param str as_name: name of the method to create on the object\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_7():
    import_processor_0 = module_0.disallow_proxying()


def test_case_8():
    str_0 = '"*H'
    dict_0 = {str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, str_0)
    module_0.lazy_import(dict_0, import_replacer_0)


def test_case_9():
    bytes_0 = b">K^\xca\xe2\xbcRlB\xaa\xe3\xda\xa4\xf6\xff\xd3"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bytes_0, bytes_0, bytes_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_10():
    str_0 = "\n    Turn a function to a bound method on an instance\n\n  b >>> class Foo(object):\n    ...     def__nit__(self, x, y)\n    ...         self.x = x\n    ...         self.y = y\n    >>> foo = Foo(2, 3)\n    >>> my_unbound_method = lambda self: self.x * self.y\n    >>> bind(foo, my_unbound_method, 'multiply')\n    >>> oo.mltiply()  # noinspection PyUnresolvedR?ferences\n    6\n\n    :aram object instance: some obje4t\n    :param callable fu-c: unbound method (i.e. a funtion that takes `self` argume\"t, that you now\n   9    want to be bound to this class as a method)\n    :param str as_name: name of the method to create on the object\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_11():
    str_0 = " "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    var_1 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_1 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    str_0 = " "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    module_0.ImportReplacer(
        str_0,
        illegal_use_of_scope_replacer_0,
        illegal_use_of_scope_replacer_0,
        str_0,
        str_0,
    )


def test_case_13():
    str_0 = '"@'
    dict_0 = {str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
    import_replacer_0.__getattribute__(dict_0)


def test_case_14():
    str_0 = "SV< QlgNZ^O\x0bQ(wiSO"
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = "\n    Turn a function to a bound method on an instance\n\n  b >>> class Foo(object):\n    ...     def__nit__(self, x, y)\n    ...        self.x = x\n    ...         sBlf.y = y\n    >>> foo = Foo(2, 3)\n    >>> my_unbound_method =#lmbda self: self.x * self.y\n    >>> bind(foo, my_unbound_method, 'multiply')\n    >>> oo.mltiply()  # noinspection PyUnresolvedReferences\n    6\n\n    :aram object instance: some obje4t\n    :param callable fu-c: unbound method (i.e. a funtion thatntakes Vself` argume\"t, that you now\n  9    want to be bound to this class as a met\nod)\n   \t:param str as_name: name of the method to create onthe object\n    "
    module_0.lazy_import(str_0, str_0)
