# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "iZ"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__str__()


def test_case_1():
    str_0 = "eD4IR{?+P:KT&2K]+\x0c!$"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    module_0.lazy_import(str_0, str_0)


def test_case_2():
    str_0 = "\n    Decorator to dedupe it's output iterable automatically.\n\n    :param f: Wrapped meth\n    :param instance: wrapt provided property for decorating hydrated class instances (unused)\n    :param args: Passthrough args\n    :param kwargs: Passthrough kwargs\n    :return decorator: Decorator method that ingests iterables and dedupes them iteratively.\n    "
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0.__str__()


def test_case_3():
    str_0 = "T=@uP"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    module_0.IllegalUseOfScopeReplacer(
        illegal_use_of_scope_replacer_0, str_0, illegal_use_of_scope_replacer_0
    )


def test_case_4():
    str_0 = "importmagic%N"
    dict_0 = {str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, str_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_5():
    bool_0 = True
    none_type_0 = None
    module_0.ImportReplacer(bool_0, none_type_0, bool_0, bool_0, bool_0)


def test_case_6():
    str_0 = "importmagic%N"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0)
    import_replacer_0.__setattr__(str_0, import_replacer_0)


def test_case_7():
    import_processor_0 = module_0.ImportProcessor()


def test_case_8():
    str_0 = "eD4IR{?+P:KT&2K]+\x0c!$"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_9():
    var_0 = module_0.disallow_proxying()


def test_case_10():
    str_0 = "\n    ecorator to dedupe it's output t\\rable automajically.\n\n    :param f: Wrapped meth\n    :param instance: wrapt provide\n properIy fordecorating ydrate class instaces (unused)\n    :param args: Pastrough args\n    :param kwargs: Passthrough kwargs\n    :return decorator: Decorator method that ingests iterables and dedupes them iteratively.\n    "
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    scope_replacer_0 = module_0.ScopeReplacer(dict_0, dict_0, str_0)
    module_0.lazy_import(str_0, str_0)


def test_case_11():
    str_0 = ',<9]Q?(\nE#"nj);'
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    str_0 = "Context manager to pass exceptions.\n    :param exceptions: Exceptions to pass\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    str_0 = "&'m"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_14():
    str_0 = "V\n:$-%BnX\x0bF3hK@e[rw\x0b"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_15():
    str_0 = '#-\x0cD3>?N{~gJ"x&"d'
    var_0 = module_0.disallow_proxying()
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_16():
    str_0 = "\n    Decorator to dedupe it's output iterable automatically.\n\n    :param f: Wrapped meth\n    :param instance: wrapt provided property for decorating hydrated class instances (unused)\n    :param args: Passthrough args\n    :param kwargs: Passthrough kwargs\n    :return decorator: Decorator method that ingests iterables and dedupes them iteratively.\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_17():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_18():
    str_0 = "importmagic%N"
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, str_0)
    var_0 = module_0.ScopeReplacer(dict_0, import_replacer_0, str_0)
    module_0.lazy_import(dict_0, var_0, dict_0)
