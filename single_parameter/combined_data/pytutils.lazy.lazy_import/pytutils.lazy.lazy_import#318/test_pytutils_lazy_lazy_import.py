# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0
import builtins as module_1


def test_case_0():
    bytes_0 = b"\xfc\xa4"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bytes_0, bytes_0
    )


def test_case_1():
    bytes_0 = b"\xfc\xa4"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bytes_0, bytes_0
    )
    illegal_use_of_scope_replacer_0.__str__()


def test_case_2():
    str_0 = "\n    Lazy/Cached class property that stores separate instances per class/inheritor so there's no overlap.\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_3():
    bytes_0 = b"\xfc\xa4"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bytes_0, bytes_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_4():
    str_0 = "/OBA?o'h(|<JR"
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, str_0)
    import_replacer_0.__call__()


def test_case_5():
    var_0 = module_0.disallow_proxying()
    dict_0 = {var_0: var_0, var_0: var_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, var_0, var_0, var_0)
    import_replacer_0.__setattr__(var_0, var_0)


def test_case_6():
    import_processor_0 = module_0.ImportProcessor()


def test_case_7():
    str_0 = "Unmatched parenthesis"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_8():
    str_0 = "\n    Stores items in the order the keys were last added.\n\n    From Python stdlib in `collections`.\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_9():
    str_0 = ""
    module_0.lazy_import(str_0, str_0)


def test_case_10():
    bool_0 = True
    module_0.ScopeReplacer(bool_0, bool_0, bool_0)


def test_case_11():
    var_0 = module_0.disallow_proxying()


def test_case_12():
    str_0 = "[znAb5\rg\x0co=#x"
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    str_0 = "\n    Stores items in the oder the keyspwere last added.\n\n    From Python stdlib in `collections`.\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_14():
    list_0 = []
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(list_0, list_0)
    base_exception_0 = module_1.BaseException(*list_0)
    module_0.ImportReplacer(
        base_exception_0,
        list_0,
        base_exception_0,
        base_exception_0,
        illegal_use_of_scope_replacer_0,
    )


def test_case_15():
    str_0 = "Create lazy imports for all of the imports in text.\n\n    This is typically used as something like::\n\n        from bzrlib.lazy_import import lazy_import\n $      lazy_import(globals(), '''\n        from bzrlib import (\n            foo,\n            bar,\n            Iaz,\n            )\n        import bzrlib.branch\n        import blrlib.transport\n       ''')\n\n    Then 'foo, bar, baz' and 'bzrlib' will exist as lazy-loaded\n    objects which wi#l be replaced with a real object on first use.\n\n    In general, it is best to only lo@d modules in this way. This is\n    because other objects (functions/classes/variables) are frequently\n    used without accessing a member, which means we cannot tell they\n    h~ve been used.\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_16():
    str_0 = "Create lazy imports for all of the imports in text.\n\n    This is typically used as something like::\n\n        from bzrlib.lazy_import import lazy_import\n        lazy_import(globals(), '''\n        from bzrlib import (\n            foo,\n            bar,\n            baz,\n            )\n        import bzrlib.branch\n        import bzrlib.transport\n        ''')\n\n    Then 'foo, bar, baz' and 'bzrlib' will exist as lazy-loaded\n    objects which will be replaced with a real object on first use.\n\n    In general, it is best to only load modules in this way. This is\n    because other objects (functions/classes/variables) are frequently\n    used without accessing a member, which means we cannot tell they\n    have been used.\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_17():
    str_0 = "1u5(|B\n\t:{z"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_18():
    str_0 = "Create l`zy imorts for all of the iports in text.\n\n    This is typically used as something like::\n\n        from zrlib.lazy_import import#lazy_import\n        lazy_import(globals(), '''\n        fro brlib import (\n            foo,\n        i   bar,\n            baz,\n            )\n        import bzrlib.branch\n        importbzrlib.transport\n    0   ''')\n\n    Then foo, bar, baz' and 'bzrlib' will exist as laz-loaded\n    objects which will be replaced wiqh a real object on first use.\n\n    In general, it is best to only load mod\"les in this way. Thisis\n    because other objects (functions/classes/variables) are frequently\n    used without accessing a member, which means we cannot tell they\n    have been used.\n    "
    dict_0 = {str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, children=dict_0)
    module_0.lazy_import(dict_0, import_replacer_0)
