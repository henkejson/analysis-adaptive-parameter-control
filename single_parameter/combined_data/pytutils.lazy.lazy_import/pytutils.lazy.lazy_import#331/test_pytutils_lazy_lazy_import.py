# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "Qn"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_1():
    bytes_0 = b"\n\xe4)\xa4\xe2"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bytes_0, bytes_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_2():
    str_0 = "[^U(C\th&\x0ch)L_yv2W#"
    none_type_0 = None
    dict_0 = {none_type_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, str_0)
    module_0.lazy_import(none_type_0, str_0)


def test_case_3():
    none_type_0 = None
    dict_0 = {none_type_0: none_type_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, none_type_0, none_type_0)
    module_0.lazy_import(none_type_0, import_replacer_0)


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    str_0 = '?eI;+"\nn\nBM.wnXVw'
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_6():
    str_0 = "Qn"
    module_0.lazy_import(str_0, str_0)


def test_case_7():
    str_0 = "b6\r=\x0bp(O,M!\\u"
    module_0.lazy_import(str_0, str_0)


def test_case_8():
    var_0 = module_0.disallow_proxying()


def test_case_9():
    str_0 = "}^U(C4h&\x0ch)L_y2W."
    module_0.lazy_import(str_0, str_0)


def test_case_10():
    str_0 = "\n    Loads (and returns) an env file specified by `filename` into the mapping `environ`.\n\n    >>> lines = ['TEST=${HOME}/yeee-$PATH', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../.../yeee-...:...'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_11():
    str_0 = "Q\x0b;r\n$UPC\t:L"
    module_0.ImportReplacer(str_0, str_0, str_0, str_0, str_0)


def test_case_12():
    str_0 = "[^U(4hh&\x0c\x0c)Ly2W."
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_13():
    str_0 = ""
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_14():
    str_0 = "This is designed to replace only a portion of an import list.\n\n    It will replace itself with a module, and then make children\n    entries also ImportReplacer objects.\n\n    At present, this only supports 'import foo.bar.baz' syntax.\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = ".!2Eu\x0c&w:r-9KUT_^\n"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_16():
    str_0 = "[^U(C\th&\x0ch)L_y2W#"
    module_0.lazy_import(str_0, str_0)


def test_case_17():
    str_0 = "\n    Loads (and returns) an env file specified by `filename` into the mapping `environ`.\n\n    >>> lines = ['TEST=${HOME}/yeee-$PATH', 'THISIS=~/a/test', 'YOLO=~/swaggins.$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedD,ct([('TEST', '.../.../yeee-...:...'),\n             ('THISIS', '.../a/test'B,\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_18():
    str_0 = "[^n(m(h&\x0ch)L_yv8\rW?"
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_19():
    str_0 = "[^U(C\th&\x0ch)L_yv2W#"
    none_type_0 = None
    dict_0 = {none_type_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, str_0)
    import_replacer_1 = module_0.ImportReplacer(dict_0, none_type_0, str_0)
    module_0.lazy_import(none_type_0, import_replacer_0)
