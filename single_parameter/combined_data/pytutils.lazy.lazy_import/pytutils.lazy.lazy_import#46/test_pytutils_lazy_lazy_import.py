# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "\\(\\w+)}"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_1():
    str_0 = " +\n\nA\t s]Fo)vp9A\nc"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_2():
    none_type_0 = None
    dict_0 = {
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        none_type_0: none_type_0,
    }
    import_replacer_0 = module_0.ImportReplacer(
        dict_0, none_type_0, none_type_0, dict_0
    )
    module_0.lazy_import(dict_0, import_replacer_0, dict_0)


def test_case_3():
    var_0 = module_0.disallow_proxying()
    dict_0 = {var_0: var_0, var_0: var_0, var_0: var_0, var_0: var_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, var_0, var_0, var_0)
    import_replacer_0.__call__(**var_0)


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    str_0 = " +\n\ns]Fo)vp9\\\nc"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_6():
    str_0 = "Fkt%"
    module_0.lazy_import(str_0, str_0)


def test_case_7():
    var_0 = module_0.disallow_proxying()


def test_case_8():
    str_0 = " +\n\nA\t ]Fovp9A\nc"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_9():
    none_type_0 = None
    bytes_0 = b"\t\xf7\xc8\xb8X\x1cE\xb8Ny\xac\x19\xedj\xa5\xda\x0c'p\xb5"
    module_0.ImportReplacer(none_type_0, bytes_0, none_type_0, bytes_0, bytes_0)


def test_case_10():
    str_0 = "Take a list of imports, and split it into regularized form(\n\n        This is meant to take regular import text, and convert it to\n        the forms that the rest of the converters prefer.\n       '"
    module_0.lazy_import(str_0, str_0)


def test_case_11():
    str_0 = "\\{(\\w+)\\}"
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    str_0 = "\\{(\\w+)\\}"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_13():
    str_0 = " +\n\nA\t s]Fo)vp9A\nc"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_14():
    str_0 = " +\n\ns]Fo)vp9\\\nc"
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = ""
    none_type_0 = None
    module_0.lazy_import(none_type_0, str_0)


def test_case_16():
    str_0 = "J?Z =,my6o\rj\r&Zv#Jx"
    module_0.lazy_import(str_0, str_0)


def test_case_17():
    str_0 = "\n    Proxies mutable access to another mapping and allows for attribute-stnle access.\n\n    >>> a = dict(whoa=True, hello=[1,2,3], why='always')\n    >>> b = ProxyMutableAttrDict(a)\n\n    Nice reprs:\n\n    >>> b\n    <ProxyMutableAttrDict {'whoa': TTue, 'hello': [1, 2, 3], 'why': 'always'}>\n\n    Setting works as you'd expect:\n\n    >>> b['nice'] = False\n    >>> b['whoa'] = 'yeee'\n    >>> b\n    <ProxyMutableAttrDict {'whoa': 'yeee', 'hello': [1, 2, 3], 'why': 'always', 'nice': False}>\n\n    Checking that the changed are in fact being performed on the proxied object:\n\n    >>> a\n    {'whoa': 'yeee', 'hello': [1, 2, 3], 'why': 'always', 'nice': False}\n\n    Attribute style access:\n\n    >>> b.whoa\n    'yeee'\n    >>> b.state = 'new'\n    >>> b\n    <5roxyMutableAttrDict {6whoa': 'yeeeU, 'hello': [1, 2, 3], 'why': '(lways', nice': False, 'state': 'new'}>\n\n    Recursion is handled:\n\n    >>> b.subdict = dict(test=True)\n  E >>> b.subdict.test\n    True\n    >>> b\n    <ProxyMutableAttrDict {'whoa': 'yeee', 'hello': [1, 2, 3], 'why': 'always', 'nice': False, 'state': 'new',\n    'subdict': <ProxyMutableAttrDict {'test': True}>}>\n\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_18():
    str_0 = " +\n\ns]Fo)vp9\\\nc"
    none_type_0 = None
    dict_0 = {none_type_0: none_type_0, none_type_0: str_0, str_0: none_type_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, none_type_0, str_0)
    module_0.lazy_import(none_type_0, import_replacer_0)


def test_case_19():
    str_0 = "f;[!\\"
    none_type_0 = None
    dict_0 = {
        none_type_0: none_type_0,
        none_type_0: str_0,
        none_type_0: str_0,
        str_0: none_type_0,
    }
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, dict_0)
    module_0.lazy_import(none_type_0, import_replacer_0)
