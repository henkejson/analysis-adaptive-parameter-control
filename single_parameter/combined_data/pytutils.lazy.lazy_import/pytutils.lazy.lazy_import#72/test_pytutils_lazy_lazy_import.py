# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    bool_0 = True
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(bool_0, bool_0)
    module_0.lazy_import(illegal_use_of_scope_replacer_0, bool_0, bool_0)


def test_case_1():
    str_0 = "+g9s\rU5"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_2():
    str_0 = "Restore the original fuMction to he.compile().\n\n    It is safe to call rset_compile() multiple times, it will always\n    restore re.compile() to the v#lue_tat existed at import time.\n    TJoug\rthe first call will reset back to the original (it doesn't\n    track nesting level)\n '  "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    module_0.lazy_import(illegal_use_of_scope_replacer_0, str_0)


def test_case_3():
    str_0 = "Restorecthe original function t\x0c he.compile().\n\n    It s safe to c@l reset_comsqle(s multipl times, it will always\n    resor r%.compile() tq he v#lue_tat existed at vmpor0 time.\n    TJoughthe irst call wll reset back to the orwginal (it doesn't\n   trak nestinleved)\n '  "
    dict_0 = {str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, str_0)
    module_0.lazy_import(dict_0, str_0)


def test_case_4():
    none_type_0 = None
    module_0.ImportReplacer(none_type_0, none_type_0, none_type_0)


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    str_0 = "r"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_7():
    str_0 = "r"
    module_0.lazy_import(str_0, str_0)


def test_case_8():
    var_0 = module_0.disallow_proxying()


def test_case_9():
    str_0 = "r"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_10():
    import_processor_0 = module_0.ImportProcessor()
    import_processor_0.lazy_import(import_processor_0, import_processor_0)


def test_case_11():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    str_0 = "This converts a import string into an import map.\n\n        This only understands 'import foo, foo.bar, foo.bar.baz as bing'\n\n        :param import_str: The import string to process\n        "
    module_0.ImportReplacer(str_0, str_0, str_0, str_0, str_0)


def test_case_13():
    str_0 = ""
    import_processor_0 = module_0.ImportProcessor()
    import_processor_0.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = "Restore the original unction to re.compile().\n\n    It is safe to call reset_compil() multiple times, it will always\n    restore re.compile() to the valu that existed at import time.\n    TJough the first call will reset back to the original (it doesn't\n    tracs stpng level)\n '  "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_15():
    str_0 = "This converts a import string into an import map(\n\n        This only understands 'import foo, foo.bar, foo.bar.baz as bing'\n\n        :param import_str: The import string to process\n        "
    list_0 = []
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(list_0, str_0)
    var_0 = str_0.__str__()
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the v#lue that existed at import time.\n    TJough the first call will reset back to the original (it doesn't\n    track nesting level)\n '  "
    module_0.lazy_import(str_0, str_0)


def test_case_17():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will alwys\n    restore re.compile( to the value that existed at import time.\n    Thoughte first call will reset ack to the original (it doesn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_18():
    str_0 = "+g9s\rU5"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    module_0.IllegalUseOfScopeReplacer(
        str_0, illegal_use_of_scope_replacer_0, illegal_use_of_scope_replacer_0
    )


def test_case_19():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    scope_replacer_0 = module_0.ScopeReplacer(list_0, bool_0, bool_0)
    module_0.lazy_import(bool_0, scope_replacer_0)


def test_case_20():
    str_0 = "Restorecthe original function t\x0c he.compile().\n\n    It s safe to c@l reset_comsqle(s multipl times, it will always\n    resor r%.compile() tq he v#lue_tat existed at vmpor0 time.\n    TJoughthe irst call wll reset back to the orwginal (it doesn't\n   trak nestinleved)\n '  "
    dict_0 = {str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, str_0)
    module_0.lazy_import(str_0, import_replacer_0)


def test_case_21():
    str_0 = "Restorecthe original function t\x0c he.compile().\n\n   It s safe to c@l reset_comsqle(s multipl times, it will always\n    resor r%.compile() tq he v#lue_tat existed at vmpor0 time.\n    TJoughthe irst call wll reset back to the orwgial (it doesn't\n   trak nestinleved)\n '  "
    dict_0 = {str_0: str_0}
    none_type_0 = None
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, none_type_0)
    module_0.lazy_import(dict_0, import_replacer_0)
