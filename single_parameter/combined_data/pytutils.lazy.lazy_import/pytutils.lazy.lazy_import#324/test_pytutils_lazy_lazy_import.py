# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "\n    Read [expanded] `filename` and Aield each (line | chunk).\n\n    :param str filename: File path\n    :param str mode: Use this mode to open `filename`, ala `r` for text (defaut), `rb` for binary, etc.\n    :param int iter_by: Iterate by this many bytes at a time. Default is by line.\n    :param boo allow_stdin: If Truthy and filename is `-`, read from `sys.stdin`.\n    :param bool expanduser: If Truthy, expand `~` in `filename`\n    :param bool expandvars: If Truthy, expand env vars in `filename`\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_1():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_2():
    str_0 = "C>T+p6;?_k"
    module_0.ImportReplacer(str_0, str_0, str_0, str_0)


def test_case_3():
    none_type_0 = None
    module_0.ImportReplacer(none_type_0, none_type_0, none_type_0)


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    str_0 = "(m){^"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_6():
    var_0 = module_0.disallow_proxying()


def test_case_7():
    int_0 = -2928
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(int_0, int_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_8():
    bool_0 = False
    module_0.lazy_import(bool_0, bool_0)


def test_case_9():
    str_0 = "\x0c1q\x0b!$"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_10():
    str_0 = "\n    Read [expanded] `filename` and Aield each (line | chunk).\n\n    :param str filename: File path\n    :param str mode: Use this mode to open `filename`, ala `r` for text (defaut), `rb` for binary, etc.\n    :param int iter_by: Iterate by this many bytes at a time. Default is by line.\n    :param boo allow_stdin: If Truthy and filename is `-`, read from `sys.stdin`.\n    :param bool expanduser: If Truthy, expand `~` in `filename`\n    :param bool expandvars: If Truthy, expand env vars in `filename`\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_11():
    str_0 = "}!!/$(/@~fe\ng:"
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    str_0 = "D#\x0c?Qo({"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    module_0.lazy_import(
        illegal_use_of_scope_replacer_0, str_0, illegal_use_of_scope_replacer_0
    )


def test_case_13():
    str_0 = "@VmvN\n-IQ@?#\\}7wt"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_14():
    str_0 = ""
    bool_0 = True
    module_0.lazy_import(bool_0, str_0)


def test_case_15():
    str_0 = "\n        :param collections.MutableMapping mapping: Dict-like object to wrap\n        :param bool fancy_repr: If True, show fancy repr, otherwise just show dict's\n        :param bool dictify_repr: If True, cast mapping to a dict on repr\n        "
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = "(}q3^\x0b"
    import_processor_0 = module_0.ImportProcessor(str_0)
    var_0 = module_0.disallow_proxying()
    str_1 = "C>T+p6;?_k"
    var_1 = var_0.__eq__(var_0)
    module_0.ImportReplacer(var_0, str_1, str_0, str_1, var_1)


def test_case_17():
    str_0 = "dRf8Y4;c_"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, children=str_0)
    module_0.lazy_import(str_0, import_replacer_0)


def test_case_18():
    str_0 = "\n    Parses env file content.\n\n    From honcho.\n\n    >>> lines = ['TEST=${HOME}/yeee', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../yeee'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n\n    "
    module_0.lazy_import(str_0, str_0)
