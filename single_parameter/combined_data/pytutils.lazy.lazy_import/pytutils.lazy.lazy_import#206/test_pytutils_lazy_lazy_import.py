# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "RestoKe the original fFnction to re.compile().\n\n    It is safe to call reset_compile() mutiple times, it wVll always\n    restore re.compile() to the value_that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    module_0.lazy_import(str_0, str_0)


def test_case_1():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    illegal_use_of_scope_replacer_0.__str__()


def test_case_2():
    str_0 = "RestoKe the original fFnction to re.compile().\n\n    It is safe to call reset_compile() mutiple times, it wVll always\n    restore re.compile() to the value_that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__str__()


def test_case_3():
    str_0 = "RestoKe the original fFnction to re.compile().\n\n    It is safe to call reset_compile() mutiple times, it wVll always\n    restore re.compile() to the value_that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    module_0.lazy_import(str_0, str_0)


def test_case_4():
    dict_0 = {}
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it zoesn't\n    track nesting level)\n    "
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value_that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_7():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile()~multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it zoesn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_8():
    var_0 = module_0.disallow_proxying()


def test_case_9():
    float_0 = -2135.0
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        float_0, float_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_10():
    complex_0 = -509.158488 + 2253j
    module_0.lazy_import(complex_0, complex_0)


def test_case_11():
    str_0 = "Return a member from the proxied regex object.\n\n        If the regex hasn't been compiled yet, compile it\n        "
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    str_0 = "\n            Override the __mro__ to fool `isinstance`.\n            "
    str_1 = "$M9(>`"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_1, str_1: str_1}
    module_0.lazy_import(dict_0, str_1)


def test_case_13():
    str_0 = "h"
    module_0.ImportReplacer(str_0, str_0, str_0, str_0, str_0)


def test_case_14():
    dict_0 = {}
    str_0 = "c|3}rpU&o0|8xt"
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, str_0)
    import_replacer_0.__call__()


def test_case_15():
    float_0 = -2135.0
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        float_0, float_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(float_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_16():
    dict_0 = module_0.disallow_proxying()
    str_0 = ""
    module_0.lazy_import(str_0, str_0)


def test_case_17():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it wVll always\n    restore re.compile(B to the value_that existed at impor time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_18():
    str_0 = "W #J_Q0=n4uo[K6e@e"
    module_0.lazy_import(str_0, str_0)
