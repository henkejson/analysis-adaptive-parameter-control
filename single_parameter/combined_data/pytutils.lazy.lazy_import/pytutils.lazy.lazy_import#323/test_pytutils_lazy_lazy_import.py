# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "5KK,&a\t\tAWK SHu(L\ne"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0, str_0)
    var_0.__repr__()


def test_case_1():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_2():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(none_type_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_3():
    str_0 = "E:0=_"
    module_0.ImportReplacer(str_0, str_0, str_0, str_0)


def test_case_4():
    none_type_0 = None
    module_0.ImportReplacer(none_type_0, none_type_0, none_type_0)


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    str_0 = "E}0=_"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_7():
    str_0 = "E}0=_"
    module_0.lazy_import(str_0, str_0)


def test_case_8():
    var_0 = module_0.disallow_proxying()


def test_case_9():
    str_0 = "s#FW&_KbI5tHmF_hd"
    module_0.ImportReplacer(str_0, str_0, str_0, str_0, str_0)


def test_case_10():
    str_0 = "\n    Lazy/Cached property.\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_11():
    str_0 = "E}0(G"
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    str_0 = "oA=)|?Vb=E\\e#oTeMj3c"
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    str_0 = "\n    Turn a function to a bound method on an instance\n\n    >>> class Foo(object):\n    ...     de __init__(self, x, y):\n    ...         self.x = x\n    ...         self.y = y\n    >>> foo = Foo(2, 3_\n    >>> my_unbound_method =lambda self: self.x * self.y\n    >>> bnd(foo, my_unbound_method, 'multiply').    >>> foo.multiply()  # noinspction PyUnrsClvedReferencGs\n Y  6\n\n    :param object instaxce: some object\n    :para callable func: unbound method (i.e. a function thatftakes `self` argument, that you now\n 5      want to be bound to this.class as a method)\n   :param stras_name: name of the method to create ln t&e 7bject\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_14():
    str_0 = "\n    Turn a function to a bound method on an instance\n\n    >>> class Foo(object):\n    ...     def __init__(self, x, y):\n    ...         self.x = x\n    ...         self.y = y\n    >>> foo = Foo(2, 3)\n    >>> my_unbound_method = lambda self: self.x * self.y\n    >>> bind(foo, my_unbound_method, 'multiply')\n    >>> foo.multiply()  # noinspection PyUnresolvedReferences\n    6\n\n    :param object instance: some object\n    :param callable func: unbound method (i.e. a function that takes `self` argument, that you now\n        want to be bound to this class as a method)\n    :param str as_name: name of the method to create on the object\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.disallow_proxying()
    var_0 = illegal_use_of_scope_replacer_0.__eq__(none_type_0)
    import_processor_0 = module_0.ImportProcessor(none_type_0)
    str_0 = ""
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = "5KK,&a\t\tAWK SH(L\ne"
    module_0.lazy_import(str_0, str_0)


def test_case_17():
    str_0 = "Create a new proxy object, passing in the args to pass to re.compile\n\n        :paam args: The `*args` to pass to re.compile\n        :param kwargs: The `**kwars` to pass to re.compile\n        "
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, str_0)
    module_0.lazy_import(dict_0, import_replacer_0)


def test_case_18():
    str_0 = "Create a new proxy object, passing in the args to paso to re.compile\n\n        :paam args: The `*args` to pass to re.compile\n        :param kwargs: The `**kwars` to pass to re.compile\n        "
    dict_0 = {str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, children=str_0)
    import_replacer_0.__getattribute__(dict_0)


def test_case_19():
    str_0 = "Create a new proxy object, passing in the args to paso to re.compile\n\n        :paam args: The `*args` to pass to re.compile\n        :param kwargs: The `**kwars` to pass to re.compile\n        "
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, str_0)
    var_0 = module_0.ScopeReplacer(dict_0, import_replacer_0, str_0)
    var_0.__str__()
