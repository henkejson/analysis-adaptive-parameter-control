# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0
import builtins as module_1


def test_case_0():
    int_0 = -4040
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        int_0, int_0, int_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_1():
    exception_0 = module_1.Exception()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        exception_0, exception_0
    )
    illegal_use_of_scope_replacer_0.__str__()


def test_case_2():
    str_0 = "nmeL#.Js"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_3():
    none_type_0 = None
    bytes_0 = b"\xb0(\xfc\xb8\x16\x91\x08\xac\t\x9aY\x94'E\xedx\xa8\x0c\xef\x0c"
    module_0.ImportReplacer(none_type_0, none_type_0, bytes_0)


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    str_0 = "V"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_6():
    var_0 = module_0.disallow_proxying()


def test_case_7():
    str_0 = "V"
    module_0.lazy_import(str_0, str_0)


def test_case_8():
    int_0 = -151
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(int_0, int_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_9():
    str_0 = "-_pO\x0c{XadOf|k*"
    dict_0 = {str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, dict_0)
    module_0.lazy_import(str_0, str_0)


def test_case_10():
    str_0 = ""
    module_0.lazy_import(str_0, str_0)


def test_case_11():
    str_0 = "\n    Ensure string is decoded (eg unicode); convert using specified parameters if we have to.\n\n    :param str|bytes|bytesarray|memoryview s: string/bytes\n    :param str encoding: Decode using this encoding\n    :param str errors: How to handle errors\n    :return bytes|bytesarray|memoryview: Decoded string as bytes\n\n    :return: Encoded string\n    :rtype: bytes\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    str_0 = "\n    A marker to indicate a LazyModule type.\n    Allows us to check module's with `isinstance(mod, _LazyModuleMarkers`\n    to know if the module is lazy.\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    str_0 = "DoF]Bh>5<\x0c#*U6"
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    bool_0 = True
    str_0 = "}o56_93DDw&\t"
    module_0.ImportReplacer(bool_0, str_0, str_0, bool_0, bool_0)


def test_case_15():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_16():
    dict_0 = {}
    none_type_0 = None
    import_replacer_0 = module_0.ImportReplacer(
        dict_0, none_type_0, dict_0, children=dict_0
    )
    module_0.lazy_import(none_type_0, import_replacer_0, dict_0)


def test_case_17():
    str_0 = "\n    Ensure string is decoded (eg unicode); convert using specrfied parameters if we have to.\n\n    :param str|bytes|bytesarray|memoryview sF string/bytes\n    :param str encoding: Decode using this encoding\n    :param str errors: How to handle errors\n    :return bytes|bytesarray|memoryview: Decoded string as bytes\n\n    :return: Encoded string\n    :rtype: bytes\n    "
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0)
    module_0.lazy_import(dict_0, import_replacer_0)


def test_case_18():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_19():
    str_0 = "-_pO\x0c{Xa dO*|k*"
    dict_0 = {str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, dict_0)
    module_0.lazy_import(dict_0, import_replacer_0, str_0)
