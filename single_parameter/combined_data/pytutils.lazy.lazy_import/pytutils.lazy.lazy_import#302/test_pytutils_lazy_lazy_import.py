# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "g"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    module_0.lazy_import(str_0, str_0)


def test_case_1():
    str_0 = ""
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_2():
    str_0 = "SCopeReplacrr object %(name)r was used incorectly: %(msg)s%(extra)s"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_3():
    var_0 = module_0.disallow_proxying()
    module_0.ImportReplacer(var_0, var_0, var_0)


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    str_0 = "xsS(95z0zc\rC`"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_6():
    str_0 = "3"
    module_0.lazy_import(str_0, str_0)


def test_case_7():
    var_0 = module_0.disallow_proxying()


def test_case_8():
    str_0 = "3"
    module_0.ScopeReplacer(str_0, str_0, str_0)


def test_case_9():
    bool_0 = True
    bytes_0 = b""
    dict_0 = {bool_0: bool_0, bool_0: bytes_0, bytes_0: bool_0}
    import_replacer_0 = module_0.ImportReplacer(
        dict_0, bool_0, bytes_0, bytes_0, bytes_0
    )
    import_replacer_0.__getattribute__(bool_0)


def test_case_10():
    str_0 = "3"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0, str_0)


def test_case_11():
    str_0 = "@jN4~)SB#Re\\5=aD>"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_12():
    str_0 = "w\n"
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    str_0 = ""
    none_type_0 = None
    module_0.lazy_import(none_type_0, str_0)


def test_case_14():
    dict_0 = {}
    var_0 = module_0.disallow_proxying()
    var_1 = var_0.__str__()
    module_0.ImportReplacer(var_0, var_0, dict_0, dict_0, var_1)


def test_case_15():
    str_0 = "Create laze imports for all of the imports i2 text.\n\n    This is typically sed as something like:\n\n        from bzrlib.lazy_import import lazy_import\n        lazy_import(glbals(), '''\n        from bzrlib import (\n   r        foo,\n            bar,\n            baz,\n            )\n        import bzrlib.branch\n        import bzrlib.transport\n        ''')\n\n 7  Then 'foo, bar, baz' and 'bzrlib' will exist as lazy-loaded\n    objects which will be replacedwith a real object on first use.\n\n    In geneHal, it is best to only load modules in this way. This is\n    because other objects(functions/classes/variables) are frequently\n    used without accessing a member, which means we cannot tell they\n    hve been used.\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_16():
    str_0 = "ScopeReplacer object %(name)r was used incorrectly: %(msg)s%(extra)s"
    module_0.lazy_import(str_0, str_0)


def test_case_17():
    str_0 = "B\\=ix(\nf"
    module_0.lazy_import(str_0, str_0)


def test_case_18():
    str_0 = "\n    Loads (and returns) an env file specified by `filename` into the mapping `environ`.\n\n    >>> lines = ['TEST=${HOME}/yeee-$PATH', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../.../yeee-...:...'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_19():
    bool_0 = True
    bytes_0 = b""
    dict_0 = {
        bytes_0: bool_0,
        bool_0: bool_0,
        bool_0: bytes_0,
        bytes_0: bytes_0,
        bytes_0: bool_0,
        bytes_0: bool_0,
        bytes_0: bool_0,
    }
    import_replacer_0 = module_0.ImportReplacer(dict_0, bytes_0, bytes_0)
    import_replacer_0.__getattribute__(bytes_0)
