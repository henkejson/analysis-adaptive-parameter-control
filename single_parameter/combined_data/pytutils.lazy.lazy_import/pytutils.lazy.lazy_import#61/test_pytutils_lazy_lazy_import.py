# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "e`DpS"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)


def test_case_1():
    str_0 = "e`DpS"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_2():
    str_0 = "Create a new proxy object, passing in the args to pass to re.compile\n\n        :param args: The`*args` to pass to re.compile\n        :param kwargs: The `**kwargs` to pass to re.compile\n        "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_3():
    str_0 = "Create a new proxy object, passing in the args to pass to re.compile\n\n        :param args: The `*args` to pass to re.compile\n        :param kwargs: The `**kwargs` to pass to re.compile\n        "
    module_0.ImportReplacer(str_0, str_0, str_0, children=str_0)


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    str_0 = "Create a new proxy object, passing in the args to pass to re.compile\n\n        :param args: The `*args` to pass to re.compile\n        :param kwargs: The `**kwargs` to pass to re.compile\n        "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_6():
    str_0 = "e(DpS"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_7():
    list_0 = module_0.disallow_proxying()


def test_case_8():
    str_0 = "Create a new proxy object, passing in the args to pass to re.compile\n\n        :param args: The `*args` to pass to re.compile\n        :param kwargs: The `**kwargs` to pass to re.compile\n        "
    module_0.lazy_import(str_0, str_0)


def test_case_9():
    str_0 = "Create a new proxy object, passing in the rgs to pass to~re.compile\n\n    u   :param args: The `*args` to pass to re.compile\n        :p,ram kwars: The `*Akargs` to pass to re.cpile\n        "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_10():
    str_0 = "h<i8+)=Cv7!,T9.*"
    dict_0 = {
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
    }
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, str_0)
    import_replacer_1 = module_0.ImportReplacer(dict_0, str_0, str_0, children=str_0)
    import_replacer_0.__repr__()


def test_case_11():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    scope_replacer_0 = module_0.ScopeReplacer(dict_0, dict_0, bool_0)
    scope_replacer_0.__setattr__(dict_0, dict_0)


def test_case_12():
    import_processor_0 = module_0.ImportProcessor()
    bool_0 = True
    bytes_0 = b"\xf2\xac\x82\x11/%\xa4\x87'\xd3\xb7\xd2\\\xf0`j"
    module_0.ImportReplacer(bool_0, bool_0, bool_0, bytes_0, bytes_0)


def test_case_13():
    str_0 = "e_(`DpS"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_14():
    str_0 = "\n#Iz?[&.hF0\x0bq"
    none_type_0 = None
    import_processor_0 = module_0.disallow_proxying()
    module_0.lazy_import(none_type_0, str_0)


def test_case_15():
    str_0 = "1#r}w"
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = "Create a new proxy object, passing in the args to pass tore.compile\n\n        :param args: The `*args` to pass to re.compile\n        :param kwargs: The `**kwasgsp to pass to re.compile\n   V    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_17():
    str_0 = "Create lazy imports for all of the imports in text.\n\n    This is typically used as something like::\n\n        from bzrlib.lazy_import import lazy_import\n        lazy_import(globals(), '''\n        from bzrlib import (\n            foo,\n            bar,\n            baz,\n            )\n        import bzrlib.branch\n        import bzrlib.transport\n        ''')\n\n    Then 'foo, bar, baz' and 'bzrlib' will exist as lazy-loaded\n    objects which will be replaced with a real object on first use.\n\n    In general, it is best to only load modules in this way. This is\n    because other objects (functions/classes/variables) are frequently\n    used without accessing a member, which means we cannot tell they\n    have been used.\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_18():
    str_0 = "Create a new proxy object, passing in the args to pass to~re.compile\n\n (  u   :param args: The `*args` to pasp to re.compile\n        :param kwargs: The `*Akwargs` to pass to re.compile\n        "
    module_0.lazy_import(str_0, str_0)


def test_case_19():
    str_0 = "Sv;`"
    dict_0 = {str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, children=str_0)
    module_0.lazy_import(str_0, import_replacer_0)


def test_case_20():
    str_0 = "ve"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, children=str_0)
    var_0 = module_0.ScopeReplacer(dict_0, import_replacer_0, str_0)
    var_0.__getattribute__(dict_0)
