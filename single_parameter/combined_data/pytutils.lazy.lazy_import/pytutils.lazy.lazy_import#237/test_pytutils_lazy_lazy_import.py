# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0
import builtins as module_1


def test_case_0():
    bool_0 = False
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(bool_0, bool_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_1():
    dict_0 = {}
    none_type_0 = None
    scope_replacer_0 = module_0.ScopeReplacer(dict_0, none_type_0, none_type_0)
    module_0.lazy_import(scope_replacer_0, scope_replacer_0, dict_0)


def test_case_2():
    bool_0 = False
    module_0.ImportReplacer(bool_0, bool_0, bool_0, bool_0)


def test_case_3():
    none_type_0 = None
    module_0.ImportReplacer(
        none_type_0, none_type_0, none_type_0, none_type_0, none_type_0
    )


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()
    module_0.lazy_import(import_processor_0, import_processor_0, import_processor_0)


def test_case_6():
    var_0 = module_0.disallow_proxying()


def test_case_7():
    int_0 = 1367
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(int_0, int_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    module_1.BaseException(*var_0)


def test_case_8():
    str_0 = "\n    Ensure string is decoded (eg unicode); convert using specified parameters if we have to.\n\n    :param str|bytes|bytesarray|memoryview s: string/bytes\n    :param str encoding: Decode using this encoding\n    :param str errors: How to handle errors\n    :return bytes|bytesarray|memoryview: Decoded string as bytes\n\n    :return: Encoded string\n    :rtype: bytes\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_9():
    int_0 = 1351
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(int_0, int_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(int_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_10():
    int_0 = 1367
    module_0.ImportReplacer(int_0, int_0, int_0, int_0, int_0)


def test_case_11():
    str_0 = "klBdH$1Nz\x0cd{+qT7\n9"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_12():
    str_0 = "\\4LV?!t\n(+ZfP("
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_13():
    str_0 = "#B,Yt\x0c[SK/"
    import_processor_0 = module_0.ImportProcessor()
    import_processor_0.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = "\n    Ensure string is decoded (eg unicode); convert using specified parameters if we have to.\n\n    :param str|bytes|bytesarray|memoryview s: string/bytes\n    :param str encoding: Decode using this encoding\n    :param str errors: How to handle errors\n    :return bytes|bytesarray|memoryview: Decoded string as bytes\n\n    :return: Encoded string\n    :rtype: bytes\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = "rgOJi Q8eOqgi#"
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = "\n    Ensure string is decoded (eg unicode; convert using specified parameters if we have to.\n\n    :para str|bytes|bytsarray|memoryview s: string/bytes\n    :param str encoding: Decode using this encoding\n    :param str errors: How to handle errors\n    :return bytes|bytesarray|memoryview: Decoded string as bytes\n\n    :return: Encoded string\n    :rtype: bytes\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_17():
    str_0 = " Convert one ueue into several. Kind of like a teeing queue.\n\n    >>> in_q = Queue(\n    >>> q1, q2, q3 = multiplex(in_q] count=3)\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_18():
    str_0 = "FB-c+Pc#n6\rWkfCrG"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
    import_replacer_0.__call__(*dict_0)
