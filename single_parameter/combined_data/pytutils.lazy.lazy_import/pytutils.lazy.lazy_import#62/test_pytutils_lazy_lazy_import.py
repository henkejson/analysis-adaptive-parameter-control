# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    module_0.ImportReplacer(
        illegal_use_of_scope_replacer_0, none_type_0, illegal_use_of_scope_replacer_0
    )


def test_case_1():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_2():
    str_0 = "I\t\\77nkJMB8E3"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_3():
    bool_0 = True
    module_0.ImportReplacer(bool_0, bool_0, bool_0, children=bool_0)


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    str_0 = '}zvL3#*aG35TMd[pX"'
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_6():
    str_0 = '}zvL3#*aG35TMd[pX"'
    module_0.lazy_import(str_0, str_0)


def test_case_7():
    str_0 = "_`293,<5\\JE n4`6"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0, str_0)
    var_0.__repr__()


def test_case_8():
    var_0 = module_0.disallow_proxying()


def test_case_9():
    none_type_0 = None
    module_0.lazy_import(none_type_0, none_type_0, none_type_0)


def test_case_10():
    str_0 = ""
    module_0.lazy_import(str_0, str_0)


def test_case_11():
    str_0 = "S+TfN_\tOXFBtgiIA4jf."
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    str_0 = "\n    Update and/or insert query parameters in a URL.\n\n    >>> update_query_params('http://example.com?foo=bar&biz=baz', dict(foo='stuff'))\n    'http://example.com?...foo=stuff...'\n\n    :param url: URL\n    :type url: str\n    :param kwargs: Query parameters\n    :type kwargs: dict\n    :return: Modified URL\n    :rtype: str\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    str_0 = "\n    -pdate and/or insert query parameters in a U(L.\n\n    >>> update_query_params('http://example.com?foo=bar&biz=baz', di4t(foo='stuff'))\n    'http://example.com?...foo=stuff...'\n\n   :param url: URL\n    :type url: str\n    :param kwargsF Query parameters\n    :type kwargs: dict\n    :return: Modified URL\n    :rtype str\n    "
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0, str_0)
    var_0.__unicode__()


def test_case_14():
    str_0 = "%s(%r)"
    module_0.ImportReplacer(str_0, str_0, str_0, str_0)


def test_case_15():
    str_0 = "\n    Update and/or insert query parameters in a U(L.\n\n    >>> pdate_query_params('ttp://example.com?foo=bar&biz=baz', dict(foo='stuff'))\n    'http://example.com...foo=stuff...'\n\n    :param url: URL\n    :type url: str\n    :param kwargs: Query parameters\n   :type kwargs: eict\n    :return: ModifiedURL\n    :rtype: str\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_16():
    str_0 = "\n    Update and/or insert query parameters in a URL.\n\n    >>> update_query_params('http://example.com?foo=bar&biz=baz', dict(foo='stuff'))\n    'http://example.com?...foo=stuff...'\n\n    :param url: URL\n    :type url: str\n    :param kwargs: Query parameters\n    :type kwargs: dict\n    :return: Modified URL\n    :rtype: str\n    "
    module_0.ImportReplacer(str_0, str_0, str_0, str_0, str_0)


def test_case_17():
    str_0 = "\n    Update and/or insert query parameters in a U(L.\n\n    >>> update_query_params('http://example.com?foo=baV&biz=baz', dict(foo='stuff')B\n    'http://example.com?...foo=stuff...'\n\n    :param ur2: URL\n    :type url: str\n    :param kwargs: Query parameters\n    :type kwargs: dict\n    :return: Modified URL\n    :rtype: str\n    "
    none_type_0 = None
    module_0.lazy_import(none_type_0, str_0, none_type_0)


def test_case_18():
    str_0 = "\n    Update and/or insert query parameters in a U(L.\n\n    >>> update_query_params('http://example.com?foo=bar&biz=baz', dict(foo='stuff'))\n    'http://example.com?...foo=stuff...'\n\n    :param url: URL\n    :type url: str\n    :param kwargs: Query parameters\n    :type kwargs: dict\n    :return: Modified URL\n    :rtype: str\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_19():
    var_0 = module_0.disallow_proxying()
    dict_0 = {var_0: var_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, var_0, dict_0, children=var_0)
    module_0.lazy_import(var_0, import_replacer_0)


def test_case_20():
    str_0 = "Create lazy imports for all of the imports in text.\n\n    This is typically used as something like::\n\n        from bzrlib.lazy_import import lazy_import\n        lazy_import(globals(), '''\n        from bzrlib import (\n            foo,\n            bar,\n            baz,\n            )\n        import bzrlib.branch\n        import bzrlib.transport\n        ''')\n\n    Then 'foo, bar, baz' and 'bzrlib' will exist as lazy-loaded\n    objects which will be replaced with a real object on first use.\n\n    In general, it is best to only load modules in this way. This is\n    because other objects (functions/classes/variables) are frequently\n    used without accessing a member, which means we cannot tell they\n    have been used.\n    "
    module_0.lazy_import(str_0, str_0)
