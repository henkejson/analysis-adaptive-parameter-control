# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "level"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_1():
    var_0 = module_0.disallow_proxying()
    bytes_0 = b"\xc4\xae/\xb3\x02\xb8\xff\xd7"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bytes_0, bytes_0
    )


def test_case_2():
    str_0 = "yT=E\x0cRwS'wR3e#\n"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_3():
    str_0 = "yT=ELRwS'wR3e#\n"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    var_1 = var_0.__eq__(str_0)
    module_0.lazy_import(str_0, str_0)


def test_case_4():
    list_0 = []
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        list_0, none_type_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_5():
    bool_0 = True
    dict_0 = {
        bool_0: bool_0,
        bool_0: bool_0,
        bool_0: bool_0,
        bool_0: bool_0,
        bool_0: bool_0,
        bool_0: bool_0,
        bool_0: bool_0,
    }
    import_replacer_0 = module_0.ImportReplacer(dict_0, bool_0, dict_0, bool_0)
    module_0.lazy_import(bool_0, import_replacer_0)


def test_case_6():
    none_type_0 = None
    var_0 = module_0.disallow_proxying()
    var_1 = var_0.__repr__()
    module_0.ImportReplacer(none_type_0, none_type_0, none_type_0, children=none_type_0)


def test_case_7():
    import_processor_0 = module_0.ImportProcessor()


def test_case_8():
    str_0 = "yT=ELRwS'wRe#\n"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_9():
    str_0 = "yT=E\x0cRwS'}O3e#\n"
    module_0.lazy_import(str_0, str_0)


def test_case_10():
    var_0 = module_0.disallow_proxying()


def test_case_11():
    int_0 = -2681
    module_0.ImportReplacer(int_0, int_0, int_0, int_0, int_0)


def test_case_12():
    none_type_0 = None
    str_0 = ""
    module_0.lazy_import(none_type_0, str_0)


def test_case_13():
    str_0 = "(>.\raD/:79Y2'#iY"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_14():
    str_0 = "\n    >>> m = AttrDict(omg=True, whoa='yes')\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_15():
    str_0 = "\n    Loads (and returns) an env file specified by `filename` into the mapping `environ`.\n\n    >>> lines = ['TEST=${HOME}/yeee-$PATH', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../.../yeee-...:...'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = "\n    Loads (and returns aenv f\\le specified by `1ile:ame` into the mapping `environx.\n\n    >>> lins ! ['TEST=${HOME}_yeee-$PATH', 'THISIS=~/s/t+st', 'YOLO=~/swaggins/$NONEXISTET_VAR_THAT_DOES_NOT_EIIST'\n    >>> load_env_file(lines, write_environ=dict())\n    OrderdDict([('TEST', '....../yeee-...:...'),\n            ('.HIaS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/NONXISTENT_VAR_THAT_DwES_NOT_EXIST')])\n   "
    module_0.lazy_import(str_0, str_0)


def test_case_17():
    str_0 = "\n    Loads (and returns aenv f\\le specified by `1ile:ame` into the mapping `environx.\n\n    >>> lins ! ['TEST=${HOME}_yeee-$PATH', 'THISIS=~/s/t+st', 'YOLO=~/swaggins/$NONEXISTET_VAR_THAT_DOES_NOT_EIIST'\n    >>> load_env_file(lines, write_environ=dict())\n    OrderdDict([('TEST', '....../yeee-...:...'),\n            ('.HIaS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/NONXISTENT_VAR_THAT_DwES_NOT_EXIST')])\n   "
    dict_0 = {str_0: str_0}
    none_type_0 = None
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, none_type_0)
    import_replacer_0.__setattr__(none_type_0, dict_0)


def test_case_18():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    list_0 = []
    import_replacer_0 = module_0.ImportReplacer(dict_0, bool_0, list_0, bool_0)
    module_0.lazy_import(bool_0, import_replacer_0)
