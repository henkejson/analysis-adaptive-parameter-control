# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "\rLyqa1qp?\n"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0, str_0)
    var_0.__str__()


def test_case_1():
    str_0 = "T)g33+}aTS.`U_AIFb"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0.__str__()


def test_case_2():
    var_0 = module_0.disallow_proxying()
    dict_0 = {var_0: var_0, var_0: var_0, var_0: var_0, var_0: var_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, var_0, var_0, children=dict_0)
    module_0.lazy_import(dict_0, import_replacer_0, var_0)


def test_case_3():
    import_processor_0 = module_0.ImportProcessor()


def test_case_4():
    str_0 = "split"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_5():
    var_0 = module_0.disallow_proxying()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(var_0, var_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_6():
    bool_0 = True
    module_0.ScopeReplacer(bool_0, bool_0, bool_0)


def test_case_7():
    import_processor_0 = module_0.disallow_proxying()


def test_case_8():
    str_0 = "Y,lulO"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, str_0)
    module_0.lazy_import(str_0, import_replacer_0, str_0)


def test_case_9():
    str_0 = "\\2+(ym+`i843gC\nl.X"
    module_0.lazy_import(str_0, str_0)


def test_case_10():
    str_0 = "\n    A marker to indicate a LazyModule type.\n    Allows us to check module's with `isinstance(mod, _LazyModuleMarker)`\n    to know if the module is lazy.\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_11():
    str_0 = "\rLyqa1qp?\n"
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    str_0 = "split"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    module_0.lazy_import(var_0, str_0, illegal_use_of_scope_replacer_0)


def test_case_13():
    none_type_0 = None
    str_0 = ""
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(none_type_0)
    module_0.lazy_import(none_type_0, str_0)


def test_case_14():
    str_0 = "\n    A marker to indicate a LazyModule#ty~e.\n    Allows us to check module's with `isinstance(mod,s_LazyModueMar/er)`\n    to know if the mo$ule is lazy.\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    float_0 = -1961.0
    module_0.ImportReplacer(float_0, float_0, float_0, float_0, float_0)


def test_case_16():
    str_0 = "T)g33+}aTS.`U_AIFb"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_17():
    str_0 = "\\2+(ym+`i843RC\nl.)"
    module_0.lazy_import(str_0, str_0)


def test_case_18():
    str_0 = "2( ke8<6_\nR\n)"
    dict_0 = {str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0)
    module_0.lazy_import(dict_0, import_replacer_0)
