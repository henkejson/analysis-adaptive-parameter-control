# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    bool_0 = True
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(bool_0, bool_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_1():
    complex_0 = 4475.8 + 3974j
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        complex_0, complex_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(complex_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_2():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, bool_0, bool_0, bool_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_3():
    bool_0 = True
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, bool_0, bool_0)
    import_replacer_0.__getattribute__(dict_0)


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    str_0 = "(tr)"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_6():
    str_0 = "(tr)"
    module_0.lazy_import(str_0, str_0)


def test_case_7():
    import_processor_0 = module_0.disallow_proxying()


def test_case_8():
    str_0 = "(tr)"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0.__repr__()


def test_case_9():
    complex_0 = 4475.8 + 3974j
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        complex_0, complex_0
    )
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    bool_0 = False
    tuple_0 = (complex_0, list_0, bool_0, bool_0)
    none_type_0 = None
    module_0.ImportReplacer(tuple_0, none_type_0, none_type_0, bool_0, complex_0)


def test_case_10():
    str_0 = "\n        :param collections.MutableMapping mapping: Dict-like object to wrap\n        :param bool fancy_repr: If True, show fancy repr, otherwise just show dict's\n        :param bool dictify_repr: If True, cast mapping to a dict on repr\n        "
    module_0.lazy_import(str_0, str_0)


def test_case_11():
    str_0 = "(tr)"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__str__()


def test_case_12():
    str_0 = "o\n-V[Vs?@8#<mU "
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    str_0 = ""
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_14():
    str_0 = "(hr\n"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_15():
    bool_0 = False
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(bool_0, bool_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_16():
    str_0 = "(tP\nr)"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_17():
    str_0 = "(P\nr{"
    module_0.lazy_import(str_0, str_0)


def test_case_18():
    str_0 = "yaOK95@9? "
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
    module_0.lazy_import(dict_0, import_replacer_0)


def test_case_19():
    str_0 = "y< OK5P"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, dict_0)
    module_0.lazy_import(str_0, import_replacer_0)
