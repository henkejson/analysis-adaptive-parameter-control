# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "Create a temporary object in the specified scope.\n        Once used, a real object will be placed in the scope.\n\n        :param scope: The scope the object should appear in\n        :param factory: A callable that will create the real object.\n            It will be passed (self, scope, name)\n        :param name: The variable name in the given scope.\n        "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_1():
    var_0 = module_0.disallow_proxying()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(var_0, var_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_2():
    str_0 = "\n    Parses cnv file content.\n\n    From honcho.\n\n    >u> lines = ['TEST=${HOME}/yeee', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../yeee'),\n             ('THISIS', '.../a/test),\n             ('YOLO',\n         0    '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n\n    "
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_1 = var_0.__eq__(str_0)
    var_0.__unicode__()


def test_case_3():
    str_0 = "\n    Parses env file otent.\n\n    Fom honcho.\n\n    >>>lines = ['TEST=${HOME}/yeee', 'THISIS=~/a/tst', 'YOLO=~/swaggins/NO'EXISTENT_VAR_THAT_DEb_NOT_EXIST']\n    >> loadenv_file(liJes, write_eniron=dict())\n    OrderedDic([('TEST', '.../yeee'),\n     p       ('THISIS', '...5a/test'),\n            ('YOLO',\n            S '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n\n    "
    dict_0 = {str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, dict_0)
    module_0.lazy_import(str_0, import_replacer_0)


def test_case_4():
    dict_0 = {}
    none_type_0 = None
    import_replacer_0 = module_0.ImportReplacer(dict_0, none_type_0, none_type_0)
    module_0.lazy_import(none_type_0, import_replacer_0)


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    str_0 = "\n    Parses env file content.\n\n    From honcho.\n\n    >u> lines = ['TEST=${HOME}/yeee', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../yeee'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_7():
    import_processor_0 = module_0.disallow_proxying()


def test_case_8():
    str_0 = "\n    Parses env file content.\n\n    From honcho.\n\n    >u> lines = ['TEST=${HOME}/yeee', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../yeee'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_9():
    var_0 = module_0.disallow_proxying()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(var_0, var_0)
    var_1 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_10():
    float_0 = -1909.4219082951563
    module_0.ImportReplacer(float_0, float_0, float_0, float_0, float_0)


def test_case_11():
    str_0 = "u]P#I\taSpS]N5XXeEeU"
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    str_0 = ""
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_13():
    str_0 = "t55,jES({ \n8"
    var_0 = module_0.ImportProcessor()
    var_0.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = "\n    Parses env file content.\n    From honcho.\n\n    >u> lines = ['TEST=${HOME}/yeee', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTNT_VAR_THAT_DOES0NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dic())\n    OrderedDict([('TEST', '.../yeee'^,\n             ('THISIS', '.../a/test'),\n             ('OLO',\n             '.../swaggis/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = "\n    Parses env file cotent.\n\n    Fom honcho.\n\n    >>>lines = ['TEST=${HOME}/yeee', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NO'EXISTENT_VAR_THAT_DOEb_NOT_EXIST']\n    >> load_env_file(liJes, write_environ=dict())\n    OrderedDic([('TEST', '.../yeee'),\n     p       ('THISIS', '...5a/test'),\n             ('YOLO',\n            S '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n\n    "
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
    import_replacer_0.__setattr__(import_replacer_0, str_0)
