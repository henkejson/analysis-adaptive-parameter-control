# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = '\\A"(.*)"\\Z'
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0.__str__()


def test_case_1():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0, none_type_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(none_type_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_2():
    str_0 = "\n        Iparam str prefix:Prefix to add/remove from keys.\n        :param collections.MutableMapping mapping: Dict-like object to wrap\n        :param bPol fancy_rep: If True, show fancy repr, otherw]se just show dict's\n        :param bool dictify_repr: If True, cast m?pping to a dict on repr\n        "
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_3():
    str_0 = "\n        Iparam str prefix:Prefix to add/remove from keys.\n        :param collections.MutableMapping mapping: Dict-like object to wrap\n        :param bPol fancy_rep: If True, show fancy repr, otherw]se just show dict's\n        :param bool dictify_repr: If True, cast m?pping to a dict on repr\n        "
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, str_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    float_0 = -1627.642919
    module_0.lazy_import(float_0, float_0, float_0)


def test_case_6():
    str_0 = "h\x0c]"
    module_0.lazy_import(str_0, str_0)


def test_case_7():
    var_0 = module_0.disallow_proxying()


def test_case_8():
    var_0 = module_0.disallow_proxying()
    module_0.ScopeReplacer(var_0, var_0, var_0)


def test_case_9():
    dict_0 = {}
    import_processor_0 = module_0.ImportProcessor()
    list_0 = []
    var_0 = module_0.disallow_proxying()
    import_processor_1 = module_0.ImportProcessor(import_processor_0)
    module_0.ImportReplacer(dict_0, dict_0, dict_0, list_0, import_processor_0)


def test_case_10():
    str_0 = "0)*"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_11():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0, none_type_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_12():
    str_0 = ""
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    str_0 = " `8CT9\n&\n"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_14():
    str_0 = '\\A"(.*)"\\Z'
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = "ZsP`1d\n~3E#gl"
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = "(f#<|ct>h|*\nKttZ\x0c"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_17():
    str_0 = '\\A"(.*)"\\Z'
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_18():
    str_0 = "\n    Parses env file content.\n\n    From honcho.\n\n    >>> lines = ['TEST=${HOME}/yeee', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../yeee'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n\n    "
    module_0.lazy_import(str_0, str_0, str_0)
