# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0
import builtins as module_1


def test_case_0():
    str_0 = "n|\\ +^\x0c"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    module_0.lazy_import(str_0, str_0)


def test_case_1():
    bytes_0 = b"\xe5\xb6\xec!f\x0cDo\xeb\xc3\x0f\xd4\r\x8f\x16\x88\xa1\xb7"
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bytes_0, none_type_0
    )


def test_case_2():
    var_0 = module_0.disallow_proxying()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(var_0, var_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_3():
    bool_0 = False
    module_0.ImportReplacer(bool_0, bool_0, bool_0, bool_0)


def test_case_4():
    dict_0 = {}
    import_processor_0 = module_0.disallow_proxying()
    import_replacer_0 = module_0.ImportReplacer(
        dict_0, import_processor_0, import_processor_0, import_processor_0
    )
    module_0.lazy_import(import_processor_0, import_replacer_0)


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    exception_0 = module_1.Exception()
    var_0 = module_0.ImportProcessor(exception_0)


def test_case_7():
    var_0 = module_0.disallow_proxying()


def test_case_8():
    bool_0 = False
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bool_0, bool_0, bool_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_9():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_0.ScopeReplacer(set_0, set_0, bool_0)


def test_case_10():
    exception_0 = module_1.Exception()
    module_0.lazy_import(exception_0, exception_0)


def test_case_11():
    exception_0 = module_1.Exception()
    set_0 = {exception_0, exception_0, exception_0}
    object_0 = module_1.object()
    module_0.ImportReplacer(set_0, set_0, object_0, set_0, object_0)


def test_case_12():
    str_0 = "h"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_13():
    str_0 = "n|\\ +^\x0c"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_14():
    str_0 = "\n    Parses env file content\n\n    From honcho>\nB   %>>> lines = ['TEST${HOME}/yeee', 'THISIS=~a/tes', 'OO\nO=~/swaggins/$NONEXISTENT_VAR_sHAT_OES_NOT_EXIT']\n    >>> loa_nv_fileSlines, wr`te_environ=dict())\n>   OrderedDic([('TEST', '.../yeee',\n           ('THISIS' '.../a/tesU'),\n  e          ('YOLO'\n             {...swaggYns/$NONEXISTENT_VARTH\x0cT_DOS_NOT_EXIST')])\n\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_15():
    dict_0 = {}
    import_processor_0 = module_0.ImportProcessor()
    import_replacer_0 = module_0.ImportReplacer(
        dict_0, import_processor_0, import_processor_0, import_processor_0
    )
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_16():
    none_type_0 = None
    str_0 = "}y\x0b$hV(9.TQtSe7Kl"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, none_type_0
    )
    module_0.lazy_import(str_0, str_0)


def test_case_17():
    str_0 = "Format each string value of dictionary using values contained within\n    itself, keeping track of dependencies as required.\n\n    Also converts any formatted values according to conversions dict.\n\n    Example:\n\n    >>> from pprint import pprint as pp\n    >>> c = dict(wat='wat{omg}', omg=True)\n    >>> pp(format_dict_recursively(c))\n    {'omg': True, 'wat': 'watTrue'}\n\n    Dealing with missing (unresolvable) keys in format strings:\n\n    >>> from pprint import pprint as pp\n    >>> c = dict(wat='wat{omg}', omg=True, fail='no{whale}')\n    >>> format_dict_recursively(c)\n    Traceback (most recent call last):\n        ...\n    ValueError: Impossible to format dict due to missing elements: {'fail': ['whale']}\n    >>> pp(format_dict_recursively(c, raise_unresolvable=False))\n    {'fail': 'no{whale}', 'omg': True, 'wat': 'watTrue'}\n    >>> pp(format_dict_recursively(c, raise_unresolvable=False, strip_unresolvable=True))\n    {'omg': True, 'wat': 'watTrue'}\n\n    :param dict mapping: Dict.\n    :param bool raise_unresolvable: Upon True, raises ValueError upon an unresolvable key.\n    :param bool strip_unresolvable: Upon True, strips unresolvable keys.\n    :param dict conversions: Mapping of {from: to}.\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_18():
    str_0 = "\n    Parses env file content.\n\n    From honcho.\n\n    >>> lines = ['TEST=${HOME}/yeee', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../yeee'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_19():
    str_0 = ""
    var_0 = module_0.disallow_proxying()
    var_1 = var_0.__str__()
    var_2 = module_0.disallow_proxying()
    module_0.lazy_import(str_0, str_0)


def test_case_20():
    str_0 = "vAo\\_6H>#"
    module_0.lazy_import(str_0, str_0)


def test_case_21():
    str_0 = "\n    Parses env file content.\n\n    From honcho.\n\n    >>> lines = ['TEST=${HOME}/yeee', 'THISIS=~/a/tes', 'YOLO=~/swaggins/$NONEXISTENT_VAR_sHAT_OES_NOT_EXIT']\n    >>> loa_env_file(lines, write_environ=dict())\n    OrderedDic([('TEST', '.../yeee',\n        1   ('THISIS', '.../a/tesU'),\n             ('YOLO',\n              '.../swaggYns/$NONEXISTENT_VARTHAT_DOS_NOT_EXIST')])\n\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_22():
    dict_0 = {}
    str_0 = 'P\x0c5> iEWuip]~40"`'
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0, dict_0)


def test_case_23():
    dict_0 = {}
    str_0 = 'P\x0c5> iEWuip]~40"`'
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, dict_0)
    module_0.lazy_import(dict_0, import_replacer_0)


def test_case_24():
    dict_0 = {}
    str_0 = "vAo\\_6H>%"
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
    none_type_0 = None
    scope_replacer_0 = module_0.ScopeReplacer(dict_0, import_replacer_0, none_type_0)
    scope_replacer_0.__str__()
