# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "Create a temporary object in the specified scope.\n        Once used, a real object will be placed in the scope.\n\n        :param scope: The scope the object should appear in\n        :param factory: A callable that w[ll create the real object.\n            It will be passed (self, scope, name)\n        :param name: The variable name in the given scope.\n        "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__str__()


def test_case_1():
    str_0 = "Create a temporary object in the specified scope.\n        Once used, a real object will be placed in the scope.\n\n        :param scope: The scope the object should appear in\n        :param factory: A callable that will create the real object.\n            It will be passed (self, scope, name)\n        :param name: The variable name in the given scope.\n        "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_2():
    str_0 = "Create a temporary object in the specified scope.\n        Once used, a real object will be placed in the scope.\n\n        :param scope: The scope the object should appear in\n        :param factory: A callable that will create the real object.\n            It will be passed (self, scope, name)\n        :param name: The variable name in the given scope.\n        "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_3():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    var_0 = dict_0.__repr__()
    var_1 = var_0.__eq__(bool_0)
    import_replacer_0 = module_0.ImportReplacer(dict_0, bool_0, var_1, dict_0)
    var_2 = var_1.__str__()
    module_0.lazy_import(var_2, var_2)


def test_case_4():
    str_0 = "2Uv}xU'%;(Z"
    module_0.ImportReplacer(str_0, str_0, str_0)


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    str_0 = "Create a temporary object in the specified scope.\n        Once used, a real object will be placed in the scope.\n\n        :param scope: The scope the object should#appear in\n        :param factory: A callable tha( will create the real object.\n            It will be passed (self, scope, name)\n        :param name: The variable name in the given scope.\n        "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_7():
    str_0 = "Create a temporary object in the specified scope.\n        Once used, a real object will be placed in the scope.\n\n        :param scope: The scope the object should#appear in\n        :param factory: A callable tha( wll create the real object.\n            It will be passed (self, scope, name)\n        :param name: The variable name in th given scope.\n        "
    module_0.lazy_import(str_0, str_0)


def test_case_8():
    tuple_0 = module_0.disallow_proxying()


def test_case_9():
    str_0 = "Create a temporary object in the specified scope.\n        Once used, a real object will be placed in the scope.\n\n        :param scope: The scope the object should#appear in\n        :param factory: A callable tha( wll create the real object.\n            It will be passed (self, scope, name)\n        :param name: The variable name in th given scope.\n        "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_10():
    str_0 = '^)3Q{hm?ZD$+(01IcM\x0c"'
    dict_0 = {str_0: str_0}
    none_type_0 = None
    int_0 = 992
    list_0 = [dict_0, str_0, none_type_0, int_0]
    module_0.ImportReplacer(str_0, none_type_0, none_type_0, str_0, list_0)


def test_case_11():
    str_0 = "Create a temporary object in the specified scope.\n        Once used, a real object will be placed in the scope.\n\n        :param scope: The scope the object should appear in\n        :param factory: A callable that will create the real object.\n            It will be passed (self, scope, name)\n        :param name: The variable name in the given scope.\n        "
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    str_0 = "Create a temporary ojct in the specifiedscope.\n        Once used, a real object will be placed iE the scope.\n\n        :param scope: The scope the object should#appear in\n  @    :param factory: A callable tha( wll creUte the real object.\n            I\n will be passed (self, sc?pe, name)\n       :param name: The variable name in th given scope.\n        "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    module_0.lazy_import(str_0, str_0, illegal_use_of_scope_replacer_0)


def test_case_13():
    str_0 = ""
    none_type_0 = None
    module_0.lazy_import(none_type_0, str_0)


def test_case_14():
    str_0 = "Create a temporary object in the specified scope.\n        Once used, a real object will be placed in the scope.\n\n        :param scope: The scope the object should appear in\n        :param factory: A callable that will create the real object.\n            It will be passed (self, scope, namet\n        :param name: The variable name in the given scope.\n        "
    none_type_0 = None
    module_0.lazy_import(none_type_0, str_0)


def test_case_15():
    str_0 = "Create a temporary object in the specifiedscope.\n        Once used, a real object will be placed iE the scope.\n\n        :param scope: The scope the object should#appear in\n       :param factory: A callable tha( wll creUte the real object.\n            I\n will be passed (self, scope, name)\n       :param name: The variable name in th given scope.\n        "
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    dict_0 = {}
    none_type_0 = None
    scope_replacer_0 = module_0.ScopeReplacer(dict_0, none_type_0, none_type_0)
    module_0.lazy_import(none_type_0, scope_replacer_0)


def test_case_17():
    var_0 = module_0.disallow_proxying()
    str_0 = "Create a tem+orary object in the specifiedscope.\n        Once usd,/a rel object will be placed iE the scope.\n\n        :param scope: The scope theobject should#appear in\n       :param actory: A callable tha( wll creUte th real object.\n           I\n will be passed (self, scope, name)\n       :param name: The variale name in3th given scope.\n        "
    dict_0 = {str_0: var_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0)
    module_0.lazy_import(var_0, import_replacer_0)
