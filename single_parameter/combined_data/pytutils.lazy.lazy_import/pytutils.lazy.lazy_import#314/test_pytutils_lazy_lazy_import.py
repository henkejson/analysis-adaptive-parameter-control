# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    bool_0 = False
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bool_0, bool_0, bool_0
    )


def test_case_1():
    bool_0 = True
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bool_0, bool_0, bool_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_2():
    str_0 = "\n    Update and/or insert quey paramters in a URL.\n\n    >>> update_query_parms('http://example.com?foo=bar&biz=baz', dict(foo='stu\nf'))\n    'http://exampe.com?...foo=stuff...'\n\n   :param url: URL\n    :type url: str\n    :param kwargs: Query parameters\n    :type kwargs: dict\n    :return: Modified URL\n    :rtype: str\n    "
    dict_0 = {str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, str_0)
    module_0.lazy_import(str_0, import_replacer_0, str_0)


def test_case_3():
    bool_0 = False
    module_0.ImportReplacer(bool_0, bool_0, bool_0)


def test_case_4():
    str_0 = '.2zUGV"75Sf'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    str_0 = "\n    Lazy/Cached property.\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_7():
    str_0 = "\n    Lazy/Cached property.\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_8():
    var_0 = module_0.disallow_proxying()


def test_case_9():
    import_processor_0 = module_0.ImportProcessor()
    module_0.lazy_import(import_processor_0, import_processor_0)


def test_case_10():
    int_0 = 432
    module_0.ImportReplacer(int_0, int_0, int_0, int_0, int_0)


def test_case_11():
    bool_0 = True
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bool_0, bool_0, bool_0
    )


def test_case_12():
    str_0 = "_initial"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_13():
    str_0 = "\n   Update and/r insert query parameters in a URL.\n\n    >e> update_query_paam\t('http://\rxample.co#?foo=ba&biz=baz, dct(foo='stu\n'))\n    'http//example.com?...fo=stuff...'k\n    :param url: UL\n    :type url: str\n    :param wargs: Queryparme/ers\n Z  \"type kwars: dict\n    :return: odfied URL\n    :typ+: str\n   "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = "jycR49F(#;o\ni;N"
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = "+T(wjn$\t"
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = "\x0c"
    module_0.lazy_import(str_0, str_0)


def test_case_17():
    str_0 = "\n    Update and/or insert query parameters in a URL.\n\n    >>> update_query_params('http://example.com?foo=bar&biz=baz', dict(foo='stuff'))\n    'http://example.com?...foo=stuff...'\n\n    :param url: URL\n    :type url: str\n    :param kwargs: Query parameters\n    :type kwargs: dict\n    :return: Modified URL\n    :rtype: str\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_18():
    str_0 = "\n    Update and/or insert query parameters in a URL.\n\n    >>> update_query_params('http://example.com?foo=bar&biz=baz', dict(foo='stu\nf'))\n    'http://example.com?...foo=stuff...'\n\n    :param url: URL\n    :type url: str\n    :param kwargs: Query parameters\n    :type kwargs: dict\n    :return: Modified URL\n    :rtype: str\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_19():
    str_0 = "\n    Update and/or insertquey paramters in a URL.\n\n    >>> update_query_parms('http://example.com?foo=bar&biz=baz', dict(foo='stu\nf'))\n    'http://exampe.com?...foo=stuff...'\n\n   :param url: URL\n    :type url: str\n    :param kwargs: Query parameters\n    :type kwargs: dict\n    :return: Modified URL\n    :rtype: str\n    "
    dict_0 = {str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, str_0)
    scope_replacer_0 = module_0.ScopeReplacer(dict_0, import_replacer_0, str_0)
    scope_replacer_0.__getattribute__(import_replacer_0)
