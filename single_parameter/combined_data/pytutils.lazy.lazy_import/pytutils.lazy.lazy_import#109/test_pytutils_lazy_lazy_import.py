# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "impornt $"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__str__()


def test_case_1():
    bool_0 = True
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(bool_0, bool_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_2():
    str_0 = "import $"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0, str_0)
    var_1 = var_0.__eq__(str_0)
    module_0.lazy_import(str_0, str_0)


def test_case_3():
    str_0 = "_)x9~Jh0AxL5!{cS0!"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, dict_0)
    import_replacer_0.__call__()


def test_case_4():
    str_0 = "import $"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
    import_replacer_0.__call__(**dict_0)


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    str_0 = "p"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_7():
    str_0 = "P:Uzf,f"
    module_0.lazy_import(str_0, str_0)


def test_case_8():
    var_0 = module_0.disallow_proxying()


def test_case_9():
    bool_0 = True
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(bool_0, bool_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_10():
    bool_0 = True
    import_processor_0 = module_0.ImportProcessor(bool_0)
    none_type_0 = None
    bytes_0 = b"\xbe^x4p\x19\xd8\xcd!\xa9\x9f)q\xd3\xfc\xf3\xb4\xf1"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, bytes_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(none_type_0)
    module_0.ImportReplacer(
        illegal_use_of_scope_replacer_0, bool_0, bool_0, var_0, bool_0
    )


def test_case_11():
    str_0 = "import $"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_12():
    str_0 = "\n    Efficiently advance an iterator n-steps ahead. If n is none, consume entirely.\n    Consumes at C level (and therefore speed) in cpython.\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_13():
    str_0 = "(D#4\n\rv ?P"
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = "import $"
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    module_0.lazy_import(var_0, str_0)


def test_case_15():
    str_0 = ")cIU#L"
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = "Create lazy imports for all of the imports in text.\n\n    This is typically used as something like::\n\n        from borlib.lazy_import import lazy_import\n        lazy_import(globals(), '''\n        from bzrlib import (\n            foo,\n            bar,\n            baz,\n            )\n        import bzrlib.branch\n        import bzrlib.transport\n        ''')\n\n    Then 'foo, bar, baz' and 'bzrlib' will exist as lazy-loaded\n    objects which will be replaced with a real object on first use.\n\n    In general, it is best to only load modules in this way. This is\n    because other objects (functions/classes/variables) are frequently\n    used without accessinq a member, which means we cannot tell they\n    have been used.\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_17():
    str_0 = "import )"
    var_0 = module_0.disallow_proxying()
    module_0.lazy_import(var_0, str_0)
