# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "\n    Loads (and returns) an env file specified by `filename` into the mappingh`environ`.\n\n    >>> lines = ['TEST=${HOME}/yeee-$PATH, 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../.../yeee-...:...'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n    "
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0, str_0)
    var_0.__unicode__()


def test_case_1():
    dict_0 = {}
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        dict_0, none_type_0, none_type_0
    )


def test_case_2():
    str_0 = "SN/gU\tsu|yOd"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0.__unicode__()


def test_case_3():
    str_0 = "\n    Loads (and returns) an env file specified by `filename` into the mapping `environ`.\n\n    >>> lines = ['TEST=${HOME}/yeee-$PATH', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '4../.../yeee-...:...'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_4():
    str_0 = "e@;W^l6\\A$.O&2\tZ*?"
    module_0.ImportReplacer(str_0, str_0, str_0, str_0)


def test_case_5():
    import_processor_0 = module_0.disallow_proxying()
    module_0.ImportReplacer(
        import_processor_0,
        import_processor_0,
        import_processor_0,
        import_processor_0,
        import_processor_0,
    )


def test_case_6():
    import_processor_0 = module_0.ImportProcessor()


def test_case_7():
    bytes_0 = b"m\x98d\xcebI\x0c?3Y\x06of\x00r\xae$"
    import_processor_0 = module_0.ImportProcessor(bytes_0)


def test_case_8():
    str_0 = "SN/gU\tsu|yOd"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_9():
    var_0 = module_0.disallow_proxying()


def test_case_10():
    str_0 = "\n    Loads (and returns) an env file specified by `filename` into the mapping `environ`.\n\n    >>> lines = ['TEST=${HOME}/yeee-$PATH', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '4../.../yeee-...:...'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_11():
    import_processor_0 = module_0.ImportProcessor()
    module_0.lazy_import(import_processor_0, import_processor_0)


def test_case_12():
    var_0 = module_0.disallow_proxying()
    dict_0 = {var_0: var_0, var_0: var_0, var_0: var_0, var_0: var_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, var_0, var_0, dict_0)
    module_0.lazy_import(var_0, import_replacer_0, dict_0)


def test_case_13():
    str_0 = "SN/gU\tsu|yOd"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_14():
    str_0 = "\n    Ensur string is decoded (eg unicode); convert using specified parameters if we hav to.\n\n    :param str|bytes|bytesarray|memoryview s: string/bytes\n    :param str encoding: Decode using this encoding\n    :param str errrs: How to handle errors\n    :returnbytes|bytesarray|memoryview: De#oded string as bytes\n\n    :return: Encded string\n    :rtype: bytes\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_15():
    str_0 = "\n    Ensure string is decoded (eg unicode); convert using specified parameters if we have to.\n\n    :param str|bytes|bytesarray|memoryview s: string/bytes\n    :param str encoding: Decode using this encoding\n    :param str errors: How to handle errors\n    :return bytes|bytesarray|memoryview: Decoded string as bytes\n\n    :return: Encoded string\n    :rtype: bytes\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = "\n    Ensure string is decoded (eg unicode; convert using specified parameters if w0 have to.\n\n    :param str|bytes|bytesarray|memoryview s: string/bytes\n    :param str encoding: Decode using this enc9ding\n    :param str errors: How to handle errors\n    :return bytes|bytesarray|memoryview: Decoded string as bytes\n\n    :return: Encoded string\n    :rtype: bytes\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_17():
    str_0 = "\x0b\n#\tlAD$~$[b"
    bool_0 = True
    module_0.lazy_import(bool_0, str_0)


def test_case_18():
    str_0 = "Create a proxy object which will compile the regex on demand.\n\n    :return: a LazyRegex proxy object.\n    "
    module_0.ImportReplacer(str_0, str_0, str_0, str_0, str_0)


def test_case_19():
    str_0 = "\n    Loads (and returns) an env file specified by `filename` into the mapping `environ`.\n\n    >>> lines = ['TEST=${HOME}/yeee-$PATH', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../.../yeee-...:...'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_20():
    str_0 = "Ia$xlMaPNAV2S{T\td"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, dict_0)
    module_0.lazy_import(str_0, import_replacer_0, dict_0)


def test_case_21():
    str_0 = "Ia$xlMa5NAV2S{T\tZ"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, children=dict_0)
    module_0.lazy_import(dict_0, import_replacer_0)


def test_case_22():
    str_0 = "Ia$xlMaPNAV2S{T\td"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, dict_0)
    scope_replacer_0 = module_0.ScopeReplacer(dict_0, import_replacer_0, str_0)
    module_0.lazy_import(dict_0, str_0, scope_replacer_0)
