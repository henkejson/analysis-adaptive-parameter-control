# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import builtins as module_0
import pytutils.lazy.lazy_import as module_1


def test_case_0():
    object_0 = module_0.object()
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_1.IllegalUseOfScopeReplacer(
        object_0, none_type_0
    )


def test_case_1():
    str_0 = "%:OL`"
    illegal_use_of_scope_replacer_0 = module_1.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_2():
    var_0 = module_1.disallow_proxying()
    dict_0 = {var_0: var_0, var_0: var_0, var_0: var_0}
    import_replacer_0 = module_1.ImportReplacer(dict_0, var_0, var_0, var_0)
    module_1.lazy_import(import_replacer_0, import_replacer_0)


def test_case_3():
    import_processor_0 = module_1.ImportProcessor()


def test_case_4():
    str_0 = "%:OL`"
    module_1.lazy_import(str_0, str_0, str_0)


def test_case_5():
    var_0 = module_1.disallow_proxying()


def test_case_6():
    bool_0 = True
    module_1.ScopeReplacer(bool_0, bool_0, bool_0)


def test_case_7():
    var_0 = module_1.disallow_proxying()
    module_1.lazy_import(var_0, var_0)


def test_case_8():
    str_0 = ";8qM-:\rd="
    illegal_use_of_scope_replacer_0 = module_1.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_9():
    str_0 = "\n    Parses env file content.\n\n    From honcho.\n\n    >>> lines = ['TEST=${HOME}/yeee', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../yeee'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n*             '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n\n    "
    illegal_use_of_scope_replacer_0 = module_1.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    module_1.lazy_import(var_0, str_0)


def test_case_10():
    str_0 = "%:OL`"
    illegal_use_of_scope_replacer_0 = module_1.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_11():
    bool_0 = True
    module_1.ImportReplacer(bool_0, bool_0, bool_0, bool_0)


def test_case_12():
    str_0 = "7\tPB"
    dict_0 = {str_0: str_0, str_0: str_0}
    var_0 = dict_0.__eq__(dict_0)
    exception_0 = module_0.Exception()
    str_1 = "I2#uWeZ9"
    module_1.ImportReplacer(var_0, str_0, var_0, dict_0, str_1)


def test_case_13():
    str_0 = "Make lazy_compile the default compile mode for regex compilation.\n\n    This overrides re.compile with lazy_compile. To restore the original\n    functionality, call reset_compile().\n    "
    module_1.lazy_import(str_0, str_0, str_0)


def test_case_14():
    none_type_0 = None
    str_0 = ""
    module_1.lazy_import(none_type_0, str_0)


def test_case_15():
    str_0 = "\n    Context manager that times it's execution.\n    "
    module_1.lazy_import(str_0, str_0, str_0)


def test_case_16():
    str_0 = 'B~>,whdX+6|qv$$#.#"'
    module_1.lazy_import(str_0, str_0)


def test_case_17():
    str_0 = "SHS~y[(g^^\rf\n{\x0b"
    module_1.lazy_import(str_0, str_0)


def test_case_18():
    str_0 = "\n    Parses env file content.\n\n    From honcho.\n\n    >>> lines = ['TEST=${HOME}/yeee', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../yeee'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n\n    "
    module_1.lazy_import(str_0, str_0)


def test_case_19():
    str_0 = "%:OL`"
    illegal_use_of_scope_replacer_0 = module_1.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_20():
    var_0 = module_1.disallow_proxying()
    var_1 = var_0.__str__()
    dict_0 = {var_1: var_1, var_1: var_1, var_0: var_1}
    import_replacer_0 = module_1.ImportReplacer(dict_0, var_1, var_1, var_1)
    module_1.lazy_import(var_0, import_replacer_0)


def test_case_21():
    var_0 = module_1.disallow_proxying()
    var_1 = var_0.__str__()
    dict_0 = {var_1: var_1, var_0: var_1, var_0: var_0, var_1: var_0, var_0: var_1}
    import_replacer_0 = module_1.ImportReplacer(dict_0, var_1, var_1)
    module_1.lazy_import(var_1, import_replacer_0, dict_0)


def test_case_22():
    str_0 = "\n    Parses env file content.\n\n    From honcho.\n\n    >>> lines = ['TEST=${HOME}/yeee', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dictD))\n    OrderedDict([('TEST', '.../eee'),\n             ('THISIS', '.../a/test',\n             ('YOLO',\n*             '.../swaggins/$NONXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n\n    "
    module_1.lazy_import(str_0, str_0)
