# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    bool_0 = True
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bool_0, bool_0, bool_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_1():
    float_0 = -60.47184757467827
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        float_0, float_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_2():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    none_type_0 = None
    import_replacer_0 = module_0.ImportReplacer(
        dict_0, none_type_0, none_type_0, bool_0
    )
    module_0.lazy_import(none_type_0, import_replacer_0, bool_0)


def test_case_3():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, bool_0, dict_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    str_0 = '\nc@w@+*vK;"M@;UQA'
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_6():
    str_0 = '\nc@w@+vK;"M@;U|'
    module_0.lazy_import(str_0, str_0)


def test_case_7():
    str_0 = "SF*lcQ(\nUSzC4d|"
    module_0.lazy_import(str_0, str_0)


def test_case_8():
    none_type_0 = None
    module_0.ScopeReplacer(none_type_0, none_type_0, none_type_0)


def test_case_9():
    import_processor_0 = module_0.disallow_proxying()


def test_case_10():
    str_0 = "\n    Turn a function to a bound method on an instance\n\n    >>> class Foo(object):\n    ...     def __init__(self, x, y):\n    ...         self.x = x\n    ...         self.y = y\n    >>> foo = Foo(2, 3)\n    >>> my_unbound_method = lambda self: self.x * self.y\n    >>> bind(foo, my_unbound_method, 'multiply')\n    >>> foo.multiply()  # noinspection PyUnresolvedReferences\n    6\n\n    :param object instance: some object\n    :param callable func: unbound method (i.e. a function that takes `self` argument, that you now\n        want to be bound to this class as a method)\n    :param str as_name: name of the method to create on the object\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_11():
    str_0 = "\n    Turn a function to a bound method on an instance\n\n    >>> class Foo(object):\n    ...     def __init__(self, x, y):\n    ...         self.x = x\n    ...         self.y = y\n    >>> foo = Foo(2, 3)\n    >>> my_unbound_method = lambda self: self.x * self.y\n    >>> bind(foo, my_unbound_method, 'multiply')\n    >>> foo.multiply(  # noinspection PyUnresolvedReferences\n    6\n\n    :param object instance: some object\n    :param callable func: unbound method (i.e. a function that takes `self` argument, that you now\n        want to be bound to this class as a method)\n    :param str as_name: name of the method to create on the object\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    str_0 = " Merge multiple queues together\n\n    >>> q1, q2, q3 = [Queue() for _ in range(3)]\n    >>> out_q = merge(q1, q2, q3)\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_13():
    str_0 = "Impossible to format dict due to missing,elements: %r"
    none_type_0 = None
    str_1 = "r\x0c&L**[T\x0cyC%hIahw3"
    module_0.ImportReplacer(none_type_0, none_type_0, none_type_0, str_1, str_0)


def test_case_14():
    var_0 = module_0.disallow_proxying()
    str_0 = ""
    module_0.lazy_import(var_0, str_0)


def test_case_15():
    str_0 = '\nc@2@q*vK;"M@@UQA'
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_1 = var_0.__eq__(var_0)
    var_0.__repr__()


def test_case_16():
    str_0 = "Smjsv#MdDh"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_17():
    str_0 = "LTuI:W}r&h1\tf[[f\t~"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_1 = var_0.__eq__(str_0)
    var_0.__repr__()


def test_case_18():
    var_0 = module_0.disallow_proxying()
    list_0 = [var_0, var_0, var_0]
    str_0 = "y9p^xRv\tGUhUYR!*W'd"
    bool_0 = True
    import_replacer_0 = module_0.ImportReplacer(list_0, bool_0, str_0, var_0)
    module_0.lazy_import(var_0, import_replacer_0)
