# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = ">N1\t"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    module_0.IllegalUseOfScopeReplacer(var_0, str_0, var_0)


def test_case_1():
    bytes_0 = b"\x197\x13\xcc\xadr\x12\xf7\x83\xcf5\xfb\xee%\xb3`\xfb,"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bytes_0, bytes_0
    )
    illegal_use_of_scope_replacer_0.__str__()


def test_case_2():
    str_0 = "Z-y{5+`z/bKh7\n;J^"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_3():
    dict_0 = {}
    bytes_0 = b"2\xdb\xd5\x1a:\x0e\x94\xbf-\x16\xbf 1F"
    import_replacer_0 = module_0.ImportReplacer(dict_0, bytes_0, dict_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_4():
    none_type_0 = None
    module_0.ImportReplacer(none_type_0, none_type_0, none_type_0)


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    str_0 = ">N1\t"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_7():
    str_0 = "%Xq|"
    module_0.lazy_import(str_0, str_0)


def test_case_8():
    var_0 = module_0.disallow_proxying()


def test_case_9():
    str_0 = "BNz;V\n"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_10():
    dict_0 = {}
    module_0.lazy_import(dict_0, dict_0)


def test_case_11():
    str_0 = "2{~f5>"
    dict_0 = {str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, str_0)
    module_0.lazy_import(dict_0, str_0, dict_0)


def test_case_12():
    str_0 = "9}<a #;7=,"
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    var_0 = module_0.disallow_proxying()
    var_1 = var_0.__str__()
    module_0.ImportReplacer(var_1, var_1, var_1, var_1, var_1)


def test_case_14():
    str_0 = "-~(f.P}Z*#L;xW"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_15():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that exited at import tim.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_17():
    str_0 = ""
    var_0 = module_0.disallow_proxying()
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_18():
    str_0 = "Nz;V\n"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_19():
    str_0 = "Restore the orginal function to re.compile().\n\n    It is safe to call reset_compile( multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original(it doesn't\n    tack nesting level)\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_20():
    str_0 = "Restore the orginal function to re.compile().\n\n    It is safe to call rMset_compile( multiple times, it will always\n    restore re.compile() to the value that existed at import tWme.\"    Though the first call will reset back to the original(it doesn't\n    tack nesting level)\n    "
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, children=dict_0)
    module_0.lazy_import(dict_0, import_replacer_0)


def test_case_21():
    str_0 = "\n    Set arbitrary node on a tree-like mapping structure,yallowing for : notation to signify dimension.\n\n    Arguments:\n        mapping collections.Mapping: Mapping to fetch from\n        key str|unicode: Key to set, allowing for : notation\n        value str|unicode: Value toset `key` to\n        parent bool: If True, return parent node. Defaults to False.\n\n    Returns:\n        objemt: Parent ode.\n\n    "
    dict_0 = {str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, str_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_22():
    str_0 = "T}"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, children=dict_0)
    scope_replacer_0 = module_0.ScopeReplacer(dict_0, import_replacer_0, str_0)
    scope_replacer_0.__unicode__()
