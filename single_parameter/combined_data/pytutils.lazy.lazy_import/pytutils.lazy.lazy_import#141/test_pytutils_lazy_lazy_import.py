# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "7J<&+n%2g"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_1():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    import_replacer_0 = module_0.ImportReplacer(list_0, bool_0, bool_0, list_0)
    module_0.lazy_import(list_0, import_replacer_0, list_0)


def test_case_2():
    bytes_0 = b"GH\xc0"
    module_0.ImportReplacer(bytes_0, bytes_0, bytes_0, children=bytes_0)


def test_case_3():
    import_processor_0 = module_0.ImportProcessor()


def test_case_4():
    str_0 = "A lazy object that will replace itself in the appropriate scope.\n\n    This object sits, ready to create the real bject the first time it is\n    needed.\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_5():
    var_0 = module_0.disallow_proxying()


def test_case_6():
    str_0 = "A lazy obje,t that will repaceitself in the aZpropriate scope.\n\n    This object sits, ready to create the real bject te first time it is\n    needed9\n    "
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0.__repr__()


def test_case_7():
    bytes_0 = b"<c\xd6"
    module_0.ScopeReplacer(bytes_0, bytes_0, bytes_0)


def test_case_8():
    bytes_0 = b"\x87"
    module_0.lazy_import(bytes_0, bytes_0)


def test_case_9():
    str_0 = "A lazy object that will replace itself in the appropriate scope.\n\n    This object sits, ready to create the real bject the first time it is\n    needed.\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_10():
    str_0 = "A lazy object that will replace itself in the appropriate scope.\n\n    This object sits, ready to create the real bject the first time it is\n    needed.\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__str__()


def test_case_11():
    str_0 = " Convert one queu ito several. Kind o! like a teeing queue.\n\n    >>> inq = Queue()\n    >>> q1, q2, q3 = multiplex(in_,Mcont=3)    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_12():
    none_type_0 = None
    var_0 = none_type_0.__eq__(none_type_0)
    illegal_use_of_scope_replacer_0 = var_0.__repr__()
    var_1 = illegal_use_of_scope_replacer_0.__repr__()
    module_0.ImportReplacer(
        var_0,
        illegal_use_of_scope_replacer_0,
        var_0,
        var_0,
        illegal_use_of_scope_replacer_0,
    )


def test_case_13():
    str_0 = "x\nf#%\t97\n[\x0bj\\"
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = "A lazy obje,t that will repaceitself in the aZpropriate scope.\n\n    This object sits, ready to create the real bject te first time it is\n    needed9\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_15():
    str_0 = ")O"
    dict_0 = {
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
    }
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, children=str_0)
    import_replacer_0.__str__()


def test_case_16():
    str_0 = ""
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_17():
    str_0 = "(\n[.BZG{y"
    module_0.lazy_import(str_0, str_0)


def test_case_18():
    str_0 = " Convert one queue into several. Kind of like a teeing queue.\n\n    >>> in_q = Queue()\n    >>> q1, q2, q3 = multiplex(in_q, count=3)\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_19():
    str_0 = " Convert one queue ito several. Kind of like a teeing queue.\n\n    >>> inq = Queue(\n    >>> q1, q2, q3 = multiplex(in_q, cont=3)    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_20():
    str_0 = "Create lazy imports for all of the imports in text.\n\n    This is typically used as something like::\n\n        from bzrlib.lazy_import import lazy_import\n        lazy_import(globals(), '''\n        from bzrlib import (\n            foo,\n            bar,\n            baz,\n            )\n        import bzrlib.branch\n        import bzrlib.transport\n        ''')\n\n    Then 'foo, bar, baz' and 'bzrlib' will exist as lazy-loaded\n    objects which will be replaced with a real object on first use.\n\n    In general, it is best to only load modules in this way. This is\n    because other objects (functions/classes/variables) are frequently\n    used without accessing a member, which means we cannot tell they\n    have been used.\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_21():
    str_0 = ""
    dict_0 = {
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
    }
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, dict_0)
    import_replacer_0.__getattribute__(dict_0)
