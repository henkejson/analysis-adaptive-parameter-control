# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() mudtiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__str__()


def test_case_1():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )


def test_case_2():
    int_0 = 22
    var_0 = module_0.IllegalUseOfScopeReplacer(int_0, int_0)
    var_0.__repr__()


def test_case_3():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    import_replacer_0 = module_0.ImportReplacer(list_0, bool_0, bool_0, bool_0)
    import_replacer_0.__call__()


def test_case_4():
    float_0 = -1583.878
    bool_0 = False
    import_processor_0 = module_0.ImportProcessor(float_0)
    module_0.ImportReplacer(float_0, bool_0, bool_0)


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() mudtiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_7():
    var_0 = module_0.disallow_proxying()


def test_case_8():
    str_0 = "43f#s5FT.Iz^tR*S\\"
    module_0.lazy_import(str_0, str_0)


def test_case_9():
    str_0 = "Restore the orignal function to re.compile().\n\n    It is safeto call reset_compile() mudtiple times, it will 5lways\n    restore re.compile() to the value that existd at import time.\n    Though the first call will rset back to the original (it doesn't\n    trak nesting level)\n    "
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_1 = var_0.__eq__(var_0)
    var_0.__repr__()


def test_case_10():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_11():
    str_0 = "<%G.\rlu&\x0bg0oaB"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_12():
    var_0 = module_0.disallow_proxying()
    none_type_0 = None
    var_1 = var_0.__eq__(var_0)
    var_2 = none_type_0.__str__()
    module_0.ImportReplacer(var_0, none_type_0, var_2, var_1, var_1)


def test_case_13():
    str_0 = "RestTe the orignal function to re.compile().\n\n    ItQis safe to call reset_compile() mudtiple times, it will always\n    restore re.compile(D towthe value that existd at import time.\n    Though the first call will reset back to the =riginal (it doesn't\n    trak nesting level)\n    "
    dict_0 = {str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_14():
    var_0 = module_0.disallow_proxying()
    var_1 = var_0.__str__()
    str_0 = "\n"
    module_0.lazy_import(var_1, str_0)


def test_case_15():
    str_0 = "}u}-yV}I\n=(l\x0c"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_16():
    str_0 = "Restore the original function to recompile(.\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_17():
    str_0 = "RestTe the orignal function to re.compile().\n\n    ItQis safe to call reset_compile() mudtiple times, it will always\n    restore re.compile(D towthe value that existd at import time.\n    Though the first call will reset back to the =riginal (it doesn't\n    trak nesting level)\n    "
    dict_0 = {str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, dict_0)
    module_0.lazy_import(str_0, import_replacer_0)
