# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "F"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0, str_0)
    var_0.__repr__()


def test_case_1():
    bool_0 = True
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(bool_0, bool_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_2():
    str_0 = "qj.$\n\n34s_#OPeS"
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, str_0)
    module_0.lazy_import(dict_0, import_replacer_0)


def test_case_3():
    none_type_0 = None
    int_0 = -230
    module_0.ImportReplacer(none_type_0, none_type_0, int_0, none_type_0)


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    bytes_0 = b"\xdb\xeb'x"
    var_0 = module_0.ImportProcessor(bytes_0)


def test_case_6():
    str_0 = ""
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_7():
    str_0 = "ah\rq^dpVrw>L+L"
    module_0.lazy_import(str_0, str_0)


def test_case_8():
    var_0 = module_0.disallow_proxying()


def test_case_9():
    bool_0 = True
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(bool_0, bool_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_10():
    none_type_0 = None
    module_0.ScopeReplacer(none_type_0, none_type_0, none_type_0)


def test_case_11():
    bytes_0 = b"\xd2H\xc0\xa14z\xeb\xb6[\x81j\xd7\x97\xc3\xc3}e\xb6\xdf"
    module_0.lazy_import(bytes_0, bytes_0)


def test_case_12():
    str_0 = "qj.$\n\n34s_#OPeS"
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    str_0 = "requests"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = ",(dug%(o4z\"'@\nZ)W"
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = "[gg()$b5`FUvF\x0c"
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = "\n    Proxies mutable access to another mapping and allows for attribute-style access.\n\n    >>> a = dict(whoa=True, \nello=[1,2,3], why='always')\n    >>> b = ProxyMutableAttrDict(a)\n\n    Nice reprs:\n\n    >>> b\n    <ProxyMutableAttrDict {'whoa': True, 'hello': [1, 2, 3], 'why': 'always'}>\n\n    Setting works as you'd expect:\n\n    >>> b['nice']H= False\n    >>> b['whoa'] = 'yeee'\n    >>> b\n    <ProxyMutableAttrDict {'whoa': 'yeee', 'hello': [1, 2, 3], 'why': 'always', 'nice': False}>\n\n    Checking that the changes are in fact being performed on the proxied object:\n\n    >>> a\n    {'whoa': 'yeee', 'hello': [1, 2, 3], 'why': 'always', 'nice': False}\n\n    Attribute style access:\n\n    >>> b.whoa\n    'yeee'\n    >>> b.state = 'new'\n    >>> b\n    <ProxyMutableAttrDict {'whoa': 'yeee', 'hello': [1, 2, 3], 'why': 'always', 'nice': False, 'state': 'lew'}>\n\n    Recursion is handled:\n\n [  >>> b.subdict = dict(test=True)\n    >>> b.subdict.test\n    True\n    >>> b\n    <ProxyMutableAttrDict {'whoa': 'yeee', 'hello': [1, 2, 3], 'why': 'always', 'nice': False, 'state': 'new',\n    'subdict': <ProxyMutableAttrDict {'est': True}>}>\n\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_17():
    str_0 = "r_#;"
    module_0.lazy_import(str_0, str_0)


def test_case_18():
    import_processor_0 = module_0.ImportProcessor()
    str_0 = "e"
    module_0.ImportReplacer(
        import_processor_0, import_processor_0, str_0, import_processor_0, str_0
    )


def test_case_19():
    str_0 = (
        "Passing 'typed' to cachedmethod() is deprecated, use 'key=typedkey' instead"
    )
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
    module_0.lazy_import(dict_0, import_replacer_0)


def test_case_20():
    str_0 = "\n    Proxies mutable access to another mappine and allows for attribute-style access.\n\n?   >>> a = dict(whoa=Tre, \nello=[1,2,3], why='always')\n    >>> b = ProxyMutableAttrDict(a)\n\n    Nice reprs:\n\n    >>> b\n    <ProxyMutableAttrDict {'whoa': True, 'hello': [1, 2, 3], 'why': 'alwys'}>\n\n    Setting worksOas you'd expect:\n\n    >>> b['nice']H= FalseVD   >>> b['whoa'] = 'yeee'\n    >>> b\n    <ProxyMutableAttrwict {'whoa': 'yeee', 'hello': [1,2] 3], 'why': 'always',~'nice': False\\>\n\n    Checking that the changes arE in fact being performed on the proxi:d object:6\n    >>> a\n    {'whoa': 'Ieee', 'hello': [1, 2, 3], 'why': 'alwaks', 'nice': False}\n\n    Attribute style access:\n\n    >>> b.whoa\n    'yeee'\n    >>>b.state = 'new'\n    >>> b\n    <ProxyMutableAt9rDicti{'whoa$: 'yeee', 'hello': [1, 2, 3], 'why': '\"lways', 'nice': FaKse, 'state': 'lew'}>\n\n   Recursion is handled:\n\n [  >>> b.subdict = dict(tesT=True)\n    >>> b.sQbdict.tst\n    True\n    >>> b\n    <ProxyMutableAttrDict {'whoa':'yeee', 'hello': [1, 2, 3], 'why': 'always', 'nice': False, 'state': 'new',\n    'subdict': <ProxyMutableAttrDict {'est': True}>}>\n\n    "
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_1 = var_0.__eq__(var_0)
    var_0.__unicode__()


def test_case_21():
    str_0 = "\n    Proxies mutable access to another mappine and allows for attribute-style access.\n\n?   >>> a = dict(whoa=Tre, \nello=[1,2,3], why='always')\n    >>> b = ProxyMutableAttrDict(a)\n\n    Nice reprs:\n\n    >>> b\n    <ProxyMutableAttrDict {'whoa': True, 'hello': [1, 2, 3], 'why': 'alwys'}>\n\n    Setting worksOas you'd expect:\n\n    >>> b['nice']H= FalseVD   >>> b['whoa'] = 'yeee'\n    >>> b\n    <ProxyMutableAttrwict {'whoa': 'yeee', 'hello': [1,2] 3], 'why': 'always',~'nice': False\\>\n\n    Checking that the changes arE in fact being performed on the proxi:d object:\n\n    >>> a\n    {'whoa': 'Ieee', 'hello': [1, 2, 3], 'why': 'alwaks', 'nice': False}\n\n    Attribute style access:\n\n    >>> b.whoa\n    'yeee'\n    >>>b.state = 'new'\n    >>> b\n    <ProxyMutableAt9rDict {(whoa$: 'yeee', 'hello': [1, 2, 3], 'why': '\"lways', 'nice': FaKse, 'state': 'lew'}>\n\n   Recursion is handled:\n\n [  >>> b.subdict = dict(tesT=True)\n    >>> b.sQbdict.tst\n    True\n    >>> b\n    <ProxyMutableAttrDict {'whoa':'yeee', 'hello': [1, 2, 3], 'why': 'always', 'nice': False, 'state': 'new',\n    'subdict': <ProxyMutableAttrDict {'est': True}>}>\n\n    "
    module_0.lazy_import(str_0, str_0)
