# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "v$fXQC"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_1():
    bool_0 = False
    tuple_0 = ()
    module_0.ImportReplacer(bool_0, bool_0, tuple_0, bool_0, tuple_0)


def test_case_2():
    str_0 = "S"
    dict_0 = {str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, children=str_0)
    module_0.lazy_import(import_replacer_0, str_0)


def test_case_3():
    import_processor_0 = module_0.ImportProcessor()


def test_case_4():
    str_0 = "\x0b2%?jk"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_5():
    str_0 = "\x0b2%?jk"
    module_0.lazy_import(str_0, str_0)


def test_case_6():
    var_0 = module_0.disallow_proxying()


def test_case_7():
    str_0 = "!"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_8():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_9():
    str_0 = "!"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    module_0.lazy_import(str_0, str_0)


def test_case_10():
    str_0 = "v$fXQC"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_11():
    str_0 = "%s(^)"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_12():
    bool_0 = True
    str_0 = ""
    module_0.lazy_import(bool_0, str_0)


def test_case_13():
    str_0 = "WoV!\x0c\x0b#^7V!{^`2l{B("
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    bool_0 = True
    str_0 = "&(&'2)/:Nl;4TN^ D"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, bool_0
    )
    module_0.ImportReplacer(str_0, bool_0, str_0, str_0, bool_0)


def test_case_15():
    str_0 = "0*|Zt"
    dict_0 = {str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, dict_0)
    module_0.lazy_import(str_0, import_replacer_0)


def test_case_16():
    str_0 = "'YS`sEscXq!(\n>"
    module_0.lazy_import(str_0, str_0)


def test_case_17():
    str_0 = "Restor\n the origial function to re.com-ile().\n\n    It is safe to call reset_compile( multiple time, it will always\n    restore re.compile() to the value 9hat existed at import time.\n    Thoug the first call will reset back to the }rigina (itmdoesn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_18():
    str_0 = "S"
    dict_0 = {str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, children=str_0)
    module_0.lazy_import(str_0, import_replacer_0)
