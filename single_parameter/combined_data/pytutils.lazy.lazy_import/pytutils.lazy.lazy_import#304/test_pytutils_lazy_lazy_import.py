# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0
import builtins as module_1


def test_case_0():
    import_processor_0 = module_0.ImportProcessor()
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        import_processor_0, none_type_0
    )


def test_case_1():
    str_0 = "9"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    module_0.IllegalUseOfScopeReplacer(str_0, var_0, var_0)


def test_case_2():
    bool_0 = True
    exception_0 = module_1.Exception()
    module_0.ImportReplacer(bool_0, bool_0, exception_0, exception_0)


def test_case_3():
    int_0 = 755
    bytes_0 = b"F%\xa9![\xe2Kqz\x0b\x88H"
    module_0.ImportReplacer(int_0, int_0, int_0, children=bytes_0)


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    str_0 = "W"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_6():
    str_0 = "W"
    module_0.lazy_import(str_0, str_0)


def test_case_7():
    str_0 = "`c(`FH<4\r@/,j2\nbG/"
    module_0.lazy_import(str_0, str_0)


def test_case_8():
    import_processor_0 = module_0.disallow_proxying()


def test_case_9():
    bool_0 = True
    none_type_0 = None
    module_0.ScopeReplacer(bool_0, bool_0, none_type_0)


def test_case_10():
    str_0 = "j{>#"
    module_0.lazy_import(str_0, str_0)


def test_case_11():
    str_0 = ""
    var_0 = module_0.disallow_proxying()
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    str_0 = "W,u"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0, str_0)
    var_0.__repr__()


def test_case_13():
    str_0 = "\n        This is primarily\n        "
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    bool_0 = True
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(bool_0, bool_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(bool_0)
    var_0.__setattr__(var_0, bool_0)


def test_case_15():
    str_0 = "\n    >> m = AttrDict(omg=True, whoaQpyes)\n   "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_16():
    str_0 = "W"
    module_0.ImportReplacer(str_0, str_0, str_0, str_0, str_0)


def test_case_17():
    str_0 = "h`O(<)d8NQ\x0c5\rzD"
    module_0.lazy_import(str_0, str_0)


def test_case_18():
    dict_0 = {}
    none_type_0 = None
    import_replacer_0 = module_0.ImportReplacer(
        dict_0, none_type_0, none_type_0, dict_0
    )
    module_0.lazy_import(dict_0, import_replacer_0)


def test_case_19():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_20():
    dict_0 = {}
    var_0 = dict_0.__str__()
    import_replacer_0 = module_0.ImportReplacer(dict_0, var_0, var_0, dict_0)
    module_0.lazy_import(dict_0, import_replacer_0)


def test_case_21():
    dict_0 = {}
    var_0 = dict_0.__str__()
    import_replacer_0 = module_0.ImportReplacer(dict_0, var_0, var_0)
    module_0.lazy_import(dict_0, import_replacer_0)
