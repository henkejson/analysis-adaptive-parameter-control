# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "v|"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0, str_0)
    var_0.__str__()


def test_case_1():
    var_0 = module_0.disallow_proxying()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        var_0, var_0, var_0
    )


def test_case_2():
    bytes_0 = b"\xab\xd0R3\x99\xa8\x8cJD"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, bytes_0, dict_0, dict_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_3():
    bytes_0 = b"\xab\xd0R3\x99\xa8\x8cJD"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, bytes_0, dict_0)
    module_0.lazy_import(bytes_0, import_replacer_0, bytes_0)


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    str_0 = "\n7_+b6}Jg"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_6():
    none_type_0 = None
    import_processor_0 = module_0.ImportProcessor(none_type_0)
    var_0 = module_0.disallow_proxying()
    complex_0 = -3350.21591 - 406.2062j
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        complex_0, import_processor_0, complex_0
    )
    var_1 = var_0.__repr__()
    str_0 = "8<K\x0cSXH ((z~"
    import_processor_0.lazy_import(var_0, str_0)


def test_case_7():
    str_0 = "\n7_+b6}Jg"
    module_0.lazy_import(str_0, str_0)


def test_case_8():
    var_0 = module_0.disallow_proxying()


def test_case_9():
    str_0 = "\\{(\\w+)\\}"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0.__repr__()


def test_case_10():
    bytes_0 = b"d\xfc\x17\xc6m\x9f\x06\xe4\xf5\x9a4\rtY\xba\xf8\x83"
    dict_0 = {bytes_0: bytes_0}
    scope_replacer_0 = module_0.ScopeReplacer(dict_0, dict_0, bytes_0)
    module_0.lazy_import(dict_0, scope_replacer_0, dict_0)


def test_case_11():
    str_0 = "\\{(\\w+)\\}"
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    str_0 = "Create lazy imports for all of the imports in text.\n\n    This is typically used as something like::\n\n        from bzrlib.lazy_import import lazy_import\n        lazy_import(globals(), '''\n        from bzrlib import (\n            foo,\n            bar,\n            baz,\n            )\n        import bzrlib.branch\n        import bzrlib.transport\n        ''')\n\n    Then 'foo, bar, baz' and 'bzrlib' will exist as lazy-loaded\n    objects which will be replaced with a real object on first use.\n\n    In general, it is best to only load modules in this way. This is\n    because other objects (functions/classes/variables) are frequently\n    used without accessing a member, which means we cannot tell they\n    have been used.\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_13():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0, none_type_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(none_type_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_14():
    var_0 = module_0.disallow_proxying()
    var_1 = var_0.__repr__()
    str_0 = "8<K\x0cSXH ((z~"
    tuple_0 = (var_0, var_1)
    module_0.ImportReplacer(var_1, var_1, var_1, str_0, tuple_0)


def test_case_15():
    str_0 = "\n    A mrker to indicate a LazyModule tye.\n    Allows us to check modrle's with `isinstance(mod, _LazyModuleMarker)`\n    t know if>the module is lazy.\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_16():
    str_0 = "Create lazy imports for all of the imports in text.\n\n    This is typically used as something like::\n\n        from bzrlib.lazy_import import lazy_import\n     \\  lazy_import(globals(), '''\n        from bzrlib import (\n      #     foo,\n            bar,\n            baz,\n            )\n        import_bzrli>.branch\n        import bzrlib.transport\n        ''')\n\n    Then 'foo, bar, baz' and 'bzrlib' will exist as lazy-loaded\n    objects whic, will be replaced with a real object on first use.\n\n    In general, it is best to only load modules in this way. This is\n    because other objects (functions/classes/variables) are frequently\n    used without accessing a member, which means we cannot tell they\n    have been used.\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_17():
    str_0 = " "
    module_0.lazy_import(str_0, str_0)
