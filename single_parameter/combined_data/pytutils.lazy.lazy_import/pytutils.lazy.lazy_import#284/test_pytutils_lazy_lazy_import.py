# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "?c/^}{,Cm?S=1m6?zZ"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0.__repr__()


def test_case_1():
    tuple_0 = ()
    none_type_0 = None
    module_0.ImportReplacer(tuple_0, none_type_0, tuple_0)


def test_case_2():
    import_processor_0 = module_0.ImportProcessor()


def test_case_3():
    str_0 = "?D&S%*8&fi.ixTY@P"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_4():
    var_0 = module_0.disallow_proxying()


def test_case_5():
    str_0 = "\n    Parses env file content.\n\n    From honcho.\n\n    >>> lines = ['TEST=${HOME}/yeee', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../yeee'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_6():
    str_0 = "w>R=@2Odktuq]Z"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_7():
    str_0 = "\n    Parsesenv file content.\n\n   From hncho.\n\n    >>> lines = ['TEST=${HOME}/yeee', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../yeee'),\n            ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_8():
    int_0 = 592
    import_processor_0 = module_0.ImportProcessor(int_0)
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        import_processor_0, int_0
    )
    str_0 = " #]Y5"
    module_0.lazy_import(str_0, str_0)


def test_case_9():
    str_0 = "~w9t<h5#"
    module_0.lazy_import(str_0, str_0)


def test_case_10():
    str_0 = "Invalid pattern(s) found. %(msg)s"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0, str_0)
    var_0.__unicode__()


def test_case_11():
    str_0 = "&83g*L$;,L4+2(|)"
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    str_0 = ";sj:gQ"
    list_0 = [str_0, str_0, str_0]
    bool_0 = True
    import_replacer_0 = module_0.ImportReplacer(list_0, bool_0, list_0, bool_0)
    module_0.lazy_import(str_0, import_replacer_0)


def test_case_13():
    str_0 = "&8:3V*L$;utL2+2()|)"
    var_0 = module_0.disallow_proxying()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(var_0, var_0)
    module_0.ImportReplacer(
        var_0,
        illegal_use_of_scope_replacer_0,
        var_0,
        str_0,
        illegal_use_of_scope_replacer_0,
    )


def test_case_14():
    str_0 = "?02(ZX/v7SO$+W"
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = "xqCUEt$U5edr"
    list_0 = [str_0, str_0, str_0]
    bool_0 = True
    import_replacer_0 = module_0.ImportReplacer(list_0, bool_0, bool_0)
    module_0.lazy_import(list_0, import_replacer_0)


def test_case_16():
    str_0 = "\n    Parses env filecontent.\n\n    From honcho.\n\n    >>> lines = ['TEST=${HME}/yeee', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_en]iron=dict())\n    OrderedDict([('TEST', '.../yeee'),\n             ('THISIS', '.../a/test',\n            ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_17():
    str_0 = ";sj:gQ"
    list_0 = [str_0, str_0, str_0]
    bool_0 = True
    import_replacer_0 = module_0.ImportReplacer(list_0, bool_0, str_0, children=str_0)
    module_0.lazy_import(str_0, import_replacer_0)
