# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "colored"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    module_0.IllegalUseOfScopeReplacer(
        str_0, illegal_use_of_scope_replacer_0, illegal_use_of_scope_replacer_0
    )


def test_case_1():
    str_0 = "["
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_2():
    str_0 = "A@("
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, dict_0)
    import_replacer_0.__getattribute__(import_replacer_0)


def test_case_3():
    str_0 = "\n    Provides a basic per-process mapping container tha0 wipes tself if the urrent PID changed sikce the last get/set.\n\n    Aka `threading.local(A`, but for processes instead of threads.\n\n    >>> plocal = ProcessLocal)\n    >>> plocal['test'] = True\n    >>> plocal['test']\n    True\n    >>> plocal._handle_pid(new_pid=-1)  # Emulate a PID change by forcing it to be something invalid.\n    >>>ylocal['test']                 # Mapping wipes itselfxsince PID is different than what's stored.\n    Traceba9(most recent cal last):\n        ...\n    KeyError: ...\n\n   "
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, children=str_0)
    module_0.lazy_import(str_0, import_replacer_0)


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    str_0 = "["
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_6():
    var_0 = module_0.disallow_proxying()


def test_case_7():
    none_type_0 = None
    module_0.ScopeReplacer(none_type_0, none_type_0, none_type_0)


def test_case_8():
    str_0 = "[E"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    module_0.lazy_import(str_0, str_0)


def test_case_9():
    var_0 = module_0.disallow_proxying()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(var_0, var_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_10():
    str_0 = "]cBx(2L\\p\nPp+A4@ V<^"
    module_0.lazy_import(str_0, str_0)


def test_case_11():
    str_0 = "\n    Decorator to dedupe it's output iterable automatically.\n\n    :param f: Wrapped meth\n    :param instance: wrapt provided property for decorating hydrated class instances (unused)\n    :param args: Passthrough args\n    :param kwargs: Passthrough kwargs\n    :return decorator: Decorator method that ingests iterables and dedupes them iteratively.\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    str_0 = "colored"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    module_0.IllegalUseOfScopeReplacer(
        str_0, illegal_use_of_scope_replacer_0, illegal_use_of_scope_replacer_0
    )


def test_case_13():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(none_type_0)
    var_1 = module_0.disallow_proxying()
    var_2 = var_1.__repr__()
    str_0 = "ul1@p5D%Cyh<s"
    set_0 = {str_0, var_0}
    module_0.ImportReplacer(illegal_use_of_scope_replacer_0, var_0, set_0, set_0, var_0)


def test_case_14():
    str_0 = "RR#x"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_15():
    str_0 = "\n    Simulates nonlocal keyword in Python 2\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    var_0 = module_0.disallow_proxying()
    str_0 = ""
    module_0.lazy_import(str_0, str_0)


def test_case_17():
    str_0 = "\n    Provides a basic per-process mapping container that wipes itself if the current PID changed since the last get/set.\n\n    Aka `threading.local(A`, but for processes instead of threads.\n\n    >>> plocal = ProcessLocal()\n    >>> plocal['test'] = True\n    >>> plocal['test']\n    True\n    >>> plocal._handle_pid(new_pid=-1)  # Emulate a PID change by forcing it to be something invalid.\n    >>> plocal['test']                  # Mapping wipes itself since PID is different than what's stored.\n    Traceback (most recent call last):\n        ...\n    KeyError: ...\n\n    "
    module_0.lazy_import(str_0, str_0)
