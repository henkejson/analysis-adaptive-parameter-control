# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "Q{w&z\t\rPTs9{"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0, str_0)
    var_0.__repr__()


def test_case_1():
    var_0 = module_0.disallow_proxying()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        var_0, var_0, var_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_2():
    bool_0 = False
    list_0 = [bool_0]
    import_replacer_0 = module_0.ImportReplacer(list_0, bool_0, bool_0, list_0)
    import_replacer_0.__setattr__(list_0, bool_0)


def test_case_3():
    str_0 = '6~!)}8A)oy9[{"+5e\tD&'
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0)
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    str_0 = "+"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_6():
    import_processor_0 = module_0.ImportProcessor()
    module_0.ScopeReplacer(import_processor_0, import_processor_0, import_processor_0)


def test_case_7():
    var_0 = module_0.disallow_proxying()


def test_case_8():
    str_0 = "Create a temporary object in the specified scope.\n        Once used, a real object will be placed in the scope.\n\n        :param scope: The scope the object should appear in\n        :param factory: A callable that will create the real object.\n            It will be passed (self, scope, name)\n        :param name: The variable name in the given scope.\n        "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_9():
    str_0 = "Invalid pattern(s) found. %(msg)s"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    module_0.lazy_import(str_0, str_0)


def test_case_10():
    import_processor_0 = module_0.ImportProcessor()
    str_0 = ""
    module_0.lazy_import(str_0, str_0)


def test_case_11():
    str_0 = "W#0L8LQn\x0bO+*=DZ"
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    str_0 = "Create a temporary object in the specified scope.\n        Once used, a rea( object will be laced in the scope.\n\n        :param scope: The scope the objet should appear in\n        :param factory: A callable that will create the real object.\n            It will be passed (self, scope, name)\n        :param name: The variable name in the given scope.\n        "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_13():
    str_0 = 'Pb(@-O:&5Da7RB3X"V8'
    int_0 = -805
    dict_0 = {str_0: str_0, str_0: int_0, int_0: str_0, int_0: int_0}
    none_type_0 = None
    module_0.lazy_import(dict_0, str_0, none_type_0)


def test_case_14():
    float_0 = 28.07
    int_0 = 1057
    none_type_0 = None
    module_0.ImportReplacer(none_type_0, none_type_0, float_0, int_0, int_0)


def test_case_15():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0, none_type_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_16():
    str_0 = ":"
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, dict_0)
    module_0.lazy_import(dict_0, import_replacer_0)


def test_case_17():
    str_0 = '6~!)}8A)oy9[{"+5e\tD&'
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0)
    import_replacer_0.__call__(*dict_0)
