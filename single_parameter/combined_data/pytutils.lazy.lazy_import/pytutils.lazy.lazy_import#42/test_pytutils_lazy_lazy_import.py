# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0
import builtins as module_1


def test_case_0():
    str_0 = "5(I\r\n\n`"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_1():
    bool_0 = False
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bool_0, bool_0, bool_0
    )


def test_case_2():
    bool_0 = False
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(bool_0, bool_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_3():
    str_0 = "@7K2GFvuy:wh"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_4():
    str_0 = "@7KGFvuy:whv"
    module_0.ImportReplacer(str_0, str_0, str_0, str_0)


def test_case_5():
    exception_0 = module_1.Exception()
    complex_0 = -2124 + 2807j
    module_0.ImportReplacer(exception_0, exception_0, complex_0)


def test_case_6():
    import_processor_0 = module_0.ImportProcessor()


def test_case_7():
    str_0 = "@7KGFvuy:whv"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_8():
    str_0 = "@7KGFvuy:whv"
    module_0.lazy_import(str_0, str_0)


def test_case_9():
    var_0 = module_0.disallow_proxying()


def test_case_10():
    bool_0 = False
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(bool_0, bool_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_11():
    str_0 = ".\t)H, J/u=q#63<"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_12():
    bytes_0 = b"\x111#G\xf1@\xa8\xad\xde"
    bool_0 = True
    module_0.ImportReplacer(bytes_0, bool_0, bool_0, bytes_0, bool_0)


def test_case_13():
    str_0 = "5(I\r\n\n`"
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    bytes_0 = b"\x111#G\xf1\xa8\xad\xde"
    str_0 = ""
    module_0.lazy_import(bytes_0, str_0)


def test_case_15():
    str_0 = "9c\nnt/u#"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = "G\nC=NmjIg\ro$I= E\x0bz"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
    module_0.lazy_import(dict_0, import_replacer_0)


def test_case_17():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_18():
    int_0 = -789
    str_0 = "\\jLQgcl"
    dict_0 = {str_0: int_0, str_0: int_0, str_0: int_0, str_0: int_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, int_0)
    import_replacer_0.__getattribute__(dict_0)


def test_case_19():
    str_0 = "P\nC=kmjIg\rV$I= \t\x0bz"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
    list_0 = [import_replacer_0]
    scope_replacer_0 = module_0.ScopeReplacer(dict_0, import_replacer_0, str_0)
    scope_replacer_0.__setattr__(list_0, dict_0)
