# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "This converts a 'from foo import bar' string into an import map.\n\n        :param from_str: The import string to process\n        "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_1():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(none_type_0)


def test_case_2():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0, bool_0]
    import_replacer_0 = module_0.ImportReplacer(list_0, bool_0, list_0)
    import_replacer_0.lazy_import(bool_0, bool_0)


def test_case_3():
    import_processor_0 = module_0.ImportProcessor()


def test_case_4():
    str_0 = "This converts a 'from foo import bar' string into an import map.\n\n        :param from_str: The import string to process\n        "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_5():
    str_0 = "This converts a 'from foo import bar' string into an import map.\n\n        :param from_str: The import string to process\n        "
    module_0.lazy_import(str_0, str_0)


def test_case_6():
    str_0 = ""
    module_0.lazy_import(str_0, str_0)


def test_case_7():
    var_0 = module_0.disallow_proxying()


def test_case_8():
    str_0 = "This converts a 'from foo import bar' string into an import map.\n\n        :param from_str: The import string to process\n        "
    none_type_0 = None
    int_0 = -991
    module_0.ImportReplacer(str_0, int_0, none_type_0, str_0)


def test_case_9():
    str_0 = "This conve.ts a 'from oo impo(t bar' string into an import map.\n\n        :param from_str: The import string to process\n        "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_10():
    str_0 = "5w7(RwYz!#I&K\"p'G;\r{"
    module_0.lazy_import(str_0, str_0)


def test_case_11():
    str_0 = "This conve.ts a 'from oo impo(t bar' string into an import map.\n\n        :param from_str: The import string to process\n        "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_12():
    bytes_0 = b"\x06\xb0\x9a!"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.ImportReplacer(bytes_0, bytes_0, bytes_0, bytes_0, dict_0)


def test_case_13():
    str_0 = "This converts a 'from foo import bar' string into an import map.\n\n        :param from_str: The import string to process\n        "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = "()"
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = "\n    >>> log = get_logger()\n    >>> log.info('test'\n\n    >>> log = get_logger('test2')\n    >>> log.info('test2')\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_16():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    str_0 = "VhC$"
    import_replacer_0 = module_0.ImportReplacer(list_0, bool_0, str_0)
    module_0.lazy_import(bool_0, import_replacer_0)


def test_case_17():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    str_0 = "Q6'"
    import_replacer_0 = module_0.ImportReplacer(list_0, bool_0, str_0)
    scope_replacer_0 = module_0.ScopeReplacer(list_0, import_replacer_0, bool_0)
    scope_replacer_0.__call__()


def test_case_18():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    str_0 = "6',"
    complex_0 = 755.45605 - 3389.35j
    import_replacer_0 = module_0.ImportReplacer(list_0, bool_0, str_0, complex_0)
    import_replacer_0.__getattribute__(bool_0)
