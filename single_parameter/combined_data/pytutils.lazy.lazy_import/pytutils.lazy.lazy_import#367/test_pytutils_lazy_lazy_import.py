# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0
import builtins as module_1


def test_case_0():
    var_0 = module_0.disallow_proxying()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        var_0, var_0, var_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_1():
    str_0 = "Kfbm"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    var_1 = var_0.__eq__(str_0)
    module_0.lazy_import(str_0, str_0)


def test_case_2():
    dict_0 = {}
    str_0 = ")\ty}\tcai[6TUCM(::0"
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, dict_0, dict_0)
    module_0.lazy_import(dict_0, import_replacer_0)


def test_case_3():
    dict_0 = {}
    none_type_0 = None
    import_replacer_0 = module_0.ImportReplacer(dict_0, none_type_0, none_type_0)
    import_replacer_0.__getattribute__(dict_0)


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    str_0 = "ovHrYVG+2=aN_w>:"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_6():
    var_0 = module_0.disallow_proxying()
    str_0 = ""
    module_0.lazy_import(str_0, str_0)


def test_case_7():
    str_0 = "ovHrYVG+2=aN_w>:"
    module_0.lazy_import(str_0, str_0)


def test_case_8():
    var_0 = module_0.disallow_proxying()


def test_case_9():
    dict_0 = {}
    str_0 = "iQ"
    var_0 = module_0.ScopeReplacer(dict_0, str_0, str_0)
    var_0.lazy_import(dict_0, dict_0)


def test_case_10():
    bytes_0 = b"\xb6\xc3V\xd9\xdeZ\xaf\xc6\xd3#\xec\xd3DT\xc5\xb8h\x1a\xab"
    module_0.lazy_import(bytes_0, bytes_0)


def test_case_11():
    str_0 = "\n    Sme extremely simple tree based on defaultdict as `tree`, but implemented as a class for extensibility.\n    Use':' to delve down into dimensions without choosing doors [][[] .\n    Supports specifying a namespace that acts as a keyaprefix.\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    str_0 = "C'.in7)uQ2n\rME=bYT("
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_13():
    str_0 = "yrB#L)<\nA4"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_14():
    str_0 = ")\ty}\tcai[6TUCM(::0"
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    var_0 = module_0.disallow_proxying()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        var_0, var_0, var_0
    )
    var_1 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_16():
    exception_0 = module_1.Exception()
    dict_0 = {exception_0: exception_0}
    var_0 = module_0.disallow_proxying()
    str_0 = " import "
    module_0.ImportReplacer(var_0, var_0, dict_0, exception_0, str_0)


def test_case_17():
    str_0 = "\n    Turn a function to a bound method on an instance\n\n    >>> class Foo(object):\n    ...     def __init__(self, x, y):\n    ...         self.x = x\n    ...         self.y = y\n    >>> foo = Foo(2, 3)\n    >>> my_unbound_method = lambda self: self.x * self.y\n    >>> bind(foo, my_unbound_method, 'multiply')\n    >>> foo.multiply()  # noinspection PyUnresolvedReferences\n    6\n\n   @:param object instance: some object\n    :param callable func: unbound method (i.e. a function that takes `self` argument, that you now\n        want to be bound to this class as a method\n    :param str as_name: name of the method to create on the object\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_18():
    str_0 = "Create lazy imports for all of the imports in text.\n\n    This is typically used as something like::\n\n        from bzrlib.lazy_import import lazy_import\n        lazy_import(globals(), '''\n        from bzrlib import (\n            foo,\n            bar,\n            baz,\n            )\n        import bzrlib.branch\n        import bzrlib.transport\n        ''')\n\n    Then 'foo, bar, baz' and 'bzrlib' will exist as lazy-loaded\n    objects which will be replaced with a real object on first use.\n\n    In general, it is best to only load modules in this way. This is\n    because other objects (functions/classes/variables) are frequently\n    used without accessing a member, which means we cannot tell they\n    have been used.\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_19():
    dict_0 = {}
    str_0 = "iQ"
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)
