# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    bool_0 = True
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bool_0, bool_0, bool_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_1():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_2():
    str_0 = "J"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    module_0.lazy_import(str_0, str_0)


def test_case_3():
    str_0 = "b,l2"
    dict_0 = {str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0)
    import_replacer_0.__getattribute__(str_0)


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    str_0 = "l"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_6():
    str_0 = "l"
    module_0.lazy_import(str_0, str_0)


def test_case_7():
    set_0 = set()
    int_0 = 8
    module_0.ScopeReplacer(set_0, int_0, int_0)


def test_case_8():
    import_processor_0 = module_0.disallow_proxying()


def test_case_9():
    str_0 = "b/l2"
    dict_0 = {str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, str_0)
    import_replacer_0.__getattribute__(import_replacer_0)


def test_case_10():
    bool_0 = True
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(bool_0, bool_0)
    none_type_0 = None
    var_0 = illegal_use_of_scope_replacer_0.__eq__(none_type_0)
    var_1 = var_0.__repr__()
    illegal_use_of_scope_replacer_1 = module_0.IllegalUseOfScopeReplacer(
        var_0, none_type_0
    )
    module_0.ImportReplacer(
        none_type_0, var_1, bool_0, var_0, illegal_use_of_scope_replacer_1
    )


def test_case_11():
    str_0 = ""
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_12():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    var_0 = module_0.disallow_proxying()
    str_0 = " d;%<pU\r\t<(#Wfy[f8Q"
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = 'K]|\\u#,"2;@w=o'
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = ">estore the original function to 5e.compile().\n\n    It is safe to call reset_compile() multiple ties, it will always\n    resto,e re.comple() to the value that exisded at import time.\n    Tou*h the first call will reset back tQ the original (_t`doesn't\n    rack nesting level)\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_16():
    str_0 = "Restore the original function to re.compile(.\n\n    It is safe to call eset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_17():
    str_0 = "b/lD2"
    dict_0 = {str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, str_0)
    scope_replacer_0 = module_0.ScopeReplacer(dict_0, import_replacer_0, str_0)
    module_0.lazy_import(dict_0, scope_replacer_0)
