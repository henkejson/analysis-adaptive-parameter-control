# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import builtins as module_0
import pytutils.lazy.lazy_import as module_1


def test_case_0():
    exception_0 = module_0.Exception()
    illegal_use_of_scope_replacer_0 = module_1.IllegalUseOfScopeReplacer(
        exception_0, exception_0, exception_0
    )


def test_case_1():
    str_0 = "\n    Parses env file content.\n\n    From honcho.\n\n    >>> lines = ['TEST=${HOME}/yeee', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../yeee'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n\n    "
    var_0 = module_1.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0.__repr__()


def test_case_2():
    str_0 = "\n    Parses env file content.\n\n    From honcho.\n\n    >>> lines = ['TEST=${HOME}/yee', 'THISIS=~/a/Jest', 'YOLO=~/swaggins/$NOTEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TESTw, '.../yeee',\n             ('THISS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n\n \x0b  "
    illegal_use_of_scope_replacer_0 = module_1.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    module_1.lazy_import(str_0, str_0)


def test_case_3():
    bytes_0 = b"\xbb]\xe3\xff\x127\xdb\xfd\xd4\x98p;\xe7"
    none_type_0 = None
    module_1.ImportReplacer(none_type_0, bytes_0, none_type_0, bytes_0)


def test_case_4():
    bool_0 = True
    module_1.ImportReplacer(bool_0, bool_0, bool_0)


def test_case_5():
    import_processor_0 = module_1.ImportProcessor()


def test_case_6():
    str_0 = "\n    Parses env file content.\n\n    From honcho.\n%    >>> lines = ['TEST=${HOME}/yeee', 'THrSIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../yeee'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n\n    "
    module_1.lazy_import(str_0, str_0, str_0)


def test_case_7():
    int_0 = 76
    none_type_0 = None
    module_1.ScopeReplacer(int_0, none_type_0, int_0)


def test_case_8():
    var_0 = module_1.disallow_proxying()


def test_case_9():
    str_0 = "nv9445XH"
    module_1.lazy_import(str_0, str_0)


def test_case_10():
    var_0 = module_1.disallow_proxying()
    tuple_0 = (var_0,)
    module_1.ImportReplacer(var_0, var_0, tuple_0, tuple_0, tuple_0)


def test_case_11():
    str_0 = "\n    @arses env fie content.\n\n    From honcho.\n\n    >>> lines = ['TEST=${HOME}/yeee', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_D[ES_NT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../yeee',\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n\n    "
    illegal_use_of_scope_replacer_0 = module_1.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_12():
    str_0 = ""
    module_1.lazy_import(str_0, str_0)


def test_case_13():
    str_0 = "\n    Parses env file content.\n\n    From honcho.\n\n    >>> lines = ['TEST=${HOME}/yeee', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../yeee'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n\n    "
    module_1.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = "r9#vI;?3#;n1FmAo^zN("
    module_1.lazy_import(str_0, str_0, str_0)


def test_case_15():
    str_0 = "Decorator to wrap a class or instance method with a memoizing\n    callable that savesBresults im a cache.\n\n    You can also specify a(cached exception to cache and re-throw as well.\n\n    Originally fro\x0b cachetools, but modified to support caching certain exceptions.\n    "
    bool_0 = True
    import_processor_0 = module_1.ImportProcessor()
    module_1.lazy_import(str_0, str_0, bool_0)


def test_case_16():
    str_0 = "\n    Parses env file content.\n\n    From honcho.\n\n    >>> lines = ['TEST=${HOME}/yeee', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../yeee',\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n\n    "
    module_1.lazy_import(str_0, str_0)


def test_case_17():
    str_0 = "p\x0ca\tY"
    dict_0 = {
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
    }
    scope_replacer_0 = module_1.ScopeReplacer(dict_0, str_0, str_0)
    module_1.lazy_import(dict_0, scope_replacer_0)


def test_case_18():
    dict_0 = {}
    none_type_0 = None
    scope_replacer_0 = module_1.ScopeReplacer(dict_0, none_type_0, none_type_0)
    scope_replacer_1 = module_1.ScopeReplacer(dict_0, scope_replacer_0, none_type_0)
    scope_replacer_1.__call__()


def test_case_19():
    str_0 = "N>U8S"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    none_type_0 = None
    import_replacer_0 = module_1.ImportReplacer(
        dict_0, str_0, dict_0, children=none_type_0
    )
    import_replacer_0.__unicode__()
