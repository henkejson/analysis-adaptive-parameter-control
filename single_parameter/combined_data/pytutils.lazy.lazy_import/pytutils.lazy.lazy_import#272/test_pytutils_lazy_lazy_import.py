# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    int_0 = 657
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(int_0, int_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_1():
    str_0 = 'f1u(RAd\nY"R2p~|)'
    base_exception_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = base_exception_0.__eq__(str_0)
    module_0.lazy_import(str_0, str_0)


def test_case_2():
    str_0 = "\n    Iterate over running totals, ie [a,b,c,d] -> func( func( func(a, b), c), d) with each func result yielded.\n    Func is operator.add by default.\n\n    >>> list(accumulate([1,2,3,4,5]))\n    [1, 3, 6, 10, 15]\n    >>> list(accumulate([1,2,3,4,5], operator.mul))\n    [1, 2, 6, 24, 120]\n\n    :param iterable: Iterable\n    :param func: method (default=operator.add) to call for each pair of (last call result or first item, next item)\n    :return generator: Generator\n    "
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0, str_0)
    var_1 = var_0.__eq__(var_0)
    var_0.__unicode__()


def test_case_3():
    str_0 = "t"
    module_0.ImportReplacer(str_0, str_0, str_0)


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    str_0 = "_fm"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_6():
    var_0 = module_0.disallow_proxying()


def test_case_7():
    str_0 = "NenZ6PJ"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0.__repr__()


def test_case_8():
    str_0 = 'f1u(RAd\nY"R2pm'
    module_0.lazy_import(str_0, str_0)


def test_case_9():
    str_0 = "_fm"
    module_0.lazy_import(str_0, str_0)


def test_case_10():
    bytes_0 = b"(qp}\xac\xbb\x15\x848"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bytes_0, bytes_0, bytes_0
    )


def test_case_11():
    str_0 = "=@+oCw_GgHDNANyvKs"
    str_1 = "#< okf"
    module_0.lazy_import(str_0, str_1)


def test_case_12():
    str_0 = "\n    Simulates nonlocal keyword in Python 2\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_13():
    bool_0 = True
    module_0.ImportReplacer(bool_0, bool_0, bool_0, bool_0)


def test_case_14():
    str_0 = "i!U- ~cG`\rob#.7V"
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = "v(=8)"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0, dict_0)


def test_case_16():
    bytes_0 = b"t\x87\x8e\xa2\x81\xe6$+x\xa4\x97\x91w\xbby"
    str_0 = "t"
    str_1 = "_fmt"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(bytes_0, str_1)
    dict_0 = {str_0: bytes_0, str_0: bytes_0, str_1: bytes_0}
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    tuple_0 = (var_0,)
    module_0.ImportReplacer(bytes_0, tuple_0, dict_0, str_0, str_1)


def test_case_17():
    str_0 = "\n    Iterate over running totals, ie [a,b,c,d] -> func( func( func(a, b), c), d) with each func result yielded.\n    Func is operator.add by default.\n\n    >>> list(accumulate([1,2,3,4,5]))\n    [1, 3, 6, 10, 15]\n    >>> list(accumulate([1,2,3,4,5], operator.mul))\n    [1, 2, 6, 24, 120]\n\n    :param iterable: Iterable\n    :param func: method (default=operator.add) to call for each pair of (last call result or first item, next item)\n    :return generator: Generator\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_18():
    str_0 = 'f1u(RAd\nY"R2pm~|)'
    module_0.lazy_import(str_0, str_0)


def test_case_19():
    str_0 = "UCn'HP\x0b6"
    dict_0 = {str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
    scope_replacer_0 = module_0.ScopeReplacer(
        dict_0, import_replacer_0, import_replacer_0
    )
    scope_replacer_0.__unicode__()


def test_case_20():
    str_0 = "8)"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, dict_0)
    module_0.lazy_import(dict_0, import_replacer_0)
