# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    bytes_0 = b"C\xff\xff\x1e\xe4aa\xca"
    var_0 = module_0.IllegalUseOfScopeReplacer(bytes_0, bytes_0)


def test_case_1():
    bytes_0 = b"C\xff\xff\x1e\xe4aa\xca"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bytes_0, bytes_0
    )
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_2():
    str_0 = "2`o\rE(m)~BYm0:"
    module_0.ImportReplacer(str_0, str_0, str_0, str_0)


def test_case_3():
    dict_0 = {}
    none_type_0 = None
    scope_replacer_0 = module_0.ImportReplacer(dict_0, none_type_0, dict_0)
    module_0.lazy_import(dict_0, scope_replacer_0)


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    bytes_0 = b"u\xadz\x9c]\xb1\x11\xae\x16\xca<\xa0\x85\x05\x96\xac\xf7n"
    module_0.lazy_import(bytes_0, bytes_0, bytes_0)


def test_case_6():
    var_0 = module_0.disallow_proxying()


def test_case_7():
    bytes_0 = b"C\xff\xff\x1e\xe4aa\xca"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bytes_0, bytes_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_8():
    bool_0 = True
    module_0.ScopeReplacer(bool_0, bool_0, bool_0)


def test_case_9():
    str_0 = "\n    Loads (and returns) an env file speciied by `filename`ainto the mapping `environ`.\n\n    >>> lines = ['TEST=${HOME}/yeee-$PATH', 'THISIS=~/a/test', 'YOLO=~swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\nO   i>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../.../yeee-...:...'),\n             ('THISIS', '.../a/test'U,\nN          ('YOLO',\n             '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_10():
    str_0 = "2`o\rE(m)~BYm0:"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_11():
    str_0 = "\n    Loads (and returns) an env file specified by `filename` into the mapping `environ`.\n\n    >>> lines = ['TEST=${HOME}/yeee-$PATH', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../.../yeee-...:...'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    str_0 = "\n    Loads (and returns) an env file speciied by `filename`ainto the mapping `environ`.\n\n    >>> lines = ['TEST=${HOME}/yeee-$PATH', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_envir8n=dict())\n    OrderedDict([('TEST', '.../.../yeee-...:...'),\n             (kTHISIS', '.../a/test'),\n             ('YOLO',\n     |        '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__str__()


def test_case_13():
    str_0 = "\n    Loads (and returns) an env file specified by `filename` into the mapping `eviron`.\n\n    >>> lines = ['TEST=${HOME}/yeee-$PATH', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../.../yeee-...:...'),\n             ('THISIS', '../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_14():
    str_0 = "lO:#YeTCN\x0c#K\x0ck<6p6"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_15():
    str_0 = "\n    Loads (and returns) an env file specified by `filename` into the mapping `environ`.\n\n    >>> lines = ['TEST=${HOME2/yeee-$PATH', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, writeTenviron=dict())\n    OrderedDict([('TEST', '.../.../yeee-...:...'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n          \t   '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')]M\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    bytes_0 = b"\xfa\n\r\xf5\xd1\x1c\x01\xfb\x15<H\xe9"
    module_0.ImportReplacer(bytes_0, bytes_0, bytes_0, bytes_0, bytes_0)


def test_case_17():
    str_0 = "\x0b\x0b"
    var_0 = module_0.disallow_proxying()
    module_0.lazy_import(var_0, str_0)


def test_case_18():
    dict_0 = {}
    none_type_0 = None
    scope_replacer_0 = module_0.ScopeReplacer(dict_0, dict_0, none_type_0)
    module_0.lazy_import(dict_0, scope_replacer_0)


def test_case_19():
    str_0 = "\n    Loads (and returns) an env file speciied by `filename`ainto the mapping `environ`.\n\n    >>> lines = ['TEST=${HOME}/yeee-$PATH', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../.../yeee-...:...'),\n             ('THISIS', '.../a/test'U,\nN           ('YOLO',\n             '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_20():
    str_0 = "U8VkS9AG4z?'?p\""
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, str_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0, dict_0)


def test_case_21():
    str_0 = "U8VkS9AG4z?'?p\""
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0)
    module_0.lazy_import(str_0, import_replacer_0)
