# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "H^"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_1():
    bool_0 = False
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bool_0, none_type_0
    )


def test_case_2():
    none_type_0 = None
    bytes_0 = b"m\xeaL\xbb\x91)\x97Jk"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bytes_0, bytes_0, bytes_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(none_type_0)
    var_1 = var_0.__repr__()


def test_case_3():
    import_processor_0 = module_0.ImportProcessor()
    module_0.ImportReplacer(
        import_processor_0,
        import_processor_0,
        import_processor_0,
        children=import_processor_0,
    )


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    str_0 = '3"'
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_6():
    str_0 = "Mq"
    module_0.lazy_import(str_0, str_0)


def test_case_7():
    var_0 = module_0.disallow_proxying()


def test_case_8():
    str_0 = "\n        This is primarily\n        "
    module_0.lazy_import(str_0, str_0)


def test_case_9():
    str_0 = " Convert one queue into several. Kind of like a teeing queue.\n\n    >>> in_q = Queue()\n    >>> q1, q2, q3 = multiplex(in_q, count=3)\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_10():
    none_type_0 = None
    str_0 = "Upon request import 'module_path' as the name 'module_name'.\n        When imported, prepare children to also be imported.\n\n        :param scope: The scope that objects should be imported into.\n            Typically this is globals()\n        :param name: The variable name. Often this is the same as the\n            module_path. 'bzrlib'\n        :param module_path: A list for the fully specified module path\n            ['bzrlib', 'foo', 'bar']\n        :param member: The member inside the module to import, often this is\n            None, indicating the module is being imported.\n        :param children: Children entries to be imported later.\n            This should be a map of children specifications.\n            ::\n            \n                {'foo':(['bzrlib', 'foo'], None,\n                    {'bar':(['bzrlib', 'foo', 'bar'], None {})})\n                }\n\n        Examples::\n\n            import foo => name='foo' module_path='foo',\n                          member=None, children={}\n            import foo.bar => name='foo' module_path='foo', member=None,\n                              children={'bar':(['foo', 'bar'], None, {}}\n            from foo import bar => name='bar' module_path='foo', member='bar'\n                                   children={}\n            from foo import bar, baz would get translated into 2 import\n            requests. On for 'name=bar' and one for 'name=baz'\n        "
    module_0.lazy_import(none_type_0, str_0)


def test_case_11():
    str_0 = " Convert one queue into several. Kind of like a teeing queue.\n\n    >>> in_q = Queue(\n    >>> q1, q2, q3 =xmultiplex(in_q, count=3)\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    str_0 = " Merge multiple queues together\n\n    >>> q1, q2, q3 = \x0cQTeue() for _ in range(3)]\n    >>> out_q = merge(q1, q2, q3)\n    "
    var_0 = module_0.disallow_proxying()
    var_1 = module_0.ImportProcessor()
    illegal_use_of_scope_replacer_0 = var_0.__eq__(str_0)
    var_2 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    module_0.ImportReplacer(str_0, var_2, str_0, str_0)


def test_case_13():
    str_0 = "j"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_14():
    bytes_0 = b"@\xbe\xce4\xfb6SR\x94  \x9fpi"
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(bytes_0)
    var_1 = var_0.__repr__()
    var_2 = var_1.__eq__(var_1)
    module_0.ImportReplacer(
        illegal_use_of_scope_replacer_0, bytes_0, var_2, var_0, var_1
    )


def test_case_15():
    str_0 = "5V8\\JK!,m#rA]FV"
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    none_type_0 = None
    str_0 = ""
    module_0.lazy_import(none_type_0, str_0)


def test_case_17():
    import_processor_0 = module_0.ImportProcessor()
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(
        dict_0, import_processor_0, import_processor_0
    )
    module_0.lazy_import(import_processor_0, import_replacer_0)


def test_case_18():
    var_0 = module_0.disallow_proxying()
    var_1 = var_0.__repr__()
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, var_1, var_1)
    module_0.lazy_import(import_replacer_0, import_replacer_0)
