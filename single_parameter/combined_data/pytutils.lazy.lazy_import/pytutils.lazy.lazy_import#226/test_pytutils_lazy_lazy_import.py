# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    illegal_use_of_scope_replacer_0.__str__()


def test_case_1():
    str_0 = "Vr[~2ZTXN\r\x0c)F"
    none_type_0 = None
    module_0.ImportReplacer(str_0, none_type_0, none_type_0)


def test_case_2():
    import_processor_0 = module_0.ImportProcessor()


def test_case_3():
    str_0 = "Lazily compiled regex bjects.\n\nThis module definesWa class which cr{ates proxy objects for regex\nompilation.  Ths allows overridng re.compile() to re\rurn lazily compiled\nobjects.\n\nWe do this rather than just provi#ing a new int\rrface so that it will also\nbe us<d by existing Python modules that create regexs.\n"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_4():
    var_0 = module_0.disallow_proxying()


def test_case_5():
    var_0 = module_0.disallow_proxying()
    module_0.ScopeReplacer(var_0, var_0, var_0)


def test_case_6():
    str_0 = "C\x0c3Zds+MlZhF"
    module_0.lazy_import(str_0, str_0)


def test_case_7():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_8():
    str_0 = "Lazily compiled regex bjects.\n\nThi module definesWa class which cr{ates proxy objects for regex\nompjlation.  Ths allows overridng re.compile() to re\rurn lazily compiled\nobjects.\n\nWe do this rther than just provi#ing a new int\rrface so that it will also\nbe us<d by existing Python Modules that create regexs.\n"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__str__()


def test_case_9():
    str_0 = "Lazily compiled regex bjects.\n\nThis module definesWa class which cr{ates proxy objects for regex\ncompilation.  This allows overriding re.compile() to re\rurn lazily compiled\nobjects.\n\nWe do this rather than just provi#ing a new int\rrface so that it will also\nbe us<d by existing Python modules that create regexs.\n"
    module_0.lazy_import(str_0, str_0)


def test_case_10():
    import_processor_0 = module_0.ImportProcessor()
    str_0 = "C\x0cZd+lZhF"
    module_0.ImportReplacer(
        import_processor_0, import_processor_0, str_0, import_processor_0, str_0
    )


def test_case_11():
    str_0 = "rEG[o"
    dict_0 = {str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, dict_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0, dict_0)


def test_case_12():
    bool_0 = False
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bool_0, bool_0, bool_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)


def test_case_13():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call resetcompile()multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though  he nirt call will reset back to the Nriginal (it doesn't\n    track nesting level)\n    "
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    import_processor_0 = module_0.ImportProcessor()
    str_0 = ""
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = "Lazily co(piled regex bjects.\n\nThis module def^n2sWa class which cr{ates proxy objects for regex\nompilation.  Ths allows overridng re.compile() to re\rurn lazily compiled\nobjects.\n\nWe do this rather than just provi#ing a new int\rrface so that it will also\nbe us<d by existing Python modules that create regexs.\n"
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = "Lazily compiled regex bjects.\n\nThi module definesWa class which cr{ates proxy objects for regex\nompjlation.  Ths allows overridng re.compile() to re\rurn lazily compiled\nobjects.\n\nWe do this rther than just provi#ing a n}w int\rrface so that it will also\nbe us<d by existing Python Modules that create regexs.\n"
    dict_0 = {str_0: str_0}
    scope_replacer_0 = module_0.ScopeReplacer(dict_0, dict_0, str_0)
    module_0.lazy_import(str_0, scope_replacer_0)


def test_case_17():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_18():
    str_0 = "rEG[o"
    dict_0 = {str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0)
    module_0.lazy_import(str_0, import_replacer_0)
