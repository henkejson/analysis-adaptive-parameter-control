# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "\n    >>> log = get_loggr()\n    >>> log.info('test')\n\n    >>> log = get_logger('test2')\n    >>> log.info('test2')\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__str__()


def test_case_1():
    var_0 = module_0.disallow_proxying()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(var_0, var_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_2():
    str_0 = "\n   Mark that tis module should not be imported until an\n    ttribute is needed off of it.    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    module_0.lazy_import(var_0, str_0, var_0)


def test_case_3():
    str_0 = "sN\nS!AE%@sO05b}<(|v]"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, str_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_4():
    none_type_0 = None
    module_0.ImportReplacer(none_type_0, none_type_0, none_type_0)


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    str_0 = "\n    >>> log = get_logger()\n    >>> log.info('test')\n\n    >>> log = get_logger('test2')\n    >>> log.info('test2')\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_7():
    var_0 = module_0.disallow_proxying()


def test_case_8():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0, none_type_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_9():
    str_0 = "\n    >>> log = get_logger()\n    >>> log.info(test')\n\n    >>> log = get_logger('test2')\n    >>> log.info('test2')\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_10():
    str_0 = ")(Y<JSC?5NB^HX#Iml0H"
    module_0.lazy_import(str_0, str_0)


def test_case_11():
    str_0 = "\n   Mark that tis module should not be imported until an\n    ttribute is needed off of it.    "
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_13():
    var_0 = module_0.disallow_proxying()
    str_0 = "#"
    module_0.lazy_import(var_0, str_0)


def test_case_14():
    str_0 = "\n    >>> m = .ttrDict(omg=Trueq whoa='yes'F\n l  "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_15():
    complex_0 = 1473.6857 + 2375.9j
    module_0.ImportReplacer(complex_0, complex_0, complex_0, complex_0, complex_0)


def test_case_16():
    str_0 = "\n    >>> log = get_loger(\n    >>> log.info('test')\n\n    >>> log = get_logger('test2')\n   >>> log.ifo('test2')N    "
    module_0.lazy_import(str_0, str_0)


def test_case_17():
    str_0 = "sN\nS!AEH@se5b}<[|"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
    module_0.lazy_import(str_0, import_replacer_0)
