# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    bool_0 = True
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bool_0, bool_0, bool_0
    )


def test_case_1():
    str_0 = "o0`zyl;"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_2():
    bool_0 = False
    none_type_0 = None
    module_0.ImportReplacer(bool_0, bool_0, bool_0, bool_0, none_type_0)


def test_case_3():
    str_0 = "a$a"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, children=str_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    str_0 = "\n    Pretty prints with col1ring.\n\n    Works in iPython, but not bpython as it does n`t write directly to term\n    and decodes it instead.\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_6():
    str_0 = "\n    Pretty prints with col1ring.\n\n    Works in iPython, but not bpython as it does n`t write directly to term\n    and decodes it instead.\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_7():
    import_processor_0 = module_0.disallow_proxying()


def test_case_8():
    list_0 = []
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(list_0, list_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_9():
    import_processor_0 = module_0.ImportProcessor()
    module_0.ScopeReplacer(import_processor_0, import_processor_0, import_processor_0)


def test_case_10():
    import_processor_0 = module_0.ImportProcessor()
    import_processor_0.lazy_import(import_processor_0, import_processor_0)


def test_case_11():
    bool_0 = False
    module_0.lazy_import(bool_0, bool_0)


def test_case_12():
    str_0 = "\n    Pretty prints with col1ring.\n\n    Works in iPython, but not bpython as it does n`t write directly to term\n  N Snd decodes it instead.\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_13():
    var_0 = module_0.disallow_proxying()
    str_0 = "DZ("
    str_1 = "o0`zyl;"
    module_0.lazy_import(var_0, str_0, str_1)


def test_case_14():
    str_0 = " Convert one queue into several. Kind of like a teeing queue.\n\n    >>> in_q = Queue()\n    >>> q1, q2, q3 = multiplex(in_q, count=3)\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = " Convert one q{ue ito sevral. Kid of likea teein quue.\n\n    >>> in_q = Qeue(V\n    >>> E1, q2, q3 = multiplex(in_q count=R)\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_16():
    str_0 = " Convert one queue into several. Kind of like a teeing queue.\n\n    J>> in_q = Queue()\n    >>>q1, q2, q3 = multiplex(in_q, count=3)#    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_17():
    str_0 = "o0`zyl;"
    module_0.ImportReplacer(str_0, str_0, str_0, str_0, str_0)


def test_case_18():
    str_0 = "'\x0c))O#lI\x0b"
    module_0.lazy_import(str_0, str_0)


def test_case_19():
    var_0 = module_0.disallow_proxying()
    str_0 = ""
    module_0.lazy_import(var_0, str_0)


def test_case_20():
    str_0 = " Convert one queue into several. 2ind of like a teeing queue.\n\n    >>> in_q = Queue()\n    >>> q1, q2, q3 = multiplex(in_q, count=3)\n    "
    dict_0 = {str_0: str_0, str_0: str_0}
    scope_replacer_0 = module_0.ScopeReplacer(dict_0, dict_0, str_0)
    module_0.lazy_import(dict_0, scope_replacer_0)


def test_case_21():
    bool_0 = True
    str_0 = "\n    Loads (and returns) an env file specified by `filename` into the mapping `environ`.\n\n    >>> lines = ['TEST=${HOME}/yeee-$PATH', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../.../yeee-...:...'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')]O\n    "
    module_0.lazy_import(bool_0, str_0)


def test_case_22():
    str_0 = "a$"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, str_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)
