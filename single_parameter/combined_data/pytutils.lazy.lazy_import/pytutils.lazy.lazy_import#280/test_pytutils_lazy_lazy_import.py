# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "\\\\(.)u"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    module_0.lazy_import(str_0, str_0)


def test_case_1():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0, none_type_0
    )
    illegal_use_of_scope_replacer_0.__str__()


def test_case_2():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0, none_type_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(none_type_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_3():
    int_0 = 1806
    module_0.ImportReplacer(int_0, int_0, int_0, int_0)


def test_case_4():
    none_type_0 = None
    module_0.ImportReplacer(none_type_0, none_type_0, none_type_0)


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    str_0 = ">"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_7():
    str_0 = "F\tu"
    module_0.lazy_import(str_0, str_0)


def test_case_8():
    str_0 = ">"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_9():
    import_processor_0 = module_0.disallow_proxying()


def test_case_10():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0, none_type_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_11():
    str_0 = "\n    Parses env file content.\n\n    From honcho.\n\n    >>> lines = ['TEST=${HOME}/yeee', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTEN#_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_eviron=dict())\n    OrderedDict([('TEST', '.../yeee'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NON\tXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    none_type_0 = None
    str_0 = "\t"
    module_0.lazy_import(none_type_0, str_0)


def test_case_13():
    str_0 = "\n    Parses env file content.\n\n    From honcho.\n\n    >>> lines = ['TEST=${HOME}/yeee', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../yeee'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins$NONEXISTNT_VAR_THAT_DOES_NOT_EXIST')]\n\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_14():
    str_0 = "This is designed to replace only a portion of an import list.\n\n    It will replace itself with a module, and then make children\n    entries also ImportReplacer objects.\n\n    At present, this only supports 'import foo.bar.baz' syntax.\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = "\\\\(.)"
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = "\n    Parses env file content.\n\n    From honcho.\n\n    >>> lines = ['TEST=${HOME}/yeee', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../yeee'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_17():
    str_0 = "\n    Parses envfihe content.\n\n    From honch.\n\n    >>> lines = ['TEST=${EOME}/yeee', 'THISIS=~/a/test', 'YOLO=~/swaRgins/$NONEXISTEN#_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_eviron=dict())\n    Or&eredDict([('TEST', '.../yeee'/,\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NON\tXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n\n    "
    dict_0 = {str_0: str_0}
    scope_replacer_0 = module_0.ScopeReplacer(dict_0, dict_0, str_0)
    module_0.lazy_import(scope_replacer_0, scope_replacer_0)


def test_case_18():
    str_0 = "\n    Parses envfihe content.\n\n    From honch.\n\n    >>> lines = ['TEST=${EOME}/yeee', 'THISIS=~/a/test', 'YOLO=~/swaRgins/$NONEXISTEN#_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_eviron=dict())\n    Or&eredDict([('TEST', '.../yeee'/,\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NON\tXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n\n    "
    dict_0 = {str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, str_0)
    module_0.lazy_import(str_0, import_replacer_0, str_0)


def test_case_19():
    str_0 = "\n    Parses envfihe content.\n\n    From honch.\n\n    >>> lines = ['TEST=${EOME}/yeee', 'THISIS=~/a/test', 'YOLO=~/swaRgins/$NONEXISTEN#_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_eviron=dict())\n    Or&eredDict([('TEST', '.../yeee'/,\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NON\tXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n\n    "
    dict_0 = {str_0: str_0}
    scope_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, children=str_0)
    module_0.lazy_import(scope_replacer_0, scope_replacer_0)


def test_case_20():
    int_0 = 1806
    str_0 = "F\t"
    module_0.ImportReplacer(int_0, str_0, str_0, str_0, str_0)


def test_case_21():
    str_0 = "\n    Parses env file content.\n\n    From honcho.\n\n    >>> lines = ['TEST=${EOME}/yeee', 'THISIS=~/a/test', 'YOLO=~/swaRgins/$NONEXISTEN#_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_eviron=dict())\n    Or&eredDict([('TEST', '.../yeee'/,\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NON\tXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n\n    "
    module_0.lazy_import(str_0, str_0)
