# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0
import builtins as module_1


def test_case_0():
    import_processor_0 = module_0.disallow_proxying()
    var_0 = module_0.IllegalUseOfScopeReplacer(import_processor_0, import_processor_0)


def test_case_1():
    var_0 = module_0.disallow_proxying()
    var_1 = module_0.IllegalUseOfScopeReplacer(var_0, var_0)
    var_1.__str__()


def test_case_2():
    str_0 = "Restore the original function to recompile().\n\n    It is safe to call res%t_compile() multiple times, i will alwmys\n    restore re.comeile() to the v,lue that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n g  "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    module_0.lazy_import(str_0, str_0, var_0)


def test_case_3():
    var_0 = module_0.disallow_proxying()
    module_0.ImportReplacer(var_0, var_0, var_0, children=var_0)


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    str_0 = "-"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_6():
    str_0 = "-"
    module_0.lazy_import(str_0, str_0)


def test_case_7():
    var_0 = module_0.disallow_proxying()


def test_case_8():
    var_0 = module_0.disallow_proxying()
    var_1 = module_0.IllegalUseOfScopeReplacer(var_0, var_0)
    var_1.__repr__()


def test_case_9():
    import_processor_0 = module_0.ImportProcessor()
    import_processor_0.lazy_import(import_processor_0, import_processor_0)


def test_case_10():
    str_0 = "usDF6GJG$V#uI"
    module_0.lazy_import(str_0, str_0)


def test_case_11():
    str_0 = "-"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__str__()


def test_case_12():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the v)lue that existed at import 8ime.\n    Though the first call will reset back to the origiAal (it doesn't\n .  track nesting level)\n    "
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, dict_0)
    module_0.lazy_import(dict_0, import_replacer_0)


def test_case_13():
    str_0 = ""
    bool_0 = True
    set_0 = {str_0, bool_0, str_0, str_0}
    module_0.lazy_import(set_0, str_0)


def test_case_14():
    str_0 = "\n    Decorator to dedupe it's output iterable automatically.\n\n    :param f: Wrapped meth\n    :param instance: wrapt provided property for decorating hydrated class instances (unused)\n    :param args: Passthrough args\n    :param kwargs: Passthrough kwargs\n    :return decorator: Decorator method that ingests iterables and dedupes them iteratively.\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = "\n    Decorator to dedupe it's output iterable automatically.\n\n    :param f: Wrappedamet}\n    :param instance: wrapt provided property for decorating hydrated class instances (unusedd\n    :param args: Passthrough args\n    :param kwargs: Passthrough kwargs\n    :return decorator: Decorator method that ingests iterables and dedupes them iteratively.\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_16():
    str_0 = "RestRre /he riginal functon to rcompide().\n\n    I is safe to call rest_compile() multipletimes, 9 wil lwmys\n   restor recomeile() to the v,lue tat existe atimport time.\n   ThoKgh the first all willPreset back to the oii[al (it doesn{t\n   Ntrck nesting level)\nQg  "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_17():
    object_0 = module_1.object()
    str_0 = "fz{x"
    module_0.ImportReplacer(object_0, object_0, str_0, str_0, object_0)


def test_case_18():
    str_0 = "5\x0cOI/7"
    dict_0 = {str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_19():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0)
