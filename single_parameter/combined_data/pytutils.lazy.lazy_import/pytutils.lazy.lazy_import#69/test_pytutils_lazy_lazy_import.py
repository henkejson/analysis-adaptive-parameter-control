# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "^_Nl}_'#+rx"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0, str_0)
    var_0.__str__()


def test_case_1():
    complex_0 = -68.756 - 92.371631j
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        complex_0, complex_0
    )
    import_processor_0 = module_0.ImportProcessor(illegal_use_of_scope_replacer_0)


def test_case_2():
    bytes_0 = b"\xb3\xd8\xc3\x86xr9\xa2\xf1\x82"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bytes_0, bytes_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_3():
    bytes_0 = b"\xb3\xd8\xc3\x86xr9\xa2\xf1\x82"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bytes_0, bytes_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(bytes_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_4():
    dict_0 = {}
    str_0 = "r"
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, str_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_5():
    int_0 = 765
    module_0.ImportReplacer(int_0, int_0, int_0, children=int_0)


def test_case_6():
    import_processor_0 = module_0.ImportProcessor()


def test_case_7():
    str_0 = "Lazily compiled regex objects.\n\nThis module defines a class which creates proxy objects for regex\ncompilation.  This allows overriding re.compile() to return lazily compiled\nobjects.\n\nWe do this rather than just providing a new interface so that it will also\nbe used by existing Python modules that create regexs.\n"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_8():
    str_0 = "NtSp(*6c"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_9():
    var_0 = module_0.disallow_proxying()


def test_case_10():
    bool_0 = True
    module_0.ScopeReplacer(bool_0, bool_0, bool_0)


def test_case_11():
    str_0 = "^_Nl}_'#+rx"
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    str_0 = "\n    Parses env file content.\n\n    From honcho.\n\n    >>> lines =_['TEST=${HOME}/yeee', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>>-load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../yeee'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    str_0 = '{"u\n*wlHH6+U|@,m=8b'
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
    module_0.lazy_import(str_0, import_replacer_0, str_0)


def test_case_14():
    str_0 = "QV6dn"
    str_1 = "X%ekZ(H1"
    module_0.ImportReplacer(str_0, str_1, str_0, str_0, str_1)


def test_case_15():
    str_0 = ""
    str_1 = "X%ekZ(H1"
    module_0.lazy_import(str_1, str_0)


def test_case_16():
    bytes_0 = b"\xb3\x86xr9\xf1\x82"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bytes_0, bytes_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_17():
    str_0 = "\n    Parses env file conte.\n\n    From honcho.\n\n    >>> lines = ['TEST=${HOME}/yeee', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOE_NOT_EXTST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../yeee',\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VA_THAT_DOES_NOT_EXIST')])\n\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_18():
    str_0 = "\n    Parses env file conte.\n\n    Fom honcho.\n\n    >>>VlRne = ['TEST=${HOME}/yiee', 'THISIS=~/a/test', 'YOLO=~/swaCgins/$NONEXISTENT_VAR_THAT_DOE_NOT_EXTST']\n    >>> load_env_file(lines, write_enviro=dict())\n    OrderedDict([('TEST', '...8yeee',\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n            '.../swaggins/$NONEXISTENT_VA_THAT_DOES_NOT_EXIST')])\n\n    "
    str_1 = "*fY"
    dict_0 = {str_1: str_1}
    none_type_0 = None
    import_replacer_0 = module_0.ImportReplacer(dict_0, none_type_0, str_0)
    scope_replacer_0 = module_0.ScopeReplacer(dict_0, import_replacer_0, str_0)
    module_0.lazy_import(scope_replacer_0, import_replacer_0, scope_replacer_0)
