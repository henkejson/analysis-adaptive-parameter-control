# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "Make lazy_compile the default compile mode for regex compilation.\n\n    This overrides re.compile with lazy_compile. To restore the original\n    functionality, call reset_compile().\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__str__()


def test_case_1():
    tuple_0 = ()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        tuple_0, tuple_0, tuple_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_2():
    bool_0 = True
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(bool_0, bool_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(bool_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_3():
    var_0 = module_0.disallow_proxying()
    module_0.ImportReplacer(var_0, var_0, var_0)


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    str_0 = "n_S\\f`3]I\n`7vq#U3"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_6():
    var_0 = module_0.disallow_proxying()


def test_case_7():
    none_type_0 = None
    module_0.ScopeReplacer(none_type_0, none_type_0, none_type_0)


def test_case_8():
    str_0 = "n_S}\\f`3]I\n`7vq#U3"
    module_0.lazy_import(str_0, str_0)


def test_case_9():
    dict_0 = {}
    var_0 = module_0.disallow_proxying()
    import_replacer_0 = module_0.ImportReplacer(dict_0, var_0, dict_0, dict_0)
    module_0.lazy_import(dict_0, import_replacer_0)


def test_case_10():
    bool_0 = True
    module_0.ImportReplacer(bool_0, bool_0, bool_0, bool_0, bool_0)


def test_case_11():
    str_0 = "n_S\\f`3]I'`7vq#U3"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_12():
    str_0 = "\n    Loads (and returns) an env file specified by `filename` into the mapping `environ`.\n\n    >>> lines = ['TEST=${HOME}/yeee-$PATH', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../.../yeee-...:...'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    dict_0 = {}
    tuple_0 = ()
    import_replacer_0 = module_0.ImportReplacer(dict_0, tuple_0, dict_0)
    import_replacer_0.__call__()


def test_case_14():
    str_0 = "n_SPfZ]I\n#_vq#U3"
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = ""
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = "[E\x0bQnW(?sXU5%%(L%\nTW"
    module_0.lazy_import(str_0, str_0)


def test_case_17():
    dict_0 = {}
    tuple_0 = ()
    import_replacer_0 = module_0.ImportReplacer(dict_0, tuple_0, tuple_0, tuple_0)
    module_0.lazy_import(tuple_0, import_replacer_0)


def test_case_18():
    str_0 = "\n    Tur a function t a bound mfthod on an instance\n\n    >>> class Foo(object):\n    ...    def __iYit__(sef, x, y):d    ...         sel].x = x\n    ...         self.y = y\n    >>> foo = Foo(2, 3\n    >>> my_un<ound_metho7 = l_mbda self:aself.x * self.y\n a  >>/ bind(fo`, my_unOound_method, 'multiply')\n    >>> oo.multiply()  # ~oinspection PyUnresolvedReferens\n    6\n\n    :param object instance: some objec\n    :param callable func: unbound method (i.e. a func$ion that takes `self` argument, that you now\n       want to be bound to this class as a method)\n    :param str as_n me: name of the method to create Cn the object\n    "
    dict_0 = {str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0)
    module_0.lazy_import(dict_0, import_replacer_0, str_0)


def test_case_19():
    str_0 = "\n    Turn a function t a bound method on an instance\n\n    >>> class Foo(object):\n    ...    def __init__(sef, x, y):\n    ...         sel].x = x\n    ...         self.y = y\n    >>> foo = Foo(2, 3\n    >>> my_un<ound_method = lambda self: self.x * self.y\n a  >>> bind(fo`, my_unOound_method, 'multiply')\n    >>> oo.multiply()  # ~oinspection PyUnresolvedReferencs\n    6\n\n    :param object instance: some object\n    :param callable func: unbound method (i.e. a func$ion that takes `self` argument, that you now\n       want to be bound to this class as a method)\n    :param str as_n me: name of the method to create on the object\n    "
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    none_type_0 = None
    var_0 = module_0.disallow_proxying()
    none_type_1 = None
    scope_replacer_0 = module_0.ScopeReplacer(dict_0, dict_0, none_type_1)
    scope_replacer_1 = module_0.ScopeReplacer(
        dict_0, scope_replacer_0, scope_replacer_0
    )
    scope_replacer_1.__setattr__(none_type_0, str_0)
