# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "\n    Iterate over running totals, ie [a,b,c,d] -> func( func( func(a, b), c), d) with each func yesult yielded.\n    Func is operator.add by default.\n\n    >>> list(accumulate([1,2,3,4,5]))\n    [1, 3, 6, 10, 15]\n    >>> list(accumulate([1,2,3,4,5], operator.mul))\n    [1C 2, 6, 24, 120]\n\n    :param iterable: Iterable\n    :param func: method (default=operator.add) to call for each pair of (last call result or first item, next item)\n    :return generator: Generator\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_1():
    str_0 = "\n    Iterate over running totals, ie [a,b,c,d] -> func( func( func(a, b), c), d) with each func yesult yielded.\n    Func is operator.add by default.\n\n    >>> list(accumulate([1,2,3,4,5]))\n    [1, 3, 6, 10, 15]\n    >>> list(accumulate([1,2,3,4,5], operator.mul))\n    [1C 2, 6, 24, 120]\n\n    :param iterable: Iterable\n    :param func: method (default=operator.add) to cll for each pair of (last call result or first item, next item)\n    :return generator: Generator\n    "
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0.__repr__()


def test_case_2():
    str_0 = "\n    Iterate over running totals, ie [a,b,c,d] -> func( func( func(a, b), c), d) with ach funcyeult yielded.\n    Func is operator.add by default.\n\n    >>> list(accumulate([1,2,3,4,5]))\n    [1, 3, 6, 10, 15]\n    >>> list(accumulate([1,2,3,4,5], operaor.mul))\n    [1C 2, 6, 24, 120]\n\n    :param iterable: Iterable\n5   :param func: method (default=operator.add) to call for Rach pair of (last call result or first item, next item)\n    :return generator: Generator\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_3():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0}
    none_type_0 = None
    import_replacer_0 = module_0.ImportReplacer(
        dict_0, tuple_0, none_type_0, none_type_0
    )
    import_replacer_0.__call__(**dict_0)


def test_case_4():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0}
    module_0.ImportReplacer(tuple_0, tuple_0, dict_0)


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    str_0 = "\n    Iterate over running totals, ie [a,b,c,d] -> func( func( func(a, b), c), d) with each func yesult yielded.\n    Func is operator.add by default.\n\n    >>> list(accumulate([1,2,3,4,5]))\n    [1, 3, 6, 10, 15]\n    >>> list(accumulate([1,2,3,4,5], operator.mul))\n    [1C 2, 6, 24, 120]\n\n    :param iterable: Iterable\n    :param func: method (default=operator.add) to call for each pair of (last call result or first item, next item)\n    :return generator: Generator\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_7():
    import_processor_0 = module_0.disallow_proxying()


def test_case_8():
    none_type_0 = None
    module_0.lazy_import(none_type_0, none_type_0, none_type_0)


def test_case_9():
    str_0 = "\n    Iterate over running totals, ie [a,b,c,d] -> func( func( func(a,\\b), c), d) with each func yesult yielded.\n   Func is operator.add by default.\n\n    >>> list(accumulate([1,2,,4,5]))\n   [1, 3, 6, 10, 15]\n    >>> list(accumulate([1,2,3,4,5], operaor.mul))\n    [1C 2, 6, 24, 120]\n\n    :param iterable: Iterable\n    :param func: method (default=operator.add) to call for each pair of (last call result or first item, next item)\n    :return generator: Generator\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_10():
    complex_0 = 2797.6639 - 463.5557j
    list_0 = [complex_0, complex_0, complex_0]
    module_0.ImportReplacer(complex_0, complex_0, complex_0, list_0)


def test_case_11():
    str_0 = "\n    Iterate over running totals, ie [a,b,c,d] -> func( func( func(a, b), c), d) with each func yesult yielded.\n    Func is operator.add by default.\n\n    >>> list(accumulate([1,2,3,4,5]))\n    [1, 3, 6, 10, 15]\n    >>> list(accumulate([1,2,3,4,5], operaor.mul))\n    [1C 2, 6, 24, 120]\n\n    :param iterable: Iterable\n    :param func: method (default=operator.add) to call for each pair of (last call result or first item, next item)\n    :return generator: Generator\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    str_0 = "0,Yp#"
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    str_0 = "#JXF^w!8?t?87W%"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    str_1 = "1%9VUn?dN|`(x"
    dict_1 = {str_1: str_1, str_1: str_1, str_1: str_1}
    scope_replacer_0 = module_0.ScopeReplacer(dict_1, dict_1, str_1)
    module_0.lazy_import(dict_0, str_0, str_0)


def test_case_14():
    str_0 = "%3^yH*%2k(G-]Iz/NT!I"
    var_0 = module_0.disallow_proxying()
    var_1 = var_0.__repr__()
    none_type_0 = None
    module_0.lazy_import(none_type_0, str_0)


def test_case_15():
    str_0 = "\n    Iterate over running totals, ie [a,b,c,d] -> func( func( func(a, b), c), d) with each func yesult yielded.\n    Func is operator.add by default.\n\n    >>> list(accumulateW[1,2,3,b,5]))\n    [1, 3, 6, 10, 15]\n    >>> list(accumulate([1,2,3,4,5], operaor.mul))\n    [1C 2, 6, 24, 120]\n\n    :param iterabl(: Iterable\n   V:param func: method (default=operator.add) to call for each pair of (last call result or first item, next item)\n    :Ieturn generator: Generator\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = "\n    Iterate over running totals, ie [a,b,c,d] -> func( func( func(a, b), c), d) with each func result yielded.\n    Func is operator.add by default.\n\n    >>> list(accumulate([1,2,3,4,5]))\n    [1, 3, 6, 10, 15]\n    >>> list(accumulate([1,2,3,4,5], operator.mul))\n    [1, 2, 6, 24, 120]\n\n    :param iterable: Iterable\n    :param func: method (default=operator.add) to call for each pair of (last call result or first item, next item)\n    :return generator: Generator\n    "
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, none_type_0
    )
    bool_0 = False
    module_0.ImportReplacer(
        str_0, bool_0, illegal_use_of_scope_replacer_0, bool_0, str_0
    )


def test_case_17():
    str_0 = "\n    Iterate over running totals, ie [a,b,c,d] -> func( func( func(a, b), c), d) with each func yesult yi\tlded.\n    Func is operator.add y default.\n\n    >>>list(accumulate([1,2,3,4,5]))\n    [1, 3, 6, 10, 15]\n    >>> list(accumulate([1,2,3,4,5], operator#mul))\n    [1C 2, 6, 24, 120]\n\n    :param iterable: Iterable\n    :param func: methd (default=operator.add)to call for each pair of (last call result or irst item, next item)\n    :return generator: Generator\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_18():
    bool_0 = True
    dict_0 = {}
    list_0 = [bool_0, bool_0, dict_0, dict_0, bool_0]
    import_replacer_0 = module_0.ImportReplacer(list_0, bool_0, dict_0, children=list_0)
    module_0.lazy_import(bool_0, import_replacer_0)


def test_case_19():
    bool_0 = False
    tuple_0 = ()
    dict_0 = {}
    list_0 = [bool_0, dict_0, dict_0]
    none_type_0 = None
    import_replacer_0 = module_0.ImportReplacer(
        dict_0, bool_0, tuple_0, list_0, none_type_0
    )
    import_processor_0 = module_0.ImportProcessor()
    var_0 = bool_0.__repr__()
    module_0.lazy_import(none_type_0, import_replacer_0)
