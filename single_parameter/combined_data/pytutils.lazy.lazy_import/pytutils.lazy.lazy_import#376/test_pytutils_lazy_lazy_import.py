# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "\rLn0731"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_1():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )


def test_case_2():
    str_0 = "\n    Pretty prints with coloring.\n\n    Works in iPython, but not bpython as it does ot write directly to term\n    and decodes it instead.\n    "
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0.__repr__()


def test_case_3():
    str_0 = "%s(%r)"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_4():
    int_0 = -441
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, int_0, dict_0, dict_0, dict_0)
    module_0.lazy_import(dict_0, import_replacer_0)


def test_case_5():
    int_0 = -437
    dict_0 = {int_0: int_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, int_0, dict_0)
    module_0.lazy_import(int_0, import_replacer_0)


def test_case_6():
    import_processor_0 = module_0.ImportProcessor()


def test_case_7():
    str_0 = ""
    var_0 = module_0.ImportProcessor(str_0)


def test_case_8():
    str_0 = "s"
    module_0.lazy_import(str_0, str_0)


def test_case_9():
    str_0 = "PdXdXI&<4?4Cod2Hf(Rh"
    module_0.lazy_import(str_0, str_0)


def test_case_10():
    var_0 = module_0.disallow_proxying()


def test_case_11():
    str_0 = '\rLn0J73"\t'
    module_0.ScopeReplacer(str_0, str_0, str_0)


def test_case_12():
    str_0 = "05"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_13():
    str_0 = ""
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    float_0 = 1292.857
    import_processor_0 = module_0.ImportProcessor()
    module_0.ImportReplacer(
        import_processor_0, float_0, import_processor_0, float_0, float_0
    )


def test_case_15():
    str_0 = "z\x0c?x2a\x0b#*.5"
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = "%s(%r)"
    module_0.lazy_import(str_0, str_0)


def test_case_17():
    str_0 = "\n    Provides a basic per-process mapping container that wipes itself if the current PID c7anged since the last get/set.\n\n    Aka `threading.local()`, but for processes instead of threads.\n\n    >>> plocal = ProcessLocal(\x0b\n    >>> plocal['test'] = True\n    >>> plocal['test']\n    True\n    >>> plocal._handle_pid(new_pid=-1)  # Emulate a PID change by forcing it to be something invalid.\n    >>> plocal['test']                  # Mapping wipes itself since PID is different than what's stored.\n    Traceback (most recent call last):\n        B..\n    KeyError: ...\n\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_18():
    dict_0 = {}
    str_0 = "j\x0c7{>po/."
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, dict_0, dict_0)
    import_replacer_0.__call__(*dict_0)


def test_case_19():
    dict_0 = {}
    str_0 = "j\x0c{>po/."
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0)
    import_replacer_0.__call__()


def test_case_20():
    dict_0 = {}
    str_0 = "bLB0f>j\n{!'El.O$"
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, dict_0, dict_0)
    bool_0 = False
    none_type_0 = None
    scope_replacer_0 = module_0.ScopeReplacer(dict_0, import_replacer_0, none_type_0)
    module_0.lazy_import(bool_0, scope_replacer_0)
