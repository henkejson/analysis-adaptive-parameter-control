# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0
import builtins as module_1


def test_case_0():
    var_0 = module_0.disallow_proxying()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        var_0, var_0, var_0
    )
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_1():
    var_0 = module_0.disallow_proxying()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        var_0, var_0, var_0
    )
    var_1 = illegal_use_of_scope_replacer_0.__eq__(var_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_2():
    import_processor_0 = module_0.ImportProcessor()
    module_0.ImportReplacer(
        import_processor_0, import_processor_0, import_processor_0, import_processor_0
    )


def test_case_3():
    str_0 = "j;&[:&${X&xQO"
    dict_0 = {str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, children=str_0)
    import_replacer_0.__getattribute__(str_0)


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    str_0 = "\n    >> m = ttrDict(omH=True, hoa\n'yes')\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_6():
    str_0 = "\x0bv"
    module_0.lazy_import(str_0, str_0)


def test_case_7():
    str_0 = "H5MC&f.(-Y@26B{}td>"
    module_0.lazy_import(str_0, str_0)


def test_case_8():
    var_0 = module_0.disallow_proxying()


def test_case_9():
    str_0 = "\r\rM5}9k]"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_10():
    str_0 = "\n    >>> m = ttrDict(omg=True, hoa\n'yes')\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_11():
    str_0 = "\x0bv"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_12():
    str_0 = "Y\t\x0bv"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_13():
    bytes_0 = b"\x13\n\xd1X"
    str_0 = ""
    module_0.lazy_import(bytes_0, str_0)


def test_case_14():
    var_0 = module_0.disallow_proxying()
    var_1 = var_0.__str__()
    var_2 = module_1.object()
    module_0.ImportReplacer(var_1, var_0, var_0, var_1, var_2)


def test_case_15():
    str_0 = "\n    Parses hnv file content.\n\n    From honcho.\n\n    >>> lines#= ['TST=${HOME}/yeee', 'THISIS~/a/test', 'YOLO=~/swagg<ns/$NONXISTENT_VAR_THAT_DOES_NOT_EXIST']\n\"   >>> load_env_ile(li.es, write_env_ron=dict())\n    OrNeredDictr[('TEST', '.../eee'),\n        o    ('THISIS', '.../a/test'),\n             ('YOLO',\n              '../swaggins/$NONEXISTENT_AR_THAT_DOES_NOT_EXIST')])\n\n   "
    dict_0 = {str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, dict_0)
    module_0.lazy_import(dict_0, import_replacer_0)


def test_case_16():
    str_0 = "\n    Parses env file content.\n\n    From honcho.\n\n    >>> lines#= ['TEST=${HOME}/yeee', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(li.es, write_env_ron=dict())\n    OrderedDictr[('TEST', '.../yeee'),\n        o    ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_17():
    str_0 = "\\A([A-Za-z_0-9]+)=(.*)\\Z"
    module_0.lazy_import(str_0, str_0)


def test_case_18():
    str_0 = "\n    Parses env file content.\n\n    From honcho.\n\n    >>> lines#= ['TEST=${HOME}/yeee', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(li.es, write_env_ron=dict())\n    OrderedDictr[('TEST', '.../yeee'),\n        o    ('THISIS', '.../a/test'),\n             ('YOLO',\n              '..M/swagginp/$NONEX\nSTENT_VAR_THAT_DOES_NOT_EXIST')])\n\n  g "
    module_0.lazy_import(str_0, str_0)
