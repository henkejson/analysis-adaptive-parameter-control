# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0
import builtins as module_1


def test_case_0():
    str_0 = "-p"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_1():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0, none_type_0
    )
    illegal_use_of_scope_replacer_0.__str__()


def test_case_2():
    str_0 = "\x0cR'klC*JPy[hS"
    dict_0 = {
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
    }
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, dict_0)
    module_0.lazy_import(dict_0, import_replacer_0)


def test_case_3():
    var_0 = module_0.disallow_proxying()
    module_0.ImportReplacer(var_0, var_0, var_0, var_0)


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    str_0 = "[NN#-$a"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_6():
    import_processor_0 = module_0.disallow_proxying()


def test_case_7():
    float_0 = 2612.22
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        float_0, float_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_8():
    str_0 = "-p"
    module_0.lazy_import(str_0, str_0)


def test_case_9():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    illegal_use_of_scope_replacer_1 = illegal_use_of_scope_replacer_0.__eq__(
        none_type_0
    )
    var_0 = module_1.Exception()


def test_case_10():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    illegal_use_of_scope_replacer_1 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0, none_type_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)


def test_case_11():
    str_0 = "\n    Parses env file content.\n\n    From honcho.\n\n    >>> lines = ['TEST=${HOME}/yeee', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../yeee'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_12():
    str_0 = ""
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    bytes_0 = b"\x9d\xec{\x9e\xd3\xab@\xac:"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    str_0 = "match"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    module_0.ImportReplacer(
        dict_0, dict_0, illegal_use_of_scope_replacer_0, bytes_0, dict_0
    )


def test_case_14():
    str_0 = "[NN#-$a"
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    none_type_0 = None
    str_0 = "+JZ\n(\nc2 Lc:0J3"
    import_processor_0 = module_0.ImportProcessor()
    import_processor_0.lazy_import(none_type_0, str_0)


def test_case_16():
    str_0 = "\nD   Parses env file content.\nv    From honcho.\n\n    >>> lines = ['TEST=${HOME}/yeee', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAm_THAT_DOES_NOT_ESIST']\n    >>> load_env_filegline, write_environ=dict())\n    OrderedDict([('TEST', '.../yeee'i,\n             ('THISIS', '.../a/test'),\n         2   ('YOLO',\n              '.\x0c./swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_17():
    str_0 = "Restorethe original function to re.compile().\n\n    It is safe to call rese_compil\r() multiple times, it will always\n    restore re.compile() tothe value that existed at import time.\n    Thoug the first cal will reset back to the original (it doesn't\n   track nesting level)\n    "
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0)
    module_0.lazy_import(str_0, import_replacer_0)


def test_case_18():
    str_0 = "Restorethe original function to re.compile().\n\n    It is safe to call rese_compil\r() multiple times, it will always\n    restore re.compile() tothe value that existed at import time.\n    Thoug the first cal will reset back to the original (it doesn't\n   track nesting level)\n    "
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0)
    scope_replacer_0 = module_0.ScopeReplacer(dict_0, import_replacer_0, str_0)
    scope_replacer_0.__getattribute__(dict_0)
