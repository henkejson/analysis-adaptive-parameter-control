# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "%"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_1():
    bytes_0 = b"\xc4\xcd\x1dJ\x1a\x8b\xe8"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bytes_0, bytes_0
    )
    import_processor_0 = module_0.ImportProcessor()


def test_case_2():
    bytes_0 = b"\xc4\xcd\x1dJ\x1a\x8b\xe8"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bytes_0, bytes_0
    )
    illegal_use_of_scope_replacer_0.__str__()


def test_case_3():
    bytes_0 = b"\xc4\xcd\x1dJ\x1a\x8b\xe8"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bytes_0, bytes_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(bytes_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_4():
    str_0 = "z-8"
    dict_0 = {str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, str_0)
    module_0.lazy_import(str_0, import_replacer_0, str_0)


def test_case_5():
    str_0 = "-"
    dict_0 = {str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_6():
    import_processor_0 = module_0.ImportProcessor()


def test_case_7():
    str_0 = "%"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_8():
    str_0 = "-"
    module_0.lazy_import(str_0, str_0)


def test_case_9():
    str_0 = "(c\\G/tq-IbK,\n]GXzE?f"
    module_0.lazy_import(str_0, str_0)


def test_case_10():
    str_0 = 'ovM"'
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0.__repr__()


def test_case_11():
    var_0 = module_0.disallow_proxying()


def test_case_12():
    bool_0 = False
    module_0.lazy_import(bool_0, bool_0)


def test_case_13():
    str_0 = "zf8D#8e_S{F;Q~U,"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_14():
    str_0 = ""
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_15():
    str_0 = "\n    Mark that this module should not be imported until an\n    attribute is needed off of it.\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = "\n    Loads (and returns) an env file specified by `filename` into the mapping `environ`.\n\n    >>> lines = ['TEST=${HOME}/yeee-$PATH', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../.../yeee-...:...'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_17():
    bytes_0 = b"\xc4\xcd\x1dJ\x1a\x8b\xe8"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bytes_0, bytes_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_18():
    int_0 = -697
    none_type_0 = None
    none_type_1 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_1, none_type_1
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(none_type_0)
    var_1 = var_0.__eq__(int_0)
    var_2 = var_1.__str__()
    bytes_0 = b"\x06\n_\xea\x95\xe1\x198\xb9\xb9\xa7\xccK\x1b/\x95\xc9"
    none_type_2 = None
    module_0.ImportReplacer(bytes_0, none_type_2, bytes_0, bytes_0, bytes_0)


def test_case_19():
    str_0 = "-"
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0)
    scope_replacer_0 = module_0.ScopeReplacer(dict_0, import_replacer_0, str_0)
    scope_replacer_0.lazy_import(dict_0, dict_0)
