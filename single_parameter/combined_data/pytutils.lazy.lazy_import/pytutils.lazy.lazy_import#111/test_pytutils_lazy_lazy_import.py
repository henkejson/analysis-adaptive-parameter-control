# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    var_0 = module_0.disallow_proxying()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(var_0, var_0)
    var_0.__call__()


def test_case_1():
    int_0 = 3
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(int_0, int_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_2():
    var_0 = module_0.disallow_proxying()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(var_0, var_0)
    var_1 = illegal_use_of_scope_replacer_0.__eq__(var_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_3():
    str_0 = "1!O,$,=k"
    dict_0 = {
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
    }
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, dict_0)
    module_0.lazy_import(str_0, str_0)


def test_case_4():
    str_0 = "0|B"
    dict_0 = {
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
    }
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    str_0 = "pt+up(\x0c2B%X)TzH[Dx "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_7():
    str_0 = "pt+up(\x0cB%X)TzH[Dx "
    module_0.lazy_import(str_0, str_0)


def test_case_8():
    list_0 = module_0.disallow_proxying()


def test_case_9():
    import_processor_0 = module_0.disallow_proxying()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        import_processor_0, import_processor_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_10():
    none_type_0 = None
    module_0.lazy_import(none_type_0, none_type_0)


def test_case_11():
    str_0 = '"\n    Deduplicates an iterator iteratively using hashed values in a set.\n    Not exactly memory efficient because of that of course.\n    If you have a large dataset with high cardinality look at HyperLogLog instead.\n\n    :return generator: Iterator of deduplicated results.\n    '
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    str_0 = "pt+up(\x0c2B%X)TzH[Dx "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_13():
    str_0 = "EM\r \n1"
    tuple_0 = (str_0,)
    module_0.ImportReplacer(str_0, tuple_0, str_0, str_0, tuple_0)


def test_case_14():
    str_0 = "#\rDT"
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = "A #rM"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_16():
    int_0 = 3
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(int_0, int_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)


def test_case_17():
    str_0 = "(Uj.<QajcHA="
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_18():
    str_0 = "1!O,$,=k"
    dict_0 = {
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
    }
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, dict_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_19():
    str_0 = "v(\r[\n\nd%1%-\\%bMC"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_20():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0)
