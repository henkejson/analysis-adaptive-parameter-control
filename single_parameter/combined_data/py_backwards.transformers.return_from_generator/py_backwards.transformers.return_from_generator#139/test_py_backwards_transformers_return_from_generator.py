# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import py_backwards.transformers.return_from_generator as module_0
import typed_ast._ast3 as module_1
import typed_ast.ast3 as module_2


def test_case_0():
    none_type_0 = None
    return_from_generator_transformer_0 = module_0.ReturnFromGeneratorTransformer(
        none_type_0
    )


def test_case_1():
    str_0 = "R\t3,PYi_Ts"
    list_0 = [str_0, str_0, str_0]
    function_def_0 = module_1.FunctionDef(*list_0)
    return_from_generator_transformer_0 = module_0.ReturnFromGeneratorTransformer(
        function_def_0
    )
    function_def_1 = return_from_generator_transformer_0.visit_FunctionDef(
        function_def_0
    )


def test_case_2():
    str_0 = ""
    list_0 = [str_0, str_0, str_0]
    function_def_0 = module_1.FunctionDef(*list_0)
    return_from_generator_transformer_0 = module_0.ReturnFromGeneratorTransformer(str_0)
    lt_0 = module_1.Lt()
    lt_1 = module_1.Lt()
    function_def_1 = return_from_generator_transformer_0.visit_FunctionDef(
        function_def_0
    )
    return_from_generator_transformer_1 = module_0.ReturnFromGeneratorTransformer(
        function_def_1
    )


def test_case_3():
    str_0 = "I."
    list_0 = [str_0, str_0, str_0]
    function_def_0 = module_1.FunctionDef(*list_0)
    return_from_generator_transformer_0 = module_0.ReturnFromGeneratorTransformer(
        function_def_0
    )
    return_from_generator_transformer_1 = module_0.ReturnFromGeneratorTransformer(str_0)
    return_from_generator_transformer_2 = module_0.ReturnFromGeneratorTransformer(
        function_def_0
    )
    lt_0 = module_1.Lt()
    str_1 = "SocketServer"
    str_2 = "m{dix#'G~O]p\tjH(H.$\r"
    dict_0 = {str_0: list_0, str_1: str_0, str_2: return_from_generator_transformer_0}
    lt_1 = module_1.Lt(**dict_0)
    lt_2 = module_1.Lt()
    var_0 = module_2.parse(str_1)
    function_def_1 = return_from_generator_transformer_2.visit_FunctionDef(var_0)
    var_1 = module_2.increment_lineno(var_0)
    var_1.visit_FunctionDef(str_0)
