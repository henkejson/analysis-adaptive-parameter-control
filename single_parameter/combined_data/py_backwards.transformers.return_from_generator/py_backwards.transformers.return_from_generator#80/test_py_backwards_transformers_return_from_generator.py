# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import py_backwards.transformers.return_from_generator as module_0
import typed_ast._ast3 as module_1
import typed_ast.ast3 as module_2


def test_case_0():
    none_type_0 = None
    return_from_generator_transformer_0 = module_0.ReturnFromGeneratorTransformer(
        none_type_0
    )


def test_case_1():
    bytes_0 = b"L\x01}er\xa7"
    return_from_generator_transformer_0 = module_0.ReturnFromGeneratorTransformer(
        bytes_0
    )
    list_0 = [return_from_generator_transformer_0, bytes_0, bytes_0, bytes_0]
    str_0 = '\n6YV"y"Ls'
    dict_0 = {str_0: str_0, str_0: list_0, str_0: str_0, str_0: str_0}
    function_def_0 = module_1.FunctionDef(*list_0, **dict_0)
    function_def_1 = return_from_generator_transformer_0.visit_FunctionDef(
        function_def_0
    )


def test_case_2():
    bytes_0 = b"2\xd4\x87\xe2\xd7\x1a\xe8\x05"
    bytes_1 = b""
    none_type_0 = None
    return_from_generator_transformer_0 = module_2.walk(bytes_0)
    return_from_generator_transformer_1 = module_0.ReturnFromGeneratorTransformer(
        none_type_0
    )
    list_0 = [return_from_generator_transformer_1, bytes_1, bytes_1, bytes_1]
    str_0 = '\n6YV"y"Ls'
    dict_0 = {str_0: str_0, str_0: list_0, str_0: str_0, str_0: str_0}
    return_from_generator_transformer_2 = module_0.ReturnFromGeneratorTransformer(
        dict_0
    )
    function_def_0 = module_1.FunctionDef(*list_0, **dict_0)
    function_def_1 = return_from_generator_transformer_1.visit_FunctionDef(
        function_def_0
    )
    return_from_generator_transformer_1.generic_visit(list_0)
