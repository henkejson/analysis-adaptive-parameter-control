# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.helpers as module_0
import builtins as module_1


def test_case_0():
    bool_0 = True
    var_0 = module_0.has_message_body(bool_0)


def test_case_1():
    bytes_0 = b"tT\xc3\xa3\xaf#\xb20g\xf8\xa6\x17\xbb\xa6\xce\xc0\x16"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    var_0 = module_0.remove_entity_headers(dict_0)


def test_case_2():
    bool_0 = module_0.is_atty()


def test_case_3():
    default_0 = module_0.Default()


def test_case_4():
    none_type_0 = None
    module_0.is_entity_header(none_type_0)


def test_case_5():
    object_0 = module_1.object()
    module_0.is_hop_by_hop_header(object_0)


def test_case_6():
    bool_0 = False
    bool_1 = module_0.is_atty()
    var_0 = module_0.has_message_body(bool_1)
    dict_0 = {bool_0: bool_0}
    default_0 = module_0.Default()
    list_0 = [dict_0]
    str_0 = list_0.__str__()
    var_1 = default_0.__repr__()
    module_0.remove_entity_headers(dict_0)


def test_case_7():
    int_0 = 402
    var_0 = module_0.has_message_body(int_0)
    bool_0 = module_0.is_atty()
    dict_0 = {var_0: var_0, var_0: var_0, var_0: var_0, var_0: var_0}
    module_0.remove_entity_headers(dict_0)


def test_case_8():
    bool_0 = False
    bool_1 = module_0.has_message_body(bool_0)
    var_0 = module_0.has_message_body(bool_1)
    dict_0 = {bool_0: bool_0}
    default_0 = module_0.Default()
    list_0 = [dict_0]
    str_0 = list_0.__str__()
    var_1 = default_0.__repr__()
    bool_2 = module_0.is_atty()
    str_1 = default_0.__str__()


def test_case_9():
    int_0 = 204
    bool_0 = module_0.is_atty()
    var_0 = module_0.has_message_body(int_0)
    bool_1 = False
    bool_2 = module_0.is_atty()
    var_1 = var_0.__repr__()
    default_0 = module_0.Default()
    str_0 = var_1.__str__()
    var_2 = default_0.__repr__()
    dict_0 = {var_1: default_0, var_0: bool_1}
    var_3 = var_0.__repr__()
    var_4 = module_0.is_entity_header(var_3)
    var_5 = module_0.is_entity_header(var_3)
    list_0 = [dict_0]
    str_1 = list_0.__str__()
    var_6 = var_3.__repr__()
    module_0.remove_entity_headers(bool_2)
