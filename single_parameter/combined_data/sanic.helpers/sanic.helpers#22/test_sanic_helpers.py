# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.helpers as module_0
import inspect as module_1


def test_case_0():
    set_0 = set()
    module_0.has_message_body(set_0)


def test_case_1():
    str_0 = '"f*<ri2C\tT`'
    list_0 = [str_0, str_0]
    module_0.remove_entity_headers(list_0)


def test_case_2():
    bool_0 = module_0.is_atty()


def test_case_3():
    float_0 = -3536.41219
    var_0 = float_0.__repr__()
    dict_0 = {var_0: var_0, var_0: var_0, var_0: var_0}
    var_1 = module_0.remove_entity_headers(dict_0)


def test_case_4():
    set_0 = set()
    module_0.is_hop_by_hop_header(set_0)


def test_case_5():
    default_0 = module_0.Default()
    bool_0 = module_0.is_atty()
    float_0 = 214.66073232943992
    str_0 = default_0.__str__()
    var_0 = module_0.has_message_body(float_0)
    bytes_0 = b"4\xf9Z:\xc1\xa8/\x07/P\xc0{s"
    var_1 = module_0.is_hop_by_hop_header(bytes_0)
    str_1 = var_0.__str__()
    module_0.Default(*var_0)


def test_case_6():
    bool_0 = module_0.is_atty()
    float_0 = 204.298
    var_0 = module_0.has_message_body(float_0)
    default_0 = module_0.Default()


def test_case_7():
    bool_0 = True
    var_0 = module_0.has_message_body(bool_0)
    var_1 = var_0.__repr__()
    str_0 = var_1.__str__()
    dict_0 = {bool_0: bool_0}
    module_0.import_string(dict_0)


def test_case_8():
    default_0 = module_0.Default()
    var_0 = module_1.ismodule(default_0)
    str_0 = default_0.__str__()
    var_1 = module_0.is_hop_by_hop_header(str_0)
    str_1 = default_0.__str__()
    var_2 = module_0.is_entity_header(str_1)
    dict_0 = {str_0: var_2}
    var_3 = module_0.remove_entity_headers(dict_0)
    bool_0 = module_0.is_atty()
    float_0 = 204.0
    str_2 = var_3.__str__()
    var_4 = module_0.has_message_body(float_0)
    str_3 = str_1.__str__()
    var_5 = module_0.has_message_body(var_1)
    var_6 = module_0.has_message_body(var_1)
    var_7 = module_0.is_hop_by_hop_header(str_2)
    str_4 = var_3.__str__()
    default_1 = module_0.Default()
    default_2 = module_0.Default()
    module_0.import_string(var_3)
