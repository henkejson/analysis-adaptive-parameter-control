# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.helpers as module_0
import inspect as module_1


def test_case_0():
    str_0 = '6M[iO9"Myi<6l,>)-,?'
    dict_0 = {str_0: str_0}
    var_0 = module_0.remove_entity_headers(dict_0)
    module_0.has_message_body(dict_0)


def test_case_1():
    list_0 = []
    module_0.remove_entity_headers(list_0)


def test_case_2():
    bool_0 = module_0.is_atty()


def test_case_3():
    str_0 = "D)zB"
    dict_0 = {str_0: str_0}
    var_0 = module_0.remove_entity_headers(dict_0)
    module_0.is_entity_header(var_0)


def test_case_4():
    bool_0 = module_0.is_atty()
    var_0 = module_0.has_message_body(bool_0)
    bool_1 = module_0.is_atty()
    bool_2 = True
    module_0.is_hop_by_hop_header(bool_2)


def test_case_5():
    default_0 = module_0.Default()
    var_0 = default_0.__repr__()
    var_1 = var_0.__repr__()
    str_0 = default_0.__str__()
    int_0 = -1122
    var_2 = module_0.has_message_body(int_0)
    var_3 = default_0.__repr__()
    str_1 = var_2.__str__()
    var_4 = module_0.has_message_body(var_2)


def test_case_6():
    list_0 = []
    var_0 = module_1.ismodule(list_0)
    default_0 = module_0.Default()
    int_0 = 3620
    bool_0 = module_0.is_atty()
    var_1 = module_0.has_message_body(int_0)


def test_case_7():
    str_0 = "2}?QeX"
    dict_0 = {str_0: str_0, str_0: str_0}
    var_0 = module_0.remove_entity_headers(dict_0, str_0)
    bool_0 = module_0.is_atty()
    bool_1 = False
    var_1 = module_0.has_message_body(bool_1)
    var_2 = var_0.__repr__()
    var_3 = var_1.__repr__()
    var_4 = module_0.has_message_body(var_1)
    int_0 = 204
    var_5 = module_0.is_hop_by_hop_header(str_0)
    var_6 = module_0.has_message_body(int_0)
    module_0.remove_entity_headers(var_3)


def test_case_8():
    str_0 = "Allow"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.remove_entity_headers(dict_0, str_0)
    var_1 = module_0.is_entity_header(str_0)
    bool_0 = True
    var_2 = module_0.has_message_body(bool_0)
    var_3 = var_2.__repr__()
    bytes_0 = b"|\x16\xa7\xe6,\xe4#\xde\x96\xf6;"
    bool_1 = module_0.is_atty()
    module_0.has_message_body(bytes_0)


def test_case_9():
    str_0 = "Allow"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.remove_entity_headers(dict_0, dict_0)
    module_0.is_entity_header(dict_0)
