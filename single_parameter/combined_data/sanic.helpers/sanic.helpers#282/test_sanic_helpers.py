# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.helpers as module_0
import builtins as module_1


def test_case_0():
    bool_0 = module_0.is_atty()
    var_0 = module_0.has_message_body(bool_0)


def test_case_1():
    str_0 = "G{e"
    dict_0 = {str_0: str_0}
    var_0 = module_0.remove_entity_headers(dict_0)


def test_case_2():
    bool_0 = module_0.is_atty()


def test_case_3():
    bool_0 = module_0.is_atty()
    module_0.is_entity_header(bool_0)


def test_case_4():
    default_0 = module_0.Default()
    module_0.is_hop_by_hop_header(default_0)


def test_case_5():
    default_0 = module_0.Default()
    var_0 = default_0.__repr__()
    var_1 = default_0.__repr__()
    str_0 = var_0.__str__()
    var_2 = var_1.__repr__()
    var_3 = var_1.__repr__()
    module_0.has_message_body(str_0)


def test_case_6():
    default_0 = module_0.Default()
    var_0 = default_0.__repr__()
    var_1 = default_0.__repr__()
    str_0 = default_0.__str__()
    var_2 = var_1.__repr__()
    var_3 = default_0.__repr__()
    module_0.has_message_body(default_0)


def test_case_7():
    int_0 = 405
    var_0 = module_0.has_message_body(int_0)
    str_0 = "_g>/A:w1m.4m7"
    default_0 = module_0.Default()
    dict_0 = {str_0: str_0}
    module_0.Default(**dict_0)


def test_case_8():
    default_0 = module_0.Default()
    var_0 = default_0.__repr__()
    str_0 = default_0.__str__()
    default_1 = module_0.Default()
    float_0 = 204.0
    var_1 = default_0.__repr__()
    str_1 = var_0.__str__()
    var_2 = float_0.__repr__()
    var_3 = var_0.__repr__()
    str_2 = default_0.__str__()
    var_4 = module_0.has_message_body(float_0)
    var_5 = var_4.__repr__()
    str_3 = var_4.__str__()
    var_6 = var_4.__repr__()
    object_0 = module_1.object()
    var_7 = var_0.__repr__()
    dict_0 = {var_6: var_6}
    bool_0 = module_0.is_atty()
    var_8 = module_0.remove_entity_headers(dict_0, dict_0)
    var_9 = var_0.__repr__()
    var_10 = module_0.is_hop_by_hop_header(var_3)
    str_4 = var_10.__str__()
    var_11 = module_0.has_message_body(bool_0)
    module_0.remove_entity_headers(var_10)
