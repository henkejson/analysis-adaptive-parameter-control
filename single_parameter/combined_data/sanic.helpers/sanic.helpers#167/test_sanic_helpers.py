# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.helpers as module_0


def test_case_0():
    str_0 = "rI{"
    module_0.has_message_body(str_0)


def test_case_1():
    str_0 = "K8}|V9t`C"
    module_0.remove_entity_headers(str_0)


def test_case_2():
    bool_0 = module_0.is_atty()


def test_case_3():
    str_0 = "rI{"
    var_0 = module_0.is_entity_header(str_0)


def test_case_4():
    str_0 = "408 Request Timeout\n\n    The Web server (running the Web site) thinks that there has been too\n    long an interval of time between 1) the establishment of an IP\n    connection (socket) between the client and the server and\n    2) the receipt of any data on that socket, so the server has dropped\n    the connection. The socket connection has actually been lost - the Web\n    server has 'timed out' on that particular socket connection.\n\n    This is an internal exception thrown by Sanic and should not be used\n    directly.\n\n    Args:\n        message (Optional[Union[str, bytes]], optional): The message to be sent to the client. If `None`\n            then the HTTP status 'Bad Request' will be sent. Defaults to `None`.\n        quiet (Optional[bool], optional): When `True`, the error traceback will be suppressed\n            from the logs. Defaults to `None`.\n        context (Optional[Dict[str, Any]], optional): Additional mapping of key/value data that will be\n            sent to the client upon exception. Defaults to `None`.\n        extra (Optional[Dict[str, Any]], optional): Additional mapping of key/value data that will NOT be\n            sent to the client when in PRODUCTION mode. Defaults to `None`.\n        headers (Optional[Dict[str, Any]], optional): Additional headers that should be sent with the HTTP\n            response. Defaults to `None`.\n    "
    var_0 = module_0.is_hop_by_hop_header(str_0)


def test_case_5():
    bool_0 = module_0.is_atty()
    var_0 = module_0.has_message_body(bool_0)
    default_0 = module_0.Default()
    str_0 = default_0.__str__()
    tuple_0 = ()
    module_0.import_string(tuple_0)


def test_case_6():
    int_0 = 115
    var_0 = module_0.has_message_body(int_0)
    str_0 = var_0.__str__()
    dict_0 = {int_0: int_0}
    str_1 = var_0.__str__()
    module_0.remove_entity_headers(dict_0)


def test_case_7():
    bool_0 = module_0.is_atty()
    var_0 = module_0.has_message_body(bool_0)


def test_case_8():
    complex_0 = 1274.046818 - 230.547259j
    dict_0 = {complex_0: complex_0}
    module_0.remove_entity_headers(dict_0)


def test_case_9():
    dict_0 = {}
    var_0 = module_0.remove_entity_headers(dict_0)


def test_case_10():
    str_0 = "ZOZev& Bd2!q{RS&ij"
    dict_0 = {str_0: str_0}
    var_0 = module_0.remove_entity_headers(dict_0)


def test_case_11():
    int_0 = 204
    var_0 = module_0.has_message_body(int_0)
    bool_0 = module_0.is_atty()
    var_1 = module_0.has_message_body(int_0)
    str_0 = var_0.__str__()
    str_1 = var_1.__str__()
    var_2 = var_1.__repr__()
    default_0 = module_0.Default()
    dict_0 = {var_2: var_2}
    var_3 = var_1.__repr__()
    var_4 = module_0.remove_entity_headers(dict_0)
    module_0.is_hop_by_hop_header(bool_0)
