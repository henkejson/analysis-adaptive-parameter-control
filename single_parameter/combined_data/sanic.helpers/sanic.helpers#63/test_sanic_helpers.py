# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.helpers as module_0


def test_case_0():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.has_message_body(list_0)


def test_case_1():
    str_0 = "A decorator that can be used to implement a Middleware for all blueprints in the group.\n\n        In case of nested Blueprint Groups, the same middleware is applied\n        across each of the Blueprints recursively.\n\n        Args:\n            *args (Optional): Optional positional Parameters to be use middleware\n            **kwargs (Optional): Optional Keyword arg to use with Middleware\n\n        Returns:\n            Partial function to apply the middleware\n        "
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.remove_entity_headers(dict_0)


def test_case_2():
    bool_0 = module_0.is_atty()


def test_case_3():
    default_0 = module_0.Default()


def test_case_4():
    str_0 = "S.zBbc0`%.0vx"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.remove_entity_headers(dict_0)
    module_0.is_hop_by_hop_header(var_0)


def test_case_5():
    default_0 = module_0.Default()
    var_0 = default_0.__repr__()
    bytes_0 = b"?"
    module_0.remove_entity_headers(bytes_0)


def test_case_6():
    str_0 = "2"
    str_1 = "Wd~).+^*AY,"
    default_0 = module_0.Default()
    str_2 = default_0.__str__()
    bool_0 = module_0.is_atty()
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0}
    str_3 = default_0.__str__()
    module_0.is_hop_by_hop_header(dict_0)


def test_case_7():
    bool_0 = True
    bool_1 = module_0.is_atty()
    var_0 = module_0.has_message_body(bool_0)
    var_1 = var_0.__repr__()
    module_0.is_hop_by_hop_header(bool_1)


def test_case_8():
    float_0 = 103.101142
    var_0 = module_0.has_message_body(float_0)
    module_0.import_string(var_0)


def test_case_9():
    bool_0 = module_0.is_atty()
    bool_1 = module_0.is_atty()
    var_0 = module_0.has_message_body(bool_0)
    var_1 = bool_0.__repr__()
    list_0 = []
    dict_0 = {var_1: var_1, var_1: list_0}
    var_2 = module_0.remove_entity_headers(dict_0)
    var_3 = var_2.__repr__()
    var_4 = var_1.__repr__()
    int_0 = 304
    var_5 = module_0.has_message_body(int_0)
    var_6 = var_0.__repr__()
    var_7 = module_0.is_hop_by_hop_header(var_3)
    str_0 = var_1.__str__()
    module_0.import_string(dict_0)
