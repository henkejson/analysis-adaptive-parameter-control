# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.helpers as module_0
import inspect as module_1
import builtins as module_2


def test_case_0():
    bytes_0 = b"T\xc6\xa40\xdb\x8a\xa7\xdf\x8fm"
    module_0.has_message_body(bytes_0)


def test_case_1():
    bytes_0 = b"\xac\x8c\x0b\xbf\x1b\xf5\xfeu\x83"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    var_0 = module_0.remove_entity_headers(dict_0)


def test_case_2():
    bool_0 = module_0.is_atty()


def test_case_3():
    bool_0 = False
    module_0.is_hop_by_hop_header(bool_0)


def test_case_4():
    default_0 = module_0.Default()
    var_0 = default_0.__repr__()
    var_1 = var_0.__repr__()


def test_case_5():
    int_0 = 305
    var_0 = module_0.has_message_body(int_0)
    str_0 = var_0.__str__()
    var_1 = var_0.__repr__()
    var_2 = module_1.ismodule(var_1)
    bool_0 = module_0.is_atty()


def test_case_6():
    bool_0 = module_0.is_atty()
    var_0 = module_0.has_message_body(bool_0)
    str_0 = var_0.__str__()
    bool_1 = module_0.is_atty()
    module_0.is_entity_header(bool_1)


def test_case_7():
    default_0 = module_0.Default()
    float_0 = 303.28069859179595
    var_0 = module_0.has_message_body(float_0)
    object_0 = module_2.object()
    str_0 = default_0.__str__()
    bool_0 = module_0.is_atty()
    bool_1 = module_0.is_atty()


def test_case_8():
    bytes_0 = b"\xbf\x1b\xb9\x08\xa3u\x83"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    var_0 = module_1.ismodule(bytes_0)
    var_1 = var_0.__repr__()
    var_2 = module_0.remove_entity_headers(dict_0)
    var_3 = var_2.__repr__()
    var_4 = module_1.ismodule(var_2)
    var_5 = module_0.has_message_body(var_4)
    str_0 = var_2.__str__()
    var_6 = var_2.__repr__()
    var_7 = var_2.__repr__()
    default_0 = module_0.Default()
    float_0 = 304.0
    var_8 = var_2.__repr__()
    var_9 = module_0.has_message_body(float_0)
    object_0 = module_2.object()
    str_1 = default_0.__str__()
    module_0.is_hop_by_hop_header(var_2)
