# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.helpers as module_0
import inspect as module_1


def test_case_0():
    dict_0 = {}
    module_0.has_message_body(dict_0)


def test_case_1():
    none_type_0 = None
    module_0.remove_entity_headers(none_type_0)


def test_case_2():
    default_0 = module_0.Default()
    var_0 = default_0.__repr__()
    dict_0 = {var_0: default_0}
    var_1 = module_0.remove_entity_headers(dict_0)


def test_case_3():
    bool_0 = module_0.is_atty()


def test_case_4():
    bool_0 = True
    module_0.is_entity_header(bool_0)


def test_case_5():
    tuple_0 = ()
    module_0.is_hop_by_hop_header(tuple_0)


def test_case_6():
    float_0 = 3595.8
    var_0 = module_0.has_message_body(float_0)
    var_1 = module_0.has_message_body(float_0)
    module_0.Default(**var_1)


def test_case_7():
    none_type_0 = None
    bool_0 = module_0.is_atty()
    var_0 = module_0.has_message_body(bool_0)
    module_0.import_string(none_type_0)


def test_case_8():
    default_0 = module_0.Default()
    str_0 = default_0.__str__()
    dict_0 = {str_0: default_0}
    var_0 = module_0.remove_entity_headers(dict_0)


def test_case_9():
    float_0 = 304.0
    var_0 = module_0.has_message_body(float_0)
    str_0 = var_0.__str__()
    default_0 = module_0.Default()
    default_1 = module_0.Default()
    bool_0 = True
    str_1 = default_1.__str__()
    var_1 = module_1.ismodule(bool_0)
    var_2 = module_1.ismodule(bool_0)
    str_2 = default_0.__str__()
    var_3 = module_0.is_hop_by_hop_header(str_2)
    var_4 = module_1.ismodule(var_1)
    str_3 = var_2.__str__()
    str_4 = default_0.__str__()
    str_5 = default_1.__str__()
    var_5 = default_1.__repr__()
    var_6 = var_0.__repr__()
    set_0 = set()
    var_7 = module_0.has_message_body(var_1)
    var_8 = var_2.__repr__()
    var_9 = var_7.__repr__()
    bool_1 = module_0.is_atty()
    dict_0 = {var_5: set_0}
    str_6 = var_9.__str__()
    var_10 = module_0.remove_entity_headers(dict_0)
    module_0.is_hop_by_hop_header(default_0)
