# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.helpers as module_0
import builtins as module_1


def test_case_0():
    int_0 = 1641
    var_0 = module_0.has_message_body(int_0)
    str_0 = var_0.__str__()


def test_case_1():
    bytes_0 = b"\xe9\x82\xf1c\xb2\xfe\xf8\x8d\x9c\x91"
    module_0.remove_entity_headers(bytes_0)


def test_case_2():
    bool_0 = module_0.is_atty()


def test_case_3():
    default_0 = module_0.Default()


def test_case_4():
    dict_0 = {}
    default_0 = module_0.remove_entity_headers(dict_0, dict_0)
    bool_0 = False
    var_0 = module_0.has_message_body(bool_0)
    module_0.is_entity_header(var_0)


def test_case_5():
    str_0 = ";xI,g\\:-=*V!"
    var_0 = module_0.is_hop_by_hop_header(str_0)


def test_case_6():
    int_0 = -21
    module_0.remove_entity_headers(int_0, int_0)


def test_case_7():
    dict_0 = {}
    default_0 = module_0.Default(**dict_0)
    str_0 = default_0.__str__()
    bool_0 = module_0.is_atty()
    bool_1 = True
    var_0 = module_0.has_message_body(bool_1)


def test_case_8():
    bytes_0 = b"quack-ack"
    bool_0 = False
    tuple_0 = (bool_0, bool_0, bytes_0, bool_0)
    dict_0 = {
        bytes_0: bool_0,
        bool_0: tuple_0,
        bytes_0: bool_0,
        bool_0: bytes_0,
        bool_0: tuple_0,
        bytes_0: bytes_0,
    }
    module_0.remove_entity_headers(dict_0)


def test_case_9():
    dict_0 = {}
    var_0 = module_0.remove_entity_headers(dict_0)
    object_0 = module_1.object()


def test_case_10():
    default_0 = module_0.Default()
    str_0 = default_0.__str__()
    var_0 = default_0.__repr__()
    var_1 = module_0.is_entity_header(str_0)
    var_2 = var_1.__repr__()
    var_3 = module_0.is_hop_by_hop_header(var_2)
    bool_0 = module_0.is_atty()
    dict_0 = {var_0: var_3}
    var_4 = module_0.remove_entity_headers(dict_0)
    var_5 = module_0.remove_entity_headers(var_4)
    str_1 = var_4.__str__()
    bool_1 = module_0.is_atty()
    float_0 = 204.0
    var_6 = module_0.has_message_body(float_0)
    str_2 = var_4.__str__()
    var_7 = module_0.has_message_body(var_3)
