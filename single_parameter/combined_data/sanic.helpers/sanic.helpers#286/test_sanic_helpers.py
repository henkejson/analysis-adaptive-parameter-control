# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.helpers as module_0
import inspect as module_1


def test_case_0():
    int_0 = 1599
    var_0 = module_0.has_message_body(int_0)
    var_1 = module_0.has_message_body(var_0)


def test_case_1():
    tuple_0 = ()
    module_0.remove_entity_headers(tuple_0)


def test_case_2():
    bool_0 = module_0.is_atty()


def test_case_3():
    default_0 = module_0.Default()


def test_case_4():
    bool_0 = module_0.is_atty()
    module_0.is_entity_header(bool_0)


def test_case_5():
    int_0 = 1599
    module_0.is_hop_by_hop_header(int_0)


def test_case_6():
    default_0 = module_0.Default()
    var_0 = default_0.__repr__()


def test_case_7():
    bool_0 = module_0.is_atty()
    str_0 = "~I,[U"
    str_1 = "saic.root"
    default_0 = module_0.Default()
    var_0 = default_0.__repr__()
    default_1 = module_0.Default()
    str_2 = default_1.__str__()
    var_1 = module_1.ismodule(str_0)
    float_0 = 97.43
    var_2 = default_1.__repr__()
    var_3 = module_0.has_message_body(float_0)
    var_4 = default_1.__repr__()
    var_5 = module_1.ismodule(var_4)
    var_6 = var_4.__repr__()
    str_3 = default_0.__str__()
    var_7 = module_0.is_hop_by_hop_header(str_1)


def test_case_8():
    bool_0 = module_0.is_atty()
    str_0 = "3\x0b:I,RU"
    dict_0 = {str_0: str_0, str_0: bool_0, str_0: bool_0, str_0: bool_0}
    var_0 = module_0.has_message_body(bool_0)
    var_1 = module_0.remove_entity_headers(dict_0)


def test_case_9():
    bool_0 = module_0.is_atty()
    str_0 = "Unknown certificate creator: "
    str_1 = "sai.roo)"
    var_0 = module_0.is_entity_header(str_0)
    default_0 = module_0.Default()
    str_2 = str_0.__str__()
    default_1 = module_0.Default()
    var_1 = module_0.has_message_body(var_0)
    dict_0 = {str_1: str_1, str_0: bool_0, str_0: bool_0, str_1: bool_0}
    var_2 = module_0.is_hop_by_hop_header(str_2)
    str_3 = var_2.__str__()
    var_3 = module_0.is_entity_header(str_2)
    str_4 = var_1.__str__()
    var_4 = var_1.__repr__()
    str_5 = var_2.__str__()
    str_6 = var_4.__str__()
    var_5 = var_1.__repr__()
    var_6 = module_1.ismodule(str_0)
    str_7 = default_1.__str__()
    var_7 = var_5.__repr__()
    var_8 = module_0.remove_entity_headers(dict_0)
    str_8 = var_0.__str__()
    float_0 = 204.0
    bool_1 = module_0.is_atty()
    var_9 = module_0.is_entity_header(str_7)
    var_10 = module_0.has_message_body(float_0)
    module_0.import_string(str_4, var_5)
