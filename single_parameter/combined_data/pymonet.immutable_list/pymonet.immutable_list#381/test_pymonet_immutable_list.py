# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.immutable_list as module_0


def test_case_0():
    str_0 = "="
    immutable_list_0 = module_0.ImmutableList(str_0)
    bool_0 = immutable_list_0.__eq__(immutable_list_0)
    immutable_list_0.find(immutable_list_0)


def test_case_1():
    str_0 = "\n        Take function and applied this function with monad value and returns new monad with mapped value.\n\n        :params mapper: function to apply on monad value\n        :type mapper: Function(A) -> B\n        :returns: for successfully new Try with mapped value, othercase copy of self\n        :rtype: Try[B]\n        "
    immutable_list_0 = module_0.ImmutableList(str_0)
    bool_0 = immutable_list_0.__eq__(str_0)
    immutable_list_0.find(immutable_list_0)


def test_case_2():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_1.find(immutable_list_0)


def test_case_3():
    immutable_list_0 = module_0.ImmutableList()
    none_type_0 = None
    immutable_list_0.__add__(none_type_0)


def test_case_4():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.__len__()
    var_0.find(var_0)


def test_case_5():
    str_0 = ";LLR7\rhtov"
    immutable_list_0 = module_0.ImmutableList(str_0)
    var_0 = immutable_list_0.__len__()
    immutable_list_0.find(var_0)


def test_case_6():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.to_list()
    str_0 = var_0.__str__()


def test_case_7():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_2 = immutable_list_1.to_list()
    immutable_list_1.find(immutable_list_0)


def test_case_8():
    bool_0 = False
    bool_1 = True
    immutable_list_0 = module_0.ImmutableList(bool_1)
    immutable_list_0.map(bool_0)


def test_case_9():
    str_0 = "\n        :param semigroup: other semigroup to concat\n        :type semigroup: Map[B]\n        :returns: new Map with concated all values\n        :rtype: Map[A]\n        "
    str_1 = "w0g1{"
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = module_0.ImmutableList(is_empty=str_1)
    bool_0 = immutable_list_1.__eq__(str_1)
    immutable_list_2 = immutable_list_1.unshift(str_0)
    immutable_list_2.map(str_0)


def test_case_10():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_0.filter(immutable_list_0)


def test_case_11():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.__add__(immutable_list_0)
    var_0 = immutable_list_0.__len__()
    var_1 = immutable_list_1.find(var_0)
    var_2 = immutable_list_1.reduce(var_0, immutable_list_1)
    immutable_list_1.filter(var_1)


def test_case_12():
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(is_empty=bool_0)
    none_type_0 = None
    var_0 = immutable_list_0.reduce(none_type_0, bool_0)
    var_1 = immutable_list_0.find(var_0)
    bool_1 = immutable_list_0.__eq__(immutable_list_0)


def test_case_13():
    str_0 = ";LLR7tov"
    immutable_list_0 = module_0.ImmutableList(str_0)
    immutable_list_0.find(immutable_list_0)


def test_case_14():
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(is_empty=bool_0)
    none_type_0 = None
    var_0 = immutable_list_0.reduce(none_type_0, bool_0)
    bool_1 = immutable_list_0.__eq__(immutable_list_0)


def test_case_15():
    bool_0 = False
    bool_1 = True
    immutable_list_0 = module_0.ImmutableList(bool_1)
    immutable_list_0.reduce(bool_0, immutable_list_0)


def test_case_16():
    immutable_list_0 = module_0.ImmutableList()


def test_case_17():
    str_0 = ";LLR7tov"
    immutable_list_0 = module_0.ImmutableList(str_0)
    str_1 = immutable_list_0.__str__()


def test_case_18():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.append(immutable_list_0)
    var_0 = immutable_list_0.__len__()
    immutable_list_0.filter(var_0)


def test_case_19():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_2 = immutable_list_1.__add__(immutable_list_0)
    immutable_list_1.find(immutable_list_0)


def test_case_20():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    var_0 = immutable_list_1.__len__()
    immutable_list_1.find(immutable_list_0)


def test_case_21():
    bool_0 = True
    bool_1 = True
    bool_2 = False
    immutable_list_0 = module_0.ImmutableList(tail=bool_2)
    immutable_list_1 = immutable_list_0.unshift(bool_1)
    immutable_list_1.reduce(bool_0, bool_0)


def test_case_22():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.__add__(immutable_list_0)
    var_0 = immutable_list_0.__len__()
    var_1 = immutable_list_1.find(var_0)
    var_2 = immutable_list_1.reduce(var_1, immutable_list_0)
    var_3 = immutable_list_1.find(immutable_list_1)
    bool_0 = immutable_list_1.__eq__(var_2)


def test_case_23():
    bytes_0 = b"w\xc6\xf7\xa7E\xea \x9b\xfe\x99\xd3`-\xcc\x97\x8d\x07\x14"
    immutable_list_0 = module_0.ImmutableList(tail=bytes_0)
    immutable_list_1 = immutable_list_0.unshift(bytes_0)
    bool_0 = immutable_list_1.__eq__(immutable_list_0)
    immutable_list_1.find(bool_0)
