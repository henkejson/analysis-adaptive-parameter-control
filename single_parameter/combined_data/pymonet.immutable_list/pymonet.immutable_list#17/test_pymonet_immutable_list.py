# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.immutable_list as module_0
import typing as module_1


def test_case_0():
    str_0 = "[A\n_r;ZZS\npMc&(&N="
    immutable_list_0 = module_0.ImmutableList(tail=str_0)
    bool_0 = immutable_list_0.__eq__(immutable_list_0)


def test_case_1():
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(bool_0)
    bool_1 = immutable_list_0.__eq__(bool_0)
    immutable_list_0.find(bool_0)


def test_case_2():
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(bool_0)
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    bool_1 = immutable_list_0.__eq__(bool_0)
    immutable_list_0.find(bool_0)


def test_case_3():
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(is_empty=bool_0)
    immutable_list_1 = immutable_list_0.unshift(bool_0)
    immutable_list_0.__add__(bool_0)


def test_case_4():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.__len__()
    var_1 = immutable_list_0.__len__()


def test_case_5():
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(bool_0)
    bool_1 = immutable_list_0.__len__()
    immutable_list_0.find(bool_0)


def test_case_6():
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(bool_0)
    str_0 = immutable_list_0.__str__()
    immutable_list_0.find(bool_0)


def test_case_7():
    str_0 = "[A\n_r;ZZS\npMc&(&N="
    immutable_list_0 = module_0.ImmutableList(tail=str_0)
    bool_0 = immutable_list_0.__eq__(immutable_list_0)
    immutable_list_0.to_list()


def test_case_8():
    str_0 = "\n    Maybe type is the most common way of representing nothingness (or the null type).\n    Maybe is effectively abstract and has two concrete subtypes: Box (also Some) and Nothing.\n    "
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_0.map(str_0)


def test_case_9():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_0.filter(immutable_list_0)


def test_case_10():
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(tail=bool_0)
    immutable_list_0.filter(immutable_list_0)


def test_case_11():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.find(immutable_list_0)
    immutable_list_0.filter(var_0)


def test_case_12():
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(bool_0)
    immutable_list_0.find(bool_0)


def test_case_13():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(tail=none_type_0)
    var_0 = immutable_list_0.reduce(immutable_list_0, none_type_0)
    immutable_list_0.map(var_0)


def test_case_14():
    none_type_0 = None
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(tail=none_type_0, is_empty=bool_0)
    var_0 = immutable_list_0.find(none_type_0)
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    bytes_0 = b"5l\xbc\x80\xbe\xe9\xe0\x08\x96\xd2\xb7{"
    immutable_list_2 = module_0.ImmutableList(bytes_0)
    var_1 = immutable_list_2.to_list()
    str_0 = immutable_list_2.__str__()
    var_2 = immutable_list_1.to_list()
    var_3 = immutable_list_0.reduce(var_2, immutable_list_2)
    var_3.reduce(var_2, bool_0)


def test_case_15():
    immutable_list_0 = module_0.ImmutableList()


def test_case_16():
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(bool_0)
    immutable_list_1 = immutable_list_0.append(immutable_list_0)
    str_0 = immutable_list_0.__str__()
    immutable_list_0.find(bool_0)


def test_case_17():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.to_list()
    var_1 = immutable_list_0.to_list()
    immutable_list_1 = immutable_list_0.append(var_0)
    immutable_list_2 = immutable_list_1.append(immutable_list_0)
    var_1.map(immutable_list_0)


def test_case_18():
    bytes_0 = b"\x03/\xc1\xd4\xf3\xf8X\xb1|\xba"
    immutable_list_0 = module_0.ImmutableList()
    generic_0 = module_1.Generic()
    bool_0 = immutable_list_0.__eq__(generic_0)
    none_type_0 = None
    var_0 = immutable_list_0.find(none_type_0)
    immutable_list_1 = immutable_list_0.unshift(bytes_0)
    immutable_list_2 = immutable_list_1.unshift(bytes_0)
    str_0 = immutable_list_0.__str__()
    var_1 = immutable_list_0.to_list()
    immutable_list_1.reduce(var_1, immutable_list_1)


def test_case_19():
    none_type_0 = None
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(tail=none_type_0, is_empty=bool_0)
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    bool_1 = immutable_list_1.__eq__(immutable_list_0)
    immutable_list_2 = module_0.ImmutableList(immutable_list_0)
    immutable_list_1.find(immutable_list_1)


def test_case_20():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(tail=none_type_0, is_empty=none_type_0)
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    bytes_0 = b"5l\xbc\x80\xbe\xe9\xe0\x08\x96\xd2#{"
    bool_0 = immutable_list_1.__eq__(bytes_0)
    var_0 = immutable_list_1.__len__()
    immutable_list_1.find(bytes_0)


def test_case_21():
    none_type_0 = None
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(tail=none_type_0, is_empty=bool_0)
    var_0 = immutable_list_0.find(none_type_0)
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_1.map(immutable_list_1)


def test_case_22():
    none_type_0 = None
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(tail=none_type_0, is_empty=bool_0)
    immutable_list_1 = immutable_list_0.unshift(none_type_0)
    bytes_0 = b"5l\xbc\x80\xbe\xe9\xe0\x08\x96\xd2#{"
    bool_1 = immutable_list_1.__eq__(immutable_list_0)
    immutable_list_2 = module_0.ImmutableList(bytes_0)
    immutable_list_3 = immutable_list_0.__add__(immutable_list_2)
    immutable_list_4 = module_0.ImmutableList()
    immutable_list_2.find(bytes_0)
