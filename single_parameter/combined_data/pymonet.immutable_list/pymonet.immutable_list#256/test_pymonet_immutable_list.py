# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.immutable_list as module_0


def test_case_0():
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(bool_0)
    bool_1 = immutable_list_0.__eq__(immutable_list_0)
    immutable_list_0.find(bool_0)


def test_case_1():
    str_0 = "tpwpg;QIpF)<\x0cdAeI8j#"
    str_1 = "+7-|V6~uI!8OE3S[Y"
    immutable_list_0 = module_0.ImmutableList(tail=str_1)
    bool_0 = immutable_list_0.__eq__(str_1)
    immutable_list_1 = module_0.ImmutableList(str_1)
    immutable_list_2 = immutable_list_1.append(str_0)
    none_type_0 = None
    immutable_list_2.find(none_type_0)


def test_case_2():
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(bool_0)
    var_0 = immutable_list_0.append(immutable_list_0)
    immutable_list_0.find(bool_0)


def test_case_3():
    str_0 = "q\rw"
    immutable_list_0 = module_0.ImmutableList(str_0, is_empty=str_0)
    none_type_0 = None
    immutable_list_0.__add__(none_type_0)


def test_case_4():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.__add__(immutable_list_0)
    immutable_list_2 = immutable_list_1.__len__()
    immutable_list_3 = module_0.ImmutableList(
        immutable_list_2, is_empty=immutable_list_2
    )
    immutable_list_3.find(immutable_list_1)


def test_case_5():
    float_0 = 310.12193
    immutable_list_0 = module_0.ImmutableList(float_0, float_0)
    immutable_list_0.__len__()


def test_case_6():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.to_list()


def test_case_7():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.__add__(immutable_list_0)
    str_0 = immutable_list_1.__str__()
    immutable_list_2 = module_0.ImmutableList(
        immutable_list_1, is_empty=immutable_list_1
    )
    immutable_list_2.find(immutable_list_0)


def test_case_8():
    bool_0 = False
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(bool_0, is_empty=none_type_0)
    immutable_list_0.map(none_type_0)


def test_case_9():
    none_type_0 = None
    bytes_0 = b"\xeeg"
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(is_empty=bool_0)
    immutable_list_1 = immutable_list_0.unshift(bool_0)
    immutable_list_2 = immutable_list_0.unshift(bytes_0)
    immutable_list_2.map(none_type_0)


def test_case_10():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_0.filter(immutable_list_0)


def test_case_11():
    int_0 = 714
    immutable_list_0 = module_0.ImmutableList(int_0)
    immutable_list_1 = module_0.ImmutableList(tail=immutable_list_0)
    var_0 = immutable_list_1.to_list()
    var_1 = immutable_list_1.find(var_0)
    immutable_list_1.filter(immutable_list_1)


def test_case_12():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.find(immutable_list_0)
    immutable_list_0.filter(var_0)


def test_case_13():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(none_type_0)
    bool_0 = immutable_list_0.__eq__(immutable_list_0)
    var_0 = immutable_list_0.reduce(none_type_0, none_type_0)
    immutable_list_1 = immutable_list_0.append(none_type_0)


def test_case_14():
    none_type_0 = None
    str_0 = "\n        Return monad value.\n\n        :returns: monad value\n        :rtype: A\n        "
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(str_0)
    immutable_list_0.reduce(bool_0, none_type_0)


def test_case_15():
    immutable_list_0 = module_0.ImmutableList()


def test_case_16():
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(is_empty=bool_0)
    str_0 = immutable_list_0.__str__()


def test_case_17():
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(bool_0)
    var_0 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_0.find(bool_0)


def test_case_18():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.__add__(immutable_list_0)
    immutable_list_2 = immutable_list_1.__add__(immutable_list_0)
    immutable_list_3 = module_0.ImmutableList(
        immutable_list_2, is_empty=immutable_list_2
    )
    immutable_list_3.find(immutable_list_1)


def test_case_19():
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(bool_0)
    var_0 = immutable_list_0.__len__()
    immutable_list_0.find(bool_0)


def test_case_20():
    float_0 = 310.12193
    immutable_list_0 = module_0.ImmutableList(float_0, float_0)
    immutable_list_0.find(immutable_list_0)


def test_case_21():
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(bool_0)
    immutable_list_0.find(bool_0)


def test_case_22():
    complex_0 = -971 + 2841.87j
    immutable_list_0 = module_0.ImmutableList(complex_0)
    none_type_0 = None
    str_0 = "\n        Transform Either to Try.\n\n        :returns: resolved Try monad with previous value. Right is resolved successfully, Left not.\n        :rtype: Box[A]\n        "
    immutable_list_1 = immutable_list_0.append(str_0)
    immutable_list_1.reduce(none_type_0, none_type_0)


def test_case_23():
    int_0 = 714
    immutable_list_0 = module_0.ImmutableList(int_0)
    immutable_list_1 = immutable_list_0.append(int_0)
    none_type_0 = None
    immutable_list_2 = module_0.ImmutableList(tail=none_type_0)
    str_0 = immutable_list_0.__str__()
    str_1 = immutable_list_1.__str__()
    var_0 = immutable_list_0.to_list()
    str_2 = immutable_list_0.__str__()
    bool_0 = immutable_list_2.__eq__(immutable_list_0)
    immutable_list_1.find(var_0)


def test_case_24():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.__add__(immutable_list_0)
    var_0 = immutable_list_0.__len__()
    immutable_list_2 = immutable_list_1.unshift(immutable_list_0)
    immutable_list_3 = immutable_list_1.__add__(immutable_list_0)
    str_0 = immutable_list_0.__str__()
    var_1 = immutable_list_0.__len__()
    immutable_list_4 = module_0.ImmutableList()
    bool_0 = immutable_list_1.__eq__(immutable_list_0)
    immutable_list_2.find(var_1)
