# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.immutable_list as module_0
import typing as module_1
import builtins as module_2


def test_case_0():
    immutable_list_0 = module_0.ImmutableList()
    bool_0 = immutable_list_0.__eq__(immutable_list_0)
    immutable_list_0.filter(immutable_list_0)


def test_case_1():
    str_0 = "\n    Perform left-to-right function composition.\n\n    :param value: argument of first applied function\n    :type value: Any\n    :param functions: list of functions to applied from left-to-right\n    :type functions: List[Function]\n    :returns: result of all functions\n    :rtype: Any\n    "
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(str_0, none_type_0)
    bool_0 = immutable_list_0.__eq__(none_type_0)
    immutable_list_0.find(none_type_0)


def test_case_2():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.append(immutable_list_0)
    immutable_list_0.filter(immutable_list_0)


def test_case_3():
    dict_0 = {}
    int_0 = 1398
    immutable_list_0 = module_0.ImmutableList(tail=int_0)
    immutable_list_0.__add__(dict_0)


def test_case_4():
    float_0 = 101.73439
    immutable_list_0 = module_0.ImmutableList(tail=float_0)
    var_0 = immutable_list_0.__len__()


def test_case_5():
    str_0 = "\n    Perform left-to-right function composition.\n\n    :param value: argument of first applied function\n    :type value: Any\n    :param functions: list of functions to applied from left-to-right\n    :type functions: List[Function]\n    :returns: result of all functions\n    :rtype: Any\n    "
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(str_0, none_type_0)
    var_0 = immutable_list_0.__len__()
    immutable_list_0.find(none_type_0)


def test_case_6():
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(is_empty=bool_0)
    str_0 = immutable_list_0.__str__()
    var_0 = immutable_list_0.to_list()


def test_case_7():
    str_0 = "\n    Perform left-to-right function composition.\n\n    :param value: argument of first applied function\n    :type value: Any\n    :param functions: list of functions to applied from left-to-right\n    :type functions: List[Function]\n    :returns: result of all functions\n    :rtype: Any\n    "
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(str_0, none_type_0)
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    var_0 = immutable_list_1.to_list()
    immutable_list_1.find(immutable_list_0)


def test_case_8():
    bool_0 = True
    bool_1 = True
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_2 = immutable_list_0.__add__(immutable_list_0)
    immutable_list_3 = immutable_list_0.append(bool_1)
    var_0 = immutable_list_3.__len__()
    bool_2 = var_0.__eq__(bool_0)
    immutable_list_4 = module_0.ImmutableList(is_empty=bool_1)
    var_1 = immutable_list_4.reduce(bool_0, bool_1)
    var_2 = immutable_list_0.__len__()
    immutable_list_5 = immutable_list_4.unshift(bool_1)
    var_3 = immutable_list_4.reduce(var_1, var_1)
    immutable_list_4.map(bool_0)


def test_case_9():
    generic_0 = module_1.Generic()
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.append(bool_0)
    none_type_0 = None
    immutable_list_2 = module_0.ImmutableList(bool_0, none_type_0, none_type_0)
    immutable_list_3 = immutable_list_2.unshift(bool_0)
    immutable_list_4 = immutable_list_3.append(generic_0)
    immutable_list_4.map(generic_0)


def test_case_10():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_0.filter(immutable_list_0)


def test_case_11():
    int_0 = 1367
    immutable_list_0 = module_0.ImmutableList(tail=int_0)
    none_type_0 = None
    immutable_list_0.filter(none_type_0)


def test_case_12():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(none_type_0)
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    var_0 = immutable_list_0.find(none_type_0)
    immutable_list_1.find(var_0)


def test_case_13():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.reduce(immutable_list_0, immutable_list_0)
    var_1 = immutable_list_0.__len__()
    var_2 = var_0.reduce(immutable_list_0, var_0)


def test_case_14():
    str_0 = "EJp@;<BO\x0cq~21>"
    list_0 = []
    object_0 = module_2.object(*list_0)
    complex_0 = 1656.25 - 465.011j
    immutable_list_0 = module_0.ImmutableList(complex_0)
    immutable_list_0.reduce(str_0, object_0)


def test_case_15():
    immutable_list_0 = module_0.ImmutableList()


def test_case_16():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(none_type_0)
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_1.find(immutable_list_0)


def test_case_17():
    bytes_0 = b""
    immutable_list_0 = module_0.ImmutableList(is_empty=bytes_0)
    immutable_list_1 = immutable_list_0.unshift(bytes_0)
    none_type_0 = None
    immutable_list_2 = immutable_list_0.__add__(immutable_list_1)
    bool_0 = immutable_list_0.__eq__(immutable_list_2)
    immutable_list_3 = immutable_list_1.append(bytes_0)
    immutable_list_1.find(none_type_0)


def test_case_18():
    str_0 = "\n    Perform left-to-right function composition.\n\n    :param value: argument of first applied function\n    :type value: Any\n    :param functions: list of functions to applied from left-to-right\n    :type functions: List[Function]\n    :returns: result of all functions\n    :rtype: Any\n    "
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(str_0, none_type_0)
    immutable_list_1 = immutable_list_0.unshift(str_0)
    var_0 = immutable_list_1.__len__()
    immutable_list_0.find(var_0)


def test_case_19():
    none_type_0 = None
    bytes_0 = b"\x94\xdc\x0fB\xf3:"
    immutable_list_0 = module_0.ImmutableList(bytes_0)
    immutable_list_1 = immutable_list_0.append(none_type_0)
    immutable_list_1.reduce(none_type_0, none_type_0)


def test_case_20():
    str_0 = "\n    Perform left-to-right function composition.\n\n    :param value: argument of first applied function\n    :type value: Any\n    :param functions: list of functions to applied from left-to-right\n    :type functions: List[Function]\n    :returns: result of all functions\n    :rtype: Any\n    "
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(str_0, none_type_0)
    immutable_list_0.find(none_type_0)


def test_case_21():
    bytes_0 = b""
    immutable_list_0 = module_0.ImmutableList(is_empty=bytes_0)
    immutable_list_1 = immutable_list_0.unshift(bytes_0)
    none_type_0 = None
    immutable_list_2 = immutable_list_0.__add__(immutable_list_1)
    bool_0 = immutable_list_0.__eq__(immutable_list_2)
    immutable_list_1.find(none_type_0)


def test_case_22():
    bytes_0 = b""
    immutable_list_0 = module_0.ImmutableList(is_empty=bytes_0)
    immutable_list_1 = immutable_list_0.unshift(bytes_0)
    none_type_0 = None
    immutable_list_2 = module_0.ImmutableList(bytes_0)
    bool_0 = immutable_list_0.__eq__(immutable_list_2)
    immutable_list_1.find(none_type_0)
