# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.immutable_list as module_0


def test_case_0():
    immutable_list_0 = module_0.ImmutableList()
    bool_0 = immutable_list_0.__eq__(immutable_list_0)


def test_case_1():
    immutable_list_0 = module_0.ImmutableList()
    bytes_0 = b"'\xe7\xc7\xa9\xe7\x13\x8c\xc2"
    immutable_list_1 = immutable_list_0.append(bytes_0)
    bool_0 = immutable_list_1.__eq__(immutable_list_0)
    immutable_list_0.filter(bool_0)


def test_case_2():
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(bool_0, is_empty=bool_0)
    immutable_list_1 = immutable_list_0.__add__(immutable_list_0)
    immutable_list_0.find(immutable_list_0)


def test_case_3():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_0.__add__(none_type_0)


def test_case_4():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.__len__()
    immutable_list_0.map(var_0)


def test_case_5():
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(bool_0, is_empty=bool_0)
    var_0 = immutable_list_0.__len__()
    immutable_list_0.find(immutable_list_0)


def test_case_6():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.to_list()
    str_0 = var_0.__str__()


def test_case_7():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    var_0 = immutable_list_1.to_list()
    immutable_list_1.find(immutable_list_1)


def test_case_8():
    str_0 = "IS,vB#ObyAa1p)-BUWa"
    int_0 = 524
    dict_0 = {str_0: int_0}
    immutable_list_0 = module_0.ImmutableList()
    int_1 = -1816
    bool_0 = False
    immutable_list_1 = module_0.ImmutableList(is_empty=bool_0)
    var_0 = immutable_list_1.find(int_1)
    immutable_list_2 = immutable_list_1.unshift(immutable_list_1)
    immutable_list_3 = immutable_list_2.append(dict_0)
    immutable_list_4 = module_0.ImmutableList()
    immutable_list_3.map(var_0)


def test_case_9():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_0.filter(immutable_list_0)


def test_case_10():
    complex_0 = 3596.546 + 1629.96525j
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(tail=none_type_0)
    var_0 = immutable_list_0.find(complex_0)


def test_case_11():
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(bool_0, is_empty=bool_0)
    immutable_list_0.find(immutable_list_0)


def test_case_12():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.reduce(immutable_list_0, immutable_list_0)
    immutable_list_0.filter(var_0)


def test_case_13():
    immutable_list_0 = module_0.ImmutableList()


def test_case_14():
    immutable_list_0 = module_0.ImmutableList()
    str_0 = immutable_list_0.__str__()
    bool_0 = immutable_list_0.__eq__(immutable_list_0)
    immutable_list_1 = immutable_list_0.__len__()
    immutable_list_2 = immutable_list_0.unshift(immutable_list_0)


def test_case_15():
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(bool_0, is_empty=bool_0)
    immutable_list_1 = immutable_list_0.append(immutable_list_0)
    immutable_list_0.find(immutable_list_0)


def test_case_16():
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(bool_0, is_empty=bool_0)
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_0.find(immutable_list_0)


def test_case_17():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    var_0 = immutable_list_1.append(immutable_list_1)
    immutable_list_1.find(immutable_list_1)


def test_case_18():
    str_0 = "\n        Transform Maybe to Try.\n\n        :returns: successfully Try with previous value when Maybe is not empty, othercase not successfully Try with None\n        :rtype: Try[A]\n        "
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(str_0)
    var_0 = immutable_list_1.__len__()
    immutable_list_0.map(str_0)


def test_case_19():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_1.find(immutable_list_1)


def test_case_20():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.__add__(immutable_list_0)
    var_0 = immutable_list_0.find(immutable_list_0)
    var_1 = immutable_list_0.reduce(var_0, immutable_list_1)
    var_1.filter(var_1)


def test_case_21():
    bytes_0 = b""
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.to_list()
    bool_0 = immutable_list_0.__eq__(immutable_list_0)
    immutable_list_1 = immutable_list_0.unshift(bytes_0)
    var_1 = immutable_list_0.find(immutable_list_0)
    immutable_list_1.reduce(bytes_0, var_0)


def test_case_22():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    bool_0 = immutable_list_0.__eq__(immutable_list_1)
    immutable_list_1.find(immutable_list_1)


def test_case_23():
    float_0 = 2805.5
    immutable_list_0 = module_0.ImmutableList(float_0)
    none_type_0 = None
    immutable_list_1 = module_0.ImmutableList(tail=none_type_0)
    immutable_list_2 = immutable_list_0.__add__(immutable_list_1)
    bool_0 = immutable_list_1.__eq__(none_type_0)
    str_0 = immutable_list_0.__str__()
    set_0 = {float_0}
    bool_1 = immutable_list_0.__eq__(set_0)
    immutable_list_0.reduce(bool_1, str_0)
