# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.immutable_list as module_0
import builtins as module_1
import typing as module_2


def test_case_0():
    none_type_0 = None
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(bool_0)
    bool_1 = immutable_list_0.__eq__(immutable_list_0)
    immutable_list_0.find(none_type_0)


def test_case_1():
    str_0 = "\n        Transform Maybe to Try.\n\n        :returns: Lazy mon\nd with function returning previous value in other case Left with None\n        :rtype: Lazy[Function() -> (A | N4ne)]\n        "
    immutable_list_0 = module_0.ImmutableList(str_0)
    bool_0 = immutable_list_0.__eq__(str_0)
    immutable_list_0.find(immutable_list_0)


def test_case_2():
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(bool_0)
    var_0 = immutable_list_0.unshift(bool_0)
    immutable_list_0.find(immutable_list_0)


def test_case_3():
    bytes_0 = b"\x95\xeeUlMo\r\x0f|"
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_0.__add__(bytes_0)


def test_case_4():
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.__len__()
    var_0.reduce(bool_0, bool_0)


def test_case_5():
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(bool_0)
    var_0 = immutable_list_0.__len__()
    immutable_list_0.find(immutable_list_0)


def test_case_6():
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(bool_0)
    immutable_list_1 = immutable_list_0.to_list()
    immutable_list_0.find(immutable_list_0)


def test_case_7():
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(bool_0)
    immutable_list_1 = immutable_list_0.unshift(bool_0)
    var_0 = immutable_list_1.to_list()
    immutable_list_0.find(immutable_list_0)


def test_case_8():
    immutable_list_0 = module_0.ImmutableList()
    bytes_0 = b"\xa8S^"
    immutable_list_1 = module_0.ImmutableList()
    immutable_list_1.map(bytes_0)


def test_case_9():
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(tail=bool_0)
    immutable_list_1 = immutable_list_0.append(bool_0)
    immutable_list_2 = module_0.ImmutableList(is_empty=bool_0)
    immutable_list_3 = module_0.ImmutableList()
    var_0 = immutable_list_3.find(bool_0)
    immutable_list_1.map(var_0)


def test_case_10():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_0.filter(immutable_list_0)


def test_case_11():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_2 = immutable_list_0.unshift(immutable_list_0)
    var_0 = immutable_list_0.reduce(immutable_list_2, immutable_list_2)
    str_0 = immutable_list_1.__str__()
    immutable_list_2.filter(var_0)


def test_case_12():
    dict_0 = {}
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.find(immutable_list_0)
    var_0.map(dict_0)


def test_case_13():
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(bool_0)
    immutable_list_0.find(immutable_list_0)


def test_case_14():
    none_type_0 = None
    set_0 = {none_type_0}
    object_0 = module_1.object()
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(is_empty=bool_0)
    immutable_list_1 = immutable_list_0.unshift(object_0)
    immutable_list_1.reduce(set_0, set_0)


def test_case_15():
    immutable_list_0 = module_0.ImmutableList()


def test_case_16():
    none_type_0 = None
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(bool_0)
    str_0 = immutable_list_0.__str__()
    immutable_list_0.find(none_type_0)


def test_case_17():
    none_type_0 = None
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(bool_0)
    immutable_list_1 = immutable_list_0.append(none_type_0)
    immutable_list_0.find(none_type_0)


def test_case_18():
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(bool_0)
    immutable_list_1 = immutable_list_0.unshift(bool_0)
    immutable_list_2 = immutable_list_1.append(bool_0)
    immutable_list_0.find(immutable_list_0)


def test_case_19():
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(bool_0)
    immutable_list_1 = immutable_list_0.unshift(bool_0)
    immutable_list_1.find(bool_0)


def test_case_20():
    str_0 = "\n        Transform Maybe to Try.\n\n        :returns: Lazy mon\nd with function returning previous value in other case Left with None\n        :rtype: Lazy[Function() -> (A | N4ne)]\n        "
    immutable_list_0 = module_0.ImmutableList(str_0)
    immutable_list_1 = module_0.ImmutableList(is_empty=immutable_list_0)
    bool_0 = immutable_list_0.__eq__(immutable_list_1)
    immutable_list_0.find(immutable_list_1)


def test_case_21():
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(bool_0)
    immutable_list_1 = immutable_list_0.unshift(bool_0)
    bool_1 = immutable_list_1.__eq__(immutable_list_0)
    none_type_0 = None
    immutable_list_0.find(none_type_0)


def test_case_22():
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(bool_0)
    immutable_list_1 = immutable_list_0.unshift(bool_0)
    var_0 = immutable_list_1.__len__()
    immutable_list_0.find(immutable_list_0)


def test_case_23():
    generic_0 = module_2.Generic()
    int_0 = -2584
    tuple_0 = (generic_0, int_0, int_0)
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.__add__(immutable_list_0)
    var_0 = immutable_list_0.__len__()
    var_1 = immutable_list_0.find(tuple_0)
    none_type_0 = None
    immutable_list_2 = module_0.ImmutableList(tuple_0, none_type_0)
    var_2 = immutable_list_0.__len__()
    immutable_list_2.reduce(var_0, int_0)
