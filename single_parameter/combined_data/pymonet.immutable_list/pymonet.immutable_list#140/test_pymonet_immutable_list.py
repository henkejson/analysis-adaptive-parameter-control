# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.immutable_list as module_0


def test_case_0():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.__add__(immutable_list_0)
    bool_0 = immutable_list_0.__eq__(immutable_list_0)
    str_0 = immutable_list_1.__str__()
    var_0 = immutable_list_0.find(immutable_list_0)


def test_case_1():
    str_0 = "Cb\x0bf:)\n\nl(U]OXc:"
    immutable_list_0 = module_0.ImmutableList(is_empty=str_0)
    immutable_list_1 = immutable_list_0.append(immutable_list_0)
    bool_0 = immutable_list_1.__eq__(immutable_list_0)
    immutable_list_2 = immutable_list_1.unshift(immutable_list_0)
    immutable_list_2.find(bool_0)


def test_case_2():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.__add__(immutable_list_0)


def test_case_3():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.__len__()
    var_1 = immutable_list_0.reduce(var_0, var_0)
    immutable_list_0.__add__(var_0)


def test_case_4():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.__len__()


def test_case_5():
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(bool_0)
    var_0 = immutable_list_0.__len__()
    immutable_list_0.find(immutable_list_0)


def test_case_6():
    bool_0 = True
    str_0 = "8:.$+aG)PhAk"
    immutable_list_0 = module_0.ImmutableList(str_0)
    immutable_list_0.map(bool_0)


def test_case_7():
    immutable_list_0 = module_0.ImmutableList()
    str_0 = immutable_list_0.__str__()
    immutable_list_1 = module_0.ImmutableList()
    immutable_list_2 = immutable_list_0.append(immutable_list_0)
    var_0 = immutable_list_0.to_list()
    immutable_list_3 = immutable_list_1.append(immutable_list_0)
    immutable_list_2.map(var_0)


def test_case_8():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_0.filter(immutable_list_0)


def test_case_9():
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(bool_0)
    immutable_list_0.find(immutable_list_0)


def test_case_10():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.reduce(immutable_list_0, immutable_list_0)


def test_case_11():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(none_type_0)
    immutable_list_1 = immutable_list_0.append(none_type_0)
    immutable_list_2 = immutable_list_0.append(none_type_0)
    str_0 = immutable_list_0.__str__()
    str_1 = immutable_list_2.__str__()
    var_0 = immutable_list_2.find(str_1)
    bool_0 = False
    var_1 = immutable_list_0.reduce(var_0, bool_0)
    var_2 = immutable_list_0.reduce(var_1, immutable_list_0)
    immutable_list_3 = immutable_list_0.unshift(var_2)
    var_3 = immutable_list_2.find(immutable_list_3)
    immutable_list_4 = module_0.ImmutableList()
    var_4 = immutable_list_4.reduce(none_type_0, none_type_0)
    bool_1 = True
    immutable_list_5 = module_0.ImmutableList(bool_1)
    immutable_list_5.reduce(var_4, none_type_0)


def test_case_12():
    immutable_list_0 = module_0.ImmutableList()


def test_case_13():
    int_0 = 1040
    immutable_list_0 = module_0.ImmutableList()
    list_0 = [int_0]
    immutable_list_1 = immutable_list_0.unshift(int_0)
    immutable_list_1.find(list_0)


def test_case_14():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_2 = immutable_list_1.__add__(immutable_list_1)
    immutable_list_3 = immutable_list_0.unshift(immutable_list_2)
    immutable_list_2.find(immutable_list_0)


def test_case_15():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.__add__(immutable_list_0)
    immutable_list_2 = immutable_list_0.__add__(immutable_list_0)
    bool_0 = immutable_list_0.__eq__(immutable_list_0)
    var_0 = immutable_list_0.find(immutable_list_0)
    str_0 = immutable_list_0.__str__()
    immutable_list_2.filter(immutable_list_1)


def test_case_16():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_2 = immutable_list_1.__add__(immutable_list_1)
    immutable_list_3 = immutable_list_0.unshift(immutable_list_2)
    var_0 = immutable_list_3.__len__()
    immutable_list_2.find(var_0)


def test_case_17():
    str_0 = "\n    The Either type represents values with two possibilities: B value of type Either[A, B] is either Left[A or Right[B]\n    But not both in the same time.\n    "
    immutable_list_0 = module_0.ImmutableList(is_empty=str_0)
    immutable_list_1 = module_0.ImmutableList()
    immutable_list_2 = immutable_list_1.__add__(immutable_list_1)
    var_0 = immutable_list_1.find(str_0)
    immutable_list_3 = immutable_list_1.__add__(immutable_list_1)
    immutable_list_4 = immutable_list_3.append(var_0)
    bool_0 = immutable_list_1.__eq__(immutable_list_1)
    str_1 = immutable_list_3.__str__()
    var_1 = immutable_list_1.find(immutable_list_1)
    var_2 = immutable_list_3.reduce(var_1, var_0)
    str_2 = immutable_list_1.__str__()
    immutable_list_5 = immutable_list_4.unshift(immutable_list_4)
    immutable_list_5.reduce(var_1, immutable_list_4)


def test_case_18():
    str_0 = "\n    The Either type represents values with two possibilities: B value of type Either[A, B] is either Left[A or Right[B]\n    But not both in the same time.\n    "
    immutable_list_0 = module_0.ImmutableList(is_empty=str_0)
    immutable_list_1 = module_0.ImmutableList(immutable_list_0)
    immutable_list_2 = immutable_list_0.__add__(immutable_list_0)
    bool_0 = immutable_list_0.__eq__(immutable_list_1)
    immutable_list_1.find(bool_0)
