# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.immutable_list as module_0


def test_case_0():
    immutable_list_0 = module_0.ImmutableList()
    bool_0 = immutable_list_0.__eq__(immutable_list_0)
    var_0 = immutable_list_0.to_list()
    var_1 = immutable_list_0.find(var_0)
    var_0.unshift(immutable_list_0)


def test_case_1():
    immutable_list_0 = module_0.ImmutableList()
    none_type_0 = None
    immutable_list_1 = module_0.ImmutableList(
        immutable_list_0, is_empty=immutable_list_0
    )
    bool_0 = immutable_list_1.__eq__(none_type_0)
    immutable_list_1.find(immutable_list_1)


def test_case_2():
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(bool_0)
    immutable_list_1 = immutable_list_0.unshift(bool_0)
    immutable_list_0.find(immutable_list_0)


def test_case_3():
    set_0 = set()
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(is_empty=bool_0)
    immutable_list_1 = module_0.ImmutableList(bool_0, immutable_list_0)
    bool_1 = False
    immutable_list_2 = module_0.ImmutableList(is_empty=bool_1)
    immutable_list_3 = immutable_list_2.append(immutable_list_1)
    immutable_list_3.__add__(set_0)


def test_case_4():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.__len__()
    immutable_list_0.filter(var_0)


def test_case_5():
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(bool_0)
    var_0 = immutable_list_0.__len__()


def test_case_6():
    immutable_list_0 = module_0.ImmutableList()
    str_0 = immutable_list_0.__str__()


def test_case_7():
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(tail=bool_0)
    immutable_list_0.to_list()


def test_case_8():
    none_type_0 = None
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(is_empty=none_type_0)
    immutable_list_1 = immutable_list_0.append(none_type_0)
    immutable_list_2 = module_0.ImmutableList(is_empty=bool_0)
    bool_1 = immutable_list_2.__eq__(bool_0)
    immutable_list_3 = immutable_list_2.__add__(immutable_list_2)
    var_0 = immutable_list_2.__len__()
    immutable_list_4 = immutable_list_2.append(none_type_0)
    var_1 = immutable_list_2.__len__()
    var_2 = immutable_list_4.to_list()
    immutable_list_2.map(var_1)


def test_case_9():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_0.filter(immutable_list_0)


def test_case_10():
    list_0 = []
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(tail=list_0, is_empty=bool_0)
    none_type_0 = None
    immutable_list_0.filter(none_type_0)


def test_case_11():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.find(immutable_list_0)
    immutable_list_0.filter(var_0)


def test_case_12():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(none_type_0)
    var_0 = immutable_list_0.reduce(immutable_list_0, none_type_0)
    var_1 = immutable_list_0.find(immutable_list_0)
    immutable_list_0.filter(none_type_0)


def test_case_13():
    none_type_0 = None
    dict_0 = {
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        none_type_0: none_type_0,
    }
    bool_0 = False
    none_type_1 = None
    immutable_list_0 = module_0.ImmutableList(bool_0, none_type_1, none_type_1)
    immutable_list_0.reduce(none_type_0, dict_0)


def test_case_14():
    immutable_list_0 = module_0.ImmutableList()


def test_case_15():
    set_0 = set()
    immutable_list_0 = module_0.ImmutableList(tail=set_0)
    var_0 = immutable_list_0.find(set_0)
    var_1 = immutable_list_0.reduce(var_0, var_0)
    var_2 = immutable_list_0.reduce(set_0, immutable_list_0)
    none_type_0 = None
    immutable_list_0.append(none_type_0)


def test_case_16():
    str_0 = "J={iV i&M/"
    immutable_list_0 = module_0.ImmutableList(str_0)
    immutable_list_1 = immutable_list_0.append(immutable_list_0)
    var_0 = immutable_list_1.__len__()
    immutable_list_1.find(immutable_list_0)


def test_case_17():
    str_0 = "\n        Return rejected Task with stored value argument.\n\n        :param value: value to store in Task\n        :type value: A\n        :returns: rejected Task\n        :rtype: Task[Function(reject, _) -> A]\n        "
    immutable_list_0 = module_0.ImmutableList(str_0, str_0)
    immutable_list_1 = immutable_list_0.unshift(str_0)
    var_0 = immutable_list_1.__len__()
    immutable_list_0.reduce(var_0, var_0)


def test_case_18():
    none_type_0 = None
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(is_empty=none_type_0)
    immutable_list_1 = immutable_list_0.append(none_type_0)
    immutable_list_2 = immutable_list_1.append(none_type_0)
    bool_1 = immutable_list_2.__eq__(bool_0)
    immutable_list_3 = immutable_list_2.__add__(immutable_list_2)
    var_0 = immutable_list_2.__len__()
    immutable_list_4 = immutable_list_2.append(none_type_0)
    var_1 = immutable_list_2.__len__()
    var_2 = immutable_list_4.to_list()
    immutable_list_2.map(var_1)


def test_case_19():
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(bool_0)
    immutable_list_0.find(immutable_list_0)


def test_case_20():
    list_0 = []
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(list_0, list_0, bool_0)
    immutable_list_0.find(immutable_list_0)


def test_case_21():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    immutable_list_0 = module_0.ImmutableList(list_0, is_empty=list_0)
    bool_1 = False
    immutable_list_1 = module_0.ImmutableList(bool_1)
    bool_2 = immutable_list_1.__eq__(immutable_list_0)
    immutable_list_1.find(list_0)


def test_case_22():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    immutable_list_0 = module_0.ImmutableList(list_0, is_empty=list_0)
    immutable_list_1 = immutable_list_0.append(immutable_list_0)
    bool_1 = immutable_list_1.__eq__(immutable_list_0)
    immutable_list_0.find(bool_0)
