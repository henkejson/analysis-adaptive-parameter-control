# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.immutable_list as module_0


def test_case_0():
    immutable_list_0 = module_0.ImmutableList()
    bool_0 = immutable_list_0.__eq__(immutable_list_0)


def test_case_1():
    immutable_list_0 = module_0.ImmutableList()
    str_0 = immutable_list_0.__str__()
    bool_0 = immutable_list_0.__eq__(str_0)
    var_0 = immutable_list_0.find(immutable_list_0)
    immutable_list_0.filter(var_0)


def test_case_2():
    immutable_list_0 = module_0.ImmutableList()
    float_0 = -2345.429006581764
    immutable_list_1 = immutable_list_0.append(float_0)
    immutable_list_2 = immutable_list_0.find(immutable_list_1)


def test_case_3():
    immutable_list_0 = module_0.ImmutableList()
    float_0 = -2345.16216
    immutable_list_1 = module_0.ImmutableList()
    immutable_list_1.__add__(float_0)


def test_case_4():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.__len__()
    var_1 = immutable_list_0.find(var_0)
    immutable_list_0.filter(var_1)


def test_case_5():
    bool_0 = True
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(bool_0, none_type_0)
    var_0 = immutable_list_0.__len__()
    immutable_list_0.find(var_0)


def test_case_6():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList()
    bool_0 = immutable_list_0.to_list()
    immutable_list_0.filter(none_type_0)


def test_case_7():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    var_0 = immutable_list_1.to_list()
    immutable_list_1.find(immutable_list_0)


def test_case_8():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.to_list()
    bool_0 = immutable_list_0.__eq__(immutable_list_0)
    int_0 = -1733
    var_1 = immutable_list_0.reduce(int_0, bool_0)
    immutable_list_0.map(var_0)


def test_case_9():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.append(immutable_list_0)
    str_0 = var_0.__str__()
    bool_0 = immutable_list_0.__eq__(var_0)
    immutable_list_1 = var_0.append(immutable_list_0)
    var_1 = immutable_list_1.__len__()
    var_0.map(var_1)


def test_case_10():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_0.filter(immutable_list_0)


def test_case_11():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.append(immutable_list_0)
    var_0 = immutable_list_0.__len__()
    var_1 = immutable_list_1.find(var_0)
    immutable_list_1.filter(var_1)


def test_case_12():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.find(immutable_list_0)
    immutable_list_0.filter(var_0)


def test_case_13():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.reduce(immutable_list_0, immutable_list_0)
    var_0 = immutable_list_1.find(immutable_list_0)
    immutable_list_1.filter(var_0)


def test_case_14():
    none_type_0 = None
    str_0 = "\n        Call argument function with args in try-catch.\n        when function don't raise exception, not successfully when raise.\n\n        :params fn: function to call and store in monad\n        :type fn: Function(*args) -> A\n        :params *args:\n        :type fn: List\n        :retruns: Successfully monad Try when function don't raise exception, not successfully when raise\n        :rtype: Try[A]\n        "
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(str_0)
    immutable_list_1.reduce(none_type_0, none_type_0)


def test_case_15():
    immutable_list_0 = module_0.ImmutableList()


def test_case_16():
    immutable_list_0 = module_0.ImmutableList()
    str_0 = immutable_list_0.__str__()
    var_0 = immutable_list_0.find(immutable_list_0)
    immutable_list_0.filter(var_0)


def test_case_17():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_1.find(immutable_list_0)


def test_case_18():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_2 = immutable_list_1.__add__(immutable_list_0)
    immutable_list_1.find(immutable_list_2)


def test_case_19():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    var_0 = immutable_list_1.__len__()
    immutable_list_1.find(immutable_list_0)


def test_case_20():
    immutable_list_0 = module_0.ImmutableList()
    int_0 = -1849
    bool_0 = True
    immutable_list_1 = module_0.ImmutableList(int_0, is_empty=bool_0)
    none_type_0 = None
    immutable_list_2 = immutable_list_0.append(immutable_list_0)
    immutable_list_1.reduce(none_type_0, none_type_0)


def test_case_21():
    immutable_list_0 = module_0.ImmutableList()
    bool_0 = immutable_list_0.__eq__(immutable_list_0)
    immutable_list_1 = immutable_list_0.append(bool_0)
    bool_1 = immutable_list_1.__eq__(immutable_list_0)
    var_0 = immutable_list_1.__len__()
    var_1 = immutable_list_1.find(var_0)
    immutable_list_0.filter(var_0)


def test_case_22():
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(bool_0)
    immutable_list_0.find(bool_0)


def test_case_23():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    bool_0 = immutable_list_1.__eq__(immutable_list_0)
    immutable_list_2 = immutable_list_1.__add__(immutable_list_0)
    immutable_list_1.find(immutable_list_2)
