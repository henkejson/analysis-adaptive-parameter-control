# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.immutable_list as module_0


def test_case_0():
    bytes_0 = b"\xc0@l\xd8\x1as\xeb8\xa5G\x94\xfelVD"
    immutable_list_0 = module_0.ImmutableList(bytes_0, is_empty=bytes_0)
    bool_0 = immutable_list_0.__eq__(immutable_list_0)
    var_0 = immutable_list_0.to_list()
    immutable_list_0.find(var_0)


def test_case_1():
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(is_empty=bool_0)
    var_0 = immutable_list_0.find(bool_0)
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    bool_1 = immutable_list_0.__eq__(bool_0)
    immutable_list_1.filter(var_0)


def test_case_2():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_1.find(immutable_list_0)


def test_case_3():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(none_type_0)
    immutable_list_0.__add__(none_type_0)


def test_case_4():
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(is_empty=bool_0)
    var_0 = immutable_list_0.__len__()
    var_0.to_list()


def test_case_5():
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(bool_0, is_empty=bool_0)
    immutable_list_1 = immutable_list_0.__len__()
    immutable_list_0.filter(bool_0)


def test_case_6():
    immutable_list_0 = module_0.ImmutableList()
    str_0 = immutable_list_0.__str__()


def test_case_7():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    var_0 = immutable_list_1.to_list()
    immutable_list_1.find(var_0)


def test_case_8():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_0.map(immutable_list_0)


def test_case_9():
    bytes_0 = b"9"
    immutable_list_0 = module_0.ImmutableList(tail=bytes_0)
    immutable_list_0.map(immutable_list_0)


def test_case_10():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_0.filter(immutable_list_0)


def test_case_11():
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(is_empty=bool_0)
    var_0 = immutable_list_0.find(bool_0)
    immutable_list_0.filter(var_0)


def test_case_12():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.reduce(immutable_list_0, immutable_list_0)
    var_0.filter(var_0)


def test_case_13():
    str_0 = "qd#7DEIG$N? &z"
    immutable_list_0 = module_0.ImmutableList(str_0, is_empty=str_0)
    var_0 = immutable_list_0.to_list()
    immutable_list_0.reduce(var_0, immutable_list_0)


def test_case_14():
    immutable_list_0 = module_0.ImmutableList()


def test_case_15():
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(bool_0, is_empty=bool_0)
    immutable_list_1 = immutable_list_0.append(immutable_list_0)
    immutable_list_0.filter(bool_0)


def test_case_16():
    str_0 = "\n        Call success_callback function with monad value when monad is not successfully.\n\n        :params fail_callback: function to apply with monad value.\n        :type fail_callback: Function(A)\n        :returns: self\n        :rtype: Try[A]\n        "
    immutable_list_0 = module_0.ImmutableList(str_0, is_empty=str_0)
    immutable_list_1 = immutable_list_0.__add__(immutable_list_0)
    var_0 = immutable_list_1.append(immutable_list_0)
    immutable_list_0.find(var_0)


def test_case_17():
    str_0 = "qd#7DEIG$N? &z"
    immutable_list_0 = module_0.ImmutableList(str_0, is_empty=str_0)
    immutable_list_1 = immutable_list_0.__add__(immutable_list_0)
    var_0 = immutable_list_1.__len__()
    immutable_list_0.find(str_0)


def test_case_18():
    bytes_0 = b"\x8e\x12\xa9\x03\x94u\x83\xa7\xa9\xd1\xdd!}"
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(bool_0, is_empty=bool_0)
    immutable_list_1 = immutable_list_0.append(immutable_list_0)
    bool_1 = immutable_list_1.__eq__(immutable_list_0)
    immutable_list_0.find(bytes_0)


def test_case_19():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.unshift(immutable_list_0)
    var_0.filter(var_0)


def test_case_20():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(tail=none_type_0)
    immutable_list_1 = module_0.ImmutableList()
    immutable_list_2 = module_0.ImmutableList(
        none_type_0, immutable_list_0, none_type_0
    )
    immutable_list_3 = immutable_list_2.unshift(immutable_list_2)
    var_0 = immutable_list_1.find(none_type_0)
    var_1 = immutable_list_1.find(var_0)
    immutable_list_3.reduce(var_1, var_0)


def test_case_21():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(is_empty=none_type_0)
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_2 = immutable_list_1.append(immutable_list_1)
    var_0 = immutable_list_0.find(immutable_list_1)
    str_0 = immutable_list_1.to_list()
    immutable_list_3 = immutable_list_0.__add__(immutable_list_0)
    bool_0 = immutable_list_3.__eq__(immutable_list_1)
    immutable_list_2.find(immutable_list_0)


def test_case_22():
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(bool_0, is_empty=bool_0)
    immutable_list_0.find(immutable_list_0)
