# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import typed_ast._ast3 as module_0
import py_backwards.transformers.yield_from as module_1
import typed_ast.ast3 as module_2


def test_case_0():
    class_def_0 = module_0.ClassDef()
    yield_from_transformer_0 = module_1.YieldFromTransformer(class_def_0)
    a_s_t_0 = yield_from_transformer_0.visit(class_def_0)


def test_case_1():
    aug_store_0 = module_0.AugStore()
    yield_from_transformer_0 = module_1.YieldFromTransformer(aug_store_0)


def test_case_2():
    str_0 = "Z"
    yield_from_transformer_0 = module_1.YieldFromTransformer(str_0)
    var_0 = module_2.parse(str_0)
    a_s_t_0 = yield_from_transformer_0.visit(var_0)


def test_case_3():
    complex_0 = 1535.7992117681354 + 107.5j
    yield_from_transformer_0 = module_1.YieldFromTransformer(complex_0)
    str_0 = "Yy"
    while_0 = module_0.While(*str_0)
    a_s_t_0 = yield_from_transformer_0.visit(while_0)
    yield_from_transformer_1 = module_1.YieldFromTransformer(str_0)
    type_ignore_0 = module_0.type_ignore()
    dict_0 = {str_0: str_0}
    var_0 = module_2.parse(str_0)
    a_s_t_1 = yield_from_transformer_1.visit(var_0)
    yield_from_transformer_2 = module_1.YieldFromTransformer(type_ignore_0)
    module_0.Num(*str_0, **dict_0)
