# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import typed_ast._ast3 as module_0
import py_backwards.transformers.return_from_generator as module_1
import typed_ast.ast3 as module_2


def test_case_0():
    mod_0 = module_0.Mod()
    return_from_generator_transformer_0 = module_1.ReturnFromGeneratorTransformer(mod_0)


def test_case_1():
    str_0 = "body"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    invert_0 = module_0.Invert(**dict_0)
    return_from_generator_transformer_0 = module_1.ReturnFromGeneratorTransformer(
        dict_0
    )
    function_def_0 = return_from_generator_transformer_0.visit_FunctionDef(invert_0)


def test_case_2():
    str_0 = "body"
    str_1 = ""
    dict_0 = {str_1: str_1, str_1: str_1, str_0: str_1, str_1: str_0}
    invert_0 = module_0.Invert(**dict_0)
    return_from_generator_transformer_0 = module_1.ReturnFromGeneratorTransformer(
        invert_0
    )
    return_from_generator_transformer_1 = module_2.walk(str_1)
    none_type_0 = None
    return_from_generator_transformer_2 = module_1.ReturnFromGeneratorTransformer(
        none_type_0
    )
    function_def_0 = return_from_generator_transformer_0.visit_FunctionDef(invert_0)
    module_0.Raise(*none_type_0)


def test_case_3():
    str_0 = "body"
    str_1 = "\t>"
    dict_0 = {str_1: str_1, str_1: str_1, str_0: str_1, str_1: str_0}
    invert_0 = module_0.Invert(**dict_0)
    return_from_generator_transformer_0 = module_1.ReturnFromGeneratorTransformer(
        invert_0
    )
    return_from_generator_transformer_1 = module_1.ReturnFromGeneratorTransformer(
        invert_0
    )
    return_from_generator_transformer_2 = module_1.ReturnFromGeneratorTransformer(
        invert_0
    )
    var_0 = module_2.parse(str_0)
    function_def_0 = return_from_generator_transformer_0.visit_FunctionDef(var_0)
    module_2.literal_eval(invert_0)
