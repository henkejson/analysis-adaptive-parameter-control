# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import typed_ast._ast3 as module_0
import py_backwards.transformers.return_from_generator as module_1
import typed_ast.ast3 as module_2


def test_case_0():
    ext_slice_0 = module_0.ExtSlice()
    return_from_generator_transformer_0 = module_1.ReturnFromGeneratorTransformer(
        ext_slice_0
    )


def test_case_1():
    ext_slice_0 = module_0.ExtSlice()
    return_from_generator_transformer_0 = module_1.ReturnFromGeneratorTransformer(
        ext_slice_0
    )
    set_0 = set()
    list_0 = [
        return_from_generator_transformer_0,
        set_0,
        set_0,
        return_from_generator_transformer_0,
    ]
    function_def_0 = module_0.FunctionDef(*list_0)
    function_def_1 = return_from_generator_transformer_0.visit_FunctionDef(
        function_def_0
    )


def test_case_2():
    ext_slice_0 = module_0.ExtSlice()
    return_from_generator_transformer_0 = module_1.ReturnFromGeneratorTransformer(
        ext_slice_0
    )
    set_0 = {ext_slice_0, return_from_generator_transformer_0, ext_slice_0}
    list_0 = [
        return_from_generator_transformer_0,
        set_0,
        set_0,
        return_from_generator_transformer_0,
    ]
    function_def_0 = module_0.FunctionDef(*list_0)
    function_def_1 = return_from_generator_transformer_0.visit_FunctionDef(
        function_def_0
    )


def test_case_3():
    str_0 = "filterfalse"
    none_type_0 = None
    return_from_generator_transformer_0 = module_1.ReturnFromGeneratorTransformer(
        none_type_0
    )
    var_0 = module_2.parse(str_0)
    return_from_generator_transformer_1 = module_1.ReturnFromGeneratorTransformer(var_0)
    function_def_0 = return_from_generator_transformer_1.visit_FunctionDef(var_0)
    var_0.visit_FunctionDef(var_0)
