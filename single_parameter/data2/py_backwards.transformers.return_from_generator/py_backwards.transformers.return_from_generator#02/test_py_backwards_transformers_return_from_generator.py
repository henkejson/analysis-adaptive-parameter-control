# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import py_backwards.transformers.return_from_generator as module_0
import typed_ast._ast3 as module_1
import typed_ast.ast3 as module_2


def test_case_0():
    none_type_0 = None
    return_from_generator_transformer_0 = module_0.ReturnFromGeneratorTransformer(
        none_type_0
    )


def test_case_1():
    pow_0 = module_1.Pow()
    return_from_generator_transformer_0 = module_0.ReturnFromGeneratorTransformer(pow_0)
    var_0 = module_2.dump(pow_0, include_attributes=return_from_generator_transformer_0)
    function_def_0 = module_1.FunctionDef(*var_0)
    function_def_1 = return_from_generator_transformer_0.visit_FunctionDef(
        function_def_0
    )


def test_case_2():
    pow_0 = module_1.Pow()
    return_from_generator_transformer_0 = module_0.ReturnFromGeneratorTransformer(pow_0)
    list_comp_0 = module_1.ListComp()
    var_0 = module_2.iter_child_nodes(list_comp_0)
    list_0 = [return_from_generator_transformer_0, var_0, var_0, var_0]
    function_def_0 = module_1.FunctionDef(*list_0)
    function_def_1 = return_from_generator_transformer_0.visit_FunctionDef(
        function_def_0
    )
    var_0.visit_FunctionDef(return_from_generator_transformer_0)


def test_case_3():
    none_type_0 = None
    pow_0 = module_1.Pow()
    return_from_generator_transformer_0 = module_0.ReturnFromGeneratorTransformer(pow_0)
    return_from_generator_transformer_1 = module_0.ReturnFromGeneratorTransformer(
        none_type_0
    )
    var_0 = return_from_generator_transformer_1.visit(pow_0)
    list_comp_0 = module_1.ListComp()
    var_1 = module_2.iter_child_nodes(list_comp_0)
    var_2 = module_2.dump(pow_0, include_attributes=none_type_0)
    var_3 = module_2.parse(var_2)
    function_def_0 = return_from_generator_transformer_0.visit_FunctionDef(var_3)
    var_1.visit_FunctionDef(var_1)
