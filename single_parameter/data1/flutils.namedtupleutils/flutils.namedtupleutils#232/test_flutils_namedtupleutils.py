# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1


def test_case_0():
    none_type_0 = None
    module_0.to_namedtuple(none_type_0)


def test_case_1():
    complex_0 = 1163.139 + 1394.21275j
    str_0 = "hsZT` mr"
    int_0 = 4472
    bytes_0 = b"\xd2\xff\xf6\x97\xfb\xc7\xd1\x14"
    tuple_0 = (str_0, bytes_0)
    tuple_1 = (complex_0, str_0, int_0, tuple_0)
    dict_0 = {tuple_1: tuple_1, int_0: bytes_0, complex_0: int_0}
    list_0 = [complex_0, int_0, str_0, str_0]
    tuple_2 = (dict_0, list_0)
    var_0 = module_0.to_namedtuple(tuple_2)


def test_case_2():
    str_0 = "Zy6"
    dict_0 = {str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_3():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_4():
    str_0 = "create_module"
    module_0.to_namedtuple(str_0)


def test_case_5():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_6():
    str_0 = "hsZT` mr"
    int_0 = 4472
    bytes_0 = b"\xd2\xff\xf6\x97\xfb\xc7"
    tuple_0 = (str_0, bytes_0)
    dict_0 = {tuple_0: tuple_0, int_0: bytes_0, int_0: int_0}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_7():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_8():
    bytes_0 = b"\x9f>7\xda\x8fy\xe5\x93\x1f\xf8\xe4,n"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    str_0 = "L[>'sgO;D+0Fg6`Uww`-"
    bool_0 = False
    tuple_0 = (str_0, bool_0, bool_0)
    str_1 = "Convert the given ``text`` into a string of escaped UTF8 hexadecimal.\n\n    Args:\n         text (:obj:`str`): The string to convert.\n\n    :rtype:\n        :obj:`str`\n\n            A string with each character of the given ``text`` converted\n            into an escaped UTF8 hexadecimal.\n\n    Example:\n        >>> from flutils.strutils import as_literal_utf8\n        >>> t = '1.â˜… ðŸ›‘'\n        >>> as_escaped_utf8_literal(t)\n        '\\\\x31\\\\x2e\\\\xe2\\\\x98\\\\x85\\\\x20\\\\xf0\\\\x9f\\\\x9b\n        \\\\x91'\n    "
    tuple_1 = (bytes_0, dict_0, tuple_0, str_1)
    module_0.to_namedtuple(tuple_1)


def test_case_9():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(dict_0)
    var_2 = module_0.to_namedtuple(var_1)
    var_3 = module_0.to_namedtuple(var_2)
    var_4 = module_0.to_namedtuple(var_1)


def test_case_10():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0]
    str_0 = "!gb:,\r$Y))?hj)\tP\x0b\x0c2^"
    tuple_1 = (tuple_0, list_0, str_0)
    var_0 = module_0.to_namedtuple(tuple_1)
    complex_0 = -1920 + 42.22386j
    module_0.to_namedtuple(complex_0)


def test_case_11():
    str_0 = "Z?9"
    dict_0 = {str_0: str_0}
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    var_1 = module_0.to_namedtuple(var_0)
    var_2 = module_0.to_namedtuple(var_0)
    module_0.to_namedtuple(str_0)


def test_case_12():
    str_0 = "\ty6"
    dict_0 = {str_0: str_0}
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    var_1 = module_0.to_namedtuple(dict_0)
    var_2 = module_0.to_namedtuple(ordered_dict_0)
    var_3 = module_0.to_namedtuple(var_1)
    var_4 = module_0.to_namedtuple(ordered_dict_0)
    none_type_0 = None
    module_0.to_namedtuple(none_type_0)
