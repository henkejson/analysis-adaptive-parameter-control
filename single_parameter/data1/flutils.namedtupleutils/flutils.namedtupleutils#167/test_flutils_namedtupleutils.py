# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1


def test_case_0():
    bool_0 = True
    module_0.to_namedtuple(bool_0)


def test_case_1():
    bytes_0 = b"\x87\xdand\x8cm\x12\xe5]\x80\xd3C\xa7"
    str_0 = "fJX3E"
    bool_0 = False
    list_0 = [bytes_0, bytes_0, bool_0]
    var_0 = module_0.to_namedtuple(list_0)
    str_1 = "Check if the given ``obj`` has **ANY** of the given ``attrs`` and are\n    callable.\n\n    Args:\n        obj (:obj:`Any <typing.Any>`): The object to check.\n        *attrs (:obj:`str`): The names of the attributes to check.\n\n    :rtype:\n        :obj:`bool`\n\n        * :obj:`True` if ANY of the given ``*attrs`` exist on the given ``obj``\n          and ANY are callable;\n        * :obj:`False` otherwise.\n\n    Example:\n        >>> from flutils.objutils import has_any_callables\n        >>> has_any_callables(dict(),'get','keys','items','values','foo')\n        True\n    "
    dict_0 = {str_0: bytes_0, str_1: str_0}
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    tuple_0 = (bytes_0, ordered_dict_0, bytes_0, ordered_dict_0)
    var_1 = module_0.to_namedtuple(tuple_0)
    var_2 = module_0.to_namedtuple(var_1)
    bool_1 = True
    module_0.to_namedtuple(bool_1)


def test_case_2():
    bytes_0 = b"\x87\xdand\x8cm\x12\xe5]\x80\xd3C\xa7"
    str_0 = "fJX3E"
    dict_0 = {str_0: bytes_0, str_0: str_0}
    tuple_0 = (bytes_0, dict_0, bytes_0, dict_0)
    var_0 = module_0.to_namedtuple(tuple_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_3():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_4():
    bytes_0 = b"\xb0\xce[R\x90\xbe\xc3\x01\xc4\xa21"
    module_0.to_namedtuple(bytes_0)


def test_case_5():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_6():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(dict_0)
    var_2 = module_0.to_namedtuple(var_1)


def test_case_7():
    bytes_0 = b"o\xbf&\xd2\xa4"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    list_0 = [dict_0, dict_0]
    module_0.to_namedtuple(list_0)


def test_case_8():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_9():
    bytes_0 = b"\x87\xdand\x8cm\x12\xe5]\x80\xd3C\xa7"
    str_0 = "fJX3E"
    str_1 = "k[FXxCx$"
    dict_0 = {str_0: bytes_0, str_1: str_0}
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    tuple_0 = (bytes_0, ordered_dict_0, bytes_0, ordered_dict_0)
    var_0 = module_0.to_namedtuple(tuple_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_10():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    bytes_0 = b"\x87\xdand\x8cm\x12\xe5]\x80\xd3C\xa7"
    var_1 = module_0.to_namedtuple(ordered_dict_0)
    str_0 = "fJX3E"
    bool_0 = True
    list_0 = [bytes_0, bytes_0, bool_0]
    var_2 = module_0.to_namedtuple(list_0)
    dict_0 = {str_0: bytes_0, var_0: str_0}
    ordered_dict_1 = module_1.OrderedDict(**dict_0)
    tuple_0 = (bytes_0, ordered_dict_1, bytes_0, ordered_dict_1)
    var_3 = module_0.to_namedtuple(tuple_0)
    var_4 = module_0.to_namedtuple(var_3)
    bool_1 = True
    module_0.to_namedtuple(bool_1)


def test_case_11():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    bytes_0 = b"\x87\xdand\x8cm\x12\xe5]\x80\xd3C\xa7"
    var_1 = module_0.to_namedtuple(ordered_dict_0)
    str_0 = "\rY7"
    bool_0 = True
    list_0 = [var_1, bool_0]
    var_2 = module_0.to_namedtuple(list_0)
    str_1 = "Check if the given ``obj`` has **ANY** of the given ``attrs`` and are\n    callable.\n\n    Args:\n        obj (:obj:`Any <typing.Any>`): The object to check.\n        *attrs (:obj:`str`): The names of the attributes to check.\n\n    :rtype:\n        :obj:`bool`\n\n        * :obj:`True` if ANY of the given ``*attrs`` exist on the given ``obj``\n          and ANY are callable;\n        * :obj:`False` otherwise.\n\n    Example:\n        >>> from flutils.objutils import has_any_callables\n        >>> has_any_callables(dict(),'get','keys','items','values','foo')\n        True\n    "
    dict_0 = {str_0: bytes_0, str_1: str_0}
    ordered_dict_1 = module_1.OrderedDict(**dict_0)
    tuple_0 = (bytes_0, ordered_dict_1, bytes_0, ordered_dict_1)
    var_3 = module_0.to_namedtuple(tuple_0)
    module_1.namedtuple(var_1, var_3, rename=dict_0, defaults=var_2)
