# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import builtins as module_0
import flutils.namedtupleutils as module_1
import collections as module_2


def test_case_0():
    object_0 = module_0.object()
    module_1.to_namedtuple(object_0)


def test_case_1():
    none_type_0 = None
    str_0 = "description"
    dict_0 = {str_0: none_type_0, str_0: none_type_0}
    ordered_dict_0 = module_2.OrderedDict(**dict_0)
    var_0 = module_1.to_namedtuple(ordered_dict_0)
    none_type_1 = None
    module_2.namedtuple(none_type_1, none_type_1)


def test_case_2():
    str_0 = "Qm2"
    dict_0 = {str_0: str_0}
    var_0 = module_1.to_namedtuple(dict_0)
    var_1 = module_1.to_namedtuple(var_0)


def test_case_3():
    str_0 = "OC[hQaPyP3zj#Y*~V'@{"
    module_1.to_namedtuple(str_0)


def test_case_4():
    list_0 = []
    var_0 = module_1.to_namedtuple(list_0)


def test_case_5():
    tuple_0 = ()
    var_0 = module_1.to_namedtuple(tuple_0)
    dict_0 = {var_0: tuple_0}
    var_1 = module_1.to_namedtuple(dict_0)
    var_2 = module_1.to_namedtuple(dict_0)
    var_3 = module_1.to_namedtuple(tuple_0)
    var_4 = module_1.to_namedtuple(var_2)
    var_5 = module_1.to_namedtuple(var_2)
    module_2.namedtuple(var_2, var_4)


def test_case_6():
    dict_0 = {}
    var_0 = module_1.to_namedtuple(dict_0)
    var_1 = module_1.to_namedtuple(var_0)
    list_0 = [dict_0, dict_0, dict_0, dict_0]
    var_2 = module_1.to_namedtuple(var_1)
    var_3 = module_1.to_namedtuple(var_1)
    var_4 = module_1.to_namedtuple(list_0)
    var_5 = module_1.to_namedtuple(list_0)


def test_case_7():
    str_0 = "f:h,xx2\x0c^RGu\r\x0c,V;a#b"
    list_0 = [str_0, str_0, str_0, str_0]
    var_0 = module_1.to_namedtuple(list_0)
    var_1 = module_1.to_namedtuple(var_0)


def test_case_8():
    str_0 = "U6nIk\x0bn"
    none_type_0 = None
    str_1 = "description"
    dict_0 = {str_0: none_type_0, str_1: none_type_0}
    ordered_dict_0 = module_2.OrderedDict(**dict_0)
    var_0 = module_1.to_namedtuple(ordered_dict_0)
    none_type_1 = None
    module_2.namedtuple(none_type_1, none_type_1)


def test_case_9():
    bytes_0 = b"\x8f'\xd9\x9b'V\x1a\x12H|9\x98c\xe4(\x8f\xee\x8b"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_1.to_namedtuple(dict_0)


def test_case_10():
    tuple_0 = ()
    var_0 = module_1.to_namedtuple(tuple_0)


def test_case_11():
    str_0 = "Qm\r"
    dict_0 = {str_0: str_0}
    var_0 = module_1.to_namedtuple(dict_0)
    bool_0 = False
    bool_1 = True
    tuple_0 = (bool_0, var_0, bool_0, bool_1)
    list_0 = [tuple_0, bool_0, bool_0, bool_1]
    module_0.object(*list_0, **var_0)
