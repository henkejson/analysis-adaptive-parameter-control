# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1
import builtins as module_2


def test_case_0():
    complex_0 = -671.01 - 239.882196j
    module_0.to_namedtuple(complex_0)


def test_case_1():
    int_0 = 1124
    tuple_0 = (int_0, int_0)
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_2():
    str_0 = "find_paths"
    dict_0 = {str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    ordered_dict_0 = module_1.OrderedDict()


def test_case_3():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_4():
    bytes_0 = b"\x9b\xc0\x8b"
    module_0.to_namedtuple(bytes_0)


def test_case_5():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_6():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_7():
    str_0 = "find_paths"
    dict_0 = {str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_8():
    str_0 = "0P\rNkb"
    dict_0 = {str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)
    var_2 = module_0.to_namedtuple(var_0)
    var_3 = module_0.to_namedtuple(var_0)


def test_case_9():
    ordered_dict_0 = module_1.OrderedDict()
    list_0 = [ordered_dict_0, ordered_dict_0]
    var_0 = module_0.to_namedtuple(list_0)
    var_1 = module_0.to_namedtuple(list_0)
    var_2 = module_0.to_namedtuple(var_1)


def test_case_10():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_11():
    ordered_dict_0 = module_1.OrderedDict()
    list_0 = [ordered_dict_0, ordered_dict_0]
    var_0 = module_0.to_namedtuple(list_0)


def test_case_12():
    object_0 = module_2.object()
    float_0 = -2572.552
    str_0 = "0P\rNkb"
    dict_0 = {str_0: str_0, float_0: object_0}
    var_0 = module_0.to_namedtuple(dict_0)
    module_0.to_namedtuple(object_0)


def test_case_13():
    bytes_0 = b"\xcf\xd6\xdf\xa0\xaa\x0c\xe6\x81\xe2\xf3>EW\xd6I0\x08\x1c"
    object_0 = module_2.object()
    tuple_0 = (bytes_0, object_0, bytes_0)
    float_0 = -2572.552
    str_0 = "GX+R{"
    tuple_1 = (tuple_0, object_0, float_0, str_0)
    var_0 = module_0.to_namedtuple(tuple_1)
    str_1 = "0P\rNkb"
    dict_0 = {str_1: str_1}
    var_1 = module_0.to_namedtuple(dict_0)
    var_2 = module_0.to_namedtuple(dict_0)
    ordered_dict_0 = module_1.OrderedDict()
    dict_1 = {bytes_0: dict_0}
    module_0.to_namedtuple(dict_1)


def test_case_14():
    complex_0 = -2328.2329 + 1576.625952j
    dict_0 = {complex_0: complex_0, complex_0: complex_0}
    int_0 = -1763
    tuple_0 = (complex_0, dict_0, int_0)
    list_0 = [tuple_0, int_0, tuple_0, dict_0]
    var_0 = module_0.to_namedtuple(list_0)
    var_1 = module_0.to_namedtuple(var_0)
    str_0 = "\nind_paths"
    dict_1 = {str_0: str_0}
    var_2 = module_0.to_namedtuple(var_1)
    ordered_dict_0 = module_1.OrderedDict()
    var_3 = module_0.to_namedtuple(dict_1)
    var_4 = module_0.to_namedtuple(var_3)
    var_5 = module_0.to_namedtuple(dict_1)
    var_6 = module_0.to_namedtuple(ordered_dict_0)
    var_7 = module_0.to_namedtuple(var_5)
    var_8 = module_0.to_namedtuple(list_0)
    module_0.to_namedtuple(str_0)
