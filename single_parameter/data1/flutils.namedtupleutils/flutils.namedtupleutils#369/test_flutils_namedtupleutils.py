# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import builtins as module_0
import flutils.namedtupleutils as module_1
import collections as module_2


def test_case_0():
    object_0 = module_0.object()
    module_1.to_namedtuple(object_0)


def test_case_1():
    float_0 = -2544.799
    tuple_0 = (float_0,)
    var_0 = module_1.to_namedtuple(tuple_0)


def test_case_2():
    str_0 = "attr_maop"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_1.to_namedtuple(dict_0)
    var_1 = module_1.to_namedtuple(var_0)


def test_case_3():
    ordered_dict_0 = module_2.OrderedDict()
    var_0 = module_1.to_namedtuple(ordered_dict_0)


def test_case_4():
    bytes_0 = b"F\x80\x1c\xb9\x19"
    module_1.to_namedtuple(bytes_0)


def test_case_5():
    tuple_0 = ()
    var_0 = module_1.to_namedtuple(tuple_0)


def test_case_6():
    bool_0 = True
    bytes_0 = b".\xf9e\xf3!\xfcO\xd7\xfcA\xea\x01\xd0\x836\xdci\x9d"
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bytes_0}
    int_0 = -1326
    tuple_0 = (dict_0, int_0)
    dict_1 = {bytes_0: tuple_0}
    list_0 = [dict_0, dict_0, bytes_0]
    var_0 = module_1.to_namedtuple(list_0)
    module_1.to_namedtuple(dict_1)


def test_case_7():
    dict_0 = {}
    var_0 = module_1.to_namedtuple(dict_0)


def test_case_8():
    list_0 = []
    var_0 = module_1.to_namedtuple(list_0)


def test_case_9():
    str_0 = "Using the passed in file descriptor (of tty), set the terminal\n    size to that of the current terminal size.  If the current\n    terminal size cannot be found the given defaults will be used.\n    "
    dict_0 = {str_0: str_0, str_0: str_0}
    var_0 = module_1.to_namedtuple(dict_0)
    var_1 = module_1.to_namedtuple(var_0)
    var_2 = module_1.to_namedtuple(var_1)
    object_0 = module_0.object()


def test_case_10():
    str_0 = "pos"
    bool_0 = False
    str_1 = "Amr\n\n\n"
    str_2 = ""
    dict_0 = {str_0: bool_0, str_1: bool_0, str_2: str_0}
    list_0 = [dict_0, str_1]
    var_0 = module_1.to_namedtuple(list_0)
    module_2.namedtuple(var_0, list_0)
