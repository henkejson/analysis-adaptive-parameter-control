# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import builtins as module_0
import flutils.namedtupleutils as module_1
import collections as module_2


def test_case_0():
    object_0 = module_0.object()
    module_1.to_namedtuple(object_0)


def test_case_1():
    bool_0 = False
    tuple_0 = ()
    dict_0 = {bool_0: tuple_0}
    tuple_1 = (bool_0, tuple_0, tuple_0, dict_0)
    var_0 = module_1.to_namedtuple(tuple_1)


def test_case_2():
    str_0 = "root_path"
    dict_0 = {str_0: str_0, str_0: str_0}
    var_0 = module_1.to_namedtuple(dict_0)
    var_1 = module_1.to_namedtuple(var_0)


def test_case_3():
    dict_0 = {}
    var_0 = module_1.to_namedtuple(dict_0)


def test_case_4():
    bytes_0 = b"\x02.\x9d\x14\xd9\x1a\xa2T\xf0"
    module_1.to_namedtuple(bytes_0)


def test_case_5():
    list_0 = []
    var_0 = module_1.to_namedtuple(list_0)


def test_case_6():
    ordered_dict_0 = module_2.OrderedDict()
    var_0 = module_1.to_namedtuple(ordered_dict_0)


def test_case_7():
    bool_0 = False
    list_0 = [bool_0]
    tuple_0 = ()
    dict_0 = {bool_0: tuple_0}
    var_0 = module_1.to_namedtuple(tuple_0)
    tuple_1 = (bool_0, list_0, tuple_0, dict_0)
    var_1 = module_1.to_namedtuple(tuple_1)
    list_1 = [var_1, tuple_1, var_1]
    var_2 = module_1.to_namedtuple(list_1)


def test_case_8():
    tuple_0 = ()
    var_0 = module_1.to_namedtuple(tuple_0)


def test_case_9():
    str_0 = "PFJDQd.w?=F#\x0c+Fx"
    str_1 = "root_path"
    dict_0 = {str_0: str_1, str_1: str_1}
    var_0 = module_1.to_namedtuple(dict_0)
    var_1 = module_1.to_namedtuple(var_0)


def test_case_10():
    str_0 = "M\n"
    dict_0 = {str_0: str_0, str_0: str_0}
    ordered_dict_0 = module_2.OrderedDict(**dict_0)
    list_0 = [str_0]
    float_0 = -872.397
    tuple_0 = (list_0, float_0)
    var_0 = module_1.to_namedtuple(tuple_0)
    list_1 = [ordered_dict_0, tuple_0]
    var_1 = module_1.to_namedtuple(ordered_dict_0)
    list_2 = [list_1, float_0, str_0, tuple_0]
    var_2 = module_1.to_namedtuple(list_2)
    var_3 = module_1.to_namedtuple(var_2)
    var_4 = module_1.to_namedtuple(var_2)
    str_1 = 'xxYt&OZ"H'
    module_1.to_namedtuple(str_1)


def test_case_11():
    bytes_0 = b"\xa7\xcb{"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_1.to_namedtuple(dict_0)
