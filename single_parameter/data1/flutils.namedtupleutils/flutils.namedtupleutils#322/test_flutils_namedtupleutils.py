# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1


def test_case_0():
    none_type_0 = None
    module_0.to_namedtuple(none_type_0)


def test_case_1():
    dict_0 = {}
    str_0 = "8@yNYq$|8?1tE\\.^U`$:"
    set_0 = set()
    tuple_0 = (dict_0, str_0, set_0)
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_2():
    str_0 = "root_path"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_3():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_4():
    bytes_0 = b"\xdd}\x14\xd3\xcd(!U\xe52\x89\xffw\xf6\xda"
    module_0.to_namedtuple(bytes_0)


def test_case_5():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_6():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)
    list_0 = []
    ordered_dict_0 = module_1.OrderedDict(*list_0)
    dict_0 = {var_0: var_0, var_0: var_0, var_0: ordered_dict_0}
    bool_0 = True
    tuple_1 = (var_0, dict_0, bool_0, bool_0)
    var_1 = module_0.to_namedtuple(tuple_1)
    none_type_0 = None
    module_0.to_namedtuple(none_type_0)


def test_case_7():
    str_0 = "root_path"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_8():
    str_0 = "V"
    list_0 = []
    ordered_dict_0 = module_1.OrderedDict(*list_0)
    dict_0 = {str_0: str_0, str_0: str_0, str_0: ordered_dict_0}
    bool_0 = True
    tuple_0 = (str_0, dict_0, bool_0, bool_0)
    var_0 = module_0.to_namedtuple(tuple_0)
    var_1 = module_0.to_namedtuple(var_0)
    var_2 = module_0.to_namedtuple(tuple_0)


def test_case_9():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_10():
    bytes_0 = b"\xb1\xcaB\xa0"
    dict_0 = {bytes_0: bytes_0}
    list_0 = [dict_0, dict_0, dict_0, dict_0]
    module_0.to_namedtuple(list_0)


def test_case_11():
    str_0 = "&o"
    str_1 = "root_path"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_1: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    module_0.to_namedtuple(str_0)


def test_case_12():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)
    str_0 = "E68Y\x0b"
    list_0 = []
    var_1 = module_0.to_namedtuple(list_0)
    var_2 = module_0.to_namedtuple(var_0)
    ordered_dict_0 = module_1.OrderedDict(*list_0)
    dict_0 = {tuple_0: ordered_dict_0, str_0: str_0, str_0: ordered_dict_0}
    bool_0 = True
    tuple_1 = (str_0, dict_0, bool_0, bool_0)
    var_3 = module_0.to_namedtuple(tuple_1)
    var_4 = module_0.to_namedtuple(var_3)
    none_type_0 = None
    module_0.to_namedtuple(none_type_0)
