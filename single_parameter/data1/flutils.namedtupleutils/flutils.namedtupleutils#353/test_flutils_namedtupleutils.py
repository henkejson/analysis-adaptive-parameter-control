# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import builtins as module_1
import collections as module_2


def test_case_0():
    set_0 = set()
    module_0.to_namedtuple(set_0)


def test_case_1():
    object_0 = module_1.object()
    list_0 = [object_0, object_0]
    var_0 = module_0.to_namedtuple(list_0)


def test_case_2():
    str_0 = "has_attrs"
    dict_0 = {str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_3():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_4():
    str_0 = "{QaJ\x0b"
    module_0.to_namedtuple(str_0)


def test_case_5():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_6():
    ordered_dict_0 = module_2.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_7():
    str_0 = "has_attrs"
    dict_0 = {str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_8():
    str_0 = "1_\n2LPPAZ|#\x0b5`{"
    dict_0 = {str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    module_0.to_namedtuple(str_0)


def test_case_9():
    ordered_dict_0 = module_2.OrderedDict()
    ordered_dict_1 = module_2.OrderedDict(*ordered_dict_0)
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_10():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_11():
    int_0 = -3053
    dict_0 = {int_0: int_0}
    tuple_0 = (int_0, dict_0, int_0)
    var_0 = module_0.to_namedtuple(tuple_0)
    module_2.namedtuple(dict_0, var_0, rename=dict_0)


def test_case_12():
    bytes_0 = b'\x8b"\x01\x1cr\xd9\xac\x16S\xb7\x99\xbd\x1f\xd8\xed\xf5'
    dict_0 = {bytes_0: bytes_0}
    tuple_0 = (dict_0,)
    module_0.to_namedtuple(tuple_0)


def test_case_13():
    str_0 = "wQaJ\x0b"
    dict_0 = {str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
