# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1


def test_case_0():
    bool_0 = True
    module_0.to_namedtuple(bool_0)


def test_case_1():
    str_0 = "ecGnLode"
    bool_0 = False
    dict_0 = {bool_0: str_0, str_0: str_0, str_0: bool_0, bool_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_2():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_3():
    str_0 = "7\nm<dBL|?|"
    module_0.to_namedtuple(str_0)


def test_case_4():
    dict_0 = {}
    list_0 = [dict_0]
    var_0 = module_0.to_namedtuple(list_0)


def test_case_5():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_6():
    str_0 = "yK"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_7():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(dict_0)
    list_0 = [var_0]
    var_2 = module_0.to_namedtuple(list_0)


def test_case_8():
    bytes_0 = b"\x91w\x93\xbf\xb3\x90\t\x82\x17\x14\xd3\x19\xdbx\xb6\xc9\xef"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    tuple_0 = (bytes_0, list_0, list_0, list_0)
    list_1 = [tuple_0]
    var_0 = module_0.to_namedtuple(list_1)


def test_case_9():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_10():
    str_0 = "r|X\x0c|^DHMgnxG"
    bool_0 = True
    dict_0 = {bool_0: str_0, str_0: str_0, str_0: bool_0, bool_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    ordered_dict_0 = module_1.OrderedDict(**dict_0)


def test_case_11():
    int_0 = 1024
    bytes_0 = b"&\x1bJU\xc0\xe9"
    dict_0 = {bytes_0: int_0}
    list_0 = [dict_0]
    tuple_0 = (bytes_0, dict_0, list_0, dict_0)
    module_0.to_namedtuple(tuple_0)


def test_case_12():
    str_0 = "yK\t"
    bool_0 = False
    dict_0 = {
        bool_0: bool_0,
        bool_0: str_0,
        str_0: str_0,
        str_0: str_0,
        bool_0: bool_0,
        str_0: bool_0,
        bool_0: str_0,
    }
    tuple_0 = (str_0, bool_0, dict_0)
    var_0 = module_0.to_namedtuple(tuple_0)
    var_1 = module_0.to_namedtuple(var_0)
    module_0.to_namedtuple(bool_0)
