# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1


def test_case_0():
    none_type_0 = None
    module_0.to_namedtuple(none_type_0)


def test_case_1():
    bool_0 = False
    tuple_0 = (bool_0,)
    list_0 = [tuple_0, bool_0, bool_0]
    var_0 = module_0.to_namedtuple(list_0)


def test_case_2():
    str_0 = "lVK"
    dict_0 = {str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_3():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_4():
    bytes_0 = b"|\x94"
    module_0.to_namedtuple(bytes_0)


def test_case_5():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_6():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_7():
    bytes_0 = b"\xd8\n\xca\xd5z\xd6\t;C\xcf\\\r\x11\x7f\xf1\xf8\xbe;j("
    int_0 = 1358
    dict_0 = {bytes_0: bytes_0, bytes_0: int_0, int_0: bytes_0, bytes_0: bytes_0}
    module_0.to_namedtuple(dict_0)


def test_case_8():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_9():
    bool_0 = True
    bytes_0 = b"3\x9d\xe1g\x08\xfa=G\xb3\xdd\x1b\x10Z\xad\xe15x\xb8"
    dict_0 = {bool_0: bytes_0, bytes_0: bytes_0}
    module_0.to_namedtuple(dict_0)


def test_case_10():
    str_0 = "normliz_path"
    str_1 = 'setup.cP"'
    dict_0 = {
        str_0: str_0,
        str_1: str_0,
        str_1: str_1,
        str_1: str_1,
        str_0: str_0,
        str_0: str_0,
    }
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    tuple_0 = (ordered_dict_0,)
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(tuple_0)
    str_2 = 'GW0h?e41{"UP ^b'
    module_0.to_namedtuple(str_2)


def test_case_11():
    str_0 = "normliz_path"
    dict_0 = {
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
    }
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_12():
    str_0 = 'A loader that creates a module which defers loading until attribute\n    access.\n\n    This class is a "derivative work" of the Python\n    :obj:`importlib.util.LazyLoader`, and is:\n\n    `Copyright Â© 2001-2018 Python Software Foundation; All Rights Reserved\n    <https://bit.ly/2JzG17l>.`_\n\n    This class differs from :obj:`importlib.util.LazyLoader` in that it\n    uses the :obj:`~flutils.moduleutils._LazyModule` class and the\n    ``factory`` class method was removed.\n    '
    str_1 = "\x0cy"
    dict_0 = {str_0: str_0, str_1: str_1}
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    str_2 = "normliz_path"
    str_3 = "setup.cfg"
    dict_1 = {str_2: str_2, str_3: str_3, str_3: str_3, str_2: str_2}
    ordered_dict_1 = module_1.OrderedDict(**dict_1)
    tuple_0 = (ordered_dict_1,)
    bool_0 = True
    tuple_1 = (tuple_0, bool_0)
    var_1 = module_0.to_namedtuple(tuple_1)
    var_2 = module_0.to_namedtuple(var_1)
    var_3 = module_0.to_namedtuple(var_1)
    module_0.to_namedtuple(str_2)
