# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1


def test_case_0():
    none_type_0 = None
    module_0.to_namedtuple(none_type_0)


def test_case_1():
    set_0 = set()
    dict_0 = {}
    int_0 = 1124
    tuple_0 = (set_0, dict_0, dict_0, int_0)
    bool_0 = True
    list_0 = [tuple_0, bool_0, dict_0, dict_0]
    var_0 = module_0.to_namedtuple(list_0)
    module_0.to_namedtuple(bool_0)


def test_case_2():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_3():
    bytes_0 = b""
    module_0.to_namedtuple(bytes_0)


def test_case_4():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_5():
    bool_0 = False
    tuple_0 = (bool_0, bool_0, bool_0, bool_0)
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: tuple_0, bool_0: bool_0}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_6():
    str_0 = "V"
    dict_0 = {str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_7():
    set_0 = set()
    dict_0 = {}
    int_0 = 1124
    tuple_0 = (set_0, dict_0, dict_0, int_0)
    bool_0 = True
    list_0 = [tuple_0, bool_0, dict_0, dict_0]
    var_0 = module_0.to_namedtuple(list_0)
    var_1 = module_0.to_namedtuple(var_0)
    var_2 = module_0.to_namedtuple(var_1)
    module_0.to_namedtuple(bool_0)


def test_case_8():
    list_0 = []
    tuple_0 = (list_0,)
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_9():
    str_0 = ""
    str_1 = "jM9;iefpLQ#"
    dict_0 = {}
    int_0 = 80
    set_0 = set()
    tuple_0 = (dict_0, int_0, set_0)
    list_0 = [tuple_0, dict_0, dict_0]
    dict_1 = {str_0: str_0, str_1: str_1, str_0: list_0, str_1: str_0}
    complex_0 = -6.822015 - 1041.2893039314565j
    set_1 = {complex_0, complex_0}
    var_0 = module_0.to_namedtuple(dict_1)
    bool_0 = False
    tuple_1 = (set_1, var_0, bool_0, set_1)
    var_1 = module_0.to_namedtuple(tuple_1)
    module_0.to_namedtuple(int_0)


def test_case_10():
    bytes_0 = b"9\xf4A\xfa\xe1\x9a\xea"
    dict_0 = {bytes_0: bytes_0}
    module_0.to_namedtuple(dict_0)


def test_case_11():
    str_0 = "VQ\x0b"
    str_1 = "jM9;iefpLQ#"
    dict_0 = {}
    int_0 = 80
    set_0 = set()
    tuple_0 = (dict_0, int_0, set_0)
    list_0 = [tuple_0, dict_0, dict_0]
    dict_1 = {str_0: str_0, str_1: str_1, str_0: list_0, str_1: str_0}
    ordered_dict_0 = module_1.OrderedDict(**dict_1)
    tuple_1 = (ordered_dict_0,)
    list_1 = [tuple_1, str_1, str_1]
    var_0 = module_0.to_namedtuple(list_1)
    var_1 = module_0.to_namedtuple(var_0)
    module_0.to_namedtuple(str_0)
