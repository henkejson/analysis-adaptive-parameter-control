# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1


def test_case_0():
    int_0 = 1050
    module_0.to_namedtuple(int_0)


def test_case_1():
    int_0 = -1774
    int_1 = 1887
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)
    tuple_1 = (tuple_0, tuple_0, var_0)
    tuple_2 = (int_0, int_1, int_0, tuple_1)
    var_1 = module_0.to_namedtuple(tuple_2)


def test_case_2():
    str_0 = "encode"
    dict_0 = {str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_3():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_4():
    str_0 = "wdoOcEANH\x0cl"
    module_0.to_namedtuple(str_0)


def test_case_5():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_6():
    bool_0 = True
    int_0 = -2959
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, int_0: int_0}
    tuple_0 = (bool_0, bool_0, dict_0, bool_0)
    bytes_0 = b"\x88\x86w\x93\xea\xba\xc4X\xf8.\x8e\xab\x9ah\xb9e\xd9\xb2"
    dict_1 = {}
    tuple_1 = (bool_0, tuple_0, bytes_0, dict_1)
    var_0 = module_0.to_namedtuple(tuple_1)
    var_1 = module_0.to_namedtuple(dict_1)


def test_case_7():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_8():
    bytes_0 = b"<\xb8M=\x13\xf2\x96"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    var_0 = module_0.to_namedtuple(list_0)


def test_case_9():
    str_0 = "_3&Tf4&\x0b/\t1uc'QR[I"
    complex_0 = 34.141 - 340.06299j
    str_1 = "find_paths"
    list_0 = []
    dict_0 = {str_1: str_1, str_0: complex_0, str_1: list_0}
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_10():
    bytes_0 = b"W\x9f#\x9d\xea\x15t\xc1\x97\xcbyo\xa36\xe3\xd8\x13\xc3\xc1"
    str_0 = "4f89 NKmM)"
    dict_0 = {bytes_0: bytes_0, str_0: bytes_0, str_0: bytes_0, str_0: bytes_0}
    module_0.to_namedtuple(dict_0)


def test_case_11():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_12():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)
    set_0 = {var_0, var_0}
    var_1 = module_0.to_namedtuple(dict_0)
    var_2 = module_0.to_namedtuple(dict_0)
    var_3 = module_0.to_namedtuple(var_0)
    module_0.to_namedtuple(set_0)


def test_case_13():
    int_0 = -455
    list_0 = [int_0, int_0, int_0, int_0, int_0]
    var_0 = module_0.to_namedtuple(list_0)
    var_1 = module_0.to_namedtuple(var_0)
    str_0 = "node\r"
    var_2 = module_0.to_namedtuple(var_1)
    dict_0 = {str_0: var_1, str_0: str_0}
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    int_1 = -1555
    list_1 = [ordered_dict_0, int_1]
    var_3 = module_0.to_namedtuple(list_1)
    var_4 = module_0.to_namedtuple(ordered_dict_0)
    list_2 = [var_3, ordered_dict_0, ordered_dict_0]
    list_3 = [list_2, int_1, dict_0]
    var_5 = module_0.to_namedtuple(list_3)
    module_1.namedtuple(list_2, int_1, rename=ordered_dict_0, module=dict_0)
