# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1


def test_case_0():
    none_type_0 = None
    module_0.to_namedtuple(none_type_0)


def test_case_1():
    bool_0 = False
    bool_1 = True
    dict_0 = {bool_0: bool_1, bool_1: bool_0, bool_0: bool_1, bool_0: bool_0}
    tuple_0 = (bool_0, dict_0)
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_2():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_3():
    str_0 = ";V600O5!lZ:>"
    module_0.to_namedtuple(str_0)


def test_case_4():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_5():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_6():
    bytes_0 = b"\x15\x14\xf2S\x93\x92\xd2\xa8\xbb\x93g\xef\xff\xd4"
    float_0 = -2553.951
    tuple_0 = (bytes_0, float_0)
    var_0 = module_0.to_namedtuple(tuple_0)
    none_type_0 = None
    module_0.to_namedtuple(none_type_0)


def test_case_7():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_8():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_9():
    str_0 = "eutf8h"
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_10():
    str_0 = "F5y1~u{(O"
    str_1 = "Generator that expands the given attr_map and yields an _AttrMapping\n    named tuple.\n\n    An attr_map is a tuple with each row containing a :term:`foreign-name`\n    which is a specially formatted string.\n    "
    str_2 = "__attr_map__ must be a tuple not %r"
    dict_0 = {str_0: str_0, str_1: str_0, str_2: str_0, str_2: str_1}
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    module_0.to_namedtuple(str_0)


def test_case_11():
    bytes_0 = b"\xe68RT\x07\x16\x0c\xe0\xdd"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    dict_0 = {bytes_0: set_0}
    tuple_0 = (bytes_0, dict_0)
    module_0.to_namedtuple(tuple_0)


def test_case_12():
    str_0 = "\tN"
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    var_1 = module_0.to_namedtuple(var_0)
    bool_0 = True
    dict_1 = {bool_0: bool_0}
    tuple_0 = (dict_1, dict_1)
    var_2 = module_0.to_namedtuple(tuple_0)
    bool_1 = False
    tuple_1 = (bool_1, var_2, var_2)
    var_3 = module_0.to_namedtuple(tuple_1)
    module_1.namedtuple(str_0, tuple_0, module=var_2)
