# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1


def test_case_0():
    bool_0 = True
    module_0.to_namedtuple(bool_0)


def test_case_1():
    bool_0 = True
    tuple_0 = (bool_0,)
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_2():
    str_0 = "s_"
    dict_0 = {str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_3():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_4():
    bytes_0 = b"\x98\x8cX\xa9\xe5\x05\x08\xd8\xf3\x92\x98\xbbY"
    module_0.to_namedtuple(bytes_0)


def test_case_5():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_6():
    bool_0 = True
    tuple_0 = (bool_0,)
    var_0 = module_0.to_namedtuple(tuple_0)
    dict_0 = {var_0: bool_0}
    var_1 = module_0.to_namedtuple(dict_0)
    module_0.to_namedtuple(bool_0)


def test_case_7():
    bytes_0 = b"\xc0^@\xd80@R\xe0\x9d\xbe\xc4\xf4\x05"
    bool_0 = False
    tuple_0 = (bytes_0, bool_0)
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_8():
    bool_0 = False
    tuple_0 = (bool_0,)
    var_0 = module_0.to_namedtuple(tuple_0)
    dict_0 = {var_0: bool_0}
    var_1 = module_0.to_namedtuple(dict_0)
    var_2 = module_0.to_namedtuple(var_1)


def test_case_9():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_10():
    int_0 = 4
    bytes_0 = b"\x9e\xf20\x0f"
    str_0 = ":Xp"
    bool_0 = False
    dict_0 = {bytes_0: str_0, str_0: int_0, bool_0: bool_0}
    tuple_0 = (int_0, bytes_0, dict_0, str_0)
    module_0.to_namedtuple(tuple_0)


def test_case_11():
    bool_0 = True
    str_0 = "__"
    dict_0 = {str_0: str_0, str_0: str_0}
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    str_1 = ".{C@OVJ=F}`IbBP"
    list_0 = [bool_0, bool_0, ordered_dict_0, str_1]
    var_0 = module_0.to_namedtuple(list_0)
    tuple_0 = (bool_0,)
    var_1 = module_0.to_namedtuple(tuple_0)
    dict_1 = {var_1: bool_0}
    var_2 = module_0.to_namedtuple(dict_1)
    var_3 = module_0.to_namedtuple(var_2)
    var_4 = module_0.to_namedtuple(dict_1)


def test_case_12():
    str_0 = "X5\r"
    str_1 = 'm3&=U>sX":]n9-x'
    dict_0 = {str_0: str_0, str_1: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    none_type_0 = None
    module_0.to_namedtuple(none_type_0)
