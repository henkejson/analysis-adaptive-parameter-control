# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1


def test_case_0():
    float_0 = 3962.847235
    module_0.to_namedtuple(float_0)


def test_case_1():
    str_0 = "maintainer_email"
    int_0 = -2447
    dict_0 = {str_0: str_0, str_0: str_0, str_0: int_0}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_2():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_3():
    str_0 = "&"
    module_0.to_namedtuple(str_0)


def test_case_4():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_5():
    str_0 = "{lOO&&"
    list_0 = [str_0]
    str_1 = "The given 'setup_dir' of %r does NOT contain a setup.py file."
    str_2 = "origin"
    dict_0 = {str_0: list_0, str_1: str_0, str_2: list_0, str_2: str_1}
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    var_1 = module_0.to_namedtuple(var_0)
    tuple_0 = ()
    dict_1 = {tuple_0: tuple_0, tuple_0: tuple_0}
    var_2 = module_0.to_namedtuple(dict_1)
    module_0.to_namedtuple(str_1)


def test_case_6():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_7():
    str_0 = "maintainer_email"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_8():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(dict_0)
    var_2 = module_0.to_namedtuple(var_0)


def test_case_9():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_10():
    int_0 = 2473
    list_0 = [int_0, int_0, int_0, int_0]
    var_0 = module_0.to_namedtuple(list_0)
    ordered_dict_0 = module_1.OrderedDict()
    var_1 = module_0.to_namedtuple(ordered_dict_0)


def test_case_11():
    str_0 = "A :obj:`NamedTuple <typing.NamedTuple>` that holds a completed\n    process' information.\n\n    Attributes:\n         return_code (int): The process return code.\n         stdout (str): All lines of the ``stdout`` from the process.\n         stderr (str): All lines of the ``stderr`` from the process.\n         cmd (str): The command that the process ran.\n    "
    int_0 = 2544
    dict_0 = {str_0: str_0, str_0: str_0, str_0: int_0}
    list_0 = [dict_0, str_0, int_0]
    dict_1 = {}
    var_0 = module_0.to_namedtuple(dict_1)
    var_1 = module_0.to_namedtuple(list_0)


def test_case_12():
    bytes_0 = b"G:\xd7\x8e\xd8\x1cX\xf7\x8d\x97b\x85\x0f\xee[v\x8a\xc5\xb6\x9f"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.to_namedtuple(dict_0)


def test_case_13():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    var_1 = module_0.to_namedtuple(var_0)
    var_2 = module_0.to_namedtuple(ordered_dict_0)
    var_3 = module_0.to_namedtuple(var_2)
    var_4 = module_0.to_namedtuple(var_1)
    var_5 = module_0.to_namedtuple(ordered_dict_0)
    list_0 = [ordered_dict_0, ordered_dict_0, ordered_dict_0]
    var_6 = module_0.to_namedtuple(ordered_dict_0)
    str_0 = "\nHG3"
    ordered_dict_1 = module_1.OrderedDict()
    dict_0 = {
        var_3: var_1,
        str_0: str_0,
        str_0: str_0,
        var_1: ordered_dict_1,
        var_1: list_0,
    }
    var_7 = module_0.to_namedtuple(dict_0)
    var_8 = module_0.to_namedtuple(list_0)
    float_0 = -689.0295682703264
    var_9 = module_0.to_namedtuple(var_7)
    var_10 = module_0.to_namedtuple(var_1)
    module_0.to_namedtuple(float_0)
