# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1
import builtins as module_2


def test_case_0():
    none_type_0 = None
    module_0.to_namedtuple(none_type_0)


def test_case_1():
    bytes_0 = b"\xd6\xb9\xf7\x1af\xe0\x05"
    float_0 = 4928.34
    list_0 = [bytes_0, float_0, float_0]
    tuple_0 = (float_0, bytes_0, float_0, list_0)
    dict_0 = {bytes_0: bytes_0}
    tuple_1 = (tuple_0, list_0, tuple_0, dict_0)
    list_1 = [bytes_0, tuple_1]
    module_0.to_namedtuple(list_1)


def test_case_2():
    str_0 = "addtl_attrs"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_3():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_4():
    bytes_0 = b"\xb2\xc5"
    module_0.to_namedtuple(bytes_0)


def test_case_5():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_6():
    object_0 = module_2.object()
    dict_0 = {
        object_0: object_0,
        object_0: object_0,
        object_0: object_0,
        object_0: object_0,
    }
    list_0 = [dict_0, dict_0]
    var_0 = module_0.to_namedtuple(list_0)
    object_1 = module_2.object()
    var_1 = module_0.to_namedtuple(dict_0)
    var_2 = module_0.to_namedtuple(dict_0)
    var_3 = module_0.to_namedtuple(var_1)
    var_4 = module_0.to_namedtuple(var_1)


def test_case_7():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_8():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_9():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_10():
    str_0 = "addtl_attrs"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_11():
    str_0 = "The path: %r must NOT contain any glob patterns."
    str_1 = "addtl_attrs"
    dict_0 = {str_0: str_0, str_1: str_0, str_1: str_0}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_12():
    str_0 = "The path: %r must NOT contain any glob patterns."
    str_1 = "\ru"
    str_2 = "loadermaintainer"
    dict_0 = {str_0: str_0, str_1: str_0, str_2: str_0}
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    var_1 = module_0.to_namedtuple(var_0)
    var_2 = module_0.to_namedtuple(var_0)
    none_type_0 = None
    module_0.to_namedtuple(none_type_0)
