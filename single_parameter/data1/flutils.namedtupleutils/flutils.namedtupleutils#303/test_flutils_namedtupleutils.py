# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1


def test_case_0():
    none_type_0 = None
    module_0.to_namedtuple(none_type_0)


def test_case_1():
    ordered_dict_0 = module_1.OrderedDict()
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    var_0 = module_0.to_namedtuple(tuple_0)
    var_1 = module_0.to_namedtuple(ordered_dict_0)
    var_2 = module_1.OrderedDict()
    none_type_0 = None
    module_0.to_namedtuple(none_type_0)


def test_case_2():
    str_0 = "decode"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_3():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_4():
    str_0 = "\nd\rU?S)2MBn"
    module_0.to_namedtuple(str_0)


def test_case_5():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_6():
    int_0 = -2016
    bool_0 = True
    list_0 = [int_0, int_0, bool_0]
    dict_0 = {int_0: int_0, int_0: list_0}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_7():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_8():
    complex_0 = 2124 - 2779.07j
    bool_0 = False
    dict_0 = {
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: bool_0,
        bool_0: complex_0,
    }
    var_0 = module_0.to_namedtuple(dict_0)
    bytes_0 = b".\xc09\x03\xe1\x8e.\x10\x03\xe0\xc1"
    tuple_0 = (dict_0, dict_0, bytes_0)
    var_1 = module_0.to_namedtuple(dict_0)
    var_2 = module_0.to_namedtuple(tuple_0)
    var_3 = module_0.to_namedtuple(var_1)
    dict_1 = {bytes_0: var_1}
    var_4 = module_0.to_namedtuple(var_1)
    module_0.to_namedtuple(dict_1)


def test_case_9():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    var_1 = module_0.to_namedtuple(var_0)
    var_2 = module_0.to_namedtuple(var_1)


def test_case_10():
    str_0 = "decode"
    str_1 = '\x0bq<%8AF\t]6o4-(=J"V5'
    dict_0 = {str_0: str_0, str_1: str_0, str_1: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)
    module_0.to_namedtuple(str_1)


def test_case_11():
    str_0 = "decode\n"
    str_1 = ";?KO9^@F9M_nM$Pm"
    bool_0 = False
    dict_0 = {str_0: str_0, str_1: str_0, str_1: bool_0}
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    var_0 = module_0.to_namedtuple(dict_0)
    bool_1 = True
    tuple_0 = (ordered_dict_0, bool_1, str_1, bool_1)
    var_1 = module_0.to_namedtuple(tuple_0)
    bool_2 = True
    module_1.namedtuple(var_0, bool_2)
