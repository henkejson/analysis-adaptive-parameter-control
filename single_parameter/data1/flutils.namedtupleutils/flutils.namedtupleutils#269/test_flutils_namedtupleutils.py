# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1


def test_case_0():
    int_0 = 306
    module_0.to_namedtuple(int_0)


def test_case_1():
    float_0 = 1359.043072
    list_0 = [float_0, float_0, float_0, float_0]
    str_0 = ""
    var_0 = module_0.to_namedtuple(list_0)
    dict_0 = {str_0: str_0}
    tuple_0 = (str_0, str_0, dict_0)
    var_1 = module_0.to_namedtuple(tuple_0)


def test_case_2():
    str_0 = ""
    dict_0 = {str_0: str_0}
    tuple_0 = (str_0, str_0, dict_0)
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_3():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_4():
    bytes_0 = b"FW\x80\x16\xc1\x9c\xd3Y\x9e)"
    module_0.to_namedtuple(bytes_0)


def test_case_5():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_6():
    float_0 = 1136.6725126634492
    list_0 = [float_0, float_0, float_0, float_0]
    bool_0 = True
    str_0 = "P"
    dict_0 = {bool_0: list_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_7():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_8():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_9():
    str_0 = "k"
    dict_0 = {str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_10():
    str_0 = ""
    dict_0 = {str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_11():
    float_0 = 1136.6725126634492
    list_0 = [float_0, float_0, float_0, float_0]
    bool_0 = True
    int_0 = 143
    str_0 = "\x0bo"
    dict_0 = {str_0: str_0, bool_0: list_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    module_1.namedtuple(int_0, var_0, rename=var_0)


def test_case_12():
    bytes_0 = b"\xd3\t$\xd8Q\x07C)^y."
    dict_0 = {bytes_0: bytes_0}
    tuple_0 = (bytes_0, dict_0)
    str_0 = "!\tC#OCPu$);m`yj\\>\x0b"
    tuple_1 = (tuple_0, str_0)
    module_0.to_namedtuple(tuple_1)
