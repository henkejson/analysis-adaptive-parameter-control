# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1
import builtins as module_2


def test_case_0():
    none_type_0 = None
    module_0.to_namedtuple(none_type_0)


def test_case_1():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    var_0 = module_0.to_namedtuple(list_0)
    var_1 = module_0.to_namedtuple(var_0)
    var_2 = module_0.to_namedtuple(var_1)
    var_3 = module_0.to_namedtuple(var_2)


def test_case_2():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_3():
    str_0 = ""
    module_0.to_namedtuple(str_0)


def test_case_4():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_5():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_6():
    str_0 = "4k$"
    bool_0 = True
    tuple_0 = (str_0, bool_0)
    list_0 = [tuple_0, bool_0]
    var_0 = module_0.to_namedtuple(list_0)
    module_0.to_namedtuple(str_0)


def test_case_7():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_8():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_9():
    list_0 = []
    list_1 = [list_0, list_0, list_0, list_0]
    var_0 = module_0.to_namedtuple(list_1)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_10():
    object_0 = module_2.object()
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    var_1 = module_0.to_namedtuple(dict_0)


def test_case_11():
    list_0 = []
    str_0 = "has_any_attrs"
    dict_0 = {str_0: list_0}
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    var_1 = module_0.to_namedtuple(list_0)


def test_case_12():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    var_1 = module_0.to_namedtuple(ordered_dict_0)
    var_2 = module_0.to_namedtuple(dict_0)
    var_3 = module_0.to_namedtuple(var_2)
    bytes_0 = b"\x1e\xfa\xed\xbd\xfa\x90\xbd\x039\xb8"
    dict_1 = {bytes_0: var_2, var_1: var_1, var_1: var_2}
    module_0.to_namedtuple(dict_1)


def test_case_13():
    str_0 = "Used with map() to expand foreign-names into a named tuple.\n\n    See the :term:`foreign-name` documentation for the format of this string.\n\n    The tuple contains three parts:\n\n    - attr_name: If applicable, the attribute identifier that will be\n      set on the cherry-picking module.\n    - mod_name: The fullname of the module to be cherry-picked.\n    - mod_attr_name: If applicable the attribute identifier on the\n        cherry-picked module that will be bound to the ``attr_name``.\n        An empty str value indicates that the entire module will be used.\n    "
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)
    dict_1 = {var_0: var_0, var_0: var_0, var_0: var_0}
    var_2 = module_0.to_namedtuple(dict_1)
    ordered_dict_0 = module_1.OrderedDict()
    var_3 = module_0.to_namedtuple(ordered_dict_0)
    var_4 = module_0.to_namedtuple(ordered_dict_0)
    none_type_0 = None
    module_0.to_namedtuple(none_type_0)


def test_case_14():
    list_0 = []
    str_0 = "has_any_attrs"
    dict_0 = {str_0: list_0}
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_15():
    str_0 = "T\x0b"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    module_1.namedtuple(dict_0, dict_0, module=var_0)
