# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1


def test_case_0():
    int_0 = -2212
    module_0.to_namedtuple(int_0)


def test_case_1():
    bool_0 = False
    bool_1 = True
    tuple_0 = (bool_0, bool_0, bool_1)
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_2():
    str_0 = "3E6fL\t"
    dict_0 = {str_0: str_0, str_0: str_0}
    list_0 = [str_0, str_0, dict_0]
    var_0 = module_0.to_namedtuple(list_0)


def test_case_3():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_4():
    str_0 = "p)k8r>"
    module_0.to_namedtuple(str_0)


def test_case_5():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_6():
    bool_0 = False
    str_0 = "AJ"
    dict_0 = {str_0: str_0, bool_0: str_0, str_0: bool_0, str_0: str_0, str_0: bool_0}
    list_0 = [str_0, dict_0]
    var_0 = module_0.to_namedtuple(list_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_7():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_8():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    var_1 = module_0.to_namedtuple(var_0)
    var_2 = module_0.to_namedtuple(var_1)


def test_case_9():
    bool_0 = True
    tuple_0 = (bool_0,)
    var_0 = module_0.to_namedtuple(tuple_0)
    var_1 = module_0.to_namedtuple(var_0)
    str_0 = "E6fL\t"
    dict_0 = {
        var_0: tuple_0,
        bool_0: var_1,
        str_0: str_0,
        str_0: str_0,
        str_0: bool_0,
        bool_0: var_0,
    }
    var_2 = module_0.to_namedtuple(var_1)
    var_3 = module_0.to_namedtuple(dict_0)
    module_1.namedtuple(var_1, bool_0, rename=var_3, defaults=bool_0, module=var_3)


def test_case_10():
    bytes_0 = b"\xe3Z\xa6\x1d_\xda\x9e,\x95\xcc"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.to_namedtuple(dict_0)
