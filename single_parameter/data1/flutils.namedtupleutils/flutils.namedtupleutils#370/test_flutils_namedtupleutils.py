# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1


def test_case_0():
    none_type_0 = None
    module_0.to_namedtuple(none_type_0)


def test_case_1():
    str_0 = "y\rI\nb X\tisxSq!$\tA;{}"
    set_0 = {str_0}
    str_1 = "FIFO"
    str_2 = "[k"
    dict_0 = {str_1: set_0, str_2: set_0}
    var_0 = module_0.to_namedtuple(dict_0)
    module_0.to_namedtuple(str_1)


def test_case_2():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_3():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_4():
    str_0 = "cF1hF\x0b q+rQ<4TcK+"
    module_0.to_namedtuple(str_0)


def test_case_5():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_6():
    str_0 = "x`t-Cx\x0c\x0b}C]H5"
    list_0 = [str_0, str_0, str_0]
    var_0 = module_0.to_namedtuple(list_0)
    module_0.to_namedtuple(str_0)


def test_case_7():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_8():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_9():
    ordered_dict_0 = module_1.OrderedDict()
    list_0 = [ordered_dict_0]
    var_0 = module_0.to_namedtuple(list_0)


def test_case_10():
    str_0 = "/X{#"
    dict_0 = {str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_11():
    str_0 = "y\rI\nb X\tisxSq!$\tA;{}"
    set_0 = {str_0}
    str_1 = "FIFO"
    dict_0 = {str_1: set_0, str_0: set_0}
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_12():
    str_0 = "The path: %r must be an absolute path.  A path is considered absolute if it has both a root and (if the flavour allows) a drive."
    dict_0 = {str_0: str_0, str_0: str_0}
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    str_1 = "y\rI\nb X\tisxSq!$\tA;{}"
    set_0 = {str_1}
    str_2 = "FIFO"
    str_3 = "q\n"
    dict_1 = {str_2: set_0, str_3: set_0}
    ordered_dict_1 = module_1.OrderedDict(**dict_1)
    tuple_0 = (str_1, set_0, ordered_dict_1, var_0)
    var_1 = module_0.to_namedtuple(tuple_0)
    var_2 = module_0.to_namedtuple(dict_1)
    var_3 = module_0.to_namedtuple(var_2)
    var_4 = module_0.to_namedtuple(var_2)
    module_0.to_namedtuple(set_0)


def test_case_13():
    bytes_0 = b"\x94\xcc\x118\xb5"
    bytes_1 = b"dn\xc9\xf5p\xa8\x00"
    int_0 = -83
    dict_0 = {bytes_1: bytes_1, bytes_1: int_0, int_0: int_0}
    tuple_0 = (bytes_0, bytes_1, dict_0)
    tuple_1 = (bytes_0, tuple_0, int_0)
    module_0.to_namedtuple(tuple_1)
