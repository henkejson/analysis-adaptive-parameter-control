# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1


def test_case_0():
    none_type_0 = None
    module_0.to_namedtuple(none_type_0)


def test_case_1():
    list_0 = []
    ordered_dict_0 = module_1.OrderedDict(*list_0)
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    var_1 = module_0.to_namedtuple(ordered_dict_0)
    var_2 = module_0.to_namedtuple(var_0)
    var_3 = module_0.to_namedtuple(var_2)
    bool_0 = True
    tuple_0 = (bool_0,)
    var_4 = module_0.to_namedtuple(tuple_0)


def test_case_2():
    str_0 = "l"
    dict_0 = {str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_3():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_4():
    str_0 = ")I2u?B"
    module_0.to_namedtuple(str_0)


def test_case_5():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_6():
    str_0 = "CoxA1\x0c+`lI`z6I{'"
    dict_0 = {str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    str_1 = "A custom :obj:`loader <importlib.abc.Loader>` that is used in the\n    execution of cherry-picking-modules.\n    "
    module_0.to_namedtuple(str_1)


def test_case_7():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    var_1 = module_0.to_namedtuple(ordered_dict_0)
    tuple_0 = (var_0,)
    var_2 = module_0.to_namedtuple(var_0)
    var_3 = module_0.to_namedtuple(tuple_0)
    var_4 = module_0.to_namedtuple(var_2)
    var_5 = module_0.to_namedtuple(ordered_dict_0)


def test_case_8():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_9():
    bytes_0 = b"\xf2-e\x91\x87\x86\xcd\x93\x10\x93\x95%\x9a\xd4"
    dict_0 = {bytes_0: bytes_0}
    set_0 = set()
    ordered_dict_0 = module_1.OrderedDict()
    tuple_0 = (dict_0, set_0, ordered_dict_0, ordered_dict_0)
    list_0 = [tuple_0]
    list_1 = [list_0, dict_0, set_0]
    module_0.to_namedtuple(list_1)


def test_case_10():
    int_0 = 2693
    str_0 = "f"
    dict_0 = {str_0: str_0, int_0: int_0}
    tuple_0 = (int_0, dict_0)
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    var_1 = module_0.to_namedtuple(tuple_0)
    module_1.namedtuple(
        tuple_0, tuple_0, rename=ordered_dict_0, defaults=ordered_dict_0, module=tuple_0
    )


def test_case_11():
    str_0 = "l "
    dict_0 = {str_0: str_0}
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    var_1 = module_0.to_namedtuple(var_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    list_1 = [list_0, bool_0, list_0]
    none_type_0 = None
    var_2 = module_0.to_namedtuple(list_1)
    var_3 = module_0.to_namedtuple(ordered_dict_0)
    var_4 = module_0.to_namedtuple(var_2)
    var_5 = module_0.to_namedtuple(dict_0)
    var_6 = module_0.to_namedtuple(var_1)
    module_0.to_namedtuple(none_type_0)
