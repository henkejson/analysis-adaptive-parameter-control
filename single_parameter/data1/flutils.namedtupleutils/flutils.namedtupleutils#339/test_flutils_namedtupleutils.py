# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1
import builtins as module_2


def test_case_0():
    bool_0 = True
    module_0.to_namedtuple(bool_0)


def test_case_1():
    float_0 = -1771.2228
    bool_0 = False
    tuple_0 = (float_0, bool_0)
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_2():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    dict_0 = {tuple_0: bool_0}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_3():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_4():
    bytes_0 = b"\xb6\xa8o\xa23\x81\xfa\xef\xdb\x1f\xe1\xec\xd0\xb0~\x81\xbb"
    module_0.to_namedtuple(bytes_0)


def test_case_5():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_6():
    bool_0 = True
    str_0 = "No6"
    dict_0 = {str_0: str_0, bool_0: bool_0}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_7():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_8():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_9():
    str_0 = "6VI>"
    str_1 = '2"\\@|bQ\tOe'
    dict_0 = {str_0: str_0, str_1: str_0, str_0: str_1}
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    dict_1 = {}
    list_0 = [dict_1, dict_1, dict_1, dict_1]
    module_1.namedtuple(dict_1, dict_1, module=list_0)


def test_case_10():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_11():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(dict_0)
    var_2 = module_0.to_namedtuple(var_1)
    var_3 = module_0.to_namedtuple(dict_0)
    var_4 = module_0.to_namedtuple(dict_0)
    var_5 = module_0.to_namedtuple(var_1)
    var_6 = module_0.to_namedtuple(var_0)
    var_7 = module_0.to_namedtuple(dict_0)
    var_8 = module_0.to_namedtuple(var_7)
    bytes_0 = b"D%\x9c\x93\t\x11\xa3\x8e\xfd\n\xd2\xe1"
    tuple_0 = (var_2, var_2)
    var_9 = module_0.to_namedtuple(tuple_0)
    tuple_1 = (dict_0, dict_0, bytes_0, dict_0)
    var_10 = module_0.to_namedtuple(var_1)
    var_11 = module_0.to_namedtuple(dict_0)
    var_12 = module_0.to_namedtuple(tuple_1)
    var_13 = module_0.to_namedtuple(var_6)
    var_14 = module_0.to_namedtuple(var_1)
    str_0 = "_%A.\t"
    bool_0 = True
    dict_1 = {bytes_0: var_10, str_0: bool_0}
    ordered_dict_0 = module_1.OrderedDict(*var_14, **dict_1)
    module_0.to_namedtuple(ordered_dict_0)


def test_case_12():
    bool_0 = True
    str_0 = "No6"
    dict_0 = {str_0: str_0, bool_0: bool_0}
    tuple_0 = module_0.to_namedtuple(dict_0)
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_13():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(dict_0)
    ordered_dict_0 = module_1.OrderedDict()
    var_2 = module_0.to_namedtuple(dict_0)
    var_3 = module_0.to_namedtuple(ordered_dict_0)
    var_4 = module_0.to_namedtuple(dict_0)
    var_5 = module_0.to_namedtuple(dict_0)
    var_6 = module_0.to_namedtuple(var_1)
    ordered_dict_1 = module_1.OrderedDict(**dict_0)
    tuple_0 = (dict_0, ordered_dict_1)
    var_7 = module_0.to_namedtuple(tuple_0)
    var_8 = module_0.to_namedtuple(ordered_dict_0)
    var_9 = module_0.to_namedtuple(dict_0)
    var_10 = module_0.to_namedtuple(var_2)
    object_0 = module_2.object(*var_9)
    list_0 = []
    var_11 = module_0.to_namedtuple(list_0)
    var_12 = module_0.to_namedtuple(var_6)
    var_13 = module_0.to_namedtuple(var_5)
    str_0 = "\x0c\tFvR"
    bool_0 = True
    var_14 = module_0.to_namedtuple(var_2)
    dict_1 = {var_2: var_8, str_0: bool_0}
    ordered_dict_2 = module_1.OrderedDict(*var_0, **dict_1)
    var_15 = module_0.to_namedtuple(ordered_dict_2)
    var_16 = module_0.to_namedtuple(var_15)
    bool_1 = True
    module_0.to_namedtuple(bool_1)
