# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1
import builtins as module_2


def test_case_0():
    bool_0 = True
    module_0.to_namedtuple(bool_0)


def test_case_1():
    bool_0 = False
    tuple_0 = (bool_0,)
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_2():
    complex_0 = -73.623178 + 127j
    dict_0 = {complex_0: complex_0, complex_0: complex_0, complex_0: complex_0}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_3():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_4():
    str_0 = "prep_cmd"
    module_0.to_namedtuple(str_0)


def test_case_5():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_6():
    str_0 = "prep_cmd"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_7():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_8():
    str_0 = "'E\"q)-?AqxS%u"
    dict_0 = {str_0: str_0, str_0: str_0}
    float_0 = -182.0
    tuple_0 = (dict_0, float_0)
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_9():
    bytes_0 = b"\xb1$\xaa+\xd0>c"
    list_0 = [bytes_0]
    bool_0 = True
    dict_0 = {bytes_0: bool_0}
    bytes_1 = b"p\x80xN{"
    tuple_0 = (list_0, bool_0, dict_0, bytes_1)
    module_0.to_namedtuple(tuple_0)


def test_case_10():
    str_0 = "A^v#ShATx]U4_'=08lK"
    dict_0 = {str_0: str_0}
    int_0 = -1867
    bool_0 = False
    list_0 = [str_0, str_0, int_0]
    tuple_0 = (dict_0, int_0, bool_0, list_0)
    var_0 = module_0.to_namedtuple(tuple_0)
    var_1 = module_0.to_namedtuple(var_0)
    int_1 = -96
    set_0 = {int_1, int_1}
    module_0.to_namedtuple(set_0)


def test_case_11():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_12():
    str_0 = "\x0cI"
    dict_0 = {str_0: str_0}
    int_0 = -1867
    list_0 = [str_0]
    list_1 = [int_0, list_0, list_0, str_0]
    var_0 = module_0.to_namedtuple(list_0)
    tuple_0 = (dict_0, int_0, dict_0, list_1)
    var_1 = module_0.to_namedtuple(tuple_0)
    object_0 = module_2.object()
    module_1.namedtuple(dict_0, list_0, rename=list_0, module=object_0)
