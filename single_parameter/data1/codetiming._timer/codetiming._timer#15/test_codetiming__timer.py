# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import codetiming._timer as module_0
import dataclasses as module_1


def test_case_0():
    timer_error_0 = module_0.TimerError()


def test_case_1():
    timer_0 = module_0.Timer()
    timer_1 = timer_0.__enter__()
    none_type_0 = timer_0.__exit__()


def test_case_2():
    timer_0 = module_0.Timer()
    timer_0.__exit__()


def test_case_3():
    float_0 = -466.332
    bytes_0 = b"^AZ\x0e\x9cQ"
    timer_0 = module_0.Timer(text=float_0, logger=bytes_0)
    timer_1 = timer_0.__enter__()
    timer_0.__enter__()


def test_case_4():
    timer_error_0 = module_0.TimerError()
    str_0 = ""
    timer_0 = module_0.Timer(text=str_0, logger=str_0)
    none_type_0 = timer_0.start()
    list_0 = [none_type_0]
    none_type_1 = timer_0.__exit__(*list_0)
    timer_1 = timer_0.__enter__()
    var_0 = timer_1.__repr__()
    var_0.start()


def test_case_5():
    timer_error_0 = module_0.TimerError()
    str_0 = " does not support item assignment. Use '.add()' to update values."
    timer_0 = module_0.Timer(str_0, initial_text=str_0)
    none_type_0 = timer_0.start()
    none_type_1 = timer_0.__exit__()
    var_0 = timer_0.__repr__()
    var_0.popitem()


def test_case_6():
    timer_error_0 = module_0.TimerError()
    str_0 = "?F"
    timer_0 = module_0.Timer(str_0, initial_text=timer_error_0)
    none_type_0 = timer_0.start()
    none_type_1 = timer_0.__exit__()
    timer_1 = timer_0.__enter__()
    var_0 = timer_1.__repr__()
    var_1 = timer_1.__repr__()
    var_0.popitem()


def test_case_7():
    timer_error_0 = module_0.TimerError()
    timer_0 = module_0.Timer()
    bool_0 = True
    timer_1 = module_0.Timer(initial_text=bool_0, logger=timer_0)
    none_type_0 = timer_1.start()
    module_1.dataclass(bool_0, repr=bool_0, eq=timer_1, kw_only=bool_0)


def test_case_8():
    timer_error_0 = module_0.TimerError()
    timer_0 = module_0.Timer()
    timer_1 = module_0.Timer(text=timer_0, logger=timer_0)
    none_type_0 = timer_1.start()
    list_0 = [timer_error_0, none_type_0, timer_1, timer_0]
    none_type_1 = timer_1.__exit__(*list_0)
    timer_2 = timer_1.__enter__()
    var_0 = timer_2.__call__(timer_0)
    var_0.__contains__(timer_0)
