# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import codetiming._timer as module_0


def test_case_0():
    timer_0 = module_0.Timer()


def test_case_1():
    none_type_0 = None
    timer_0 = module_0.Timer(initial_text=none_type_0)
    timer_1 = timer_0.__enter__()
    none_type_1 = timer_0.__exit__()


def test_case_2():
    none_type_0 = None
    timer_0 = module_0.Timer(initial_text=none_type_0)
    timer_1 = timer_0.__enter__()
    list_0 = [none_type_0]
    none_type_1 = timer_0.__exit__(*list_0)
    timer_0.__exit__()


def test_case_3():
    float_arg_0 = module_0.FloatArg()
    timer_0 = module_0.Timer(text=float_arg_0, initial_text=float_arg_0)
    timer_1 = timer_0.__enter__()
    timer_0.__exit__(*float_arg_0)


def test_case_4():
    timer_0 = module_0.Timer()
    timer_1 = timer_0.__enter__()
    timer_2 = module_0.Timer()
    var_0 = timer_1.__eq__(timer_1)
    none_type_0 = timer_2.start()
    var_1 = timer_0.__call__(timer_1)
    none_type_1 = timer_1.__exit__()
    timer_2.__enter__()


def test_case_5():
    float_arg_0 = module_0.FloatArg()
    timer_error_0 = module_0.TimerError()
    none_type_0 = None
    timer_0 = module_0.Timer(
        text=float_arg_0, initial_text=none_type_0, logger=none_type_0
    )
    var_0 = timer_0.__call__(timer_0)
    timer_1 = timer_0.__enter__()
    var_1 = timer_0.__eq__(var_0)
    none_type_1 = timer_0.__exit__()
    bool_0 = True
    var_0.__getitem__(bool_0)


def test_case_6():
    timer_error_0 = module_0.TimerError()
    str_0 = "jlZL/S}&<\n?\nB,2ve[R"
    timer_0 = module_0.Timer(str_0, str_0)
    none_type_0 = timer_0.start()
    timer_1 = module_0.Timer(text=str_0, initial_text=str_0)
    var_0 = timer_1.__call__(timer_1)
    timer_1.__enter__()


def test_case_7():
    float_arg_0 = module_0.FloatArg()
    timer_0 = module_0.Timer(float_arg_0, initial_text=float_arg_0)
    timer_1 = timer_0.__enter__()
    float_arg_0.__exit__()


def test_case_8():
    float_arg_0 = module_0.FloatArg()
    timer_0 = module_0.Timer(text=float_arg_0, initial_text=float_arg_0)
    timer_1 = module_0.Timer(timer_0, timer_0, timer_0)
    var_0 = timer_1.__call__(timer_0)
    var_0.__call__(var_0)
