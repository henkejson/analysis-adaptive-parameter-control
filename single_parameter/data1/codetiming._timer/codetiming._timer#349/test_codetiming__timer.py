# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import codetiming._timer as module_0


def test_case_0():
    float_arg_0 = module_0.FloatArg()


def test_case_1():
    timer_0 = module_0.Timer()
    none_type_0 = timer_0.start()
    bool_0 = True
    timer_1 = module_0.Timer(text=none_type_0, initial_text=bool_0)
    none_type_1 = timer_1.start()
    timer_0.__enter__()


def test_case_2():
    timer_0 = module_0.Timer()
    none_type_0 = timer_0.start()


def test_case_3():
    none_type_0 = None
    timer_0 = module_0.Timer(none_type_0)
    float_arg_0 = module_0.FloatArg()
    timer_error_0 = module_0.TimerError()
    timer_0.__exit__()


def test_case_4():
    timer_error_0 = module_0.TimerError()
    str_0 = "Definition of Timer.\n\nSee help(codetiming) for quick instructions, and\nhttps://pypi.org/project/codetiming/ for more details.\n"
    timer_0 = module_0.Timer(str_0, str_0, str_0)
    timer_1 = timer_0.__enter__()
    timer_error_1 = timer_1.__eq__(timer_error_0)


def test_case_5():
    timer_0 = module_0.Timer()
    none_type_0 = timer_0.start()
    none_type_1 = timer_0.__exit__()


def test_case_6():
    timer_0 = module_0.Timer()
    none_type_0 = timer_0.start()
    bool_0 = True
    timer_1 = module_0.Timer(text=none_type_0, initial_text=bool_0)
    none_type_1 = timer_1.start()


def test_case_7():
    str_0 = "Definition of Timer.\n\nSee help(codetiming) for quick instructions, and\nhttps://pypi.org/project/codetiming/ for more details.\n"
    timer_0 = module_0.Timer(str_0, str_0, str_0)
    var_0 = timer_0.__call__(timer_0)
    var_1 = var_0.__call__(str_0)
    var_0.__enter__()


def test_case_8():
    none_type_0 = None
    timer_0 = module_0.Timer(logger=none_type_0)
    list_0 = [none_type_0]
    timer_1 = module_0.Timer(initial_text=none_type_0, logger=none_type_0)
    none_type_1 = timer_0.start()
    module_0.FloatArg(*list_0)


def test_case_9():
    none_type_0 = None
    timer_0 = module_0.Timer(logger=none_type_0)
    list_0 = [none_type_0]
    timer_1 = module_0.Timer(initial_text=none_type_0, logger=none_type_0)
    none_type_1 = timer_0.start()
    float_arg_0 = timer_1.__repr__()
    none_type_2 = timer_0.__exit__(*list_0)
    dict_0 = {}
    timer_error_0 = module_0.TimerError(**dict_0)
    var_0 = timer_1.__repr__()
    timer_0.__exit__()


def test_case_10():
    str_0 = "Timer is running. Use .stop() to stop it"
    timer_0 = module_0.Timer()
    bool_0 = True
    timer_1 = module_0.Timer(text=timer_0, initial_text=bool_0)
    list_0 = [str_0, str_0, str_0, bool_0]
    timer_2 = timer_0.__enter__()
    none_type_0 = timer_0.__exit__(*list_0)
    none_type_1 = timer_1.start()
    timer_3 = timer_0.__enter__()
    timer_error_0 = module_0.TimerError(*str_0)
    none_type_2 = timer_1.__exit__()


def test_case_11():
    timer_0 = module_0.Timer()
    none_type_0 = timer_0.__repr__()
    bool_0 = True
    none_type_1 = None
    timer_1 = module_0.Timer(timer_0, none_type_1, bool_0)
    none_type_2 = timer_1.start()
