# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import codetiming._timer as module_0
import dataclasses as module_1
import collections as module_2


def test_case_0():
    float_arg_0 = module_0.FloatArg()


def test_case_1():
    timer_error_0 = module_0.TimerError()
    str_0 = "qt3\x0c,BxP7:4I\tM&&9"
    timer_0 = module_0.Timer(text=timer_error_0, initial_text=str_0)
    none_type_0 = timer_0.start()
    timer_0.__enter__()


def test_case_2():
    bool_0 = True
    timer_0 = module_0.Timer(text=bool_0)
    none_type_0 = timer_0.start()
    timer_1 = module_0.Timer()
    timer_0.__exit__()


def test_case_3():
    str_0 = "Ev\nANMfo>\x0c"
    timer_0 = module_0.Timer(logger=str_0)
    var_0 = timer_0.__call__(timer_0)
    timer_1 = module_0.Timer(logger=str_0)
    timer_1.__exit__()


def test_case_4():
    timer_error_0 = module_0.TimerError()
    str_0 = "qt3\x0c,BxP7:4I\tM&&9"
    timer_0 = module_0.Timer(text=timer_error_0, initial_text=str_0)
    timer_1 = timer_0.__enter__()
    timer_error_1 = module_0.TimerError()


def test_case_5():
    timer_0 = module_0.Timer()
    timer_1 = module_0.Timer(timer_0)
    timer_2 = timer_0.__enter__()
    float_0 = timer_2.stop()
    timer_3 = timer_2.__enter__()
    var_0 = timer_1.__eq__(timer_2)
    none_type_0 = timer_0.__exit__()
    var_1 = var_0.__repr__()
    timer_4 = timer_0.__enter__()
    timer_2.__exit__(*var_0)


def test_case_6():
    none_type_0 = None
    timer_0 = module_0.Timer(none_type_0, logger=none_type_0)
    timer_1 = module_0.Timer(none_type_0, logger=none_type_0)
    timer_2 = timer_0.__enter__()
    timer_1.stop()


def test_case_7():
    timer_0 = module_0.Timer()
    timer_1 = module_0.Timer(timer_0)
    timer_2 = timer_0.__enter__()
    float_0 = timer_0.stop()
    timer_3 = timer_1.__enter__()
    var_0 = timer_3.__eq__(timer_0)
    timer_1.__exit__()


def test_case_8():
    none_type_0 = None
    dict_0 = {}
    timer_0 = module_0.Timer()
    float_arg_0 = module_0.FloatArg(**dict_0)
    timer_1 = module_0.Timer(initial_text=none_type_0, logger=none_type_0)
    str_0 = "Definition of Timer.\n\nSee help(codetiming) for quick instructions, and\nhttps://pypi.org/project/codetiming/ for more details.\n"
    timer_2 = timer_1.__enter__()
    float_0 = timer_2.stop()
    timer_3 = module_0.Timer(none_type_0, str_0, logger=none_type_0)
    timer_2.__exit__()


def test_case_9():
    timer_0 = module_0.Timer()
    timer_1 = module_0.Timer(text=timer_0)
    timer_2 = timer_1.__enter__()
    float_0 = timer_2.stop()
    module_1.field(default_factory=timer_2, hash=timer_1, metadata=timer_0)


def test_case_10():
    timer_0 = module_0.Timer()
    var_0 = timer_0.__eq__(timer_0)
    timer_1 = module_0.Timer(initial_text=var_0)
    timer_2 = timer_1.__enter__()
    var_0.stop()


def test_case_11():
    int_0 = 876
    float_arg_0 = module_0.FloatArg()
    timer_error_0 = module_0.TimerError()
    bool_0 = True
    timer_0 = module_0.Timer(int_0, initial_text=bool_0)
    complex_0 = -2245 + 4638.49113j
    none_type_0 = None
    timer_1 = timer_0.__enter__()
    user_dict_0 = module_2.UserDict()
    var_0 = user_dict_0.__copy__()
    var_1 = var_0.__eq__(none_type_0)
    var_2 = var_0.__iter__()
    var_2.__setitem__(complex_0, none_type_0)
