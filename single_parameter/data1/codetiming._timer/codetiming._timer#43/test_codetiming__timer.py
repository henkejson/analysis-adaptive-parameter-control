# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import codetiming._timer as module_0
import codetiming._timers as module_1


def test_case_0():
    float_arg_0 = module_0.FloatArg()


def test_case_1():
    timer_0 = module_0.Timer()
    none_type_0 = timer_0.start()
    none_type_1 = timer_0.__exit__()
    none_type_2 = timer_0.start()
    var_0 = timer_0.__repr__()
    timer_0.start()


def test_case_2():
    timer_0 = module_0.Timer()
    none_type_0 = timer_0.start()
    none_type_1 = timer_0.__exit__()


def test_case_3():
    str_0 = "R~\x0cMe[>tu)6>;"
    none_type_0 = None
    timer_0 = module_0.Timer(none_type_0, str_0, logger=none_type_0)
    timer_0.__exit__()


def test_case_4():
    timer_0 = module_0.Timer()
    timer_1 = timer_0.__enter__()
    float_0 = timer_0.stop()
    timer_1.stop()


def test_case_5():
    none_type_0 = None
    timer_0 = module_0.Timer(logger=none_type_0)
    var_0 = timer_0.__repr__()
    timer_1 = timer_0.__enter__()
    float_0 = timer_1.stop()
    timer_0.stop()


def test_case_6():
    none_type_0 = None
    str_0 = " does not support item assignment. Use '.add()' to update values."
    timer_0 = module_0.Timer(none_type_0, initial_text=str_0)
    var_0 = timer_0.__eq__(str_0)
    timers_0 = module_1.Timers()
    timer_1 = timer_0.__enter__()
    float_0 = timer_0.stop()
    var_0.__exit__(*var_0)


def test_case_7():
    float_arg_0 = module_0.FloatArg()
    none_type_0 = None
    timer_0 = module_0.Timer(float_arg_0, logger=none_type_0)
    var_0 = timer_0.__repr__()
    timer_1 = timer_0.__enter__()
    float_0 = timer_1.stop()
    var_0.get(none_type_0)


def test_case_8():
    float_arg_0 = module_0.FloatArg()
    timer_0 = module_0.Timer(initial_text=float_arg_0)
    timer_1 = timer_0.__enter__()
    none_type_0 = timer_1.__exit__()
    float_0 = timer_1.__repr__()
    none_type_0.clear()


def test_case_9():
    float_arg_0 = module_0.FloatArg()
    timer_0 = module_0.Timer(initial_text=float_arg_0)
    var_0 = timer_0.__eq__(float_arg_0)
    timer_1 = timer_0.__enter__()
    float_arg_1 = module_0.FloatArg()
    timer_2 = module_0.Timer(text=timer_0)
    var_1 = timer_2.__call__(timer_0)
    timer_3 = timer_2.__enter__()
    float_0 = timer_3.stop()
    timer_0.__exit__(*var_1)


def test_case_10():
    float_arg_0 = module_0.FloatArg()
    timer_0 = module_0.Timer(initial_text=float_arg_0)
    none_type_0 = None
    timer_1 = module_0.Timer(timer_0, none_type_0, float_arg_0)
    timer_2 = timer_1.__enter__()
    timer_0.stop()
