# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import codetiming._timer as module_0
import codetiming._timers as module_1
import collections as module_2


def test_case_0():
    timer_error_0 = module_0.TimerError()


def test_case_1():
    none_type_0 = None
    timer_0 = module_0.Timer(none_type_0)
    none_type_1 = timer_0.start()
    timer_0.start()


def test_case_2():
    timers_0 = module_1.Timers()
    timer_0 = module_0.Timer()
    none_type_0 = timer_0.start()


def test_case_3():
    timer_0 = module_0.Timer()
    var_0 = timer_0.__call__(timer_0)
    float_arg_0 = module_0.FloatArg()
    timer_0.stop()


def test_case_4():
    timer_0 = module_0.Timer()
    none_type_0 = timer_0.start()
    none_type_1 = timer_0.__exit__()


def test_case_5():
    float_arg_0 = module_0.FloatArg()
    timer_0 = module_0.Timer(text=float_arg_0, initial_text=float_arg_0)
    timer_1 = timer_0.__enter__()


def test_case_6():
    none_type_0 = None
    list_0 = []
    timer_0 = module_0.Timer(none_type_0, initial_text=list_0, logger=none_type_0)
    none_type_1 = timer_0.start()
    none_type_2 = None
    timer_1 = module_0.Timer(logger=none_type_2)


def test_case_7():
    float_arg_0 = module_0.FloatArg()
    timer_0 = module_0.Timer(float_arg_0)
    timer_1 = timer_0.__enter__()
    user_dict_0 = module_2.UserDict()
    var_0 = timer_0.__repr__()
    var_1 = timer_0.__eq__(float_arg_0)
    float_0 = timer_0.stop()
    var_2 = user_dict_0.__iter__()
    var_3 = var_0.__repr__()
    var_4 = user_dict_0.__repr__()
    var_0.values()


def test_case_8():
    timer_error_0 = module_0.TimerError()
    float_arg_0 = module_0.FloatArg()
    timer_0 = module_0.Timer(text=float_arg_0, initial_text=float_arg_0)
    none_type_0 = None
    timer_1 = module_0.Timer(logger=none_type_0)
    timer_2 = timer_0.__enter__()
    user_dict_0 = module_2.UserDict()
    int_0 = 1508
    none_type_1 = timer_1.start()
    var_0 = timer_2.__repr__()
    list_0 = [int_0, var_0, var_0, int_0]
    none_type_2 = timer_1.__exit__(*list_0)
    var_1 = user_dict_0.__or__(float_arg_0)
    timer_2.__enter__()


def test_case_9():
    str_0 = " does not support item assignment. Use '.add()' to update values."
    timer_0 = module_0.Timer(text=str_0, initial_text=str_0, logger=str_0)
    var_0 = timer_0.__repr__()
    timer_0.__enter__()


def test_case_10():
    timer_error_0 = module_0.TimerError()
    float_arg_0 = module_0.FloatArg()
    none_type_0 = None
    timer_0 = module_0.Timer(float_arg_0, none_type_0, float_arg_0)
    timer_1 = module_0.Timer(logger=timer_0)
    timer_2 = timer_0.__enter__()
    user_dict_0 = module_2.UserDict()
    int_0 = 1527
    none_type_1 = timer_1.start()
    var_0 = timer_2.__repr__()
    list_0 = [int_0, var_0, var_0, int_0]
    none_type_2 = timer_1.__exit__(*list_0)
    var_1 = user_dict_0.__or__(float_arg_0)
    timer_2.__enter__()
