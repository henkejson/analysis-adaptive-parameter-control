# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import codetiming._timer as module_0


def test_case_0():
    timer_error_0 = module_0.TimerError()


def test_case_1():
    bool_0 = False
    timer_0 = module_0.Timer(bool_0)
    float_arg_0 = timer_0.__call__(bool_0)
    var_0 = timer_0.__call__(float_arg_0)
    var_0.__call__(timer_0)


def test_case_2():
    bool_0 = False
    timer_0 = module_0.Timer(bool_0)
    timer_1 = timer_0.__enter__()


def test_case_3():
    bytes_0 = b"\x85\x8d\xd7\xb4\xf6Y]\x0cN\\\xf3\xf5c*\x04<k+}\xcd"
    timer_0 = module_0.Timer(bytes_0, initial_text=bytes_0)
    timer_0.stop()


def test_case_4():
    bool_0 = False
    timer_0 = module_0.Timer(bool_0)
    none_type_0 = timer_0.start()
    none_type_1 = timer_0.__exit__()


def test_case_5():
    bool_0 = True
    timer_0 = module_0.Timer(bool_0)
    var_0 = timer_0.__call__(timer_0)
    var_1 = var_0.__call__(timer_0)


def test_case_6():
    bool_0 = False
    timer_0 = module_0.Timer(logger=bool_0)
    var_0 = timer_0.__call__(timer_0)
    complex_0 = -3175.14442 + 806.071j
    var_1 = timer_0.__call__(complex_0)
    var_2 = var_0.__call__(complex_0)
    var_3 = timer_0.__call__(var_2)
    var_4 = var_2.__eq__(complex_0)
    var_2.stop()


def test_case_7():
    bool_0 = True
    none_type_0 = None
    timer_0 = module_0.Timer(none_type_0, initial_text=bool_0)
    var_0 = timer_0.__call__(none_type_0)
    var_0.__call__(timer_0)


def test_case_8():
    bool_0 = True
    timer_0 = module_0.Timer(bool_0, initial_text=bool_0)
    var_0 = timer_0.__call__(timer_0)
    var_1 = timer_0.__call__(var_0)
    var_2 = timer_0.__call__(timer_0)
    set_0 = set()
    var_1.__call__(set_0)


def test_case_9():
    str_0 = "po~@OBn"
    timer_0 = module_0.Timer(text=str_0, initial_text=str_0)
    timer_error_0 = module_0.TimerError()
    list_0 = []
    float_arg_0 = module_0.FloatArg(*list_0)
    timer_error_1 = module_0.TimerError(*list_0)
    float_arg_1 = module_0.FloatArg()
    none_type_0 = timer_0.start()
    timer_error_2 = module_0.TimerError()
    float_arg_2 = module_0.FloatArg()
    var_0 = timer_0.__repr__()
    var_1 = var_0.__eq__(float_arg_0)
    var_1.__enter__()


def test_case_10():
    bool_0 = True
    none_type_0 = None
    timer_0 = module_0.Timer(none_type_0, initial_text=bool_0)
    var_0 = timer_0.__call__(none_type_0)
    timer_1 = module_0.Timer(var_0, timer_0, logger=bool_0)
    var_1 = timer_1.__call__(bool_0)
    var_1.__call__(timer_1)
