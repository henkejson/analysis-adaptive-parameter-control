# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.immutable_list as module_0


def test_case_0():
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList()
    bool_1 = immutable_list_0.__eq__(bool_0)
    immutable_list_1 = immutable_list_0.unshift(bool_0)
    immutable_list_1.find(bool_0)


def test_case_1():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.append(none_type_0)


def test_case_2():
    float_0 = 24.3346
    immutable_list_0 = module_0.ImmutableList(float_0)
    immutable_list_0.__add__(float_0)


def test_case_3():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.__len__()
    immutable_list_1 = immutable_list_0.unshift(var_0)
    immutable_list_1.find(var_0)


def test_case_4():
    complex_0 = 103.2 + 1464.2j
    immutable_list_0 = module_0.ImmutableList(complex_0)
    var_0 = immutable_list_0.__len__()
    immutable_list_0.find(var_0)


def test_case_5():
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.to_list()
    immutable_list_1 = immutable_list_0.unshift(bool_0)
    immutable_list_1.find(bool_0)


def test_case_6():
    tuple_0 = ()
    immutable_list_0 = module_0.ImmutableList(tail=tuple_0)
    immutable_list_0.to_list()


def test_case_7():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_0.map(immutable_list_0)


def test_case_8():
    complex_0 = 103.2 + 1464.2j
    immutable_list_0 = module_0.ImmutableList(complex_0)
    immutable_list_0.filter(immutable_list_0)


def test_case_9():
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(tail=bool_0)
    immutable_list_0.filter(bool_0)


def test_case_10():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.find(immutable_list_0)
    var_1 = immutable_list_0.reduce(var_0, var_0)
    immutable_list_0.filter(var_0)


def test_case_11():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_1.find(immutable_list_1)


def test_case_12():
    str_0 = "\n        Transform Box into successfull Try.\n\n        :returns: successfull Try monad with previous value\n        :rtype: Try[A]\n        "
    set_0 = {str_0, str_0, str_0, str_0}
    int_0 = -879
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(int_0, none_type_0)
    var_0 = immutable_list_0.__len__()
    immutable_list_0.reduce(var_0, set_0)


def test_case_13():
    immutable_list_0 = module_0.ImmutableList()


def test_case_14():
    immutable_list_0 = module_0.ImmutableList()
    str_0 = immutable_list_0.__str__()
    immutable_list_1 = immutable_list_0.__add__(immutable_list_0)
    immutable_list_0.filter(immutable_list_0)


def test_case_15():
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(bool_0)
    immutable_list_1 = immutable_list_0.__add__(immutable_list_0)
    immutable_list_2 = immutable_list_1.__add__(immutable_list_1)
    immutable_list_1.find(immutable_list_1)


def test_case_16():
    complex_0 = 103.2 + 1464.2j
    immutable_list_0 = module_0.ImmutableList(complex_0)
    immutable_list_0.find(immutable_list_0)


def test_case_17():
    immutable_list_0 = module_0.ImmutableList()
    int_0 = -1140
    immutable_list_1 = immutable_list_0.unshift(int_0)
    var_0 = immutable_list_0.find(int_0)
    immutable_list_2 = module_0.ImmutableList()
    none_type_0 = None
    var_1 = immutable_list_2.__len__()
    var_2 = immutable_list_0.__len__()
    str_0 = immutable_list_0.__str__()
    immutable_list_3 = immutable_list_0.unshift(none_type_0)
    immutable_list_1.reduce(var_1, str_0)


def test_case_18():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(none_type_0, none_type_0)
    var_0 = immutable_list_0.__len__()
    immutable_list_1 = immutable_list_0.unshift(none_type_0)
    immutable_list_2 = module_0.ImmutableList(none_type_0, var_0)
    immutable_list_2.map(immutable_list_0)


def test_case_19():
    immutable_list_0 = module_0.ImmutableList()
    bool_0 = immutable_list_0.__eq__(immutable_list_0)
    immutable_list_1 = immutable_list_0.unshift(bool_0)
    var_0 = immutable_list_1.__len__()
    immutable_list_1.find(bool_0)


def test_case_20():
    immutable_list_0 = module_0.ImmutableList()
    bool_0 = immutable_list_0.__eq__(immutable_list_0)
    immutable_list_1 = immutable_list_0.unshift(bool_0)
    immutable_list_1.find(bool_0)


def test_case_21():
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(bool_0)
    immutable_list_1 = immutable_list_0.__add__(immutable_list_0)
    bool_1 = immutable_list_1.__eq__(immutable_list_0)
    immutable_list_0.find(immutable_list_0)


def test_case_22():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = module_0.ImmutableList(is_empty=immutable_list_0)
    var_0 = immutable_list_0.find(immutable_list_0)
    immutable_list_2 = module_0.ImmutableList()
    var_1 = immutable_list_2.__len__()
    str_0 = immutable_list_0.__str__()
    str_1 = immutable_list_0.__str__()
    var_2 = immutable_list_2.reduce(str_0, var_0)
    immutable_list_3 = immutable_list_2.unshift(immutable_list_0)
    var_3 = immutable_list_3.to_list()
    bool_0 = immutable_list_3.__eq__(immutable_list_2)
    immutable_list_0.filter(var_0)
