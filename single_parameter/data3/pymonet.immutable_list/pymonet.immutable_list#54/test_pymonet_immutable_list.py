# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.immutable_list as module_0


def test_case_0():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    bool_0 = immutable_list_1.__eq__(immutable_list_1)
    immutable_list_0.filter(immutable_list_1)


def test_case_1():
    immutable_list_0 = module_0.ImmutableList()
    str_0 = immutable_list_0.__str__()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    bool_0 = immutable_list_1.__eq__(str_0)
    immutable_list_1.find(immutable_list_0)


def test_case_2():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_1.find(immutable_list_0)


def test_case_3():
    str_0 = "\n        Transform Validation to Box.\n\n        :returns: Box with Validation value\n        :rtype: Box[A]\n        "
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_0.__add__(str_0)


def test_case_4():
    immutable_list_0 = module_0.ImmutableList()
    str_0 = immutable_list_0.__str__()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    str_1 = immutable_list_0.__len__()
    immutable_list_1.find(immutable_list_0)


def test_case_5():
    immutable_list_0 = module_0.ImmutableList()
    str_0 = immutable_list_0.__str__()
    immutable_list_1 = immutable_list_0.unshift(str_0)
    var_0 = immutable_list_1.__len__()
    var_1 = immutable_list_0.find(var_0)
    immutable_list_1.find(immutable_list_0)


def test_case_6():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.to_list()


def test_case_7():
    immutable_list_0 = module_0.ImmutableList()
    str_0 = immutable_list_0.__str__()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    str_1 = immutable_list_1.__str__()
    immutable_list_1.find(immutable_list_0)


def test_case_8():
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    none_type_0 = None
    immutable_list_2 = immutable_list_0.unshift(none_type_0)
    immutable_list_3 = immutable_list_0.__add__(immutable_list_0)
    bool_1 = immutable_list_3.__eq__(immutable_list_1)
    immutable_list_0.map(bool_0)


def test_case_9():
    bool_0 = False
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(bool_0, none_type_0)
    str_0 = immutable_list_0.__str__()
    str_1 = immutable_list_0.__str__()
    immutable_list_1 = immutable_list_0.append(none_type_0)
    list_0 = []
    immutable_list_1.map(list_0)


def test_case_10():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_0.filter(immutable_list_0)


def test_case_11():
    none_type_0 = None
    int_0 = 1116
    immutable_list_0 = module_0.ImmutableList(tail=int_0)
    immutable_list_0.filter(none_type_0)


def test_case_12():
    set_0 = set()
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.find(bool_0)
    var_0.filter(set_0)


def test_case_13():
    immutable_list_0 = module_0.ImmutableList()
    str_0 = immutable_list_0.reduce(immutable_list_0, immutable_list_0)
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    var_0 = immutable_list_0.__len__()
    immutable_list_1.find(immutable_list_0)


def test_case_14():
    str_0 = "\n        Take function, store it and call with Task value during calling fork function.\n        Return new Task with result of called.\n\n        :param fn: mapper function\n        :type fn: Function(value) -> B\n        :returns: new Task with mapped resolve attribute\n        :rtype: Task[Function(resolve, reject -> A | B]\n        "
    none_type_0 = None
    none_type_1 = None
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(bool_0)
    immutable_list_1 = immutable_list_0.append(none_type_1)
    immutable_list_1.reduce(str_0, none_type_0)


def test_case_15():
    immutable_list_0 = module_0.ImmutableList()


def test_case_16():
    immutable_list_0 = module_0.ImmutableList()
    str_0 = immutable_list_0.__str__()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_1.find(immutable_list_0)


def test_case_17():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.append(immutable_list_0)
    var_0 = immutable_list_1.find(immutable_list_1)
    immutable_list_0.filter(immutable_list_0)


def test_case_18():
    immutable_list_0 = module_0.ImmutableList()
    str_0 = immutable_list_0.__str__()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    bool_0 = immutable_list_1.__eq__(immutable_list_0)
    immutable_list_1.find(immutable_list_0)


def test_case_19():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.find(immutable_list_0)
    float_0 = 1977.12759
    immutable_list_1 = immutable_list_0.append(none_type_0)
    immutable_list_2 = immutable_list_1.append(float_0)
    immutable_list_0.filter(immutable_list_2)


def test_case_20():
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(bool_0, is_empty=bool_0)
    immutable_list_0.find(immutable_list_0)


def test_case_21():
    bool_0 = False
    bool_1 = True
    immutable_list_0 = module_0.ImmutableList(bool_0, is_empty=bool_1)
    bool_2 = False
    immutable_list_1 = module_0.ImmutableList(bool_0, is_empty=bool_2)
    immutable_list_2 = module_0.ImmutableList()
    immutable_list_1.reduce(bool_0, bool_2)


def test_case_22():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.reduce(immutable_list_0, immutable_list_0)
    immutable_list_1 = var_0.append(var_0)
    var_1 = var_0.reduce(immutable_list_1, immutable_list_0)
    immutable_list_2 = immutable_list_1.unshift(var_0)
    str_0 = immutable_list_2.__str__()
    bool_0 = immutable_list_2.__eq__(immutable_list_0)
    immutable_list_3 = var_1.append(str_0)
    bool_1 = var_0.__eq__(immutable_list_1)
    immutable_list_2.find(var_1)


def test_case_23():
    none_type_0 = None
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(bool_0, none_type_0, bool_0)
    var_0 = immutable_list_0.__len__()
    immutable_list_0.find(var_0)
