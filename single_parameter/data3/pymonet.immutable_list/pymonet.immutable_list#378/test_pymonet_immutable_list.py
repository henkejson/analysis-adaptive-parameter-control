# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.immutable_list as module_0
import builtins as module_1


def test_case_0():
    immutable_list_0 = module_0.ImmutableList()
    bool_0 = immutable_list_0.__eq__(immutable_list_0)
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    var_0 = immutable_list_0.__len__()
    immutable_list_1.find(immutable_list_0)


def test_case_1():
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(is_empty=bool_0)
    var_0 = immutable_list_0.reduce(immutable_list_0, immutable_list_0)
    var_1 = immutable_list_0.find(bool_0)
    bool_1 = var_0.__eq__(bool_0)
    none_type_0 = None
    immutable_list_1 = immutable_list_0.unshift(bool_1)
    immutable_list_2 = immutable_list_1.append(none_type_0)
    immutable_list_2.find(immutable_list_0)


def test_case_2():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_1.find(immutable_list_0)


def test_case_3():
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(tail=bool_0)
    immutable_list_0.__add__(bool_0)


def test_case_4():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    var_0 = immutable_list_0.__len__()
    immutable_list_1.find(immutable_list_0)


def test_case_5():
    immutable_list_0 = module_0.ImmutableList()
    str_0 = immutable_list_0.__str__()


def test_case_6():
    str_0 = "Min[value={}]"
    list_0 = [str_0, str_0, str_0, str_0]
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(list_0, list_0, bool_0)
    immutable_list_0.__str__()


def test_case_7():
    float_0 = 79.46534
    set_0 = {float_0, float_0, float_0}
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(is_empty=bool_0)
    immutable_list_0.map(set_0)


def test_case_8():
    object_0 = module_1.object()
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(tail=bool_0)
    var_0 = immutable_list_0.reduce(object_0, object_0)
    bool_1 = False
    immutable_list_1 = module_0.ImmutableList(tail=bool_1, is_empty=bool_1)
    none_type_0 = None
    immutable_list_1.map(none_type_0)


def test_case_9():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_0.filter(immutable_list_0)


def test_case_10():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(tail=none_type_0, is_empty=none_type_0)
    immutable_list_1 = immutable_list_0.unshift(none_type_0)
    immutable_list_1.filter(none_type_0)


def test_case_11():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = module_0.ImmutableList()
    var_0 = immutable_list_1.__len__()
    var_1 = immutable_list_1.find(var_0)
    immutable_list_1.filter(var_0)


def test_case_12():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    var_0 = immutable_list_0.reduce(immutable_list_1, immutable_list_1)
    immutable_list_1.find(var_0)


def test_case_13():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.find(none_type_0)
    immutable_list_1 = module_0.ImmutableList(
        immutable_list_0, immutable_list_0, none_type_0
    )
    immutable_list_1.reduce(none_type_0, none_type_0)


def test_case_14():
    immutable_list_0 = module_0.ImmutableList()


def test_case_15():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.append(immutable_list_0)
    immutable_list_2 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_2.find(immutable_list_0)


def test_case_16():
    str_0 = "\n        Returns successful Vblidation with value and empty errors list.\n\n       8:params value: value to store in Validation\n        :type value: A\n        :returns: ,uccessful Validation\n        :rtype: Validation[A, []]\n       "
    immutable_list_0 = module_0.ImmutableList(str_0, is_empty=str_0)
    immutable_list_1 = immutable_list_0.append(immutable_list_0)
    immutable_list_2 = immutable_list_1.__add__(immutable_list_0)
    immutable_list_1.find(immutable_list_1)


def test_case_17():
    str_0 = "\n        Returns successful Validation with value and empty errors list.\n\n        :params value: value to store in Validation\n        :type value: A\n        :returns: Successful Validation\n        :rtype: Validation[A, []]\n        "
    immutable_list_0 = module_0.ImmutableList(str_0, is_empty=str_0)
    immutable_list_0.find(immutable_list_0)


def test_case_18():
    bytes_0 = b"\xef\x8388\x10jL"
    immutable_list_0 = module_0.ImmutableList(bytes_0)
    immutable_list_0.reduce(bytes_0, immutable_list_0)


def test_case_19():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.__add__(immutable_list_0)
    var_0 = immutable_list_0.find(none_type_0)
    bool_0 = immutable_list_0.__eq__(immutable_list_1)
    var_0.__len__()


def test_case_20():
    str_0 = "\n        Returns successful Validation with value and empty errors list.\n\n        :params value: value to store in Validation\n        :type value: A\n        :returns: Successful Validation\n        :rtype: Validation[A, []]\n        "
    immutable_list_0 = module_0.ImmutableList(str_0, is_empty=str_0)
    var_0 = immutable_list_0.__len__()
    immutable_list_0.find(var_0)


def test_case_21():
    str_0 = "\n        Returns successful Validation with vale and empty errors list.\n\n        :params value: value to store in Validation\n        :type value: A\n        :returns: Successful Validation\n        :rtype: Validation[A, []]\n        "
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(str_0, str_0, none_type_0)
    var_0 = immutable_list_0.__len__()
    immutable_list_0.find(var_0)


def test_case_22():
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(is_empty=bool_0)
    var_0 = immutable_list_0.__len__()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    bool_1 = immutable_list_0.__eq__(immutable_list_1)
    immutable_list_1.find(var_0)
