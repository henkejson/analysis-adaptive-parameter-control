# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.immutable_list as module_0


def test_case_0():
    immutable_list_0 = module_0.ImmutableList()
    bool_0 = immutable_list_0.__eq__(immutable_list_0)


def test_case_1():
    bytes_0 = b"\xf5\x90\x8e\x19&m-"
    immutable_list_0 = module_0.ImmutableList(tail=bytes_0)
    bool_0 = immutable_list_0.__eq__(bytes_0)
    var_0 = immutable_list_0.reduce(immutable_list_0, immutable_list_0)
    immutable_list_1 = var_0.unshift(bool_0)
    immutable_list_1.find(var_0)


def test_case_2():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.append(immutable_list_0)
    immutable_list_0.filter(immutable_list_0)


def test_case_3():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_0.__add__(none_type_0)


def test_case_4():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    var_0 = immutable_list_1.__len__()
    immutable_list_1.find(immutable_list_0)


def test_case_5():
    bytes_0 = b"\\"
    immutable_list_0 = module_0.ImmutableList(bytes_0)
    var_0 = immutable_list_0.to_list()


def test_case_6():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    var_0 = immutable_list_1.to_list()
    immutable_list_1.find(immutable_list_0)


def test_case_7():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.to_list()
    immutable_list_1 = module_0.ImmutableList(
        immutable_list_0, is_empty=immutable_list_0
    )
    immutable_list_0.map(immutable_list_0)


def test_case_8():
    str_0 = "\n    Sum is a Monoid that will combine 2 numbers under addition.\n    "
    set_0 = {str_0, str_0, str_0}
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(is_empty=none_type_0)
    immutable_list_1 = module_0.ImmutableList(immutable_list_0, is_empty=set_0)
    bool_0 = immutable_list_0.__eq__(set_0)
    bool_1 = False
    int_0 = -555
    str_1 = "\n        Two Validations are equals when values and errors lists are equal.\n        "
    str_2 = immutable_list_0.__str__()
    int_1 = 0
    dict_0 = {int_1: int_1, int_1: int_1}
    immutable_list_2 = module_0.ImmutableList(is_empty=dict_0)
    immutable_list_3 = immutable_list_0.unshift(bool_1)
    immutable_list_4 = immutable_list_2.append(str_1)
    immutable_list_4.map(int_0)


def test_case_9():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_0.filter(immutable_list_0)


def test_case_10():
    bytes_0 = b"\xf5\x90\x8e\x19&m-"
    immutable_list_0 = module_0.ImmutableList(tail=bytes_0)
    none_type_0 = None
    bool_0 = immutable_list_0.__eq__(none_type_0)
    var_0 = immutable_list_0.reduce(immutable_list_0, immutable_list_0)
    var_1 = immutable_list_0.reduce(var_0, var_0)
    immutable_list_1 = var_1.unshift(var_0)
    var_2 = var_1.find(none_type_0)
    bool_1 = True
    list_0 = [bool_1, bool_0, immutable_list_1, bool_1]
    var_0.filter(list_0)


def test_case_11():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.find(immutable_list_0)
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_1.find(immutable_list_0)


def test_case_12():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_1.find(immutable_list_0)


def test_case_13():
    none_type_0 = None
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(none_type_0, is_empty=bool_0)
    var_0 = immutable_list_0.reduce(none_type_0, none_type_0)


def test_case_14():
    bool_0 = True
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(none_type_0)
    immutable_list_1 = immutable_list_0.unshift(bool_0)
    var_0 = immutable_list_1.to_list()
    immutable_list_1.reduce(var_0, none_type_0)


def test_case_15():
    immutable_list_0 = module_0.ImmutableList()


def test_case_16():
    immutable_list_0 = module_0.ImmutableList()
    str_0 = immutable_list_0.__str__()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_1.find(immutable_list_0)


def test_case_17():
    str_0 = "~I)c'h=hdUa%([b/!1"
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(str_0)
    immutable_list_2 = immutable_list_1.append(str_0)
    immutable_list_2.find(str_0)


def test_case_18():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(none_type_0)
    immutable_list_2 = module_0.ImmutableList(immutable_list_0)
    var_0 = immutable_list_2.__len__()
    var_1 = immutable_list_1.reduce(var_0, none_type_0)
    immutable_list_3 = immutable_list_2.append(immutable_list_0)
    immutable_list_4 = module_0.ImmutableList(tail=immutable_list_0)


def test_case_19():
    bytes_0 = b'\x94\x1bp\xff\x168\xb5\xecz\xbd\xedL"Y\x9d'
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(bool_0, is_empty=bool_0)
    immutable_list_0.find(bytes_0)


def test_case_20():
    bytes_0 = b"\xf5\x90\x8eF&m-"
    immutable_list_0 = module_0.ImmutableList(tail=bytes_0)
    immutable_list_1 = module_0.ImmutableList()
    bool_0 = immutable_list_1.__eq__(immutable_list_0)
    immutable_list_2 = immutable_list_1.unshift(immutable_list_0)
    var_0 = immutable_list_1.find(immutable_list_2)
    immutable_list_2.find(var_0)


def test_case_21():
    bytes_0 = b"\xf5\x90\x8eF&m-"
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.__add__(immutable_list_0)
    bool_0 = immutable_list_0.__eq__(bytes_0)
    immutable_list_2 = immutable_list_1.unshift(immutable_list_1)
    bool_1 = immutable_list_2.__eq__(immutable_list_0)
    var_0 = immutable_list_0.find(bool_0)
    immutable_list_2.find(var_0)


def test_case_22():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(none_type_0)
    immutable_list_1 = module_0.ImmutableList(immutable_list_0)
    immutable_list_2 = immutable_list_1.append(none_type_0)
    immutable_list_1.reduce(none_type_0, immutable_list_2)
