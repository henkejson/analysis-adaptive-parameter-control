# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.immutable_list as module_0


def test_case_0():
    str_0 = "vLo\n>$duVcUB|"
    immutable_list_0 = module_0.ImmutableList(str_0, str_0)
    bool_0 = immutable_list_0.__eq__(immutable_list_0)
    immutable_list_0.find(immutable_list_0)


def test_case_1():
    bool_0 = True
    tuple_0 = (bool_0,)
    immutable_list_0 = module_0.ImmutableList(tuple_0)
    var_0 = immutable_list_0.__len__()
    bool_1 = immutable_list_0.__eq__(var_0)
    var_1 = immutable_list_0.__len__()
    immutable_list_0.find(bool_0)


def test_case_2():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(none_type_0)


def test_case_3():
    int_0 = -136
    set_0 = {int_0, int_0}
    immutable_list_0 = module_0.ImmutableList(set_0)
    immutable_list_1 = module_0.ImmutableList(tail=immutable_list_0)
    immutable_list_1.__add__(set_0)


def test_case_4():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.__len__()


def test_case_5():
    bool_0 = True
    tuple_0 = (bool_0,)
    immutable_list_0 = module_0.ImmutableList(tuple_0)
    var_0 = immutable_list_0.__len__()
    immutable_list_0.find(bool_0)


def test_case_6():
    immutable_list_0 = module_0.ImmutableList()
    str_0 = immutable_list_0.__str__()
    none_type_0 = None
    immutable_list_1 = module_0.ImmutableList(none_type_0)


def test_case_7():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.append(immutable_list_0)
    var_0 = immutable_list_1.to_list()
    var_1 = immutable_list_1.find(var_0)
    immutable_list_0.filter(immutable_list_1)


def test_case_8():
    immutable_list_0 = module_0.ImmutableList()
    bool_0 = immutable_list_0.__eq__(immutable_list_0)
    immutable_list_1 = immutable_list_0.__add__(immutable_list_0)
    immutable_list_2 = module_0.ImmutableList()
    var_0 = immutable_list_0.to_list()
    immutable_list_0.map(var_0)


def test_case_9():
    none_type_0 = None
    float_0 = 224.0
    bytes_0 = b"\xad\x1f\xc4\xc4\xe7\xe1\x91\xb6\x0b\x97I\xd3\xf8\xdd\x994"
    immutable_list_0 = module_0.ImmutableList(is_empty=bytes_0)
    immutable_list_1 = immutable_list_0.append(float_0)
    immutable_list_1.map(none_type_0)


def test_case_10():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_0.filter(immutable_list_0)


def test_case_11():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.reduce(immutable_list_0, immutable_list_0)
    immutable_list_1 = immutable_list_0.__add__(var_0)
    var_1 = immutable_list_0.find(var_0)
    immutable_list_2 = module_0.ImmutableList(immutable_list_0, is_empty=var_0)
    var_2 = var_0.__len__()
    immutable_list_1.filter(var_1)


def test_case_12():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.append(immutable_list_0)
    var_0 = immutable_list_1.find(immutable_list_1)
    immutable_list_0.filter(immutable_list_1)


def test_case_13():
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(bool_0)
    immutable_list_0.find(immutable_list_0)


def test_case_14():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.reduce(immutable_list_0, immutable_list_0)
    var_1 = immutable_list_0.find(immutable_list_0)
    immutable_list_0.filter(immutable_list_0)


def test_case_15():
    int_0 = -2657
    bytes_0 = b"k%\x16\xbf\xba\xa8"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    immutable_list_0 = module_0.ImmutableList(list_0, is_empty=bytes_0)
    immutable_list_0.reduce(int_0, int_0)


def test_case_16():
    immutable_list_0 = module_0.ImmutableList()


def test_case_17():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.append(immutable_list_0)
    immutable_list_0.filter(immutable_list_1)


def test_case_18():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.__add__(immutable_list_0)
    immutable_list_2 = immutable_list_0.__add__(immutable_list_1)
    var_0 = immutable_list_0.find(immutable_list_1)
    immutable_list_3 = immutable_list_0.unshift(immutable_list_2)
    bool_0 = immutable_list_3.__eq__(immutable_list_1)
    immutable_list_4 = immutable_list_3.append(var_0)
    immutable_list_5 = module_0.ImmutableList(is_empty=immutable_list_4)
    immutable_list_6 = module_0.ImmutableList()
    none_type_0 = None
    immutable_list_7 = module_0.ImmutableList(
        immutable_list_0, is_empty=immutable_list_1
    )
    immutable_list_6.filter(none_type_0)


def test_case_19():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.reduce(immutable_list_0, immutable_list_0)
    immutable_list_1 = immutable_list_0.__add__(var_0)
    immutable_list_2 = immutable_list_1.__add__(var_0)
    var_1 = immutable_list_0.find(var_0)
    immutable_list_3 = module_0.ImmutableList(immutable_list_0, is_empty=var_0)
    var_2 = var_0.find(immutable_list_0)
    immutable_list_1.filter(var_1)


def test_case_20():
    str_0 = "vLo\n>$duVcUB|"
    immutable_list_0 = module_0.ImmutableList(str_0, str_0)
    var_0 = immutable_list_0.__len__()
    immutable_list_0.find(immutable_list_0)


def test_case_21():
    bool_0 = False
    tuple_0 = (bool_0,)
    immutable_list_0 = module_0.ImmutableList(tuple_0)
    var_0 = immutable_list_0.__add__(immutable_list_0)
    bool_1 = immutable_list_0.__eq__(var_0)
    var_1 = immutable_list_0.__len__()
    immutable_list_0.find(bool_0)


def test_case_22():
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(bool_0)
    immutable_list_1 = immutable_list_0.__add__(immutable_list_0)
    immutable_list_1.find(immutable_list_1)


def test_case_23():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.reduce(immutable_list_0, immutable_list_0)
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_2 = var_0.__add__(immutable_list_1)
    immutable_list_1.reduce(immutable_list_0, immutable_list_0)
