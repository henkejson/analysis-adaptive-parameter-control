# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.immutable_list as module_0
import builtins as module_1


def test_case_0():
    immutable_list_0 = module_0.ImmutableList()
    bool_0 = immutable_list_0.__eq__(immutable_list_0)
    immutable_list_1 = immutable_list_0.unshift(bool_0)
    immutable_list_1.find(immutable_list_1)


def test_case_1():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.to_list()
    bool_0 = immutable_list_0.__eq__(var_0)
    immutable_list_1 = immutable_list_0.unshift(var_0)
    immutable_list_1.find(immutable_list_1)


def test_case_2():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_1.find(immutable_list_0)


def test_case_3():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(none_type_0, none_type_0)
    immutable_list_0.__add__(none_type_0)


def test_case_4():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.__len__()
    str_0 = var_0.__str__()
    var_0.unshift(var_0)


def test_case_5():
    int_0 = 593
    immutable_list_0 = module_0.ImmutableList(int_0)
    var_0 = immutable_list_0.__len__()
    immutable_list_0.find(immutable_list_0)


def test_case_6():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.to_list()


def test_case_7():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.__add__(immutable_list_0)
    bool_0 = immutable_list_1.to_list()
    immutable_list_2 = immutable_list_0.unshift(immutable_list_1)
    immutable_list_2.find(immutable_list_2)


def test_case_8():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.append(immutable_list_0)
    immutable_list_2 = immutable_list_0.unshift(immutable_list_1)
    immutable_list_0.map(immutable_list_0)


def test_case_9():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = module_0.ImmutableList(immutable_list_0)
    immutable_list_2 = immutable_list_0.append(immutable_list_1)
    str_0 = immutable_list_0.__str__()
    immutable_list_3 = immutable_list_1.append(immutable_list_1)
    var_0 = immutable_list_0.reduce(immutable_list_1, immutable_list_0)
    immutable_list_3.map(var_0)


def test_case_10():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_0.filter(immutable_list_0)


def test_case_11():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.to_list()
    immutable_list_1 = immutable_list_0.__add__(immutable_list_0)
    immutable_list_1.filter(var_0)


def test_case_12():
    str_0 = "\n        Call success_callback function with monad value when monad is not successfully.\n\n        :params fail_callback: function to apply with monad value.\n        :type fail_callback: Function(A)\n        :returns: self\n        :rtype: Try[A]\n        "
    immutable_list_0 = module_0.ImmutableList(is_empty=str_0)
    var_0 = immutable_list_0.find(immutable_list_0)
    immutable_list_0.filter(var_0)


def test_case_13():
    int_0 = 592
    immutable_list_0 = module_0.ImmutableList(int_0)
    immutable_list_0.find(immutable_list_0)


def test_case_14():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.reduce(immutable_list_0, immutable_list_0)
    immutable_list_1 = immutable_list_0.unshift(var_0)
    immutable_list_1.find(immutable_list_1)


def test_case_15():
    object_0 = module_1.object()
    none_type_0 = None
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(object_0, none_type_0, bool_0)
    immutable_list_1 = module_0.ImmutableList(object_0)
    immutable_list_2 = module_0.ImmutableList()
    immutable_list_0.reduce(immutable_list_1, none_type_0)


def test_case_16():
    immutable_list_0 = module_0.ImmutableList()


def test_case_17():
    int_0 = 592
    immutable_list_0 = module_0.ImmutableList(int_0)
    str_0 = immutable_list_0.__str__()
    immutable_list_0.find(int_0)


def test_case_18():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.append(immutable_list_0)
    immutable_list_1 = immutable_list_0.unshift(var_0)
    immutable_list_1.find(immutable_list_1)


def test_case_19():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.append(immutable_list_0)
    immutable_list_2 = immutable_list_1.__add__(immutable_list_0)
    immutable_list_3 = immutable_list_0.unshift(immutable_list_1)
    immutable_list_3.find(immutable_list_3)


def test_case_20():
    str_0 = "\n        Call success_callback function with monad value when monad is not successfully.\n\n        :params fail_callback: function to apply with monad value.\n        :type fail_callback: Function(A)\n        :returns: self\n        :rtype: Try[A]\n        "
    immutable_list_0 = module_0.ImmutableList(is_empty=str_0)
    immutable_list_1 = immutable_list_0.append(str_0)
    immutable_list_2 = immutable_list_0.unshift(str_0)
    var_0 = immutable_list_2.__len__()
    immutable_list_2.find(var_0)


def test_case_21():
    immutable_list_0 = module_0.ImmutableList()
    none_type_0 = None
    var_0 = immutable_list_0.find(none_type_0)
    immutable_list_1 = module_0.ImmutableList()
    immutable_list_2 = module_0.ImmutableList(var_0)
    immutable_list_3 = module_0.ImmutableList()
    immutable_list_4 = immutable_list_3.unshift(var_0)
    var_1 = immutable_list_4.to_list()
    immutable_list_5 = immutable_list_3.unshift(immutable_list_0)
    immutable_list_6 = immutable_list_4.append(immutable_list_1)
    immutable_list_7 = module_0.ImmutableList()
    immutable_list_5.reduce(immutable_list_0, var_0)


def test_case_22():
    immutable_list_0 = module_0.ImmutableList()
    str_0 = immutable_list_0.__str__()
    immutable_list_1 = immutable_list_0.unshift(str_0)
    bool_0 = immutable_list_0.__eq__(immutable_list_1)
    immutable_list_2 = immutable_list_0.unshift(immutable_list_1)
    immutable_list_2.find(immutable_list_2)


def test_case_23():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.__add__(immutable_list_0)
    bool_0 = immutable_list_0.__eq__(var_0)
    immutable_list_1 = immutable_list_0.unshift(var_0)
    immutable_list_1.find(immutable_list_1)
