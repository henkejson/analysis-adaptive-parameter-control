# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.immutable_list as module_0
import typing as module_1


def test_case_0():
    immutable_list_0 = module_0.ImmutableList()
    none_type_0 = None
    immutable_list_1 = module_0.ImmutableList(none_type_0)
    var_0 = immutable_list_1.to_list()
    int_0 = -2023
    bool_0 = immutable_list_1.__eq__(int_0)


def test_case_1():
    dict_0 = {}
    generic_0 = module_1.Generic(**dict_0)
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.append(generic_0)


def test_case_2():
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(tail=bool_0)
    none_type_0 = None
    none_type_1 = None
    bool_1 = True
    immutable_list_1 = module_0.ImmutableList(none_type_1, is_empty=bool_1)
    immutable_list_1.__add__(none_type_0)


def test_case_3():
    str_0 = "\n        Take function (A) -> B and applied this function on current Validation value.\n\n        :param mapper: mapper function\n        :type mapper: Function(A) -> B\n        :returns: new Validation with mapped value and previous errors\n        :rtype: Validation[B, List[E]]\n        "
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.__len__()
    var_1 = immutable_list_0.reduce(str_0, str_0)
    str_1 = var_1.__str__()


def test_case_4():
    none_type_0 = None
    bytes_0 = b"\x02\x94\x074\xfd\x82\xdf\x0e[\xb3\xc4\x07s"
    immutable_list_0 = module_0.ImmutableList(bytes_0)
    var_0 = immutable_list_0.__len__()
    var_0.find(none_type_0)


def test_case_5():
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(bool_0, is_empty=bool_0)
    var_0 = immutable_list_0.to_list()
    immutable_list_0.find(immutable_list_0)


def test_case_6():
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(bool_0, is_empty=bool_0)
    immutable_list_1 = immutable_list_0.append(bool_0)
    var_0 = immutable_list_1.to_list()
    immutable_list_1.find(immutable_list_0)


def test_case_7():
    bytes_0 = b"\xf7"
    bool_0 = True
    int_0 = 1119
    str_0 = "!$]=\x0c{bfd&\n^BWsI"
    set_0 = {int_0, str_0}
    immutable_list_0 = module_0.ImmutableList(set_0)
    immutable_list_1 = immutable_list_0.append(bool_0)
    bool_1 = immutable_list_1.__eq__(bytes_0)
    immutable_list_2 = module_0.ImmutableList()
    immutable_list_2.map(immutable_list_2)


def test_case_8():
    none_type_0 = None
    none_type_1 = None
    immutable_list_0 = module_0.ImmutableList(none_type_1, none_type_1)
    var_0 = immutable_list_0.__len__()
    immutable_list_1 = immutable_list_0.append(var_0)
    immutable_list_2 = module_0.ImmutableList(tail=var_0)
    immutable_list_2.map(none_type_0)


def test_case_9():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_0.filter(immutable_list_0)


def test_case_10():
    int_0 = 1650
    immutable_list_0 = module_0.ImmutableList()
    bool_0 = immutable_list_0.__eq__(immutable_list_0)
    immutable_list_1 = immutable_list_0.unshift(int_0)
    var_0 = immutable_list_1.__len__()
    var_1 = immutable_list_0.find(var_0)
    immutable_list_1.filter(var_1)


def test_case_11():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.find(immutable_list_0)
    immutable_list_0.filter(var_0)


def test_case_12():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.reduce(immutable_list_0, immutable_list_0)
    var_1 = immutable_list_0.find(var_0)
    immutable_list_0.filter(immutable_list_0)


def test_case_13():
    bool_0 = False
    tuple_0 = ()
    immutable_list_0 = module_0.ImmutableList(tuple_0)
    immutable_list_0.reduce(bool_0, bool_0)


def test_case_14():
    immutable_list_0 = module_0.ImmutableList()


def test_case_15():
    bytes_0 = b"\x02\x94\x074\xfd\x82\xdf\x0e[\xb3\xc4\x07s"
    immutable_list_0 = module_0.ImmutableList(bytes_0)
    immutable_list_1 = immutable_list_0.__add__(immutable_list_0)
    str_0 = immutable_list_0.__str__()
    immutable_list_0.find(immutable_list_0)


def test_case_16():
    immutable_list_0 = module_0.ImmutableList()
    bool_0 = immutable_list_0.__eq__(immutable_list_0)
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_1.find(immutable_list_0)


def test_case_17():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_2 = immutable_list_1.append(immutable_list_0)
    immutable_list_1.find(immutable_list_0)


def test_case_18():
    int_0 = 1663
    immutable_list_0 = module_0.ImmutableList()
    bool_0 = immutable_list_0.__eq__(int_0)
    var_0 = immutable_list_0.reduce(bool_0, bool_0)
    immutable_list_1 = immutable_list_0.unshift(bool_0)
    var_1 = immutable_list_1.__len__()
    immutable_list_1.find(immutable_list_0)


def test_case_19():
    bool_0 = True
    int_0 = 435
    bool_1 = False
    immutable_list_0 = module_0.ImmutableList(int_0, is_empty=bool_1)
    immutable_list_1 = immutable_list_0.unshift(bool_0)
    none_type_0 = None
    immutable_list_1.reduce(immutable_list_0, none_type_0)


def test_case_20():
    bytes_0 = b"\x02\x94\x074\xfd\x82\xdf\x0e[\xb3\xc4\x07s"
    immutable_list_0 = module_0.ImmutableList(bytes_0)
    immutable_list_0.find(immutable_list_0)


def test_case_21():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.reduce(immutable_list_0, immutable_list_0)
    immutable_list_1 = var_0.unshift(var_0)
    bool_0 = immutable_list_0.__eq__(immutable_list_1)
    var_1 = var_0.reduce(var_0, bool_0)
    str_0 = var_1.__str__()
    immutable_list_2 = var_0.unshift(var_0)
    immutable_list_2.find(var_1)


def test_case_22():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.to_list()
    var_1 = immutable_list_0.reduce(immutable_list_0, immutable_list_0)
    bool_0 = immutable_list_0.__eq__(var_1)
    immutable_list_1 = var_1.append(var_1)
    bool_1 = immutable_list_1.__eq__(var_1)
    var_2 = var_1.reduce(var_1, bool_1)
    str_0 = var_2.__str__()
    immutable_list_2 = var_1.unshift(bool_0)
    immutable_list_2.find(var_2)
