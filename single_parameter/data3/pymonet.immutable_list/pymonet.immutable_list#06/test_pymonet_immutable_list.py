# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.immutable_list as module_0


def test_case_0():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(tail=none_type_0)
    bool_0 = True
    immutable_list_1 = module_0.ImmutableList(is_empty=bool_0)
    bool_1 = immutable_list_1.__eq__(immutable_list_0)


def test_case_1():
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(bool_0)
    bool_1 = immutable_list_0.__eq__(bool_0)
    immutable_list_0.find(immutable_list_0)


def test_case_2():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_1.find(immutable_list_0)


def test_case_3():
    complex_0 = 3285 - 1208.3899j
    dict_0 = {complex_0: complex_0, complex_0: complex_0}
    list_0 = [dict_0, dict_0, complex_0, dict_0]
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_0.__add__(list_0)


def test_case_4():
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(is_empty=bool_0)
    var_0 = immutable_list_0.__len__()
    var_1 = immutable_list_0.find(immutable_list_0)
    immutable_list_0.filter(bool_0)


def test_case_5():
    str_0 = "\n        Transform Box into Lazy with returning va@ue function.\n\n        :returns: not folded Lazy monad with function returning previous value\n        :rtype: Lazy[Function(() -> A)]\n        "
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(str_0, str_0, bool_0)
    immutable_list_1 = module_0.ImmutableList(is_empty=bool_0)
    var_0 = immutable_list_0.__len__()
    bool_1 = immutable_list_1.to_list()
    immutable_list_0.find(var_0)


def test_case_6():
    immutable_list_0 = module_0.ImmutableList()
    str_0 = immutable_list_0.__str__()


def test_case_7():
    bytes_0 = b"\x1eW\x1fNe"
    int_0 = 1418
    list_0 = [int_0]
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.reduce(int_0, int_0)
    str_0 = var_0.__str__()
    immutable_list_1 = module_0.ImmutableList(list_0)
    immutable_list_2 = immutable_list_1.unshift(bytes_0)
    str_1 = immutable_list_2.__str__()


def test_case_8():
    bool_0 = True
    int_0 = -1430
    immutable_list_0 = module_0.ImmutableList(int_0)
    immutable_list_0.map(bool_0)


def test_case_9():
    bytes_0 = b"3\xa1\x85x\xb3"
    float_0 = -293.027656
    tuple_0 = (bytes_0, float_0)
    set_0 = {tuple_0, bytes_0, tuple_0, tuple_0}
    float_1 = -2509.15
    immutable_list_0 = module_0.ImmutableList(tail=float_1)
    immutable_list_0.map(set_0)


def test_case_10():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(none_type_0, none_type_0)
    immutable_list_0.filter(none_type_0)


def test_case_11():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.__add__(immutable_list_0)
    var_0 = immutable_list_1.reduce(immutable_list_0, immutable_list_0)
    immutable_list_1.filter(var_0)


def test_case_12():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.reduce(immutable_list_0, immutable_list_0)
    immutable_list_1 = var_0.unshift(immutable_list_0)
    immutable_list_1.find(immutable_list_0)


def test_case_13():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(tail=none_type_0)
    bool_0 = True
    immutable_list_1 = immutable_list_0.unshift(bool_0)
    immutable_list_1.reduce(bool_0, none_type_0)


def test_case_14():
    immutable_list_0 = module_0.ImmutableList()


def test_case_15():
    bool_0 = False
    str_0 = "`X0n}yzwi)4I"
    immutable_list_0 = module_0.ImmutableList(str_0, bool_0)
    immutable_list_1 = immutable_list_0.append(immutable_list_0)
    immutable_list_0.find(bool_0)


def test_case_16():
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(bool_0)
    bool_1 = immutable_list_0.__eq__(bool_0)
    immutable_list_1 = immutable_list_0.append(bool_1)
    var_0 = immutable_list_0.__len__()
    immutable_list_0.find(var_0)


def test_case_17():
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(bool_0)
    immutable_list_0.find(immutable_list_0)


def test_case_18():
    str_0 = "nSOCTYG"
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(str_0, is_empty=none_type_0)
    immutable_list_0.reduce(none_type_0, str_0)


def test_case_19():
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.to_list()
    immutable_list_1 = module_0.ImmutableList()
    immutable_list_2 = immutable_list_1.__add__(immutable_list_1)
    immutable_list_3 = immutable_list_2.unshift(bool_0)
    bool_1 = immutable_list_1.__eq__(immutable_list_3)
    immutable_list_3.find(var_0)


def test_case_20():
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.append(bool_0)
    immutable_list_2 = module_0.ImmutableList(bool_0)
    bool_1 = immutable_list_1.__eq__(immutable_list_0)
    var_0 = immutable_list_1.to_list()
    immutable_list_2.find(var_0)
