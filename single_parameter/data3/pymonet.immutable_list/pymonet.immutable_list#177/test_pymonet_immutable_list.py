# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.immutable_list as module_0


def test_case_0():
    immutable_list_0 = module_0.ImmutableList()
    bool_0 = immutable_list_0.__eq__(immutable_list_0)
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_1.find(bool_0)


def test_case_1():
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(bool_0)
    bool_1 = immutable_list_0.__eq__(bool_0)
    immutable_list_0.find(immutable_list_0)


def test_case_2():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.append(immutable_list_0)
    immutable_list_0.filter(var_0)


def test_case_3():
    dict_0 = {}
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(tail=none_type_0)
    immutable_list_0.__add__(dict_0)


def test_case_4():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.__len__()
    immutable_list_0.filter(immutable_list_0)


def test_case_5():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    var_0 = immutable_list_1.__len__()
    immutable_list_1.find(var_0)


def test_case_6():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    var_0 = immutable_list_0.to_list()
    immutable_list_1.find(var_0)


def test_case_7():
    bytes_0 = b"\xbc\xbb-?Kd\x11\xf6U!\x15=\t\xee\x07Z\xcb\x83-\xe3"
    list_0 = [bytes_0, bytes_0, bytes_0]
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(tail=list_0, is_empty=bool_0)
    immutable_list_0.__str__()


def test_case_8():
    str_0 = "\n        Call argument function with args in try-catch.\n        when function don't raise exception, not successfully when raise.\n\n        :params fn: function to call and store in monad\n        :type fn: Function(*args) -> A\n        :params *args:\n        :type fn: List\n        :retruns: Successfully monad Try when function don't raise exception, not successfully when raise\n        :rtype: Try[A]\n        "
    none_type_0 = None
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(none_type_0, none_type_0, bool_0)
    immutable_list_1 = immutable_list_0.append(str_0)
    immutable_list_2 = immutable_list_1.append(str_0)
    var_0 = immutable_list_2.find(str_0)
    immutable_list_3 = module_0.ImmutableList(str_0, var_0)
    bytes_0 = b"0e'M"
    none_type_1 = None
    immutable_list_4 = module_0.ImmutableList(bytes_0, is_empty=none_type_1)
    var_1 = immutable_list_4.to_list()
    immutable_list_4.map(var_1)


def test_case_9():
    str_0 = "\n        It takes as a parameter function returning another Validation.\n        Function is called with Validation value and returns new Validation with previous value\n        and concated new and old errors.\n\n        :param monad: monad contains function\n        :type monad: Function(A) -> Validation[Any, List[E]]\n        :returns: new validation with stored errors\n        :rtype: Validation[A, List[E]]\n        "
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.reduce(str_0, none_type_0)
    float_0 = 2870.0
    bool_0 = False
    immutable_list_1 = module_0.ImmutableList(tail=bool_0)
    immutable_list_1.map(float_0)


def test_case_10():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_0.filter(immutable_list_0)


def test_case_11():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    var_0 = immutable_list_0.find(immutable_list_1)
    immutable_list_1.find(immutable_list_1)


def test_case_12():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.reduce(immutable_list_0, immutable_list_0)
    immutable_list_0.filter(var_0)


def test_case_13():
    str_0 = ""
    immutable_list_0 = module_0.ImmutableList(str_0)
    var_0 = immutable_list_0.__len__()
    immutable_list_1 = module_0.ImmutableList()
    immutable_list_2 = immutable_list_1.unshift(immutable_list_1)
    immutable_list_3 = immutable_list_1.__add__(immutable_list_1)
    var_1 = immutable_list_3.reduce(immutable_list_3, immutable_list_1)
    var_2 = immutable_list_3.reduce(var_1, var_1)
    immutable_list_0.reduce(var_1, var_2)


def test_case_14():
    immutable_list_0 = module_0.ImmutableList()


def test_case_15():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_1.find(immutable_list_1)


def test_case_16():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    bool_0 = immutable_list_0.__eq__(immutable_list_1)
    immutable_list_1.find(immutable_list_1)


def test_case_17():
    immutable_list_0 = module_0.ImmutableList()
    bool_0 = immutable_list_0.__eq__(immutable_list_0)
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    var_0 = immutable_list_1.__add__(immutable_list_1)
    immutable_list_1.find(bool_0)


def test_case_18():
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(bool_0)
    var_0 = immutable_list_0.__len__()
    immutable_list_0.find(var_0)


def test_case_19():
    dict_0 = {}
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.append(dict_0)
    list_0 = [immutable_list_1, immutable_list_1, immutable_list_1]
    immutable_list_2 = module_0.ImmutableList()
    var_0 = immutable_list_2.__len__()
    var_1 = immutable_list_0.reduce(list_0, immutable_list_0)
    var_2 = var_1.find(immutable_list_0)
    immutable_list_1.filter(var_2)


def test_case_20():
    immutable_list_0 = module_0.ImmutableList()
    str_0 = "Z`|Y9- _{"
    list_0 = [str_0, str_0, str_0]
    immutable_list_1 = module_0.ImmutableList()
    bool_0 = immutable_list_1.__eq__(immutable_list_0)
    var_0 = immutable_list_1.__len__()
    var_1 = immutable_list_0.reduce(list_0, immutable_list_0)
    var_2 = var_1.find(immutable_list_0)
    immutable_list_2 = immutable_list_0.unshift(immutable_list_1)
    str_1 = immutable_list_2.__str__()
    immutable_list_2.reduce(immutable_list_0, var_2)


def test_case_21():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(tail=none_type_0)
    immutable_list_1 = immutable_list_0.append(none_type_0)
    bytes_0 = b"\xa7\x06\xfe\xe5\xa9\x9d\x92"
    immutable_list_2 = module_0.ImmutableList(bytes_0)
    bool_0 = immutable_list_1.__eq__(immutable_list_0)
    immutable_list_2.find(bool_0)


def test_case_22():
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(bool_0)
    immutable_list_0.find(bool_0)
