# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.immutable_list as module_0
import typing as module_1


def test_case_0():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(none_type_0)
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    bool_0 = immutable_list_1.__eq__(immutable_list_1)
    immutable_list_1.find(immutable_list_1)


def test_case_1():
    list_0 = []
    immutable_list_0 = module_0.ImmutableList(list_0)
    bool_0 = immutable_list_0.__eq__(list_0)
    immutable_list_0.filter(immutable_list_0)


def test_case_2():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    var_0 = immutable_list_0.reduce(immutable_list_1, immutable_list_1)
    var_1 = immutable_list_0.reduce(var_0, var_0)


def test_case_3():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.__add__(immutable_list_0)
    bool_0 = immutable_list_0.__eq__(immutable_list_0)
    immutable_list_2 = immutable_list_0.__add__(immutable_list_0)
    var_0 = immutable_list_1.__len__()
    var_1 = immutable_list_0.reduce(var_0, var_0)
    var_2 = immutable_list_0.to_list()
    var_3 = immutable_list_2.reduce(var_1, immutable_list_0)
    bool_1 = var_1.__eq__(var_3)
    var_4 = immutable_list_0.find(var_3)
    immutable_list_1.__add__(var_4)


def test_case_4():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(none_type_0)
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    var_0 = immutable_list_0.__len__()
    immutable_list_1.find(immutable_list_1)


def test_case_5():
    list_0 = []
    immutable_list_0 = module_0.ImmutableList(list_0)
    bool_0 = immutable_list_0.__len__()
    immutable_list_0.filter(immutable_list_0)


def test_case_6():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.to_list()
    var_0.filter(none_type_0)


def test_case_7():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(none_type_0)
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_2 = immutable_list_1.to_list()
    immutable_list_1.find(immutable_list_1)


def test_case_8():
    str_0 = "\n        :param semigroup: other semigroup to concat\n        :type semigroup: All[B]\n        :returns: new All with last truly value or first falsy\n        :rtype: All[A | B]\n        "
    list_0 = [str_0, str_0, str_0, str_0]
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_0.map(list_0)


def test_case_9():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.__add__(immutable_list_0)
    bool_0 = immutable_list_0.__eq__(immutable_list_0)
    immutable_list_2 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_3 = immutable_list_0.__add__(immutable_list_0)
    immutable_list_4 = immutable_list_0.__add__(immutable_list_3)
    none_type_0 = None
    var_0 = immutable_list_0.reduce(none_type_0, none_type_0)
    var_1 = immutable_list_0.find(var_0)
    immutable_list_5 = module_0.ImmutableList(immutable_list_0, is_empty=var_0)
    immutable_list_1.map(bool_0)


def test_case_10():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_0.filter(immutable_list_0)


def test_case_11():
    immutable_list_0 = module_0.ImmutableList()
    bool_0 = immutable_list_0.__eq__(immutable_list_0)
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_2 = immutable_list_0.__add__(immutable_list_1)
    var_0 = immutable_list_2.reduce(immutable_list_1, immutable_list_2)
    var_1 = immutable_list_2.find(var_0)
    var_0.filter(var_0)


def test_case_12():
    none_type_0 = None
    none_type_1 = None
    immutable_list_0 = module_0.ImmutableList(none_type_1, is_empty=none_type_1)
    var_0 = immutable_list_0.find(none_type_0)
    var_0.__len__()


def test_case_13():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(none_type_0)
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_1.find(immutable_list_1)


def test_case_14():
    immutable_list_0 = module_0.ImmutableList()


def test_case_15():
    list_0 = []
    immutable_list_0 = module_0.ImmutableList(list_0)
    str_0 = immutable_list_0.__str__()
    immutable_list_0.find(immutable_list_0)


def test_case_16():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(none_type_0)
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_2 = immutable_list_1.append(immutable_list_0)
    immutable_list_1.find(immutable_list_1)


def test_case_17():
    tuple_0 = ()
    immutable_list_0 = module_0.ImmutableList(tail=tuple_0)
    immutable_list_0.__add__(immutable_list_0)


def test_case_18():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    var_0 = immutable_list_1.__len__()
    var_1 = immutable_list_0.reduce(immutable_list_0, immutable_list_0)
    immutable_list_1.find(var_1)


def test_case_19():
    list_0 = []
    immutable_list_0 = module_0.ImmutableList(list_0)
    immutable_list_0.find(immutable_list_0)


def test_case_20():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    none_type_0 = None
    var_0 = immutable_list_1.__len__()
    immutable_list_1.reduce(var_0, none_type_0)


def test_case_21():
    float_0 = 546.16354
    set_0 = {float_0, float_0, float_0}
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.append(set_0)
    generic_0 = module_1.Generic()
    none_type_0 = None
    immutable_list_2 = module_0.ImmutableList(tail=none_type_0, is_empty=none_type_0)
    immutable_list_3 = immutable_list_2.unshift(generic_0)
    bool_0 = immutable_list_3.__eq__(immutable_list_1)


def test_case_22():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.__add__(immutable_list_0)
    bool_0 = immutable_list_1.__eq__(immutable_list_0)
    immutable_list_2 = immutable_list_0.unshift(bool_0)
    none_type_0 = None
    immutable_list_2.find(none_type_0)


def test_case_23():
    float_0 = -692.0768
    int_0 = 551
    list_0 = []
    immutable_list_0 = module_0.ImmutableList(int_0, is_empty=list_0)
    bool_0 = immutable_list_0.__eq__(immutable_list_0)
    immutable_list_0.reduce(float_0, float_0)
