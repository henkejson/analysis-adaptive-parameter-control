# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.immutable_list as module_0
import typing as module_1


def test_case_0():
    immutable_list_0 = module_0.ImmutableList()
    bool_0 = immutable_list_0.__eq__(immutable_list_0)
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    none_type_0 = None
    immutable_list_1.find(none_type_0)


def test_case_1():
    bytes_0 = b"Bx\xc1\xd0\x93T=\xb2\xfc\xdb\xf1V\x94\xf1$;"
    immutable_list_0 = module_0.ImmutableList(bytes_0, is_empty=bytes_0)
    bool_0 = immutable_list_0.__eq__(bytes_0)
    immutable_list_0.find(immutable_list_0)


def test_case_2():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)


def test_case_3():
    immutable_list_0 = module_0.ImmutableList()
    none_type_0 = None
    immutable_list_0.__add__(none_type_0)


def test_case_4():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.__len__()
    immutable_list_1 = immutable_list_0.unshift(var_0)
    var_1 = immutable_list_1.to_list()


def test_case_5():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    var_0 = immutable_list_1.__len__()
    none_type_0 = None
    immutable_list_1.find(none_type_0)


def test_case_6():
    bytes_0 = b"@\x92<\xb9\xb3\xc9\xe3>"
    none_type_0 = None
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(none_type_0, is_empty=bool_0)
    immutable_list_1 = immutable_list_0.append(none_type_0)
    var_0 = immutable_list_1.to_list()
    bool_1 = var_0.__eq__(none_type_0)
    immutable_list_2 = module_0.ImmutableList(bytes_0, none_type_0)
    immutable_list_2.map(none_type_0)


def test_case_7():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_0.filter(immutable_list_0)


def test_case_8():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.to_list()
    str_0 = 'IvfQ"Cs8ccRzo#{obg.m'
    immutable_list_1 = module_0.ImmutableList(str_0, str_0)
    immutable_list_1.filter(var_0)


def test_case_9():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.find(immutable_list_0)
    bool_0 = False
    immutable_list_0.filter(bool_0)


def test_case_10():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.reduce(immutable_list_0, immutable_list_0)
    immutable_list_0.filter(immutable_list_0)


def test_case_11():
    complex_0 = 2.48357 - 1185.423j
    bool_0 = True
    set_0 = {bool_0}
    str_0 = "dK"
    list_0 = [set_0, str_0, str_0, bool_0]
    immutable_list_0 = module_0.ImmutableList(list_0)
    var_0 = immutable_list_0.__len__()
    bool_1 = False
    immutable_list_1 = immutable_list_0.unshift(bool_1)
    immutable_list_2 = immutable_list_0.unshift(complex_0)
    bool_2 = immutable_list_0.__eq__(complex_0)
    immutable_list_3 = immutable_list_0.append(bool_1)
    immutable_list_0.reduce(complex_0, complex_0)


def test_case_12():
    immutable_list_0 = module_0.ImmutableList()


def test_case_13():
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(is_empty=bool_0)
    immutable_list_1 = immutable_list_0.__add__(immutable_list_0)
    str_0 = immutable_list_1.__str__()
    immutable_list_2 = immutable_list_0.unshift(bool_0)


def test_case_14():
    bytes_0 = b"Bx\xc1\xd0\x93T=\xb2\xfc\xdb\xf1V\x94\xf1$;"
    immutable_list_0 = module_0.ImmutableList(bytes_0, is_empty=bytes_0)
    immutable_list_1 = immutable_list_0.append(bytes_0)
    immutable_list_0.find(immutable_list_0)


def test_case_15():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    var_0 = immutable_list_0.find(immutable_list_0)
    immutable_list_2 = immutable_list_1.append(var_0)
    bool_0 = False
    immutable_list_0.filter(bool_0)


def test_case_16():
    generic_0 = module_1.Generic()
    immutable_list_0 = module_0.ImmutableList(generic_0)
    var_0 = immutable_list_0.__len__()
    immutable_list_0.find(var_0)


def test_case_17():
    str_0 = "A^oMTKwr\nrxKRZ"
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(tail=none_type_0)
    var_0 = immutable_list_0.to_list()
    immutable_list_1 = var_0.append(str_0)
    immutable_list_2 = module_0.ImmutableList()
    immutable_list_3 = module_0.ImmutableList(none_type_0, none_type_0)
    var_1 = immutable_list_2.__len__()
    immutable_list_4 = immutable_list_2.append(str_0)
    var_2 = immutable_list_2.reduce(var_1, none_type_0)
    var_3 = immutable_list_2.to_list()
    immutable_list_5 = immutable_list_2.unshift(str_0)
    var_4 = var_3.__len__()
    var_5 = immutable_list_2.find(var_4)
    immutable_list_6 = immutable_list_2.unshift(none_type_0)
    immutable_list_5.reduce(immutable_list_2, var_2)


def test_case_18():
    complex_0 = 860.4 + 3181.165923j
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(tail=bool_0)
    var_0 = immutable_list_0.__len__()
    var_1 = immutable_list_0.find(complex_0)
    var_2 = immutable_list_0.reduce(bool_0, var_1)
    immutable_list_0.map(var_1)


def test_case_19():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = module_0.ImmutableList()
    immutable_list_2 = module_0.ImmutableList()
    var_0 = immutable_list_1.find(immutable_list_0)
    immutable_list_3 = immutable_list_1.__add__(immutable_list_1)
    bool_0 = immutable_list_2.__eq__(immutable_list_3)
    immutable_list_0.filter(immutable_list_3)


def test_case_20():
    bytes_0 = b"Bx\xc1\xd0\x93T=\xb2\xfc\xdb\xf1V\x94\xf1$;"
    immutable_list_0 = module_0.ImmutableList(bytes_0, is_empty=bytes_0)
    immutable_list_0.find(immutable_list_0)


def test_case_21():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    none_type_0 = None
    immutable_list_1.find(none_type_0)


def test_case_22():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = module_0.ImmutableList()
    immutable_list_2 = module_0.ImmutableList()
    immutable_list_3 = module_0.ImmutableList(immutable_list_1)
    var_0 = immutable_list_1.find(immutable_list_0)
    immutable_list_4 = module_0.ImmutableList()
    bool_0 = immutable_list_3.__eq__(immutable_list_1)
    immutable_list_0.filter(var_0)
