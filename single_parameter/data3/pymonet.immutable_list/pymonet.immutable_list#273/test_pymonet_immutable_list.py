# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.immutable_list as module_0


def test_case_0():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = module_0.ImmutableList(immutable_list_0, immutable_list_0)
    var_0 = immutable_list_1.to_list()
    var_1 = immutable_list_1.__len__()
    bool_0 = immutable_list_1.__eq__(immutable_list_1)
    immutable_list_1.find(var_1)


def test_case_1():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(none_type_0)
    var_0 = immutable_list_0.reduce(none_type_0, immutable_list_0)
    var_1 = immutable_list_0.find(var_0)
    bool_0 = immutable_list_0.__eq__(var_1)


def test_case_2():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.__add__(immutable_list_0)


def test_case_3():
    bytes_0 = b"\xdbm\xf4b*\xcf\xeb\x8a\xe7\x0bl\x1cm\x12S\xc9"
    bool_0 = True
    bool_1 = False
    immutable_list_0 = module_0.ImmutableList(tail=bool_0, is_empty=bool_1)
    immutable_list_0.__add__(bytes_0)


def test_case_4():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.__len__()
    immutable_list_0.filter(var_0)


def test_case_5():
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(bool_0)
    var_0 = immutable_list_0.__len__()
    immutable_list_0.find(bool_0)


def test_case_6():
    immutable_list_0 = module_0.ImmutableList()
    str_0 = immutable_list_0.__str__()
    immutable_list_1 = module_0.ImmutableList(immutable_list_0, immutable_list_0)
    immutable_list_1.find(immutable_list_0)


def test_case_7():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = module_0.ImmutableList(immutable_list_0, immutable_list_0)
    var_0 = immutable_list_1.to_list()
    var_1 = immutable_list_1.__len__()
    immutable_list_1.find(var_1)


def test_case_8():
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(is_empty=bool_0)
    immutable_list_0.map(immutable_list_0)


def test_case_9():
    none_type_0 = None
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(tail=none_type_0, is_empty=bool_0)
    immutable_list_1 = module_0.ImmutableList(is_empty=immutable_list_0)
    immutable_list_2 = immutable_list_1.unshift(bool_0)
    immutable_list_3 = module_0.ImmutableList(none_type_0, is_empty=bool_0)
    var_0 = immutable_list_0.__len__()
    immutable_list_2.map(var_0)


def test_case_10():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_0.filter(immutable_list_0)


def test_case_11():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(tail=none_type_0)
    immutable_list_1 = immutable_list_0.unshift(none_type_0)
    var_0 = immutable_list_1.reduce(none_type_0, immutable_list_1)
    immutable_list_1.filter(none_type_0)


def test_case_12():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.find(immutable_list_0)
    immutable_list_0.filter(immutable_list_0)


def test_case_13():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = module_0.ImmutableList(immutable_list_0, immutable_list_0)
    immutable_list_1.find(immutable_list_0)


def test_case_14():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.reduce(immutable_list_0, immutable_list_0)
    immutable_list_0.filter(var_0)


def test_case_15():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.__add__(immutable_list_0)
    str_0 = immutable_list_0.__str__()
    none_type_0 = None
    bool_0 = immutable_list_1.__eq__(none_type_0)
    var_0 = immutable_list_0.__len__()
    none_type_1 = None
    var_1 = immutable_list_0.reduce(none_type_1, immutable_list_0)
    var_2 = immutable_list_0.find(none_type_1)
    immutable_list_2 = var_1.unshift(var_1)
    var_3 = immutable_list_0.to_list()
    immutable_list_3 = module_0.ImmutableList(none_type_1)
    immutable_list_2.reduce(var_2, var_3)


def test_case_16():
    immutable_list_0 = module_0.ImmutableList()


def test_case_17():
    bytes_0 = b"\xd6|"
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(none_type_0, none_type_0)
    immutable_list_1 = immutable_list_0.append(bytes_0)
    var_0 = immutable_list_1.__len__()


def test_case_18():
    none_type_0 = None
    none_type_1 = None
    immutable_list_0 = module_0.ImmutableList(tail=none_type_1)
    immutable_list_1 = immutable_list_0.unshift(none_type_0)
    var_0 = immutable_list_1.__len__()


def test_case_19():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = module_0.ImmutableList(immutable_list_0, immutable_list_0)
    var_0 = immutable_list_1.__add__(immutable_list_0)
    var_1 = immutable_list_1.unshift(var_0)
    immutable_list_1.find(var_1)


def test_case_20():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = module_0.ImmutableList(immutable_list_0, immutable_list_0)
    var_0 = immutable_list_1.__len__()
    immutable_list_1.find(var_0)


def test_case_21():
    none_type_0 = None
    bool_0 = True
    bool_1 = False
    immutable_list_0 = module_0.ImmutableList(bool_0, is_empty=bool_1)
    immutable_list_0.reduce(none_type_0, none_type_0)


def test_case_22():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    bool_0 = immutable_list_0.__eq__(immutable_list_1)
    immutable_list_1.find(immutable_list_1)


def test_case_23():
    bytes_0 = b"\x1dP"
    str_0 = '!A\t9Bt;K"x\n{H&&=,,'
    none_type_0 = None
    none_type_1 = None
    immutable_list_0 = module_0.ImmutableList(is_empty=none_type_1)
    immutable_list_1 = immutable_list_0.append(none_type_0)
    immutable_list_2 = module_0.ImmutableList(tail=immutable_list_1)
    bool_0 = immutable_list_1.__eq__(immutable_list_0)
    immutable_list_3 = immutable_list_2.unshift(str_0)
    str_1 = "\n        If Maybe is empty return default_value, in other case.\n\n        :param default_value: value to return if Maybe is empty\n        :type default_value: Any\n        :returns: value of Maybe or default_value\n        :rtype: A\n        "
    immutable_list_4 = module_0.ImmutableList(str_0, immutable_list_3, str_1)
    immutable_list_4.find(bytes_0)


def test_case_24():
    int_0 = 273
    tuple_0 = ()
    immutable_list_0 = module_0.ImmutableList(tuple_0, is_empty=tuple_0)
    immutable_list_0.find(int_0)
