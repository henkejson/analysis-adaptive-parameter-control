# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.immutable_list as module_0
import builtins as module_1


def test_case_0():
    immutable_list_0 = module_0.ImmutableList()
    bool_0 = immutable_list_0.__eq__(immutable_list_0)
    immutable_list_1 = module_0.ImmutableList(
        immutable_list_0, is_empty=immutable_list_0
    )
    immutable_list_1.find(immutable_list_0)


def test_case_1():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = module_0.ImmutableList(
        immutable_list_0, is_empty=immutable_list_0
    )
    none_type_0 = None
    bool_0 = immutable_list_1.__eq__(none_type_0)
    immutable_list_1.find(immutable_list_0)


def test_case_2():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.append(immutable_list_0)
    immutable_list_0.filter(var_0)


def test_case_3():
    none_type_0 = None
    none_type_1 = None
    immutable_list_0 = module_0.ImmutableList(none_type_1, is_empty=none_type_1)
    str_0 = immutable_list_0.__str__()
    immutable_list_0.__add__(none_type_0)


def test_case_4():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.__len__()
    immutable_list_0.filter(var_0)


def test_case_5():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = module_0.ImmutableList(
        immutable_list_0, is_empty=immutable_list_0
    )
    var_0 = immutable_list_1.__len__()
    immutable_list_1.find(immutable_list_0)


def test_case_6():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = module_0.ImmutableList(
        immutable_list_0, is_empty=immutable_list_0
    )
    bool_0 = immutable_list_1.to_list()
    immutable_list_1.find(immutable_list_0)


def test_case_7():
    str_0 = "w_Puu-"
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = module_0.ImmutableList(str_0, immutable_list_0)
    bool_0 = immutable_list_1.to_list()
    immutable_list_1.find(str_0)


def test_case_8():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList()
    bool_0 = immutable_list_0.__eq__(none_type_0)
    immutable_list_1 = module_0.ImmutableList(none_type_0, none_type_0)
    immutable_list_1.map(none_type_0)


def test_case_9():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.__add__(immutable_list_0)
    str_0 = "6A*\n}M@6QI6"
    immutable_list_2 = module_0.ImmutableList(str_0, immutable_list_0)
    bool_0 = immutable_list_0.__eq__(immutable_list_0)
    immutable_list_3 = immutable_list_1.__add__(immutable_list_1)
    var_0 = immutable_list_3.__len__()
    bytes_0 = b"t\xa9"
    immutable_list_1.map(bytes_0)


def test_case_10():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_0.filter(immutable_list_0)


def test_case_11():
    none_type_0 = None
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(none_type_0, is_empty=bool_0)
    var_0 = immutable_list_0.to_list()
    immutable_list_1 = module_0.ImmutableList(immutable_list_0, bool_0)
    immutable_list_2 = immutable_list_1.append(none_type_0)
    immutable_list_2.filter(none_type_0)


def test_case_12():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.find(immutable_list_0)
    immutable_list_0.filter(var_0)


def test_case_13():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = module_0.ImmutableList(
        immutable_list_0, is_empty=immutable_list_0
    )
    immutable_list_1.find(immutable_list_0)


def test_case_14():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = module_0.ImmutableList(
        immutable_list_0, is_empty=immutable_list_0
    )
    bool_0 = False
    var_0 = immutable_list_0.reduce(bool_0, immutable_list_1)
    immutable_list_1.find(immutable_list_0)


def test_case_15():
    object_0 = module_1.object()
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(object_0)
    none_type_0 = None
    immutable_list_2 = immutable_list_0.unshift(none_type_0)
    immutable_list_1.reduce(none_type_0, none_type_0)


def test_case_16():
    immutable_list_0 = module_0.ImmutableList()


def test_case_17():
    immutable_list_0 = module_0.ImmutableList()
    str_0 = immutable_list_0.__str__()
    immutable_list_1 = module_0.ImmutableList(
        immutable_list_0, is_empty=immutable_list_0
    )
    var_0 = immutable_list_1.__len__()
    immutable_list_1.find(immutable_list_0)


def test_case_18():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_1.find(immutable_list_0)


def test_case_19():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.__add__(immutable_list_0)
    immutable_list_2 = immutable_list_0.append(immutable_list_0)
    var_0 = immutable_list_2.find(immutable_list_2)
    immutable_list_3 = module_0.ImmutableList(immutable_list_2)
    immutable_list_4 = immutable_list_3.unshift(var_0)
    str_0 = immutable_list_0.__str__()
    immutable_list_5 = module_0.ImmutableList(immutable_list_1)
    bool_0 = immutable_list_5.__eq__(immutable_list_0)
    immutable_list_5.find(bool_0)


def test_case_20():
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(bool_0)
    immutable_list_2 = immutable_list_1.append(bool_0)
    immutable_list_2.find(bool_0)


def test_case_21():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    var_0 = immutable_list_1.__len__()
    immutable_list_1.find(immutable_list_0)


def test_case_22():
    str_0 = "\n        Transform Maybe to Try.\n\n        :returns: Lazy monad with function returning previous value in other case Left with None\n        :rtype: Lazy[Function() -> (A | None)]\n        "
    immutable_list_0 = module_0.ImmutableList(str_0)
    immutable_list_0.reduce(immutable_list_0, immutable_list_0)


def test_case_23():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.append(immutable_list_0)
    bool_0 = immutable_list_0.__eq__(immutable_list_1)
    float_0 = -1939.697406
    var_0 = immutable_list_0.__len__()
    immutable_list_2 = module_0.ImmutableList(immutable_list_0, is_empty=bool_0)
    immutable_list_2.find(float_0)
