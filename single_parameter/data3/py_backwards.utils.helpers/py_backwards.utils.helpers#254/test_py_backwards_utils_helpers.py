# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import py_backwards.utils.helpers as module_0
import re as module_1


def test_case_0():
    none_type_0 = None
    none_type_1 = module_0.debug(none_type_0)


def test_case_1():
    variables_generator_0 = module_0.VariablesGenerator()


def test_case_2():
    var_0 = module_1.purge()
    callable_0 = module_0.eager(var_0)
    str_0 = "Extends code, so code like:\n    \n        extend(vars)\n        print(x, y)\n        \n    When vars contains AST of assignments will end up:\n    \n        x = 1\n        x = 2\n        print(x, y)\n    "
    none_type_0 = module_0.warn(str_0)
    none_type_1 = module_0.debug(var_0)
    module_0.VariablesGenerator(**var_0)


def test_case_3():
    bytes_0 = b"\x15\x0b\xf6\x87q\\s;\x13\xd1\xc1\xa6w\xc6\xfe.l"
    module_0.get_source(bytes_0)


def test_case_4():
    str_0 = "L'U\n~~=aQbSVcrNW"
    none_type_0 = module_0.warn(str_0)


def test_case_5():
    none_type_0 = module_1.purge()
    str_0 = "store_true"
    none_type_1 = module_0.warn(str_0)
    variables_generator_0 = module_0.VariablesGenerator()
    none_type_2 = module_0.debug(none_type_0)
    list_0 = []
    variables_generator_1 = module_0.VariablesGenerator(*list_0)
    var_0 = module_0.eager(none_type_2)
    var_0.__call__(var_0, var_0, list_0, module=none_type_2)
