# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import enum as module_0
import py_backwards.utils.helpers as module_1
import py_backwards.exceptions as module_2
import re as module_3


def test_case_0():
    enum_dict_0 = module_0._EnumDict()
    none_type_0 = module_1.debug(enum_dict_0)


def test_case_1():
    variables_generator_0 = module_1.VariablesGenerator()


def test_case_2():
    none_type_0 = None
    callable_0 = module_1.eager(none_type_0)


def test_case_3():
    bool_0 = True
    transformation_error_0 = module_2.TransformationError(
        bool_0, bool_0, bool_0, bool_0
    )
    none_type_0 = module_3.purge()
    none_type_1 = None
    variables_generator_0 = module_1.VariablesGenerator()
    callable_0 = module_3.purge()
    none_type_2 = module_1.debug(none_type_1)
    variables_generator_1 = module_1.VariablesGenerator()
    callable_1 = module_1.eager(none_type_0)
    module_1.get_source(callable_0)


def test_case_4():
    str_0 = "|@_m#}6vxT=jMn'N21NR"
    callable_0 = module_1.eager(str_0)
    none_type_0 = module_1.warn(str_0)


def test_case_5():
    bytes_0 = b";\xd1\xa4\xc8O\x8c\xc6\xbf"
    none_type_0 = module_1.debug(bytes_0)
    str_0 = "@p&N/3(\\c!_RP"
    none_type_1 = module_1.warn(str_0)
    callable_0 = module_1.eager(none_type_0)
    none_type_2 = module_1.debug(bytes_0)
    module_3.sub(bytes_0, callable_0, bytes_0)
