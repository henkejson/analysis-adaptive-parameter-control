# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0
import builtins as module_1


def test_case_0():
    str_0 = '8yYHc/pOIB1h*y"U!xB'
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0, str_0)
    var_0.__repr__()


def test_case_1():
    bool_0 = False
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(bool_0, bool_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_2():
    dict_0 = {}
    exception_0 = module_1.Exception()
    import_replacer_0 = module_0.ImportReplacer(
        dict_0, exception_0, exception_0, dict_0
    )
    module_0.lazy_import(exception_0, import_replacer_0, exception_0)


def test_case_3():
    complex_0 = -3636.695039 + 4446.7857j
    module_0.ImportReplacer(complex_0, complex_0, complex_0)


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    str_0 = "'nq!"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_6():
    var_0 = module_0.disallow_proxying()


def test_case_7():
    bool_0 = True
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(bool_0, bool_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_8():
    str_0 = "Q'!"
    module_0.lazy_import(str_0, str_0)


def test_case_9():
    bool_0 = False
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(bool_0, bool_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(bool_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_10():
    bool_0 = False
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(bool_0, bool_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_11():
    str_0 = "=XY q(:IjorINV"
    none_type_0 = None
    module_0.lazy_import(str_0, str_0, none_type_0)


def test_case_12():
    str_0 = "%s(%r)"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_13():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset bacF to the originaln(it doesn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    var_0 = module_0.disallow_proxying()
    str_0 = ""
    none_type_0 = None
    module_0.lazy_import(str_0, str_0, none_type_0)


def test_case_15():
    str_0 = "\n    Simulates nonlocal keyword in Python 2\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = "&HR#2M#O\x0b_y\rx9("
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_17():
    str_0 = "-"
    module_0.ImportReplacer(str_0, str_0, str_0, str_0, str_0)


def test_case_18():
    str_0 = "'nq"
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, dict_0)
    module_0.lazy_import(dict_0, import_replacer_0)


def test_case_19():
    dict_0 = {}
    import_processor_0 = module_0.ImportProcessor(dict_0)
    none_type_0 = None
    exception_0 = module_1.Exception()
    import_replacer_0 = module_0.ImportReplacer(
        dict_0, exception_0, dict_0, import_processor_0
    )
    var_0 = module_0.ScopeReplacer(dict_0, import_replacer_0, import_replacer_0)
    module_0.lazy_import(import_processor_0, none_type_0, var_0)


def test_case_20():
    str_0 = "DestorL the orginal functio' to re.compile().\n\n    It is safe to call reset_compPle() mu&tip\x0ce times, ~t will always\n    restore re.cocpile( No the value tha\" existed af import time.\n    Though thC first call will reset bacxcto the originaln(i0 doesn't\n* 8 track esting level)\n   ["
    module_0.lazy_import(str_0, str_0)


def test_case_21():
    str_0 = "'nq"
    dict_0 = {str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, children=dict_0)
    import_replacer_0.__setattr__(dict_0, import_replacer_0)
