# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "kHT"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_1():
    str_0 = "%(asctime)s| %(name)s/%(processName)s[%(process)d]-%(threadName)s[%(thread)d]: %(message)s @%(funcName)s:%(lineno)d #%(levelname)s"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_2():
    str_0 = "%(astime)s| (nam)s/%(processName[%(process)d-%(rhreaNam)s$%(th(ead)d] %(message)s @%(fnctame)s:(linno)d ;%(leveame)s"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_3():
    none_type_0 = None
    module_0.ImportReplacer(none_type_0, none_type_0, none_type_0, none_type_0)


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    str_0 = "%(asctime)s| %(name)s/%(processName)s[%(process)d]-%(threadName)s[%(thread)d]: %(message)s @%(funcName)s:%(lineno)d #%(levelname)s"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_6():
    var_0 = module_0.disallow_proxying()


def test_case_7():
    str_0 = "kHT"
    module_0.lazy_import(str_0, str_0)


def test_case_8():
    bytes_0 = b"\xb7\x9cn&\x11=\x19=u"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bytes_0, bytes_0, bytes_0
    )
    module_0.ImportReplacer(
        illegal_use_of_scope_replacer_0,
        bytes_0,
        illegal_use_of_scope_replacer_0,
        illegal_use_of_scope_replacer_0,
        bytes_0,
    )


def test_case_9():
    str_0 = "%(asctime)s| %(name)s/%(processName)s[%(process)d]-%(rhreadName)s%(thread)d]: %(message)s @(functame)s:x(lineno)d #%(levelnate)s"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_10():
    str_0 = "Restor the origial function t7 re.compile().\n\n   >It is safe &o call rewe_compie() mutip\x0betimes, it will always\n   restoe re.comple() to the value that existed et import time.\n    }hough the fPrst call 7ill reset back to theoriginal (it doeYnt\n    track nwstin level)\n    "
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, str_0)
    import_replacer_0.__call__()


def test_case_11():
    str_0 = "\t"
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, str_0
    )
    none_type_1 = None
    illegal_use_of_scope_replacer_1 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_1.__eq__(none_type_1)
    var_1 = var_0.__eq__(none_type_1)
    module_0.lazy_import(none_type_1, str_0)


def test_case_12():
    str_0 = "F95K\r\n"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_13():
    str_0 = "%(astime)s| (nam)s/%(processName)s[%(pr)cess)d]-%(rhreaNa8e)s[%(thread)d]: %(message)s @%(functame)s:(lineno)d ;%(levelname)s"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_14():
    str_0 = "J/(8\nE'p"
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = "%(asctime)s| %(name)s/%(processName)s[%(process)d]-%(threadName)s[%(thread)d]: %(message)s @%(funcName)s:%(lineno)d #%(levelname)s"
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = "Upon request import 'module_path' as the name 'module_name'.\n        When imported, prepare children to also be imported.\n\n        :param scope: The scope that objects should be imported into.\n            Typically this is globals()\n        :param name: The variable name. Often this is the same as the\n            module_path. 'bzrlib'\n        :param module_path: A list for the fully specified module path\n            ['bzrlib', 'foo', 'bar']\n        :param member: The member inside the module to import, often this is\n            None, indicating the module is being imported.\n        :param children: Children entries to be imported later.\n            This should be a map of children specifications.\n            ::\n            \n                {'foo':(['bzrlib', 'foo'], None,\n                    {'bar':(['bzrlib', 'foo', 'bar'], None {})})\n                }\n\n        Examples::\n\n            import foo => name='foo' module_path='foo',\n                          member=None, children={}\n            import foo.bar => name='foo' module_path='foo', member=None,\n                              children={'bar':(['foo', 'bar'], None, {}}\n            from foo import bar => name='bar' module_path='foo', member='bar'\n                                   children={}\n            from foo import bar, baz would get translated into 2 import\n            requests. On for 'name=bar' and one for 'name=baz'\n        "
    module_0.lazy_import(str_0, str_0)


def test_case_17():
    var_0 = module_0.disallow_proxying()
    dict_0 = {var_0: var_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, var_0, dict_0, var_0, var_0)
    module_0.lazy_import(dict_0, import_replacer_0)


def test_case_18():
    str_0 = "Restor the origial function t7 re.compile().\n\n   >It is safe &o call rewe_compie() mutip\x0betimes, it will always\n   restoe re.comple() to the value that existed et import time.\n    }hough the fPrst call 7ill reset back to theoriginal (it doeYnt\n    track nwstin level)\n    "
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
    module_0.lazy_import(str_0, import_replacer_0)


def test_case_19():
    str_0 = "Restor the origial function t7 re.compile().\n\n   >It is safe &o call rewe_compie() mutip\x0betimes, it will always\n   restoe re.comple() to the value that existed et import time.\n    }hough the fPrst call 7ill reset back to theoriginal (it doeYnt\n    track nwstin level)\n    "
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, str_0)
    scope_replacer_0 = module_0.ScopeReplacer(
        dict_0, import_replacer_0, import_replacer_0
    )
    module_0.lazy_import(scope_replacer_0, scope_replacer_0)
