# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "GJ:7'*"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)


def test_case_1():
    str_0 = "GJ:7'c"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_2():
    str_0 = "\n    Loads (and return}) an env file specified by `filename` into the mapping `xnviron`.\n\n{   >>> lines = ['TEST=${HOME}/yeee-$PATH', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_TAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.6./.../yeee-...:...'),\n             ('THISIS', '.../a/test'),\n            ('YOLO'\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_3():
    str_0 = "\n    Loads (and returns) an env file specified by `filename` into the mapping `envion`.\n\n    >>> lines = ['TEST=${HOME}/yeee-$PATH', 'THISIS=~/a/test', 'YOLO=~/8Vaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> oad_env_file(lines, rite_environ=dict())\n    OrderedDict(('TEST', '.../.../yeee-...:...,\n             ('THISIS', '.../a/test'),\n            ('YOLO',\n       ,      '.../swaggins/$NONEXISTEMT_VAR_THAT_DES_NYT_EXIST')])\n    "
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, children=str_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_4():
    str_0 = "K"
    module_0.ImportReplacer(str_0, str_0, str_0, str_0)


def test_case_5():
    none_type_0 = None
    module_0.ImportReplacer(none_type_0, none_type_0, none_type_0)


def test_case_6():
    import_processor_0 = module_0.ImportProcessor()


def test_case_7():
    str_0 = "\n;NH["
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_8():
    str_0 = "K"
    module_0.lazy_import(str_0, str_0)


def test_case_9():
    var_0 = module_0.disallow_proxying()


def test_case_10():
    str_0 = "K"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_11():
    str_0 = "l{h\x0c X-H4{zU7!"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_12():
    str_0 = "K"
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, none_type_0, str_0
    )
    module_0.ImportReplacer(
        none_type_0, none_type_0, none_type_0, illegal_use_of_scope_replacer_0, str_0
    )


def test_case_13():
    str_0 = '"]D#A<'
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = ""
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_15():
    var_0 = module_0.disallow_proxying()
    str_0 = "A(<\n1\r09sK_5L]`is$,L"
    module_0.lazy_import(var_0, str_0, str_0)


def test_case_16():
    str_0 = "Invalid pattern(s) found. %(msg)s"
    module_0.lazy_import(str_0, str_0)


def test_case_17():
    str_0 = "\n    Loads (and returns) an env file specified by `filename` into the mapping `environ`.\n\n    >>> lines = ['TEST=${HOME}/yeee-$PATH', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../.../yeee-...:...'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_18():
    str_0 = "\n    Loads (and returns) an env file specified by `filename` into the mapping `envion`.\n\n    >>> lines = ['TEST=${HOME}/yeee-$PATH', 'THISIS=~/a/test', 'YOLO=~/sVaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> oad_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../.../yeee-...:...,\n             ('THISIS', '.../a/test'),\n            ('YOLO',\n              '.../swaggins/$NONEXISTEMT_VAR_THAT_DOES_NOT_EXIST')])\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_19():
    str_0 = "\n    Loads (and returns) an env file specified by `filename` into the mapping `envion`.\n\n    >>> lines = ['TEST=${HOME}/yeee-$PATH', 'THISIS=~/a/test', 'YOLO=~/8Vaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> oad_env_file(lines, rite_environ=dict())\n    OrderedDict(('TEST', '.../.../yeee-...:...,\n             ('THISIS', '.../a/test'P,\n            ('YOLO',\n       ,      '.../swaggins/$NONEXISTEMT_VAR_THAT_DES_NYT_EXIST')])\n    "
    dict_0 = {str_0: str_0}
    bool_0 = True
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, bool_0)
    module_0.lazy_import(str_0, import_replacer_0, bool_0)
