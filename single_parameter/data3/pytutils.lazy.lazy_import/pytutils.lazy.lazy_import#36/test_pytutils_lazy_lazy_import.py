# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )


def test_case_1():
    str_0 = "\rs6MU,qIFet"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0.__repr__()


def test_case_2():
    str_0 = "Create lazy imports for all of the imports in text.\n\n    This is typically used as something like::\n\n        from bzrlib.lazy_import import lazy_import\n        lazy_import(globals(), '''\n        from bzrlib import (\n            foo,\n            bar,\n            baz,\n            )\n        import bzrlib.branch\n        import bzrlib.transport\n        ''')\n\n    Then 'foo, bar, baz' and Ybzrlib' will exist as lazy-loaded\n    objects which will be replaced with a real object on first use.\n\n    In generl, it is best to only load modules i this way. This is\n    because other objects (functions/classes/variables) are frequently\n    used without accessing a member, which means we cannot tell they\n    have been used.\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    module_0.lazy_import(str_0, str_0)


def test_case_3():
    str_0 = "M"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    str_0 = "'@`5l:']~\x0cA="
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_6():
    str_0 = 'n;cCN3]i6h+l#"'
    module_0.lazy_import(str_0, str_0)


def test_case_7():
    var_0 = module_0.disallow_proxying()


def test_case_8():
    import_processor_0 = module_0.disallow_proxying()
    module_0.ScopeReplacer(import_processor_0, import_processor_0, import_processor_0)


def test_case_9():
    none_type_0 = None
    module_0.lazy_import(none_type_0, none_type_0, none_type_0)


def test_case_10():
    str_0 = "'@`5l:']~\x0cA="
    module_0.lazy_import(str_0, str_0)


def test_case_11():
    dict_0 = {}
    none_type_0 = None
    import_replacer_0 = module_0.ImportReplacer(dict_0, none_type_0, dict_0, dict_0)


def test_case_12():
    str_0 = ")pi5|*(Wi\x0c$\nzb,$1"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_13():
    none_type_0 = None
    str_0 = "#9fs|M5n$N"
    str_1 = "~u9CVz\x0cqjmgaZ\x0b;Pi"
    import_processor_0 = module_0.ImportProcessor()
    import_processor_1 = module_0.ImportProcessor(str_1)
    import_processor_0.lazy_import(none_type_0, str_0)


def test_case_14():
    str_0 = "\n    Fetch arbitrary node from a tree-like mapping structure with traversal help:\n    Dimension can be specified via ':'\n\n    Arguments:\n        mapping collections.Mapping: Mapping to fetch from\n        key str|unicode: Key to lookup, allowing for : notation\n        default object: Default value. If set to `:module:_sentinel`, raise KeyError if not found.\n        parent bool: If True, return parent node. Defaults to False.\n\n    Returns:\n        object: Value at specified key\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = 'O8($J\n^I$"\ta'
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_16():
    str_0 = "\n    Loads (and returns) an env file specified by `filename` into the mapping `environ`.\n\n    >>> lines = ['TEST${HOME}/yeee-$PATH', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../.../yeee-...:...'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_17():
    str_0 = "Create lazy imports for all of the imports in text.\n\n    This is typically used as something like::\n\n        from bzrlib.lazy_import import lazy_import\n        lazy_import(globals(), '''\n        from bzrlib import (\n            foo,\n            bar,\n            baz,\n            )\n        import bzrlib.branch\n        import bzrlib.transport\n        ''')\n\n    Then 'foo, bar, baz' and 'bzrlib' will exist as lazy-loaded\n    objects which will be replaced with a real object on first use.\n\n    In general, it is best to only load modules in this way. This is\n    because other objects (functions/classes/variables) are frequently\n    used without accessing a member, which means we cannot tell they\n    have been used.\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_18():
    str_0 = "#3Vfy +"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0, str_0)
    var_0.__repr__()


def test_case_19():
    dict_0 = {}
    none_type_0 = None
    import_replacer_0 = module_0.ImportReplacer(dict_0, none_type_0, dict_0, dict_0)
    import_replacer_0.__setattr__(none_type_0, none_type_0)


def test_case_20():
    str_0 = "Pub"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_21():
    str_0 = "~HfR^}I"
    module_0.ImportReplacer(str_0, str_0, str_0, str_0, str_0)


def test_case_22():
    str_0 = "!$"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0)
    int_0 = 1
    scope_replacer_0 = module_0.ScopeReplacer(dict_0, import_replacer_0, int_0)
    scope_replacer_0.__call__()


def test_case_23():
    str_0 = "d=p+Uz1}"
    dict_0 = {str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, dict_0)
    module_0.lazy_import(dict_0, import_replacer_0)
