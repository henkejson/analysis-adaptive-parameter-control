# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "PmH^\rc"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_1():
    str_0 = "/H^\r*"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    module_0.lazy_import(str_0, str_0)


def test_case_2():
    bool_0 = False
    var_0 = module_0.IllegalUseOfScopeReplacer(bool_0, bool_0)
    var_1 = var_0.__eq__(bool_0)


def test_case_3():
    complex_0 = 1727 + 4915.85j
    dict_0 = {complex_0: complex_0, complex_0: complex_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, complex_0, dict_0, dict_0)
    import_replacer_0.__setattr__(dict_0, dict_0)


def test_case_4():
    dict_0 = {}
    none_type_0 = None
    import_replacer_0 = module_0.ImportReplacer(dict_0, none_type_0, dict_0)
    import_replacer_0.__setattr__(none_type_0, none_type_0)


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    str_0 = "mH^\r*"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_7():
    str_0 = "/H^\r*"
    module_0.lazy_import(str_0, str_0)


def test_case_8():
    bool_0 = True
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(bool_0, bool_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_9():
    var_0 = module_0.disallow_proxying()


def test_case_10():
    bytes_0 = b"\xb5\x87&.\xd58\xb6\xb9\xf1/:\x16"
    module_0.ImportReplacer(bytes_0, bytes_0, bytes_0, bytes_0, bytes_0)


def test_case_11():
    str_0 = "U#HA^@U&Q]"
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    str_0 = "#o^FZP2D][n*{"
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    str_0 = "This converts a 'from foo import bar' string into an import map.\n\n        :param from_str: The import string to process\n        "
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = "\n    Efficiently advance an iterator n-steps ahead. If n is none, consume entirely.\n    Consumes at C level (and therefore speed) in cpython.\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = "9estore the or'ginal function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_16():
    var_0 = module_0.disallow_proxying()
    str_0 = "$z}\n*%\r=(1qI\r\n}vVP"
    module_0.lazy_import(str_0, str_0)


def test_case_17():
    str_0 = "9estore the or'ginal function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_18():
    str_0 = ""
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, str_0)
    import_replacer_0.__call__(**dict_0)


def test_case_19():
    str_0 = "9estore the or'ginal function to re.compile(.\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_20():
    str_0 = "2"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    none_type_0 = None
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, none_type_0)
    import_replacer_0.__call__(**dict_0)


def test_case_21():
    str_0 = "s"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, str_0)
    none_type_0 = None
    scope_replacer_0 = module_0.ScopeReplacer(dict_0, import_replacer_0, none_type_0)
    scope_replacer_0.__setattr__(import_replacer_0, str_0)
