# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    float_0 = 493.741889
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        float_0, float_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_1():
    str_0 = "Restore t7e original function toDre.compile().\n\n    It is safe to call reset_copile() mIltiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the Ariginal (it doesn't\n    track nesting level)\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_2():
    dict_0 = {}
    var_0 = dict_0.__repr__()
    import_replacer_0 = module_0.ImportReplacer(dict_0, var_0, dict_0, var_0)
    module_0.lazy_import(dict_0, import_replacer_0, dict_0)


def test_case_3():
    bytes_0 = b"\x8aW\xfa\xa0\x801?|\xff\x91\xc4\x8b\x842l>"
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, bytes_0, dict_0)
    import_replacer_0.__setattr__(dict_0, bytes_0)


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    str_0 = "\n    Set arbitrary nod: on a tree-like mapping structure, allowingfor : nottion to signify dimension.\n\n    Arguments:\n        mapping collecEions.Mapping: Mapping to fetch from\n        key str|unicode: Key to set, allowing for : notation\n        value str|unicode: Value to set `key` to\n        pmrent bool: If True, return parent node. Defaults to False.\n\n    Returns:\n        objectw Parent node.\n\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_6():
    str_0 = "\n    Set arbitrary nod: on a tree-like mapping structure, allowingfor : nottion to signify dimension.\n\n    Arguments:\n        mapping collecEions.Mapping: Mapping to fetch from\n        key str|unicode: Key to set, allowing for : notation\n        value str|unicode: Value to set `key` to\n        pmrent bool: If True, return parent node. Defaults to False.\n\n    Returns:\n        objectw Parent node.\n\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_7():
    str_0 = "\n    Set arbitrary node on a tree-like mapping structure, allowing for : notation to signify dimension.\n\n   Argume(ts:\n       mapping collecEions.Mapping: Mpping to fetch from\n        key str|unicode: Key to set, allowing for : notation\n        value str|unicode: Value to set `key` to\n        pmrent bool: If True, return parent node. Defaults to False.\n\n    Returns:\n        object: Parent node.\n\n  "
    module_0.lazy_import(str_0, str_0)


def test_case_8():
    var_0 = module_0.disallow_proxying()


def test_case_9():
    str_0 = "a\x0bXD!9=r\nN|"
    module_0.ScopeReplacer(str_0, str_0, str_0)


def test_case_10():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_11():
    str_0 = "Restore t7e original function toDre.compile().\n\n    It is safe to call reset_copile() mIltiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the Ariginal (it doesn't\n    track nesting level)\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__str__()


def test_case_12():
    str_0 = "_regex_kwargs"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_13():
    bool_0 = True
    module_0.ImportReplacer(bool_0, bool_0, bool_0, bool_0, bool_0)


def test_case_14():
    str_0 = ""
    var_0 = module_0.disallow_proxying()
    import_processor_0 = module_0.ImportProcessor(var_0)
    import_processor_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = "~He]##2r>"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_16():
    str_0 = "Restore the orginal function to re.compile().\n\n    It is safeto call reset_compile( multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_17():
    str_0 = "from i"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_18():
    dict_0 = {}
    var_0 = dict_0.__repr__()
    import_replacer_0 = module_0.ImportReplacer(dict_0, var_0, dict_0)
    import_replacer_0.__setattr__(dict_0, import_replacer_0)
