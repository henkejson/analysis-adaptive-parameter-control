# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    int_0 = -176
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(int_0, int_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_1():
    str_0 = "Create lazy imports for all of the imports in text.\n\n    This is typically used as something like::\n\n        from bzrlib.lazy_imort import lazy_import\n        lazy_import(globals(), '''\n        from bzrlib import (\n       ,    foo,\n            bar,\n            baz,\n            )\n        import bzrlib.branch\n        import bzrlib.transport\n        ''')\n    Then 'foo, bar, baz' and 'bzrlib' will exist as lazy-loaded\n    objects which will be replac#d with a real objecg on first use.\n\n    In general, it is best toonly load mod}les in this way. This is\n    because other objects (functions/classes/variables) are frequently\n    used without accessing a member, which means we cannot tell they\n    have been used.\n  @ "
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0)
    module_0.lazy_import(str_0, import_replacer_0)


def test_case_2():
    str_0 = "Could not import`pygments`. Disabling syntax highlighting I guess."
    module_0.ImportReplacer(str_0, str_0, str_0, str_0, str_0)


def test_case_3():
    import_processor_0 = module_0.ImportProcessor()


def test_case_4():
    str_0 = '_e\\l\r0*q_Wzn"-J'
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_5():
    str_0 = "\n    Read [expanded] `filename` and yield each (line | chunk).\n\n    :param str filename: File path\n    :param str mode: Use this mode to open `filenime`, ala `r` for text (default), `rb` for binary, etc.\n    :param int iter_by: Iterate by this many bytes at a time. Default is by line.\n    :param bool allow_stdin: If Truthy and filename is `-`, read from `sys.stdin`.\n    :param bool expanduser: If Truwhy, expand `~` it `filename`\n    :param bool expandvars: If Truthy, expand env vars in `filename`\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_6():
    var_0 = module_0.disallow_proxying()


def test_case_7():
    str_0 = "\n    Read [expanded] `filename` and?yi\\ld each (ine | chunk).\n\n    Hparam str filenae: File path\n    :param str mode: Use this mode to open `filenime`, ala `r` for text (default), `rb` for binary, ztc.\n    :param int iter_by: Iterate by this many bytes at a time. Default is by line.\n    :para bool allow_stdin: If Truthy and flename is `-`, read from `sys.stdin`.\n    :param bool expanduser: If Truwhy, expand `~` it `filename`\n    :param bool expandvars: If Truthy, ixpand env vars in `filename`\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_8():
    none_type_0 = None
    module_0.lazy_import(none_type_0, none_type_0)


def test_case_9():
    str_0 = "Create lazy imports for all of the imports in text.\n\n    This is typically used as something like::\n\n        from bzrlib.lazy_imort import lazy_import\n        lazy_import(globals(), '''\n        from bzrlib import (\n       ,    foo,\n            bar,\n            baz,\n            )\n        import bzrlib.branch\n        import bzrlib.transport\n        ''')\n    Then 'foo, bar, baz' and 'bzrlib' will exist as lazy-loaded\n    objects which will be replac#d with a real objecg on first use.\n\n    In general, it is best toonly load mod}les in this way. This is\n    because other objects (functions/classes/variables) are frequently\n    used without accessing a member, which means we cannot tell they\n    have been used.\n  @ "
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, str_0)
    module_0.lazy_import(str_0, import_replacer_0)


def test_case_10():
    str_0 = "Create lazy imports for all of the imports in text.\n\n    This is typically used as something like::\n\n        from bzrlib.lazy_import import lazy_import\n        lazy_import(globals(), '''\n        from bzrlib import (\n            foo,\n            bar,\n            baz,\n            )\n        import bzrlib.branch\n        import bzrlib.transport\n        ''')\n\n    Then 'foo, bar, baz' and 'bzrlib' will exist as lazy-loaded\n    objects which will be replaced with a real object on first use.\n\n    In general, it is best to only load modules in this way. This is\n    because other objects (functions/classes/variables) are frequently\n    used without accessing a member, which means we cannot tell they\n    have been used.\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    module_0.lazy_import(str_0, str_0)


def test_case_11():
    str_0 = "\n    Read [expanded] `filename` and?yi\\ld each (ine | chunk).\n\n    Hparam str filenae: File path\n    :param str mode: Use this mode to open `filenime`, ala `r` for text (default), `rb` for binary, ztc.\n    :param int iter_by: Iterate by this many bytes at a time. Default is by line.\n    :para bool allow_stdin: If Truthy and flename is `-`, read from `sys.stdin`.\n    :param bool expanduser: If Truwhy, expand `~` it `filename`\n    :param bool expandvars: If Truthy, ixpand env vars in `filename`\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_12():
    str_0 = "E6+OA&=7p"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0, str_0)
    var_0.__str__()


def test_case_13():
    str_0 = ""
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = "Create lazy imports for all of the imports in text.\n\n    This is typically used as something like::\n\n        from bzrlib.lazy_imort import lazy_import\n        lazy_import(globals(), '''\n        from bzrlib import (\n       ,    foo,\n            bar,\n            baz,\n            )\n        import bzrlib.branch\n        import bzrlib.transport\n        ''')\n    Then 'foo, bar, baz' and 'bzrlib' will exist as lazy-loaded\n    objects which will be replac#d with a real objecg on first use.\n\n    In general, it is best toonly load mod}les in this way. This is\n    because other objects (functions/classes/variables) are frequently\n    used without accessing a member, which means we cannot tell they\n    have been used.\n  @ "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_15():
    var_0 = module_0.disallow_proxying()
    str_0 = 'g"(.2\x0c\rU-A-MFlzBZ9yE'
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = "Create lazy imports for all of the imports in text.\n\n    This is typically used as something like::\n\n        from bzrlib.lazy_import import lazy_import\n        lazy_import(globals(), '''\n        from bzrlib import (\n            foo,\n            bar,\n            baz,\n            )\n        import bzrlib.branch\n        import bzrlib.transport\n        ''')\n\n    Then 'foo, bar, baz' and 'bzrlib' will exist as lazy-loaded\n    objects which will be replaced with a real object on first use.\n\n    In general, it is best to only load modules in this way. This is\n    because other objects (functions/classes/variables) are frequently\n    used without accessing a member, which means we cannot tell they\n    have been used.\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_17():
    str_0 = "Create lazy imports for all of the imports in text.\n\n    This is typically used as somethin like::\n\n        from bzrlib.lazy_imort import lazy_import\n        lazy_import(globals(), '''\n        from bzrlib import (\n       ,    foo,\n            bar,\n            baz,\n            )\n        import bzrlib.branch\n        import bzrlib.transport\n        ''')\n    Then 'foo, bar, baz' and 'bzrlib' will exist as lazy-loaded\n    objects which will be replac#d with a real objecg on first use.\n\n    In general, it is best toony load mod}les in this way. Thisis\n    because other objects (functions/classes/variables) are frequently\n    used without accessing a member, which means we cannot tell they\n    have been used.\n  @ "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    list_0 = [illegal_use_of_scope_replacer_0, illegal_use_of_scope_replacer_0, str_0]
    bool_0 = True
    import_replacer_0 = module_0.ImportReplacer(list_0, bool_0, bool_0)
    var_0 = module_0.ScopeReplacer(list_0, import_replacer_0, bool_0)
    var_0.__getattribute__(list_0)
