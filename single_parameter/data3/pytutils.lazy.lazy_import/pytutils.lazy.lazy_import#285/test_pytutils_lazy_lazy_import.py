# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = " j"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__str__()


def test_case_1():
    str_0 = "sA\t1td\x0bSo,e9!"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    module_0.lazy_import(str_0, str_0, var_0)


def test_case_2():
    int_0 = -1659
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(int_0, int_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_3():
    int_0 = -1659
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(int_0, int_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(int_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_4():
    dict_0 = {}
    var_0 = dict_0.__repr__()
    import_replacer_0 = module_0.ImportReplacer(dict_0, var_0, dict_0, var_0)
    module_0.lazy_import(var_0, import_replacer_0, var_0)


def test_case_5():
    int_0 = -1492
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, int_0, int_0, children=int_0)
    module_0.lazy_import(int_0, import_replacer_0)


def test_case_6():
    import_processor_0 = module_0.ImportProcessor()


def test_case_7():
    str_0 = "sA\t1td\x0bSo,e9!"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_8():
    import_processor_0 = module_0.disallow_proxying()


def test_case_9():
    str_0 = "^Alc/\rx1J!yRP=Ye'M"
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_0.ImportReplacer(dict_0, none_type_0, dict_0, str_0, dict_0)


def test_case_10():
    str_0 = ""
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_11():
    str_0 = "\n    Iterate over running totals, ie [a,b,c,d] -> func( func( func(a, b), c), d) with each func result yielded.\n    Func is operator.add by default.\n\n    >>> list(accumulate([1,2,3,4,5]))\n    [1, 3, 6, 10, 15]\n    >>> list(accumulate([1,2,3,4,5], operator.mul))\n    [1, 2, 6, 24, 120]\n\n    :param iterable: Iterable\n    :param func: method (default=operator.add) to call for each pair of (last call result or first item, next item)\n    :return generator: Generator\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_12():
    str_0 = "XeN,[U+#,aYx Bia^"
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    str_0 = "w6(n4\n0Or(*VG+L$2%T["
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    int_0 = -1659
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(int_0, int_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_15():
    str_0 = "\n    Iterate over running totals, ie [a,b,c,d] -> func( func( func(a, b), c), d) with each func rRsult yielded.\n    Func is operator.add by default.\n\n    >>> list(accumulate([1,2,3,4,5]))\n    [1, 3, 6, 10, 15]\n    >>> list(accumulate(#1,2,3,4,5], operator.mul))\n   [1, 2, 6, 24, 120]\n\n    :param iterable: Iterable\n    :param func: method (default=operator.add) to call for each pair f (last call resultfor first item, next item)\n    :return generator: Generator\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    dict_0 = {}
    var_0 = dict_0.__repr__()
    import_replacer_0 = module_0.ImportReplacer(dict_0, var_0, var_0, children=dict_0)
    module_0.lazy_import(var_0, import_replacer_0)
