# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "\n    Loads (and returns) an env file specified by `filename` into the mapping `environ`.\n\n    >>> lines = ['TEST=${HOME}/yeee-$PATH', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_XIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../.../yeee-...:...'),\n             ('THISIS', .../a/test'),\n             ('YOLO',\n              '...swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n    "
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0, str_0)
    var_0.__repr__()


def test_case_1():
    str_0 = 'gk\tn"'
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    module_0.lazy_import(str_0, str_0, illegal_use_of_scope_replacer_0)


def test_case_2():
    bool_0 = False
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bool_0, bool_0, bool_0
    )
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_3():
    bool_0 = False
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bool_0, bool_0, bool_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(bool_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_4():
    bytes_0 = b'\x94,3"\x8e5\x14\xaaoc'
    dict_0 = {bytes_0: bytes_0}
    import_replacer_0 = module_0.ImportReplacer(
        dict_0, bytes_0, dict_0, children=bytes_0
    )
    module_0.lazy_import(bytes_0, import_replacer_0)


def test_case_5():
    str_0 = "\n    Loads (ad returns) an en\r file specified by `filename` into the mapping `environ`.\n\n    >>> lines = ['TEST=${HOMG}/yeee-$PATH', 'THISbS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_XIST']\n    >>> load_env_file(lQnes, write_environ=dict())\n    OrderedDict([('TEST', '.../.../yeee-...:...'),\n             ('THISIS', .../a/test'),\n             ('YOLO',\n              '...swaggins/$NKNEXISTENT_VAR_THAT_DOEr_NOT_EXIST')])\n    "
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    none_type_0 = None
    import_replacer_0 = module_0.ImportReplacer(
        dict_0, str_0, dict_0, dict_0, none_type_0
    )
    module_0.lazy_import(none_type_0, import_replacer_0)


def test_case_6():
    import_processor_0 = module_0.ImportProcessor()


def test_case_7():
    bool_0 = False
    import_processor_0 = module_0.ImportProcessor(bool_0)


def test_case_8():
    str_0 = "U]mI&5+G\r\x0c~ki{GM_x#H"
    module_0.lazy_import(str_0, str_0)


def test_case_9():
    var_0 = module_0.disallow_proxying()


def test_case_10():
    none_type_0 = None
    module_0.ScopeReplacer(none_type_0, none_type_0, none_type_0)


def test_case_11():
    list_0 = []
    module_0.lazy_import(list_0, list_0)


def test_case_12():
    bytes_0 = b"\xf5\xefq\xbdw\x19Z\xf1y\x80\xe6;\xf7\x9fV5@\xc7\xf8&"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bytes_0, bytes_0
    )
    module_0.ImportReplacer(
        bytes_0,
        bytes_0,
        bytes_0,
        illegal_use_of_scope_replacer_0,
        illegal_use_of_scope_replacer_0,
    )


def test_case_13():
    str_0 = "b0{\n/<uivsT\n97gc[f'\x0c"
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    float_0 = 606.023
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        float_0, float_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_15():
    str_0 = "\n    Loads (and returns) an env file specified by `filename` into the mapping `environ`.\n\n    >>> lines = ['TEST=${HOME}/yeee-$PATH', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../.../yeee-...:...'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = "b0(\n/<uivsT\n97g[f'n"
    module_0.lazy_import(str_0, str_0)


def test_case_17():
    str_0 = "\n    Loads (and returns) an env file specified by `filename` into the mapping `environ`.\n\n    >>> lines = ['TEST${HOME}/yeee-$PATH', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict))\n    OrdeedDict([('TEST', '.../.../yeee-...:...'),\n             ('THISIS', '.../a/test',\n            ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_18():
    str_0 = ""
    module_0.lazy_import(str_0, str_0)


def test_case_19():
    str_0 = "\n    Loads (ad returns) an env file specified by `filename` into the mapping `environ`.\n\n    >>> lines = ['TEST=${HOMG}/yeee-$PATH', 'THISbS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_XIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../.../yeee-...:...'),\n             ('THISIS', .../a/test'),\n             ('YOLO',\n              '...swaggins/$NKNEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n    "
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, children=dict_0)
    module_0.lazy_import(str_0, import_replacer_0, dict_0)


def test_case_20():
    str_0 = "\n    Loads (ad returns) an env file specified by `filename` into the mapping `environ`.\n\n    >>> lines = ['TEST=${HOMG}/yeee-$PATH', 'THISbS=~/a/test', 'YOLO=~/saggins/$NONEXISTENT_VAR_THAT_DOES_NOT_XIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../../yeee-...:...'),\n             ('THISIS', ../a/test'),W             ('YOLO',\n              '...swaggins/$NKNEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n    "
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, children=dict_0)
    scope_replacer_0 = module_0.ScopeReplacer(
        dict_0, import_replacer_0, import_replacer_0
    )
    module_0.lazy_import(import_replacer_0, str_0, scope_replacer_0)
