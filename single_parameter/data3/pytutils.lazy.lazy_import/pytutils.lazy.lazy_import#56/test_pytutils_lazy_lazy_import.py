# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "%W,2oih!$(#E<}+"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    module_0.lazy_import(str_0, str_0)


def test_case_1():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    illegal_use_of_scope_replacer_0.__str__()


def test_case_2():
    str_0 = "PQ$p}"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_3():
    str_0 = "F9mJZR\t3#`C{AA0"
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, dict_0)
    module_0.lazy_import(str_0, import_replacer_0)


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()
    module_0.ImportReplacer(
        import_processor_0,
        import_processor_0,
        import_processor_0,
        children=import_processor_0,
    )


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    str_0 = " <}"
    module_0.lazy_import(str_0, str_0)


def test_case_7():
    import_processor_0 = module_0.disallow_proxying()


def test_case_8():
    str_0 = "Invalid pattern(s) found. %(msg)s"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_9():
    str_0 = "Invalid pattern(s) found. %(msg)s"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__str__()


def test_case_10():
    str_0 = "PQ$p}"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_11():
    str_0 = "%W,2oih!$(#E<}+"
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    str_0 = "\n        :param str prefix: Prefix to add/remove from keys.\n        :param collections.MutableMapping mapping: Dict-like object to wrap\n        :param bool fancy_repr: If True, show fancy repr, otherwise just show dict's\n        :param bool dictify_repr: If True, cast mapping to a dict on repr\n        "
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    str_0 = "Invalid pattern(s) found. %(msg)s"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_14():
    none_type_0 = None
    none_type_1 = None
    import_processor_0 = module_0.ImportProcessor()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    var_0 = module_0.disallow_proxying()
    list_0 = [illegal_use_of_scope_replacer_0]
    module_0.ImportReplacer(list_0, list_0, none_type_1, import_processor_0, list_0)


def test_case_15():
    str_0 = '\'E)%El$\\"R~"CI'
    dict_0 = {str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
    module_0.lazy_import(str_0, import_replacer_0)


def test_case_16():
    str_0 = ""
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_17():
    str_0 = "Invalid pattern(s) found. %(msg)s"
    module_0.lazy_import(str_0, str_0)


def test_case_18():
    str_0 = ".(\nD#ERnr~h6C(\x0c`&je"
    module_0.lazy_import(str_0, str_0)


def test_case_19():
    str_0 = "\n    Parses env file content.\n\n    From honcho.\n\n    >>> lines = ['TEST=${HOME}/yeee', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../yeee'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_20():
    str_0 = 'E)%E$\\"I~"Cg'
    dict_0 = {str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
    var_0 = module_0.ScopeReplacer(dict_0, import_replacer_0, str_0)
    var_0.__repr__()
