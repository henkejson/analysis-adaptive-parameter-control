# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = ">~{Wreb'/J"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0, str_0)
    module_0.IllegalUseOfScopeReplacer(var_0, str_0, var_0)


def test_case_1():
    str_0 = "\r\x0c kwpGg3Rb"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0.__unicode__()


def test_case_2():
    str_0 = ">~{Wreb'/J"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    module_0.IllegalUseOfScopeReplacer(
        illegal_use_of_scope_replacer_0, str_0, illegal_use_of_scope_replacer_0
    )


def test_case_3():
    int_0 = 0
    module_0.ImportReplacer(int_0, int_0, int_0)


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    str_0 = "`\no"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_6():
    var_0 = module_0.disallow_proxying()


def test_case_7():
    var_0 = module_0.disallow_proxying()
    module_0.lazy_import(var_0, var_0)


def test_case_8():
    str_0 = "~^f)sab([\\2O@!!>a.H"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_1 = var_0.__eq__(var_0)
    var_0.__unicode__()


def test_case_9():
    str_0 = "\n   Set arbitrary node on a tree-like mapping structure, allowing for : notation to signify dimension.\n\n    Arguments:\n        mapping collections.Mapping: Mapping to fetch from\n        key str|unicode: Key to set, allowing for : notation\n        value str|unicode: Value to set `key` to\n        parent bool: If True, return parent node. Defaults t False.\n\n    Returns:\n        object: Parent node.\n\n    "
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, dict_0)
    import_replacer_0.__setattr__(dict_0, str_0)


def test_case_10():
    str_0 = "Create a new proxy object, passing in the args to pass to re.compile\n\n        :param args: The `*args` to pass to re.compile\n        :param kwargs: The `**kwargs` to pass to re.compile\n        "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_11():
    tuple_0 = ()
    import_processor_0 = module_0.ImportProcessor()
    none_type_0 = None
    bool_0 = True
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, bool_0
    )
    import_processor_1 = module_0.ImportProcessor(tuple_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(none_type_0)
    module_0.ImportReplacer(
        illegal_use_of_scope_replacer_0,
        illegal_use_of_scope_replacer_0,
        none_type_0,
        bool_0,
        var_0,
    )


def test_case_12():
    str_0 = "$2(d4g"
    str_1 = "False"
    module_0.lazy_import(str_1, str_0)


def test_case_13():
    str_0 = "~^f)sab([\\2O@!!>a.H"
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = "Create a new proxy object, passing in the args to pass to re.compile\n\n        :param args: The `*args` to pass to re.compile\n        :param kwargs: The `**kwargs` to pass to re.compile\n        "
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = "`\no"
    dict_0 = {str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_17():
    str_0 = "\t*yJ%Bny#UTLF\n=e"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_18():
    str_0 = "\n q  Parses env file content.\n\n    From honcho.\n\n    >>> lines = ['TEST=${HOME}/yeee', 'THISIS=~/a/test', 'YOLO=~/swhggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, w#ite_environ=dict())\n    OrderedDict([('TEST', '.../yeee'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n            @ '.../swagDins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n\n    "
    var_0 = module_0.disallow_proxying()
    module_0.lazy_import(var_0, str_0, var_0)


def test_case_19():
    str_0 = ""
    var_0 = module_0.disallow_proxying()
    none_type_0 = None
    none_type_1 = None
    module_0.lazy_import(none_type_0, str_0, none_type_1)
