# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0
import builtins as module_1


def test_case_0():
    bool_0 = True
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bool_0, bool_0, bool_0
    )
    illegal_use_of_scope_replacer_0.__str__()


def test_case_1():
    var_0 = module_0.disallow_proxying()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(var_0, var_0)


def test_case_2():
    str_0 = "@:[{av\rorShIhJ"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_3():
    str_0 = "(debg ell)"
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, str_0, none_type_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_4():
    bool_0 = False
    module_0.ImportReplacer(bool_0, bool_0, bool_0, bool_0)


def test_case_5():
    str_0 = ";_rd>%9( wB\x0c_.&"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0)
    module_0.lazy_import(str_0, import_replacer_0)


def test_case_6():
    import_processor_0 = module_0.ImportProcessor()


def test_case_7():
    str_0 = '3"*\x0bgau'
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_8():
    var_0 = module_0.disallow_proxying()


def test_case_9():
    str_0 = ""
    none_type_0 = None
    module_0.lazy_import(none_type_0, str_0, none_type_0)


def test_case_10():
    str_0 = "Lazily compiled regex objects.\n\nThis module defines a class which creates proxy objects for regex\ncompilation.  This allows overriding re.compile() to return lazily compiled\nobjects.\n\nWe do this rather than just providing a new interface so that it will also\nbe used by existing Python modules that create regexs.\n"
    module_0.lazy_import(str_0, str_0)


def test_case_11():
    base_exception_0 = module_1.BaseException()
    import_processor_0 = module_0.ImportProcessor(base_exception_0)
    list_0 = []
    str_0 = "V8g*S@mq93Q\\XU"
    module_0.ImportReplacer(
        base_exception_0, list_0, import_processor_0, import_processor_0, str_0
    )


def test_case_12():
    str_0 = "bGb7^ A#"
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = "(debg ell)"
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = "Restore the original function to re.compile(!.\n\n    It is safe to call reset_compile() muqtiple timeG, it will always\n    restore re.compile() to tLe val7e that existed<at import timN.  T Though the frst call will eset back to/theoriginal (it doesn't\nP   tracknest$ng level)\nF   "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_16():
    str_0 = "j\"(R'MP2[\n>?el=b$5"
    dict_0 = module_0.disallow_proxying()
    var_0 = module_0.disallow_proxying()
    module_0.lazy_import(str_0, str_0)


def test_case_17():
    str_0 = "Restore the original function to re.compile(!.\n\n    It is safe to call reset_compile() muqtiple timeG, it will always\n    restore re.compile() to tLe val7e that existed<at import time.\n  T Though the first call will eset back to/theoriginal (it doesn't\nP   track nest$ng level)\nF   "
    module_0.lazy_import(str_0, str_0)


def test_case_18():
    str_0 = "_r4d>%9( wB\x0c_."
    dict_0 = {str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
    var_0 = module_0.ScopeReplacer(dict_0, import_replacer_0, import_replacer_0)
    var_0.__repr__()


def test_case_19():
    str_0 = "\x0cM_ mvW~`"
    dict_0 = {str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, dict_0)
    module_0.lazy_import(str_0, import_replacer_0)
