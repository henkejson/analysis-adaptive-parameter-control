# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "xGkm35Cj"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0, str_0)
    module_0.lazy_import(var_0, str_0)


def test_case_1():
    var_0 = module_0.disallow_proxying()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        var_0, var_0, var_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_2():
    bool_0 = True
    module_0.ImportReplacer(bool_0, bool_0, bool_0)


def test_case_3():
    import_processor_0 = module_0.ImportProcessor()


def test_case_4():
    str_0 = "p6}K"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_5():
    str_0 = "/t6}8"
    module_0.lazy_import(str_0, str_0)


def test_case_6():
    var_0 = module_0.disallow_proxying()


def test_case_7():
    str_0 = 'gD"88J:etza)f&'
    dict_0 = {str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, dict_0)
    import_replacer_0.__setattr__(import_replacer_0, import_replacer_0)


def test_case_8():
    var_0 = module_0.disallow_proxying()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        var_0, var_0, var_0
    )
    var_1 = illegal_use_of_scope_replacer_0.__eq__(var_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_9():
    bool_0 = True
    import_processor_0 = module_0.ImportProcessor()
    module_0.ImportReplacer(
        import_processor_0,
        import_processor_0,
        bool_0,
        import_processor_0,
        import_processor_0,
    )


def test_case_10():
    float_0 = -484.2667
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        float_0, float_0, float_0
    )
    str_0 = "%Uaf& *(\t\n.d;V\\"
    module_0.lazy_import(illegal_use_of_scope_replacer_0, str_0)


def test_case_11():
    str_0 = "\n    Parses env file content.\n\n    From honcho.\n\n    >>> lines = ['TEST=${HOME}/yeee', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../yeee'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_12():
    str_0 = ""
    str_1 = "j\r.j&"
    module_0.lazy_import(str_1, str_0, str_1)


def test_case_13():
    str_0 = "0>r\x0bb~D<r%2O}a4\x0b\t{#"
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = "\x0cY=8\nD\x0c~"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_15():
    str_0 = "\n    Parses env )ile content.\n\n    From honcho.\n\n   >>> lines =y['TEST=${HOM)f/yeee', 'THISIS=~/a/test, 'YOL=~/swaggins/$NONEXIS/ENT_VAR_THAT_DOES_OT_EXIST']\n    >>> load_e$v_file(lines, wrte_environ=dict())\n    OrderedDict([('TEST\n, '.../yeee'),\n             (THISIS', '.../a/test'),\n             ~'YOLO',\n              '...+swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = 'gD"88JG:edtza)xf&'
    dict_0 = {str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
    import_replacer_0.__setattr__(import_replacer_0, import_replacer_0)
