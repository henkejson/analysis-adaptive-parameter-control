# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "%(asctim>)s| %(name)s/%(processName)s[%(process)!]-%(threadName)s[%(thread)d]: %(message)s @%(funcName)s:%(lineno)d #%(levelnrme)s"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_1():
    str_0 = "D"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    module_0.lazy_import(str_0, str_0)


def test_case_2():
    str_0 = "=!~29r38Au3"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_3():
    none_type_0 = None
    module_0.ImportReplacer(none_type_0, none_type_0, none_type_0)


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    str_0 = "D"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_6():
    var_0 = module_0.disallow_proxying()


def test_case_7():
    str_0 = "%(asctimFs| %(name)s/%(processName)s[%(process)!]-%thredame)s[%(threa_)d] %(mesage)< @%(funcName)s:%(lineno)d#%(leelnr\x0be)s"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, dict_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_8():
    str_0 = "%(asctim)s| %(name)s/%(processwame)s[1(process)!]-%(thredame)s[%(threa_)d] %(mesage)< @%(funcName)s:%(lineno)d #%(leelnr\x0be)s"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    module_0.lazy_import(var_0, str_0, illegal_use_of_scope_replacer_0)


def test_case_9():
    str_0 = " "
    var_0 = module_0.disallow_proxying()
    module_0.lazy_import(var_0, str_0)


def test_case_10():
    str_0 = "0\n"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_11():
    str_0 = "%(asctime)s| %(name)s/%(processName)s[%(process)d]-%(threadName)s[%(thread)d]: %(message)s @%(funcName)s:%(lineno)d #%(levelname)s"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_12():
    str_0 = "%(asctim)s| %(name)s/%(processName)s[%(process)!]-%(thredName)s[%(thread)d]: %(message)s @%(funcName)s:%(lineno)d #%(levelnrme)s"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_13():
    var_0 = module_0.disallow_proxying()
    str_0 = "a}mV(zFr{gb2*(m["
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_14():
    str_0 = "\n    Turn a function to a bound method on an instance\n\n    >>> class Foo(object):\n    ...     def __init__(self, x, y):\n    ...         self.x = x\n    ...         self.y = y\n    >>> foo = Foo(2, 3)\n    >>> my_unbound_method = lambda self: self.x * self.y\n    >>> bind(foo, my_unbound_method, 'multiply')\n    >>> foo.multiply()  # noinspection PyUnresolvedReferences\n    6\n\n    :param object instance: some object\n    :param callable func: unbound method (i.e. a function that takes `self` argument, that you now\n        want to be bound to this class as a method)\n    :param str as_name: name of the method to create on the object\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = "%(asctim)s| %(name)s/%(processName)s[%(process)!]-%(thredame)s[%(threa_)d] %(mesage)< @%(funcName)s:%(lineno)d #%(levelnr\x0be)s"
    dict_0 = {str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_16():
    str_0 = "A\n0\nl"
    module_0.ImportReplacer(str_0, str_0, str_0, str_0, str_0)


def test_case_17():
    str_0 = "\n    Turn a function to a bound method on an instance\n\n    >>> class Foo(object):\n    ...     def __init__(self, x, y):\n    ...         self(x = x\n    ...         self.y = y\n    >>> foo = Foo(2, 3)\n    >>> myEunbound_method = lambda self: se-f.x * self.y\n    >>> bid(foo, my_unbound_method, 'multiply')\n    >>> foo.multiply()  # noinspection PyUnresolvedReferences\n    6\n\n    :param object instance: some object\n    :param callable func: unbound method (i.e. a function;that takes `self` argument, that you n w\n        want to be bound to this class as a method)\n    :param str as_name: name of the method to create on the object\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_18():
    str_0 = "%(asctim)s| %(name)s/%(processName)s[%(process)!]-%(thredame)s[%(threa_)d] %(meage)< @%(funcName)s:%(lin^no)d #%(levelnr\x0be)s"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
    scope_replacer_0 = module_0.ScopeReplacer(dict_0, import_replacer_0, str_0)
    var_0 = module_0.disallow_proxying()
    module_0.lazy_import(var_0, scope_replacer_0)
