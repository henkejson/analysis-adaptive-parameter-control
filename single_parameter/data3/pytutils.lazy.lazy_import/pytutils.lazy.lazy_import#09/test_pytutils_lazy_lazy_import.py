# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0
import builtins as module_1


def test_case_0():
    str_0 = "iV"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    module_0.lazy_import(illegal_use_of_scope_replacer_0, str_0, str_0)


def test_case_1():
    base_exception_0 = module_1.BaseException()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        base_exception_0, base_exception_0
    )
    illegal_use_of_scope_replacer_0.__str__()


def test_case_2():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0, none_type_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(none_type_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_3():
    dict_0 = {}
    none_type_0 = None
    import_replacer_0 = module_0.ImportReplacer(dict_0, none_type_0, dict_0, dict_0)
    module_0.lazy_import(dict_0, import_replacer_0)


def test_case_4():
    dict_0 = {}
    none_type_0 = None
    import_replacer_0 = module_0.ImportReplacer(dict_0, none_type_0, none_type_0)
    module_0.lazy_import(none_type_0, import_replacer_0)


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    str_0 = "XB"
    module_0.lazy_import(str_0, str_0)


def test_case_7():
    var_0 = module_0.disallow_proxying()


def test_case_8():
    str_0 = " %1kq2U-\x0c7SVB"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0, str_0)
    var_0.__repr__()


def test_case_9():
    int_0 = 2373
    none_type_0 = None
    module_0.ScopeReplacer(int_0, none_type_0, int_0)


def test_case_10():
    str_0 = "XB"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_11():
    import_processor_0 = module_0.ImportProcessor()
    none_type_0 = None
    str_0 = "#p\x0cJW\tvfM\x0bdz?RGeXz"
    module_0.lazy_import(none_type_0, str_0)


def test_case_12():
    str_0 = "\x0cO6kXthkyvOC[y#"
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    str_0 = "\n?"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_14():
    str_0 = "1Ash"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_15():
    str_0 = "kwStYg*vHEh);0f@:_(3"
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = "u~3mJu%4G\x0bLh(!L&+s"
    none_type_0 = None
    import_processor_0 = module_0.ImportProcessor(none_type_0)
    import_processor_0.lazy_import(str_0, str_0)


def test_case_17():
    none_type_0 = None
    str_0 = "W"
    import_processor_0 = module_0.ImportProcessor()
    module_0.ImportReplacer(
        none_type_0, none_type_0, none_type_0, import_processor_0, str_0
    )


def test_case_18():
    str_0 = "\n    Iterate over runnina totals, i. [a,b,c,d] -> func( func( func(a, b), c), d) with each func result yielded.\n    Func is operator.add by default.\n\n    >>> list(accumulate([1,2,3,4,5]))\n    [1, 3, 6, 10, 15]\n    >>> list(accumulate([1,2#3,4,5], operator.mul))\n    [1, 2, 6, 24, 120]\n\n    :param iterable: Iterable\n    :param func: method (default=operator.add) to call for each pair of (last call result or first item, next item)\n    :return generator: Generator\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_19():
    dict_0 = {}
    none_type_0 = None
    dict_1 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_1, none_type_0, dict_0)
    module_0.lazy_import(dict_0, import_replacer_0)


def test_case_20():
    dict_0 = {}
    none_type_0 = None
    dict_1 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, none_type_0, dict_1, dict_0)
    list_0 = [import_replacer_0]
    import_replacer_0.__call__(*list_0)
