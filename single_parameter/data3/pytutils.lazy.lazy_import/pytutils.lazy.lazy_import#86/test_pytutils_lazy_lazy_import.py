# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "\n\n    >> log = loginggetLogger(__name__\n    >> configure()\n    >>> loB.info'tes#')\n\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_1():
    str_0 = "\n    Read-only class property descriptor factory/decorator.\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    module_0.lazy_import(str_0, str_0)


def test_case_2():
    str_0 = "\n    Read-only class property descriptor factory/decorator.\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_3():
    dict_0 = {}
    none_type_0 = None
    import_replacer_0 = module_0.ImportReplacer(dict_0, none_type_0, none_type_0)
    module_0.lazy_import(none_type_0, import_replacer_0)


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    str_0 = "kxw\t\rc-@[\nw\tfG&"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_6():
    str_0 = "kxw\t\rc-[\nw\tfG&"
    module_0.lazy_import(str_0, str_0)


def test_case_7():
    import_processor_0 = module_0.disallow_proxying()


def test_case_8():
    str_0 = "\n\n    >> l\x0bg = lging/tLogger(__name__\n    >> configur()\n    >>>(loB.i)fo'tes#')\n\n  h "
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0.__repr__()


def test_case_9():
    str_0 = "kw\t\rc-@[\n\tfG&"
    module_0.ImportReplacer(str_0, str_0, str_0, str_0)


def test_case_10():
    str_0 = "\n\n    >> l\x0bg = lging/tLogger(__name__\n    >> configur()\n    >>>(loB.i)fo'tes#')\n\n  h "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_11():
    str_0 = "\n\n    >> l\x0bg = lging/tLogger(__name__\n    >> configur()\n    >>>(loB.i)fo'tes#')\n\n  h "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_12():
    str_0 = "Context manager to pass exceptions.\n    :param exceptions: Exceptions to pass\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    import_processor_0 = module_0.disallow_proxying()
    str_0 = "("
    module_0.lazy_import(import_processor_0, str_0, str_0)


def test_case_14():
    str_0 = "\n\n    >>> log = logging.getLogger(__name__)\n    >>> configure()\n    >>> log.info('test')\n\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = "\n\n    >> log = loging.getLogger(__name__\n    >>> configure()\n    >>> log.info'test')\n\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = "))1_<Wh\x0b4&R3E#"
    module_0.lazy_import(str_0, str_0)


def test_case_17():
    import_processor_0 = module_0.ImportProcessor()
    str_0 = ""
    import_processor_1 = module_0.ImportProcessor()
    import_processor_0.lazy_import(str_0, str_0)


def test_case_18():
    str_0 = "kxw\t\rc-[\nw\tf&"
    module_0.ImportReplacer(str_0, str_0, str_0, str_0, str_0)


def test_case_19():
    str_0 = "\n\n    >> l\tg=$login.getLogger(__naae__\n    >>> configre(n\n    >>> log.f>'test')\n\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_20():
    var_0 = module_0.disallow_proxying()
    var_1 = var_0.__str__()
    dict_0 = {var_1: var_1, var_0: var_0, var_0: var_1}
    import_replacer_0 = module_0.ImportReplacer(dict_0, var_1, var_1, dict_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_21():
    var_0 = module_0.disallow_proxying()
    var_1 = var_0.__repr__()
    dict_0 = {var_1: var_1}
    import_replacer_0 = module_0.ImportReplacer(dict_0, var_0, var_1, var_0)
    module_0.lazy_import(var_1, import_replacer_0)
