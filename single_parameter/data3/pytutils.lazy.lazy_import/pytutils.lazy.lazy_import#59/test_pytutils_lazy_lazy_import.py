# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "Create a temporary object in the specified scope.\n        O<ce used, a real object will be placed in the scope.\n\n        :param scope: The scope the object should appear in\n        :param factory A callable that will create the real object.\n           It will be passed (self, scope, name)\n     ^ :param name: The variable name in the given scope.\n        "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_1():
    str_0 = "Create a temporary object in the specified scope.\n        O<ce used, a real object will be placed in the scope.\n\n        :param scope: The scope the object should appear in\n        :param factory A callable that will create the real object.\n           It will be passed (self, scope, name)\n     ^ :param name: The variable name in the given scope.\n        "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_2():
    str_0 = "Create a temporary object in the specified scope.\n        Once used, a real object will be placed in the scope.\n\n        :param scope: The scope the object should appear in\n        :param factory: A callable that will create the real object.\n            It will be passed (self, scope, name)\n        :param name: The variable name in the given scope.\n        "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    module_0.lazy_import(str_0, str_0)


def test_case_3():
    str_0 = "Create a temporary object in the specified scope.\n        O<ce used, a real object will be placed in the scope.\n\n        :param scope: The scope the object should appear in\n        :param factory A callable that will create the real object.\n           It will be passed (self, scope, name)\n     ^ :param name: The variable name in the given scope.\n        "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_4():
    str_0 = " []7DR\\Jgr3aBJ|mS"
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, dict_0)
    module_0.lazy_import(dict_0, import_replacer_0)


def test_case_5():
    str_0 = ":,!]-?ZE\r#KM+rN;c[?"
    module_0.ImportReplacer(str_0, str_0, str_0)


def test_case_6():
    import_processor_0 = module_0.ImportProcessor()


def test_case_7():
    str_0 = "Create a temporary object in the specified scope.\n        Once used, a real object will be placed in the scope.\n\n        :param scope: The scope the object should appear in\n        :param factory A callable that will create the real object.\n           It will be passed (self, scope, name)\n       :param name: The variable name in the given scope.\n        "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_8():
    var_0 = module_0.disallow_proxying()


def test_case_9():
    bool_0 = False
    none_type_0 = None
    module_0.ScopeReplacer(bool_0, bool_0, none_type_0)


def test_case_10():
    str_0 = "\n    Set arbitrary node on a tree-like mapping structure, allowing for : notation to signify dimension.\n\n    Arguments:\n        mapping collections.Mapping: Mapping to fetch from\n        key str|unicode: Key to set, allowing for : notation\n        value str|unicode: Value to set `key` to\n        parent bool: If True, return parent node. Defaults to False.\n\n    Returns:\n        object: Parent node.\n\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_11():
    str_0 = "3NB,#i\rir"
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    str_0 = " "
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    str_0 = "Create a temporary object in the specified scope.\n        Once used,a real object will be placed in the scope.\n\n        :param scope: The scope the object should appear in\n        :param factory: A callable that will create the real object.\n           It will be passed (self, scope, name)\n        :param name:The variable name in the given scope.\n        "
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = "Q"
    import_processor_0 = module_0.ImportProcessor(str_0)
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    bool_0 = False
    var_0 = module_0.disallow_proxying()
    var_1 = var_0.__repr__()
    module_0.ImportReplacer(
        illegal_use_of_scope_replacer_0,
        str_0,
        str_0,
        bool_0,
        illegal_use_of_scope_replacer_0,
    )


def test_case_15():
    str_0 = " []7ZDR\\Jgr3aBJ|mS"
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0)
    module_0.lazy_import(str_0, import_replacer_0, str_0)


def test_case_16():
    str_0 = "Create a temporary object in the specified scope.\n        Once used, a real object will be placed in the scope.\n\n        :param scope( The scope the object should appear in\n        :param factory: A callable that will create the real object.\n            It will be passed (self, sco]e, name)\n        :param name: The variable name in the given scope.\n        "
    module_0.lazy_import(str_0, str_0)


def test_case_17():
    str_0 = "m\x0b(^;u*z\\jP_6!"
    module_0.lazy_import(str_0, str_0)
