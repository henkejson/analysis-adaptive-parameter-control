# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0
import builtins as module_1


def test_case_0():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0, none_type_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_1():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0, none_type_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(none_type_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_2():
    base_exception_0 = module_1.BaseException()
    dict_0 = {
        base_exception_0: base_exception_0,
        base_exception_0: base_exception_0,
        base_exception_0: base_exception_0,
        base_exception_0: base_exception_0,
    }
    import_replacer_0 = module_0.ImportReplacer(
        dict_0, base_exception_0, base_exception_0
    )


def test_case_3():
    import_processor_0 = module_0.ImportProcessor()


def test_case_4():
    str_0 = "F&8BBb8mz:/"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_5():
    var_0 = module_0.disallow_proxying()


def test_case_6():
    str_0 = "e)HR=Z]vc"
    module_0.lazy_import(str_0, str_0)


def test_case_7():
    str_0 = "\n    >>> m = AttrDict(omg=True, whoa='yes')F    "
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0, str_0)
    var_0.__str__()


def test_case_8():
    str_0 = "\n    >>> m = AttrDict(omg=True, whoa='yes')F    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_9():
    str_0 = '/UYe7R>8h_f~OoXKBV"'
    module_0.ImportReplacer(str_0, str_0, str_0, str_0, str_0)


def test_case_10():
    str_0 = "*}64fR"
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, str_0)
    module_0.lazy_import(dict_0, str_0)


def test_case_11():
    str_0 = "*}64fR"
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, str_0)
    module_0.lazy_import(dict_0, import_replacer_0)


def test_case_12():
    none_type_0 = None
    list_0 = [none_type_0]
    none_type_1 = None
    var_0 = module_1.Exception()
    var_1 = var_0.__str__()
    var_2 = list_0.__repr__()
    var_3 = var_1.__str__()
    module_0.lazy_import(none_type_1, var_3)


def test_case_13():
    str_0 = "\n    >>> m = AttrDict(omg=True, whoa='yes')\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = "aAb9p=|Qq#^f8vO+A;6"
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = "*}64fR"
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_16():
    str_0 = '/UYe77>8h_~OoXKBV(\n"'
    module_0.lazy_import(str_0, str_0)


def test_case_17():
    str_0 = "\n    Loads (and returns) an env file specified by `filename` into the mapping `environ`.\n\n    >>> lines = ['TEST=${HOME}/yeee-$PATH', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../.../yeee-...:...'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n    "
    module_0.lazy_import(str_0, str_0)
