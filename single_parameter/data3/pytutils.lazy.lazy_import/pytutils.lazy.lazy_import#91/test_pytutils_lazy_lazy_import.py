# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "\\(0-a-z_0-9])=(.)\\"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_1():
    int_0 = 1516
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(int_0, int_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_2():
    str_0 = "FC+"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, dict_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_3():
    str_0 = '\\"(@AAZa-z_}-$)=c)\\'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    str_0 = '\\"([A-Za-z_0-9]+)=(.*)\\Z'
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_6():
    str_0 = '\\"([A-Za-z_0-9]+)=(.*)\\Z'
    module_0.lazy_import(str_0, str_0)


def test_case_7():
    var_0 = module_0.disallow_proxying()


def test_case_8():
    str_0 = "&)+zRG"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_9():
    str_0 = ""
    none_type_0 = None
    none_type_1 = None
    module_0.lazy_import(none_type_0, str_0, none_type_1)


def test_case_10():
    str_0 = "y3=JhPM[_2#p^|&3_\n"
    module_0.lazy_import(str_0, str_0)


def test_case_11():
    str_0 = "\\I"
    var_0 = module_0.ImportProcessor(str_0)
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(var_0, var_0)
    var_1 = illegal_use_of_scope_replacer_0.__eq__(var_0)


def test_case_12():
    str_0 = "Restore the original function to re.compile().\n\n    It is safeKto call reset_compile(F multple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Thouh the first call will reset back to the orginal (it doesn't\n    track nesting level)\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    module_0.lazy_import(str_0, str_0, illegal_use_of_scope_replacer_0)


def test_case_13():
    int_0 = -4905
    module_0.ImportReplacer(int_0, int_0, int_0, int_0, int_0)


def test_case_14():
    str_0 = "rWW(yQ\r+uo"
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = "-#0-a-z_0-]+);(.*)\\"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_16():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_17():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile(F multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Thouh the first call will reset back to the orginal (it doesn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_18():
    str_0 = "%"
    dict_0 = {
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
    }
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, dict_0)
    var_0 = module_0.ScopeReplacer(dict_0, import_replacer_0, str_0)
    module_0.lazy_import(dict_0, var_0)
