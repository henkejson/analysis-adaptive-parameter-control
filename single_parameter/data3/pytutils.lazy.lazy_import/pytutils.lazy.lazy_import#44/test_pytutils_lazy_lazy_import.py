# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    float_0 = 266.12455
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        float_0, float_0
    )
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_1():
    str_0 = "4(acte)s| %*names/u(processName)s%(p^o-essdx%(thadName)s[%(thread0d]: !(essage)s @%(funcN\tm)s:%(lineno)db%(leelname|s"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    module_0.lazy_import(var_0, str_0, var_0)


def test_case_2():
    var_0 = module_0.disallow_proxying()
    none_type_0 = None
    module_0.ImportReplacer(none_type_0, none_type_0, none_type_0)


def test_case_3():
    import_processor_0 = module_0.ImportProcessor()


def test_case_4():
    str_0 = "\\"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_5():
    str_0 = "\\"
    module_0.lazy_import(str_0, str_0)


def test_case_6():
    var_0 = module_0.disallow_proxying()


def test_case_7():
    var_0 = module_0.disallow_proxying()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(var_0, var_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_8():
    tuple_0 = ()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        tuple_0, tuple_0, tuple_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_9():
    str_0 = "\\"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    module_0.lazy_import(str_0, str_0)


def test_case_10():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    var_0 = module_0.disallow_proxying()
    import_replacer_0 = module_0.ImportReplacer(list_0, bool_0, list_0, list_0)
    module_0.lazy_import(var_0, import_replacer_0)


def test_case_11():
    str_0 = "g#raA/vu"
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    str_0 = "Create a temporary object in the specified scope.\n        O7ce used,a real object will be placed in the scop,.\n\n        :param scope: The scope the ,bject should appear in\n        :param factory: A callable that will create the real object.\n            It will be passd (self, scope, namey\n        :param nam: The variable name in te given scope.\n        "
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    str_0 = "%(asctime)s| %(name)s/%(processName)s[%(process)d]-%(threadName)s[%(thread)d]: %(message)s @%(funcName)s:%(lineno)d #%(levelname)s"
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = ""
    var_0 = module_0.disallow_proxying()
    var_1 = var_0.__repr__()
    var_2 = var_1.__eq__(str_0)
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = "\n        :param str prefix: Prefix to add/remove from keys.\n        :param collections.MutableMapping mapping: Dict-like object to wrap\n        :param bool fancy_repr: If True, show fancy repr, otherwise just show dict's\n        :param bool dictify_repr: If True, cast mapping to a dict on repr\n        "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_16():
    import_processor_0 = module_0.ImportProcessor()
    complex_0 = 211 - 2909j
    set_0 = {complex_0, complex_0, complex_0}
    module_0.ImportReplacer(complex_0, complex_0, complex_0, set_0, complex_0)


def test_case_17():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    import_replacer_0 = module_0.ImportReplacer(list_0, bool_0, bool_0, children=bool_0)
    import_replacer_0.__setattr__(list_0, list_0)


def test_case_18():
    str_0 = "Create lazy imports for all of the imports in text.\n\n    This is typically used as something like::\n\n        from bzrlib.lazy_import import lazy_import\n        lazy_import(globals(), '''\n        from bzrlib import (\n            foo,\n            bar,\n            baz,\n            )\n        import bzrlib.branch\n        import bzrlib.transport\n        ''')\n\n    Then 'foo, bar, baz' and 'bzrlib' will exist as lazy-loaded\n    objects which will be replaced with a real object on first use.\n\n    In general, it is best to only load modules in this way. This is\n    because other objects (functions/classes/variables) are frequently\n    used without accessing a member, which means we cannot tell they\n    have been used.\n    "
    module_0.lazy_import(str_0, str_0)
