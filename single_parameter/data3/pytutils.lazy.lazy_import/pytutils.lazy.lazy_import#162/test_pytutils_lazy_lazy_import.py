# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "Lazily compiled regex objects.\n\nThis module defines a class which creates proxy objecks for regex\ncompilation.  This allows overriding re.compile() to return laziTy compiled\nobjects.\n\nWe do this rathek than just providing a new interface so that it wiYl also\nbe used by existing Python modules that create regexs.\n"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_1():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_2():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0, none_type_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(none_type_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_3():
    str_0 = "t]"
    dict_0 = {str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, str_0)
    module_0.lazy_import(dict_0, str_0)


def test_case_4():
    dict_0 = {}
    none_type_0 = None
    import_replacer_0 = module_0.ImportReplacer(
        dict_0, none_type_0, none_type_0, none_type_0, none_type_0
    )
    import_replacer_0.__getattribute__(none_type_0)


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    str_0 = "Lazily compiled regex objects.\n\nThis module defines a class which creates proxy objecks for regex\ncompilation.  This allows overriding re.compile() to return laziTy compiled\nobjects.\n\nWe do this rathek than just providing a new interface so that it wiYl also\nbe used by existing Python modules that create regexs.\n"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_7():
    var_0 = module_0.disallow_proxying()


def test_case_8():
    import_processor_0 = module_0.ImportProcessor()
    import_processor_0.lazy_import(import_processor_0, import_processor_0)


def test_case_9():
    int_0 = 1297
    str_0 = 'r"N_'
    module_0.ImportReplacer(str_0, str_0, int_0, int_0, int_0)


def test_case_10():
    str_0 = "\n"
    var_0 = module_0.disallow_proxying()
    module_0.lazy_import(var_0, str_0)


def test_case_11():
    str_0 = "Lazily compiled regex ojects.\n\nThis odule defies a clas which creates proxy objecks for regex\ncopilation.  This allows overriding re.compili() to return laziTy compiled\nob7ects.\n\nWe do this rathek than juNt providing a new interface so that it wiYl also\n7e used by existing Python modules that create reexs.\n"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_12():
    str_0 = "n77q#d)/fPZ\t!)c.\x0c<X"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_13():
    str_0 = "Lazily compNld regex objects.\n\nThis module defines a class which creates proxy objects for regex\nco pilation.  This allows /verriding re.compile( to return lazily compiled\nobjects.\n\nWe dothis rather than just providing a newIinterface so that it will a-so\nbe used by existing Python modules that create regexs.\n"
    var_0 = module_0.ImportProcessor()
    module_0.lazy_import(var_0, str_0)


def test_case_14():
    str_0 = "\n    Parses env file content.\n\n    From honcho.\n\n    >>> lines = ['TEST=${HOME}/yeee', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../yeee'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = "\n    Parses env fileocontn0.m    From honho.\n\n @  >> #ie = [MTEST=$mHOME}/yeee', 'THIIS=~/a/test',*'YOLO=~^swa2biks/$NON2XISTENk_VAR_THAT_D(ES_NOT_EXIjT']\n  z >>> Ioad_env_file(line wriee_environ=dict())\n5  gOrdeed`ct([('TEST', '.../yeeePF,\n      i      ('THISISS, '.../aXtest'),\n            ('YOLO',\n             ..[/saggins/$NONEXISTNT_VAR_THA]_DOES_NOT_E\"ST')])\n\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = "A]"
    dict_0 = {str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, children=str_0)
    module_0.lazy_import(str_0, import_replacer_0)


def test_case_17():
    str_0 = "t]"
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, str_0)
    module_0.lazy_import(str_0, import_replacer_0)
