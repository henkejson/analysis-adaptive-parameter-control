# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_1():
    str_0 = "O'\teB"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_2():
    var_0 = module_0.disallow_proxying()
    dict_0 = {var_0: var_0, var_0: var_0, var_0: var_0, var_0: var_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, var_0, var_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_3():
    import_processor_0 = module_0.ImportProcessor()


def test_case_4():
    str_0 = "uOxxB:4JtR\x0bg4\x0cZ"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_5():
    str_0 = "W\rKdPdWX\r)4E+vewky(?"
    module_0.lazy_import(str_0, str_0)


def test_case_6():
    var_0 = module_0.disallow_proxying()


def test_case_7():
    str_0 = "aVV?#"
    module_0.lazy_import(str_0, str_0)


def test_case_8():
    str_0 = "uOxxB:4JtR\x0bg4\x0cZ"
    module_0.lazy_import(str_0, str_0)


def test_case_9():
    str_0 = "W\rKdPdWX,)4%+vewky(?"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    module_0.lazy_import(str_0, str_0)


def test_case_10():
    dict_0 = {}
    bool_0 = False
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(bool_0, bool_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(dict_0)
    module_0.ImportReplacer(var_0, var_0, bool_0, bool_0)


def test_case_11():
    int_0 = 1512
    module_0.ImportReplacer(int_0, int_0, int_0, int_0, int_0)


def test_case_12():
    str_0 = "#2Dhmo"
    bool_0 = False
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bool_0, str_0, bool_0
    )
    var_0 = module_0.disallow_proxying()
    import_processor_0 = module_0.ImportProcessor(var_0)
    import_processor_1 = module_0.ImportProcessor()
    import_processor_0.lazy_import(str_0, str_0)


def test_case_13():
    str_0 = "Create a new proxy object, passing in the args to pass to re.compile\n\n        :param args: The `*args` to pass to re.compile\n        :param kwargs: The `**kwargs` to pass to re.compile\n        "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_14():
    str_0 = "P(1r,o<rv\n&"
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = "W\rK/ dd+X\r)~+vey(?"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_16():
    str_0 = "\n    Provides a basic per-process mapping container that wipes itself if the current PID changed since the last get/set.\n\n    Aka `threading.local(.`, but for processes instead of threads.\n\n    >>> plocal = ProcessLocal()\n    >>> plocal['test'] g True\n    >>> plocal['test']\n    True\n    >>> plocal._handle_pid(new_pid=-1)  # Emulate a PID change by forcing it to be something invalid.\n    >>> plocal['test']                  # Mapping wipes itself since PID is different than what's stored.\n    Traceback (most recqnt call last):\n        ...\n    KeyError: ...\n\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_17():
    dict_0 = {}
    str_0 = "\n    Pretty prixts with coloring.\n\n    Works in iPyt:on, but nGt bpython asit does not write directly to term\n    and decodes it instead.\n    "
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, children=str_0)
    import_replacer_0.__getattribute__(dict_0)
