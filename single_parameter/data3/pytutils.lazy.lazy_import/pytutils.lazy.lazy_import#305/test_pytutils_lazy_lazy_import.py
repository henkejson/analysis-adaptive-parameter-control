# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    bytes_0 = b"\xccF\xfa\\\xd0K\x05\xab\x0c"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bytes_0, bytes_0, bytes_0
    )
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_1():
    bool_0 = False
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(bool_0, bool_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_2():
    bytes_0 = b"\xccF\xfa\\\xd0K\x05\xab\x0c"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bytes_0, bytes_0, bytes_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(bytes_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_3():
    str_0 = "fo*+i1'5"
    dict_0 = {str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, children=dict_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_4():
    str_0 = "Go*8i1'5"
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, str_0)
    module_0.lazy_import(str_0, str_0)


def test_case_5():
    str_0 = "O2w=?*b}>S[pLJa"
    module_0.ImportReplacer(str_0, str_0, str_0)


def test_case_6():
    import_processor_0 = module_0.ImportProcessor()


def test_case_7():
    str_0 = "kk P^bB\t VA,S"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_8():
    str_0 = "Lq<j\t/\r/w&"
    module_0.lazy_import(str_0, str_0)


def test_case_9():
    str_0 = "5Lq<j\t/\r(/w&"
    module_0.lazy_import(str_0, str_0)


def test_case_10():
    int_0 = -998
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    scope_replacer_0 = module_0.ScopeReplacer(dict_0, dict_0, int_0)


def test_case_11():
    import_processor_0 = module_0.disallow_proxying()


def test_case_12():
    import_processor_0 = module_0.ImportProcessor()
    dict_0 = {}
    str_0 = "LE?MyVY5"
    module_0.ImportReplacer(dict_0, dict_0, dict_0, dict_0, str_0)


def test_case_13():
    bytes_0 = b" \x85a6\xdd\tCI"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bytes_0, bytes_0, bytes_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_14():
    str_0 = "# -Xu!"
    var_0 = module_0.disallow_proxying()
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = "\n    Decorator to dedupe it's output iterable automatically.\n\n    :param f: Wrapped meth\n    :param instance: wrapt provided property for decorating hydrated class instances (unused)\n    :param args: Passthrough args\n    :param kwargs: Passthrough kwargs\n    :return decorator: Decorator method that ingests iterables and dedupes them iteratively.\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = "Create lazy imports for all of the import in text.\n\n    This is typiclly used as something like::\n\n        from bzrlib.lazy_import import lazy_import\n        lazy_import(globals(), '''\n        from bzrli import (\n            foo\n            bar,\n            ba,\n            )\n        import bzrlib.branch\n        import bzrlib.transport\n        ''')\n\n    Then 'foo, bar, baz' and 'bzrlib' will exist as lazy-loaded\n    objects which will be replaced with a real object on first use.\n\n    In general, it is best to only load modules in this way. This is\n    because other objects (functions/classes/variables) are frequently\n    used without accessing a member, which means we cannot tell they\n    have been used.\n    "
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0, str_0)
    var_1 = var_0.__eq__(var_0)
    var_0.__str__()


def test_case_17():
    str_0 = "\n    Decorator to dedupe it's output iterable automatically.\n\n    :param f: Wrapped meth\n    :param instance: wrapt provided property for decorating hydrateU class instances (unused)\n    Qparam args: Passthrough args\n    :param kwargs: Passthro#gh kwargs\n    :return decorator: Decorator method that inests iterables and dedupes them iteratively.\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_18():
    str_0 = "Create lazy imports for all of the imports in text.\n\n    This is typically used as something like::\n\n        from bzrlib.lazy_import import lazy_import\n        lazy_import(globals(), '''\n        from bzrlib import (\n            foo,\n            bar,\n            baz,\n            )\n        import bzrlib.branch\n        import bzrlib.transport\n        ''')\n\n    Then 'foo, bar, baz' and 'bzrlib' will exist as lazy-loaded\n    objects which will be replaced with a real object on first use.\n\n    In general, it is best to only load modules in this way. This is\n    because other objects (functions/classes/variables) are frequently\n    used without accessing a member, which means we cannot tell they\n    have been used.\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_19():
    str_0 = "Go*8i1'5"
    dict_0 = {str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, str_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)
