# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "Lazily compiled regex objects.\n\nThis module defines a class which creates proxy objects for regex\ncompilation.  This allows overriding re.compile() to return lazily compiled\nobjects.\n\nWe do this rather than just providing a new interface so that it will also\nbe used by existing Python modules that create regexs.\n"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )


def test_case_1():
    bool_0 = False
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(bool_0, bool_0)


def test_case_2():
    bool_0 = False
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(bool_0, bool_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_3():
    str_0 = "Restore the original functon to re.compile).\n\n    I is safeto call reset_compile() multiple times, it will always\n    restore re.compile( to the value that existed at import time.\n    Though the first call will reset back to the oiginal (it doesn't\n    track nesting level)\n   "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_4():
    str_0 = "Ci0w!Tl"
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, str_0)
    module_0.lazy_import(dict_0, import_replacer_0)


def test_case_5():
    str_0 = "f[^Eya"
    none_type_0 = None
    import_processor_0 = module_0.ImportProcessor()
    module_0.ImportReplacer(str_0, str_0, str_0, str_0, none_type_0)


def test_case_6():
    none_type_0 = None
    module_0.ImportReplacer(none_type_0, none_type_0, none_type_0)


def test_case_7():
    import_processor_0 = module_0.ImportProcessor()


def test_case_8():
    str_0 = ">)VUk&4L*&"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_9():
    str_0 = "|#Aww0x;"
    module_0.lazy_import(str_0, str_0)


def test_case_10():
    var_0 = module_0.disallow_proxying()


def test_case_11():
    str_0 = "Object already replaced, did you assign it to another variable?"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_12():
    none_type_0 = None
    module_0.lazy_import(none_type_0, none_type_0)


def test_case_13():
    str_0 = "8"
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    var_0 = module_0.disallow_proxying()
    float_0 = 61.91
    set_0 = set()
    module_0.ImportReplacer(float_0, set_0, float_0, set_0, float_0)


def test_case_15():
    str_0 = "Lazily compiled regex objects.\n\nThis module defines a class which creates proxy objects for regex\ncompilation.  This allows overriding re.compile() to return lazily compiled\nobjects.\n\nWe do this rather than just providing a new interface so that it will also\nbe used by existing Python modules that create regexs.\n"
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    bool_0 = False
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(bool_0, bool_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_17():
    str_0 = "*p(xg150y3[BH"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_18():
    str_0 = ""
    module_0.lazy_import(str_0, str_0)


def test_case_19():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_20():
    str_0 = "Restore the original functon to re.compile).\n\n    It is safeto call reset_compile() multiple times, it will always\n    restore re.compile( to the value that existed at import time.\n    Though the first call will reset back to the oiginal (it doesn't\n    track nesting level)\n   "
    module_0.lazy_import(str_0, str_0)


def test_case_21():
    str_0 = "j6g*"
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0, str_0)
