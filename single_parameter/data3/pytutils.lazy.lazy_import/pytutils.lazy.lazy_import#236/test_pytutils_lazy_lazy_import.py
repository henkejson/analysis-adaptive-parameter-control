# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = '"cYb/&;W;P J-1\n'
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_1():
    bool_0 = True
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bool_0, bool_0, bool_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(bool_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_2():
    var_0 = module_0.disallow_proxying()
    dict_0 = {var_0: var_0, var_0: var_0, var_0: var_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, var_0, dict_0, dict_0)
    module_0.lazy_import(var_0, import_replacer_0, var_0)


def test_case_3():
    none_type_0 = None
    module_0.ImportReplacer(none_type_0, none_type_0, none_type_0)


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    str_0 = '"cYb/&;W;P J-1\n'
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_6():
    str_0 = '"cYb/&;W;P J-1\n'
    module_0.lazy_import(str_0, str_0)


def test_case_7():
    var_0 = module_0.disallow_proxying()


def test_case_8():
    str_0 = "\n    Parses env file ontent.\n\n    From honcho.\n\n   >>> lies =['TEST=${HOME}/yeee'+ 'TISIS=~/a/test', 'YOLO=~/swaugins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_ile(lines,write_environ=d0ct())\n    OrderedDict([('TEST', '.../yeee'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.z./swamgins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST'))\n\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_9():
    str_0 = '"cYb/&;W;P J-1\n'
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_10():
    str_0 = '\\A"(.*)"\\Z'
    module_0.lazy_import(str_0, str_0)


def test_case_11():
    str_0 = '\\A"(.*)"\\Z'
    str_1 = ""
    module_0.lazy_import(str_0, str_1)


def test_case_12():
    str_0 = '\\A"(.*)"\\Z'
    module_0.ImportReplacer(str_0, str_0, str_0, str_0, str_0)


def test_case_13():
    str_0 = ";x?~&.W`/n("
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = "\n    Parses env file content.\n\n    From honcho.\n\n    >>> lines = ['TEST=${HOME}/yeee', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_ile(lines, write_environ=dict())\n    OrderedDict([('TEST', '../yeee'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_15():
    str_0 = "EK#cCmn,i"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_16():
    var_0 = module_0.disallow_proxying()
    dict_0 = {var_0: var_0, var_0: var_0, var_0: var_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, var_0, var_0)
    module_0.lazy_import(dict_0, import_replacer_0)


def test_case_17():
    str_0 = "\n    Parses env file ontent.\n\n    From honcho.\n\n   >>> lines =['TEST=${HOME}/yeee'+ 'TISI=~/a/testh, 'YOLO=~/swaugins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_nv_ile(lines,write_envi\x0con=d0ct())\n    OrderedDict([('TEST', '..l/yeee'),\n     V       ('THISIS', '.../\n/test'),\n             ('YOLO',\n              '.z./swaggins/$NONEXISTENT_VAR_THA_DOES\x0cNOT_EXIST')])\n\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_18():
    var_0 = module_0.disallow_proxying()
    dict_0 = {var_0: var_0, var_0: var_0, var_0: var_0}
    var_1 = var_0.__repr__()
    import_replacer_0 = module_0.ImportReplacer(dict_0, var_0, var_1)
    module_0.lazy_import(dict_0, import_replacer_0)


def test_case_19():
    var_0 = module_0.disallow_proxying()
    dict_0 = {var_0: var_0, var_0: var_0, var_0: var_0}
    var_1 = var_0.__repr__()
    import_replacer_0 = module_0.ImportReplacer(dict_0, var_0, var_1, var_1)
    module_0.lazy_import(var_1, import_replacer_0, var_0)
