# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "g\x0bM}z4\x0c"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)


def test_case_1():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_2():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(none_type_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_3():
    str_0 = ".Y*zM"
    module_0.ImportReplacer(str_0, str_0, str_0, str_0)


def test_case_4():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    import_replacer_0 = module_0.ImportReplacer(list_0, bool_0, list_0, children=list_0)
    module_0.lazy_import(list_0, import_replacer_0)


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    str_0 = "g\x0bY*zM\x0c"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_7():
    str_0 = "scanner"
    module_0.lazy_import(str_0, str_0)


def test_case_8():
    str_0 = ""
    none_type_0 = None
    module_0.lazy_import(none_type_0, str_0, str_0)


def test_case_9():
    var_0 = module_0.disallow_proxying()


def test_case_10():
    str_0 = "g\x0bM}|z4\x0c"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_11():
    none_type_0 = None
    module_0.lazy_import(none_type_0, none_type_0)


def test_case_12():
    str_0 = "\n    Pretty prints with coloring.\n\n    Works in iPython, but not bpython as it does not write directly to term\n    and decodes it instead.\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_13():
    str_0 = "%s(%s)"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_14():
    str_0 = " k\x0bY*1](z\x0c"
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = "X#Y*;MnC"
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = "%s(%s)"
    module_0.lazy_import(str_0, str_0)


def test_case_17():
    str_0 = "o1fWr9nGyIITf7"
    none_type_0 = None
    bool_0 = True
    module_0.ImportReplacer(str_0, none_type_0, none_type_0, str_0, bool_0)


def test_case_18():
    bool_0 = True
    str_0 = "pe^"
    list_0 = [str_0, bool_0, str_0, str_0, str_0, bool_0, bool_0, str_0]
    import_replacer_0 = module_0.ImportReplacer(list_0, bool_0, str_0, children=list_0)
    import_replacer_0.__call__()


def test_case_19():
    str_0 = "\n    >> log = get_logger()\n    >>> log.info('test'H\n    >>> log = get_logger('test2')\n    >>> log.info('test2')\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_20():
    str_0 = "\n    >> log = get_loggr()\n    >>> log.info('test'H\n    >>> log = get_logger('test2'\n n  >>> log.info('test2')\n    "
    module_0.lazy_import(str_0, str_0)
