# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0
import builtins as module_1


def test_case_0():
    bytes_0 = b"\xdd\xb6I\xf1$\x9f\x86A`Y\xb7N\x97\x89"
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bytes_0, none_type_0
    )


def test_case_1():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_2():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(none_type_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_3():
    str_0 = "F>O~wnN#`*9)4,DZQAp\t"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, str_0)
    module_0.lazy_import(dict_0, import_replacer_0)


def test_case_4():
    dict_0 = {}
    module_0.ImportReplacer(dict_0, dict_0, dict_0)


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    str_0 = "9%c[v=gRl\r/5G"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_7():
    str_0 = "e,(lR.7<0#\nbHgNkX9"
    module_0.lazy_import(str_0, str_0)


def test_case_8():
    base_exception_0 = module_1.BaseException()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        base_exception_0, base_exception_0, base_exception_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_9():
    none_type_0 = None
    module_0.ScopeReplacer(none_type_0, none_type_0, none_type_0)


def test_case_10():
    import_processor_0 = module_0.disallow_proxying()


def test_case_11():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0, none_type_0}
    module_0.ImportReplacer(none_type_0, none_type_0, none_type_0, set_0, set_0)


def test_case_12():
    str_0 = "()"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_13():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_14():
    base_exception_0 = module_1.BaseException()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        base_exception_0, base_exception_0, base_exception_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_15():
    object_0 = module_1.object()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        object_0, object_0, object_0
    )
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_16():
    str_0 = "7[#<"
    module_0.lazy_import(str_0, str_0)


def test_case_17():
    var_0 = module_0.disallow_proxying()
    str_0 = ""
    module_0.lazy_import(str_0, str_0)


def test_case_18():
    str_0 = '"\n    Deduplicates an iterator iteratively using hashed values in a set.\n    Not exactly memory efficient because of that of course.\n    If you have a large dataset with high cardinality look at HyperLogLog instead.\n\n    :return generator: Iterator of deduplicated results.\n    '
    module_0.lazy_import(str_0, str_0)


def test_case_19():
    var_0 = module_0.disallow_proxying()
    dict_0 = {}
    scope_replacer_0 = module_0.ScopeReplacer(dict_0, dict_0, var_0)
    module_0.lazy_import(var_0, scope_replacer_0)


def test_case_20():
    none_type_0 = None
    dict_0 = {}
    scope_replacer_0 = module_0.ScopeReplacer(dict_0, none_type_0, none_type_0)
    scope_replacer_1 = module_0.ScopeReplacer(dict_0, scope_replacer_0, none_type_0)
    dict_1 = {}
    module_0.lazy_import(dict_1, scope_replacer_1)


def test_case_21():
    str_0 = "F>O~nN#`*9)4,D6QA|\t"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, children=dict_0)
    module_0.lazy_import(dict_0, import_replacer_0)
