# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_1():
    str_0 = "3c4Afy>x"
    dict_0 = {str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, str_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_2():
    bytes_0 = b"w\xfb\xff\xefq\x7f\x858\x01\xbearx\xbdu$\xe1"
    module_0.ImportReplacer(bytes_0, bytes_0, bytes_0)


def test_case_3():
    import_processor_0 = module_0.ImportProcessor()


def test_case_4():
    bool_0 = True
    import_processor_0 = module_0.ImportProcessor(bool_0)


def test_case_5():
    str_0 = '"pzbO}z!`_w{wPE]x[sY'
    module_0.lazy_import(str_0, str_0)


def test_case_6():
    var_0 = module_0.disallow_proxying()


def test_case_7():
    var_0 = module_0.disallow_proxying()
    module_0.lazy_import(var_0, var_0)


def test_case_8():
    bytes_0 = b"w\xfb\xff\xefq\x7f\x858\x01\xbearx\xbdu$\xe1"
    import_replacer_0 = module_0.disallow_proxying()
    var_0 = module_0.disallow_proxying()
    var_1 = var_0.__repr__()
    module_0.ImportReplacer(var_1, var_0, bytes_0, var_1, var_1)


def test_case_9():
    complex_0 = 346.061 + 432j
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        complex_0, complex_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_10():
    str_0 = "\n    Ensure string is decoded (eg unicode); convert using specified parameters if we have to.\n\n    :param str|bytes|bytesarray|memoryview s: string/bytes\n    :param str encoding: Decode using this encoding\n    :param str errors: How to handle errors\n    :return bytes|bytesarray|memoryview: Decoded string as bytes\n\n    :return: Encoded string\n    :rtype: bytes\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_11():
    str_0 = ">)J(0+zXt%Z}#"
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    str_0 = ">)J(0+zXt%Z}#"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_13():
    str_0 = "\n    Ensure string is decoded(eg unicode); convert using specified parameters if we have to.\n\n    :param str|bytes|bytesarray|memoryview s: strin/bytes\n    :param str encoding: Decode using this encoding\n    :param str errors: How to handle errors\n    :return bytes|bytesarray|memoryview: Decoded string as bytes\n\n   :return Encoded string\n    :rtype: byte\n    "
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_1 = var_0.__eq__(var_0)
    var_0.__repr__()


def test_case_14():
    int_0 = -3396
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        int_0, int_0, int_0
    )
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_15():
    str_0 = "ORQN(\nf\x0b;Qpp"
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = "3c4sArfy>x"
    dict_0 = {str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0)
    module_0.lazy_import(dict_0, import_replacer_0)


def test_case_17():
    str_0 = ""
    module_0.lazy_import(str_0, str_0)


def test_case_18():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_19():
    str_0 = "K3c4sArfy>x"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, str_0)
    scope_replacer_0 = module_0.ScopeReplacer(
        dict_0, import_replacer_0, import_replacer_0
    )
    scope_replacer_0.__call__()
