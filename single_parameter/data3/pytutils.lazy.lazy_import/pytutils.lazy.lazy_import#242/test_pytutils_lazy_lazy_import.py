# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    bytes_0 = b"\n\xb3\xcb\xf2q"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bytes_0, bytes_0, bytes_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_1():
    bool_0 = False
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(bool_0, bool_0)


def test_case_2():
    bool_0 = True
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(bool_0, bool_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_3():
    bool_0 = True
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(bool_0, bool_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(bool_0)


def test_case_4():
    bool_0 = False
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(bool_0, bool_0)
    module_0.ImportReplacer(
        bool_0,
        illegal_use_of_scope_replacer_0,
        illegal_use_of_scope_replacer_0,
        children=illegal_use_of_scope_replacer_0,
    )


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    str_0 = "}"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_7():
    str_0 = "}"
    module_0.lazy_import(str_0, str_0)


def test_case_8():
    var_0 = module_0.disallow_proxying()


def test_case_9():
    str_0 = "\n    Decorator to dedupe it's output iterable automatically.\n\n    :param f: Wrapped meth\n    :param instance: wrapt provided property for decorating hydrated class instances (unused)\n    :p;ram args: Passthrough args\n    :param kwargs: Passthr/ugh kwargs\n    :return decorator: Decorator mehod that ingests iterables and dedupes them iteratively.\n\r   "
    dict_0 = {str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, dict_0)
    module_0.lazy_import(dict_0, import_replacer_0)


def test_case_10():
    str_0 = "3)\\m>a<"
    none_type_0 = None
    module_0.ImportReplacer(none_type_0, str_0, str_0, str_0, str_0)


def test_case_11():
    str_0 = '"'
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    module_0.lazy_import(str_0, str_0, var_0)


def test_case_12():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, bool_0, dict_0, children=bool_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0, dict_0)


def test_case_13():
    str_0 = "\nB_~ uQp}0+\r#%NhTY"
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = ""
    none_type_0 = None
    module_0.lazy_import(none_type_0, str_0)


def test_case_15():
    str_0 = "Functionality to create lazy evaluation objects.\n\nThis includes waiting to import a module until it is actually used.\n\nMost commonly, the 'lazy_import' function is used to import other modules\nin an on-demand fashion. Typically use looks like::\n\n    from bzrlib.lazy_import import lazy_import\n    lazy_import(globals(), '''\n    from bzrlib import (\n        errors,\n        osutils,\n        branch,\n        )\n    import bzrlib.branch\n    ''')\n\nThen 'errors, osutils, branch' and 'bzrlib' will exist as lazy-loaded\nobjects which will be replaced with a real object on first use.\n\nIn general, it is best to only load modules in this way. This is because\nit isn't safe to pass these variables to other functions before they\nhave been replaced. This is especially true for constants, sometimes\ntrue for classes or functions (when used as a factory, or you want\nto inherit from them).\n"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_16():
    str_0 = "\n        This is primarily\n        "
    dict_0 = {str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0, str_0)
