# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "<\n3\x0c\t.m^m#\tBrj)or"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0, str_0)
    var_0.__repr__()


def test_case_1():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(list_0, bool_0)


def test_case_2():
    str_0 = "<n\nD3\x0c.m^m#\tBDrjor"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_3():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_4():
    str_0 = "HKVZuDSbbcp`#T"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, str_0)
    module_0.lazy_import(dict_0, import_replacer_0)


def test_case_5():
    str_0 = "QVZuDSbbcp`T"
    dict_0 = {
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
    }
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0)
    module_0.lazy_import(dict_0, import_replacer_0)


def test_case_6():
    import_processor_0 = module_0.ImportProcessor()


def test_case_7():
    str_0 = "<n\nH3\x0c\tFm^m#\tBDrj)\nr"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_8():
    str_0 = "<n\nH3\x0c\tFm^m#\tBDrj)\nr"
    module_0.lazy_import(str_0, str_0)


def test_case_9():
    import_processor_0 = module_0.disallow_proxying()


def test_case_10():
    str_0 = "<\n3\x0c.m^m#\tBDrjor"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_11():
    str_0 = "<n\nH3\x0c\tFm^m#\tBDrj)or"
    module_0.ImportReplacer(str_0, str_0, str_0, str_0, str_0)


def test_case_12():
    str_0 = ""
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_13():
    str_0 = "<n\nH3\x0c(Fm^m#\tBDrj\nr"
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = "(debug shell)"
    module_0.lazy_import(str_0, str_0, str_0)
