# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "Decorator to wrap a class or instance method with a memoizing\n    callable that saves results in a cache.\n\n    You can also specify a cached exception to cache and re-thro as well.\n\n    Originally from cachetools, but modified to support caching certain exceptions.\n    "
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0, str_0)
    var_0.__unicode__()


def test_case_1():
    bool_0 = False
    var_0 = module_0.IllegalUseOfScopeReplacer(bool_0, bool_0, bool_0)
    var_0.__unicode__()


def test_case_2():
    str_0 = "K N Parses env file content.\n\n   From honco.\n    >>> lines = ['TEST=${HOME}/yeee'' 'THISIS=~/a/test', 'YOLO~/w*gins/RNONEXISTENT_VA~_THmT_DOES_NOT_EXIST']\n    >>> load_env_fil(l)nes, writeenviron=dict())\n    Or\\eredict[('TEST', '.../yeee'3\n            ('THkSI','.../a/test'),\n   \"         ('YOLO',\n          q  '.../swagBins/$NNEXISTENT_VAR_THAT_DOES_NT_EXIST')])\n\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    module_0.lazy_import(str_0, str_0)


def test_case_3():
    none_type_0 = None
    module_0.ImportReplacer(none_type_0, none_type_0, none_type_0)


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    str_0 = "%m<K#icA`SZ#@"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_6():
    import_processor_0 = module_0.disallow_proxying()


def test_case_7():
    bool_0 = False
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bool_0, bool_0, bool_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_8():
    str_0 = "v"
    module_0.ImportReplacer(str_0, str_0, str_0, str_0)


def test_case_9():
    str_0 = "Decorator to wrap a class or instance method with a memoizing\n    callable that saves results in a cache.\n\n    You can also specify a cached exception to cache and re-thro as well.\n\n    Originally from cachetools, but modified to support caching crtain exceptions.\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_10():
    str_0 = "%m<K#icA`SZ#@"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_11():
    str_0 = "\n    Parses env file content.\n\n    From honcho.\n\n    >>> lines = ['TEST=${HOME}/yeee', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../yeee'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_12():
    str_0 = ""
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    str_0 = 'm|5\x0c("iznKd"G?'
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = "\nK N Parses env file content.\n\n    From honcho.\n    >>> lines = ['TEST=${HOME}/yeee', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VA~_THAT_DOES_NOT_EXIST']\n    >>> load_env_fil(l)nes, write_environ=dict())\n    Or\\eredict([('TEST', '.../yeee'3\n            ('THISIS', '.../a/test'),\n             ('YOLO',\n           q  '.../swagBins/$NNEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_15():
    str_0 = 'mE5\x0c(zno"G?'
    bool_0 = True
    list_0 = [str_0, bool_0, str_0, str_0]
    import_replacer_0 = module_0.ImportReplacer(list_0, bool_0, str_0)
    import_replacer_0.__unicode__()


def test_case_16():
    str_0 = 'm|5\x0c("iznKd"G?'
    str_1 = "_"
    module_0.ImportReplacer(str_0, str_1, str_0, str_0, str_1)


def test_case_17():
    str_0 = "m\x0cU?D8(zanoSG?"
    bool_0 = False
    list_0 = [str_0, str_0, bool_0, bool_0, str_0, str_0]
    import_replacer_0 = module_0.ImportReplacer(list_0, bool_0, str_0, list_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)
