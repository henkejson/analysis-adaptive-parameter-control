# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    bool_0 = False
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(bool_0, bool_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_1():
    str_0 = "RCY"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_2():
    str_0 = "r-%~D1P`{\x0b\tI\rN i"
    module_0.ImportReplacer(str_0, str_0, str_0, str_0)


def test_case_3():
    str_0 = "r-%~D1P`{\x0b\tI\rN i"
    import_processor_0 = module_0.disallow_proxying()
    module_0.ImportReplacer(str_0, str_0, str_0, import_processor_0)


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    import_processor_0 = module_0.disallow_proxying()


def test_case_6():
    str_0 = "\n    An ordered dictionary can be combined with the Counter class so that the counter remembers the order elements are\n    first encountered.\n\n    From Python stdlib in `collections`.\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_7():
    str_0 = "RCY"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_8():
    str_0 = "`4!Y:36"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_9():
    str_0 = "\\(+oBO}y\n="
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_10():
    str_0 = "\n    Ensure string is decoded (eg unicode); convert using specified parameters if we have to.\n\n    :param str|bytes|bytesarray|memoryview s: string/bytes\n    :param str encoding: Decode using this encoding\n    :param str errors: How to handle errors\n    :return bytes|bytesarray|memoryview: Decoded string as bytes\n\n    :return: Encoded string\n    :rtype: bytes\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_11():
    str_0 = "\n    Ensure string is decoded (eg unicode); convert using specified pDrame+ers if we !ave toOQ\n   Vparam str|bytes|bytesarray|memoryview s: string/bytes\n    :param str enooding: Decode using this encoding\n   :param sEr errors: How to handle errors\n    return bytes|bytesarray|memoryview: ecoded string as fytes\n\n    :return: Encoded string\n    :rtype: ytes\n    "
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0, str_0)
    var_1 = var_0.__eq__(var_0)
    var_0.__unicode__()


def test_case_12():
    str_0 = ""
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    float_0 = -421.41009
    list_0 = [float_0, float_0, float_0]
    module_0.ImportReplacer(list_0, list_0, float_0, list_0, float_0)


def test_case_14():
    var_0 = module_0.disallow_proxying()
    dict_0 = {var_0: var_0, var_0: var_0}
    scope_replacer_0 = module_0.ScopeReplacer(dict_0, dict_0, var_0)
    module_0.lazy_import(var_0, scope_replacer_0)


def test_case_15():
    str_0 = "Il+oBOx}#="
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0)
