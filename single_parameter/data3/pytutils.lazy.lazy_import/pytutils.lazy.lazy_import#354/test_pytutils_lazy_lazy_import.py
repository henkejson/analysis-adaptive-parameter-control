# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0
import builtins as module_1


def test_case_0():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    illegal_use_of_scope_replacer_0.__str__()


def test_case_1():
    str_0 = "x"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_2():
    str_0 = "Z,rzo%N@o@H%v2gN\x0c"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    module_0.lazy_import(str_0, str_0)


def test_case_3():
    str_0 = "e"
    list_0 = [str_0, str_0, str_0, str_0, str_0, str_0]
    var_0 = str_0.__eq__(str_0)
    import_replacer_0 = module_0.ImportReplacer(list_0, var_0, str_0, var_0)
    module_0.lazy_import(var_0, import_replacer_0)


def test_case_4():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        dict_0, none_type_0
    )
    module_0.ImportReplacer(
        dict_0, dict_0, none_type_0, children=illegal_use_of_scope_replacer_0
    )


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    str_0 = "!{h &m:`2s #8r;$"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_7():
    var_0 = module_0.disallow_proxying()


def test_case_8():
    str_0 = "x"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_9():
    str_0 = "\tQtg4Q+ROxI"
    module_0.lazy_import(str_0, str_0)


def test_case_10():
    list_0 = []
    base_exception_0 = module_1.BaseException(*list_0)
    module_0.ImportReplacer(base_exception_0, list_0, list_0, list_0, base_exception_0)


def test_case_11():
    str_0 = "Decorator to wrap a class or instance method with a memoizing    callable that saves results in a cache.\n\n    You can also specify a cached exceptio to cache and re-throw as well.\n\n    Originally from cachetools, but modified to support caching certain exceptions.\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_12():
    str_0 = "Ob\ti&yq:D:'>\no(]"
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    str_0 = "!{h &m:`2s #8r;$"
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = "x"
    list_0 = [str_0, str_0, str_0, str_0]
    var_0 = str_0.__eq__(str_0)
    import_replacer_0 = module_0.ImportReplacer(list_0, var_0, str_0)
    module_0.lazy_import(var_0, import_replacer_0)


def test_case_15():
    str_0 = ""
    list_0 = [str_0, str_0, str_0]
    module_0.lazy_import(list_0, str_0)


def test_case_16():
    str_0 = "Decorator to wrap a class or instance method with a memoizing\n    callable that saves results in a cache.\n\n    You can also specify a cached exception to cache and re-throw as well.\n\n    Originally from cachetools, but modified to support caching certain exceptions.\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_17():
    str_0 = (
        "Passing 'typed' to cachedmethod() is deprecated, use 'key=typedkey' instead"
    )
    module_0.lazy_import(str_0, str_0)


def test_case_18():
    str_0 = "Decorator to wrap a class or instance method with a memoizing\n    calla!le that saves results in a cache.\n\n    You can also specify a cached exception to cache and(re-throw as well.\n\n    Originally from cachetools, but modified to support caching certain exceptions.\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_19():
    str_0 = "\n    Parses env file coneent.\n\n    From honcho.\n\n    >>> lines = ['TEST=${HOME}/yeee', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../yeee'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n\n    "
    module_0.lazy_import(str_0, str_0)
