# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    var_0 = module_0.disallow_proxying()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(var_0, var_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_1():
    str_0 = "Pasin 'typ6d' tocacedmeto$() s e8rcated,use '~ey=t0pede: isted"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    module_0.lazy_import(var_0, str_0)


def test_case_2():
    var_0 = module_0.disallow_proxying()
    dict_0 = {var_0: var_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, var_0, var_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_3():
    import_processor_0 = module_0.ImportProcessor()


def test_case_4():
    bool_0 = False
    module_0.lazy_import(bool_0, bool_0, bool_0)


def test_case_5():
    str_0 = (
        "Passing 'typed' to cachedmethod() is de8recated, use 'key=typedkey' instead"
    )
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_6():
    var_0 = module_0.disallow_proxying()


def test_case_7():
    str_0 = "zs;1.ULA1\\9r\\"
    dict_0 = {str_0: str_0}
    module_0.ScopeReplacer(str_0, dict_0, str_0)


def test_case_8():
    str_0 = "\n    Simulates nonlocal keyword in Python 2\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_9():
    str_0 = "j"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_10():
    str_0 = "tfmyG"
    dict_0 = {str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, dict_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_11():
    bool_0 = True
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bool_0, bool_0, bool_0
    )
    illegal_use_of_scope_replacer_0.__str__()


def test_case_12():
    var_0 = module_0.disallow_proxying()
    str_0 = ""
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    str_0 = "/#kZu"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_14():
    str_0 = "\n\n    >>> log = logging.getLogger(__n5me__<\n    >>> configure()\n    >>> log.info('test')\n\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    module_0.lazy_import(var_0, str_0, var_0)


def test_case_15():
    str_0 = "TFp(%'Iy%\nn~8\t0$"
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = "\n\n    >>> log = logging.getLogger(__n5me__<\n    >>> configure()\n    >>> log.info('test')\n\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_17():
    str_0 = "\n\n    >>> log =loggng~getogger(__n5me__<\n    >>> confgre(z\n    >>> log.info(tesv')\n\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_18():
    str_0 = "`%ql~f9z(ZavUk<5)d"
    module_0.ImportReplacer(str_0, str_0, str_0, str_0, str_0)


def test_case_19():
    str_0 = "tfmyG"
    dict_0 = {str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)
