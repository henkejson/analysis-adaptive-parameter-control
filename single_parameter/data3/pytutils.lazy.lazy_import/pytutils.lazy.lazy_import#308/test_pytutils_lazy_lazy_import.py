# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    module_0.IllegalUseOfScopeReplacer(
        illegal_use_of_scope_replacer_0, none_type_0, illegal_use_of_scope_replacer_0
    )


def test_case_1():
    var_0 = module_0.disallow_proxying()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(var_0, var_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_2():
    str_0 = "\n    Same extremely simple tree based on defaultdict as `tree`, but implemented as a class for extensibility.\n    Use ':' to delve down into dimensions without choosing doors [][][] .\n    Supports specifying a namespace that acts as a key prefix.\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_3():
    var_0 = module_0.disallow_proxying()
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, var_0, dict_0, var_0)
    module_0.lazy_import(dict_0, import_replacer_0)


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    str_0 = "VR>a|p'iRXE.-%Bp\x0bY"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_6():
    str_0 = "VR>a|p'iRXE.-%Bp\x0bY"
    module_0.lazy_import(str_0, str_0)


def test_case_7():
    float_0 = 2506.405
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, float_0, dict_0, float_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0, float_0)


def test_case_8():
    import_processor_0 = module_0.disallow_proxying()


def test_case_9():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_10():
    str_0 = "\n    Turn a function to a bound method on an instance\n\n    >>> class Foo(obje&t):\n    ...     def __init__(self, x, y):\n    ...         sklf.x = x\n    ...         self.y = y\n    >>> foo = Foo(2, P)\n    >>> my_unbound_method = lambda self: self.x * self.y\n    >>> bind(foo, my_unbound_method, 'multiply')\n    >>> foo.multiply()  # noinspection PyUnresolvedReferences\n    6\n\n    :param object instance: some object\n    :param callable func: unbound method (i.e. a function that takes `self` argument, that you now\n        want to be bound to this class as a method#\n    :parWm str as_nae: name of the method to create on the object\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_11():
    str_0 = "\n    Turn a function to a bound method on an instance\n\n    >>> class Foo(object):\n    ...     def __init__(self, x, y):\n    ...         self.x = x\n    ...         self.y = y\n    >>> foo = Foo(2, 3)\n    >>> my_unbound_method = lambda self: self.x * self.y\n    >>> bind(foo, my_unbound_method, 'multiply')\n    >>> foo.multiply()  # noinspection PyUnresolvedReferences\n    6\n\n    :param object instance: some object\n    :param callable func: unbound method (i.e. a function that takes `self` argument, that you now\n        want to be bound to this class as a method)\n    :param str as_name: name of the method to create on the object\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    float_0 = 2274.105
    module_0.ImportReplacer(float_0, float_0, float_0, float_0, float_0)


def test_case_13():
    str_0 = ""
    str_1 = "OF\t"
    module_0.lazy_import(str_1, str_0, str_0)


def test_case_14():
    str_0 = "w_#t`5"
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = "\n    An ordered dictionary can be combined with the Counter class so that the counter remembers the order elements are\n    first encountered.\n\n    From Python stdlib in `collections`.\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    var_0 = module_0.disallow_proxying()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(var_0, var_0)
    var_1 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_17():
    str_0 = "\n    Turn a function to a bound method on an instance\n\n    >>> class Foo(object):\n    ...     def __init__(self, x, y):\n    ...         self.x = x\n    ...         self.y = y\n    >>> foo = Foo(2, 3)\n    >>> my_unbound_method = lambda selfxself.x * self.y\n    >>> bind(foo, my_unbound_method, 'multiply')\n    >>> foo.muliply()  # noinspection PyUnresolvedReferences\n    6\n\n    :param object instance:=some objec\n    :param callable func: unbound method (i.e. a function that takes `self` argument,\nthat you now\n        want to be bound to this class as a method)\n    :param str as_name: name of the method to create on the object\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_18():
    str_0 = '|C;"\tlVm"n%\'z+F>?Ez'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0)
    module_0.lazy_import(str_0, import_replacer_0)
