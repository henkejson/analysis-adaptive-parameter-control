# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "\\A([A-Za-z_{-Q+)=(*=\\"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    module_0.lazy_import(str_0, str_0)


def test_case_1():
    bytes_0 = b".\xaf"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bytes_0, bytes_0
    )
    illegal_use_of_scope_replacer_0.__str__()


def test_case_2():
    bytes_0 = b".\xaf"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bytes_0, bytes_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(bytes_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_3():
    str_0 = "logging.StreamHandler"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_4():
    var_0 = module_0.disallow_proxying()
    none_type_0 = None
    module_0.ImportReplacer(none_type_0, none_type_0, none_type_0, none_type_0)


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    str_0 = "\\A([A-Za-z_0-]+)=(*)\\Z"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_7():
    var_0 = module_0.disallow_proxying()


def test_case_8():
    bytes_0 = b"o\xaf"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bytes_0, bytes_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_9():
    str_0 = "\\A([A-Za-z_{-]+)=(*)\\"
    module_0.lazy_import(str_0, str_0)


def test_case_10():
    str_0 = "_Z,SQZe>"
    module_0.lazy_import(str_0, str_0)


def test_case_11():
    str_0 = '="^AK(AtxavVUue@'
    dict_0 = {
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
    }
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, str_0)
    import_replacer_0.__setattr__(str_0, str_0)


def test_case_12():
    bytes_0 = b"o\xaf"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bytes_0, bytes_0
    )
    none_type_0 = None
    set_0 = {bytes_0}
    module_0.ImportReplacer(
        none_type_0, illegal_use_of_scope_replacer_0, none_type_0, set_0, set_0
    )


def test_case_13():
    str_0 = "Lazily compiled regex objects.\n\nThis module defines a class which creates proxy objects forregex\ncompilation.  This allows overriding re.compile() to return lazily compiled\nobjects.@\nWe do this rather than just providing anew interface so(that it will also\nbe used by existing Python modules that create regexs.\n"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_14():
    str_0 = '\\A(\nA-am"t+N()'
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_15():
    str_0 = "23+<T`lw7?\r}%#+a>R\n"
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = ""
    none_type_0 = None
    module_0.lazy_import(str_0, str_0, none_type_0)


def test_case_17():
    str_0 = "Ec7%T1NL"
    dict_0 = {str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0, dict_0)
