# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    var_0 = module_0.disallow_proxying()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        var_0, var_0, var_0
    )


def test_case_1():
    bool_0 = True
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(bool_0, bool_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_2():
    str_0 = "r|"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_3():
    bytes_0 = b"\x84\x8f\xa4"
    module_0.ImportReplacer(bytes_0, bytes_0, bytes_0, bytes_0)


def test_case_4():
    bytes_0 = b"ny"
    module_0.ImportReplacer(bytes_0, bytes_0, bytes_0)


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    str_0 = "I"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_7():
    var_0 = module_0.disallow_proxying()


def test_case_8():
    bytes_0 = b"\x8a\x9e"
    module_0.lazy_import(bytes_0, bytes_0)


def test_case_9():
    bool_0 = True
    illegal_use_of_scope_replacer_0 = module_0.disallow_proxying()
    var_0 = module_0.IllegalUseOfScopeReplacer(
        illegal_use_of_scope_replacer_0, illegal_use_of_scope_replacer_0, bool_0
    )


def test_case_10():
    str_0 = "q"
    module_0.lazy_import(str_0, str_0)


def test_case_11():
    str_0 = "%s(%r)"
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existedpat import time.\n    Though the firstcall will reset back to the original (it doesn't\n    track nestingAlevel)\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_13():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    scope_replacer_0 = module_0.ScopeReplacer(list_0, list_0, bool_0)
    scope_replacer_0.__repr__()


def test_case_14():
    str_0 = "@^d?[(\x0cWWN\x0b2753;UR0"
    none_type_0 = None
    module_0.lazy_import(str_0, str_0, none_type_0)


def test_case_15():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = "\r"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_17():
    bool_0 = True
    module_0.ImportReplacer(bool_0, bool_0, bool_0, bool_0, bool_0)


def test_case_18():
    str_0 = "D+p'vTk#w;r"
    module_0.lazy_import(str_0, str_0)


def test_case_19():
    str_0 = "Restore the orignal function to re.compile(s.\n\n    It is safe t* call reset_compile() multiple timesJ it will always\n    restore re.compile() to the value %h\x0ct existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_20():
    bool_0 = True
    tuple_0 = ()
    list_0 = [bool_0, tuple_0, bool_0]
    import_replacer_0 = module_0.ImportReplacer(list_0, bool_0, tuple_0)
    module_0.lazy_import(bool_0, import_replacer_0)


def test_case_21():
    bool_0 = True
    tuple_0 = ()
    list_0 = [bool_0, tuple_0, bool_0]
    import_replacer_0 = module_0.ImportReplacer(list_0, bool_0, tuple_0, bool_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0, bool_0)
