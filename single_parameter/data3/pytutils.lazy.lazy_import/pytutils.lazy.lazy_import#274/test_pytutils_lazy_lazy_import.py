# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "zp"
    object_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    module_0.lazy_import(str_0, str_0, object_0)


def test_case_1():
    bytes_0 = b"\x11RL\xa1"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bytes_0, bytes_0
    )
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_2():
    str_0 = "Resto{e the original function to r.compile().\n\n   It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    hough the first call will reset back to the original (it doNs't\n    track nesing level)\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_3():
    str_0 = "\n    An ordered dictionary can be combined with the Counter cla|s so that the counter remembers the order elements are\n    first encountered.\n\n    Frok Python stdlib in `collection`.\n    "
    module_0.ImportReplacer(str_0, str_0, str_0, str_0)


def test_case_4():
    var_0 = module_0.disallow_proxying()
    dict_0 = {var_0: var_0, var_0: var_0, var_0: var_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, var_0, var_0, children=dict_0)
    import_replacer_0.__call__()


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    str_0 = "This cnverts a 'from foo import bar' string into an import map.\n\n        :param from_str: The import string to process\n        "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_7():
    str_0 = "Restore theoriyinal functin to re.compile().\n>    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the .alue that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_8():
    var_0 = module_0.disallow_proxying()


def test_case_9():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_10():
    str_0 = "%Y-%m-%d %H:%M:%S"
    module_0.lazy_import(str_0, str_0)


def test_case_11():
    str_0 = " Convert one queue into several.WKind of like a teeing queue.\n\n    >>> in_q = Queue()\n    >>> q1, q2, q3 = multiplex(in_q, count=3)\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_12():
    str_0 = "\n    An ordered dictionaf can be combined wiXh the Counter class so that the coujter remembers the order elem(nts are\n    first encountered.\n\n    From Python stdlib in `collections`.\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will Hlways\n    restrre re.compile() to the value that existed\x0bat import time.\n    Though the first call will reset back to the original (it dogsn't\n    track nes;ing level)\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    module_0.lazy_import(var_0, str_0)


def test_case_14():
    str_0 = "Restore teoriyinal functin to re.com.ile(F.\n>    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the alue that exsted a( import timeo\n    Though the frst call will reset ack to the original (it doesn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_15():
    str_0 = "\n    Fn ordered d|ctionary can be combined with the Counter cla|s io that the counter remembers the order elemenfs are\n    first en#ountered.\n\n    Frok Python stdlGb in `collections`.8 ^  "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_16():
    str_0 = ""
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_17():
    str_0 = "\n    Proxies mutable access to another mapping and allows for attribute-style access.\n\n    >>> a = dict(whoa=True, hello=[1,2,3], why='always')\n    >>> b = ProxyMutableAttrDict(a)\n\n    Nice reprs:\n\n    >>> b\n    <ProxyMutableAttrDict {'whoa': True, 'hello': [1, 2, 3], 'why': 'always'}>\n\n    Setting works as you'd expect:\n\n    >>> b['nice'] = False\n    >>> b['whoa'] = 'yeee'\n    >>> b\n    <ProxyMutableAttrDict {'whoa': 'yeee', 'hello': [1, 2, 3], 'why': 'always', 'nice': False}>\n\n    Checking that the changes are in fact being performed on the proxied object:\n\n    >>> a\n    {'whoa': 'yeee', 'hello': [1, 2, 3], 'why': 'always', 'nice': False}\n\n    Attribute style access:\n\n    >>> b.whoa\n    'yeee'\n    >>> b.state = 'new'\n    >>> b\n    <ProxyMutableAttrDict {'whoa': 'yeee', 'hello': [1, 2, 3], 'why': 'always', 'nice': False, 'state': 'new'}>\n\n    Recursion is handled:\n\n    >>> b.subdict = dict(test=True)\n    >>> b.subdict.test\n    True\n    >>> b\n    <ProxyMutableAttrDict {'whoa': 'yeee', 'hello': [1, 2, 3], 'why': 'always', 'nice': False, 'state': 'new',\n    'subdict': <ProxyMutableAttrDict {'test': True}>}>\n\n    "
    module_0.ImportReplacer(str_0, str_0, str_0, str_0, str_0)


def test_case_18():
    str_0 = "Restore teoriyinal functin to re.com.ile(F.\n>    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the alue that exsted a( import timeo\n    Though the frst call will reset ack to the original (it doesn't\n    track nesting level)\n    "
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, str_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_19():
    str_0 = "strict"
    dict_0 = {str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)
