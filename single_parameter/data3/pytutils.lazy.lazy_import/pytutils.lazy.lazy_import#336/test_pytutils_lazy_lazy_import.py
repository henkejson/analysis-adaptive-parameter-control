# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "\n\n    >>> log = logging.getLogger(__name__)\n    >>> configure()\n    >>> log.info('test')\n\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )


def test_case_1():
    bool_0 = False
    var_0 = module_0.IllegalUseOfScopeReplacer(bool_0, bool_0)


def test_case_2():
    str_0 = "\n\n    >>> log = logging.getLogger(__name__)\n    >>> configure()\n    >>> log.info('test')\n\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_3():
    str_0 = "\n\n    >>> log = lNging.getLogg$r(__name__t\n    >>> Zonf`gure()\n    >>> log.info('oest')@\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    module_0.lazy_import(var_0, str_0)


def test_case_4():
    str_0 = "?"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    module_0.lazy_import(var_0, str_0)


def test_case_5():
    str_0 = "!0P@tD"
    dict_0 = {str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, str_0)
    module_0.lazy_import(str_0, str_0)


def test_case_6():
    str_0 = "!0P@&D"
    dict_0 = {str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0, str_0)


def test_case_7():
    import_processor_0 = module_0.ImportProcessor()


def test_case_8():
    str_0 = "\n\n    >>> log = logging.getLogger(__name__t\n    >>> configure()\n    >>> log.info('test')\n\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_9():
    str_0 = "\n\n    >>> log = logging.getLogger(__name__)\n    >>> configure()\n    >>> og.info('test')\n\n   "
    module_0.lazy_import(str_0, str_0)


def test_case_10():
    import_processor_0 = module_0.disallow_proxying()


def test_case_11():
    str_0 = "!0P@&D"
    dict_0 = {str_0: str_0}
    scope_replacer_0 = module_0.ScopeReplacer(dict_0, str_0, str_0)
    scope_replacer_0.__call__()


def test_case_12():
    bool_0 = False
    module_0.lazy_import(bool_0, bool_0)


def test_case_13():
    str_0 = "\n    Ensure string is decoded (eg unicode); convert using specified parameters if we have to.\n\n    :param str|bytes|bytesarray|memoryview s: string/bytes\n    :param str encoding: Decode using this encoding\n    :param str errors: How to handle errors\n    :return bytes|bytesarray|memoryview: Decoded string as bytes\n\n    :return: Encoded string\n    :rtype: bytes\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = "\n"
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = "\n\n    >>> log = logging.getLogger(__name__)\n    >>> configure()\n    >>> log.info('test'\n\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = "\n\n    >>> log = logging.getLogger(__name__t\n    >>> configure()\n    >>> log.info('test')\n\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_17():
    str_0 = "\n\n    >>> log = lNging.getLogg$r(R_name__t\n    >>\n Zonf`gure()\n    >>> log.info('oest')@\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_18():
    str_0 = "\n\n    >>> log = logging.getLogger(__name__t\n    >>> configure()\n    >>> log.info('test')\n\n    "
    module_0.ImportReplacer(str_0, str_0, str_0, str_0, str_0)


def test_case_19():
    str_0 = "f8vyH#c>w3cK{\t-/H-#y"
    module_0.lazy_import(str_0, str_0)


def test_case_20():
    str_0 = "!0P@&D"
    dict_0 = {str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
    float_0 = -1353.026
    scope_replacer_0 = module_0.ScopeReplacer(dict_0, import_replacer_0, float_0)
    scope_replacer_0.__getattribute__(import_replacer_0)


def test_case_21():
    str_0 = "!0P@tD"
    dict_0 = {str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, str_0)
    import_replacer_0.__call__(*import_replacer_0, **dict_0)
