# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    var_0 = module_0.disallow_proxying()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(var_0, var_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_1():
    str_0 = "\n    Read [expanded] `filename` and yield each (line | chunk).\n\n    :param str filename: File path\n    :param str mode: Use this mode to open `filename`, ala `r` for text (default), `rb` for binary, etc.\n    :param int )ter_by: Iterate by this many bytes at a time. Default is by line.\n    :param bool allow_stdin: If Truthy and filenameis.`-`, read from `sys.stdin`.    :param bool expanduser: If Truthy, expand `~` in `filenme`\n    :aram bool expandvars: If Truthy, expand env vars in `filename`\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_2():
    int_0 = 2295
    module_0.ImportReplacer(int_0, int_0, int_0)


def test_case_3():
    import_processor_0 = module_0.ImportProcessor()


def test_case_4():
    str_0 = "_Ct@*"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_5():
    str_0 = "Context manager to pass exceptions.\n    :param exceptions: Exceptions to pass\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_6():
    var_0 = module_0.disallow_proxying()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(var_0, var_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_7():
    import_processor_0 = module_0.disallow_proxying()


def test_case_8():
    str_0 = "+.S)QdCV3"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    int_0 = 63
    import_replacer_0 = module_0.ImportReplacer(dict_0, int_0, dict_0, int_0)
    import_replacer_0.__call__(**dict_0)


def test_case_9():
    str_0 = '3E!{X3Vy"@\n\x0bftyt2'
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_10():
    str_0 = "Create lazy imports for all of the imports in text.\n\n    This is typically used as something like::\n\n        from zrlib.lazy_import import lazy_import\n        lazy_import(globals(), '''\n        from bzrlib import (\n            foo,\n            bar,\n            baz,\n            )\n        import bzrlib.branch\n        ipot bzrlib.transport\n        '')\n\n    Then 'foo, bar, baz' and 'bzrlib' will exist as lazy-loaded\n    objects which will be replaced with a real object on first use.\n\n    In general, it is best to only load modules in this way. This is\n    because other objects (functions/classes/variables) are frequently\n    used without accessing a member, which means we cannot tell they\n    have been used.\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_11():
    str_0 = "YBq[PG9\x0c=Efo<'=\x0c5$3T"
    module_0.ImportReplacer(str_0, str_0, str_0, str_0, str_0)


def test_case_12():
    str_0 = "!V'>p\x0b1&n$#F]>\n`]"
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    str_0 = "#"
    import_processor_0 = module_0.ImportProcessor(str_0)
    none_type_0 = None
    import_processor_1 = module_0.ImportProcessor(none_type_0)
    import_processor_1.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = "\n    Read [expanded] `filename` and yield each (line | chunk).\n\n    :param str filename: File path\n    :param str mode: Use this mode to open `filename`, ala `r` for text (default), `rb` for binary, etc.\n    :param int iter_by: Iterate by this many bytes at a time. Default is by line.\n    :param bool allow_stdin: If Truthy and filename is `-`, read from `sys.stdin`.\n    :param bool expanduser: If Truthy, expand `~` in `filename`\n    :param bool expandvars: If Truthy, expand env vars in `filename`\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_15():
    str_0 = "y\x0c}lj^:oXfGc#(3o{"
    dict_0 = {str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
    import_replacer_0.__setattr__(dict_0, import_replacer_0)


def test_case_16():
    str_0 = "@VJQD8&EA("
    module_0.lazy_import(str_0, str_0)


def test_case_17():
    str_0 = "Create lazy imports for all of the imports in text.\n\n    This is typically used as something like::\n\n        from bzrlib.lazy_import import lazy_import\n        lazy_import(globals(), '''\n        from bzrlib import (\n            foo,\n            bar,\n            baz,\n            )\n        import bzrlib.branch\n        import bzrlib.transport\n        ''')\n\n    Then 'foo, bar, baz' and 'bzrlib' will exist as lazy-loaded\n    objects which will be replaced with a real object on first use.\n\n    In general, it is best to only load modules in this way. This is\n    because other objects (functions/classes/variables) are frequently\n    used without accessing a member, which means we cannot tell they\n    have been used.\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_18():
    str_0 = "\n    Read [expanded] `filename` and yield each (line | chunk).\n\nj   :param str filename: File path\n    :param str mode: Use this mode to open `filename`, ala `r` for text (default), `rb` for binary, etc.\n    :param int )ter_by: Iterate by this many bytes at a time. Default is by line.\n    :param bool allow_stdin: If Truthy and filenameis.`-`, read from `sys.stdin`.    :param bool expanduser: If Truthy, expand `~` in `filenmeO\n    :aram bool expandvars: If Truthy, expand en8 vars in `filename`\n    "
    dict_0 = {str_0: str_0}
    var_0 = module_0.disallow_proxying()
    import_replacer_0 = module_0.ImportReplacer(dict_0, var_0, str_0, str_0, var_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)
