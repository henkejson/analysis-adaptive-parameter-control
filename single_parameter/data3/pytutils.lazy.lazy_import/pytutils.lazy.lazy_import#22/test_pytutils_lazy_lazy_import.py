# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0
import builtins as module_1


def test_case_0():
    str_0 = "Oo$ua"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__str__()


def test_case_1():
    str_0 = "psBX=\x0c+.u/X[fafc(:99"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)


def test_case_2():
    str_0 = "bVuYT"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_3():
    str_0 = "IVuYa"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    module_0.lazy_import(str_0, str_0, var_0)


def test_case_4():
    exception_0 = module_1.Exception()
    module_0.ImportReplacer(exception_0, exception_0, exception_0, children=exception_0)


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    str_0 = "bVuYT"
    module_0.lazy_import(str_0, str_0)


def test_case_7():
    bool_0 = True
    module_0.ScopeReplacer(bool_0, bool_0, bool_0)


def test_case_8():
    var_0 = module_0.disallow_proxying()


def test_case_9():
    complex_0 = -2509.85 + 3017.090619j
    module_0.lazy_import(complex_0, complex_0)


def test_case_10():
    str_0 = "bK#"
    module_0.lazy_import(str_0, str_0)


def test_case_11():
    str_0 = "IVuYa"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_12():
    str_0 = "(h]4GOt\n7\x0b=<oQ\x0cXgf[G"
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    str_0 = "\n    Decorator to dedupe it's output iterable automatically.\n\n    :param f: Wrapped meth\n    :param instance: wrapt provided property for decorating hydrated class instances (unused)\n    :param args: Passthrough args\n    :param kwargs: Passthrough kwargs\n    :return decorator: Decorator method that ingests iterables and dedupes them iteratively.\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    var_0 = module_0.disallow_proxying()
    dict_0 = {var_0: var_0, var_0: var_0, var_0: var_0, var_0: var_0}
    str_0 = " Convert one queue into several. Kind of like a teeing queue.\n\n    >>> in_q = Queue()\n    >>> q1, q2, q3 = multiplex(in_q, count=3)\n    "
    import_replacer_0 = module_0.ImportReplacer(dict_0, var_0, str_0, dict_0)
    module_0.lazy_import(import_replacer_0, str_0, var_0)


def test_case_15():
    str_0 = "\n^A"
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = ""
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    var_0 = module_0.disallow_proxying()
    complex_0 = -2509.85 + 3017.090619j
    module_0.lazy_import(complex_0, str_0)


def test_case_17():
    exception_0 = module_1.Exception()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        exception_0, exception_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_18():
    bytes_0 = b"Jd\x9a}\xceV\x16}\xe4"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.ImportReplacer(set_0, bytes_0, set_0, set_0, set_0)


def test_case_19():
    var_0 = module_0.disallow_proxying()
    dict_0 = {var_0: var_0, var_0: var_0, var_0: var_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, var_0, var_0)
    module_0.lazy_import(var_0, import_replacer_0, var_0)


def test_case_20():
    dict_0 = {}
    str_0 = "\\L@<'_~V'Y$$CJC"
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, children=dict_0)
    import_replacer_0.__setattr__(dict_0, str_0)


def test_case_21():
    str_0 = "\n    Parses env file content.\n\n    From honcho.\n\n    >>> lines = ['TEST=${HOME}/yeee', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../yeee'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_22():
    var_0 = module_0.disallow_proxying()
    dict_0 = {var_0: var_0, var_0: var_0, var_0: var_0, var_0: var_0}
    str_0 = " Convert one queue into several. Kind of like a teeing queue.\n\n    >>> in_q = Queue()\n    >>> q1, q2, q3 = multiplex(in_q, count=3)\n    "
    str_1 = ""
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_1, str_0)
    module_0.lazy_import(dict_0, import_replacer_0)
