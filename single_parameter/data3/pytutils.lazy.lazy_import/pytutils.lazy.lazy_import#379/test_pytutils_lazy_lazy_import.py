# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    float_0 = -575.7
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        float_0, float_0, float_0
    )
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_1():
    str_0 = ""
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_2():
    float_0 = -575.7
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        float_0, float_0, float_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(float_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_3():
    float_0 = -575.7
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        float_0, float_0, float_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_4():
    complex_0 = -2310.8 - 1159.8j
    module_0.ImportReplacer(complex_0, complex_0, complex_0)


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    str_0 = "jVFke\x0c])~X\t|H\n_UR"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_7():
    str_0 = "l<2w'&o\x0bl\nhzV-\rO1\r"
    module_0.lazy_import(str_0, str_0)


def test_case_8():
    var_0 = module_0.disallow_proxying()


def test_case_9():
    float_0 = -575.7
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        float_0, float_0, float_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_10():
    str_0 = "C:eate a proxy object which (ill compile the regex on demand.\n\n    :return: a(LazyRegex pgoxy objec@.\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_11():
    str_0 = "M\\[c(zXO"
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    str_0 = "jVFke\x0c])~X\t|H\n_UR"
    module_0.ImportReplacer(str_0, str_0, str_0, str_0)


def test_case_13():
    str_0 = "$\t!F7#"
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = ""
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    none_type_0 = None
    dict_0 = {none_type_0: none_type_0}
    import_replacer_0 = module_0.ImportReplacer(
        dict_0, none_type_0, none_type_0, children=dict_0
    )
    import_replacer_0.__call__()


def test_case_16():
    str_0 = ")H/0q%-xT]7N(*}`rfem"
    module_0.lazy_import(str_0, str_0)


def test_case_17():
    str_0 = "Create a proxy object which (ill compile th regex on demand.\n\n    :rpturn: a(LazyRegex pgoxy object.\n    "
    module_0.ImportReplacer(str_0, str_0, str_0, str_0, str_0)


def test_case_18():
    str_0 = "0xH1rno(4.A)c R]"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
    module_0.lazy_import(str_0, import_replacer_0)


def test_case_19():
    str_0 = ".3ZYzlfy0pEv'0"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, dict_0)
    import_replacer_0.__setattr__(str_0, str_0)


def test_case_20():
    str_0 = "\n    Loads (and returns) an env file specified by `filename` into the mapping `environ`.\n\n    >>> lines = ['TEST=${HOME}/yeee-$PATH', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../.../yeee-...:...'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_21():
    str_0 = "k'BU/]4vhH0"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, dict_0)
    scope_replacer_0 = module_0.ScopeReplacer(dict_0, import_replacer_0, str_0)
    module_0.ImportProcessor(scope_replacer_0)
