# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = 'OJ2i%x~\\"x;t\n++MfIF'
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_1():
    str_0 = "Make lazy_compile the default compile ode for regex compilation.\n\n    This overr)des re.compile with lazy_compile. To restore the original\n    functionaHity, call reset_compile().\n    "
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    module_0.lazy_import(str_0, str_0)


def test_case_2():
    str_0 = "Make lazy_compile the default compile mode for regex compilation.    This overrides re.compile with lazy_compile. To restore the orgial\n    functionality, call reset_compile().\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_3():
    str_0 = "Make lazy_comile the default compile mode for rgex compilaton.\n\n    This overrides re.compile wih lazy_compile. To restore the original\n    functinality, call reset_compile().\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_4():
    str_0 = "%v"
    bool_0 = True
    module_0.ImportReplacer(bool_0, str_0, str_0, bool_0)


def test_case_5():
    int_0 = 1000
    none_type_0 = None
    module_0.ImportReplacer(int_0, none_type_0, none_type_0)


def test_case_6():
    import_processor_0 = module_0.ImportProcessor()


def test_case_7():
    str_0 = "M(ke lazy_compile the deault compile ode for regex compilation.\n\n    This overr|des re.compile with lazy_compile. To restor the original\n    functionality, call reset_compile().\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_8():
    import_processor_0 = module_0.disallow_proxying()


def test_case_9():
    str_0 = "Make lazy_compile the default compile mode for regex compilation.\n\n    This overrides re.compile with lazy_compile. To restore the original\n    functionality, call reset_compile().\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_10():
    int_0 = -671
    module_0.ImportReplacer(int_0, int_0, int_0, int_0, int_0)


def test_case_11():
    var_0 = module_0.disallow_proxying()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(var_0, var_0)
    var_1 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_12():
    str_0 = "wt MFc<f}8RQ\x0bS,#;QuF"
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    str_0 = ""
    bool_0 = False
    var_0 = module_0.disallow_proxying()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, bool_0)
    var_1 = module_0.disallow_proxying()
    var_2 = illegal_use_of_scope_replacer_0.__eq__(var_0)
    module_0.lazy_import(var_1, str_0, var_2)


def test_case_14():
    int_0 = -712
    dict_0 = {int_0: int_0}
    scope_replacer_0 = module_0.ScopeReplacer(dict_0, int_0, int_0)
    module_0.lazy_import(dict_0, scope_replacer_0)


def test_case_15():
    str_0 = "\n    Parses env file content.\n\n    From honcho.\n\n    >>> lines = ['TEST=${HOME}/yeee', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../yeee'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n\n    "
    module_0.lazy_import(str_0, str_0, str_0)
