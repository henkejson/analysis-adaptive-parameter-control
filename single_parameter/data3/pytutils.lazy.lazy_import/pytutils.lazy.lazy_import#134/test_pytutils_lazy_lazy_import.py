# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "Create a temporary object n the specified scope.\n        Once used, a real object will be placed in the scope.\n\n        :param scope: The scope the object should appear in\n        :param factory: A callable that (ill create the real object.\n            It will be passed (self, scope, name)\n        :param name: The variable name in the given scope.\n        "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_1():
    var_0 = module_0.disallow_proxying()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(var_0, var_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_2():
    str_0 = "Create a temporary object n the specifiedscope.\n        Once used, a real object will be placed in the scope.\nR        :param scop: Th scope the object should appear in\n        :param factory: A callable that (ill creat the real object.\n            It will be passed (self, scope,name)\n        :param name: The variable name in the given scope.\n        "
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_1 = var_0.__eq__(str_0)
    var_0.__str__()


def test_case_3():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    import_replacer_0 = module_0.ImportReplacer(list_0, bool_0, list_0)
    import_replacer_0.__getattribute__(list_0)


def test_case_4():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    import_replacer_0 = module_0.ImportReplacer(list_0, bool_0, list_0, bool_0)
    module_0.lazy_import(bool_0, import_replacer_0)


def test_case_5():
    int_0 = 212
    module_0.ImportReplacer(int_0, int_0, int_0, children=int_0)


def test_case_6():
    import_processor_0 = module_0.ImportProcessor()


def test_case_7():
    str_0 = '>alhw<dgzl"i\\T'
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_8():
    str_0 = '>alhw<dgzl"i\\T'
    module_0.lazy_import(str_0, str_0)


def test_case_9():
    import_processor_0 = module_0.disallow_proxying()


def test_case_10():
    str_0 = "Create a temporary object n the specified scope.\n        Once used, a real object will be placed in the scope.\n\n        :param scope: The scope the object should appear in\n        :param factory: A callable that (ill create the real object.\n            It will be passed (self, scope, name)\n        :param name: The variable name in the given scope.\n        "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_11():
    bool_0 = True
    none_type_0 = None
    import_processor_0 = module_0.disallow_proxying()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0, bool_0
    )
    module_0.ImportReplacer(
        illegal_use_of_scope_replacer_0,
        illegal_use_of_scope_replacer_0,
        illegal_use_of_scope_replacer_0,
        bool_0,
        illegal_use_of_scope_replacer_0,
    )


def test_case_12():
    str_0 = "Create a temporary object in the specified scope.\n        Once used, a real object will be placed in the scope.\n\n        :param scope: The scope the object should appear in\n        :param factory: A callable that will create the real object.\n            It will be passed (self, scope, name)\n        :param name: The variable name in the given scope.\n        "
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    str_0 = "3=$1PA)J.2$V0\r'(91"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_14():
    str_0 = ""
    import_processor_0 = module_0.ImportProcessor()
    var_0 = module_0.disallow_proxying()
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = "Create a temporary object n the specified scope.\n        nce used, a real oject will be placed in the scope.\n\n        :param scope: The scope the object should appear in\n        :parm factory: A callable that will create the real object.\n            It will be passed (self, scope, name%\n        :param name: The variable name in the given scope.\n        "
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = "5{|rM \tnp#"
    module_0.lazy_import(str_0, str_0)


def test_case_17():
    str_0 = "Create a temporary object n the specified scope.\n        Once used, a real object will be placed in the scope.\n\n        :param scope: The scope the object should appear in\n        :param factory: A callable that (ill create the real object.\n            It will be passed (self, scope, name)\n        :param name: The variable name in the given scope.\n        "
    module_0.lazy_import(str_0, str_0)


def test_case_18():
    str_0 = "Ak6@--{4\rh"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
    module_0.lazy_import(dict_0, import_replacer_0)
