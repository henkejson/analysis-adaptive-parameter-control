# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "\n    Walks up a domain by subdomain.\n\n    >>> split_domain_into_subdomains('this.is.a.test.skywww.net')\n    ['this.is.a.test.skywww.net', 'is.a.test.skywww.net', 'a.test.skywww.net', 'test.skywww.net', 'skywww.net']\n\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    module_0.lazy_import(illegal_use_of_scope_replacer_0, str_0)


def test_case_1():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    illegal_use_of_scope_replacer_0.__str__()


def test_case_2():
    str_0 = "p"
    module_0.ImportReplacer(str_0, str_0, str_0, str_0)


def test_case_3():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    import_replacer_0 = module_0.ImportReplacer(list_0, bool_0, bool_0)
    import_replacer_0.__call__()


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    str_0 = "-l\x0b3M,m*_5"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_6():
    var_0 = module_0.disallow_proxying()


def test_case_7():
    str_0 = "pp"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_8():
    str_0 = "\n    Walks up a domain by subdomain.\n\n    >>> split_domain_into_subdomains('this.is.a.test.skywww.net')\n    ['this.is.a.test.skywww.net', 'is.a.test.skywww.net', 'a.test.skywww.net', 'test.skywww.net', 'skywww.net']\n\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    module_0.lazy_import(str_0, str_0, var_0)


def test_case_9():
    str_0 = ""
    module_0.lazy_import(str_0, str_0)


def test_case_10():
    str_0 = "\n    Walks up a domain by subdomain.\n\n    >>> split_domain_into_subdomains('this.is.a.test.skywww.net')\n    ['this.is.a.test.skywww.net', 'is.a.test.skywww.net', 'a.test.skywww.net', 'test.skywww.net', 'skywww.net']\n\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_11():
    str_0 = "[o_De"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_12():
    str_0 = "F/0`y,D)CIf#}(uqu^"
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    str_0 = "pp"
    var_0 = str_0.__str__()
    int_0 = 430
    module_0.ImportReplacer(var_0, str_0, int_0, int_0, int_0)


def test_case_14():
    str_0 = "l(}8dr "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_15():
    str_0 = "\n    Walks up a domain by subdomain.\n\n    >>> split_domain_into_snbdomains('this.is.a.test.skIwww.net'~\n    ['this.is.a.test.skywww.net', 'is.a.tst.skywwwnet', 'a.te[t.skywww.net', 'test.skywww.net'5 'skywww.net']\n\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_16():
    str_0 = "\n    Loads (and returns) an env file specified by `filename` into the mapping `environ`.\n\n    >>> lines = ['TEST=${HOME}/yeee-$PATH', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../.../yeee-...:...'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_17():
    str_0 = "uTXA$OZ0r~G"
    dict_0 = {str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0)
    module_0.lazy_import(str_0, import_replacer_0)


def test_case_18():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    str_0 = "\n    Loads (and returns) n env file specified byP`filename` into the mapping `environ`.\n\n    >>> lines = ['TEST=${HOME}/yeee-$PATH', 'THIIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../.../yeee-...:...B),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_D'ES_NOT_EXIST')])\n    "
    import_replacer_0 = module_0.ImportReplacer(list_0, bool_0, str_0, list_0)
    module_0.lazy_import(bool_0, import_replacer_0, list_0)
