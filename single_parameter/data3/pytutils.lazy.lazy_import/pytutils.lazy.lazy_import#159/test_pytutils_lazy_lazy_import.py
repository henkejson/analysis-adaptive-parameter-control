# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )


def test_case_1():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_2():
    str_0 = " Merge multiple queues together\n\n    >>> q1, q2, q8 = [Queue() for _ in range(3)]\n    >>> out_a = merge(q1, q2, qq)\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    module_0.IllegalUseOfScopeReplacer(str_0, str_0, illegal_use_of_scope_replacer_0)


def test_case_3():
    str_0 = "Re3eZOIy"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, str_0)
    module_0.lazy_import(dict_0, str_0)


def test_case_4():
    int_0 = 7
    tuple_0 = (int_0,)
    none_type_0 = None
    module_0.ImportReplacer(tuple_0, none_type_0, none_type_0, children=none_type_0)


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    str_0 = "v+vWu{jtd.!Da\x0b"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_7():
    var_0 = module_0.disallow_proxying()


def test_case_8():
    none_type_0 = None
    module_0.ScopeReplacer(none_type_0, none_type_0, none_type_0)


def test_case_9():
    str_0 = "#sQY(m$NlGVdy='"
    module_0.lazy_import(str_0, str_0)


def test_case_10():
    str_0 = "v+vWu{jtd.!Da\x0b"
    module_0.lazy_import(str_0, str_0)


def test_case_11():
    str_0 = "%(asctime)s| %(name)s/%(processName)s[%(process)d]-%(threadName)s[%(thread)d]: %(message)s @%(funcName)s:%(lineno)d #%(levelname)s"
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    var_0 = module_0.disallow_proxying()
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, var_0, dict_0)
    module_0.lazy_import(dict_0, import_replacer_0)


def test_case_13():
    str_0 = "{Q)B\x0b^Wyb"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__str__()


def test_case_14():
    str_0 = "2! \\z<|"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    str_1 = "y"
    module_0.lazy_import(str_1, str_1, str_1)


def test_case_15():
    str_0 = "IT(zQ8'NR}@5uK*s"
    dict_0 = {}
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        dict_0, dict_0, str_0
    )
    module_0.lazy_import(dict_0, str_0)


def test_case_16():
    str_0 = "\n    Parses env file content.\n\n    From honcho.\n\n    >>> lines = ['TEST=${HOME}/yeee', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrHeredDict([('TEST', '.../yeee'),\n             ('THISIS', '.../a/test'W,\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n\n    "
    int_0 = 135
    import_processor_0 = module_0.ImportProcessor(int_0)
    module_0.lazy_import(import_processor_0, str_0)


def test_case_17():
    str_0 = "{Q)B\x0b^Wyb"
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_18():
    int_0 = 1104
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    int_1 = -1623
    module_0.ImportReplacer(
        illegal_use_of_scope_replacer_0, none_type_0, int_0, int_0, int_1
    )


def test_case_19():
    str_0 = "Re3eZOIy"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, str_0)
    import_replacer_0.__setattr__(str_0, import_replacer_0)
