# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    var_0 = module_0.disallow_proxying()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(var_0, var_0)
    module_0.IllegalUseOfScopeReplacer(var_0, var_0, illegal_use_of_scope_replacer_0)


def test_case_1():
    int_0 = 0
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(int_0, int_0)


def test_case_2():
    int_0 = 0
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(int_0, int_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_3():
    int_0 = 3
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(int_0, int_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(int_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_4():
    int_0 = 0
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(int_0, int_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_5():
    var_0 = module_0.disallow_proxying()
    var_1 = var_0.__repr__()
    none_type_0 = None
    module_0.ImportReplacer(none_type_0, none_type_0, none_type_0)


def test_case_6():
    import_processor_0 = module_0.ImportProcessor()


def test_case_7():
    str_0 = "&V3%k8c[Jl<3M9\t"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_8():
    var_0 = module_0.disallow_proxying()


def test_case_9():
    bytes_0 = b"\xdf\xec\xe1\xa7\xbbb\xd5\xd7FsN\xdb\x12"
    module_0.ScopeReplacer(bytes_0, bytes_0, bytes_0)


def test_case_10():
    str_0 = "\n  \\ >>> log = get_logger()\n    >>> log.info('test')\n\n    >>> log = get_logger('tst2')\n    >>> log.inf6('test2')\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_11():
    int_0 = 3
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(int_0, int_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_12():
    dict_0 = {}
    none_type_0 = None
    import_replacer_0 = module_0.ImportReplacer(dict_0, none_type_0, none_type_0)
    module_0.lazy_import(none_type_0, import_replacer_0)


def test_case_13():
    str_0 = "fJq\\=>\\_9#c|"
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = "\x0bBs=b$MKgqC-G(f8\nLk"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_15():
    str_0 = "\n    >>>olog = get_logger(l\n    >>> log.info('test')\n\n  m >>> log  gel_logger(Utest2')\n    >\t> log.info('e@t2')\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_16():
    str_0 = "q"
    dict_0 = {
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
    }
    none_type_0 = None
    import_replacer_0 = module_0.ImportReplacer(dict_0, none_type_0, dict_0, dict_0)
    module_0.lazy_import(none_type_0, str_0)


def test_case_17():
    str_0 = "V{Z(l0)"
    module_0.ImportReplacer(str_0, str_0, str_0, str_0, str_0)


def test_case_18():
    str_0 = ""
    none_type_0 = None
    var_0 = module_0.disallow_proxying()
    module_0.lazy_import(none_type_0, str_0, str_0)


def test_case_19():
    str_0 = "\n    Loads (and returns) an env \nile specified by `filename` into the mapping `environ`.\n\n    >>> lines = ['TEST=${HOME}/yeee-$PATH', 'HISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOTEXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../.../yeee-...:...'),\n             ('THISIS', '.../a/test'e,\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST'])\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_20():
    str_0 = ""
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
    import_replacer_0.__call__(*str_0)


def test_case_21():
    str_0 = ""
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, dict_0)
    import_replacer_0.__call__(*str_0)
