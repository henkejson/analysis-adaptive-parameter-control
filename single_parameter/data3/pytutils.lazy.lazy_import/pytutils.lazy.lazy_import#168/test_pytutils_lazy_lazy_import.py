# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "XbK7{V\tk6J]@\r"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    module_0.lazy_import(str_0, str_0)


def test_case_1():
    float_0 = -3406.0
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        float_0, float_0
    )


def test_case_2():
    float_0 = -3406.0
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        float_0, float_0
    )
    illegal_use_of_scope_replacer_0.__str__()


def test_case_3():
    float_0 = 1104.0221
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        float_0, float_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(float_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_4():
    str_0 = "XbKV\tk6J]@}"
    module_0.ImportReplacer(str_0, str_0, str_0)


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    var_0 = module_0.disallow_proxying()


def test_case_7():
    import_processor_0 = module_0.ImportProcessor()
    module_0.lazy_import(import_processor_0, import_processor_0, import_processor_0)


def test_case_8():
    str_0 = "XbKV\tk6J]@}"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_9():
    float_0 = -3406.0
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        float_0, float_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_10():
    float_0 = -3406.0
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        float_0, float_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)


def test_case_11():
    str_0 = "Make lazy_compile the default compile mode for regex compilation.\n\n    This overrides re.compile with lazy_compile. To restore the original\n    functionality, call reset_compile().\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_12():
    str_0 = "}\rM\x0c'&J=)(B"
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    complex_0 = 2436 + 2969.3j
    bool_0 = True
    int_0 = -821
    dict_0 = {bool_0: int_0}
    float_0 = 2511.1506
    none_type_0 = None
    import_replacer_0 = module_0.ImportReplacer(
        dict_0, float_0, bool_0, bool_0, none_type_0
    )
    import_replacer_0.__setattr__(complex_0, complex_0)


def test_case_14():
    str_0 = "Make lazy_compile the default compile mode for regex compilation.\n\n    This ovDrrides re.compile with lazy_compile. To etore the original\n    functionality, call reset_compiBe().\n    "
    module_0.ImportReplacer(str_0, str_0, str_0, str_0, str_0)


def test_case_15():
    str_0 = "Make lazy_compile the default compile mode for regex#compilation.\n\n    Tis overrides re.compile with lazy_compile. To restore the original\n    functionality, call reset_compile()\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_16():
    str_0 = "Make (azy_compile the default compile mode for regex compilation.\n\n    This overrides re.compile with lazy_compile. To restore the original\n    func\x0bionality, call reset_compile().\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_17():
    str_0 = "\n    Parses env file content.\n\n    From honcho.\n\n    >>> lines = ['TEST=${HOME}/yeee', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../yeee'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_18():
    str_0 = "\n    Parses env file content.\n\n    From honcho.\n\n    >>> lines = ['TEST=${HOME}/yeee', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write#environ=dict())\n    OrderedDict([('TEST', '.../yeee'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_19():
    str_0 = ""
    module_0.lazy_import(str_0, str_0)


def test_case_20():
    str_0 = "Make lazy_compile the default compile mode for regex compilation.\n\n    This overrides re.compile with lazy_compile. To restore the original\n    functionality, call reset_compile().\n    "
    dict_0 = {str_0: str_0}
    var_0 = module_0.ScopeReplacer(dict_0, dict_0, str_0)
    var_0.__repr__()
