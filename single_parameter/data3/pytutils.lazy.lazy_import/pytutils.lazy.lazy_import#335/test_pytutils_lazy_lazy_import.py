# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0
import builtins as module_1


def test_case_0():
    str_0 = " Convert one queue into several. Kind of like a teeing queue.\n\n  ` >>> in_q = Queue(R\n    >>> q1, q2, q38= multiplex(in_q, count=3)\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_1():
    str_0 = "Create lazy imports for all of the imports in text.\n\n    This is typically used as something like::\n\n       -from bzrlib.lazy_import import lazy_import\n        lazy_import(globals(), '''\n        from bzrlib import (\n            foo,\n            bar,\n            baz,\n            )\n        import bzrlib.branch\n        impot bzrlib.transport\n        ''')\n\n    Then 'foo, bar, baz' and 'bzrlib' will exist as lazy-loaded\n    objects which ^ily be replaced with a real objecton first use.\n\n    In general, it is best to only load modules in this way. This is\n    because other objects (functions/classes/variables) are frequently\n    used without accessing a member, which means we cannot tell they\n    have been used.\n    "
    dict_0 = {str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0, dict_0)


def test_case_2():
    str_0 = "Create lazy imports for all of the imorts in text.\n\n    This is typically used as something like::\n\n       -from bzrlib.lazy_mport import lazy_import\n        lazy_import(globals(), '''\n        from bzrlib import (\n            foo,\n            bar,\n            baz?\n            )\n        import bzrlib.branch\n        impot bzr%ib.transport\n        ''')\n\n    Then 'foo, bar, baz' and 'bzrlib' ll exist as lazy-loaded\n    objects which ^ily be replace\x0b with a real objecton first ue.\n\n    In general, it is best to only load modules in this way. This is\n    because other objects (functions/classes/variables) are frequently\n    used without accessing a member, which meas we cannot tell they\n    have been used.\n    "
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, dict_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_3():
    none_type_0 = None
    module_0.ImportReplacer(none_type_0, none_type_0, none_type_0, children=none_type_0)


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    str_0 = "%s(%r)"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_6():
    var_0 = module_0.disallow_proxying()


def test_case_7():
    str_0 = "9H-xYu#g]GTTCIY0"
    module_0.lazy_import(str_0, str_0)


def test_case_8():
    str_0 = "%sr)"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_9():
    str_0 = "Create lazy imports for all of the imports in text.\n\n    This is typically used as something like::\n\n       -from bzrlib.lazy_import import lazy_import\n        lazy_import(globals(), '''\n        from bzrlib import (\n            foo,\n            bar,\n            baz,\n            )\n        import bzrlib.branch\n        import bzrlib.transport\n        ''')\n\n    Then 'foo, bar, baz' and 'bzrlib' will exist as lazy-loaded\n    objects which ^ily be replaced with a real object on first use.\n\n    In general, it is best to only load modules in this way. This is\n    because other objects (functions/classes/variables) are frequently\n    used without accessing a member, which means we cannot tell they\n    have been used.\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_10():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_11():
    str_0 = "Create lazy imports for all of the imports in text.\n\n    This is typically used as something like::\n\n       -from bzrlib.lazy_import import lazy_import\n        lazy_iport(globals(), '''\n        from bzrlib import (\n            foo,\n            bar,\n            baz,\n            )\n        import bzrlib.branch\n        impot bzrlib.transport\n        ''')\n\n    Then 'foo, bar, baz' and 'bzrlib' will exist as lazy-loaded\n    objects which ^ily be replaced with a real objecton first use.\n\n    In general, it is best to only load modules in this way. This is\n    because other objects (functions/classes/variables) are frequently\n    used without accessing a member, which means we cannot tell they\n    have been used.\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_12():
    str_0 = "k1udT"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_13():
    var_0 = module_0.disallow_proxying()
    exception_0 = module_1.Exception()
    none_type_0 = None
    str_0 = "\n"
    module_0.lazy_import(none_type_0, str_0)


def test_case_14():
    str_0 = " Convert one queue into several. Kind of like a teeing queue.\n\n  ` >>> in_q = Queue(R\n    >>> q1, q2, q38= multiplex(in_q, count=3)\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    exception_0 = module_1.Exception()
    str_0 = "(AN"
    module_0.lazy_import(exception_0, str_0)


def test_case_16():
    exception_0 = module_1.Exception()
    none_type_0 = None
    str_0 = "9H-xYu#g]TCIY0"
    module_0.ImportReplacer(none_type_0, str_0, str_0, str_0, str_0)


def test_case_17():
    str_0 = "Create lazy imports for all of the imports in text.\n\n    This is typically used as something like::\n\n        from bzrlib.lazy_import import lazy_import\n        lazy_import(globals(), '''\n        from bzrlib import (\n            foo,\n            bar,\n            baz,\n            )\n        import bzrlib.branch\n        import bzrlib.transport\n        ''')\n\n    Then 'foo, bar, baz' and 'bzrlib' will exist as lazy-loaded\n    objects which will be replaced with a real object on first use.\n\n    In general, it is best to only load modules in this way. This is\n    because other objects (functions/classes/variables) are frequently\n    used without accessing a member, which means we cannot tell they\n    have been used.\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_18():
    none_type_0 = None
    dict_0 = {none_type_0: none_type_0}
    scope_replacer_0 = module_0.ScopeReplacer(dict_0, dict_0, none_type_0)
    scope_replacer_1 = module_0.ScopeReplacer(dict_0, scope_replacer_0, none_type_0)
    scope_replacer_1.__call__()
