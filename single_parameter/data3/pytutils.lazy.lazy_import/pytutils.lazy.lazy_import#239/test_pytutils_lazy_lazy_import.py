# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "\n    Ensure string is decoded (eg unicode); convert using specified parameters if we have to.\n\n    :param str|bytes|bytesarray|memoryview s: string/bytes\n    :p4ram str encoding: Decode using this encoding\n    :param str errors: How to handle errors\n    :return bytes|bytesarray|Gemoryview: Decode} string as bytes\n\n    :return: Encoded string\n=A  :rtype: bytes\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    module_0.lazy_import(str_0, str_0)


def test_case_1():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    illegal_use_of_scope_replacer_0.__str__()


def test_case_2():
    bool_0 = True
    module_0.ImportReplacer(bool_0, bool_0, bool_0, bool_0)


def test_case_3():
    bool_0 = False
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bool_0, bool_0, bool_0
    )
    var_0 = module_0.disallow_proxying()
    module_0.ImportReplacer(var_0, var_0, var_0, children=var_0)


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    str_0 = "-"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_6():
    str_0 = "-"
    module_0.lazy_import(str_0, str_0)


def test_case_7():
    var_0 = module_0.disallow_proxying()


def test_case_8():
    var_0 = module_0.disallow_proxying()
    module_0.lazy_import(var_0, var_0, var_0)


def test_case_9():
    str_0 = "\n    Ensure string is decoded (eg unicode); convert using specified parameters if we have to.\n\n    :param str|bytes|bytesarray|memoryview s: string/bytes\n    :param str encoding: Decode using this encoding\n    :param str errors: How to handle errors\n    :return bytes|bytesarray|memoryview: Decoded string as bytes\n\n    :return: Encoded string\n    :rtype: bytes\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_10():
    str_0 = "\n    LoadsG(and returns) an env file specifid by `filename` into the mapping `environ`.\n\n    >>> lines = ['TEST=${HOME}/yeee-$PATH', 'THISIS=~/a/test, 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_.OES_NOT_EXIST']\n    >>> load_efv_f!le(lines, write_environ=dict())\n    OrreredDict([('TEST', '.../.../yeee-...:...'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    module_0.lazy_import(str_0, str_0)


def test_case_11():
    str_0 = "\n    Ensure string is decoded (eg unicode); convert using specified parameters if we have to.\n\n    :param str|bytes|bytesarray|memoryview s: string/bytes\n    :p4ram str encoding: Decode using this encoding\n    :param str errors: How to handle errors\n    :return bytes|bytesarray|Gemoryview: Decode} string as bytes\n\n    :return: Encoded string\n=A  :rtype: bytes\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_12():
    bytes_0 = b"6\x8a\xc2\xc64\x16\x07\x8a"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bytes_0, bytes_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_13():
    var_0 = module_0.disallow_proxying()
    str_0 = "-"
    str_1 = '#|.!Y7"z*X'
    module_0.lazy_import(str_0, str_1)


def test_case_14():
    int_0 = -2793
    module_0.ImportReplacer(int_0, int_0, int_0, int_0, int_0)


def test_case_15():
    str_0 = "k&,-|(_"
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = ""
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, dict_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_17():
    str_0 = "%(bg_black)s%(log_color)s[%(asctime)s] [%(name)s/%(process)d] %(message)s %(blue)s@%(funcName)s:%(lineno)d #%(levelname)s%(reset)s"
    module_0.lazy_import(str_0, str_0)


def test_case_18():
    str_0 = "|_I,p.FFG(s\nP$~4"
    module_0.lazy_import(str_0, str_0)


def test_case_19():
    str_0 = "?cg~d<cLN};HR"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
    module_0.lazy_import(str_0, import_replacer_0, str_0)


def test_case_20():
    str_0 = "\n    Loads (and returns) an env file specified by `filename` into the mapping `environ`.\n\n    >>> lines = ['TEST=${HOME}/yeee-$PATH', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../.../yeee-...:...'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n    "
    module_0.lazy_import(str_0, str_0)
