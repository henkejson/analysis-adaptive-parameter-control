# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "lgging.StreamHand-er"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0, str_0)
    var_0.__unicode__()


def test_case_1():
    str_0 = "B;7f2%K@\\"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)


def test_case_2():
    str_0 = "B;7f2%K@\\"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_3():
    str_0 = "B;7f2%K@\\"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_4():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, bool_0, bool_0, bool_0)
    module_0.lazy_import(dict_0, import_replacer_0)


def test_case_5():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, bool_0, bool_0)
    module_0.lazy_import(dict_0, import_replacer_0)


def test_case_6():
    import_processor_0 = module_0.ImportProcessor()


def test_case_7():
    str_0 = "z;7\x0b2K@\\"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_8():
    str_0 = '|\r74%1adB(d"&$PFL> ]'
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_9():
    str_0 = "logging.StreamHandler"
    module_0.lazy_import(str_0, str_0)


def test_case_10():
    str_0 = "B;7f2%K@\\"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_11():
    var_0 = module_0.disallow_proxying()


def test_case_12():
    str_0 = "Create lazy imports for all of the imports in text.\n\n    This is typically used as something like::\n\n        from bzrlib.lazy_import import lazy_import\n        lazy_import(globals(), '''\n        from bzrlib import (\n            foo,\n            bar,\n            baz,\n            )\n        import bzrlib.branch\n        import bzrlib.transport\n        ''')\n\n    Then 'foo, bar, baz' and 'bzrlib' will exist as lazy-loaded\n    objects which will be replaced with a real object on first use.\n\n    In general, it is best to only load modules in this way. This is\n    because other objects (functions/classes/variables) are frequently\n    used without accessing a member, which means we cannot tell they\n    have been used.\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_13():
    str_0 = "lgging.StreamHand-er"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_14():
    bytes_0 = b"\xb4\xed\\r\xfe$.\x12\xc8\x8a"
    module_0.ImportReplacer(bytes_0, bytes_0, bytes_0, bytes_0, bytes_0)


def test_case_15():
    var_0 = module_0.disallow_proxying()
    str_0 = ""
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_16():
    str_0 = "\n    An ordered dictionary can be combined with the Counter class so that the counter remembers the order elements are\n    first encountered.\n\n    From Python stdlib in `collections`.\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_17():
    str_0 = "5b#a&G=WZU`"
    module_0.lazy_import(str_0, str_0)


def test_case_18():
    bool_0 = True
    var_0 = bool_0.__str__()
    dict_0 = {bool_0: var_0, var_0: bool_0, var_0: var_0, bool_0: var_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, bool_0, var_0)
    module_0.lazy_import(dict_0, import_replacer_0)


def test_case_19():
    bool_0 = False
    var_0 = bool_0.__str__()
    dict_0 = {bool_0: var_0, var_0: bool_0, var_0: var_0, bool_0: var_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, var_0, var_0, bool_0)
    module_0.lazy_import(var_0, import_replacer_0)
