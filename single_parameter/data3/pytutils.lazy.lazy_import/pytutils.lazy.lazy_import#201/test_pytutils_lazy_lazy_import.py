# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "\n    >>> log = get_logger()\n    >>> log.info('test')\n\n    >>> log = get_logger('test2')\n    >>> log.info('test2')\n    "
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0, str_0)
    var_0.__str__()


def test_case_1():
    str_0 = "\n    Pretty prints with coloring.\n\n    Works in iPython, but not bpython as it does not write directly to term\n    and decodes it instead.\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    import_processor_0 = illegal_use_of_scope_replacer_0.__eq__(
        illegal_use_of_scope_replacer_0
    )


def test_case_2():
    str_0 = "{cls_name}({name})"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_3():
    str_0 = "\n    >>> log = get_logger()\n    >>> log.info('test')\n\n    >>> log = get_logger('test2')\n    >>> log.info('test2')\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_4():
    var_0 = module_0.disallow_proxying()
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, var_0, var_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    var_0 = module_0.disallow_proxying()


def test_case_7():
    str_0 = "{cls7name}({name}2"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_8():
    str_0 = "u"
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, dict_0)
    module_0.lazy_import(import_replacer_0, str_0)


def test_case_9():
    str_0 = "{cls_name}({name})"
    module_0.lazy_import(str_0, str_0)


def test_case_10():
    str_0 = "m'#I,"
    module_0.lazy_import(str_0, str_0)


def test_case_11():
    str_0 = "kx\r2uB5M@K|!x3}^`Bw6"
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    str_0 = "\n    >>> log = get_logger()\n    >>> log.info('test')\n\n    >>> log = get_logger('test2')\n    >>> log.info('test2')\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    str_0 = "\t#XL"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_14():
    bool_0 = False
    str_0 = "{cls_name}({nam~e})"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(bool_0)
    module_0.ImportReplacer(bool_0, bool_0, str_0, var_0, var_0)


def test_case_15():
    str_0 = ":({I0?L\nC"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_16():
    str_0 = "\n    >>> log = get_logger()\n    >>> log.info('test'\n\n    >>> log = get_logger('test2')\n    >>> log.ino('test2')\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_17():
    str_0 = "u"
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, children=dict_0)
    import_replacer_0.__getattribute__(str_0)


def test_case_18():
    str_0 = "w<Xu"
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, dict_0)
    import_replacer_0.__getattribute__(str_0)
