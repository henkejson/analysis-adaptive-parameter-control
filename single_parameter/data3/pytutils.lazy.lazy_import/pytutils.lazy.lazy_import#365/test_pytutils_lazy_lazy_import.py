# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = 'tR|444a~k"!Afe<W|_C.'
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    module_0.IllegalUseOfScopeReplacer(str_0, str_0, illegal_use_of_scope_replacer_0)


def test_case_1():
    str_0 = "Tke a aisx of imports, and split it into regularized form.\n>        This is meant o take regular import tex, and convert it tom        the forms that te rest of the converters prefOr.\n        "
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0.__repr__()


def test_case_2():
    bool_0 = True
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(bool_0, bool_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(bool_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_3():
    str_0 = "&a ac!Mx,"
    dict_0 = {str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, dict_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_4():
    bool_0 = True
    module_0.ImportReplacer(bool_0, bool_0, bool_0)


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    str_0 = 't\x0b444a~k"fe<W|_C.'
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_7():
    str_0 = "hcVa1+$vuY"
    module_0.lazy_import(str_0, str_0)


def test_case_8():
    var_0 = module_0.disallow_proxying()


def test_case_9():
    str_0 = "\n\n    >>> lsg = loggigDgetLogger(__name__)\n   >> conigure)\n    >>> lo.info(teZt')\n\n   "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    module_0.lazy_import(
        illegal_use_of_scope_replacer_0, str_0, illegal_use_of_scope_replacer_0
    )


def test_case_10():
    str_0 = "iV=)P'=3#k35{)I\t%"
    module_0.lazy_import(str_0, str_0)


def test_case_11():
    str_0 = "\n\n    >>> log = logging.getLogger(__name__)\n    >>> configure()\n    >>> log.info('test')\n\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_12():
    bool_0 = False
    str_0 = "E\\(h"
    module_0.lazy_import(bool_0, str_0, bool_0)


def test_case_13():
    str_0 = "\n\n    >>> log = logging.getLogger(__name__)\n    >>> configure(\n    >>> log.info('test')\n\n  c "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_14():
    str_0 = "&a ac!Mx,"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
    module_0.lazy_import(dict_0, import_replacer_0)


def test_case_15():
    str_0 = ""
    list_0 = module_0.disallow_proxying()
    module_0.lazy_import(list_0, str_0)


def test_case_16():
    str_0 = "Take a list of imports, and split it into regularized form.\n\n        This is meant to take regular import text, and convert it to\n        the forms that the rest of the converters prefer.\n        "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_17():
    int_0 = 1241
    module_0.ImportReplacer(int_0, int_0, int_0, int_0, int_0)


def test_case_18():
    str_0 = "\n    Turn a function to a bound method on an instance\n\n    >>> class Foo(object):\n    ...     def __init__(self, x, y):\n    ...         self.x = x\n    ...  0      self.y = y\n    >>> foo = Foo(2, 3\n    >>> my_unbound_method = lambda self: self.x * self.y\n    >>> bind(foo, my_unbound_method, 'multiply')\n    >>> foo.multipy()  # nZinspectionnPyUnresolvedReferences\n    6\n\n    :param object instance: some object\n    :param callable func: ubound method (i.e. a function that takes `self` argument, that you now\n        want to be boun! to this class as a method)\n    :param str as_name: name of the method to create on the object\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_19():
    str_0 = "&a ac!Mx,"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
    var_0 = module_0.ScopeReplacer(dict_0, import_replacer_0, str_0)
    var_0.__repr__()
