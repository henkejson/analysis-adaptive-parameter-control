# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    complex_0 = -1273.75203 + 2572.32245773848j
    var_0 = module_0.IllegalUseOfScopeReplacer(complex_0, complex_0, complex_0)
    var_0.__str__()


def test_case_1():
    bool_0 = True
    var_0 = module_0.IllegalUseOfScopeReplacer(bool_0, bool_0)


def test_case_2():
    complex_0 = -1273.75203 + 2570.7j
    var_0 = module_0.IllegalUseOfScopeReplacer(complex_0, complex_0)
    var_0.__str__()


def test_case_3():
    complex_0 = -1273.75203 + 2571j
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        complex_0, complex_0
    )
    none_type_0 = None
    var_0 = illegal_use_of_scope_replacer_0.__eq__(none_type_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_4():
    str_0 = "sg@n_\nzQT+\x0c2XFk"
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, str_0)
    module_0.lazy_import(dict_0, import_replacer_0)


def test_case_5():
    str_0 = "sg@:n_\nzQ$T+\x0cHXFk"
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0, str_0)


def test_case_6():
    import_processor_0 = module_0.ImportProcessor()


def test_case_7():
    complex_0 = -1278.4060097386694 + 2570.7j
    var_0 = module_0.ImportProcessor(complex_0)


def test_case_8():
    str_0 = "<}zdC[d\r"
    module_0.lazy_import(str_0, str_0)


def test_case_9():
    var_0 = module_0.disallow_proxying()


def test_case_10():
    complex_0 = -1273.75203 + 2571j
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        complex_0, complex_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_11():
    none_type_0 = None
    module_0.ScopeReplacer(none_type_0, none_type_0, none_type_0)


def test_case_12():
    import_processor_0 = module_0.ImportProcessor()
    import_processor_0.lazy_import(import_processor_0, import_processor_0)


def test_case_13():
    bool_0 = True
    module_0.lazy_import(bool_0, bool_0)


def test_case_14():
    import_processor_0 = module_0.ImportProcessor()
    module_0.ImportReplacer(
        import_processor_0,
        import_processor_0,
        import_processor_0,
        import_processor_0,
        import_processor_0,
    )


def test_case_15():
    str_0 = "S(:[ \nBTW_?M4z;"
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = "wxXk+p)@%&+H,](hSs"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_17():
    str_0 = "rE)}odUeo\\}I3#7PAC"
    module_0.lazy_import(str_0, str_0)


def test_case_18():
    str_0 = "Create lazy imports for all of the imports in text.\n\n    This is typically used as something like::\n\n        from bzrlib.lazy_import import lazy_import\n        lazy_import(globals(), '''\n        from bzrlib import (\n            foo,\n            bar,\n            baz,\n            )\n        import bzrlib.branch\n        import bzrlib.transport\n        ''')\n\n    Then 'foo, bar, baz' and 'bzrlib' will exist as lazy-loaded\n    objects which will be replaced with a real object on first use.\n\n    In general, it is best to only load modules in this way. This is\n    because other objects (functions/classes/variables) are frequently\n    used without accessing a member, which means we cannot tell they\n    have been uSed.\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_19():
    str_0 = "Create lazy imports for all of he imports in text.\n\n    This is typically used as something like::\n\n        from bzrlb.lazy_import import lazy_import\n        lazy_import(globals(), '''\n        from bzrlib import (\n            foo,\n            bar,\n       F    baz,\n            )\n        import bzrlib.branch\n        import bzrlib.transport\n        ''')\n\n    Then 'foo, bar, baz' and 'bzrlib' will exist as lazy-loaded\n    objects which will be replaced with a real object on first use.\n\n    In general, it is best to only load modules in this way. This is\n    becuse other objects (functions/classes/variables) are fequently\n    used withoJt accessing a membe, which means we cannot tell they\n    have been uSed.\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_20():
    str_0 = "#2n\r0CeF"
    none_type_0 = None
    module_0.lazy_import(none_type_0, str_0)


def test_case_21():
    str_0 = "sg@:n_\nzQ$T+\x0cHXFk"
    dict_0 = {str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
    scope_replacer_0 = module_0.ScopeReplacer(dict_0, import_replacer_0, str_0)
    scope_replacer_0.__call__()
