# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0
import builtins as module_1


def test_case_0():
    dict_0 = module_0.disallow_proxying()
    var_0 = module_0.IllegalUseOfScopeReplacer(dict_0, dict_0)
    module_0.IllegalUseOfScopeReplacer(var_0, dict_0, var_0)


def test_case_1():
    bytes_0 = b"\xe4\x8c2\x04"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bytes_0, bytes_0
    )
    illegal_use_of_scope_replacer_0.__str__()


def test_case_2():
    bytes_0 = b"\xe4\x8c2\x04"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bytes_0, bytes_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(bytes_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_3():
    str_0 = "erg\nj>\x0cA6"
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, dict_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_4():
    str_0 = "erg\njz\x0cA6"
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0)
    import_replacer_0.__call__()


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    str_0 = "kmVBQS#~6u04"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_7():
    var_0 = module_0.disallow_proxying()


def test_case_8():
    bytes_0 = b"\xb6\xb4A\xfc\xb2"
    module_0.ScopeReplacer(bytes_0, bytes_0, bytes_0)


def test_case_9():
    str_0 = "kmVBQS#~6u04"
    module_0.lazy_import(str_0, str_0)


def test_case_10():
    str_0 = "9n /`\nP]z\\"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0.__repr__()


def test_case_11():
    bytes_0 = b"\xb4A}\xfc\xb2"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bytes_0, bytes_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_12():
    bytes_0 = b"m\xc1\x97"
    var_0 = module_0.disallow_proxying()
    var_1 = var_0.__repr__()
    module_0.ImportReplacer(var_0, var_1, var_1, bytes_0, bytes_0)


def test_case_13():
    str_0 = "\\A([A-Za-z_0-9]+)=(.*)\\Z"
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = "\\A([A-\na-z_0-9])=(.*)\\Z"
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    dict_0 = {}
    var_0 = dict_0.__str__()
    var_1 = module_1.Exception()
    var_2 = var_1.__eq__(var_1)
    var_3 = var_1.__str__()
    module_0.lazy_import(dict_0, var_3)


def test_case_16():
    str_0 = "Create a temporary object in the specified scope.\n        Once used, a real object will be placed in the scope.\n\n        :param scope: The scope the object should appear in\n        :param factory: A callable that will create the real object.\n            It will be passed (self, scope, name)\n        :param name: The variable name in the given scope.\n        "
    module_0.lazy_import(str_0, str_0)


def test_case_17():
    str_0 = "Create a temporary object in the specified scope.\n        Once used, a real object will be placed in the scope.\n\n        :param scope: The scope the object should appear in\n        :param fact(ry: A callable that will create the real object.\n            It will be passed (self, scope, name)\n        :param name: The variable name in the given scope.\n      \\ "
    module_0.lazy_import(str_0, str_0, str_0)
