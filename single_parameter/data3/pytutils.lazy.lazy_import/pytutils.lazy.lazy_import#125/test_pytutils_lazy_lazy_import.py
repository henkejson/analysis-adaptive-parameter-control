# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0
import builtins as module_1


def test_case_0():
    str_0 = ",R,lAMEe.y"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_1():
    str_0 = ".WbmjAgH[mNu`PW2]"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    module_0.lazy_import(var_0, var_0)


def test_case_2():
    bool_0 = False
    list_0 = [bool_0]
    import_replacer_0 = module_0.ImportReplacer(list_0, bool_0, bool_0, list_0)
    module_0.lazy_import(bool_0, import_replacer_0)


def test_case_3():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    var_0 = module_0.ImportReplacer(list_0, bool_0, bool_0)
    var_0.__str__()


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    str_0 = ".bmAgH[nmNu`PW"
    var_0 = module_0.ImportProcessor(str_0)


def test_case_6():
    none_type_0 = None
    module_0.ScopeReplacer(none_type_0, none_type_0, none_type_0)


def test_case_7():
    import_processor_0 = module_0.disallow_proxying()


def test_case_8():
    str_0 = ".WbmjAgH[nmNu`PW2]"
    module_0.lazy_import(str_0, str_0)


def test_case_9():
    base_exception_0 = module_1.BaseException()
    int_0 = 1170
    module_0.ImportReplacer(
        base_exception_0, base_exception_0, base_exception_0, base_exception_0, int_0
    )


def test_case_10():
    str_0 = "nvld ptteg() ound. s(sg)s"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__str__()


def test_case_11():
    str_0 = "Invalid patterg(s) found. %(msg)s"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_12():
    str_0 = ""
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    str_0 = "\n    Stores items in the order the keys were last added.\n\n    From Python stdlib in `collections`.\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = "\n    Stores items in the order the keys were last added.\n\n    From Python stdlib in `collections`.\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = "Invald ptteg(s) found.%(msgs"
    str_1 = "Upon request import 'module_path' as the name 'module_name'.\n        When imported, prepare children to also be imported.\n\n        :param scope: The scope that objects should be imported into.\n            Typically this is globals()\n        :param name: The variable name. Often this is the same as the\n            module_path. 'bzrlib'\n        :param module_path: A list for the fully specified module path\n            ['bzrlib', 'foo', 'bar']\n        :param member: The member inside the module to import, often this is\n            None, indicating the module is being imported.\n        :param children: Children entries to be imported later.\n            This should be a map of children specifications.\n            ::\n            \n                {'foo':(['bzrlib', 'foo'], None,\n                    {'bar':(['bzrlib', 'foo', 'bar'], None {})})\n                }\n\n        Examples::\n\n            import foo => name='foo' module_path='foo',\n                          member=None, children={}\n            import foo.bar => name='foo' module_path='foo', member=None,\n                              children={'bar':(['foo', 'bar'], None, {}}\n            from foo import bar => name='bar' module_path='foo', member='bar'\n                                   children={}\n            from foo import bar, baz would get translated into 2 import\n            requests. On for 'name=bar' and one for 'name=baz'\n        "
    module_0.lazy_import(str_0, str_1)


def test_case_16():
    str_0 = "OmH#"
    module_0.lazy_import(str_0, str_0)


def test_case_17():
    str_0 = "~57Vw|TE%7V=,@"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
    module_0.lazy_import(str_0, import_replacer_0)
