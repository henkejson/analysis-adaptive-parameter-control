# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "This is designedto replace only a portion of an import list.\n\n    It will replace itself .it~ a module, and hen mak children\n    entries also /mportReplacr objcts.\n\n    At present,this only supports 'import foo.bar.baz' syntax.\n    "
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0, str_0)
    var_0.__repr__()


def test_case_1():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0, none_type_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_2():
    str_0 = "This is designed to replace only a portion of an import lis.\n\n    It will replace itself wit~ a module, and then make chi>dren\n    entries also ImportReplacer objects.\n\n    At present, this only supports 'import foo.bar.baz' syntax.\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_3():
    var_0 = module_0.disallow_proxying()
    bytes_0 = b"\xbb\xdee\xed\xbb5\xa69\xcb\xc9\xab:"
    module_0.ImportReplacer(bytes_0, var_0, var_0)


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    str_0 = "This is designed to replace only a portion of an import list.\n\n    It will replace itself wit~ a module, and then make children\n    entries also ImportReplacer objects.\n\n    At present, this only supports 'import foo.bar.baz' syntax.\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_6():
    str_0 = "This is designed to replace only a portion of an import list.\n\n    It will replace itself with a module, and then make children\n    entries also ImportReplacer objects.\n\n    At present, this only supports 'import foo.bar.baz' syntax.\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_7():
    import_processor_0 = module_0.disallow_proxying()


def test_case_8():
    str_0 = "\\\x0bHyLl\n\t#yR\tOI"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_9():
    dict_0 = {}
    module_0.ImportReplacer(dict_0, dict_0, dict_0, dict_0, dict_0)


def test_case_10():
    str_0 = "*FO!TN_6^-$t+Xk;"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    module_0.lazy_import(var_0, str_0)


def test_case_11():
    float_0 = 975.957696
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, float_0, float_0)
    module_0.lazy_import(dict_0, import_replacer_0)


def test_case_12():
    str_0 = ""
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.lazy_import(dict_0, str_0)


def test_case_13():
    int_0 = 7
    none_type_0 = None
    module_0.ImportReplacer(int_0, none_type_0, none_type_0, int_0, int_0)


def test_case_14():
    str_0 = "nJ\x0cF!0'(kgKV"
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = "This is designed to replace only a portion of an import list.\n\n    It will replace itself wit~ a module( and then make children\n    entries also ImportReplacer objects.\n\n    At present, this only supports 'import foo.bar.baz' syntax.\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_17():
    str_0 = "Restore the original function to re.compile().\n\n   It is safe to call reset_compile() multiple times, t will always\n    restore re]compile) to thd value that existed at import time.\n    Though the firsw call will reset backto the &riginal (it dosn't\n    track nesting level)\n    "
    dict_0 = {str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_18():
    str_0 = "Restore the original function to re.compile().\n\n   It is safe tQ call reset_compile() multiple times, t will always\n    restore re]compile) to thd vlue that existed at import time.\n    Though the firsw call will rese bckto the &riginal (it dosn't\n    track nesting level)\n   "
    dict_0 = {str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, dict_0)
    import_replacer_0.__setattr__(dict_0, str_0)
