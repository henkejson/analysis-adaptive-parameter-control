# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = maybe_0.__eq__(bool_0)
    str_0 = "c"
    var_0 = maybe_0.ap(str_0)
    var_1 = maybe_0.ap(none_type_0)
    int_0 = 743
    bool_2 = maybe_0.__eq__(int_0)
    var_2 = maybe_0.map(bool_1)
    bool_3 = maybe_0.__eq__(bool_0)
    var_3 = var_0.to_either()
    var_4 = var_1.filter(bool_0)
    var_5 = var_4.ap(bool_2)
    var_6 = maybe_0.to_lazy()
    var_7 = var_1.to_try()
    var_8 = var_2.bind(var_7)
    var_9 = var_8.map(var_1)
    var_10 = var_2.ap(bool_0)
    var_11 = var_7.bind(var_1)
    maybe_1 = module_0.Maybe(var_11, bool_3)
    bool_4 = var_4.__eq__(var_10)
    var_12 = var_4.to_try()
    maybe_1.filter(none_type_0)


def test_case_3():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = maybe_0.__eq__(none_type_0)
    maybe_0.ap(bool_0)


def test_case_4():
    set_0 = set()
    list_0 = [set_0, set_0, set_0, set_0]
    float_0 = 357.955
    generic_0 = module_1.Generic()
    list_1 = [generic_0, generic_0, generic_0, generic_0]
    bytes_0 = b""
    set_1 = {bytes_0}
    bool_0 = True
    maybe_0 = module_0.Maybe(set_1, bool_0)
    var_0 = maybe_0.filter(list_1)
    var_1 = maybe_0.to_try()
    var_2 = var_0.map(float_0)
    bool_1 = var_2.__eq__(list_0)


def test_case_5():
    int_0 = 139
    bytes_0 = b"G\xf5"
    bool_0 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    maybe_0.map(int_0)


def test_case_6():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0}
    bool_0 = False
    maybe_0 = module_0.Maybe(dict_0, bool_0)
    var_0 = maybe_0.to_try()
    none_type_0 = None
    none_type_1 = None
    bool_1 = True
    maybe_1 = module_0.Maybe(none_type_1, bool_1)
    var_1 = maybe_1.bind(none_type_0)
    var_2 = var_1.to_box()
    var_2.bind(var_0)


def test_case_7():
    list_0 = []
    bool_0 = False
    maybe_0 = module_0.Maybe(list_0, bool_0)
    maybe_1 = module_0.Maybe(list_0, bool_0)
    var_0 = maybe_1.to_try()
    none_type_0 = None
    maybe_1.bind(none_type_0)


def test_case_8():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = maybe_0.__eq__(bool_0)
    var_0 = maybe_0.ap(none_type_0)
    var_1 = var_0.bind(var_0)
    bool_2 = maybe_0.__eq__(bool_0)
    bool_3 = maybe_0.__eq__(bool_0)
    var_2 = var_0.filter(bool_0)
    var_3 = var_2.ap(bool_2)
    var_4 = var_1.to_validation()
    var_5 = var_1.ap(bool_0)
    maybe_1 = module_0.Maybe(var_0, bool_3)
    var_6 = var_4.to_try()
    maybe_1.filter(none_type_0)


def test_case_9():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_box()
    maybe_1 = module_0.Maybe(var_0, var_0)
    var_1 = maybe_1.to_either()
    var_2 = var_1.to_try()
    var_3 = maybe_1.filter(maybe_1)
    var_4 = var_3.to_validation()


def test_case_10():
    int_0 = -3271
    bytes_0 = b"\xab\xc2\xcf\x8c\xb2\x82\x16\xcf"
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.map(int_0)
    var_1 = var_0.get_or_else(int_0)
    bool_1 = True
    bool_2 = False
    maybe_1 = module_0.Maybe(bool_2, bool_2)
    maybe_1.ap(bool_1)


def test_case_11():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.to_try()
    var_2 = maybe_0.to_try()
    bool_1 = var_2.__eq__(var_1)
    var_3 = maybe_0.get_or_else(bool_0)
    var_1.bind(var_1)


def test_case_12():
    list_0 = []
    maybe_0 = module_0.Maybe(list_0, list_0)
    var_0 = maybe_0.to_either()
    var_0.get_or_else(list_0)


def test_case_13():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = maybe_0.__eq__(bool_0)
    var_0 = maybe_0.ap(none_type_0)
    bool_2 = maybe_0.__eq__(bool_0)
    bool_3 = maybe_0.__eq__(bool_0)
    var_1 = var_0.filter(bool_0)
    var_2 = var_1.ap(bool_2)
    var_3 = maybe_0.to_lazy()
    var_4 = var_2.to_validation()
    var_5 = maybe_0.ap(bool_0)
    maybe_1 = module_0.Maybe(var_0, bool_3)
    var_6 = var_4.to_try()
    maybe_1.filter(none_type_0)


def test_case_14():
    none_type_0 = None
    complex_0 = 4439.98 - 2464.5j
    none_type_1 = None
    maybe_0 = module_0.Maybe(complex_0, none_type_1)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_try()
    var_1.filter(none_type_0)


def test_case_15():
    bytes_0 = b"{V"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_try()
    var_0.to_box()


def test_case_16():
    int_0 = -1080
    str_0 = "\n        Two Lazy are equals where both are evaluated both have the same value and constructor functions.\n        "
    tuple_0 = (int_0, str_0)
    bool_0 = False
    maybe_0 = module_0.Maybe(tuple_0, bool_0)
    var_0 = maybe_0.to_validation()
    int_1 = -362
    set_0 = {int_1, int_1, int_1}
    bool_1 = True
    maybe_1 = module_0.Maybe(set_0, bool_1)
    var_1 = maybe_1.to_validation()
    var_1.bind(var_0)


def test_case_17():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = maybe_0.__eq__(bool_0)
    str_0 = "c"
    var_0 = maybe_0.ap(str_0)
    var_1 = maybe_0.ap(none_type_0)
    int_0 = 743
    var_2 = var_1.bind(var_1)
    bool_2 = maybe_0.__eq__(int_0)
    var_3 = maybe_0.map(bool_1)
    bool_3 = maybe_0.__eq__(bool_0)
    var_4 = var_0.to_either()
    var_5 = var_1.filter(bool_0)
    var_6 = var_5.ap(bool_2)
    var_7 = maybe_0.to_lazy()
    var_8 = var_1.to_try()
    var_9 = var_7.to_box()
    var_10 = var_3.bind(var_8)
    var_11 = var_2.to_validation()
    var_12 = var_10.map(var_1)
    var_13 = var_2.ap(bool_0)
    var_14 = var_8.bind(var_1)
    maybe_1 = module_0.Maybe(var_14, bool_3)
    var_15 = var_11.to_try()
    maybe_1.filter(none_type_0)


def test_case_18():
    complex_0 = -888.2 - 3906.98587j
    dict_0 = {}
    maybe_0 = module_0.Maybe(complex_0, dict_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_validation()
    maybe_1 = module_0.Maybe(var_1, var_0)
    var_2 = var_1.to_lazy()
    var_3 = maybe_1.bind(var_2)
    none_type_0 = None
    maybe_2 = module_0.Maybe(dict_0, none_type_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    bool_1 = maybe_1.__eq__(maybe_2)
    var_4 = var_0.to_try()
    var_5 = maybe_2.to_lazy()
    var_6 = maybe_2.to_lazy()
    maybe_3 = module_0.Maybe(var_5, var_5)
    var_1.get_or_else(var_0)
