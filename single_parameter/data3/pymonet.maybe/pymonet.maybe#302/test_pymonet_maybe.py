# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_either()
    bool_1 = maybe_0.__eq__(maybe_0)
    var_1 = maybe_0.map(var_0)
    var_2 = maybe_0.filter(var_0)
    var_3 = maybe_0.to_either()
    var_4 = maybe_0.to_box()
    var_5 = var_2.to_try()
    maybe_1 = module_0.Maybe(none_type_0, bool_1)
    var_6 = var_5.bind(var_0)
    var_7 = maybe_1.get_or_else(none_type_0)
    var_8 = var_2.to_lazy()
    var_9 = var_1.ap(var_4)
    var_7.to_box()


def test_case_3():
    none_type_0 = None
    tuple_0 = ()
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = maybe_0.__eq__(none_type_0)
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    maybe_2 = module_0.Maybe(tuple_0, tuple_0)
    var_0 = maybe_2.to_try()
    var_1 = maybe_0.map(var_0)
    var_0.to_lazy()


def test_case_4():
    bytes_0 = b"\xf5\xd3\xe6j\xd36\xcbP\xfb\x9d\xd0\xc6\xe2\xe8\xb4"
    bytes_1 = b">\xa0n\x0b7;\x17\xdaE\x84\xb4g\xe6%v\x16"
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.map(bytes_1)
    var_1 = var_0.bind(bytes_0)
    var_2 = var_1.to_lazy()


def test_case_5():
    str_0 = "wR2x]K4u"
    none_type_0 = None
    maybe_0 = module_0.Maybe(str_0, none_type_0)
    maybe_0.ap(maybe_0)


def test_case_6():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_either()
    bool_1 = maybe_0.__eq__(bool_0)
    var_1 = maybe_0.to_lazy()
    var_2 = var_0.to_box()
    var_3 = module_0.Maybe(var_0, bool_1)
    var_4 = maybe_0.to_try()
    var_5 = maybe_0.bind(none_type_0)
    var_6 = var_2.to_either()
    var_7 = maybe_0.ap(bool_0)
    var_3.filter(var_1)


def test_case_7():
    bytes_0 = b"M\x1f\xd8\x15OC\xcc\x00\x8d\x10\xf5\x86\xf2\x18!\xb9\xbd"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    var_1 = var_0.map(var_0)
    var_2 = maybe_0.to_box()
    var_3 = maybe_0.to_validation()
    var_3.bind(var_3)


def test_case_8():
    none_type_0 = None
    bytes_0 = b"=\x07\xe7"
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.filter(none_type_0)
    var_1 = var_0.to_either()
    bytes_1 = b"\x02\xa1\xe6iS\x8fK\x8a;Qh2\xbe\xfap"
    bytes_2 = b"M\x14\xe2g\x9e+G\x16\xe3\x9b\xb0\xcc"
    bool_1 = False
    maybe_1 = module_0.Maybe(bytes_2, bool_1)
    var_2 = maybe_1.get_or_else(bytes_1)
    var_2.to_either()


def test_case_9():
    float_0 = 2047.2
    int_0 = 1606
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.to_either()
    bool_1 = var_0.__eq__(float_0)


def test_case_10():
    str_0 = "\n        Take function, store it and call with Task value during calling fork function.\n        Return new Task with result of called.\n\n        :param fn: mapper function\n        :type fn: Function(value) -> B\n        :returns: new Task with mapped resolve attribute\n        :rtype: Task[Function(resolve, reject -> A | B]\n        "
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.to_validation()


def test_case_11():
    bool_0 = True
    dict_0 = {}
    maybe_0 = module_0.Maybe(dict_0, dict_0)
    var_0 = maybe_0.to_box()
    maybe_1 = module_0.Maybe(dict_0, bool_0)
    var_1 = maybe_1.to_box()
    var_1.map(bool_0)


def test_case_12():
    dict_0 = {}
    maybe_0 = module_0.Maybe(dict_0, dict_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_box()
    var_2 = var_1.to_either()
    var_3 = var_2.to_box()
    var_3.to_box()


def test_case_13():
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.bind(bool_0)
    var_1 = var_0.map(bool_0)
    var_2 = var_1.to_try()
    var_2.ap(none_type_0)


def test_case_14():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_lazy()
    bool_1 = False
    var_1 = maybe_0.to_try()
    var_2 = var_1.get_or_else(none_type_0)
    maybe_1 = module_0.Maybe(maybe_0, bool_1)
    var_3 = maybe_0.to_lazy()
    bool_2 = True
    maybe_2 = module_0.Maybe(bool_2, bool_2)
    var_4 = maybe_2.to_validation()
    var_1.filter(var_4)


def test_case_15():
    none_type_0 = None
    bytes_0 = b"@~!\xaa\xa7\xf3\xd7`\x1dJ\xee\x10q\x06"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.filter(none_type_0)
    var_2 = var_0.to_validation()
    var_3 = var_2.to_lazy()
    var_3.to_lazy()


def test_case_16():
    bool_0 = False
    float_0 = -1289.0
    maybe_0 = module_0.Maybe(float_0, bool_0)
    var_0 = maybe_0.to_validation()
    bool_1 = maybe_0.__eq__(maybe_0)
    var_0.ap(float_0)


def test_case_17():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_either()
    bool_1 = maybe_0.__eq__(maybe_0)
    var_1 = maybe_0.map(var_0)
    var_2 = maybe_0.filter(var_0)
    var_3 = var_2.ap(maybe_0)
    var_4 = maybe_0.to_box()
    var_5 = maybe_0.to_try()
    maybe_1 = module_0.Maybe(var_0, none_type_0)
    maybe_1.bind(var_5)


def test_case_18():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_either()
    bool_1 = maybe_0.__eq__(maybe_0)
    var_1 = maybe_0.map(var_0)
    var_2 = maybe_0.filter(var_0)
    var_3 = var_2.ap(var_0)
    var_4 = maybe_0.ap(maybe_0)
    maybe_1 = module_0.Maybe(bool_0, var_0)
    var_5 = var_3.bind(var_4)
    var_6 = maybe_0.get_or_else(maybe_0)
    var_7 = var_3.to_lazy()
    var_8 = maybe_0.ap(var_3)
    var_9 = maybe_0.to_box()
    var_10 = var_0.bind(var_7)
    var_11 = var_9.to_lazy()
    bool_2 = True
    bool_3 = False
    maybe_2 = module_0.Maybe(bool_2, bool_3)
    bool_4 = maybe_2.__eq__(var_3)
    bool_5 = False
    maybe_3 = module_0.Maybe(bool_4, bool_5)
    var_12 = var_5.to_validation()
    var_12.bind(var_8)
