# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1
import builtins as module_2


def test_case_0():
    complex_0 = 236 - 1159.3j
    maybe_0 = module_0.Maybe(complex_0, complex_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)


def test_case_3():
    bool_0 = False
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    none_type_0 = None
    bool_2 = maybe_0.__eq__(none_type_0)
    var_0 = maybe_0.to_validation()
    var_0.bind(none_type_0)


def test_case_4():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    none_type_0 = None
    var_0 = maybe_0.map(none_type_0)
    bool_1 = maybe_0.get_or_else(maybe_0)
    none_type_1 = None
    var_1 = maybe_0.filter(none_type_1)


def test_case_5():
    bool_0 = False
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_0, none_type_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    maybe_1 = module_0.Maybe(maybe_0, none_type_0)
    maybe_1.map(none_type_0)


def test_case_6():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.to_try()
    var_2 = maybe_0.bind(var_1)
    bool_1 = var_2.__eq__(maybe_0)


def test_case_7():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    bool_2 = maybe_0.__eq__(bool_0)
    var_0 = maybe_0.to_box()
    maybe_0.bind(var_0)


def test_case_8():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    none_type_0 = None
    var_0 = maybe_0.filter(bool_1)
    var_1 = maybe_0.get_or_else(var_0)
    var_2 = var_1.to_either()
    var_3 = var_0.ap(var_1)
    maybe_1 = module_0.Maybe(maybe_0, bool_1)
    generic_0 = module_1.Generic()
    maybe_2 = module_0.Maybe(none_type_0, bool_1)
    var_4 = maybe_1.ap(var_0)
    var_5 = maybe_2.filter(var_4)
    var_6 = var_1.to_either()
    var_7 = var_2.to_try()
    var_8 = var_0.to_either()
    var_9 = maybe_2.to_box()


def test_case_9():
    str_0 = "\n        :param semigroup: other semigroup to concat\n        :type semigroup: Min[B]\n        :returns: new Min with smallest value\n        :rtype: Min[A | B]\n        "
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_lazy()
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_1 = maybe_1.get_or_else(none_type_0)
    maybe_2 = module_0.Maybe(none_type_0, none_type_0)
    maybe_2.ap(maybe_2)


def test_case_10():
    bytes_0 = b"\xf8"
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.filter(bytes_0)


def test_case_11():
    int_0 = 1124
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.get_or_else(bool_0)
    maybe_1 = module_0.Maybe(int_0, maybe_0)
    var_1 = maybe_1.to_either()
    var_2 = maybe_1.map(var_0)
    var_0.to_lazy()


def test_case_12():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_either()


def test_case_13():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    object_0 = module_2.object()
    bool_2 = maybe_0.__eq__(object_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.filter(var_0)


def test_case_14():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_validation()
    bool_1 = True
    maybe_1 = module_0.Maybe(bool_0, bool_1)
    none_type_0 = None
    bool_2 = maybe_1.__eq__(none_type_0)
    var_2 = maybe_1.to_validation()
    maybe_2 = maybe_1.bind(var_2)


def test_case_15():
    bytes_0 = b"\xf8"
    bool_0 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.get_or_else(var_0)
    bool_1 = maybe_0.__eq__(bool_0)
    bool_2 = maybe_0.__eq__(var_0)
    maybe_1 = module_0.Maybe(var_0, var_0)
    maybe_0.filter(bool_0)


def test_case_16():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_try()
    bool_1 = maybe_0.__eq__(maybe_0)
    none_type_0 = None
    maybe_0.filter(none_type_0)


def test_case_17():
    complex_0 = 236 - 1159.3j
    maybe_0 = module_0.Maybe(complex_0, complex_0)
    var_0 = maybe_0.to_validation()


def test_case_18():
    float_0 = 1345.1
    bool_0 = False
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_validation()
    maybe_1 = module_0.Maybe(float_0, bool_0)
    var_1 = maybe_1.to_validation()
    var_2 = var_1.to_try()
    var_2.to_lazy()


def test_case_19():
    int_0 = -803
    dict_0 = {int_0: int_0, int_0: int_0}
    str_0 = "Callable[[U], Lazy[U, W]]"
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_either()
    var_1.map(dict_0)


def test_case_20():
    bytes_0 = b"\xf8"
    bool_0 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.ap(maybe_0)
    bool_1 = var_1.__eq__(bool_0)
    generic_0 = module_1.Generic()
    bool_2 = maybe_0.__eq__(var_1)
    var_2 = maybe_0.to_box()
    var_3 = var_0.map(var_1)
    bool_3 = True
    maybe_1 = module_0.Maybe(var_3, bool_3)
    var_4 = maybe_1.filter(var_1)
    var_5 = maybe_0.to_either()
    var_6 = var_3.to_try()
    var_7 = maybe_1.to_lazy()
    var_8 = var_4.bind(var_2)
    var_9 = var_8.to_either()
    var_10 = maybe_0.to_box()


def test_case_21():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = maybe_0.get_or_else(bool_0)
    list_0 = [bool_1, bool_1]
    var_0 = maybe_0.ap(list_0)
    var_1 = maybe_0.get_or_else(var_0)
    var_2 = var_0.get_or_else(maybe_0)
    var_3 = module_0.Maybe(var_1, var_0)
    maybe_1 = module_0.Maybe(maybe_0, bool_1)
    var_4 = var_1.get_or_else(var_1)
    bool_2 = var_4.__eq__(var_0)
    bool_3 = var_3.__eq__(var_1)
    maybe_2 = module_0.Maybe(bool_0, var_3)
    var_5 = var_1.filter(var_3)
    var_6 = var_0.to_either()
    var_7 = var_1.map(bool_0)
    var_8 = var_7.to_try()
    var_9 = var_1.to_lazy()
    var_10 = maybe_1.to_either()
    var_11 = var_6.to_box()
