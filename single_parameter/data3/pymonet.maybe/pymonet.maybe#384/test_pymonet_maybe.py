# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1


def test_case_0():
    bytes_0 = b'\xdd\xd7"\xc5\xed\xdaOl\x15+\xbe!\x1e\x95\xce\x04E\xdf\x85'
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)


def test_case_1():
    dict_0 = {}
    maybe_0 = module_0.Maybe(dict_0, dict_0)


def test_case_2():
    complex_0 = -2669.936 + 2058.9958j
    none_type_0 = None
    maybe_0 = module_0.Maybe(complex_0, none_type_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    complex_0.to_lazy()


def test_case_3():
    list_0 = []
    generic_0 = module_1.Generic(*list_0)
    complex_0 = -3497.5468 - 1259.07j
    set_0 = {complex_0}
    none_type_0 = None
    int_0 = -954
    maybe_0 = module_0.Maybe(none_type_0, int_0)
    var_0 = maybe_0.ap(set_0)
    bool_0 = var_0.__eq__(generic_0)


def test_case_4():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.ap(none_type_0)
    var_1 = maybe_0.get_or_else(maybe_0)
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    var_2 = var_0.map(bool_0)
    var_3 = var_2.to_box()
    var_4 = maybe_1.to_try()
    var_5 = maybe_1.to_either()
    var_6 = var_5.to_try()
    var_7 = maybe_1.to_lazy()


def test_case_5():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.ap(maybe_0)


def test_case_6():
    none_type_0 = None
    bytes_0 = b"\xaf"
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.map(none_type_0)
    var_1 = var_0.bind(bytes_0)
    none_type_1 = None
    bool_1 = True
    maybe_1 = module_0.Maybe(none_type_1, bool_1)
    var_2 = maybe_1.get_or_else(maybe_1)
    var_3 = maybe_1.get_or_else(none_type_0)
    var_3.to_either()


def test_case_7():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_either()
    maybe_0.bind(var_0)


def test_case_8():
    int_0 = -1324
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.ap(int_0)


def test_case_9():
    none_type_0 = None
    set_0 = set()
    bool_0 = False
    maybe_0 = module_0.Maybe(set_0, bool_0)
    maybe_0.ap(none_type_0)


def test_case_10():
    bool_0 = False
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.filter(bool_1)


def test_case_11():
    bool_0 = False
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    maybe_0.filter(bool_1)


def test_case_12():
    dict_0 = {}
    bytes_0 = b"\xb7\xbf\x14\x97C&\xc7\x12\x87\xe0.ca\x8b\xd3N\x10"
    bytes_1 = b"b$\r\x9c,\xdd"
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_1, bool_0)
    var_0 = maybe_0.get_or_else(bytes_0)
    var_0.ap(dict_0)


def test_case_13():
    bool_0 = False
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.get_or_else(bool_0)


def test_case_14():
    bool_0 = False
    bytes_0 = b"3?6"
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_1, bool_1)
    var_0 = maybe_0.filter(bytes_0)
    var_1 = var_0.ap(bool_0)
    var_2 = var_1.to_either()
    var_3 = var_2.to_box()


def test_case_15():
    complex_0 = -2669.936 + 2058.9958j
    none_type_0 = None
    maybe_0 = module_0.Maybe(complex_0, none_type_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_try()
    var_2 = maybe_0.to_either()
    var_3 = maybe_0.to_validation()


def test_case_16():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_box()


def test_case_17():
    bytes_0 = b'\xdd\xd7"\xc5\xed\xdaOl\x15+\xbe!\x1e\x95\xce\x04E\xdf\x85'
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_lazy()


def test_case_18():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_try()
    var_1.to_box()


def test_case_19():
    set_0 = set()
    bool_0 = True
    maybe_0 = module_0.Maybe(set_0, bool_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.filter(var_0)
    var_2 = maybe_0.to_try()
    bool_1 = True
    var_3 = maybe_0.ap(bool_1)
    var_4 = maybe_0.get_or_else(var_2)
    var_4.to_lazy()


def test_case_20():
    complex_0 = -2669.936 + 2058.9958j
    none_type_0 = None
    maybe_0 = module_0.Maybe(complex_0, none_type_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_try()
    var_0.to_lazy()


def test_case_21():
    int_0 = 2534
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.filter(var_0)


def test_case_22():
    bool_0 = False
    list_0 = [bool_0]
    str_0 = "\n        Evaluate function and memoize her output or return memoized value when function was evaluated.\n\n        :returns: result of function in Lazy\n        :rtype: A\n        "
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_validation()
    var_1.get_or_else(list_0)


def test_case_23():
    set_0 = set()
    bool_0 = True
    maybe_0 = module_0.Maybe(set_0, bool_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.bind(bool_0)
    bool_1 = maybe_0.__eq__(var_1)
    bool_2 = False
    var_2 = var_1.get_or_else(bool_2)
    maybe_1 = module_0.Maybe(var_0, bool_0)
    bool_3 = maybe_0.__eq__(set_0)
    bool_4 = var_2.__eq__(var_0)
    var_0.to_either()


def test_case_24():
    set_0 = set()
    bool_0 = True
    maybe_0 = module_0.Maybe(set_0, bool_0)
    var_0 = maybe_0.bind(bool_0)
    bool_1 = maybe_0.to_box()
    bool_2 = False
    var_1 = var_0.get_or_else(bool_2)
    maybe_1 = module_0.Maybe(var_1, bool_0)
    var_2 = module_0.Maybe(set_0, var_1)
    maybe_2 = module_0.Maybe(maybe_0, maybe_1)
    var_3 = var_0.map(var_1)
    var_4 = maybe_2.to_either()
    bool_3 = var_3.__eq__(var_2)
    var_5 = maybe_0.to_either()
    var_6 = var_0.to_try()
    var_7 = var_0.ap(var_2)
    var_8 = var_0.to_try()
    var_9 = maybe_0.to_lazy()
    var_10 = var_7.to_lazy()
    var_11 = var_6.get_or_else(bool_3)
    var_12 = var_2.to_box()
    bool_4 = var_8.__eq__(var_4)
