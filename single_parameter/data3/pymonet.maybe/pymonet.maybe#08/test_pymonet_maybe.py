# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    bytes_0 = b"X;\xb8\xbd>\x1b8\x0bQ\xce\\3\xb9U\xeaz"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.filter(bool_0)
    var_1 = maybe_0.to_lazy()
    var_2 = maybe_0.to_try()
    bytes_0 = b""
    maybe_1 = module_0.Maybe(maybe_0, bytes_0)
    var_3 = var_0.map(var_0)
    bool_1 = var_3.__eq__(maybe_0)
    maybe_1.filter(maybe_1)


def test_case_3():
    bool_0 = True
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.map(maybe_0)
    var_1 = var_0.to_validation()
    var_2 = var_0.ap(var_1)
    bool_2 = True
    maybe_1 = module_0.Maybe(var_1, var_1)
    var_3 = var_2.filter(var_1)
    var_4 = var_0.to_try()
    bool_3 = var_0.__eq__(var_4)
    maybe_2 = module_0.Maybe(var_3, var_4)
    var_5 = var_3.to_validation()
    var_6 = var_3.filter(var_5)
    maybe_3 = module_0.Maybe(maybe_1, bool_2)


def test_case_4():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.filter(bool_0)
    var_1 = maybe_0.to_lazy()
    var_2 = var_1.to_try()
    bytes_0 = b""
    maybe_1 = module_0.Maybe(maybe_0, bytes_0)
    var_3 = maybe_0.map(maybe_0)
    maybe_1.filter(maybe_1)


def test_case_5():
    none_type_0 = None
    none_type_1 = None
    bytes_0 = b"\x94\xbb\xa5\xf0\xbdK?\xc6\x9e\x8c\x1a"
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = maybe_0.__eq__(bytes_0)
    none_type_2 = None
    list_0 = [none_type_2]
    maybe_1 = module_0.Maybe(none_type_2, list_0)
    var_0 = maybe_1.map(bytes_0)
    var_1 = var_0.ap(none_type_1)
    var_2 = var_1.bind(none_type_0)
    bytes_1 = b"x\x97\x1f\x0e\x08f]\xcb/\xbe"
    maybe_2 = module_0.Maybe(bytes_1, bytes_1)
    bool_1 = False
    maybe_3 = module_0.Maybe(bytes_1, bool_1)
    none_type_3 = None
    bool_2 = False
    maybe_4 = module_0.Maybe(none_type_3, bool_2)
    var_3 = maybe_4.to_validation()
    var_4 = maybe_1.to_box()
    var_5 = maybe_2.get_or_else(maybe_2)
    var_6 = maybe_2.get_or_else(maybe_2)
    var_7 = maybe_3.to_validation()
    var_8 = maybe_3.to_try()
    var_9 = maybe_3.to_try()
    bool_3 = False
    var_10 = var_6.to_lazy()
    maybe_5 = module_0.Maybe(bool_2, bool_3)
    maybe_5.map(var_7)


def test_case_6():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.filter(bool_0)
    var_1 = maybe_0.to_lazy()
    var_2 = maybe_0.bind(var_1)
    var_3 = var_2.to_try()
    bytes_0 = b""
    maybe_1 = module_0.Maybe(maybe_0, bytes_0)
    var_4 = var_2.map(var_2)
    bool_1 = var_4.__eq__(maybe_0)
    maybe_1.filter(maybe_1)


def test_case_7():
    float_0 = 582.30544
    bool_0 = False
    maybe_0 = module_0.Maybe(float_0, bool_0)
    maybe_0.bind(bool_0)


def test_case_8():
    int_0 = 0
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.ap(int_0)
    var_1 = var_0.to_lazy()


def test_case_9():
    int_0 = 4745
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_lazy()
    maybe_0.ap(int_0)


def test_case_10():
    bool_0 = False
    int_0 = -255
    maybe_0 = module_0.Maybe(int_0, int_0)
    none_type_0 = None
    var_0 = maybe_0.get_or_else(none_type_0)
    var_1 = maybe_0.get_or_else(bool_0)


def test_case_11():
    list_0 = []
    maybe_0 = module_0.Maybe(list_0, list_0)
    var_0 = maybe_0.get_or_else(list_0)
    var_0.to_box()


def test_case_12():
    bool_0 = True
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_try()


def test_case_13():
    bytes_0 = b"e\x13\xdd\x12F\x9cd\xcd\x87"
    bool_0 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.to_validation()
    var_2 = var_0.to_box()
    int_0 = 2590
    bool_1 = True
    none_type_0 = None
    maybe_1 = module_0.Maybe(bool_1, none_type_0)
    var_3 = maybe_1.to_lazy()
    var_4 = var_3.ap(int_0)
    var_4.to_box()


def test_case_14():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_lazy()
    var_2 = var_1.to_either()
    var_3 = var_2.to_lazy()
    var_4 = var_3.to_try()
    var_4.to_either()


def test_case_15():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_box()
    int_0 = -1564
    maybe_0.filter(int_0)


def test_case_16():
    bytes_0 = b"X;\xb8\xbd>\x1b8\x0bQ\xce\\3\xb9U\xeaz"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_try()


def test_case_17():
    bool_0 = False
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_try()
    var_0.to_either()


def test_case_18():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.map(none_type_0)
    var_1 = var_0.to_validation()
    var_1.ap(bool_0)


def test_case_19():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    float_0 = 2339.7
    maybe_1 = module_0.Maybe(float_0, float_0)
    var_0 = maybe_1.to_box()
    var_1 = var_0.to_either()
    bool_0 = maybe_0.__eq__(maybe_0)
    var_2 = var_1.to_lazy()
    var_3 = var_2.to_box()
    var_3.to_box()


def test_case_20():
    list_0 = []
    bool_0 = False
    maybe_0 = module_0.Maybe(list_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.ap(bool_0)
    var_2 = var_0.map(var_0)
    var_2.to_validation()


def test_case_21():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.filter(bool_0)
    var_1 = maybe_0.to_lazy()
    var_2 = maybe_0.get_or_else(maybe_0)
    var_3 = maybe_0.bind(var_1)
    var_4 = var_3.to_try()
    bytes_0 = b""
    maybe_1 = module_0.Maybe(maybe_0, bytes_0)
    var_5 = var_2.map(var_3)
    bool_1 = False
    maybe_2 = module_0.Maybe(var_4, bool_1)
    bool_2 = var_5.__eq__(maybe_2)
    maybe_1.filter(maybe_1)
