# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1


def test_case_0():
    float_0 = -83.0
    tuple_0 = (float_0, float_0)
    maybe_0 = module_0.Maybe(tuple_0, tuple_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    bool_0 = True
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_1, bool_1)
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_1.filter(bool_1)
    bool_2 = var_0.__eq__(var_0)
    var_1 = var_0.to_try()
    maybe_0.filter(bool_0)


def test_case_3():
    bytes_0 = b"o"
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.ap(bytes_0)
    maybe_1 = module_0.Maybe(bytes_0, maybe_0)
    bool_1 = maybe_1.__eq__(bytes_0)
    var_1 = maybe_1.to_validation()
    maybe_2 = module_0.Maybe(bytes_0, var_1)
    var_2 = maybe_0.to_validation()
    var_3 = maybe_1.to_box()
    var_4 = var_2.to_try()
    var_5 = var_3.to_validation()


def test_case_4():
    none_type_0 = None
    none_type_1 = None
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    maybe_0 = module_0.Maybe(list_0, list_0)
    var_0 = maybe_0.map(none_type_1)
    var_1 = var_0.bind(none_type_0)


def test_case_5():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    float_0 = 1474.0
    dict_0 = {}
    maybe_1 = module_0.Maybe(dict_0, dict_0)
    maybe_1.map(float_0)


def test_case_6():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.bind(maybe_0)
    var_2 = maybe_0.bind(var_0)
    var_3 = maybe_0.to_try()


def test_case_7():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0}
    none_type_0 = None
    maybe_0 = module_0.Maybe(set_0, tuple_0)
    maybe_0.bind(none_type_0)


def test_case_8():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    var_1 = maybe_0.to_try()
    bool_1 = var_1.__eq__(none_type_0)
    var_2 = var_1.get_or_else(bool_0)
    var_3 = maybe_0.ap(none_type_0)
    bool_2 = True
    none_type_1 = None
    var_4 = var_3.map(var_3)
    maybe_1 = module_0.Maybe(bool_2, none_type_1)


def test_case_9():
    bytes_0 = b"\x8b\xf2\xf4"
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_0.ap(bytes_0)


def test_case_10():
    bool_0 = True
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_1, bool_1)
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_1.filter(bool_1)
    bool_2 = var_0.__eq__(var_0)
    var_1 = maybe_1.get_or_else(bool_0)
    maybe_0.filter(bool_0)


def test_case_11():
    bytes_0 = b"ZQ\x18\x80\xc4$\x0f\x94\xe1T)O\xb3\x03A\xdc\xb3>\xc1\x1c"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    float_0 = -4089.3
    none_type_0 = None
    maybe_0 = module_0.Maybe(float_0, none_type_0)
    var_0 = maybe_0.get_or_else(none_type_0)
    var_1 = maybe_0.get_or_else(var_0)
    maybe_0.filter(set_0)


def test_case_12():
    str_0 = "Y4Z^yq'"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, str_0, dict_0]
    generic_0 = module_1.Generic()
    none_type_0 = None
    maybe_0 = module_0.Maybe(generic_0, none_type_0)
    maybe_1 = module_0.Maybe(maybe_0, maybe_0)
    var_0 = maybe_1.to_either()
    var_0.get_or_else(list_0)


def test_case_13():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_box()
    var_2 = var_1.to_try()
    bool_0 = True
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    var_3 = maybe_1.bind(var_2)
    var_4 = var_3.filter(none_type_0)
    maybe_2 = module_0.Maybe(none_type_0, none_type_0)
    var_5 = maybe_2.to_validation()
    var_6 = maybe_2.to_either()
    var_6.ap(none_type_0)


def test_case_14():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.to_box()
    var_2 = var_1.to_try()
    bool_0 = True
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    var_3 = maybe_1.bind(var_2)
    var_4 = var_3.filter(none_type_0)
    maybe_2 = module_0.Maybe(none_type_0, none_type_0)
    var_5 = maybe_2.to_validation()
    var_6 = maybe_2.to_either()
    var_6.ap(none_type_0)


def test_case_15():
    none_type_0 = None
    bool_0 = True
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_1, bool_1)
    bool_2 = True
    maybe_1 = module_0.Maybe(bool_2, bool_2)
    maybe_2 = module_0.Maybe(none_type_0, bool_2)
    var_0 = maybe_1.filter(bool_2)
    bool_3 = maybe_2.__eq__(maybe_2)
    var_1 = maybe_1.bind(maybe_2)
    var_2 = maybe_2.to_lazy()
    var_3 = maybe_2.to_try()
    maybe_0.filter(bool_0)


def test_case_16():
    str_0 = "Xi,"
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_box()
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    var_2 = maybe_1.to_lazy()
    var_2.filter(str_0)


def test_case_17():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_try()
    var_0.to_lazy()


def test_case_18():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    maybe_0 = module_0.Maybe(set_0, set_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.to_lazy()
    var_2 = var_1.to_try()
    var_2.filter(set_0)


def test_case_19():
    int_0 = 1
    bool_0 = False
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.to_validation()
    none_type_0 = None
    none_type_1 = None
    maybe_1 = module_0.Maybe(var_0, var_0)
    var_1 = maybe_1.map(var_0)
    maybe_2 = module_0.Maybe(none_type_0, none_type_1)
    var_2 = maybe_1.filter(maybe_1)
    bool_1 = maybe_0.__eq__(var_1)
    maybe_0.bind(var_0)


def test_case_20():
    none_type_0 = None
    bool_0 = True
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_1, bool_1)
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    maybe_2 = module_0.Maybe(none_type_0, bool_1)
    var_0 = maybe_1.filter(bool_1)
    bool_2 = maybe_2.__eq__(maybe_2)
    var_1 = maybe_1.bind(maybe_2)
    var_2 = maybe_2.to_try()
    maybe_0.filter(bool_0)
