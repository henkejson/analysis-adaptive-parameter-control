# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import builtins as module_1


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    str_0 = "TtA!|q"
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_either()
    bool_1 = maybe_0.__eq__(maybe_0)
    var_1 = maybe_0.to_lazy()
    var_2 = maybe_0.filter(var_1)
    bool_2 = False
    maybe_1 = module_0.Maybe(var_1, bool_2)
    maybe_1.filter(var_2)


def test_case_3():
    bytes_0 = b"=\xec\xe0,J\x0bB\x7f"
    bool_0 = False
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.filter(maybe_0)
    bool_1 = var_0.__eq__(bool_0)
    var_1 = var_0.to_try()
    maybe_1 = module_0.Maybe(bytes_0, bool_0)
    maybe_1.bind(var_0)


def test_case_4():
    bytes_0 = b"=\xec\xe0,J\x0bB\x7f"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.filter(maybe_0)
    var_1 = var_0.to_try()
    maybe_1 = module_0.Maybe(bytes_0, var_1)
    var_2 = var_0.get_or_else(var_1)
    var_3 = var_0.map(var_1)
    var_4 = maybe_1.to_lazy()


def test_case_5():
    complex_0 = 2776.99 + 1259.553206j
    bool_0 = False
    maybe_0 = module_0.Maybe(complex_0, bool_0)
    maybe_0.map(bool_0)


def test_case_6():
    bytes_0 = b"\n_\x03\x0cpx\xccP\xe0r\xfd\xfa\xdc\x0c"
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    list_0 = [maybe_0, maybe_0]
    bytes_1 = b"\xec52\xda<\x88D2\xfe\xfcJx&\x89\xf4\x8ek\x94G"
    str_0 = ""
    bool_1 = True
    maybe_1 = module_0.Maybe(str_0, bool_1)
    var_0 = maybe_1.bind(bytes_1)
    var_1 = var_0.filter(list_0)


def test_case_7():
    complex_0 = -962 + 1121.7936j
    bool_0 = False
    maybe_0 = module_0.Maybe(complex_0, bool_0)
    var_0 = maybe_0.to_try()
    maybe_1 = module_0.Maybe(maybe_0, bool_0)
    maybe_1.bind(var_0)


def test_case_8():
    str_0 = "\n        :returns: Copy of self\n        :rtype: Left[A]\n        "
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.to_lazy()
    var_2 = maybe_0.ap(maybe_0)
    var_3 = var_2.filter(var_1)
    var_4 = maybe_0.bind(var_2)
    var_5 = maybe_0.to_validation()
    var_0.to_box()


def test_case_9():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.ap(bool_0)


def test_case_10():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.filter(none_type_0)


def test_case_11():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_0.filter(none_type_0)


def test_case_12():
    none_type_0 = None
    none_type_1 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_1, bool_0)
    var_0 = maybe_0.filter(none_type_0)
    var_1 = var_0.get_or_else(none_type_0)


def test_case_13():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.get_or_else(none_type_0)
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_1 = maybe_1.to_lazy()
    var_2 = var_1.to_either()
    var_3 = var_2.to_try()


def test_case_14():
    int_0 = 564
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.to_either()
    var_0.get_or_else(int_0)


def test_case_15():
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_box()
    var_1.ap(bool_0)


def test_case_16():
    object_0 = module_1.object()
    none_type_0 = None
    int_0 = 1
    maybe_0 = module_0.Maybe(none_type_0, int_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_either()
    var_1.get_or_else(object_0)


def test_case_17():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_box()
    maybe_0.filter(var_0)


def test_case_18():
    str_0 = "J4\t-/Zyl"
    bool_0 = True
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_validation()
    var_1 = var_0.to_lazy()
    var_2 = var_1.ap(str_0)
    var_2.to_validation()


def test_case_19():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_validation()


def test_case_20():
    float_0 = 751.0
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, float_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_try()
    var_1.to_lazy()


def test_case_21():
    bytes_0 = b"=\xec\xe0,J\x0bB\x7f"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.ap(var_0)
    var_2 = maybe_0.filter(var_0)
    bool_0 = True
    var_3 = var_1.bind(bool_0)
    var_4 = var_3.to_validation()
    var_5 = var_3.to_box()
    var_6 = var_3.bind(var_5)
    var_7 = var_6.ap(var_0)
    var_8 = var_7.to_lazy()
    var_9 = var_6.to_either()
    var_10 = var_3.ap(bytes_0)
    bool_1 = var_6.__eq__(maybe_0)
    var_9.filter(var_8)


def test_case_22():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = False
    bool_2 = False
    maybe_1 = module_0.Maybe(none_type_0, bool_2)
    bool_3 = maybe_1.__eq__(maybe_1)
    var_0 = maybe_0.to_try()
    maybe_2 = module_0.Maybe(bool_3, bool_3)
    int_0 = -975
    var_1 = maybe_2.ap(bool_1)
    var_2 = var_1.get_or_else(var_0)
    bool_4 = var_2.__eq__(int_0)
    var_3 = var_1.to_try()
    var_4 = var_3.map(var_1)
    var_3.to_lazy()
