# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import builtins as module_1


def test_case_0():
    bytes_0 = b"\\\x9d\xa7r\xadF\xe3\xe0"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.get_or_else(maybe_0)
    bool_1 = var_1.__eq__(var_1)
    var_2 = var_1.to_box()
    var_3 = var_0.bind(var_2)
    var_4 = maybe_0.to_try()
    var_4.to_either()


def test_case_3():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_box()
    bool_1 = maybe_0.__eq__(bool_0)
    var_1 = maybe_0.to_try()
    bool_2 = maybe_0.__eq__(maybe_0)
    var_2 = var_1.bind(none_type_0)
    var_1.to_lazy()


def test_case_4():
    none_type_0 = None
    bool_0 = True
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.map(bool_0)
    bool_2 = var_0.__eq__(bool_0)
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    var_1 = maybe_0.to_try()
    var_2 = var_0.map(var_1)
    var_3 = maybe_1.to_try()
    var_4 = var_3.map(none_type_0)
    var_5 = maybe_1.bind(none_type_0)
    var_3.to_either()


def test_case_5():
    float_0 = 2087.518
    maybe_0 = module_0.Maybe(float_0, float_0)
    var_0 = maybe_0.to_box()
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1.map(var_0)


def test_case_6():
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.get_or_else(none_type_0)
    var_1 = maybe_0.bind(var_0)
    var_2 = var_1.to_lazy()
    var_3 = var_1.to_either()
    var_4 = var_1.ap(var_1)
    bool_1 = True
    maybe_1 = module_0.Maybe(bool_1, bool_1)
    var_5 = maybe_1.ap(bool_0)
    bool_2 = var_5.__eq__(maybe_1)


def test_case_7():
    bool_0 = False
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    maybe_0.bind(bool_1)


def test_case_8():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = maybe_0.__eq__(bool_0)
    maybe_0.ap(bool_0)


def test_case_9():
    str_0 = "5\r1KZ+~\\SWp"
    dict_0 = {}
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.filter(dict_0)
    var_1 = var_0.to_either()
    var_2 = var_0.to_lazy()
    bool_1 = True
    maybe_1 = module_0.Maybe(str_0, bool_0)
    maybe_2 = module_0.Maybe(dict_0, bool_1)
    var_3 = var_0.bind(maybe_2)
    var_4 = maybe_2.map(var_3)
    var_5 = maybe_2.get_or_else(str_0)
    var_6 = maybe_2.bind(var_2)
    var_5.get_or_else(var_5)


def test_case_10():
    none_type_0 = None
    complex_0 = -277 - 69.31505j
    bool_0 = False
    maybe_0 = module_0.Maybe(complex_0, bool_0)
    maybe_0.filter(none_type_0)


def test_case_11():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.get_or_else(none_type_0)
    maybe_0.bind(var_0)


def test_case_12():
    int_0 = -3067
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, int_0)
    var_0 = maybe_0.filter(maybe_0)
    maybe_1 = module_0.Maybe(var_0, none_type_0)
    var_1 = maybe_1.to_either()
    var_2 = var_0.to_try()
    maybe_1.filter(var_2)


def test_case_13():
    str_0 = "\n        Transform Lazy into Box with constructor_fn result.\n\n        :returns: Box monad with constructor_fn result\n        :rtype: Box[A]\n        "
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_box()


def test_case_14():
    int_0 = 1
    str_0 = "\n        Take function and applied this function on current box value and returns mapped value.\n\n        :param mapper: mapper function\n        :type mapper: Function(A) -> B\n        :returns: new box with mapped value\n        :rtype: B\n        "
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_validation()
    var_1.get_or_else(int_0)


def test_case_15():
    bytes_0 = b"\xa7:\xd0"
    none_type_0 = None
    maybe_0 = module_0.Maybe(bytes_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_either()
    var_1.to_either()


def test_case_16():
    bool_0 = False
    bytes_0 = b"P4\xbc\x15\xc0!\xaf\xce\ti\x95"
    bool_1 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_1)
    var_0 = maybe_0.to_try()
    var_1 = var_0.get_or_else(bool_0)
    var_1.to_try()


def test_case_17():
    bool_0 = True
    tuple_0 = (bool_0,)
    object_0 = module_1.object()
    tuple_1 = (tuple_0, bool_0, object_0)
    none_type_0 = None
    str_0 = '"]8\rb'
    bool_1 = True
    maybe_0 = module_0.Maybe(tuple_1, bool_1)
    var_0 = maybe_0.map(str_0)
    bool_2 = True
    maybe_1 = module_0.Maybe(none_type_0, bool_2)
    var_1 = maybe_1.to_validation()
    var_1.get_or_else(tuple_1)


def test_case_18():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_validation()


def test_case_19():
    int_0 = -3067
    int_0.to_lazy()


def test_case_20():
    int_0 = -3067
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, int_0)
    var_0 = maybe_0.bind(maybe_0)
    var_1 = maybe_0.to_try()
    bool_0 = var_0.__eq__(var_0)
    var_2 = var_0.to_either()
    var_3 = maybe_0.ap(var_0)
    var_4 = var_3.filter(var_3)
    bool_1 = maybe_0.__eq__(var_4)
    bool_2 = var_0.__eq__(var_0)
    var_5 = var_3.to_box()
    var_6 = var_5.to_try()
    var_7 = var_0.to_try()
    var_8 = var_4.to_validation()
    var_9 = var_0.to_lazy()


def test_case_21():
    int_0 = -3067
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, int_0)
    var_0 = maybe_0.bind(maybe_0)
    bool_0 = False
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    var_1 = maybe_1.to_box()
    var_2 = var_0.bind(var_1)
    var_3 = var_1.to_try()
    bool_1 = maybe_1.__eq__(maybe_1)
    var_3.to_either()
