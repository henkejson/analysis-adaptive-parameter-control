# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    bytes_0 = b'_\xb0ZF/"S'
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)


def test_case_1():
    bool_0 = False
    var_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    str_0 = ""
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.ap(bool_0)
    var_1 = maybe_0.to_either()
    var_2 = var_0.ap(var_0)
    var_3 = maybe_0.map(var_0)
    bool_1 = var_0.__eq__(var_2)


def test_case_3():
    str_0 = "\n        If Maybe is empty or filterer returns False return default_value, in other case\n        return new instance of Maybe with the same value.\n\n        :param filterer:\n        :type filterer: Function(A) -> Boolean\n        :returns: copy of self when filterer returns True, in other case empty Maybe\n        :rtype: Maybe[A] | Maybe[None]\n        "
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.to_box()
    bool_0 = maybe_0.__eq__(var_0)
    var_1 = maybe_0.to_try()
    bool_1 = True
    maybe_1 = module_0.Maybe(bool_1, var_0)
    var_2 = maybe_0.map(var_0)


def test_case_4():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_0.ap(maybe_0)


def test_case_5():
    str_0 = ""
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.ap(bool_0)
    var_1 = maybe_0.to_either()
    var_2 = var_0.ap(var_0)
    var_3 = maybe_0.map(var_0)
    var_4 = var_3.bind(var_1)
    bool_1 = var_0.__eq__(var_2)


def test_case_6():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_lazy()
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_1 = maybe_1.to_lazy()
    maybe_1.bind(var_1)


def test_case_7():
    none_type_0 = None
    dict_0 = {none_type_0: none_type_0, none_type_0: none_type_0}
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1 = module_0.Maybe(none_type_0, dict_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_1.filter(var_0)
    var_2 = maybe_0.to_validation()
    var_3 = maybe_1.to_lazy()
    var_4 = maybe_0.to_lazy()
    maybe_0.filter(var_4)


def test_case_8():
    float_0 = 846.172842
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = False
    maybe_1 = module_0.Maybe(maybe_0, bool_0)
    maybe_1.filter(dict_0)


def test_case_9():
    str_0 = "G"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.get_or_else(str_0)
    var_1 = maybe_0.to_box()
    bool_0 = maybe_0.__eq__(str_0)
    var_2 = maybe_0.ap(maybe_0)
    var_1.map(var_1)


def test_case_10():
    bytes_0 = b"\xb8\xc5\x191p\xc9\x9dG\x9e\xb3\xe4zlyv/'`9"
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.get_or_else(bytes_0)
    bool_1 = var_0.__eq__(bool_0)
    maybe_1 = module_0.Maybe(bytes_0, bool_0)


def test_case_11():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_either()
    maybe_1 = var_0.to_lazy()
    maybe_0.filter(none_type_0)


def test_case_12():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_either()
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_1 = maybe_1.to_box()
    bool_0 = maybe_1.__eq__(var_1)
    var_1.ap(none_type_0)


def test_case_13():
    str_0 = "\n        If Maybe is empty or filterer returns False return default_value, in other case\n        return new instance of Maybe with the same value.\n\n        :param filterer:\n        :type filterer: Function(A) -> Boolean\n        :returns: copy of self when filterer returns True, in other case empty Maybe\n        :rtype: Maybe[A] | Maybe[None]\n        "
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.to_lazy()
    bool_0 = maybe_0.__eq__(var_0)
    var_2 = maybe_0.to_try()
    bool_1 = True
    maybe_1 = module_0.Maybe(bool_1, var_0)
    var_2.to_lazy()


def test_case_14():
    str_0 = "\n        :param fork: function to call during fork\n        :type fork: Function(reject, resolve) -> Any\n        "
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_box()
    var_1.bind(str_0)


def test_case_15():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.to_try()
    var_2 = maybe_0.to_try()
    var_1.to_box()


def test_case_16():
    bytes_0 = b"\xe7/\x8cH\xdb-\x92\x03.\x9a\x905H"
    none_type_0 = None
    none_type_1 = None
    int_0 = 2604
    list_0 = [int_0]
    list_1 = [list_0, list_0]
    bool_0 = True
    maybe_0 = module_0.Maybe(list_1, bool_0)
    var_0 = maybe_0.ap(none_type_1)
    var_1 = var_0.to_validation()
    var_2 = var_1.to_lazy()
    var_3 = var_2.ap(none_type_0)
    var_3.filter(bytes_0)


def test_case_17():
    str_0 = "\n        If Maybe is empty or filterer returns False return default_value, in other case\n        return new instance of Maybe with the same value.\n\n        :param filterer:\n        :type filterer: Function(A) -> Boolean\n        :returns: copy of self when filterer returns True, in other case empty Maybe\n        :rtype: Maybe[A] | Maybe[None]\n        "
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.to_box()
    bool_0 = maybe_0.__eq__(var_0)
    var_1 = maybe_0.filter(maybe_0)
    var_2 = var_1.to_lazy()
    var_3 = maybe_0.map(bool_0)
    var_4 = maybe_0.bind(var_2)
    var_5 = var_4.filter(var_1)
    var_6 = var_5.filter(var_5)
    var_7 = var_1.filter(var_0)
    var_8 = var_6.filter(var_3)
    var_9 = var_6.filter(var_0)
    var_10 = var_4.to_lazy()
    var_11 = var_5.ap(str_0)
    var_12 = var_11.filter(var_2)
    var_13 = var_10.to_validation()
    var_13.ap(str_0)


def test_case_18():
    str_0 = "$fl\x0c[{"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.bind(str_0)
    bool_0 = maybe_0.__eq__(var_0)
    var_1 = var_0.filter(var_0)
    var_2 = maybe_0.get_or_else(var_1)
    maybe_1 = module_0.Maybe(bool_0, var_1)
    var_3 = var_2.to_box()
    var_4 = maybe_0.to_validation()
    var_4.map(var_3)


def test_case_19():
    bool_0 = False
    str_0 = ""
    bool_1 = False
    maybe_0 = module_0.Maybe(str_0, bool_1)
    var_0 = maybe_0.get_or_else(maybe_0)
    bool_2 = maybe_0.__eq__(maybe_0)
    maybe_0.filter(bool_0)
