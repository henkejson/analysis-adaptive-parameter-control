# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)


def test_case_3():
    generic_0 = module_1.Generic()
    maybe_0 = module_0.Maybe(generic_0, generic_0)
    var_0 = maybe_0.ap(generic_0)
    bool_0 = True
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    var_1 = maybe_0.to_lazy()
    var_2 = maybe_1.to_try()
    var_3 = var_2.map(var_1)
    var_4 = maybe_0.to_either()
    bool_1 = maybe_1.__eq__(generic_0)


def test_case_4():
    bool_0 = True
    none_type_0 = None
    str_0 = "\n        Transform Validation to Either.\n\n        :returns: Right monad with previous value when Validation has no errors, in other case Left with errors list\n        :rtype: Right[A] | Left[E]\n        "
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_1, bool_1)
    var_0 = maybe_0.map(str_0)
    var_1 = var_0.get_or_else(none_type_0)
    var_1.ap(bool_0)


def test_case_5():
    bytes_0 = b"\x80\xe9]\x16\xc5\xd7i9\xeb\x91\n"
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.map(bytes_0)


def test_case_6():
    bytes_0 = b"d\x02\xb9\xbc\xa5\xec\x93L1"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.bind(var_0)


def test_case_7():
    list_0 = []
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.get_or_else(list_0)
    maybe_0.bind(list_0)


def test_case_8():
    generic_0 = module_1.Generic()
    maybe_0 = module_0.Maybe(generic_0, generic_0)
    var_0 = maybe_0.ap(generic_0)
    maybe_1 = var_0.filter(generic_0)
    var_1 = maybe_1.to_either()
    var_2 = maybe_1.to_try()
    var_3 = var_0.ap(var_1)
    var_2.to_either()


def test_case_9():
    int_0 = 1
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_0.ap(int_0)


def test_case_10():
    str_0 = "Last[value={}]"
    list_0 = [str_0, str_0]
    int_0 = 1441
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.filter(list_0)
    var_1 = var_0.to_try()
    var_1.to_validation()


def test_case_11():
    generic_0 = module_1.Generic()
    maybe_0 = module_0.Maybe(generic_0, generic_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    var_1 = maybe_0.filter(maybe_0)
    var_2 = maybe_0.filter(maybe_0)
    bool_0 = False
    maybe_1 = module_0.Maybe(var_1, bool_0)
    maybe_2 = maybe_1.get_or_else(bool_0)
    var_3 = var_1.to_either()
    var_4 = var_3.to_box()
    maybe_1.filter(maybe_0)


def test_case_12():
    bytes_0 = b"\x82."
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.to_box()
    var_2 = var_1.to_either()
    bool_0 = var_1.__eq__(var_0)
    bool_1 = True
    maybe_1 = module_0.Maybe(var_2, bool_1)


def test_case_13():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    str_0 = "VK:>s4)#e`l9}Hik`o"
    var_0 = maybe_0.ap(str_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(maybe_0, none_type_0)
    var_1 = maybe_1.to_box()
    bool_1 = False
    maybe_2 = module_0.Maybe(bool_0, bool_1)
    var_2 = var_1.to_lazy()


def test_case_14():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_lazy()
    bool_1 = maybe_0.__eq__(maybe_0)


def test_case_15():
    str_0 = "\n        Returns first element of ImmutableList that passed\n        info argument returns True\n\n        :param fn: function to call with ImmutableList value\n        :type fn: Function(A) -> bool\n        :returns: A\n        "
    bool_0 = True
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_lazy()
    none_type_0 = None
    var_1 = var_0.map(none_type_0)
    var_2 = var_0.to_box()
    var_3 = var_2.to_either()
    var_2.get_or_else(str_0)


def test_case_16():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, none_type_0)
    var_0 = maybe_0.get_or_else(none_type_0)
    maybe_1 = module_0.Maybe(bool_0, none_type_0)
    var_1 = maybe_1.to_try()
    var_1.to_validation()


def test_case_17():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_0.to_validation()


def test_case_18():
    tuple_0 = ()
    str_0 = "lSm;!"
    list_0 = [tuple_0, tuple_0, str_0, tuple_0]
    none_type_0 = None
    maybe_0 = module_0.Maybe(list_0, none_type_0)
    var_0 = maybe_0.to_validation()
    var_0.to_validation()


def test_case_19():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.ap(maybe_0)
    var_1 = maybe_0.to_validation()
    var_2 = maybe_0.to_either()
    bool_1 = var_2.__eq__(bool_0)
    var_3 = var_2.to_validation()
    var_4 = maybe_0.to_lazy()
    var_5 = var_4.to_validation()
    var_6 = maybe_0.get_or_else(bool_0)
    var_4.get_or_else(none_type_0)


def test_case_20():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    str_0 = "VK:>s4)#e`l9}Hik`o"
    var_0 = maybe_0.ap(str_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(maybe_0, none_type_0)
    var_1 = maybe_1.to_box()
    var_2 = maybe_1.to_either()
    bool_1 = var_2.__eq__(maybe_1)


def test_case_21():
    generic_0 = module_1.Generic()
    maybe_0 = module_0.Maybe(generic_0, generic_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    var_1 = var_0.get_or_else(var_0)
    var_2 = var_0.filter(var_0)
    var_3 = maybe_0.filter(var_0)
    bool_0 = maybe_0.__eq__(var_2)
    var_4 = maybe_0.filter(maybe_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(var_2, bool_1)
    maybe_2 = module_0.Maybe(var_4, var_0)
    var_5 = var_3.get_or_else(var_2)
    var_6 = var_4.to_box()
    maybe_1.filter(maybe_0)


def test_case_22():
    generic_0 = module_1.Generic()
    maybe_0 = module_0.Maybe(generic_0, generic_0)
    var_0 = maybe_0.filter(generic_0)
    var_1 = var_0.to_validation()
    bool_0 = False
    maybe_1 = module_0.Maybe(var_0, bool_0)
    maybe_2 = module_0.Maybe(var_1, generic_0)
    var_2 = maybe_0.ap(var_1)
    maybe_1.filter(maybe_0)


def test_case_23():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_try()
    maybe_0.ap(var_0)
