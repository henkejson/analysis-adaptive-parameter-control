# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1
import builtins as module_2


def test_case_0():
    bytes_0 = b']\x88ZL$\xe8\x18\xa3"'
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    bytes_0 = b"\xaf\xb4\xa5\xc2\xe3\xd9\x86\xaf!"
    int_0 = 0
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.map(bytes_0)
    bool_1 = maybe_0.__eq__(var_0)
    var_1 = var_0.to_validation()
    int_1 = 3559
    var_2 = maybe_0.filter(var_1)
    generic_0 = module_1.Generic()
    none_type_0 = None
    maybe_1 = module_0.Maybe(generic_0, none_type_0)
    maybe_1.ap(int_1)


def test_case_3():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.bind(none_type_0)
    var_1 = maybe_0.filter(bool_0)
    bool_1 = var_0.__eq__(bool_0)
    var_2 = var_0.get_or_else(var_1)
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    var_3 = var_1.to_box()
    var_3.map(maybe_1)


def test_case_4():
    int_0 = 1118
    maybe_0 = module_0.Maybe(int_0, int_0)
    none_type_0 = None
    var_0 = maybe_0.ap(none_type_0)
    var_1 = maybe_0.map(maybe_0)
    var_2 = maybe_0.to_either()
    var_3 = var_2.to_box()
    var_4 = var_3.ap(var_1)
    var_5 = var_4.to_try()
    var_5.to_lazy()


def test_case_5():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.map(none_type_0)


def test_case_6():
    tuple_0 = ()
    none_type_0 = None
    maybe_0 = module_0.Maybe(tuple_0, tuple_0)
    maybe_0.bind(none_type_0)


def test_case_7():
    complex_0 = -622.3355 + 1089.9868707893602j
    maybe_0 = module_0.Maybe(complex_0, complex_0)
    var_0 = maybe_0.ap(maybe_0)
    var_1 = maybe_0.filter(var_0)
    none_type_0 = None
    var_2 = maybe_0.to_try()
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1.filter(none_type_0)


def test_case_8():
    int_0 = -1127
    bytes_0 = b"\x90\xaa\x13\x82\xce\xc88J\xb0\nY\xb9\xba\xe0"
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.filter(int_0)
    bool_1 = True
    int_1 = 991
    maybe_1 = module_0.Maybe(bool_1, int_1)


def test_case_9():
    complex_0 = -622.3355 + 1089.9868707893602j
    maybe_0 = module_0.Maybe(complex_0, complex_0)
    var_0 = maybe_0.filter(maybe_0)
    none_type_0 = None
    var_1 = maybe_0.to_try()
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1.filter(none_type_0)


def test_case_10():
    none_type_0 = None
    object_0 = module_2.object()
    tuple_0 = (object_0,)
    maybe_0 = module_0.Maybe(tuple_0, tuple_0)
    var_0 = maybe_0.filter(none_type_0)
    var_1 = var_0.get_or_else(none_type_0)
    maybe_1 = module_0.Maybe(none_type_0, var_1)


def test_case_11():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_try()
    bool_1 = True
    var_1 = maybe_0.to_lazy()
    maybe_1 = module_0.Maybe(none_type_0, bool_1)
    var_2 = maybe_1.ap(var_1)
    var_3 = maybe_0.get_or_else(maybe_0)
    var_4 = maybe_1.to_try()
    var_5 = maybe_1.map(var_2)
    var_6 = var_2.bind(var_4)
    var_7 = maybe_1.filter(none_type_0)
    maybe_2 = module_0.Maybe(bool_1, var_0)
    var_8 = var_1.to_validation()
    var_9 = maybe_2.to_box()


def test_case_12():
    complex_0 = -500.5 - 1164.29j
    str_0 = "\n        If Maybe is empty or filterer returns False return default_value, in other case\n        return new instance of Maybe with the same value.\n\n        :param filterer:\n        :type filterer: Function(A) -> Boolean\n        :returns: copy of self when filterer returns True, in other case empty Maybe\n        :rtype: Maybe[A] | Maybe[None]\n        "
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.bind(complex_0)
    var_2 = var_1.to_lazy()


def test_case_13():
    bool_0 = False
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_box()
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    var_2 = maybe_1.to_try()
    var_2.to_lazy()


def test_case_14():
    int_0 = -1127
    bytes_0 = b"\x90\xaa\x13\x82\xce\xc88J\xb0\nY\xb9\xba\xe0"
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.filter(int_0)
    maybe_1 = var_0.to_box()


def test_case_15():
    none_type_0 = None
    int_0 = 1183
    none_type_1 = None
    maybe_0 = module_0.Maybe(int_0, none_type_1)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_lazy()
    bool_0 = True
    maybe_1 = module_0.Maybe(var_1, bool_0)
    var_2 = maybe_1.filter(none_type_0)
    var_3 = var_2.to_either()


def test_case_16():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    none_type_0 = None
    var_0 = maybe_0.ap(none_type_0)
    bool_1 = maybe_0.__eq__(bool_0)
    var_1 = maybe_0.to_validation()
    maybe_1 = var_0.filter(bool_0)
    var_2 = maybe_1.to_box()
    var_3 = maybe_0.to_lazy()
    bool_2 = True
    maybe_2 = module_0.Maybe(bool_2, var_0)
    var_4 = var_0.filter(bool_2)
    var_5 = var_2.to_either()


def test_case_17():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, none_type_0)
    none_type_1 = None
    maybe_1 = module_0.Maybe(bool_0, none_type_1)
    var_0 = maybe_1.to_lazy()
    var_1 = var_0.map(none_type_0)


def test_case_18():
    none_type_0 = None
    none_type_1 = None
    object_0 = module_2.object()
    tuple_0 = (object_0,)
    maybe_0 = module_0.Maybe(tuple_0, tuple_0)
    var_0 = maybe_0.filter(none_type_1)
    var_1 = var_0.get_or_else(none_type_0)
    bool_0 = False
    none_type_2 = None
    maybe_1 = module_0.Maybe(bool_0, none_type_2)
    var_2 = maybe_1.to_try()


def test_case_19():
    generic_0 = module_1.Generic()
    int_0 = 1127
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.to_validation()
    var_1 = var_0.to_try()
    var_1.ap(generic_0)


def test_case_20():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = var_0.to_box()


def test_case_21():
    bool_0 = True
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.get_or_else(maybe_0)
    str_0 = "\n    Data type for storage any type of function.\n    This function (and all his mappers) will be called only during calling fold method\n    "
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    var_2 = maybe_0.bind(var_1)
    maybe_1 = module_0.Maybe(dict_0, str_0)
    var_3 = maybe_1.bind(maybe_1)
    var_4 = var_3.to_validation()
    var_5 = maybe_1.to_try()
    var_6 = var_3.ap(str_0)
    bool_2 = maybe_0.__eq__(maybe_1)
    bool_3 = var_2.__eq__(dict_0)
    var_7 = maybe_1.filter(maybe_1)
    var_8 = var_7.to_lazy()
    var_9 = var_8.to_validation()
    var_10 = var_2.map(var_9)


def test_case_22():
    bool_0 = True
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_validation()
    bool_2 = False
    set_0 = {bool_2, bool_2, bool_2}
    bool_3 = True
    maybe_1 = module_0.Maybe(set_0, bool_3)
    var_1 = maybe_0.get_or_else(maybe_0)
    str_0 = "\n    Data type for storage any type of function.\n    This function (and all his mappers) will be called only during calling fold method\n    "
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    var_2 = maybe_0.bind(var_1)
    bool_4 = False
    maybe_2 = module_0.Maybe(dict_0, bool_4)
    var_3 = maybe_0.map(var_0)
    var_4 = var_3.filter(maybe_1)
    var_5 = var_4.bind(var_0)
    var_6 = maybe_0.to_validation()
    var_7 = maybe_0.to_validation()
    var_8 = var_7.to_try()
    var_9 = var_2.get_or_else(var_4)
    var_10 = var_9.ap(maybe_2)
    bool_5 = True
    bool_6 = maybe_0.__eq__(bool_5)
    bool_7 = maybe_2.__eq__(maybe_2)
    var_11 = var_2.to_try()
    var_12 = var_11.filter(var_5)
    var_13 = var_2.to_lazy()
    var_13.get_or_else(var_11)
