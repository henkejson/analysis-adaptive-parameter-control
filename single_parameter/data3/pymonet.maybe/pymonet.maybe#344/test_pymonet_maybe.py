# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = maybe_0.__eq__(maybe_0)


def test_case_3():
    bytes_0 = b"~\x03"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    bool_0 = maybe_0.__eq__(bytes_0)
    var_0 = maybe_0.filter(bytes_0)
    maybe_1 = module_0.Maybe(bytes_0, bool_0)
    maybe_1.filter(maybe_1)


def test_case_4():
    str_0 = "N7_-]1;^k:AU'$\\]"
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.ap(bool_0)
    var_1 = var_0.map(bool_0)
    var_2 = var_1.ap(bool_0)
    var_3 = var_2.filter(str_0)
    var_4 = var_3.to_either()
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    var_5 = maybe_1.to_either()
    var_6 = maybe_1.to_validation()
    bool_1 = True
    maybe_2 = module_0.Maybe(bool_0, bool_1)
    maybe_3 = module_0.Maybe(str_0, bool_0)
    var_7 = maybe_3.to_try()


def test_case_5():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_try()
    maybe_0.map(var_0)


def test_case_6():
    tuple_0 = ()
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.get_or_else(bool_0)
    var_1 = maybe_0.bind(none_type_0)
    var_2 = var_1.ap(tuple_0)


def test_case_7():
    dict_0 = {}
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    maybe_0.bind(dict_0)


def test_case_8():
    none_type_0 = None
    none_type_1 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    tuple_0 = ()
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.bind(var_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(none_type_1, tuple_0)
    maybe_1.ap(bool_1)


def test_case_9():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    none_type_0 = None
    maybe_0.filter(none_type_0)


def test_case_10():
    bool_0 = False
    str_0 = "\n        It takes as a parameter function returning another Validation.\n        Function is called with Validation value and returns new Validation with previous value\n        and concated new and old errors.\n\n        :param monad: monad contains function\n        :type monad: Function(A) -> Validation[Any, List[E]]\n        :returns: new validation with stored errors\n        :rtype: Validation[A, List[E]]\n        "
    set_0 = {str_0, str_0, str_0}
    bool_1 = False
    maybe_0 = module_0.Maybe(set_0, bool_1)
    var_0 = maybe_0.get_or_else(bool_0)


def test_case_11():
    bytes_0 = b"~\x03"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    bool_0 = maybe_0.__eq__(bytes_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.filter(var_0)
    maybe_1 = module_0.Maybe(bytes_0, bool_0)
    maybe_1.filter(maybe_1)


def test_case_12():
    tuple_0 = ()
    list_0 = [tuple_0]
    bool_0 = False
    maybe_0 = module_0.Maybe(list_0, bool_0)
    var_0 = maybe_0.to_either()
    var_0.filter(var_0)


def test_case_13():
    bytes_0 = b"~\x03"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    bool_0 = maybe_0.__eq__(bytes_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.filter(var_0)
    maybe_1 = module_0.Maybe(bytes_0, bool_0)
    maybe_1.filter(maybe_1)


def test_case_14():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_box()
    var_0.to_box()


def test_case_15():
    complex_0 = -733.8013 - 353.0307j
    list_0 = [complex_0]
    float_0 = 1356.98
    maybe_0 = module_0.Maybe(float_0, float_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.ap(list_0)


def test_case_16():
    bytes_0 = b"~\x03"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    bool_1 = maybe_0.__eq__(bool_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.filter(var_0)
    var_2 = var_1.to_try()
    maybe_1 = module_0.Maybe(bytes_0, bool_1)
    var_3 = maybe_1.to_lazy()
    maybe_1.filter(var_2)


def test_case_17():
    bytes_0 = b"~\x03"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_try()
    bool_0 = maybe_0.__eq__(var_0)
    var_1 = maybe_0.filter(bool_0)
    maybe_1 = module_0.Maybe(bytes_0, bool_0)
    maybe_1.filter(maybe_1)


def test_case_18():
    bool_0 = False
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_try()
    var_0.to_try()


def test_case_19():
    bytes_0 = b"~\x03"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    bool_0 = maybe_0.__eq__(bytes_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.filter(var_0)
    maybe_1 = module_0.Maybe(bytes_0, bool_0)
    maybe_1.filter(maybe_1)


def test_case_20():
    int_0 = 0
    bool_0 = False
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_0.ap(int_0)


def test_case_21():
    bytes_0 = b"\xd9\x8e\x9b{\x81\xd6jKf\xee\xc7R\xceP\xb3\xca\xfe6~{"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_either()
    var_2 = var_1.to_box()
    var_3 = var_2.to_try()
    tuple_0 = ()
    dict_0 = {}
    maybe_1 = module_0.Maybe(dict_0, dict_0)
    var_4 = maybe_1.to_try()
    bool_0 = True
    maybe_2 = module_0.Maybe(maybe_1, bool_0)
    var_5 = maybe_2.to_validation()
    var_6 = var_5.to_try()
    var_6.map(tuple_0)


def test_case_22():
    float_0 = -1436.857
    bool_0 = False
    maybe_0 = module_0.Maybe(float_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_try()
    none_type_0 = None
    bool_1 = False
    maybe_1 = module_0.Maybe(none_type_0, bool_1)
    var_2 = maybe_1.to_lazy()
    var_3 = var_2.to_try()


def test_case_23():
    bytes_0 = b"~\x03"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    bool_1 = maybe_0.__eq__(bool_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.filter(var_0)
    maybe_1 = module_0.Maybe(bytes_0, bool_1)
    maybe_1.filter(var_0)


def test_case_24():
    none_type_0 = None
    generic_0 = module_1.Generic()
    str_0 = ""
    maybe_0 = module_0.Maybe(none_type_0, generic_0)
    var_0 = maybe_0.filter(none_type_0)
    var_1 = var_0.map(none_type_0)
    bool_0 = maybe_0.__eq__(var_0)
    var_2 = var_1.to_box()
    var_3 = maybe_0.to_either()
    var_4 = var_0.filter(str_0)
    var_5 = var_4.to_either()
    list_0 = [generic_0, generic_0, generic_0, generic_0]
    maybe_1 = module_0.Maybe(list_0, generic_0)
    var_6 = maybe_1.get_or_else(none_type_0)
    var_6.to_box()
