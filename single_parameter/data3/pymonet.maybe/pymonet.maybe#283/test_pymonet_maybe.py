# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    list_0 = []
    maybe_0 = module_0.Maybe(list_0, list_0)


def test_case_2():
    int_0 = 1024
    set_0 = {int_0, int_0}
    maybe_0 = module_0.Maybe(set_0, int_0)
    var_0 = maybe_0.ap(set_0)
    var_1 = var_0.get_or_else(set_0)
    bool_0 = maybe_0.__eq__(var_0)
    var_2 = maybe_0.to_try()
    var_2.to_either()


def test_case_3():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = maybe_0.__eq__(bool_0)
    var_0 = maybe_0.filter(maybe_0)
    maybe_1 = module_0.Maybe(bool_1, bool_1)
    maybe_1.filter(bool_0)


def test_case_4():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.filter(maybe_0)
    var_1 = maybe_0.map(bool_0)
    var_2 = maybe_0.get_or_else(maybe_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1.filter(bool_0)


def test_case_5():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_box()
    maybe_0.map(maybe_0)


def test_case_6():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = maybe_0.__eq__(bool_0)
    var_0 = maybe_0.filter(maybe_0)
    var_1 = var_0.bind(var_0)
    var_2 = var_1.map(bool_1)
    var_3 = maybe_0.get_or_else(maybe_0)
    float_0 = 572.074
    none_type_0 = None
    maybe_1 = module_0.Maybe(float_0, none_type_0)
    maybe_1.filter(bool_0)


def test_case_7():
    complex_0 = 1085 - 1608.3j
    none_type_0 = None
    maybe_0 = module_0.Maybe(complex_0, none_type_0)
    str_0 = '\\PG[=(\x0c~"v\x0b\rY(K%\n[SO'
    none_type_1 = None
    maybe_1 = module_0.Maybe(str_0, none_type_1)
    maybe_1.bind(maybe_0)


def test_case_8():
    str_0 = ""
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.to_try()
    maybe_0.ap(str_0)


def test_case_9():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.filter(maybe_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1.filter(bool_0)


def test_case_10():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.filter(maybe_0)
    var_1 = maybe_0.get_or_else(maybe_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(bool_0, none_type_0)
    maybe_1.filter(bool_0)


def test_case_11():
    str_0 = "cBE3\n\tn@>C|Kb2"
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.get_or_else(str_0)
    var_0.map(bool_0)


def test_case_12():
    bytes_0 = b"\x1c\x9c\\\x98S\x8a\xaam\x9f\x9cTs\x01KzV\xce\xd5\x1aC"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    bool_0 = True
    maybe_0 = module_0.Maybe(list_0, bool_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_box()


def test_case_13():
    list_0 = []
    str_0 = "R+1jzB"
    maybe_0 = module_0.Maybe(str_0, list_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_try()
    var_1.to_try()


def test_case_14():
    int_0 = 1024
    set_0 = {int_0, int_0}
    maybe_0 = module_0.Maybe(set_0, int_0)
    var_0 = maybe_0.ap(set_0)
    var_1 = var_0.get_or_else(set_0)
    bool_0 = var_0.__eq__(var_0)
    var_2 = maybe_0.to_either()
    var_3 = maybe_0.to_try()
    var_4 = maybe_0.to_either()
    var_5 = var_2.to_box()
    var_6 = var_0.to_box()
    var_2.filter(bool_0)


def test_case_15():
    int_0 = 1024
    set_0 = {int_0, int_0}
    maybe_0 = module_0.Maybe(set_0, int_0)
    var_0 = maybe_0.ap(set_0)
    var_1 = var_0.get_or_else(set_0)
    bool_0 = var_0.__eq__(var_0)
    var_2 = var_0.to_either()
    var_3 = maybe_0.to_either()
    var_4 = maybe_0.to_try()
    var_5 = maybe_0.to_either()
    var_6 = var_2.map(var_1)
    var_7 = maybe_0.to_lazy()
    var_6.filter(var_2)


def test_case_16():
    list_0 = []
    maybe_0 = module_0.Maybe(list_0, list_0)
    var_0 = maybe_0.to_lazy()


def test_case_17():
    str_0 = "\n        Applies the function inside the Maybe[A] structure to another applicative type for notempty Maybe.\n        For empty returns copy of itself\n\n        :param applicative: applicative contains function\n        :type applicative: Maybe[B]\n        :returns: new Maybe with result of contains function\n        :rtype: Maybe[A(B) | None]\n        "
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_validation()
    maybe_1 = module_0.Maybe(maybe_0, var_0)
    var_1 = maybe_1.to_try()
    var_2 = var_1.get_or_else(var_1)
    maybe_0.bind(var_0)


def test_case_18():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_try()
    var_0.to_box()


def test_case_19():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    maybe_0 = module_0.Maybe(dict_0, bool_0)
    var_0 = maybe_0.to_validation()


def test_case_20():
    int_0 = 1682
    set_0 = set()
    bool_0 = False
    maybe_0 = module_0.Maybe(set_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = var_0.to_try()
    var_2 = var_1.get_or_else(int_0)


def test_case_21():
    list_0 = []
    complex_0 = 998.8925 - 4836j
    bytes_0 = b"\x0ch\x9a3f\xd2\xf2Zw^N*\xc1\x04\xee\xc8"
    maybe_0 = module_0.Maybe(complex_0, bytes_0)
    bool_0 = True
    none_type_0 = None
    bool_1 = maybe_0.__eq__(bool_0)
    var_0 = maybe_0.get_or_else(bytes_0)
    var_1 = maybe_0.filter(var_0)
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    var_2 = maybe_0.to_lazy()
    maybe_2 = module_0.Maybe(list_0, bool_0)
    var_3 = var_2.to_try()
    var_4 = maybe_0.to_either()
    var_5 = maybe_1.get_or_else(var_0)
    var_6 = maybe_2.to_lazy()
    var_7 = maybe_2.filter(var_3)


def test_case_22():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_try()


def test_case_23():
    int_0 = 1024
    set_0 = {int_0, int_0}
    maybe_0 = module_0.Maybe(set_0, int_0)
    var_0 = maybe_0.ap(set_0)
    var_1 = var_0.get_or_else(set_0)
    bool_0 = var_0.__eq__(var_0)
    var_2 = maybe_0.to_either()
    var_3 = maybe_0.to_try()
    var_4 = maybe_0.to_either()
    var_5 = var_4.to_lazy()
    var_5.to_lazy()


def test_case_24():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = maybe_1.__eq__(maybe_1)
    maybe_1.map(none_type_0)
