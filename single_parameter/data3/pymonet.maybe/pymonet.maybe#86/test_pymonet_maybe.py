# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1


def test_case_0():
    bytes_0 = b"\x1c\xd59dk!]\x83?"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)


def test_case_1():
    dict_0 = {}
    maybe_0 = module_0.Maybe(dict_0, dict_0)


def test_case_2():
    dict_0 = {}
    maybe_0 = module_0.Maybe(dict_0, dict_0)
    dict_1 = {}
    bool_0 = True
    maybe_1 = module_0.Maybe(dict_1, bool_0)
    var_0 = maybe_1.to_validation()
    bool_1 = maybe_0.__eq__(maybe_0)


def test_case_3():
    bool_0 = False
    dict_0 = {}
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.map(none_type_0)
    var_2 = var_1.to_try()
    bool_1 = True
    bool_2 = True
    maybe_1 = module_0.Maybe(bool_1, bool_2)
    var_3 = maybe_1.map(dict_0)
    bool_3 = var_3.__eq__(bool_0)
    bool_4 = True
    maybe_2 = module_0.Maybe(bool_4, bool_4)


def test_case_4():
    bytes_0 = b"\r\xe9\xc0l\xad<R\xbe\xbd`\xb1"
    set_0 = set()
    complex_0 = -1672.7773 - 1264.8j
    str_0 = "\n        Applies the function inside the Box[A] structure to another applicative type.\n\n        :param applicative: applicative contains function\n        :type applicative: Box[B]\n        :returns: new Box with result of contains function\n        :rtype: Box[A(B)]\n        "
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.ap(complex_0)
    var_1 = var_0.map(set_0)
    var_2 = var_1.to_box()
    bool_1 = var_2.__eq__(bytes_0)


def test_case_5():
    int_0 = -570
    bool_0 = False
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.to_validation()
    maybe_0.map(var_0)


def test_case_6():
    none_type_0 = None
    bool_0 = False
    float_0 = -2700.0
    maybe_0 = module_0.Maybe(float_0, float_0)
    var_0 = maybe_0.bind(bool_0)
    var_1 = var_0.get_or_else(none_type_0)
    var_1.to_lazy()


def test_case_7():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.bind(bool_0)


def test_case_8():
    generic_0 = module_1.Generic()
    bytes_0 = b"\xe2\x1e\xf4\x9dX\x15\xfb\x14\x1f:\xff~"
    bool_0 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    maybe_0.ap(generic_0)


def test_case_9():
    bool_0 = True
    dict_0 = {}
    maybe_0 = module_0.Maybe(dict_0, bool_0)
    var_0 = maybe_0.filter(bool_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(maybe_0, none_type_0)
    maybe_1.filter(bool_0)


def test_case_10():
    int_0 = 0
    none_type_0 = None
    maybe_0 = module_0.Maybe(int_0, none_type_0)
    complex_0 = -13.57 - 2912.21285j
    bool_0 = True
    maybe_1 = module_0.Maybe(complex_0, bool_0)
    var_0 = maybe_1.to_try()
    var_1 = maybe_1.bind(var_0)
    maybe_2 = module_0.Maybe(complex_0, bool_0)
    bool_1 = False
    var_2 = maybe_1.to_either()
    maybe_3 = module_0.Maybe(bool_1, bool_1)
    var_3 = var_2.to_box()
    bool_2 = False
    var_4 = maybe_3.to_try()
    maybe_4 = module_0.Maybe(var_2, bool_2)
    var_5 = maybe_2.get_or_else(maybe_3)
    var_6 = maybe_2.filter(var_5)
    var_7 = maybe_3.get_or_else(complex_0)
    maybe_3.filter(maybe_2)


def test_case_11():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = True
    maybe_1 = module_0.Maybe(bool_1, bool_1)
    var_0 = maybe_1.to_either()
    var_1 = var_0.to_box()
    var_2 = var_1.to_try()
    var_2.map(maybe_0)


def test_case_12():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_either()
    var_0.filter(var_0)


def test_case_13():
    bool_0 = False
    dict_0 = {}
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.to_box()
    var_2 = var_1.to_try()
    bool_1 = True
    bool_2 = True
    maybe_1 = module_0.Maybe(bool_1, bool_2)
    var_3 = maybe_1.map(dict_0)
    bool_3 = var_3.__eq__(bool_0)
    bool_4 = True
    maybe_2 = module_0.Maybe(bool_4, bool_4)


def test_case_14():
    none_type_0 = None
    complex_0 = -3593.91 + 440.3j
    int_0 = -188
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.filter(complex_0)
    var_1 = var_0.to_lazy()
    var_2 = var_1.to_try()
    var_3 = var_2.get_or_else(none_type_0)
    var_3.to_validation()


def test_case_15():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_try()


def test_case_16():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_try()
    var_0.to_try()


def test_case_17():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_validation()
    var_0.to_validation()


def test_case_18():
    str_0 = "+UraC4{.D"
    bytes_0 = b"\x1c\xd59dk!]\x83?"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.filter(str_0)
    maybe_1 = module_0.Maybe(str_0, str_0)
    var_1 = maybe_1.to_lazy()
    bool_0 = maybe_1.__eq__(var_0)
    var_2 = maybe_1.ap(var_0)
    var_3 = var_2.to_validation()
    var_4 = maybe_1.to_lazy()


def test_case_19():
    str_0 = "+UraC4{.D"
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.ap(bool_0)
    var_1 = var_0.ap(bool_0)
    var_2 = var_1.bind(bool_0)
    bool_1 = var_0.__eq__(var_2)
    var_3 = var_2.to_validation()
    var_4 = var_1.bind(var_0)
    var_5 = var_2.to_box()
    var_5.bind(str_0)
