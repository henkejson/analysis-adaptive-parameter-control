# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1


def test_case_0():
    bytes_0 = b"\xb4=\xd4\xe0O\x0b"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    generic_0 = module_1.Generic()
    maybe_1 = module_0.Maybe(generic_0, generic_0)
    var_0 = maybe_1.to_validation()
    maybe_2 = module_0.Maybe(generic_0, generic_0)
    var_1 = maybe_1.map(var_0)
    bool_1 = maybe_0.__eq__(var_1)
    var_2 = maybe_1.filter(maybe_1)
    maybe_0.filter(generic_0)


def test_case_3():
    float_0 = -690.45815
    float_1 = 724.0
    bool_0 = True
    maybe_0 = module_0.Maybe(float_1, bool_0)
    bool_1 = maybe_0.__eq__(float_0)


def test_case_4():
    float_0 = -804.14004
    bool_0 = False
    maybe_0 = module_0.Maybe(float_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.ap(float_0)
    var_2 = var_1.to_try()
    bool_1 = True
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, bool_1)
    var_3 = maybe_1.filter(float_0)
    bool_2 = var_3.__eq__(none_type_0)
    var_4 = maybe_1.map(bool_2)
    var_2.to_try()


def test_case_5():
    complex_0 = 1494.742 - 1984j
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(complex_0, bool_0)
    maybe_0.bind(none_type_0)


def test_case_6():
    none_type_0 = None
    generic_0 = module_1.Generic()
    bool_0 = True
    maybe_0 = module_0.Maybe(generic_0, bool_0)
    var_0 = maybe_0.ap(none_type_0)
    var_1 = var_0.to_try()
    var_1.to_validation()


def test_case_7():
    none_type_0 = None
    bool_0 = True
    bool_1 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_1)
    maybe_0.ap(bool_0)


def test_case_8():
    int_0 = 1
    bool_0 = False
    float_0 = 3765.97
    bool_1 = True
    maybe_0 = module_0.Maybe(float_0, bool_1)
    var_0 = maybe_0.get_or_else(bool_0)
    var_0.ap(int_0)


def test_case_9():
    float_0 = 1985.0
    none_type_0 = None
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    none_type_1 = None
    maybe_0 = module_0.Maybe(set_0, none_type_1)
    var_0 = maybe_0.get_or_else(none_type_0)
    var_0.get_or_else(float_0)


def test_case_10():
    str_0 = "_)mo$hHDK*R.0'"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.to_either()
    str_1 = "}@W"
    list_0 = [str_1]
    maybe_1 = module_0.Maybe(str_1, list_0)
    var_1 = maybe_1.to_either()
    var_1.get_or_else(var_0)


def test_case_11():
    str_0 = "?49[n<"
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_box()


def test_case_12():
    float_0 = 2924.248
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    maybe_1 = module_0.Maybe(float_0, float_0)
    var_0 = maybe_1.get_or_else(maybe_1)
    var_1 = maybe_1.to_box()
    var_2 = maybe_1.filter(var_0)
    var_3 = maybe_1.to_either()
    var_4 = var_3.to_lazy()
    maybe_0.filter(float_0)


def test_case_13():
    str_0 = "pEw^m|["
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_1.to_box()
    maybe_2 = module_0.Maybe(maybe_1, var_0)
    var_1 = maybe_1.to_validation()
    var_0.ap(maybe_1)


def test_case_14():
    str_0 = "Maybe[None]"
    int_0 = 64
    set_0 = {str_0, int_0, int_0}
    int_1 = -245
    maybe_0 = module_0.Maybe(int_1, int_1)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.bind(set_0)
    var_2 = var_1.to_try()


def test_case_15():
    dict_0 = {}
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_try()
    var_1 = var_0.bind(dict_0)
    var_1.to_validation()


def test_case_16():
    bool_0 = True
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.to_try()


def test_case_17():
    bool_0 = True
    list_0 = [bool_0]
    generic_0 = module_1.Generic()
    tuple_0 = (list_0, generic_0, list_0)
    maybe_0 = module_0.Maybe(bool_0, tuple_0)
    var_0 = maybe_0.to_validation()
    var_0.bind(var_0)


def test_case_18():
    int_0 = 1278
    set_0 = {int_0}
    tuple_0 = (int_0, int_0, set_0, set_0)
    int_1 = 593
    none_type_0 = None
    maybe_0 = module_0.Maybe(int_1, none_type_0)
    var_0 = maybe_0.to_validation()
    var_0.ap(tuple_0)


def test_case_19():
    bool_0 = True
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_lazy()
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    var_1 = maybe_1.to_try()
    var_2 = maybe_1.to_try()
    none_type_0 = None
    var_3 = maybe_1.to_validation()
    var_4 = maybe_1.get_or_else(none_type_0)
    var_5 = maybe_1.filter(maybe_1)
    var_6 = var_0.to_try()
    var_7 = var_1.map(var_0)
    maybe_2 = module_0.Maybe(var_6, bool_1)
    var_8 = var_1.get_or_else(bool_0)
    var_8.to_box()


def test_case_20():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.get_or_else(none_type_0)
    var_1.to_try()


def test_case_21():
    float_0 = -180.509518
    bool_0 = False
    maybe_0 = module_0.Maybe(float_0, bool_0)
    var_0 = maybe_0.to_lazy()
    generic_0 = module_1.Generic()
    maybe_1 = module_0.Maybe(generic_0, generic_0)
    var_1 = maybe_1.to_validation()
    var_2 = maybe_1.ap(maybe_1)
    none_type_0 = None
    bool_1 = True
    maybe_2 = module_0.Maybe(generic_0, bool_1)
    var_3 = maybe_2.ap(none_type_0)
    var_4 = var_3.bind(generic_0)
    var_5 = var_3.ap(var_3)
    bool_2 = var_3.__eq__(var_5)
    var_6 = var_4.to_box()
    var_7 = var_6.to_validation()
    var_8 = var_4.map(var_6)
    var_6.filter(var_7)


def test_case_22():
    float_0 = -180.509518
    bool_0 = False
    maybe_0 = module_0.Maybe(float_0, bool_0)
    var_0 = maybe_0.to_lazy()
    generic_0 = module_1.Generic()
    maybe_1 = module_0.Maybe(generic_0, generic_0)
    var_1 = maybe_1.to_validation()
    var_2 = maybe_1.ap(maybe_1)
    none_type_0 = None
    maybe_2 = module_0.Maybe(generic_0, var_0)
    var_3 = maybe_2.ap(none_type_0)
    var_4 = var_3.ap(var_3)
    bool_1 = var_3.__eq__(var_4)
    var_5 = var_3.to_box()
    var_6 = var_5.to_validation()
    var_7 = maybe_1.to_lazy()
    var_8 = var_2.filter(var_7)
    maybe_0.filter(generic_0)
