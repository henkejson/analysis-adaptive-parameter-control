# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    bytes_0 = b"\x0558YMN\xea\x13\xf5\xc8U\x0e^t\x95CL\xec\xc6l"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    none_type_0 = None
    int_0 = 4456
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.ap(none_type_0)
    var_1 = maybe_0.bind(var_0)
    list_0 = []
    none_type_1 = None
    maybe_1 = module_0.Maybe(list_0, none_type_1)
    var_2 = var_1.filter(var_0)
    bool_1 = maybe_1.__eq__(var_0)


def test_case_3():
    complex_0 = 1071.1 - 1763.02j
    bytes_0 = b"\xdc\x82u/B;\x10OB\x1dS\x88\x0fhRm\x83"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.map(complex_0)
    bool_0 = var_0.__eq__(bytes_0)
    var_1 = var_0.to_try()
    var_2 = maybe_0.bind(maybe_0)
    var_3 = var_0.to_either()
    var_4 = var_3.to_try()
    var_5 = var_4.filter(bytes_0)


def test_case_4():
    float_0 = 2518.18
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.map(float_0)


def test_case_5():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.get_or_else(none_type_0)
    maybe_0.bind(var_0)


def test_case_6():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.to_box()
    maybe_0.ap(none_type_0)


def test_case_7():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.filter(none_type_0)
    var_1 = var_0.to_validation()
    bool_1 = False
    maybe_1 = module_0.Maybe(bool_0, bool_1)
    maybe_1.filter(none_type_0)


def test_case_8():
    none_type_0 = None
    int_0 = 4456
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.ap(none_type_0)
    var_1 = maybe_0.get_or_else(var_0)
    var_2 = maybe_0.bind(var_0)
    list_0 = []
    none_type_1 = None
    maybe_1 = module_0.Maybe(list_0, none_type_1)
    var_3 = var_2.filter(var_0)
    bool_1 = maybe_1.__eq__(var_0)


def test_case_9():
    bool_0 = False
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.get_or_else(bool_0)
    var_0.to_box()


def test_case_10():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_either()
    var_0.get_or_else(none_type_0)


def test_case_11():
    bytes_0 = b"\x0558YMN\xea\x13\xf5\xc8U\x0e^t\x95CL\xec\xc6l"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_box()


def test_case_12():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_box()
    var_0.get_or_else(none_type_0)


def test_case_13():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.filter(none_type_0)
    var_1 = var_0.to_validation()
    generic_0 = var_0.to_lazy()
    bool_1 = False
    maybe_1 = module_0.Maybe(generic_0, bool_1)
    maybe_1.filter(none_type_0)


def test_case_14():
    dict_0 = {}
    bool_0 = False
    maybe_0 = module_0.Maybe(dict_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_validation()
    var_2 = var_1.to_try()
    var_2.to_validation()


def test_case_15():
    str_0 = "_%F9{X"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.to_try()
    var_0.to_lazy()


def test_case_16():
    complex_0 = 1071.1 - 1763.02j
    bytes_0 = b"\xdc\x82u/B;\x10OB\x1dS\x88\x0fhRm\x83"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.map(complex_0)
    bool_0 = var_0.__eq__(bytes_0)
    maybe_1 = module_0.Maybe(var_0, bool_0)
    var_1 = var_0.to_try()
    var_2 = maybe_0.bind(maybe_0)
    none_type_0 = None
    maybe_2 = module_0.Maybe(var_1, none_type_0)
    var_3 = var_2.bind(var_1)
    var_4 = maybe_2.to_validation()
    var_5 = maybe_0.filter(var_1)
    var_6 = var_0.to_try()
    var_7 = maybe_1.to_try()
    var_8 = var_5.map(maybe_0)
    var_9 = var_2.to_either()


def test_case_17():
    complex_0 = 1071.1 - 1763.02j
    bytes_0 = b"\x82\xa7,5\xf6\x0c-\xe4#\xa3\x12\x07\x94\xdb4Vja\x88"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.map(complex_0)
    var_1 = var_0.to_try()
    maybe_1 = module_0.Maybe(var_1, var_1)
    var_2 = maybe_0.bind(maybe_0)
    var_3 = var_0.to_validation()
    var_4 = maybe_1.get_or_else(maybe_1)
    var_5 = var_4.to_try()
    bool_0 = var_2.__eq__(var_4)
    var_6 = var_5.filter(bytes_0)


def test_case_18():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = var_0.to_lazy()


def test_case_19():
    none_type_0 = None
    none_type_0.to_lazy()


def test_case_20():
    int_0 = 679
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.filter(var_0)
    var_2 = var_1.to_box()
    var_3 = maybe_0.filter(var_2)
    var_4 = maybe_0.map(maybe_0)
    var_5 = maybe_0.to_lazy()
    bool_0 = var_5.__eq__(maybe_0)
    var_6 = maybe_0.to_validation()
    var_7 = var_5.to_try()
    var_8 = maybe_0.filter(int_0)
    var_9 = maybe_0.to_either()
    var_10 = maybe_0.to_lazy()
    var_10.to_lazy()


def test_case_21():
    int_0 = 679
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.filter(var_0)
    var_2 = var_1.to_box()
    var_3 = maybe_0.filter(var_2)
    var_4 = maybe_0.map(maybe_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_5 = maybe_0.to_validation()
    var_6 = var_3.to_try()
    var_7 = maybe_0.filter(int_0)
    var_8 = maybe_0.to_either()
    var_9 = maybe_0.to_lazy()
    var_9.to_lazy()


def test_case_22():
    none_type_0 = None
    int_0 = 1555
    maybe_0 = module_0.Maybe(none_type_0, int_0)
    var_0 = maybe_0.to_lazy()
    bool_0 = False
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = maybe_1.__eq__(maybe_1)
    var_1 = maybe_1.to_either()
    var_2 = maybe_1.to_either()
    var_1.filter(var_2)
