# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    bytes_0 = b'\xcf\x0b\xd9\xc33\xc7P\xddh\xf5\x84\xde+"P\xd7'
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.to_validation()
    str_0 = "yN2_:G{s$\\~"
    list_0 = [str_0, str_0, str_0]
    bool_2 = True
    var_2 = var_0.ap(bool_2)
    maybe_1 = module_0.Maybe(list_0, list_0)
    var_3 = maybe_1.to_lazy()
    var_1.filter(var_1)


def test_case_3():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    str_0 = "!\x0b)cmLN@/"
    bool_2 = True
    var_0 = maybe_0.to_lazy()
    maybe_1 = module_0.Maybe(str_0, bool_2)
    bool_3 = maybe_1.__eq__(bool_2)
    var_1 = maybe_1.to_validation()
    str_1 = "yN2_:G{s$\\~"
    list_0 = [str_1, str_1, str_1]
    var_2 = maybe_1.ap(var_1)
    maybe_2 = module_0.Maybe(list_0, list_0)
    var_3 = maybe_2.to_lazy()
    var_1.filter(var_1)


def test_case_4():
    bytes_0 = b"\xbe\xe7\xa5\xe7\x87\xee\x8b\x82\xf9\x7f\x08\xfc\xa2\x90"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.bind(maybe_0)
    var_1 = maybe_0.to_box()
    var_2 = var_0.bind(var_0)
    var_3 = var_2.bind(var_1)
    var_4 = var_2.to_box()
    var_5 = maybe_0.map(var_4)
    var_6 = maybe_0.to_either()
    var_4.get_or_else(maybe_0)


def test_case_5():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.get_or_else(bool_0)
    var_1 = maybe_0.to_box()
    var_2 = maybe_0.to_try()
    maybe_0.map(var_2)


def test_case_6():
    bytes_0 = b"\xe2\x1cZ\x15\x02|}"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    maybe_0 = module_0.Maybe(dict_0, dict_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_lazy()
    var_2 = maybe_0.bind(var_1)
    var_3 = var_1.to_validation()
    var_4 = var_3.to_lazy()
    var_4.to_lazy()


def test_case_7():
    none_type_0 = None
    none_type_1 = None
    maybe_0 = module_0.Maybe(none_type_1, none_type_1)
    maybe_0.bind(none_type_0)


def test_case_8():
    bytes_0 = b",\xb7\x95K\x84m\x16\xfa"
    bool_0 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    str_0 = "\n        Returns new ImmutableList with only this elements that passed\n        info argument returns True\n\n        :param fn: function to call with ImmutableList value\n        :type fn: Function(A) -> bool\n        :returns: ImmutableList[A]\n        "
    bool_1 = True
    maybe_1 = module_0.Maybe(str_0, bool_1)
    var_0 = maybe_1.to_lazy()
    var_1 = maybe_1.get_or_else(maybe_1)
    var_2 = maybe_1.ap(bytes_0)
    var_3 = var_1.filter(var_1)


def test_case_9():
    bool_0 = False
    str_0 = "Cjh$\r)"
    tuple_0 = (str_0,)
    none_type_0 = None
    maybe_0 = module_0.Maybe(tuple_0, none_type_0)
    maybe_0.ap(bool_0)


def test_case_10():
    str_0 = "\n        Returns new ImmutableList with only this elements that passed\n        info argument returns True\n\n        :param fn: function to call with ImmutableList value\n        :type fn: Function(A) -> bool\n        :returns: ImmutableList[A]\n        "
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.get_or_else(maybe_0)
    var_2 = var_1.filter(var_1)


def test_case_11():
    bytes_0 = b",\xb7\x95K\x84m\x16\xfa"
    bool_0 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    str_0 = "\n        Returns new ImmutableList with only this elements that passed\n        info argument returns True\n\n        :param fn: function to call with ImmutableList value\n        :type fn: Function(A) -> bool\n        :returns: ImmutableList[A]\n        "
    bool_1 = True
    maybe_1 = module_0.Maybe(str_0, bool_1)
    var_0 = maybe_1.to_lazy()
    var_1 = maybe_1.get_or_else(maybe_1)
    var_2 = maybe_1.ap(bytes_0)
    var_3 = var_1.filter(var_1)
    maybe_0.filter(var_0)


def test_case_12():
    int_0 = -680
    bytes_0 = b"3P\x19H\xae\xad\xdcF$W~"
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_validation()
    maybe_1 = module_0.Maybe(bytes_0, bool_0)
    var_2 = maybe_1.get_or_else(int_0)


def test_case_13():
    float_0 = -3852.0
    maybe_0 = module_0.Maybe(float_0, float_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_try()
    var_1.ap(float_0)


def test_case_14():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = maybe_0.__eq__(bool_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_validation()
    var_1.get_or_else(bool_0)


def test_case_15():
    str_0 = "~0/UI5O*^g["
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_box()
    none_type_0 = None
    bool_1 = False
    str_1 = "\n        Transform Lazy into Try with constructor_fn result.\n        Try will be successful only when constructor_fn not raise anything.\n\n        :returns: Try with constructor_fn result\n        :rtype: Try[A] | Try[Error]\n        "
    maybe_1 = module_0.Maybe(str_1, str_1)
    var_1 = maybe_1.get_or_else(bool_1)
    var_1.ap(none_type_0)


def test_case_16():
    bytes_0 = b"\xbe\xe7\xa5\xe7\x87\xee\x8b\x82\xf9\x7f\x08\xfc\xa2\x90"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.bind(maybe_0)
    var_2 = var_1.bind(var_0)
    var_3 = var_1.to_box()
    var_4 = maybe_0.map(var_3)
    maybe_1 = module_0.Maybe(var_1, var_3)
    var_5 = maybe_1.to_box()
    var_6 = maybe_1.to_try()
    var_7 = var_1.bind(var_4)
    var_8 = var_6.get_or_else(var_2)
    var_9 = var_7.filter(var_7)
    var_10 = var_6.get_or_else(var_7)
    var_11 = maybe_0.to_lazy()
    var_12 = maybe_1.bind(var_11)


def test_case_17():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_try()
    var_0.to_lazy()


def test_case_18():
    bytes_0 = b",\xb7\x95K\x84m\x16\xfa"
    bool_0 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    str_0 = "\n        Returns new ImmutableList with only this elements that passed\n        info argument returns True\n\n        :param fn: function to call with ImmutableList value\n        :type fn: Function(A) -> bool\n        :returns: ImmutableList[A]\n        "
    bool_1 = True
    maybe_1 = module_0.Maybe(str_0, bool_1)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_1.get_or_else(maybe_1)
    var_2 = maybe_1.ap(bytes_0)
    var_3 = var_1.filter(var_1)
    maybe_0.filter(var_0)


def test_case_19():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_box()
    var_1.ap(var_1)


def test_case_20():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    str_0 = "!\x0b)cmLN@/"
    bool_2 = True
    var_0 = maybe_0.to_lazy()
    maybe_1 = module_0.Maybe(str_0, bool_2)
    bool_3 = maybe_1.__eq__(bool_2)
    var_1 = maybe_1.to_validation()
    str_1 = "yN2_:G{s$\\~"
    list_0 = [str_1, str_1, str_1]
    bool_4 = True
    var_2 = maybe_1.ap(bool_4)
    maybe_2 = module_0.Maybe(list_0, list_0)
    var_3 = maybe_2.to_lazy()
    var_1.filter(var_1)


def test_case_21():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    str_0 = "!\x0b)cms@/"
    bool_2 = False
    maybe_1 = module_0.Maybe(str_0, bool_2)
    bool_3 = maybe_1.__eq__(bool_2)
    var_0 = maybe_0.filter(str_0)
    str_1 = "yN:G{s$\\~"
    list_0 = [str_1, str_1, str_1]
    var_1 = var_0.to_box()
    maybe_2 = module_0.Maybe(list_0, list_0)
    var_2 = maybe_2.to_lazy()
    float_0 = 1034.41947
    var_3 = var_0.filter(var_0)
    bool_4 = maybe_2.__eq__(var_0)
    var_4 = var_3.map(var_2)
    var_5 = var_0.get_or_else(float_0)
    var_6 = maybe_2.ap(maybe_2)
    var_7 = var_6.to_validation()
    var_2.to_lazy()
