# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    bytes_0 = b"\xf5\xeb\xfd\xf0\xfe"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    float_0 = 2602.7448
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = True
    maybe_1 = module_0.Maybe(float_0, bool_0)
    var_0 = maybe_1.ap(float_0)
    bool_1 = maybe_1.__eq__(float_0)
    var_1 = var_0.filter(none_type_0)
    bool_2 = False
    maybe_2 = module_0.Maybe(var_0, bool_2)
    maybe_2.filter(none_type_0)


def test_case_3():
    none_type_0 = None
    bool_0 = True
    tuple_0 = (bool_0,)
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_validation()
    maybe_1 = module_0.Maybe(tuple_0, bool_0)
    var_2 = maybe_1.map(none_type_0)
    var_3 = var_2.to_either()


def test_case_4():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.map(none_type_0)


def test_case_5():
    none_type_0 = None
    bool_0 = True
    str_0 = "8*?@+9YF,"
    str_1 = "\n        Transform Maybe to Box.\n\n        :returns: Box monad with previous value when Maybe is not empty, in other case Box with None\n        :rtype: Box[A | None]\n        "
    maybe_0 = module_0.Maybe(none_type_0, str_1)
    var_0 = maybe_0.bind(bool_0)
    var_1 = var_0.filter(str_0)
    var_2 = var_1.ap(str_1)
    var_3 = var_2.ap(str_0)
    var_4 = var_3.to_try()
    var_4.to_box()


def test_case_6():
    str_0 = "_wq%a\nSK\\y.o_Cg"
    bool_0 = False
    float_0 = -1453.2
    bytes_0 = b"\x92r\x0f&\xe7\x19\x90\xf8#\xd6\xcd\x10"
    list_0 = [bool_0, float_0, bytes_0]
    tuple_0 = (list_0,)
    none_type_0 = None
    maybe_0 = module_0.Maybe(tuple_0, none_type_0)
    maybe_0.bind(str_0)


def test_case_7():
    complex_0 = 237.87166 + 1103.0099j
    bool_0 = True
    maybe_0 = module_0.Maybe(complex_0, bool_0)
    var_0 = maybe_0.ap(bool_0)


def test_case_8():
    int_0 = -3533
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.to_lazy()
    bool_0 = False
    maybe_1 = module_0.Maybe(int_0, bool_0)
    maybe_1.ap(int_0)


def test_case_9():
    none_type_0 = None
    int_0 = -189
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.filter(none_type_0)
    var_1 = var_0.to_either()
    none_type_1 = None
    bool_0 = True
    maybe_1 = module_0.Maybe(none_type_1, bool_0)


def test_case_10():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.filter(none_type_0)


def test_case_11():
    float_0 = 1396.358
    bool_0 = True
    maybe_0 = module_0.Maybe(float_0, bool_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    none_type_0 = None
    bool_1 = var_0.__eq__(var_0)
    maybe_1 = module_0.Maybe(maybe_0, float_0)
    var_1 = maybe_0.to_validation()
    var_2 = maybe_1.bind(var_1)
    var_3 = maybe_0.to_either()
    var_4 = maybe_0.to_box()
    var_5 = maybe_0.to_lazy()
    var_6 = var_0.filter(none_type_0)
    var_7 = var_3.map(var_3)
    bool_2 = var_3.__eq__(var_4)
    var_8 = maybe_1.to_try()
    var_7.filter(var_2)


def test_case_12():
    int_0 = -211
    tuple_0 = (int_0, int_0)
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.get_or_else(none_type_0)
    bytes_0 = b"h\xcd\xc4X\xc5\x9bpx\xb0\xf5\x81\x1b\x89\xb9"
    set_0 = {bytes_0}
    maybe_1 = module_0.Maybe(set_0, bytes_0)
    var_1 = maybe_1.filter(var_0)
    var_2 = var_1.to_try()
    var_3 = var_2.bind(tuple_0)


def test_case_13():
    bool_0 = False
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_either()
    var_0.bind(none_type_0)


def test_case_14():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_box()


def test_case_15():
    none_type_0 = None
    none_type_1 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_1, bool_0)
    var_0 = maybe_0.to_box()
    var_0.get_or_else(none_type_0)


def test_case_16():
    none_type_0 = None
    none_type_1 = None
    maybe_0 = module_0.Maybe(none_type_1, none_type_1)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_box()
    var_1.ap(none_type_0)


def test_case_17():
    bytes_0 = b""
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    list_0 = [maybe_0]
    maybe_1 = module_0.Maybe(list_0, bool_0)
    var_0 = maybe_1.to_try()


def test_case_18():
    list_0 = []
    maybe_0 = module_0.Maybe(list_0, list_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_try()
    maybe_0.filter(var_0)


def test_case_19():
    float_0 = 1396.358
    bool_0 = True
    maybe_0 = module_0.Maybe(float_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.map(var_0)
    var_2 = maybe_0.ap(float_0)
    var_3 = maybe_0.to_validation()
    var_3.map(var_2)


def test_case_20():
    list_0 = []
    none_type_0 = None
    maybe_0 = module_0.Maybe(list_0, list_0)
    var_0 = maybe_0.to_validation()
    var_0.get_or_else(none_type_0)


def test_case_21():
    float_0 = 1396.358
    bool_0 = True
    maybe_0 = module_0.Maybe(float_0, bool_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    bool_1 = var_0.__eq__(var_0)
    maybe_1 = module_0.Maybe(maybe_0, float_0)
    var_1 = maybe_0.to_try()
    var_2 = maybe_1.to_try()
    var_3 = maybe_0.to_either()
    var_4 = maybe_0.to_box()
    var_5 = maybe_0.to_lazy()
    var_6 = var_1.filter(var_0)
    var_7 = var_5.to_either()
    var_8 = var_6.map(var_3)
    bool_2 = var_0.__eq__(maybe_1)
    var_5.filter(var_2)
