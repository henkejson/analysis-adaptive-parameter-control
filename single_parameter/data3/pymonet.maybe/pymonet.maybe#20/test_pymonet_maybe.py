# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1


def test_case_0():
    float_0 = -506.914
    maybe_0 = module_0.Maybe(float_0, float_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    int_0 = 0
    none_type_0 = None
    maybe_0 = module_0.Maybe(int_0, none_type_0)
    bool_0 = maybe_0.__eq__(int_0)
    maybe_0.map(none_type_0)


def test_case_3():
    float_0 = -506.914
    maybe_0 = module_0.Maybe(float_0, float_0)
    bool_0 = maybe_0.__eq__(float_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.map(var_0)
    generic_0 = module_1.Generic()
    var_2 = maybe_0.get_or_else(generic_0)
    var_3 = maybe_0.to_box()
    var_4 = var_1.map(var_0)


def test_case_4():
    bytes_0 = b"$\xea\x80\xfd\x0c\xfb\xb0\x04\xdc\xca_\xe0\xf9Nw"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    none_type_0 = None
    var_0 = maybe_0.ap(none_type_0)
    var_1 = var_0.bind(none_type_0)
    bool_0 = False
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    var_2 = maybe_0.get_or_else(var_0)
    var_3 = maybe_0.to_either()
    var_4 = maybe_1.to_lazy()
    bool_1 = var_0.__eq__(var_3)
    var_5 = var_3.to_box()
    var_6 = var_0.to_validation()
    var_7 = var_1.filter(var_1)
    maybe_1.filter(var_2)


def test_case_5():
    int_0 = -459
    bool_0 = False
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1 = module_0.Maybe(int_0, bool_0)
    bool_1 = maybe_1.__eq__(bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = module_0.Maybe(bool_1, none_type_0)
    bool_2 = maybe_1.__eq__(int_0)
    var_2 = var_0.to_box()
    maybe_0.bind(var_0)


def test_case_6():
    int_0 = -810
    float_0 = -640.527
    maybe_0 = module_0.Maybe(int_0, float_0)
    var_0 = maybe_0.ap(int_0)
    var_1 = var_0.filter(int_0)
    set_0 = {int_0, int_0}
    maybe_1 = module_0.Maybe(set_0, set_0)


def test_case_7():
    bytes_0 = b"\xd0z"
    none_type_0 = None
    none_type_1 = None
    maybe_0 = module_0.Maybe(bytes_0, none_type_1)
    maybe_0.ap(none_type_0)


def test_case_8():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.filter(none_type_0)


def test_case_9():
    none_type_0 = None
    bytes_0 = b"Z\x08Y\xd0?\x84"
    bool_0 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.get_or_else(none_type_0)
    var_0.to_either()


def test_case_10():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.bind(none_type_0)
    var_2 = var_1.to_box()


def test_case_11():
    int_0 = 1
    none_type_0 = None
    maybe_0 = module_0.Maybe(int_0, none_type_0)
    var_0 = maybe_0.to_either()
    var_0.to_either()


def test_case_12():
    bool_0 = False
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    bool_2 = True
    maybe_1 = module_0.Maybe(bool_2, bool_0)
    var_0 = maybe_0.to_box()
    maybe_1.filter(var_0)


def test_case_13():
    bytes_0 = b"$\xea\x80\xfd\x0c\xfb\xb0\x04\xdc\xca_\xe0\xf9Nw"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    none_type_0 = None
    var_0 = maybe_0.ap(none_type_0)
    var_1 = var_0.bind(none_type_0)
    bool_0 = False
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    var_2 = maybe_0.get_or_else(var_0)
    var_3 = maybe_0.to_either()
    var_4 = var_0.to_lazy()
    bool_1 = var_0.__eq__(var_3)
    var_5 = var_3.to_box()
    var_6 = var_0.to_validation()
    var_7 = var_1.filter(var_1)
    var_8 = var_4.to_box()
    maybe_1.filter(var_2)


def test_case_14():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    list_1 = [bool_0, list_0, list_0]
    set_0 = set()
    int_0 = 1
    tuple_0 = (set_0, int_0)
    bool_1 = False
    maybe_0 = module_0.Maybe(tuple_0, bool_1)
    var_0 = maybe_0.to_lazy()
    var_0.get_or_else(list_1)


def test_case_15():
    float_0 = -506.914
    maybe_0 = module_0.Maybe(float_0, float_0)
    bool_0 = maybe_0.__eq__(float_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.map(var_0)
    generic_0 = module_1.Generic()
    var_2 = maybe_0.get_or_else(generic_0)
    var_3 = maybe_0.to_box()
    var_4 = var_1.map(var_0)
    var_5 = var_4.to_try()


def test_case_16():
    str_0 = "\n        Transform Box into Validation.\n\n        :returns: successfull Validation monad with previous value\n        :rtype: Validation[A, []]\n        "
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.ap(str_0)
    var_2 = var_1.map(str_0)
    none_type_0 = None
    bool_1 = True
    maybe_1 = module_0.Maybe(none_type_0, bool_1)
    bool_2 = maybe_1.__eq__(str_0)
    maybe_2 = module_0.Maybe(str_0, none_type_0)
    var_3 = maybe_2.to_try()


def test_case_17():
    complex_0 = 2316 + 343j
    bytes_0 = b"\xcc\x1c'!\x1c~\xd5\xdf\xc3\xa57"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_validation()
    var_0.map(complex_0)


def test_case_18():
    dict_0 = {}
    maybe_0 = module_0.Maybe(dict_0, dict_0)
    var_0 = maybe_0.to_validation()
    var_1 = var_0.to_box()
    var_1.to_box()


def test_case_19():
    bytes_0 = b"$\xea\x80\xfd\x0c\xfb\xb0\x04\xdc\xca_\xe0\xf9Nw"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    none_type_0 = None
    var_0 = maybe_0.ap(none_type_0)
    var_1 = var_0.bind(none_type_0)
    bool_0 = False
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    var_2 = maybe_0.get_or_else(var_0)
    var_3 = maybe_0.to_either()
    var_4 = maybe_1.to_lazy()
    bool_1 = var_0.__eq__(var_3)
    var_5 = var_3.to_box()
    var_6 = var_0.to_validation()
    var_7 = var_1.filter(var_1)
    var_8 = var_4.to_box()
    maybe_1.filter(var_2)


def test_case_20():
    int_0 = -459
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, int_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.map(bool_0)
    module_1.Generic(*var_0)


def test_case_21():
    bytes_0 = b"$\xea\x80\xfd\x0c\xfb\xb0\x04\xdc\xca_\xe0\xf9Nw"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    none_type_0 = None
    var_0 = maybe_0.ap(none_type_0)
    var_1 = var_0.bind(none_type_0)
    bool_0 = False
    bool_1 = var_1.__eq__(maybe_0)
    bool_2 = True
    bool_3 = var_0.__eq__(bool_0)
    bool_2.to_box()


def test_case_22():
    bytes_0 = b"$\xea\x80\xfd\x0c\xfb\xb0\x04\xdc\xca_\xe0\xf9Nw"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    none_type_0 = None
    var_0 = maybe_0.ap(none_type_0)
    var_1 = var_0.bind(none_type_0)
    bool_0 = False
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    var_2 = maybe_0.get_or_else(var_0)
    var_3 = var_2.to_lazy()
    var_4 = var_0.to_validation()
    maybe_2 = module_0.Maybe(none_type_0, bool_0)
    var_5 = maybe_0.to_either()
    var_6 = module_0.Maybe(var_3, none_type_0)
    bool_1 = True
    maybe_3 = module_0.Maybe(var_5, bool_1)
    bool_2 = var_3.__eq__(maybe_3)
    var_7 = var_5.to_box()
    var_8 = var_6.to_validation()
    var_9 = maybe_1.ap(var_1)
    var_10 = var_3.to_validation()
    var_11 = var_0.filter(var_8)
    var_12 = var_7.to_try()
    var_13 = var_11.to_box()
    var_14 = var_1.to_box()
    var_15 = maybe_1.to_lazy()
    bool_3 = False
    var_16 = var_0.filter(bool_3)
    var_17 = var_9.to_box()
    bool_4 = var_6.__eq__(var_6)
    var_18 = var_2.to_either()
