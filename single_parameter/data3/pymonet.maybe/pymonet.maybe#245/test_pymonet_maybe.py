# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import builtins as module_1


def test_case_0():
    str_0 = '{$=6c-Z"S:bN^'
    maybe_0 = module_0.Maybe(str_0, str_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    bool_0 = False
    bool_1 = False
    none_type_0 = None
    bool_2 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_2)
    bool_3 = maybe_0.__eq__(bool_1)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.ap(none_type_0)
    bool_4 = maybe_0.__eq__(maybe_0)
    maybe_1 = module_0.Maybe(bool_3, bool_4)
    var_2 = var_1.bind(var_1)
    var_3 = maybe_0.to_either()
    var_4 = var_1.to_box()
    var_5 = var_2.to_either()
    var_6 = maybe_0.filter(var_2)
    var_7 = var_5.to_validation()
    var_8 = var_1.to_either()
    maybe_2 = module_0.Maybe(bool_0, bool_0)
    maybe_2.filter(var_2)


def test_case_3():
    none_type_0 = None
    none_type_1 = None
    bytes_0 = b"\xecp\xbd`\xdb\x7f\xd15\xf7\xad\xe3"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.map(none_type_1)
    var_1 = var_0.to_either()
    var_2 = var_1.map(none_type_0)
    var_3 = var_2.to_box()


def test_case_4():
    set_0 = set()
    maybe_0 = module_0.Maybe(set_0, set_0)
    maybe_0.ap(maybe_0)


def test_case_5():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    maybe_0.bind(none_type_0)


def test_case_6():
    none_type_0 = None
    bool_0 = True
    bool_1 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.filter(none_type_0)
    var_1 = var_0.ap(var_0)
    var_2 = var_1.get_or_else(none_type_0)
    maybe_1 = module_0.Maybe(bool_1, bool_1)
    maybe_1.filter(none_type_0)


def test_case_7():
    complex_0 = 618.6491 - 1054.421109j
    list_0 = []
    maybe_0 = module_0.Maybe(list_0, list_0)
    maybe_0.ap(complex_0)


def test_case_8():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_either()
    maybe_0.filter(var_0)


def test_case_9():
    bool_0 = False
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_1, bool_1)
    var_0 = maybe_0.get_or_else(bool_0)
    var_0.to_validation()


def test_case_10():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    bool_1 = False
    maybe_0 = module_0.Maybe(list_0, bool_1)
    var_0 = maybe_0.to_validation()
    none_type_0 = None
    var_1 = maybe_0.get_or_else(none_type_0)
    var_1.map(var_0)


def test_case_11():
    dict_0 = {}
    complex_0 = -4425.804 - 2320j
    set_0 = {complex_0}
    maybe_0 = module_0.Maybe(set_0, set_0)
    bool_0 = True
    maybe_1 = module_0.Maybe(maybe_0, bool_0)
    var_0 = maybe_1.to_either()
    var_0.filter(dict_0)


def test_case_12():
    bytes_0 = b"\xd2'\xebuW\xc6\xcb\xed\x1a\xa44\x15\x1bie\xf9\xc7q"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.to_validation()
    var_2 = maybe_0.to_validation()


def test_case_13():
    int_0 = 1
    bool_0 = False
    maybe_0 = module_0.Maybe(int_0, bool_0)
    none_type_0 = None
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.to_validation()
    maybe_1 = module_0.Maybe(int_0, none_type_0)
    var_2 = maybe_0.to_either()
    var_0.ap(bool_0)


def test_case_14():
    bytes_0 = b"o\x19\xb46"
    bool_0 = False
    bool_1 = True
    bool_2 = False
    maybe_0 = module_0.Maybe(bool_0, bytes_0)
    var_0 = maybe_0.filter(bool_2)
    maybe_1 = module_0.Maybe(bool_1, bool_2)
    var_1 = maybe_0.to_lazy()
    maybe_1.filter(bool_0)


def test_case_15():
    list_0 = []
    bool_0 = False
    maybe_0 = module_0.Maybe(list_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.ap(list_0)
    var_1.to_lazy()


def test_case_16():
    bytes_0 = b"\x06\x0f\x92\xca\x97z\xc7\x81F\xde\xad\xfc:\xca\xed\xcd\xba"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.to_try()
    var_1.to_lazy()


def test_case_17():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_try()
    var_0.to_either()


def test_case_18():
    none_type_0 = None
    none_type_0.to_either()


def test_case_19():
    float_0 = 6066.225
    bool_0 = True
    maybe_0 = module_0.Maybe(float_0, bool_0)
    var_0 = maybe_0.ap(maybe_0)
    var_1 = maybe_0.to_box()
    var_2 = maybe_0.to_try()
    var_3 = maybe_0.to_lazy()
    var_4 = maybe_0.to_validation()
    var_5 = var_3.to_validation()
    var_6 = var_5.to_box()
    var_6.get_or_else(float_0)


def test_case_20():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_try()
    none_type_1 = None
    bool_1 = False
    maybe_1 = module_0.Maybe(none_type_1, bool_1)
    var_2 = maybe_1.to_either()
    var_3 = var_1.get_or_else(var_2)
    var_4 = maybe_1.to_validation()
    var_5 = maybe_0.to_lazy()
    var_3.to_lazy()


def test_case_21():
    object_0 = module_1.object()
    maybe_0 = module_0.Maybe(object_0, object_0)
    bool_0 = False
    maybe_1 = module_0.Maybe(object_0, bool_0)
    bool_1 = maybe_0.__eq__(object_0)


def test_case_22():
    bytes_0 = b"02\r-W$?\x98\xd7*"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    maybe_1 = module_0.Maybe(maybe_0, maybe_0)
    var_0 = maybe_0.filter(maybe_1)
    var_1 = var_0.to_try()
    var_2 = maybe_0.get_or_else(bytes_0)
    var_3 = maybe_0.ap(var_1)
    var_4 = maybe_0.to_lazy()
    var_5 = maybe_0.to_box()
    var_6 = maybe_1.ap(var_5)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_7 = maybe_1.bind(var_4)
    var_8 = var_0.ap(var_2)
    var_9 = var_0.ap(var_5)
    var_10 = maybe_0.to_try()
    var_11 = var_3.filter(var_2)
    var_12 = var_3.to_validation()
    var_13 = var_0.get_or_else(var_10)
    maybe_2 = module_0.Maybe(var_7, var_5)
    var_14 = var_9.bind(var_13)
    var_15 = var_14.to_box()
    var_16 = maybe_1.to_either()
    bool_1 = var_9.__eq__(var_5)
    var_17 = var_6.to_lazy()
    var_18 = maybe_2.filter(var_0)
    bool_2 = var_18.__eq__(maybe_2)
    var_19 = var_10.get_or_else(var_15)
    var_20 = var_18.map(var_14)
    var_21 = var_20.to_either()
