# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    str_0 = "\n        :param semigroup: other semigroup to concat\n        :type semigroup: Map[B]\n        :returns: new Map with concated all values\n        :rtype: Map[A]\n        "
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.to_box()
    maybe_1 = module_0.Maybe(maybe_0, str_0)
    bool_0 = maybe_1.__eq__(maybe_0)
    maybe_2 = module_0.Maybe(var_0, var_0)
    var_1 = maybe_2.ap(str_0)
    var_2 = maybe_0.to_box()
    bool_1 = maybe_1.__eq__(maybe_1)


def test_case_3():
    str_0 = ">MD$cx:O7"
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_box()
    bool_1 = maybe_0.__eq__(str_0)


def test_case_4():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.map(none_type_0)


def test_case_5():
    none_type_0 = None
    bool_0 = none_type_0.__eq__(none_type_0)
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.filter(bool_0)
    bool_1 = False
    var_1 = var_0.bind(var_0)
    maybe_1 = module_0.Maybe(var_1, bool_1)
    maybe_1.filter(var_0)


def test_case_6():
    bytes_0 = b"\xa7\xf3;0"
    bool_0 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    maybe_0.bind(bytes_0)


def test_case_7():
    bytes_0 = b'"LI'
    str_0 = "\n    In mathematics, a semigroup is an algebraic structure\n    consisting of a set together with an associative binary operation.\n    A semigroup generalizes a monoid in that there might not exist an identity element.\n    It also (originally) generalized a group (a monoid with all inverses)\n    to a type where every element did not have to have an inverse, this the name semigroup.\n    "
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.ap(bytes_0)
    var_1 = maybe_0.to_box()
    bool_1 = maybe_0.__eq__(str_0)


def test_case_8():
    none_type_0 = None
    bytes_0 = b"\xbev\xeeU"
    list_0 = [bytes_0]
    bool_0 = False
    maybe_0 = module_0.Maybe(list_0, bool_0)
    maybe_0.ap(none_type_0)


def test_case_9():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.filter(bool_0)
    str_0 = "}"
    bool_1 = var_0.__eq__(str_0)


def test_case_10():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_validation()
    maybe_0.filter(maybe_0)


def test_case_11():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    str_0 = "\n        Take filterer function, when monad is successfully call filterer with monad value.\n        When filterer returns True method returns copy of monad, othercase\n        not successfully Try with previous value.\n\n        :params filterer: function to apply on monad value\n        :type filterer: Function(A) -> Boolean\n        :returns: Try with previous value\n        :rtype: Try[A]\n        "
    bool_1 = True
    maybe_0 = module_0.Maybe(str_0, bool_1)
    var_0 = maybe_0.get_or_else(list_0)
    var_0.to_validation()


def test_case_12():
    bytes_0 = b"]\x1d\xfe?\nvF\x8a\xaf\xaet"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.to_box()
    var_2 = var_1.to_validation()
    var_3 = var_2.to_try()


def test_case_13():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_box()


def test_case_14():
    bytes_0 = b"t\x9d\x1fW\x03\xe1\xdc\xb47"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_lazy()
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_1 = maybe_1.to_box()
    var_1.bind(var_0)


def test_case_15():
    bytes_0 = b"\xd6"
    bool_0 = False
    bool_1 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.to_lazy()
    bool_2 = maybe_0.get_or_else(bool_1)
    var_1 = maybe_0.to_try()


def test_case_16():
    bytes_0 = b'"LI'
    str_0 = "\n        Take mapper function and returns result of them called with Right value.\n\n        :param mapper: function to apply on Right value\n        :type mapper: Function(A) -> Either[B]\n        :returns: result of mapper\n        :rtype: Either[B]\n        "
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.ap(bytes_0)
    var_1 = maybe_0.to_try()
    bool_1 = maybe_0.__eq__(str_0)


def test_case_17():
    none_type_0 = None
    int_0 = -219
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.to_validation()
    var_0.filter(none_type_0)


def test_case_18():
    int_0 = 1
    none_type_0 = None
    maybe_0 = module_0.Maybe(int_0, none_type_0)
    var_0 = maybe_0.to_validation()
    var_0.ap(int_0)


def test_case_19():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_try()
    bytes_0 = b"\x19\xf813"
    bool_1 = False
    maybe_1 = module_0.Maybe(bytes_0, bool_1)
    var_2 = maybe_1.to_either()
    var_2.filter(var_1)


def test_case_20():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.to_box()
    var_2 = var_0.to_box()
    var_3 = maybe_0.to_either()
    var_4 = var_0.to_try()
    var_5 = maybe_0.ap(bool_0)
    var_6 = var_5.map(var_1)
    var_7 = var_5.to_either()
    var_8 = maybe_0.to_try()
    var_9 = maybe_0.filter(bool_0)
    var_0.filter(var_4)


def test_case_21():
    bytes_0 = b"\xd6"
    bool_0 = False
    generic_0 = module_1.Generic()
    bool_1 = False
    maybe_0 = module_0.Maybe(generic_0, bool_1)
    maybe_1 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_1.to_lazy()
    bool_2 = maybe_0.__eq__(var_0)
    bool_3 = var_0.__eq__(bool_0)
    var_1 = maybe_1.to_either()
    none_type_0 = None
    bool_4 = True
    maybe_2 = module_0.Maybe(bool_4, bool_4)
    var_2 = maybe_2.bind(none_type_0)
    var_3 = var_2.to_box()
    var_4 = var_3.to_either()
    var_5 = maybe_1.to_try()
    var_6 = var_0.to_try()
    var_7 = maybe_2.bind(var_6)
    var_8 = var_1.ap(var_7)


def test_case_22():
    str_0 = "\n        :param semigroup: other semigroup to concat\n        :type semigroup: Map[B]\n        :returns: new Map with concated all values\n        :rtype: Map[A]\n        "
    maybe_0 = module_0.Maybe(str_0, str_0)
    bool_0 = False
    maybe_1 = module_0.Maybe(maybe_0, bool_0)
    var_0 = maybe_0.filter(maybe_1)
    bool_1 = maybe_0.__eq__(maybe_1)
    str_1 = "z8e#|\tLwgSJ&Du5V\n$B"
    maybe_2 = module_0.Maybe(str_1, bool_1)
    none_type_0 = None
    maybe_3 = module_0.Maybe(none_type_0, none_type_0)
    var_1 = maybe_0.to_lazy()
    module_1.Generic(*var_1)
