# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import builtins as module_1
import typing as module_2


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    dict_0 = {}
    maybe_0 = module_0.Maybe(dict_0, dict_0)


def test_case_2():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.filter(var_0)
    var_2 = maybe_0.to_try()
    var_3 = var_2.map(var_0)
    var_4 = var_1.filter(var_2)
    var_5 = var_4.map(var_0)
    bool_1 = var_4.__eq__(var_4)
    var_0.to_lazy()


def test_case_3():
    none_type_0 = None
    str_0 = "GaB0QCvg\rS"
    set_0 = {str_0, str_0}
    bool_0 = True
    maybe_0 = module_0.Maybe(set_0, bool_0)
    var_0 = maybe_0.filter(maybe_0)
    bool_1 = maybe_0.__eq__(none_type_0)
    bool_2 = False
    maybe_1 = module_0.Maybe(bool_2, bool_2)
    maybe_1.filter(bool_1)


def test_case_4():
    object_0 = module_1.object()
    list_0 = []
    bool_0 = True
    maybe_0 = module_0.Maybe(list_0, bool_0)
    var_0 = maybe_0.map(list_0)
    var_1 = var_0.filter(object_0)
    var_2 = maybe_0.to_try()


def test_case_5():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.ap(maybe_0)


def test_case_6():
    float_0 = -2039.0
    maybe_0 = module_0.Maybe(float_0, float_0)
    var_0 = maybe_0.bind(float_0)
    var_1 = var_0.to_validation()
    var_1.to_validation()


def test_case_7():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.bind(none_type_0)


def test_case_8():
    none_type_0 = None
    str_0 = "GaB0QCvg\rS"
    set_0 = {str_0, str_0}
    bool_0 = True
    maybe_0 = module_0.Maybe(set_0, bool_0)
    var_0 = maybe_0.filter(maybe_0)
    bool_1 = maybe_0.__eq__(none_type_0)
    var_1 = var_0.to_lazy()
    var_2 = var_1.to_box()
    var_3 = var_1.to_try()
    var_4 = var_0.ap(var_0)
    var_5 = var_0.to_try()


def test_case_9():
    bool_0 = True
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_1, bool_1)
    var_0 = maybe_0.get_or_else(bool_0)
    var_0.to_lazy()


def test_case_10():
    none_type_0 = None
    none_type_1 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_1, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.get_or_else(none_type_0)
    var_2 = var_0.to_try()
    var_3 = var_0.to_either()
    var_1.map(none_type_0)


def test_case_11():
    none_type_0 = None
    str_0 = "GaB0QCvg\rS"
    set_0 = {str_0, str_0}
    bool_0 = True
    maybe_0 = module_0.Maybe(set_0, bool_0)
    var_0 = maybe_0.filter(maybe_0)
    bool_1 = maybe_0.__eq__(none_type_0)
    bool_2 = False
    maybe_1 = module_0.Maybe(bool_2, bool_2)
    var_1 = var_0.to_either()
    var_2 = maybe_1.to_box()
    maybe_1.filter(var_2)


def test_case_12():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_box()
    bool_0 = True
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    var_1 = maybe_1.to_try()
    var_2 = maybe_0.to_either()
    bool_1 = var_1.__eq__(var_0)
    var_3 = maybe_1.to_try()
    bool_2 = var_2.__eq__(bool_1)


def test_case_13():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.filter(bool_0)
    var_1 = maybe_0.to_try()
    var_2 = var_1.map(maybe_0)
    bool_1 = var_0.__eq__(var_2)
    var_3 = var_0.filter(var_1)
    var_4 = maybe_0.to_box()
    bool_2 = var_3.__eq__(var_3)
    var_1.to_either()


def test_case_14():
    complex_0 = -2183.85911 - 837j
    bool_0 = True
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_box()
    var_0.ap(complex_0)


def test_case_15():
    none_type_0 = None
    str_0 = "GaB0QCvg\rS"
    set_0 = {str_0, str_0}
    bool_0 = True
    maybe_0 = module_0.Maybe(set_0, bool_0)
    var_0 = maybe_0.filter(maybe_0)
    bool_1 = maybe_0.__eq__(none_type_0)
    maybe_1 = var_0.to_lazy()
    var_1 = maybe_1.to_box()
    var_1.to_box()


def test_case_16():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()


def test_case_17():
    str_0 = "so"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.to_try()
    var_0.to_try()


def test_case_18():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_try()


def test_case_19():
    list_0 = []
    generic_0 = module_2.Generic(*list_0)
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_validation()
    var_0.map(generic_0)


def test_case_20():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_validation()
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    var_1 = maybe_1.to_try()
    var_2 = maybe_0.map(bool_0)
    maybe_2 = module_0.Maybe(var_1, var_0)
    bool_1 = maybe_2.__eq__(maybe_1)
    var_3 = maybe_0.filter(var_0)
    var_4 = maybe_1.map(var_1)
    var_5 = maybe_0.to_box()
    var_6 = var_2.map(var_5)
    bool_2 = var_6.__eq__(var_5)
    var_7 = var_0.to_lazy()
    var_8 = var_6.ap(var_7)
    bool_3 = False
    maybe_3 = module_0.Maybe(bool_1, bool_3)
    var_9 = var_3.get_or_else(maybe_3)
    var_9.filter(var_8)


def test_case_21():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_validation()
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    var_1 = maybe_1.to_lazy()
    var_2 = maybe_1.filter(var_1)
    var_3 = maybe_1.to_try()
    var_4 = var_3.map(var_1)
    bool_1 = var_2.__eq__(var_4)
    var_5 = var_2.filter(var_3)
    var_6 = var_5.map(var_1)
    var_7 = maybe_1.to_box()
    bool_2 = var_5.__eq__(var_5)
    var_8 = var_6.to_either()
    var_9 = var_6.map(var_4)
    maybe_2 = module_0.Maybe(var_6, bool_1)
    var_10 = var_8.to_validation()
    var_11 = maybe_2.to_lazy()
    var_12 = var_11.to_box()
    var_13 = maybe_1.to_lazy()
    var_0.to_validation()


def test_case_22():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_validation()
    maybe_1 = module_0.Maybe(var_0, var_0)
    var_1 = var_0.to_try()
    var_2 = maybe_0.map(var_0)
    bool_1 = False
    maybe_2 = module_0.Maybe(maybe_1, bool_1)
    bool_2 = maybe_2.__eq__(maybe_2)
    maybe_2.filter(var_1)
