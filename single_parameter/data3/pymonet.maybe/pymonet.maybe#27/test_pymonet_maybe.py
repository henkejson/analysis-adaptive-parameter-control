# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1
import builtins as module_2


def test_case_0():
    float_0 = -833.6
    maybe_0 = module_0.Maybe(float_0, float_0)


def test_case_1():
    bytes_0 = b""
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)


def test_case_2():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_box()
    generic_0 = module_1.Generic()
    maybe_1 = module_0.Maybe(maybe_0, maybe_0)
    bool_0 = maybe_0.__eq__(generic_0)
    bool_1 = maybe_0.__eq__(generic_0)
    var_1 = maybe_1.get_or_else(none_type_0)
    var_2 = maybe_0.to_box()
    var_3 = maybe_1.to_try()
    var_4 = maybe_0.to_lazy()
    var_5 = var_4.to_validation()
    var_6 = maybe_0.to_try()
    bool_2 = maybe_0.__eq__(maybe_0)
    object_0 = module_2.object()
    var_7 = var_4.to_box()
    var_2.to_box()


def test_case_3():
    int_0 = 1509
    int_1 = 1500
    maybe_0 = module_0.Maybe(int_1, int_1)
    bool_0 = maybe_0.__eq__(int_0)


def test_case_4():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = var_0.to_try()
    none_type_0 = None
    bool_1 = False
    maybe_1 = module_0.Maybe(none_type_0, bool_1)
    bool_2 = True
    maybe_2 = module_0.Maybe(maybe_1, bool_2)
    var_2 = maybe_2.map(var_1)
    var_3 = var_2.to_lazy()
    var_4 = var_3.to_box()
    var_5 = var_4.to_lazy()


def test_case_5():
    none_type_0 = None
    bytes_0 = b"1\x19\xc8\x0b\xf0W\xf3\x1b\xc9"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.get_or_else(none_type_0)
    bool_0 = False
    bool_1 = False
    maybe_1 = module_0.Maybe(bool_0, bool_1)
    maybe_1.map(var_0)


def test_case_6():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.bind(none_type_0)


def test_case_7():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.get_or_else(bool_0)
    var_1 = maybe_0.to_box()
    var_2 = maybe_0.to_lazy()
    maybe_1 = module_0.Maybe(bool_0, var_0)
    var_3 = maybe_1.to_validation()
    bool_1 = True
    maybe_2 = module_0.Maybe(bool_0, bool_1)
    none_type_0 = None
    bool_2 = False
    maybe_3 = module_0.Maybe(none_type_0, bool_2)
    bool_3 = maybe_0.__eq__(maybe_0)
    var_4 = maybe_3.to_either()
    var_5 = var_1.to_either()
    var_6 = maybe_3.get_or_else(maybe_3)
    var_7 = var_1.to_either()
    maybe_0.bind(var_4)


def test_case_8():
    bool_0 = True
    int_0 = 1509
    tuple_0 = (int_0,)
    int_1 = 1500
    none_type_0 = None
    maybe_0 = module_0.Maybe(int_1, int_1)
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = maybe_1.__eq__(int_0)
    var_0 = maybe_1.ap(tuple_0)
    var_1 = var_0.to_lazy()
    var_2 = var_0.to_try()
    var_2.to_try()


def test_case_9():
    bool_0 = False
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    maybe_0.ap(maybe_0)


def test_case_10():
    float_0 = -1384.777
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, float_0)
    maybe_1 = module_0.Maybe(float_0, bool_0)
    var_0 = maybe_1.to_try()
    var_1 = maybe_0.filter(var_0)
    maybe_1.filter(var_1)


def test_case_11():
    float_0 = -1384.777
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, float_0)
    maybe_1 = module_0.Maybe(float_0, bool_0)
    var_0 = maybe_1.to_try()
    var_1 = maybe_1.to_box()
    maybe_1.filter(var_1)


def test_case_12():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.get_or_else(maybe_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(none_type_0, bool_1)
    maybe_0.filter(var_0)


def test_case_13():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.to_either()
    var_2 = maybe_0.filter(var_1)


def test_case_14():
    bool_0 = True
    int_0 = 727
    tuple_0 = (int_0,)
    int_1 = 1500
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, int_1)
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = maybe_1.__eq__(int_0)
    var_0 = maybe_1.ap(tuple_0)
    var_1 = maybe_0.to_box()
    var_2 = var_0.to_try()
    var_2.to_try()


def test_case_15():
    complex_0 = 1079.6353 + 1340.679j
    bool_0 = False
    maybe_0 = module_0.Maybe(complex_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_0.get_or_else(complex_0)


def test_case_16():
    float_0 = -1384.777
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, float_0)
    maybe_1 = module_0.Maybe(float_0, bool_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.filter(var_0)
    maybe_1.filter(var_1)


def test_case_17():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_validation()
    var_1 = var_0.to_lazy()
    var_1.to_lazy()


def test_case_18():
    bool_0 = True
    int_0 = 1509
    tuple_0 = (int_0,)
    int_1 = 1500
    none_type_0 = None
    maybe_0 = module_0.Maybe(int_1, int_1)
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = maybe_1.__eq__(int_0)
    var_0 = maybe_0.get_or_else(bool_1)
    var_1 = maybe_1.map(var_0)
    var_2 = var_1.ap(tuple_0)
    var_3 = maybe_0.to_lazy()
    var_4 = maybe_1.filter(tuple_0)
    maybe_2 = module_0.Maybe(var_0, var_4)
    bool_2 = maybe_1.__eq__(maybe_2)
    var_0.to_validation()


def test_case_19():
    bool_0 = False
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_validation()
    bool_2 = True
    maybe_1 = module_0.Maybe(bool_0, bool_2)
    none_type_0 = None
    bool_3 = True
    maybe_2 = module_0.Maybe(none_type_0, bool_3)
    bool_4 = maybe_2.__eq__(maybe_2)
    var_1 = maybe_2.to_either()
    var_2 = maybe_2.get_or_else(maybe_2)
    bool_5 = False
    maybe_3 = module_0.Maybe(none_type_0, bool_5)
    var_3 = maybe_1.to_lazy()
    var_4 = maybe_2.filter(var_1)
    var_5 = maybe_2.to_validation()
    var_6 = var_4.ap(bool_0)
    var_7 = var_4.to_validation()
