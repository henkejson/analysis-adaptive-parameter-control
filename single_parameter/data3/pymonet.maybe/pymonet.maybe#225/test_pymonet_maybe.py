# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    str_0 = "C\tetxL}O}8dCw2]"
    maybe_0 = module_0.Maybe(str_0, str_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    bool_0 = True
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.ap(maybe_0)
    bool_2 = maybe_0.__eq__(bool_0)
    var_1 = maybe_0.to_validation()
    var_1.map(var_1)


def test_case_3():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.filter(maybe_0)
    var_1 = maybe_0.get_or_else(var_0)
    var_2 = maybe_0.to_validation()
    var_3 = maybe_0.map(var_2)
    var_4 = maybe_0.map(var_2)
    var_5 = maybe_0.bind(bool_0)


def test_case_4():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.to_box()
    var_2 = maybe_0.to_lazy()
    var_3 = var_0.bind(var_0)
    var_4 = maybe_0.to_lazy()
    var_5 = maybe_0.get_or_else(maybe_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_6 = var_4.to_box()
    maybe_0.ap(maybe_0)


def test_case_5():
    bool_0 = True
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.ap(maybe_0)
    var_1 = maybe_0.bind(var_0)
    bool_2 = maybe_0.__eq__(bool_0)
    var_2 = maybe_0.to_validation()
    var_2.map(var_2)


def test_case_6():
    str_0 = "\n    Return the first element of the list which matches the keys, or None if no element matches.\n\n    :param collection: collection to search\n    :type collection: List[A]\n    :param key: function to decide witch element should be found\n    :type key: Function(A) -> Boolean\n    :returns: element of collection or None\n    :rtype: A | None\n    "
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.get_or_else(bool_0)
    maybe_0.bind(var_0)


def test_case_7():
    str_0 = 'ToAe-6" '
    set_0 = {str_0, str_0, str_0}
    maybe_0 = module_0.Maybe(set_0, str_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.ap(set_0)
    var_2 = maybe_0.filter(var_1)


def test_case_8():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_validation()
    maybe_1 = module_0.Maybe(maybe_0, none_type_0)
    maybe_1.filter(var_0)


def test_case_9():
    none_type_0 = None
    str_0 = "C\tetxL}O}8dCw2]"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.get_or_else(none_type_0)


def test_case_10():
    bool_0 = False
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_either()
    var_0.filter(bool_0)


def test_case_11():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_box()
    var_0.to_box()


def test_case_12():
    str_0 = "\n        Call argument function with args in try-catch.\n        when function don't raise exception, not successfully when raise.\n\n        :params fn: function to call and store in monad\n        :type fn: Function(*args) -> A\n        :params *args:\n        :type fn: List\n        :retruns: Successfully monad Try when function don't raise exception, not successfully when raise\n        :rtype: Try[A]\n        "
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    complex_0 = 1398.321602 + 3549.1896j
    maybe_1 = module_0.Maybe(complex_0, complex_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_lazy()
    maybe_0.filter(var_1)


def test_case_13():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.ap(maybe_0)
    var_1 = var_0.to_lazy()
    bool_1 = maybe_0.__eq__(bool_0)
    var_2 = maybe_0.to_validation()
    var_2.map(var_2)


def test_case_14():
    none_type_0 = None
    none_type_1 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_1, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_try()
    var_1.ap(none_type_0)


def test_case_15():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_try()
    bool_1 = True
    maybe_1 = module_0.Maybe(maybe_0, bool_1)
    var_1 = var_0.get_or_else(bool_0)


def test_case_16():
    int_0 = -1235
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.to_validation()
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1.filter(none_type_0)


def test_case_17():
    str_0 = 'ToAe-6" '
    set_0 = {str_0, str_0, str_0}
    maybe_0 = module_0.Maybe(set_0, str_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.to_lazy()
    var_2 = var_1.to_validation()
    var_3 = maybe_0.ap(set_0)
    var_4 = maybe_0.filter(var_3)


def test_case_18():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.bind(var_0)
    var_2 = maybe_0.get_or_else(var_1)
    var_3 = maybe_0.ap(maybe_0)
    bool_1 = var_3.__eq__(var_2)
    var_4 = maybe_0.ap(maybe_0)
    var_5 = maybe_0.bind(var_4)
    bool_2 = maybe_0.__eq__(bool_0)
    var_6 = maybe_0.to_validation()
    maybe_1 = module_0.Maybe(var_5, bool_0)
    var_7 = var_5.to_try()
    var_6.bind(var_6)


def test_case_19():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.get_or_else(maybe_0)
    bool_1 = False
    var_2 = var_1.to_validation()
    maybe_1 = module_0.Maybe(var_1, bool_1)
    var_3 = maybe_1.get_or_else(maybe_0)
    bool_2 = maybe_0.__eq__(var_0)
    var_4 = var_1.ap(var_1)
    var_5 = var_3.ap(bool_2)
    bool_3 = maybe_1.__eq__(maybe_0)
    var_6 = var_4.filter(maybe_1)
    var_7 = var_3.to_try()
    bool_4 = var_7.__eq__(var_5)
    var_8 = maybe_1.ap(var_1)
    var_9 = var_5.to_either()
    var_10 = var_5.to_either()
    var_11 = var_8.filter(var_9)
    var_12 = var_5.to_validation()
    bool_5 = False
    maybe_2 = module_0.Maybe(var_0, bool_5)
    var_13 = maybe_2.to_lazy()
    maybe_2.filter(bool_4)
