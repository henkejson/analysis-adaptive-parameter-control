# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_1 = module_0.Maybe(maybe_0, bool_0)
    bool_1 = maybe_1.__eq__(maybe_1)
    var_0 = maybe_0.to_validation()


def test_case_3():
    none_type_0 = None
    none_type_1 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_1, bool_0)
    bool_1 = maybe_0.__eq__(bool_0)
    var_0 = maybe_0.ap(none_type_0)
    var_1 = maybe_0.get_or_else(none_type_1)
    var_2 = maybe_0.to_validation()


def test_case_4():
    str_0 = "??\rAw"
    generic_0 = module_1.Generic()
    bytes_0 = b"\xc6\x16\x1ar[\xc6Xc\x87\xe0\xf7Q[\xbc\x9e"
    set_0 = {bytes_0, bytes_0}
    maybe_0 = module_0.Maybe(set_0, set_0)
    var_0 = maybe_0.map(generic_0)
    var_1 = var_0.ap(str_0)


def test_case_5():
    list_0 = []
    bool_0 = False
    maybe_0 = module_0.Maybe(list_0, bool_0)
    var_0 = maybe_0.to_validation()
    maybe_1 = module_0.Maybe(list_0, list_0)
    var_1 = maybe_1.to_validation()
    bool_1 = True
    maybe_2 = module_0.Maybe(list_0, bool_1)
    var_2 = var_0.to_either()
    var_3 = maybe_2.to_try()
    maybe_1.map(maybe_1)


def test_case_6():
    none_type_0 = None
    none_type_1 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_lazy()
    bool_1 = True
    maybe_1 = module_0.Maybe(none_type_1, bool_1)
    bool_2 = maybe_1.__eq__(bool_1)
    var_1 = maybe_1.ap(none_type_0)
    var_2 = var_1.bind(maybe_1)
    var_3 = maybe_1.to_lazy()


def test_case_7():
    none_type_0 = None
    none_type_1 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    maybe_0.bind(none_type_1)


def test_case_8():
    generic_0 = module_1.Generic()
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.ap(generic_0)


def test_case_9():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(bool_0, none_type_0)
    var_0 = maybe_1.to_either()
    maybe_2 = module_0.Maybe(none_type_0, var_0)
    var_1 = maybe_0.filter(maybe_1)
    maybe_1.filter(var_0)


def test_case_10():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_try()
    maybe_0.filter(var_0)


def test_case_11():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.ap(bool_0)
    var_1 = var_0.to_validation()
    none_type_0 = None
    bool_1 = maybe_0.__eq__(var_0)
    bool_2 = True
    maybe_1 = module_0.Maybe(bool_2, none_type_0)
    var_2 = maybe_0.to_try()
    var_3 = maybe_1.to_either()
    bool_3 = False
    maybe_2 = module_0.Maybe(var_0, bool_3)
    var_4 = maybe_2.to_box()
    bool_4 = maybe_0.__eq__(var_0)
    var_5 = maybe_1.get_or_else(none_type_0)
    var_6 = maybe_1.to_try()
    var_7 = maybe_0.map(var_6)
    var_8 = var_1.to_box()
    var_9 = var_3.to_box()
    var_10 = maybe_1.to_validation()


def test_case_12():
    complex_0 = 5259.8 - 745j
    bool_0 = False
    maybe_0 = module_0.Maybe(complex_0, bool_0)
    var_0 = maybe_0.to_lazy()
    maybe_1 = module_0.Maybe(var_0, var_0)
    var_1 = maybe_1.to_either()
    bool_1 = True
    maybe_2 = module_0.Maybe(bool_1, bool_1)
    var_2 = maybe_2.to_either()
    var_2.filter(var_1)


def test_case_13():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_box()
    var_0.map(none_type_0)


def test_case_14():
    str_0 = "\n    Perform left-to-right function composition.\n\n    :param value: argument of first applied function\n    :type value: Any\n    :param functions: list of functions to applied from left-to-right\n    :type functions: List[Function]\n    :returns: result of all functions\n    :rtype: Any\n    "
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    bool_1 = False
    bool_2 = False
    maybe_1 = module_0.Maybe(bool_1, bool_2)
    var_0 = maybe_1.to_box()
    var_1 = maybe_1.to_box()
    maybe_2 = module_0.Maybe(var_0, var_1)
    var_2 = maybe_1.to_validation()


def test_case_15():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_1 = module_0.Maybe(maybe_0, bool_0)
    bool_1 = maybe_1.__eq__(maybe_1)
    bool_2 = True
    var_0 = maybe_0.to_lazy()
    bool_2.get_or_else(maybe_0)


def test_case_16():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_try()
    var_1.to_either()


def test_case_17():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.ap(bool_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(bool_0, none_type_0)
    var_1 = maybe_1.to_either()
    maybe_2 = module_0.Maybe(none_type_0, var_1)
    var_2 = var_0.filter(var_1)
    var_3 = var_0.to_lazy()
    var_4 = maybe_2.to_try()
    var_5 = var_2.to_box()
    var_6 = var_4.filter(var_5)
    maybe_1.filter(var_2)


def test_case_18():
    float_0 = 3652.78
    maybe_0 = module_0.Maybe(float_0, float_0)
    var_0 = maybe_0.ap(maybe_0)
    var_1 = maybe_0.to_lazy()
    var_2 = var_1.to_box()
    var_3 = var_0.filter(var_2)
    var_4 = maybe_0.to_either()
    maybe_1 = module_0.Maybe(var_4, var_0)
    var_5 = maybe_0.to_either()
    var_6 = var_0.to_try()
    var_7 = var_0.filter(var_3)
    bool_0 = var_7.__eq__(var_4)
    var_8 = var_0.get_or_else(var_1)
    var_9 = var_5.to_try()
    var_9.to_validation()


def test_case_19():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_1 = module_0.Maybe(maybe_0, bool_0)
    bool_1 = maybe_1.__eq__(maybe_1)
    none_type_0 = None
    maybe_2 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_2.to_validation()
    generic_0 = module_1.Generic()
    var_1 = maybe_0.to_lazy()
    maybe_2.filter(var_0)


def test_case_20():
    float_0 = 3652.78
    maybe_0 = module_0.Maybe(float_0, float_0)
    var_0 = maybe_0.ap(maybe_0)
    var_1 = maybe_0.to_box()
    var_2 = var_0.filter(var_1)
    var_3 = maybe_0.to_either()
    maybe_1 = module_0.Maybe(var_3, var_0)
    var_4 = maybe_1.bind(var_3)
    var_5 = var_4.to_try()
    var_6 = maybe_0.filter(var_5)
    bool_0 = maybe_1.__eq__(var_0)
    var_1.get_or_else(var_1)
