# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    int_0 = 592
    maybe_0 = module_0.Maybe(int_0, int_0)


def test_case_1():
    bool_0 = False
    var_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    float_0 = -4040.609
    maybe_0 = module_0.Maybe(float_0, float_0)
    var_0 = maybe_0.map(float_0)
    var_1 = maybe_0.ap(maybe_0)
    var_2 = var_0.ap(var_0)
    var_3 = var_0.to_either()
    var_4 = var_1.map(var_3)
    var_5 = var_4.filter(var_1)
    var_6 = var_4.ap(var_3)
    bool_0 = var_4.__eq__(var_4)
    var_7 = var_0.map(var_6)
    var_8 = var_3.to_lazy()
    var_9 = var_6.to_try()
    var_9.to_try()


def test_case_3():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_lazy()
    bool_1 = maybe_0.__eq__(var_0)
    var_2 = var_1.to_validation()


def test_case_4():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.map(maybe_0)
    var_1 = var_0.to_lazy()
    var_2 = var_0.ap(var_0)
    var_3 = var_0.filter(var_2)
    var_4 = var_0.to_box()
    var_5 = var_0.map(var_4)


def test_case_5():
    complex_0 = -3000.844 - 428.7j
    list_0 = [complex_0]
    bool_0 = False
    maybe_0 = module_0.Maybe(list_0, bool_0)
    none_type_0 = None
    maybe_0.map(none_type_0)


def test_case_6():
    int_0 = 972
    set_0 = {int_0, int_0, int_0, int_0}
    maybe_0 = module_0.Maybe(set_0, set_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.bind(int_0)
    var_1 = var_0.filter(set_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(set_0, none_type_0)
    var_2 = maybe_0.to_box()
    maybe_1.filter(var_2)


def test_case_7():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.bind(none_type_0)


def test_case_8():
    str_0 = "'\nF:s\x0bQ:\x0b{2#z}\\Q\x0b"
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.ap(str_0)
    var_2 = var_1.to_validation()
    var_3 = maybe_0.get_or_else(bool_0)


def test_case_9():
    int_0 = 0
    str_0 = "Q>{codz0KGQ_>x\x0b%"
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, str_0)
    var_0 = maybe_0.to_lazy()
    maybe_1 = module_0.Maybe(int_0, bool_0)
    bool_1 = maybe_1.__eq__(maybe_1)
    none_type_0 = None
    var_1 = maybe_1.get_or_else(none_type_0)
    maybe_1.ap(maybe_1)


def test_case_10():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.ap(maybe_0)
    var_1 = var_0.filter(var_0)
    bool_0.to_box()


def test_case_11():
    int_0 = -656
    bool_0 = False
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.to_validation()
    maybe_0.filter(maybe_0)


def test_case_12():
    str_0 = "oAJ"
    bytes_0 = b"V]\xd1D\xab\xfe\x0e\xd9gb\xa7\xf6\x1e\x18\x08\x91\x89"
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.get_or_else(str_0)
    var_0.to_box()


def test_case_13():
    bool_0 = False
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    bool_2 = False
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.map(bool_2)
    maybe_1 = module_0.Maybe(bool_0, bool_2)
    var_2 = maybe_1.get_or_else(bool_2)
    var_3 = maybe_1.to_box()
    var_3.to_box()


def test_case_14():
    float_0 = -4040.609
    maybe_0 = module_0.Maybe(float_0, float_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_box()


def test_case_15():
    bool_0 = True
    bool_1 = True
    bool_2 = True
    int_0 = 1
    maybe_0 = module_0.Maybe(bool_2, int_0)
    var_0 = maybe_0.filter(bool_0)
    var_1 = var_0.ap(bool_0)
    var_2 = maybe_0.map(bool_2)
    bool_3 = False
    maybe_1 = module_0.Maybe(bool_1, bool_3)
    var_3 = maybe_1.to_try()
    var_4 = maybe_1.to_either()
    bool_4 = maybe_1.__eq__(bool_1)
    var_5 = maybe_0.map(bool_4)
    maybe_1.filter(bool_0)


def test_case_16():
    complex_0 = 305.394228 - 991.09214j
    bool_0 = True
    maybe_0 = module_0.Maybe(complex_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_0.to_lazy()


def test_case_17():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_try()
    var_0.to_either()


def test_case_18():
    none_type_0 = None
    none_type_0.map(none_type_0)


def test_case_19():
    str_0 = "u]37P@Ks3A(5"
    tuple_0 = (str_0,)
    bool_0 = False
    dict_0 = {tuple_0: str_0, str_0: bool_0, tuple_0: bool_0, str_0: str_0}
    maybe_0 = module_0.Maybe(dict_0, str_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_box()
    var_1.to_box()


def test_case_20():
    float_0 = -4040.609
    maybe_0 = module_0.Maybe(float_0, float_0)
    var_0 = maybe_0.map(float_0)
    var_1 = maybe_0.ap(maybe_0)
    var_2 = var_0.ap(var_0)
    var_3 = var_2.to_lazy()
    var_4 = var_1.to_try()
    var_5 = var_2.get_or_else(float_0)
    var_6 = var_2.to_try()
    var_7 = var_6.map(var_1)
    var_8 = maybe_0.filter(var_0)
    var_9 = var_1.to_lazy()
    var_10 = maybe_0.to_lazy()
    var_11 = var_10.to_either()
    var_12 = var_1.to_try()
    var_13 = var_2.map(var_12)
    bool_0 = var_0.__eq__(var_5)
    bool_1 = var_1.__eq__(maybe_0)
    var_14 = var_0.to_try()
    var_10.get_or_else(var_10)


def test_case_21():
    int_0 = -656
    bool_0 = False
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.to_lazy()
    var_2 = var_1.to_validation()
    maybe_0.filter(maybe_0)
