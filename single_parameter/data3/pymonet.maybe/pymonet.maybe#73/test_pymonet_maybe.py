# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1


def test_case_0():
    bool_0 = True
    generic_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    none_type_0 = None
    int_0 = 1
    maybe_0 = module_0.Maybe(int_0, int_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.ap(none_type_0)
    var_1 = maybe_0.get_or_else(none_type_0)
    bool_1 = maybe_0.__eq__(var_0)
    var_2 = maybe_0.to_either()
    var_2.get_or_else(var_0)


def test_case_3():
    str_0 = "(Q2+:"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.to_box()
    bool_0 = maybe_0.__eq__(maybe_0)
    bool_1 = False
    var_1 = maybe_0.to_validation()
    var_2 = maybe_0.filter(var_1)
    maybe_1 = module_0.Maybe(bool_1, bool_1)
    bool_2 = maybe_1.__eq__(str_0)
    var_3 = maybe_0.to_validation()
    var_4 = maybe_0.to_try()
    var_3.get_or_else(str_0)


def test_case_4():
    str_0 = "(Q2+:"
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.get_or_else(bool_0)
    var_1 = maybe_0.map(var_0)
    var_2 = var_1.get_or_else(var_0)
    var_3 = var_1.filter(var_0)
    var_4 = var_3.to_box()
    bool_1 = False
    maybe_1 = module_0.Maybe(bool_0, bool_1)
    var_0.map(var_4)


def test_case_5():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.map(maybe_0)


def test_case_6():
    complex_0 = -4826.043195 - 63.29j
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, complex_0)
    var_0 = maybe_0.bind(none_type_0)
    var_1 = var_0.ap(none_type_0)
    var_2 = var_1.to_either()
    var_3 = var_2.to_box()
    var_3.get_or_else(complex_0)


def test_case_7():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_box()
    int_0 = 1467
    none_type_1 = None
    maybe_1 = module_0.Maybe(int_0, none_type_1)
    maybe_1.bind(var_0)


def test_case_8():
    bool_0 = False
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.ap(bool_0)


def test_case_9():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.filter(bool_0)


def test_case_10():
    bool_0 = True
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    maybe_0.filter(bool_0)


def test_case_11():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.to_lazy()
    var_2 = maybe_0.ap(var_1)
    var_3 = maybe_0.get_or_else(bool_0)
    var_3.to_either()


def test_case_12():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_either()


def test_case_13():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.to_box()
    var_2 = var_0.bind(var_0)


def test_case_14():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.to_lazy()
    var_2 = maybe_0.ap(var_1)
    maybe_0.filter(var_1)


def test_case_15():
    str_0 = "m1[1#awm/sC>%kg"
    none_type_0 = None
    none_type_1 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.map(none_type_1)
    var_2 = var_1.ap(none_type_0)
    var_2.get_or_else(str_0)


def test_case_16():
    str_0 = '&"^a'
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.to_try()
    var_0.to_either()


def test_case_17():
    bytes_0 = b"\xde\xc5%\x1c\x05\xd0\x8d3O\x9e\xc5\x19\xd5\x12_\x86\x9do"
    bool_0 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.to_try()
    var_0.to_validation()


def test_case_18():
    str_0 = "(Q2+:"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.to_validation()
    var_2 = maybe_0.filter(var_1)
    var_3 = maybe_0.to_validation()
    var_4 = maybe_0.to_try()
    var_3.get_or_else(str_0)


def test_case_19():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_0.to_validation()


def test_case_20():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.map(bool_0)
    var_1 = var_0.filter(bool_0)
    var_2 = maybe_0.ap(var_0)
    var_3 = var_0.to_either()
    bool_1 = var_0.__eq__(var_2)
    var_4 = maybe_0.bind(bool_0)
    var_5 = maybe_0.bind(bool_1)
    var_6 = var_5.map(var_5)
    var_7 = var_5.to_lazy()
    var_8 = var_4.bind(bool_0)
    var_9 = maybe_0.to_either()
    var_10 = var_4.bind(var_9)
    var_11 = maybe_0.to_box()
    var_12 = var_2.ap(var_2)
    maybe_1 = module_0.Maybe(var_5, var_0)
    var_13 = maybe_1.to_validation()
    bool_2 = var_4.__eq__(bool_0)
    var_14 = var_7.to_validation()
    generic_0 = module_1.Generic()
    var_15 = var_10.to_either()
    bool_3 = var_11.__eq__(var_3)
    generic_0.ap(bool_2)


def test_case_21():
    str_0 = "'\x0bGYCy^9(Ff\rL\r@"
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_box()
    var_1.to_box()


def test_case_22():
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_0, none_type_0)
    var_0 = maybe_0.to_box()
    bool_1 = maybe_0.__eq__(maybe_0)
    var_1 = maybe_0.get_or_else(none_type_0)
    var_1.map(var_1)


def test_case_23():
    str_0 = "(2+:"
    maybe_0 = module_0.Maybe(str_0, str_0)
    none_type_0 = None
    bool_0 = True
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_1.ap(none_type_0)
    bool_1 = True
    maybe_2 = module_0.Maybe(maybe_1, bool_1)
    var_1 = maybe_2.to_box()
    bool_2 = maybe_2.__eq__(maybe_0)
    var_2 = var_1.to_validation()
    maybe_3 = module_0.Maybe(maybe_1, var_1)
    bool_3 = maybe_1.__eq__(str_0)
    var_3 = maybe_3.to_validation()
    var_4 = var_2.to_try()
    var_5 = maybe_3.get_or_else(var_4)
    var_6 = maybe_0.to_try()
    var_5.ap(var_2)
