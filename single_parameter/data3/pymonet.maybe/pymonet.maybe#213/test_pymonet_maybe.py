# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    bytes_0 = b"\xc7\xf9\xddf\x01d\t\xea"
    none_type_0 = None
    maybe_0 = module_0.Maybe(bytes_0, none_type_0)
    maybe_1 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_1.ap(bytes_0)
    bool_0 = var_0.__eq__(var_0)
    bool_1 = True
    maybe_2 = module_0.Maybe(var_0, bool_1)
    bool_0.ap(bool_0)


def test_case_3():
    str_0 = "1YRj"
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    none_type_0 = None
    bool_1 = maybe_0.__eq__(none_type_0)
    var_0 = maybe_0.get_or_else(str_0)
    var_0.to_validation()


def test_case_4():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.map(maybe_0)
    dict_0 = {}
    var_2 = var_1.to_either()
    var_3 = var_1.bind(dict_0)


def test_case_5():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    maybe_0.map(none_type_0)


def test_case_6():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.bind(none_type_0)


def test_case_7():
    str_0 = ""
    int_0 = 1
    bytes_0 = b"=g\x11`\xcc\x08\x98\x8d>\x98\x95"
    maybe_0 = module_0.Maybe(int_0, bytes_0)
    var_0 = maybe_0.ap(str_0)


def test_case_8():
    bytes_0 = b"\x852\xf2\xe4\nh\xa7"
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(maybe_0, bool_1)
    var_0 = maybe_1.to_either()
    none_type_0 = None
    maybe_2 = module_0.Maybe(none_type_0, none_type_0)
    maybe_2.ap(maybe_2)


def test_case_9():
    list_0 = []
    list_1 = [list_0]
    bool_0 = True
    none_type_0 = None
    bool_1 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_1)
    var_0 = maybe_0.ap(bool_0)
    var_1 = var_0.filter(list_1)


def test_case_10():
    bytes_0 = b"p\x12\xc6\x15\xed\rtkA\xd4\\\xfd"
    bool_0 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    var_1 = maybe_0.to_validation()
    int_0 = -443
    maybe_1 = module_0.Maybe(int_0, int_0)
    var_2 = maybe_1.get_or_else(bytes_0)
    var_2.to_validation()


def test_case_11():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_either()
    str_0 = "\n    Maybe type is the most common way of representing nothingness (or the null type).\n    Maybe is effectively abstract and has two concrete subtypes: Box (also Some) and Nothing.\n    "
    set_0 = set()
    bool_1 = False
    maybe_1 = module_0.Maybe(set_0, bool_1)
    var_1 = maybe_1.to_either()
    var_1.bind(str_0)


def test_case_12():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_box()


def test_case_13():
    int_0 = 2420
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_try()


def test_case_14():
    bool_0 = True
    none_type_0 = None
    set_0 = set()
    maybe_0 = module_0.Maybe(set_0, set_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_try()
    var_2 = var_1.get_or_else(none_type_0)
    var_2.ap(bool_0)


def test_case_15():
    complex_0 = 1661.18032 + 926.744545j
    bool_0 = True
    maybe_0 = module_0.Maybe(complex_0, bool_0)
    var_0 = maybe_0.to_try()


def test_case_16():
    bool_0 = False
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.to_try()
    var_2 = maybe_0.to_lazy()
    var_2.get_or_else(bool_0)


def test_case_17():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    none_type_0 = None
    bool_1 = maybe_0.__eq__(bool_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    var_1 = var_0.to_validation()
    var_2 = var_0.filter(var_1)
    bool_2 = True
    maybe_1 = module_0.Maybe(none_type_0, bool_2)
    var_3 = var_0.filter(var_1)


def test_case_18():
    int_0 = -2320
    dict_0 = {int_0: int_0}
    maybe_0 = module_0.Maybe(dict_0, int_0)
    var_0 = maybe_0.ap(dict_0)
    bool_0 = var_0.__eq__(int_0)
    none_type_0 = None
    bool_1 = var_0.__eq__(maybe_0)
    var_1 = var_0.filter(int_0)
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_2 = var_0.to_box()
    var_2.ap(var_2)


def test_case_19():
    tuple_0 = ()
    maybe_0 = module_0.Maybe(tuple_0, tuple_0)
    int_0 = 2333
    maybe_1 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_1.filter(maybe_0)
    maybe_0.filter(tuple_0)


def test_case_20():
    int_0 = -2320
    dict_0 = {int_0: int_0}
    maybe_0 = module_0.Maybe(dict_0, int_0)
    var_0 = maybe_0.ap(dict_0)
    bool_0 = var_0.__eq__(int_0)
    none_type_0 = None
    bool_1 = var_0.__eq__(maybe_0)
    var_1 = var_0.filter(int_0)
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_2 = var_1.map(var_0)
    var_3 = var_2.ap(var_2)
    var_4 = maybe_0.to_box()
    bool_2 = False
    maybe_2 = module_0.Maybe(var_0, bool_2)
    bool_3 = maybe_2.__eq__(var_0)
    var_5 = maybe_0.filter(var_3)
    maybe_3 = module_0.Maybe(maybe_1, var_0)
    var_6 = maybe_3.ap(var_5)
    var_7 = var_5.ap(var_1)
    var_8 = var_1.ap(maybe_3)
    bool_4 = maybe_1.__eq__(maybe_1)
    var_9 = var_8.to_box()
    bool_5 = maybe_2.__eq__(var_6)
    maybe_4 = module_0.Maybe(var_6, bool_2)
    var_10 = var_3.to_box()
    var_11 = var_5.get_or_else(dict_0)
    var_11.ap(var_4)
