# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import builtins as module_1
import typing as module_2


def test_case_0():
    bytes_0 = b"\x8eG\x12\x96\xe6\x9a\xb9i\x91\xb9'7.n\xb5\x9a"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    bool_0 = maybe_0.__eq__(maybe_0)
    maybe_0.filter(none_type_0)


def test_case_3():
    dict_0 = {}
    bool_0 = True
    maybe_0 = module_0.Maybe(dict_0, bool_0)
    bool_1 = maybe_0.__eq__(bool_0)
    var_0 = maybe_0.to_try()
    maybe_1 = module_0.Maybe(dict_0, dict_0)
    var_1 = maybe_0.to_box()
    var_2 = var_1.to_try()
    bool_2 = False
    maybe_2 = module_0.Maybe(maybe_1, bool_2)
    var_3 = maybe_0.filter(var_2)
    var_4 = var_3.bind(maybe_1)
    var_5 = maybe_2.get_or_else(bool_1)
    var_5.filter(dict_0)


def test_case_4():
    object_0 = module_1.object()
    int_0 = 783
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.get_or_else(int_0)
    bool_0 = var_0.__eq__(int_0)
    var_1 = maybe_0.filter(var_0)
    var_2 = maybe_0.map(object_0)
    var_3 = var_2.to_validation()
    var_0.map(var_3)


def test_case_5():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_validation()
    var_2 = var_0.to_validation()
    var_3 = var_1.to_lazy()
    dict_0 = {}
    maybe_1 = module_0.Maybe(dict_0, dict_0)
    bool_1 = maybe_1.__eq__(var_3)
    bool_2 = False
    none_type_0 = None
    maybe_2 = module_0.Maybe(bool_2, none_type_0)
    var_4 = maybe_2.get_or_else(bool_2)
    bool_3 = False
    maybe_3 = module_0.Maybe(bool_3, bool_3)
    var_5 = maybe_3.to_either()
    maybe_3.map(bool_2)


def test_case_6():
    bool_0 = False
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_1, bool_0)
    maybe_0.bind(bool_0)


def test_case_7():
    set_0 = set()
    none_type_0 = None
    maybe_0 = module_0.Maybe(set_0, none_type_0)
    none_type_1 = None
    str_0 = "cX0A/Rt{K*Lz_8"
    maybe_1 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_1.ap(none_type_1)
    var_1 = var_0.get_or_else(maybe_0)


def test_case_8():
    int_0 = -1000
    bool_0 = True
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    maybe_0.ap(int_0)


def test_case_9():
    dict_0 = {}
    bool_0 = True
    maybe_0 = module_0.Maybe(dict_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.ap(maybe_0)
    var_2 = maybe_0.to_try()
    maybe_1 = module_0.Maybe(dict_0, dict_0)
    var_3 = maybe_0.to_box()
    bool_1 = maybe_1.__eq__(maybe_1)
    var_4 = maybe_0.filter(bool_0)
    bool_2 = maybe_1.__eq__(maybe_0)
    var_5 = var_4.to_lazy()
    var_6 = var_4.to_box()
    var_7 = var_5.to_box()
    bool_3 = var_5.__eq__(var_1)
    var_8 = var_3.to_lazy()
    var_9 = var_1.to_lazy()
    var_10 = var_2.filter(maybe_0)
    var_11 = var_1.to_either()
    var_12 = var_10.get_or_else(var_8)


def test_case_10():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_box()
    var_0.to_box()


def test_case_11():
    bytes_0 = b"\x9c*\xb4\xa1\xbd.\x04\xff\x01o\xd6\xc1j\xa2?"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.bind(var_0)
    var_2 = var_1.to_try()
    var_3 = maybe_0.map(maybe_0)
    var_4 = maybe_0.to_lazy()
    var_5 = var_3.get_or_else(maybe_0)
    var_6 = maybe_0.to_try()
    var_7 = var_4.bind(bytes_0)
    var_7.to_either()


def test_case_12():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_try()
    var_0.to_try()


def test_case_13():
    str_0 = "\n    In mathematics and computer science, currying is the technique of translating the evaluation of a function.\n    It that takes multiple arguments (or a tuple of arguments) into evaluating a sequence of functions.\n    each with a single argument.\n    "
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_try()
    var_0.to_validation()


def test_case_14():
    none_type_0 = None
    bytes_0 = b"\xafKa2M\x8e\xc7\xc5\xb9\tVl\xbcA\x0c\xd468\x1fC"
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_0.get_or_else(none_type_0)


def test_case_15():
    generic_0 = module_2.Generic()
    dict_0 = {}
    bool_0 = False
    maybe_0 = module_0.Maybe(dict_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_0.bind(generic_0)


def test_case_16():
    dict_0 = {}
    bool_0 = True
    maybe_0 = module_0.Maybe(dict_0, bool_0)
    var_0 = maybe_0.ap(maybe_0)
    maybe_1 = module_0.Maybe(dict_0, dict_0)
    var_1 = maybe_0.to_box()
    bool_1 = maybe_1.__eq__(maybe_1)
    var_2 = var_1.to_try()
    bool_2 = False
    bool_3 = maybe_1.__eq__(var_0)
    maybe_2 = module_0.Maybe(maybe_1, bool_2)
    var_3 = var_1.to_lazy()
    var_4 = maybe_0.filter(var_3)
    bool_4 = var_1.__eq__(var_1)
    var_5 = var_4.bind(var_0)
    var_6 = var_4.to_box()
    var_7 = var_0.to_box()
    maybe_1.filter(var_3)


def test_case_17():
    dict_0 = {}
    bool_0 = True
    maybe_0 = module_0.Maybe(dict_0, bool_0)
    var_0 = maybe_0.ap(maybe_0)
    bool_1 = maybe_0.__eq__(var_0)
    maybe_1 = module_0.Maybe(dict_0, dict_0)
    var_1 = maybe_0.to_box()
    bool_2 = maybe_1.__eq__(maybe_1)
    var_2 = var_1.to_try()
    bool_3 = False
    bool_4 = maybe_1.__eq__(var_0)
    maybe_2 = module_0.Maybe(maybe_1, bool_3)
    var_3 = var_1.to_lazy()
    var_4 = maybe_0.filter(var_3)
    bool_5 = var_1.__eq__(var_1)
    var_5 = var_4.bind(var_0)
    var_6 = var_4.to_box()
    var_7 = var_0.to_box()
    maybe_1.filter(var_3)
