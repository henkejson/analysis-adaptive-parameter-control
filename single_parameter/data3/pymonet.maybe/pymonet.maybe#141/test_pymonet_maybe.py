# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    maybe_0.map(bool_0)


def test_case_3():
    int_0 = -1293
    float_0 = 421.8
    bool_0 = True
    maybe_0 = module_0.Maybe(float_0, bool_0)
    bool_1 = maybe_0.__eq__(int_0)


def test_case_4():
    complex_0 = -1477.248081 + 811.296j
    maybe_0 = module_0.Maybe(complex_0, complex_0)
    bool_0 = maybe_0.__eq__(complex_0)
    bool_1 = False
    var_0 = maybe_0.map(bool_1)
    maybe_1 = module_0.Maybe(complex_0, bool_0)
    var_1 = var_0.to_either()
    maybe_2 = module_0.Maybe(var_0, var_1)
    maybe_3 = module_0.Maybe(var_1, bool_1)


def test_case_5():
    bytes_0 = b";\xf9\xae:q\xa9\x98"
    none_type_0 = None
    none_type_1 = None
    maybe_0 = module_0.Maybe(none_type_1, bytes_0)
    var_0 = maybe_0.bind(none_type_0)
    none_type_1.ap(bytes_0)


def test_case_6():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    var_1 = maybe_0.ap(maybe_0)
    var_2 = maybe_0.filter(var_1)
    none_type_0 = None
    maybe_1 = module_0.Maybe(bool_0, none_type_0)
    var_3 = maybe_1.to_lazy()
    var_4 = maybe_0.to_lazy()
    maybe_1.filter(var_0)


def test_case_7():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.get_or_else(none_type_0)
    var_1 = maybe_0.to_either()
    var_2 = maybe_0.to_lazy()
    var_3 = maybe_0.to_try()
    var_4 = maybe_0.to_validation()
    maybe_0.ap(var_4)


def test_case_8():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.get_or_else(none_type_0)
    var_0.to_lazy()


def test_case_9():
    int_0 = 1098
    str_0 = "Left[T]"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.to_box()
    var_0.ap(int_0)


def test_case_10():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.to_try()
    var_1.ap(var_1)


def test_case_11():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_0.to_lazy()


def test_case_12():
    complex_0 = -1477.248081 + 811.296j
    maybe_0 = module_0.Maybe(complex_0, complex_0)
    bool_0 = maybe_0.__eq__(complex_0)
    bool_1 = False
    var_0 = maybe_0.map(bool_1)
    maybe_1 = module_0.Maybe(complex_0, bool_0)
    bool_2 = False
    var_1 = var_0.to_either()
    var_2 = maybe_0.to_try()
    var_3 = maybe_0.get_or_else(var_0)
    var_4 = var_0.filter(bool_2)
    var_5 = var_4.filter(var_1)
    var_6 = var_5.bind(bool_1)


def test_case_13():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_try()
    maybe_1 = module_0.Maybe(var_0, bool_0)


def test_case_14():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.ap(maybe_0)
    var_2 = maybe_0.filter(var_1)
    none_type_0 = None
    maybe_1 = module_0.Maybe(bool_0, none_type_0)
    var_3 = module_1.Generic()
    var_4 = var_1.to_validation()
    maybe_1.filter(var_0)


def test_case_15():
    str_0 = "~"
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    maybe_1 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_1.bind(str_0)
    maybe_2 = module_0.Maybe(str_0, str_0)
    var_1 = maybe_1.to_validation()
    var_2 = maybe_1.map(var_1)
    var_3 = maybe_2.bind(maybe_1)
    var_4 = maybe_2.to_lazy()
    var_5 = var_4.to_box()


def test_case_16():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    bool_1 = maybe_0.__eq__(var_0)
    var_1 = var_0.to_validation()
    var_2 = maybe_0.to_lazy()
    list_1 = [bool_0, bool_0, bool_0, list_0]
    maybe_1 = module_0.Maybe(var_0, bool_1)
    var_3 = var_0.to_validation()
    var_0.get_or_else(list_1)


def test_case_17():
    complex_0 = -1477.248081 + 811.296j
    bool_0 = True
    maybe_0 = module_0.Maybe(complex_0, bool_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    var_1 = maybe_0.ap(maybe_0)
    var_2 = maybe_0.to_lazy()
    var_3 = var_0.map(var_0)
    var_4 = maybe_0.filter(var_1)
    none_type_0 = None
    maybe_1 = module_0.Maybe(bool_0, none_type_0)
    bool_1 = var_3.__eq__(var_4)
    var_5 = var_3.to_try()
    var_6 = maybe_0.to_lazy()
    maybe_1.filter(var_0)


def test_case_18():
    str_0 = "\n    Function for return function depended on first function argument\n    cond get list of two-item tuples,\n    first is condition_function, second is execute_function.\n    Returns this execute_function witch first condition_function return truly value.\n\n    :param condition_list: list of two-item tuples (condition_function, execute_function)\n    :type condition_list: List[(Function, Function)]\n    :returns: Returns this execute_function witch first condition_function return truly value\n    :rtype: Function\n    "
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.ap(var_0)
    var_2 = maybe_0.get_or_else(str_0)
    var_3 = maybe_0.map(var_1)
    bool_0 = False
    var_4 = var_1.to_validation()
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    var_5 = var_3.filter(var_2)
    maybe_2 = module_0.Maybe(maybe_1, bool_0)
    maybe_1.bind(maybe_1)


def test_case_19():
    float_0 = 2095.40748
    list_0 = [float_0, float_0, float_0, float_0]
    maybe_0 = module_0.Maybe(list_0, float_0)
    none_type_0 = None
    var_0 = maybe_0.get_or_else(none_type_0)
    var_1 = maybe_0.to_box()
    var_2 = maybe_0.get_or_else(var_1)
    var_3 = maybe_0.filter(float_0)
    var_4 = maybe_0.to_lazy()
    var_5 = var_4.to_validation()
    var_6 = maybe_0.to_either()
    maybe_1 = module_0.Maybe(var_1, var_5)
    var_7 = maybe_0.to_try()
    maybe_2 = module_0.Maybe(none_type_0, var_1)
    var_8 = maybe_1.to_try()
    bool_0 = maybe_0.__eq__(maybe_2)
    var_9 = var_3.to_either()
    var_10 = maybe_0.filter(maybe_0)
    var_11 = var_10.map(var_9)
    var_12 = var_5.to_lazy()
    var_0.filter(maybe_0)
