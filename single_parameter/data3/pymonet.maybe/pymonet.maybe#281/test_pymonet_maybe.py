# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    bytes_0 = b"\xd97.\xb2d\x8a\xfcn\x07tm^\x05\xcc1y\x8b\x06"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)


def test_case_1():
    dict_0 = {}
    maybe_0 = module_0.Maybe(dict_0, dict_0)


def test_case_2():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)


def test_case_3():
    bytes_0 = b"\xcc)\xcc\x8d\xc6H\x82\xc8\x16h\xb4K\xc2+\x14\x05\xf1"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, bytes_0)
    var_0 = maybe_1.to_either()
    bool_0 = maybe_0.__eq__(bytes_0)
    tuple_0 = ()
    bool_1 = True
    var_1 = maybe_1.map(var_0)
    none_type_1 = None
    var_2 = maybe_0.map(none_type_1)
    var_3 = var_2.to_try()
    maybe_2 = module_0.Maybe(bool_1, none_type_1)
    var_4 = maybe_2.to_try()
    var_5 = var_4.get_or_else(tuple_0)
    bytes_1 = b"'\xec@\xb7w\xf0i\xf53\xdb(\x06\x1e\x8a8\xf6(\xfc"
    maybe_3 = module_0.Maybe(bytes_1, bytes_1)
    var_6 = maybe_3.filter(var_5)
    var_7 = var_6.get_or_else(none_type_1)
    int_0 = -3504
    tuple_1 = (var_6, int_0)
    bool_2 = False
    maybe_4 = module_0.Maybe(tuple_1, bool_2)
    var_8 = maybe_4.get_or_else(bytes_0)


def test_case_4():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.bind(bool_0)
    var_1 = var_0.map(var_0)
    var_2 = maybe_0.filter(var_1)
    bool_1 = False
    bool_2 = var_1.__eq__(maybe_0)
    maybe_1 = module_0.Maybe(bool_2, bool_1)
    maybe_1.filter(var_1)


def test_case_5():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.to_either()
    var_2 = var_1.to_validation()
    maybe_0.ap(maybe_0)


def test_case_6():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.bind(bool_0)
    var_1 = maybe_0.filter(var_0)
    bool_1 = False
    bool_2 = var_0.__eq__(maybe_0)
    maybe_1 = module_0.Maybe(bool_2, bool_1)
    maybe_1.filter(maybe_0)


def test_case_7():
    bytes_0 = b"8\xcdL]\x0fr\xfa"
    bool_0 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    maybe_0.bind(bytes_0)


def test_case_8():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.ap(maybe_0)
    var_1 = maybe_0.filter(maybe_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(var_0, bool_1)
    maybe_1.filter(bool_1)


def test_case_9():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.filter(maybe_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(var_0, bool_1)
    maybe_1.filter(bool_1)


def test_case_10():
    str_0 = "ImmutableList: you can not add any other instace than ImmutableList"
    bool_0 = False
    bool_1 = True
    maybe_0 = module_0.Maybe(str_0, bool_1)
    var_0 = maybe_0.get_or_else(bool_1)
    var_1 = maybe_0.to_box()
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    maybe_1.filter(var_1)


def test_case_11():
    str_0 = "G-1r?0Yq!2,florZ"
    set_0 = {str_0, str_0, str_0}
    bytes_0 = b"\x103\xba\xbf\x8d\xb3K\xe5\x1b\xdf\x14\xc5\xceC\xf01\xeb\x8d"
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.get_or_else(bytes_0)
    maybe_1 = module_0.Maybe(set_0, bytes_0)
    var_1 = maybe_1.to_try()
    bool_1 = False
    none_type_1 = None
    maybe_2 = module_0.Maybe(bool_1, none_type_1)
    var_2 = maybe_2.to_either()
    var_3 = var_2.to_box()
    var_4 = var_1.bind(none_type_0)
    tuple_0 = (maybe_0, var_0)
    var_5 = maybe_2.to_try()
    var_6 = var_5.get_or_else(tuple_0)
    bool_2 = var_3.__eq__(var_4)


def test_case_12():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.to_try()
    var_2 = maybe_0.filter(var_1)
    bool_1 = False
    maybe_1 = module_0.Maybe(bool_0, bool_1)
    maybe_1.filter(var_1)


def test_case_13():
    tuple_0 = ()
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_either()
    var_0.filter(tuple_0)


def test_case_14():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.ap(maybe_0)
    var_1 = maybe_0.ap(bool_0)
    var_2 = var_1.to_lazy()
    var_3 = maybe_0.to_try()
    bytes_0 = b"\xd97.\xb2d\x8a\xfcn\x07tm^\x05\xcc1y\x8b\x06"
    var_4 = maybe_0.filter(bytes_0)
    var_5 = var_3.filter(var_3)
    bool_1 = False
    bool_2 = var_3.__eq__(maybe_0)
    maybe_1 = module_0.Maybe(bytes_0, bool_1)
    var_6 = var_3.bind(var_3)
    maybe_1.filter(var_3)


def test_case_15():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    maybe_0 = module_0.Maybe(list_0, bool_0)
    var_0 = maybe_0.to_lazy()


def test_case_16():
    dict_0 = {}
    maybe_0 = module_0.Maybe(dict_0, dict_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.to_try()


def test_case_17():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_0.bind(none_type_0)


def test_case_18():
    bytes_0 = b"f\xbdJ\x1e1\x06"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    bool_0 = False
    int_0 = -878
    var_0 = maybe_0.to_validation()
    maybe_1 = module_0.Maybe(int_0, int_0)
    var_1 = maybe_1.filter(bool_0)
    var_2 = maybe_1.to_lazy()
    var_3 = maybe_0.filter(var_2)
    var_4 = var_3.ap(var_2)
    var_5 = var_0.to_either()
    var_6 = var_2.bind(var_4)
    var_7 = var_1.bind(var_2)
    none_type_0 = None
    tuple_0 = (var_1, var_1, bool_0)
    var_8 = var_1.filter(tuple_0)
    maybe_2 = module_0.Maybe(var_1, none_type_0)
    var_9 = var_2.to_validation()
    var_10 = var_1.to_try()
    var_10.ap(var_10)


def test_case_19():
    bool_0 = False
    str_0 = "{!J'+%[<Ar.7 "
    bool_1 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_try()
    maybe_1 = module_0.Maybe(str_0, bool_1)
    var_2 = maybe_1.to_validation()
    var_3 = var_2.to_either()
    var_3.to_either()


def test_case_20():
    none_type_0 = None
    str_0 = "\n        If Maybe is empty return default_value, in other case.\n\n        :param default_value: value to return if Maybe is empty\n        :type default_value: Any\n        :returns: value of Maybe or default_value\n        :rtype: A\n        "
    maybe_0 = module_0.Maybe(none_type_0, str_0)
    var_0 = maybe_0.ap(str_0)
    str_1 = "x}(pAx7\x0b%P"
    bool_0 = maybe_0.__eq__(var_0)
    bool_1 = var_0.__eq__(none_type_0)
    maybe_1 = module_0.Maybe(str_1, bool_0)
    var_1 = maybe_1.to_either()
    var_2 = maybe_0.to_box()
    maybe_2 = var_0.bind(str_1)
    var_3 = var_1.to_validation()
    var_4 = var_1.to_box()
    var_5 = maybe_2.ap(none_type_0)
    var_6 = var_5.filter(var_1)
    var_7 = var_6.to_lazy()
    var_8 = maybe_0.to_validation()
    var_9 = var_7.ap(none_type_0)
    var_10 = maybe_0.get_or_else(var_5)
    var_11 = var_9.bind(var_0)
    var_12 = var_10.to_either()
    var_11.filter(none_type_0)


def test_case_21():
    str_0 = "ImmutableList: you can not add any other instace than ImmutableList"
    bool_0 = False
    bool_1 = True
    maybe_0 = module_0.Maybe(str_0, bool_1)
    var_0 = maybe_0.get_or_else(bool_1)
    var_1 = maybe_0.to_box()
    var_2 = maybe_0.filter(var_0)
    var_3 = var_2.filter(var_1)
    var_4 = var_3.bind(str_0)
    int_0 = -338
    var_5 = maybe_0.filter(int_0)
    var_6 = var_3.to_try()
    var_7 = var_6.get_or_else(var_3)
    bool_2 = False
    maybe_1 = module_0.Maybe(bool_0, bool_2)
    var_8 = maybe_1.to_box()
    var_9 = maybe_1.to_try()
    maybe_1.filter(bool_2)


def test_case_22():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.to_validation()
    var_1.get_or_else(var_0)
