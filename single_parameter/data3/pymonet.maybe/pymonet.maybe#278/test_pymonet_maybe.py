# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    tuple_0 = ()
    bool_0 = False
    maybe_0 = module_0.Maybe(tuple_0, bool_0)
    var_0 = maybe_0.to_try()
    int_0 = -1156
    bool_1 = maybe_0.__eq__(int_0)
    var_0.to_validation()


def test_case_3():
    none_type_0 = None
    int_0 = -2024
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.ap(none_type_0)
    none_type_1 = None
    maybe_1 = module_0.Maybe(none_type_1, none_type_1)
    maybe_1.map(var_0)


def test_case_4():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.filter(bool_0)
    maybe_1 = var_0.ap(var_0)
    str_0 = "\n        Call argument function with args in try-catch.\n        when function don't raise exception, not successfully when raise.\n\n        :params fn: function to call and store in monad\n        :type fn: Function(*args) -> A\n        :params *args:\n        :type fn: List\n        :retruns: Successfully monad Try when function don't raise exception, not successfully when raise\n        :rtype: Try[A]\n        "
    maybe_2 = module_0.Maybe(maybe_1, str_0)
    var_1 = maybe_2.to_validation()
    none_type_0 = None
    var_2 = var_0.ap(none_type_0)
    var_3 = var_1.to_lazy()
    var_4 = var_0.to_validation()
    var_5 = maybe_0.bind(var_3)
    var_6 = var_5.bind(var_0)
    var_7 = var_4.to_lazy()


def test_case_5():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_try()
    var_2 = maybe_0.to_try()
    maybe_1 = module_0.Maybe(none_type_0, var_0)
    maybe_2 = module_0.Maybe(bool_0, bool_0)
    bool_1 = var_0.__eq__(maybe_1)
    maybe_0.bind(var_0)


def test_case_6():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    maybe_1 = module_0.Maybe(maybe_0, bool_0)
    var_0 = maybe_1.filter(none_type_0)
    var_1 = maybe_0.ap(var_0)
    maybe_0.filter(maybe_0)


def test_case_7():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.filter(bool_0)
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    var_1 = maybe_1.to_try()


def test_case_8():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1 = module_0.Maybe(maybe_0, bool_0)
    var_0 = maybe_1.filter(none_type_0)
    maybe_0.filter(maybe_0)


def test_case_9():
    int_0 = -64
    list_0 = [int_0, int_0]
    str_0 = "&|{lRg)Q vUj3\nFKA^:"
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.get_or_else(list_0)
    bool_1 = True
    maybe_1 = module_0.Maybe(bool_1, bool_1)
    var_1 = maybe_1.to_box()
    var_2 = var_1.to_try()
    var_3 = maybe_1.to_box()
    var_3.map(maybe_1)


def test_case_10():
    tuple_0 = ()
    bool_0 = False
    maybe_0 = module_0.Maybe(tuple_0, bool_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.get_or_else(tuple_0)


def test_case_11():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.filter(bool_0)
    var_1 = maybe_0.to_either()
    var_2 = var_1.to_box()
    var_3 = var_1.map(var_1)
    var_4 = var_1.bind(var_1)
    bool_1 = var_4.__eq__(var_0)
    var_5 = maybe_0.to_validation()
    var_6 = var_0.map(var_5)
    var_7 = var_4.to_box()


def test_case_12():
    complex_0 = -2535.785 - 1764.5j
    set_0 = {complex_0, complex_0, complex_0}
    none_type_0 = None
    maybe_0 = module_0.Maybe(set_0, none_type_0)
    var_0 = maybe_0.to_either()


def test_case_13():
    bool_0 = True
    list_0 = []
    bytes_0 = b"\xc6\x95a\xa1\xd4z\x06"
    maybe_0 = module_0.Maybe(list_0, bytes_0)
    var_0 = maybe_0.filter(bool_0)
    var_1 = var_0.to_box()
    maybe_1 = module_0.Maybe(var_1, var_1)


def test_case_14():
    bytes_0 = b"wt\rM\x85\xa9\xb7_!T\xba"
    bool_0 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_either()
    var_1.to_either()


def test_case_15():
    bytes_0 = b"\x05\xd7~T\x89&Le\x97\xfa"
    list_0 = [bytes_0]
    bool_0 = True
    maybe_0 = module_0.Maybe(list_0, bool_0)
    maybe_1 = module_0.Maybe(list_0, bool_0)
    maybe_2 = module_0.Maybe(list_0, bytes_0)
    var_0 = maybe_1.get_or_else(list_0)
    var_1 = maybe_2.filter(var_0)
    var_2 = maybe_1.to_lazy()
    var_3 = var_2.ap(bytes_0)
    none_type_0 = None
    var_4 = maybe_0.to_validation()
    var_4.get_or_else(none_type_0)


def test_case_16():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_1 = maybe_0.to_lazy()
    maybe_1 = module_0.Maybe(maybe_0, bool_0)
    var_0 = maybe_1.filter(none_type_0)
    var_1 = maybe_0.ap(var_0)
    maybe_0.filter(maybe_0)


def test_case_17():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    bool_1 = True
    maybe_0 = module_0.Maybe(list_0, bool_1)
    var_0 = maybe_0.to_try()


def test_case_18():
    str_0 = "h&X #?;g?^J"
    none_type_0 = None
    maybe_0 = module_0.Maybe(str_0, none_type_0)
    var_0 = maybe_0.to_validation()


def test_case_19():
    none_type_0 = None
    bool_0 = True
    bool_1 = True
    bool_2 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_2)
    var_0 = maybe_0.to_lazy()
    maybe_1 = module_0.Maybe(bool_0, bool_1)
    var_1 = maybe_1.ap(none_type_0)
    var_2 = var_1.bind(bool_0)
    var_3 = var_2.to_lazy()
    var_4 = var_3.to_box()
    var_4.bind(bool_0)


def test_case_20():
    bytes_0 = b"/\xe79"
    none_type_0 = None
    maybe_0 = module_0.Maybe(bytes_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_either()


def test_case_21():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    maybe_1 = module_0.Maybe(maybe_0, bool_0)
    var_0 = maybe_1.filter(none_type_0)
    maybe_0.filter(maybe_0)


def test_case_22():
    int_0 = 1054
    str_0 = "`A!+R"
    set_0 = set()
    maybe_0 = module_0.Maybe(int_0, set_0)
    maybe_1 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_1.map(int_0)


def test_case_23():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    bool_1 = True
    maybe_1 = module_0.Maybe(none_type_0, bool_1)
    var_0 = maybe_1.filter(none_type_0)
    var_1 = maybe_0.ap(var_0)
    bool_2 = var_0.__eq__(var_0)
    bool_3 = maybe_0.__eq__(maybe_1)
    maybe_0.filter(maybe_0)
