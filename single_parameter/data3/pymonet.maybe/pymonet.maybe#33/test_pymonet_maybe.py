# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    bytes_0 = b"J\xbb{4 \xd9S\xc7\xf1\x91"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.filter(maybe_0)
    bool_0 = var_0.__eq__(var_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(maybe_0, none_type_0)
    maybe_1.filter(none_type_0)


def test_case_3():
    bytes_0 = b"J\xbb{4 \xd9S\xc7\xf1\x91"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.filter(var_0)
    bool_0 = var_1.__eq__(var_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(maybe_0, none_type_0)
    maybe_1.filter(none_type_0)


def test_case_4():
    int_0 = 1
    bytes_0 = b"J\xbb{4 \xd9S\xc7\xf1\x91"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_box()
    maybe_1 = module_0.Maybe(int_0, var_0)
    float_0 = -3511.26089
    bool_0 = True
    maybe_2 = module_0.Maybe(float_0, bool_0)
    var_1 = maybe_0.map(var_0)
    var_2 = maybe_2.map(var_0)
    var_3 = var_2.bind(int_0)


def test_case_5():
    tuple_0 = ()
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.map(tuple_0)


def test_case_6():
    int_0 = 1331
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.bind(maybe_0)


def test_case_7():
    str_0 = "Q)IU%AV"
    none_type_0 = None
    maybe_0 = module_0.Maybe(str_0, none_type_0)
    maybe_0.bind(str_0)


def test_case_8():
    complex_0 = 852.65 + 136.1j
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(complex_0, bool_0)
    var_0 = maybe_0.ap(none_type_0)
    var_1 = var_0.filter(complex_0)
    var_2 = var_1.to_box()
    var_3 = var_2.to_either()
    var_4 = var_3.to_validation()


def test_case_9():
    bytes_0 = b"W\x00\xb7\xba"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    complex_0 = 385 - 334.24j
    list_0 = [complex_0]
    bool_0 = False
    maybe_0 = module_0.Maybe(list_0, bool_0)
    maybe_0.ap(dict_0)


def test_case_10():
    bytes_0 = b"J\xbb{4 \xd9S\xc7\xf1\x91"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.filter(maybe_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(maybe_0, none_type_0)
    maybe_1.filter(none_type_0)


def test_case_11():
    str_0 = "V3Ki_<\x0b<]$R$p\n(g"
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.ap(maybe_0)
    maybe_1 = maybe_0.get_or_else(str_0)
    bool_1 = var_0.__eq__(maybe_0)
    bool_2 = maybe_0.__eq__(str_0)
    maybe_1.ap(bool_0)


def test_case_12():
    bytes_0 = b"z\xd6\xd9\x0c"
    complex_0 = 3093.94 - 846.23619j
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.get_or_else(complex_0)
    var_0.get_or_else(bytes_0)


def test_case_13():
    bytes_0 = b"J\xbb{4 \xd9S\xc7\xf1\x91"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.bind(maybe_0)
    var_1 = var_0.to_either()
    var_2 = var_0.to_try()
    var_3 = maybe_0.filter(var_2)
    bool_0 = var_0.__eq__(var_2)
    none_type_0 = None
    maybe_1 = module_0.Maybe(maybe_0, none_type_0)
    maybe_1.filter(none_type_0)


def test_case_14():
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_either()
    var_0.get_or_else(bool_0)


def test_case_15():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.to_box()
    maybe_0.filter(var_0)


def test_case_16():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.to_lazy()
    var_2 = var_1.to_validation()
    var_3 = maybe_0.to_try()
    var_2.to_validation()


def test_case_17():
    bool_0 = False
    generic_0 = module_1.Generic()
    dict_0 = {generic_0: generic_0, generic_0: generic_0}
    maybe_0 = module_0.Maybe(dict_0, generic_0)
    var_0 = maybe_0.get_or_else(bool_0)
    str_0 = " E.!r,oY$%cV8]mA"
    none_type_0 = None
    maybe_1 = module_0.Maybe(str_0, none_type_0)
    var_1 = maybe_1.get_or_else(none_type_0)
    var_2 = maybe_0.bind(var_0)
    var_3 = maybe_1.to_lazy()
    var_4 = var_3.ap(none_type_0)
    bool_1 = var_2.__eq__(var_2)
    bool_2 = maybe_1.__eq__(var_3)
    var_0.to_validation()


def test_case_18():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_try()
    var_0.to_try()


def test_case_19():
    str_0 = "d:/NU"
    bool_0 = False
    none_type_0 = None
    none_type_1 = None
    none_type_2 = None
    maybe_0 = module_0.Maybe(none_type_2, str_0)
    var_0 = maybe_0.filter(none_type_1)
    var_1 = maybe_0.ap(none_type_1)
    var_2 = maybe_0.to_validation()
    var_3 = var_1.bind(none_type_0)
    maybe_1 = module_0.Maybe(str_0, bool_0)


def test_case_20():
    bytes_0 = b"nd\xb1,\xe3G\t\x88\x8c"
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(bytes_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_validation()
    var_2 = var_1.to_box()
    var_3 = var_2.to_either()
    var_4 = var_3.to_validation()
    var_5 = var_4.to_either()
    var_6 = var_5.to_box()
    var_7 = var_6.to_validation()
    maybe_1 = module_0.Maybe(bytes_0, bytes_0)
    var_8 = maybe_1.to_validation()
    var_9 = maybe_1.to_validation()
    bool_1 = False
    maybe_2 = module_0.Maybe(bool_0, bool_1)
    var_10 = maybe_2.to_box()
    maybe_2.ap(bool_0)


def test_case_21():
    list_0 = []
    bool_0 = False
    maybe_0 = module_0.Maybe(list_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_validation()
    maybe_0.filter(var_0)


def test_case_22():
    str_0 = "d:/NU"
    none_type_0 = None
    none_type_1 = None
    none_type_2 = None
    maybe_0 = module_0.Maybe(none_type_2, str_0)
    var_0 = maybe_0.filter(none_type_1)
    var_1 = maybe_0.ap(none_type_1)
    bool_0 = maybe_0.__eq__(var_1)
    var_2 = var_1.bind(var_1)
    var_3 = var_2.to_lazy()
    maybe_1 = module_0.Maybe(none_type_0, none_type_1)
    var_4 = maybe_1.to_either()
    maybe_1.filter(var_2)
