# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import builtins as module_1


def test_case_0():
    int_0 = -1059
    maybe_0 = module_0.Maybe(int_0, int_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    float_0 = 566.224
    bool_0 = True
    maybe_0 = module_0.Maybe(float_0, bool_0)
    bool_1 = False
    var_0 = maybe_0.bind(float_0)
    bool_2 = maybe_0.__eq__(var_0)
    bool_1.to_box()


def test_case_3():
    bytes_0 = b"\r\x05\xce4\xdc\x10\x1f\xe9\x08bC\xfa"
    dict_0 = {}
    maybe_0 = module_0.Maybe(dict_0, dict_0)
    bool_0 = maybe_0.__eq__(bytes_0)


def test_case_4():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.map(var_0)
    var_2 = maybe_0.to_either()
    var_3 = var_1.to_lazy()
    var_4 = maybe_0.ap(maybe_0)
    var_5 = maybe_0.get_or_else(var_2)
    var_6 = var_3.map(var_3)
    var_7 = var_1.to_box()
    var_8 = maybe_0.filter(var_4)


def test_case_5():
    float_0 = 1878.747456
    bool_0 = False
    maybe_0 = module_0.Maybe(float_0, bool_0)
    var_0 = maybe_0.to_box()
    maybe_0.map(var_0)


def test_case_6():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    maybe_0 = module_0.Maybe(dict_0, bool_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, maybe_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_try()
    var_2 = maybe_1.bind(var_1)
    var_1.to_validation()


def test_case_7():
    bool_0 = False
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    maybe_0.bind(bool_0)


def test_case_8():
    str_0 = "5C3G\x0b7p"
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.ap(str_0)
    var_1 = var_0.to_either()
    var_2 = var_1.to_box()
    var_2.to_box()


def test_case_9():
    bytes_0 = b"\xeb\x19}"
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.filter(bytes_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(bytes_0, bool_1)
    maybe_1.ap(maybe_1)


def test_case_10():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = False
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    list_0 = [maybe_0, maybe_1]
    maybe_0.filter(list_0)


def test_case_11():
    none_type_0 = None
    none_type_1 = None
    maybe_0 = module_0.Maybe(none_type_1, none_type_1)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.get_or_else(none_type_0)


def test_case_12():
    int_0 = -1881
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.to_either()


def test_case_13():
    none_type_0 = None
    none_type_1 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_1, bool_0)
    var_0 = maybe_0.to_either()
    var_0.ap(none_type_0)


def test_case_14():
    set_0 = set()
    none_type_0 = None
    maybe_0 = module_0.Maybe(set_0, none_type_0)
    var_0 = maybe_0.to_lazy()


def test_case_15():
    bytes_0 = b"\xe0\xde\xca\xe2\xaa*\xc3\xd9]\x8d\xb5\x04\xb84e\xdb\xcf"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_try()


def test_case_16():
    bool_0 = False
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_try()
    var_0.to_try()


def test_case_17():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    maybe_0.ap(bool_0)


def test_case_18():
    list_0 = []
    object_0 = module_1.object(*list_0)
    bool_0 = True
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_lazy()
    bool_2 = var_0.__eq__(object_0)
    none_type_0 = None
    bool_3 = True
    maybe_1 = module_0.Maybe(none_type_0, bool_3)
    var_1 = maybe_1.to_either()
    var_2 = var_0.to_try()
    var_0.get_or_else(object_0)


def test_case_19():
    none_type_0 = None
    bytes_0 = b"r\x15u\xc6\x00"
    tuple_0 = (bytes_0,)
    maybe_0 = module_0.Maybe(bytes_0, tuple_0)
    var_0 = maybe_0.map(none_type_0)
    none_type_1 = None
    var_1 = var_0.to_lazy()
    list_0 = []
    var_2 = var_0.ap(var_0)
    bool_0 = True
    var_3 = maybe_0.get_or_else(var_2)
    maybe_1 = module_0.Maybe(list_0, bool_0)
    var_4 = maybe_1.to_lazy()
    var_5 = maybe_1.filter(none_type_1)
    bool_1 = maybe_1.__eq__(var_0)
    var_6 = maybe_0.ap(list_0)
    var_7 = maybe_1.to_lazy()
    bool_2 = var_0.__eq__(var_2)
    var_8 = var_0.to_try()
    var_9 = maybe_0.to_try()
    var_10 = var_4.to_try()
    var_11 = var_8.get_or_else(list_0)


def test_case_20():
    none_type_0 = None
    bytes_0 = b"r\x15u\xc6\x00"
    tuple_0 = (bytes_0,)
    maybe_0 = module_0.Maybe(bytes_0, tuple_0)
    var_0 = maybe_0.map(none_type_0)
    none_type_1 = None
    var_1 = var_0.to_lazy()
    list_0 = []
    var_2 = var_0.ap(var_0)
    var_3 = maybe_0.get_or_else(var_2)
    maybe_1 = module_0.Maybe(list_0, var_3)
    var_4 = maybe_1.to_lazy()
    var_5 = var_2.ap(var_3)
    var_6 = var_2.to_either()
    var_7 = maybe_1.filter(none_type_1)
    bool_0 = maybe_1.__eq__(var_0)
    var_8 = maybe_0.ap(list_0)
    var_9 = maybe_1.to_lazy()
    bool_1 = var_4.__eq__(var_9)
    var_10 = var_7.to_try()
    var_11 = var_8.to_try()
    var_12 = var_1.bind(list_0)
    var_13 = var_1.ap(var_8)
    var_14 = var_1.ap(var_6)
    var_15 = maybe_0.to_try()
