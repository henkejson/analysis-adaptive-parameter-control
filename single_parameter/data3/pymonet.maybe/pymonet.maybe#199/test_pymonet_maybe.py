# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    none_type_0 = None
    none_type_1 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_1, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_try()
    float_0 = -3191.0
    maybe_1 = module_0.Maybe(float_0, float_0)
    var_2 = maybe_1.ap(var_1)
    bool_1 = var_2.__eq__(none_type_0)


def test_case_3():
    bytes_0 = b"{?"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    bool_0 = False
    maybe_1 = module_0.Maybe(maybe_0, bool_0)
    var_0 = maybe_1.ap(maybe_0)
    var_1 = var_0.filter(var_0)
    var_2 = var_1.to_lazy()
    maybe_1.filter(maybe_1)


def test_case_4():
    bytes_0 = b"\x81\x94\x853}\xf1..$vu"
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.ap(maybe_0)
    var_1 = maybe_0.bind(var_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_2 = maybe_1.to_box()


def test_case_5():
    int_0 = -3492
    str_0 = "ep[:F9"
    list_0 = [int_0, int_0, int_0, str_0]
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.bind(list_0)


def test_case_6():
    int_0 = -543
    none_type_0 = None
    none_type_1 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_1, bool_0)
    var_0 = maybe_0.bind(none_type_1)
    var_1 = var_0.filter(none_type_0)
    var_2 = var_1.to_lazy()
    var_3 = var_2.ap(int_0)


def test_case_7():
    str_0 = "nT"
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.get_or_else(none_type_0)
    bool_1 = var_0.__eq__(str_0)
    maybe_1 = module_0.Maybe(str_0, str_0)
    var_1 = maybe_1.to_box()
    var_2 = maybe_1.to_try()
    var_3 = maybe_1.ap(var_1)


def test_case_8():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_validation()
    bool_0 = False
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    maybe_2 = module_0.Maybe(bool_0, none_type_0)
    var_1 = maybe_1.get_or_else(none_type_0)
    float_0 = -349.82
    maybe_3 = module_0.Maybe(var_1, bool_0)
    bool_1 = maybe_3.__eq__(float_0)
    set_0 = {var_1}
    maybe_4 = module_0.Maybe(maybe_1, set_0)
    var_2 = maybe_3.to_box()
    var_3 = maybe_4.to_try()
    var_4 = var_2.ap(maybe_4)


def test_case_9():
    none_type_0 = None
    float_0 = -1870.1
    maybe_0 = module_0.Maybe(float_0, float_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_validation()
    var_2 = var_1.to_try()
    var_3 = var_0.to_lazy()
    var_4 = var_2.get_or_else(none_type_0)


def test_case_10():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_try()


def test_case_11():
    bytes_0 = b"~\xbc\xc3<KX \x1f\xd0\xdc,"
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.to_lazy()


def test_case_12():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_box()
    var_2 = var_1.to_try()


def test_case_13():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_try()
    var_0.to_lazy()


def test_case_14():
    bytes_0 = b"{?"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    bool_0 = False
    maybe_1 = module_0.Maybe(maybe_0, bool_0)
    var_0 = maybe_1.ap(maybe_0)
    var_1 = var_0.filter(var_0)
    var_2 = var_1.to_lazy()
    var_3 = maybe_1.to_try()
    var_4 = maybe_1.to_box()
    maybe_1.filter(maybe_1)


def test_case_15():
    bytes_0 = b"\x81\x94\x853}\xf1..$vu"
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.ap(maybe_0)
    var_1 = maybe_0.bind(var_0)
    var_2 = maybe_0.to_either()
    var_3 = maybe_0.to_box()
    var_4 = var_2.to_lazy()
    var_5 = maybe_0.ap(var_1)
    var_6 = maybe_0.to_validation()
    bool_1 = var_1.__eq__(var_6)


def test_case_16():
    bytes_0 = b"\xc7\xc4\x1ev\xd3G\xab\xca\xd6\xf4"
    tuple_0 = (bytes_0,)
    bytes_1 = b"Xcv\x8dOQ\x93[D"
    maybe_0 = module_0.Maybe(bytes_1, bytes_1)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.bind(tuple_0)
    var_1.to_validation()


def test_case_17():
    bytes_0 = b"\x91\x19"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(maybe_0, none_type_0)
    var_0 = maybe_0.ap(none_type_0)
    var_1 = maybe_0.filter(var_0)
    var_2 = maybe_0.ap(maybe_0)
    var_3 = var_2.to_lazy()
    bool_0 = var_0.__eq__(var_0)
    var_4 = maybe_1.to_try()
    var_5 = maybe_1.to_try()
    var_6 = maybe_1.to_either()
    var_6.to_either()


def test_case_18():
    bytes_0 = b"{?"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    none_type_0 = None
    bool_0 = False
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    maybe_2 = module_0.Maybe(maybe_0, maybe_0)
    bool_1 = maybe_2.__eq__(maybe_1)
    var_0 = maybe_2.filter(maybe_0)
    var_1 = maybe_0.ap(maybe_0)
    var_2 = var_0.ap(var_1)
    var_3 = var_1.to_lazy()
    var_4 = maybe_0.to_try()
    var_5 = var_2.get_or_else(none_type_0)
    var_6 = var_1.get_or_else(bool_0)
    var_6.to_either()


def test_case_19():
    bytes_0 = b"\x91"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(maybe_0, none_type_0)
    var_0 = maybe_0.ap(none_type_0)
    var_1 = maybe_0.ap(maybe_0)
    var_2 = maybe_0.filter(var_0)
    var_3 = maybe_0.ap(maybe_0)
    var_4 = maybe_0.get_or_else(none_type_0)
    var_5 = maybe_0.ap(var_4)
    var_6 = var_3.to_lazy()
    var_7 = maybe_0.get_or_else(var_0)
    var_8 = var_2.to_lazy()
    var_9 = var_8.to_either()
    var_10 = var_5.to_either()
    var_11 = var_8.to_either()
    var_12 = var_8.to_either()
    var_13 = var_6.to_either()
    maybe_1.ap(maybe_1)


def test_case_20():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = False
    maybe_1 = module_0.Maybe(bool_0, none_type_0)
    bool_1 = maybe_1.__eq__(maybe_1)
    maybe_1.ap(maybe_1)
