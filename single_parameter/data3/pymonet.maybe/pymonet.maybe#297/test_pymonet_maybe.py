# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    complex_0 = -2609 + 2795.7134j
    maybe_0 = module_0.Maybe(complex_0, complex_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.bind(var_0)
    var_2 = var_0.to_either()
    var_3 = var_1.to_try()
    bool_0 = maybe_0.__eq__(var_0)
    var_4 = maybe_0.to_either()
    var_5 = var_4.to_lazy()
    var_6 = var_5.to_try()
    var_7 = var_5.to_try()
    var_8 = maybe_0.bind(var_6)


def test_case_3():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.map(none_type_0)


def test_case_4():
    complex_0 = -2609 + 2795.7134j
    maybe_0 = module_0.Maybe(complex_0, complex_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.bind(var_0)
    var_2 = var_1.to_try()
    var_3 = maybe_0.to_either()
    var_4 = var_1.filter(var_0)
    complex_0.filter(var_0)


def test_case_5():
    bool_0 = False
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_0.bind(none_type_0)


def test_case_6():
    int_0 = 343
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.ap(int_0)


def test_case_7():
    bool_0 = True
    dict_0 = {}
    maybe_0 = module_0.Maybe(dict_0, dict_0)
    bool_1 = False
    bool_2 = True
    maybe_1 = module_0.Maybe(bool_0, bool_2)
    maybe_2 = module_0.Maybe(bool_0, bool_1)
    maybe_0.ap(bool_0)


def test_case_8():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.filter(bool_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(bool_0, bool_1)
    maybe_1.filter(var_0)


def test_case_9():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    bool_1 = maybe_0.__eq__(maybe_0)


def test_case_10():
    none_type_0 = None
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_either()
    maybe_1 = module_0.Maybe(dict_0, var_0)
    var_1 = maybe_1.filter(none_type_0)
    bool_1 = var_1.__eq__(var_1)
    var_2 = var_1.to_lazy()
    var_3 = maybe_1.to_try()
    var_4 = maybe_0.get_or_else(var_0)
    bool_2 = False
    maybe_2 = module_0.Maybe(dict_0, bool_2)
    maybe_2.filter(maybe_1)


def test_case_11():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.filter(var_0)
    var_2 = var_1.to_box()
    var_3 = var_1.to_lazy()
    bool_1 = False
    maybe_1 = module_0.Maybe(var_0, bool_1)
    maybe_1.filter(var_1)


def test_case_12():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.filter(bool_0)
    var_1 = var_0.to_box()
    var_2 = var_0.to_lazy()
    bool_1 = False
    maybe_1 = module_0.Maybe(bool_0, bool_1)
    maybe_1.filter(var_0)


def test_case_13():
    none_type_0 = None
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, none_type_0: none_type_0}
    bool_1 = True
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_box()
    maybe_1 = module_0.Maybe(dict_0, bool_1)
    var_1 = maybe_1.filter(none_type_0)
    bool_2 = var_1.__eq__(var_1)
    var_2 = var_1.to_box()
    var_3 = var_1.to_lazy()
    var_4 = maybe_1.filter(var_2)
    var_5 = var_1.to_either()
    var_6 = var_4.to_try()
    var_7 = var_3.map(var_6)
    var_8 = var_4.get_or_else(bool_1)
    bool_3 = False
    maybe_2 = module_0.Maybe(dict_0, bool_3)
    maybe_2.filter(maybe_1)


def test_case_14():
    str_0 = "\n        Returns Lazy with function returning argument.\n\n        :param value: value to return by Lazy constructor_fn\n        :type value: Any\n        :returns: Lazy with function returning argument\n        :rtype: Lazy[Function() -> A]\n        "
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.to_lazy()


def test_case_15():
    str_0 = "P\nO.?{H"
    bytes_0 = b"\xa6"
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_try()
    var_2 = var_0.to_either()
    var_3 = var_2.to_lazy()
    var_4 = var_3.to_box()
    maybe_1 = module_0.Maybe(str_0, var_4)
    var_5 = maybe_1.get_or_else(bytes_0)
    list_0 = [str_0]
    bool_1 = False
    maybe_2 = module_0.Maybe(list_0, bool_1)
    var_6 = maybe_2.to_lazy()
    var_7 = var_6.to_validation()
    bool_2 = maybe_2.__eq__(maybe_2)


def test_case_16():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_try()


def test_case_17():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_try()
    var_0.to_box()


def test_case_18():
    bool_0 = False
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_validation()


def test_case_19():
    bytes_0 = b"\x9d\xbf\x7fw\x81\xaa\xa7E\xc7B\xda\\"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_box()


def test_case_20():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)


def test_case_21():
    complex_0 = -2609 + 2795.7134j
    maybe_0 = module_0.Maybe(complex_0, complex_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.bind(var_0)
    var_2 = var_0.to_either()
    var_3 = var_1.to_try()
    bool_0 = maybe_0.__eq__(var_0)
    var_4 = maybe_0.to_either()
    var_5 = var_4.to_lazy()
    var_6 = maybe_0.to_either()
    var_7 = maybe_0.to_lazy()
    var_8 = var_6.to_lazy()
    generic_0 = module_1.Generic()
    var_9 = var_1.filter(generic_0)
    var_10 = var_9.map(var_4)
    var_11 = var_10.ap(var_4)


def test_case_22():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = maybe_0.__eq__(none_type_0)
    bool_1 = maybe_0.to_validation()
    maybe_0.map(maybe_0)


def test_case_23():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.ap(maybe_0)
    var_1 = var_0.to_box()
    maybe_1 = module_0.Maybe(bool_0, var_0)
    bool_1 = maybe_1.__eq__(var_0)
    bool_2 = maybe_0.__eq__(maybe_0)
    var_2 = maybe_0.get_or_else(bool_2)
    var_3 = maybe_1.to_try()
    var_4 = maybe_0.to_validation()
    var_5 = maybe_0.to_lazy()
    bool_3 = maybe_0.__eq__(var_0)
    bool_4 = var_4.__eq__(bool_0)
    var_6 = maybe_0.filter(var_4)
    var_7 = var_3.filter(var_3)
    bytes_0 = b"\xf2\xf4\x1a\xe8\x82\t\xfc\x9ab\x04F"
    var_8 = maybe_0.filter(bytes_0)
    bytes_0.map(var_3)
