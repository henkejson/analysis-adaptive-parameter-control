# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1


def test_case_0():
    str_0 = "\n        :param semigroup: other semigroup to concat\n        :type semigroup: Sum[B]\n        :returns: new Sum with sum of concat semigroups values\n        :rtype: Sum[A]\n        "
    maybe_0 = module_0.Maybe(str_0, str_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    str_0 = "3*"
    dict_0 = {}
    bool_0 = True
    maybe_0 = module_0.Maybe(dict_0, str_0)
    none_type_0 = None
    var_0 = maybe_0.map(none_type_0)
    maybe_1 = module_0.Maybe(dict_0, bool_0)
    var_1 = maybe_1.get_or_else(str_0)
    var_2 = maybe_0.filter(str_0)
    var_3 = maybe_1.map(str_0)
    bool_1 = var_0.__eq__(maybe_1)
    var_4 = var_0.to_validation()
    var_5 = var_3.map(var_4)
    var_6 = maybe_1.to_try()
    var_7 = var_3.filter(var_6)
    var_8 = var_3.to_either()
    var_6.to_validation()


def test_case_3():
    none_type_0 = None
    str_0 = ""
    maybe_0 = module_0.Maybe(none_type_0, str_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.to_try()
    var_2 = maybe_0.get_or_else(str_0)
    bool_0 = False
    var_3 = maybe_0.to_try()
    maybe_1 = module_0.Maybe(var_2, bool_0)
    bool_1 = maybe_0.__eq__(var_0)
    var_4 = maybe_1.to_box()
    var_4.bind(bool_1)


def test_case_4():
    str_0 = "3"
    dict_0 = {}
    maybe_0 = module_0.Maybe(dict_0, str_0)
    none_type_0 = None
    var_0 = maybe_0.map(none_type_0)
    var_1 = var_0.bind(none_type_0)
    var_2 = maybe_0.filter(str_0)
    var_3 = var_0.to_validation()
    var_4 = var_0.to_lazy()


def test_case_5():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.to_validation()
    maybe_0.map(var_1)


def test_case_6():
    tuple_0 = ()
    bytes_0 = b"/\xe1\xa6g\xf1\x93\xbe"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.to_validation()
    var_2 = maybe_0.bind(tuple_0)


def test_case_7():
    tuple_0 = ()
    str_0 = "inf"
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_validation()
    maybe_0.bind(tuple_0)


def test_case_8():
    str_0 = "3*"
    dict_0 = {}
    bool_0 = True
    maybe_0 = module_0.Maybe(dict_0, str_0)
    maybe_1 = module_0.Maybe(dict_0, bool_0)
    var_0 = maybe_1.map(str_0)
    var_1 = var_0.filter(var_0)
    var_2 = maybe_1.to_lazy()
    var_3 = var_0.ap(var_2)
    var_4 = maybe_0.filter(var_3)


def test_case_9():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_box()
    bool_0 = False
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    var_2 = maybe_0.ap(var_0)
    var_3 = maybe_1.to_lazy()


def test_case_10():
    str_0 = "3*"
    dict_0 = {}
    maybe_0 = module_0.Maybe(dict_0, str_0)
    none_type_0 = None
    var_0 = maybe_0.filter(str_0)
    maybe_1 = module_0.Maybe(var_0, none_type_0)
    var_1 = maybe_0.get_or_else(maybe_1)
    var_1.filter(maybe_1)


def test_case_11():
    str_0 = "\n        :param semigroup: other semigroup to concat\n        :type semigroup: Sum[B]\n        :returns: new Sum with sum of concat semigroups values\n        :rtype: Sum[A]\n        "
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.to_either()


def test_case_12():
    generic_0 = module_1.Generic()
    bool_0 = False
    list_0 = [bool_0]
    maybe_0 = module_0.Maybe(list_0, bool_0)
    var_0 = maybe_0.to_either()
    var_0.get_or_else(generic_0)


def test_case_13():
    dict_0 = {}
    bool_0 = True
    maybe_0 = module_0.Maybe(dict_0, bool_0)
    var_0 = maybe_0.map(maybe_0)
    var_1 = maybe_0.to_try()
    var_2 = var_0.filter(var_1)
    var_3 = var_0.to_either()
    var_1.to_validation()


def test_case_14():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = var_0.to_try()


def test_case_15():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.get_or_else(none_type_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    bool_2 = var_1.__eq__(bool_1)
    var_2 = var_0.to_try()
    var_3 = maybe_0.to_try()
    var_3.to_either()


def test_case_16():
    bool_0 = False
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_either()
    var_2 = maybe_0.bind(maybe_0)
    var_3 = var_2.to_try()
    var_4 = var_3.get_or_else(var_3)
    var_5 = var_1.to_box()
    var_5.filter(var_4)


def test_case_17():
    str_0 = "3*"
    dict_0 = {}
    bool_0 = True
    maybe_0 = module_0.Maybe(dict_0, str_0)
    none_type_0 = None
    var_0 = maybe_0.map(none_type_0)
    maybe_1 = module_0.Maybe(dict_0, bool_0)
    var_1 = maybe_1.get_or_else(str_0)
    var_2 = maybe_0.filter(str_0)
    bool_1 = var_0.__eq__(var_2)
    bool_2 = maybe_0.__eq__(maybe_1)
    var_1.to_try()
