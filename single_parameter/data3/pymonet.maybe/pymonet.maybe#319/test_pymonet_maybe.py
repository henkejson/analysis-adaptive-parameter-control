# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import builtins as module_1


def test_case_0():
    bytes_0 = b"\xa4i\xc2d\x98\xb0\xb3\xb3\x9b\x87\xbb]}"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    object_0 = module_1.object()
    maybe_0 = module_0.Maybe(object_0, object_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.map(var_0)
    var_2 = maybe_0.ap(maybe_0)
    maybe_1 = module_0.Maybe(maybe_0, var_2)
    bool_0 = maybe_1.__eq__(maybe_0)
    var_3 = var_1.to_either()
    var_4 = var_1.bind(bool_0)
    var_5 = var_2.filter(maybe_1)
    var_6 = var_2.to_either()
    maybe_2 = module_0.Maybe(var_0, bool_0)
    maybe_2.filter(maybe_2)


def test_case_3():
    object_0 = module_1.object()
    maybe_0 = module_0.Maybe(object_0, object_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.ap(maybe_0)
    bool_0 = var_0.__eq__(maybe_0)
    var_2 = var_1.bind(bool_0)
    var_3 = var_1.filter(var_2)
    var_4 = var_2.map(object_0)
    maybe_1 = module_0.Maybe(var_0, bool_0)
    maybe_1.filter(maybe_1)


def test_case_4():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.map(maybe_0)


def test_case_5():
    none_type_0 = None
    float_0 = -2994.2
    none_type_1 = None
    maybe_0 = module_0.Maybe(float_0, none_type_1)
    maybe_0.bind(none_type_0)


def test_case_6():
    object_0 = module_1.object()
    maybe_0 = module_0.Maybe(object_0, object_0)
    var_0 = maybe_0.ap(object_0)
    var_1 = maybe_0.ap(maybe_0)
    bool_0 = var_0.__eq__(maybe_0)
    var_2 = var_1.filter(var_1)
    maybe_1 = module_0.Maybe(var_0, bool_0)
    maybe_1.filter(maybe_1)


def test_case_7():
    dict_0 = {}
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1 = module_0.Maybe(dict_0, bool_0)
    maybe_0.ap(none_type_0)


def test_case_8():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.filter(none_type_0)


def test_case_9():
    str_0 = "Y2lz1^^.>`SxR@"
    list_0 = [str_0, str_0, str_0, str_0]
    float_0 = 1615.54349
    tuple_0 = (str_0, list_0, float_0, float_0)
    tuple_1 = ()
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.get_or_else(tuple_1)
    var_0.get_or_else(tuple_0)


def test_case_10():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.get_or_else(none_type_0)
    float_0 = -488.48
    var_1 = maybe_0.to_try()
    maybe_0.bind(float_0)


def test_case_11():
    object_0 = module_1.object()
    maybe_0 = module_0.Maybe(object_0, object_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.ap(maybe_0)
    bool_0 = var_0.__eq__(maybe_0)
    var_2 = var_1.filter(var_1)
    maybe_1 = module_0.Maybe(var_0, bool_0)
    maybe_1.filter(maybe_1)


def test_case_12():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.to_either()
    maybe_0.filter(none_type_0)


def test_case_13():
    bytes_0 = b"\x9eO\x7f\xa4\xc2\x92\xa7\x01\x046+\x17\xc4K \xb4c\xf8*"
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.to_box()
    var_0.to_box()


def test_case_14():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_lazy()
    maybe_0.filter(var_1)


def test_case_15():
    int_0 = -1666
    maybe_0 = module_0.Maybe(int_0, int_0)
    str_0 = "w#]%E`jJd|"
    maybe_1 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_1.to_lazy()
    var_0.get_or_else(maybe_0)


def test_case_16():
    int_0 = 2372
    dict_0 = {}
    maybe_0 = module_0.Maybe(dict_0, int_0)
    var_0 = maybe_0.ap(int_0)
    bool_0 = var_0.__eq__(int_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(int_0, bool_1)
    var_1 = maybe_1.to_lazy()
    var_2 = var_1.to_box()
    var_2.get_or_else(int_0)


def test_case_17():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_try()
    maybe_0.filter(none_type_0)


def test_case_18():
    object_0 = module_1.object()
    maybe_0 = module_0.Maybe(object_0, object_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.map(var_0)
    var_2 = maybe_0.get_or_else(object_0)
    var_3 = maybe_0.ap(maybe_0)
    maybe_1 = module_0.Maybe(maybe_0, var_3)
    bool_0 = maybe_1.__eq__(maybe_0)
    var_4 = maybe_0.to_validation()
    var_5 = maybe_0.to_lazy()
    var_6 = var_1.bind(var_4)
    var_7 = var_3.filter(var_4)
    var_8 = var_5.to_box()
    maybe_2 = module_0.Maybe(var_0, bool_0)
    maybe_2.filter(var_2)


def test_case_19():
    int_0 = -2859
    str_0 = "\n        Returns new ImmutableList with each element mapped into\n        result of argument called with each element of ImmutableList\n\n        :param fn: function to call with ImmutableList value\n        :type fn: Function(A) -> B\n        :returns: ImmutableList[B]\n        "
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_0.ap(int_0)


def test_case_20():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    tuple_0 = (set_0,)
    maybe_0 = module_0.Maybe(tuple_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_box()
    var_2 = var_1.to_lazy()
    var_3 = var_2.to_try()


def test_case_21():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_either()
    bool_0 = maybe_0.__eq__(maybe_0)
    var_1 = var_0.to_lazy()
    var_2 = var_0.ap(var_1)
    var_3 = var_0.to_lazy()
    var_4 = var_3.to_box()


def test_case_22():
    int_0 = 2372
    dict_0 = {}
    maybe_0 = module_0.Maybe(dict_0, int_0)
    var_0 = maybe_0.ap(int_0)
    bool_0 = var_0.__eq__(int_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(int_0, bool_1)
    var_1 = maybe_1.to_lazy()
    var_2 = var_1.to_box()
    var_3 = var_0.ap(maybe_0)
    var_4 = var_3.ap(maybe_0)
    bool_2 = var_4.__eq__(var_4)
    var_5 = var_1.ap(maybe_0)
    var_6 = var_3.filter(var_0)
    var_7 = var_5.map(maybe_0)
    var_1.filter(var_3)
