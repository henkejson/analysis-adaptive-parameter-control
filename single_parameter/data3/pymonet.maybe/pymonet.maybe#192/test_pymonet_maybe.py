# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import builtins as module_0
import pymonet.maybe as module_1


def test_case_0():
    object_0 = module_0.object()
    maybe_0 = module_1.Maybe(object_0, object_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_1.Maybe(bool_0, bool_0)


def test_case_2():
    object_0 = module_0.object()
    bool_0 = True
    maybe_0 = module_1.Maybe(bool_0, bool_0)
    bool_1 = maybe_0.__eq__(object_0)


def test_case_3():
    dict_0 = {}
    float_0 = -862.79452
    bool_0 = True
    maybe_0 = module_1.Maybe(float_0, bool_0)
    var_0 = maybe_0.filter(maybe_0)
    var_1 = maybe_0.ap(dict_0)
    var_2 = maybe_0.map(var_1)


def test_case_4():
    str_0 = "\n        Method executes a reducer function\n        on each element of the array, resulting in a single output value.\n\n        :param fn: function to call with ImmutableList value\n        :type fn: Function(A, B) -> A\n        :returns: A\n        "
    none_type_0 = None
    maybe_0 = module_1.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_validation()
    var_2 = var_1.to_box()
    bool_0 = True
    maybe_1 = module_1.Maybe(str_0, bool_0)
    var_3 = maybe_1.to_try()
    var_4 = maybe_0.to_validation()
    var_5 = var_4.to_box()
    var_6 = maybe_1.map(var_0)
    var_7 = var_6.filter(var_4)
    var_8 = var_7.to_either()
    var_0.ap(maybe_0)


def test_case_5():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_1.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.to_validation()
    var_2 = maybe_0.bind(var_1)
    var_3 = var_2.filter(none_type_0)


def test_case_6():
    bool_0 = True
    maybe_0 = module_1.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_try()
    bool_1 = var_0.__eq__(bool_0)
    bool_2 = False
    none_type_0 = None
    maybe_1 = module_1.Maybe(none_type_0, bool_2)
    var_1 = maybe_1.to_lazy()
    var_2 = var_1.to_validation()
    var_3 = var_2.to_either()
    var_4 = var_3.to_try()
    maybe_2 = module_1.Maybe(bool_0, bool_2)
    var_5 = maybe_2.to_validation()
    maybe_2.bind(maybe_2)


def test_case_7():
    object_0 = module_0.object()
    bool_0 = True
    maybe_0 = module_1.Maybe(bool_0, bool_0)
    maybe_1 = module_1.Maybe(bool_0, bool_0)
    var_0 = maybe_1.ap(maybe_1)
    bool_1 = maybe_0.__eq__(var_0)


def test_case_8():
    none_type_0 = None
    maybe_0 = module_1.Maybe(none_type_0, none_type_0)
    maybe_0.ap(none_type_0)


def test_case_9():
    bool_0 = True
    maybe_0 = module_1.Maybe(bool_0, bool_0)
    none_type_0 = None
    var_0 = maybe_0.filter(none_type_0)


def test_case_10():
    bool_0 = False
    maybe_0 = module_1.Maybe(bool_0, bool_0)
    none_type_0 = None
    maybe_0.filter(none_type_0)


def test_case_11():
    object_0 = module_0.object()
    bool_0 = True
    maybe_0 = module_1.Maybe(bool_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_try()
    var_1 = var_0.bind(var_0)
    var_2 = maybe_0.get_or_else(var_0)


def test_case_12():
    int_0 = -5829
    none_type_0 = None
    maybe_0 = module_1.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.get_or_else(int_0)
    var_0.to_lazy()


def test_case_13():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_1.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_either()
    list_0 = []
    bool_1 = True
    maybe_1 = module_1.Maybe(list_0, bool_1)
    var_1 = maybe_1.map(var_0)


def test_case_14():
    bytes_0 = b"\xdbAr\xad\xa8\xc1:i\xb6CRrsT4\x1b"
    bool_0 = False
    maybe_0 = module_1.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_lazy()
    var_1.get_or_else(bytes_0)


def test_case_15():
    str_0 = "\n        Method executes a reducer function\n        on each element of the array, resulting in a single output value.\n\n        :param fn: function to call with ImmutableList value\n        :type fn: Function(A, B) -> A\n        :returns: A\n        "
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_1.Maybe(none_type_0, none_type_0)
    maybe_1 = module_1.Maybe(str_0, bool_0)
    bool_1 = True
    maybe_2 = module_1.Maybe(str_0, bool_1)
    var_0 = maybe_2.to_box()
    var_1 = maybe_1.to_lazy()
    var_2 = maybe_2.filter(var_0)
    maybe_0.filter(var_2)


def test_case_16():
    none_type_0 = None
    maybe_0 = module_1.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_box()
    var_0.get_or_else(none_type_0)


def test_case_17():
    str_0 = "\n        Method executes a reducer function\n        on each element of the array, resulting in a single output value.\n\n        :param fn: function to call with ImmutableList value\n        :type fn: Function(A, B) -> A\n        :returns: A\n        "
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_1.Maybe(none_type_0, none_type_0)
    maybe_1 = module_1.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_1.to_lazy()
    var_2 = maybe_1.filter(var_0)
    maybe_0.filter(var_2)


def test_case_18():
    bool_0 = True
    set_0 = set()
    bool_1 = False
    maybe_0 = module_1.Maybe(set_0, bool_1)
    var_0 = maybe_0.to_try()
    bool_2 = var_0.__eq__(bool_0)


def test_case_19():
    bytes_0 = b"\x17\xc9\xfc\xf4\xab\xed\xd0e\x06\xe4uo\xbbT}"
    bool_0 = False
    none_type_0 = None
    maybe_0 = module_1.Maybe(bool_0, none_type_0)
    var_0 = maybe_0.to_validation()
    var_0.ap(bytes_0)


def test_case_20():
    object_0 = module_0.object()
    bool_0 = True
    maybe_0 = module_1.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.filter(var_0)
    var_2 = var_0.to_either()
    var_3 = var_1.to_either()
    bool_1 = False
    maybe_1 = module_1.Maybe(var_3, bool_1)
    var_3.to_either()


def test_case_21():
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_1.Maybe(none_type_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)


def test_case_22():
    bool_0 = False
    none_type_0 = None
    maybe_0 = module_1.Maybe(none_type_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)


def test_case_23():
    bool_0 = True
    maybe_0 = module_1.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.bind(maybe_0)
    maybe_1 = module_1.Maybe(var_0, var_0)
    bool_1 = maybe_1.__eq__(var_1)
    maybe_2 = module_1.Maybe(var_0, bool_1)
    var_0.to_lazy()
