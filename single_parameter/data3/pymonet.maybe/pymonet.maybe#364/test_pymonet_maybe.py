# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    bytes_0 = b"\x83\xb5\xb5\x9e\x8d\xc8+_\x894V\xb9\xcf>\x01"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)


def test_case_1():
    list_0 = []
    maybe_0 = module_0.Maybe(list_0, list_0)


def test_case_2():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = True
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_1.bind(bool_0)
    bool_1 = maybe_1.__eq__(var_0)
    var_1 = maybe_1.filter(maybe_1)
    maybe_0.filter(maybe_1)


def test_case_3():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = True
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_1.bind(bool_0)
    var_1 = maybe_1.map(var_0)
    maybe_2 = module_0.Maybe(maybe_1, maybe_1)
    bool_1 = maybe_1.__eq__(maybe_2)
    var_2 = var_0.get_or_else(maybe_1)
    var_3 = var_2.ap(bool_0)
    var_4 = var_2.to_either()
    var_5 = maybe_1.filter(var_3)
    maybe_0.filter(maybe_1)


def test_case_4():
    none_type_0 = None
    list_0 = []
    bool_0 = False
    bytes_0 = b"\x9d\xfc/\t\xdb\xa2N\xe0\xce\x1b8\x0b\x8f\x8aBm\x17\x8a\x1c"
    maybe_0 = module_0.Maybe(bool_0, bytes_0)
    var_0 = maybe_0.map(none_type_0)
    var_1 = var_0.ap(bool_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(bytes_0, bool_1)
    var_2 = maybe_1.get_or_else(bool_0)
    var_2.filter(list_0)


def test_case_5():
    float_0 = 969.0
    none_type_0 = None
    maybe_0 = module_0.Maybe(float_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.to_lazy()
    var_2 = maybe_0.to_lazy()
    var_3 = maybe_0.to_lazy()
    maybe_0.ap(maybe_0)


def test_case_6():
    int_0 = -7730
    set_0 = {int_0, int_0, int_0, int_0}
    int_1 = 1
    int_2 = 1
    list_0 = [int_2]
    maybe_0 = module_0.Maybe(list_0, list_0)
    var_0 = maybe_0.bind(int_1)
    var_1 = var_0.bind(set_0)


def test_case_7():
    list_0 = []
    bool_0 = False
    maybe_0 = module_0.Maybe(list_0, bool_0)
    none_type_0 = None
    maybe_0.bind(none_type_0)


def test_case_8():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.ap(none_type_0)
    float_0 = 801.4873
    bool_1 = True
    maybe_1 = module_0.Maybe(float_0, bool_1)
    var_1 = maybe_1.get_or_else(none_type_0)


def test_case_9():
    str_0 = "d1{7Vr6X3tg!"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1 = module_0.Maybe(maybe_0, none_type_0)
    maybe_1.ap(dict_0)


def test_case_10():
    list_0 = []
    bool_0 = False
    maybe_0 = module_0.Maybe(list_0, bool_0)
    maybe_0.filter(maybe_0)


def test_case_11():
    int_0 = 3306
    maybe_0 = module_0.Maybe(int_0, int_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_1.get_or_else(none_type_0)


def test_case_12():
    bytes_0 = b"\xe3\x1a?\x90\xd3\xcaA\xa1=\\\x95\x05"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    int_0 = 1675
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_try()
    var_2 = var_1.get_or_else(dict_0)


def test_case_13():
    str_0 = "U 6"
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_try()
    var_1.to_box()


def test_case_14():
    bool_0 = False
    float_0 = 419.52
    maybe_0 = module_0.Maybe(float_0, float_0)
    var_0 = maybe_0.to_box()
    var_0.ap(bool_0)


def test_case_15():
    int_0 = 1918
    none_type_0 = None
    float_0 = 178.36582
    float_1 = -1762.57
    bool_0 = True
    maybe_0 = module_0.Maybe(float_1, bool_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(maybe_0, bool_1)
    var_0 = maybe_1.to_box()
    int_1 = 5977
    maybe_2 = module_0.Maybe(int_1, int_1)
    var_1 = maybe_2.bind(var_0)
    var_2 = var_1.to_either()
    var_3 = var_2.ap(float_0)
    var_4 = var_3.map(none_type_0)
    var_4.get_or_else(int_0)


def test_case_16():
    none_type_0 = None
    str_0 = "pfE"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_validation()
    var_2 = var_1.to_try()
    var_3 = var_2.get_or_else(none_type_0)


def test_case_17():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = False
    maybe_1 = module_0.Maybe(maybe_0, bool_0)
    var_0 = maybe_0.to_lazy()


def test_case_18():
    bool_0 = True
    int_0 = -2994
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.to_try()
    var_0.ap(bool_0)


def test_case_19():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, maybe_0)
    var_0 = maybe_0.to_try()


def test_case_20():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.ap(maybe_0)
    var_1 = maybe_0.filter(bool_0)
    var_2 = maybe_0.filter(maybe_0)
    var_3 = var_1.to_try()
    var_4 = var_1.to_lazy()
    none_type_0 = None
    var_5 = var_1.get_or_else(none_type_0)
    var_6 = var_2.to_lazy()
    var_7 = var_4.to_either()
    maybe_1 = module_0.Maybe(maybe_0, var_6)
    var_8 = var_0.to_validation()
    var_9 = maybe_1.to_lazy()


def test_case_21():
    str_0 = "+_Z7JTyF"
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_validation()
    maybe_0.bind(str_0)


def test_case_22():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = True
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    maybe_2 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.get_or_else(none_type_0)
    var_1 = maybe_1.bind(var_0)
    var_2 = var_1.filter(none_type_0)
    var_3 = maybe_2.to_lazy()
    maybe_3 = module_0.Maybe(bool_0, none_type_0)
    var_4 = var_3.to_try()
    var_5 = maybe_2.to_box()
    maybe_2.ap(maybe_3)


def test_case_23():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = True
    maybe_1 = module_0.Maybe(maybe_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    maybe_0.filter(maybe_1)
