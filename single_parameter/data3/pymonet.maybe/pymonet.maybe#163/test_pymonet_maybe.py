# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1


def test_case_0():
    complex_0 = 3026.4874 - 1108.274866j
    maybe_0 = module_0.Maybe(complex_0, complex_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    bool_0 = False
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_validation()
    maybe_1 = module_0.Maybe(var_0, bool_0)
    var_2 = var_0.to_lazy()
    var_3 = var_2.to_validation()
    bool_2 = maybe_0.__eq__(var_2)
    var_4 = var_3.to_box()
    var_4.bind(bool_0)


def test_case_3():
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.map(none_type_0)
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    var_1 = maybe_1.filter(none_type_0)
    bool_1 = False
    maybe_2 = module_0.Maybe(none_type_0, bool_1)
    maybe_2.filter(bool_0)


def test_case_4():
    float_0 = -61.92
    set_0 = {float_0}
    bool_0 = False
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_0, none_type_0)
    maybe_0.map(set_0)


def test_case_5():
    complex_0 = 2058.36113 - 1701.35j
    maybe_0 = module_0.Maybe(complex_0, complex_0)
    var_0 = maybe_0.bind(maybe_0)
    var_1 = maybe_0.to_try()
    var_2 = maybe_0.to_try()
    bool_0 = maybe_0.__eq__(var_2)
    var_2.to_either()


def test_case_6():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.bind(none_type_0)


def test_case_7():
    bool_0 = True
    float_0 = 1129.0
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    maybe_1 = module_0.Maybe(none_type_0, float_0)
    bool_1 = False
    maybe_2 = module_0.Maybe(none_type_0, bool_1)
    var_0 = maybe_0.filter(maybe_1)
    var_1 = var_0.ap(float_0)
    maybe_2.filter(float_0)


def test_case_8():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.ap(none_type_0)


def test_case_9():
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(none_type_0, bool_1)
    var_0 = maybe_0.filter(maybe_1)
    maybe_2 = module_0.Maybe(maybe_1, var_0)
    maybe_1.filter(bool_1)


def test_case_10():
    set_0 = set()
    bool_0 = True
    maybe_0 = module_0.Maybe(set_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.to_box()
    var_2 = var_1.to_lazy()
    var_3 = maybe_0.ap(maybe_0)
    var_4 = var_3.get_or_else(var_0)
    var_0.filter(var_1)


def test_case_11():
    bytes_0 = b"%\x10k\x94\x86;"
    complex_0 = 1312.227601 - 3195.3377j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    none_type_0 = None
    maybe_0 = module_0.Maybe(list_0, none_type_0)
    var_0 = maybe_0.get_or_else(bytes_0)
    float_0 = -3620.38
    bool_0 = False
    maybe_1 = module_0.Maybe(float_0, bool_0)
    var_1 = maybe_1.to_lazy()
    var_2 = var_1.bind(var_0)
    var_2.to_validation()


def test_case_12():
    str_0 = ""
    generic_0 = module_1.Generic()
    bool_0 = True
    maybe_0 = module_0.Maybe(generic_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.ap(str_0)
    str_1 = "`)Fh(PuHH3n`F"
    maybe_1 = module_0.Maybe(str_1, str_1)
    var_2 = maybe_1.to_either()
    bool_1 = var_2.__eq__(var_1)


def test_case_13():
    bool_0 = True
    bool_1 = True
    bool_2 = False
    maybe_0 = module_0.Maybe(bool_1, bool_2)
    none_type_0 = None
    maybe_1 = module_0.Maybe(maybe_0, none_type_0)
    var_0 = maybe_0.to_either()
    maybe_0.ap(bool_0)


def test_case_14():
    none_type_0 = None
    none_type_1 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_1, bool_0)
    var_0 = maybe_0.to_box()
    var_0.bind(none_type_0)


def test_case_15():
    tuple_0 = ()
    maybe_0 = module_0.Maybe(tuple_0, tuple_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, tuple_0)
    var_0 = maybe_1.to_validation()
    var_1 = maybe_0.to_lazy()
    var_2 = maybe_0.to_box()
    var_3 = var_1.to_box()
    maybe_0.filter(maybe_1)


def test_case_16():
    str_0 = "\n        Return resolved Task with stored value argument.\n\n        :param value: value to store in Task\n        :type value: A\n        :returns: resolved Task\n        :rtype: Task[Function(_, resolve) -> A]\n        "
    set_0 = {str_0}
    bool_0 = True
    maybe_0 = module_0.Maybe(set_0, bool_0)
    var_0 = maybe_0.to_try()
    var_0.to_lazy()


def test_case_17():
    none_type_0 = None
    none_type_1 = None
    maybe_0 = module_0.Maybe(none_type_1, none_type_1)
    var_0 = maybe_0.to_try()
    var_0.bind(none_type_0)


def test_case_18():
    none_type_0 = None
    complex_0 = 465.5632 + 929.94156j
    maybe_0 = module_0.Maybe(complex_0, complex_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.map(complex_0)
    var_2 = var_1.bind(var_0)
    var_3 = var_0.to_box()
    bool_0 = var_2.__eq__(var_3)
    var_4 = var_2.get_or_else(none_type_0)
    var_5 = maybe_0.map(var_4)
    var_6 = var_1.map(var_4)
    var_7 = var_5.to_validation()
    list_0 = []
    var_8 = var_5.map(list_0)
    var_9 = var_5.to_try()
    var_3.bind(none_type_0)


def test_case_19():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_either()
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    var_2 = maybe_1.to_try()
    var_3 = maybe_0.to_try()
    bool_1 = maybe_1.__eq__(maybe_1)
    var_4 = var_0.to_either()
    var_3.to_validation()


def test_case_20():
    int_0 = -3150
    bool_0 = False
    maybe_0 = module_0.Maybe(int_0, bool_0)
    str_0 = "D\\Dq["
    bool_1 = True
    maybe_1 = module_0.Maybe(str_0, bool_1)
    float_0 = -1020.32
    bool_2 = True
    maybe_2 = module_0.Maybe(float_0, bool_2)
    bool_3 = False
    var_0 = maybe_2.filter(float_0)
    bool_4 = maybe_2.__eq__(var_0)
    maybe_3 = module_0.Maybe(float_0, bool_3)
    maybe_4 = module_0.Maybe(maybe_3, bool_3)
    var_1 = maybe_4.to_either()
    maybe_4.filter(maybe_4)


def test_case_21():
    float_0 = 1129.0
    maybe_0 = module_0.Maybe(float_0, float_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.to_lazy()
    var_2 = maybe_0.filter(var_1)
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, var_0)
    var_3 = maybe_1.to_either()
    var_4 = var_3.to_validation()
    var_5 = var_4.to_either()
    maybe_2 = module_0.Maybe(none_type_0, var_3)
    var_6 = maybe_1.to_box()
    var_7 = maybe_2.filter(var_5)
    var_8 = var_7.map(none_type_0)
    var_9 = maybe_2.get_or_else(var_3)
    var_10 = var_9.map(var_5)
    var_11 = var_8.to_lazy()
    var_12 = maybe_0.filter(var_11)
    bool_0 = var_7.__eq__(maybe_2)
    bool_1 = False
    maybe_3 = module_0.Maybe(none_type_0, bool_1)
    maybe_3.filter(float_0)
