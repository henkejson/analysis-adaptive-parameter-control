# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import builtins as module_1


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_1 = module_0.Maybe(maybe_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.ap(maybe_1)
    var_2 = var_1.get_or_else(bool_0)
    var_3 = maybe_0.filter(var_2)
    none_type_0 = None
    var_4 = maybe_0.get_or_else(none_type_0)
    var_5 = maybe_0.filter(bool_0)
    var_6 = maybe_0.map(none_type_0)
    bool_1 = var_4.__eq__(var_5)
    bool_2 = var_5.__eq__(var_5)
    var_7 = maybe_0.get_or_else(maybe_0)


def test_case_3():
    bool_0 = True
    bool_1 = False
    bool_2 = True
    maybe_0 = module_0.Maybe(bool_1, bool_2)
    var_0 = maybe_0.get_or_else(bool_0)
    bytes_0 = b")\x85O\xc4\x127\xc3M\x1a\xb5\xc4\x01\xbf\x12X\xadZ\xdb"
    bool_3 = False
    maybe_1 = module_0.Maybe(bytes_0, bool_3)
    bool_4 = maybe_1.__eq__(var_0)


def test_case_4():
    float_0 = 1488.9219
    float_1 = -137.606
    set_0 = {float_1, float_1}
    list_0 = [float_1, set_0, float_1]
    maybe_0 = module_0.Maybe(float_1, list_0)
    var_0 = maybe_0.map(float_0)
    var_1 = var_0.to_validation()
    var_2 = var_1.to_box()
    var_3 = var_2.to_validation()


def test_case_5():
    none_type_0 = None
    tuple_0 = ()
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.map(tuple_0)
    var_1 = var_0.to_validation()
    var_2 = var_1.to_box()
    var_3 = var_2.to_either()
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_4 = maybe_1.to_lazy()
    maybe_1.map(tuple_0)


def test_case_6():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.ap(maybe_0)
    var_1 = maybe_0.bind(var_0)
    var_2 = var_1.filter(var_0)


def test_case_7():
    none_type_0 = None
    none_type_1 = None
    maybe_0 = module_0.Maybe(none_type_1, none_type_1)
    maybe_0.bind(none_type_0)


def test_case_8():
    float_0 = -2810.2
    list_0 = [float_0, float_0, float_0, float_0]
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.ap(list_0)


def test_case_9():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    maybe_0.filter(bool_0)


def test_case_10():
    str_0 = "yyQs ye\re#"
    int_0 = -571
    none_type_0 = None
    maybe_0 = module_0.Maybe(int_0, none_type_0)
    var_0 = maybe_0.get_or_else(str_0)


def test_case_11():
    none_type_0 = None
    object_0 = module_1.object()
    none_type_1 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_1, bool_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.map(object_0)
    var_1.filter(none_type_0)


def test_case_12():
    set_0 = set()
    maybe_0 = module_0.Maybe(set_0, set_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.to_box()
    var_2 = var_1.to_lazy()
    var_3 = var_1.to_try()
    var_3.to_lazy()


def test_case_13():
    float_0 = 1488.9219
    float_1 = -137.606
    set_0 = {float_1, float_1}
    list_0 = [float_1, set_0, float_1]
    maybe_0 = module_0.Maybe(float_1, list_0)
    var_0 = maybe_0.map(float_0)
    var_1 = var_0.filter(list_0)
    var_2 = var_1.to_box()
    var_3 = maybe_0.bind(var_2)


def test_case_14():
    dict_0 = {}
    bool_0 = True
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_box()
    var_0.ap(dict_0)


def test_case_15():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_lazy()


def test_case_16():
    float_0 = -1356.729568
    int_0 = -1760
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.bind(int_0)
    var_1.get_or_else(float_0)


def test_case_17():
    str_0 = "?PpPsAe;"
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_try()
    var_0.to_lazy()


def test_case_18():
    str_0 = "h7"
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_try()
    var_0.ap(str_0)


def test_case_19():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = var_0.to_box()
    var_1.get_or_else(bool_0)


def test_case_20():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_0.to_validation()


def test_case_21():
    int_0 = 1609
    int_1 = -2269
    bytes_0 = b"FC@s\xec\xa2\xa0\xf6\xea\xc1\xf2\xef"
    set_0 = {bytes_0}
    maybe_0 = module_0.Maybe(set_0, set_0)
    tuple_0 = (maybe_0,)
    var_0 = maybe_0.ap(tuple_0)
    maybe_1 = module_0.Maybe(int_1, int_0)
    bool_0 = maybe_0.__eq__(int_0)
    var_1 = var_0.to_lazy()
    var_2 = var_1.to_box()
    bool_1 = maybe_1.__eq__(int_0)
    var_3 = var_0.map(maybe_0)
    var_4 = var_3.filter(var_1)
    var_5 = var_4.to_try()
    bool_2 = var_4.__eq__(set_0)
    bool_3 = var_4.__eq__(var_5)
    var_5.ap(bool_0)


def test_case_22():
    float_0 = 3229.7
    maybe_0 = module_0.Maybe(float_0, float_0)
    str_0 = "\n    Data type for storage any type of function.\n    This function (and all his mappers) will be called only during calling fold method\n    "
    maybe_1 = module_0.Maybe(str_0, str_0)
    none_type_0 = None
    var_0 = maybe_1.map(none_type_0)
    var_1 = maybe_1.to_try()
    var_2 = maybe_1.to_try()
    var_3 = maybe_1.map(var_0)
    var_4 = maybe_1.filter(maybe_1)
    var_5 = maybe_1.to_lazy()
    bool_0 = maybe_1.__eq__(maybe_1)
    var_6 = maybe_1.to_validation()
    bool_1 = var_1.__eq__(bool_0)
    var_7 = maybe_1.to_either()
    var_8 = var_5.map(var_5)
    bool_2 = var_5.__eq__(var_2)
    maybe_2 = module_0.Maybe(str_0, str_0)
    var_9 = maybe_0.map(var_2)
    bool_3 = var_9.__eq__(maybe_2)
    bool_4 = var_6.__eq__(maybe_2)
    var_8.get_or_else(var_7)


def test_case_23():
    float_0 = 3229.7
    maybe_0 = module_0.Maybe(float_0, float_0)
    var_0 = maybe_0.to_validation()
    str_0 = "\n    Data type for storage any type of function.\n    This function (and all his mappers) will be called only during calling fold method\n    "
    maybe_1 = module_0.Maybe(str_0, str_0)
    bool_0 = True
    maybe_2 = module_0.Maybe(bool_0, var_0)
    set_0 = set()
    bytes_0 = b"\xb9`\xb2^\xab\xa9-\xcc\xc7}\xe6\x1e\x9a\xa5\xab\xb0\x90\x94\x1f"
    str_1 = "\n    Data type for storage any type of function.\n    This function (and all his mappers) will be called only during calling fold method\n    "
    tuple_0 = (bool_0, set_0, bytes_0, str_1)
    bool_1 = maybe_1.__eq__(tuple_0)
    var_1 = maybe_0.get_or_else(maybe_0)
    var_2 = maybe_1.to_lazy()
    var_3 = maybe_1.get_or_else(var_2)
    var_4 = maybe_0.to_either()
    var_5 = var_4.bind(var_3)
    var_6 = maybe_1.map(maybe_0)
    none_type_0 = None
    maybe_3 = module_0.Maybe(var_2, var_4)
    bool_2 = False
    maybe_4 = module_0.Maybe(var_5, bool_2)
    var_7 = maybe_4.to_lazy()
    var_8 = maybe_2.filter(maybe_1)
    var_9 = var_7.to_either()
    var_10 = var_5.to_validation()
    var_11 = var_1.ap(bool_2)
    var_12 = var_8.bind(none_type_0)
    var_2.filter(var_10)
