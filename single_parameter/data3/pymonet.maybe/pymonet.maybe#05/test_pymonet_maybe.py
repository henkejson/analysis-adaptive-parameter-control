# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    str_0 = "p+n\x0b>\x0b\t\x0b\teB\n"
    maybe_0 = module_0.Maybe(str_0, str_0)


def test_case_1():
    str_0 = ""
    maybe_0 = module_0.Maybe(str_0, str_0)


def test_case_2():
    str_0 = "8c}\tXK"
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.filter(none_type_0)
    bool_1 = maybe_0.__eq__(var_0)
    var_1 = maybe_0.to_try()
    bool_2 = False
    maybe_1 = module_0.Maybe(none_type_0, bool_2)
    maybe_1.filter(var_1)


def test_case_3():
    complex_0 = -1107.309309 + 1944.207j
    maybe_0 = module_0.Maybe(complex_0, complex_0)
    none_type_0 = None
    var_0 = maybe_0.filter(none_type_0)
    bool_0 = maybe_0.__eq__(none_type_0)
    var_1 = maybe_0.to_try()
    var_1.to_box()


def test_case_4():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.to_either()
    none_type_0 = None
    bool_1 = var_0.__eq__(var_1)
    none_type_1 = None
    var_2 = var_0.to_lazy()
    none_type_2 = None
    maybe_1 = module_0.Maybe(none_type_2, bool_0)
    var_3 = maybe_1.map(none_type_1)
    var_4 = var_3.get_or_else(none_type_0)
    var_4.bind(var_0)


def test_case_5():
    none_type_0 = None
    none_type_1 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_1, bool_0)
    maybe_0.map(none_type_0)


def test_case_6():
    str_0 = "8c}\tXK"
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.filter(none_type_0)
    var_1 = maybe_0.filter(str_0)
    var_2 = var_1.to_try()
    var_3 = var_0.bind(maybe_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(none_type_0, bool_1)
    maybe_1.filter(var_2)


def test_case_7():
    bytes_0 = b"t\x94O\xdcVP\xfb"
    bool_0 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    maybe_0.bind(bool_0)


def test_case_8():
    str_0 = "8cO\tjK"
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.ap(none_type_0)
    var_1 = maybe_0.filter(str_0)
    var_2 = var_1.get_or_else(var_1)
    var_3 = var_2.to_either()
    var_4 = var_1.to_try()
    var_5 = var_2.bind(maybe_0)
    var_6 = var_2.to_box()
    bool_1 = False
    maybe_1 = module_0.Maybe(none_type_0, bool_1)
    maybe_1.filter(var_3)


def test_case_9():
    float_0 = -976.18975
    bool_0 = False
    maybe_0 = module_0.Maybe(float_0, bool_0)
    maybe_0.ap(float_0)


def test_case_10():
    str_0 = "8c}\tXK"
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.filter(str_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(bool_1, bool_1)
    maybe_1.filter(str_0)


def test_case_11():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    maybe_0.filter(bool_0)


def test_case_12():
    str_0 = "p+n\x0b>\x0b\t\x0b\teB\n"
    maybe_0 = module_0.Maybe(str_0, str_0)
    set_0 = set()
    var_0 = maybe_0.get_or_else(set_0)
    maybe_1 = module_0.Maybe(set_0, set_0)


def test_case_13():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.get_or_else(none_type_0)
    var_0.bind(none_type_0)


def test_case_14():
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.ap(none_type_0)
    var_2 = var_1.to_box()
    var_2.bind(bool_0)


def test_case_15():
    bool_0 = True
    bool_1 = False
    bytes_0 = b"\xc1Wc\xf9\xac\x08\x9fs\xc0l\xf1\xfe\x9d\xa8\xb6ud\x1a\xf7"
    bool_2 = True
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_try()
    maybe_1 = module_0.Maybe(bytes_0, bool_2)
    var_2 = maybe_1.to_try()
    var_2.to_lazy()


def test_case_16():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    none_type_0 = None
    bool_1 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_1)
    var_0 = maybe_0.to_box()
    var_0.ap(set_0)


def test_case_17():
    dict_0 = {}
    maybe_0 = module_0.Maybe(dict_0, dict_0)
    list_0 = [dict_0, dict_0, dict_0]
    maybe_1 = module_0.Maybe(dict_0, list_0)
    complex_0 = 1483.959 - 154.6099j
    bool_0 = False
    maybe_2 = module_0.Maybe(complex_0, bool_0)
    var_0 = maybe_2.to_box()
    var_1 = maybe_0.to_box()


def test_case_18():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_0.to_lazy()


def test_case_19():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_0.filter(bool_0)


def test_case_20():
    str_0 = "8c}\tXK"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.filter(str_0)
    var_1 = var_0.to_try()
    bool_0 = False
    maybe_1 = module_0.Maybe(var_1, bool_0)
    maybe_1.filter(var_1)


def test_case_21():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    maybe_0 = module_0.Maybe(set_0, bool_0)
    var_0 = maybe_0.to_try()
    var_0.to_validation()


def test_case_22():
    float_0 = 1224.945071
    bool_0 = True
    maybe_0 = module_0.Maybe(float_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.to_lazy()
    maybe_1 = module_0.Maybe(float_0, bool_0)


def test_case_23():
    bytes_0 = b"_\xbe1ia\\p\xb6Z\xf4\xc7\xe2\xd6\xe1b\xe3\x03ky\x0b"
    bool_0 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = var_0.to_lazy()
    var_2 = var_1.to_try()
    var_0.filter(var_2)


def test_case_24():
    int_0 = 1
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.filter(int_0)
    var_1 = maybe_0.filter(int_0)
    var_2 = var_1.to_lazy()
    var_3 = var_2.bind(var_2)
    var_3.to_validation()


def test_case_25():
    str_0 = "UbS"
    complex_0 = -1724 + 1097.16j
    bool_0 = False
    maybe_0 = module_0.Maybe(complex_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_try()
    var_1.filter(str_0)


def test_case_26():
    complex_0 = 57.079781 - 153.45382j
    maybe_0 = module_0.Maybe(complex_0, complex_0)
    none_type_0 = None
    var_0 = maybe_0.get_or_else(none_type_0)
    var_1 = maybe_0.filter(var_0)
    var_2 = maybe_0.filter(none_type_0)
    bool_0 = maybe_0.__eq__(none_type_0)
    var_3 = maybe_0.to_try()
    bool_1 = var_3.__eq__(var_0)
    var_4 = maybe_0.to_try()
    var_5 = var_2.to_lazy()
    var_6 = var_5.to_either()
    bool_2 = maybe_0.__eq__(var_2)
    var_4.ap(none_type_0)
