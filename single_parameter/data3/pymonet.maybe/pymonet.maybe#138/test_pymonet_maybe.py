# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import builtins as module_1


def test_case_0():
    float_0 = 366.0
    maybe_0 = module_0.Maybe(float_0, float_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    bool_2 = maybe_0.__eq__(none_type_0)
    var_0 = maybe_0.to_try()
    var_0.to_try()


def test_case_3():
    tuple_0 = ()
    bool_0 = False
    maybe_0 = module_0.Maybe(tuple_0, bool_0)
    bool_1 = maybe_0.__eq__(tuple_0)
    bool_2 = True
    maybe_1 = module_0.Maybe(tuple_0, bool_2)
    none_type_0 = None
    var_0 = maybe_1.ap(none_type_0)
    var_1 = var_0.to_box()
    var_1.to_box()


def test_case_4():
    str_0 = "\n        If Maybe is empty return new empty Maybe, in other case\n        takes mapper function and returns result of mapper.\n\n        :param mapper: function to call with Maybe.value\n        :type mapper: Function(A) -> Maybe[B]\n        :returns: Maybe[B | None]\n        "
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.map(str_0)


def test_case_5():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_box()
    maybe_0.map(var_0)


def test_case_6():
    float_0 = 366.0
    bool_0 = True
    maybe_0 = module_0.Maybe(float_0, bool_0)
    var_0 = maybe_0.filter(float_0)
    var_1 = var_0.bind(float_0)
    maybe_1 = module_0.Maybe(float_0, bool_0)


def test_case_7():
    none_type_0 = None
    bool_0 = True
    list_0 = [bool_0, bool_0]
    list_1 = [list_0, bool_0, list_0, list_0]
    maybe_0 = module_0.Maybe(list_1, none_type_0)
    maybe_0.bind(list_1)


def test_case_8():
    none_type_0 = None
    float_0 = 1069.4
    dict_0 = {float_0: float_0}
    list_0 = [dict_0, float_0, float_0]
    bool_0 = False
    maybe_0 = module_0.Maybe(list_0, bool_0)
    maybe_0.ap(none_type_0)


def test_case_9():
    float_0 = 366.0
    bool_0 = False
    maybe_0 = module_0.Maybe(float_0, bool_0)
    maybe_0.filter(float_0)


def test_case_10():
    bytes_0 = b"\x16\x99\xb6\xabm"
    int_0 = -2198
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.get_or_else(bytes_0)


def test_case_11():
    str_0 = "H0yYGe"
    complex_0 = -345.44871 - 1683.44j
    bool_0 = False
    maybe_0 = module_0.Maybe(complex_0, bool_0)
    var_0 = maybe_0.get_or_else(str_0)
    var_0.to_validation()


def test_case_12():
    int_0 = 265
    list_0 = [int_0, int_0, int_0, int_0]
    int_1 = -904
    maybe_0 = module_0.Maybe(int_1, int_1)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_lazy()
    var_2 = var_1.map(list_0)


def test_case_13():
    bool_0 = False
    bool_1 = False
    tuple_0 = (bool_0, bool_0, bool_1)
    bytes_0 = b"S}\x10"
    bool_2 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_2)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_validation()
    var_1.filter(tuple_0)


def test_case_14():
    bool_0 = False
    str_0 = "Q+<N,"
    list_0 = [str_0, str_0, str_0, str_0]
    bool_1 = True
    maybe_0 = module_0.Maybe(list_0, bool_1)
    var_0 = maybe_0.to_box()
    var_0.ap(bool_0)


def test_case_15():
    str_0 = "P4~CUrOVz-rC\nvQV|'6"
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.bind(str_0)
    var_1 = var_0.to_box()
    var_2 = var_0.to_try()
    var_3 = var_0.get_or_else(none_type_0)
    var_4 = var_0.filter(bool_0)
    var_5 = var_4.to_lazy()
    none_type_0.to_box()


def test_case_16():
    none_type_0 = None
    none_type_1 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.filter(bool_0)
    var_1 = maybe_0.ap(bool_0)
    var_2 = var_0.to_validation()
    bool_1 = var_2.__eq__(maybe_0)
    maybe_1 = module_0.Maybe(var_2, bool_1)
    bool_2 = var_0.__eq__(none_type_1)
    var_3 = module_1.object()
    bool_3 = False
    maybe_2 = module_0.Maybe(none_type_0, bool_3)
    var_4 = maybe_2.to_try()
    var_5 = maybe_1.to_lazy()
    maybe_1.filter(var_3)


def test_case_17():
    float_0 = 277.871323
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_try()
    bool_1 = var_0.__eq__(bool_0)
    maybe_1 = module_0.Maybe(float_0, bool_0)
    var_1 = maybe_1.to_box()
    var_2 = maybe_1.to_try()


def test_case_18():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_try()
    var_0.map(bool_0)


def test_case_19():
    bytes_0 = b"\xeb\x82\xfd \xa4\x8e\x14"
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_0.bind(bytes_0)


def test_case_20():
    bool_0 = False
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.to_either()
    list_0 = [bool_0]
    bytes_0 = b"\xde\xb2\xb3\x1c\x9d\x85\xca\xaf\x95c\xa9\xcfKZ\x1d]M\x9b"
    tuple_0 = (bool_0, bytes_0)
    dict_0 = {bool_0: list_0, bool_0: bool_0, bool_0: bool_0, tuple_0: bytes_0}
    var_2 = var_1.to_validation()
    maybe_1 = module_0.Maybe(dict_0, bool_0)
    var_3 = maybe_1.to_either()
    var_3.filter(var_3)


def test_case_21():
    none_type_0 = None
    none_type_1 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.filter(bool_0)
    var_1 = var_0.to_validation()
    maybe_1 = module_0.Maybe(none_type_1, bool_0)
    bool_1 = maybe_0.__eq__(bool_0)
    var_2 = maybe_0.to_try()
    var_3 = var_1.to_try()
    var_4 = maybe_0.to_lazy()
    var_5 = var_0.to_validation()
    var_6 = maybe_1.ap(var_0)
    var_7 = var_6.bind(maybe_0)
    var_8 = maybe_0.map(bool_1)
    var_9 = var_4.to_either()
    bool_2 = var_8.__eq__(var_8)
    var_10 = var_0.to_validation()
    var_10.to_validation()


def test_case_22():
    none_type_0 = None
    none_type_1 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_1, bool_0)
    var_0 = maybe_0.ap(none_type_0)
    var_1 = var_0.ap(bool_0)
    bool_1 = var_0.__eq__(var_1)
    bool_2 = True
    maybe_1 = module_0.Maybe(var_0, bool_2)
    float_0 = -652.821
    var_2 = var_1.ap(float_0)
    var_3 = maybe_1.to_box()
    var_4 = var_0.to_box()
    var_5 = var_1.to_lazy()
    var_6 = var_1.to_validation()


def test_case_23():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_box()
    var_2 = var_1.to_try()
    none_type_1 = None
    bool_0 = True
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    var_3 = maybe_1.filter(bool_0)
    var_4 = var_3.to_validation()
    maybe_2 = module_0.Maybe(none_type_1, bool_0)
    var_4.bind(var_4)


def test_case_24():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.filter(bool_0)
    var_1 = var_0.to_validation()
    var_2 = maybe_0.to_validation()
    maybe_1 = module_0.Maybe(maybe_0, var_0)
    bool_1 = maybe_0.__eq__(maybe_1)
    var_3 = maybe_1.to_validation()
    var_4 = var_3.to_try()
    var_4.to_try()
