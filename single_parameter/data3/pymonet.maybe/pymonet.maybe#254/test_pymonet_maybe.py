# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1


def test_case_0():
    str_0 = "7t;=*!qV!E.h?Cec"
    maybe_0 = module_0.Maybe(str_0, str_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_1 = maybe_0.__eq__(set_0)
    maybe_0.filter(set_0)


def test_case_3():
    bytes_0 = b"\xb9y\xf2\x1f\xfd&F\xbf<\x84u\x19s\xf0'\xdes"
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, bytes_0)
    var_0 = maybe_0.map(bytes_0)
    var_1 = maybe_0.get_or_else(bytes_0)
    var_1.to_try()


def test_case_4():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    var_1 = maybe_0.to_lazy()
    maybe_0.map(none_type_0)


def test_case_5():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = True
    maybe_1 = module_0.Maybe(bool_1, bool_1)
    var_0 = maybe_1.ap(maybe_1)
    var_1 = maybe_1.to_box()
    var_2 = maybe_1.bind(maybe_1)
    var_3 = var_2.filter(var_0)
    var_4 = var_3.to_either()
    none_type_0 = None
    maybe_0.filter(none_type_0)


def test_case_6():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.bind(none_type_0)


def test_case_7():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.ap(bool_0)
    var_1 = maybe_0.map(var_0)
    none_type_0 = None
    bool_1 = False
    var_2 = maybe_0.filter(bool_1)
    maybe_1 = module_0.Maybe(bool_1, bool_1)
    var_3 = maybe_1.to_either()
    var_4 = maybe_1.get_or_else(bool_0)
    maybe_1.filter(none_type_0)


def test_case_8():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.ap(maybe_0)


def test_case_9():
    bytes_0 = b"\xce\x0cQ\xca\xbd\xed\xbfn\x18"
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.filter(bytes_0)
    none_type_0 = None
    generic_0 = module_1.Generic()
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1.filter(var_0)


def test_case_10():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.map(maybe_0)
    none_type_0 = None
    bool_1 = False
    var_1 = maybe_0.filter(bool_1)
    maybe_1 = module_0.Maybe(bool_1, bool_1)
    var_2 = maybe_1.to_either()
    var_3 = maybe_1.get_or_else(bool_0)
    maybe_1.filter(none_type_0)


def test_case_11():
    bytes_0 = b"\xce\x0cQ\xca\xbd\xed\xbfn\x18"
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.filter(bytes_0)
    none_type_0 = None
    var_1 = var_0.to_either()
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1.filter(var_0)


def test_case_12():
    float_0 = -290.42
    list_0 = [float_0, float_0, float_0, float_0]
    bool_0 = False
    maybe_0 = module_0.Maybe(list_0, bool_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_1.to_either()


def test_case_13():
    int_0 = 1
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.to_box()
    maybe_1 = module_0.Maybe(var_0, var_0)


def test_case_14():
    str_0 = "Xu].#0m>{\nUjP\x0cSpX"
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_box()


def test_case_15():
    str_0 = "\n        :param semigroup: other semigroup to concat\n        :type semigroup: Max[B]\n        :returns: new Max with largest value\n        :rtype: Max[A | B]\n        "
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    maybe_0 = module_0.Maybe(dict_0, dict_0)
    var_0 = maybe_0.to_lazy()
    var_0.get_or_else(str_0)


def test_case_16():
    tuple_0 = ()
    maybe_0 = module_0.Maybe(tuple_0, tuple_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.to_box()
    var_2 = var_0.map(tuple_0)
    var_3 = maybe_0.get_or_else(var_0)
    var_4 = maybe_0.to_try()
    var_5 = maybe_0.to_try()
    var_4.to_box()


def test_case_17():
    bytes_0 = b"\xce\x0cQ\xca\xbd\xed\xbfn\x18\x82"
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.to_try()
    var_0.to_validation()


def test_case_18():
    float_0 = 977.51266
    set_0 = {float_0, float_0}
    none_type_0 = None
    maybe_0 = module_0.Maybe(set_0, none_type_0)
    var_0 = maybe_0.to_try()
    var_0.to_either()


def test_case_19():
    bytes_0 = b"\xee\x02\xdd\xa8\xcc>\x08ev\x02(\xe1s\x9d\xa5\x81x"
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    bool_1 = maybe_0.__eq__(bool_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.ap(bool_0)
    var_2 = maybe_0.to_box()
    maybe_1 = module_0.Maybe(bytes_0, bool_0)
    var_3 = maybe_1.filter(bool_0)
    var_4 = maybe_1.to_validation()
    var_5 = var_1.to_validation()
    var_5.to_validation()


def test_case_20():
    generic_0 = module_1.Generic()
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.to_validation()
    var_2 = var_0.to_either()
    bool_0 = False
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    var_3 = maybe_1.to_lazy()
    var_3.get_or_else(generic_0)


def test_case_21():
    int_0 = 1
    list_0 = [int_0, int_0, int_0, int_0]
    bool_0 = False
    maybe_0 = module_0.Maybe(int_0, bool_0)
    bool_1 = maybe_0.__eq__(list_0)
    maybe_1 = module_0.Maybe(list_0, list_0)
    var_0 = maybe_1.to_try()
    var_1 = maybe_1.to_box()
    bool_2 = True
    maybe_2 = module_0.Maybe(int_0, bool_2)
    maybe_3 = module_0.Maybe(bool_2, bool_2)
    var_2 = maybe_3.ap(maybe_3)
    var_3 = maybe_2.to_lazy()
    var_4 = maybe_3.to_box()
    var_5 = var_0.bind(maybe_2)
    var_6 = maybe_1.to_lazy()
    var_7 = maybe_3.bind(maybe_3)
    bool_3 = maybe_3.__eq__(bool_2)
    var_8 = var_5.bind(var_5)
    var_9 = var_2.to_lazy()
    var_10 = maybe_2.filter(var_8)
    var_11 = var_10.bind(var_0)
    var_12 = maybe_1.to_box()
    var_13 = var_9.to_box()
    maybe_0.filter(var_8)


def test_case_22():
    none_type_0 = None
    bool_0 = True
    dict_0 = {}
    maybe_0 = module_0.Maybe(none_type_0, dict_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_either()
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    var_2 = maybe_1.bind(var_1)
    var_3 = var_2.to_lazy()
    var_4 = var_3.to_either()
    maybe_2 = module_0.Maybe(none_type_0, bool_0)
    var_5 = maybe_2.to_try()
    var_5.to_lazy()


def test_case_23():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_box()
    maybe_1 = module_0.Maybe(none_type_0, var_0)
    var_1 = maybe_0.get_or_else(none_type_0)
    var_1.to_validation()


def test_case_24():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    bool_2 = True
    bool_3 = True
    maybe_1 = module_0.Maybe(bool_2, bool_3)
    var_0 = maybe_1.to_box()
    bool_4 = False
    maybe_2 = module_0.Maybe(bool_3, bool_4)
    maybe_3 = module_0.Maybe(bool_3, maybe_2)
    var_1 = maybe_3.ap(bool_0)
    bytes_0 = b'"Dl\xe0\xfb(-\x90\xe2\xb01}'
    var_2 = maybe_0.to_lazy()
    var_3 = var_1.filter(bool_3)
    generic_0 = module_1.Generic()
    var_4 = var_2.bind(var_0)
    var_5 = var_3.to_lazy()
    bytes_0.bind(var_5)


def test_case_25():
    int_0 = 1
    list_0 = [int_0, int_0, int_0, int_0]
    bool_0 = False
    maybe_0 = module_0.Maybe(int_0, bool_0)
    bool_1 = maybe_0.__eq__(list_0)
    var_0 = maybe_0.get_or_else(list_0)
    maybe_1 = module_0.Maybe(list_0, list_0)
    var_1 = maybe_1.to_try()
    var_2 = maybe_1.to_box()
    bool_2 = True
    maybe_2 = module_0.Maybe(int_0, bool_2)
    maybe_3 = module_0.Maybe(bool_2, bool_2)
    var_3 = maybe_3.ap(maybe_3)
    bool_3 = var_3.__eq__(maybe_1)
    var_4 = maybe_2.to_lazy()
    var_5 = maybe_2.filter(var_4)
    var_6 = maybe_3.to_box()
    var_7 = var_1.bind(maybe_2)
    var_8 = maybe_1.to_lazy()
    bool_4 = var_8.__eq__(var_0)
    var_9 = maybe_3.bind(maybe_3)
    var_10 = var_7.bind(var_7)
    var_11 = var_3.to_lazy()
    var_12 = maybe_2.filter(var_10)
    var_13 = var_12.bind(var_1)
    var_14 = maybe_1.to_box()
    var_15 = var_5.to_box()
    maybe_0.filter(var_10)
