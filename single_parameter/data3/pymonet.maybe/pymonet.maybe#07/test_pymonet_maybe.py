# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import builtins as module_1


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    object_0 = module_1.object()
    list_0 = [object_0]
    bool_0 = False
    int_0 = 1
    tuple_0 = (int_0, list_0)
    maybe_0 = module_0.Maybe(list_0, tuple_0)
    var_0 = maybe_0.ap(object_0)
    bool_1 = var_0.__eq__(var_0)
    maybe_1 = module_0.Maybe(var_0, var_0)
    var_1 = maybe_1.to_validation()
    var_2 = var_0.to_validation()
    var_3 = maybe_1.filter(var_2)
    var_2.ap(bool_0)


def test_case_3():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_either()
    bool_1 = maybe_0.__eq__(var_0)
    maybe_0.filter(maybe_0)


def test_case_4():
    bytes_0 = b"\xd5\xeb"
    none_type_0 = None
    maybe_0 = module_0.Maybe(bytes_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_validation()
    maybe_0.map(bytes_0)


def test_case_5():
    complex_0 = 919.2 - 1487.0508j
    maybe_0 = module_0.Maybe(complex_0, complex_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.bind(var_0)
    var_2 = maybe_0.to_either()


def test_case_6():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_validation()
    str_0 = ""
    maybe_1 = module_0.Maybe(str_0, str_0)
    bool_1 = maybe_1.__eq__(var_0)
    var_1 = maybe_0.to_try()
    bool_2 = maybe_1.__eq__(maybe_1)
    maybe_1.bind(var_1)


def test_case_7():
    object_0 = module_1.object()
    list_0 = [object_0]
    maybe_0 = module_0.Maybe(object_0, list_0)
    bool_0 = maybe_0.__eq__(list_0)
    var_0 = maybe_0.bind(bool_0)
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    var_1 = var_0.filter(var_0)
    var_2 = maybe_0.ap(bool_0)
    maybe_1.filter(maybe_1)


def test_case_8():
    bool_0 = True
    tuple_0 = ()
    none_type_0 = None
    maybe_0 = module_0.Maybe(tuple_0, none_type_0)
    maybe_0.ap(bool_0)


def test_case_9():
    complex_0 = 919.2 - 1487.0508j
    maybe_0 = module_0.Maybe(complex_0, complex_0)
    var_0 = maybe_0.filter(complex_0)
    var_1 = maybe_0.bind(var_0)
    var_2 = maybe_0.to_either()


def test_case_10():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.get_or_else(bool_0)
    maybe_0.filter(maybe_0)


def test_case_11():
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.get_or_else(none_type_0)
    var_0.to_box()


def test_case_12():
    int_0 = -1040
    list_0 = [int_0, int_0, int_0, int_0]
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_either()
    bool_0 = var_0.__eq__(list_0)


def test_case_13():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_either()
    var_1.filter(var_0)


def test_case_14():
    bool_0 = False
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.get_or_else(bool_0)
    bool_2 = maybe_0.__eq__(var_1)
    maybe_0.filter(maybe_0)


def test_case_15():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_try()


def test_case_16():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_try()


def test_case_17():
    int_0 = -2925
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.to_try()
    var_0.to_try()


def test_case_18():
    object_0 = module_1.object()
    list_0 = [object_0]
    maybe_0 = module_0.Maybe(object_0, list_0)
    bool_0 = maybe_0.__eq__(list_0)
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.filter(maybe_0)
    var_1 = maybe_0.ap(bool_0)
    var_2 = maybe_0.to_validation()
    maybe_1.filter(maybe_1)


def test_case_19():
    bool_0 = False
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_validation()
    bool_2 = maybe_0.__eq__(var_0)
    maybe_0.filter(maybe_0)


def test_case_20():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_validation()
    str_0 = "Sum[value={}]"
    var_1 = var_0.to_lazy()
    var_2 = var_1.to_try()
    maybe_1 = module_0.Maybe(str_0, str_0)
    bool_1 = maybe_1.__eq__(var_0)
    bool_2 = False
    int_0 = 1349
    maybe_2 = maybe_1.map(int_0)
    var_3 = maybe_0.to_box()
    var_4 = maybe_1.bind(var_3)
    var_5 = maybe_0.get_or_else(var_3)
    var_6 = maybe_1.to_try()
    var_7 = var_6.bind(bool_2)
    var_7.to_try()


def test_case_21():
    object_0 = module_1.object()
    list_0 = []
    bool_0 = False
    none_type_0 = None
    int_0 = 1
    tuple_0 = (int_0, list_0)
    maybe_0 = module_0.Maybe(list_0, tuple_0)
    var_0 = maybe_0.ap(object_0)
    var_1 = var_0.filter(none_type_0)
    bool_1 = var_0.__eq__(list_0)
    var_2 = maybe_0.bind(bool_0)
    var_3 = var_1.bind(bool_0)
    bool_2 = var_0.__eq__(var_2)
    bool_3 = maybe_0.__eq__(var_3)
    var_4 = var_2.to_box()
    var_5 = var_0.bind(var_0)
    var_6 = var_1.to_try()
    var_6.to_lazy()
