# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    bytes_0 = b"D\xd8%\xb0\x02/F8\x15\xf1K\xbb\xf8\xff\x8e"
    tuple_0 = ()
    maybe_0 = module_0.Maybe(tuple_0, bytes_0)
    bool_0 = False
    bool_1 = maybe_0.__eq__(bool_0)


def test_case_3():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.ap(bool_0)
    var_1 = maybe_0.map(var_0)
    var_2 = maybe_0.to_try()
    bool_1 = var_2.__eq__(var_2)
    bool_2 = False
    var_3 = var_2.get_or_else(var_0)
    var_4 = var_2.map(bool_2)
    var_5 = var_0.get_or_else(bool_1)
    bool_3 = maybe_0.__eq__(bool_1)


def test_case_4():
    bytes_0 = b"\xbaQ\xa6\xf0R}\xb7\x94\x10\xf9\xae\xba\x16\xf8"
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    maybe_0.map(bytes_0)


def test_case_5():
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.filter(none_type_0)
    var_1 = maybe_0.bind(var_0)
    maybe_1 = module_0.Maybe(var_0, bool_0)
    none_type_1 = None
    maybe_2 = module_0.Maybe(none_type_1, none_type_1)
    var_2 = maybe_2.to_lazy()
    maybe_2.filter(bool_0)


def test_case_6():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    maybe_0.bind(none_type_0)


def test_case_7():
    bytes_0 = b"\xc6aei\nc\xb9\x84\x98\xcc\x95\x95\xe1L\x96\xcc"
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_0.ap(bytes_0)


def test_case_8():
    none_type_0 = None
    dict_0 = {}
    bool_0 = True
    maybe_0 = module_0.Maybe(dict_0, bool_0)
    var_0 = maybe_0.filter(none_type_0)
    var_1 = var_0.to_lazy()


def test_case_9():
    int_0 = 6702
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.filter(int_0)
    none_type_0 = None
    var_1 = var_0.to_box()
    var_2 = var_0.get_or_else(none_type_0)
    maybe_1 = module_0.Maybe(int_0, int_0)
    var_3 = var_1.to_try()
    var_4 = maybe_1.to_box()


def test_case_10():
    generic_0 = module_1.Generic()
    bool_0 = False
    maybe_0 = module_0.Maybe(generic_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.get_or_else(generic_0)
    str_0 = "\n    First is a Monoid that will always return the first, value when 2 First instances are combined.\n    "
    var_0.map(str_0)


def test_case_11():
    none_type_0 = None
    bytes_0 = b"\xb2h\xdf\xf3\xc2"
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_lazy()
    var_1.get_or_else(none_type_0)


def test_case_12():
    float_0 = 2063.480915
    bool_0 = False
    maybe_0 = module_0.Maybe(float_0, bool_0)
    var_0 = maybe_0.to_either()
    maybe_0.filter(var_0)


def test_case_13():
    int_0 = -3127
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.to_box()
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_1 = maybe_1.to_box()
    var_1.bind(var_0)


def test_case_14():
    bytes_0 = b"~{"
    bool_0 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.to_try()
    var_0.to_box()


def test_case_15():
    float_0 = -718.131
    int_0 = -1231
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.to_validation()
    var_0.bind(float_0)


def test_case_16():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_validation()


def test_case_17():
    int_0 = 763
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.ap(int_0)
    var_1 = maybe_0.map(var_0)
    maybe_1 = module_0.Maybe(maybe_0, var_1)
    var_2 = maybe_1.filter(maybe_0)
    none_type_0 = None
    var_3 = var_1.to_lazy()
    var_4 = var_3.ap(none_type_0)
    var_5 = maybe_1.to_box()
    var_6 = var_3.to_box()
    bool_1 = False
    var_7 = maybe_0.ap(bool_1)
    var_8 = var_6.to_try()
    var_9 = var_5.to_try()
    bytes_0 = b"O\x8c\xd0"
    var_5.filter(bytes_0)


def test_case_18():
    int_0 = 763
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.ap(int_0)
    var_1 = maybe_0.to_try()
    bool_1 = var_1.__eq__(var_1)
    var_2 = var_1.get_or_else(var_0)
    var_3 = var_1.map(var_1)
    var_4 = var_0.get_or_else(var_1)
    bool_2 = maybe_0.__eq__(var_0)


def test_case_19():
    bool_0 = False
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = maybe_0.__eq__(none_type_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.to_lazy()
    var_2 = var_1.to_either()
    bool_2 = var_2.__eq__(bool_0)
    var_2.ap(bool_0)


def test_case_20():
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_1 = module_0.Maybe(bool_0, maybe_0)
    var_0 = maybe_1.to_box()
    var_1 = maybe_1.map(var_0)
    var_2 = maybe_1.filter(bool_0)
    maybe_2 = module_0.Maybe(bool_0, var_0)
    var_3 = maybe_2.ap(maybe_1)
    var_4 = maybe_1.filter(maybe_0)
    var_5 = var_3.map(none_type_0)
    var_6 = var_5.ap(var_3)
    var_7 = maybe_0.filter(var_4)
    var_8 = maybe_2.to_lazy()
    maybe_3 = module_0.Maybe(bool_0, bool_0)
    var_9 = var_5.to_try()
    var_10 = maybe_0.bind(var_6)
    var_11 = var_8.ap(none_type_0)
    var_12 = var_2.map(var_8)
    bool_1 = var_2.__eq__(maybe_1)
    var_13 = var_4.map(var_4)


def test_case_21():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, none_type_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    dict_0 = {}
    maybe_1 = module_0.Maybe(bool_1, dict_0)
    var_0 = maybe_0.to_box()
    maybe_1.map(var_0)
