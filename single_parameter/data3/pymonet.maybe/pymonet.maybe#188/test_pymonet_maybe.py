# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = True
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_1.to_either()
    bool_1 = var_0.__eq__(none_type_0)
    var_1 = maybe_1.filter(var_0)
    var_2 = maybe_1.get_or_else(var_1)
    bool_2 = maybe_1.__eq__(var_2)
    var_3 = var_1.to_either()
    var_4 = var_2.to_validation()
    var_5 = var_3.bind(var_4)
    maybe_0.filter(var_5)


def test_case_3():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.to_try()
    bool_0 = maybe_0.__eq__(none_type_0)


def test_case_4():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    none_type_1 = None
    bool_0 = False
    maybe_1 = module_0.Maybe(none_type_1, bool_0)
    maybe_1.ap(maybe_0)


def test_case_5():
    float_0 = 110.53
    bool_0 = True
    maybe_0 = module_0.Maybe(float_0, bool_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.map(float_0)
    var_2 = var_1.ap(var_0)
    var_3 = maybe_0.bind(var_1)
    bool_1 = var_2.__eq__(bool_0)


def test_case_6():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_lazy()
    var_2 = maybe_0.to_box()
    bool_0 = var_0.__eq__(maybe_0)
    maybe_0.bind(var_2)


def test_case_7():
    float_0 = 110.53
    bool_0 = True
    maybe_0 = module_0.Maybe(float_0, bool_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.map(float_0)
    var_2 = var_1.ap(var_0)
    bool_1 = maybe_0.__eq__(var_0)


def test_case_8():
    bool_0 = True
    int_0 = 0
    maybe_0 = module_0.Maybe(int_0, int_0)
    maybe_0.ap(bool_0)


def test_case_9():
    str_0 = "\n    The Try control gives us the ability write safe code\n    without focusing on try-catch blocks in the presence of exceptions.\n    "
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.filter(str_0)


def test_case_10():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = True
    maybe_1 = module_0.Maybe(maybe_0, bool_0)
    var_0 = maybe_1.filter(bool_0)
    var_1 = maybe_1.get_or_else(var_0)
    maybe_0.filter(maybe_1)


def test_case_11():
    str_0 = "=rN[jw\tqo"
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.get_or_else(str_0)
    var_0.to_try()


def test_case_12():
    complex_0 = 2920.7 + 2802.76j
    bool_0 = True
    maybe_0 = module_0.Maybe(complex_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.to_lazy()
    var_2 = var_1.bind(var_0)
    var_3 = maybe_0.to_try()
    var_4 = maybe_0.get_or_else(complex_0)


def test_case_13():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.to_try()
    var_2 = maybe_0.to_try()
    var_1.bind(var_1)


def test_case_14():
    int_0 = 1
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.to_validation()
    var_0.to_validation()


def test_case_15():
    int_0 = -1466
    float_0 = -1502.935
    bool_0 = False
    maybe_0 = module_0.Maybe(float_0, float_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.bind(int_0)
    maybe_1 = module_0.Maybe(float_0, bool_0)
    var_2 = maybe_1.to_either()
    bool_1 = maybe_1.__eq__(maybe_0)
    var_3 = maybe_0.get_or_else(maybe_1)
    bool_2 = maybe_1.__eq__(int_0)
    maybe_2 = module_0.Maybe(int_0, float_0)
    var_4 = var_1.to_lazy()
    var_5 = maybe_1.to_validation()
    none_type_0 = None
    maybe_3 = module_0.Maybe(none_type_0, var_1)
    maybe_1.ap(bool_1)


def test_case_16():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    none_type_0 = None
    var_0 = maybe_0.ap(bool_0)
    var_1 = var_0.to_box()
    var_2 = maybe_0.to_box()
    var_3 = maybe_0.to_lazy()
    var_4 = maybe_0.get_or_else(none_type_0)
    var_5 = var_3.to_try()
    var_6 = var_3.to_either()
    var_5.to_try()


def test_case_17():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_1 = maybe_0.__eq__(bool_0)
    complex_0 = 2674.83 + 2191j
    var_0 = maybe_0.get_or_else(complex_0)
    var_1 = maybe_0.get_or_else(var_0)
    var_2 = maybe_0.to_lazy()
    var_3 = var_2.to_try()
    var_3.bind(none_type_0)


def test_case_18():
    int_0 = -1472
    float_0 = -1502.935
    bool_0 = False
    maybe_0 = module_0.Maybe(float_0, float_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.to_validation()
    var_2 = maybe_0.bind(int_0)
    maybe_1 = module_0.Maybe(float_0, bool_0)
    bool_1 = maybe_1.__eq__(maybe_0)
    var_3 = maybe_0.get_or_else(maybe_1)
    bool_2 = maybe_1.__eq__(int_0)
    maybe_2 = module_0.Maybe(int_0, float_0)
    var_4 = var_3.get_or_else(var_1)
    none_type_0 = None
    maybe_3 = module_0.Maybe(none_type_0, var_2)
    maybe_1.ap(bool_1)


def test_case_19():
    generic_0 = module_1.Generic()
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    bytes_0 = b"\xfe\xa7\xfa\x08.\xb0"
    var_0 = maybe_0.to_lazy()
    bytes_1 = b"\xab\x90\x80\xd5\xe1\x1fD`\x12\xfd\x9e\x84_\xe8\xcd\x87\xa3"
    maybe_1 = module_0.Maybe(bytes_1, bytes_1)
    var_1 = maybe_1.to_try()
    bool_1 = maybe_0.__eq__(maybe_0)
    var_2 = maybe_1.to_try()
    var_3 = maybe_1.bind(var_2)
    var_4 = var_3.get_or_else(bytes_0)
    var_4.get_or_else(bool_0)
