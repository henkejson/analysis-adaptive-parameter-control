# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1


def test_case_0():
    int_0 = 1
    maybe_0 = module_0.Maybe(int_0, int_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    generic_0 = module_1.Generic()
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.map(generic_0)
    var_1 = maybe_0.to_validation()
    var_2 = var_0.bind(var_1)
    var_3 = var_2.to_try()
    var_4 = var_0.to_try()
    var_4.to_box()


def test_case_3():
    bool_0 = False
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    set_0 = set()
    bool_2 = maybe_0.__eq__(set_0)
    var_0 = maybe_0.map(bool_0)
    var_1 = var_0.to_validation()
    var_2 = var_0.bind(var_1)
    var_3 = var_2.to_try()
    var_4 = var_2.to_try()
    var_5 = var_2.to_box()
    var_5.to_box()


def test_case_4():
    bool_0 = False
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.map(bool_0)


def test_case_5():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    maybe_0.bind(maybe_0)


def test_case_6():
    none_type_0 = None
    bytes_0 = b'\x84\xc3Q&\xd7ZXk\xad\xec\xd3N,\xe2U\x8e\xa9q"'
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.ap(none_type_0)
    var_1 = var_0.to_try()
    var_1.to_lazy()


def test_case_7():
    int_0 = -780
    bool_0 = False
    maybe_0 = module_0.Maybe(int_0, bool_0)
    maybe_0.ap(int_0)


def test_case_8():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_lazy()
    var_2 = var_1.to_either()
    set_0 = {none_type_0}
    tuple_0 = (set_0,)
    maybe_1 = module_0.Maybe(none_type_0, tuple_0)
    var_3 = maybe_1.filter(var_2)
    var_4 = var_3.get_or_else(none_type_0)
    var_4.to_try()


def test_case_9():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.filter(bool_0)


def test_case_10():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_box()
    none_type_1 = None
    maybe_1 = module_0.Maybe(none_type_1, none_type_1)
    var_1 = maybe_1.to_either()
    var_2 = var_1.to_try()
    var_3 = var_1.to_lazy()
    maybe_2 = module_0.Maybe(var_2, var_1)
    var_4 = maybe_2.get_or_else(var_0)


def test_case_11():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.get_or_else(none_type_0)
    var_1 = maybe_0.to_try()
    var_0.get_or_else(var_1)


def test_case_12():
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_lazy()
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    var_1 = maybe_1.to_either()
    bool_1 = var_1.__eq__(maybe_1)


def test_case_13():
    bool_0 = False
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_0, none_type_0)
    var_0 = maybe_0.to_either()
    none_type_1 = None
    bool_1 = True
    maybe_1 = module_0.Maybe(none_type_1, none_type_1)
    maybe_1.filter(bool_1)


def test_case_14():
    generic_0 = module_1.Generic()
    bool_0 = True
    maybe_0 = module_0.Maybe(generic_0, bool_0)
    var_0 = maybe_0.to_box()
    int_0 = 1
    bool_1 = False
    maybe_1 = module_0.Maybe(int_0, bool_1)
    maybe_1.filter(generic_0)


def test_case_15():
    float_0 = 1780.902984
    tuple_0 = (float_0,)
    bool_0 = False
    maybe_0 = module_0.Maybe(tuple_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_validation()


def test_case_16():
    str_0 = "\n        :param semigroup: other semigroup to concat\n        :type semigroup: One[B]\n        :returns: new One with first truly value or last falsy\n        :rtype: One[A | B]\n        "
    float_0 = -1929.8692
    set_0 = {float_0, float_0}
    maybe_0 = module_0.Maybe(set_0, set_0)
    var_0 = maybe_0.get_or_else(str_0)
    tuple_0 = ()
    maybe_1 = module_0.Maybe(tuple_0, tuple_0)
    var_1 = maybe_1.to_lazy()
    var_2 = var_1.to_either()
    var_2.map(var_0)


def test_case_17():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_try()
    maybe_0.filter(var_0)


def test_case_18():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_validation()
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = False
    maybe_2 = module_0.Maybe(bool_0, bool_0)
    maybe_0.ap(none_type_0)


def test_case_19():
    int_0 = 0
    bool_0 = False
    bool_1 = True
    maybe_0 = module_0.Maybe(int_0, bool_1)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_box()
    var_2 = var_1.to_validation()
    var_2.map(bool_0)


def test_case_20():
    int_0 = -2503
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_lazy()
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    maybe_1 = module_0.Maybe(dict_0, dict_0)
    var_2 = maybe_1.get_or_else(dict_0)
    var_3 = maybe_1.ap(dict_0)
    maybe_2 = module_0.Maybe(int_0, var_2)
    var_4 = maybe_1.bind(maybe_2)
    bool_0 = var_3.__eq__(maybe_2)
    var_5 = maybe_1.filter(maybe_2)
    var_6 = var_3.ap(int_0)
    var_7 = maybe_2.to_either()
    var_8 = maybe_2.bind(var_3)
    var_2.to_validation()


def test_case_21():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_try()
    var_0.ap(maybe_0)
