# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    bytes_0 = b"i\x1e\xfe\xe7\xf7\x83v\x82\xa5*\xec`k"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(maybe_0, bool_1)
    bool_2 = maybe_1.__eq__(maybe_1)
    var_0 = maybe_0.bind(maybe_1)
    var_1 = maybe_0.to_either()


def test_case_3():
    bool_0 = True
    str_0 = "4on50RmQ9`u"
    bool_1 = False
    maybe_0 = module_0.Maybe(str_0, bool_1)
    bool_2 = maybe_0.__eq__(bool_0)


def test_case_4():
    bytes_0 = b"i\x1e\xfe\xe7\xf7\x83v\x82\xa5*\xec`k"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.map(bytes_0)


def test_case_5():
    none_type_0 = None
    bool_0 = True
    none_type_1 = None
    maybe_0 = module_0.Maybe(bool_0, none_type_1)
    maybe_0.map(none_type_0)


def test_case_6():
    bytes_0 = b"rL>K\x07\x07}\xd5]\xa1G\x8f\x1b\xc9"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.bind(var_0)
    var_2 = maybe_0.to_box()
    var_3 = var_2.to_either()
    var_4 = maybe_0.map(maybe_0)


def test_case_7():
    none_type_0 = None
    str_0 = "\n        :param constructor_fn: function to call during fold method call\n        :type constructor_fn: Function() -> A\n        "
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    maybe_0.bind(str_0)


def test_case_8():
    int_0 = 2807
    bytes_0 = b"i\x1e\xfe\xe7\xf7\x83v\x82\xa5*\xec`k"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.map(bytes_0)
    var_1 = maybe_0.ap(int_0)
    var_2 = var_1.to_either()
    var_3 = var_2.to_box()


def test_case_9():
    tuple_0 = ()
    complex_0 = 24.294636 + 61.49j
    bool_0 = False
    maybe_0 = module_0.Maybe(complex_0, bool_0)
    maybe_0.ap(tuple_0)


def test_case_10():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = False
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.to_try()
    var_2 = var_0.to_lazy()
    var_3 = maybe_0.filter(bool_1)
    var_4 = var_3.bind(maybe_0)


def test_case_11():
    bytes_0 = b"\x15x\xc6\xa4'\x0e\x94\x99\x9d\xf1C\xe7~"
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bytes_0)
    var_0 = maybe_0.filter(bytes_0)
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    var_1 = var_0.to_either()
    maybe_1.filter(var_0)


def test_case_12():
    bytes_0 = b"\x15x\xc6\xa4'\x0e\x94\x99\x9d\xf1C\xe7~"
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bytes_0)
    var_0 = maybe_0.filter(bytes_0)
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    bool_1 = maybe_0.__eq__(none_type_0)
    var_1 = maybe_0.get_or_else(maybe_1)
    var_2 = maybe_0.bind(var_1)
    bool_2 = maybe_0.__eq__(var_1)
    var_3 = maybe_0.to_either()


def test_case_13():
    bytes_0 = b"\x15x\xc6\xa4'\xff\x94\x99\x9d\xf1C\xe7~"
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bytes_0)
    var_0 = maybe_0.filter(bytes_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(bool_0, bool_1)
    var_1 = maybe_0.get_or_else(maybe_1)
    var_2 = maybe_0.bind(maybe_0)
    var_3 = maybe_0.to_either()
    var_4 = var_1.get_or_else(maybe_0)
    var_5 = var_1.to_lazy()
    maybe_1.filter(var_0)


def test_case_14():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_either()
    bool_0 = maybe_0.__eq__(maybe_0)
    var_0.bind(var_0)


def test_case_15():
    bool_0 = False
    bool_1 = False
    bool_2 = False
    maybe_0 = module_0.Maybe(bool_1, bool_2)
    maybe_1 = module_0.Maybe(maybe_0, bool_1)
    var_0 = maybe_1.to_box()
    var_0.map(bool_0)


def test_case_16():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.ap(none_type_0)
    var_2 = var_1.to_try()
    var_2.to_validation()


def test_case_17():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_try()
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_2 = maybe_1.to_try()
    maybe_1.map(none_type_0)


def test_case_18():
    bytes_0 = b"B[$\xe4w\x8b\x903\x1c\xc2\xdb\x86 kO\x1b\x87"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    maybe_0 = module_0.Maybe(dict_0, dict_0)
    var_0 = maybe_0.to_try()
    var_0.to_validation()


def test_case_19():
    float_0 = 1662.057017
    none_type_0 = None
    maybe_0 = module_0.Maybe(float_0, none_type_0)
    var_0 = maybe_0.to_try()


def test_case_20():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(maybe_0, bool_1)
    var_0 = maybe_1.to_validation()
    var_1 = maybe_1.to_try()
    var_2 = var_0.to_lazy()
    var_3 = maybe_0.filter(bool_1)
    var_4 = var_3.bind(maybe_1)


def test_case_21():
    bytes_0 = b"\x15\xe2x\xc6\xa4'\x0e\x94\x99\xf1C\xe7~"
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, bytes_0)
    var_0 = maybe_0.to_lazy()
    bool_0 = False
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    bool_1 = maybe_0.__eq__(none_type_0)
    var_1 = var_0.to_either()
    var_2 = var_1.to_box()
    var_3 = maybe_0.get_or_else(maybe_1)
    var_4 = maybe_0.to_validation()
    var_3.filter(var_0)
