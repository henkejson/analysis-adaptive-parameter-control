# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    str_0 = "\n        Transform Box into Right either.\n\n        :returns: right Either monad with previous value\n        :rtype: Right[A]\n        "
    maybe_0 = module_0.Maybe(str_0, str_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    bool_0 = False
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    bool_2 = True
    maybe_1 = module_0.Maybe(bool_2, bool_2)
    bool_3 = maybe_1.__eq__(maybe_0)
    var_0 = maybe_1.to_lazy()


def test_case_3():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_either()
    none_type_1 = None
    maybe_1 = module_0.Maybe(none_type_1, none_type_1)
    var_1 = maybe_0.to_box()
    bool_0 = maybe_0.__eq__(none_type_1)
    tuple_0 = ()
    bool_1 = var_1.__eq__(none_type_1)
    var_1.get_or_else(tuple_0)


def test_case_4():
    bool_0 = True
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    bool_2 = True
    maybe_1 = module_0.Maybe(bool_2, bool_2)
    bool_3 = maybe_1.__eq__(maybe_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.map(var_0)
    var_2 = maybe_1.to_lazy()


def test_case_5():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.ap(maybe_0)


def test_case_6():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.bind(maybe_0)
    var_2 = var_1.to_try()
    maybe_1 = module_0.Maybe(bool_0, none_type_0)
    var_3 = var_1.to_box()
    var_4 = var_1.to_either()
    var_5 = var_1.to_either()


def test_case_7():
    bytes_0 = b"\x0e\xf2\x8f\x0c\x08#x\xda\x98'8\x04\x8b\x89\xd6"
    bool_0 = True
    none_type_0 = None
    none_type_1 = None
    maybe_0 = module_0.Maybe(none_type_1, bytes_0)
    var_0 = maybe_0.ap(bytes_0)
    var_1 = var_0.get_or_else(none_type_0)
    var_1.ap(bool_0)


def test_case_8():
    int_0 = 1120
    maybe_0 = module_0.Maybe(int_0, int_0)
    bool_0 = True
    var_0 = maybe_0.get_or_else(bool_0)
    maybe_1 = module_0.Maybe(int_0, bool_0)
    none_type_0 = None
    var_1 = maybe_1.filter(none_type_0)
    var_2 = maybe_0.to_box()
    bool_1 = var_2.__eq__(maybe_0)


def test_case_9():
    tuple_0 = ()
    bytes_0 = b"\x16c\x04\xfc\x1ev\x96\xact\x10<m9\xa5\x81\xd1/\xc4\xd1`"
    none_type_0 = None
    maybe_0 = module_0.Maybe(bytes_0, none_type_0)
    var_0 = maybe_0.to_validation()
    maybe_0.filter(tuple_0)


def test_case_10():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    var_1 = maybe_0.to_either()
    var_2 = var_1.to_box()
    var_3 = var_2.to_validation()
    var_4 = var_3.to_try()
    var_5 = var_4.get_or_else(none_type_0)
    var_5.to_box()


def test_case_11():
    int_0 = 0
    none_type_0 = None
    maybe_0 = module_0.Maybe(int_0, none_type_0)
    var_0 = maybe_0.to_either()


def test_case_12():
    none_type_0 = None
    none_type_1 = None
    maybe_0 = module_0.Maybe(none_type_1, none_type_1)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_either()
    var_2 = var_1.to_box()
    var_2.get_or_else(none_type_0)


def test_case_13():
    complex_0 = 187.3298 - 3030.728388j
    maybe_0 = module_0.Maybe(complex_0, complex_0)
    var_0 = maybe_0.to_try()
    var_0.to_try()


def test_case_14():
    int_0 = 769
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_0, none_type_0)
    var_0 = maybe_0.to_try()
    var_0.map(int_0)


def test_case_15():
    bytes_0 = b"\xd4c\xe5"
    bytes_1 = b""
    bool_0 = False
    maybe_0 = module_0.Maybe(bytes_1, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.to_lazy()
    maybe_0.map(bytes_0)


def test_case_16():
    int_0 = 1120
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.to_validation()
    var_2 = var_1.to_try()
    var_3 = maybe_0.map(var_0)
    var_4 = var_1.to_either()
    var_5 = var_3.to_either()
    var_6 = var_3.map(int_0)
    var_7 = var_3.bind(var_0)
    var_8 = var_0.to_validation()
    var_9 = maybe_0.to_try()
    bool_0 = True
    bool_1 = False
    maybe_1 = module_0.Maybe(bool_0, bool_1)
    var_10 = var_9.bind(var_5)
    var_11 = maybe_1.to_lazy()
    bool_2 = maybe_1.__eq__(var_8)


def test_case_17():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    var_1 = maybe_0.map(var_0)
    str_0 = "\n        Transform Either into Validation.\n\n        :returns: successfull Validation monad with previous value\n        :rtype: Validation[A, []]\n        "
    var_2 = maybe_0.filter(str_0)
    bool_1 = maybe_0.__eq__(bool_0)
    var_3 = var_2.to_validation()
    var_4 = var_2.to_try()
    var_5 = maybe_0.map(var_3)
    var_6 = var_5.to_either()
    var_7 = var_2.to_either()
    var_8 = var_6.map(var_5)
    maybe_1 = module_0.Maybe(var_3, none_type_0)
    maybe_1.bind(var_6)


def test_case_18():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    bytes_0 = b"%'X\x08G\x84"
    bool_1 = maybe_0.__eq__(bytes_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.ap(none_type_0)
    var_2 = var_0.to_validation()
    bool_2 = var_2.__eq__(none_type_0)
    var_3 = var_0.ap(bytes_0)
    var_4 = maybe_0.to_box()
    var_5 = maybe_0.to_try()
    var_6 = var_4.to_try()
    bool_3 = maybe_0.__eq__(var_5)
    var_7 = var_4.to_validation()
    var_6.filter(var_7)


def test_case_19():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    var_1 = maybe_0.map(var_0)
    list_0 = [none_type_0]
    maybe_1 = module_0.Maybe(list_0, list_0)
    var_2 = maybe_1.filter(var_0)
    var_3 = var_1.get_or_else(maybe_1)
    var_4 = var_2.map(var_3)
    str_0 = "\n        Transform Either into Validation.\n\n        :returns: successfull Validation monad with previous value\n        :rtype: Validation[A, []]\n        "
    var_5 = var_4.filter(var_3)
    bool_1 = var_0.__eq__(maybe_1)
    bool_2 = var_0.__eq__(none_type_0)
    var_6 = maybe_0.to_validation()
    var_7 = var_0.to_try()
    var_8 = var_1.get_or_else(var_3)
    var_9 = var_5.map(var_0)
    var_10 = var_6.to_either()
    var_11 = maybe_0.to_either()
    var_12 = var_4.map(var_10)
    var_13 = var_5.bind(var_0)
    var_14 = var_11.to_validation()
    var_15 = var_5.to_try()
    bool_3 = True
    var_16 = maybe_1.bind(bool_3)
    var_17 = var_12.to_lazy()
    var_18 = var_4.ap(bool_2)
    var_19 = var_18.to_box()
    bool_4 = var_0.__eq__(str_0)
