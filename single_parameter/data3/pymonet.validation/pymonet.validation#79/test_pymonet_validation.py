# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bool_0 = True
    str_0 = ";y"
    list_0 = [str_0, str_0, str_0, str_0]
    validation_0 = module_0.Validation(list_0, str_0)
    var_0 = validation_0.__eq__(bool_0)
    var_0.to_box()


def test_case_1():
    none_type_0 = None
    bytes_0 = b"3\x7fC\xd8^[\xb8\xd6!L\xf8a"
    validation_0 = module_0.Validation(none_type_0, bytes_0)
    var_0 = validation_0.__str__()
    validation_0.ap(none_type_0)


def test_case_2():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    validation_1 = module_0.Validation(validation_0, dict_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.to_maybe()
    var_0.is_success()


def test_case_3():
    str_0 = ";y"
    list_0 = [str_0, str_0, str_0, str_0]
    validation_0 = module_0.Validation(list_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.__eq__(validation_0)
    var_2 = validation_0.__str__()
    var_3 = validation_0.to_box()
    validation_1 = module_0.Validation(var_1, var_3)
    var_4 = var_3.__str__()


def test_case_4():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_5():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.to_try()


def test_case_6():
    float_0 = 2420.9152
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, float_0)
    validation_0.is_fail()


def test_case_7():
    str_0 = "~d\\c7WY];#km"
    bytes_0 = b"\xc3C\xcc>\x80\x8a[\xf0\xb1\x17*"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.is_success()
    validation_0.map(str_0)


def test_case_8():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    validation_0.bind(validation_0)


def test_case_9():
    bool_0 = False
    set_0 = set()
    none_type_0 = None
    validation_0 = module_0.Validation(set_0, none_type_0)
    validation_0.ap(bool_0)


def test_case_10():
    str_0 = ";y"
    list_0 = [str_0, str_0, str_0, str_0]
    validation_0 = module_0.Validation(list_0, str_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.__str__()
    var_2 = validation_0.to_box()
    validation_1 = module_0.Validation(var_0, var_2)
    var_3 = var_2.__str__()
    var_4 = var_3.__eq__(var_0)
    var_2.map(validation_0)


def test_case_11():
    str_0 = 'A?*,"'
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_lazy()


def test_case_12():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    list_0 = [set_0, bool_0, set_0]
    int_0 = -436
    int_1 = 0
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_1}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.bind(list_0)
    var_1.to_maybe()


def test_case_13():
    bool_0 = True
    str_0 = ";y"
    list_0 = [str_0, str_0, str_0, str_0]
    validation_0 = module_0.Validation(list_0, str_0)
    var_0 = validation_0.__eq__(bool_0)
    var_1 = validation_0.to_either()
    var_2 = validation_0.to_either()


def test_case_14():
    bool_0 = True
    str_0 = ""
    list_0 = [str_0, str_0, str_0, str_0]
    validation_0 = module_0.Validation(list_0, str_0)
    var_0 = validation_0.__eq__(bool_0)
    var_1 = validation_0.to_box()
    validation_1 = module_0.Validation(bool_0, var_1)
    var_2 = validation_0.to_either()
    var_3 = var_1.__str__()
    var_4 = var_3.__eq__(var_0)
    bool_1 = False
    set_0 = {bool_0, bool_0, bool_1}
    var_0.ap(set_0)


def test_case_15():
    dict_0 = {}
    int_0 = 723
    list_0 = [dict_0, int_0, int_0, dict_0]
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.__str__()
    var_0.ap(list_0)


def test_case_16():
    str_0 = ";y"
    list_0 = [str_0, str_0, str_0, str_0]
    validation_0 = module_0.Validation(list_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.__eq__(validation_0)
    var_2 = validation_0.__str__()
    validation_1 = module_0.Validation(var_1, validation_0)
    var_3 = var_0.__str__()
    var_4 = validation_0.__eq__(validation_1)
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    set_0.map(validation_0)
