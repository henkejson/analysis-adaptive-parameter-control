# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    str_0 = "\n        Transform Lazy into Either (Right) with constructor_fn result.\n\n        :returns: Right monad with constructor_fn result\n        :rtype: Right[A]\n        "
    int_0 = 1970
    list_0 = [int_0, int_0]
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.__eq__(str_0)
    var_1.to_either()


def test_case_1():
    none_type_0 = None
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.__str__()
    var_0.ap(none_type_0)


def test_case_2():
    str_0 = "ERW'gZ\x0c|M"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    var_0.to_maybe()


def test_case_3():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_maybe()
    int_0 = 1970
    validation_1 = module_0.Validation(int_0, int_0)
    validation_1.to_try()


def test_case_4():
    str_0 = "\n        Return monad value.\n\n        :returns: monad value\n        :rtype: A\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.__str__()
    var_1.is_success()


def test_case_5():
    float_0 = 306.583544
    validation_0 = module_0.Validation(float_0, float_0)


def test_case_6():
    int_0 = 1976
    list_0 = [int_0, int_0]
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.__eq__(int_0)
    var_2 = var_0.__str__()
    validation_1 = module_0.Validation(var_0, var_2)
    var_3 = validation_0.__str__()
    var_4 = validation_0.is_fail()
    var_5 = var_3.__str__()
    var_5.is_success()


def test_case_7():
    dict_0 = {}
    bytes_0 = b",\xd5\x9c\xce\xf9"
    validation_0 = module_0.Validation(bytes_0, dict_0)
    var_0 = validation_0.to_lazy()
    validation_1 = module_0.Validation(bytes_0, bytes_0)
    validation_1.map(dict_0)


def test_case_8():
    bool_0 = False
    complex_0 = -1797.72685 - 499.63j
    validation_0 = module_0.Validation(complex_0, complex_0)
    validation_0.bind(bool_0)


def test_case_9():
    bool_0 = False
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.ap(bool_0)


def test_case_10():
    float_0 = -142.0
    validation_0 = module_0.Validation(float_0, float_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.to_lazy()
    var_0.ap(float_0)


def test_case_11():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_either()
    validation_0.to_try()


def test_case_12():
    none_type_0 = None
    int_0 = 1970
    list_0 = [int_0, int_0]
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_try()
    var_2 = var_0.to_box()
    var_3 = validation_0.__eq__(none_type_0)
    var_4 = var_0.to_box()
    var_5 = validation_0.__eq__(list_0)
    var_3.to_either()


def test_case_13():
    int_0 = 1970
    list_0 = [int_0, int_0]
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.__eq__(int_0)
    var_2 = validation_0.to_box()
    var_3 = validation_0.__eq__(validation_0)
    var_4 = validation_0.to_either()
    var_1.map(var_3)


def test_case_14():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    str_0 = "\n        Transform Lazy into Either (Right) with constructor_fn result.\n\n        :returns: Right monad with constructor_fn result\n        :rtype: Right[A]\n        "
    int_0 = 1970
    list_0 = [int_0, int_0, int_0, str_0, int_0]
    validation_1 = module_0.Validation(list_0, list_0)
    var_0 = module_0.Validation(validation_1, str_0)
    var_1 = var_0.to_box()
    var_2 = validation_1.__eq__(var_0)
    var_2.to_either()


def test_case_15():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_box()
    validation_0.ap(var_1)
