# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    float_0 = -3416.397479
    validation_0 = module_0.Validation(float_0, float_0)
    var_0 = validation_0.__eq__(float_0)
    var_0.bind(float_0)


def test_case_1():
    str_0 = "\n        Take function and applied this function with monad value and returns new monad with mapped value.\n\n        :params mapper: function to apply on monad value\n        :type mapper: Function(A) -> B\n        :returns: for successfully new Try with mapped value, othercase copy of self\n        :rtype: Try[B]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.is_fail()
    var_0.is_success()


def test_case_2():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_3():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_maybe()


def test_case_4():
    none_type_0 = None
    int_0 = -2192
    validation_0 = module_0.Validation(none_type_0, int_0)
    validation_0.map(none_type_0)


def test_case_5():
    tuple_0 = ()
    bytes_0 = b"FCC\xda\xa1.=+"
    list_0 = [bytes_0, bytes_0, bytes_0]
    validation_0 = module_0.Validation(list_0, bytes_0)
    validation_0.bind(tuple_0)


def test_case_6():
    int_0 = -2609
    int_1 = -1760
    tuple_0 = (int_0, int_1)
    validation_0 = module_0.Validation(int_1, int_1)
    validation_0.ap(tuple_0)


def test_case_7():
    int_0 = 1801
    none_type_0 = None
    validation_0 = module_0.Validation(int_0, none_type_0)
    var_0 = validation_0.to_box()


def test_case_8():
    bytes_0 = b""
    none_type_0 = None
    validation_0 = module_0.Validation(bytes_0, none_type_0)
    var_0 = validation_0.__eq__(bytes_0)
    var_1 = validation_0.to_lazy()
    var_0.bind(var_0)


def test_case_9():
    str_0 = "_rtKKJq]8"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_try()
    var_1 = validation_0.to_lazy()
    var_2 = var_1.to_either()
    var_3 = var_0.__str__()
    var_1.is_success()


def test_case_10():
    float_0 = -640.505468
    none_type_0 = None
    validation_0 = module_0.Validation(float_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_0.to_try()


def test_case_11():
    bytes_0 = b"FCC\xda\xa1.=+"
    list_0 = [bytes_0, bytes_0, bytes_0]
    validation_0 = module_0.Validation(list_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_0.is_success()


def test_case_12():
    float_0 = -634.859256447377
    none_type_0 = None
    validation_0 = module_0.Validation(float_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_0.is_fail()


def test_case_13():
    bytes_0 = b"\xd4\xee\x1a\x1d`\xc9\xf1"
    list_0 = [bytes_0, bytes_0, bytes_0]
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.__str__()
    var_0.to_either()


def test_case_14():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    validation_1 = module_0.Validation(set_0, validation_0)
    var_0 = validation_0.to_either()
    var_0.bind(var_0)


def test_case_15():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.__str__()
    var_0.ap(var_0)


def test_case_16():
    bytes_0 = b"FCC\xda\xa1.=+"
    list_0 = [bytes_0, bytes_0, bytes_0]
    validation_0 = module_0.Validation(list_0, bytes_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_maybe()
    var_2 = validation_0.to_either()
    var_3 = validation_0.__eq__(validation_0)
    validation_1 = module_0.Validation(var_3, var_3)
    validation_2 = module_0.Validation(bytes_0, list_0)
    var_4 = validation_2.__eq__(validation_0)
    var_5 = var_2.to_try()
    validation_0.map(var_1)
