# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0
import builtins as module_1


def test_case_0():
    none_type_0 = None
    tuple_0 = ()
    none_type_1 = None
    validation_0 = module_0.Validation(none_type_1, none_type_1)
    var_0 = validation_0.__eq__(tuple_0)
    var_1 = var_0.__str__()
    var_2 = var_1.__eq__(none_type_0)
    var_2.is_fail()


def test_case_1():
    tuple_0 = ()
    object_0 = module_1.object()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: object_0, tuple_0: object_0}
    var_0 = validation_0.__str__()
    validation_1 = module_0.Validation(dict_0, tuple_0)
    var_1 = validation_1.to_either()
    var_2 = validation_1.is_fail()
    var_3 = validation_1.is_fail()
    object_0.is_success()


def test_case_2():
    str_0 = "#;q"
    bytes_0 = b"\x8f\xca\xb7{\xec&^\x1be\xa1\xea\x19\xaa\xc7]\xec\xdeA\x14"
    list_0 = [bytes_0, bytes_0, bytes_0]
    validation_0 = module_0.Validation(list_0, bytes_0)
    var_0 = validation_0.__str__()
    var_0.bind(str_0)


def test_case_3():
    bytes_0 = b"\xbb\xf0\x9am\xbe\xea\xce,\xa2;\xbf\xe5l\xd5]UTg+"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.to_either()


def test_case_4():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)


def test_case_5():
    int_0 = 1145
    int_1 = 2646
    str_0 = "\n        Return resolved Task with stored value argument.\n\n        :param value: value to store in Task\n        :type value: A\n        :returns: resolved Task\n        :rtype: Task[Function(_, resolve) -> A]\n        "
    validation_0 = module_0.Validation(str_0, int_1)
    var_0 = validation_0.to_box()
    validation_1 = module_0.Validation(int_0, int_0)
    validation_2 = module_0.Validation(str_0, str_0)
    var_1 = validation_2.is_fail()
    validation_2.bind(int_1)


def test_case_6():
    dict_0 = {}
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.map(dict_0)


def test_case_7():
    float_0 = -2587.003
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    validation_0 = module_0.Validation(dict_0, dict_0)
    validation_0.bind(float_0)


def test_case_8():
    list_0 = []
    str_0 = "#HB[YO"
    validation_0 = module_0.Validation(str_0, str_0)
    validation_0.ap(list_0)


def test_case_9():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.to_maybe()
    var_2 = var_1.to_either()
    bytes_0 = b"b\xa2\x04\xe2\x9b(\xd7\x1d\xfe\xb0\xe4k\xef\xb6\x08\x86"
    validation_1 = module_0.Validation(var_2, bytes_0)


def test_case_10():
    bytes_0 = b"\xbb\xf0\x9am\xbe\xea\xce,\xa2;\xbf\xe5l\xd5]UTg+"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.to_maybe()
    var_2 = var_0.to_box()
    var_3 = var_0.bind(var_0)
    var_4 = validation_0.to_maybe()
    var_5 = var_0.__str__()
    var_2.is_fail()


def test_case_11():
    bytes_0 = b"\xd5_u\x82e\x84q\x0f\xc4\xd4\x91]\xff\x80l\xa6"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_try()
    var_0.to_try()


def test_case_12():
    bytes_0 = b"\xbb\xf0\x04\x9am\xbe\xea\xce,\xa2;\x07\xe5l\xd5]UTg+"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_box()
    var_2 = validation_0.__eq__(validation_0)
    var_2.ap(validation_0)


def test_case_13():
    bytes_0 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(bytes_0)
    none_type_0 = None
    var_1 = validation_0.is_success()
    validation_1 = module_0.Validation(var_1, none_type_0)
    var_2 = validation_0.__str__()
    var_3 = validation_0.__eq__(validation_0)
    var_4 = validation_0.to_lazy()
    var_5 = validation_0.to_maybe()


def test_case_14():
    bytes_0 = b"\xbb\xf0\x9am\xbe\xea\xce,\xa2;\xbf\xe5l\xd5]UTg+"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.__eq__(validation_0)
    var_2 = validation_0.__eq__(validation_1)
    var_1.to_lazy()
