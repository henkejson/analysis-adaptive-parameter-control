# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bytes_0 = b"b\x94\x13\x96Oh\xd7\x84\x83\x82\xf2\x10\xf1S"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    validation_0 = module_0.Validation(bytes_0, dict_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_either()
    var_2 = validation_0.__eq__(var_0)


def test_case_1():
    none_type_0 = None
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_either()
    var_2 = var_1.to_lazy()
    var_3 = var_2.__eq__(none_type_0)
    var_3.to_lazy()


def test_case_2():
    none_type_0 = None
    str_0 = '|R{FK6dK>"& H^n,>t'
    validation_0 = module_0.Validation(none_type_0, str_0)
    var_0 = validation_0.to_maybe()
    bool_0 = True
    var_1 = var_0.map(validation_0)
    list_0 = [bool_0, bool_0]
    validation_1 = module_0.Validation(list_0, bool_0)
    validation_1.__str__()


def test_case_3():
    str_0 = "BxY:sND|p"
    validation_0 = module_0.Validation(str_0, str_0)


def test_case_4():
    complex_0 = -3112.1 + 396.695938j
    validation_0 = module_0.Validation(complex_0, complex_0)
    validation_0.__str__()


def test_case_5():
    bytes_0 = b"\xc5\xa1jX\xe1\xdd"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.is_fail()
    var_1 = validation_0.to_box()
    var_2 = var_1.__str__()
    validation_1 = module_0.Validation(list_0, var_1)
    var_0.is_success()


def test_case_6():
    bytes_0 = b"b\x13\x96Oh\xd7\x84\x83\x82\xf2\x10\xf1S"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    validation_0 = module_0.Validation(bytes_0, dict_0)
    var_0 = validation_0.__str__()
    validation_0.map(validation_0)


def test_case_7():
    bytes_0 = b""
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    validation_0 = module_0.Validation(bytes_0, dict_0)
    var_0 = validation_0.__str__()
    validation_0.bind(dict_0)


def test_case_8():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.ap(none_type_0)


def test_case_9():
    bytes_0 = b"b\x13\x96Oh\xd7\x84\x83\x82\xf2\x10\xf1S"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    validation_0 = module_0.Validation(bytes_0, dict_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_box()
    var_2 = validation_0.to_either()
    var_3 = validation_0.__eq__(var_0)


def test_case_10():
    bytes_0 = b"b\x13\x96Oh\xd7\x84\x83\x82\xf2\x10\xf1S"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    validation_0 = module_0.Validation(bytes_0, dict_0)
    var_0 = validation_0.__str__()
    validation_1 = module_0.Validation(var_0, dict_0)
    var_1 = validation_1.to_lazy()
    var_2 = var_1.__str__()
    validation_0.bind(var_2)


def test_case_11():
    bytes_0 = b"7Q\xac\xe2iUDJ\x93\x1a\x05\xf4\x06\xee\xc6~"
    str_0 = "\n    All is a Monoid that will combine 2 values of any type using logical conjunction on their coerced Boolean values.\n    "
    validation_0 = module_0.Validation(str_0, bytes_0)
    none_type_0 = None
    var_0 = validation_0.__eq__(bytes_0)
    var_1 = validation_0.to_try()
    validation_1 = module_0.Validation(none_type_0, bytes_0)
    var_2 = validation_0.__str__()
    var_3 = validation_0.to_box()
    var_1.to_lazy()


def test_case_12():
    none_type_0 = None
    list_0 = []
    str_0 = "\n    All is a Monoid that will combine 2 values of any type using logical conjunction on their coerced Boolean values.\n    "
    validation_0 = module_0.Validation(list_0, none_type_0)
    validation_1 = module_0.Validation(str_0, validation_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_1.to_try()


def test_case_13():
    bytes_0 = b"\xc7\x11\xf11\xebe\xf2bvx8"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, bytes_0)
    var_0 = validation_0.__eq__(none_type_0)
    var_1 = validation_0.to_lazy()
    var_2 = var_1.to_try()
    var_0.to_maybe()


def test_case_14():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    validation_0 = module_0.Validation(list_0, none_type_0)
    validation_1 = module_0.Validation(validation_0, none_type_0)
    tuple_0 = (list_0,)
    validation_2 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.__eq__(validation_2)
    var_0.to_try()


def test_case_15():
    set_0 = set()
    none_type_0 = None
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_box()
    var_2 = var_1.to_maybe()
    var_3 = var_2.to_try()
    var_3.bind(none_type_0)


def test_case_16():
    set_0 = set()
    none_type_0 = None
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_box()
    var_2 = validation_0.__str__()
    var_3 = var_1.to_maybe()
    set_0.bind(none_type_0)
