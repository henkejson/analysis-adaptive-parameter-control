# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bytes_0 = b"V\x97\xfc\x9b\x83t\xe3\xea\x95\x007\xd0\xe3\xc8\x15\xa7/w\xccU"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_maybe()
    var_2 = validation_0.__eq__(bytes_0)
    var_3 = validation_0.__str__()
    var_4 = validation_0.to_lazy()


def test_case_1():
    str_0 = "O]\x0cc>I'\rO7"
    list_0 = [str_0]
    validation_0 = module_0.Validation(list_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_lazy()
    var_2 = var_1.to_maybe()


def test_case_2():
    bytes_0 = b"V\x97\xfc\x9b\x83t\xe3\xea\x95\x007\xd0\xe3\xc8\x15\xa7/w\xccU"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_maybe()
    validation_0.bind(bytes_0)


def test_case_3():
    bytes_0 = b"n%!\xf9\x03Cn\xa2\x00O\xc3\xd7\xac`"
    validation_0 = module_0.Validation(bytes_0, bytes_0)


def test_case_4():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.__str__()


def test_case_5():
    complex_0 = 2820.930445 - 91.59402j
    validation_0 = module_0.Validation(complex_0, complex_0)
    validation_0.is_fail()


def test_case_6():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.map(validation_0)


def test_case_7():
    bytes_0 = b"V\x97\xfc\x9b\x83t\xe3\xea\x95\x007\xd0\xe3\xc8\x15\xa7/w\xccU"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_maybe()
    var_2 = module_0.Validation(var_1, bytes_0)
    var_2.ap(validation_0)


def test_case_8():
    bytes_0 = b"\x1fC\x1a\xcda\x95\xb6\x0c\xdb\xc1\x1b\xad2#"
    list_0 = [bytes_0]
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.to_try()


def test_case_9():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_lazy()


def test_case_10():
    bytes_0 = b"V\x97\xfc\x9b\x83t\xe3\xea\x95\x007\xd0\xe3\xc8\x15\xa7/w\xccU"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_maybe()
    var_2 = validation_0.to_try()
    var_3 = var_0.ap(var_2)
    var_2.to_lazy()


def test_case_11():
    bytes_0 = b"V\x97\xfc\x9b\x83t\xe3\xea\x95\x007\xd0\xe3\xc8\x15\xa7/w\xccU"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.__eq__(validation_0)
    var_2 = bytes_0.__eq__(validation_0)
    var_1.to_lazy()


def test_case_12():
    bytes_0 = b"V\x97\xfc\x9b\x83t\xe3\xea\x95\x007\xd0\xe3\xc8\x15\xa7/w\xccU"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.is_success()
    var_1 = validation_0.to_either()
    var_2 = var_1.__eq__(bytes_0)
    var_3 = var_1.to_box()
    var_4 = validation_0.to_lazy()
    var_5 = var_4.to_try()
    var_6 = validation_0.to_try()
    var_7 = var_2.__str__()
    var_8 = validation_0.__eq__(validation_0)
    var_9 = validation_0.__str__()
    var_10 = var_7.__eq__(var_5)
    var_11 = var_1.bind(var_10)
    var_1.is_fail()


def test_case_13():
    bytes_0 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_1 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_1.to_either()
    var_1 = validation_1.to_maybe()
    var_2 = validation_1.__eq__(bytes_0)
    var_3 = validation_1.to_try()
    var_4 = validation_1.__str__()
    var_5 = validation_1.__eq__(validation_1)
    var_6 = var_1.__str__()
    var_7 = var_3.__eq__(bytes_0)
    var_5.is_fail()


def test_case_14():
    bytes_0 = b"T\x0b."
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = module_0.Validation(bytes_0, validation_0)
    var_2 = validation_0.__eq__(var_1)
    var_2.is_success()
