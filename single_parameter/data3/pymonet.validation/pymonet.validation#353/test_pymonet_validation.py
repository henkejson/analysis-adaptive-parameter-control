# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0
import builtins as module_1


def test_case_0():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(none_type_0)
    validation_0.__str__()


def test_case_1():
    str_0 = "e><`TA"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.__eq__(validation_0)
    var_2 = validation_0.to_try()
    var_3 = var_1.__eq__(var_2)
    object_0 = module_1.object()
    var_4 = validation_0.__str__()
    object_0.is_success()


def test_case_2():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.is_success()
    var_1 = validation_0.to_either()
    var_2 = validation_0.is_success()
    var_3 = validation_0.is_fail()
    var_3.to_try()


def test_case_3():
    str_0 = "e><`TA"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.__eq__(validation_0)
    var_2 = validation_0.to_try()
    var_3 = var_1.__eq__(var_2)
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    var_2.is_success()


def test_case_4():
    str_0 = "e><`TA"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.__str__()
    var_2 = validation_0.__eq__(validation_0)
    var_3 = validation_0.to_try()
    var_4 = validation_0.to_either()
    var_1.to_lazy()


def test_case_5():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_6():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.is_fail()


def test_case_7():
    bool_0 = False
    int_0 = 3078
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.map(bool_0)


def test_case_8():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    none_type_0 = None
    int_0 = 1
    validation_0 = module_0.Validation(none_type_0, dict_0)
    validation_0.bind(int_0)


def test_case_9():
    bool_0 = True
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_0.ap(bool_0)


def test_case_10():
    bool_0 = True
    none_type_0 = None
    validation_0 = module_0.Validation(bool_0, none_type_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.to_maybe()
    var_1.map(bool_0)


def test_case_11():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_lazy()
    var_2 = var_1.__str__()
    list_0.to_maybe()


def test_case_12():
    str_0 = "eK>&<`TAA"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.to_lazy()
    var_2 = validation_0.__str__()
    var_3 = var_1.to_try()
    var_2.to_lazy()


def test_case_13():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_1 = module_0.Validation(bool_0, validation_0)
    validation_1.to_try()


def test_case_14():
    none_type_0 = None
    list_0 = []
    bool_0 = True
    validation_0 = module_0.Validation(none_type_0, list_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.__eq__(none_type_0)
    list_1 = [none_type_0, bool_0, bool_0, list_0]
    var_2 = validation_0.to_maybe()
    var_2.ap(list_1)


def test_case_15():
    str_0 = "=@y\\\x0b\taLQT;<aGtjvK8t"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    validation_1 = module_0.Validation(str_0, str_0)
    var_1 = var_0.__str__()
    var_2 = var_0.ap(str_0)
    var_3 = validation_1.to_maybe()
    bool_0 = False
    validation_2 = module_0.Validation(bool_0, bool_0)
    int_0 = -1351
    list_0 = [int_0, int_0]
    validation_3 = module_0.Validation(list_0, list_0)
    var_4 = validation_1.to_maybe()
    var_5 = validation_3.__eq__(validation_2)
    var_5.is_fail()
