# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.__eq__(var_0)
    validation_0.is_success()


def test_case_1():
    str_0 = ";"
    bytes_0 = b"h\xfcM"
    list_0 = []
    validation_0 = module_0.Validation(bytes_0, list_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_try()
    var_1.bind(str_0)


def test_case_2():
    bytes_0 = b"\xd2eq\x95z\n\x8f"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.__str__()
    var_2 = var_0.to_try()
    var_1.to_try()


def test_case_3():
    complex_0 = -1464 - 933.2534j
    set_0 = {complex_0, complex_0, complex_0, complex_0}
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    validation_0 = module_0.Validation(bool_0, dict_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.ap(set_0)


def test_case_4():
    int_0 = 1005
    validation_0 = module_0.Validation(int_0, int_0)


def test_case_5():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.__str__()


def test_case_6():
    int_0 = 957
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.is_fail()


def test_case_7():
    str_0 = "xa!dh"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.map(str_0)


def test_case_8():
    str_0 = "'XmV5,"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.bind(str_0)


def test_case_9():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_1 = module_0.Validation(bool_0, bool_0)
    validation_1.ap(validation_0)


def test_case_10():
    str_0 = ""
    int_0 = -76
    validation_0 = module_0.Validation(int_0, str_0)
    bytes_0 = b"\xd2eq\x95z\n\x8f"
    validation_1 = module_0.Validation(str_0, str_0)
    var_0 = validation_1.__eq__(int_0)
    var_1 = validation_1.is_fail()
    dict_0 = {str_0: bytes_0}
    validation_2 = module_0.Validation(dict_0, bytes_0)
    var_2 = validation_1.to_box()
    var_3 = var_2.to_either()
    var_3.map(var_2)


def test_case_11():
    int_0 = -543
    validation_0 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.to_lazy()
    var_0.is_fail()


def test_case_12():
    str_0 = "2-*\n"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_try()
    var_0.to_try()


def test_case_13():
    int_0 = -543
    validation_0 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.__eq__(validation_0)
    var_2 = var_0.to_try()
    var_1.is_fail()


def test_case_14():
    str_0 = ""
    int_0 = -76
    validation_0 = module_0.Validation(int_0, str_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_lazy()
    bytes_0 = b"\xd2eq\x95z\n\x8f"
    validation_1 = module_0.Validation(str_0, str_0)
    var_2 = validation_1.__eq__(int_0)
    dict_0 = {str_0: bytes_0}
    validation_2 = module_0.Validation(dict_0, bytes_0)
    var_3 = validation_1.to_box()
    bytes_0.map(var_3)


def test_case_15():
    str_0 = ""
    int_0 = -99
    validation_0 = module_0.Validation(int_0, str_0)
    var_0 = validation_0.to_maybe()
    validation_0.bind(int_0)


def test_case_16():
    bytes_0 = b"\xaco\x12\xa4\xce`\x90Lh\x17B\xcb\xcd\x84\xbaW\x8c/k\xb2"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    bytes_1 = b"F\nG\xbf|\xd7\xd1\xcd"
    int_0 = -4611
    tuple_0 = (bytes_1, int_0)
    validation_1 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_1.__eq__(validation_0)
    var_0.to_maybe()
