# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0
import builtins as module_1


def test_case_0():
    str_0 = "\n        Take function and applied this function with monad value and returns function result.\n\n        :params binder: function to apply on monad value\n        :type binder: Function(A) -> Try[B]\n        :returns: for successfully result of binder, othercase copy of self\n        :rtype: Try[B]\n        "
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(str_0)


def test_case_1():
    str_0 = "B+\x0bTjr`1ava"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    validation_1 = module_0.Validation(var_0, var_0)


def test_case_2():
    int_0 = 1
    set_0 = {int_0, int_0, int_0}
    validation_0 = module_0.Validation(int_0, set_0)
    var_0 = validation_0.to_either()


def test_case_3():
    bytes_0 = b"\xc3\xa5\xad\xab\xe50"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_maybe()
    var_2 = validation_0.to_either()
    bytes_1 = b"L\x9a\xfe{k\xe8\x04U\r\xb1\x18\x80"
    validation_1 = module_0.Validation(bytes_1, bytes_1)
    var_3 = validation_1.__str__()
    var_4 = validation_1.to_try()
    var_5 = var_2.__eq__(var_2)
    var_6 = var_1.to_lazy()
    var_7 = var_5.__eq__(var_1)
    var_8 = validation_1.to_box()
    var_9 = validation_0.to_either()
    var_10 = validation_0.to_lazy()
    module_1.object(*var_6)


def test_case_4():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)


def test_case_5():
    float_0 = 4119.499315
    set_0 = {float_0}
    validation_0 = module_0.Validation(set_0, float_0)
    validation_0.is_fail()


def test_case_6():
    bytes_0 = b"TM.\x19"
    complex_0 = 2762.2 - 1906.38681j
    validation_0 = module_0.Validation(complex_0, complex_0)
    validation_0.map(bytes_0)


def test_case_7():
    none_type_0 = None
    str_0 = "PC%6Pf#{k\nU^&S@i"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    validation_0.bind(none_type_0)


def test_case_8():
    float_0 = -464.0
    bytes_0 = b"j/\x9e\xeb\x1bX\xffc9/\xf8\xe9b\xa5\xf8\xdd9"
    tuple_0 = (bytes_0,)
    set_0 = {tuple_0, bytes_0, bytes_0, tuple_0}
    validation_0 = module_0.Validation(set_0, bytes_0)
    validation_0.ap(float_0)


def test_case_9():
    bytes_0 = b"cDv\xd2\x08\xcc\x14\x89"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_box()


def test_case_10():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    str_0 = ".1TON\x0c<@5HS72:B"
    tuple_0 = (bool_0, dict_0, str_0)
    none_type_0 = None
    validation_0 = module_0.Validation(tuple_0, none_type_0)
    var_0 = validation_0.to_lazy()


def test_case_11():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    none_type_0 = None
    validation_1 = module_0.Validation(validation_0, none_type_0)
    var_0 = validation_1.to_lazy()
    var_1 = var_0.to_box()
    var_2 = var_0.bind(none_type_0)
    var_1.to_box()


def test_case_12():
    bytes_0 = b"\xe5\xa7\xbc\xf2"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_try()


def test_case_13():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_maybe()
    var_0.is_fail()


def test_case_14():
    bytes_0 = b"L\x9a\xfe{k\xe8\x04U\r\xb1\x0c\xa2"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_try()
    var_2 = validation_0.__eq__(validation_0)
    var_3 = validation_0.to_lazy()
    var_1.is_fail()


def test_case_15():
    bytes_0 = b"\xc3\xa5\xad\xab\xe50"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_1 = module_0.Validation(bytes_0, var_0)
    var_1 = validation_1.__eq__(validation_0)
    var_0.to_maybe()


def test_case_16():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_either()
    var_0.is_fail()


def test_case_17():
    none_type_0 = None
    dict_0 = {}
    tuple_0 = ()
    validation_0 = module_0.Validation(dict_0, tuple_0)
    var_0 = validation_0.__str__()
    var_1 = var_0.__str__()
    var_1.ap(none_type_0)
