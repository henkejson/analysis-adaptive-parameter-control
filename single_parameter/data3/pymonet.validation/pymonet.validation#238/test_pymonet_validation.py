# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_0.bind(validation_0)


def test_case_1():
    none_type_0 = None
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(none_type_0)
    var_0.is_fail()


def test_case_2():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    bool_1 = True
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.__eq__(bool_0)
    var_2 = bool_1.__str__()
    validation_1 = module_0.Validation(var_2, var_2)
    var_3 = validation_1.to_maybe()
    var_4 = var_2.__eq__(var_0)
    var_5 = validation_1.__eq__(validation_0)
    var_6 = validation_1.__str__()
    var_7 = validation_1.__eq__(var_4)
    validation_2 = module_0.Validation(var_5, validation_1)
    var_6.to_maybe()


def test_case_3():
    bool_0 = True
    var_0 = bool_0.__str__()
    validation_0 = module_0.Validation(var_0, var_0)
    var_1 = validation_0.to_either()
    validation_1 = module_0.Validation(var_1, var_1)


def test_case_4():
    bool_0 = True
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_maybe()
    validation_1 = module_0.Validation(var_0, validation_0)
    validation_1.map(bool_0)


def test_case_5():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)


def test_case_6():
    none_type_0 = None
    bytes_0 = b"\xff:\x08Z@M\xee\xea>b\x84[\xf5{&2\xb3\xb0"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_try()
    var_1 = var_0.bind(none_type_0)


def test_case_7():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.is_fail()


def test_case_8():
    none_type_0 = None
    int_0 = -1043
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.map(none_type_0)


def test_case_9():
    bytes_0 = b"7\xf2\xda\x81\xd5"
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.ap(bytes_0)


def test_case_10():
    bytes_0 = b"e\xe4\xb5\x92I\xc8e\x81\xdc\xdddi\xd4\xb2\x97\xb2*T"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_box()
    var_0.bind(bytes_0)


def test_case_11():
    complex_0 = 765 - 994.1j
    none_type_0 = None
    validation_0 = module_0.Validation(complex_0, none_type_0)
    var_0 = validation_0.to_lazy()
    validation_0.to_either()


def test_case_12():
    none_type_0 = None
    complex_0 = 3983.421 + 2664.087715j
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_box()
    var_2 = var_1.__str__()
    var_3 = var_2.__eq__(none_type_0)
    var_3.bind(complex_0)


def test_case_13():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.__str__()
    var_0.to_box()


def test_case_14():
    bool_0 = True
    var_0 = bool_0.__str__()
    validation_0 = module_0.Validation(var_0, var_0)
    var_1 = validation_0.to_maybe()
    var_2 = validation_0.to_either()
    validation_1 = module_0.Validation(var_2, var_2)


def test_case_15():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_lazy()
    var_2 = var_1.to_either()
    var_3 = var_2.to_maybe()
