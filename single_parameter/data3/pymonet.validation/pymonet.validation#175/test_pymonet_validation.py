# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0
import builtins as module_1


def test_case_0():
    bytes_0 = b"\x87KH\xf8FdU\xdf\x80p\x07l\x02\xa0\xfa"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, bytes_0)
    var_0 = validation_0.__eq__(none_type_0)
    var_1 = validation_0.to_maybe()
    var_2 = validation_0.to_either()
    var_3 = validation_0.__str__()


def test_case_1():
    bytes_0 = b"\x87KH\xf8FdU\xdf\x80p\x07l\x02\xa0\xfa"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_maybe()
    var_2 = validation_0.to_either()
    var_3 = var_0.to_box()
    var_4 = validation_0.__str__()
    validation_1 = module_0.Validation(var_2, bytes_0)


def test_case_2():
    bytes_0 = b"KH\xf8FBU\xdf\x80p\x07l\x02\xfa"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.to_either()
    var_2 = module_1.object()


def test_case_3():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)


def test_case_4():
    bytes_0 = b"\x87KH\xf8FdU\xdf\x80p\x07l\x02\xa0\xfa"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, bytes_0)
    var_0 = validation_0.is_fail()
    var_1 = validation_0.to_maybe()
    validation_0.map(var_0)


def test_case_5():
    bytes_0 = b"\x87KH\xf8FdU\xdf\x80p\x07l\x02\xa0\xfa"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, bytes_0)
    var_0 = validation_0.__eq__(none_type_0)
    var_1 = validation_0.to_either()
    validation_0.map(validation_0)


def test_case_6():
    float_0 = -2505.0597
    bool_0 = True
    none_type_0 = None
    validation_0 = module_0.Validation(bool_0, none_type_0)
    validation_0.bind(float_0)


def test_case_7():
    str_0 = ""
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_maybe()
    var_2 = var_1.to_either()
    var_3 = var_0.to_box()
    validation_0.ap(var_1)


def test_case_8():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_box()


def test_case_9():
    bool_0 = False
    str_0 = "\n        Applies the function inside the Either[A] structure to another applicative type.\n\n        :param applicative: applicative contains function\n        :type applicative: Either[B]\n        :returns: new Either with result of contains function\n        :rtype: Either[A(B)]\n        "
    validation_0 = module_0.Validation(bool_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_maybe()
    var_2 = var_0.to_maybe()
    var_3 = validation_0.to_lazy()
    var_0.is_fail()


def test_case_10():
    bytes_0 = b"\x87KH\xf8FdU\xdf\x80p\x07l\x02\xa0\xfa"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, bytes_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.to_lazy()
    var_2 = validation_0.to_maybe()
    var_3 = var_1.to_either()
    var_4 = var_0.to_either()
    var_5 = var_2.__str__()
    var_6 = var_3.to_maybe()


def test_case_11():
    int_0 = 2919
    int_1 = 3088
    set_0 = set()
    tuple_0 = (int_0, int_0, int_1, set_0)
    list_0 = [tuple_0]
    validation_0 = module_0.Validation(list_0, set_0)
    var_0 = validation_0.to_try()
    var_0.is_fail()


def test_case_12():
    none_type_0 = None
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_maybe()
    var_0.ap(none_type_0)


def test_case_13():
    bytes_0 = b"\x87KH\xf8FdU\xdf\x80p\x07l\x02\xa0\xfa"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, bytes_0)
    validation_1 = module_0.Validation(validation_0, validation_0)
    var_0 = validation_1.__eq__(validation_0)
    var_1 = validation_0.to_either()
    validation_1.to_maybe()


def test_case_14():
    bytes_0 = b"\x87KH\xf8FdU\xdf\x80p\x07l\x02\xa0\xfa"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_either()
    var_2 = validation_0.to_maybe()
    var_0.to_either()


def test_case_15():
    str_0 = ""
    bytes_0 = b"\x87KH\xf8FdU\xdf\x80`^p\x07l\x02\xa0\xfa"
    none_type_0 = None
    validation_0 = module_0.Validation(bytes_0, str_0)
    var_0 = validation_0.__eq__(none_type_0)
    var_1 = validation_0.__str__()
    var_0.to_maybe()
