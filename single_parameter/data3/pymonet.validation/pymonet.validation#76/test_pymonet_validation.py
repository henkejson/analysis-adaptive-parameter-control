# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_0.map(var_0)


def test_case_1():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(bool_0)
    validation_1 = module_0.Validation(bool_0, bool_0)
    var_1 = validation_1.to_lazy()


def test_case_2():
    bytes_0 = b"\xfa\xf6\xb8\xe6\xeb\x99\xa5\x88\xb0\xeb\xd4\xbcR\xbf\xc0"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    validation_0 = module_0.Validation(dict_0, bytes_0)
    var_0 = validation_0.to_try()
    var_1 = validation_0.to_maybe()
    var_2 = validation_0.__str__()
    bytes_0.is_success()


def test_case_3():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0]
    validation_0 = module_0.Validation(list_0, tuple_0)
    var_0 = validation_0.to_either()
    var_0.is_fail()


def test_case_4():
    bytes_0 = b"\xfa\xf6\xb8\xe6\xeb\x99\xa5\x88\xb0\xeb\xd4\xbcR\xbf\xc0"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    validation_0 = module_0.Validation(dict_0, bytes_0)
    var_0 = validation_0.__eq__(bytes_0)
    var_1 = validation_0.to_either()
    var_2 = validation_0.to_maybe()
    var_3 = validation_0.__str__()
    var_1.is_success()


def test_case_5():
    bytes_0 = b'\xf4\x1a"%'
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.__str__()
    var_1.to_try()


def test_case_6():
    bytes_0 = b"E"
    validation_0 = module_0.Validation(bytes_0, bytes_0)


def test_case_7():
    bytes_0 = b"E"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_try()


def test_case_8():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    validation_0 = module_0.Validation(list_0, bool_0)
    validation_0.is_fail()


def test_case_9():
    complex_0 = -905.681544 - 21.55j
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    validation_0.bind(complex_0)


def test_case_10():
    int_0 = 1329
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    none_type_0 = None
    validation_0 = module_0.Validation(dict_0, int_0)
    validation_0.ap(none_type_0)


def test_case_11():
    str_0 = ";1gMM8[d~}wK'G"
    set_0 = {str_0}
    validation_0 = module_0.Validation(set_0, str_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.to_either()
    bytes_0 = b"\t\x89\x1d\xa0B\xba\xcd%\xbf5"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    validation_1 = module_0.Validation(list_0, bytes_0)
    var_2 = validation_1.to_lazy()
    var_3 = validation_1.to_lazy()


def test_case_12():
    str_0 = 'K.7"wgU#h'
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.to_lazy()
    var_2 = validation_0.is_fail()
    var_3 = var_1.to_try()
    var_4 = var_1.__str__()
    var_4.to_either()


def test_case_13():
    float_0 = 1035.5755
    validation_0 = module_0.Validation(float_0, float_0)
    bool_0 = True
    int_0 = 603
    none_type_0 = None
    validation_1 = module_0.Validation(int_0, none_type_0)
    var_0 = validation_0.__eq__(validation_1)
    validation_1.map(bool_0)


def test_case_14():
    bool_0 = True
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0}
    validation_0 = module_0.Validation(set_0, tuple_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.is_success()
    var_2 = var_1.__eq__(bool_0)
    var_3 = var_0.to_either()
    bytes_0 = b"v1C"
    bytes_1 = b"\x0e\x91\xed\x90\xc9\xdc\xd1\x0el\n\xd0\xcd\x82F\xfbM_"
    none_type_0 = None
    validation_1 = module_0.Validation(bytes_1, none_type_0)
    validation_1.ap(bytes_0)


def test_case_15():
    bytes_0 = b"\x05.Q\x0e\xb3\x15u"
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.__str__()
    var_0.bind(bytes_0)
