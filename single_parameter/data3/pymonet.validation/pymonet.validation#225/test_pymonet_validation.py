# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    float_0 = -1118.86
    bool_0 = False
    none_type_0 = None
    bool_1 = True
    list_0 = [float_0, bool_1, bool_1, none_type_0]
    validation_0 = module_0.Validation(float_0, bool_0)
    var_0 = validation_0.__eq__(float_0)
    var_0.ap(list_0)


def test_case_1():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    set_0 = set()
    tuple_0 = (bool_0, list_0, set_0)
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.__str__()
    validation_1 = module_0.Validation(var_0, dict_0)
    validation_1.ap(tuple_0)


def test_case_2():
    str_0 = "\n        Take mapper function and return new instance of Right with mapped value.\n\n        :param mapper: function to apply on Right value\n        :type mapper: Function(A) -> B\n        :returns: new Right with result of mapper\n        :rtype: Right[B]\n        "
    list_0 = [str_0, str_0]
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.is_success()
    var_1 = validation_0.__eq__(validation_0)
    var_2 = validation_0.__str__()
    var_2.to_try()


def test_case_3():
    bytes_0 = b"P\xf9\xd8\xc8\xf1\xa8\xf6\xd0\x91L\x9c,z\x07\xbc\xdf\x05\xf01"
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_maybe()
    var_0.bind(bytes_0)


def test_case_4():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_5():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.to_maybe()


def test_case_6():
    bytes_0 = b"wp\x8f8\xf1L\xcfgi^\xaf\xbf'\xd1|\xd9\xa3\xfb"
    set_0 = {bytes_0, bytes_0, bytes_0}
    validation_0 = module_0.Validation(set_0, set_0)
    bytes_1 = b"S\xb2Z\xa5\xd7\x06\xb8\x17\x03\x16"
    var_0 = validation_0.to_try()
    none_type_0 = None
    validation_1 = module_0.Validation(bytes_1, none_type_0)
    validation_1.is_fail()


def test_case_7():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.map(validation_0)


def test_case_8():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.bind(none_type_0)


def test_case_9():
    int_0 = -1400
    str_0 = '?o"HCi=N\t6b'
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.__eq__(int_0)


def test_case_10():
    str_0 = "\"GLpu\n'y_"
    list_0 = [str_0]
    validation_0 = module_0.Validation(list_0, str_0)
    var_0 = validation_0.to_lazy()
    list_0.to_either()


def test_case_11():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    bool_1 = True
    set_0 = {bool_1}
    validation_0 = module_0.Validation(bool_1, set_0)
    var_0 = validation_0.is_success()
    validation_1 = module_0.Validation(var_0, set_0)
    var_1 = validation_1.to_lazy()
    var_2 = var_1.to_maybe()
    var_2.ap(list_0)


def test_case_12():
    bytes_0 = b"|]\x99\xd2"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_maybe()
    var_2 = validation_0.to_box()
    var_3 = var_1.bind(var_1)


def test_case_13():
    str_0 = "+v`BF%oDd>)CBKV"
    str_1 = "/}sVehM,~^s"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.map(var_0)
    var_2 = var_1.to_lazy()
    var_3 = var_2.ap(str_1)
    var_4 = var_3.map(str_0)
    var_4.to_maybe()


def test_case_14():
    str_0 = "+v`BF%oDd>)CBKV"
    list_0 = [str_0, str_0]
    var_0 = module_0.Validation(str_0, list_0)
    var_1 = var_0.to_maybe()


def test_case_15():
    str_0 = ""
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_maybe()
    var_2 = validation_0.to_box()


def test_case_16():
    str_0 = "+v`BF%oDd>)CBKV"
    list_0 = [str_0, str_0]
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.is_success()
    none_type_0 = None
    var_1 = validation_0.__eq__(none_type_0)
    var_2 = validation_0.is_success()
    var_3 = validation_0.__eq__(validation_0)
    validation_1 = module_0.Validation(var_2, str_0)
    var_4 = validation_1.to_lazy()
    var_5 = validation_1.is_success()
    var_6 = validation_0.__eq__(validation_1)
    var_7 = validation_1.to_try()
    var_8 = var_4.to_box()
    var_9 = validation_1.to_either()
    var_10 = var_7.__str__()
    var_1.to_try()
