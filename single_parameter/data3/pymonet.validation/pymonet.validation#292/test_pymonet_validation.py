# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bytes_0 = b"\xaf\xbf^\xce\x15\x19\xbfCB\xb3J\xf4\xa4\x9b\x8f\xabb\xe8]]"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)
    var_0.to_maybe()


def test_case_1():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_1 = module_0.Validation(validation_0, validation_0)
    var_0 = validation_1.__eq__(validation_0)
    var_0.to_either()


def test_case_2():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_either()


def test_case_3():
    str_0 = "0x\x0c.{t4c<c"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    validation_0.map(var_0)


def test_case_4():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_maybe()
    validation_1 = module_0.Validation(list_0, list_0)
    var_1 = validation_0.__eq__(validation_0)
    var_1.to_either()


def test_case_5():
    bytes_0 = b"\xaf\xbf^\xce\x15\x19\xbfCB\xb3J\xf4\xa4\x9b\x8f\xabb\xe8]]"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_1 = module_0.Validation(validation_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_2 = module_0.Validation(validation_1, bytes_0)
    var_1 = validation_1.to_maybe()
    var_2 = validation_1.__str__()


def test_case_6():
    bytes_0 = b"\xaf\xbf^\xce\x15\x19\xbfCB\xb3J\xf4\xa4\x9b\x8f\xabb\xe8]]"
    bytes_0.to_either()


def test_case_7():
    bytes_0 = b"\xaf\xbf^\xce\x15\x19\xbfCB\xb3J\xf4\xa4\x9b\x8f\xabb\xe8]]"
    validation_0 = module_0.Validation(bytes_0, bytes_0)


def test_case_8():
    str_0 = "\n        :param semigroup: other semigroup to concat\n        :type semigroup: Sum[B]\n        :returns: new Sum with sum of concat semigroups values\n        :rtype: Sum[A]\n        "
    bytes_0 = b"H6\x92\x82NW\xa6g\x8e\x90\xdb\xc2mX\xc8o"
    set_0 = {str_0, bytes_0, str_0, bytes_0}
    validation_0 = module_0.Validation(set_0, bytes_0)
    validation_1 = module_0.Validation(str_0, set_0)
    var_0 = validation_0.to_box()
    none_type_0 = None
    var_1 = validation_1.__eq__(none_type_0)
    var_2 = validation_0.is_fail()
    validation_2 = module_0.Validation(validation_1, validation_0)
    var_3 = validation_0.__str__()


def test_case_9():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.map(validation_0)


def test_case_10():
    set_0 = set()
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0]
    validation_0 = module_0.Validation(list_0, list_0)
    validation_0.bind(set_0)


def test_case_11():
    str_0 = "X-Z@/+mjySb5v"
    bytes_0 = b"H6\x92\x82NW\xa6g\x8e\x90\xdb\xc2mX\xc8o"
    set_0 = {str_0, bytes_0, str_0, bytes_0}
    validation_0 = module_0.Validation(set_0, bytes_0)
    validation_1 = module_0.Validation(str_0, set_0)
    var_0 = validation_0.__str__()
    var_1 = validation_1.to_either()
    validation_1.ap(str_0)


def test_case_12():
    bytes_0 = b"\xbb\x15B$?\x8dg\x80\\,\x0f\xad\x7f"
    str_0 = "hRU7i/7[4Uz)!\t>3"
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.__eq__(str_0)
    var_1.bind(bytes_0)


def test_case_13():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_box()
    var_2 = var_1.to_maybe()
    var_2.is_fail()


def test_case_14():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_0.to_try()


def test_case_15():
    bytes_0 = b"\xaf\xbf^\xce\x15\x19\xbfCB\xb3J\xf4\xa4\x9b\x8f\xabb\xe8]]"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_either()
    var_2 = validation_0.__str__()


def test_case_16():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.is_success()
    var_2 = validation_0.__str__()
