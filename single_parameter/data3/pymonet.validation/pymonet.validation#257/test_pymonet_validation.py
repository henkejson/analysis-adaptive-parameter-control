# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_0.map(none_type_0)


def test_case_1():
    none_type_0 = None
    bytes_0 = b"\x1f3\xb8~?\x1d\xb0(\xdb\xb2>\xdeJ\xd2g\xccY"
    none_type_1 = None
    validation_0 = module_0.Validation(none_type_1, none_type_1)
    var_0 = validation_0.__eq__(bytes_0)
    var_1 = var_0.__str__()
    var_2 = var_1.__eq__(none_type_0)
    var_2.to_either()


def test_case_2():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.is_fail()
    var_1 = validation_0.is_success()
    var_2 = validation_0.to_lazy()
    var_3 = var_2.map(var_2)
    var_4 = validation_0.is_fail()
    validation_1 = module_0.Validation(var_2, var_2)
    var_5 = validation_0.__str__()
    validation_2 = module_0.Validation(set_0, set_0)
    var_5.is_success()


def test_case_3():
    none_type_0 = None
    none_type_1 = None
    str_0 = "K/\r'"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    var_1 = var_0.__eq__(none_type_1)
    var_1.map(none_type_0)


def test_case_4():
    bytes_0 = b"2\\\x0e\x1c>N\x8e\x95\x1e\x93"
    tuple_0 = (bytes_0,)
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    validation_0 = module_0.Validation(bool_0, set_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.__eq__(tuple_0)


def test_case_5():
    tuple_0 = ()
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, tuple_0)
    var_0 = validation_0.to_maybe()
    var_0.ap(none_type_0)


def test_case_6():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0, none_type_0, none_type_0}
    validation_0 = module_0.Validation(none_type_0, set_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.is_success()
    var_2 = validation_0.to_maybe()
    var_3 = var_1.__str__()
    var_3.to_either()


def test_case_7():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)


def test_case_8():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.to_try()


def test_case_9():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_lazy()
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    validation_1.is_fail()


def test_case_10():
    bool_0 = False
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.map(bool_0)


def test_case_11():
    str_0 = ""
    bool_0 = True
    bool_1 = False
    validation_0 = module_0.Validation(bool_0, bool_1)
    validation_0.bind(str_0)


def test_case_12():
    bytes_0 = b"\x9ah\x01\r\x90\xaf\x1fT\nM"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_box()


def test_case_13():
    int_0 = 1
    str_0 = "m"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_box()
    var_2 = var_1.to_maybe()
    var_2.map(int_0)


def test_case_14():
    list_0 = []
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, list_0)
    validation_0.ap(none_type_0)


def test_case_15():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_1 = module_0.Validation(none_type_0, var_0)
    var_1 = validation_0.__eq__(validation_1)
    var_1.to_lazy()


def test_case_16():
    str_0 = "\n        Take function, store it and call with Task value during calling fork function.\n        Return result of called.\n\n        :param fn: mapper function\n        :type fn: Function(value) -> Task[reject, mapped_value]\n        :returns:  new Task with mapper resolve attribute\n        :rtype: Task[reject, mapped_value]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_lazy()
    tuple_0 = ()
    validation_1 = module_0.Validation(tuple_0, tuple_0)
    var_1 = validation_1.to_either()
    bool_0 = True
    validation_2 = module_0.Validation(bool_0, bool_0)
    validation_2.__str__()
