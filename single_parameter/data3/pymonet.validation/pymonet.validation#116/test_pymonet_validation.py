# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    str_0 = "6\"hdU\ndgfdyh3'z\x0c"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.__eq__(validation_0)


def test_case_1():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(none_type_0)
    var_0.map(none_type_0)


def test_case_2():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.__str__()
    dict_0.ap(dict_0)


def test_case_3():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_maybe()


def test_case_4():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)


def test_case_5():
    int_0 = 0
    bool_0 = True
    tuple_0 = (int_0, bool_0)
    bool_1 = True
    validation_0 = module_0.Validation(bool_1, bool_1)
    var_0 = validation_0.__eq__(tuple_0)
    str_0 = "\n        Transform Lazy into successful Validation with constructor_fn result.\n\n        :returns: successfull Validation monad with previous value\n        :rtype: Validation[A, []]\n        "
    validation_1 = module_0.Validation(str_0, str_0)
    var_1 = validation_1.to_try()
    validation_0.is_fail()


def test_case_6():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.map(validation_0)


def test_case_7():
    bytes_0 = b"\x82\xc3\x999\xd2\xbc\xb9\xd1v\x111\x02\xe7p"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    tuple_0 = (bytes_0, bytes_0, dict_0, bytes_0)
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.bind(tuple_0)


def test_case_8():
    bool_0 = False
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.ap(bool_0)


def test_case_9():
    str_0 = "6\"hdU\ndgfdyh3'z\x0c"
    validation_0 = module_0.Validation(str_0, str_0)
    none_type_0 = None
    var_0 = validation_0.__eq__(validation_0)
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    bool_0 = True
    var_1 = validation_1.__eq__(bool_0)
    validation_2 = module_0.Validation(str_0, validation_1)
    var_2 = validation_0.__str__()
    var_3 = validation_0.to_box()
    var_4 = var_3.to_maybe()


def test_case_10():
    int_0 = -3206
    validation_0 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.to_lazy()


def test_case_11():
    str_0 = "6\"hdU\ndgfdyh3'z\x0c"
    list_0 = [str_0, str_0, str_0, str_0]
    validation_0 = module_0.Validation(list_0, str_0)
    var_0 = validation_0.to_lazy()
    validation_1 = module_0.Validation(str_0, str_0)
    var_1 = validation_1.__eq__(validation_1)
    validation_2 = module_0.Validation(var_1, var_1)
    var_2 = var_0.to_try()
    var_3 = var_1.__str__()
    var_4 = validation_0.to_try()
    var_5 = validation_0.is_fail()
    var_5.bind(var_3)


def test_case_12():
    str_0 = "\n        Transform Lazy into successful Validation with constructor_fn result.\n\n        :returns: successfull Validation monad with previous value\n        :rtype: Validation[A, []]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_try()
    var_1 = validation_0.__str__()
    var_2 = validation_0.__eq__(str_0)
    var_2.to_maybe()


def test_case_13():
    str_0 = "6\"hdU\ndgfdyh3'z\x0c"
    list_0 = [str_0, str_0, str_0, str_0]
    validation_0 = module_0.Validation(list_0, str_0)
    var_0 = validation_0.to_lazy()
    validation_1 = module_0.Validation(str_0, str_0)
    none_type_0 = None
    var_1 = validation_1.__eq__(validation_1)
    validation_2 = module_0.Validation(none_type_0, none_type_0)
    bool_0 = True
    var_2 = validation_2.__eq__(bool_0)
    validation_3 = module_0.Validation(str_0, validation_0)
    var_3 = var_1.__eq__(validation_2)
    var_4 = validation_0.to_maybe()
    var_5 = var_4.__str__()
    validation_4 = module_0.Validation(var_3, str_0)


def test_case_14():
    str_0 = "6\"hdU\ndgfdyh3'z\x0c"
    list_0 = [str_0, str_0, str_0, str_0]
    validation_0 = module_0.Validation(list_0, str_0)
    var_0 = validation_0.to_lazy()
    validation_1 = module_0.Validation(str_0, str_0)
    none_type_0 = None
    var_1 = validation_1.__eq__(validation_1)
    validation_2 = module_0.Validation(none_type_0, none_type_0)
    var_2 = validation_2.__eq__(validation_0)
    validation_3 = module_0.Validation(validation_2, list_0)
    validation_4 = module_0.Validation(str_0, var_0)
    validation_4.__str__()


def test_case_15():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.__str__()
    var_0.to_either()


def test_case_16():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_either()
    var_0.to_either()
