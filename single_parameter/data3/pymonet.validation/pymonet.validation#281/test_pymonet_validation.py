# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import builtins as module_0
import pymonet.validation as module_1


def test_case_0():
    none_type_0 = None
    object_0 = module_0.object()
    validation_0 = module_1.Validation(none_type_0, object_0)
    var_0 = validation_0.__eq__(none_type_0)
    validation_0.to_try()


def test_case_1():
    str_0 = "5+"
    none_type_0 = None
    validation_0 = module_1.Validation(none_type_0, str_0)
    var_0 = validation_0.__str__()
    var_0.is_fail()


def test_case_2():
    bytes_0 = b"\x92\xc1\xf3"
    validation_0 = module_1.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_0.is_fail()


def test_case_3():
    bytes_0 = b"\x92\xc1\xf3"
    var_0 = module_1.Validation(bytes_0, bytes_0)


def test_case_4():
    bool_0 = True
    validation_0 = module_1.Validation(bool_0, bool_0)
    validation_0.is_fail()


def test_case_5():
    str_0 = "\n        Transform Box into not empty Maybe.\n\n        :returns: non empty Maybe monad with previous value\n        :rtype: Maybe[A]\n        "
    bytes_0 = b"\xba\xf7\x1c\xa7"
    tuple_0 = (str_0, str_0, bytes_0, bytes_0)
    int_0 = -813
    none_type_0 = None
    validation_0 = module_1.Validation(int_0, none_type_0)
    validation_0.map(tuple_0)


def test_case_6():
    float_0 = -94.931462
    none_type_0 = None
    validation_0 = module_1.Validation(none_type_0, none_type_0)
    validation_0.bind(float_0)


def test_case_7():
    none_type_0 = None
    validation_0 = module_1.Validation(none_type_0, none_type_0)
    validation_0.ap(none_type_0)


def test_case_8():
    bytes_0 = b"68\xbd\x0f\xbc\x1a\x85\x1e#\xfa\x81\xa5g"
    validation_0 = module_1.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.to_try()
    var_1.to_lazy()


def test_case_9():
    int_0 = -5694
    validation_0 = module_1.Validation(int_0, int_0)
    var_0 = validation_0.to_lazy()


def test_case_10():
    bool_0 = True
    list_0 = [bool_0]
    validation_0 = module_1.Validation(bool_0, bool_0)
    validation_1 = module_1.Validation(list_0, bool_0)
    bytes_0 = b"\x92\xc1\xf3"
    var_0 = validation_1.to_lazy()
    var_1 = var_0.to_maybe()
    validation_2 = module_1.Validation(bytes_0, bytes_0)
    validation_3 = module_1.Validation(bool_0, list_0)
    var_2 = validation_2.to_maybe()
    var_2.is_fail()


def test_case_11():
    bytes_0 = b"q)\xb9"
    none_type_0 = None
    validation_0 = module_1.Validation(none_type_0, bytes_0)
    var_0 = validation_0.to_maybe()
    validation_1 = validation_0.to_either()
    var_1 = validation_1.__eq__(bytes_0)
    bool_0 = False
    var_2 = validation_1.bind(none_type_0)
    validation_2 = module_1.Validation(bool_0, bool_0)
    var_3 = validation_2.__eq__(bool_0)
    var_3.to_try()


def test_case_12():
    none_type_0 = None
    object_0 = module_0.object()
    validation_0 = module_1.Validation(none_type_0, object_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_0.to_try()


def test_case_13():
    int_0 = 3
    tuple_0 = ()
    validation_0 = module_1.Validation(int_0, tuple_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_try()
    var_1.ap(var_1)


def test_case_14():
    bytes_0 = b"\xa0\xc9\nu\xbbMx\xd09\x97\x98-\xae\x92\x85\x05"
    none_type_0 = None
    validation_0 = module_1.Validation(none_type_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.to_maybe()
    validation_1 = module_1.Validation(none_type_0, none_type_0)
    var_2 = validation_0.to_try()
    var_3 = validation_1.__eq__(bytes_0)
    var_4 = var_0.__str__()
    var_5 = validation_1.__eq__(validation_0)
    var_6 = validation_0.is_fail()
    var_4.to_lazy()


def test_case_15():
    bytes_0 = b""
    none_type_0 = None
    validation_0 = module_1.Validation(none_type_0, bytes_0)
    var_0 = validation_0.to_maybe()
    validation_1 = module_1.Validation(none_type_0, none_type_0)
    var_1 = validation_0.to_try()
    var_2 = validation_1.__eq__(bytes_0)
    var_3 = validation_0.__str__()
    var_4 = validation_0.__eq__(validation_0)
    validation_1.is_fail()
