# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0
import builtins as module_1


def test_case_0():
    str_0 = "tSFmX9FfA7N>6ZLX<"
    none_type_0 = None
    bool_0 = False
    none_type_1 = None
    validation_0 = module_0.Validation(bool_0, none_type_1)
    var_0 = validation_0.__eq__(none_type_0)
    var_0.bind(str_0)


def test_case_1():
    complex_0 = 1357 - 3072.4576j
    validation_0 = module_0.Validation(complex_0, complex_0)
    str_0 = '|X4"\x0ccA: \\?'
    validation_1 = module_0.Validation(str_0, str_0)
    var_0 = validation_1.to_either()
    var_0.is_fail()


def test_case_2():
    bool_0 = False
    tuple_0 = ()
    validation_0 = module_0.Validation(bool_0, tuple_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.is_fail()
    var_2 = validation_0.to_maybe()
    var_3 = var_0.to_box()
    var_4 = validation_0.__str__()
    var_5 = var_2.to_box()
    var_6 = var_4.__eq__(validation_0)
    var_2.bind(var_4)


def test_case_3():
    bytes_0 = b"\xaf\xf2\x80?\xf0\xfa\xf0\x81\xf4\xbbO\xefHY\x06"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_box()
    var_1.is_fail()


def test_case_4():
    tuple_0 = ()
    var_0 = module_0.Validation(tuple_0, tuple_0)


def test_case_5():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.to_maybe()


def test_case_6():
    bytes_0 = b"cvZ\xfddY\xd4\xba1\xf5"
    bytes_1 = b"\xb9\xbaw \xb9\xbf"
    validation_0 = module_0.Validation(bytes_1, bytes_1)
    var_0 = validation_0.is_fail()
    var_0.map(bytes_0)


def test_case_7():
    str_0 = "\nevP"
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.map(str_0)


def test_case_8():
    object_0 = module_1.object()
    str_0 = "\n        Transform Box into Validation.\n\n        :returns: failed Validation monad with previous value as error\n        :rtype: Validation[None, [A]]\n        "
    str_1 = ")eVb$}l>R"
    validation_0 = module_0.Validation(str_1, str_1)
    validation_0.bind(str_0)


def test_case_9():
    object_0 = module_1.object()
    bytes_0 = b'i$<lR\xee\x80W\x90h\xa6q\xa0Y,\x8by\xf8"V'
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    validation_0 = module_0.Validation(dict_0, dict_0)
    validation_0.ap(object_0)


def test_case_10():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.to_try()
    none_type_0 = None
    validation_1 = module_0.Validation(var_1, var_0)
    var_2 = validation_1.__eq__(none_type_0)
    var_0.bind(var_0)


def test_case_11():
    float_0 = 950.681
    none_type_0 = None
    validation_0 = module_0.Validation(float_0, none_type_0)
    var_0 = validation_0.to_lazy()
    validation_1 = module_0.Validation(var_0, none_type_0)
    validation_1.to_try()


def test_case_12():
    bool_0 = False
    none_type_0 = None
    validation_0 = module_0.Validation(bool_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_maybe()
    var_1.to_maybe()


def test_case_13():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    none_type_0 = None
    validation_0 = module_0.Validation(set_0, none_type_0)
    validation_0.to_try()


def test_case_14():
    complex_0 = 1357 - 3072.4576j
    validation_0 = module_0.Validation(complex_0, complex_0)
    str_0 = '|X4"\x0ccA: \\?'
    validation_1 = module_0.Validation(str_0, str_0)
    var_0 = validation_1.__eq__(validation_0)
    var_0.to_either()


def test_case_15():
    bool_0 = False
    tuple_0 = ()
    none_type_0 = None
    validation_0 = module_0.Validation(bool_0, tuple_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.is_fail()
    var_2 = validation_0.to_maybe()
    var_3 = var_0.to_box()
    var_4 = module_0.Validation(var_3, none_type_0)
    var_5 = var_2.to_box()
    none_type_1 = None
    validation_1 = module_0.Validation(var_3, none_type_1)
    var_6 = var_4.__eq__(validation_1)
    var_2.bind(var_4)


def test_case_16():
    bool_0 = False
    str_0 = "\n        Call success_callback function with monad value when monad is not successfully.\n\n        :params fail_callback: function to apply with monad value.\n        :type fail_callback: Function(A)\n        :returns: self\n        :rtype: Try[A]\n        "
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.__str__()
    var_1 = var_0.__str__()
    var_2 = var_1.__str__()
    var_3 = var_2.__eq__(bool_0)
    var_3.to_box()
