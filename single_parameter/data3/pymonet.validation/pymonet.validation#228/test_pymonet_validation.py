# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(validation_0)


def test_case_1():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(bool_0)
    var_1 = validation_0.__eq__(bool_0)


def test_case_2():
    bytes_0 = b"F\x9a<\x91ok\xc6P\xec\x7f\\\x99\xd7\x07b\x1a1"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    validation_1 = module_0.Validation(bytes_0, var_0)
    var_1 = validation_0.to_lazy()
    validation_1.ap(bytes_0)


def test_case_3():
    bytes_0 = b"K\x83\x94\xf2\xfb-\x00\xd3\xb1\xc4\xa4_|DJ\xf5\xacAP"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.to_lazy()


def test_case_4():
    bool_0 = False
    bool_0.to_maybe()


def test_case_5():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)


def test_case_6():
    float_0 = 1239.09813
    validation_0 = module_0.Validation(float_0, float_0)
    validation_0.__str__()


def test_case_7():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.is_fail()
    validation_1 = module_0.Validation(var_0, var_0)


def test_case_8():
    bytes_0 = b"\xa9x"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.map(bytes_0)


def test_case_9():
    bytes_0 = b"K\x83\x94\xf2\xfb-\x00\xd3\xb1\xc4\xa4_|DJ\xf5\xacAP"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.to_lazy()
    validation_0.bind(validation_0)


def test_case_10():
    bytes_0 = b"\x16\x80\xc5G&("
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.is_success()
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    var_1 = validation_1.to_box()
    var_1.ap(var_0)


def test_case_11():
    str_0 = "5(UcZ-^4`zAEF{7@kO"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_try()
    var_0.to_maybe()


def test_case_12():
    bytes_0 = b"K\x83\x94\xf2\xfb-\x00\xd3\xb1\xc4\xa4_|DJ\xf5\xacAP"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.to_lazy()
    var_2 = var_1.to_try()
    var_0.is_success()


def test_case_13():
    bytes_0 = b"K\x83\x94\xf2\xfb-\x00\xd3\xb1\xc4\xa4_|DJ\xf5\xacAP"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_try()
    var_2 = var_0.to_try()
    var_3 = validation_0.to_either()
    var_1.to_try()


def test_case_14():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.__str__()
    bool_0 = False
    int_0 = -2468
    validation_1 = module_0.Validation(int_0, int_0)
    validation_1.bind(bool_0)


def test_case_15():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_either()
    var_0.to_either()


def test_case_16():
    none_type_0 = None
    bool_0 = True
    str_0 = ""
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.__eq__(bool_0)
    var_1.bind(none_type_0)


def test_case_17():
    bytes_0 = b"K\x83\x94\xf2\xfb-\x00\xd3\xb1\xc4\xa4_|DJ\xf5\xacAP"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_lazy()
    validation_1 = module_0.Validation(bytes_0, var_1)
    var_2 = validation_1.__eq__(validation_0)
