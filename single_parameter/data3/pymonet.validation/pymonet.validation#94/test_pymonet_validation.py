# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    none_type_0 = None
    bool_0 = True
    dict_0 = {bool_0: none_type_0, bool_0: bool_0, bool_0: none_type_0}
    validation_0 = module_0.Validation(none_type_0, dict_0)
    str_0 = "Z(Gf^#}FJK$|xj (3SD\r"
    validation_1 = module_0.Validation(dict_0, bool_0)
    var_0 = validation_1.__eq__(validation_0)
    str_0.ap(validation_1)


def test_case_1():
    str_0 = "&+0.wHO"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    validation_0 = module_0.Validation(dict_0, dict_0)
    bytes_0 = b"U\xab=\xb0\xe8j\xc8\xa9o\xf0\x85"
    str_1 = "Z(Gf^#}FJK$|xj (3SD\r"
    validation_1 = module_0.Validation(str_1, str_1)
    var_0 = validation_1.__eq__(bytes_0)
    var_0.is_fail()


def test_case_2():
    bytes_0 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.__str__()
    validation_0.ap(bytes_0)


def test_case_3():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_maybe()
    var_0.is_success()


def test_case_4():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_5():
    str_0 = ")~p"
    dict_0 = {str_0: str_0}
    validation_0 = module_0.Validation(dict_0, str_0)
    var_0 = validation_0.is_success()
    var_0.to_box()


def test_case_6():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_1 = module_0.Validation(validation_0, none_type_0)
    validation_1.is_fail()


def test_case_7():
    none_type_0 = None
    str_0 = "\n        Transform Validation to Maybe.\n\n        :returns: Maybe with Validation Value when Validation has no errors, in other case empty Maybe\n        :rtype: Maybe[A | None]\n        "
    validation_0 = module_0.Validation(none_type_0, str_0)
    validation_0.map(none_type_0)


def test_case_8():
    str_0 = ""
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.bind(str_0)


def test_case_9():
    int_0 = -293
    int_1 = 1
    validation_0 = module_0.Validation(int_0, int_1)
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    validation_1.ap(none_type_0)


def test_case_10():
    bool_0 = False
    set_0 = {bool_0}
    validation_0 = module_0.Validation(set_0, bool_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.__str__()
    int_0 = 954
    validation_1 = module_0.Validation(int_0, int_0)
    validation_1.__str__()


def test_case_11():
    int_0 = -1111
    none_type_0 = None
    validation_0 = module_0.Validation(int_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_maybe()
    var_2 = var_0.to_either()
    var_2.map(var_1)


def test_case_12():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.to_try()


def test_case_13():
    none_type_0 = None
    str_0 = "\n        Transform Validation to Try.\n\n        :returns: Lazy monad with function returning Validation value\n        :rtype: Lazy[Function() -> (A | None)]\n        "
    none_type_1 = None
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    validation_1 = module_0.Validation(none_type_1, set_0)
    var_0 = validation_0.__str__()
    var_1 = none_type_0.__eq__(set_0)
    var_2 = validation_1.to_maybe()
    var_2.bind(str_0)


def test_case_14():
    bytes_0 = b"\x7f\xa9B\x80X\x88\xe6\xc93\xc4LF\x93\xd3\x81\x87\xce\xdf\xc6"
    int_0 = 25
    none_type_0 = None
    validation_0 = module_0.Validation(int_0, none_type_0)
    validation_1 = module_0.Validation(validation_0, bytes_0)
    var_0 = validation_0.__eq__(int_0)
    var_1 = validation_1.to_either()
    var_0.to_maybe()


def test_case_15():
    bytes_0 = b"\xd4\x10Dd\x98"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    var_0.to_box()


def test_case_16():
    bytes_0 = b"\xc6(R\xf6\xb7RTj\xecZ&K\xbd\xb4[\xa8\x9fWH"
    str_0 = "\n        Transform Validationto Try.\n\n        :returns: Lazy monad with function returning Validation value\n        :rtype Lazy[Function() -> (A | None)]\n        "
    none_type_0 = None
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.__eq__(none_type_0)
    validation_1 = module_0.Validation(none_type_0, bytes_0)
    var_1 = validation_1.to_maybe()
    var_2 = var_1.__str__()
    var_3 = var_0.__eq__(str_0)
    var_0.to_maybe()


def test_case_17():
    int_0 = -4406
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, int_0)
    validation_1 = module_0.Validation(dict_0, none_type_0)
    validation_2 = validation_1.__eq__(validation_1)
    validation_2.to_maybe()
