# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0
import builtins as module_1


def test_case_0():
    str_0 = "QavA8h+0&7LR,"
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(str_0)
    var_0.is_success()


def test_case_1():
    str_0 = "\n        Take function and applied this function with monad value and returns function result.\n\n        :params binder: function to apply on monad value\n        :type binder: Function(A) -> Try[B]\n        :returns: for successfully result of binder, othercase copy of self\n        :rtype: Try[B]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()


def test_case_2():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)


def test_case_3():
    int_0 = 2195
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.to_try()


def test_case_4():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.is_fail()


def test_case_5():
    none_type_0 = None
    str_0 = "ImmutableList{}"
    validation_0 = module_0.Validation(str_0, str_0)
    validation_0.map(none_type_0)


def test_case_6():
    bytes_0 = b"\x9f\xccy\xa2\xd8\xbb\xab\xc0"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.map(var_0)
    var_2 = var_1.ap(var_0)
    var_3 = var_2.to_box()
    validation_0.bind(var_0)


def test_case_7():
    bytes_0 = b"\x9f\xccy\xa2\xd8\xbb\xab\xc0"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    validation_0.ap(bytes_0)


def test_case_8():
    bytes_0 = b"\x9f\xccy\xa2\xd8\xbb\xab\xc0"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.__str__()
    var_1.to_maybe()


def test_case_9():
    bytes_0 = b"\x9f\xccy\xa2\xd8\xbb\xab\xc0"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__str__()
    var_1 = module_0.Validation(var_0, var_0)
    var_2 = validation_0.to_lazy()
    var_3 = validation_1.to_lazy()
    validation_1.to_either()


def test_case_10():
    bytes_0 = b"\x9f\xccy\xa2\xd8\xbb\xab\xc0"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(validation_1)
    var_0.bind(validation_1)


def test_case_11():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_either()
    var_0.is_success()


def test_case_12():
    bool_0 = False
    set_0 = {bool_0}
    list_0 = [set_0]
    validation_0 = module_0.Validation(list_0, set_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_box()
    var_2 = var_1.to_either()
    validation_1 = module_0.Validation(var_2, var_1)
    validation_0.bind(var_0)


def test_case_13():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)
    var_0.to_maybe()


def test_case_14():
    bytes_0 = b"\x9f\xccy\xa2\xd8\xbb\xab\xc0"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.__eq__(var_0)
    var_1.ap(var_0)


def test_case_15():
    bytes_0 = b"\x9f\xccy\xa2\xd8\xbbv\xab\xc0"
    var_0 = module_0.Validation(bytes_0, bytes_0)
    var_1 = var_0.__str__()
    object_0 = module_1.object()


def test_case_16():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_box()
    var_2 = validation_0.__str__()
    list_0 = [var_1]
    var_3 = var_1.__eq__(list_0)
    var_4 = validation_0.to_maybe()
    var_5 = var_4.to_box()
    var_6 = var_1.to_try()
    var_7 = var_5.to_either()
    var_2.to_maybe()
