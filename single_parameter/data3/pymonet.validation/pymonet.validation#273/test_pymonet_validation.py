# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    str_0 = "?Ey^i"
    list_0 = [str_0]
    none_type_0 = None
    bool_0 = True
    validation_0 = module_0.Validation(none_type_0, list_0)
    var_0 = validation_0.to_maybe()
    validation_1 = module_0.Validation(bool_0, bool_0)
    var_1 = validation_1.__eq__(none_type_0)
    var_1.to_try()


def test_case_1():
    str_0 = "l^c\n;bE!L\r"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.is_fail()
    var_1 = validation_0.__str__()
    var_0.to_maybe()


def test_case_2():
    bytes_0 = b"X)\r\xd8\xfc\xaaG\xea\xf6/|\xa9\xb9\x9fr\x83p"
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_either()
    var_0.ap(bytes_0)


def test_case_3():
    none_type_0 = None
    none_type_1 = None
    bool_0 = False
    set_0 = {bool_0, bool_0}
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_try()
    var_2 = var_1.map(none_type_1)
    var_3 = var_2.map(none_type_0)
    var_3.to_try()


def test_case_4():
    str_0 = "1\\:2xyC"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()


def test_case_5():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_6():
    str_0 = "\n        Transform Maybe into Validation.\n\n        :returns: successfull Validation monad with previous value or None when Maybe is empty\n        :rtype: Validation[A, []]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_try()


def test_case_7():
    str_0 = "l^c\n;bE!L\r"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.is_fail()
    var_0.to_maybe()


def test_case_8():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_0.map(bool_0)


def test_case_9():
    bytes_0 = b";\xffO`Z(\xcd\x87"
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.bind(bytes_0)


def test_case_10():
    str_0 = "*J$F3m"
    bool_0 = False
    none_type_0 = None
    validation_0 = module_0.Validation(bool_0, none_type_0)
    validation_0.ap(str_0)


def test_case_11():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.__eq__(validation_0)
    validation_0.to_either()


def test_case_12():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_lazy()
    var_1.is_fail()


def test_case_13():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_try()
    var_2 = validation_0.__eq__(bool_0)
    var_3 = validation_0.__eq__(validation_0)
    var_4 = var_2.__str__()
    var_3.is_success()


def test_case_14():
    str_0 = "n\n\x0cJqJ"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(validation_0)


def test_case_15():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.__str__()
    var_1 = var_0.__str__()
    var_0.to_either()


def test_case_16():
    list_0 = []
    none_type_0 = None
    bool_0 = True
    validation_0 = module_0.Validation(none_type_0, list_0)
    var_0 = validation_0.to_maybe()
    validation_1 = module_0.Validation(bool_0, bool_0)
    none_type_0.to_try()


def test_case_17():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_1.__eq__(validation_0)
    var_1 = validation_1.to_box()
    validation_1.to_try()
