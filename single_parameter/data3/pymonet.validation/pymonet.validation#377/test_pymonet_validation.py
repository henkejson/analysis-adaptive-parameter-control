# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    str_0 = "ZS7LE"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    none_type_0 = None
    var_1 = validation_0.__eq__(none_type_0)
    var_2 = var_1.__str__()


def test_case_1():
    int_0 = -1028
    dict_0 = {int_0: int_0}
    tuple_0 = (dict_0, int_0)
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.__str__()
    var_0.to_maybe()


def test_case_2():
    bool_0 = False
    set_0 = {bool_0}
    bytes_0 = b"\x83\xeca\x13\x9d\xc0\x95\xc8?]H\x9b\x08\xd8\xe8W\xa5\xfd"
    tuple_0 = ()
    tuple_1 = (bool_0, set_0, bytes_0, tuple_0)
    list_0 = [tuple_1]
    list_1 = [list_0, tuple_0]
    validation_0 = module_0.Validation(list_1, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.bind(bytes_0)
    var_2 = validation_0.to_maybe()
    var_3 = validation_0.to_lazy()


def test_case_3():
    str_0 = "\n        :param semigroup: other semigroup to concat\n        :type semgroup: One[B]\n        :returns: new One with first truly value or last falsy\n        :rtype: One[A | B]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()


def test_case_4():
    bool_0 = True
    var_0 = module_0.Validation(bool_0, bool_0)


def test_case_5():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.to_maybe()


def test_case_6():
    bytes_0 = b"v>\xfc\x90s\xe6G\xf4\x05\xde}\xebC6\x06E"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_try()
    float_0 = -893.803967
    str_0 = "\n        :param semigroup: other semigroup to concat\n        :type semigroup: One[B]\n        :returns: new One with first truly value or last falsy\n        :rtype: One[A | B]\n        "
    validation_1 = module_0.Validation(float_0, str_0)
    validation_2 = module_0.Validation(str_0, str_0)
    var_1 = validation_2.to_maybe()
    var_2 = validation_0.is_fail()
    var_3 = validation_2.is_success()
    validation_3 = module_0.Validation(var_1, validation_1)
    var_4 = validation_3.to_box()
    var_2.to_either()


def test_case_7():
    float_0 = -591.6
    validation_0 = module_0.Validation(float_0, float_0)
    validation_0.map(float_0)


def test_case_8():
    str_0 = "^*t9B\x0beFqSYP\nI!BE,'e"
    set_0 = {str_0, str_0, str_0}
    none_type_0 = None
    validation_0 = module_0.Validation(set_0, none_type_0)
    validation_0.bind(set_0)


def test_case_9():
    float_0 = -118.587
    validation_0 = module_0.Validation(float_0, float_0)
    var_0 = validation_0.to_box()
    validation_0.ap(var_0)


def test_case_10():
    str_0 = "~$<"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_maybe()
    tuple_0 = (var_1, var_0)
    validation_1 = module_0.Validation(tuple_0, validation_0)
    var_2 = validation_1.to_lazy()
    var_2.to_lazy()


def test_case_11():
    int_0 = 4399
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.to_try()


def test_case_12():
    str_0 = "bL\r)<aigEDG7%8&aS"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(validation_0)
    int_0 = 3285
    none_type_0 = None
    validation_1 = module_0.Validation(var_0, none_type_0)
    var_1 = validation_0.__eq__(int_0)


def test_case_13():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    bytes_0 = b"\xa0\xe0\xa2\xa0\xed:\xc15"
    var_0 = validation_0.to_either()
    validation_1 = module_0.Validation(bytes_0, bytes_0)
    var_1 = validation_0.to_box()
    var_2 = var_1.__eq__(bytes_0)
    var_3 = validation_1.__str__()
    validation_2 = module_0.Validation(list_0, var_1)
    validation_1.map(validation_1)


def test_case_14():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.__str__()
    var_0.is_fail()


def test_case_15():
    bytes_0 = b"v>\xfc\x90s\xe6G\xf4\x05\xde}\xebC6\x06E"
    str_0 = "\n        :param semigroup: other semigroup to concat\n        :type semigroup: One[B]\n        :returns: new One with first truly value or last falsy\n        :rtype: One[A | B]\n        "
    validation_0 = module_0.Validation(str_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_box()
    validation_1 = module_0.Validation(bytes_0, validation_0)
    var_2 = validation_0.to_maybe()
    var_3 = var_2.__eq__(var_2)
    var_4 = validation_1.__eq__(validation_0)
    var_5 = validation_0.to_either()
    bool_0 = True
    validation_2 = module_0.Validation(var_5, bool_0)
    var_6 = validation_0.__eq__(validation_1)
    validation_1.is_success()


def test_case_16():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    bytes_0 = b"\xa0\xe0\xa2\xa0\xed:\xc15"
    var_0 = validation_0.to_either()
    validation_1 = module_0.Validation(bytes_0, bytes_0)
    var_1 = validation_0.to_box()
    var_2 = var_1.__eq__(bytes_0)
    var_3 = validation_1.__str__()
    var_4 = validation_0.to_maybe()
    validation_2 = module_0.Validation(list_0, var_1)
    validation_1.map(validation_1)
