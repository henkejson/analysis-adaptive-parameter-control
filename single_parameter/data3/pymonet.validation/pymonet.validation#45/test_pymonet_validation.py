# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bool_0 = False
    str_0 = "D`"
    none_type_0 = None
    validation_0 = module_0.Validation(str_0, none_type_0)
    var_0 = validation_0.__eq__(bool_0)


def test_case_1():
    complex_0 = -1716.62659 - 3236.527j
    none_type_0 = None
    validation_0 = module_0.Validation(complex_0, none_type_0)
    str_0 = "\x0b|nv"
    validation_1 = module_0.Validation(str_0, str_0)
    var_0 = validation_1.__str__()
    var_0.to_lazy()


def test_case_2():
    bool_0 = True
    set_0 = {bool_0}
    bytes_0 = b"\xf6J"
    set_1 = {bool_0, bytes_0, bytes_0}
    validation_0 = module_0.Validation(set_0, set_1)
    var_0 = validation_0.to_lazy()
    validation_1 = module_0.Validation(validation_0, set_1)
    var_1 = validation_0.to_maybe()
    validation_1.map(validation_0)


def test_case_3():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_4():
    str_0 = "\n        :param semigroup: other semigroup to concat\n        :type semigroup: Sum[B]\n        :returns: new Sum with sum of concat semigroups values\n        :rtype: Sum[A]\n        "
    none_type_0 = None
    validation_0 = module_0.Validation(str_0, none_type_0)
    validation_0.to_maybe()


def test_case_5():
    int_0 = 1
    none_type_0 = None
    validation_0 = module_0.Validation(int_0, none_type_0)
    validation_0.is_fail()


def test_case_6():
    bool_0 = True
    set_0 = {bool_0}
    bytes_0 = b"\xf6J"
    set_1 = {bool_0, bytes_0, bytes_0}
    validation_0 = module_0.Validation(set_0, set_1)
    var_0 = validation_0.to_lazy()
    validation_1 = module_0.Validation(validation_0, set_1)
    validation_1.map(validation_0)


def test_case_7():
    int_0 = 532
    bytes_0 = b"\x065\xd8\xd2\x00_^q{&\x08\xae\x7f\xec\xfa\xab\x1ex\xe2;"
    set_0 = {bytes_0, bytes_0, bytes_0}
    validation_0 = module_0.Validation(set_0, set_0)
    validation_0.bind(int_0)


def test_case_8():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.ap(none_type_0)


def test_case_9():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.__str__()
    var_2 = validation_0.__str__()
    var_3 = var_0.to_try()
    set_0.bind(set_0)


def test_case_10():
    str_0 = "\x0cY&]k7v\t}"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, str_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_try()
    var_1.map(str_0)


def test_case_11():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.to_try()


def test_case_12():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    validation_1 = module_0.Validation(validation_0, validation_0)
    var_0 = validation_0.__str__()
    int_0 = -1512
    validation_2 = module_0.Validation(int_0, int_0)
    none_type_0 = None
    var_1 = validation_2.__eq__(none_type_0)
    var_2 = validation_2.__eq__(none_type_0)
    var_3 = validation_2.__eq__(validation_0)
    var_4 = validation_2.to_lazy()
    var_1.to_either()


def test_case_13():
    int_0 = 3103
    str_0 = "\n        :param semigroup: other semigroup to concat\n        :type semigroup: Min[B]\n        :returns: new Min with smallest value\n        :rtype: Min[A | B]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    int_0.to_try()


def test_case_14():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    validation_1 = module_0.Validation(validation_0, list_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = var_0.__str__()
    var_2 = validation_1.to_either()
    var_1.to_lazy()


def test_case_15():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    validation_1 = module_0.Validation(validation_0, validation_0)
    none_type_0 = None
    var_0 = validation_1.__eq__(none_type_0)
    var_1 = validation_0.to_maybe()
    var_0.to_lazy()
