# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    int_0 = 1450
    validation_0 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.__eq__(int_0)
    var_0.ap(int_0)


def test_case_1():
    bool_0 = True
    str_0 = "cX`\nh%"
    dict_0 = {bool_0: bool_0, bool_0: str_0}
    validation_0 = module_0.Validation(bool_0, dict_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.is_fail()
    var_0.to_box()


def test_case_2():
    str_0 = "\n        Transform Box into successfull Try.\n\n        :returns: successfull Try monad with previous value\n        :rtype: Try[A]\n        "
    dict_0 = {str_0: str_0}
    list_0 = [dict_0, str_0]
    validation_0 = module_0.Validation(list_0, str_0)
    dict_1 = {}
    validation_1 = module_0.Validation(dict_1, dict_1)
    var_0 = validation_1.to_either()
    var_1 = var_0.to_try()
    var_1.is_success()


def test_case_3():
    none_type_0 = None
    none_type_1 = None
    bool_0 = False
    str_0 = "n\t_"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.bind(bool_0)
    var_2 = var_1.map(none_type_1)
    var_3 = var_2.to_maybe()
    var_4 = var_3.to_box()
    var_4.map(none_type_0)


def test_case_4():
    int_0 = 0
    validation_0 = module_0.Validation(int_0, int_0)


def test_case_5():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_1 = module_0.Validation(bool_0, bool_0)
    validation_1.__str__()


def test_case_6():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.is_fail()


def test_case_7():
    str_0 = "B A+^UziD"
    tuple_0 = (str_0,)
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.map(tuple_0)


def test_case_8():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.bind(validation_0)


def test_case_9():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    tuple_0 = ()
    list_0 = [none_type_0, tuple_0, tuple_0]
    validation_0.ap(list_0)


def test_case_10():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_box()
    bool_0 = True
    validation_1 = module_0.Validation(bool_0, bool_0)
    validation_1.is_success()


def test_case_11():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_lazy()
    tuple_0 = (var_0,)
    bool_0 = False
    set_1 = {bool_0, bool_0, bool_0}
    bytes_0 = b"\xcb\xc5,v\xb8\xbd\x94\xb4#/\xb7.\x06\xe3\x04\xdaB\x08\xdf\x8b"
    tuple_1 = ()
    tuple_2 = (set_1, bytes_0, tuple_1)
    validation_1 = module_0.Validation(bool_0, tuple_2)
    validation_1.bind(tuple_0)


def test_case_12():
    str_0 = "\n        Transform BoI into successfull Try.\n\n        :retur!s: successfull Try monad with pr9vious value\n        :rtype: Try[A]\n        "
    dict_0 = {str_0: str_0}
    list_0 = [dict_0, dict_0, str_0]
    validation_0 = module_0.Validation(list_0, str_0)
    dict_1 = {}
    validation_1 = module_0.Validation(dict_1, dict_1)
    var_0 = validation_1.__str__()
    var_1 = validation_0.to_maybe()
    var_2 = var_1.ap(validation_1)
    var_3 = validation_1.to_try()
    var_4 = var_2.ap(var_3)
    var_5 = var_2.to_lazy()
    var_3.to_either()


def test_case_13():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_maybe()
    none_type_0 = None
    validation_0.map(none_type_0)


def test_case_14():
    str_0 = "\n        If Maybe is empty return new empty Maybe, in other case\n        takes mapper function and returns result of mapper.\n\n        :param mapper: function to call with Maybe.value\n        :type mapper: Function(A) -> Maybe[B]\n        :returns: Maybe[B | None]\n        "
    tuple_0 = (str_0, str_0)
    validation_0 = module_0.Validation(tuple_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_box()
    var_1.is_success()


def test_case_15():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_maybe()
    var_1.is_success()


def test_case_16():
    int_0 = 1450
    validation_0 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.__eq__(validation_0)
    var_0.is_success()


def test_case_17():
    bool_0 = False
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_1 = module_0.Validation(none_type_0, bool_0)
    var_0 = validation_1.to_box()
    var_1 = validation_0.__eq__(validation_1)
    validation_2 = module_0.Validation(validation_1, var_1)
    validation_0.to_try()
