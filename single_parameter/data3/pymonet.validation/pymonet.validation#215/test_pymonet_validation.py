# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(bool_0)
    validation_0.__str__()


def test_case_1():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.__str__()


def test_case_2():
    bytes_0 = b'.\x16\xe7\x04\xed\xf7\xc2S\xb7"\xad\xc5\x10\x01z'
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.__eq__(var_0)
    validation_0.ap(var_0)


def test_case_3():
    list_0 = []
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    list_1 = [validation_0, bool_0, validation_0]
    validation_1 = module_0.Validation(list_1, list_1)
    var_0 = validation_1.to_either()
    var_1 = var_0.__str__()
    var_1.bind(list_0)


def test_case_4():
    bytes_0 = b"a`\x18\xe6\x9c\xe2\xa9L\xe5.\xfdg\xd3;-+"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.__str__()
    var_1.to_try()


def test_case_5():
    none_type_0 = None
    none_type_0.to_box()


def test_case_6():
    int_0 = 19
    validation_0 = module_0.Validation(int_0, int_0)


def test_case_7():
    bool_0 = False
    int_0 = 971
    validation_0 = module_0.Validation(bool_0, int_0)
    validation_1 = module_0.Validation(validation_0, validation_0)
    validation_1.is_fail()


def test_case_8():
    none_type_0 = None
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    validation_0.map(none_type_0)


def test_case_9():
    int_0 = -2019
    bool_0 = False
    none_type_0 = None
    validation_0 = module_0.Validation(bool_0, none_type_0)
    validation_0.bind(int_0)


def test_case_10():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_box()


def test_case_11():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()


def test_case_12():
    bytes_0 = b'.\x16\xe7\x04\xed\xf7\xc2S\xb7"\xad\xc5\x10\x01z'
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.__str__()
    var_2 = validation_0.__eq__(validation_0)
    var_3 = var_0.ap(bytes_0)
    var_4 = var_3.__eq__(var_2)
    var_5 = var_0.to_either()
    var_6 = var_5.to_maybe()
    var_7 = validation_0.to_either()
    var_1.ap(var_4)


def test_case_13():
    str_0 = "+_T9'ygvuX/Z,NCQs-U."
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.to_try()
    var_2 = var_1.__str__()
    var_2.bind(str_0)


def test_case_14():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(validation_0)
    none_type_0 = None
    validation_1 = module_0.Validation(bool_0, none_type_0)
    validation_0.__str__()


def test_case_15():
    complex_0 = 684.767 - 1546.123j
    bytes_0 = b""
    validation_0 = module_0.Validation(complex_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_either()
    var_2 = var_1.to_try()
    var_2.to_try()


def test_case_16():
    bytes_0 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_0.to_either()


def test_case_17():
    bytes_0 = b'.\x16\xe7\x04\xed\xf7\xc2S\xb7"\xad\xc5\x10\x01z'
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    none_type_0 = None
    var_1 = validation_0.__str__()
    var_2 = validation_0.__eq__(validation_0)
    validation_1 = module_0.Validation(var_1, none_type_0)
    var_3 = var_0.bind(bytes_0)
    var_4 = validation_1.__eq__(validation_0)
    var_2.to_either()
