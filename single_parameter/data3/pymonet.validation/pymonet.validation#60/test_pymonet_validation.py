# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bytes_0 = b"\x98"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.__str__()
    var_2 = validation_0.to_try()


def test_case_1():
    none_type_0 = None
    none_type_1 = None
    validation_0 = module_0.Validation(none_type_1, none_type_1)
    var_0 = validation_0.__eq__(none_type_0)
    var_0.to_box()


def test_case_2():
    str_0 = "\n        Returns new ImmutableList with only this elements that passed\n        info argument returns True\n\n        :param fn: function to call with ImmutableList value\n        :type fn: Function(A) -> bool\n        :returns: ImmutableList[A]\n        "
    none_type_0 = None
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_try()
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    var_1 = validation_0.__str__()
    var_2 = validation_0.to_either()
    var_3 = validation_1.__eq__(validation_0)
    validation_0.ap(none_type_0)


def test_case_3():
    list_0 = []
    int_0 = -1024
    validation_0 = module_0.Validation(int_0, list_0)
    var_0 = validation_0.to_maybe()
    var_0.bind(list_0)


def test_case_4():
    int_0 = 1
    bytes_0 = b"\x12\xb2V\x9d\x8e\x05\x04E\x93\xe5\xd1;\xf7No1\x01H\x89"
    validation_0 = module_0.Validation(int_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_0.is_success()


def test_case_5():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_6():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.to_either()


def test_case_7():
    bool_0 = True
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, bool_0)
    validation_0.is_fail()


def test_case_8():
    bool_0 = True
    str_0 = "\tg2e<9ME5,h\r#<"
    validation_0 = module_0.Validation(str_0, str_0)
    validation_0.map(bool_0)


def test_case_9():
    int_0 = -953
    int_1 = 825
    dict_0 = {int_1: int_1, int_1: int_1, int_1: int_1, int_1: int_1}
    validation_0 = module_0.Validation(dict_0, dict_0)
    validation_0.bind(int_0)


def test_case_10():
    int_0 = 910
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    validation_0.ap(int_0)


def test_case_11():
    dict_0 = {}
    str_0 = "\n    Perform left-to-right function composition.\n\n    :param value: argument of first applied function\n    :type value: Any\n    :param functions: list of functions to applied from left-to-right\n    :type functions: List[Function]\n    :returns: result of all functions\n    :rtype: Any\n    "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_box()
    var_0.bind(dict_0)


def test_case_12():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_try()
    complex_0 = 1237.912 - 2589.973j
    var_2 = var_0.ap(complex_0)


def test_case_13():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_either()
    validation_0.ap(validation_0)


def test_case_14():
    bytes_0 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_maybe()
    var_2 = validation_0.__eq__(var_0)
    var_3 = var_0.to_box()
    var_4 = validation_0.__str__()
    var_5 = var_4.__str__()
    var_5.to_try()
