# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0
import builtins as module_1


def test_case_0():
    none_type_0 = None
    bool_0 = True
    none_type_1 = None
    validation_0 = module_0.Validation(bool_0, none_type_1)
    var_0 = validation_0.__eq__(none_type_0)
    var_0.is_success()


def test_case_1():
    str_0 = "@&9%]vx&\x0cy6\x0b3mb\x0b<L"
    validation_0 = module_0.Validation(str_0, str_0)
    none_type_0 = None
    bool_0 = True
    validation_1 = module_0.Validation(none_type_0, bool_0)
    var_0 = validation_0.__str__()
    validation_1.__str__()


def test_case_2():
    str_0 = "@&9%]vx&\x0cy6\x0b3mb\x0b<L"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    bool_0 = True
    validation_1 = module_0.Validation(var_0, bool_0)
    var_1 = validation_1.__eq__(validation_0)
    validation_1.is_success()


def test_case_3():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.is_fail()
    var_2 = validation_0.to_maybe()
    var_3 = validation_0.to_try()
    validation_0.bind(var_0)


def test_case_4():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    tuple_0 = (bool_0, list_0)
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_maybe()


def test_case_5():
    str_0 = "@9%]vx&\x0cy6\x0b3mb\x0b<L"
    validation_0 = module_0.Validation(str_0, str_0)


def test_case_6():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.is_fail()


def test_case_7():
    str_0 = "@&9%]vx&\x0cy6\x0b3mb\x0b<L"
    validation_0 = module_0.Validation(str_0, str_0)
    none_type_0 = None
    bool_0 = True
    validation_1 = module_0.Validation(none_type_0, bool_0)
    var_0 = validation_1.__eq__(validation_0)
    validation_1.map(validation_1)


def test_case_8():
    int_0 = 1832
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.bind(int_0)


def test_case_9():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    bool_0 = True
    none_type_1 = None
    validation_1 = module_0.Validation(bool_0, none_type_1)
    validation_1.ap(none_type_0)


def test_case_10():
    str_0 = "\n        Take function and call constructor function passing returned value to fn function.\n\n        It's only way to call function store in Lazy\n        :param fn: Function(constructor_fn) -> B\n        :returns: result od folder function\n        :rtype: B\n        "
    object_0 = module_1.object()
    str_1 = "2/U.vlL"
    validation_0 = module_0.Validation(object_0, str_1)
    var_0 = validation_0.to_box()
    var_0.ap(str_0)


def test_case_11():
    str_0 = ".yZ"
    list_0 = [str_0, str_0, str_0, str_0]
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_lazy()


def test_case_12():
    bool_0 = True
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, bool_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_either()
    var_2 = var_1.to_box()
    var_2.is_fail()


def test_case_13():
    float_0 = 779.642
    dict_0 = {float_0: float_0}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_try()
    var_0.to_either()


def test_case_14():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.__str__()
    var_0.to_lazy()


def test_case_15():
    str_0 = "@&9%]vx&\x0cy6\x0b3mb\x0b<L"
    dict_0 = {}
    validation_0 = module_0.Validation(str_0, dict_0)
    var_0 = validation_0.to_either()
    bool_0 = True
    none_type_0 = None
    validation_1 = module_0.Validation(bool_0, validation_0)
    var_1 = var_0.__eq__(none_type_0)
    validation_1.is_success()


def test_case_16():
    str_0 = "@&9%]vx&\x0cy6\x0b3mb\x0b<L"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    none_type_0 = None
    validation_1 = module_0.Validation(str_0, none_type_0)
    var_1 = validation_0.__eq__(validation_0)
    validation_1.is_success()
