# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_box()
    validation_1 = module_0.Validation(validation_0, var_0)
    var_1 = validation_0.__eq__(validation_1)
    var_2 = var_0.to_maybe()
    var_1.is_fail()


def test_case_1():
    none_type_0 = None
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    validation_0 = module_0.Validation(list_0, list_0)
    list_1 = [validation_0, bool_0]
    validation_1 = module_0.Validation(list_1, list_1)
    var_0 = validation_1.__eq__(none_type_0)
    var_0.to_maybe()


def test_case_2():
    bytes_0 = b"\xe6\x1b"
    int_0 = 2794
    validation_0 = module_0.Validation(bytes_0, int_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.to_lazy()
    validation_1 = module_0.Validation(int_0, bytes_0)
    var_2 = validation_1.__str__()
    var_3 = validation_0.to_lazy()
    var_4 = var_3.to_try()


def test_case_3():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_try()
    var_2 = var_1.__str__()
    str_0 = ".{%y @7 \tC/912k\rV"
    list_1 = [list_0, list_0, list_0, str_0]
    validation_1 = module_0.Validation(list_1, list_0)
    validation_1.map(list_0)


def test_case_4():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    set_0 = {tuple_1, tuple_1, tuple_0}
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_try()
    var_1.is_fail()


def test_case_5():
    str_0 = "ba3N&4#j,u_XG|C$"
    validation_0 = module_0.Validation(str_0, str_0)


def test_case_6():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0, none_type_0, none_type_0}
    validation_0 = module_0.Validation(none_type_0, set_0)
    var_0 = validation_0.to_maybe()


def test_case_7():
    complex_0 = -1100.067 - 2025j
    none_type_0 = None
    validation_0 = module_0.Validation(complex_0, none_type_0)
    validation_0.is_fail()


def test_case_8():
    bytes_0 = b"\xaa\xdeCi\xc2\xdd\x80~\xc1'\x11\xa8\x80\x8a\xe3\xa6"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    validation_1 = module_0.Validation(bytes_0, none_type_0)
    int_0 = 440
    validation_1.map(int_0)


def test_case_9():
    bytes_0 = b"D\x8b"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_0.bind(bytes_0)


def test_case_10():
    str_0 = "B( \t:Xf{Ou*3P"
    validation_0 = module_0.Validation(str_0, str_0)
    validation_0.ap(str_0)


def test_case_11():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    bytes_0 = b"\x91\x9a\xdc\xe5T\x81n^.'\xc5"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_box()
    var_0.ap(set_0)


def test_case_12():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_box()
    int_0 = -45
    validation_1 = module_0.Validation(bool_0, validation_0)
    var_1 = validation_1.to_lazy()
    var_2 = var_1.map(int_0)
    validation_0.to_try()


def test_case_13():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_0.to_either()


def test_case_14():
    bytes_0 = b""
    int_0 = 2794
    validation_0 = module_0.Validation(bytes_0, int_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.to_lazy()
    validation_1 = module_0.Validation(int_0, bytes_0)
    var_2 = validation_1.__str__()
    var_3 = validation_0.to_lazy()
    var_4 = var_3.to_try()


def test_case_15():
    str_0 = ""
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.__str__()
    var_2 = var_0.to_box()
    var_3 = var_2.__str__()
    var_4 = var_0.to_either()
    var_5 = validation_0.__eq__(var_2)
    var_3.bind(str_0)
