# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0
import builtins as module_1


def test_case_0():
    bytes_0 = b"\xfdh\xa0\xe2\x9c\xa8\x1b\xad\xee\x1d"
    str_0 = "Fp39="
    none_type_0 = None
    validation_0 = module_0.Validation(str_0, none_type_0)
    var_0 = validation_0.__eq__(bytes_0)
    var_0.to_box()


def test_case_1():
    str_0 = "\n        Create empty maybe.\n\n        :returns: Maybe[None]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_try()
    bool_0 = False
    validation_1 = module_0.Validation(bool_0, bool_0)
    var_1.to_lazy()


def test_case_2():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    set_0 = {tuple_0, tuple_0, bool_0, tuple_0}
    validation_0 = module_0.Validation(bool_0, set_0)
    var_0 = validation_0.to_either()
    validation_0.map(bool_0)


def test_case_3():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    set_0 = {tuple_0, tuple_0, bool_0, tuple_0}
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_maybe()


def test_case_4():
    int_0 = 0
    validation_0 = module_0.Validation(int_0, int_0)


def test_case_5():
    str_0 = "\n        Create empty maybe.\n\n        :returns: Maybe[None]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_try()
    list_0 = [str_0, str_0, str_0]
    tuple_0 = var_1.__eq__(str_0)
    bool_0 = False
    validation_1 = module_0.Validation(bool_0, bool_0)
    var_2 = validation_0.is_fail()
    var_3 = list_0.__str__()


def test_case_6():
    str_0 = "};31RIpE"
    str_1 = "\n        Returns first element of ImmutableList that passed\n        info argument returns True\n\n        :param fn: function to call with ImmutableList value\n        :type fn: Function(A) -> bool\n        :returns: A\n        "
    validation_0 = module_0.Validation(str_1, str_1)
    validation_0.map(str_0)


def test_case_7():
    str_0 = "s"
    none_type_0 = None
    validation_0 = module_0.Validation(str_0, none_type_0)
    validation_0.bind(none_type_0)


def test_case_8():
    int_0 = 1887
    str_0 = "\n        Returns True when errors list are not empty.\n\n        :returns: True for empty errors not list\n        :rtype: Boolean\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    validation_0.ap(int_0)


def test_case_9():
    str_0 = "P\x0c\x0c3xvm:"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.is_success()
    var_2 = validation_0.__eq__(validation_0)
    var_3 = validation_0.to_box()
    validation_1 = module_0.Validation(var_1, validation_0)
    var_4 = var_0.__eq__(var_0)
    var_4.to_lazy()


def test_case_10():
    bytes_0 = b"\xfdh\xa0\xe2\x9c\xa8\x1b\xad\xee\x1d"
    str_0 = "Fp39="
    none_type_0 = None
    validation_0 = module_0.Validation(str_0, none_type_0)
    var_0 = validation_0.__eq__(bytes_0)
    var_1 = validation_0.to_lazy()


def test_case_11():
    object_0 = module_1.object()
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_either()
    var_0.map(object_0)


def test_case_12():
    str_0 = "\n        Create empty maybe.\n\n        :returns: Maybe[None]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.__str__()
    var_2 = var_0.to_try()
    list_0 = [str_0, str_0, str_0]
    tuple_0 = (list_0, str_0)
    bool_0 = False
    validation_1 = module_0.Validation(bool_0, bool_0)
    validation_1.map(tuple_0)


def test_case_13():
    str_0 = "P\x0c\x0c3xvm:"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.is_success()
    var_2 = validation_0.__eq__(validation_0)
    validation_1 = module_0.Validation(var_1, validation_0)
    var_3 = var_0.__eq__(var_0)
    var_1.to_try()


def test_case_14():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_maybe()
    var_0.bind(dict_0)


def test_case_15():
    dict_0 = {}
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, dict_0)
    var_0 = validation_0.__str__()
    validation_0.bind(dict_0)


def test_case_16():
    str_0 = "P\x0c\x0c3xvm:"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_maybe()
    var_2 = validation_0.__eq__(validation_0)
    var_3 = validation_0.to_box()
    var_4 = var_1.to_box()
    validation_1 = module_0.Validation(var_0, var_2)
    var_5 = var_4.__str__()
    var_6 = validation_0.to_maybe()
    var_7 = var_3.to_try()
    var_8 = validation_1.__eq__(validation_0)
    var_2.to_try()
