# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    str_0 = "`]tQ.2Q+.6~"
    validation_0 = module_0.Validation(str_0, str_0)
    validation_1 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_maybe()
    var_2 = validation_1.to_either()
    var_3 = validation_1.to_box()
    var_1.is_success()


def test_case_1():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(none_type_0)
    validation_0.to_try()


def test_case_2():
    str_0 = "\n        Take 2 functions call only one of then with either value and return her result.\n\n        :params error: function to call when Either is Left\n        :type error: Function(A) -> B\n        :params success: function to call when Either is Right\n        :type success: Function(A) -> B\n        :returns: result of success handler when Eihter is Right, result of error handler when Eihter is Left\n        :rtpye: B\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    validation_1 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    var_1 = validation_1.to_either()
    str_0.bind(str_0)


def test_case_3():
    none_type_0 = None
    bytes_0 = b"\xa9a\x80\xeb\xe6U\xfaL\x95e\xe0\xab\xa5\xd6h1d\xcd\xdb"
    var_0 = module_0.Validation(none_type_0, bytes_0)
    var_1 = var_0.to_either()
    var_2 = var_1.bind(var_0)
    var_3 = var_2.to_try()
    var_4 = var_2.to_box()
    var_5 = var_4.to_either()
    var_6 = var_4.to_try()


def test_case_4():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)


def test_case_5():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.to_either()


def test_case_6():
    bytes_0 = b"\xa8\xa9a\x80\xeb\xe6UL\x95e\xc2\xe0\xab\xa5\xd6h1d\xcd\xdb"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(bytes_0)
    var_1 = validation_0.to_either()
    var_2 = var_1.map(var_1)
    var_3 = var_2.to_try()
    var_4 = var_3.map(bytes_0)
    var_5 = var_1.to_maybe()
    validation_1 = module_0.Validation(var_5, var_5)
    var_6 = validation_0.is_fail()
    validation_1.bind(var_6)


def test_case_7():
    str_0 = "\n        Take 2 functions call only one of then with either value and return her result.\n\n        :params error: function to call when Either is Left\n        :type error: Function(A) -> B\n        :params success: function to call when Either is Right\n        :type success: Function(A) -> B\n        :returns: result of success handler when Eihter is Right, result of error handler when Eihter is Left\n        :rtpye: B\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    validation_1 = module_0.Validation(str_0, str_0)
    validation_2 = module_0.Validation(str_0, str_0)
    var_0 = validation_2.__eq__(validation_2)
    var_1 = validation_1.is_fail()
    var_2 = validation_2.to_either()
    validation_2.map(str_0)


def test_case_8():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    dict_0 = {tuple_1: tuple_1, tuple_0: tuple_0}
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.bind(dict_0)


def test_case_9():
    float_0 = 2213.5754
    int_0 = 1
    validation_0 = module_0.Validation(float_0, int_0)
    validation_0.ap(float_0)


def test_case_10():
    bytes_0 = b"1\xb5\xb7K2:\xeb\xc5\xb8\xb4\x9dZ"
    none_type_0 = None
    validation_0 = module_0.Validation(bytes_0, none_type_0)
    var_0 = validation_0.to_box()


def test_case_11():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_box()
    var_2 = var_1.__str__()
    var_2.is_fail()


def test_case_12():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.__str__()
    var_0.to_box()


def test_case_13():
    str_0 = "\n        Take 2 functions call only one of then with either value and return her result.\n\n        :params error: function to call when Either is Left\n        :type eror: Function(A) -> B\n        :params success: function to call when Either is Right\n        :type success: Function(A) > B\n        :returns: result of success handler when Eihter is Right, result of error hander when Eihter is Left\n        :rtpye: B\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    validation_1 = module_0.Validation(str_0, str_0)
    var_0 = validation_1.__eq__(validation_1)
    var_1 = validation_1.to_maybe()
    float_0 = 2213.5754
    var_2 = module_0.Validation(var_1, validation_1)
    var_3 = var_2.__eq__(validation_0)
    var_4 = validation_0.to_either()
    validation_2 = module_0.Validation(float_0, var_0)
    var_3.bind(validation_2)


def test_case_14():
    str_0 = ""
    validation_0 = module_0.Validation(str_0, str_0)
    validation_1 = module_0.Validation(str_0, str_0)
    var_0 = validation_1.__eq__(validation_1)
    var_1 = validation_1.to_maybe()
    var_2 = validation_1.__str__()
    var_3 = var_2.__eq__(var_2)
    var_4 = validation_0.to_either()
    validation_2 = module_0.Validation(str_0, var_4)
    int_0 = 3016
    validation_2.bind(int_0)
