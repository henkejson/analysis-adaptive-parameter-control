# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0
import builtins as module_1


def test_case_0():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_box()


def test_case_1():
    none_type_0 = None
    str_0 = "~Ipr0U<\nhDg"
    int_0 = 0
    tuple_0 = (str_0, int_0, str_0)
    dict_0 = {tuple_0: int_0, str_0: none_type_0}
    bytes_0 = b"\x11\xbc\xb3/"
    validation_0 = module_0.Validation(str_0, int_0)
    var_0 = validation_0.__eq__(bytes_0)
    var_0.map(dict_0)


def test_case_2():
    none_type_0 = None
    tuple_0 = ()
    validation_0 = module_0.Validation(none_type_0, tuple_0)
    var_0 = validation_0.__str__()
    str_0 = '4p\n5",PX\x0b'
    validation_1 = module_0.Validation(str_0, str_0)
    var_1 = validation_1.to_maybe()
    validation_2 = module_0.Validation(validation_1, var_1)
    validation_1.ap(var_1)


def test_case_3():
    str_0 = '4p\n5",PX\x0b'
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    validation_1 = module_0.Validation(validation_0, var_0)
    validation_0.map(validation_0)


def test_case_4():
    bytes_0 = b"\xc9"
    validation_0 = module_0.Validation(bytes_0, bytes_0)


def test_case_5():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    list_0 = [validation_0]
    none_type_0 = None
    validation_1 = module_0.Validation(list_0, none_type_0)
    validation_1.to_try()


def test_case_6():
    bool_0 = False
    none_type_0 = None
    validation_0 = module_0.Validation(bool_0, none_type_0)
    validation_0.is_fail()


def test_case_7():
    object_0 = module_1.object()
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.map(object_0)


def test_case_8():
    str_0 = "5qKn"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.bind(str_0)


def test_case_9():
    float_0 = -2539.55228
    validation_0 = module_0.Validation(float_0, float_0)
    validation_0.ap(float_0)


def test_case_10():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_box()
    var_0.ap(none_type_0)


def test_case_11():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    bool_0 = False
    list_0 = [bool_0]
    validation_1 = module_0.Validation(list_0, list_0)
    var_0 = validation_1.__eq__(bool_0)
    var_1 = validation_1.to_lazy()
    var_0.to_lazy()


def test_case_12():
    str_0 = "uYxW{.d6!2rDn\x0c\rA/u"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    var_0.is_fail()


def test_case_13():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.map(var_0)
    var_1.to_either()


def test_case_14():
    none_type_0 = None
    str_0 = "["
    validation_0 = module_0.Validation(none_type_0, str_0)
    var_0 = validation_0.__str__()
    var_0.to_maybe()


def test_case_15():
    bytes_0 = b"'*A\x9e\xe1\xe3\x84\x0c"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    none_type_0 = None
    validation_1 = module_0.Validation(validation_0, none_type_0)
    var_0 = validation_1.__eq__(bytes_0)
    var_1 = validation_0.__eq__(validation_1)
    validation_2 = module_0.Validation(validation_1, validation_1)
    validation_2.__str__()


def test_case_16():
    str_0 = ""
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    var_0.is_success()


def test_case_17():
    bytes_0 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_1 = module_0.Validation(bytes_0, validation_0)
    var_1 = validation_0.__eq__(validation_0)
    var_2 = validation_0.to_maybe()
    none_type_0 = None
    bytes_1 = b"=\xca7\x06h\xc2\xfc\x83]s"
    var_3 = var_2.to_box()
    validation_2 = module_0.Validation(bytes_1, bytes_1)
    validation_2.ap(none_type_0)
