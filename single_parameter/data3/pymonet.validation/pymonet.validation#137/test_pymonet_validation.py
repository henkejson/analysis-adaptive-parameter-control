# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    list_0 = []
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(list_0)
    var_0.ap(list_0)


def test_case_1():
    bytes_0 = b"\xda8\x17\x89:\x97\xc8\xdez\x0bF\x07"
    bytes_1 = b"\x15\x02]\x1c"
    validation_0 = module_0.Validation(bytes_1, bytes_0)
    var_0 = validation_0.__str__()
    var_0.map(bytes_0)


def test_case_2():
    none_type_0 = None
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.__eq__(validation_0)
    var_0.ap(none_type_0)


def test_case_3():
    str_0 = "vPOp"
    dict_0 = {}
    bool_0 = False
    bytes_0 = b"\xd9F\xe7/"
    tuple_0 = (bool_0, bytes_0)
    validation_0 = module_0.Validation(tuple_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.map(dict_0)
    var_2 = var_1.__str__()
    var_3 = var_2.__str__()
    var_4 = var_3.__eq__(str_0)
    var_4.to_lazy()


def test_case_4():
    bytes_0 = b"\x1bV\x01>\xd5\x82\x9a"
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_maybe()
    var_0.ap(bytes_0)


def test_case_5():
    str_0 = '9\\Yza"0Ps'
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    var_0.is_fail()


def test_case_6():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_7():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.is_success()


def test_case_8():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.is_fail()


def test_case_9():
    bytes_0 = b"\xe2\x9d\xc4"
    none_type_0 = None
    validation_0 = module_0.Validation(bytes_0, none_type_0)
    validation_0.map(bytes_0)


def test_case_10():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.bind(none_type_0)


def test_case_11():
    int_0 = -245
    str_0 = "\n    Return the first element of the list which matches the keys, or None if no element matches.\n\n    :param collection: collection to search\n    :type collection: List[A]\n    :param key: function to decide witch element should be found\n    :type key: Function(A) -> Boolean\n    :returns: element of collection or None\n    :rtype: A | None\n    "
    validation_0 = module_0.Validation(int_0, str_0)
    bytes_0 = b'"\xb0F=\xd0\x9a\x80\x8c9\n\xac\x92?S\xd3\x8c'
    str_1 = "j0t\n\x0b"
    validation_1 = module_0.Validation(str_1, bytes_0)
    validation_1.ap(validation_1)


def test_case_12():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_box()
    var_0.is_success()


def test_case_13():
    bool_0 = True
    bool_1 = True
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, bool_1)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.bind(bool_0)
    var_1.to_maybe()


def test_case_14():
    bytes_0 = b"\xe1nW\x15\xe0\xec\x93TL\x9f\xa0\xfa\xaf\xbdE\xbb\x8c;\xb0\xe8"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_try()
    var_0.to_either()


def test_case_15():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.__eq__(validation_0)
    var_2 = var_0.to_box()
    var_3 = validation_0.__str__()
    var_2.to_box()


def test_case_16():
    bool_0 = True
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.__eq__(set_0)
    validation_1 = module_0.Validation(set_0, bool_0)
    var_1 = validation_1.__eq__(set_0)
    var_2 = validation_0.__eq__(validation_1)
    validation_0.map(validation_0)
