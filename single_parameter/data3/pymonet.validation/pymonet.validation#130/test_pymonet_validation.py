# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.is_fail()
    var_0.ap(var_1)


def test_case_1():
    bool_0 = False
    bool_1 = True
    validation_0 = module_0.Validation(bool_1, bool_1)
    var_0 = validation_0.__eq__(bool_0)


def test_case_2():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.__str__()
    bytes_0 = b"T\x94\xa5"
    validation_0.ap(bytes_0)


def test_case_3():
    str_0 = "\n        Method executes a reducer function\n        on each element of the array, resulting in a single output value.\n\n        :param fn: function to call with ImmutableList value\n        :type fn: Function(A, B) -> A\n        :returns: A\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    validation_1 = module_0.Validation(var_0, str_0)
    var_1 = validation_1.is_success()
    var_1.is_success()


def test_case_4():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_lazy()
    none_type_0 = None
    var_1 = validation_0.to_maybe()
    var_2 = validation_0.to_maybe()
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    var_3 = validation_1.to_lazy()
    var_4 = var_3.to_maybe()
    var_4.map(var_3)


def test_case_5():
    str_0 = "\n        If Maybe is empty return new empty Maybe, in other case\n        takes mapper function and returns result of mapper.\n\n        :param mapper: function to call with Maybe.value\n        :type mapper: Function(A) -> Maybe[B]\n        :returns: Maybe[B | None]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_try()
    var_1.is_success()


def test_case_6():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_7():
    float_0 = 1624.531
    validation_0 = module_0.Validation(float_0, float_0)
    validation_0.__str__()


def test_case_8():
    dict_0 = {}
    int_0 = 1589
    validation_0 = module_0.Validation(int_0, dict_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.is_fail()
    var_1.ap(dict_0)


def test_case_9():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.map(none_type_0)


def test_case_10():
    none_type_0 = None
    int_0 = 385
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.bind(none_type_0)


def test_case_11():
    list_0 = []
    int_0 = 0
    list_1 = [list_0, list_0, int_0, list_0]
    str_0 = 'f"jv:8X.8lMM J'
    validation_0 = module_0.Validation(list_1, str_0)
    validation_0.ap(int_0)


def test_case_12():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_box()
    var_0.to_box()


def test_case_13():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    none_type_0 = None
    bytes_0 = b"\x96\xc4"
    validation_1 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_1.to_lazy()
    var_1 = var_0.map(none_type_0)


def test_case_14():
    bytes_0 = b"XV"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_try()
    var_1 = var_0.bind(var_0)
    var_1.to_box()


def test_case_15():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_either()
    bytes_0 = b""
    validation_0.ap(bytes_0)


def test_case_16():
    bool_0 = True
    float_0 = -430.870323
    dict_0 = {float_0: float_0}
    validation_0 = module_0.Validation(float_0, dict_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.__eq__(bool_0)


def test_case_17():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    validation_1 = module_0.Validation(validation_0, validation_0)
    var_0 = validation_0.__eq__(validation_1)
    dict_0.is_fail()
