# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bool_0 = True
    int_0 = -1280
    int_1 = 255
    bytes_0 = b"a!\xb0!Q\x866<="
    validation_0 = module_0.Validation(int_1, bytes_0)
    var_0 = validation_0.__eq__(int_0)
    var_1 = var_0.__str__()
    var_1.ap(bool_0)


def test_case_1():
    float_0 = 1911.174021
    bool_0 = False
    str_0 = ";(]@/SPSN='$\rn"
    list_0 = [str_0]
    validation_0 = module_0.Validation(list_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.__eq__(bool_0)
    var_1.map(float_0)


def test_case_2():
    int_0 = 255
    bytes_0 = b"a!\xb0!Q\x866<="
    complex_0 = 1093.9093500026754 + 5625.427j
    validation_0 = module_0.Validation(complex_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.is_fail()
    var_2 = var_1.__eq__(int_0)
    var_3 = var_1.__str__()


def test_case_3():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)


def test_case_4():
    set_0 = set()
    none_type_0 = None
    validation_0 = module_0.Validation(set_0, none_type_0)
    validation_0.to_either()


def test_case_5():
    int_0 = -1280
    int_1 = 255
    bytes_0 = b"a!\xb0!Q\x866<="
    validation_0 = module_0.Validation(int_1, bytes_0)
    var_0 = validation_0.__eq__(int_0)
    validation_0.map(var_0)


def test_case_6():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.bind(none_type_0)


def test_case_7():
    float_0 = 2046.9824
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.ap(float_0)


def test_case_8():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_box()
    list_0 = []
    validation_0.map(list_0)


def test_case_9():
    int_0 = 1356
    validation_0 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.to_lazy()


def test_case_10():
    bytes_0 = b"a!\xb0!Q\x866<="
    complex_0 = 1094.381556 + 5625.427j
    validation_0 = module_0.Validation(complex_0, bytes_0)
    var_0 = validation_0.is_success()
    var_1 = validation_0.__str__()
    var_2 = validation_0.to_try()
    var_0.is_fail()


def test_case_11():
    int_0 = 255
    bytes_0 = b"a!\xb0!Q\x866<="
    complex_0 = 1094.381556 + 5625.427j
    validation_0 = module_0.Validation(complex_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = var_0.__str__()
    var_1.ap(int_0)


def test_case_12():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    bool_0 = True
    validation_1 = module_0.Validation(var_0, bool_0)
    var_1 = var_0.to_maybe()
    var_2 = validation_0.__eq__(var_1)
    validation_1.map(var_0)


def test_case_13():
    bytes_0 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.to_either()
    var_2 = validation_0.__str__()
    var_3 = validation_0.__str__()
    var_4 = var_0.__str__()
    var_2.bind(var_3)


def test_case_14():
    bytes_0 = b"9\x1d"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = module_0.Validation(validation_0, validation_0)
    var_1 = validation_0.to_either()
    var_2 = validation_0.__str__()
    var_3 = var_0.__eq__(validation_0)
    var_4 = var_1.to_maybe()
    var_5 = var_4.to_try()
    var_2.ap(var_2)
