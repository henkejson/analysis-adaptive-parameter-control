# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    str_0 = ".W&UX[hH\rV>vk\x0bq"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(str_0)


def test_case_1():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.__str__()
    var_0.to_lazy()


def test_case_2():
    bytes_0 = b"\xbar\x0c\x1b\xe0"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, set_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_maybe()
    var_2 = var_1.__eq__(none_type_0)
    var_3 = var_2.__str__()
    var_3.ap(bytes_0)


def test_case_3():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_maybe()
    var_1.map(var_1)


def test_case_4():
    bytes_0 = b"\xbar\x0c\x1b\xe0"
    bytes_1 = b"\xffIs\x19\xc5\xbf\x88\xc6\xd0\xe6G\xc5\x8a\x85\xc5\x8aIG\x07"
    validation_0 = module_0.Validation(bytes_0, bytes_1)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.is_success()


def test_case_5():
    str_0 = "K2nX&"
    validation_0 = module_0.Validation(str_0, str_0)


def test_case_6():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.is_fail()


def test_case_7():
    bytes_0 = b"\xbar\x0c\x1b\xe0"
    bytes_1 = b"\xffIs\x19\xc5\xbf\x88\xc6\xd0\xe6G\xc5\x8a\x85\xc5\x8aIG\x07"
    validation_0 = module_0.Validation(bytes_0, bytes_1)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.__eq__(bytes_0)
    var_2 = validation_0.to_maybe()
    var_3 = var_2.to_try()
    var_4 = validation_0.to_lazy()
    validation_1 = module_0.Validation(var_2, var_2)
    validation_2 = module_0.Validation(var_0, var_4)
    validation_2.map(var_1)


def test_case_8():
    str_0 = "&jL\\D5-O)`"
    bytes_0 = b"pBe1\xd2\xaf\x0eg\x1e\xeb"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_0.bind(str_0)


def test_case_9():
    str_0 = "K2nX&"
    validation_0 = module_0.Validation(str_0, str_0)
    validation_0.ap(str_0)


def test_case_10():
    bytes_0 = b"\xbar\x0c\x1b\xe0"
    bytes_1 = b""
    set_0 = {bytes_0, bytes_0, bytes_1, bytes_1}
    bytes_2 = b"\x82\xe0"
    validation_0 = module_0.Validation(bytes_2, bytes_2)
    var_0 = validation_0.__eq__(set_0)
    var_1 = validation_0.to_box()


def test_case_11():
    str_0 = "N6VG{"
    set_0 = {str_0}
    validation_0 = module_0.Validation(set_0, str_0)
    var_0 = validation_0.to_lazy()
    var_0.is_fail()


def test_case_12():
    bool_0 = True
    tuple_0 = ()
    none_type_0 = None
    validation_0 = module_0.Validation(tuple_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_maybe()
    var_2 = var_1.to_lazy()
    var_3 = var_2.map(bool_0)
    var_3.is_fail()


def test_case_13():
    none_type_0 = None
    list_0 = [none_type_0]
    validation_0 = module_0.Validation(list_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_0.to_try()


def test_case_14():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)


def test_case_15():
    bytes_0 = b"\xbar\x0c\x1b\xe0"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    validation_0 = module_0.Validation(set_0, set_0)
    validation_1 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_1.to_either()
    var_1 = validation_1.__eq__(validation_1)
    var_2 = var_1.__str__()
    bytes_0.to_try()


def test_case_16():
    bytes_0 = b"\xbar\x0c\x1b\xe0"
    bytes_1 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_1)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.__eq__(bytes_0)
    var_2 = validation_0.to_maybe()
    bytes_1.to_try()


def test_case_17():
    bytes_0 = b"\xbar\x0c\x1b\xe0"
    bytes_1 = b"\xffIs\x19\xc5\xbf\x88\xc6\xd0\xe6G\xc5\x8a\x85\xc5\x8aIG\x07"
    none_type_0 = None
    validation_0 = module_0.Validation(bytes_0, bytes_1)
    str_0 = "\n    Min is a Monoid that will combines 2 numbers, resulting in the smallest of the two.\n    "
    validation_1 = module_0.Validation(str_0, bytes_0)
    var_0 = validation_1.__eq__(validation_0)
    var_1 = var_0.__eq__(validation_0)
    var_2 = validation_1.to_maybe()
    var_3 = var_2.to_try()
    var_4 = validation_0.to_box()
    var_5 = var_2.to_lazy()
    validation_2 = module_0.Validation(var_1, none_type_0)
    var_5.is_success()
