# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(none_type_0)


def test_case_1():
    int_0 = 1918
    list_0 = [int_0, int_0]
    str_0 = "XU1e\tN.]?J\x0cF`8i>"
    tuple_0 = (list_0, list_0, str_0)
    set_0 = set()
    validation_0 = module_0.Validation(tuple_0, set_0)
    var_0 = validation_0.__str__()
    var_0.to_lazy()


def test_case_2():
    bool_0 = False
    list_0 = [bool_0]
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_maybe()


def test_case_3():
    str_0 = "}_b%-Ey++P"
    validation_0 = module_0.Validation(str_0, str_0)


def test_case_4():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.is_success()


def test_case_5():
    str_0 = "\n        Evaluate function and memoize her output or return memoized value when function was evaluated.\n\n        :returns: result of function in Lazy\n        :rtype: A\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.is_fail()


def test_case_6():
    none_type_0 = None
    none_type_1 = None
    validation_0 = module_0.Validation(none_type_1, none_type_1)
    validation_0.map(none_type_0)


def test_case_7():
    bool_0 = False
    bytes_0 = b"\xc3\xae\x12\xae\xd3\xc5\xbf\x0eV~\x7f\x96y"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_0.bind(bool_0)


def test_case_8():
    bool_0 = False
    float_0 = 3464.77
    dict_0 = {float_0: float_0, bool_0: float_0}
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, dict_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.ap(dict_0)
    tuple_0 = (bool_0, dict_0, dict_0)
    validation_1 = module_0.Validation(float_0, tuple_0)
    var_2 = validation_1.to_maybe()
    set_0 = set()
    validation_2 = module_0.Validation(set_0, bool_0)
    validation_2.ap(tuple_0)


def test_case_9():
    str_0 = "7g~hu%NY"
    str_1 = ".S3RVl1`]B3EYp8x"
    validation_0 = module_0.Validation(str_1, str_1)
    var_0 = validation_0.to_box()
    var_1 = var_0.__eq__(str_0)
    var_1.to_lazy()


def test_case_10():
    bytes_0 = b"\xfd)#\x13\xcez*\x9e\xaeCU\xf3^\xd0\xbb\x82]"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.is_fail()
    var_2 = var_1.__str__()


def test_case_11():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_try()
    var_2 = var_0.to_box()
    var_3 = var_0.__str__()
    validation_0.map(validation_0)


def test_case_12():
    bytes_0 = b"%"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_try()
    var_0.to_box()


def test_case_13():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_box()
    validation_1 = module_0.Validation(tuple_0, tuple_0)
    var_2 = validation_1.to_try()
    var_3 = var_2.__eq__(tuple_0)
    var_3.to_try()


def test_case_14():
    bool_0 = False
    float_0 = 3464.77
    dict_0 = {float_0: float_0, bool_0: float_0}
    tuple_0 = (bool_0, dict_0, dict_0)
    validation_0 = module_0.Validation(float_0, tuple_0)
    var_0 = validation_0.to_maybe()
    validation_1 = validation_0.__str__()
    validation_1.ap(tuple_0)


def test_case_15():
    str_0 = "\n        Evaluate function and memoize her output or return memoized value when ffnction was evaluated.\n\n        :Zeturns: result of function in Lazy\n        :rtype: A\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = module_0.Validation(validation_0, str_0)
    var_1 = var_0.__eq__(var_0)


def test_case_16():
    int_0 = 0
    validation_0 = module_0.Validation(int_0, int_0)
    none_type_0 = None
    var_0 = validation_0.__eq__(none_type_0)
    none_type_1 = None
    validation_1 = module_0.Validation(validation_0, none_type_1)
    var_1 = validation_1.__eq__(validation_0)
    var_2 = validation_0.to_lazy()
    dict_0 = var_0.__eq__(none_type_1)
    validation_0.is_fail()


def test_case_17():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_either()
    validation_0.bind(validation_0)
