# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(none_type_0)
    var_0.to_either()


def test_case_1():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_try()
    var_1 = validation_0.is_success()
    var_2 = validation_0.__str__()
    validation_0.ap(var_2)


def test_case_2():
    int_0 = -3197
    list_0 = [int_0, int_0, int_0]
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    validation_0 = module_0.Validation(dict_0, bool_0)
    list_1 = [validation_0, dict_0]
    validation_1 = module_0.Validation(list_1, dict_0)
    var_0 = validation_1.__str__()
    var_1 = var_0.__eq__(list_0)
    var_1.to_try()


def test_case_3():
    none_type_0 = None
    str_0 = "`p\\c>,vk3DcK4q"
    validation_0 = module_0.Validation(none_type_0, str_0)
    var_0 = validation_0.is_fail()
    var_1 = validation_0.to_either()
    validation_1 = module_0.Validation(str_0, var_1)
    bool_0 = False
    var_2 = validation_0.to_try()
    none_type_1 = None
    validation_2 = module_0.Validation(none_type_1, bool_0)
    validation_2.to_either()


def test_case_4():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_maybe()
    tuple_1 = ()
    set_0 = {tuple_1}
    validation_1 = module_0.Validation(set_0, tuple_1)
    var_1 = validation_1.to_either()
    var_2 = validation_0.to_maybe()
    validation_1.map(var_2)


def test_case_5():
    bytes_0 = b"\tq"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.map(bytes_0)


def test_case_6():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)


def test_case_7():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.to_maybe()


def test_case_8():
    bool_0 = True
    list_0 = [bool_0]
    none_type_0 = None
    validation_0 = module_0.Validation(list_0, none_type_0)
    validation_0.is_fail()


def test_case_9():
    bytes_0 = b"\x8foQ3"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_1 = module_0.Validation(bytes_0, bytes_0)
    validation_1.map(bytes_0)


def test_case_10():
    none_type_0 = None
    set_0 = set()
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.bind(set_0)


def test_case_11():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.to_either()
    var_2 = var_1.to_lazy()
    var_3 = var_2.to_either()
    var_3.is_fail()


def test_case_12():
    str_0 = "\n        :param semigroup: other semigroup to concat\n        :type semigroup: Sum[B]\n        :returns: new Sum with sum of concat semigroups values\n        :rtype: Sum[A]\n        "
    tuple_0 = (str_0, str_0)
    validation_0 = module_0.Validation(tuple_0, str_0)
    var_0 = validation_0.to_lazy()
    var_0.is_fail()


def test_case_13():
    complex_0 = -239.9 + 358.647657j
    list_0 = [complex_0, complex_0, complex_0]
    none_type_0 = None
    validation_0 = module_0.Validation(complex_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.bind(complex_0)
    var_2 = var_1.bind(list_0)
    var_2.to_maybe()


def test_case_14():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    validation_0 = module_0.Validation(list_0, bool_0)
    validation_1 = module_0.Validation(validation_0, list_0)
    validation_0.to_try()


def test_case_15():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    complex_0 = -2254.4 - 128j
    tuple_1 = (complex_0,)
    set_0 = {tuple_1, complex_0}
    validation_1 = module_0.Validation(set_0, tuple_1)
    var_0 = validation_1.__eq__(validation_0)
    var_1 = validation_0.to_maybe()
    var_2 = validation_1.to_box()
    int_0 = -1205
    validation_2 = module_0.Validation(set_0, var_2)
    validation_3 = module_0.Validation(int_0, int_0)
    var_0.to_lazy()


def test_case_16():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_0.to_try()
