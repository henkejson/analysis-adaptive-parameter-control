# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bytes_0 = b"\r\xc5]\xce\x978k"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_maybe()
    var_2 = var_1.to_box()
    var_3 = var_2.to_lazy()
    validation_1 = module_0.Validation(validation_0, validation_0)
    var_4 = var_2.__eq__(var_2)
    var_5 = var_2.__str__()
    var_5.is_success()


def test_case_1():
    bytes_0 = b"\xd6\xc2\xc8+Zu\xbb\x8f"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(bytes_0)
    var_0.is_success()


def test_case_2():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)


def test_case_3():
    bytes_0 = b"\r\xc5]\xce\x978k"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()


def test_case_4():
    bytes_0 = b"\xd6\xc2\xc8+Zu\xbb\x8f"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(bytes_0)
    validation_0.is_fail()


def test_case_5():
    str_0 = "\rDz%A3+boAQ/"
    validation_0 = module_0.Validation(str_0, str_0)
    validation_0.map(str_0)


def test_case_6():
    int_0 = -1452
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.bind(validation_0)


def test_case_7():
    int_0 = 88
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.ap(validation_0)


def test_case_8():
    str_0 = "iD]SiESh`S"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_box()


def test_case_9():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_lazy()


def test_case_10():
    complex_0 = 1649.6936875861459 + 668.7710635850395j
    validation_0 = module_0.Validation(complex_0, complex_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_box()
    var_2 = var_1.to_maybe()
    var_3 = var_2.to_box()
    validation_1 = module_0.Validation(var_3, complex_0)


def test_case_11():
    bytes_0 = b"\r\xc5]\xce\x1c\x86\x05\x978k"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_try()


def test_case_12():
    list_0 = []
    list_1 = []
    validation_0 = module_0.Validation(list_0, list_1)
    var_0 = validation_0.to_box()
    var_1 = var_0.to_either()
    var_2 = var_0.to_lazy()
    var_3 = var_1.__str__()
    var_4 = validation_0.to_maybe()
    var_3.to_either()


def test_case_13():
    bytes_0 = b"\r\xc5]\xce\x978k"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.to_either()
    var_2 = validation_0.is_success()
    var_2.to_either()


def test_case_14():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.__str__()
    var_0.to_box()


def test_case_15():
    bytes_0 = b"\r\xc5]\xce\x978k"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_box()
    var_2 = var_1.__eq__(validation_0)
    var_3 = validation_0.__eq__(var_2)
    validation_1 = module_0.Validation(bytes_0, var_0)
    validation_2 = module_0.Validation(validation_1, bytes_0)
    validation_3 = module_0.Validation(validation_1, validation_2)
    var_4 = validation_3.__eq__(validation_0)
    var_3.is_success()


def test_case_16():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_either()
    bool_0 = True
    validation_1 = module_0.Validation(bool_0, bool_0)
    var_1 = var_0.__eq__(var_0)
    var_2 = validation_1.__eq__(var_1)
    var_3 = validation_1.to_box()
    var_4 = var_2.__eq__(bool_0)
    var_4.is_success()
