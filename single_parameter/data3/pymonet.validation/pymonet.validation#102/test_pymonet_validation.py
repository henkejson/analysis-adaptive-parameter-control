# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0
import builtins as module_1


def test_case_0():
    bool_0 = False
    bytes_0 = b"tIz\xa2\xa8\x1e\xb6\xe5\x0e^\x8e\x1c"
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.__eq__(bytes_0)
    var_0.map(bool_0)


def test_case_1():
    bytes_0 = b"tIz\xa2\xa8\x1e\xb6\xe5\x0e^\x8e\x1c"
    set_0 = {bytes_0, bytes_0}
    validation_0 = module_0.Validation(bytes_0, set_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_maybe()
    var_2 = var_1.bind(bytes_0)
    var_3 = var_2.to_lazy()


def test_case_2():
    none_type_0 = None
    none_type_0.to_maybe()


def test_case_3():
    bytes_0 = b"\xe6\x86\x84K\xa3{D\xc8\xfc\x15"
    validation_0 = module_0.Validation(bytes_0, bytes_0)


def test_case_4():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.to_maybe()


def test_case_5():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.is_fail()


def test_case_6():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    bool_0 = True
    tuple_0 = ()
    validation_1 = module_0.Validation(bool_0, tuple_0)
    validation_1.map(validation_0)


def test_case_7():
    bool_0 = False
    bytes_0 = b"tIz\xa2\xa8\x1e\xb6\xe5\x0e^\x8e\x1c"
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.__eq__(bytes_0)
    validation_0.bind(bool_0)


def test_case_8():
    none_type_0 = None
    str_0 = "\n        Transform Maybe to Try.\n\n        :returns: successfully Try with previous value when Maybe is not empty, othercase not successfully Try with None\n        :rtype: Try[A]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    validation_0.ap(none_type_0)


def test_case_9():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    validation_0 = module_0.Validation(dict_0, bool_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.to_try()
    var_1.to_either()


def test_case_10():
    float_0 = -504.0541
    validation_0 = module_0.Validation(float_0, float_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_box()
    bytes_0 = b"tIz\xa2\xa8\x1e\xb6\xe5\x0e^\x8e\x1c"
    tuple_0 = ()
    validation_1 = module_0.Validation(tuple_0, tuple_0)
    var_2 = validation_1.__eq__(bytes_0)
    var_2.map(var_2)


def test_case_11():
    bool_0 = False
    tuple_0 = (bool_0,)
    none_type_0 = None
    validation_0 = module_0.Validation(tuple_0, none_type_0)
    validation_0.to_try()


def test_case_12():
    object_0 = module_1.object()
    bytes_0 = b"\xc2fN\x1f\xfc\xb3\x91rz\xee\x0f>J2\xa8T~\x14"
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.__str__()
    var_0.map(bytes_0)


def test_case_13():
    bytes_0 = b"\x00\xe4"
    tuple_0 = (bytes_0,)
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, tuple_0)
    var_0 = validation_0.__str__()
    var_0.is_success()


def test_case_14():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.__eq__(validation_0)
    var_0.to_either()


def test_case_15():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_either()
    var_1.is_success()


def test_case_16():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_either()
    var_0.to_either()


def test_case_17():
    float_0 = -477.8660667869662
    validation_0 = module_0.Validation(float_0, float_0)
    var_0 = validation_0.to_lazy()
    validation_1 = module_0.Validation(validation_0, validation_0)
    var_1 = validation_1.__eq__(validation_0)
    var_2 = var_0.to_either()
    validation_0.is_fail()
