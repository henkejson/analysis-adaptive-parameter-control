# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    float_0 = -1378.2079
    float_1 = 2215.8885
    validation_0 = module_0.Validation(float_1, float_1)
    var_0 = validation_0.__eq__(float_0)
    bytes_0 = b"[+\xe8"
    validation_1 = module_0.Validation(var_0, bytes_0)
    var_1 = validation_0.to_lazy()


def test_case_1():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.__str__()
    var_0.to_box()


def test_case_2():
    bytes_0 = b"\xfel\xaa'\x17}\xa3"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    var_0.to_try()


def test_case_3():
    bytes_0 = b"k\x996yv\xa8\xdeM`\xb7\xdc\x14\xb7 ]\x8a\xeb"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.__str__()
    var_2 = validation_0.to_either()
    float_0 = 2215.8885
    validation_1 = module_0.Validation(float_0, bytes_0)
    var_3 = validation_0.__eq__(validation_0)
    validation_2 = module_0.Validation(validation_0, var_1)


def test_case_4():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)


def test_case_5():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.to_maybe()


def test_case_6():
    float_0 = -8010.9586
    dict_0 = {}
    validation_0 = module_0.Validation(float_0, dict_0)
    var_0 = validation_0.is_success()
    validation_1 = module_0.Validation(var_0, var_0)
    validation_1.is_fail()


def test_case_7():
    none_type_0 = None
    none_type_1 = None
    validation_0 = module_0.Validation(none_type_1, none_type_1)
    validation_1 = module_0.Validation(none_type_0, validation_0)
    validation_0.map(none_type_0)


def test_case_8():
    bool_0 = True
    list_0 = []
    validation_0 = module_0.Validation(bool_0, list_0)
    var_0 = validation_0.to_try()
    validation_0.bind(bool_0)


def test_case_9():
    none_type_0 = None
    str_0 = "All"
    validation_0 = module_0.Validation(str_0, str_0)
    validation_0.ap(none_type_0)


def test_case_10():
    bytes_0 = b"k\x996yv\xa8\xdeM`\xb7\xdc\x14\xb7 ]\x8a\xeb"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_either()
    str_0 = "\n0Q<F|SXmL7(\x0br}o|:"
    var_2 = var_1.map(str_0)
    var_3 = validation_0.is_fail()
    var_4 = validation_0.to_lazy()
    var_5 = var_4.to_try()
    var_6 = var_4.bind(var_3)
    var_7 = var_2.to_maybe()
    validation_0.bind(var_2)


def test_case_11():
    list_0 = []
    var_0 = module_0.Validation(list_0, list_0)
    var_1 = var_0.to_maybe()
    var_1.is_success()


def test_case_12():
    float_0 = -2225.0
    set_0 = {float_0}
    list_0 = [set_0, float_0]
    list_1 = [list_0, list_0, set_0]
    validation_0 = module_0.Validation(list_1, list_0)
    var_0 = validation_0.to_maybe()


def test_case_13():
    tuple_0 = ()
    complex_0 = 970.15018 + 1655.05459j
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.__eq__(complex_0)
    var_1 = validation_0.to_either()
    var_2 = var_1.to_box()
    var_3 = var_0.__str__()
    var_4 = var_1.to_box()
    var_3.to_lazy()


def test_case_14():
    bytes_0 = b"k\x996yv\xa8\xdeM`\xb7\xdc\x14\xb7 ]\x8a\xeb"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_either()
    str_0 = "\n0Q<F|SXmL7(\x0bo:"
    var_2 = var_1.map(str_0)
    var_3 = validation_0.is_fail()
    none_type_0 = None
    validation_1 = module_0.Validation(var_2, none_type_0)
    var_4 = validation_0.__eq__(validation_1)
    var_5 = var_2.bind(var_4)
    var_6 = var_5.__str__()
    var_7 = var_6.__str__()
    var_6.to_either()
