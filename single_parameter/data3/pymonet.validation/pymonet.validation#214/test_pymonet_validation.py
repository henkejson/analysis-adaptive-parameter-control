# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0
import builtins as module_1


def test_case_0():
    bytes_0 = b"O\x8b-\x1b\xa2"
    int_0 = -2712
    validation_0 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.__eq__(bytes_0)


def test_case_1():
    bytes_0 = b"\xcfR\xb4\x9b\x89\x98\x11\xd5\xf7!GY\xfe\xb5\xdf"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_maybe()
    var_2 = validation_0.to_maybe()
    var_3 = validation_0.__eq__(var_2)
    validation_1 = module_0.Validation(bytes_0, var_3)
    validation_2 = module_0.Validation(var_0, validation_0)


def test_case_2():
    bool_0 = False
    tuple_0 = ()
    complex_0 = 2316.30584 + 1033.97699j
    set_0 = {tuple_0, complex_0}
    validation_0 = module_0.Validation(set_0, tuple_0)
    var_0 = validation_0.to_either()
    var_0.bind(bool_0)


def test_case_3():
    str_0 = "+?5Br~NV8"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()


def test_case_4():
    int_0 = 6476
    validation_0 = module_0.Validation(int_0, int_0)


def test_case_5():
    int_0 = 6476
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.is_fail()


def test_case_6():
    bytes_0 = b"\xa1;q\xf4m\xcbY\xf4\x8a`'"
    str_0 = "y>,jx;6Za,"
    none_type_0 = None
    validation_0 = module_0.Validation(str_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_maybe()
    validation_1 = module_0.Validation(var_1, var_0)
    validation_1.map(bytes_0)


def test_case_7():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.bind(none_type_0)


def test_case_8():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.ap(none_type_0)


def test_case_9():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_box()
    var_0.is_success()


def test_case_10():
    bytes_0 = b"\xcfR\xb4\x9b\x89\x98\x11\xd5\xf7!GY\xfe\xb5\xdf"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_try()
    var_2 = validation_0.to_maybe()
    var_3 = validation_0.to_maybe()
    var_4 = validation_0.__eq__(var_3)
    validation_1 = var_4.__str__()
    validation_1.to_lazy()


def test_case_11():
    bytes_0 = b"\xcfR\xb4\x9b\x89\x98\x11\xd5\xf7!GY\xfe\xb5\xdf"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    bool_0 = False
    var_1 = validation_0.to_try()
    var_2 = validation_0.to_maybe()
    var_3 = validation_0.to_either()
    var_4 = validation_0.__eq__(validation_0)
    var_5 = var_4.__eq__(var_1)
    var_6 = validation_0.to_maybe()
    var_7 = validation_0.__eq__(var_6)
    validation_1 = module_0.Validation(bytes_0, bool_0)
    var_8 = validation_1.to_lazy()
    var_9 = var_8.to_box()
    var_10 = var_2.__str__()
    validation_1.map(bool_0)


def test_case_12():
    str_0 = ""
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = module_1.object()
    var_1.map(validation_0)


def test_case_13():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_0.to_either()


def test_case_14():
    bytes_0 = b"\xcfR\xb4\x9b\x89\x98\x11\xd5\xf7!GY\xfe\xb5\xdf"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    bool_0 = True
    var_1 = validation_0.to_try()
    var_2 = validation_0.to_maybe()
    var_3 = validation_0.__eq__(validation_0)
    var_4 = var_3.__eq__(var_1)
    var_5 = module_0.Validation(bool_0, var_1)
    var_6 = validation_0.__eq__(var_5)
    var_4.to_lazy()


def test_case_15():
    bytes_0 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    validation_0.map(var_0)
