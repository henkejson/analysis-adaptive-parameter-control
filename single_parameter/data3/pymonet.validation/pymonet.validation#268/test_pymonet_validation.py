# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bool_0 = True
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, bool_0)
    var_0 = validation_0.__eq__(bool_0)
    var_0.to_box()


def test_case_1():
    str_0 = "\n        :param semigroup: other semigroup to concat\n        :type semi6roup: Last[B]\n        :returns: new Last with last value\n        :rtype: Last[A]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.is_fail()
    var_2 = validation_0.__str__()
    var_3 = validation_0.__eq__(validation_0)
    var_0.is_fail()


def test_case_2():
    bool_0 = False
    tuple_0 = (bool_0,)
    bool_1 = False
    int_0 = -2257
    tuple_1 = (bool_1, bool_1, int_0)
    validation_0 = module_0.Validation(tuple_1, tuple_1)
    var_0 = validation_0.to_try()
    var_1 = var_0.bind(tuple_0)
    list_0 = []
    validation_1 = module_0.Validation(list_0, list_0)
    var_2 = validation_1.to_either()
    validation_1.bind(validation_1)


def test_case_3():
    bytes_0 = b"\xc6\x9f\xdc\xd6\xd9\x98\xe0\xdc\x9d\x82^"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_maybe()
    var_1.is_fail()


def test_case_4():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_maybe()
    var_0.is_fail()


def test_case_5():
    bytes_0 = b"\xabYR\xf1D(\x14|}\xe4+p\x8b"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.is_success()
    var_2 = validation_0.to_maybe()
    var_3 = var_2.to_lazy()
    validation_0.ap(var_2)


def test_case_6():
    float_0 = 1290.159024
    validation_0 = module_0.Validation(float_0, float_0)


def test_case_7():
    str_0 = "\n        :param semigroup: other semigroup to concat\n        :type semi6roup: Last[B]\n        :returns: new Last with last value\n        :rtype: Last[A]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.is_fail()
    var_2 = validation_0.__eq__(validation_0)
    var_0.is_fail()


def test_case_8():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.map(validation_0)


def test_case_9():
    bytes_0 = b"\x87\x82\xf5+\xcf\xb2\xffP\x00 \xa9\xa2%\xdc\xc5\xd4\xfa\x7f\xb8"
    list_0 = [bytes_0]
    int_0 = 1
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.bind(list_0)


def test_case_10():
    bytes_0 = b"\xcc\xd9"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.to_maybe()
    var_1.is_fail()


def test_case_11():
    str_0 = "\n        :param semigroup: other semigroup to concat\n        :type semi6roup: Last[B]\n        :returns: new Last with last value\n        :rtype: Last[A]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.__str__()
    validation_1 = module_0.Validation(var_0, validation_0)
    var_2 = validation_0.__eq__(validation_0)
    var_2.is_fail()


def test_case_12():
    str_0 = "\n        :param semigroup: other semigroup to concat\n        :type semigroup: Last[B]\n        :returns: new Last with last value\n        :rtype: Last[A]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_lazy()
    var_2 = var_1.map(str_0)
    var_3 = var_1.map(var_1)
    var_4 = validation_0.to_lazy()
    var_5 = var_4.to_maybe()
    var_4.is_success()


def test_case_13():
    str_0 = "xf0*v\r;"
    none_type_0 = None
    validation_0 = module_0.Validation(str_0, none_type_0)
    validation_0.to_try()


def test_case_14():
    str_0 = "\n        :param semigroup: other semigroup to concat\n        :type semi6roup: Last[B]\n        :returns: new Last with last value\n        :rtype: Last[A]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(validation_0)
    str_0.is_fail()


def test_case_15():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.__str__()
    validation_0.bind(validation_0)


def test_case_16():
    str_0 = "\n        :param semigroup: other semigroup to concat\n        :type semi6roup: Last[B]\n        :returns: new Last with last value\n        :rtype: Last[A]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.__str__()
    validation_1 = module_0.Validation(var_0, validation_0)
    var_2 = validation_1.__eq__(validation_0)
    var_2.to_maybe()
