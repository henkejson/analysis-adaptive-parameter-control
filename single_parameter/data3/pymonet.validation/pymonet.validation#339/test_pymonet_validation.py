# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    str_0 = "#DZ8S]d8AQ*%_qB0$"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.__eq__(validation_0)
    var_2 = var_1.__eq__(var_0)
    validation_1 = module_0.Validation(var_1, validation_0)
    var_2.bind(validation_1)


def test_case_1():
    bytes_0 = b">\x11\x97\xb9\xf4bX/ml\x7f\x9e\xc0"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(bytes_0)
    var_0.to_try()


def test_case_2():
    str_0 = "#DZ8S]d8AQ*%_qB0$"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_maybe()
    validation_0.bind(validation_0)


def test_case_3():
    str_0 = "#DZ8S]d8AQ*%_qB0$"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.bind(validation_0)
    var_2 = validation_0.is_fail()
    validation_0.map(validation_0)


def test_case_4():
    int_0 = 2043
    validation_0 = module_0.Validation(int_0, int_0)


def test_case_5():
    none_type_0 = None
    int_0 = 6
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.map(none_type_0)


def test_case_6():
    bytes_0 = b">\x11\x97\xb9\xf4bX/ml\x7f\x9e\xc0"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(bytes_0)
    validation_0.ap(bytes_0)


def test_case_7():
    bytes_0 = b"\x81\x9b\xdf${\x0e\xc351\xe9\x14\xfa\xcf\x9b"
    set_0 = {bytes_0, bytes_0}
    validation_0 = module_0.Validation(set_0, set_0)
    bool_0 = False
    validation_1 = module_0.Validation(bool_0, set_0)
    var_0 = validation_0.to_box()
    var_0.is_success()


def test_case_8():
    complex_0 = -4292.610608265958 + 2111j
    tuple_0 = (complex_0, complex_0)
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, tuple_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_lazy()


def test_case_9():
    str_0 = "\rW_"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.is_success()
    var_1 = validation_0.to_try()
    var_1.to_box()


def test_case_10():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    bytes_0 = b"\x8f\x90KLM\x1b\xbf\x99zs\xca"
    validation_1 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_1.__eq__(validation_0)
    validation_1.bind(bool_0)


def test_case_11():
    str_0 = ""
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    var_0.map(validation_0)


def test_case_12():
    str_0 = "#DZ8S]d8AQ*%_qB0$"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_box()
    validation_1 = module_0.Validation(str_0, str_0)
    var_2 = validation_1.__str__()
    var_3 = validation_1.__eq__(validation_1)
    var_4 = validation_1.to_either()
    validation_2 = module_0.Validation(var_3, validation_1)
    var_5 = var_4.bind(validation_2)
    list_0 = [var_4, var_2]
    validation_3 = module_0.Validation(list_0, validation_2)
    var_6 = validation_3.to_box()
    var_2.to_either()


def test_case_13():
    int_0 = 2043
    validation_0 = module_0.Validation(int_0, int_0)
    str_0 = "^A[]=BKW<BZqA$%M"
    validation_1 = module_0.Validation(str_0, str_0)
    var_0 = validation_1.to_try()
    list_0 = []
    validation_2 = module_0.Validation(var_0, list_0)
    var_1 = validation_2.__str__()
    var_1.to_either()


def test_case_14():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_lazy()
    validation_1 = module_0.Validation(tuple_0, tuple_0)
    var_1 = validation_1.to_either()
    var_2 = var_1.to_try()
    var_2.is_fail()
