# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    str_0 = "UD"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.__eq__(validation_0)
    var_0.is_fail()


def test_case_1():
    none_type_0 = None
    none_type_1 = None
    validation_0 = module_0.Validation(none_type_1, none_type_1)
    var_0 = validation_0.__eq__(none_type_0)
    var_0.to_maybe()


def test_case_2():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0]
    validation_0 = module_0.Validation(list_0, tuple_0)
    var_0 = validation_0.__str__()
    var_0.is_fail()


def test_case_3():
    bytes_0 = b"\xb4>"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    var_0.bind(bytes_0)


def test_case_4():
    str_0 = '1!6("C\x0bN{V'
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()


def test_case_5():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_6():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.to_maybe()


def test_case_7():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.is_fail()


def test_case_8():
    none_type_0 = None
    bytes_0 = b"/\xed\xce\x16\xc6"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_0.map(none_type_0)


def test_case_9():
    bool_0 = False
    bool_1 = True
    set_0 = {bool_1, bool_1}
    none_type_0 = None
    validation_0 = module_0.Validation(set_0, none_type_0)
    validation_0.bind(bool_0)


def test_case_10():
    bytes_0 = b"\x0f\xd2\x88\xc3o\xe7\xfe\x03"
    bool_0 = False
    bytes_1 = b"\xd5"
    tuple_0 = (bytes_0, bool_0, bool_0, bytes_1)
    str_0 = ")1=@HP"
    bytes_2 = b"A)\x06.C\xb1 \x92!V\xc8\xfa\x90"
    tuple_1 = (bytes_2,)
    complex_0 = 1844.8777 - 196j
    tuple_2 = (str_0, tuple_1, complex_0, bytes_2)
    validation_0 = module_0.Validation(tuple_2, tuple_1)
    validation_0.ap(tuple_0)


def test_case_11():
    str_0 = '1!6("C\x0bN{V'
    set_0 = {str_0, str_0, str_0}
    validation_0 = module_0.Validation(set_0, str_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.to_maybe()


def test_case_12():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    validation_0.to_maybe()


def test_case_13():
    none_type_0 = None
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.map(none_type_0)
    var_1.to_maybe()


def test_case_14():
    str_0 = "\n        Transform Validation to Try.\n\n        :returns: successfully Try with Validation value value. Try is successful when Validation has no errors\n        :rtype: Try[A]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_try()
    var_1 = validation_0.to_either()
    var_2 = validation_0.__eq__(var_0)
    var_1.is_success()


def test_case_15():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_try()
    var_1.to_either()


def test_case_16():
    str_0 = "f"
    tuple_0 = ()
    validation_0 = module_0.Validation(str_0, tuple_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.__str__()
    var_1.is_fail()


def test_case_17():
    str_0 = "\n        Transform Validation to Try.\n\n        :returns: successf`lly Try with Validation value value. Try is successful when Validation has no errors\n        :rtype: Try[A*\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = module_0.Validation(var_0, var_0)
    var_2 = var_1.__eq__(validation_0)
    var_3 = var_1.to_lazy()
    var_4 = validation_0.to_lazy()
    var_1.to_try()
