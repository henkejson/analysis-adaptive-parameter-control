# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bool_0 = False
    bool_1 = True
    validation_0 = module_0.Validation(bool_0, bool_1)
    var_0 = validation_0.__eq__(bool_0)
    var_0.bind(var_0)


def test_case_1():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_lazy()


def test_case_2():
    bytes_0 = b"\x8cT\x8eL\xc8n\x05\xf7\x99\xc4m\x1bkJ\xd9,"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.__str__()


def test_case_3():
    bytes_0 = b"\x8cT\x8eL\xc8n\x05\xf7\x99\xc4m\x1bkJ\xd9,"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    validation_1.__str__()


def test_case_4():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_5():
    bytes_0 = b"Y\x19\xaae!\x8a\xca\xef\xf1\x1e\x87\xf3\xfc?\xe5LSG\x8b\xf9"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()


def test_case_6():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.is_fail()


def test_case_7():
    int_0 = 1992
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.map(int_0)


def test_case_8():
    str_0 = ""
    none_type_0 = None
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, str_0)
    var_0 = validation_0.__eq__(none_type_0)
    validation_0.bind(str_0)


def test_case_9():
    none_type_0 = None
    none_type_1 = None
    validation_0 = module_0.Validation(none_type_1, none_type_1)
    validation_0.ap(none_type_0)


def test_case_10():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_box()
    var_0.is_success()


def test_case_11():
    none_type_0 = None
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_either()
    var_1.bind(none_type_0)


def test_case_12():
    bool_0 = False
    none_type_0 = None
    validation_0 = module_0.Validation(bool_0, none_type_0)
    validation_0.to_try()


def test_case_13():
    complex_0 = -1509.7258 + 62.807113645538024j
    validation_0 = module_0.Validation(complex_0, complex_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_0.to_maybe()


def test_case_14():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    complex_0 = -1509.7258 + 62.807113645538024j
    var_0 = validation_0.to_lazy()
    validation_1 = module_0.Validation(complex_0, complex_0)
    str_0 = " U"
    var_1 = validation_1.__eq__(validation_0)
    var_2 = validation_1.__eq__(str_0)
    validation_1.to_maybe()


def test_case_15():
    str_0 = "!~}<;,8RjL*("
    set_0 = set()
    validation_0 = module_0.Validation(str_0, set_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_either()
    var_2 = var_1.__str__()
    var_2.to_maybe()


def test_case_16():
    set_0 = set()
    bytes_0 = b"\x1cR>\xc2L\x02\x87\x99\xf9\xf3E&\x1eg\xa8bj\xab\xf7"
    validation_0 = module_0.Validation(bytes_0, set_0)
    var_0 = validation_0.__str__()
    var_0.to_try()
