# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    none_type_0 = None
    bool_0 = True
    float_0 = -3410.996
    validation_0 = module_0.Validation(float_0, float_0)
    var_0 = validation_0.__eq__(bool_0)
    var_0.map(none_type_0)


def test_case_1():
    int_0 = 2225
    set_0 = {int_0, int_0, int_0, int_0}
    list_0 = [set_0, set_0]
    validation_0 = module_0.Validation(list_0, set_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.__str__()


def test_case_2():
    str_0 = "u$"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, str_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.to_either()
    var_2 = var_1.to_try()
    validation_1 = module_0.Validation(var_2, var_1)
    validation_2 = module_0.Validation(str_0, none_type_0)
    validation_2.is_success()


def test_case_3():
    str_0 = "\n        Transform Either to Box.\n\n        :returns: Box monad with previous value\n        :rtype: Box[A]\n        "
    dict_0 = {str_0: str_0, str_0: str_0}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_maybe()


def test_case_4():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)


def test_case_5():
    float_0 = -2626.345
    validation_0 = module_0.Validation(float_0, float_0)
    validation_0.to_try()


def test_case_6():
    int_0 = 1471
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.is_fail()


def test_case_7():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_0.map(none_type_0)


def test_case_8():
    int_0 = 681
    none_type_0 = None
    validation_0 = module_0.Validation(int_0, none_type_0)
    validation_0.bind(none_type_0)


def test_case_9():
    bool_0 = True
    str_0 = "\n        Call success_callback function with monad value when monad is successfully.\n\n        :params success_callback: function to apply with monad value.\n        :type success_callback: Function(A)\n        :returns: self\n        :rtype: Try[A]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    validation_0.ap(bool_0)


def test_case_10():
    bool_0 = True
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.__eq__(bool_0)
    dict_1 = {var_1: var_0}
    validation_1 = module_0.Validation(dict_1, bool_0)


def test_case_11():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.__str__()
    var_0.to_lazy()


def test_case_12():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.is_success()
    validation_1 = module_0.Validation(var_0, var_0)
    var_1 = validation_1.__eq__(validation_0)
    validation_1.bind(var_0)


def test_case_13():
    complex_0 = -1090.476641 - 3326.65j
    none_type_0 = None
    bool_0 = True
    validation_0 = module_0.Validation(complex_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_box()
    var_2 = var_1.to_either()
    var_2.bind(bool_0)


def test_case_14():
    dict_0 = {}
    list_0 = [dict_0, dict_0]
    validation_0 = module_0.Validation(list_0, dict_0)
    var_0 = validation_0.to_either()
    validation_1 = module_0.Validation(dict_0, var_0)
    list_0.bind(dict_0)


def test_case_15():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_maybe()
    var_0.is_success()
