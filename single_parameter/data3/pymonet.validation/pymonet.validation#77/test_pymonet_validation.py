# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    int_0 = 0
    validation_0 = module_0.Validation(int_0, int_0)
    str_0 = "Uy\x0c\t2z?f4yD"
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_1.__eq__(str_0)
    var_1 = var_0.__str__()
    var_1.map(validation_0)


def test_case_1():
    none_type_0 = None
    list_0 = []
    validation_0 = module_0.Validation(none_type_0, list_0)
    var_0 = validation_0.__str__()
    var_0.is_fail()


def test_case_2():
    bool_0 = True
    bytes_0 = b"A;\x8b$\xc9\xbf\x0b\xb47\x06\xdf%=\xe0\xd1%"
    int_0 = -1781
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: int_0, int_0: int_0}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.__str__()
    var_0.bind(bool_0)


def test_case_3():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_either()
    var_0.is_fail()


def test_case_4():
    str_0 = "X^("
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    validation_0 = module_0.Validation(dict_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_maybe()


def test_case_5():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)


def test_case_6():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.to_try()


def test_case_7():
    none_type_0 = None
    bytes_0 = b"U\xa6"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.is_fail()
    var_0.map(none_type_0)


def test_case_8():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.map(none_type_0)


def test_case_9():
    bool_0 = False
    bytes_0 = b"\x1dM\x88\xae=\xe7\xbe\xc3\x16\xad\xeam>7#\xcb\x85\x90j\xff"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_0.bind(bool_0)


def test_case_10():
    bool_0 = False
    bytes_0 = b'\xc8V"WO\x87\xce'
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bytes_0}
    str_0 = "\n        Take function Function(A) -> B and returns new Lazy with mapped result of Lazy constructor function.\n        Both mapper end constructor will be called only during calling fold method.\n\n        :param mapper: mapper function\n        :type mapper: Function(A) -> B\n        :returns: Lazy with mapped value\n        :rtype: Lazy[Function() -> B)]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    validation_0.ap(dict_0)


def test_case_11():
    int_0 = -1765
    validation_0 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.to_box()


def test_case_12():
    int_0 = 77
    bytes_0 = b"\x8a!!"
    set_0 = {bytes_0, bytes_0}
    validation_0 = module_0.Validation(bytes_0, set_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.ap(int_0)
    var_1.is_fail()


def test_case_13():
    set_0 = set()
    str_0 = "4\x0cXplaa|P!Z ?HD:jY\x0c"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, str_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_either()
    var_2 = var_1.to_maybe()
    var_3 = var_2.to_try()
    var_3.bind(set_0)


def test_case_14():
    bytes_0 = b"\x0c\xb4\x95\xa4\xdf\xecfG\xf9"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    none_type_0 = None
    validation_1 = module_0.Validation(bytes_0, none_type_0)
    var_0 = validation_0.__eq__(validation_1)
    var_1 = validation_0.__str__()
    var_0.map(var_0)


def test_case_15():
    str_0 = "X^("
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    validation_0 = module_0.Validation(dict_0, str_0)
    var_0 = validation_0.to_maybe()
    var_0.is_fail()


def test_case_16():
    int_0 = 0
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, int_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_lazy()
    var_0.to_maybe()


def test_case_17():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.to_box()
    var_2 = var_1.to_try()
    var_3 = validation_0.to_lazy()
    var_4 = validation_0.to_try()
    var_5 = validation_0.to_either()
    var_3.is_success()
