# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bytes_0 = b"\xa9\xed\x88\x11B\xd0\xbb\x1c/\xc4\xcd[\xaaX\xcb\xeaZZ"
    none_type_0 = None
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(none_type_0)


def test_case_1():
    float_0 = 2597.843083
    set_0 = {float_0, float_0}
    set_1 = set()
    validation_0 = module_0.Validation(set_0, set_1)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_maybe()
    var_2 = validation_0.is_success()
    var_1.to_maybe()


def test_case_2():
    str_0 = '#"yW\n*'
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.bind(str_0)
    var_2 = var_0.to_box()
    var_0.is_fail()


def test_case_3():
    int_0 = 1
    validation_0 = module_0.Validation(int_0, int_0)


def test_case_4():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.to_try()


def test_case_5():
    bool_0 = True
    bool_1 = True
    tuple_0 = (bool_0, bool_0, bool_1, bool_0)
    dict_0 = {tuple_0: bool_1, bool_1: bool_1, bool_1: tuple_0}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.is_fail()
    validation_0.bind(tuple_0)


def test_case_6():
    none_type_0 = None
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(none_type_0)
    validation_0.map(none_type_0)


def test_case_7():
    none_type_0 = None
    str_0 = '#"yW\n*'
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    validation_0.bind(none_type_0)


def test_case_8():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.ap(validation_0)


def test_case_9():
    bytes_0 = b"\xa9\xed\x88\x11B\xd0\xbb\x1c/\xc4\xcd[\xaaX\xcb\xeaZZ"
    bool_0 = False
    validation_0 = module_0.Validation(bytes_0, bool_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.__str__()
    var_2 = var_1.__eq__(bool_0)
    validation_1 = module_0.Validation(var_2, var_0)
    var_3 = validation_1.__eq__(bool_0)
    var_3.to_try()


def test_case_10():
    none_type_0 = None
    float_0 = -129.160789
    list_0 = [float_0, float_0, float_0]
    none_type_1 = None
    bool_0 = True
    validation_0 = module_0.Validation(none_type_1, bool_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.ap(list_0)
    var_2 = var_1.to_try()
    var_3 = var_2.__str__()
    var_3.bind(none_type_0)


def test_case_11():
    complex_0 = 2656.73874 + 738.2955j
    bool_0 = False
    bytes_0 = b"z;\x1a\xdc\xc4\xdb"
    dict_0 = {bool_0: bool_0, bytes_0: bool_0}
    validation_0 = module_0.Validation(dict_0, bytes_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.map(complex_0)
    var_1.to_maybe()


def test_case_12():
    bool_0 = True
    bool_1 = True
    tuple_0 = (bool_0, bool_0, bool_1, bool_0)
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.__str__()
    validation_0.bind(tuple_0)


def test_case_13():
    str_0 = "#\tyA\n/"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_maybe()
    var_2 = validation_0.to_box()
    var_3 = validation_0.to_either()
    var_0.to_box()


def test_case_14():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)
    var_0.to_box()


def test_case_15():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.__str__()
    var_2 = var_1.__str__()
    var_2.to_either()


def test_case_16():
    none_type_0 = None
    str_0 = "#XyA\n*"
    validation_0 = module_0.Validation(str_0, none_type_0)
    validation_1 = module_0.Validation(str_0, str_0)
    var_0 = validation_1.__eq__(validation_0)
    var_1 = validation_1.to_maybe()
    var_0.to_box()
