# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    str_0 = "\\^;sgbzn"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.__eq__(var_0)
    var_2 = validation_0.to_try()
    var_3 = validation_0.is_fail()
    var_4 = var_0.__str__()


def test_case_1():
    bytes_0 = b"\xaax\xbeg"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    bytes_1 = b"y\xa7\x11\xb4\x96R\xf8u\x07\x7f\\WI]\x9b*"
    dict_0 = {bytes_1: bytes_1}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.__str__()
    var_1 = var_0.__str__()
    var_2 = var_1.__eq__(list_0)


def test_case_2():
    str_0 = "\x0c#\x0b[j"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    var_0.is_success()


def test_case_3():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_maybe()
    var_0.bind(var_0)


def test_case_4():
    str_0 = " T#>,HBm`'i"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_either()
    var_2 = var_1.to_try()


def test_case_5():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)


def test_case_6():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.to_either()


def test_case_7():
    str_0 = "\\^;sgbzn"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_try()
    var_2 = validation_0.is_fail()
    var_3 = var_2.__str__()


def test_case_8():
    str_0 = "pG|@ WsQx"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = module_0.Validation(str_0, validation_0)
    bytes_0 = b"\xd3\xfa`_\xa8\x18<"
    validation_0.map(bytes_0)


def test_case_9():
    int_0 = 517
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.bind(int_0)


def test_case_10():
    str_0 = "1:Z"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_maybe()
    var_2 = var_1.to_lazy()
    bool_0 = True
    validation_1 = module_0.Validation(bool_0, bool_0)
    validation_1.ap(var_2)


def test_case_11():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.to_try()


def test_case_12():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.__eq__(list_0)
    none_type_0 = None
    var_2 = validation_0.__str__()
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    validation_1.ap(none_type_0)


def test_case_13():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_lazy()
    str_0 = "\\^;sgbzn"
    validation_1 = module_0.Validation(str_0, str_0)
    var_2 = validation_1.to_box()
    var_3 = validation_1.__eq__(var_2)
    var_4 = validation_1.to_try()
    var_5 = validation_1.is_fail()
    var_6 = validation_1.__str__()


def test_case_14():
    str_0 = "\\^;sgbzn"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    bytes_0 = b"\xd3\xfa`_\xa8\x18<"
    validation_1 = module_0.Validation(bytes_0, var_0)
    var_1 = validation_1.__str__()
    var_2 = validation_1.__eq__(validation_0)
    var_3 = validation_0.to_either()
    var_4 = validation_0.to_maybe()
    var_1.is_fail()
