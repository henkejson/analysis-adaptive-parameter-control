# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bytes_0 = b"\xe8\x88"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(bytes_0)
    var_1 = validation_0.__eq__(validation_0)
    var_0.to_maybe()


def test_case_1():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.is_success()
    validation_1 = module_0.Validation(dict_0, validation_0)
    var_1 = validation_0.to_either()
    var_2 = validation_0.to_lazy()
    var_3 = var_2.to_maybe()
    var_3.ap(validation_0)


def test_case_2():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)


def test_case_3():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_0.is_success()


def test_case_4():
    bool_0 = False
    tuple_0 = ()
    set_0 = set()
    validation_0 = module_0.Validation(set_0, tuple_0)
    var_0 = validation_0.__eq__(tuple_0)
    validation_1 = module_0.Validation(set_0, bool_0)
    var_1 = validation_1.__eq__(var_0)
    var_2 = validation_0.is_fail()
    var_1.map(var_1)


def test_case_5():
    float_0 = 1960.7
    str_0 = "Vu.{"
    tuple_0 = (float_0, str_0, float_0, str_0)
    str_1 = "\n        :returns: True\n        :rtype: Boolean\n        "
    dict_0 = {str_1: str_1, str_1: str_1, str_1: str_1}
    validation_0 = module_0.Validation(dict_0, dict_0)
    validation_0.map(tuple_0)


def test_case_6():
    bytes_0 = b")\x95\xa4\xec4?\x8b\xbe\xaf\x83\x8c(\x97\xcd\x02~\x87\xbc"
    set_0 = set()
    list_0 = [bytes_0, bytes_0, bytes_0, set_0, set_0]
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_maybe()
    validation_0.bind(validation_0)


def test_case_7():
    complex_0 = -929.58576 + 1995.70585j
    list_0 = [complex_0, complex_0, complex_0]
    list_1 = [list_0, list_0, complex_0, complex_0]
    str_0 = "\\1Y"
    list_2 = [list_1, list_0, str_0]
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    validation_0.ap(list_2)


def test_case_8():
    none_type_0 = None
    none_type_1 = None
    validation_0 = module_0.Validation(none_type_1, none_type_1)
    var_0 = validation_0.to_box()
    var_1 = var_0.to_either()
    var_2 = var_1.to_maybe()
    var_2.map(none_type_0)


def test_case_9():
    int_0 = 15
    validation_0 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.to_lazy()
    validation_0.ap(var_1)


def test_case_10():
    str_0 = "oEH92}J"
    tuple_0 = ()
    validation_0 = module_0.Validation(str_0, tuple_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_maybe()
    var_2 = var_1.to_try()
    var_3 = var_1.to_either()
    var_2.to_box()


def test_case_11():
    float_0 = 463.7
    none_type_0 = None
    validation_0 = module_0.Validation(float_0, none_type_0)
    validation_0.to_try()


def test_case_12():
    bytes_0 = b"\xe8\x88"
    set_0 = set()
    list_0 = [bytes_0, bytes_0, set_0, set_0]
    validation_0 = module_0.Validation(list_0, bytes_0)
    var_0 = validation_0.__str__()
    var_0.is_fail()


def test_case_13():
    bytes_0 = b"\xe8\x88"
    set_0 = set()
    list_0 = [bytes_0, bytes_0, set_0, set_0]
    validation_0 = module_0.Validation(list_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.is_success()
    validation_0.map(set_0)


def test_case_14():
    int_0 = 949
    set_0 = set()
    validation_0 = module_0.Validation(int_0, set_0)
    var_0 = validation_0.to_maybe()
    var_0.is_fail()


def test_case_15():
    bytes_0 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    set_0 = set()
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    var_1 = validation_1.__eq__(bytes_0)
    var_0.map(set_0)


def test_case_16():
    bytes_0 = b"\xe8\x88"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    var_1 = validation_1.__eq__(bytes_0)
    var_2 = validation_1.to_box()
    tuple_0 = (none_type_0,)
    var_3 = validation_1.__eq__(tuple_0)
    var_4 = validation_0.is_success()
    var_5 = validation_0.__eq__(validation_1)
    validation_2 = module_0.Validation(validation_0, bytes_0)
    validation_2.bind(var_0)
