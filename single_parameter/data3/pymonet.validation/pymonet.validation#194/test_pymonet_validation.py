# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    complex_0 = -2472.1495 - 581.138j
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(complex_0)
    var_0.to_box()


def test_case_1():
    str_0 = "6&"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()


def test_case_2():
    str_0 = "n5LavR!n8"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.ap(str_0)
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    validation_2 = module_0.Validation(none_type_0, none_type_0)
    var_2 = validation_2.to_box()
    validation_2.is_fail()


def test_case_3():
    str_0 = "6&"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_maybe()


def test_case_4():
    complex_0 = -3651 + 2695.3j
    validation_0 = module_0.Validation(complex_0, complex_0)


def test_case_5():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.to_maybe()


def test_case_6():
    bytes_0 = b"\xc1J\xc3+\xdd"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.is_fail()
    validation_0.ap(bytes_0)


def test_case_7():
    dict_0 = {}
    str_0 = "\n    One is a Monoid that will combine 2 values of any type using logical disjunction OR on their coerced Boolean values.\n    "
    validation_0 = module_0.Validation(str_0, str_0)
    validation_0.map(dict_0)


def test_case_8():
    bool_0 = True
    tuple_0 = (bool_0,)
    validation_0 = module_0.Validation(tuple_0, bool_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.bind(var_0)
    var_2 = var_1.map(validation_0)
    validation_0.bind(validation_0)


def test_case_9():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    bool_1 = False
    bool_2 = True
    dict_0 = {bool_1: bool_1, bool_1: bool_1, bool_2: bool_1}
    list_0 = [dict_0, dict_0, bool_2]
    validation_0 = module_0.Validation(dict_0, list_0)
    validation_0.ap(set_0)


def test_case_10():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_box()
    validation_1 = module_0.Validation(bool_0, bool_0)


def test_case_11():
    str_0 = "6&"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.to_maybe()


def test_case_12():
    int_0 = 1915
    list_0 = [int_0]
    validation_0 = module_0.Validation(list_0, int_0)
    validation_0.to_try()


def test_case_13():
    int_0 = -125
    validation_0 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.__eq__(validation_0)


def test_case_14():
    bytes_0 = b"\xa6*L\xfb\xc2\x00\xe3F\xd8"
    none_type_0 = None
    bytes_1 = b"\x9eo\xfc\xe1\x1e\xcd\x9eQk\xfc"
    validation_0 = module_0.Validation(bytes_1, bytes_1)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.map(none_type_0)
    var_2 = var_0.to_either()
    var_3 = var_1.ap(bytes_0)
    var_3.is_fail()


def test_case_15():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_either()
    var_2 = validation_0.is_success()
    var_2.to_maybe()


def test_case_16():
    bytes_0 = b"\xa7\x8d{\xd4"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_either()
    var_2 = validation_0.to_either()
    var_3 = validation_0.is_success()
    var_4 = module_0.Validation(var_2, validation_0)
    complex_0 = -2472.1495 - 581.138j
    none_type_0 = None
    validation_1 = module_0.Validation(var_1, none_type_0)
    validation_2 = module_0.Validation(var_2, complex_0)
    var_5 = validation_2.__eq__(validation_0)
    var_3.to_box()


def test_case_17():
    bytes_0 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.__str__()
    var_2 = validation_0.__eq__(validation_0)
    var_3 = validation_0.to_maybe()
    var_4 = var_3.to_lazy()
    var_5 = var_4.to_either()
    var_6 = validation_0.to_either()
    var_7 = validation_0.to_try()
    var_8 = validation_0.to_try()
    validation_1 = module_0.Validation(bytes_0, var_7)
    var_7.is_fail()
