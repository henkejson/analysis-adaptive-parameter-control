# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0
import builtins as module_1


def test_case_0():
    str_0 = "P*[)b\x0c"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_either()
    str_1 = "gdyq^S$xoKv52:A\txyr"
    var_2 = var_1.to_lazy()
    validation_1 = module_0.Validation(str_1, str_1)
    var_3 = var_1.bind(str_0)
    validation_1.bind(var_3)


def test_case_1():
    dict_0 = {}
    str_0 = "3NK:"
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.__eq__(str_0)
    var_1 = var_0.__str__()
    var_2 = validation_0.__str__()
    validation_1 = module_0.Validation(var_1, var_1)
    var_3 = validation_1.to_either()
    var_4 = var_3.__eq__(dict_0)
    var_5 = validation_0.to_maybe()
    var_1.to_either()


def test_case_2():
    str_0 = "Ex=j8Zze.+gBVP8Nkpq"
    set_0 = {str_0, str_0, str_0}
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.ap(str_0)
    var_2 = validation_0.__str__()
    var_2.is_success()


def test_case_3():
    str_0 = "\n    In mathematics, a semigroup is an algebraic structure\n    consisting of a set together with an associative binary operation.\n    A semigroup generalizes a monoid in that there might not exist an identity element.\n    It also (originally) generalized a group (a monoid with all inverses)\n    to a type where every element did not have to have an inverse, this the name semigroup.\n    "
    int_0 = 939
    tuple_0 = ()
    validation_0 = module_0.Validation(str_0, tuple_0)
    var_0 = validation_0.to_either()
    tuple_1 = (str_0, int_0)
    validation_1 = module_0.Validation(tuple_1, str_0)
    var_1 = validation_1.to_try()
    var_2 = validation_1.to_either()
    var_3 = validation_1.__eq__(str_0)
    var_3.is_success()


def test_case_4():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_5():
    bytes_0 = b"\xda\x1b\x12\xbf\xc0\xd4*\xd9\x88-Z\xdc\xa6\xb2\xca\xa8\x84\x0b\x8f"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.is_success()
    var_0.to_lazy()


def test_case_6():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.is_fail()


def test_case_7():
    bool_0 = False
    complex_0 = 1034 - 2131.834j
    bool_1 = True
    validation_0 = module_0.Validation(complex_0, bool_0)
    validation_0.map(bool_1)


def test_case_8():
    str_0 = " Z-\t/T$wDCO,-D"
    list_0 = []
    list_1 = [list_0, list_0, list_0, list_0]
    validation_0 = module_0.Validation(list_1, list_0)
    validation_0.bind(str_0)


def test_case_9():
    bool_0 = True
    bool_1 = True
    bool_2 = True
    tuple_0 = (bool_1, bool_2)
    validation_0 = module_0.Validation(tuple_0, bool_2)
    validation_0.ap(bool_0)


def test_case_10():
    bytes_0 = b"\xe7\x92Q\xe3\xc4\xb4"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.to_try()
    var_2 = var_1.__str__()
    bool_0 = True
    validation_0.ap(bool_0)


def test_case_11():
    bool_0 = True
    none_type_0 = None
    validation_0 = module_0.Validation(bool_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_maybe()
    var_1.is_fail()


def test_case_12():
    int_0 = 1327
    validation_0 = module_0.Validation(int_0, int_0)
    bool_0 = False
    validation_1 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_1.__eq__(validation_0)
    var_0.to_maybe()


def test_case_13():
    none_type_0 = None
    str_0 = "UT+CQ"
    object_0 = module_1.object()
    int_0 = 396
    bytes_0 = b"\x9e\x0e)\xa1x\xad\xef\xe5\x0c&\xfb\xbc\x82\x8dS\xbd"
    tuple_0 = (object_0, int_0, bytes_0)
    tuple_1 = (str_0, tuple_0)
    validation_0 = module_0.Validation(tuple_1, tuple_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_box()
    var_2 = var_1.to_lazy()
    var_3 = var_2.__eq__(none_type_0)
