# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bytes_0 = b"\x13\x10\xb7#\xb8+\xe2\x84\xd0"
    str_0 = ""
    validation_0 = module_0.Validation(bytes_0, str_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_maybe()
    var_2 = validation_0.__eq__(validation_0)
    str_0.to_box()


def test_case_1():
    bytes_0 = b"\x13\x10\xb7#\xb8+\xe2\x84\xd0"
    str_0 = "osxS;B+C"
    validation_0 = module_0.Validation(bytes_0, str_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_maybe()
    var_2 = validation_0.__eq__(validation_0)
    str_0.to_box()


def test_case_2():
    str_0 = "\n        Transform Maybe to Either.\n\n        :returns: Right monad with previous value when Maybe is not empty, in other case Left with None\n        :rtype: Either[A | None]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.__str__()
    var_1.is_fail()


def test_case_3():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)


def test_case_4():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.is_success()


def test_case_5():
    bytes_0 = b"\x13\x10\xb7#\xb8+\xe2\x84\xd0"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.map(bytes_0)
    var_2 = module_0.Validation(bytes_0, bytes_0)
    var_3 = var_2.is_fail()


def test_case_6():
    int_0 = 1
    dict_0 = {int_0: int_0, int_0: int_0}
    bytes_0 = b'"a\xcaG\x9dC\xfb\xd8{|\x15[\x0eo^|\x89(\xe5\x1d'
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_0.map(dict_0)


def test_case_7():
    int_0 = -17
    none_type_0 = None
    validation_0 = module_0.Validation(int_0, none_type_0)
    validation_0.bind(int_0)


def test_case_8():
    float_0 = -2564.28955
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.ap(float_0)


def test_case_9():
    bytes_0 = b"}D\xbba<\xfa\xf8\x159b\x1b\xbc\xf2B\xf0\xedUT\xc7"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_box()
    var_0.is_fail()


def test_case_10():
    bytes_0 = b"\x13\x10\xb7#\xb8+\xe2\x84\xd0"
    str_0 = "osxS;B+C"
    validation_0 = module_0.Validation(bytes_0, str_0)
    var_0 = validation_0.to_try()
    var_1 = validation_0.__eq__(validation_0)
    var_2 = validation_0.to_lazy()
    var_3 = var_0.map(bytes_0)
    var_3.is_fail()


def test_case_11():
    bytes_0 = b"\x13\x10\xb7#\xb8+\xe2\x84\xd0"
    str_0 = "osxS;B+C"
    validation_0 = module_0.Validation(bytes_0, str_0)
    var_0 = validation_0.to_try()
    var_1 = var_0.map(bytes_0)
    var_1.is_fail()


def test_case_12():
    bytes_0 = b"\x13\x10\xb7#\xb8+\xe2\x84\xd0"
    str_0 = "osxS;B+C"
    validation_0 = module_0.Validation(bytes_0, str_0)
    var_0 = validation_0.__eq__(validation_0)
    bytes_0.is_fail()


def test_case_13():
    bytes_0 = b"\x13\x10\xb7#\xb8+\xe2\x84\xd0"
    str_0 = "osxS;B+C"
    validation_0 = module_0.Validation(bytes_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = module_0.Validation(var_0, validation_0)
    var_2 = validation_0.__eq__(var_1)
    var_3 = validation_0.to_box()
    var_4 = validation_0.to_lazy()
    none_type_0 = None
    validation_1 = module_0.Validation(str_0, none_type_0)
    var_0.is_fail()


def test_case_14():
    bool_0 = True
    tuple_0 = ()
    validation_0 = module_0.Validation(bool_0, tuple_0)
    var_0 = validation_0.is_success()
    var_1 = validation_0.to_either()
    var_0.to_lazy()


def test_case_15():
    int_0 = 182
    none_type_0 = None
    validation_0 = module_0.Validation(int_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_maybe()
    var_1.bind(int_0)
