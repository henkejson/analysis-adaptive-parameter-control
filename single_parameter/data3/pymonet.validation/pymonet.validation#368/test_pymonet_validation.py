# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    float_0 = -2648.0
    none_type_0 = None
    validation_0 = module_0.Validation(float_0, none_type_0)
    var_0 = validation_0.__eq__(none_type_0)
    validation_1 = module_0.Validation(float_0, float_0)
    validation_1.__str__()


def test_case_1():
    bytes_0 = b'L$\xca\x1ch\x01\xcd#\xc5A\xeb"\x8c;E\xc7l &\xbb'
    none_type_0 = None
    list_0 = [bytes_0]
    validation_0 = module_0.Validation(none_type_0, list_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_lazy()
    var_0.to_box()


def test_case_2():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    validation_0 = module_0.Validation(bool_0, dict_0)
    var_0 = validation_0.__str__()
    validation_1 = module_0.Validation(dict_0, dict_0)
    var_1 = validation_1.to_box()
    var_2 = validation_1.to_either()
    validation_1.map(bool_0)


def test_case_3():
    bytes_0 = b"\xa0D\xf7\na]B"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    none_type_0 = None
    var_0 = validation_0.to_maybe()
    validation_0.ap(none_type_0)


def test_case_4():
    bytes_0 = b"\xa0D\xf7\na]B"
    validation_0 = module_0.Validation(bytes_0, bytes_0)


def test_case_5():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.is_fail()
    var_0.to_box()


def test_case_6():
    none_type_0 = None
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.map(none_type_0)


def test_case_7():
    bool_0 = True
    bool_1 = False
    none_type_0 = None
    validation_0 = module_0.Validation(bool_1, none_type_0)
    validation_0.bind(bool_0)


def test_case_8():
    int_0 = -627
    float_0 = -1970.052406
    validation_0 = module_0.Validation(float_0, float_0)
    var_0 = validation_0.to_box()
    validation_0.map(int_0)


def test_case_9():
    float_0 = -2648.0
    none_type_0 = None
    validation_0 = module_0.Validation(float_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.__eq__(none_type_0)
    validation_1 = module_0.Validation(float_0, float_0)
    validation_1.__str__()


def test_case_10():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.to_try()


def test_case_11():
    float_0 = -2648.0
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = float_0.__eq__(validation_0)
    validation_1 = module_0.Validation(validation_0, var_1)
    var_2 = var_0.__str__()
    var_3 = validation_1.to_box()
    var_4 = var_3.to_either()
    var_5 = var_4.to_box()
    var_1.is_success()


def test_case_12():
    float_0 = -2648.0
    none_type_0 = None
    validation_0 = module_0.Validation(float_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_try()
    validation_1 = module_0.Validation(none_type_0, var_0)
    var_2 = var_0.ap(float_0)
    var_2.to_box()


def test_case_13():
    bytes_0 = b"G`(\xd1+<MLr\xa2\x17\x1bG\x140\xb6\xba"
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.bind(bytes_0)
    set_0 = set()
    validation_1 = module_0.Validation(set_0, set_0)
    var_2 = validation_1.__str__()
    var_2.to_lazy()


def test_case_14():
    tuple_0 = ()
    bytes_0 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.__eq__(tuple_0)
    var_1.to_try()


def test_case_15():
    float_0 = -3642.9624
    int_0 = -52
    str_0 = ""
    validation_0 = module_0.Validation(float_0, str_0)
    var_0 = validation_0.to_maybe()
    var_0.bind(int_0)


def test_case_16():
    float_0 = -2648.0
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.__eq__(validation_0)
    validation_1 = module_0.Validation(float_0, var_0)
    var_2 = validation_1.to_lazy()
    var_3 = validation_0.__eq__(validation_1)
    var_3.ap(validation_0)
