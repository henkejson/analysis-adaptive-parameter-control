# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0
import builtins as module_1


def test_case_0():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(validation_0)
    bool_0.to_box()


def test_case_1():
    bool_0 = True
    str_0 = "\n        Returns True when errors list are empty.\n\n        :returns: True for empty errors list\n        :rtype: Boolean\n        "
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(bool_0)
    var_1 = str_0.__str__()
    var_1.is_success()


def test_case_2():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.__str__()
    var_0.to_lazy()


def test_case_3():
    str_0 = "\n        Transform Validation to Either.\n\n        :returns: Right monad with previous value when Validation has no errors, in other case Left with errors list\n        :rtype: Right[A] | Left[E]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()


def test_case_4():
    bool_0 = True
    str_0 = ""
    none_type_0 = None
    validation_0 = module_0.Validation(bool_0, str_0)
    var_0 = validation_0.__eq__(none_type_0)
    var_1 = validation_0.to_maybe()
    var_2 = validation_0.to_either()
    var_3 = var_2.to_box()
    var_4 = validation_0.__eq__(none_type_0)
    var_4.to_try()


def test_case_5():
    str_0 = "\n        Returns True when errors list are empty.\n\n        :returns: True for empty errors list\n        :rtype: Boolean\n        "
    validation_0 = module_0.Validation(str_0, str_0)


def test_case_6():
    bool_0 = True
    str_0 = "\n        Retu*ns True when err+rs list are umpty.\n\n        :returns: True for empty errors list\n   #    :rtype: Boolean\n        "
    none_type_0 = None
    validation_0 = module_0.Validation(bool_0, str_0)
    var_0 = validation_0.__eq__(none_type_0)
    var_1 = validation_0.to_either()
    var_2 = validation_0.is_fail()
    var_2.to_box()


def test_case_7():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_0.map(var_0)


def test_case_8():
    bool_0 = True
    str_0 = "\n        Retu*ns True when err+rs list are umpty.\n\n        :returns: True for empty errors list\n   #    :rtype: Boolean\n        "
    none_type_0 = None
    validation_0 = module_0.Validation(bool_0, str_0)
    var_0 = validation_0.__eq__(none_type_0)
    var_1 = validation_0.to_maybe()
    var_2 = validation_0.to_either()
    validation_0.bind(var_1)


def test_case_9():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_0.ap(var_0)


def test_case_10():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_box()
    var_0.is_success()


def test_case_11():
    str_0 = "l^\x0b\n\\eNE"
    str_1 = "\n        Retu*ns True when err+rs list are umpty\n        :returns: True for empty errors list\n   #    :rtype: Boolean\n        "
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, str_0)
    validation_1 = module_0.Validation(validation_0, str_1)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_1.to_maybe()
    var_2 = var_1.to_either()
    var_3 = validation_0.to_lazy()
    var_0.to_lazy()


def test_case_12():
    object_0 = module_1.object()
    validation_0 = module_0.Validation(object_0, object_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_box()
    var_2 = var_1.to_maybe()
    var_3 = var_2.__str__()
    bool_0 = False
    none_type_0 = None
    validation_1 = module_0.Validation(bool_0, none_type_0)
    validation_1.map(none_type_0)


def test_case_13():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.to_try()


def test_case_14():
    bool_0 = True
    str_0 = "\n        Retu*ns True when err+rs list are umpty.\n\n        :returns: True for empty errors list\n   #    :rtype: Boolean\n        "
    none_type_0 = None
    validation_0 = module_0.Validation(bool_0, str_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.__eq__(none_type_0)
    var_2 = validation_0.to_either()
    var_1.to_box()


def test_case_15():
    bool_0 = True
    str_0 = "\n        Returns True when errors list are empty.\n\n        :returns: True for empty errors list\n        :rtype: Boolean\n        "
    none_type_0 = None
    validation_0 = module_0.Validation(bool_0, str_0)
    var_0 = validation_0.__eq__(none_type_0)
    var_1 = validation_0.to_maybe()
    var_0.to_box()


def test_case_16():
    bool_0 = True
    str_0 = "\n        Retu*ns True when err+rs list are umpty.\n\n        :returns: True for empty errors list\n   #    :rtype: Boolean\n        "
    none_type_0 = None
    validation_0 = module_0.Validation(str_0, none_type_0)
    bool_1 = False
    validation_1 = module_0.Validation(bool_0, bool_1)
    var_0 = validation_1.__eq__(validation_0)
    var_0.to_either()
