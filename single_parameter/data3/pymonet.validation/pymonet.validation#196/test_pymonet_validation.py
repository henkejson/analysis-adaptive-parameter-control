# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(none_type_0)
    var_0.ap(none_type_0)


def test_case_1():
    str_0 = "E01=b'u+/\x0bl`B"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_box()
    str_1 = "l).!uT<q+ub,[h3"
    validation_1 = module_0.Validation(str_1, str_1)
    var_1 = validation_1.__str__()
    var_1.to_maybe()


def test_case_2():
    none_type_0 = None
    str_0 = "+'MUPAwXW%NEw"
    validation_0 = module_0.Validation(none_type_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_lazy()
    validation_1 = module_0.Validation(str_0, str_0)
    var_2 = validation_1.to_try()
    validation_1.bind(none_type_0)


def test_case_3():
    str_0 = "I*}9e~p;$-l"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    var_0.is_success()


def test_case_4():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_5():
    complex_0 = 2413.4645 - 1200.433j
    bytes_0 = b"\xeew\xa5\xdb\x94\xcbK\xe7\xaa\x85"
    validation_0 = module_0.Validation(complex_0, bytes_0)
    var_0 = validation_0.to_try()
    var_0.to_box()


def test_case_6():
    str_0 = "\nO2gUL-)YiNDNqR\\I"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.is_fail()
    var_0.map(str_0)


def test_case_7():
    int_0 = 1
    validation_0 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_box()
    float_0 = -906.24
    none_type_0 = None
    validation_1 = module_0.Validation(float_0, none_type_0)
    list_0 = [float_0]
    var_2 = var_0.bind(list_0)
    validation_1.map(int_0)


def test_case_8():
    none_type_0 = None
    bytes_0 = b"_\x86xR\xe2*\xdd\xbc\xc4\xc2]yF"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_0.bind(none_type_0)


def test_case_9():
    dict_0 = {}
    none_type_0 = None
    bool_0 = False
    validation_0 = module_0.Validation(none_type_0, bool_0)
    validation_0.ap(dict_0)


def test_case_10():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.__str__()
    var_1.to_maybe()


def test_case_11():
    bytes_0 = b"\x03\xd7\xeb"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_0.bind(bytes_0)


def test_case_12():
    bytes_0 = b"\xd7"
    bytes_1 = b""
    validation_0 = module_0.Validation(bytes_1, bytes_1)
    var_0 = validation_0.to_either()
    var_1 = validation_0.__eq__(validation_0)
    var_2 = validation_0.to_either()
    var_3 = validation_0.__str__()
    validation_0.bind(bytes_0)


def test_case_13():
    bytes_0 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.__eq__(validation_0)
    var_2 = validation_0.to_either()
    var_3 = validation_0.is_fail()
    var_4 = validation_0.to_maybe()
    var_5 = var_2.__str__()
    validation_0.bind(bytes_0)


def test_case_14():
    bytes_0 = b"\xd7"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_try()
    var_1 = module_0.Validation(bytes_0, var_0)
    var_2 = var_1.__eq__(validation_0)
    var_3 = var_0.map(validation_0)
    validation_0.bind(bytes_0)
