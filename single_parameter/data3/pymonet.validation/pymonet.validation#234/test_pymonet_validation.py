# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0
import builtins as module_1


def test_case_0():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_0.map(var_0)


def test_case_1():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(none_type_0)
    var_0.to_either()


def test_case_2():
    bytes_0 = b"\x15\x19\xafg"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    var_0.to_maybe()


def test_case_3():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    tuple_1 = ()
    validation_1 = module_0.Validation(tuple_1, tuple_1)
    var_0 = validation_0.to_either()
    var_1 = validation_1.is_success()
    var_2 = validation_0.is_success()
    var_3 = validation_0.is_success()
    var_4 = validation_1.to_try()
    var_4.is_fail()


def test_case_4():
    int_0 = 655
    dict_0 = {int_0: int_0, int_0: int_0}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.__str__()
    var_2 = validation_0.__eq__(var_0)
    object_0 = module_1.object()
    var_1.to_box()


def test_case_5():
    int_0 = 682
    dict_0 = {int_0: int_0, int_0: int_0}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_box()
    var_2 = validation_0.__eq__(var_0)
    object_0 = module_1.object()


def test_case_6():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_7():
    int_0 = 655
    dict_0 = {int_0: int_0, int_0: int_0}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_maybe()
    object_0 = validation_0.to_try()
    var_1 = validation_0.is_fail()
    var_1.is_fail()


def test_case_8():
    bytes_0 = b"\x15\x19\xafg"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    validation_0.map(bytes_0)


def test_case_9():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    int_0 = 682
    dict_0 = {int_0: int_0, int_0: int_0}
    validation_1 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_1.to_maybe()
    var_1 = var_0.to_box()
    var_2 = validation_1.__eq__(var_0)
    object_0 = module_1.object()
    validation_0.bind(object_0)


def test_case_10():
    none_type_0 = None
    none_type_1 = None
    validation_0 = module_0.Validation(none_type_1, none_type_1)
    validation_0.ap(none_type_0)


def test_case_11():
    int_0 = -422
    int_1 = 826
    validation_0 = module_0.Validation(int_0, int_1)
    var_0 = validation_0.to_box()
    validation_1 = module_0.Validation(var_0, var_0)


def test_case_12():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(none_type_0)
    var_1 = validation_0.to_lazy()
    var_0.to_either()


def test_case_13():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    int_0 = 655
    dict_0 = {int_0: int_0, int_0: int_0}
    validation_1 = module_0.Validation(dict_0, dict_0)
    var_1 = validation_1.to_maybe()
    var_2 = var_0.to_maybe()
    var_3 = validation_1.__str__()
    var_4 = validation_1.__eq__(var_1)
    validation_1.bind(validation_0)


def test_case_14():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    int_0 = 682
    dict_0 = {int_0: int_0, int_0: int_0}
    validation_1 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_1.to_maybe()
    var_1 = var_0.to_box()
    var_2 = var_0.map(var_1)
    var_3 = var_2.map(validation_1)
    var_4 = validation_0.__eq__(validation_1)
    var_4.to_box()


def test_case_15():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.__str__()
    var_2 = validation_0.__eq__(var_0)
    validation_0.bind(var_1)
