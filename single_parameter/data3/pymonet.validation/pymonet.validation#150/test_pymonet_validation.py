# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    str_0 = "va5mZd5/m>Gr[ie,V71"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.is_fail()
    var_1 = validation_0.to_box()
    var_2 = validation_0.to_either()
    var_3 = validation_0.__eq__(str_0)
    var_4 = var_2.__str__()


def test_case_1():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)


def test_case_2():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    validation_0.to_either()


def test_case_3():
    str_0 = '"'
    bytes_0 = b"\xba\xa8-\x8c$\x12\xdd\x16.\xbf\xfb\x92x\x89m<j\xcbR8"
    tuple_0 = (str_0, bytes_0)
    bool_0 = False
    bool_1 = True
    list_0 = [bool_0, bool_0, bool_1]
    validation_0 = module_0.Validation(list_0, list_0)
    validation_0.map(tuple_0)


def test_case_4():
    bool_0 = True
    set_0 = set()
    int_0 = 1823
    validation_0 = module_0.Validation(bool_0, set_0)
    validation_0.bind(int_0)


def test_case_5():
    none_type_0 = None
    int_0 = 0
    set_0 = {int_0, int_0, int_0}
    validation_0 = module_0.Validation(set_0, int_0)
    validation_0.ap(none_type_0)


def test_case_6():
    bytes_0 = b"\xc9\x82\x16\xd4Z\x05\xf4\x97\xd2wr\x93B\xa9\x8b\xd3P"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.is_success()
    var_1 = validation_0.__str__()
    var_2 = var_0.__eq__(validation_0)
    var_3 = validation_0.to_box()


def test_case_7():
    str_0 = 'fgXyVB\rD+@Is""UGj3|U'
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_box()
    none_type_0 = None
    validation_1 = module_0.Validation(str_0, none_type_0)
    var_1 = validation_1.to_lazy()
    var_2 = validation_1.__eq__(validation_1)


def test_case_8():
    str_0 = 'fgXyVB\rD+@Is""UGj3|U'
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_box()
    none_type_0 = None
    validation_1 = module_0.Validation(str_0, none_type_0)
    var_1 = validation_1.to_lazy()
    var_2 = validation_1.__eq__(validation_1)
    validation_1.to_try()


def test_case_9():
    bytes_0 = b"\xc9\x82\x16\xd4Z\x05\xf4\x97\xd2wr\x93B\xa9\x8b\xd3P"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.is_success()
    var_1 = validation_0.__str__()
    var_0.to_box()


def test_case_10():
    str_0 = "H\x0b9D)/:l(9i%Bd\x0b}U"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.to_either()
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    var_2 = validation_1.to_lazy()
    var_3 = validation_1.__eq__(var_0)
    var_4 = validation_0.to_maybe()
    var_5 = var_4.to_box()
    var_4.is_fail()


def test_case_11():
    str_0 = "H\x0b9D)/:l(9i%Bd\x0b}U"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_box()
    var_2 = validation_0.to_either()
    var_3 = validation_0.is_success()
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    var_4 = validation_1.to_lazy()
    var_5 = validation_0.to_maybe()
    var_5.is_fail()


def test_case_12():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.__str__()
    var_0.to_maybe()


def test_case_13():
    str_0 = "H\x0b9D)/:l(9i%Bd\x0b}U"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.is_success()
    var_1 = validation_0.to_lazy()
    var_2 = var_1.to_box()
    var_3 = validation_0.to_either()
    var_4 = validation_0.is_success()
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    var_5 = validation_1.to_lazy()
    var_6 = validation_1.__eq__(validation_0)
    validation_1.to_try()


def test_case_14():
    str_0 = "H\x0b9D)/:l(9i%Bd\x0b}U"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_box()
    var_2 = validation_0.to_either()
    var_3 = validation_0.is_success()
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    var_4 = validation_1.to_lazy()
    validation_2 = module_0.Validation(validation_1, var_3)
    var_5 = validation_1.to_lazy()
    var_6 = var_3.__eq__(var_3)
    set_0 = set()
    validation_3 = module_0.Validation(var_5, set_0)
    var_7 = validation_3.to_maybe()
    var_8 = var_2.to_box()
    var_9 = validation_3.is_fail()
    var_10 = var_9.__str__()
    var_11 = var_10.__str__()
    var_12 = var_2.bind(var_6)
    var_13 = var_4.map(set_0)
    str_1 = "*~a_J5\x0cE&"
    var_8.ap(str_1)


def test_case_15():
    bytes_0 = b"\xf5O\x81&"
    set_0 = set()
    validation_0 = module_0.Validation(bytes_0, set_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_box()
    var_2 = validation_0.to_either()
    validation_0.map(var_1)
