# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bytes_0 = b"\xbc\xce\xbd\x9c\xff\xd4Yq\x1a\xa1"
    list_0 = []
    dict_0 = {bytes_0: list_0, bytes_0: list_0, bytes_0: bytes_0, bytes_0: bytes_0}
    float_0 = -1070.8803
    validation_0 = module_0.Validation(float_0, float_0)
    var_0 = validation_0.__eq__(dict_0)


def test_case_1():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    bool_0 = False
    var_0 = validation_0.to_either()
    var_1 = validation_0.__str__()
    var_2 = var_1.__eq__(bool_0)
    var_3 = validation_0.to_either()
    var_4 = var_2.__eq__(set_0)
    validation_1 = module_0.Validation(bool_0, bool_0)
    validation_1.is_success()


def test_case_2():
    none_type_0 = None
    complex_0 = 234.4 - 212.23157j
    tuple_0 = (complex_0,)
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.__eq__(none_type_0)
    var_1.to_lazy()


def test_case_3():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.__eq__(dict_0)
    var_2 = var_1.__str__()
    var_0.ap(var_0)


def test_case_4():
    bool_0 = True
    dict_0 = {}
    tuple_0 = (dict_0,)
    validation_0 = module_0.Validation(bool_0, tuple_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.ap(validation_0)
    validation_1 = module_0.Validation(validation_0, bool_0)


def test_case_5():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_6():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.__str__()


def test_case_7():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_lazy()
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    validation_1.is_fail()


def test_case_8():
    set_0 = set()
    str_0 = "_<sW?YX,7[zc\x0ba"
    none_type_0 = None
    validation_0 = module_0.Validation(str_0, none_type_0)
    validation_0.map(set_0)


def test_case_9():
    int_0 = 1
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.bind(int_0)


def test_case_10():
    str_0 = "\n    In mathematics and computer science, currying is the technique of translating the evaluation of a function.\n    It that takes multiple arguments (or a tuple of arguments) into evaluating a sequence of functions.\n    each with a single argument.\n    "
    int_0 = 0
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.ap(str_0)


def test_case_11():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_box()
    var_0.is_success()


def test_case_12():
    complex_0 = 234.4 - 212.23157j
    tuple_0 = (complex_0,)
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_try()
    var_1 = var_0.__str__()


def test_case_13():
    complex_0 = 234.4 - 212.23157j
    tuple_0 = (complex_0,)
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.__eq__(var_0)
    var_2 = validation_0.to_either()
    var_1.to_either()


def test_case_14():
    none_type_0 = None
    complex_0 = 234.4 - 212.23157j
    tuple_0 = (complex_0,)
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.__eq__(none_type_0)
    var_2 = validation_0.to_lazy()
    var_3 = validation_0.to_either()
    var_4 = var_2.to_either()
    var_1.ap(tuple_0)


def test_case_15():
    complex_0 = 234.4 - 212.23157j
    tuple_0 = (complex_0,)
    validation_0 = module_0.Validation(complex_0, tuple_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.__str__()
    var_0.to_either()


def test_case_16():
    complex_0 = 234.4 - 212.23157j
    tuple_0 = (complex_0,)
    validation_0 = module_0.Validation(complex_0, tuple_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_maybe()
    var_2 = module_0.Validation(var_1, var_0)
    var_3 = validation_0.__eq__(var_2)
    var_4 = var_1.to_box()
    var_5 = validation_0.to_box()
    var_3.to_either()
