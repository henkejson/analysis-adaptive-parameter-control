# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    str_0 = "\n        Take function, store it and call with Task value during calling fork function.\n        Return new Task with result of called.\n\n        :param fn: mapper function\n        :type fn: Function(value) -> B\n        :returns: new Task with mapped resolve attribute\n        :rtype: Task[Function(resolve, reject -> A | B]\n        "
    int_0 = 354
    validation_0 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.__eq__(str_0)
    var_0.to_either()


def test_case_1():
    bytes_0 = b"\x11\x04\xa3\x83\xda\xc8\x0c\xbe"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    none_type_0 = None
    validation_1 = module_0.Validation(bytes_0, none_type_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.is_fail()
    var_0.to_box()


def test_case_2():
    bytes_0 = b'#\xe7\xf1"\x14\x9f\xc2\rVf\xfd\x88:\xa9\x00'
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.__eq__(validation_0)
    var_2 = validation_0.__str__()
    var_1.to_maybe()


def test_case_3():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_4():
    int_0 = -199
    validation_0 = module_0.Validation(int_0, int_0)
    validation_1 = module_0.Validation(validation_0, int_0)
    validation_0.is_success()


def test_case_5():
    bytes_0 = b"\x11\x04\xa3\x83\xda\xc8\x0c\xbe"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    none_type_0 = None
    dict_0 = {}
    var_0 = validation_0.__eq__(none_type_0)
    validation_1 = module_0.Validation(dict_0, bytes_0)
    var_1 = validation_0.is_fail()
    var_2 = validation_1.__str__()
    var_3 = validation_0.to_maybe()
    var_4 = none_type_0.__str__()
    var_5 = var_3.__eq__(var_0)
    var_6 = var_3.map(var_3)
    var_7 = var_1.__eq__(validation_1)
    validation_1.map(dict_0)


def test_case_6():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.bind(bool_0)


def test_case_7():
    tuple_0 = ()
    int_0 = 3419
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.ap(tuple_0)


def test_case_8():
    bytes_0 = b"\xb0!\xa0\x85\xe6\x1a[f=\x9d0U\x0f\xb3*\xca"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.is_fail()
    var_2 = validation_0.to_either()
    var_3 = validation_0.__str__()
    var_4 = var_3.__str__()
    var_5 = validation_0.to_lazy()
    var_2.is_fail()


def test_case_9():
    bytes_0 = b"\xb0!\xa0\x85\xe6\x1a[f=\x9d0U\x0f\xb3*\xca"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.is_fail()
    var_1 = validation_0.to_either()
    var_2 = validation_0.__str__()
    var_3 = var_2.__str__()
    var_4 = validation_0.to_lazy()
    var_1.is_fail()


def test_case_10():
    none_type_0 = None
    bool_0 = False
    set_0 = {bool_0}
    validation_0 = module_0.Validation(set_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_box()
    var_2 = var_0.to_maybe()
    validation_0.ap(bool_0)


def test_case_11():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.to_try()


def test_case_12():
    bytes_0 = b'#\xe7\xf1"\x14\x9f\xc2\rVf\xfd\x88:\xa9\x00'
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.__eq__(validation_0)
    var_2 = var_1.__eq__(var_1)
    var_3 = var_0.__str__()
    var_2.to_either()


def test_case_13():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_try()
    var_1.to_either()


def test_case_14():
    bytes_0 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.__eq__(validation_0)
    var_2 = var_0.to_either()
    var_3 = var_1.__eq__(var_1)
    var_4 = validation_0.__str__()
    var_1.to_maybe()


def test_case_15():
    bytes_0 = b'#\xe7\xf1"\x14\x9f\xc2\rVf\xfd\x88:\xa9\x00'
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, validation_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_1.to_lazy()
    var_2 = validation_0.__eq__(validation_1)
    var_3 = var_1.__eq__(var_2)
    var_4 = var_3.__str__()
    var_2.to_maybe()
