# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    none_type_0 = None
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.__eq__(none_type_0)
    var_0.is_success()


def test_case_1():
    bytes_0 = b"Q\n\xe1\x16y\x00.\xddb"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_lazy()
    var_2 = validation_0.to_lazy()


def test_case_2():
    str_0 = "ZG^3R6=|OdJ:$C"
    tuple_0 = (str_0,)
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.to_either()
    var_2 = validation_0.to_lazy()
    var_3 = validation_0.to_maybe()


def test_case_3():
    none_type_0 = None
    none_type_0.to_lazy()


def test_case_4():
    bytes_0 = b"\x8aX:\x92\x84\xaa\xf1\x11\xf6\x1f\xf8\xfemCL"
    validation_0 = module_0.Validation(bytes_0, bytes_0)


def test_case_5():
    str_0 = "\n        Returns new ImmutableList with argument value on the begin of list\n        and other list elements after it\n\n        :param new_element: element to append on the begin of list\n        :type fn: A\n        :returns: ImmutableList[A]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.is_success()


def test_case_6():
    int_0 = 79
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.is_fail()


def test_case_7():
    complex_0 = -1708.9995 - 2233.0427j
    validation_0 = module_0.Validation(complex_0, complex_0)
    validation_0.map(validation_0)


def test_case_8():
    str_0 = "t(~*@"
    bool_0 = True
    dict_0 = {str_0: bool_0, str_0: bool_0}
    none_type_0 = None
    none_type_1 = None
    set_0 = {str_0}
    validation_0 = module_0.Validation(str_0, set_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.bind(none_type_1)
    var_2 = var_1.map(dict_0)
    var_3 = module_0.Validation(var_1, none_type_0)
    var_3.bind(none_type_0)


def test_case_9():
    dict_0 = {}
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    validation_0.ap(dict_0)


def test_case_10():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.to_either()
    var_2 = var_1.to_lazy()


def test_case_11():
    bool_0 = True
    float_0 = -3275.8835
    validation_0 = module_0.Validation(bool_0, float_0)
    var_0 = validation_0.to_box()
    validation_1 = module_0.Validation(validation_0, var_0)
    str_0 = "\n        It takes as a parameter function returning another Validation.\n        Function is called with Validation value and returns new Validation with previous value\n        and concated new and old errors.\n\n        :param monad: monad contains function\n        :type monad: Function(A) -> Validation[Any, List[E]]\n        :returns: new validation with stored errors\n        :rtype: Validation[A, List[E]]\n        "
    bool_1 = True
    validation_2 = module_0.Validation(bool_1, str_0)
    var_1 = validation_2.to_lazy()
    var_2 = var_1.to_either()
    var_2.to_either()


def test_case_12():
    str_0 = "\n        Transform Validation to Either.\n\n        :returns: Right monad with previous value when Validation has no errors, in other case Left with errors list\n        :rtype: Right[A] | Left[E]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_try()


def test_case_13():
    bytes_0 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_maybe()
    var_2 = var_1.__eq__(var_1)
    var_3 = validation_0.to_lazy()
    var_2.bind(var_2)


def test_case_14():
    bytes_0 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_either()
    var_2 = validation_0.to_maybe()
    var_1.map(validation_0)


def test_case_15():
    bytes_0 = b"Q\n\xe1\x16y\x00.\xddb"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    int_0 = 0
    validation_1 = module_0.Validation(int_0, var_0)
    var_1 = validation_1.__eq__(validation_0)
    var_2 = validation_0.to_lazy()
    var_3 = var_2.__str__()
    validation_0.bind(validation_0)
