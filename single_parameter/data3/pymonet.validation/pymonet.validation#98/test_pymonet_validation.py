# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(bool_0)
    validation_0.__str__()


def test_case_1():
    none_type_0 = None
    set_0 = {none_type_0}
    validation_0 = module_0.Validation(none_type_0, set_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.__str__()
    var_1.is_success()


def test_case_2():
    str_0 = "\n        :param semigroup: other semigroup to concat\n        :type semigroup: Min[B]\n        :returns: new Min with smallest value\n        :rtype: Min[A | B]\n        "
    none_type_0 = None
    dict_0 = {str_0: str_0, str_0: str_0}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.ap(str_0)
    var_2 = var_1.bind(none_type_0)
    var_2.to_either()


def test_case_3():
    bytes_0 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    none_type_0 = None
    validation_1 = module_0.Validation(bytes_0, bytes_0)
    validation_2 = module_0.Validation(none_type_0, bytes_0)
    var_1 = validation_1.__eq__(validation_1)
    var_2 = validation_1.__str__()
    var_3 = validation_2.is_success()
    var_4 = validation_2.to_either()
    complex_0 = 1336.621543 + 91j
    var_4.map(complex_0)


def test_case_4():
    str_0 = "x7"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.to_try()
    var_2 = validation_0.to_lazy()
    var_2.is_success()


def test_case_5():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_6():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.__str__()


def test_case_7():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.is_fail()


def test_case_8():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.map(none_type_0)


def test_case_9():
    bytes_0 = b"a\xa5\xe6\x1d\x11\xbc>\xbdgK;\x00<\xde\xb0\x9b\x89"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_0.bind(bytes_0)


def test_case_10():
    bool_0 = True
    str_0 = "\n        Transform Lazy into Either (Right) with constructor_fn result.\n\n        :returns: Right monad with constructor_fn result\n        :rtype: Right[A]\n        "
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, bool_0)
    validation_0.ap(str_0)


def test_case_11():
    bool_0 = True
    none_type_0 = None
    validation_0 = module_0.Validation(bool_0, none_type_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.__eq__(bool_0)
    validation_0.__str__()


def test_case_12():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_lazy()
    var_0.is_success()


def test_case_13():
    bytes_0 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.is_success()
    var_2 = validation_0.to_try()
    var_3 = validation_0.is_success()
    var_4 = validation_0.to_either()
    var_1.map(validation_0)


def test_case_14():
    bytes_0 = b""
    none_type_0 = None
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_1 = module_0.Validation(none_type_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.__str__()
    var_2 = validation_1.is_success()
    bytes_1 = b"0\xc7\xcb\xb5\xd3@Z\x89{\xba"
    var_2.ap(bytes_1)


def test_case_15():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.bind(var_0)
    validation_1 = module_0.Validation(bool_0, bool_0)
    var_2 = validation_1.to_box()
    var_1.to_box()


def test_case_16():
    bytes_0 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, var_0)
    validation_2 = module_0.Validation(none_type_0, validation_0)
    validation_3 = module_0.Validation(validation_1, validation_1)
    var_1 = validation_3.__eq__(validation_1)
    var_2 = var_0.__str__()
    var_1.is_success()
