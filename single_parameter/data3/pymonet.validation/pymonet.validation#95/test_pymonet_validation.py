# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0
import builtins as module_1


def test_case_0():
    str_0 = "JD69Y+=y"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(str_0)


def test_case_1():
    str_0 = "\n        :param semigroup: other semigroup to concat\n        :type semigroup: All[B]\n        :returns: new All with last truly value or first falsy\n        :rtype: All[A | B]\n        "
    bytes_0 = b"\xed\x8aI\xabnl\xbdG\xf6`\x89\xd5\xfa\x89C1"
    validation_0 = module_0.Validation(str_0, bytes_0)
    var_0 = validation_0.__str__()
    var_1 = var_0.__eq__(validation_0)
    var_2 = validation_0.is_success()
    var_3 = validation_0.is_success()
    var_3.to_maybe()


def test_case_2():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_try()
    var_1 = validation_0.to_either()
    var_2 = validation_0.to_either()
    var_3 = validation_0.to_try()
    var_4 = validation_0.to_maybe()
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    var_5 = validation_1.to_box()
    var_2.ap(var_4)


def test_case_3():
    dict_0 = {}
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, dict_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.is_fail()
    var_1.is_fail()


def test_case_4():
    str_0 = "\n        :param semigroup: other semigroup to concat\n        :type semigroup: All[B]\n        :returns: new All with last truly value or first falsy\n        :rtype: All[A | B]\n        "
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.__eq__(validation_0)


def test_case_5():
    int_0 = -978
    validation_0 = module_0.Validation(int_0, int_0)


def test_case_6():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.is_fail()


def test_case_7():
    int_0 = 1628
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    dict_1 = {}
    object_0 = module_1.object(**dict_1)
    none_type_0 = None
    validation_0 = module_0.Validation(object_0, none_type_0)
    validation_0.bind(dict_0)


def test_case_8():
    int_0 = 1450
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    validation_0.ap(int_0)


def test_case_9():
    none_type_0 = None
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_box()
    var_0.map(none_type_0)


def test_case_10():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_maybe()
    var_2 = var_1.to_either()
    var_2.is_fail()


def test_case_11():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = var_0.__eq__(validation_0)
    validation_1 = module_0.Validation(bool_0, var_0)
    validation_1.to_try()


def test_case_12():
    str_0 = "\n        :param semigroup: other semigroup to concat\n        :type semigroup: All[B]\n        :returns: new All with last truly value or first falsy\n        :rtype: All[A | B]\n        "
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, str_0)
    var_0 = validation_0.__eq__(validation_0)


def test_case_13():
    str_0 = "\\U<SSmoOfSHF"
    bytes_0 = b"\xe4yt\xc6$\xd7\xb0c\x1e@\xf9\xaen\x9b="
    none_type_0 = None
    none_type_1 = None
    validation_0 = module_0.Validation(str_0, bytes_0)
    var_0 = validation_0.__eq__(none_type_1)
    var_1 = validation_0.to_either()
    var_2 = var_1.ap(none_type_0)
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    validation_1 = module_0.Validation(bytes_0, dict_0)
    validation_1.ap(str_0)


def test_case_14():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(validation_0)
    bytes_0 = b"\x0e\xe1\xca\xcc\xb1\xf2\xe7\xf7\xa3\xe0"
    list_0 = [bytes_0, bytes_0]
    validation_1 = module_0.Validation(list_0, bytes_0)
    var_1 = validation_1.to_try()
    var_2 = validation_1.__eq__(validation_0)
    var_3 = validation_1.to_try()
    validation_0.map(var_2)


def test_case_15():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.__str__()
    var_1 = var_0.__str__()
    var_1.to_box()
