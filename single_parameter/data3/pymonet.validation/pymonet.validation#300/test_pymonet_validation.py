# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    none_type_0 = None
    bool_0 = False
    list_0 = []
    bytes_0 = b"\x0f\n\x8bB\x92\x0b\xd7\xbe\xacd\nC"
    dict_0 = {bytes_0: bool_0, bytes_0: bytes_0, bool_0: list_0, bool_0: bytes_0}
    tuple_0 = (bool_0, list_0, bytes_0, dict_0)
    none_type_1 = None
    validation_0 = module_0.Validation(tuple_0, none_type_1)
    var_0 = validation_0.__eq__(none_type_0)


def test_case_1():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.__str__()
    var_0.to_maybe()


def test_case_2():
    bytes_0 = b"\xf8"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.__eq__(validation_0)
    var_2 = var_0.to_either()
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    validation_1 = module_0.Validation(list_0, list_0)
    var_3 = validation_1.__str__()
    var_3.is_success()


def test_case_3():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.is_fail()
    validation_0.ap(validation_0)


def test_case_4():
    str_0 = "n"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_maybe()
    str_1 = "t$v-^Bo(~KlQMd%|2%"
    validation_1 = module_0.Validation(str_1, str_1)
    var_2 = validation_1.to_try()
    var_2.is_success()


def test_case_5():
    str_0 = "S;6_9qG&P*G\n\\T*SH\x0c?"
    bytes_0 = b"\x97"
    set_0 = {bytes_0}
    tuple_0 = (set_0,)
    tuple_1 = (tuple_0,)
    validation_0 = module_0.Validation(tuple_1, tuple_0)
    var_0 = validation_0.to_maybe()
    str_0.to_maybe()


def test_case_6():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_7():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.is_success()


def test_case_8():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    none_type_0 = None
    validation_0.map(none_type_0)


def test_case_9():
    none_type_0 = None
    int_0 = 597
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.bind(int_0)


def test_case_10():
    bytes_0 = b",\xce\x9e\xff"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.__eq__(validation_0)
    validation_0.ap(bytes_0)


def test_case_11():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_box()


def test_case_12():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_lazy()
    var_0.is_success()


def test_case_13():
    str_0 = "\n        Take mapper function and return new instance of Right with mapped value.\n\n        :aram mapper: function to apply on Right value\n        :type mapper: Function(A) -> B\n        :returns: new Right with result of mapper\n        :rtype: Right[B]\n        "
    list_0 = [str_0, str_0]
    bytes_0 = b",\xce\x9e\xff"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(list_0)
    var_1 = validation_0.to_lazy()
    var_2 = var_1.to_box()
    var_3 = validation_0.to_maybe()
    var_4 = validation_0.__eq__(validation_0)
    var_5 = var_3.ap(var_0)
    var_0.bind(var_4)


def test_case_14():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.to_try()


def test_case_15():
    bytes_0 = b",\xce\x9e\xff"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.__eq__(validation_0)
    var_1.to_lazy()


def test_case_16():
    str_0 = "M&S)pXw'T^"
    list_0 = [str_0, str_0, str_0]
    bytes_0 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(list_0)
    var_1 = validation_0.to_maybe()
    var_2 = validation_0.__eq__(validation_0)
    var_1.ap(var_0)


def test_case_17():
    str_0 = "\n        Take mapper function and return new instance of Right with mapped value.\n\n        :param mapper: function to apply on Right value\n        :type mapper: Function(A) -> B\n        :returns: new Right with result of mapper\n        :rtype: Right[B]\n        "
    list_0 = [str_0, str_0]
    bytes_0 = b"n\xf8"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(list_0)
    var_1 = var_0.__eq__(list_0)
    var_2 = module_0.Validation(var_1, str_0)
    var_3 = var_2.__eq__(validation_0)
    var_2.ap(var_0)
