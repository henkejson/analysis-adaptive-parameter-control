# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.__eq__(bool_0)
    validation_0.__str__()


def test_case_1():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.__str__()
    var_1 = var_0.__str__()
    var_2 = validation_0.to_maybe()
    var_3 = var_2.to_try()
    none_type_0 = None
    validation_0.bind(none_type_0)


def test_case_2():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, set_0)
    var_0 = validation_0.__str__()
    var_0.to_box()


def test_case_3():
    str_0 = "ir r1@v6w\ng@YaZ\x0b(Z G"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_try()
    var_1 = validation_0.is_fail()
    var_2 = validation_0.to_maybe()
    var_3 = var_2.to_either()
    var_4 = var_2.to_box()
    var_5 = validation_0.to_either()
    var_0.ap(validation_0)


def test_case_4():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)


def test_case_5():
    float_0 = 420.0
    none_type_0 = None
    validation_0 = module_0.Validation(float_0, none_type_0)
    validation_0.to_either()


def test_case_6():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.is_fail()


def test_case_7():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_0.map(validation_0)


def test_case_8():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_1 = module_0.Validation(var_0, bool_0)
    validation_1.bind(bool_0)


def test_case_9():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    validation_0.ap(tuple_0)


def test_case_10():
    int_0 = -1346
    list_0 = [int_0, int_0, int_0, int_0]
    bytes_0 = b"\x87I\xb0\x0e\xfa\x0f0"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.to_maybe()
    var_2 = var_1.__eq__(list_0)
    var_3 = var_2.__str__()


def test_case_11():
    tuple_0 = ()
    bool_0 = False
    set_0 = {tuple_0, tuple_0, tuple_0, bool_0}
    str_0 = '^\x0b"R\t\\'
    validation_0 = module_0.Validation(set_0, str_0)
    var_0 = validation_0.to_lazy()


def test_case_12():
    str_0 = "&@"
    bool_0 = False
    tuple_0 = (bool_0,)
    str_1 = "\n    Return increased by 1 argument.\n\n    :param value:\n    :type value: Int\n    :returns:\n    :rtype: Int\n    "
    validation_0 = module_0.Validation(tuple_0, str_1)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.__eq__(str_0)
    var_2 = var_0.to_either()
    var_3 = var_2.__eq__(var_1)
    list_0 = [var_3]
    validation_1 = module_0.Validation(var_0, list_0)
    var_3.to_maybe()


def test_case_13():
    int_0 = 3460
    float_0 = -1000.2722
    set_0 = {float_0, float_0}
    list_0 = [set_0, float_0, float_0, set_0]
    none_type_0 = None
    validation_0 = module_0.Validation(list_0, none_type_0)
    var_0 = validation_0.__eq__(int_0)
    validation_0.to_try()


def test_case_14():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.__eq__(validation_0)
    var_2 = var_1.__str__()
    validation_0.__str__()


def test_case_15():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.__str__()
    var_2 = validation_0.to_maybe()
    var_3 = var_2.to_box()
    none_type_0 = None
    validation_0.bind(none_type_0)


def test_case_16():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    none_type_0 = None
    validation_1 = module_0.Validation(validation_0, none_type_0)
    var_0 = validation_0.__eq__(validation_1)
    validation_0.to_try()
