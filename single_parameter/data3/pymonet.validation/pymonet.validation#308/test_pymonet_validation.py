# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    float_0 = -1563.63
    none_type_0 = None
    validation_0 = module_0.Validation(float_0, float_0)
    var_0 = validation_0.__eq__(none_type_0)
    var_1 = var_0.__str__()
    var_1.bind(float_0)


def test_case_1():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)


def test_case_2():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.to_either()


def test_case_3():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.is_fail()


def test_case_4():
    bool_0 = False
    str_0 = "qhN(ZyZK o[S`O=K?!1@"
    validation_0 = module_0.Validation(str_0, str_0)
    validation_0.map(bool_0)


def test_case_5():
    float_0 = 1931.78298
    none_type_0 = None
    none_type_1 = None
    validation_0 = module_0.Validation(float_0, none_type_1)
    validation_0.bind(none_type_0)


def test_case_6():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(none_type_0)
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    validation_0.ap(var_0)


def test_case_7():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    tuple_0 = ()
    validation_1 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_1.to_box()
    var_1 = var_0.to_either()
    var_1.is_success()


def test_case_8():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_lazy()
    validation_1 = module_0.Validation(var_0, var_0)
    validation_0.__str__()


def test_case_9():
    str_0 = "\n    Return increased by 1 argument.\n\n    :param value:\n    :type value: Int\n    :returns:\n    :rtype: Int\n    "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_try()


def test_case_10():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    tuple_0 = validation_0.__eq__(validation_0)
    validation_1 = module_0.Validation(tuple_0, tuple_0)
    validation_0.__str__()


def test_case_11():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_maybe()
    var_1.is_success()


def test_case_12():
    set_0 = set()
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, set_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.__str__()
    validation_1 = module_0.Validation(none_type_0, set_0)
    var_2 = validation_1.to_try()
    var_2.to_lazy()


def test_case_13():
    set_0 = set()
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, set_0)
    var_0 = validation_0.__str__()
    validation_1 = module_0.Validation(none_type_0, set_0)
    var_1 = validation_1.to_try()
    var_1.to_lazy()


def test_case_14():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    str_0 = "E|~6,Dl>E$&4gkijns!"
    validation_1 = module_0.Validation(validation_0, str_0)
    validation_1.__str__()


def test_case_15():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_1 = module_0.Validation(none_type_0, validation_0)
    var_0 = validation_1.__eq__(validation_0)
    var_1 = validation_0.to_box()
    var_0.to_box()


def test_case_16():
    none_type_0 = None
    bytes_0 = b"\x86\xe0\x9b\xbf\x03\xcd^"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(none_type_0)
    validation_1 = module_0.Validation(bytes_0, bytes_0)
    var_1 = validation_1.to_either()
    var_2 = validation_1.to_maybe()
    bool_0 = False
    tuple_0 = (bool_0, validation_0, var_1)
    var_3 = var_1.bind(validation_0)
    var_4 = var_3.__eq__(tuple_0)
    var_4.is_success()


def test_case_17():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    bytes_0 = b"\xafP"
    validation_1 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_1.__eq__(validation_0)
    list_0 = []
    validation_2 = module_0.Validation(validation_1, list_0)
    var_1 = validation_2.to_try()
    var_2 = validation_2.to_either()
    var_0.to_lazy()
