# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0
import builtins as module_1


def test_case_0():
    list_0 = []
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(list_0)


def test_case_1():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_try()
    var_2 = validation_0.__str__()
    var_3 = validation_0.is_success()
    var_2.is_fail()


def test_case_2():
    bytes_0 = b"\xc4\xdd\x90\x9d\x9c\xdc\xb3\xbb\x13\xdd6\xe0\xa4\x86"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    var_0.to_try()


def test_case_3():
    complex_0 = -2442.793188 - 238j
    bytes_0 = b"\xc4\xdd\x90\x9d\x9c\xdc\xb3\xbb\x13\xdd6\xe0\xa4\x86"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    validation_1 = module_0.Validation(complex_0, validation_0)
    validation_2 = module_0.Validation(bytes_0, bytes_0)
    var_1 = validation_2.to_maybe()
    var_1.to_maybe()


def test_case_4():
    int_0 = 1069
    int_0.to_try()


def test_case_5():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)


def test_case_6():
    int_0 = 1169
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.__str__()


def test_case_7():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.is_fail()


def test_case_8():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_box()
    validation_0.map(none_type_0)


def test_case_9():
    dict_0 = {}
    none_type_0 = None
    validation_0 = module_0.Validation(dict_0, dict_0)
    validation_0.bind(none_type_0)


def test_case_10():
    int_0 = -1323
    set_0 = {int_0, int_0}
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(set_0)
    validation_0.ap(var_0)


def test_case_11():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_box()


def test_case_12():
    int_0 = 1417
    validation_0 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_try()
    var_1.to_lazy()


def test_case_13():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.to_try()


def test_case_14():
    bytes_0 = b"R\xe6\x13\xcd\xaa\x84\xe75~\xf1\xeb\x04\x8f\xc7"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_1 = validation_0.to_either()
    var_0 = validation_1.__eq__(bytes_0)
    var_0.to_maybe()


def test_case_15():
    int_0 = 1069
    bool_0 = False
    dict_0 = {int_0: bool_0, int_0: bool_0}
    bool_1 = False
    validation_0 = module_0.Validation(bool_1, dict_0)
    var_0 = validation_0.to_try()
    validation_1 = module_0.Validation(validation_0, int_0)
    var_1 = validation_1.__eq__(validation_1)
    var_0.to_box()


def test_case_16():
    float_0 = 177.0
    bytes_0 = b"R\xe6\x13\xcd\xaa\x84\xe75~\xf1\xeb\x04\x8f\xc7"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_1 = module_0.Validation(float_0, float_0)
    var_0 = validation_1.__eq__(validation_0)
    var_1 = validation_1.__eq__(bytes_0)
    validation_1.ap(var_1)


def test_case_17():
    dict_0 = {}
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, dict_0)
    var_0 = validation_0.to_maybe()
    var_1 = module_1.object()
    var_1.is_success()
