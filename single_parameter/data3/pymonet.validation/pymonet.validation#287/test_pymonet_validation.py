# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bytes_0 = b')"'
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(bytes_0)
    var_0.ap(var_0)


def test_case_1():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.__str__()
    var_0.map(list_0)


def test_case_2():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.is_fail()
    validation_1 = module_0.Validation(var_0, var_0)
    var_2 = validation_1.to_either()
    var_3 = validation_1.__eq__(list_0)
    validation_1.bind(none_type_0)


def test_case_3():
    str_0 = "1"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_lazy()
    var_2 = var_1.__str__()
    var_2.to_either()


def test_case_4():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)


def test_case_5():
    bytes_0 = b"\xd5\n\x9f\xb2S\x15\x13#\xf2M\x99\x9a"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.is_success()
    var_0.is_fail()


def test_case_6():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.is_fail()


def test_case_7():
    bytes_0 = b"q\xc1\xdaYc\xf4\x8a\xd0\xdb"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.map(bytes_0)


def test_case_8():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_maybe()
    validation_1 = module_0.Validation(dict_0, dict_0)
    validation_1.bind(var_1)


def test_case_9():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_1 = module_0.Validation(validation_0, dict_0)
    var_1 = validation_1.to_maybe()
    var_2 = var_1.to_lazy()
    var_3 = var_2.to_either()
    var_4 = var_3.to_lazy()
    var_5 = var_4.to_either()
    validation_1.ap(var_5)


def test_case_10():
    int_0 = 689
    validation_0 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.to_try()
    var_1.is_success()


def test_case_11():
    none_type_0 = None
    int_0 = 1
    validation_0 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.map(none_type_0)
    var_2 = var_1.__str__()
    var_3 = var_0.__str__()
    var_2.is_fail()


def test_case_12():
    bool_0 = True
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.bind(bool_0)
    var_1.to_box()


def test_case_13():
    none_type_0 = None
    bytes_0 = b"O\xe3\xc28\xa9\x8el\xe4"
    validation_0 = module_0.Validation(none_type_0, bytes_0)
    var_0 = validation_0.to_try()
    var_0.is_success()


def test_case_14():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_maybe()
    var_2 = var_0.__eq__(var_0)
    var_3 = var_2.__str__()


def test_case_15():
    str_0 = "ZY}fe-"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, str_0)
    var_0 = validation_0.to_maybe()
    var_0.is_success()


def test_case_16():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_either()
    var_0.to_lazy()


def test_case_17():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.__eq__(validation_0)
    dict_1 = {}
    validation_1 = module_0.Validation(dict_1, var_0)
    var_1 = validation_1.__eq__(validation_0)
    var_2 = validation_0.to_maybe()
    validation_2 = module_0.Validation(dict_0, dict_0)
    var_3 = var_0.__str__()
