# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    int_0 = 0
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(int_0)
    var_0.is_fail()


def test_case_1():
    str_0 = "kaPs\r8/@']gP"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.__str__()
    var_1.to_try()


def test_case_2():
    str_0 = ".RbV1`Ur(`L)`v0F;#}c"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_box()


def test_case_3():
    str_0 = "\n    Task are data-type for handle execution of functions (in lazy way)\n    transform results of this function and handle errors.\n    "
    str_1 = ".RbV1`Ur(`L)`v0F;}c"
    validation_0 = module_0.Validation(str_1, str_1)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.__eq__(str_0)
    var_1.to_maybe()


def test_case_4():
    str_0 = "n>-A^b,"
    str_0.to_either()


def test_case_5():
    str_0 = "n>-A^b,"
    var_0 = module_0.Validation(str_0, str_0)


def test_case_6():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.to_maybe()


def test_case_7():
    float_0 = -337.42
    list_0 = [float_0, float_0, float_0]
    int_0 = -43
    tuple_0 = (list_0, int_0)
    none_type_0 = None
    validation_0 = module_0.Validation(tuple_0, none_type_0)
    validation_0.is_fail()


def test_case_8():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    bool_1 = False
    validation_0 = module_0.Validation(bool_1, bool_1)
    validation_0.map(list_0)


def test_case_9():
    list_0 = []
    bool_0 = False
    none_type_0 = None
    validation_0 = module_0.Validation(bool_0, none_type_0)
    validation_0.bind(list_0)


def test_case_10():
    dict_0 = {}
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.ap(dict_0)


def test_case_11():
    none_type_0 = None
    none_type_1 = None
    validation_0 = module_0.Validation(none_type_1, none_type_1)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.ap(none_type_0)
    var_1.is_fail()


def test_case_12():
    str_0 = "n>-A^b,"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(str_0)
    var_1 = validation_0.__str__()
    validation_1 = validation_0.to_try()
    var_2 = validation_0.to_either()
    var_0.is_success()


def test_case_13():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_either()
    var_1.bind(bool_0)


def test_case_14():
    str_0 = ""
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(str_0)
    var_1 = validation_0.__str__()
    validation_1 = var_0.__eq__(var_0)
    var_2 = var_1.__eq__(var_0)
    str_0.to_either()


def test_case_15():
    bytes_0 = b"F\x03X\x8bQ\xb1\xd7\x96\x0b\x03^t\xbe\x10c\x14\x8e\xd8O"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.__eq__(validation_0)
    var_2 = var_1.__eq__(var_1)
    var_3 = validation_0.to_maybe()
    var_4 = validation_0.to_either()
    validation_1 = module_0.Validation(var_4, var_4)
    var_4.is_success()


def test_case_16():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_try()
    validation_1 = module_0.Validation(validation_0, validation_0)
    var_1.ap(validation_1)


def test_case_17():
    bool_0 = True
    bytes_0 = b"e"
    validation_0 = module_0.Validation(bool_0, bytes_0)
    tuple_0 = ()
    validation_1 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_1.to_either()
    var_0.map(tuple_0)


def test_case_18():
    str_0 = "n>-A^b,"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.is_fail()
    validation_1 = module_0.Validation(validation_0, var_0)
    var_1 = validation_1.__eq__(validation_0)
    var_0.to_box()
