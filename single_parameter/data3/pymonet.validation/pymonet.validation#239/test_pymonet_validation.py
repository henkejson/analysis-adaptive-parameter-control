# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bytes_0 = b"\xbe"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.is_success()
    float_0 = -885.109595
    int_0 = 481
    str_0 = "\nww_hVt"
    validation_1 = module_0.Validation(str_0, str_0)
    var_1 = validation_1.__eq__(int_0)
    var_1.bind(float_0)


def test_case_1():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.__str__()
    var_0.is_success()


def test_case_2():
    bytes_0 = b"\xbe"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    float_0 = -885.109595
    int_0 = 481
    str_0 = "\nww_hVt"
    validation_1 = module_0.Validation(str_0, str_0)
    var_1 = validation_1.__eq__(int_0)
    var_1.bind(float_0)


def test_case_3():
    complex_0 = 2523.002 - 377.2586j
    dict_0 = {complex_0: complex_0}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.__str__()
    var_2 = validation_0.to_try()
    var_1.to_maybe()


def test_case_4():
    bytes_0 = b"Ban:\xce\x9a\x03\xc4\x1ap\xb9G\x8d\x00\xe5\x17pt#"
    validation_0 = module_0.Validation(bytes_0, bytes_0)


def test_case_5():
    str_0 = "I`>ddO"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_try()
    var_0.is_success()


def test_case_6():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.is_fail()


def test_case_7():
    str_0 = " U*J_a\x0b+Ka#d{)d"
    str_1 = "pB<7iY="
    validation_0 = module_0.Validation(str_1, str_1)
    validation_0.map(str_0)


def test_case_8():
    complex_0 = 2523 - 377.2586j
    dict_0 = {complex_0: complex_0}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.__str__()
    validation_1 = module_0.Validation(validation_0, dict_0)
    var_2 = var_0.__eq__(validation_0)
    var_3 = var_0.__str__()
    validation_0.bind(dict_0)


def test_case_9():
    none_type_0 = None
    bytes_0 = b"Ban:\xce\x9a\x03\xc4\x1ap\xb9G\x8d\x00\xe5\x17pt#"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_0.ap(none_type_0)


def test_case_10():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_box()
    int_0 = 753
    none_type_1 = None
    validation_1 = module_0.Validation(int_0, none_type_1)
    validation_1.__str__()


def test_case_11():
    int_0 = -3903
    validation_0 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.to_lazy()
    bytes_0 = b"S\x90\x11\xcd"
    validation_1 = module_0.Validation(bytes_0, bytes_0)
    var_1 = validation_1.to_try()
    var_1.ap(var_0)


def test_case_12():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_box()
    var_1.is_success()


def test_case_13():
    list_0 = []
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, list_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.to_either()
    var_2 = validation_0.__eq__(list_0)
    validation_0.map(list_0)


def test_case_14():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    set_0 = set()
    validation_2 = module_0.Validation(none_type_0, set_0)
    var_0 = validation_2.is_success()
    var_1 = validation_2.to_maybe()
    var_1.bind(validation_2)


def test_case_15():
    str_0 = 'L=,[kLVU"'
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.__str__()
    var_1.to_either()


def test_case_16():
    list_0 = []
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, list_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.__eq__(list_0)
    validation_0.map(list_0)


def test_case_17():
    list_0 = []
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, list_0)
    var_0 = validation_0.to_either()
    validation_1 = module_0.Validation(list_0, none_type_0)
    var_1 = validation_0.__eq__(validation_1)
    var_0.bind(var_0)
