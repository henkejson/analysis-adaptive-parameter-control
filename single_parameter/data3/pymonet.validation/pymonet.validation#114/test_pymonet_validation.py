# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_box()
    var_2 = validation_0.to_lazy()
    validation_0.is_fail()


def test_case_1():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(none_type_0)
    var_0.to_try()


def test_case_2():
    str_0 = ""
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    var_0.bind(str_0)


def test_case_3():
    str_0 = 'K\x0cPiD~bvt["k\\L);'
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    var_0.is_fail()


def test_case_4():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_5():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_0.to_maybe()


def test_case_6():
    complex_0 = -2156.777124 - 3256.51j
    bytes_0 = b"\x823F"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_0.map(complex_0)


def test_case_7():
    tuple_0 = ()
    int_0 = -775
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.bind(tuple_0)


def test_case_8():
    float_0 = -46.1
    validation_0 = module_0.Validation(float_0, float_0)
    validation_0.ap(float_0)


def test_case_9():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.to_try()


def test_case_10():
    none_type_0 = None
    none_type_1 = None
    validation_0 = module_0.Validation(none_type_1, none_type_1)
    var_0 = validation_0.to_box()
    var_1 = validation_0.to_lazy()
    list_0 = []
    tuple_0 = (none_type_0, list_0)
    validation_1 = module_0.Validation(none_type_0, tuple_0)
    var_2 = validation_1.to_maybe()
    var_3 = var_1.to_box()
    var_4 = var_3.to_maybe()
    var_5 = var_0.__str__()


def test_case_11():
    bytes_0 = b"\xc7X\xa9oQ=\x90\xfcf\x98V2\xb7"
    none_type_0 = None
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    validation_0 = module_0.Validation(list_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.__eq__(none_type_0)
    var_1.to_maybe()


def test_case_12():
    none_type_0 = None
    tuple_0 = ()
    validation_0 = module_0.Validation(none_type_0, tuple_0)
    dict_0 = {none_type_0: none_type_0}
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_either()
    var_2 = var_0.__str__()
    validation_1 = module_0.Validation(tuple_0, var_0)
    var_3 = validation_0.to_box()
    var_4 = var_3.to_either()
    bool_0 = True
    var_5 = validation_0.to_lazy()
    validation_2 = module_0.Validation(bool_0, bool_0)
    validation_2.bind(dict_0)


def test_case_13():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.to_lazy()
    var_2 = var_1.to_box()
    validation_1 = module_0.Validation(var_2, var_2)
    var_3 = validation_1.__eq__(validation_1)
    var_4 = validation_1.to_box()
    var_5 = validation_1.to_lazy()
    validation_2 = validation_1.__eq__(validation_0)
    validation_2.to_maybe()


def test_case_14():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.to_lazy()
    var_2 = var_0.__eq__(none_type_0)
    validation_1 = module_0.Validation(var_1, var_1)
    var_3 = validation_1.__eq__(validation_1)
    var_4 = validation_1.to_box()
    var_5 = validation_1.to_lazy()
    list_0 = []
    tuple_0 = (var_0, list_0)
    validation_2 = module_0.Validation(none_type_0, list_0)
    var_6 = validation_2.to_maybe()
    validation_1.bind(tuple_0)
