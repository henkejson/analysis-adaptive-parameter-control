# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(none_type_0)
    validation_0.is_fail()


def test_case_1():
    str_0 = "\n    Sum is a Monoid that will combine 2 numbers under addition.\n    "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.__str__()
    var_2 = validation_0.__eq__(var_0)
    var_3 = var_2.__eq__(var_2)
    var_4 = var_0.__eq__(var_2)
    var_2.bind(var_3)


def test_case_2():
    none_type_0 = None
    str_0 = "\n    Sum is a Monoid that will combine 2 numbers under addition.\n    "
    validation_0 = module_0.Validation(none_type_0, str_0)
    var_0 = validation_0.to_either()
    none_type_0.to_maybe()


def test_case_3():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_4():
    none_type_0 = None
    none_type_1 = None
    validation_0 = module_0.Validation(none_type_1, none_type_1)
    var_0 = validation_0.__eq__(none_type_0)
    validation_0.to_either()


def test_case_5():
    none_type_0 = None
    bool_0 = True
    str_0 = "\n    Sum is a Monoid that will combine 2 numbers under addition.\n    "
    validation_0 = module_0.Validation(str_0, bool_0)
    var_0 = validation_0.__eq__(str_0)
    validation_0.map(none_type_0)


def test_case_6():
    none_type_0 = None
    int_0 = -393
    validation_0 = module_0.Validation(none_type_0, int_0)
    var_0 = validation_0.__eq__(none_type_0)
    none_type_1 = None
    validation_1 = module_0.Validation(none_type_1, none_type_1)
    validation_1.bind(validation_1)


def test_case_7():
    tuple_0 = ()
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.is_success()
    validation_0.ap(tuple_0)


def test_case_8():
    bool_0 = True
    tuple_0 = (bool_0,)
    bytes_0 = b"\xc2\xeb\xd6\xf0QA\x88\xfeXS\xb8':\xf8^#\xc0\x92\xf8c"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_box()
    var_0.bind(tuple_0)


def test_case_9():
    int_0 = 1
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_try()


def test_case_10():
    str_0 = "Box[U]"
    tuple_0 = (str_0, str_0)
    validation_0 = module_0.Validation(tuple_0, str_0)
    var_0 = validation_0.to_try()
    var_0.to_box()


def test_case_11():
    none_type_0 = None
    list_0 = []
    validation_0 = module_0.Validation(none_type_0, list_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.__str__()
    var_2 = var_0.__eq__(var_1)
    var_1.bind(none_type_0)


def test_case_12():
    none_type_0 = None
    str_0 = "\n    Sum is a Monoid that will combine 2 numbers under addition.\n    "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.__eq__(none_type_0)
    bool_0 = True
    var_2 = validation_0.__eq__(str_0)
    validation_1 = module_0.Validation(str_0, var_2)
    validation_0.bind(bool_0)


def test_case_13():
    none_type_0 = None
    int_0 = -412
    validation_0 = module_0.Validation(none_type_0, int_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.__eq__(none_type_0)
    none_type_1 = None
    validation_1 = module_0.Validation(none_type_1, none_type_1)


def test_case_14():
    complex_0 = 2631.367 + 787.531j
    validation_0 = module_0.Validation(complex_0, complex_0)
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, complex_0)
    validation_2 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_2.__eq__(validation_1)
    var_0.is_fail()


def test_case_15():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.to_box()
    var_2 = var_1.__eq__(validation_0)
    var_3 = validation_0.is_success()
    var_4 = validation_0.__str__()
    var_5 = validation_0.to_box()
    var_3.to_lazy()
