# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    none_type_0 = None
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(none_type_0)
    var_0.is_success()


def test_case_1():
    bytes_0 = b"\x06\xc4"
    bool_0 = True
    int_0 = 0
    list_0 = [int_0, int_0]
    tuple_0 = (bool_0, int_0, list_0)
    validation_0 = module_0.Validation(int_0, tuple_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_either()
    var_2 = validation_0.is_success()
    var_3 = var_1.to_try()
    var_4 = var_3.map(bytes_0)
    var_5 = var_1.to_box()
    var_2.is_fail()


def test_case_2():
    str_0 = "TG:MAs"
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.is_success()


def test_case_3():
    float_0 = -150.55
    validation_0 = module_0.Validation(float_0, float_0)


def test_case_4():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_1 = module_0.Validation(bool_0, bool_0)
    validation_1.to_try()


def test_case_5():
    bytes_0 = b"\x86\xb6\x978,\x99\x11\xb4\x0c\x05\\\xa5\xb6<\xe9\x14"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    str_0 = "TG:MAs"
    var_1 = validation_0.is_success()
    var_2 = validation_0.__eq__(str_0)
    var_3 = validation_0.to_lazy()
    var_4 = validation_0.__str__()
    bool_0 = False
    validation_1 = module_0.Validation(bool_0, str_0)
    var_5 = var_0.to_lazy()
    var_6 = validation_0.to_maybe()
    var_7 = validation_0.is_fail()
    var_8 = validation_0.to_box()
    var_9 = var_8.to_try()
    var_10 = str_0.__str__()
    var_6.is_success()


def test_case_6():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.map(validation_0)


def test_case_7():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    dict_0 = {}
    var_1 = var_0.__eq__(none_type_0)
    var_2 = validation_0.to_lazy()
    validation_0.bind(dict_0)


def test_case_8():
    str_0 = "Mfx(}"
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    validation_0.ap(str_0)


def test_case_9():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_box()


def test_case_10():
    bytes_0 = b"\x86\xb6\x978,\x99\x11\xb4\x0c\x05\\\xa5\xb6<\xe9\x14"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    str_0 = "TG:MAs"
    var_1 = validation_0.__eq__(str_0)
    var_2 = validation_0.to_lazy()
    validation_1 = var_0.__str__()
    var_3 = var_2.__eq__(bytes_0)
    var_1.is_success()


def test_case_11():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.to_lazy()
    var_2 = var_1.to_try()
    validation_0.to_either()


def test_case_12():
    bool_0 = False
    list_0 = []
    validation_0 = module_0.Validation(bool_0, list_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_lazy()
    var_2 = var_1.to_maybe()
    var_3 = var_2.__str__()
    var_4 = var_1.to_either()
    validation_1 = module_0.Validation(bool_0, bool_0)
    var_5 = validation_0.to_box()
    var_3.ap(var_3)


def test_case_13():
    int_0 = 1702
    none_type_0 = None
    validation_0 = module_0.Validation(int_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)
    var_0.to_box()


def test_case_14():
    bytes_0 = b"\x86\xb6\x978,\x99\x11\xb4\x0c\x05\\\xa5\xb6<\xe9\x14"
    str_0 = ""
    validation_0 = module_0.Validation(bytes_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.__str__()
    var_1.is_success()


def test_case_15():
    bytes_0 = b"\xf00"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.__eq__(validation_0)
    var_2 = validation_0.to_lazy()
    var_3 = validation_0.__str__()
    bool_0 = False
    validation_1 = module_0.Validation(bool_0, var_0)
    var_4 = var_2.to_maybe()
    var_5 = validation_1.__eq__(validation_0)
    var_6 = validation_0.to_try()
    var_2.is_fail()


def test_case_16():
    bytes_0 = b"\x86\xb6\x978,\x99\x11\xb4\x0c\x05\\\xa5\xb6<\xe9\x14"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.__eq__(validation_0)
    var_2 = var_0.to_lazy()
    tuple_0 = ()
    validation_1 = module_0.Validation(tuple_0, tuple_0)
    var_3 = validation_1.__str__()
    var_1.to_maybe()
