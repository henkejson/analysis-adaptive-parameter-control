# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    complex_0 = -1220.92797 - 918.50987j
    none_type_0 = None
    validation_0 = module_0.Validation(complex_0, complex_0)
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_1.__eq__(complex_0)
    var_0.to_lazy()


def test_case_1():
    str_0 = "`V.Sd303_b{K1;uBbT"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()


def test_case_2():
    set_0 = set()
    list_0 = [set_0, set_0, set_0, set_0]
    validation_0 = module_0.Validation(set_0, list_0)
    var_0 = validation_0.to_either()
    validation_1 = module_0.Validation(list_0, set_0)
    var_1 = validation_1.__eq__(var_0)
    var_2 = validation_1.to_maybe()
    validation_2 = module_0.Validation(validation_0, var_0)


def test_case_3():
    set_0 = set()
    list_0 = [set_0, set_0, set_0, set_0]
    validation_0 = module_0.Validation(set_0, list_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.__eq__(var_0)
    var_2 = var_0.to_maybe()
    var_3 = validation_0.to_maybe()
    validation_1 = module_0.Validation(var_3, list_0)
    var_0.is_fail()


def test_case_4():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)


def test_case_5():
    bytes_0 = b"O\x14"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.is_fail()
    var_1 = var_0.__str__()
    var_1.is_fail()


def test_case_6():
    set_0 = set()
    list_0 = [set_0, set_0, set_0, set_0]
    validation_0 = module_0.Validation(set_0, list_0)
    var_0 = validation_0.to_either()
    validation_1 = module_0.Validation(list_0, set_0)
    str_0 = ""
    validation_2 = module_0.Validation(str_0, str_0)
    var_1 = validation_1.to_lazy()
    validation_1.map(validation_1)


def test_case_7():
    str_0 = "`V.Sd303_b{K1;uBbT"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    validation_0.bind(var_0)


def test_case_8():
    set_0 = set()
    list_0 = [set_0, set_0, set_0, set_0]
    validation_0 = module_0.Validation(set_0, list_0)
    var_0 = validation_0.to_either()
    validation_1 = module_0.Validation(list_0, set_0)
    var_1 = validation_1.__eq__(var_0)
    var_2 = validation_1.to_maybe()
    validation_1.ap(set_0)


def test_case_9():
    str_0 = "\n    Create a new function that, when invoked,\n    caches the result of calling fn for a given argument set and returns the result.\n    Subsequent calls to the memoized fn with the same argument set will not result in an additional call to fn;\n    instead, the cached result for that set of arguments will be returned.\n\n    :param fn: function to invoke\n    :type fn: Function(A) -> B\n    :param key: function to decide if result should be taken from cache\n    :type key: Function(A, A) -> Boolean\n    :returns: new function invoking old one\n    :rtype: Function(A) -> B\n    "
    str_1 = "5y/Mee#5\rLEngL"
    validation_0 = module_0.Validation(str_1, str_1)
    var_0 = validation_0.to_box()
    var_1 = var_0.__eq__(str_0)


def test_case_10():
    complex_0 = -447.9 + 35.8275j
    validation_0 = module_0.Validation(complex_0, complex_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_box()


def test_case_11():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.to_try()


def test_case_12():
    set_0 = set()
    list_0 = [set_0, set_0, set_0, set_0]
    validation_0 = module_0.Validation(set_0, list_0)
    var_0 = validation_0.to_either()
    validation_1 = module_0.Validation(list_0, set_0)
    var_1 = validation_1.__eq__(var_0)
    var_2 = validation_1.to_maybe()
    var_3 = validation_0.is_fail()
    var_4 = var_0.map(validation_0)
    validation_2 = module_0.Validation(var_2, list_0)
    var_5 = validation_2.to_maybe()
    var_6 = validation_1.__str__()
    var_1.bind(var_2)


def test_case_13():
    bytes_0 = b"!@\x0bzo\xe8\xb2\xe0#\x0f\x8cA\xc4<\x8f$"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    set_0 = {bytes_0, bytes_0}
    validation_0 = module_0.Validation(dict_0, bytes_0)
    var_0 = validation_0.__str__()
    var_0.ap(set_0)


def test_case_14():
    complex_0 = -1220.92797 - 918.50987j
    none_type_0 = None
    validation_0 = module_0.Validation(complex_0, complex_0)
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_1.__eq__(validation_1)
    var_1 = validation_0.to_lazy()


def test_case_15():
    set_0 = set()
    list_0 = [set_0, set_0, set_0, set_0]
    validation_0 = module_0.Validation(set_0, list_0)
    validation_1 = module_0.Validation(list_0, set_0)
    var_0 = validation_1.__eq__(validation_0)
    var_1 = validation_1.is_success()
    var_2 = validation_0.to_either()
    var_0.is_success()


def test_case_16():
    set_0 = set()
    list_0 = [set_0, set_0, set_0, set_0]
    validation_0 = module_0.Validation(set_0, list_0)
    var_0 = validation_0.to_either()
    validation_1 = module_0.Validation(list_0, set_0)
    var_1 = validation_1.__eq__(var_0)
    var_2 = validation_1.to_maybe()
    validation_2 = module_0.Validation(var_2, validation_0)
    var_3 = validation_1.to_either()
    validation_3 = module_0.Validation(var_0, var_3)
    var_4 = var_2.__eq__(list_0)
    var_5 = var_3.to_maybe()
    none_type_0 = None
    validation_4 = module_0.Validation(none_type_0, validation_2)
    var_1.is_fail()
