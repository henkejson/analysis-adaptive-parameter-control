# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    str_0 = "s$@I"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(validation_0)


def test_case_1():
    bytes_0 = b"\xed\x9ak}\xb8#K\tn\x16"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    str_0 = "e;5qdg>bspO=Q6"
    var_0 = validation_0.__eq__(str_0)


def test_case_2():
    bytes_0 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    validation_0.ap(validation_0)


def test_case_3():
    bytes_0 = b"K@\xb1A\x13\xe1%\x9d\xe5\x15,-\x08"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()


def test_case_4():
    str_0 = "F16^8TvZ\x0bx2_@"
    str_0.to_maybe()


def test_case_5():
    complex_0 = -2147.141 - 733.8j
    validation_0 = module_0.Validation(complex_0, complex_0)


def test_case_6():
    bytes_0 = b"K@\xb1A\x13\xe1%\x9dE\xe5\x15\xd5,-\x08"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_try()


def test_case_7():
    bytes_0 = b"\xed\x9a\xfak\x86\xb8#\xea\tn\x16"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.is_fail()


def test_case_8():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.map(none_type_0)


def test_case_9():
    bytes_0 = b'\x93<"\x8b\xa6\xc47DAJ\xdb'
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_0.bind(validation_0)


def test_case_10():
    bytes_0 = b"3\xb1\xf6<\xe8>"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_0.ap(validation_0)


def test_case_11():
    bytes_0 = b"\x8dv\x1a\xce\xbaI\xba"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_box()


def test_case_12():
    bytes_0 = b"\x1f\xf92=c\x12\x94"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_lazy()


def test_case_13():
    bytes_0 = b"\xed\x9a\xfa<\x86Q#\xea\tn\x16"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_box()
    validation_1 = module_0.Validation(bytes_0, bytes_0)


def test_case_14():
    bytes_0 = b"*<n\x1e\x15.\xd6\x88\xd4\xbf\xf72V~x\x98"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()


def test_case_15():
    bytes_0 = b"\xc4\xa7}\t\xe8\x12\xfc#\xbbu\xec\xb3\xa6\x01=\x0fC\x06m\x13"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()


def test_case_16():
    bytes_0 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.to_maybe()
    var_2 = validation_0.__eq__(validation_0)
    var_3 = validation_0.__str__()
    var_4 = validation_0.to_either()
    var_4.ap(var_2)


def test_case_17():
    bytes_0 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.__str__()
    var_2 = validation_0.to_either()
    var_0.ap(var_2)


def test_case_18():
    bytes_0 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_1 = module_0.Validation(validation_0, validation_0)
    var_0 = validation_0.__eq__(validation_1)
    var_1 = validation_0.__str__()
    var_2 = validation_0.__str__()
    var_1.to_maybe()
