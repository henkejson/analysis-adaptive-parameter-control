# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    none_type_0 = None
    validation_1 = module_0.Validation(validation_0, none_type_0)
    var_0 = validation_1.__eq__(bool_0)
    var_0.to_maybe()


def test_case_1():
    str_0 = "<f5Hb"
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.ap(str_0)
    validation_1 = module_0.Validation(str_0, var_1)


def test_case_2():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)


def test_case_3():
    str_0 = ":<f[5Hb"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, str_0)
    var_0 = validation_0.to_either()


def test_case_4():
    float_0 = 809.1325940771212
    tuple_0 = (float_0, float_0)
    set_0 = {tuple_0}
    tuple_1 = (float_0,)
    validation_0 = module_0.Validation(set_0, tuple_1)
    var_0 = validation_0.is_fail()


def test_case_5():
    int_0 = 43
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.map(validation_0)


def test_case_6():
    bytes_0 = b"\xe6\x12\x95\xc83"
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.bind(bytes_0)


def test_case_7():
    float_0 = -289.0552
    validation_0 = module_0.Validation(float_0, float_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.to_lazy()
    str_0 = 'Qi/"es4|"og;Q'
    validation_1 = module_0.Validation(str_0, str_0)
    validation_2 = module_0.Validation(validation_1, validation_1)
    var_2 = validation_2.to_lazy()
    none_type_0 = None
    validation_3 = module_0.Validation(var_2, none_type_0)
    validation_3.ap(var_1)


def test_case_8():
    bool_0 = True
    list_0 = [bool_0]
    validation_0 = module_0.Validation(bool_0, list_0)
    int_0 = -475
    validation_1 = module_0.Validation(int_0, int_0)
    var_0 = validation_1.to_box()
    var_1 = var_0.to_either()
    var_1.to_either()


def test_case_9():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_box()
    var_1.is_success()


def test_case_10():
    none_type_0 = None
    float_0 = -1224.0
    list_0 = [none_type_0, float_0, float_0]
    validation_0 = module_0.Validation(none_type_0, list_0)
    var_0 = validation_0.to_try()
    var_0.to_lazy()


def test_case_11():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_1 = module_0.Validation(validation_0, bool_0)
    var_0 = validation_1.__eq__(validation_1)
    var_0.to_maybe()


def test_case_12():
    int_0 = 1
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.__str__()
    var_0.bind(int_0)


def test_case_13():
    str_0 = "x<f5Hb"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.is_fail()
    var_2 = validation_0.__eq__(var_0)
    var_3 = validation_0.to_either()
    var_4 = validation_0.__str__()
    var_5 = var_3.ap(var_1)
    var_0.to_box()


def test_case_14():
    str_0 = "x<f5Hb"
    validation_0 = module_0.Validation(str_0, str_0)
    none_type_0 = None
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.is_fail()
    validation_1 = module_0.Validation(var_1, none_type_0)
    var_2 = validation_1.__eq__(none_type_0)
    validation_2 = module_0.Validation(none_type_0, var_0)
    var_3 = validation_0.__eq__(validation_2)
    validation_1.to_maybe()


def test_case_15():
    str_0 = ""
    validation_0 = module_0.Validation(str_0, str_0)
    none_type_0 = None
    var_0 = validation_0.__eq__(none_type_0)
    var_1 = validation_0.__eq__(validation_0)
    var_2 = validation_0.to_either()
    var_3 = validation_0.__str__()
    var_4 = validation_0.is_success()
    validation_0.map(var_4)


def test_case_16():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_maybe()
    var_0.ap(tuple_0)
