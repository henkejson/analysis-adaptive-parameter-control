# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bytes_0 = b"\x13\xe2\xf7z4)"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(bytes_0)
    validation_0.ap(bytes_0)


def test_case_1():
    bytes_0 = b'\xbf\\"9\xb9\x9b\xe8\xd7\xac\x19\xfe\xabFt'
    list_0 = [bytes_0, bytes_0]
    bytes_1 = b"\x00x\xd9\x82A"
    validation_0 = module_0.Validation(bytes_1, list_0)
    var_0 = validation_0.__eq__(list_0)
    var_1 = validation_0.__str__()
    var_2 = validation_0.__eq__(validation_0)
    var_0.ap(validation_0)


def test_case_2():
    str_0 = "Z=g^s`y*_\x0c"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    list_0 = [var_0]
    bytes_0 = b"Q\xb6\xd7;\x97n/X\x92"
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    var_1 = validation_1.to_lazy()
    var_2 = var_1.map(bytes_0)
    var_3 = var_2.map(list_0)
    var_3.is_fail()


def test_case_3():
    str_0 = "\n        Returns new ImmutableList with argument value on the begin of list\n        and other list elements after it\n\n        :param new_element: element to append on the begin of list\n        :type fn: A\n        :returns: ImmutableList[A]\n        "
    validation_0 = module_0.Validation(str_0, str_0)


def test_case_4():
    str_0 = "\n        Take function (A) -> b and applied this function on current box value and returns new box with mapped value.\n\n        :param mapper: mapper function\n        :type mapper: Function(A) -> B\n        :returns: new box with mapped value\n        :rtype: Box[B]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.is_success()
    var_0.is_fail()


def test_case_5():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.is_fail()


def test_case_6():
    none_type_0 = None
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.map(none_type_0)


def test_case_7():
    float_0 = 302.86111
    validation_0 = module_0.Validation(float_0, float_0)
    validation_0.bind(float_0)


def test_case_8():
    none_type_0 = None
    bytes_0 = b"\xe4;"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_box()
    var_0.ap(none_type_0)


def test_case_9():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.to_try()


def test_case_10():
    bytes_0 = b'\xbf\\"9\xb9\x9b\xe8\xd7\xac\x19\xfe\xabFt'
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.__str__()
    var_1.to_either()


def test_case_11():
    bytes_0 = b'\xbf\\"9\xb9\x9b\xe8\xd7\xac\x19\xfe\xabFt'
    list_0 = []
    validation_0 = module_0.Validation(bytes_0, list_0)
    var_0 = validation_0.__eq__(list_0)
    var_1 = validation_0.__str__()
    var_2 = validation_0.to_either()
    var_3 = validation_0.to_either()
    var_4 = validation_0.to_either()
    var_5 = var_4.to_try()
    var_6 = var_5.__str__()
    var_6.is_success()


def test_case_12():
    bytes_0 = b'\xbf\\"9\xb9\x9b\xe8\xd7\xac\x19\xfe\xabFt'
    list_0 = [bytes_0, bytes_0]
    int_0 = 0
    validation_0 = module_0.Validation(bytes_0, list_0)
    validation_1 = module_0.Validation(int_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_1.to_lazy()
    var_2 = var_1.to_either()
    var_3 = var_2.__str__()
    var_1.is_success()


def test_case_13():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.__str__()
    var_2 = var_1.__str__()
    var_1.to_either()


def test_case_14():
    bytes_0 = b'\xbf\\"9\xb9\x9b\xe8\xd7\xac\x19\xfe\xabFt'
    list_0 = [bytes_0, bytes_0]
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.__str__()
    var_2 = var_0.to_either()
    var_3 = var_2.__str__()
    none_type_0 = None
    validation_1 = module_0.Validation(var_0, none_type_0)
    var_4 = validation_1.__eq__(validation_0)
    var_5 = var_1.__str__()
    var_6 = var_0.to_lazy()
    var_7 = var_5.__str__()
    var_7.is_fail()
