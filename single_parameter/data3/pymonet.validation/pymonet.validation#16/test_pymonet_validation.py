# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(none_type_0)
    var_0.to_either()


def test_case_1():
    str_0 = "\n        Transform Lazy into Try with constructor_fn result.\n        Try will be successful only when constructor_fn not raise anything.\n\n        :returns: Try with constructor_fn result\n        :rtype: Try[A] | Try[Error]\n        "
    set_0 = {str_0, str_0, str_0}
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.__str__()
    none_type_0 = None
    bool_0 = False
    validation_1 = module_0.Validation(bool_0, bool_0)
    var_1 = validation_1.to_box()
    var_1.bind(none_type_0)


def test_case_2():
    tuple_0 = ()
    set_0 = {tuple_0}
    validation_0 = module_0.Validation(tuple_0, set_0)
    var_0 = validation_0.to_either()


def test_case_3():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)


def test_case_4():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.to_lazy()
    validation_0.is_fail()


def test_case_5():
    bytes_0 = b"\xe9:\x1d\x92\xa0"
    dict_0 = {}
    validation_0 = module_0.Validation(bytes_0, dict_0)
    validation_0.map(dict_0)


def test_case_6():
    bool_0 = False
    none_type_0 = None
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.bind(none_type_0)


def test_case_7():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.ap(none_type_0)


def test_case_8():
    bytes_0 = b"\xecdP\x9e\xb1\xc4\x0eH\xd8a]\xdc\xf9\xef\x9dv"
    bool_0 = False
    none_type_0 = None
    validation_0 = module_0.Validation(bool_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.bind(bytes_0)
    var_2 = var_1.to_try()
    var_0.is_success()


def test_case_9():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.to_try()


def test_case_10():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(validation_0)
    var_0.to_either()


def test_case_11():
    bool_0 = False
    int_0 = 1999
    list_0 = [int_0, int_0]
    validation_0 = module_0.Validation(int_0, list_0)
    var_0 = validation_0.__str__()
    var_1 = var_0.__eq__(bool_0)
    var_2 = validation_0.to_maybe()
    var_2.is_success()


def test_case_12():
    none_type_0 = None
    none_type_1 = None
    bool_0 = False
    int_0 = 1999
    validation_0 = module_0.Validation(int_0, none_type_0)
    var_0 = validation_0.to_box()
    list_0 = [int_0, int_0]
    validation_1 = module_0.Validation(int_0, list_0)
    var_1 = validation_1.__str__()
    var_2 = validation_0.__eq__(validation_1)
    var_3 = var_2.__eq__(bool_0)
    var_4 = var_3.__eq__(none_type_1)
    var_5 = var_0.to_try()
    str_0 = "k{8y,?S[qo`b_6"
    var_6 = var_3.__eq__(str_0)
    var_4.to_maybe()


def test_case_13():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.__str__()
    var_0.is_success()


def test_case_14():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_either()


def test_case_15():
    tuple_0 = ()
    set_0 = {tuple_0}
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, tuple_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.to_box()
    var_2 = var_1.to_lazy()
    var_3 = var_2.ap(set_0)
    var_2.is_fail()
