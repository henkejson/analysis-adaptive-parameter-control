# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    complex_0 = 1163.36405 - 111.8709j
    bool_0 = True
    bool_1 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(bool_1)
    var_0.bind(complex_0)


def test_case_1():
    none_type_0 = None
    float_0 = 1047.1
    dict_0 = {none_type_0: none_type_0, none_type_0: none_type_0}
    validation_0 = module_0.Validation(none_type_0, dict_0)
    var_0 = validation_0.__str__()
    var_1 = var_0.__eq__(none_type_0)
    var_1.map(float_0)


def test_case_2():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    validation_0 = module_0.Validation(bool_0, dict_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_try()
    var_1.is_success()


def test_case_3():
    str_0 = '\\2"HlH`>nSCB4n'
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, str_0)
    var_0 = validation_0.to_maybe()
    var_0.to_maybe()


def test_case_4():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_5():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.to_maybe()


def test_case_6():
    none_type_0 = None
    dict_0 = {none_type_0: none_type_0, none_type_0: none_type_0}
    validation_0 = module_0.Validation(none_type_0, dict_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.is_fail()
    var_2 = var_1.__str__()
    var_0.is_success()


def test_case_7():
    bytes_0 = b"S\x19\x1eb"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    str_0 = '\\2"HlH`>nSCB4n'
    var_1 = validation_0.to_maybe()
    var_2 = validation_0.__str__()
    none_type_0 = None
    validation_1 = module_0.Validation(str_0, none_type_0)
    validation_2 = module_0.Validation(validation_1, var_1)
    validation_1.map(str_0)


def test_case_8():
    bytes_0 = b"S\x19\x1eb"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    str_0 = '\\2"HlH`>nSCB4n'
    var_1 = validation_0.to_maybe()
    var_2 = validation_0.__str__()
    none_type_0 = None
    validation_1 = module_0.Validation(str_0, none_type_0)
    var_3 = var_1.__eq__(none_type_0)
    validation_1.bind(bytes_0)


def test_case_9():
    complex_0 = 1163.364051 - 111.8709j
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_box()
    var_0.bind(complex_0)


def test_case_10():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_0.is_fail()


def test_case_11():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_either()
    var_1.to_either()


def test_case_12():
    bytes_0 = b"\x1b\x1cpZcN\xc7\x88\xdd\x07\xc6\x81\x9a\xcb\x98_\xea\x13:"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_box()
    validation_1 = module_0.Validation(var_0, validation_0)
    validation_1.to_try()


def test_case_13():
    bool_0 = True
    none_type_0 = None
    none_type_1 = None
    validation_0 = module_0.Validation(bool_0, none_type_1)
    validation_0.ap(none_type_0)


def test_case_14():
    bytes_0 = b"S\x19\x1eb"
    str_0 = '\\2"HlH`>nSCB4n'
    validation_0 = module_0.Validation(bytes_0, str_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.__str__()
    var_2 = validation_0.to_try()
    var_0.map(str_0)


def test_case_15():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_either()
    bytes_0 = b"S\x19\x1eb"
    validation_1 = module_0.Validation(bytes_0, bytes_0)
    var_1 = validation_1.__str__()
    var_2 = validation_1.to_box()
    var_2.is_success()


def test_case_16():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_either()
    bool_0 = True
    str_0 = '\\2"HlH`>nSCB4n'
    var_1 = validation_0.to_maybe()
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, str_0)
    var_2 = var_1.__eq__(bool_0)
    var_3 = var_0.__eq__(tuple_0)
    var_3.to_maybe()


def test_case_17():
    bytes_0 = b"S\x19\x1eb"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_maybe()
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, var_0)
    var_2 = validation_1.__eq__(validation_0)
    var_3 = validation_1.__eq__(validation_1)
    var_3.to_maybe()


def test_case_18():
    none_type_0 = None
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.__str__()
    var_1 = var_0.__str__()
    var_1.ap(none_type_0)
