# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bytes_0 = b"?w\xfb5"
    str_0 = "\n    Map is a Semigroup that will always return contated all values inside Map value\n    "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(bytes_0)
    var_0.to_either()


def test_case_1():
    bytes_0 = b"\xc3IZ\xbd\x82"
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bytes_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_try()
    var_0.is_success()


def test_case_2():
    int_0 = 4427
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    bytes_0 = b""
    none_type_1 = None
    validation_1 = module_0.Validation(int_0, bytes_0)
    var_0 = validation_1.to_either()
    var_0.map(none_type_1)


def test_case_3():
    bytes_0 = b"\xc3IZ\xbd\x82"
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bytes_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_either()
    validation_0.ap(var_0)


def test_case_4():
    bytes_0 = b"\x8a\xd8\xc5\xd9\xf8^\x10\xa2`US\xc1\xd1\xb0p\x02/g"
    str_0 = ""
    none_type_0 = None
    complex_0 = 935.72 + 1071.1j
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.map(complex_0)
    var_2 = var_1.ap(str_0)
    var_3 = var_2.to_box()
    var_4 = var_3.to_either()
    var_4.ap(none_type_0)


def test_case_5():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_6():
    float_0 = 349.71
    validation_0 = module_0.Validation(float_0, float_0)
    validation_0.to_maybe()


def test_case_7():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.is_fail()


def test_case_8():
    none_type_0 = None
    bytes_0 = b"\x12\xe0\xc9\xab\x85\x9b\xb5X"
    validation_0 = module_0.Validation(none_type_0, bytes_0)
    validation_0.map(none_type_0)


def test_case_9():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.bind(none_type_0)


def test_case_10():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_box()


def test_case_11():
    bool_0 = False
    bytes_0 = b"\x94\x8caxAZ\xf7\xe9\t"
    set_0 = {bytes_0, bytes_0, bytes_0}
    bool_1 = True
    validation_0 = module_0.Validation(bool_1, bool_1)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_box()
    var_2 = var_1.__eq__(set_0)
    var_2.map(bool_0)


def test_case_12():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.to_try()


def test_case_13():
    bytes_0 = b"\xc3IZ\xbd\x82"
    bool_0 = False
    set_0 = {bytes_0, bool_0, bool_0, bytes_0}
    validation_0 = module_0.Validation(set_0, bytes_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.__eq__(validation_0)
    none_type_0 = None
    var_1.ap(none_type_0)


def test_case_14():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    str_0 = "Ss^!/>"
    bool_1 = True
    tuple_0 = (list_0, str_0, bool_1, bool_1)
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_try()
    validation_1 = module_0.Validation(validation_0, bool_0)
    validation_2 = module_0.Validation(list_0, bool_1)
    var_1 = validation_0.__eq__(validation_2)
    var_1.to_lazy()


def test_case_15():
    bytes_0 = b""
    bool_0 = False
    set_0 = {bytes_0, bool_0, bool_0, bytes_0}
    validation_0 = module_0.Validation(set_0, bytes_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_maybe()
    var_2 = validation_0.__eq__(validation_0)
    var_2.ap(var_1)
