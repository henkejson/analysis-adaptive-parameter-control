# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bytes_0 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    var_0.is_fail()


def test_case_1():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    none_type_0 = None
    list_0 = [dict_0, none_type_0]
    validation_0 = module_0.Validation(none_type_0, list_0)
    var_0 = validation_0.__str__()
    var_1 = var_0.__str__()
    validation_1 = module_0.Validation(dict_0, none_type_0)
    validation_1.to_try()


def test_case_2():
    none_type_0 = None
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.__eq__(none_type_0)
    var_1.is_success()


def test_case_3():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    validation_0 = module_0.Validation(bool_0, set_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.to_try()
    var_2 = validation_0.to_maybe()
    var_1.to_either()


def test_case_4():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_5():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.to_try()


def test_case_6():
    int_0 = 844
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.is_fail()


def test_case_7():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.map(validation_0)


def test_case_8():
    float_0 = -2314.1
    validation_0 = module_0.Validation(float_0, float_0)
    validation_0.bind(float_0)


def test_case_9():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    none_type_0 = None
    validation_0 = module_0.Validation(dict_0, none_type_0)
    var_0 = validation_0.__eq__(none_type_0)
    int_0 = 89
    validation_0.ap(int_0)


def test_case_10():
    bytes_0 = b"\xeb\xa99\xa6"
    tuple_0 = (bytes_0, bytes_0)
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_box()
    validation_1 = module_0.Validation(var_0, var_0)
    var_1 = validation_0.to_either()
    var_2 = var_0.to_either()
    var_3 = var_2.to_try()
    var_2.bind(var_0)


def test_case_11():
    dict_0 = {}
    bytes_0 = b"Sh)B\xfe\x00\xedQ\xdd\xbdbf^\x95\x14J\xa1"
    list_0 = [dict_0, dict_0, bytes_0]
    validation_0 = module_0.Validation(list_0, dict_0)
    var_0 = validation_0.to_lazy()
    validation_0.map(var_0)


def test_case_12():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    none_type_0 = None
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.__eq__(dict_0)
    var_0.bind(none_type_0)


def test_case_13():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    none_type_0 = None
    list_0 = [dict_0, none_type_0]
    validation_0 = module_0.Validation(none_type_0, list_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_either()
    var_2 = var_1.to_box()
    var_0.to_box()


def test_case_14():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    list_0 = [dict_0, none_type_0]
    validation_1 = module_0.Validation(none_type_0, list_0)
    var_0 = validation_1.to_either()
    var_1 = validation_1.__eq__(validation_0)


def test_case_15():
    bytes_0 = b"\xeb\xa99\xa6"
    none_type_0 = None
    validation_0 = module_0.Validation(bytes_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_either()
    var_2 = var_1.to_lazy()
    var_2.is_fail()


def test_case_16():
    none_type_0 = None
    str_0 = "UK2+IYb@"
    set_0 = set()
    validation_0 = module_0.Validation(none_type_0, set_0)
    var_0 = validation_0.is_fail()
    var_1 = validation_0.to_either()
    var_2 = validation_0.to_box()
    var_3 = var_1.__str__()
    var_1.ap(str_0)
