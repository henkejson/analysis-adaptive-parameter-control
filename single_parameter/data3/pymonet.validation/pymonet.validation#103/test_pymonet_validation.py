# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bool_0 = True
    bool_1 = False
    float_0 = 3260.3
    validation_0 = module_0.Validation(bool_1, float_0)
    var_0 = validation_0.__eq__(bool_0)
    var_0.to_maybe()


def test_case_1():
    bool_0 = True
    bool_1 = True
    dict_0 = {bool_1: bool_0, bool_1: bool_1, bool_1: bool_0, bool_1: bool_1}
    validation_0 = module_0.Validation(bool_0, dict_0)
    var_0 = validation_0.__str__()
    var_0.to_maybe()


def test_case_2():
    bool_0 = False
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0]
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    validation_1 = module_0.Validation(validation_0, bool_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.to_lazy()
    validation_2 = module_0.Validation(list_0, var_1)
    var_1.is_fail()


def test_case_3():
    float_0 = 1403.9
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, dict_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.map(float_0)
    var_1.is_success()


def test_case_4():
    int_0 = 977
    validation_0 = module_0.Validation(int_0, int_0)


def test_case_5():
    int_0 = -1813
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.is_success()


def test_case_6():
    int_0 = -1332
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, int_0)
    validation_0.is_fail()


def test_case_7():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    validation_0.map(validation_0)


def test_case_8():
    none_type_0 = None
    bool_0 = False
    int_0 = 1705
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    none_type_1 = None
    validation_1 = module_0.Validation(int_0, none_type_1)
    validation_2 = module_0.Validation(none_type_0, none_type_0)
    validation_1.bind(bool_0)


def test_case_9():
    bool_0 = False
    bool_1 = True
    validation_0 = module_0.Validation(bool_1, bool_1)
    validation_0.ap(bool_0)


def test_case_10():
    dict_0 = {}
    none_type_0 = None
    bool_0 = False
    validation_0 = module_0.Validation(none_type_0, bool_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.__eq__(dict_0)
    var_1.to_box()


def test_case_11():
    str_0 = "-/|mr"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.__str__()
    var_1.to_either()


def test_case_12():
    str_0 = "M*U<jK&~"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_box()
    var_2 = var_1.__eq__(str_0)
    var_2.to_box()


def test_case_13():
    bool_0 = False
    str_0 = "Z$w+[37M[U"
    validation_0 = module_0.Validation(bool_0, str_0)
    var_0 = validation_0.to_try()


def test_case_14():
    none_type_0 = None
    bool_0 = True
    validation_0 = module_0.Validation(none_type_0, bool_0)
    validation_1 = module_0.Validation(bool_0, validation_0)
    var_0 = validation_1.__eq__(validation_1)
    var_1 = var_0.__eq__(var_0)
    var_0.ap(validation_0)


def test_case_15():
    str_0 = "\n        :param semigroup: other semigroup to concat\n        :type semigroup: First[B]\n        :returns: new First with first value\n        :rtype: First[A]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_try()


def test_case_16():
    none_type_0 = None
    bool_0 = True
    validation_0 = module_0.Validation(none_type_0, bool_0)
    validation_1 = module_0.Validation(none_type_0, validation_0)
    var_0 = validation_1.__eq__(validation_0)
    set_0 = {bool_0, bool_0}
    validation_0.map(set_0)


def test_case_17():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_either()
    var_0.map(var_0)


def test_case_18():
    none_type_0 = None
    bool_0 = False
    bytes_0 = b""
    dict_0 = {bool_0: bool_0, bool_0: bytes_0}
    validation_0 = module_0.Validation(dict_0, bytes_0)
    var_0 = validation_0.__str__()
    var_1 = var_0.__eq__(none_type_0)
    var_2 = validation_0.to_lazy()
    var_3 = validation_0.__eq__(validation_0)
    validation_0.ap(none_type_0)
