# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bytes_0 = b"\x9emI\xd9\xda\xa1\xfa"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)


def test_case_1():
    int_0 = 7
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(int_0)
    var_0.to_maybe()


def test_case_2():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.is_fail()


def test_case_3():
    bytes_0 = b"\x9emI\xd9\xda\xa1\xfa"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.__eq__(validation_0)


def test_case_4():
    str_0 = 'XH"^fG,[w.P>5o:'
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_try()
    var_1.map(str_0)


def test_case_5():
    none_type_0 = None
    bytes_0 = b"pmI\xd9\xda&\x00\xfa"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.__str__()
    var_1.bind(none_type_0)


def test_case_6():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    tuple_0 = ()
    str_0 = ""
    var_0 = validation_0.to_lazy()
    validation_1 = module_0.Validation(str_0, str_0)
    var_1 = validation_1.to_maybe()
    var_2 = var_1.__str__()
    var_3 = var_2.__eq__(tuple_0)
    var_2.is_fail()


def test_case_7():
    float_0 = 1587.7384
    validation_0 = module_0.Validation(float_0, float_0)


def test_case_8():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.is_fail()


def test_case_9():
    none_type_0 = None
    none_type_1 = None
    validation_0 = module_0.Validation(none_type_1, none_type_1)
    validation_0.map(none_type_0)


def test_case_10():
    none_type_0 = None
    bytes_0 = b"]\x01\xe0\x11\xae\x92\xa5[\x93\xcd\x87\xdd\xab\x10\x7f"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_0.bind(none_type_0)


def test_case_11():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.ap(validation_0)


def test_case_12():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.__str__()
    validation_1 = module_0.Validation(validation_0, var_0)
    var_2 = var_0.__str__()
    var_3 = validation_1.__eq__(validation_0)


def test_case_13():
    none_type_0 = None
    bytes_0 = b"\x9emI\xd9\xda\xa1\xfa"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = module_0.Validation(bytes_0, none_type_0)
    var_2 = var_1.to_lazy()
    var_3 = var_2.__eq__(var_2)


def test_case_14():
    list_0 = []
    none_type_0 = None
    validation_0 = module_0.Validation(list_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_try()
    var_1.bind(list_0)


def test_case_15():
    bytes_0 = b"}.\x87\x07\x19Lp\xd0\xdd!\xda\x88\x91{F\xb5[\x8eH\x8e"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_try()
    var_0.is_success()


def test_case_16():
    bytes_0 = b"Dm\xb9T]M\x11+ta\x9eS\xc2\x01\xf8"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.__eq__(bytes_0)
    validation_0.ap(validation_0)
