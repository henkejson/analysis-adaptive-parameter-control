# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1
import builtins as module_2


def test_case_0():
    int_0 = 187
    module_0.to_namedtuple(int_0)


def test_case_1():
    int_0 = -2859
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    list_0 = [int_0, dict_0]
    var_0 = module_0.to_namedtuple(list_0)


def test_case_2():
    dict_0 = {}
    none_type_0 = None
    var_0 = module_0.to_namedtuple(dict_0)
    module_1.namedtuple(none_type_0, dict_0, rename=var_0, defaults=var_0)


def test_case_3():
    bytes_0 = b"'\xa4\xf2\xaf\xe6\xd2Zk\xd7+&\xd9D\x1c\xc8z\xe3z\xd3"
    module_0.to_namedtuple(bytes_0)


def test_case_4():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_5():
    str_0 = "ofzxeb"
    tuple_0 = ()
    str_1 = "GVV/F^\x0c(IFO\t3'_L"
    list_0 = [tuple_0]
    dict_0 = {str_0: tuple_0, str_1: list_0}
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_6():
    str_0 = "1"
    list_0 = [str_0, str_0]
    dict_0 = {}
    tuple_0 = (str_0, list_0, dict_0)
    var_0 = module_0.to_namedtuple(tuple_0)
    module_0.to_namedtuple(str_0)


def test_case_7():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_8():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_9():
    str_0 = "4\n,<n}a-4~O48UV"
    bytes_0 = b"\x8d\xe0\x98B\xfcf\xc6"
    bool_0 = True
    bool_1 = False
    tuple_0 = (bool_1,)
    tuple_1 = (bool_0, tuple_0, bool_0)
    dict_0 = {bytes_0: bool_1, tuple_0: tuple_0}
    tuple_2 = (bytes_0, tuple_1, bool_0, dict_0)
    float_0 = 1046.5
    tuple_3 = (str_0, tuple_2, float_0)
    module_0.to_namedtuple(tuple_3)


def test_case_10():
    str_0 = "ofzxeb"
    tuple_0 = ()
    str_1 = "GVV/F^\x0c(IFO\t3'_L"
    list_0 = [tuple_0]
    dict_0 = {str_0: tuple_0, str_1: list_0}
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_11():
    str_0 = "\rasOkny_aptrs"
    bytes_0 = b"\x8d\xe0BP\xfcfr"
    bool_0 = False
    tuple_0 = (bool_0,)
    tuple_1 = (bool_0, tuple_0, bool_0)
    dict_0 = {str_0: bool_0, tuple_0: tuple_0}
    tuple_2 = (bytes_0, tuple_1, bool_0, dict_0)
    tuple_3 = (str_0, tuple_2, bool_0)
    var_0 = module_0.to_namedtuple(tuple_3)
    var_1 = module_0.to_namedtuple(var_0)
    var_2 = module_0.to_namedtuple(var_0)
    var_3 = module_0.to_namedtuple(var_0)
    var_4 = module_0.to_namedtuple(tuple_0)
    var_5 = module_0.to_namedtuple(var_4)
    var_6 = module_0.to_namedtuple(tuple_2)
    var_7 = module_0.to_namedtuple(var_3)
    var_8 = module_0.to_namedtuple(var_1)
    ordered_dict_0 = module_1.OrderedDict()
    list_0 = [var_0, var_2, ordered_dict_0]
    var_9 = module_0.to_namedtuple(list_0)
    bool_1 = True
    dict_1 = {var_2: bool_0, var_6: tuple_0, str_0: var_8, var_7: str_0}
    str_1 = "x"
    dict_2 = {var_3: bool_1, var_8: dict_1, str_1: dict_0, str_0: tuple_0}
    var_10 = module_0.to_namedtuple(dict_2)
    var_11 = module_0.to_namedtuple(var_10)
    module_2.object(**var_8)
