# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1


def test_case_0():
    int_0 = -835
    module_0.to_namedtuple(int_0)


def test_case_1():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    tuple_0 = (bool_0, bool_0, bool_0, set_0)
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_2():
    bool_0 = True
    bool_1 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_1}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_3():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_4():
    str_0 = "Generator that expands the given attr_map and yields an _AttrMapping\n    named tuple.\n\n    An attr_map is a tuple with each row containing a :term:`foreign-name`\n    which is a specially formatted string.\n    "
    module_0.to_namedtuple(str_0)


def test_case_5():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_6():
    str_0 = "E'\"4"
    dict_0 = {str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    module_0.to_namedtuple(str_0)


def test_case_7():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_8():
    bytes_0 = b"?m\xc0>"
    set_0 = {bytes_0}
    list_0 = [set_0, set_0, set_0]
    tuple_0 = (bytes_0, bytes_0, set_0, list_0)
    str_0 = "chmod"
    dict_0 = {str_0: bytes_0, str_0: list_0, str_0: bytes_0}
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    tuple_1 = (tuple_0, ordered_dict_0)
    var_0 = module_0.to_namedtuple(tuple_1)
    var_1 = module_0.to_namedtuple(var_0)
    var_2 = module_0.to_namedtuple(tuple_1)


def test_case_9():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)
    list_0 = [dict_0]
    var_1 = module_0.to_namedtuple(dict_0)
    var_2 = module_0.to_namedtuple(var_1)
    var_3 = module_0.to_namedtuple(var_0)
    var_4 = module_0.to_namedtuple(var_3)
    var_5 = module_0.to_namedtuple(list_0)


def test_case_10():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_11():
    ordered_dict_0 = module_1.OrderedDict()
    list_0 = [ordered_dict_0, ordered_dict_0, ordered_dict_0, ordered_dict_0]
    var_0 = module_0.to_namedtuple(list_0)


def test_case_12():
    bytes_0 = b"?m\xc0>"
    bytes_1 = b"\r\x86\x83B\xc45"
    set_0 = {bytes_0}
    list_0 = [set_0, set_0, set_0]
    tuple_0 = (bytes_0, bytes_1, set_0, list_0)
    str_0 = "1T]A\tc>bdrZ<GY;%y"
    dict_0 = {}
    dict_1 = {str_0: dict_0, str_0: list_0, bytes_0: dict_0}
    ordered_dict_0 = module_1.OrderedDict(**dict_1)
    tuple_1 = (tuple_0, ordered_dict_0)
    module_0.to_namedtuple(tuple_1)


def test_case_13():
    dict_0 = {}
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    var_0 = module_0.to_namedtuple(dict_0)
    tuple_0 = (ordered_dict_0, ordered_dict_0, var_0)
    var_1 = module_0.to_namedtuple(tuple_0)
    bytes_0 = b"?m\xc0>"
    bytes_1 = b"\xc7|\xb9\x92"
    set_0 = {bytes_0}
    list_0 = [set_0, set_0, set_0]
    tuple_1 = (bytes_0, bytes_1, set_0, list_0)
    str_0 = "1T]A\t2>bdrO<GY;%y"
    dict_1 = {}
    str_1 = "l\n"
    dict_2 = {str_0: dict_1, str_0: list_0, str_1: dict_1, var_1: set_0}
    ordered_dict_1 = module_1.OrderedDict(**dict_2)
    tuple_2 = (tuple_1, ordered_dict_1)
    var_2 = module_0.to_namedtuple(tuple_2)
    var_3 = module_0.to_namedtuple(var_2)
    module_0.to_namedtuple(set_0)
