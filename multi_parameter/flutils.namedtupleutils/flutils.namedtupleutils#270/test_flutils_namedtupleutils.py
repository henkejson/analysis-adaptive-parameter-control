# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1


def test_case_0():
    int_0 = 2
    module_0.to_namedtuple(int_0)


def test_case_1():
    dict_0 = {}
    float_0 = 1900.0
    bool_0 = False
    tuple_0 = (bool_0, dict_0, float_0, bool_0)
    var_0 = module_0.to_namedtuple(tuple_0)
    tuple_1 = (tuple_0, float_0)
    var_1 = module_0.to_namedtuple(tuple_1)


def test_case_2():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_3():
    bytes_0 = b"=W\xbc\xccE_\x15g\x9b("
    module_0.to_namedtuple(bytes_0)


def test_case_4():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_5():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_6():
    tuple_0 = ()
    str_0 = "Check that given ``obj`` acts like a list and is iterable.\n\n    List-like objects are instances of:\n\n    - :obj:`UserList <collections.UserList>`\n    - :obj:`Iterator <collections.abc.Iterator>`\n    - :obj:`KeysView <collections.abc.KeysView>`\n    - :obj:`ValuesView <collections.abc.ValuesView>`\n    - :obj:`deque <collections.deque>`\n    - :obj:`frozenset`\n    - :obj:`list`\n    - :obj:`set`\n    - :obj:`tuple`\n\n    List-like objects are **NOT** instances of:\n\n    - :obj:`None`\n    - :obj:`bool`\n    - :obj:`bytes`\n    - :obj:`ChainMap <collections.ChainMap>`\n    - :obj:`Counter <collections.Counter>`\n    - :obj:`OrderedDict <collections.OrderedDict>`\n    - :obj:`UserDict <collections.UserDict>`\n    - :obj:`UserString <collections.UserString>`\n    - :obj:`defaultdict <collections.defaultdict>`\n    - :obj:`Decimal <decimal.Decimal>`\n    - :obj:`dict`\n    - :obj:`float`\n    - :obj:`int`\n    - :obj:`str`\n    - etc...\n\n    Args:\n        obj (:obj:`Any <typing.Any>`): The object to check.\n\n    :rtype:\n        :obj:`bool`\n\n        * :obj:`True` if the given ``obj`` is list-like; :\n        * :obj:`False` otherwise.\n\n    Examples:\n        >>> from flutils.objutils import is_list_like\n        >>> is_list_like([1, 2, 3])\n        True\n        >>> is_list_like(reversed([1, 2, 4]))\n        True\n        >>> is_list_like('hello')\n        False\n        >>> is_list_like(sorted('hello'))\n        True\n    "
    var_0 = module_0.to_namedtuple(tuple_0)
    list_0 = [tuple_0, tuple_0, str_0]
    var_1 = module_0.to_namedtuple(tuple_0)
    list_1 = [list_0, list_0, tuple_0, str_0]
    var_2 = module_0.to_namedtuple(list_1)
    int_0 = 70
    module_0.to_namedtuple(int_0)


def test_case_7():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_8():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_9():
    str_0 = "X)>//a=DLQ?5&0"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_10():
    int_0 = 944
    dict_0 = {int_0: int_0, int_0: int_0}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_11():
    bytes_0 = b"!\x08\xd6V\xdb\x93\x90:"
    tuple_0 = (bytes_0,)
    dict_0 = {bytes_0: bytes_0, tuple_0: tuple_0}
    tuple_1 = (bytes_0, bytes_0, dict_0)
    module_0.to_namedtuple(tuple_1)


def test_case_12():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    var_0 = module_0.to_namedtuple(dict_0)
    none_type_0 = None
    str_0 = "P50QeZ9 "
    var_1 = module_0.to_namedtuple(var_0)
    dict_1 = {bool_0: none_type_0, str_0: bool_0}
    var_2 = module_0.to_namedtuple(dict_1)
    module_0.to_namedtuple(str_0)


def test_case_13():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)
    ordered_dict_0 = module_1.OrderedDict()
    none_type_0 = None
    str_0 = "P5v0e9f"
    bool_1 = True
    var_2 = module_0.to_namedtuple(dict_0)
    var_3 = module_0.to_namedtuple(ordered_dict_0)
    dict_1 = {var_0: none_type_0, str_0: bool_1}
    var_4 = module_0.to_namedtuple(dict_1)
    var_5 = module_0.to_namedtuple(var_4)
    module_0.to_namedtuple(none_type_0)
