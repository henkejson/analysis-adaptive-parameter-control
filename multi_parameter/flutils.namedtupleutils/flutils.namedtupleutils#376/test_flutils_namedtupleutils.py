# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1


def test_case_0():
    bool_0 = True
    module_0.to_namedtuple(bool_0)


def test_case_1():
    complex_0 = -2993.8 - 2434j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    var_0 = module_0.to_namedtuple(list_0)
    var_1 = module_0.to_namedtuple(list_0)


def test_case_2():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_3():
    str_0 = "k1F\rUN\x0bj"
    module_0.to_namedtuple(str_0)


def test_case_4():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_5():
    bool_0 = False
    bool_1 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_1}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_6():
    str_0 = "NQ"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_7():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    var_1 = module_0.to_namedtuple(var_0)
    none_type_0 = None
    module_0.to_namedtuple(none_type_0)


def test_case_8():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_9():
    ordered_dict_0 = module_1.OrderedDict()
    list_0 = []
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    var_1 = module_0.to_namedtuple(ordered_dict_0)
    ordered_dict_1 = module_1.OrderedDict(*list_0)
    bool_0 = False
    bytes_0 = b"\xed\xc77d~\x84\x91"
    dict_0 = {bytes_0: bool_0}
    module_0.to_namedtuple(dict_0)


def test_case_10():
    str_0 = "f..}~\\=~JEwBg][-W"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)
    bool_0 = True
    ordered_dict_0 = module_1.OrderedDict()
    list_0 = [bool_0]
    list_1 = [bool_0, bool_0]
    tuple_0 = (bool_0, bool_0, ordered_dict_0, list_1)
    var_2 = module_0.to_namedtuple(tuple_0)
    var_3 = module_0.to_namedtuple(tuple_0)
    var_4 = module_0.to_namedtuple(list_1)
    var_5 = module_0.to_namedtuple(ordered_dict_0)
    var_6 = module_0.to_namedtuple(var_5)
    var_7 = module_0.to_namedtuple(list_0)
    list_2 = [dict_0, bool_0, list_1]
    dict_1 = {var_5: list_2}
    var_8 = module_0.to_namedtuple(dict_1)
    module_0.to_namedtuple(str_0)


def test_case_11():
    str_0 = "H\x0c"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)
    bool_0 = True
    ordered_dict_0 = module_1.OrderedDict()
    list_0 = [bool_0, bool_0]
    tuple_0 = (bool_0, bool_0, ordered_dict_0, list_0)
    var_2 = module_0.to_namedtuple(tuple_0)
    var_3 = module_0.to_namedtuple(tuple_0)
    var_4 = module_0.to_namedtuple(list_0)
    list_1 = []
    var_5 = module_0.to_namedtuple(ordered_dict_0)
    ordered_dict_1 = module_1.OrderedDict(*list_1)
    module_1.namedtuple(ordered_dict_1, var_2, module=tuple_0)
