# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1
import builtins as module_2


def test_case_0():
    bool_0 = False
    module_0.to_namedtuple(bool_0)


def test_case_1():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    var_0 = module_0.to_namedtuple(list_0)


def test_case_2():
    str_0 = "is_subclass_of_any"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_3():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_4():
    bytes_0 = b"\x1d<\xefY|b\x9buF\x144M\xdf\xe7\x0e:,"
    module_0.to_namedtuple(bytes_0)


def test_case_5():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_6():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_7():
    dict_0 = {}
    list_0 = module_0.to_namedtuple(dict_0)
    var_0 = module_0.to_namedtuple(list_0)
    var_1 = module_2.object()


def test_case_8():
    str_0 = "is_subclass_of_any"
    str_1 = "q\nSla~H:Q\to4S%Hh6Xi"
    dict_0 = {str_1: str_0, str_0: str_0, str_1: str_0, str_1: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_9():
    none_type_0 = None
    bytes_0 = b">y\x0f\xb8\xd3\x87\xf4g\x7f["
    list_0 = [bytes_0, bytes_0, bytes_0]
    str_0 = "q\nSla~H:Q\to4S%Hh6Xi"
    dict_0 = {
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        str_0: none_type_0,
        str_0: none_type_0,
    }
    var_0 = module_0.to_namedtuple(dict_0)
    module_2.object(*list_0, **dict_0)


def test_case_10():
    bytes_0 = b">y\x0f\xb8\xd3\x87\xf4g\x7f["
    none_type_0 = None
    str_0 = "q\nSla~H:Q\to4S%Hh6Xi"
    dict_0 = {
        str_0: none_type_0,
        bytes_0: none_type_0,
        str_0: none_type_0,
        str_0: none_type_0,
    }
    module_0.to_namedtuple(dict_0)


def test_case_11():
    none_type_0 = None
    str_0 = "iO_subclass_of_an\n"
    str_1 = "q\nSva~H:Q\ty4S%Hh6Xq"
    dict_0 = {
        str_1: none_type_0,
        str_0: none_type_0,
        str_1: none_type_0,
        str_1: none_type_0,
    }
    var_0 = module_0.to_namedtuple(dict_0)
    tuple_0 = (var_0,)
    module_1.namedtuple(tuple_0, none_type_0, rename=str_1)
