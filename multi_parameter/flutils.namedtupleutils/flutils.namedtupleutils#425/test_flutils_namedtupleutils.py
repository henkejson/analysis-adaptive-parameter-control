# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1


def test_case_0():
    bool_0 = False
    module_0.to_namedtuple(bool_0)


def test_case_1():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    var_0 = module_0.to_namedtuple(list_0)


def test_case_2():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_3():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_4():
    str_0 = "XGr"
    module_0.to_namedtuple(str_0)


def test_case_5():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_6():
    str_0 = "SetupCfgCommand"
    dict_0 = {str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_7():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_8():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_9():
    bool_0 = False
    bytes_0 = b"\x13\xef\x0e\xddEkw\xb0|\xb49\xca\x96"
    dict_0 = {bool_0: bool_0, bytes_0: bool_0, bool_0: bool_0}
    module_0.to_namedtuple(dict_0)


def test_case_10():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_11():
    str_0 = "8upx\t)Lgt]Kms"
    dict_0 = {str_0: str_0, str_0: str_0}
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_12():
    str_0 = "SetupCfgCommand"
    dict_0 = {str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_13():
    float_0 = 5853.859394492189
    str_0 = "SetupCfgCommandc\x0c"
    dict_0 = {str_0: str_0}
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    list_0 = [float_0, ordered_dict_0, dict_0, str_0]
    tuple_0 = (float_0, list_0)
    var_0 = module_0.to_namedtuple(tuple_0)
    int_0 = 1403
    dict_1 = {int_0: int_0}
    var_1 = module_0.to_namedtuple(dict_1)
    list_1 = [int_0, float_0, var_1]
    var_2 = module_0.to_namedtuple(var_0)
    var_3 = module_0.to_namedtuple(list_1)
    var_4 = module_0.to_namedtuple(var_2)
    complex_0 = 3497.303845 - 2310.38j
    tuple_1 = (var_3, complex_0, var_3)
    var_5 = module_0.to_namedtuple(tuple_1)
    none_type_0 = None
    module_0.to_namedtuple(none_type_0)
