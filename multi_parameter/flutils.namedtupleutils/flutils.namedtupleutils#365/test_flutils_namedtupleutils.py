# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1


def test_case_0():
    int_0 = 2273
    module_0.to_namedtuple(int_0)


def test_case_1():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    var_0 = module_0.to_namedtuple(list_0)


def test_case_2():
    str_0 = "stdout"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_3():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_4():
    bytes_0 = b"e\x96r3\xe7\x8f\xce\xae\x02\xf6\xefd\x85H\x07\xb0\xb1\x11I"
    module_0.to_namedtuple(bytes_0)


def test_case_5():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_6():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)
    list_1 = [dict_0, dict_0, dict_0, dict_0]
    var_1 = module_0.to_namedtuple(list_1)


def test_case_7():
    str_0 = "iRl2Tp\\J\x0cyKN#SO"
    str_1 = "BMP\\RM)V\n=rypB`c7"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_1, str_1: str_0}
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_8():
    bytes_0 = b"\xbaG\x7f"
    set_0 = set()
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: set_0, bytes_0: bytes_0}
    list_0 = [dict_0, dict_0]
    bytes_1 = b"\x1e\xd0S\xf4"
    bytes_2 = b"\xceE!p\x18.\xa4\xa5U"
    tuple_0 = (list_0, set_0, bytes_1, bytes_2)
    module_0.to_namedtuple(tuple_0)


def test_case_9():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_10():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    tuple_0 = ()
    var_1 = module_0.to_namedtuple(var_0)
    var_2 = module_0.to_namedtuple(tuple_0)
    var_3 = module_0.to_namedtuple(var_2)


def test_case_11():
    none_type_0 = None
    list_0 = [none_type_0]
    str_0 = "qi\x0c"
    dict_0 = {none_type_0: list_0, str_0: str_0, none_type_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)
    module_0.to_namedtuple(str_0)
