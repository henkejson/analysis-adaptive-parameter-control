# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1
import builtins as module_2


def test_case_0():
    float_0 = 4128.75
    module_0.to_namedtuple(float_0)


def test_case_1():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    var_0 = module_0.to_namedtuple(list_0)


def test_case_2():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_3():
    str_0 = "7K$pO;{zo;1g\r<0k"
    module_0.to_namedtuple(str_0)


def test_case_4():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_5():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_6():
    str_0 = "m"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_7():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_8():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_9():
    bool_0 = False
    str_0 = "Wraps a single paragraph.\n\n        Args:\n            text (str): The text to be wrapped.\n\n         Returns:\n              A single :obj:`str` containing the wrapped paragraph.\n        "
    complex_0 = -1807.744 + 719.83j
    tuple_0 = (bool_0, str_0, complex_0)
    dict_0 = {tuple_0: bool_0, tuple_0: complex_0}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_10():
    tuple_0 = ()
    float_0 = -1366.36
    str_0 = "'B&lO09RxPW{>M5{6?+s"
    dict_0 = {str_0: float_0, str_0: str_0, str_0: float_0}
    ordered_dict_0 = module_1.OrderedDict(*tuple_0, **dict_0)
    list_0 = [ordered_dict_0]
    var_0 = module_0.to_namedtuple(list_0)
    ordered_dict_1 = module_1.OrderedDict()
    var_1 = module_0.to_namedtuple(ordered_dict_1)
    var_2 = module_0.to_namedtuple(ordered_dict_1)
    var_3 = module_0.to_namedtuple(var_2)
    ordered_dict_2 = module_1.OrderedDict()
    var_4 = module_0.to_namedtuple(ordered_dict_2)
    var_5 = module_0.to_namedtuple(ordered_dict_1)
    var_6 = module_0.to_namedtuple(var_2)
    var_7 = module_0.to_namedtuple(var_6)


def test_case_11():
    int_0 = 671
    list_0 = [int_0, int_0, int_0]
    var_0 = module_0.to_namedtuple(list_0)
    var_1 = module_0.to_namedtuple(var_0)
    bytes_0 = b"\xee\x86\xf7\xcd\xf6\x9d\x82\xbd\xf4\xadm\x95b\xed\x18N\x15\xe0\x16\x1b"
    dict_0 = {bytes_0: bytes_0}
    module_0.to_namedtuple(dict_0)


def test_case_12():
    str_0 = "k\t"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0]
    var_0 = module_0.to_namedtuple(list_0)
    tuple_0 = ()
    float_0 = -1366.36
    str_1 = "'B&lO09RxPW{>M5{6?+s"
    dict_1 = {str_1: float_0, str_1: str_1, str_1: float_0}
    ordered_dict_0 = module_1.OrderedDict(*tuple_0, **dict_1)
    var_1 = module_0.to_namedtuple(var_0)
    list_1 = [ordered_dict_0]
    var_2 = module_0.to_namedtuple(list_1)
    ordered_dict_1 = module_1.OrderedDict()
    var_3 = module_0.to_namedtuple(ordered_dict_1)
    var_4 = module_0.to_namedtuple(ordered_dict_1)
    var_5 = module_0.to_namedtuple(var_4)
    module_2.object(*var_4, **float_0)
