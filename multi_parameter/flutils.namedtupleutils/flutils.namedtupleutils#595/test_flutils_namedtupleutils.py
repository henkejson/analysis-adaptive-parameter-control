# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1


def test_case_0():
    float_0 = 1806.0
    module_0.to_namedtuple(float_0)


def test_case_1():
    str_0 = "esdVg1EOp`T+}*c+V"
    set_0 = {str_0, str_0, str_0, str_0}
    tuple_0 = (set_0,)
    tuple_1 = (tuple_0,)
    var_0 = module_0.to_namedtuple(tuple_1)


def test_case_2():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_3():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_4():
    str_0 = "__"
    module_0.to_namedtuple(str_0)


def test_case_5():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_6():
    str_0 = "pre_num"
    dict_0 = {str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_7():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_8():
    bool_0 = False
    bytes_0 = b"w$\x05"
    str_0 = "ko:V>%~HQ>."
    tuple_0 = (bytes_0, str_0)
    tuple_1 = (bool_0, bool_0, tuple_0, bool_0)
    var_0 = module_0.to_namedtuple(tuple_1)
    bool_1 = False
    var_1 = module_0.to_namedtuple(var_0)
    dict_0 = {bytes_0: bool_1, bool_1: bool_1, var_1: bool_1}
    module_0.to_namedtuple(dict_0)


def test_case_9():
    str_0 = ">a}&:2Yy'UI\x0bc>#1"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    dict_1 = {var_0: dict_0}
    var_1 = module_0.to_namedtuple(dict_1)
    var_2 = module_0.to_namedtuple(var_1)


def test_case_10():
    str_0 = "\x0bb64"
    dict_0 = {str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    tuple_0 = ()
    var_1 = module_0.to_namedtuple(tuple_0)
    ordered_dict_0 = module_1.OrderedDict()
    dict_1 = {tuple_0: tuple_0, var_0: var_1, var_1: tuple_0}
    var_2 = module_0.to_namedtuple(var_0)
    var_3 = module_0.to_namedtuple(dict_1)
    str_1 = "encode"
    bool_0 = False
    bytes_0 = b"\x94{d\xd2\xca5\x80"
    tuple_1 = (var_0, bytes_0, ordered_dict_0, var_3)
    var_4 = module_0.to_namedtuple(tuple_1)
    tuple_2 = (ordered_dict_0, var_3, str_1, bool_0)
    var_5 = module_0.to_namedtuple(tuple_2)
    var_6 = module_0.to_namedtuple(var_3)
    module_1.OrderedDict(*var_0, **var_5)
