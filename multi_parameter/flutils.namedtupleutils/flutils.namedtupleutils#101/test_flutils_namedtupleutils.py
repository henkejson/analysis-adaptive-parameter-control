# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1
import builtins as module_2


def test_case_0():
    float_0 = -2204.343232
    module_0.to_namedtuple(float_0)


def test_case_1():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    var_0 = module_0.to_namedtuple(list_0)
    module_1.OrderedDict(**var_0)


def test_case_2():
    float_0 = -2279.0
    list_0 = [float_0, float_0]
    dict_0 = {float_0: float_0, float_0: float_0, float_0: list_0}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_3():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_4():
    str_0 = "<Dw81 t``\n"
    module_0.to_namedtuple(str_0)


def test_case_5():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_6():
    str_0 = "uSY"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_7():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_8():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_9():
    bytes_0 = b"\x95'\xcb'\xe31l\x0eF-G\xf5\xed\xf4"
    bool_0 = True
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    tuple_0 = (bytes_0, bool_0, dict_0, bool_0)
    tuple_1 = (bytes_0, tuple_0, bool_0)
    module_0.to_namedtuple(tuple_1)


def test_case_10():
    str_0 = "-0:.!"
    str_1 = "uSY"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_1: str_1}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)
    object_0 = module_2.object()
    module_2.object(**dict_0)


def test_case_11():
    str_0 = "-0:.!"
    str_1 = "uS\r"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_1: str_1}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(dict_0)
    var_2 = module_0.to_namedtuple(var_1)
    object_0 = module_2.object()
    module_0.to_namedtuple(str_0)
