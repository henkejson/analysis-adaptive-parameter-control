# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1


def test_case_0():
    bool_0 = True
    module_0.to_namedtuple(bool_0)


def test_case_1():
    set_0 = set()
    list_0 = [set_0]
    var_0 = module_0.to_namedtuple(list_0)


def test_case_2():
    str_0 = "encode"
    dict_0 = {str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_3():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_4():
    bytes_0 = b"q-?(\xb5\xa2b*\x96\xe5\xe1"
    module_0.to_namedtuple(bytes_0)


def test_case_5():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_6():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_7():
    str_0 = "&tb*#/DZqkJ AQa/"
    dict_0 = {str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_8():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_9():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_10():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    dict_0 = {var_0: var_0, var_0: var_0}
    var_1 = module_0.to_namedtuple(var_0)
    var_2 = module_0.to_namedtuple(var_1)
    var_3 = module_0.to_namedtuple(dict_0)


def test_case_11():
    str_0 = "encode"
    dict_0 = {str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_12():
    bytes_0 = b"\x12\xbf\xa4V\x02\x95\x9c#\xb1ai\x99\xb3\xe6"
    int_0 = -14
    dict_0 = {int_0: int_0, bytes_0: int_0, bytes_0: int_0}
    tuple_0 = (bytes_0, int_0, dict_0)
    tuple_1 = (tuple_0, dict_0)
    module_0.to_namedtuple(tuple_1)


def test_case_13():
    str_0 = "\rencode"
    dict_0 = {str_0: str_0, str_0: str_0}
    dict_1 = {str_0: dict_0, str_0: str_0}
    list_0 = [dict_1, dict_1, dict_1]
    var_0 = module_0.to_namedtuple(list_0)
    var_1 = module_0.to_namedtuple(list_0)
    var_2 = module_0.to_namedtuple(list_0)
    module_1.namedtuple(list_0, str_0, rename=list_0)
