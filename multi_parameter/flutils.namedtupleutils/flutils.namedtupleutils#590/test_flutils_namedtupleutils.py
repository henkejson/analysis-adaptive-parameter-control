# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1
import builtins as module_2


def test_case_0():
    bool_0 = True
    module_0.to_namedtuple(bool_0)


def test_case_1():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    var_0 = module_0.to_namedtuple(list_0)


def test_case_2():
    str_0 = "bash"
    dict_0 = {str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_3():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_4():
    bytes_0 = b"\xd3\x129H\x177\x1b]\x11-\x06o\x19G\xd2\xd5D"
    module_0.to_namedtuple(bytes_0)


def test_case_5():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_6():
    bool_0 = False
    bool_1 = False
    tuple_0 = (bool_0, bool_1)
    dict_0 = {tuple_0: bool_0}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_7():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_8():
    str_0 = "P:\t4;|K@78\x0bg"
    none_type_0 = None
    dict_0 = {str_0: none_type_0, str_0: none_type_0}
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_9():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_10():
    str_0 = "ehist_a\t"
    bool_0 = False
    dict_0 = {str_0: bool_0, str_0: bool_0, bool_0: bool_0, str_0: bool_0}
    var_0 = module_0.to_namedtuple(dict_0)
    object_0 = module_2.object()
    module_0.to_namedtuple(object_0)


def test_case_11():
    str_0 = "exists_as"
    bool_0 = True
    dict_0 = {str_0: bool_0, str_0: bool_0, bool_0: bool_0, str_0: bool_0}
    var_0 = module_0.to_namedtuple(dict_0)
    bytes_0 = b"\x17\xa3^\x89F"
    dict_1 = {str_0: bool_0, bool_0: var_0, bytes_0: dict_0}
    module_0.to_namedtuple(dict_1)
