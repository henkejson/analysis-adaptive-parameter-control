# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1


def test_case_0():
    bool_0 = False
    module_0.to_namedtuple(bool_0)


def test_case_1():
    bool_0 = True
    tuple_0 = (bool_0,)
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_2():
    str_0 = "N"
    dict_0 = {str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_3():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_4():
    str_0 = "_{'A;>|rnD1ql:J"
    module_0.to_namedtuple(str_0)


def test_case_5():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_6():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    tuple_0 = (dict_0, dict_0)
    bool_1 = False
    tuple_1 = (bool_0, tuple_0, bool_1)
    var_0 = module_0.to_namedtuple(tuple_1)
    module_0.to_namedtuple(bool_1)


def test_case_7():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_8():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_9():
    str_0 = "+S\tUUFVnB"
    dict_0 = {str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    module_1.namedtuple(ordered_dict_0, var_0)


def test_case_10():
    bytes_0 = b"\xd1\x80\x15P\x11\xb9\x8a\r\x8dv\xbcF\xd1\xc8"
    dict_0 = {bytes_0: bytes_0}
    bool_0 = False
    tuple_0 = (dict_0, bool_0)
    module_0.to_namedtuple(tuple_0)


def test_case_11():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_12():
    str_0 = "Nm\n"
    dict_0 = {str_0: str_0}
    bool_0 = False
    var_0 = module_0.to_namedtuple(dict_0)
    tuple_0 = (str_0, dict_0, str_0, str_0)
    var_1 = module_0.to_namedtuple(tuple_0)
    bool_1 = False
    bool_2 = True
    dict_1 = {bool_2: bool_1, bool_1: bool_2, bool_2: bool_1}
    var_2 = module_0.to_namedtuple(var_0)
    var_3 = module_0.to_namedtuple(dict_1)
    bool_3 = True
    tuple_1 = (bool_1, var_3, bool_3)
    var_4 = module_0.to_namedtuple(tuple_1)
    module_0.to_namedtuple(bool_0)
