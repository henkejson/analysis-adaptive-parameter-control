# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1
import builtins as module_2


def test_case_0():
    int_0 = 128
    module_0.to_namedtuple(int_0)


def test_case_1():
    bool_0 = False
    list_0 = [bool_0]
    var_0 = module_0.to_namedtuple(list_0)


def test_case_2():
    str_0 = "is_subclass_of_any"
    dict_0 = {str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_3():
    str_0 = "normalize_path"
    module_0.to_namedtuple(str_0)


def test_case_4():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_5():
    str_0 = ""
    bool_0 = True
    dict_0 = {str_0: bool_0, bool_0: bool_0}
    set_0 = {str_0, bool_0}
    tuple_0 = (str_0, bool_0, dict_0, set_0)
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_6():
    str_0 = "is_subclass_of_any"
    str_1 = "ymfl5F!dBWoU'j"
    dict_0 = {str_0: str_0, str_1: str_1}
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    ordered_dict_1 = module_1.OrderedDict(**ordered_dict_0)
    list_0 = [ordered_dict_1]
    var_0 = module_0.to_namedtuple(list_0)


def test_case_7():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    var_1 = module_0.to_namedtuple(var_0)
    object_0 = module_2.object()
    var_2 = module_0.to_namedtuple(var_0)
    var_3 = module_0.to_namedtuple(var_2)
    module_0.to_namedtuple(object_0)


def test_case_8():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_9():
    str_0 = "Vj"
    str_1 = "\nU"
    dict_0 = {str_0: str_0, str_1: str_1}
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    bool_0 = True
    tuple_0 = (ordered_dict_0, bool_0)
    var_0 = module_0.to_namedtuple(tuple_0)
    dict_1 = {}
    var_1 = module_0.to_namedtuple(dict_1)
    var_2 = module_0.to_namedtuple(var_0)
    var_3 = module_2.object(*var_1)
    var_4 = module_0.to_namedtuple(var_0)
    var_5 = module_0.to_namedtuple(dict_0)
    var_6 = module_0.to_namedtuple(var_1)
    var_7 = module_0.to_namedtuple(dict_1)
    var_8 = module_0.to_namedtuple(var_7)
    module_0.to_namedtuple(str_0)


def test_case_10():
    bytes_0 = b"\xdd"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.to_namedtuple(dict_0)
