# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1
import builtins as module_2


def test_case_0():
    none_type_0 = None
    module_0.to_namedtuple(none_type_0)


def test_case_1():
    bool_0 = True
    tuple_0 = (bool_0,)
    var_0 = module_0.to_namedtuple(tuple_0)
    var_1 = module_0.to_namedtuple(tuple_0)


def test_case_2():
    str_0 = "m9U\x0c=)b|/B"
    dict_0 = {str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_3():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_4():
    str_0 = "0x\r7:]["
    module_0.to_namedtuple(str_0)


def test_case_5():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_6():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_7():
    str_0 = "I"
    dict_0 = {str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_8():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_9():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_10():
    object_0 = module_2.object()
    dict_0 = {object_0: object_0, object_0: object_0}
    var_0 = module_0.to_namedtuple(dict_0)
    none_type_0 = None
    module_0.to_namedtuple(none_type_0)


def test_case_11():
    int_0 = 5
    float_0 = 184.0242236945481
    dict_0 = {float_0: float_0, int_0: int_0, int_0: float_0}
    tuple_0 = (float_0, int_0, dict_0)
    var_0 = module_0.to_namedtuple(tuple_0)
    str_0 = "\no"
    var_1 = module_0.to_namedtuple(dict_0)
    dict_1 = {str_0: str_0, str_0: str_0}
    var_2 = module_0.to_namedtuple(dict_1)
    none_type_0 = None
    ordered_dict_0 = module_1.OrderedDict()
    list_0 = [ordered_dict_0, tuple_0, none_type_0, float_0, none_type_0, var_2]
    var_3 = module_0.to_namedtuple(list_0)
    var_4 = module_0.to_namedtuple(dict_0)
    module_0.to_namedtuple(int_0)


def test_case_12():
    str_0 = "@*\tN~xh'Xfs-:Z0"
    bytes_0 = b"cj\x95\n\xf8\x1a(\x11w\xf2\x08\x1c"
    bytes_1 = b"{\xf5e"
    dict_0 = {str_0: bytes_0, bytes_0: str_0, str_0: bytes_0, bytes_1: bytes_1}
    bool_0 = True
    tuple_0 = (str_0, dict_0, bool_0)
    module_0.to_namedtuple(tuple_0)
