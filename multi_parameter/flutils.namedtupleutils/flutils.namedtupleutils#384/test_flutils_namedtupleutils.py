# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1


def test_case_0():
    int_0 = 257
    module_0.to_namedtuple(int_0)


def test_case_1():
    int_0 = 257
    list_0 = [int_0, int_0]
    var_0 = module_0.to_namedtuple(list_0)


def test_case_2():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_3():
    str_0 = ""
    module_0.to_namedtuple(str_0)


def test_case_4():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_5():
    str_0 = "raw_utf8_escape"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_6():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_7():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_8():
    str_0 = "]8,yyY4C%L0(/\t"
    dict_0 = {str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_9():
    str_0 = "X_"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    tuple_0 = (var_0,)
    dict_1 = {tuple_0: tuple_0, tuple_0: tuple_0}
    list_0 = [dict_1, dict_1, dict_1]
    var_1 = module_0.to_namedtuple(list_0)
    var_2 = module_0.to_namedtuple(var_0)
    var_3 = module_0.to_namedtuple(tuple_0)
    module_1.OrderedDict(**var_2)


def test_case_10():
    bytes_0 = b"\x81\x0f}\xec\x14\x0cL\xd8)\x86W\x8f\xd39\x8b\r\xfa\xd7\x88"
    int_0 = -982
    bytes_1 = b"r7\xa6\xbc\xd5+\xf8\xbd\xddZ3"
    list_0 = []
    dict_0 = {bytes_1: bytes_0, bytes_1: list_0}
    bool_0 = False
    list_1 = [bool_0, bytes_0, bytes_0, dict_0]
    dict_1 = {bool_0: list_0, bytes_0: int_0, bytes_1: list_1}
    tuple_0 = (dict_0, dict_1, list_0)
    tuple_1 = (bytes_0, int_0, bytes_1, tuple_0)
    list_2 = [tuple_1]
    module_0.to_namedtuple(list_2)


def test_case_11():
    str_0 = "mW\x0bJL-v<>g"
    str_1 = "addtl_attrs"
    str_2 = " p\x0c "
    dict_0 = {str_0: str_1, str_1: str_1, str_2: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)
