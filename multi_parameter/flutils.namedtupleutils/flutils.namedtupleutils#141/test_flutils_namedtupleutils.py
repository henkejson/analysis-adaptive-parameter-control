# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1


def test_case_0():
    bool_0 = False
    module_0.to_namedtuple(bool_0)


def test_case_1():
    float_0 = 2681.4
    list_0 = [float_0, float_0, float_0]
    var_0 = module_0.to_namedtuple(list_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_2():
    bool_0 = False
    int_0 = -2456
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: int_0}
    bool_1 = False
    tuple_0 = (dict_0, bool_1)
    var_0 = module_0.to_namedtuple(tuple_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_3():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_4():
    str_0 = "&"
    module_0.to_namedtuple(str_0)


def test_case_5():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_6():
    str_0 = "A+aTyi7z"
    list_0 = [str_0, str_0]
    var_0 = module_0.to_namedtuple(list_0)
    var_1 = module_0.to_namedtuple(var_0)
    none_type_0 = None
    module_0.to_namedtuple(none_type_0)


def test_case_7():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_8():
    bytes_0 = b"\xcf\x99\xdd\xec"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.to_namedtuple(dict_0)


def test_case_9():
    bool_0 = True
    str_0 = "xdh5"
    ordered_dict_0 = module_1.OrderedDict()
    dict_0 = {str_0: str_0, str_0: bool_0, str_0: bool_0, str_0: ordered_dict_0}
    ordered_dict_1 = module_1.OrderedDict(**dict_0)
    var_0 = module_0.to_namedtuple(ordered_dict_1)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_10():
    str_0 = "Check that given ``obj`` acts like a list and is iterable.\n\n    List-like objects are instances of:\n\n    - :obj:`UserList <collections.UserList>`\n    - :obj:`Iterator <collections.abc.Iterator>`\n    - :obj:`KeysView <collections.abc.KeysView>`\n    - :obj:`ValuesView <collections.abc.ValuesView>`\n    - :obj:`deque <collections.deque>`\n    - :obj:`frozenset`\n    - :obj:`list`\n    - :obj:`set`\n    - :obj:`tuple`\n\n    List-like objects are **NOT** instances of:\n\n    - :obj:`None`\n    - :obj:`bool`\n    - :obj:`bytes`\n    - :obj:`ChainMap <collections.ChainMap>`\n    - :obj:`Counter <collections.Counter>`\n    - :obj:`OrderedDict <collections.OrderedDict>`\n    - :obj:`UserDict <collections.UserDict>`\n    - :obj:`UserString <collections.UserString>`\n    - :obj:`defaultdict <collections.defaultdict>`\n    - :obj:`Decimal <decimal.Decimal>`\n    - :obj:`dict`\n    - :obj:`float`\n    - :obj:`int`\n    - :obj:`str`\n    - etc...\n\n    Args:\n        obj (:obj:`Any <typing.Any>`): The object to check.\n\n    :rtype:\n        :obj:`bool`\n\n        * :obj:`True` if the given ``obj`` is list-like; :\n        * :obj:`False` otherwise.\n\n    Examples:\n        >>> from flutils.objutils import is_list_like\n        >>> is_list_like([1, 2, 3])\n        True\n        >>> is_list_like(reversed([1, 2, 4]))\n        True\n        >>> is_list_like('hello')\n        False\n        >>> is_list_like(sorted('hello'))\n        True\n    "
    dict_0 = {str_0: str_0}
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    var_1 = module_0.to_namedtuple(var_0)
    bool_0 = False
    list_0 = [bool_0]
    var_2 = module_0.to_namedtuple(list_0)
    var_3 = module_0.to_namedtuple(var_0)
    tuple_0 = (var_0,)
    str_1 = "xdh5"
    var_4 = module_0.to_namedtuple(var_3)
    dict_1 = {str_1: str_1, str_1: var_1, str_1: var_1, str_1: var_0}
    ordered_dict_1 = module_1.OrderedDict(**dict_1)
    var_5 = module_0.to_namedtuple(ordered_dict_1)
    dict_2 = {var_1: var_1, var_1: var_1, var_1: var_1, tuple_0: tuple_0}
    var_6 = module_0.to_namedtuple(var_5)
    str_2 = "?#Ep"
    tuple_1 = (dict_2, var_6, tuple_0, str_2)
    var_7 = module_0.to_namedtuple(tuple_1)
    var_8 = module_0.to_namedtuple(var_7)


def test_case_11():
    str_0 = "AuTw2\x0b"
    dict_0 = {str_0: str_0}
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    var_1 = module_0.to_namedtuple(var_0)
    bool_0 = False
    list_0 = [bool_0]
    var_2 = module_0.to_namedtuple(list_0)
    bytes_0 = b"\xad\xe6\x1e\x0e'F:\x8f\xa5av>3"
    int_0 = 1603
    tuple_0 = (bytes_0, int_0, int_0)
    var_3 = module_0.to_namedtuple(tuple_0)
    tuple_1 = (var_0,)
    str_1 = "xdh5"
    var_4 = module_0.to_namedtuple(var_3)
    dict_1 = {str_1: str_1, str_1: var_1, str_1: var_1, str_1: var_0}
    ordered_dict_1 = module_1.OrderedDict(**dict_1)
    var_5 = module_0.to_namedtuple(ordered_dict_1)
    dict_2 = {var_1: var_1, var_1: var_1, var_1: var_1, tuple_1: tuple_1}
    var_6 = module_0.to_namedtuple(var_5)
    str_2 = "?#Ep"
    tuple_2 = (dict_2, var_6, tuple_1, str_2)
    var_7 = module_0.to_namedtuple(tuple_2)
    var_8 = module_0.to_namedtuple(var_7)
