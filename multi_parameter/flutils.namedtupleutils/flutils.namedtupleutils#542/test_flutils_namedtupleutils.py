# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1
import builtins as module_2


def test_case_0():
    none_type_0 = None
    module_0.to_namedtuple(none_type_0)


def test_case_1():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    list_0 = [set_0]
    var_0 = module_0.to_namedtuple(list_0)
    complex_0 = -603.6 - 1499.69j
    bytes_0 = b"9\xff\xd0"
    list_1 = [complex_0, complex_0, bytes_0]
    var_1 = module_0.to_namedtuple(list_1)
    str_0 = "\\\tU/f'{]\n"
    module_0.to_namedtuple(str_0)


def test_case_2():
    bool_0 = True
    str_0 = "X"
    dict_0 = {str_0: str_0, str_0: str_0, bool_0: bool_0}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_3():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_4():
    str_0 = "{}b0"
    module_0.to_namedtuple(str_0)


def test_case_5():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_6():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_7():
    ordered_dict_0 = module_1.OrderedDict()
    list_0 = [ordered_dict_0, ordered_dict_0, ordered_dict_0]
    var_0 = module_0.to_namedtuple(list_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_8():
    str_0 = "tL^@UXkBkLpW\rV"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)
    int_0 = 384
    module_0.to_namedtuple(int_0)


def test_case_9():
    bytes_0 = b"\xf1#_f\xd5:Y=v\xb4n"
    dict_0 = {bytes_0: bytes_0}
    module_0.to_namedtuple(dict_0)


def test_case_10():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_11():
    ordered_dict_0 = module_1.OrderedDict()
    list_0 = [ordered_dict_0, ordered_dict_0, ordered_dict_0]
    var_0 = module_0.to_namedtuple(list_0)


def test_case_12():
    bool_0 = True
    str_0 = "X"
    dict_0 = {str_0: str_0, str_0: str_0, bool_0: bool_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_13():
    str_0 = "A simple callable that simplifies many calls to :obj:`subprocess.run`.\n\n    Args:\n        raise_error (bool, optional): A value of :obj:`True` will raise\n            a :obj:`ChildProcessError` if the process,\n            exits with a non-zero return code. Default: :obj:`True`\n        output_encoding (str, optional): If set, the returned ``stdout``\n            and ``stderr`` will be converted to from bytes to a Python\n            string using this given ``encoding``.  Defaults to:\n            :obj:`None` which will use the value from\n            :obj:`locale.getpreferredencoding` or, if not set, the value\n            from :obj:`sys.getdefaultencoding` will be used. If the given\n            encoding does NOT exist the default will be used.\n        **default_kwargs: Any :obj:`subprocess.Popen` keyword argument.\n\n    Attributes:\n        default_kwargs (:obj:`NamedTuple <typing.NamedTuple>`): The\n            ``default_kwargs`` passed into the constructor which may be\n            passed on to :obj:`subprocess.run`.\n        output_encoding (str): The encoding used to decode the process\n            output\n\n    "
    bool_0 = True
    list_0 = [str_0, str_0, str_0, bool_0]
    var_0 = module_0.to_namedtuple(list_0)
    str_1 = "r\t"
    dict_0 = {str_1: str_1, str_1: str_1, bool_0: bool_0}
    var_1 = module_0.to_namedtuple(dict_0)
    var_2 = module_0.to_namedtuple(var_1)
    list_1 = []
    ordered_dict_0 = module_1.OrderedDict(*list_1)
    object_0 = module_2.object(**ordered_dict_0)
    module_0.to_namedtuple(str_1)
