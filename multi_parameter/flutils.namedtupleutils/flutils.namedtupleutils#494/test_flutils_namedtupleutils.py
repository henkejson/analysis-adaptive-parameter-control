# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1
import builtins as module_2


def test_case_0():
    int_0 = 50855936
    module_0.to_namedtuple(int_0)


def test_case_1():
    bytes_0 = b"\xd7\x84Z\xcb\x9b\x9c\x00"
    int_0 = 2927
    tuple_0 = (bytes_0, int_0)
    var_0 = module_0.to_namedtuple(tuple_0)
    var_1 = module_0.to_namedtuple(var_0)
    var_2 = module_0.to_namedtuple(var_1)
    var_3 = module_0.to_namedtuple(var_1)
    var_4 = module_0.to_namedtuple(var_0)
    var_5 = module_0.to_namedtuple(var_3)
    var_6 = module_0.to_namedtuple(var_0)
    module_0.to_namedtuple(bytes_0)


def test_case_2():
    dict_0 = {}
    object_0 = module_0.to_namedtuple(dict_0)


def test_case_3():
    str_0 = "ap|\tzd"
    module_0.to_namedtuple(str_0)


def test_case_4():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_5():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_6():
    str_0 = "append"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_7():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)
    var_2 = module_0.to_namedtuple(dict_0)
    var_3 = module_2.object()
    var_4 = module_0.to_namedtuple(var_2)
    module_0.to_namedtuple(var_3)


def test_case_8():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_9():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0}
    tuple_1 = (tuple_0, dict_0)
    list_0 = [tuple_1, tuple_1, tuple_1, dict_0]
    var_0 = module_0.to_namedtuple(list_0)
    list_1 = []
    var_1 = module_0.to_namedtuple(list_1)
    bool_0 = False
    module_0.to_namedtuple(bool_0)


def test_case_10():
    str_0 = "append"
    str_1 = "_attrmap__ contains an nvalid item of: "
    dict_0 = {str_0: str_0, str_1: str_1, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    module_0.to_namedtuple(str_0)


def test_case_11():
    str_0 = "ik \t"
    str_1 = "__attr_map__ contains an invalid item of: "
    str_2 = ":l\x0c`k\\M*\x0bWqEd+JhgR:k"
    dict_0 = {str_0: str_0, str_1: str_1, str_2: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)
    var_2 = module_0.to_namedtuple(dict_0)
    module_0.to_namedtuple(str_1)


def test_case_12():
    bytes_0 = b"\xaa\x1d\xbdh'\xe3\xc6y\xbf\xa5\x0e\xfd\x1fN\x11\\\xc0\x06"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    list_0 = [bytes_0, dict_0]
    list_1 = [dict_0, list_0, bytes_0]
    module_0.to_namedtuple(list_1)
