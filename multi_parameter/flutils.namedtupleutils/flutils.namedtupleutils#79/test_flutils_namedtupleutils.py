# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1
import builtins as module_2


def test_case_0():
    bool_0 = True
    module_0.to_namedtuple(bool_0)


def test_case_1():
    int_0 = -1355
    ordered_dict_0 = module_1.OrderedDict()
    list_0 = [int_0, ordered_dict_0]
    var_0 = module_0.to_namedtuple(list_0)


def test_case_2():
    str_0 = "O"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_3():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_4():
    str_0 = "O"
    module_0.to_namedtuple(str_0)


def test_case_5():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_6():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0}
    var_0 = module_0.to_namedtuple(tuple_0)
    var_1 = module_0.to_namedtuple(tuple_0)
    var_2 = module_0.to_namedtuple(dict_0)


def test_case_7():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_8():
    bytes_0 = b'\x84\x9c\xe4H\x83\xbcMdjh-|,\xec\x1eU\x04\xce\xb4"'
    dict_0 = {bytes_0: bytes_0}
    module_0.to_namedtuple(dict_0)


def test_case_9():
    dict_0 = {}
    object_0 = module_2.object(*dict_0, **dict_0)
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_10():
    str_0 = "9+"
    bool_0 = False
    dict_0 = {str_0: str_0, bool_0: bool_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    bytes_0 = b""
    module_0.to_namedtuple(bytes_0)


def test_case_11():
    str_0 = "O"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_12():
    str_0 = "O "
    bool_0 = False
    dict_0 = {str_0: str_0, bool_0: bool_0, str_0: str_0}
    tuple_0 = (str_0, dict_0, bool_0)
    var_0 = module_0.to_namedtuple(tuple_0)
    var_1 = module_0.to_namedtuple(tuple_0)
    var_2 = module_0.to_namedtuple(dict_0)
    list_0 = [tuple_0, tuple_0, tuple_0]
    var_3 = module_0.to_namedtuple(list_0)
    var_4 = module_0.to_namedtuple(var_2)
    var_5 = module_0.to_namedtuple(var_1)
    module_1.namedtuple(str_0, var_2, module=tuple_0)
