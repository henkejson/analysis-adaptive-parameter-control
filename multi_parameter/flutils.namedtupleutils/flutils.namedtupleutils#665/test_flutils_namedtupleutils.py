# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1
import builtins as module_2


def test_case_0():
    int_0 = -3508
    module_0.to_namedtuple(int_0)


def test_case_1():
    float_0 = 1693.0
    set_0 = {float_0, float_0, float_0, float_0}
    tuple_0 = (set_0,)
    var_0 = module_0.to_namedtuple(tuple_0)
    var_1 = module_0.to_namedtuple(tuple_0)
    var_2 = module_0.to_namedtuple(var_0)


def test_case_2():
    list_0 = []
    str_0 = "camel_to_underscore"
    dict_0 = {str_0: str_0, str_0: list_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_3():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_4():
    str_0 = "%:"
    module_0.to_namedtuple(str_0)


def test_case_5():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_6():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_7():
    str_0 = "%:"
    list_0 = [str_0, str_0, str_0]
    var_0 = module_0.to_namedtuple(list_0)


def test_case_8():
    str_0 = "camel_to_underscore"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_9():
    str_0 = ">P s>QRTHC\x0b"
    str_1 = "camel_to_underscore"
    dict_0 = {str_0: str_0, str_0: str_1, str_1: str_1}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_10():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    var_1 = module_0.to_namedtuple(var_0)
    var_2 = module_0.to_namedtuple(ordered_dict_0)
    var_3 = module_0.to_namedtuple(var_1)
    var_4 = module_0.to_namedtuple(ordered_dict_0)
    var_5 = module_0.to_namedtuple(var_4)


def test_case_11():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_12():
    str_0 = "m"
    bool_0 = True
    bytes_0 = b"\xbbV"
    tuple_0 = (str_0, bool_0, bytes_0, bytes_0)
    var_0 = module_0.to_namedtuple(tuple_0)
    tuple_1 = ()
    var_1 = module_0.to_namedtuple(tuple_1)
    var_2 = module_0.to_namedtuple(var_1)
    var_3 = module_0.to_namedtuple(tuple_1)
    var_4 = module_0.to_namedtuple(var_1)
    object_0 = module_2.object(*tuple_1)
    var_5 = module_0.to_namedtuple(var_2)
    dict_0 = {object_0: tuple_1, tuple_1: tuple_1, object_0: object_0, tuple_1: tuple_1}
    var_6 = module_0.to_namedtuple(var_3)
    var_7 = module_0.to_namedtuple(var_4)
    var_8 = module_0.to_namedtuple(dict_0)


def test_case_13():
    int_0 = -1320
    bytes_0 = b"\x87S,\x82+"
    list_0 = [bytes_0, int_0]
    tuple_0 = (int_0, list_0)
    dict_0 = {int_0: bytes_0, int_0: int_0, bytes_0: tuple_0}
    list_1 = [dict_0]
    module_0.to_namedtuple(list_1)


def test_case_14():
    list_0 = []
    str_0 = ">P s>QRTHC\x0b"
    str_1 = "camel_to_underbJore\r"
    dict_0 = {str_0: str_0, str_0: list_0, str_1: str_1}
    ordered_dict_0 = module_1.OrderedDict(*list_0, **dict_0)
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    bool_0 = False
    var_1 = module_0.to_namedtuple(dict_0)
    var_2 = module_0.to_namedtuple(var_0)
    var_3 = module_0.to_namedtuple(var_0)
    module_0.to_namedtuple(bool_0)
