# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1


def test_case_0():
    int_0 = 0
    module_0.to_namedtuple(int_0)


def test_case_1():
    bool_0 = False
    list_0 = [bool_0]
    var_0 = module_0.to_namedtuple(list_0)


def test_case_2():
    str_0 = "P+lI:R]-"
    dict_0 = {str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_3():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_4():
    bytes_0 = b"~L"
    module_0.to_namedtuple(bytes_0)


def test_case_5():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_6():
    bool_0 = False
    str_0 = "y1"
    dict_0 = {str_0: bool_0, bool_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_7():
    ordered_dict_0 = module_1.OrderedDict()
    bool_0 = False
    str_0 = "J@Sh}K]Lkq5y\x0bFT9X"
    tuple_0 = (str_0, ordered_dict_0, str_0)
    var_0 = module_0.to_namedtuple(tuple_0)
    module_0.to_namedtuple(bool_0)


def test_case_8():
    tuple_0 = ()
    bytes_0 = b"\x81\xf0q){\xaf\xddF\xd4~z@\xdfo\xc1\x95z\xb7\xea\xac"
    list_0 = [tuple_0, bytes_0]
    var_0 = module_0.to_namedtuple(list_0)


def test_case_9():
    bool_0 = False
    str_0 = "y1"
    dict_0 = {str_0: bool_0, bool_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_10():
    complex_0 = -1120.311 + 1598.5j
    dict_0 = {complex_0: complex_0}
    var_0 = module_0.to_namedtuple(dict_0)
    list_0 = [complex_0, dict_0]
    var_1 = module_0.to_namedtuple(list_0)
    var_2 = module_0.to_namedtuple(var_0)
    var_3 = module_0.to_namedtuple(dict_0)


def test_case_11():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_12():
    bytes_0 = b"V\xc2gHLUKu\xcb\xa8oz\x81\x15+\xc3\xf9"
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    dict_0 = {bytes_0: bytes_0, tuple_0: tuple_0, tuple_0: bytes_0, tuple_0: tuple_1}
    module_0.to_namedtuple(dict_0)


def test_case_13():
    int_0 = -2398
    bool_0 = False
    list_0 = [int_0, int_0, bool_0]
    str_0 = "\nd"
    dict_0 = {str_0: bool_0, int_0: str_0}
    tuple_0 = (list_0, str_0, dict_0, bool_0)
    var_0 = module_0.to_namedtuple(tuple_0)
    var_1 = module_0.to_namedtuple(var_0)
    var_2 = module_0.to_namedtuple(tuple_0)
    var_3 = module_0.to_namedtuple(var_2)
    var_4 = module_0.to_namedtuple(var_3)
    str_1 = "p+ "
    var_5 = module_0.to_namedtuple(dict_0)
    module_1.namedtuple(str_1, list_0, rename=tuple_0)
