# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import builtins as module_1
import collections as module_2


def test_case_0():
    bool_0 = False
    module_0.to_namedtuple(bool_0)


def test_case_1():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    list_0 = [object_0]
    var_0 = module_0.to_namedtuple(list_0)


def test_case_2():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_3():
    ordered_dict_0 = module_2.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_4():
    bytes_0 = b'\xc1\x87\xa0A\xd8"\xc9\xdc\xb1\x8e\xe9yQ'
    module_0.to_namedtuple(bytes_0)


def test_case_5():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_6():
    ordered_dict_0 = module_2.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_7():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_8():
    ordered_dict_0 = module_2.OrderedDict()
    tuple_0 = (ordered_dict_0,)
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_9():
    bool_0 = False
    bytes_0 = b"\xed\x12\xa9[\xeb\x9d\x1d\x95\xf0\xb545\x05+\xe3g\r\x12\x17"
    dict_0 = {bytes_0: bytes_0}
    tuple_0 = (bool_0, bytes_0, dict_0)
    module_0.to_namedtuple(tuple_0)


def test_case_10():
    str_0 = "Check if given ``obj`` has all the given ``*attrs``.\n\n    Args:\n        obj (:obj:`Any <typing.Any>`): The object to check.\n        *attrs (:obj:`str`): The names of the attributes to check.\n\n    :rtype:\n        :obj:`bool`\n\n        * :obj:`True` if all the given ``*attrs`` exist on the given ``obj``;\n        * :obj:`False` otherwise.\n\n    Example:\n        >>> from flutils.objutils import has_attrs\n        >>> has_attrs(dict(),'get','keys','items','values')\n        True\n    "
    str_1 = "P("
    int_0 = -739
    dict_0 = {str_0: str_0, str_1: int_0}
    ordered_dict_0 = module_2.OrderedDict(**dict_0)
    list_0 = [ordered_dict_0]
    var_0 = module_0.to_namedtuple(list_0)
    list_1 = [var_0]
    var_1 = module_0.to_namedtuple(list_1)
    module_0.to_namedtuple(str_1)


def test_case_11():
    str_0 = "file"
    none_type_0 = None
    dict_0 = {str_0: none_type_0, str_0: none_type_0, str_0: none_type_0}
    ordered_dict_0 = module_2.OrderedDict(**dict_0)
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_12():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    tuple_0 = (bool_0, bool_0, dict_0, dict_0)
    var_0 = module_0.to_namedtuple(tuple_0)
    ordered_dict_0 = module_0.to_namedtuple(var_0)
    var_1 = module_2.OrderedDict(**dict_0)
    var_2 = module_0.to_namedtuple(var_1)
    list_0 = []
    var_3 = module_0.to_namedtuple(list_0)
    bool_1 = False
    var_4 = module_0.to_namedtuple(list_0)
    str_0 = " l64"
    var_5 = module_0.to_namedtuple(var_2)
    var_6 = module_0.to_namedtuple(var_0)
    dict_1 = {str_0: var_2}
    var_7 = module_0.to_namedtuple(var_1)
    var_8 = module_0.to_namedtuple(dict_1)
    var_9 = module_0.to_namedtuple(var_8)
    module_0.to_namedtuple(bool_1)
