# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1
import builtins as module_2


def test_case_0():
    bool_0 = False
    module_0.to_namedtuple(bool_0)


def test_case_1():
    complex_0 = 338.32743 - 1698.65j
    list_0 = [complex_0]
    var_0 = module_0.to_namedtuple(list_0)


def test_case_2():
    bytes_0 = b"\xc2\xa1r\xe9\xf1(\xa1\xba\\w"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    tuple_0 = (dict_0,)
    module_0.to_namedtuple(tuple_0)


def test_case_3():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_4():
    bytes_0 = b"\xc2\xa1r\xe9$(\xa1\xba\\w"
    module_0.to_namedtuple(bytes_0)


def test_case_5():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_6():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    var_0 = module_0.to_namedtuple(dict_0)
    dict_1 = {}
    ordered_dict_0 = module_1.OrderedDict()
    var_1 = module_0.to_namedtuple(dict_1)
    var_2 = module_0.to_namedtuple(var_1)


def test_case_7():
    str_0 = "encode"
    dict_0 = {str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_8():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_9():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_10():
    str_0 = "NamedTuple"
    str_1 = "et Z"
    str_2 = "Wraps the single paragraph in the given ``text`` so every line is\n        at most ``width`` characters long. All wrapping options are taken\n        from instance attributes of the\n        :obj:`~flutils.txtutils.AnsiTextWrapper` instance.\n\n        Args:\n            text (str): The text to be wrapped.\n\n        Returns:\n            A ``List[str]`` of output lines, without final newlines.\n            If the wrapped output has no content, the returned list is\n            empty.\n        "
    dict_0 = {str_0: str_0, str_1: str_0, str_2: str_2, str_1: str_1}
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    list_0 = [ordered_dict_0, str_2, str_1, str_2]
    var_0 = module_0.to_namedtuple(list_0)


def test_case_11():
    str_0 = "e0 "
    dict_0 = {str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    tuple_0 = (dict_0,)
    var_1 = module_0.to_namedtuple(dict_0)
    var_2 = module_0.to_namedtuple(var_1)
    var_3 = module_0.to_namedtuple(var_1)
    var_4 = module_0.to_namedtuple(tuple_0)
    set_0 = {var_4}
    list_0 = [set_0, str_0, var_4, tuple_0]
    var_5 = module_0.to_namedtuple(var_2)
    var_6 = module_0.to_namedtuple(var_1)
    var_7 = module_0.to_namedtuple(var_0)
    var_8 = module_0.to_namedtuple(var_1)
    var_9 = module_0.to_namedtuple(list_0)
    object_0 = module_2.object()
    var_10 = module_0.to_namedtuple(var_7)
    var_11 = module_0.to_namedtuple(var_10)
    var_12 = module_0.to_namedtuple(dict_0)
    module_0.to_namedtuple(set_0)
