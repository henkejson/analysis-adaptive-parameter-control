# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1


def test_case_0():
    bool_0 = True
    module_0.to_namedtuple(bool_0)


def test_case_1():
    str_0 = "L={G"
    set_0 = {str_0, str_0, str_0}
    int_0 = -212
    tuple_0 = (str_0, str_0, str_0)
    tuple_1 = (str_0, set_0, int_0, tuple_0)
    var_0 = module_0.to_namedtuple(tuple_0)
    var_1 = module_0.to_namedtuple(tuple_1)


def test_case_2():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_3():
    bytes_0 = b"Z\x0bFJ-~"
    module_0.to_namedtuple(bytes_0)


def test_case_4():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_5():
    str_0 = "pth_abse4t"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_6():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)
    var_2 = module_0.to_namedtuple(dict_0)
    var_3 = module_0.to_namedtuple(var_1)
    var_4 = module_0.to_namedtuple(dict_0)
    var_5 = module_0.to_namedtuple(var_1)
    var_6 = module_0.to_namedtuple(var_2)
    var_7 = module_0.to_namedtuple(var_5)
    var_8 = module_0.to_namedtuple(dict_0)


def test_case_7():
    list_0 = []
    str_0 = "pth_abse4t"
    var_0 = module_0.to_namedtuple(list_0)
    var_1 = module_0.to_namedtuple(list_0)
    str_1 = "psPBlX;f}E"
    dict_0 = {str_0: var_0, str_0: var_0, str_1: var_0, str_0: var_0}
    var_2 = module_0.to_namedtuple(list_0)
    var_3 = module_0.to_namedtuple(dict_0)
    var_4 = module_0.to_namedtuple(var_3)


def test_case_8():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    list_0 = []
    var_1 = module_0.to_namedtuple(list_0)
    none_type_0 = None
    str_0 = "psPBlX;f}E"
    dict_0 = {
        var_0: none_type_0,
        var_0: none_type_0,
        str_0: none_type_0,
        var_0: none_type_0,
    }
    ordered_dict_1 = module_1.OrderedDict(*list_0, **dict_0)
    var_2 = module_0.to_namedtuple(ordered_dict_1)
    var_3 = module_0.to_namedtuple(var_2)
    module_0.to_namedtuple(none_type_0)


def test_case_9():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    list_0 = []
    var_1 = module_0.to_namedtuple(list_0)
    none_type_0 = None
    str_0 = "psPBlX;f}E"
    dict_0 = {
        var_0: none_type_0,
        var_0: none_type_0,
        str_0: none_type_0,
        var_0: none_type_0,
    }
    ordered_dict_1 = module_1.OrderedDict(*list_0, **dict_0)
    var_2 = module_0.to_namedtuple(ordered_dict_1)
    complex_0 = 2375.2648 - 43.978j
    var_3 = module_0.to_namedtuple(var_2)
    list_1 = [complex_0, complex_0]
    var_4 = module_0.to_namedtuple(list_1)
    bytes_0 = b"\xc4n\x1e{\xaa"
    dict_1 = {bytes_0: list_1}
    tuple_0 = (dict_1, var_0, var_0)
    module_0.to_namedtuple(tuple_0)


def test_case_10():
    list_0 = []
    str_0 = "path_absent"
    var_0 = module_0.to_namedtuple(list_0)
    str_1 = "ahJ\x0b"
    dict_0 = {str_0: var_0, str_0: var_0, str_1: var_0, str_0: var_0}
    ordered_dict_0 = module_1.OrderedDict(*list_0, **dict_0)
    var_1 = module_0.to_namedtuple(ordered_dict_0)
    var_2 = module_0.to_namedtuple(var_1)
    var_3 = module_0.to_namedtuple(var_2)
    var_4 = module_0.to_namedtuple(dict_0)
    var_5 = module_0.to_namedtuple(var_4)
    var_6 = module_0.to_namedtuple(var_5)
    none_type_0 = None
    module_0.to_namedtuple(none_type_0)
