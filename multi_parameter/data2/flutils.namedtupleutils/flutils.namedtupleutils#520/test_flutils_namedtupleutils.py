# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1


def test_case_0():
    bool_0 = True
    module_0.to_namedtuple(bool_0)


def test_case_1():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    var_0 = module_0.to_namedtuple(list_0)


def test_case_2():
    str_0 = "hs_any_callables"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_3():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_4():
    bytes_0 = b"\x15\xaf\xae\xf1\xca\xfc\xda"
    module_0.to_namedtuple(bytes_0)


def test_case_5():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_6():
    float_0 = -599.8831991469705
    dict_0 = {float_0: float_0, float_0: float_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)
    var_2 = module_0.to_namedtuple(dict_0)
    bytes_0 = b""
    module_0.to_namedtuple(bytes_0)


def test_case_7():
    list_0 = []
    ordered_dict_0 = module_1.OrderedDict(*list_0)
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_8():
    float_0 = -600.73084
    dict_0 = {float_0: float_0, float_0: float_0}
    list_0 = [dict_0, dict_0]
    var_0 = module_0.to_namedtuple(list_0)
    tuple_0 = (var_0, var_0)
    var_1 = module_0.to_namedtuple(tuple_0)
    bytes_0 = b"\x00\xef\xb6\xa4"
    str_0 = "\t\x0br>i\ts"
    tuple_1 = ()
    dict_1 = {bytes_0: var_0, str_0: var_1, tuple_1: tuple_0, float_0: bytes_0}
    module_0.to_namedtuple(dict_1)


def test_case_9():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_10():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_11():
    str_0 = "yB\r.KnK[{[r7*=`LV"
    none_type_0 = None
    str_1 = "has_any_callables"
    dict_0 = {str_0: none_type_0, str_1: none_type_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_12():
    list_0 = []
    none_type_0 = None
    str_0 = ", is invalid."
    str_1 = "\tn"
    dict_0 = {str_0: none_type_0, str_0: none_type_0, str_1: none_type_0}
    ordered_dict_0 = module_1.OrderedDict(*list_0, **dict_0)
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    list_1 = [var_0, var_0, var_0, var_0]
    var_1 = module_0.to_namedtuple(list_1)
