# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1


def test_case_0():
    float_0 = -1076.3
    module_0.to_namedtuple(float_0)


def test_case_1():
    bool_0 = False
    list_0 = [bool_0]
    var_0 = module_0.to_namedtuple(list_0)


def test_case_2():
    str_0 = "subsequent_indent_len"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_3():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_4():
    str_0 = ">FD>Kz!"
    module_0.to_namedtuple(str_0)


def test_case_5():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_6():
    str_0 = "subsequent_indent_len"
    bool_0 = False
    dict_0 = {str_0: str_0, str_0: str_0, bool_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    module_0.to_namedtuple(bool_0)


def test_case_7():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_8():
    str_0 = ">FD>Kz!"
    dict_0 = {}
    tuple_0 = (dict_0, str_0, dict_0, dict_0)
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_9():
    str_0 = "VlHQqW])hH4<?j{g:4FD"
    bool_0 = False
    dict_0 = {str_0: str_0, str_0: str_0, bool_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(dict_0)
    var_2 = module_0.to_namedtuple(var_1)


def test_case_10():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    var_1 = module_0.to_namedtuple(ordered_dict_0)
    var_2 = module_0.to_namedtuple(ordered_dict_0)
    var_3 = module_0.to_namedtuple(var_0)


def test_case_11():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_12():
    bytes_0 = b"\x99\\\x97\xd6]\x0b"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    bool_0 = False
    tuple_0 = (dict_0, bool_0)
    module_0.to_namedtuple(tuple_0)


def test_case_13():
    bool_0 = True
    bytes_0 = b"'\x81\xb2\n\xdfy\xc4\xee\x15\xaa"
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bytes_0}
    tuple_0 = ()
    str_0 = "]\x0bwv8I{*pwU5j?3$S"
    tuple_1 = (dict_0, tuple_0, str_0, bytes_0)
    var_0 = module_0.to_namedtuple(tuple_1)
    var_1 = module_0.to_namedtuple(var_0)
    str_1 = "CEfrD\x0b"
    bool_1 = False
    dict_1 = {str_1: var_1, str_1: str_1}
    var_2 = module_0.to_namedtuple(dict_1)
    var_3 = module_0.to_namedtuple(var_2)
    var_4 = module_0.to_namedtuple(var_2)
    var_5 = module_0.to_namedtuple(tuple_1)
    none_type_0 = None
    str_2 = 'I"#lI'
    dict_2 = {str_2: tuple_0, bool_1: str_1, var_2: str_1, str_2: str_1}
    var_6 = module_0.to_namedtuple(dict_2)
    module_0.to_namedtuple(none_type_0)
