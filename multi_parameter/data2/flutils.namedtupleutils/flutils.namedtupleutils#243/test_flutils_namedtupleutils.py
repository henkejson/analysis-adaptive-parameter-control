# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1


def test_case_0():
    bool_0 = False
    module_0.to_namedtuple(bool_0)


def test_case_1():
    str_0 = "4xQC\x0b/tEx*p*O9q"
    bool_0 = False
    list_0 = [str_0, bool_0, bool_0, str_0]
    list_1 = [list_0]
    var_0 = module_0.to_namedtuple(list_1)


def test_case_2():
    str_0 = "f"
    dict_0 = {
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
    }
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_3():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_4():
    bytes_0 = b""
    module_0.to_namedtuple(bytes_0)


def test_case_5():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_6():
    str_0 = "\\Y"
    str_1 = "OKT"
    dict_0 = {str_0: str_0, str_1: str_0}
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_7():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_8():
    str_0 = "]pk4=rO):"
    str_1 = "pdt"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0, str_1: str_0}
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    dict_1 = {var_0: var_0, var_0: var_0}
    list_0 = [dict_1, var_0, dict_1]
    var_1 = module_0.to_namedtuple(list_0)
    int_0 = -1399
    module_0.to_namedtuple(int_0)


def test_case_9():
    bytes_0 = b"t\xe2$\x9a\x96\x94\xa1\xc3Z;\xa3\x93\x8b\xe5I"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.to_namedtuple(dict_0)


def test_case_10():
    str_0 = "]pk4=rO):"
    str_1 = "pdt"
    dict_0 = {str_0: str_0, str_1: str_0, str_1: str_0, str_1: str_0}
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    dict_1 = {str_0: str_0, str_0: str_0}
    list_0 = [dict_1, var_0, dict_1]
    var_1 = module_0.to_namedtuple(list_0)
    var_2 = module_0.to_namedtuple(var_0)
    var_3 = module_0.to_namedtuple(var_1)
    var_4 = module_0.to_namedtuple(var_0)
    var_5 = module_0.to_namedtuple(var_3)
    module_1.namedtuple(dict_1, str_1)


def test_case_11():
    str_0 = "\x0cb6DbrSaF"
    str_1 = "f"
    str_2 = "Wraps a single paragraph.\n\n        Args:\n            text (str): The text to be wrapped.\n\n         Returns:\n              A single :obj:`str` containing the wrapped paragraph.\n        "
    str_3 = "pdt"
    dict_0 = {str_0: str_0, str_1: str_0, str_2: str_0, str_3: str_0}
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    module_0.to_namedtuple(str_3)
