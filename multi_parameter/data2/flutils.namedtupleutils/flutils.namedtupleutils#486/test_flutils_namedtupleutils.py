# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import builtins as module_1
import collections as module_2


def test_case_0():
    bool_0 = True
    module_0.to_namedtuple(bool_0)


def test_case_1():
    object_0 = module_1.object()
    list_0 = [object_0, object_0]
    var_0 = module_0.to_namedtuple(list_0)


def test_case_2():
    float_0 = 3502.0
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_3():
    str_0 = ">Vp`]GKnXn("
    module_0.to_namedtuple(str_0)


def test_case_4():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_5():
    str_0 = "(\x1b\\[[0-9;:]+[ABCDEFGHJKSTfhilmns])"
    ordered_dict_0 = module_2.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    var_1 = module_0.to_namedtuple(var_0)
    var_2 = module_0.to_namedtuple(var_0)
    module_0.to_namedtuple(str_0)


def test_case_6():
    str_0 = "get_os_group"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_7():
    str_0 = " exfAF|G7&"
    bool_0 = True
    dict_0 = {str_0: str_0, str_0: str_0, str_0: bool_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_8():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_9():
    str_0 = "jz\n"
    list_0 = [str_0, str_0]
    str_1 = "(\x1b\\[[0-9;:]+[ABCDEFGHJKSTfhilmns])"
    dict_0 = {str_0: str_0, str_0: list_0, str_1: str_0, str_1: list_0}
    ordered_dict_0 = module_2.OrderedDict(**dict_0)
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    var_1 = module_0.to_namedtuple(dict_0)
    var_2 = module_0.to_namedtuple(ordered_dict_0)
    ordered_dict_1 = module_2.OrderedDict()
    var_3 = module_0.to_namedtuple(var_1)
    bool_0 = True
    var_4 = module_0.to_namedtuple(ordered_dict_1)
    tuple_0 = (ordered_dict_1, bool_0)
    var_5 = module_0.to_namedtuple(var_4)
    var_6 = module_0.to_namedtuple(tuple_0)
    module_0.to_namedtuple(bool_0)


def test_case_10():
    bytes_0 = b"\xe1z"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.to_namedtuple(dict_0)
