# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1


def test_case_0():
    bool_0 = False
    module_0.to_namedtuple(bool_0)


def test_case_1():
    bool_0 = False
    tuple_0 = (bool_0,)
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_2():
    str_0 = "i"
    dict_0 = {str_0: str_0, str_0: str_0}
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_3():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_4():
    str_0 = 'A loader that creates a module which defers loading until attribute\n    access.\n\n    This class is a "derivative work" of the Python\n    :obj:`importlib.util.LazyLoader`, and is:\n\n    `Copyright Â© 2001-2018 Python Software Foundation; All Rights Reserved\n    <https://bit.ly/2JzG17l>.`_\n\n    This class differs from :obj:`importlib.util.LazyLoader` in that it\n    uses the :obj:`~flutils.moduleutils._LazyModule` class and the\n    ``factory`` class method was removed.\n    '
    module_0.to_namedtuple(str_0)


def test_case_5():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_6():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_7():
    str_0 = "i"
    dict_0 = {str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_8():
    str_0 = "d,_6GS}4>#\x0c\rn'@\n2T80"
    str_1 = "i"
    dict_0 = {str_0: str_0, str_1: str_0}
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_9():
    bool_0 = True
    str_0 = ""
    dict_0 = {str_0: str_0, str_0: bool_0}
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    var_0 = module_0.to_namedtuple(dict_0)
    str_1 = "IVX,@TKX6TH"
    tuple_0 = (str_1, var_0, var_0, bool_0)
    var_1 = module_0.to_namedtuple(tuple_0)
    var_2 = module_0.to_namedtuple(ordered_dict_0)
    var_3 = module_0.to_namedtuple(dict_0)
    ordered_dict_1 = module_1.OrderedDict()
    float_0 = 994.02807
    module_0.to_namedtuple(float_0)


def test_case_10():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_11():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(ordered_dict_0)
    module_0.to_namedtuple(bool_0)


def test_case_12():
    bytes_0 = b"\x91\xefU;g"
    bytes_1 = b"\xb2\xef=&\x13"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_1}
    module_0.to_namedtuple(dict_0)


def test_case_13():
    int_0 = 2543
    str_0 = ",b)f@"
    dict_0 = {str_0: str_0, str_0: int_0, str_0: str_0, str_0: str_0}
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    list_0 = [ordered_dict_0, dict_0]
    var_0 = module_0.to_namedtuple(list_0)
    bool_0 = False
    str_1 = "V\x0b"
    dict_1 = {str_1: str_1, str_1: bool_0}
    var_1 = module_0.to_namedtuple(dict_1)
    str_2 = "4IVX,@TKX6TeH"
    tuple_0 = (str_2, var_1, var_1, bool_0)
    var_2 = module_0.to_namedtuple(tuple_0)
    var_3 = module_0.to_namedtuple(ordered_dict_0)
    module_1.OrderedDict(*var_2)
