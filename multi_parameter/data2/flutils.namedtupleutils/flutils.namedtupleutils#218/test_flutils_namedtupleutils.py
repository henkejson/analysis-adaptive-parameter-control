# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1


def test_case_0():
    none_type_0 = None
    module_0.to_namedtuple(none_type_0)


def test_case_1():
    str_0 = "placholder_len"
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_2():
    str_0 = "placholder_len"
    dict_0 = {str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_3():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_4():
    bytes_0 = b"@\xea\xdc8\xa4\xf2\xf3\x84\xfdC\xca?gR4\x89"
    module_0.to_namedtuple(bytes_0)


def test_case_5():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_6():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_7():
    bytes_0 = b"P\xb3"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    list_0 = [dict_0, bytes_0, bytes_0, dict_0]
    module_0.to_namedtuple(list_0)


def test_case_8():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_9():
    ordered_dict_0 = module_1.OrderedDict()
    list_0 = [ordered_dict_0]
    var_0 = module_0.to_namedtuple(list_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_10():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_11():
    int_0 = -1067
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    list_0 = module_0.to_namedtuple(dict_0)
    str_0 = "__dict__"
    none_type_0 = None
    dict_1 = {str_0: none_type_0}
    var_0 = module_0.to_namedtuple(dict_1)
    bytes_0 = b"\xf5v\xd7\x83R\xd4-\xe5\xfe\xe5qe\xcd\x8b"
    module_0.to_namedtuple(bytes_0)


def test_case_12():
    str_0 = "placholder_len"
    dict_0 = {str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)
