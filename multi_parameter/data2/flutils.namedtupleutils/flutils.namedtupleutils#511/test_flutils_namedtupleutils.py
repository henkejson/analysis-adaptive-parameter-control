# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1
import builtins as module_2


def test_case_0():
    none_type_0 = None
    module_0.to_namedtuple(none_type_0)


def test_case_1():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    var_0 = module_0.to_namedtuple(list_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_2():
    int_0 = 1204
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    tuple_0 = (dict_0,)
    var_0 = module_0.to_namedtuple(tuple_0)
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_1.namedtuple(int_0, int_0, defaults=list_0)


def test_case_3():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_4():
    bytes_0 = (
        b"\x9a\xef\xc2\xb4\xc6\xc4\x1c\xb0B\x9c\x88\xe9\xc4\xaf\xac\x89\x9a\xd6\x8d"
    )
    module_0.to_namedtuple(bytes_0)


def test_case_5():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_6():
    bool_0 = False
    str_0 = "N"
    dict_0 = {bool_0: str_0, bool_0: bool_0, str_0: bool_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)
    module_0.to_namedtuple(bool_0)


def test_case_7():
    dict_0 = {}
    bool_0 = False
    bytes_0 = b"\xec\xd9y\xb85P\xb0O\xe5\xe0Q"
    tuple_0 = (dict_0, bool_0, bytes_0)
    tuple_1 = (tuple_0, bool_0)
    var_0 = module_0.to_namedtuple(tuple_1)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_8():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)
    var_1 = module_0.to_namedtuple(tuple_0)
    var_2 = module_0.to_namedtuple(var_0)
    var_3 = module_0.to_namedtuple(var_2)
    var_4 = module_0.to_namedtuple(var_0)
    var_5 = module_0.to_namedtuple(var_4)
    bool_0 = False
    str_0 = "Return a string describing the file type if it exists.\n\n    This function processes the given ``path`` with\n    :obj:`~flutils.normalize_path`.\n\n    Args:\n        path (:obj:`str`, :obj:`bytes` or :obj:`Path <pathlib.Path>`):\n            The path to check for existence.\n\n    :rtype:\n        :obj:`str`\n\n        * ``''`` (empty string): if the given ``path`` does NOT exist; or,\n          is a broken symbolic link; or, other errors (such as permission\n          errors) are propagated.\n        * ``'directory'``: if the given ``path`` points to a directory or\n          is a symbolic link pointing to a directory.\n        * ``'file'``: if the given ``path`` points to a regular file or is a\n          symbolic link pointing to a regular file.\n        * ``'block device'``: if the given ``path`` points to a block device or\n          is a symbolic link pointing to a block device.\n        * ``'char device'``: if the given ``path`` points to a character device\n          or is a symbolic link pointing to a character device.\n        * ``'FIFO'``: if the given ``path`` points to a FIFO or is a symbolic\n          link pointing to a FIFO.\n        * ``'socket'``: if the given ``path`` points to a Unix socket or is a\n          symbolic link pointing to a Unix socket.\n\n    Example:\n        >>> from flutils.pathutils import exists_as\n        >>> exists_as('~/tmp')\n        'directory'\n    "
    var_6 = module_0.to_namedtuple(var_4)
    var_7 = module_0.to_namedtuple(var_3)
    bool_1 = True
    var_8 = module_0.to_namedtuple(var_6)
    var_9 = module_0.to_namedtuple(var_8)
    dict_0 = {bool_0: str_0, bool_1: var_2, str_0: bool_1}
    var_10 = module_0.to_namedtuple(var_6)
    var_11 = module_0.to_namedtuple(var_2)
    set_0 = {tuple_0}
    var_12 = module_0.to_namedtuple(var_6)
    tuple_1 = (dict_0, set_0, var_2)
    var_13 = module_0.to_namedtuple(tuple_1)
    module_0.to_namedtuple(str_0)


def test_case_9():
    str_0 = ""
    bytes_0 = b"\xef\xed\xd49"
    dict_0 = {bytes_0: bytes_0, bytes_0: str_0, str_0: str_0}
    bool_0 = False
    tuple_0 = (str_0, dict_0, bool_0, bytes_0)
    module_0.to_namedtuple(tuple_0)


def test_case_10():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)
    var_1 = module_0.to_namedtuple(tuple_0)
    var_2 = module_0.to_namedtuple(var_0)
    var_3 = module_0.to_namedtuple(tuple_0)
    var_4 = module_0.to_namedtuple(tuple_0)
    var_5 = module_0.to_namedtuple(var_3)
    var_6 = module_0.to_namedtuple(var_5)
    ordered_dict_0 = module_1.OrderedDict()
    bool_0 = False
    str_0 = "\rO"
    list_0 = [str_0, var_4]
    var_7 = module_0.to_namedtuple(list_0)
    var_8 = module_0.to_namedtuple(var_6)
    bool_1 = True
    var_9 = module_0.to_namedtuple(list_0)
    var_10 = module_0.to_namedtuple(var_9)
    dict_0 = {bool_0: str_0, bool_1: var_5, str_0: bool_1}
    var_11 = module_0.to_namedtuple(dict_0)
    var_12 = module_0.to_namedtuple(var_5)
    var_13 = module_2.object()
    var_14 = module_0.to_namedtuple(var_4)
    tuple_1 = (dict_0, var_11, var_5)
    var_15 = module_0.to_namedtuple(tuple_1)
    module_0.to_namedtuple(str_0)
