# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1
import builtins as module_2


def test_case_0():
    none_type_0 = None
    module_0.to_namedtuple(none_type_0)


def test_case_1():
    int_0 = 449
    list_0 = [int_0]
    var_0 = module_0.to_namedtuple(list_0)


def test_case_2():
    str_0 = "WxoynoR"
    dict_0 = {str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_3():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_4():
    str_0 = "a'\n+kJ0r}U;m"
    module_0.to_namedtuple(str_0)


def test_case_5():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_6():
    bytes_0 = b"\x95\xf8*\xf6\x85"
    tuple_0 = (bytes_0, bytes_0)
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_7():
    ordered_dict_0 = module_1.OrderedDict()
    list_0 = module_0.to_namedtuple(ordered_dict_0)
    var_0 = module_0.to_namedtuple(list_0)


def test_case_8():
    str_0 = "W\nxonoR"
    dict_0 = {str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_9():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_10():
    ordered_dict_0 = module_1.OrderedDict()
    list_0 = [ordered_dict_0]
    var_0 = module_0.to_namedtuple(list_0)


def test_case_11():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    tuple_0 = (bool_0, dict_0, bool_0)
    var_0 = module_0.to_namedtuple(tuple_0)
    int_0 = 449
    list_0 = [int_0]
    var_1 = module_0.to_namedtuple(list_0)


def test_case_12():
    bytes_0 = b"\xb0\xfe\xeb\x01"
    dict_0 = {bytes_0: bytes_0}
    module_0.to_namedtuple(dict_0)


def test_case_13():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    bool_0 = True
    str_0 = "A simple callable that simplifies many calls to :obj:`subprocess.run`.\n\n    Args:\n        raise_error (bool, optional): A value of :obj:`True` will raise\n            a :obj:`ChildProcessError` if the process,\n            exits with a non-zero return code. Default: :obj:`True`\n        output_encoding (str, optional): If set, the returned ``stdout``\n            and ``stderr`` will be converted to from bytes to a Python\n            string using this given ``encoding``.  Defaults to:\n            :obj:`None` which will use the value from\n            :obj:`locale.getpreferredencoding` or, if not set, the value\n            from :obj:`sys.getdefaultencoding` will be used. If the given\n            encoding does NOT exist the default will be used.\n        **default_kwargs: Any :obj:`subprocess.Popen` keyword argument.\n\n    Attributes:\n        default_kwargs (:obj:`NamedTuple <typing.NamedTuple>`): The\n            ``default_kwargs`` passed into the constructor which may be\n            passed on to :obj:`subprocess.run`.\n        output_encoding (str): The encoding used to decode the process\n            output\n\n    "
    dict_0 = {str_0: str_0, bool_0: bool_0, bool_0: str_0}
    list_0 = [bool_0, dict_0, dict_0]
    var_1 = module_0.to_namedtuple(dict_0)
    var_2 = module_0.to_namedtuple(dict_0)
    bool_1 = False
    var_3 = module_0.to_namedtuple(list_0)
    object_0 = module_2.object()
    list_1 = [bool_1, var_1, var_2, var_1, var_2]
    var_4 = module_0.to_namedtuple(list_1)
    str_1 = "oy.+eth"
    str_2 = "tv\x0b"
    dict_1 = {object_0: var_3, str_1: var_4, str_2: str_0, object_0: var_3}
    ordered_dict_1 = module_1.OrderedDict(**dict_1)
    var_5 = module_0.to_namedtuple(ordered_dict_1)
    var_6 = module_0.to_namedtuple(var_5)
