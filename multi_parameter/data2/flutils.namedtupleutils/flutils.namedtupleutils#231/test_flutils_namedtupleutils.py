# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1
import builtins as module_2


def test_case_0():
    bool_0 = False
    module_0.to_namedtuple(bool_0)


def test_case_1():
    bool_0 = False
    bytes_0 = b"\x95\x93\xd3\xc3"
    tuple_0 = (bool_0, bytes_0)
    var_0 = module_0.to_namedtuple(tuple_0)
    module_0.to_namedtuple(bool_0)


def test_case_2():
    str_0 = "command"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_3():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_4():
    bytes_0 = b"\xc4n\x7f\xbb"
    module_0.to_namedtuple(bytes_0)


def test_case_5():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_6():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    var_0 = module_0.to_namedtuple(dict_0)
    module_1.namedtuple(bool_0, var_0)


def test_case_7():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_8():
    str_0 = "*8`J1aM.5NucvFEm*>-0"
    str_1 = "command"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_9():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_10():
    str_0 = "command"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_11():
    str_0 = "51,"
    dict_0 = {str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)
    var_2 = module_0.to_namedtuple(var_0)


def test_case_12():
    bytes_0 = b"WY\x0c\x97]\xc0\xe5"
    dict_0 = {bytes_0: bytes_0}
    str_0 = "&"
    tuple_0 = (dict_0, str_0)
    module_0.to_namedtuple(tuple_0)


def test_case_13():
    bool_0 = True
    str_0 = "*8`J1aM5NucvFEm*>-0"
    none_type_0 = None
    str_1 = "R%<v}`GM9\n7r\n"
    str_2 = "\x0cO"
    dict_0 = {str_0: none_type_0, str_1: none_type_0, str_2: none_type_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_2.object(*var_0)
    module_0.to_namedtuple(bool_0)
