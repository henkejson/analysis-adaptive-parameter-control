# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1


def test_case_0():
    none_type_0 = None
    module_0.to_namedtuple(none_type_0)


def test_case_1():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    bool_1 = False
    tuple_0 = (list_0, bool_0, bool_1, bool_1)
    list_1 = [tuple_0]
    list_2 = [tuple_0, list_1]
    var_0 = module_0.to_namedtuple(list_2)


def test_case_2():
    str_0 = "raw_utf8_escape"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_3():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_4():
    bytes_0 = b"\x7f"
    module_0.to_namedtuple(bytes_0)


def test_case_5():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_6():
    list_0 = []
    ordered_dict_0 = module_1.OrderedDict()
    list_1 = []
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    var_1 = module_0.to_namedtuple(var_0)
    var_2 = module_0.to_namedtuple(list_1)
    var_3 = module_0.to_namedtuple(var_0)
    tuple_0 = (list_0, ordered_dict_0, ordered_dict_0)
    var_4 = module_0.to_namedtuple(tuple_0)
    none_type_0 = None
    module_0.to_namedtuple(none_type_0)


def test_case_7():
    str_0 = "&]>`FvU&"
    str_1 = "raw_utf8_escape"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_1: str_1}
    ordered_dict_0 = module_0.to_namedtuple(dict_0)
    module_0.to_namedtuple(str_1)


def test_case_8():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_9():
    str_0 = "raw_utf8_escape"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_10():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)
    var_2 = module_0.to_namedtuple(var_1)
    var_3 = module_0.to_namedtuple(var_2)


def test_case_11():
    dict_0 = {}
    tuple_0 = (dict_0,)
    var_0 = module_0.to_namedtuple(tuple_0)
    var_1 = module_0.to_namedtuple(tuple_0)
    var_2 = module_0.to_namedtuple(var_1)
    var_3 = module_0.to_namedtuple(tuple_0)
    dict_1 = {var_1: var_0}
    var_4 = module_0.to_namedtuple(dict_1)
    var_5 = module_0.to_namedtuple(var_3)
    var_6 = module_0.to_namedtuple(var_0)


def test_case_12():
    bytes_0 = b"\xc77\xce\xf1m\xcb."
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.to_namedtuple(dict_0)


def test_case_13():
    str_0 = "path_absent"
    str_1 = "raw_utE8_escap\n"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_1: str_1}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_1.OrderedDict()
    module_0.to_namedtuple(str_1)
