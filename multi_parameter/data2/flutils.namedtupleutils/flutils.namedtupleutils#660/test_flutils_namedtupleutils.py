# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1


def test_case_0():
    int_0 = -1429
    module_0.to_namedtuple(int_0)


def test_case_1():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    tuple_0 = (list_0,)
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_2():
    str_0 = "x2JN"
    dict_0 = {str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_3():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_4():
    str_0 = "KB\\}c}b@xdx-ps>WO|1U"
    module_0.to_namedtuple(str_0)


def test_case_5():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_6():
    str_0 = "<a\"8TpkEt'6|AG"
    bool_0 = True
    dict_0 = {str_0: str_0, str_0: str_0, bool_0: bool_0, str_0: bool_0}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_7():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_8():
    str_0 = "x2JN"
    dict_0 = {str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_9():
    str_0 = "KB\\}c}b@:dx-ps>WO|1U"
    dict_0 = {str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)
    var_2 = module_0.to_namedtuple(var_0)


def test_case_10():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_11():
    bytes_0 = b"\xb7\xa4\x00\x90$\xf7o\xa8u\x18\xcc<\xec\x07"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    list_0 = [dict_0, bytes_0]
    module_0.to_namedtuple(list_0)


def test_case_12():
    str_0 = "\txJN"
    str_1 = "Svw4@<_Nuq'7<P="
    dict_0 = {str_0: str_0, str_1: str_0, str_1: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    float_0 = -1480.2431222101945
    var_1 = module_0.to_namedtuple(var_0)
    var_2 = module_0.to_namedtuple(var_1)
    var_3 = module_0.to_namedtuple(dict_0)
    var_4 = module_0.to_namedtuple(var_3)
    str_2 = '62Og yI"`.'
    bool_0 = False
    list_0 = [var_0, float_0, str_2, bool_0]
    var_5 = module_0.to_namedtuple(list_0)
    module_1.namedtuple(var_4, bool_0)
