# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import builtins as module_1
import collections as module_2


def test_case_0():
    int_0 = -918
    module_0.to_namedtuple(int_0)


def test_case_1():
    object_0 = module_1.object()
    list_0 = [object_0, object_0]
    var_0 = module_0.to_namedtuple(list_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_2():
    str_0 = "path_absent"
    dict_0 = {str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_3():
    ordered_dict_0 = module_2.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_4():
    str_0 = ";-R'UDz(>"
    module_0.to_namedtuple(str_0)


def test_case_5():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_6():
    str_0 = "setup_dir\x0b"
    dict_0 = {str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)
    dict_1 = {var_0: var_0, var_0: var_0}
    var_2 = module_0.to_namedtuple(dict_1)
    object_0 = module_1.object()


def test_case_7():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_8():
    ordered_dict_0 = module_2.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_9():
    str_0 = "^H>m}F#C\x0bV8.w$:e'\x0c}"
    str_1 = "Convert any escaped Unicode literal hexadecimal character(s) to the\n    proper character(s).\n\n    This function will convert a string, that may contain escaped Unicode\n    literal hexadecimal characters, into a string with the proper characters.\n\n    Args:\n        text (:obj:`str`): The string that may have escaped Unicode\n            hexadecimal.\n\n    :rtype:\n        :obj:`str`\n\n            A string with each escaped Unicode hexadecimal character converted\n            into the proper character.\n\n\n    The following Unicode literal formats are supported::\n\n        \\x31\n        \\u0031\n        \\U00000031\n\n    Examples:\n\n        Basic usage::\n\n            >>> from flutils.strutils import convert_escaped_unicode_literal\n            >>> a = '\\\\x31\\\\x2e\\\\u2605\\\\x20\\\\U0001f6d1'\n            >>> convert_escaped_unicode_literal(a)\n            '1.â˜… ðŸ›‘'\n\n        This function is intended for cases when the value of an environment\n        variable contains escaped Unicode literal characters that need to be\n        converted to proper characters::\n\n            $ export TEST='\\x31\\x2e\\u2605\\x20\\U0001f6d1'\n            $ python\n\n        ::\n\n            >>> import os\n            >>> from flutils.strutils import convert_escaped_unicode_literal\n            >>> a = os.getenv('TEST')\n            >>> a\n            '\\\\x31\\\\x2e\\\\u2605\\\\x20\\\\U0001f6d1'\n            >>> convert_escaped_unicode_literal(a)\n            '1.â˜… ðŸ›‘'\n\n    "
    bool_0 = False
    dict_0 = {
        bool_0: bool_0,
        bool_0: str_0,
        bool_0: bool_0,
        str_1: bool_0,
        str_1: str_0,
        bool_0: bool_0,
    }
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)
    bool_1 = False
    module_0.to_namedtuple(bool_1)


def test_case_10():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_11():
    set_0 = set()
    bytes_0 = b"\xbc\xf8\xcf\x0cobY\x9cA\xf1"
    dict_0 = {bytes_0: bytes_0}
    list_0 = [dict_0, dict_0, set_0, bytes_0]
    tuple_0 = (set_0, bytes_0, dict_0, list_0)
    module_0.to_namedtuple(tuple_0)


def test_case_12():
    str_0 = "path_absent"
    dict_0 = {str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)
