# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1


def test_case_0():
    bool_0 = False
    module_0.to_namedtuple(bool_0)


def test_case_1():
    str_0 = "eutf8h"
    bool_0 = False
    tuple_0 = (bool_0, bool_0, str_0)
    dict_0 = {str_0: str_0, str_0: tuple_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(tuple_0)
    var_1 = module_0.to_namedtuple(dict_0)
    var_2 = module_0.to_namedtuple(var_1)


def test_case_2():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_3():
    str_0 = "~"
    module_0.to_namedtuple(str_0)


def test_case_4():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_5():
    str_0 = "eutf8h"
    bool_0 = False
    tuple_0 = (bool_0, bool_0, str_0)
    dict_0 = {str_0: str_0, str_0: tuple_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_6():
    str_0 = "eutfX8h"
    tuple_0 = (str_0, str_0, str_0)
    dict_0 = {
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: tuple_0,
        str_0: tuple_0,
        str_0: str_0,
    }
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_7():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)
    none_type_0 = None
    var_1 = module_0.to_namedtuple(var_0)
    module_0.to_namedtuple(none_type_0)


def test_case_8():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_9():
    str_0 = "eutfX8h"
    tuple_0 = (str_0, str_0, str_0)
    dict_0 = {str_0: str_0, str_0: tuple_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    tuple_1 = (var_0,)
    var_1 = module_0.to_namedtuple(tuple_1)


def test_case_10():
    str_0 = "Wraps a single paragraph.\n\n        Args:\n            text (str): The text to be wrapped.\n\n         Returns:\n              A single :obj:`str` containing the wrapped paragraph.\n        "
    bool_0 = True
    list_0 = [bool_0, str_0]
    tuple_0 = (bool_0, bool_0, list_0)
    dict_0 = {str_0: str_0, str_0: tuple_0, str_0: str_0}
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    var_1 = module_0.to_namedtuple(list_0)
    var_2 = module_0.to_namedtuple(ordered_dict_0)


def test_case_11():
    int_0 = -963
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    var_0 = module_0.to_namedtuple(dict_0)
    dict_1 = {}
    var_1 = module_0.to_namedtuple(dict_1)
    var_2 = module_0.to_namedtuple(dict_1)
    none_type_0 = None
    module_0.to_namedtuple(none_type_0)


def test_case_12():
    bytes_0 = b"C\x11H8s\x9e\xea\x1b\xe8\xba\xffA;/\x99\xe7\xb9*p\xef"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    list_0 = [dict_0, bytes_0]
    module_0.to_namedtuple(list_0)


def test_case_13():
    str_0 = "eutf8\r"
    bool_0 = False
    bool_1 = True
    list_0 = [bool_0, str_0]
    tuple_0 = (bool_0, bool_1, list_0)
    dict_0 = {str_0: str_0, str_0: tuple_0, str_0: str_0}
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    var_1 = module_0.to_namedtuple(var_0)
    var_2 = module_0.to_namedtuple(list_0)
    var_3 = module_0.to_namedtuple(var_1)
    var_4 = module_0.to_namedtuple(var_2)
    var_5 = module_0.to_namedtuple(dict_0)
    var_6 = module_0.to_namedtuple(ordered_dict_0)
    var_7 = module_0.to_namedtuple(var_4)
    var_8 = module_0.to_namedtuple(var_1)
    module_0.to_namedtuple(bool_0)
