# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1


def test_case_0():
    none_type_0 = None
    module_0.to_namedtuple(none_type_0)


def test_case_1():
    float_0 = -368.5
    bytes_0 = b"\xfc\x0c`Z-S*\x86J\x07"
    tuple_0 = (float_0, bytes_0)
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_2():
    str_0 = "n^bQOacI/~eSSX"
    dict_0 = {str_0: str_0}
    list_0 = [dict_0, dict_0, dict_0]
    var_0 = module_0.to_namedtuple(list_0)


def test_case_3():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_4():
    bytes_0 = b"m\xa6\x17\x91\xd9\xb0\x16\xe1"
    module_0.to_namedtuple(bytes_0)


def test_case_5():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_6():
    int_0 = -771
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_7():
    str_0 = "pAO5"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_8():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_9():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_10():
    bytes_0 = b"\xb3\x1e\xdd_\x85\xeb*\xf8"
    str_0 = "Convert any escaped UTF-8 hexadecimal character bytes into the proper\n    string characters(s).\n\n    This function will convert a string, that may contain escaped UTF-8\n    literal hexadecimal bytes, into a string with the proper characters.\n\n    Args:\n        text (:obj:`str`): The string that may have escaped UTF8 hexadecimal.\n\n    Raises:\n         UnicodeDecodeError: if any of the escaped hexadecimal characters\n            are not proper UTF8 bytes.\n\n    :rtype:\n        :obj:`str`\n\n            A string with each escaped UTF8 hexadecimal character converted\n            into the proper character.\n\n    Examples:\n\n        Basic usage:\n\n            >>> from flutils.strutils import convert_raw_utf8_escape\n            >>> a = 'test\\\\xc2\\\\xa9'\n            >>> convert_escaped_utf8_literal(a)\n            'test©'\n\n        This function is intended for cases when the value of an environment\n        variable contains escaped UTF-8 literal characters (bytes) that need\n        to be converted to proper characters::\n\n            $ export TEST='test\\\\xc2\\\\xa9'\n            $ python\n\n        ::\n\n            >>> import os\n            >>> from flutils.strutils import convert_raw_utf8_escape\n            >>> a = os.getenv('TEST')\n            >>> a\n            'test\\\\xc2\\\\xa9'\n            >>> convert_escaped_utf8_literal(a)\n            'test©'\n    "
    tuple_0 = (str_0,)
    dict_0 = {bytes_0: bytes_0, bytes_0: tuple_0}
    module_0.to_namedtuple(dict_0)


def test_case_11():
    str_0 = "-L\r!&v4WIt"
    str_1 = "\rOW"
    str_2 = "))y}]r,l<JU\rf)`,"
    dict_0 = {str_0: str_0, str_1: str_0, str_1: str_1, str_2: str_2}
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    var_1 = module_0.to_namedtuple(ordered_dict_0)
    int_0 = -771
    module_1.namedtuple(int_0, str_1, module=dict_0)
