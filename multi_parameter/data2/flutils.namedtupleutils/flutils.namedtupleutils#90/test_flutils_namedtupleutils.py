# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1


def test_case_0():
    bool_0 = False
    module_0.to_namedtuple(bool_0)


def test_case_1():
    int_0 = 5454
    list_0 = [int_0, int_0, int_0, int_0]
    var_0 = module_0.to_namedtuple(list_0)


def test_case_2():
    str_0 = "ad12n"
    list_0 = []
    dict_0 = {str_0: str_0, str_0: list_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_3():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_4():
    bytes_0 = b"\xbc\xe5(T\xe1\x0e-\xc4"
    module_0.to_namedtuple(bytes_0)


def test_case_5():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_6():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)
    module_0.to_namedtuple(bool_0)


def test_case_7():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_8():
    str_0 = "ad12n"
    list_0 = []
    dict_0 = {str_0: str_0, str_0: list_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)
    bytes_0 = b"\xa8\x1b\x1c_\xb7\x96\xde9."
    list_1 = [list_0, bytes_0]
    var_2 = module_0.to_namedtuple(list_1)
    var_3 = module_0.to_namedtuple(list_1)


def test_case_9():
    ordered_dict_0 = module_1.OrderedDict()
    tuple_0 = (ordered_dict_0,)
    var_0 = module_0.to_namedtuple(tuple_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_10():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_11():
    str_0 = "A custom :obj:`loader <importlib.abc.Loader>` that is used in the\n    execution of cherry-picking-modules.\n    "
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    tuple_0 = (str_0, dict_0, dict_0, str_0)
    var_0 = module_0.to_namedtuple(tuple_0)
    bool_0 = False
    int_0 = 50855936
    bytes_0 = b"X\xf8\xa0\x1c"
    tuple_1 = (bool_0, bool_0, int_0, bytes_0)
    var_1 = module_0.to_namedtuple(tuple_1)
    dict_1 = {var_1: var_1, var_1: var_1}
    tuple_2 = ()
    var_2 = module_0.to_namedtuple(tuple_2)
    var_3 = module_0.to_namedtuple(dict_1)
    var_4 = module_0.to_namedtuple(var_3)
    var_5 = module_0.to_namedtuple(var_2)
    bool_1 = True
    module_0.to_namedtuple(bool_1)


def test_case_12():
    bytes_0 = b"\xeb@\xebs9\xb6\x13P"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.to_namedtuple(dict_0)


def test_case_13():
    str_0 = "f1\x0c\t"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    tuple_0 = (str_0, dict_0, dict_0, str_0)
    var_0 = module_0.to_namedtuple(tuple_0)
    set_0 = set()
    bool_0 = True
    tuple_1 = (var_0, set_0, bool_0)
    var_1 = module_0.to_namedtuple(tuple_1)
    bool_1 = False
    module_0.to_namedtuple(bool_1)
