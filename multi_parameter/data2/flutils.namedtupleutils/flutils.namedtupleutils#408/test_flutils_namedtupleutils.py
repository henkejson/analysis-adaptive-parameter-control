# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1


def test_case_0():
    none_type_0 = None
    module_0.to_namedtuple(none_type_0)


def test_case_1():
    str_0 = "L"
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: str_0, str_0: bool_0, bool_0: bool_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_2():
    str_0 = "L"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_3():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_4():
    str_0 = "l?-V{\n"
    module_0.to_namedtuple(str_0)


def test_case_5():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_6():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_7():
    int_0 = -1891
    str_0 = "L\x0c"
    bool_0 = False
    int_1 = -196
    dict_0 = {int_0: int_0, int_0: str_0, str_0: bool_0, int_1: bool_0}
    list_0 = []
    var_0 = module_0.to_namedtuple(dict_0)
    list_1 = [dict_0, str_0, list_0]
    var_1 = module_0.to_namedtuple(list_0)
    var_2 = module_0.to_namedtuple(list_1)
    module_0.to_namedtuple(int_1)


def test_case_8():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)
    list_0 = [var_0, tuple_0, tuple_0]
    var_1 = module_0.to_namedtuple(var_0)
    var_2 = module_0.to_namedtuple(var_1)
    var_3 = module_0.to_namedtuple(var_2)
    var_4 = module_0.to_namedtuple(list_0)
    var_5 = module_0.to_namedtuple(tuple_0)
    dict_0 = {}
    var_6 = module_0.to_namedtuple(dict_0)
    var_7 = module_0.to_namedtuple(var_6)
    var_8 = module_0.to_namedtuple(var_0)


def test_case_9():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_10():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)
    ordered_dict_0 = module_1.OrderedDict(*list_0)
    var_1 = module_0.to_namedtuple(ordered_dict_0)
    var_2 = module_0.to_namedtuple(var_0)
    tuple_0 = (ordered_dict_0,)
    var_3 = module_0.to_namedtuple(tuple_0)


def test_case_11():
    int_0 = -1891
    str_0 = "X;E&kG"
    bool_0 = False
    int_1 = -196
    dict_0 = {int_0: int_0, int_0: str_0, str_0: bool_0, int_1: bool_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)
    module_0.to_namedtuple(str_0)


def test_case_12():
    bytes_0 = b"\r\x02a\x15>\xd4\x05A\x8b\xfe\xb3\xa2\xaa Y"
    str_0 = "Convert any escaped UTF-8 hexadecimal character bytes into the proper\n    string characters(s).\n\n    This function will convert a string, that may contain escaped UTF-8\n    literal hexadecimal bytes, into a string with the proper characters.\n\n    Args:\n        text (:obj:`str`): The string that may have escaped UTF8 hexadecimal.\n\n    Raises:\n         UnicodeDecodeError: if any of the escaped hexadecimal characters\n            are not proper UTF8 bytes.\n\n    :rtype:\n        :obj:`str`\n\n            A string with each escaped UTF8 hexadecimal character converted\n            into the proper character.\n\n    Examples:\n\n        Basic usage:\n\n            >>> from flutils.strutils import convert_raw_utf8_escape\n            >>> a = 'test\\\\xc2\\\\xa9'\n            >>> convert_escaped_utf8_literal(a)\n            'test©'\n\n        This function is intended for cases when the value of an environment\n        variable contains escaped UTF-8 literal characters (bytes) that need\n        to be converted to proper characters::\n\n            $ export TEST='test\\\\xc2\\\\xa9'\n            $ python\n\n        ::\n\n            >>> import os\n            >>> from flutils.strutils import convert_raw_utf8_escape\n            >>> a = os.getenv('TEST')\n            >>> a\n            'test\\\\xc2\\\\xa9'\n            >>> convert_escaped_utf8_literal(a)\n            'test©'\n    "
    dict_0 = {str_0: str_0, bytes_0: bytes_0, str_0: str_0, bytes_0: str_0}
    bool_0 = False
    tuple_0 = (bytes_0, dict_0, bool_0)
    module_0.to_namedtuple(tuple_0)
