# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1
import builtins as module_2


def test_case_0():
    none_type_0 = None
    module_0.to_namedtuple(none_type_0)


def test_case_1():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    var_0 = module_0.to_namedtuple(list_0)


def test_case_2():
    bytes_0 = b"\x87"
    dict_0 = {bytes_0: bytes_0}
    module_0.to_namedtuple(dict_0)


def test_case_3():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_4():
    bytes_0 = b"#\xc5"
    module_0.to_namedtuple(bytes_0)


def test_case_5():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_6():
    int_0 = 70
    float_0 = 2224.398018
    dict_0 = {int_0: float_0}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_7():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_8():
    str_0 = "slB5&%jDYUoPZ7 \x0cr"
    tuple_0 = (str_0,)
    var_0 = module_0.to_namedtuple(tuple_0)
    var_1 = module_0.to_namedtuple(tuple_0)


def test_case_9():
    str_0 = "is_list_like"
    dict_0 = {str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_10():
    dict_0 = {}
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    var_1 = module_0.to_namedtuple(var_0)
    dict_1 = {var_0: var_0}
    var_2 = module_0.to_namedtuple(dict_1)


def test_case_11():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_12():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0}
    var_0 = module_0.to_namedtuple(tuple_0)
    var_1 = module_0.to_namedtuple(var_0)
    var_2 = module_0.to_namedtuple(var_1)
    var_3 = module_0.to_namedtuple(tuple_0)
    var_4 = module_0.to_namedtuple(var_0)
    var_5 = module_0.to_namedtuple(var_4)
    var_6 = module_0.to_namedtuple(var_0)
    var_7 = module_0.to_namedtuple(var_6)
    var_8 = module_0.to_namedtuple(var_1)
    var_9 = module_0.to_namedtuple(var_3)
    var_10 = module_0.to_namedtuple(var_8)
    var_11 = module_0.to_namedtuple(var_3)
    var_12 = module_0.to_namedtuple(var_2)
    var_13 = module_0.to_namedtuple(var_3)
    var_14 = module_0.to_namedtuple(var_2)
    var_15 = module_0.to_namedtuple(var_6)
    var_16 = module_0.to_namedtuple(var_2)
    var_17 = module_0.to_namedtuple(dict_0)
    int_0 = 1165
    str_0 = ""
    dict_1 = {var_3: var_10, int_0: var_17, var_12: var_2, str_0: var_9}
    var_18 = module_0.to_namedtuple(dict_1)
    var_19 = module_0.to_namedtuple(var_6)
    var_20 = module_0.to_namedtuple(var_15)
    bool_0 = False
    module_0.to_namedtuple(bool_0)


def test_case_13():
    str_0 = "n\x0b"
    dict_0 = {str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    dict_1 = {}
    var_1 = module_0.to_namedtuple(var_0)
    var_2 = module_0.to_namedtuple(var_1)
    var_3 = module_0.to_namedtuple(var_0)
    tuple_0 = ()
    var_4 = module_0.to_namedtuple(tuple_0)
    var_5 = module_0.to_namedtuple(var_0)
    var_6 = module_0.to_namedtuple(var_4)
    var_7 = module_0.to_namedtuple(dict_1)
    var_8 = module_0.to_namedtuple(dict_0)
    object_0 = module_2.object()
    var_9 = module_0.to_namedtuple(var_4)
    module_1.OrderedDict(*var_3, **var_0)
