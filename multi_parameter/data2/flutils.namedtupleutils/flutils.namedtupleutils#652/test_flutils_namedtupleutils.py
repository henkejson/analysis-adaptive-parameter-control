# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1


def test_case_0():
    none_type_0 = None
    module_0.to_namedtuple(none_type_0)


def test_case_1():
    int_0 = 68
    tuple_0 = ()
    list_0 = [int_0, tuple_0, tuple_0]
    var_0 = module_0.to_namedtuple(list_0)


def test_case_2():
    str_0 = "VlId?Bb%u)G,"
    dict_0 = {str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_3():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_4():
    str_0 = "PN\nV`-X.k +~S\\kP="
    module_0.to_namedtuple(str_0)


def test_case_5():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_6():
    str_0 = "VlId?Bb%u)G,"
    dict_0 = {str_0: str_0}
    float_0 = -3378.88
    int_0 = 8
    dict_1 = {str_0: float_0, int_0: dict_0, int_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_1)


def test_case_7():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_8():
    str_0 = "wSn"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_9():
    str_0 = "\rYW6FEMc"
    dict_0 = {str_0: str_0, str_0: str_0}
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    none_type_0 = None
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    var_1 = module_0.to_namedtuple(var_0)
    module_0.to_namedtuple(none_type_0)


def test_case_10():
    str_0 = "2us"
    dict_0 = {str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(dict_0)
    var_2 = module_0.to_namedtuple(var_1)


def test_case_11():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_12():
    bytes_0 = b"\x87\xd5"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    bool_0 = False
    list_0 = [dict_0, bytes_0, bool_0, bool_0]
    tuple_0 = (list_0, list_0)
    list_1 = [tuple_0, dict_0, tuple_0]
    module_0.to_namedtuple(list_1)
