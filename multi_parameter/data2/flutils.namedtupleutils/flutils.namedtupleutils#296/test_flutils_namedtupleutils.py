# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1


def test_case_0():
    complex_0 = -570.3269 - 731.77j
    module_0.to_namedtuple(complex_0)


def test_case_1():
    int_0 = -2256
    dict_0 = {int_0: int_0, int_0: int_0}
    tuple_0 = (int_0, int_0, int_0, dict_0)
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_2():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_3():
    bytes_0 = b"3\xbdk@\xc4+\xbb\x02"
    module_0.to_namedtuple(bytes_0)


def test_case_4():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_5():
    str_0 = "python_requires"
    dict_0 = {str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_6():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_7():
    str_0 = "python_requires"
    dict_0 = {str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_8():
    str_0 = "4v<Jma?R]:!%o0"
    str_1 = "python_requires"
    dict_0 = {str_1: str_0, str_0: str_1}
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    tuple_0 = (ordered_dict_0,)
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_9():
    bytes_0 = b")\xa5\xf378"
    dict_0 = {bytes_0: bytes_0}
    module_0.to_namedtuple(dict_0)


def test_case_10():
    dict_0 = {}
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    var_1 = module_0.to_namedtuple(var_0)
    var_2 = module_0.to_namedtuple(ordered_dict_0)
    var_3 = module_0.to_namedtuple(var_2)


def test_case_11():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_12():
    str_0 = "q "
    str_1 = "yton_requie"
    dict_0 = {str_0: str_0, str_1: str_0, str_0: str_1}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)
    tuple_0 = module_0.to_namedtuple(var_1)
    none_type_0 = None
    var_2 = module_0.to_namedtuple(tuple_0)
    module_0.to_namedtuple(none_type_0)
