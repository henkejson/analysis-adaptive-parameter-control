# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1


def test_case_0():
    none_type_0 = None
    module_0.to_namedtuple(none_type_0)


def test_case_1():
    complex_0 = 1002.5949 + 3740.28j
    dict_0 = {complex_0: complex_0}
    var_0 = module_0.to_namedtuple(dict_0)
    bool_0 = False
    str_0 = "E"
    str_1 = "d<0:l1w{c7"
    dict_1 = {bool_0: bool_0, bool_0: var_0, str_0: bool_0, str_1: var_0}
    ordered_dict_0 = module_1.OrderedDict(**dict_1)
    var_1 = module_0.to_namedtuple(var_0)
    var_2 = module_0.to_namedtuple(ordered_dict_0)
    var_3 = module_0.to_namedtuple(var_2)


def test_case_2():
    bytes_0 = b"\x1a\xabcZ^\xaa\xa7\xf21Q\xf7\xe8\xa9s\x18l"
    tuple_0 = (bytes_0,)
    dict_0 = {tuple_0: tuple_0}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_3():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_4():
    str_0 = "\x0bBUK\x0c=Z`~q+S (RpHJ"
    module_0.to_namedtuple(str_0)


def test_case_5():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_6():
    bytes_0 = b"\x1a\xabcZ^\xaa\xa7\xf21Q\xf7\xe8\xa9s\x18l"
    tuple_0 = (bytes_0,)
    dict_0 = {tuple_0: tuple_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(tuple_0)


def test_case_7():
    bytes_0 = b"\x1a\xabcZ^\xaa\xa7\xf21Q\xf7\xe8\xa9s\x18l"
    tuple_0 = (bytes_0,)
    dict_0 = {tuple_0: tuple_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)
    var_2 = module_0.to_namedtuple(var_1)
    var_3 = module_0.to_namedtuple(var_1)
    var_4 = module_0.to_namedtuple(var_3)


def test_case_8():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_9():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)
    bytes_0 = b"\x89\xdeKL\xbd|\x18?\xa9)'\xa3<\xa4\x08\xb7e1\xe2"
    var_1 = module_0.to_namedtuple(var_0)
    dict_0 = {bytes_0: bytes_0}
    module_0.to_namedtuple(dict_0)


def test_case_10():
    complex_0 = 981 + 3740.28j
    dict_0 = {complex_0: complex_0}
    var_0 = module_0.to_namedtuple(dict_0)
    ordered_dict_0 = module_1.OrderedDict()
    var_1 = module_0.to_namedtuple(ordered_dict_0)
    bool_0 = False
    str_0 = ">K_"
    tuple_0 = (bool_0, var_1, str_0)
    var_2 = module_0.to_namedtuple(tuple_0)
    var_3 = module_0.to_namedtuple(var_1)
    var_4 = module_0.to_namedtuple(ordered_dict_0)
    var_5 = module_0.to_namedtuple(ordered_dict_0)
    var_6 = module_0.to_namedtuple(var_1)
    var_7 = module_0.to_namedtuple(var_2)
    str_1 = "k%d]5z|wq7 m[{a)JW"
    str_2 = "e\x0b"
    str_3 = "d<0:l1w{c7"
    dict_1 = {var_6: var_3, str_1: var_1, str_2: var_3, str_3: var_0}
    ordered_dict_1 = module_1.OrderedDict(**dict_1)
    var_8 = module_0.to_namedtuple(ordered_dict_1)
    var_9 = module_0.to_namedtuple(var_4)
    var_10 = module_0.to_namedtuple(dict_1)
    var_11 = module_0.to_namedtuple(var_1)
    var_12 = module_0.to_namedtuple(var_8)
    var_13 = module_0.to_namedtuple(var_3)
    var_14 = module_0.to_namedtuple(tuple_0)
    var_15 = module_0.to_namedtuple(var_2)
    var_16 = module_0.to_namedtuple(var_15)
    var_17 = module_0.to_namedtuple(var_12)
    list_0 = []
    var_18 = module_0.to_namedtuple(list_0)
