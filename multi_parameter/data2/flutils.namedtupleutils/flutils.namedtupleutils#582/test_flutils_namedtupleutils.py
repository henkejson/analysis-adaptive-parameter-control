# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1


def test_case_0():
    bool_0 = False
    module_0.to_namedtuple(bool_0)


def test_case_1():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_2():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_3():
    bytes_0 = b"k\xec"
    module_0.to_namedtuple(bytes_0)


def test_case_4():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_5():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_6():
    bytes_0 = b"k\xec"
    tuple_0 = (bytes_0,)
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_7():
    str_0 = "i"
    none_type_0 = None
    dict_0 = {str_0: none_type_0, str_0: none_type_0}
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_8():
    ordered_dict_0 = module_1.OrderedDict()
    tuple_0 = (ordered_dict_0,)
    var_0 = module_0.to_namedtuple(tuple_0)
    list_0 = [var_0, ordered_dict_0, tuple_0]
    var_1 = module_0.to_namedtuple(list_0)
    var_2 = module_0.to_namedtuple(var_1)
    ordered_dict_1 = module_1.OrderedDict()


def test_case_9():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_10():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0, dict_0]
    var_0 = module_0.to_namedtuple(list_0)


def test_case_11():
    str_0 = "\x0c{"
    none_type_0 = None
    dict_0 = {str_0: none_type_0, str_0: none_type_0, str_0: none_type_0}
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_12():
    str_0 = "\x0c{"
    str_1 = "Convert a given command into a tuple for use by\n    :obj:`subprocess.Popen`.\n\n    Args:\n        cmd (:obj:`Sequence <typing.Sequence>`): The command to be converted.\n\n    This is for converting a command of type string or bytes to a tuple of\n    strings for use by :obj:`subprocess.Popen`.\n\n    Example:\n\n        >>> from flutils.cmdutils import prep_cmd\n        >>> prep_cmd('ls -Flap')\n        ('ls', '-Flap')\n    "
    bool_0 = True
    tuple_0 = (bool_0, str_1, bool_0, str_0)
    var_0 = module_0.to_namedtuple(tuple_0)
    none_type_0 = None
    dict_0 = {str_0: none_type_0, var_0: none_type_0, str_0: none_type_0}
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    var_1 = module_0.to_namedtuple(ordered_dict_0)


def test_case_13():
    str_0 = "EqsU/CAPf$~RIS>FMX"
    none_type_0 = None
    str_1 = "encLd "
    dict_0 = {str_0: none_type_0, str_1: none_type_0}
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    ordered_dict_1 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_1)
    list_0 = [ordered_dict_0, none_type_0, ordered_dict_0]
    var_1 = module_0.to_namedtuple(list_0)
    var_2 = module_0.to_namedtuple(var_0)
    module_1.namedtuple(var_0, var_0, defaults=list_0, module=ordered_dict_1)


def test_case_14():
    bytes_0 = b"\xc9\xcd\xa9\te\xd0\x1b\x02\\io\xbcG\xd4w\xee\xbc\xe4\x8d"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.to_namedtuple(dict_0)
