# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1
import builtins as module_2


def test_case_0():
    bool_0 = False
    module_0.to_namedtuple(bool_0)


def test_case_1():
    int_0 = 143
    list_0 = [int_0, int_0, int_0, int_0]
    var_0 = module_0.to_namedtuple(list_0)
    dict_0 = {}
    var_1 = module_0.to_namedtuple(dict_0)
    var_2 = module_0.to_namedtuple(var_1)
    var_3 = module_0.to_namedtuple(var_2)
    var_4 = module_0.to_namedtuple(dict_0)
    var_5 = module_0.to_namedtuple(var_3)
    var_6 = module_0.to_namedtuple(dict_0)
    bool_0 = False
    module_0.to_namedtuple(bool_0)


def test_case_2():
    float_0 = -3795.0
    str_0 = "A property decorator that is only computed once per instance and then\n    replaces itself with an ordinary attribute.\n\n    Deleting the attribute resets the property.\n\n    Note:\n        In Python 3.8 the :obj:`functools.cached_property` decorator was\n        added. It is recommended to use the built-in\n        :obj:`functools.cached_property`; provided you're using\n        Python >= 3.8.  :obj:`~flutils.decorators.cached_property` remains\n        for use with Python 3.6 and 3.7.\n\n    Example:\n\n        Code::\n\n            from flutils.decorators import cached_property\n\n            class MyClass:\n\n                def __init__(self):\n                    self.x = 5\n\n                @cached_property\n                def y(self):\n                    return self.x + 1\n\n        Usage:\n\n            >>> obj = MyClass()\n            >>> obj.y\n            6\n\n    *New in version 0.2.0*\n\n    This decorator is a derivative work of\n    `cached_property <https://bit.ly/2R9U3Qa>`__ and is:\n\n    `Copyright © 2015 Daniel Greenfeld; All Rights Reserved\n    <https://bit.ly/2CwtJM1>`__\n\n    Also this decorator is a derivative work of\n    `cached_property  <https://bit.ly/2JbYB5L>`__ and is:\n\n    `Copyright © 2011 Marcel Hellkamp <https://bit.ly/2ECEO0M>`__\n\n    "
    dict_0 = {float_0: str_0}
    list_0 = [dict_0]
    var_0 = module_0.to_namedtuple(list_0)


def test_case_3():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_4():
    bytes_0 = b"q\xb3\xff4\x92Mu\xbb"
    module_0.to_namedtuple(bytes_0)


def test_case_5():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_6():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_7():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_8():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)
    list_0 = [dict_0, dict_0, dict_0, dict_0]
    var_1 = module_0.to_namedtuple(list_0)


def test_case_9():
    str_0 = "doc"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)
    module_2.object(*var_1)


def test_case_10():
    tuple_0 = ()
    str_0 = "ri;\tv"
    dict_0 = {tuple_0: tuple_0, str_0: tuple_0}
    tuple_1 = (tuple_0, str_0, dict_0, str_0)
    var_0 = module_0.to_namedtuple(tuple_1)
    list_0 = []
    var_1 = module_0.to_namedtuple(list_0)


def test_case_11():
    str_0 = "wTP "
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    list_0 = [ordered_dict_0]
    var_0 = module_0.to_namedtuple(list_0)
    var_1 = module_0.to_namedtuple(var_0)
    object_0 = module_2.object()
    bool_0 = False
    dict_1 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    tuple_0 = (dict_1, bool_0)
    var_2 = module_0.to_namedtuple(dict_1)
    var_3 = module_0.to_namedtuple(tuple_0)
    var_4 = module_0.to_namedtuple(dict_1)
    module_2.object(**dict_1)


def test_case_12():
    bytes_0 = b"\x1e\xcc/0\xac \x93\x80#\xfa?-Z"
    int_0 = -3518
    dict_0 = {bytes_0: int_0, bytes_0: int_0}
    bool_0 = False
    tuple_0 = (bytes_0, dict_0, bool_0, dict_0)
    module_0.to_namedtuple(tuple_0)
