# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import builtins as module_0
import flutils.namedtupleutils as module_1
import collections as module_2


def test_case_0():
    object_0 = module_0.object()
    module_1.to_namedtuple(object_0)


def test_case_1():
    float_0 = -1165.19
    int_0 = -1046
    tuple_0 = (float_0, float_0, int_0, int_0)
    var_0 = module_1.to_namedtuple(tuple_0)


def test_case_2():
    str_0 = "raw_uptf8_escape"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_1.to_namedtuple(dict_0)
    var_1 = module_1.to_namedtuple(var_0)


def test_case_3():
    dict_0 = {}
    var_0 = module_1.to_namedtuple(dict_0)


def test_case_4():
    bytes_0 = b"]\x0f\x97\xea\nI\xba\xe5Q\xfa3\xb3>@"
    module_1.to_namedtuple(bytes_0)


def test_case_5():
    tuple_0 = ()
    var_0 = module_1.to_namedtuple(tuple_0)


def test_case_6():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    var_0 = module_1.to_namedtuple(dict_0)
    module_1.to_namedtuple(bool_0)


def test_case_7():
    bytes_0 = b"\xdf\xde\xe7\x0b\xb3\xdew\ng1"
    list_0 = [bytes_0, bytes_0, bytes_0]
    var_0 = module_1.to_namedtuple(list_0)
    bytes_1 = b"\xa6\x84\xaf\xa7\x84\x80\xb8\xde]\xee"
    dict_0 = {bytes_1: bytes_1}
    module_1.to_namedtuple(dict_0)


def test_case_8():
    ordered_dict_0 = module_2.OrderedDict()
    var_0 = module_1.to_namedtuple(ordered_dict_0)
    var_1 = module_1.to_namedtuple(var_0)
    var_2 = module_1.to_namedtuple(var_1)
    var_3 = module_1.to_namedtuple(var_0)
    int_0 = -93
    bytes_0 = b"\xa9/\x8f\x003\xfd\xddH\x89\xe2/FW\x8e\xd6>/"
    tuple_0 = (int_0, bytes_0)
    var_4 = module_1.to_namedtuple(tuple_0)
    var_5 = module_1.to_namedtuple(ordered_dict_0)
    var_6 = module_1.to_namedtuple(var_0)
    var_7 = module_1.to_namedtuple(var_0)
    var_8 = module_1.to_namedtuple(var_7)
    var_9 = module_1.to_namedtuple(var_1)
    var_10 = module_1.to_namedtuple(var_6)


def test_case_9():
    list_0 = []
    var_0 = module_1.to_namedtuple(list_0)


def test_case_10():
    ordered_dict_0 = module_2.OrderedDict()
    var_0 = module_1.to_namedtuple(ordered_dict_0)


def test_case_11():
    complex_0 = -741.79 - 1097.0300855496882j
    str_0 = "@Ap=-^^E.\nWP"
    str_1 = "raw_uptf8_escape"
    dict_0 = {str_0: str_0, str_0: complex_0, str_1: complex_0, str_0: str_0}
    var_0 = module_1.to_namedtuple(dict_0)
    set_0 = {complex_0, complex_0}
    var_1 = module_1.to_namedtuple(var_0)
    module_1.to_namedtuple(set_0)


def test_case_12():
    complex_0 = -741.79 - 1097.0300855496882j
    str_0 = "@ApR-^^E.\nWP"
    str_1 = " JatqA"
    str_2 = "raw_utf8_escape"
    dict_0 = {str_1: str_1, str_1: complex_0, str_2: complex_0, str_1: str_1}
    ordered_dict_0 = module_2.OrderedDict(**dict_0)
    tuple_0 = (str_0, str_0, ordered_dict_0)
    var_0 = module_1.to_namedtuple(tuple_0)
    bool_0 = False
    dict_1 = {bool_0: bool_0, bool_0: bool_0}
    bytes_0 = b"|"
    list_0 = [dict_1, bool_0, bytes_0, bool_0]
    var_1 = module_1.to_namedtuple(list_0)
    var_2 = module_1.to_namedtuple(var_0)
    var_3 = module_1.to_namedtuple(var_1)
    module_1.to_namedtuple(bool_0)
