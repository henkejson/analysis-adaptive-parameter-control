# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import builtins as module_1
import collections as module_2


def test_case_0():
    bool_0 = True
    module_0.to_namedtuple(bool_0)


def test_case_1():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    bool_0 = False
    tuple_0 = (object_0, bool_0, object_0)
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_2():
    str_0 = "socket"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_3():
    ordered_dict_0 = module_2.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_4():
    str_0 = "A{Km/a{jog"
    module_0.to_namedtuple(str_0)


def test_case_5():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_6():
    dict_0 = {}
    object_0 = module_0.to_namedtuple(dict_0)


def test_case_7():
    str_0 = "A{Km/a{jog"
    list_0 = [str_0]
    var_0 = module_0.to_namedtuple(list_0)


def test_case_8():
    str_0 = "YZIDY{G\\5@J{@>I]MzK"
    str_1 = "\x0bm]"
    str_2 = "p/6)'tAm\x0b"
    dict_0 = {str_0: str_0, str_1: str_1, str_1: str_1, str_2: str_1}
    ordered_dict_0 = module_2.OrderedDict(**dict_0)
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    list_0 = [var_0]
    var_1 = module_0.to_namedtuple(var_0)
    var_2 = module_0.to_namedtuple(list_0)


def test_case_9():
    ordered_dict_0 = module_2.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    var_1 = module_0.to_namedtuple(var_0)
    var_2 = module_0.to_namedtuple(var_1)
    bytes_0 = b""
    var_3 = module_0.to_namedtuple(var_0)
    module_0.to_namedtuple(bytes_0)


def test_case_10():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_11():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    bytes_0 = b"]"
    tuple_0 = (dict_0, bytes_0)
    var_0 = module_0.to_namedtuple(tuple_0)
    none_type_0 = None
    var_1 = module_0.to_namedtuple(dict_0)
    module_0.to_namedtuple(none_type_0)


def test_case_12():
    str_0 = "socke\r"
    str_1 = "53<9,X=`"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_1, str_1: str_1, str_0: str_0}
    ordered_dict_0 = module_2.OrderedDict(**dict_0)
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    float_0 = -489.82
    var_1 = module_0.to_namedtuple(var_0)
    module_0.to_namedtuple(float_0)


def test_case_13():
    bytes_0 = b"\xd6\x8f\xa6\xf8\xccW"
    str_0 = 'A subclass of the module type which triggers loading upon attribute\n    access.\n\n    This class is a "derivative work" of the Python\n    `importlib.util._LazyModule <https://bit.ly/2EBPI1g>`_, and is:\n\n    `Copyright Â© 2001-2018 Python Software Foundation; All Rights Reserved\n    <https://bit.ly/2JzG17l>`_\n\n    This differs from the ``importlib.util._LazyModule`` in that it tracks\n    the state of the Lazy Loaded module and has had some\n    `unused code <https://bit.ly/2EARVu6>` removed.\n    '
    dict_0 = {str_0: bytes_0, bytes_0: bytes_0, str_0: bytes_0}
    tuple_0 = (bytes_0, str_0, dict_0, bytes_0)
    dict_1 = {bytes_0: tuple_0, str_0: dict_0}
    tuple_1 = (dict_1, dict_0, dict_1)
    module_0.to_namedtuple(tuple_1)
