# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1
import builtins as module_2


def test_case_0():
    int_0 = -1794
    module_0.to_namedtuple(int_0)


def test_case_1():
    int_0 = 858
    str_0 = "CompletedProcess"
    str_1 = "kj/w\x0b%_4V+W*#]"
    dict_0 = {str_0: str_0, str_1: int_0, str_0: int_0, str_1: str_0}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_2():
    int_0 = 858
    str_0 = "XaSYK"
    dict_0 = {str_0: str_0, str_0: int_0, str_0: int_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_3():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_4():
    str_0 = "Check if the given ``obj`` has **ANY** of the given ``attrs`` and are\n    callable.\n\n    Args:\n        obj (:obj:`Any <typing.Any>`): The object to check.\n        *attrs (:obj:`str`): The names of the attributes to check.\n\n    :rtype:\n        :obj:`bool`\n\n        * :obj:`True` if ANY of the given ``*attrs`` exist on the given ``obj``\n          and ANY are callable;\n        * :obj:`False` otherwise.\n\n    Example:\n        >>> from flutils.objutils import has_any_callables\n        >>> has_any_callables(dict(),'get','keys','items','values','foo')\n        True\n    "
    module_0.to_namedtuple(str_0)


def test_case_5():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_6():
    int_0 = 858
    str_0 = "XaSYK"
    dict_0 = {int_0: int_0, str_0: int_0, int_0: int_0, str_0: int_0}
    ordered_dict_0 = module_0.to_namedtuple(dict_0)
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    var_1 = module_2.object()
    module_0.to_namedtuple(var_1)


def test_case_7():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_8():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)
    list_0 = [tuple_0, var_0]
    var_1 = module_0.to_namedtuple(list_0)


def test_case_9():
    int_0 = 858
    str_0 = "XaSYK"
    dict_0 = {str_0: str_0, str_0: int_0, str_0: int_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_10():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    var_1 = module_0.to_namedtuple(ordered_dict_0)
    var_2 = module_0.to_namedtuple(ordered_dict_0)
    var_3 = module_0.to_namedtuple(ordered_dict_0)
    var_4 = module_0.to_namedtuple(var_3)
    var_5 = module_0.to_namedtuple(var_2)
    var_6 = module_0.to_namedtuple(var_3)
    var_7 = module_0.to_namedtuple(ordered_dict_0)
    var_8 = module_0.to_namedtuple(ordered_dict_0)


def test_case_11():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    str_0 = "PHik'E"
    tuple_0 = (bool_0, bool_0, dict_0, str_0)
    var_0 = module_0.to_namedtuple(tuple_0)
    var_1 = module_0.to_namedtuple(var_0)
    var_2 = module_0.to_namedtuple(var_1)
    var_3 = module_0.to_namedtuple(var_0)
    bytes_0 = b"\x9a\xae\xfc["
    var_4 = module_0.to_namedtuple(tuple_0)
    var_5 = module_0.to_namedtuple(tuple_0)
    var_6 = module_0.to_namedtuple(var_4)
    bool_1 = False
    var_7 = module_0.to_namedtuple(var_6)
    tuple_1 = (var_5, bool_1)
    var_8 = module_0.to_namedtuple(tuple_1)
    var_9 = module_0.to_namedtuple(var_4)
    dict_1 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.to_namedtuple(dict_1)


def test_case_12():
    complex_0 = 414.10314 + 682.41282j
    int_0 = 858
    str_0 = "CompletedProcess"
    str_1 = "\nc"
    dict_0 = {str_0: str_0, str_1: int_0, str_0: int_0, str_1: str_0}
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    set_0 = {complex_0, complex_0, var_0, complex_0}
    dict_1 = {complex_0: complex_0, int_0: int_0, complex_0: set_0}
    tuple_0 = (int_0, dict_1)
    var_1 = module_0.to_namedtuple(var_0)
    var_2 = module_0.to_namedtuple(dict_0)
    var_3 = module_0.to_namedtuple(dict_1)
    list_0 = [dict_1, tuple_0, var_1]
    var_4 = module_0.to_namedtuple(list_0)
    module_0.to_namedtuple(set_0)
