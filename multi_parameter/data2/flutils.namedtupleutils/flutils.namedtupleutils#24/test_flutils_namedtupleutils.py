# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1


def test_case_0():
    bool_0 = False
    module_0.to_namedtuple(bool_0)


def test_case_1():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_2():
    int_0 = 1694
    dict_0 = {int_0: int_0}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_3():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_4():
    bytes_0 = b"03\xf0"
    module_0.to_namedtuple(bytes_0)


def test_case_5():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_6():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_7():
    str_0 = "YC4WQt"
    dict_0 = {str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_8():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_9():
    int_0 = 1694
    dict_0 = {int_0: int_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_10():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)
    str_0 = ", cannot start with a number"
    str_1 = "placeholder too large for max width"
    str_2 = "9+"
    str_3 = "G-}9r9\x0b,2l.T;!I"
    dict_0 = {str_0: list_0, str_0: list_0, str_1: str_0, str_2: str_3}
    ordered_dict_0 = module_1.OrderedDict(*list_0, **dict_0)
    var_1 = module_0.to_namedtuple(ordered_dict_0)


def test_case_11():
    int_0 = -291
    float_0 = 287.82
    bytes_0 = b"Y\xe2\xe2\xbf\xef\xcf\xf6\xba\xf0\x95\xe2\xbfs\xa5M\xd7R1\xb4"
    dict_0 = {int_0: float_0, bytes_0: int_0, float_0: bytes_0, int_0: bytes_0}
    tuple_0 = (int_0, dict_0)
    module_0.to_namedtuple(tuple_0)


def test_case_12():
    str_0 = ".uWgGr>"
    set_0 = {str_0, str_0}
    tuple_0 = ()
    int_0 = 180
    str_1 = "\tH"
    dict_0 = {str_1: set_0, int_0: str_1, str_0: str_1}
    tuple_1 = (set_0, tuple_0, int_0, dict_0)
    var_0 = module_0.to_namedtuple(tuple_0)
    var_1 = module_0.to_namedtuple(tuple_1)
    var_2 = module_1.OrderedDict()
    module_0.to_namedtuple(str_1)
