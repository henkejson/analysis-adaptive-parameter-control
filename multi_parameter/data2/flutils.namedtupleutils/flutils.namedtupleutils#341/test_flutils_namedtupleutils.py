# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1
import builtins as module_2


def test_case_0():
    bool_0 = False
    module_0.to_namedtuple(bool_0)


def test_case_1():
    bytes_0 = b"g\xd8\xcd\x02R\xc7\xba\x10l\x05GX"
    tuple_0 = ()
    set_0 = {bytes_0, tuple_0, tuple_0}
    tuple_1 = (tuple_0, set_0, tuple_0, bytes_0)
    list_0 = [tuple_1, bytes_0]
    list_1 = [bytes_0, bytes_0, list_0]
    dict_0 = {bytes_0: list_0, bytes_0: tuple_0}
    int_0 = -352
    tuple_2 = (bytes_0, list_1, dict_0, int_0)
    module_0.to_namedtuple(tuple_2)


def test_case_2():
    str_0 = "loadermainbainer"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_3():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_4():
    bytes_0 = b"\xd3\xac8oB\xd1."
    module_0.to_namedtuple(bytes_0)


def test_case_5():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_6():
    str_0 = "f*MOs*'CbV&\rq{r~Sa1$"
    str_1 = "loadermaintainer"
    dict_0 = {str_0: str_0, str_1: str_0}
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_7():
    str_0 = 'S57&8=\\("Dz'
    dict_0 = {str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)
    float_0 = 856.23
    none_type_0 = None
    module_1.namedtuple(float_0, none_type_0, rename=float_0)


def test_case_8():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_9():
    ordered_dict_0 = module_1.OrderedDict()
    list_0 = [ordered_dict_0, ordered_dict_0, ordered_dict_0]
    var_0 = module_0.to_namedtuple(list_0)


def test_case_10():
    str_0 = "K~YsIA)86N"
    bool_0 = True
    list_0 = []
    ordered_dict_0 = module_1.OrderedDict(*list_0)
    str_1 = "user_options"
    str_2 = "A module that manages attributes pointing to lazy-loaded-modules\n    and lazy-loaded-module-attributes.\n    "
    dict_0 = {str_0: bool_0, str_0: ordered_dict_0, str_1: str_0, str_2: bool_0}
    ordered_dict_1 = module_1.OrderedDict(**dict_0)
    var_0 = module_0.to_namedtuple(ordered_dict_1)
    tuple_0 = ()
    set_0 = {var_0, tuple_0, tuple_0}
    var_1 = module_0.to_namedtuple(var_0)
    list_1 = [var_0, var_0]
    list_2 = [var_1, var_1, list_1]
    dict_1 = {var_0: list_1, var_0: tuple_0}
    int_0 = -352
    tuple_1 = (list_2, list_2, dict_1, int_0)
    var_2 = module_0.to_namedtuple(tuple_1)
    var_3 = module_0.to_namedtuple(list_2)
    module_2.object(**set_0)


def test_case_11():
    str_0 = "TeFM\x0b"
    bool_0 = True
    list_0 = []
    ordered_dict_0 = module_1.OrderedDict(*list_0)
    str_1 = "user_options"
    str_2 = "A module that manages attributes pointing to lazy-loaded-modules\n    and lazy-loaded-module-attributes.\n    "
    dict_0 = {str_0: bool_0, str_0: ordered_dict_0, str_1: str_0, str_2: bool_0}
    ordered_dict_1 = module_1.OrderedDict(**dict_0)
    var_0 = module_0.to_namedtuple(ordered_dict_1)
    module_1.namedtuple(var_0, str_2)
