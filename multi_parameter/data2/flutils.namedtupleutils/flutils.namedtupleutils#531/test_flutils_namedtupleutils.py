# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1
import builtins as module_2


def test_case_0():
    bool_0 = True
    module_0.to_namedtuple(bool_0)


def test_case_1():
    float_0 = 1273.35835
    list_0 = [float_0]
    var_0 = module_0.to_namedtuple(list_0)


def test_case_2():
    bytes_0 = b"\xb7\x81_,\xd0\x96\xdb"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.to_namedtuple(dict_0)


def test_case_3():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_4():
    bytes_0 = b"\xe6\xd7"
    module_0.to_namedtuple(bytes_0)


def test_case_5():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_6():
    str_0 = "f`R@s;1^"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    complex_0 = -1350 - 1664j
    var_1 = module_0.to_namedtuple(var_0)
    dict_1 = {complex_0: dict_0}
    var_2 = module_0.to_namedtuple(dict_1)
    var_3 = module_2.object()


def test_case_7():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_8():
    str_0 = "V"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_9():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_10():
    bytes_0 = b""
    str_0 = "f`R@s;1^"
    dict_0 = {str_0: bytes_0}
    tuple_0 = (bytes_0, bytes_0, dict_0, bytes_0)
    list_0 = [dict_0]
    tuple_1 = (tuple_0, list_0)
    var_0 = module_0.to_namedtuple(tuple_1)
    var_1 = module_0.to_namedtuple(list_0)
    var_2 = module_0.to_namedtuple(tuple_1)


def test_case_11():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_12():
    str_0 = "V"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_13():
    bytes_0 = b"\x0c\xc6\xde4"
    str_0 = "\x0bQk"
    dict_0 = {str_0: str_0, str_0: bytes_0, str_0: bytes_0}
    tuple_0 = (bytes_0, bytes_0, dict_0, bytes_0)
    list_0 = [bytes_0, bytes_0, tuple_0]
    var_0 = module_0.to_namedtuple(tuple_0)
    complex_0 = -1346.8289848592012 - 1664.3j
    list_1 = [complex_0, tuple_0]
    var_1 = module_0.to_namedtuple(list_1)
    var_2 = module_0.to_namedtuple(tuple_0)
    var_3 = module_0.to_namedtuple(list_1)
    var_4 = module_0.to_namedtuple(var_0)
    var_5 = module_0.to_namedtuple(list_0)
    dict_1 = {complex_0: dict_0}
    var_6 = module_0.to_namedtuple(dict_1)
    bool_0 = True
    var_7 = module_0.to_namedtuple(list_1)
    module_0.to_namedtuple(bool_0)
