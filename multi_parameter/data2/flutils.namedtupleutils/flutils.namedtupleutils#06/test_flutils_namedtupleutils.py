# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1


def test_case_0():
    none_type_0 = None
    module_0.to_namedtuple(none_type_0)


def test_case_1():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    var_0 = module_0.to_namedtuple(list_0)


def test_case_2():
    str_0 = "["
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    tuple_0 = (dict_0,)
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_3():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_4():
    str_0 = "YCVeP"
    module_0.to_namedtuple(str_0)


def test_case_5():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_6():
    str_0 = "["
    int_0 = -964
    dict_0 = {str_0: str_0, str_0: str_0, int_0: str_0, str_0: int_0}
    tuple_0 = (dict_0,)
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_7():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_8():
    int_0 = -1526
    bytes_0 = b"\x85\x96]\x9f"
    tuple_0 = (int_0, bytes_0)
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_9():
    str_0 = "cUl"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_10():
    str_0 = "c?Ul"
    str_1 = ""
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_1, str_1: str_1}
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    var_1 = module_0.to_namedtuple(dict_0)
    var_2 = module_0.to_namedtuple(var_1)


def test_case_11():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_12():
    bytes_0 = b"\x11\xef"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.to_namedtuple(dict_0)


def test_case_13():
    str_0 = "\rptosp002 "
    str_1 = "num"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_1, str_1: str_1}
    list_0 = []
    ordered_dict_0 = module_1.OrderedDict(*list_0)
    var_0 = module_0.to_namedtuple(dict_0)
    module_1.OrderedDict(*var_0, **var_0)
