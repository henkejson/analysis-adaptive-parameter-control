# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1
import builtins as module_2


def test_case_0():
    bool_0 = False
    module_0.to_namedtuple(bool_0)


def test_case_1():
    int_0 = 153
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    bool_0 = True
    tuple_0 = (dict_0, int_0, bool_0)
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_2():
    str_0 = "pre_txt"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_3():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_4():
    str_0 = "7&\\q\x0cJoi\n"
    module_0.to_namedtuple(str_0)


def test_case_5():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_6():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_7():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_8():
    bytes_0 = b"\xa2\x1cUdi-\xcf\xcc\x1ed\xbe"
    int_0 = 3616
    str_0 = "7A\"2b'%O\x0cNFf`vD"
    dict_0 = {bytes_0: str_0, bytes_0: bytes_0, str_0: str_0, bytes_0: str_0}
    bool_0 = True
    tuple_0 = (bytes_0, bytes_0, bool_0, int_0)
    tuple_1 = (bytes_0, int_0, dict_0, tuple_0)
    module_0.to_namedtuple(tuple_1)


def test_case_9():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_10():
    str_0 = "'OJ=&G7D@Hpf%d@I"
    str_1 = "pre_txt"
    dict_0 = {str_0: str_0, str_1: str_1, str_1: str_1, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)
    var_2 = module_1.namedtuple(str_1, var_0)


def test_case_11():
    str_0 = "'OJ=&G7D@Hpf%d@I"
    str_1 = "pe_Vx\r"
    dict_0 = {str_0: str_0, str_1: str_1, str_1: str_1, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)
    dict_1 = {str_0: var_1, str_1: str_1}
    var_2 = module_0.to_namedtuple(dict_1)
    module_2.object(**var_0)
