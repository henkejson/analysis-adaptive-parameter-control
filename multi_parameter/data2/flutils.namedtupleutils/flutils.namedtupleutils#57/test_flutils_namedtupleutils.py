# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import builtins as module_1
import collections as module_2


def test_case_0():
    int_0 = -348
    module_0.to_namedtuple(int_0)


def test_case_1():
    object_0 = module_1.object()
    float_0 = -1946.32
    bool_0 = False
    tuple_0 = (bool_0, float_0)
    tuple_1 = (object_0, float_0, tuple_0)
    list_0 = [tuple_1]
    list_1 = [list_0, tuple_1, list_0, tuple_0]
    list_2 = [list_1]
    var_0 = module_0.to_namedtuple(list_2)


def test_case_2():
    ordered_dict_0 = module_2.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_3():
    str_0 = "Check if given ``obj`` has all the given ``*attrs``.\n\n    Args:\n        obj (:obj:`Any <typing.Any>`): The object to check.\n        *attrs (:obj:`str`): The names of the attributes to check.\n\n    :rtype:\n        :obj:`bool`\n\n        * :obj:`True` if all the given ``*attrs`` exist on the given ``obj``;\n        * :obj:`False` otherwise.\n\n    Example:\n        >>> from flutils.objutils import has_attrs\n        >>> has_attrs(dict(),'get','keys','items','values')\n        True\n    "
    module_0.to_namedtuple(str_0)


def test_case_4():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_5():
    str_0 = "alpa"
    dict_0 = {str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_6():
    ordered_dict_0 = module_2.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    var_1 = module_0.to_namedtuple(var_0)
    var_2 = module_0.to_namedtuple(var_0)
    var_3 = module_0.to_namedtuple(var_0)


def test_case_7():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_8():
    ordered_dict_0 = module_2.OrderedDict()
    list_0 = [ordered_dict_0]
    var_0 = module_0.to_namedtuple(list_0)


def test_case_9():
    float_0 = -1946.32
    bool_0 = False
    tuple_0 = (bool_0, float_0)
    dict_0 = {bool_0: tuple_0, bool_0: bool_0}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_10():
    str_0 = "A module that manages attributes pointing to lazy-loaded-modules\n    and lazy-loaded-module-attributes.\n    "
    dict_0 = {str_0: str_0}
    ordered_dict_0 = module_2.OrderedDict(**dict_0)
    list_0 = [ordered_dict_0]
    var_0 = module_0.to_namedtuple(list_0)
    float_0 = -4408.1
    module_0.to_namedtuple(float_0)


def test_case_11():
    bytes_0 = b"\xa6:x|\xaf"
    float_0 = 3692.8119
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: float_0}
    list_0 = [dict_0, dict_0, bytes_0]
    list_1 = [list_0]
    module_0.to_namedtuple(list_1)


def test_case_12():
    str_0 = "alpa\n"
    dict_0 = {str_0: str_0}
    ordered_dict_0 = module_2.OrderedDict(**dict_0)
    var_0 = module_0.to_namedtuple(dict_0)
    list_0 = [ordered_dict_0]
    var_1 = module_0.to_namedtuple(list_0)
    tuple_0 = (var_1,)
    var_2 = module_0.to_namedtuple(tuple_0)
    var_3 = module_1.object()
    var_4 = module_0.to_namedtuple(dict_0)
    float_0 = -4408.1
    var_5 = module_0.to_namedtuple(list_0)
    var_6 = module_0.to_namedtuple(var_1)
    module_0.to_namedtuple(float_0)
