# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import builtins as module_1
import collections as module_2


def test_case_0():
    int_0 = 361
    module_0.to_namedtuple(int_0)


def test_case_1():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0, object_0: object_0}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_2():
    ordered_dict_0 = module_2.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_3():
    str_0 = "socket"
    module_0.to_namedtuple(str_0)


def test_case_4():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_5():
    str_0 = "encQde"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_6():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_7():
    str_0 = "encQde"
    ordered_dict_0 = module_2.OrderedDict()
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_8():
    str_0 = "E~xjth[t{[p{kD}w'/g"
    str_1 = ""
    str_2 = "{ytQ&ajrE\\x&CC&eO"
    list_0 = []
    dict_0 = {str_0: str_0, str_1: str_0, str_2: list_0}
    ordered_dict_0 = module_2.OrderedDict(**dict_0)
    list_1 = [ordered_dict_0]
    ordered_dict_1 = module_2.OrderedDict(*list_1)
    var_0 = module_0.to_namedtuple(list_0)
    var_1 = module_0.to_namedtuple(list_1)
    var_2 = module_1.object()


def test_case_9():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)
    ordered_dict_0 = module_2.OrderedDict()
    var_1 = module_0.to_namedtuple(ordered_dict_0)
    var_2 = module_0.to_namedtuple(ordered_dict_0)
    var_3 = module_0.to_namedtuple(var_1)


def test_case_10():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_11():
    bytes_0 = b"\x15\x19\x0b\xe0\xf9*\x02\x18+\xf8.0\xe2\xa0\xcf5"
    complex_0 = 250.7 + 665.765j
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: complex_0}
    tuple_0 = (bytes_0, dict_0)
    module_0.to_namedtuple(tuple_0)


def test_case_12():
    str_0 = "encode"
    object_0 = module_1.object()
    ordered_dict_0 = module_2.OrderedDict()
    dict_0 = {str_0: object_0, object_0: object_0, str_0: object_0, str_0: object_0}
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    var_1 = module_0.to_namedtuple(dict_0)
