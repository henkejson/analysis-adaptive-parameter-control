# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import codetiming._timer as module_0
import dataclasses as module_1


def test_case_0():
    float_arg_0 = module_0.FloatArg()


def test_case_1():
    timer_error_0 = module_0.TimerError()
    bool_0 = True
    timer_0 = module_0.Timer(initial_text=bool_0)
    none_type_0 = timer_0.start()
    timer_0.start()


def test_case_2():
    str_0 = "`=p2"
    timer_0 = module_0.Timer(text=str_0, logger=str_0)
    none_type_0 = timer_0.start()


def test_case_3():
    timer_0 = module_0.Timer()
    timer_1 = timer_0.__enter__()
    none_type_0 = timer_0.__exit__()
    timer_0.stop()


def test_case_4():
    timer_0 = module_0.Timer()
    timer_1 = timer_0.__enter__()
    float_0 = timer_0.stop()


def test_case_5():
    timer_0 = module_0.Timer()
    timer_1 = timer_0.__enter__()
    none_type_0 = timer_0.__exit__()


def test_case_6():
    timer_error_0 = module_0.TimerError()
    bool_0 = True
    timer_0 = module_0.Timer(initial_text=bool_0)
    none_type_0 = timer_0.start()


def test_case_7():
    str_0 = "gYh7Wt\n"
    timer_0 = module_0.Timer(initial_text=str_0)
    timer_1 = timer_0.__enter__()
    var_0 = timer_0.__repr__()
    timer_0.start()


def test_case_8():
    bytes_0 = b"\x12\xa7\xb3\xe8Ph\xda\xfb\x00;\t"
    set_0 = {bytes_0}
    str_0 = "&0i?\n\n"
    dict_0 = {str_0: bytes_0, str_0: str_0}
    bytes_1 = b""
    complex_0 = -45 + 2876.6514j
    tuple_0 = (set_0, dict_0, bytes_1, complex_0)
    var_0 = module_1.dataclass(repr=tuple_0)
    timer_0 = module_0.Timer(text=var_0, logger=bytes_1)
    var_1 = var_0.__eq__(bytes_0)
    none_type_0 = timer_0.start()


def test_case_9():
    float_arg_0 = module_0.FloatArg()
    str_0 = "/9CE\x0b{"
    timer_0 = module_0.Timer(str_0)
    none_type_0 = timer_0.start()
    none_type_1 = timer_0.__exit__()
    timer_1 = module_0.Timer(text=str_0)
    timer_2 = module_0.Timer()
    timer_0.stop()


def test_case_10():
    none_type_0 = None
    timer_0 = module_0.Timer(text=none_type_0, logger=none_type_0)
    var_0 = timer_0.__call__(timer_0)
    none_type_1 = timer_0.start()
    float_0 = timer_0.stop()
    timer_0.stop()


def test_case_11():
    float_arg_0 = module_0.FloatArg()
    str_0 = "/9CE\x0b{"
    list_0 = [float_arg_0, float_arg_0]
    timer_0 = module_0.Timer(str_0, initial_text=float_arg_0, logger=list_0)
    timer_1 = module_0.Timer(str_0)
    timer_0.__enter__()


def test_case_12():
    float_arg_0 = module_0.FloatArg()
    timer_0 = module_0.Timer(text=float_arg_0)
    timer_1 = module_0.Timer(text=timer_0)
    timer_2 = timer_1.__enter__()
    none_type_0 = timer_1.__exit__()
    timer_3 = module_0.Timer(timer_1)
    var_0 = timer_1.__eq__(float_arg_0)
    var_1 = timer_2.__repr__()
    timer_error_0 = module_0.TimerError()
    var_2 = timer_3.__eq__(timer_2)
    var_1.__enter__()
