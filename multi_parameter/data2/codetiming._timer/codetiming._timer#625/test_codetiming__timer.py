# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import codetiming._timer as module_0


def test_case_0():
    float_arg_0 = module_0.FloatArg()


def test_case_1():
    timer_0 = module_0.Timer()
    timer_1 = timer_0.__enter__()
    timer_0.start()


def test_case_2():
    bool_0 = True
    timer_0 = module_0.Timer(bool_0, initial_text=bool_0)
    timer_1 = timer_0.__enter__()
    float_0 = timer_0.stop()


def test_case_3():
    bool_0 = True
    timer_0 = module_0.Timer(bool_0, initial_text=bool_0)
    list_0 = [timer_0, bool_0, timer_0, bool_0]
    timer_0.__exit__(*list_0)


def test_case_4():
    bool_0 = False
    timer_0 = module_0.Timer(bool_0, initial_text=bool_0)
    timer_1 = timer_0.__enter__()
    float_0 = timer_0.stop()


def test_case_5():
    none_type_0 = None
    bool_0 = True
    timer_0 = module_0.Timer(none_type_0, initial_text=bool_0)
    timer_1 = timer_0.__enter__()
    float_0 = timer_0.stop()


def test_case_6():
    none_type_0 = None
    bool_0 = True
    timer_0 = module_0.Timer(initial_text=none_type_0, logger=none_type_0)
    var_0 = timer_0.__call__(bool_0)
    var_0.__call__(none_type_0)


def test_case_7():
    none_type_0 = None
    bool_0 = True
    timer_0 = module_0.Timer(none_type_0, initial_text=bool_0)
    var_0 = timer_0.__call__(timer_0)
    str_0 = "Timer is not runnin\\. Use .start() to start it"
    bytes_0 = b"+90\n\xde\xa6t)a"
    timer_1 = module_0.Timer(bytes_0, initial_text=str_0)
    timer_2 = timer_1.__enter__()
    var_0.stop()


def test_case_8():
    none_type_0 = None
    bool_0 = True
    timer_0 = module_0.Timer(none_type_0, initial_text=bool_0)
    var_0 = timer_0.__call__(timer_0)
    timer_1 = module_0.Timer(none_type_0, timer_0, bool_0)
    timer_2 = timer_1.__enter__()
    float_0 = timer_1.stop()
    module_0.FloatArg(*var_0)
