# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import codetiming._timer as module_0


def test_case_0():
    float_arg_0 = module_0.FloatArg()


def test_case_1():
    timer_0 = module_0.Timer()
    timer_1 = timer_0.__enter__()
    none_type_0 = timer_0.__exit__()


def test_case_2():
    none_type_0 = None
    timer_0 = module_0.Timer(none_type_0)
    timer_error_0 = module_0.TimerError()
    float_arg_0 = module_0.FloatArg()
    timer_0.stop()


def test_case_3():
    none_type_0 = None
    timer_0 = module_0.Timer(logger=none_type_0)
    timer_error_0 = module_0.TimerError()
    timer_1 = timer_0.__enter__()
    none_type_1 = timer_0.__exit__()
    float_arg_0 = module_0.FloatArg()


def test_case_4():
    bool_0 = True
    timer_0 = module_0.Timer(initial_text=bool_0)
    timer_1 = timer_0.__enter__()
    timer_0.__enter__()


def test_case_5():
    bool_0 = True
    timer_0 = module_0.Timer(initial_text=bool_0)
    timer_1 = timer_0.__eq__(timer_0)
    timer_2 = timer_0.__enter__()


def test_case_6():
    str_0 = "Timer is not running. Use .start() to start it"
    timer_0 = module_0.Timer(initial_text=str_0)
    timer_1 = timer_0.__enter__()
    var_0 = timer_0.__eq__(str_0)
    none_type_0 = timer_1.__exit__()
    var_1 = timer_1.__repr__()
    timer_2 = timer_1.__enter__()
    var_2 = timer_2.__eq__(str_0)
    var_2.__exit__(*timer_1)


def test_case_7():
    str_0 = "Timer is not running. Use .start() to starf it"
    none_type_0 = None
    timer_0 = module_0.Timer(str_0, initial_text=none_type_0)
    timer_1 = timer_0.__enter__()
    none_type_1 = timer_1.__exit__()
    timer_0.__exit__(*str_0)


def test_case_8():
    bool_0 = True
    timer_0 = module_0.Timer(bool_0, bool_0, bool_0)
    timer_1 = timer_0.__enter__()
    list_0 = [timer_1, bool_0]
    str_0 = "Definition of Timer.\n\nSee help(codetiming) for quick instructions, and\nhttps://pypi.org/project/codetiming/ for more details.\n"
    dict_0 = {str_0: timer_1, str_0: bool_0, str_0: timer_0, str_0: list_0}
    module_0.TimerError(**dict_0)


def test_case_9():
    bool_0 = True
    timer_0 = module_0.Timer(initial_text=bool_0)
    timer_1 = module_0.Timer(text=timer_0)
    none_type_0 = timer_1.start()
    none_type_1 = timer_1.__exit__()
    none_type_2 = timer_0.__call__(timer_1)
    none_type_2.__or__(bool_0)
