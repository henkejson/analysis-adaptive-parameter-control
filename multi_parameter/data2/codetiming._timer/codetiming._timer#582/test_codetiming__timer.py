# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import codetiming._timer as module_0
import codetiming._timers as module_1
import dataclasses as module_2


def test_case_0():
    float_arg_0 = module_0.FloatArg()


def test_case_1():
    timer_0 = module_0.Timer()
    timer_1 = timer_0.__enter__()
    float_0 = timer_0.stop()


def test_case_2():
    timer_0 = module_0.Timer()
    timer_0.stop()


def test_case_3():
    none_type_0 = None
    timer_0 = module_0.Timer(
        text=none_type_0, initial_text=none_type_0, logger=none_type_0
    )
    timer_1 = module_0.Timer()
    timer_0.__exit__()


def test_case_4():
    none_type_0 = None
    timers_0 = module_1.Timers()
    timer_0 = module_0.Timer(timers_0, initial_text=timers_0)
    bool_0 = True
    timer_1 = module_0.Timer(text=bool_0, initial_text=bool_0)
    timer_2 = module_0.Timer(logger=none_type_0)
    timer_3 = timer_0.__enter__()
    float_0 = timer_0.stop()
    var_0 = timer_2.__eq__(none_type_0)
    var_1 = var_0.__eq__(var_0)
    var_2 = var_1.__repr__()
    timer_4 = timer_1.__enter__()


def test_case_5():
    none_type_0 = None
    timers_0 = module_1.Timers()
    timer_0 = module_0.Timer(timers_0, initial_text=timers_0)
    int_0 = -739
    none_type_1 = timers_0.add(none_type_0, int_0)
    none_type_2 = timer_0.start()
    none_type_1.get(timers_0, none_type_1)


def test_case_6():
    timer_0 = module_0.Timer()
    timer_1 = timer_0.__enter__()
    timer_1.__enter__()


def test_case_7():
    none_type_0 = None
    timers_0 = module_1.Timers()
    str_0 = "BQ1T/Jd#8IcRbg,5}_uQ"
    timer_0 = module_0.Timer(text=str_0, initial_text=str_0)
    bool_0 = True
    set_0 = {none_type_0, str_0}
    timer_1 = module_0.Timer(initial_text=set_0, logger=none_type_0)
    timer_2 = module_0.Timer(logger=timer_1)
    timer_3 = timer_1.__enter__()
    float_0 = timer_3.stop()
    var_0 = timer_1.__eq__(none_type_0)
    var_1 = timers_0.__eq__(bool_0)
    var_2 = timer_0.__repr__()
    var_3 = timers_0.__iter__()
    var_3.__enter__()


def test_case_8():
    str_0 = " does not support item assignment. Use '.add()' to update values."
    timer_0 = module_0.Timer(text=str_0, initial_text=str_0)
    none_type_0 = timer_0.start()
    timer_1 = module_0.Timer()
    var_0 = module_2.dataclass(repr=str_0)
    var_0.__len__()


def test_case_9():
    timers_0 = module_1.Timers()
    timer_0 = module_0.Timer(timers_0, initial_text=timers_0)
    bool_0 = True
    timer_1 = module_0.Timer()
    timer_2 = module_0.Timer(bool_0)
    timer_3 = timer_2.__enter__()
    float_0 = timer_3.stop()
    str_0 = 'H,q"dTDhzz~b3.)`^v_'
    var_0 = timer_2.__eq__(str_0)
    var_1 = var_0.__eq__(float_0)
    var_2 = timer_0.__repr__()
    var_0.__enter__()


def test_case_10():
    timers_0 = module_1.Timers()
    timer_0 = module_0.Timer(timers_0, initial_text=timers_0)
    bool_0 = True
    none_type_0 = None
    timer_1 = module_0.Timer(none_type_0, initial_text=bool_0)
    timer_2 = module_0.Timer(text=timer_1)
    timer_3 = timer_2.__enter__()
    float_0 = timer_2.stop()
    var_0 = timers_0.__or__(none_type_0)
    var_1 = timers_0.__eq__(timer_2)
    var_2 = timers_0.__eq__(float_0)
    timer_4 = timer_1.__enter__()
