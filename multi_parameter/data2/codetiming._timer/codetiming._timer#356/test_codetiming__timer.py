# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import codetiming._timer as module_0


def test_case_0():
    timer_error_0 = module_0.TimerError()


def test_case_1():
    timer_0 = module_0.Timer()
    var_0 = timer_0.__call__(timer_0)
    var_1 = var_0.__call__(var_0)
    var_1.__call__(timer_0)


def test_case_2():
    timer_0 = module_0.Timer()
    var_0 = timer_0.__call__(timer_0)
    var_1 = var_0.__call__(var_0)
    float_arg_0 = module_0.FloatArg()


def test_case_3():
    str_0 = "Y%/+"
    timer_0 = module_0.Timer(str_0)
    timer_0.stop()


def test_case_4():
    bool_0 = True
    timer_0 = module_0.Timer(text=bool_0, initial_text=bool_0, logger=bool_0)
    timer_0.__enter__()


def test_case_5():
    float_arg_0 = module_0.FloatArg()
    timer_0 = module_0.Timer(float_arg_0, initial_text=float_arg_0)
    var_0 = timer_0.__repr__()
    none_type_0 = timer_0.start()
    var_0.__ior__(var_0)


def test_case_6():
    bool_0 = True
    none_type_0 = None
    timer_0 = module_0.Timer(bool_0, bool_0, logger=none_type_0)
    none_type_1 = timer_0.start()
    timer_1 = module_0.Timer()
    var_0 = timer_1.__call__(timer_1)
    var_1 = var_0.__call__(var_0)
    var_1.__ior__(var_0)


def test_case_7():
    str_0 = "(rCSzjQlD79"
    timer_0 = module_0.Timer(initial_text=str_0)
    none_type_0 = timer_0.start()
    timer_1 = module_0.Timer(logger=timer_0)
    var_0 = timer_1.__call__(none_type_0)
    var_1 = timer_1.__call__(timer_1)
    var_0.__ior__(var_0)


def test_case_8():
    bool_0 = True
    none_type_0 = None
    timer_0 = module_0.Timer(bool_0, bool_0, logger=none_type_0)
    none_type_1 = timer_0.start()
    timer_1 = module_0.Timer()
    var_0 = timer_1.__call__(timer_1)
    none_type_2 = timer_0.__exit__()
    var_1 = var_0.__call__(var_0)
    var_1.__ior__(var_0)


def test_case_9():
    timer_0 = module_0.Timer()
    timer_1 = module_0.Timer(text=timer_0)
    complex_0 = -5471 - 395.757066j
    var_0 = timer_1.__call__(complex_0)
    var_0.__call__(complex_0)
