# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import codetiming._timer as module_0
import collections as module_1
import dataclasses as module_2


def test_case_0():
    timer_0 = module_0.Timer()


def test_case_1():
    str_0 = "]3,;nMWEB!v==.O{"
    none_type_0 = None
    timer_0 = module_0.Timer(str_0, none_type_0)
    timer_1 = timer_0.__enter__()
    timer_1.__enter__()


def test_case_2():
    float_arg_0 = module_0.FloatArg()
    timer_0 = module_0.Timer(initial_text=float_arg_0)
    none_type_0 = timer_0.start()


def test_case_3():
    float_arg_0 = module_0.FloatArg()
    timer_0 = module_0.Timer(initial_text=float_arg_0)
    none_type_0 = timer_0.start()
    float_0 = timer_0.stop()
    timer_0.stop()


def test_case_4():
    str_0 = "]3,;nMWEB!v==.O{"
    none_type_0 = None
    timer_0 = module_0.Timer(str_0, none_type_0)
    timer_1 = timer_0.__enter__()


def test_case_5():
    float_arg_0 = module_0.FloatArg()
    timer_0 = module_0.Timer(initial_text=float_arg_0)
    timer_1 = timer_0.__enter__()
    float_0 = timer_1.stop()


def test_case_6():
    str_0 = "]3,;nMWEB!v==.O{"
    none_type_0 = None
    timer_0 = module_0.Timer(str_0, none_type_0)
    timer_1 = timer_0.__enter__()
    timer_0.__exit__()


def test_case_7():
    none_type_0 = None
    timer_0 = module_0.Timer(none_type_0, logger=none_type_0)
    float_arg_0 = module_0.FloatArg()
    timer_error_0 = module_0.TimerError()
    user_dict_0 = module_1.UserDict()
    bool_0 = True
    none_type_1 = timer_0.start()
    float_0 = timer_0.stop()
    var_0 = timer_0.__call__(bool_0)
    var_1 = user_dict_0.get(bool_0)
    var_2 = user_dict_0.__repr__()
    var_2.pop(float_arg_0)


def test_case_8():
    float_arg_0 = module_0.FloatArg()
    timer_0 = module_0.Timer(float_arg_0)
    none_type_0 = timer_0.start()
    float_0 = timer_0.stop()
    timer_1 = timer_0.__enter__()
    timer_1.__enter__()


def test_case_9():
    float_arg_0 = module_0.FloatArg()
    timer_0 = module_0.Timer(float_arg_0, float_arg_0, float_arg_0)
    none_type_0 = timer_0.start()
    var_0 = timer_0.__repr__()
    var_0.stop()


def test_case_10():
    str_0 = " does not support item assignment. Use '.add()' to update values."
    list_0 = [str_0, str_0, str_0, str_0]
    timer_0 = module_0.Timer(str_0, initial_text=str_0)
    timer_error_0 = module_0.TimerError(*list_0)
    none_type_0 = timer_0.start()
    var_0 = module_2.field(compare=str_0, metadata=str_0, kw_only=str_0)
    var_0.__exit__(*var_0)


def test_case_11():
    float_arg_0 = module_0.FloatArg()
    timer_0 = module_0.Timer(initial_text=float_arg_0)
    timer_1 = module_0.Timer(text=timer_0)
    none_type_0 = timer_1.start()
    float_0 = timer_1.stop()
    module_2.field(metadata=timer_1)
