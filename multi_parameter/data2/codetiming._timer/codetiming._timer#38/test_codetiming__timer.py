# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import codetiming._timer as module_0


def test_case_0():
    float_arg_0 = module_0.FloatArg()


def test_case_1():
    timer_0 = module_0.Timer()
    none_type_0 = timer_0.start()


def test_case_2():
    str_0 = "Timer {name} started"
    timer_0 = module_0.Timer(text=str_0)
    timer_0.stop()


def test_case_3():
    timer_0 = module_0.Timer()
    none_type_0 = timer_0.start()
    none_type_1 = timer_0.__exit__()


def test_case_4():
    timer_0 = module_0.Timer()
    none_type_0 = timer_0.start()
    list_0 = [none_type_0, timer_0, timer_0, none_type_0]
    none_type_1 = timer_0.__eq__(list_0)
    timer_0.__enter__()


def test_case_5():
    none_type_0 = None
    timer_0 = module_0.Timer(none_type_0, logger=none_type_0)
    none_type_1 = timer_0.start()
    none_type_2 = timer_0.__exit__()
    var_0 = timer_0.__call__(none_type_0)
    list_0 = [none_type_1]
    str_0 = '>}`cJ\\Q8D2LY">Z\x0b\\~R'
    str_1 = "Ym*\rHM"
    dict_0 = {str_0: str_0, str_0: list_0, str_0: str_0, str_1: str_0}
    module_0.FloatArg(*list_0, **dict_0)


def test_case_6():
    none_type_0 = None
    timer_0 = module_0.Timer(initial_text=none_type_0)
    timer_1 = module_0.Timer(none_type_0, timer_0, timer_0)
    timer_2 = timer_1.__enter__()
    none_type_1 = timer_1.__exit__()


def test_case_7():
    timer_0 = module_0.Timer()
    str_0 = "6}(oC;\r$&\x0ct1hO~"
    timer_1 = module_0.Timer(initial_text=str_0)
    var_0 = timer_0.__repr__()
    timer_1.start()


def test_case_8():
    none_type_0 = None
    timer_0 = module_0.Timer(logger=none_type_0)
    timer_1 = module_0.Timer(initial_text=none_type_0)
    timer_2 = module_0.Timer(timer_1, timer_1, timer_1)
    timer_3 = timer_2.__enter__()
    var_0 = timer_2.__repr__()
    var_1 = timer_1.__eq__(var_0)


def test_case_9():
    none_type_0 = None
    timer_0 = module_0.Timer(initial_text=none_type_0)
    timer_1 = module_0.Timer(timer_0)
    timer_2 = timer_1.__enter__()
    var_0 = timer_1.__repr__()
    var_1 = timer_0.__call__(var_0)
    var_2 = var_0.__repr__()
    timer_2.__exit__()
