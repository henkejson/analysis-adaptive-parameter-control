# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "\\1"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_1():
    str_0 = "!^yA\t)pDgm f"
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(none_type_0)


def test_case_2():
    str_0 = "C"
    none_type_0 = None
    module_0.ImportReplacer(str_0, none_type_0, none_type_0, str_0)


def test_case_3():
    import_processor_0 = module_0.ImportProcessor()
    module_0.ImportReplacer(import_processor_0, import_processor_0, import_processor_0)


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    str_0 = "!^yA\t)pDgmf8"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_6():
    bool_0 = False
    var_0 = module_0.IllegalUseOfScopeReplacer(bool_0, bool_0, bool_0)
    var_0.__repr__()


def test_case_7():
    import_processor_0 = module_0.disallow_proxying()


def test_case_8():
    str_0 = "!^yA\t)pDgmf8"
    module_0.lazy_import(str_0, str_0)


def test_case_9():
    str_0 = "\n    Turn a function to a bound method on an instance\n\n    >>> class Foo(object):\n    ...     def __init__(self, x, y):\n    ...         self.x = x\n    ...         self.y = y\n    >>> foo = Foo(2, 3)\n    >>> my_unbound_method = lambda self: self.x * self.y\n    >>> bind(foo, my_unbound_method, 'multiply')\n    >>> foo.multiply()  # noinspection PyUnresolvedReferences\n    6\n\n    :param object instance: some object\n    :param callable func: unbound method (i.e. a function that takes `self` argument, that you now\n        want to be bound to this class as a method)\n    :param str as_name: name of the method to create on the object\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_10():
    bool_0 = True
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bool_0, bool_0, bool_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_11():
    import_processor_0 = module_0.ImportProcessor()
    str_0 = ""
    module_0.lazy_import(import_processor_0, str_0)


def test_case_12():
    str_0 = "ScopeReplacer object %(name)r was used incorrectly: %(msg)s%(extra)s"
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    dict_0 = {}
    none_type_0 = None
    import_replacer_0 = module_0.ImportReplacer(dict_0, none_type_0, none_type_0)
    module_0.lazy_import(dict_0, import_replacer_0, none_type_0)


def test_case_14():
    import_processor_0 = module_0.ImportProcessor()
    str_0 = "k$ (nL7T"
    import_processor_0.lazy_import(str_0, str_0)


def test_case_15():
    import_processor_0 = module_0.ImportProcessor()
    str_0 = "!^yA\t)pDgmf8"
    module_0.ImportReplacer(str_0, str_0, str_0, str_0, str_0)


def test_case_16():
    str_0 = "!^yA\t)pDgm f"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    module_0.lazy_import(var_0, str_0)


def test_case_17():
    str_0 = "\n    Turn a function to a bound method on an instance\n\n    >>> class Foo(object<:\n    ...     def __init__(self, x, y):\n    ...         self.x = x\n    ...         self.y = y\n    >>> foo = Foo(2, 3)\n    >>> y_unbound_method = lambda self: self.x * self.y\n    >>> bind(foo, my_unbound_method, 'multiply')\n    >>> foo.multiply()  # noinspection PyUnresolvedReferences\n    6\n\n    :param object instance: some object\n    :param callable func: unbound method (i.e. a function that takes `self` argument,that you now\n        want to be bound to this class as a method)\n    :param str as_name: name of the method to create on the object\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_18():
    str_0 = "\n    Turn a function to a bound method on an instance\n\n    >>> class Foo(object):\n    ...     def __init__(self, x, y):\n    ...         self.x = x\n    ...         self.y = y\n    >>> foo = Foo(2, 3)\n    >>> my_unbound_method = lambda self: self.x * self.y\n    >>> bind(foo, my_unbound_method, 'multiply')\n    >>>Ofoo.multiply()  # noinspection PyUnresolvedReferences\n    6\n\n    :param object instance: some object\n    :param callable func: unbound method (i.e. a function that takes `self` argument, that you now\n        want to be bound to this class as a method)\n    :param str as_name: name of the method to create\"on the object\n    "
    list_0 = [str_0]
    bool_0 = False
    import_replacer_0 = module_0.ImportReplacer(list_0, bool_0, str_0, str_0)
    module_0.lazy_import(bool_0, import_replacer_0)


def test_case_19():
    str_0 = ")"
    list_0 = [str_0]
    bool_0 = False
    import_replacer_0 = module_0.ImportReplacer(list_0, bool_0, str_0)
    module_0.lazy_import(list_0, import_replacer_0)
