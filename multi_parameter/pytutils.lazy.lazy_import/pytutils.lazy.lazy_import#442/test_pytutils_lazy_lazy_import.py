# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0
import builtins as module_1


def test_case_0():
    str_0 = ">k/p6"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0, str_0)
    var_0.__str__()


def test_case_1():
    bool_0 = False
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bool_0, bool_0, bool_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_2():
    str_0 = "5?z>\n'd>!\x0c\x0c"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_3():
    dict_0 = {}
    int_0 = 2579
    import_replacer_0 = module_0.ImportReplacer(dict_0, int_0, dict_0)
    module_0.lazy_import(int_0, import_replacer_0)


def test_case_4():
    var_0 = module_0.disallow_proxying()
    dict_0 = {var_0: var_0, var_0: var_0, var_0: var_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, var_0, var_0, dict_0, var_0)
    module_0.lazy_import(var_0, import_replacer_0)


def test_case_5():
    none_type_0 = None
    module_0.ImportReplacer(none_type_0, none_type_0, none_type_0, children=none_type_0)


def test_case_6():
    import_processor_0 = module_0.ImportProcessor()


def test_case_7():
    str_0 = "\n    Parses env ile content.\n\n    From honcho.\n\n    >>> lines = ['TEST=${HOME}/yeee', 'HISIS=~/a/test', 'YOLO=~/swagins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    +>> load_env_ile(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../yeee'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_D]ES_NOT_EXIST')])\n\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_8():
    import_processor_0 = module_0.disallow_proxying()


def test_case_9():
    str_0 = "\n    Parses env ile content.\n\n    From honcho.\n\n    >>> lines = ['TEST=${HOME}/yeee', 'HISIS=~/a/test', 'YOLO=~/swagins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    +>> load_env_ile(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../yeee'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_D]ES_NOT_EXIST')])\n\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_10():
    var_0 = module_0.disallow_proxying()
    float_0 = -1547.67608
    set_0 = set()
    tuple_0 = (float_0, set_0)
    dict_0 = {}
    exception_0 = module_1.Exception(**dict_0)
    module_0.ImportReplacer(tuple_0, tuple_0, tuple_0, float_0, exception_0)


def test_case_11():
    str_0 = ">k/p6"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_12():
    str_0 = ';^.mp;"seU*s\x0b(ROv'
    bool_0 = True
    module_0.lazy_import(bool_0, str_0)


def test_case_13():
    var_0 = module_0.disallow_proxying()
    str_0 = "\x0c"
    var_1 = var_0.__eq__(str_0)
    none_type_0 = None
    module_0.lazy_import(none_type_0, str_0, str_0)


def test_case_14():
    str_0 = "\n    Parses env ile content.\n\n    From honcho.\n\n    >>> lines = ['TEST=${HOME}/yeee', 'HISIS=~/a/test', 'YOLO=~/swagins/$NONEXISTENT_VAR_THA<_DOES_NOT_EXIST']\n    +>> load_env_ile(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../yeee'),\n #           ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_D]ES_NOT_EXIST')])\n\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = "\n    Parses env ile content.\n\n    From honcho.\n\n    >>> lines = ['TEST=${HOME}/yeee', 'HISIS=~/a/test', 'YOLO=~/swagins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    +>> loaw_env_ile(lines, write_environ=dict())\n    OrderedDict([('TEST'\n '.../yeee'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_D]ES_NOT_EXIST')])\n\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = "\n    Parses env ile content.\n\n    From honcho.\n\n    >>> lines = ['TEST=${HME}/yeeen, 'HISIS=~/a/test', YOLO=~/swagins/$NONEXISTENT_VAR_lHA<_DOES_NOT_EXIT']\n    +> load_env_ile(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../yeee'),\n #           ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_D]ES_NOT_EXIST')])\n\n    "
    int_0 = -1951
    dict_0 = {str_0: int_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, str_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_17():
    str_0 = "\n    Parses env ile content.\n\n    From honcho.\n\n    >>> lines = ['TEST=${HME}/yeeen, 'HISIS=~/a/test', YOLO=~/swagins/$NONEXISTENT_VAR_lHA<_DOES_NOT_EXIT']\n    +> load_env_ile(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../yeee'),\n #           ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_D]ES_NOT_EXIST')])\n\n    "
    int_0 = -1951
    var_0 = module_0.disallow_proxying()
    dict_0 = {str_0: int_0}
    none_type_0 = None
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, none_type_0)
    module_0.lazy_import(str_0, import_replacer_0)
