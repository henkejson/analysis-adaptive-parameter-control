# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    bytes_0 = b"\xf2\xf9\x8d\x8cqp\xaf\xb3\x0c\xf6^\x1eo9\x90\x9a\xc1\xa2"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bytes_0, bytes_0
    )
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_1():
    var_0 = module_0.disallow_proxying()
    var_1 = var_0.__eq__(var_0)
    var_2 = var_0.__eq__(var_0)
    int_0 = 1479
    module_0.ImportReplacer(var_0, var_0, int_0, int_0)


def test_case_2():
    none_type_0 = None
    module_0.ImportReplacer(none_type_0, none_type_0, none_type_0)


def test_case_3():
    import_processor_0 = module_0.ImportProcessor()


def test_case_4():
    int_0 = -1
    import_processor_0 = module_0.ImportProcessor(int_0)


def test_case_5():
    str_0 = "=@za4Ac9fQ;2~lNU\rpN"
    module_0.lazy_import(str_0, str_0)


def test_case_6():
    var_0 = module_0.disallow_proxying()


def test_case_7():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_8():
    str_0 = "=@za4Ac9fQ;2~lNU\rpN"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_9():
    str_0 = "\n        :param collections.MutableMapping mapping: Dict-like object to wrap\n        :param bool fancy_repr: If True, show fancy repr, otherwise just show dict's\n        :param bool dictify_repr: If True, cast mapping to a dict on repr\n        "
    module_0.lazy_import(str_0, str_0)


def test_case_10():
    str_0 = "{cls_name}({name})"
    module_0.lazy_import(str_0, str_0)


def test_case_11():
    import_processor_0 = module_0.disallow_proxying()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        import_processor_0, import_processor_0
    )
    module_0.IllegalUseOfScopeReplacer(
        import_processor_0,
        illegal_use_of_scope_replacer_0,
        illegal_use_of_scope_replacer_0,
    )


def test_case_12():
    str_0 = "{]Wls_nam}({name})"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_13():
    str_0 = " Convert one queue into several. Kind of like a teing queue.\n\n    >>> in_q = Queue()\n    >>> q1, q2, q3 = multiplex(in_q, ou*t=3)\n    "
    module_0.ImportReplacer(str_0, str_0, str_0, str_0, str_0)


def test_case_14():
    none_type_0 = None
    str_0 = "\t"
    module_0.lazy_import(str_0, str_0, none_type_0)


def test_case_15():
    str_0 = "Mw_F<{xjD_}=!]kL6#Dr"
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = " Convert one queue into several. id of like a teeing queue.\n\n    >>> in_q = Queue(\n    >>> q1, q2, q3 = multilexin_q, count=3\n    "
    none_type_0 = None
    module_0.lazy_import(str_0, str_0, none_type_0)


def test_case_17():
    str_0 = " Convert one queue into several. id of like a teeing queue.\n\n    >>> in_q = Queue(\n    >>> q1, q2, q3 = multiplex(in_q, count=3)\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_18():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, bool_0, bool_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)
