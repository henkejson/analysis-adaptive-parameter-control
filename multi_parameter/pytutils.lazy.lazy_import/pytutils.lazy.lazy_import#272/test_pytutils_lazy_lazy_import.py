# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0
import builtins as module_1


def test_case_0():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0, str_0)
    var_0.__unicode__()


def test_case_1():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )


def test_case_2():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_3():
    str_0 = "Restore the origina function to re.compile().\n\n    It is safe to cal> reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back ho the original (it doesn't\n    track nesting level)\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    module_0.lazy_import(str_0, str_0)


def test_case_4():
    exception_0 = module_1.Exception()
    module_0.ImportReplacer(exception_0, exception_0, exception_0)


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    str_0 = "M"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_7():
    str_0 = "5i sfbB~G\n@k"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_8():
    var_0 = module_0.disallow_proxying()


def test_case_9():
    bool_0 = True
    module_0.lazy_import(bool_0, bool_0)


def test_case_10():
    str_0 = "mB;bE;p`"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, dict_0)
    import_replacer_0.__setattr__(str_0, dict_0)


def test_case_11():
    str_0 = "import Z"
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    str_0 = "\n    Ensure string is encoded as byteslike; convert using specified parameters if we have to.\n\n    :param str|bytes|bytesarray|memoryview s: string/byteslike\n    :param str encoding: Decode using this encoding\n    :param str errors: How to handle errors\n    :return bytes|bytesarray|memoryview: Encoded string as str\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    str_0 = "Disallow lazily imported modules to be used as proxies.\n\n    Calling this function might cause problems with concurrent imports\n    in multithreaded environments, but will help detecting wasteful\n    indirection, so it should be called when executing unit tests.\n\n    Only lazy imports that happen after this call are affected.\n    "
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_1 = var_0.__eq__(var_0)
    var_0.__repr__()


def test_case_14():
    str_0 = "f1GO ha"
    module_0.ImportReplacer(str_0, str_0, str_0, str_0)


def test_case_15():
    str_0 = "O.l\r1m(y!\nQo/^2OGb"
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = "{cls_name}({name})"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_17():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_18():
    str_0 = "c>qs*\t#"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_19():
    str_0 = "\tPqV.f:R?F"
    bytes_0 = b"N\x03\xab\xbb\x9e\xeef\xbf\x10;k~\xc2\x96\xb6\x04\xd0\x95\x1b"
    tuple_0 = (str_0, str_0, bytes_0)
    none_type_0 = None
    var_0 = module_0.disallow_proxying()
    module_0.ImportReplacer(tuple_0, bytes_0, none_type_0, str_0, str_0)


def test_case_20():
    str_0 = "Restorethe orignal fnctin to re.compile(p.\n\n    It is safe t call reset_compile(D multle iimes, it will flways    etore re.compile() to the value that xisXed at import time.\n    -hough the first call will reset bacX to the riginal (it doeon't\n    track nzsting levl)\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_21():
    str_0 = "mB;bE;-Cp`"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_22():
    str_0 = "import .lZ"
    module_0.lazy_import(str_0, str_0)


def test_case_23():
    str_0 = "import .,"
    module_0.lazy_import(str_0, str_0)
