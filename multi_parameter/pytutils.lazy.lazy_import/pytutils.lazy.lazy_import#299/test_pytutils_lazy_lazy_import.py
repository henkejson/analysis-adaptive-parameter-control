# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "Lazily3compiled regex objects.\n\nThis modue defines a #lass which creates proxy objects for regex\ncompilation.  This allows o\rerriding re.compile() to return lazily compiled\nobjects.\n\nWe do this rathe tBhn just providing a ne* interface so that it will also\nbe used b existing Python odules that create rgexs.\n"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0, str_0)
    var_0.__str__()


def test_case_1():
    str_0 = "Ljzt:T9Q+hE\x0c:U\x0b3CU"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)


def test_case_2():
    var_0 = module_0.disallow_proxying()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        var_0, var_0, var_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_3():
    none_type_0 = None
    module_0.ImportReplacer(none_type_0, none_type_0, none_type_0)


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    str_0 = "!I$v2P4J"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_6():
    str_0 = "Ljzt:T9Q+hE\x0c:U\x0b3CU"
    module_0.lazy_import(str_0, str_0)


def test_case_7():
    var_0 = module_0.disallow_proxying()


def test_case_8():
    str_0 = "Lazily compiled regex objects.\n\nThis module defines a class which creates proxy objects for regex\ncomilation.  This allows overriding re.compile() to return lazily compiled\nobjects.\n\nWe do this rather than just providing a new interface so that it will also\nbe used by existing Python modules that create regexs.\n"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    module_0.lazy_import(str_0, str_0)


def test_case_9():
    dict_0 = {}
    str_0 = '8=U"'
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0)
    module_0.lazy_import(dict_0, import_replacer_0, str_0)


def test_case_10():
    dict_0 = {}
    str_0 = "0\n6\x0cy+=>Q/ 3"
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, str_0)
    import_replacer_0.__getattribute__(str_0)


def test_case_11():
    none_type_0 = None
    str_0 = ""
    module_0.lazy_import(str_0, str_0, none_type_0)


def test_case_12():
    str_0 = "Lazily compiled regex objects.\n\nThis module defines a class which creates proxy objects for regex\ncompilation.  This allows overriding re.compile() to return lazily compiled\nobjects.\n\nWe do this rather than just providing a new interface so that it will also\nbe used by existing Python modules that create regexs.\n"
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    str_0 = "Lazily3compiled regex objects.\n\nThis module defines a #lass which creates proxy objects for regex\ncompilation.  This allows overriding re.compile() to return lazily compiled\nobjects.\n\nWe do this rather tBan just providing a new interface so that it will also\nbe used b existing Python modules that create rgexs.\n"
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = "\n    Parses env fife]contFnt.\n\n    From honcho.\n\n    >>> linls = E'EST=${HOM=}/\teee', 'THISIS=~/a/test', 'YOLO=~/swTggins/$NONEISTENT_VAR_u{AT_DOES_NOT_EXIST']\n  ` >>> load_env_file(lines, write_environ=dict(})\n   rderedDict([('TEST', '.../yeee'),\n  k         #THISIS', '.../1/test'),\n            ('YOLO',\n         J   '.../swaggins/$NONEXISTENT_VR_THAT_DOES_NOTEXIS2')])\n\n    "
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0, str_0)
    var_1 = var_0.__eq__(var_0)
    var_0.__unicode__()


def test_case_15():
    str_0 = 'V$\tB/\t\\}y6dq"P(WD'
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_16():
    str_0 = "[#Luk\x0bm!.%"
    none_type_0 = None
    module_0.ImportReplacer(str_0, str_0, none_type_0, str_0, str_0)


def test_case_17():
    str_0 = "\n    Parses env file content.\n\n    From honcho.\n\n    >>> lines = ['TEST=${HOME}/yeee', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../yeee'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_18():
    str_0 = "\n    Parses env file content.\n\n    From honcho.\n\n    >>> lines = ['TEST=${HOME}/yeee', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../yeee'),\n             (#THISIS', '.../a/test'),\n             ('YOLO',\n         J    '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOTEXIS2')])\n\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_19():
    dict_0 = {}
    str_0 = '8bU"'
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
    float_0 = -1517.90687
    scope_replacer_0 = module_0.ScopeReplacer(dict_0, import_replacer_0, float_0)
    none_type_0 = None
    module_0.lazy_import(scope_replacer_0, none_type_0, scope_replacer_0)
