# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "v-2S3zF*["
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_1():
    str_0 = "\n    Write`contens` to `filename`.\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_2():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_3():
    bytes_0 = b"\x17\x0f\x88"
    module_0.ImportReplacer(bytes_0, bytes_0, bytes_0, children=bytes_0)


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    str_0 = "\n    Write `contents` to `filename`.\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_6():
    import_processor_0 = module_0.disallow_proxying()


def test_case_7():
    str_0 = "_resolve"
    module_0.ImportReplacer(str_0, str_0, str_0, str_0)


def test_case_8():
    bool_0 = True
    bool_1 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_1, bool_1: bool_1}
    none_type_0 = None
    import_replacer_0 = module_0.ImportReplacer(
        dict_0, bool_1, none_type_0, children=none_type_0
    )
    str_0 = ""
    module_0.lazy_import(bool_1, str_0)


def test_case_9():
    str_0 = "v-2S3zF*["
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_10():
    str_0 = "v#:SzF*="
    module_0.lazy_import(str_0, str_0)


def test_case_11():
    str_0 = "\nl   Write `ron(ents` to `filename`.\n  \r "
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, bool_0, bool_0)
    module_0.lazy_import(bool_0, import_replacer_0)


def test_case_13():
    str_0 = 'b&*nXXk)<Tm"rW>+S'
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    module_0.ImportReplacer(
        illegal_use_of_scope_replacer_0,
        illegal_use_of_scope_replacer_0,
        str_0,
        var_0,
        illegal_use_of_scope_replacer_0,
    )


def test_case_14():
    str_0 = "\n    Walks up a domain by subdomain.\n\n    >>> split_domain_into_subdomains('this.is.a.test.skywww.net')\n    ['this.is.a.test.skywww.net', 'is.a.test.skywww.net', 'a.test.skywww.net', 'test.skywww.net', 'skywww.net']\n\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_15():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = "Restore the origi`al function to re.compile().\n\n    It is safe t call reset_compile() multiple times, it will always\n    restore re.compile(a o the value that existed at import time.\n    Though the first call will reset baOk to the original (it doesn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_17():
    str_0 = "1F/y7F"
    dict_0 = {str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0)
    module_0.lazy_import(dict_0, import_replacer_0)


def test_case_18():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    dict_0 = {str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, dict_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0, dict_0)
