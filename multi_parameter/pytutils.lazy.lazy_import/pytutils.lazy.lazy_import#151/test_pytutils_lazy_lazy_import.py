# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "datefmt"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_1():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )


def test_case_2():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_3():
    bytes_0 = b"\xb1\x08A\x83H\xaa\xb0\xa8O"
    module_0.ImportReplacer(bytes_0, bytes_0, bytes_0, bytes_0)


def test_case_4():
    bytes_0 = b"5"
    bytes_1 = b"\x84\xce\xf6\xc2Y\xd1:\xb9"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bytes_1, bytes_1
    )
    module_0.ImportReplacer(bytes_0, bytes_1, bytes_0)


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    str_0 = "8"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_7():
    var_0 = module_0.disallow_proxying()


def test_case_8():
    str_0 = "1?I,"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_9():
    var_0 = module_0.disallow_proxying()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(var_0, var_0)
    var_1 = illegal_use_of_scope_replacer_0.__eq__(var_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_10():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    module_0.ImportReplacer(
        none_type_0,
        illegal_use_of_scope_replacer_0,
        none_type_0,
        illegal_use_of_scope_replacer_0,
        illegal_use_of_scope_replacer_0,
    )


def test_case_11():
    str_0 = 'U*90|("\nwRN'
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    str_0 = "Make lazy_compile the default compile mode for regex compilation.\n\n    This overrides re.compile with lazy_compile. To restore the original\n    functionality, call reset_compile().\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_14():
    var_0 = module_0.disallow_proxying()
    str_0 = ""
    module_0.lazy_import(str_0, str_0, var_0)


def test_case_15():
    str_0 = "\n    An ordered dictionary can be combined with the Counter class so that the couner remembers the order elements are\n    first encountered.\n\n    From Python stdlib in `collections`.\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = "vI,"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    module_0.lazy_import(illegal_use_of_scope_replacer_0, str_0)


def test_case_17():
    dict_0 = {}
    none_type_0 = None
    import_replacer_0 = module_0.ImportReplacer(dict_0, none_type_0, dict_0)
    import_replacer_0.__call__(**dict_0)


def test_case_18():
    str_0 = '^""#cVXHj`\x0cV"bu{LZ'
    module_0.lazy_import(str_0, str_0)


def test_case_19():
    str_0 = "7FH\x0c)QH\\l`,D Cpm"
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0)
    module_0.lazy_import(str_0, import_replacer_0)


def test_case_20():
    str_0 = "7FH\x0c)QH\\l`,D Cpm"
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, dict_0)
    module_0.lazy_import(str_0, import_replacer_0, dict_0)
