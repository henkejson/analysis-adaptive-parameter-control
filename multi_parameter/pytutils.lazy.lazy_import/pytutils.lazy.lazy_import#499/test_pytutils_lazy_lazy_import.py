# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "imports"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__str__()


def test_case_1():
    var_0 = module_0.disallow_proxying()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        var_0, var_0, var_0
    )


def test_case_2():
    str_0 = "V"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0.__str__()


def test_case_3():
    none_type_0 = None
    str_0 = "2 {v@W&}n@(Q"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(none_type_0)


def test_case_4():
    dict_0 = {}
    none_type_0 = None
    import_replacer_0 = module_0.ImportReplacer(
        dict_0, none_type_0, none_type_0, dict_0, dict_0
    )
    import_replacer_0.__str__()


def test_case_5():
    var_0 = module_0.disallow_proxying()
    var_1 = var_0.__repr__()
    bytes_0 = b"\x9fOro\xd6\xea"
    module_0.ImportReplacer(var_1, bytes_0, var_0)


def test_case_6():
    import_processor_0 = module_0.ImportProcessor()


def test_case_7():
    str_0 = "U"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_8():
    str_0 = "U"
    module_0.lazy_import(str_0, str_0)


def test_case_9():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0, none_type_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_10():
    none_type_0 = None
    module_0.ScopeReplacer(none_type_0, none_type_0, none_type_0)


def test_case_11():
    var_0 = module_0.disallow_proxying()


def test_case_12():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    str_0 = "\nHVtF_"
    module_0.ImportReplacer(str_0, str_0, illegal_use_of_scope_replacer_0, str_0, str_0)


def test_case_13():
    str_0 = "(debug shell)"
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    import_processor_0 = module_0.ImportProcessor()
    str_0 = ""
    import_processor_0.lazy_import(import_processor_0, str_0)


def test_case_15():
    str_0 = '"\n    Deduplicates an iterator iteratively using hashed values in a set.\n    Not exactly memory efficient because of that of course.\n    If you have a large dataset with high cardinality look at HyperLogLog instead.\n\n    :return generator: Iterator of deduplicated results.\n    '
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = "ixzc(I:!hDAp\x0b`\\s\nK"
    module_0.lazy_import(str_0, str_0)


def test_case_17():
    str_0 = "(d\tbush\tl)"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_18():
    str_0 = "-d#a,"
    module_0.lazy_import(str_0, str_0)


def test_case_19():
    str_0 = "(debuh she\nl)"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_20():
    str_0 = "R[\\eVc+)$=\nVw_s8)"
    none_type_0 = None
    dict_0 = {str_0: str_0, str_0: none_type_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, none_type_0, str_0)
    module_0.lazy_import(dict_0, import_replacer_0, dict_0)


def test_case_21():
    str_0 = "R[\\eVc+)$=\nVw_s8)"
    none_type_0 = None
    dict_0 = {str_0: str_0, str_0: none_type_0}
    var_0 = module_0.disallow_proxying()
    set_0 = {none_type_0, none_type_0, none_type_0}
    var_1 = var_0.__eq__(set_0)
    var_2 = var_1.__repr__()
    tuple_0 = (var_2,)
    import_replacer_0 = module_0.ImportReplacer(dict_0, var_0, tuple_0, dict_0)
    import_replacer_0.__setattr__(var_1, set_0)
