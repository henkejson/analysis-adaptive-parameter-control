# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )


def test_case_1():
    var_0 = module_0.disallow_proxying()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(var_0, var_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_2():
    str_0 = "Mtp-E&;&"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    var_1 = var_0.__repr__()


def test_case_3():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, bool_0, bool_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    bool_0 = True
    module_0.lazy_import(bool_0, bool_0, bool_0)


def test_case_6():
    str_0 = "x&([*_q\n\t\\)"
    module_0.lazy_import(str_0, str_0)


def test_case_7():
    str_0 = "nx$([._Sq<\nk\\)a"
    module_0.lazy_import(str_0, str_0)


def test_case_8():
    var_0 = module_0.disallow_proxying()


def test_case_9():
    str_0 = "Mtp-E&;&"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_10():
    bool_0 = False
    module_0.ScopeReplacer(bool_0, bool_0, bool_0)


def test_case_11():
    none_type_0 = None
    module_0.lazy_import(none_type_0, none_type_0)


def test_case_12():
    str_0 = "gq\n^|/pkpT/&^NL+d^d"
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    str_0 = "%s.cache is deprecated"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_14():
    str_0 = ""
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0, str_0
    )
    module_0.lazy_import(str_0, str_0, none_type_0)


def test_case_15():
    str_0 = (
        "\n        A standin for a module to prevent it from being imported\n        "
    )
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = "x&(*_q\n\t\\T"
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, dict_0, dict_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_17():
    bool_0 = False
    int_0 = -1
    module_0.ImportReplacer(bool_0, bool_0, bool_0, bool_0, int_0)


def test_case_18():
    str_0 = "x$([*._Sq\n\t\\)"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_19():
    str_0 = "x&(5J*_q\t3)"
    module_0.lazy_import(str_0, str_0)


def test_case_20():
    str_0 = ":a#}{LWs1s5"
    module_0.lazy_import(str_0, str_0)


def test_case_21():
    str_0 = "<$"
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0)
    module_0.lazy_import(dict_0, import_replacer_0)


def test_case_22():
    str_0 = "Take a list of imports, and split it into regularized form.\n\n        This is meant to take regular import text, and convert it to\n        the forms that the rest of the converters prefer.\n        "
    dict_0 = {}
    none_type_0 = None
    import_replacer_0 = module_0.ImportReplacer(dict_0, none_type_0, str_0)
    scope_replacer_0 = module_0.ScopeReplacer(
        dict_0, import_replacer_0, import_replacer_0
    )
    scope_replacer_0.__setattr__(dict_0, none_type_0)


def test_case_23():
    str_0 = "from U"
    module_0.lazy_import(str_0, str_0)
