# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0
import builtins as module_1


def test_case_0():
    str_0 = "EfasNG,Wo}\x0cf"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0, str_0)
    var_0.__unicode__()


def test_case_1():
    str_0 = "E{fas!NG,Wo}\x0cf"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0.__unicode__()


def test_case_2():
    str_0 = "Wg).L8b+x"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_1 = var_0.__eq__(str_0)
    var_0.__unicode__()


def test_case_3():
    none_type_0 = None
    import_processor_0 = module_0.ImportProcessor(none_type_0)
    module_0.ImportReplacer(
        none_type_0, none_type_0, none_type_0, none_type_0, none_type_0
    )


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    str_0 = "f"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_6():
    str_0 = "0Y7"
    module_0.lazy_import(str_0, str_0)


def test_case_7():
    var_0 = module_0.disallow_proxying()


def test_case_8():
    str_0 = "^."
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0.__repr__()


def test_case_9():
    exception_0 = module_1.Exception()
    str_0 = ""
    import_processor_0 = module_0.ImportProcessor(str_0)
    var_0 = str_0.__repr__()
    var_1 = module_0.disallow_proxying()
    list_0 = [str_0, str_0, str_0]
    module_0.lazy_import(list_0, str_0)


def test_case_10():
    str_0 = "\n    Derive a namespace from the module containing the caller's caller.\n\n    :return: the fully qualified python name of a module.\n    :rtype: str\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_11():
    str_0 = "\\V6S|>5=X|g!5kt#Z"
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    str_0 = "\n    Turn a function to a bound method on an instance\n\n    >>> class goo(object):\n    ...     def __init__(self, x, y):\n    ...         self.x = x\n    ...        self.y = y\n    >>> foo =Foo(2, 3)\n    >>> my_unbound_method = lamda self: self.x * self.y\n  l >> bind(foo, my_unbound_method, 'multiply')\n    >>$ foo.multiply()  # noinspection PyUnresolvedReferences\n    6\n\n    :param object instance: some object\n    :param callable func~ unbound method (i.e. a function that takes `self` argument, that younow\n        want tZ be bound to this class s a method)\n    :param str as_name: name of the method to create on the object\n    "
    none_type_0 = None
    dict_0 = {none_type_0: none_type_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, none_type_0, none_type_0, str_0)
    module_0.lazy_import(none_type_0, import_replacer_0)


def test_case_13():
    str_0 = "A([A-Za-zv0-9])=(.*)\\Z"
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = "\\A([V-Za-zv0\n])=(.*)\\Z"
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = "EfasNG,Wo}\x0cf"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_16():
    str_0 = ":(s+iAdQRg\nc`"
    none_type_0 = None
    module_0.ImportReplacer(none_type_0, none_type_0, none_type_0, str_0, str_0)


def test_case_17():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    scope_replacer_0 = module_0.ScopeReplacer(dict_0, bool_0, bool_0)
    module_0.lazy_import(scope_replacer_0, scope_replacer_0)


def test_case_18():
    str_0 = "\n    Turn a function to a bound method on an instance\n\n    >>> class Foo(object):\n    ...     def __init__(self, x, y):\n    ...         self.x = x\n    ...         self.y = y\n    >>> foo = Foo(2, 3)\n    >>> my_unbound_method = lambda self: self.x * self.y\n    >>> bind(foo, my_unbound_method, 'multiply')\n    >>> foo.multiply()  # noinspection PyUnresolvedReferences\n    6\n\n    :param object instance: some object\n    :param callable func: unbound method (i.e. a function that takes `self` argument, that you now\n        want to be bound to this class as a method)\n    :param str as_name: name of the method to create on the object\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_19():
    str_0 = "Decorator to wrap a class or instance methd with a memoizing\n    callable that saves results in a cache.\n\n    You can also specify a cached exception to cache and re-th>ow as well.\n\n    Originally from cachetools, but modified to suport caching certain exceptions.\n    "
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
    module_0.lazy_import(str_0, import_replacer_0)


def test_case_20():
    str_0 = "L+N"
    none_type_0 = None
    dict_0 = {none_type_0: none_type_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, none_type_0, str_0, str_0)
    module_0.lazy_import(str_0, import_replacer_0)
