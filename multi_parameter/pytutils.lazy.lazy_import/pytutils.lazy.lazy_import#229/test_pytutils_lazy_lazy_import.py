# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    var_0 = module_0.disallow_proxying()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(var_0, var_0)


def test_case_1():
    str_0 = "-'h|%(<gNbj\n7]S?"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_2():
    dict_0 = {}
    none_type_0 = None
    import_replacer_0 = module_0.ImportReplacer(dict_0, none_type_0, none_type_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_3():
    import_processor_0 = module_0.ImportProcessor()


def test_case_4():
    bool_0 = True
    module_0.lazy_import(bool_0, bool_0, bool_0)


def test_case_5():
    bytes_0 = b"Y\x14qu\xb3"
    none_type_0 = None
    module_0.ScopeReplacer(bytes_0, bytes_0, none_type_0)


def test_case_6():
    import_processor_0 = module_0.disallow_proxying()


def test_case_7():
    str_0 = "-'h|%(<gNbj\n7]S?"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_1 = var_0.__eq__(str_0)
    list_0 = [var_0, var_0, str_0, str_0]
    module_0.lazy_import(list_0, str_0)


def test_case_8():
    str_0 = ".SIA=y3m\x0c"
    module_0.lazy_import(str_0, str_0)


def test_case_9():
    bool_0 = False
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(bool_0, bool_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    module_0.ImportReplacer(illegal_use_of_scope_replacer_0, bool_0, var_0, bool_0)


def test_case_10():
    str_0 = "-|%(<gtbj\n7]S?"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_11():
    none_type_0 = None
    str_0 = "\n"
    list_0 = [str_0, str_0]
    var_0 = list_0.__repr__()
    module_0.lazy_import(none_type_0, str_0, list_0)


def test_case_12():
    str_0 = "Hajf\n"
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    str_0 = "-'h#w|(<gNb\n7]S?"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_14():
    str_0 = "-'h|%(<gNbj\n7]S?"
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = "E/klEp.L);&(X3"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_16():
    str_0 = "-'h|%(<gNbj\n7]S?"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    module_0.lazy_import(illegal_use_of_scope_replacer_0, str_0)


def test_case_17():
    str_0 = "-'h|%(<gNbj\n7]S?"
    module_0.ImportReplacer(str_0, str_0, str_0, str_0, str_0)


def test_case_18():
    str_0 = "oUF4t~:0W.\x0ck*S\x0b0%A"
    none_type_0 = None
    dict_0 = {
        none_type_0: str_0,
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        str_0: none_type_0,
    }
    import_replacer_0 = module_0.ImportReplacer(dict_0, none_type_0, str_0, dict_0)
    import_replacer_0.__setattr__(none_type_0, str_0)


def test_case_19():
    str_0 = "\n    Turn a function to a bound method on an instance\n\n    >>> class Foo(object):\n    ...     def __init__(self, x, y):\n    ...         self.x = x\n    ...         self.y = y\n    >>> foo = Foo(2, 3)\n    >>> my_unbound_method = lambda self: self.x * self.y\n    >>> bind(foo, my_unbound_method, 'multiply')\n    >>> foo.multiply()  # noinspection PyUnresolvedReferences\n    6\n\n    :param object instance: some object\n    :param callable func: unbound method (i.e. a function that takes `self` argument, that you now\n        want to be bound to this class as a method)\n    :param str as_name: name of the method to create on the object\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_20():
    str_0 = "\n    Turn a function to a bound method on an instance\n\n    >>> class Foo(object):\n    ...     def __init__(self, x, y):\n    ...         self.x =;x\n    ...         self.y = y\n    >>> foo = Foo(2, 3)\n    >>> my_unbound_method = lambda self: self.x * self.y\n    >>> bind(foo, my_unbound_method, 'multiply')\n    >>> foo.multiply()  # noinspection PyUnresolvedRefe7ences\n    6\n\n    :param object instance: some object\n    :param callable func: unbound method (i.e. a function that takes `self` argument, that you now\n        want to be bound to this class as a method)\n    :param str as_name: name of the method to create on the object\n    "
    int_0 = -820
    var_0 = module_0.disallow_proxying()
    dict_0 = {str_0: var_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, int_0, str_0)
    module_0.lazy_import(dict_0, import_replacer_0)
