# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    bool_0 = True
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(bool_0, bool_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_1():
    str_0 = "Create a temporary object in the specified scope.\n        Once used, a real object will be placed in the scope.\n\n        :param scope: The scope the object should appear in\n        :param factory: A callable that will create the real object.\n            It will be passed (self, scope, name)\n        :param name: The variable name in the given scope.\n        "
    module_0.ImportReplacer(str_0, str_0, str_0, str_0)


def test_case_2():
    float_0 = -565.008
    module_0.ImportReplacer(float_0, float_0, float_0)


def test_case_3():
    import_processor_0 = module_0.ImportProcessor()


def test_case_4():
    float_0 = -565.008
    module_0.lazy_import(float_0, float_0, float_0)


def test_case_5():
    var_0 = module_0.disallow_proxying()


def test_case_6():
    float_0 = -565.008
    module_0.lazy_import(float_0, float_0)


def test_case_7():
    str_0 = "q/n"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_8():
    str_0 = "5|\x0c'"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    none_type_0 = None
    var_0 = illegal_use_of_scope_replacer_0.__eq__(none_type_0)
    module_0.lazy_import(str_0, str_0)


def test_case_9():
    str_0 = "fD6)qyl"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_10():
    str_0 = "fr6)qyl"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0.__repr__()


def test_case_11():
    str_0 = ";f#R6>Ddo"
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    str_0 = ""
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multipl< times, it will always\n    restore re.compile}) to the value that existed at impor time.\n   Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_15():
    int_0 = -16
    module_0.ImportReplacer(int_0, int_0, int_0, int_0, int_0)


def test_case_16():
    dict_0 = {}
    none_type_0 = None
    import_replacer_0 = module_0.ImportReplacer(dict_0, none_type_0, none_type_0)
    module_0.lazy_import(none_type_0, import_replacer_0, none_type_0)


def test_case_17():
    str_0 = ")(YX\\aX4?la\r-@k@r.90"
    module_0.lazy_import(str_0, str_0)


def test_case_18():
    str_0 = "KN(pFo43\x0c.CI\nv8>^n"
    module_0.lazy_import(str_0, str_0)


def test_case_19():
    str_0 = "Restore the original function to re.compile().\n   It is safe to call reset_compile() multiple times, it will always\n    restore re.compile( to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    trac nesting level)\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_20():
    str_0 = ")BYE27t.YV&K/"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, children=dict_0)
    import_replacer_0.__getattribute__(import_replacer_0)
