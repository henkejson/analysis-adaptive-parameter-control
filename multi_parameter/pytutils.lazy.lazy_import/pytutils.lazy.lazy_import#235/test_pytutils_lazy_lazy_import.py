# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    bool_0 = True
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bool_0, bool_0, bool_0
    )
    var_0 = module_0.disallow_proxying()


def test_case_1():
    int_0 = -2698
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(int_0, int_0)
    var_0 = module_0.disallow_proxying()


def test_case_2():
    bool_0 = False
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bool_0, bool_0, bool_0
    )
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_3():
    var_0 = module_0.disallow_proxying()
    str_0 = ")[\x0b\x0cKF"
    str_1 = "\\A'(.*)'\\Z"
    module_0.ImportReplacer(str_1, str_0, str_0)


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    str_0 = "9Ei~}WdhMEi"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_6():
    bytes_0 = b"6\xfd\xf8L\x07io\x10\x9f\x10%!\x0ez\xea\x02\xbeI\x87\x93"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bytes_0, bytes_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_7():
    import_processor_0 = module_0.ImportProcessor()
    module_0.ImportReplacer(
        import_processor_0, import_processor_0, import_processor_0, import_processor_0
    )


def test_case_8():
    var_0 = module_0.disallow_proxying()


def test_case_9():
    str_0 = "pf"
    module_0.lazy_import(str_0, str_0)


def test_case_10():
    str_0 = "ku'56dO3."
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    module_0.lazy_import(str_0, str_0)


def test_case_11():
    str_0 = "`6kg<>$(( \n/"
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    str_0 = "\n    Update and/or insert query parameters in a URL.\n\n    >>> update_query_params('http://example.com?foo=bar&biz=baz', dict(foo='stuff'))\n    'http://example.com?...foo=stuff...'\n\n    :param url: URL\n    :type url: str\n    :param kwargs: Query parameters\n    :type kwargs: dict\n    :return: Modified URL\n    :rtype: str\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    str_0 = "\nSNab+pPFkgL"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = "r#r~S\rsD!3D'"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_15():
    str_0 = ""
    var_0 = module_0.disallow_proxying()
    var_1 = module_0.disallow_proxying()
    module_0.lazy_import(str_0, str_0, var_1)


def test_case_16():
    str_0 = "\n    Write `contents` to `filename`.\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_17():
    str_0 = "+ \\tTqm=MHr%H9@])\x0c"
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
    module_0.lazy_import(dict_0, import_replacer_0, dict_0)


def test_case_18():
    str_0 = "V[\r"
    str_1 = "_scope"
    str_2 = "u)sLT9Qw{^ej`'8rD"
    module_0.ImportReplacer(str_2, str_0, str_1, str_2, str_0)


def test_case_19():
    str_0 = "+ \\tqm=MHr%H9@])\x0c"
    dict_0 = {str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, str_0)
    module_0.lazy_import(str_0, import_replacer_0, str_0)


def test_case_20():
    str_0 = "\n    Ierate over run\ring totals, ie [a,b,c,d]-> func( func func(a, b), c), d) with each func reult yided.\n    Fuc is operator.add by default.\n\n    >>> lit(accumula\n@[1,2,3,4,5]))\n M  [1, 3, 6, 10, 15]\n    >>> listwaccumuate([1,,3,4,5], operator.mul))\n    [1, 2, 6, 24, 120]\n    :para iterable: Iterable\n   :param func: method (default=operator.ad to call for each air of (last call result Zr firstitem, next item)\n   :return generator: Generaor\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_21():
    str_0 = "vo, .6"
    dict_0 = {str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, str_0)
    var_0 = module_0.ScopeReplacer(dict_0, import_replacer_0, import_replacer_0)
    var_0.__eq__(var_0)
