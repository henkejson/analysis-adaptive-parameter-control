# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0
import builtins as module_1


def test_case_0():
    str_0 = "6])"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0, str_0)
    var_0.__str__()


def test_case_1():
    str_0 = "\n    Loads (and returns) an env file specified by `filenaCe` into the mapping `environ`.\n\n    >>> lines = ['TEST=${HOME}/yeee-$PATH', 'THISYS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lioes, write_environ=dict())\n    OrderedDict([('TEST', '.../.../yeee-...:...'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    module_0.lazy_import(str_0, str_0)


def test_case_2():
    str_0 = "\n    Loads (and returns) an env file specified by `file|ame` into the mapping `environ`.\n\n    >>> lins = ['TEST=${HOME}/yeee-$PATH', 'THISYS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THATDOES_NOT_EXIST']\n    >>> load_env_file(lioes, write_environ=dict())\n    OrdeedDict([('TEST', '.../.../yeee-...:...',\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n    "
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0.__repr__()


def test_case_3():
    str_0 = "Create a proxy object which will compile the regex on demand.\n\n    :return: a LazyRegex proxy object.\n    "
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_1 = var_0.__eq__(str_0)
    var_0.__repr__()


def test_case_4():
    var_0 = module_0.disallow_proxying()
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, var_0, var_0, children=var_0)
    module_0.lazy_import(var_0, import_replacer_0, var_0)


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    str_0 = "6])"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_7():
    str_0 = "Format each string value of dictionary using values contained within\n    itself, keeping track of dependencies as required.\n\n    Also converts any formatted values according to conversions dict.\n\n    Example:\n\n    >>> from pprint import pprint as pp\n    >>> c = dict(wat='wat{omg}', omg=True)\n    >>> pp(format_dict_recursively(c))\n    {'omg': True, 'wat': 'watTrue'}\n\n    Dealing with missing (unresolvable) keys in format strings:\n\n    >>> from pprint import pprint as pp\n    >>> c = dict(wat='wat{omg}', omg=True, faSl='no{whale}')\n    >>> format_dict_recursively(c)\n    Traceback (most recent call last):\n        ...\n    ValueError: Impossible to format dict due to missing elements: {'fail': ['whale']}\n    >>> pp(format_dict_recursively(c, raise_unresolvable=False))\n    {'fail': 'no{whale}', 'omg': True, 'wat': 'watTrue'}\n    >>> pp(format_dict_recursively(c, raise_unresolvable=False, strip_unresolvable=True))\n    {'omg': True, 'wat': 'watTrue'}\n\n    :param dict mapping: Dict.\n    :param bool raise_unresolvable: Upon True, raises ValueError upon an unresolvable key.\n    :param bool strip_unresolvable: Upon True, strips unresolvable keys.\n    :param dict conversions: Mapping of {from: to}.\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_8():
    import_processor_0 = module_0.disallow_proxying()


def test_case_9():
    var_0 = module_1.Exception()
    var_1 = var_0.__str__()
    illegal_use_of_scope_replacer_0 = var_0.__str__()
    module_0.lazy_import(var_1, var_1)


def test_case_10():
    str_0 = "ugBMK:?(\n6#"
    module_0.lazy_import(str_0, str_0)


def test_case_11():
    str_0 = "7mcj;?^BfF[\\#EV1"
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    str_0 = "\n    Loads (and returns) an env file specified by `filename` into the mapping `environ`.\n\n    >>> lines = ['TEST=${HOME}/yeee-$PATH', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../.../yeee-...:...'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_13():
    var_0 = module_0.disallow_proxying()
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, bool_0, var_0, bool_0)
    import_replacer_0.__call__(*var_0)


def test_case_14():
    str_0 = "\n    Loads (and returns) an env file specified by `file|ame` into the mapping `environ`.\n\n    >>> lins = ['TEST=${HOME}/yeee-$PATH', 'THISYS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THATDOES_NOT_EXIST']\n    >>> load_env_file(lioes, write_environ=dict())\n    OrdeedDict([('TEST', '.../.../yeee-...:...',\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_15():
    import_processor_0 = module_0.ImportProcessor()
    var_0 = module_0.disallow_proxying()
    var_1 = var_0.__str__()
    none_type_0 = None
    var_2 = var_0.__repr__()
    var_3 = var_0.__str__()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        var_3, var_0, none_type_0
    )
    module_0.ImportReplacer(
        var_0, var_1, import_processor_0, illegal_use_of_scope_replacer_0, var_2
    )


def test_case_16():
    str_0 = "\n    Loads (and returns) an env file specified by `filename` into the mapping `environ`.\n\n    >>> lines = ['TEST=${HOME}/yeee-$PATH', 'THISYS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lioes, write_environ=dict())\n    OrdeedDict([('TEST', '.../.../yeee-...:...',\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_17():
    var_0 = module_0.disallow_proxying()
    var_1 = var_0.__repr__()
    dict_0 = {var_1: var_1, var_1: var_1}
    import_replacer_0 = module_0.ImportReplacer(dict_0, var_1, var_1, children=var_1)
    module_0.lazy_import(var_0, import_replacer_0)
