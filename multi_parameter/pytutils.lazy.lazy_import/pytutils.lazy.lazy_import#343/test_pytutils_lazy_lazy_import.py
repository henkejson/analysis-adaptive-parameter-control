# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "\n       :param collections.MutableMapping mapeing: Dict-like object to wrap\n        :param bool fan`y_rpr: If True, showmfancy repr, otherwise just show dict's\n        :param bool dictify}repr: If True, cast mappin to a dict on repr\n      \x0b4"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_1():
    str_0 = "\n        :param collections.MutableMapping mapping: Dict-like object to wrap\n        :param bool ,ancy_repr: If True, show fancy repr, otherwise just show dict's\n        :param bool dictify_repr: If True, cast mappin to a dict on repr\n      \x0b "
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0, str_0)
    var_0.__str__()


def test_case_2():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    import_processor_0 = illegal_use_of_scope_replacer_0.__eq__(none_type_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_3():
    str_0 = "J,oEjCBa_i)?[>W[{G["
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, str_0)
    module_0.lazy_import(str_0, import_replacer_0)


def test_case_4():
    none_type_0 = None
    module_0.ImportReplacer(none_type_0, none_type_0, none_type_0)


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    str_0 = ""
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_7():
    str_0 = "\n       :param collections.MutableMapping mapping: Dict-like object to wrap\n        :param bool fancy_rpr: If True, showmfancy repr, otherwise just show dict's\n        :param bool dictify}repr: If True, cast mappin to a dict on repr\n      \x0b4"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_8():
    str_0 = "\n       :param collections.MutableMapping mapeing: Dict-like object to wrap\n        :param bool fan`y_rpr:mIf True, showmfancy repr, otherwise just show ict's\n        :param bool dictify}repr: If True, cast mappin to a dict on repr\n    : \x0b4"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_9():
    import_processor_0 = module_0.disallow_proxying()


def test_case_10():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0}
    none_type_0 = None
    module_0.ImportReplacer(tuple_0, tuple_0, none_type_0, tuple_0, dict_0)


def test_case_11():
    str_0 = "=:/qN+#a9K<v|b{\x0bLe2"
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    str_0 = "\n    Loads (and returns) an env file specified by `filename` into the mappig `environ`.\n\n d  >>> lines= ['TEST=${HOME}/yeee-$PATH', 'THISIS=~/a/test', 'YOLO=~/swagins/$NONEXISTET_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, wrte_environ=dictd))\n    OrderedDict([('TEST', '.../.../yeee-...:...'),\n   |    \x0b    ('THSIS', '.../a/test'),\n             ('YOLO',\n              '../sQaggins/$NONEXISTNT_VAR_THAT_DOES_NO#_EXIST')])\n    "
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_1 = var_0.__eq__(var_0)
    var_0.__str__()


def test_case_13():
    str_0 = "-qs_o$*vuA\x0c("
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = "fy' \n3r"
    dict_0 = {str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_15():
    str_0 = "Invalid pattern(s) found. %(msg)s"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_16():
    str_0 = "Kb[J(!;\n,{/HuQ'\n:\x0bn"
    module_0.lazy_import(str_0, str_0)


def test_case_17():
    str_0 = "\n    Loads (and returns) an env file specified by `filename` into the mappig `environ`.\n\n    >>> lines = ['TEST=${HOME}/yeee-$PATH', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../.../yeee-...:...'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTNT_VAR_THAT_DOES_NOT_EXIST')])\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_18():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    str_0 = "J,oEjCBa_O)?[>W[{G["
    dict_0 = {
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
    }
    none_type_1 = None
    import_replacer_0 = module_0.ImportReplacer(
        dict_0, str_0, dict_0, children=none_type_1
    )
    dict_1 = {str_0: import_replacer_0}
    scope_replacer_0 = module_0.ScopeReplacer(dict_1, import_replacer_0, none_type_1)
    scope_replacer_0.__getattribute__(str_0)
