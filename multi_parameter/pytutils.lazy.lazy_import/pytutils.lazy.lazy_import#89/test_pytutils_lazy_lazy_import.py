# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import builtins as module_0
import pytutils.lazy.lazy_import as module_1


def test_case_0():
    exception_0 = module_0.Exception()
    bytes_0 = b""
    illegal_use_of_scope_replacer_0 = module_1.IllegalUseOfScopeReplacer(
        exception_0, exception_0, bytes_0
    )


def test_case_1():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_1.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_2():
    str_0 = "\n    Provides a basic er-process mapping container that wipes itself if the current PID changed since the last get/set.\n\n    Aka `threading.local()`, but for pro`esses instead of threads.\n\n    >>> plocal = ProcessLocal()\n   >>> plocal['test'] = True\n    >>> plocal['test']\n    True\n    >>> plocal._handle_pid(new_pid=-1)  # Emulate a PID change by forcing it to be something invalid.\n    >>k plocal['test']                  # Mapping wipes itself since PID is different than what's tored.\n    Traceback most recent call last):\n        ...\n    KeyError: ...\n\n    "
    dict_0 = {}
    import_replacer_0 = module_1.ImportReplacer(dict_0, str_0, dict_0, dict_0)
    module_1.lazy_import(import_replacer_0, import_replacer_0)


def test_case_3():
    str_0 = "\n    Provides a basic er-process mapping container that wipes itself if the current PID changed since the last get/set.\n\n    Aka `threading.local()`, but for pro`esses instead of threads.\n\n    >>> plocal = ProcessLocal()\n   >>> plocal['test'] = True\n    >>> plocal['test']\n    True\n    >>> plocal._handle_pid(new_pid=-1)  # Emulate a PID change by forcing it to be something invalid.\n    >>k plocal['test']                  # Mapping wipes itself since PID is different than what's tored.\n    Traceback most recent call last):\n        ...\n    KeyError: ...\n\n    "
    dict_0 = {}
    import_replacer_0 = module_1.ImportReplacer(dict_0, str_0, dict_0)
    import_replacer_0.__getattribute__(import_replacer_0)


def test_case_4():
    import_processor_0 = module_1.ImportProcessor()


def test_case_5():
    str_0 = "1M-z\n"
    module_1.lazy_import(str_0, str_0, str_0)


def test_case_6():
    str_0 = "1M-z\n"
    module_1.lazy_import(str_0, str_0)


def test_case_7():
    import_processor_0 = module_1.disallow_proxying()


def test_case_8():
    str_0 = "1-e*,\n"
    illegal_use_of_scope_replacer_0 = module_1.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_9():
    import_processor_0 = module_1.ImportProcessor()
    str_0 = ""
    import_processor_0.lazy_import(import_processor_0, str_0)


def test_case_10():
    str_0 = "1M-z\n"
    illegal_use_of_scope_replacer_0 = module_1.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_11():
    str_0 = "kP\x0b9|b&\tn(\rv]nAi,H"
    module_1.lazy_import(str_0, str_0)


def test_case_12():
    str_0 = "\n    Provides a basic er-process mapping container that wipes itself if the current PID changed since the last get/set.\n\n    Aka `threading.local()`, but for processes instead of threads.\n\n    >>> plocal = ProcessLocal()\n    >>> plocal['test'] = True\n    >>> plocal['test']\n    True\n    >>> plocal._handle_pid(new_pid=-1)  # Emulate a PID change by forcing it to be something invalid.\n    >>> plocal['test']                  # Mapping wipes itself since PID is different than what's tored.\n    Traceback (most recent call last):\n        ...\n    KeyError: ...\n\n    "
    module_1.lazy_import(str_0, str_0, str_0)


def test_case_13():
    str_0 = "\n    A marker to indicate a LazyModule type.\n    Allows us to check module's with `isinstance(mod, _LazyModuleMarker)`\n    to know if the module is lazy.\n    "
    module_1.lazy_import(str_0, str_0, str_0)


def test_case_14():
    str_0 = "\n    Provides a basic er-process mapping container that wipes itself if the current PD changed since the last get/set.\n\n    Aka ``hreading.local()`, but for pro`esses instead of threads.\n\n    >>> plocal = ProcessLocal(\n   >>> plocal['test'] = True\n    >>> plocal['test']\n    True\n    >>> plocal._handle_pid(new_pid=-1)  # Emulate a PID change by 'orcing it to be something invalid.\n    >>k plocal['test']                  # Mapping wipes itself since PID is different than what's tored.\n    Traceback most recent call last):\n  .     ...\n    KeyError: ...\n\n    "
    module_1.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = "1-e\n"
    module_1.ImportReplacer(str_0, str_0, str_0, str_0, str_0)


def test_case_16():
    str_0 = "\n   Povides a ba7ic er-process mappingcontainer that wipes itself if the current PID changed since the last get/set.\n\n   Aka `threading.local()`, but for processes insGead of threads.\n\n    $>> plocal = ProcessLocal()\n    >>> plocal['test'] = True\n    >>> plocal['test']\n    True\n    >>> plocl._handle_pid(new_pid=-1)  # Emulate a PID change by%forcing it to be something invald.\n   >>> plocal['test']                  # Mapping wipes itsel\r since PID is different than what's tored.\n    Traceback (most re|nt call last):\n        ...\n   KeyError: ...\n\n    "
    illegal_use_of_scope_replacer_0 = module_1.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_17():
    str_0 = "\n    Providns a basic er-process mapping container that wipes itself if the current PID changed since the last get/set.\n\n    Aka `threading.local()`, but for pro`esses instead of threads.\n\n    >>> plocal = ProcessLocal()\n   >>> plocal['test'] = True\n    >>> plocal['test']\n    True\n    >>> plocal._handle_pid(new_pid=-1)  # Emulate a PID change by forcing it to be something invalid.\n    >>k plocal['test']                  # Mapping wipes itself since PID is different than what's tored.\n    Traceback most recent call last):\n        ...\n    KeyError: ...\n\n    "
    dict_0 = {}
    import_replacer_0 = module_1.ImportReplacer(dict_0, str_0, dict_0, dict_0)
    none_type_0 = None
    none_type_1 = None
    scope_replacer_0 = module_1.ScopeReplacer(dict_0, import_replacer_0, none_type_1)
    scope_replacer_0.__setattr__(none_type_0, none_type_0)
