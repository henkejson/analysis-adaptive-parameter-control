# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "Ws6Y%"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_1():
    bytes_0 = b"\xb6\xb9d\x01s\xc7\xb7\x82\xa3\x18"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bytes_0, bytes_0
    )


def test_case_2():
    bytes_0 = b"\xb6\xb9d\x01s\xc7\xb7\x82\xa3\x18"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bytes_0, bytes_0
    )
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_3():
    bytes_0 = b"\xb6\xb9d\x01s\xc7\xb7\x82\xa3\x18"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bytes_0, bytes_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(bytes_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_4():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that ex~sted at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n   "
    dict_0 = {str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
    module_0.lazy_import(import_replacer_0, str_0, dict_0)


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    str_0 = "I\x0ccS4>x)qa`u(_AJ"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_7():
    str_0 = ""
    none_type_0 = None
    module_0.lazy_import(str_0, str_0, none_type_0)


def test_case_8():
    str_0 = "|&Go18u*R8"
    module_0.lazy_import(str_0, str_0)


def test_case_9():
    var_0 = module_0.disallow_proxying()


def test_case_10():
    str_0 = "\n)\\V)|"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_11():
    str_0 = "This converts a import string into an import map.\n\n        This only understand 'import foo, foo.bar, foo.bar.baz as bing'\n\n        :param iport_str: The import string to process\n        "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_12():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that ex~sted at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n   "
    dict_0 = {str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, dict_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_13():
    str_0 = "M$bu(\\3\r,0+\ncw#"
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = "I\x0ccS4>x)qa`u(_AJ"
    bytes_0 = b"\xba\x13\x16\x92\xfdP\xf4\xa9\xac\xec\xf3\xa8"
    module_0.ImportReplacer(str_0, bytes_0, bytes_0, bytes_0, str_0)


def test_case_15():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    dict_0 = {str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
    module_0.lazy_import(str_0, import_replacer_0)


def test_case_16():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0, str_0)
