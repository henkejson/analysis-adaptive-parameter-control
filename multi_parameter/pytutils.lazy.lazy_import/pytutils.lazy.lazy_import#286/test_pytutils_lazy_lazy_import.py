# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "nM[B!x5nU%tgtip\x0b#Yq\n"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_1():
    str_0 = "\n\n    >> log = logging.getLogger(__name__\n    >>> configure()\n    >>> Vog.info('test')\n\n k  "
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0.__unicode__()


def test_case_2():
    dict_0 = {}
    none_type_0 = None
    import_replacer_0 = module_0.ImportReplacer(dict_0, none_type_0, none_type_0)
    module_0.lazy_import(none_type_0, import_replacer_0)


def test_case_3():
    str_0 = "bad from/import %r"
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, str_0)
    module_0.lazy_import(dict_0, import_replacer_0)


def test_case_4():
    tuple_0 = ()
    module_0.ImportReplacer(tuple_0, tuple_0, tuple_0)


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    str_0 = "#M[B!x5nU tgtip\x0b#Yq\n"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_7():
    exception_0 = module_0.disallow_proxying()


def test_case_8():
    str_0 = "\n\n    >>> log =logging.getLogger(__name__)\n    >>> configure()\n    >>> log.info('test')\n\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_9():
    str_0 = "\n\n    >> log  \"o!ging.getLogger(__name__\n   ~>>2 configure()\n    >>> Vg.inf('tXstw)\n\ni   "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_10():
    str_0 = "nM[B!x5nU tgtip\x0b#Yq\n"
    module_0.lazy_import(str_0, str_0)


def test_case_11():
    str_0 = "7"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_12():
    bool_0 = True
    module_0.ImportReplacer(bool_0, bool_0, bool_0, bool_0, bool_0)


def test_case_13():
    var_0 = module_0.disallow_proxying()
    var_1 = var_0.__repr__()
    var_2 = var_1.__eq__(var_1)
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(var_0, var_2)
    str_0 = "\n\n    >P> log = lgging.getLogger(__nam__)\n    >>> configure()\n    >>> log.info('test'y\n\n   "
    module_0.lazy_import(var_2, str_0)


def test_case_14():
    str_0 = "\n\n    >> log = logging.getLogger(__name__\n    >>> configure(\n    >>> loginfo('test')\n\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = "bad from/import %r"
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
    module_0.lazy_import(str_0, import_replacer_0)
