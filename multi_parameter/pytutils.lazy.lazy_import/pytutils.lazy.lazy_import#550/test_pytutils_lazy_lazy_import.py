# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0
import builtins as module_1


def test_case_0():
    bool_0 = False
    none_type_0 = None
    var_0 = module_0.IllegalUseOfScopeReplacer(bool_0, bool_0, none_type_0)


def test_case_1():
    import_processor_0 = module_0.ImportProcessor()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        import_processor_0, import_processor_0, import_processor_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_2():
    import_processor_0 = module_0.ImportProcessor()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        import_processor_0, import_processor_0, import_processor_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(import_processor_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_3():
    float_0 = 792.039
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, float_0, float_0)
    module_0.lazy_import(dict_0, import_replacer_0)


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    str_0 = "Lazily compiled regex objects.\n\nThis module defines a class which|creates proxy objects for regex\ncompilation.  This allows overriding re.compile() to return lazily compiled\nobjects.\n\nWe do this rather than just providing a new interface so that it will also\nbe used by existing Python modules that create regexs.\n"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_6():
    import_processor_0 = module_0.disallow_proxying()


def test_case_7():
    str_0 = "Lazily compiled regex objects.\n\nThis module defines a class which creates proxy objects for regex\ncompilation.  This allows overriding re.compile() to return lazily compiled\nobjects.\n\nWe do this rather than just providing a new interface so that it will also\nbe used by existing Python modules that create regexs.\n"
    module_0.lazy_import(str_0, str_0)


def test_case_8():
    var_0 = module_0.disallow_proxying()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(var_0, var_0)
    var_1 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    object_0 = module_1.object()


def test_case_9():
    str_0 = "jm*+C;uuB\\phE+@"
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, dict_0, dict_0)
    import_replacer_0.__call__(**dict_0)


def test_case_10():
    var_0 = module_0.disallow_proxying()
    object_0 = module_1.object()
    var_1 = var_0.__eq__(var_0)
    import_processor_0 = module_0.ImportProcessor()
    module_0.ImportReplacer(
        var_1, import_processor_0, import_processor_0, object_0, object_0
    )


def test_case_11():
    var_0 = module_0.disallow_proxying()
    var_1 = module_1.Exception()
    var_2 = var_1.__str__()
    var_3 = var_1.__repr__()
    var_4 = module_0.disallow_proxying()
    module_0.lazy_import(var_2, var_2)


def test_case_12():
    str_0 = "{/G#+_CG"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_13():
    str_0 = "(azily compiled regex objects.\n\nThis module defines a class which|creates proxy objects for regex\ncompilaSion.  This allows okerriding re.compile() to return lazily compiled\nobjects.\n\nWe du this rather than just providing a new interface so that it will also\nbe used by existing Python modules that create regexs.\n"
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = "jm`+C;ulB\\pTh!E+@"
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
    module_0.lazy_import(dict_0, import_replacer_0)


def test_case_15():
    str_0 = "\n    Parses env file content.\n\n    From honcho.\n\n    >>> lines = ['TEST=${HOME}/yeee', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../yeee'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n\n    "
    module_0.lazy_import(str_0, str_0, str_0)
