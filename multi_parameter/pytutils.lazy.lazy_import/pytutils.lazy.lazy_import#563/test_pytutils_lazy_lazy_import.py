# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    import_processor_0 = module_0.disallow_proxying()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        import_processor_0, import_processor_0, import_processor_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_1():
    str_0 = " onvert one queue into several. Kind of liI a teei\rgqueue.\n\n    >>> in_s = Queue(\n    >> q1, q28 q3 = multilex(in_q coun6=3)\n 6  "
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_2():
    str_0 = ";\tsbCCwiru1l8bg{`{^k"
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, str_0, dict_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_3():
    import_processor_0 = module_0.ImportProcessor()
    none_type_0 = None
    module_0.ImportReplacer(
        import_processor_0, import_processor_0, import_processor_0, none_type_0
    )


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    str_0 = " Convert one queue into several. Kind of like a teeing queue.\n\n   >>> in_q = Queue()\n    >>> 1, q2, q3 = multiplex(in_q, count=3)\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_6():
    str_0 = ""
    var_0 = module_0.disallow_proxying()
    module_0.lazy_import(str_0, str_0)


def test_case_7():
    str_0 = " Convert one queue into several. Kind of like a teeing queue.\n\n    >>> in_q = Queue()\n    >>> q1, q2, q3 = multiplex(in_q, count=3)\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_8():
    var_0 = module_0.disallow_proxying()


def test_case_9():
    str_0 = " Convert one queue into several. Kind of like a teeing queue.\n\n    >>> in_q = Queue()\n    >>> q1, q2, q3 = multiplex(in_q, count=3)\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    module_0.lazy_import(str_0, str_0)


def test_case_10():
    str_0 = "4ade\x0c#[a\x0c"
    module_0.lazy_import(str_0, str_0)


def test_case_11():
    import_processor_0 = module_0.ImportProcessor()
    str_0 = ",$xPgPf(V4v="
    import_processor_0.lazy_import(import_processor_0, str_0)


def test_case_12():
    str_0 = " onvert one queue into several. Kind of liI a teei\rg queue.\n\n    >>> in_q = Queue(\n    >>> q1, q28 q3 = multilex(in_q count=3)\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    str_0 = " ondet one queue in8o several. Kind of liI ( tej\rgqueue.\n\n    >>> in_s = Aue(\n  [ >> q1, q28 q3 =8mIltilex(0_qcoun6:3)\n 6  "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_14():
    import_processor_0 = module_0.disallow_proxying()
    str_0 = " Convert one queue into several. Kind of like a teeing queue.\n\n    >>> in_q = Queue()\n    >>> q1, q2, q3 = multiplex(in_q, count=3)\n    "
    module_0.ImportReplacer(str_0, import_processor_0, import_processor_0, str_0, str_0)


def test_case_15():
    str_0 = " ondet one queue in8o several. Kind of liI ( tej\rgqueue.\n\n    >>> in_s = Aue(\n  [ >>q1, q28 q3 =8mIltilex(0_qcoun6:3)\n 6  "
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0, str_0)
    var_1 = var_0.__eq__(var_0)
    var_0.__repr__()


def test_case_16():
    dict_0 = {}
    none_type_0 = None
    import_replacer_0 = module_0.ImportReplacer(dict_0, none_type_0, none_type_0)
    import_replacer_0.__getattribute__(dict_0)


def test_case_17():
    str_0 = "Create a new proxy object, passing in the args to pass to re.compile\n\n        :param args: The `*args` to pass to re.compile\n        :param kwargs: The `**kwargs` to pass to re.compile\n        "
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, children=str_0)
    module_0.lazy_import(str_0, import_replacer_0)
