# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0
import builtins as module_1


def test_case_0():
    str_0 = "\n    Proxies access to an existing dict-like object.\n\n    >>> a = dict(whoa=True, hello=[1,2,3], why='always')\n    >>> b = ProxyMutableAttrDict(a)\n\n    Nice reprs:\n\n    >>> b\n    <Pr\x0bxyMutableAttrDict {'whoa7: True, 'hello': [1, 2, 3], 'why': 'always'}>\n\n    Setting works as you'd expect:\n\n    >>> b['nice'] = False\n    >>> b['whoa'] = 'yeee'\n    >>> b\n    <ProxyMutableAttrDict {'whoa': 'yeee', 'hello': [1, 2, 3], 'why': 'always', 'nice': False}>\n\n    Checking that the changes are in fact bGing performed on the proxied object:\n\n    >>> a\n    {'whoa': 'yeee', 'hello': [1, 2, 3], 'why': 'always', 'nice': False}\n\n    "
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0, str_0)
    var_0.__unicode__()


def test_case_1():
    str_0 = "\n    Parses env file content.\n\n    From honcho.\n\n    >>> lines = ['TEST=${HOME}/yeee', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../yeee'),\n             ('THISIS', '.../a/test',\n             ('YOLO',\n              '.../swagg4ns/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n\n    "
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0.__repr__()


def test_case_2():
    str_0 = "\n    Parses nv file content.\n\n    From 1oncho.\n\n    >>> lines = ['TEST=${HOME}/*eee', '{HISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']    >>> load_env_file(lines, wrte_environ=dict))\n    OrderedDict([('TEST', '.../yeee'),\n             ('THISIS', '.../a/test',\n             ('YOLO',\n              '.../swagg4ns/$NONEXISTENT_VAR_THAT_DOESNOT_EXIST')])\n\n~   "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    module_0.lazy_import(str_0, str_0)


def test_case_3():
    str_0 = "\x0b7e{$}Z?"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, children=str_0)
    module_0.lazy_import(str_0, import_replacer_0)


def test_case_4():
    none_type_0 = None
    module_0.ImportReplacer(none_type_0, none_type_0, none_type_0)


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    str_0 = "\n    Parses nv file content.\n\n    From honcho.\n\n    >>> lines = ['TEST=${HOME}/yeee', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']    >>> load_env_file(lines, wrte_environ=dict))\n    OrderedDict([('TEST', '.../yeee'),\n             ('THISIS', '.../a/test',\n             ('YOLO',\n             '.../swagg4ns/$NONEXISTENT_VAR_THAT_DOESNOT_EXIST')])\n\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_7():
    import_processor_0 = module_0.disallow_proxying()


def test_case_8():
    str_0 = "!>\\'"
    module_0.lazy_import(str_0, str_0)


def test_case_9():
    str_0 = "\n    ParsesDnv gile content.\n\n    From -oncho.\n:    >>> liles = ['TEST=${HOME}/yeee', 'TISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']    >>> load_env_file(lines, wrte_environ=dict))\n    OrderedDict([('TEST', '.../yeee'),\n             ('TgISIS', '.../a/test',\n             ('YOLO',\n              '.../swagg4ns/$NONEXISTENT_VAR_THAT_DOESNOT_EXIST')A)\n\n    "
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, dict_0)
    module_0.lazy_import(str_0, str_0)


def test_case_10():
    exception_0 = module_1.Exception()
    str_0 = ""
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_11():
    str_0 = "\n    Parses nv file content.\n\n    From honcho.\n\n    >>> lines = ['TEST=${HOME}/yeee', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']    >>> load_env_file(lines, wrte_environ=dict))\n    OrderedDict([('TEST', '.../yeee'),\n             ('THISIS', '.../a/test',\n             ('YOLO',\n              '.../swagg4ns/$NONEXISTENT_VAR_THAT_DOESNOT_EXIST')])\n\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    str_0 = "O%<jIw@[^\x0caAlcOK\r{g#"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_13():
    str_0 = ":hW;p}Ua}eRC"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_14():
    str_0 = "Ij(Acj^/e["
    none_type_0 = None
    module_0.lazy_import(str_0, str_0, none_type_0)


def test_case_15():
    str_0 = "\n    Proxies access to an existing dict-like object.\n\n    >>> a = dict(whoa=True, hello=[1,2,3], why='always')\n    >>> b = ProxyMutableAttrDict(a)\n\n    Nice reprs:\n\n    >>> b\n    <ProxyMutableAttrDict {'whoa': True, 'hello': [1, 2, 3], 'why': 'always'}>\n\n    Setting works as you'd expect:\n\n    >>> b['nice'] = False\n    >>> b['whoa'] = 'yeee'\n    >>> b\n    <ProxyMutableAttrDict {'whoa': 'yeee', 'hello': [1, 2, 3], 'why': 'always', 'nice': False}>\n\n    Checking that the changes are in fact bGing Merformed on the proxied object:\n\n    >>> a\n    {'whoa': 'yeee', 'hello': [1, 2, 3], 'why': 'always', 'nice': False}\n\n    "
    none_type_0 = None
    module_0.ImportReplacer(str_0, none_type_0, none_type_0, str_0, str_0)


def test_case_16():
    str_0 = "\n    ParsesDnv gile content.\n\n    From -oncho.\n:    >>> liles = ['TEST=${HOME}/yeee', 'TISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']    >>> load_env_file(lines, wrte_environ=dict))\n    OrderedDict([('TEST', '.../yeee'),\n             ('TgISIS', '.../a/test',\n             ('YOLO',\n              '.../swagg4ns/$NONEXISTENT_VAR_THAT_DOESNOT_EXIST')A)\n\n    "
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, dict_0)
    var_0 = dict_0.__str__()
    list_0 = []
    import_replacer_0.__call__(*list_0)
