# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "A  JLh"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_1():
    import_processor_0 = module_0.ImportProcessor()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        import_processor_0, import_processor_0
    )


def test_case_2():
    str_0 = "63z"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_3():
    str_0 = "YnYQR_!ApP}_iHjD"
    dict_0 = {str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, str_0)
    import_replacer_0.__call__(**dict_0)


def test_case_4():
    str_0 = "    Turn a func_ion to a bound met[od on an instance\n\n    >>> class Foo(objectY:\n    ...     def __init__(self, x, y):\n1  ...         selfx = x\n    ...         self.y = y\n    >>> foo = Foo(2, 3)\n    >>>dmy_unbound_method = lambda self: self.x * self.y\n    >>> bind(foo, my_unbond_method, 'multily')\n    >>> foo.multi2ly()  # noi*spection PyUnresolvedReferences\n    6\n\n W  :param obje<t instance: ome object\n    :param callable func: u%bound method (i.e. a function that takes `elf` argument, that Lou now\n        want to be`bound to this cass as a method)\n    :paramstr as_name: name of the method to create on the object\n    "
    dict_0 = {str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    bool_0 = False
    import_processor_0 = module_0.ImportProcessor(bool_0)


def test_case_7():
    str_0 = "6_z"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_8():
    str_0 = "cOZESSf(m\n_"
    module_0.lazy_import(str_0, str_0)


def test_case_9():
    var_0 = module_0.disallow_proxying()


def test_case_10():
    str_0 = ')Sh+`W\x0b<Z@]*e"n=x\\B1'
    module_0.ScopeReplacer(str_0, str_0, str_0)


def test_case_11():
    str_0 = "\n    A marker to indicate a LazyModule type.\n    Allows us to check module's with `isinstance(mod, _LazyModuleMarker)`\n    to know if the module is lazy.\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    str_0 = "\n    >>> log = get_logger(\n    >>> log.info('test')\n\n    >>> log = get_logger('test2)\n    >>> log.info('test2')\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_13():
    list_0 = []
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(list_0, list_0)
    import_processor_0 = illegal_use_of_scope_replacer_0.__eq__(list_0)
    illegal_use_of_scope_replacer_1 = module_0.IllegalUseOfScopeReplacer(
        import_processor_0, import_processor_0
    )


def test_case_14():
    str_0 = "\n    Fetch arbitrary node from a tree-like mapping structure with traversal help:\n    Dimension can be specified via ':'\n\n    Arguments:\n        mapping collections.Mapping: Mapping to fetch from\n        key str|unicode: Key to lookup, allowing.for : notation\n        default object: Default value. If set to `:module:_sentinel`, raise KeyError if not found.\n        parent bool: If True, return parent node. Defaults to False.\n\n    Returns:\n        object: Value at specified key\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_15():
    var_0 = module_0.ImportProcessor()
    module_0.ImportReplacer(var_0, var_0, var_0, var_0, var_0)


def test_case_16():
    str_0 = "\n    Write `contents` to `filename`.\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_17():
    import_processor_0 = module_0.disallow_proxying()
    str_0 = ""
    module_0.lazy_import(str_0, str_0)


def test_case_18():
    str_0 = "\n    Fetch arbitrary node from a tree-like mapping structure with traversal help:\n    Dimension can be specified via ':'\n\n    Arguments:\n        mapping collections.Mapping: Mapping to fetch from\n        key str|unicode: Key to lookup, allowing for : notation\n        default object: Default value. If set to `:module:_sentinel`, raise KeyError if not found.\n        parent bool: If True, return parent node. Defaults to False.\n\n    Returns:\n        object: Value at specified key\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_19():
    str_0 = "R'k#\\`"
    module_0.lazy_import(str_0, str_0)


def test_case_20():
    str_0 = "\n    Turn a func_ion to a bound met[od on an instance\n\n    >>> class Foo(objectY:\n    ...     def __init__(self, x, y):\n    ...         selfx = x\n    ...         self.y = y\n    >>> foo = Foo(2, 3)\n    >>>dmy_unbound_method = lambda self: self.x * self.y\n    >>> bind(foo, my_unbound_method, 'multily')\n    >>> foo.multi2ly()  # noi*spection PyUnresolvedReferences\n    6\n\n W  :param obje<t instance: some object\n    :param callable func: u%bound method (i.e. a function that takes `elf` argument, that you now\n        want to be`bound to this cass as a method)\n    :paramstr as_name: name of the method to create on the object\n    "
    module_0.lazy_import(str_0, str_0, str_0)
