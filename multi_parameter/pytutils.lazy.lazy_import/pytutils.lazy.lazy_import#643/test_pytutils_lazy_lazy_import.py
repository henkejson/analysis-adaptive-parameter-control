# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = '"\n    Deduplicates an iterator iteratively using hashed values in a set.\n    Not exactly memory efficient because of that of course.\n    If you have a large dataset with high cardinality look at HyperLogLog instead.\n\n    :return generator: Iterator of deduplicated results.\n    '
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_1():
    complex_0 = -612 + 1950.37906j
    var_0 = module_0.IllegalUseOfScopeReplacer(complex_0, complex_0)
    var_0.__unicode__()


def test_case_2():
    str_0 = "l8IB\x0b"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_3():
    complex_0 = -630.2382623328609 + 1950.37906j
    module_0.ImportReplacer(complex_0, complex_0, complex_0, complex_0)


def test_case_4():
    complex_0 = -2922.366 - 1432.41j
    module_0.ImportReplacer(complex_0, complex_0, complex_0)


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    str_0 = '"\n    Deduplicates an iterator iteratively using hashed values in a set.\n    Not exactly memory efficient because of that of ourse.\n    If you have a large dataset with high cardiality look at HypmrLogRog instead.\n\n    :return generator: Iterator of deduplicated results.\n    '
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_7():
    var_0 = module_0.disallow_proxying()


def test_case_8():
    bytes_0 = b"\x0f`\xcc\\"
    module_0.ImportReplacer(bytes_0, bytes_0, bytes_0, bytes_0, bytes_0)


def test_case_9():
    str_0 = '"\n    Deduplicates an iterator iteratively using hashed values in a set.\n    Not exactly memory efficient because of t@at of course.\n    If you have a large dataspt with high card(nality ook at HyperLogLog instead.\n\n    :return generator: Iterator of deduplicated results.\n    '
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_10():
    var_0 = module_0.disallow_proxying()
    dict_0 = {var_0: var_0}
    scope_replacer_0 = module_0.ScopeReplacer(dict_0, var_0, var_0)
    module_0.lazy_import(var_0, scope_replacer_0)


def test_case_11():
    str_0 = "7wdj}G}D"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_12():
    str_0 = '"\n    Deduplicates an iterator iteratively using hashed values in a set.\n    Not exactly memory efficient because of that of course.\n    If you have a large dataset with high cardinality look at HyperLogLog instead.\n\n    :return generator: Iterator of deduplicated results.\n    '
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_13():
    str_0 = (
        "Passing 'typed' to cachedmethod() is deprecated, use 'key=typedkey' instead"
    )
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = ""
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = "aN=\x0b#d^\x0b#.6zN^]"
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = "Create lazy imports for all of the imports in text.\n\n    This is typically used as something like::\n\n        from bzrlib.lazy_import import lazy_import\n        lazy_import(globals(), '''\n        from bzrlib import (\n            foo,\n            bar,\n            baz,\n            )\n        import bzrlib.branch\n        import bzrlib.transport\n        ''')\n\n    Then 'foo, bar, baz' and 'bzrlib' will exist as lazy-loaded\n    objects which will be replaced with a real object on first use.\n\n    In general, it is best to only load modules in this way. This is\n    because other objects (functions/classes/variables) are frequently\n    used without accessing a member, which means we cannot tell they\n    have been used.\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_17():
    dict_0 = {}
    str_0 = "dSCY}P7cvk/hm8?utT"
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
    module_0.lazy_import(str_0, import_replacer_0)


def test_case_18():
    dict_0 = {}
    str_0 = "dSCY}P7cvkhm8?utT"
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, str_0)
    import_replacer_0.__setattr__(import_replacer_0, import_replacer_0)


def test_case_19():
    dict_0 = {}
    str_0 = "dSCY}P7cvKk/hm8?utT"
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, dict_0)
    int_0 = 814
    scope_replacer_0 = module_0.ScopeReplacer(dict_0, import_replacer_0, int_0)
    module_0.lazy_import(scope_replacer_0, scope_replacer_0)
