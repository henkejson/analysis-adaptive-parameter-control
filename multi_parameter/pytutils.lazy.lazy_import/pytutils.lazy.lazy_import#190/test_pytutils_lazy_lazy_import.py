# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import builtins as module_0
import pytutils.lazy.lazy_import as module_1


def test_case_0():
    object_0 = module_0.object()
    illegal_use_of_scope_replacer_0 = module_1.IllegalUseOfScopeReplacer(
        object_0, object_0, object_0
    )
    illegal_use_of_scope_replacer_0.__str__()


def test_case_1():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_1.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    illegal_use_of_scope_replacer_0.__str__()


def test_case_2():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_1.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(none_type_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_3():
    str_0 = ""
    dict_0 = {str_0: str_0, str_0: str_0}
    import_replacer_0 = module_1.ImportReplacer(dict_0, str_0, dict_0, children=str_0)
    import_replacer_0.__getattribute__(import_replacer_0)


def test_case_4():
    import_processor_0 = module_1.ImportProcessor()


def test_case_5():
    str_0 = "T"
    module_1.lazy_import(str_0, str_0, str_0)


def test_case_6():
    var_0 = module_1.disallow_proxying()


def test_case_7():
    bytes_0 = b"\xc8\xa8-\xd20\xaf\x1bA7\x9fBt"
    illegal_use_of_scope_replacer_0 = module_1.IllegalUseOfScopeReplacer(
        bytes_0, bytes_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_8():
    str_0 = ""
    dict_0 = {str_0: str_0, str_0: str_0}
    import_replacer_0 = module_1.ImportReplacer(dict_0, str_0, str_0, str_0)
    module_1.lazy_import(import_replacer_0, import_replacer_0)


def test_case_9():
    complex_0 = -1954 - 913j
    module_1.ImportReplacer(complex_0, complex_0, complex_0, complex_0, complex_0)


def test_case_10():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_1.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_11():
    str_0 = "#"
    module_1.lazy_import(str_0, str_0, str_0)


def test_case_12():
    str_0 = "yf`(MKgbeH/+(]}\t]b"
    module_1.lazy_import(str_0, str_0)


def test_case_13():
    str_0 = (
        "Passing 'typed' to cachedmethod() is deprecated, use 'key=typedkey' instead"
    )
    module_1.lazy_import(str_0, str_0, str_0)


def test_case_14():
    str_0 = "\n    Turn a function to a bound method on an instance\n\n    >>> class Foo(object):\n    ...     def __init__(self, x, y):\n    ...         self.x = x\n    ...         self.y = y\n    >>> foo = Foo(2, 3)\n    >>> my_unbound_method = lambda self: self.x * self.y\n    >>> bind(foo, my_unbound_method, 'multiply')\n    >>> foo.multiply()  # noinspection PyUnresolvedReferences\n    6\n\n    :param object instance: some object\n    :param callable func: unbound method (i.e. a function that takes `self` argument, that you now\n        want to be bound to this class as a method)\n    :param str as_name: name of the method to create on the object\n    "
    module_1.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = "\n    Turn a function to a bound method on an instanc\"\n\n    >>> class Foo(object):\n    ...     def __init__(self, x, y):\n    ...         self.x = x\n    ...         self.y = y\n    >>> foo = Foo(2, 3\n    >>> my_unbound_method = lambda self: self.x * self.y\n    >>> bind(foo, my_unbound_method, 'multiply')\n    >>> foo.multily()  # noinspection PyUnresolvedReferences\n    6\n\n   :param object instance: some object\n    :param callable func: unbound method (i.e. a function that takes `self` argument, that you now\n        want to be bound to this class as a method)\n    :aram str as<name: name of the method to create on theobject\n    "
    module_1.lazy_import(str_0, str_0, str_0)


def test_case_16():
    str_0 = '0zPipV!DQ/"*'
    dict_0 = {str_0: str_0}
    import_replacer_0 = module_1.ImportReplacer(dict_0, str_0, str_0, str_0)
    scope_replacer_0 = module_1.ScopeReplacer(
        dict_0, import_replacer_0, import_replacer_0
    )
    module_1.lazy_import(dict_0, scope_replacer_0)
