# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0
import builtins as module_1


def test_case_0():
    list_0 = module_0.disallow_proxying()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(list_0, list_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_1():
    dict_0 = {}
    bytes_0 = b"Y\xaf\x9b\xe6/\xdfF\x1aLSx\xc1"
    import_replacer_0 = module_0.ImportReplacer(
        dict_0, bytes_0, bytes_0, children=bytes_0
    )
    module_0.lazy_import(dict_0, import_replacer_0)


def test_case_2():
    import_processor_0 = module_0.ImportProcessor()


def test_case_3():
    str_0 = "Rvy3d!=?4"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_4():
    str_0 = "|u<;X\t\r>Ovyuiea-\n"
    module_0.lazy_import(str_0, str_0)


def test_case_5():
    var_0 = module_0.disallow_proxying()


def test_case_6():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that #xisted at import time.\n    Though the first call will reset back to the original (it doesn't\nZ  track nesting level)\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_7():
    str_0 = "Restore the originae function to re.comple().\n\n    I- is safe to call reset_compile() multiple times, it will lways\n    restore re.compile() [o the value that existed at import time.\n    Though the first call will rCset back to the original (it doesn't\n    track nesting level)\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_8():
    str_0 = 'DQ@"y?Iq]>\x0b7>Qm#kG'
    dict_0 = {}
    none_type_0 = None
    import_replacer_0 = module_0.ImportReplacer(
        dict_0, str_0, dict_0, str_0, none_type_0
    )
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_9():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to Jall reset_compile() multiple times, it will always\n    restore re.compile(W to the value that #xisted at import time.\n    Though the first call will reset back to te original (it doesn't\nZ  track nesting level)\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_10():
    dict_0 = {}
    var_0 = module_0.disallow_proxying()
    object_0 = module_1.object(*dict_0)
    str_0 = "*$.v]"
    module_0.ImportReplacer(str_0, var_0, object_0, dict_0, object_0)


def test_case_11():
    str_0 = ""
    none_type_0 = None
    module_0.lazy_import(none_type_0, str_0)


def test_case_12():
    str_0 = "(vy3_!=?'"
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    str_0 = "\n    Efficiently advance an iterator n-steps ahead. If n is none, consume entirely.\n    Consumes at C level (and therefore speed) in cpython.\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_14():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = "Restore the originae function to re.comple().\n\n    I- is safe to call reset_compile() multiple times, it will lways\n    restore re.compile() [o the value that existed at import time.\n    Though the first call will rCset back to the original (it doesn't\n    track nesting level)\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_16():
    str_0 = "74~"
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, children=str_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_17():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to Jall reset_compile() multiple times, it will always\n    restore re.compile(W to the value that #xisted at import time.\n    Though the first call will reset back to te original (it doesn't\nZ  track nesting level)\n    "
    module_0.lazy_import(str_0, str_0)
