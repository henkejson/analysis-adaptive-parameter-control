# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "*aq\tkR3'H8Z"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0, str_0)
    var_0.__unicode__()


def test_case_1():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0, none_type_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_2():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0, none_type_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(none_type_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_3():
    str_0 = "/T:o_a(UZG4F"
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, str_0)
    module_0.lazy_import(str_0, import_replacer_0)


def test_case_4():
    none_type_0 = None
    module_0.ImportReplacer(none_type_0, none_type_0, none_type_0, none_type_0)


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    str_0 = "zZLlmW"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_7():
    var_0 = module_0.disallow_proxying()


def test_case_8():
    bytes_0 = b"\xbf)S\x0b\xf0\x14\x80\xa59@\xb1\r\x7f\xabdx\xae"
    import_processor_0 = module_0.ImportProcessor(bytes_0)
    none_type_0 = None
    module_0.ScopeReplacer(none_type_0, none_type_0, none_type_0)


def test_case_9():
    str_0 = " Convert one queue into several. ind of like a teeing queue.\n\n    >>> in_q = Queue()\n    >>> q1, q2, q3 = multiplex(in_q, count=3)\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_10():
    str_0 = " Convert one queue into several. Kind of like a teeing queue.\n\n    >>> in_q = Queue()\n    >>> q1, q2, q3 = multiplex(in_q, count=3)\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_11():
    str_0 = "~#K\x0cwvx@\rMEb\neCl~<"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_12():
    import_processor_0 = module_0.ImportProcessor()
    str_0 = '"\n    Deduplicates an iterator iteratively using hashed values in a set.\n    Not exactly memory efficient because of that of course.\n    If you have a large dataset with high cardinality look at HyperLogLog instead.\n\n    :return generator: Iterator of deduplicated results.\n    '
    module_0.ImportReplacer(
        str_0,
        import_processor_0,
        import_processor_0,
        import_processor_0,
        import_processor_0,
    )


def test_case_13():
    str_0 = ""
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = "("
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = " Conve}t one ueue inPo everal. Kind of like a teeing queue.\n\n    >>>linq = Queue(\n    >>> q1, q2, q3= multiplex(in_q, count=3)\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = ".@=m\x0cD\rbRGN^D@ "
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, children=str_0)
    import_replacer_0.__setattr__(dict_0, dict_0)


def test_case_17():
    str_0 = ' Conl}O one ueue inPoev(rl. Kd of ie"a teeing qeue.\n    D>>liq@yLue(\n x  >>1,&y2,;q3 ultplex(An_q, count=3)\n    '
    module_0.lazy_import(str_0, str_0)


def test_case_18():
    str_0 = "/:\x0bo_(UG3F"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, str_0)
    var_0 = module_0.ScopeReplacer(dict_0, import_replacer_0, str_0)
    var_0.__repr__()


def test_case_19():
    str_0 = "pprint"
    dict_0 = {
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
    }
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, str_0)
    module_0.lazy_import(dict_0, import_replacer_0)


def test_case_20():
    str_0 = "pprint"
    dict_0 = {
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
    }
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, str_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0, import_replacer_0)
