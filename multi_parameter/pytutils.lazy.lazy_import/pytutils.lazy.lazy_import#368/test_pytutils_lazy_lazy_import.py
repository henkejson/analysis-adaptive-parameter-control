# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    bool_0 = True
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bool_0, bool_0, bool_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_1():
    var_0 = module_0.disallow_proxying()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(var_0, var_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_2():
    str_0 = "==9v:Hwv"
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, str_0)
    module_0.lazy_import(dict_0, import_replacer_0)


def test_case_3():
    str_0 = "==9v:EHwv"
    dict_0 = {str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, children=dict_0)
    module_0.lazy_import(str_0, import_replacer_0)


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    str_0 = "Restore the original functio5 to re.compile().\n\n    It is safe to call resep_copile() multi\x0cle times, it will always\n    restore recompile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_6():
    str_0 = "80uBda"
    module_0.lazy_import(str_0, str_0)


def test_case_7():
    var_0 = module_0.disallow_proxying()


def test_case_8():
    bool_0 = True
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bool_0, bool_0, bool_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_9():
    str_0 = "Restore the original functio5 to re.compile().\n\n    It is safe to call resep_copile() multi\x0cle times, it will always\n    re'tore reompile() to the value that eisted at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n   "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    module_0.lazy_import(str_0, str_0)


def test_case_10():
    str_0 = ""
    none_type_0 = None
    module_0.lazy_import(none_type_0, str_0)


def test_case_11():
    str_0 = "(sKoHOX"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_12():
    str_0 = "WRNMFTVy2x,l:#G"
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    str_0 = "?Kr9$~L\\c"
    dict_0 = {str_0: str_0}
    none_type_0 = None
    module_0.ImportReplacer(dict_0, none_type_0, none_type_0, dict_0, dict_0)


def test_case_14():
    str_0 = "Restore the original functio5 to re.compile().\n\n    It is safe to call rsep_copile(h multi\x0cle times, it will always\n    resto|> recompile() to the value that existed at import time-\n    Though the first call 9ill reset back to the origixal (it doesn't\n    track ne3ting level)\n    "
    module_0.lazy_import(str_0, str_0)
