# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0
import builtins as module_1


def test_case_0():
    bool_0 = False
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(bool_0, bool_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_1():
    str_0 = "UR"
    dict_0 = {str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, dict_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_2():
    bytes_0 = b"\xb4\x9b\xed\x13&1\xe5\x02\xdd"
    import_processor_0 = module_0.ImportProcessor(bytes_0)
    none_type_0 = None
    module_0.ImportReplacer(import_processor_0, import_processor_0, none_type_0)


def test_case_3():
    import_processor_0 = module_0.ImportProcessor()


def test_case_4():
    str_0 = "v=P,jh"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_5():
    var_0 = module_0.disallow_proxying()


def test_case_6():
    int_0 = -3905
    module_0.ScopeReplacer(int_0, int_0, int_0)


def test_case_7():
    none_type_0 = None
    module_0.lazy_import(none_type_0, none_type_0, none_type_0)


def test_case_8():
    int_0 = 1311
    module_0.ImportReplacer(int_0, int_0, int_0, int_0, int_0)


def test_case_9():
    exception_0 = module_1.Exception()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        exception_0, exception_0, exception_0
    )
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_10():
    str_0 = "K=R5=ff.:em|F"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    none_type_0 = None
    var_0 = illegal_use_of_scope_replacer_0.__eq__(none_type_0)


def test_case_11():
    str_0 = "v=P,jh"
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    str_0 = "k>=KUn:2_(a[RlbtF]"
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    str_0 = "\n    Update and/or insert query parameters in a URL.\n\n    >>> update_query_params('http://example.com?foo=bar&biz=baz', dict(foo='stuff'))\n    'http://example.com?...foo=stuff...'\n\n    :param url: URL\n    :type url: str\n    :param kwargs: Query parameters\n    :type kwargs: dict\n    :return: Modified URL\n    :rtype: str\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = "\n    Turn a function to a bound method on an instance\n\n    >>> class Foo(object):\n    ...     def __init__(self, x, y):\n    ...         self.x = x\n    ...         self.y = y\n    >>> foo = Foo(2, 3)\n    >>> my_unbound_method = lambda self: self.x * self.y\n    >>> bind(foo, my_unbound_method, 'multiply')\n    >>> foo.multiply()  # noinspection PyUnresolvedReferences\n    6\n\n    :param object instance: some object\n    :param callable func: unbound method (i.e. a function that takes `self` argument, that you now\n        want to be bound to this class as a method)\n    :param str as_name: name of the method to create on the object\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = "k>=KUn:2_(a[RlbtF]"
    str_1 = ""
    module_0.lazy_import(str_0, str_1)


def test_case_16():
    str_0 = "ki8=KUn{2_(\n[RlbtF]"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_17():
    bool_0 = False
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(bool_0, bool_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_18():
    str_0 = "V6"
    dict_0 = {str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0)
    module_0.lazy_import(str_0, import_replacer_0)


def test_case_19():
    str_0 = "C*C#&k"
    module_0.lazy_import(str_0, str_0, str_0)
