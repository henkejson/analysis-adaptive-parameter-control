# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    bytes_0 = b"\xf7\xcf\x8dHm\x878\xf1Y\x13\xb3h\xc2\xcbf\xc9"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bytes_0, bytes_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_1():
    str_0 = "\n    Ensure string is decoded (eg unicode); convert using specified parameters if we have to.\n\n    :param str|bytes|bytesarray|memoryview s: string/bytes\n    :param str encoding: Decode using this encoding\n    :param str errors: How to handle errors\n   :return bytes|bytesarray|memoryview: Decoded'string as bytes\n\n    :return: Encoded string\n    :rtype: bytes\n   "
    dict_0 = {str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, str_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_2():
    int_0 = -1800
    module_0.ImportReplacer(int_0, int_0, int_0)


def test_case_3():
    import_processor_0 = module_0.ImportProcessor()


def test_case_4():
    int_0 = -1800
    module_0.lazy_import(int_0, int_0, int_0)


def test_case_5():
    var_0 = module_0.disallow_proxying()


def test_case_6():
    int_0 = -1800
    module_0.lazy_import(int_0, int_0)


def test_case_7():
    int_0 = -1775
    var_0 = module_0.IllegalUseOfScopeReplacer(int_0, int_0, int_0)


def test_case_8():
    bytes_0 = b"\xf7\xcf\x8dHm\x878\xf1Y\x13\xb3h\xc2\xcbf\xc9"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bytes_0, bytes_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(bytes_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_9():
    str_0 = 'oW\x0cR"y'
    module_0.lazy_import(str_0, str_0)


def test_case_10():
    str_0 = "\n    Ensure string is decoded (eg unicode); convert using specified parameters if we have to.\n\n    :param str|bytes|bytesarray|memoryview s: string/bytes\n    :param str encoding: Decode using this encoding\n    :param str errors: How to handle errors\n   :return bytes|bytesarray|memoryview: Decoded string as bytes\n\n    :return: Encoded string\n    :rtype: bytes\n   "
    module_0.lazy_import(str_0, str_0)


def test_case_11():
    str_0 = "\n    Turn a function to a bound method on an instance\n\n    >>> class Foo(object):\n    ...     def __init__(self, x, y):\n    ...         self.x = x\n    ...         self.y = y\n    >>> foo = Foo(2, 3)\n    >>> my_unbound_method = lambda self: self.x * self.y\n    >>> bind(foo, my_unbound_method, 'multiply')\n    >>> foo.multiply()  # noinspection PyUnresolvedReferences\n    6\n\n    :param object instance: some object\n    :param callable func: unbound method (i.e. a function that takes `self` argument, that you now\n        want to be bound to this class as a method)\n    :param str as_name: name of the method to create on the object\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_12():
    bytes_0 = b"\xf7\xcf\x8dHm\x878\xf1Y\x13\xb3h\xc2\xcbf\xc9"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bytes_0, bytes_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_13():
    str_0 = ""
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = "k\n'q(I@\nw"
    var_0 = module_0.disallow_proxying()
    module_0.lazy_import(var_0, str_0)


def test_case_15():
    str_0 = "\n    Parses env file content.\n\n    From honcho.\n\n    >>> lines = ['TEST=${HOME}/yeee', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../yeee'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = "\n    Turn a function to a bound method on an instance\n\n    >>> class Foo(object):\n    ...     def __init__(self, x, y:\n    ...         self.x = x\n    ...         self.y = y\n    >>> foo = Foo(2, 3)\n    >>> my_unbound_method = lambda self: self.x * self.y\n    >>> bind(foo, my_unbound_method, 'multiply')\n    >>> foo.multiply()  # noinspection PyUnresolvedReferences\n    6\n\n    :param object instance: some object\n    :param callable func: unbound method (i.e. a function that takes `self` argument, that you now\n        want to be bound to this class as a method)\n    :param str as_name: name of the method to create on the object\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_17():
    int_0 = 1880
    dict_0 = {int_0: int_0}
    set_0 = set()
    str_0 = "k\n'q(I@)\nws"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, dict_0, set_0
    )
    str_1 = "cuvt|\x0c[.(!V6*Q"
    module_0.ImportReplacer(
        str_1, illegal_use_of_scope_replacer_0, set_0, str_0, dict_0
    )


def test_case_18():
    str_0 = "\n    Ensure string is decoded (eg unicode); convert using specified parameters if we have to.\n\n    :param str|bytes|bytesarray|memoryview s: string/bytes\n    :param str encoding: Decode using this encoding\n    :param str errors: How to handle errors\n   :return bytes|bytesarray|memoryview: Decoded'string as bytes\n\n    :return: Encoded string\n    :rtype: bytes\n   "
    dict_0 = {str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0)
    module_0.lazy_import(str_0, import_replacer_0, dict_0)
