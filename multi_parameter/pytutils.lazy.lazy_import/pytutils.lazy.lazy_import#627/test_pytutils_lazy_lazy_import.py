# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0
import builtins as module_1


def test_case_0():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    illegal_use_of_scope_replacer_0.__str__()


def test_case_1():
    bool_0 = True
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(bool_0)


def test_case_2():
    str_0 = "cg/orlog.Col/rdFrmat$ur"
    dict_0 = {str_0: str_0, str_0: str_0}
    var_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, str_0)
    var_0.__unicode__()


def test_case_3():
    none_type_0 = None
    module_0.ImportReplacer(none_type_0, none_type_0, none_type_0, children=none_type_0)


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    base_exception_0 = module_1.BaseException()
    module_0.lazy_import(base_exception_0, base_exception_0, base_exception_0)


def test_case_6():
    str_0 = "6K"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_7():
    var_0 = module_0.disallow_proxying()


def test_case_8():
    str_0 = "(1FHVY\t)H"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_9():
    str_0 = "\n6K"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_10():
    str_0 = "!,#IBb-<T[F3y*\r"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0, str_0)
    var_0.__str__()


def test_case_11():
    var_0 = module_0.disallow_proxying()
    bytes_0 = b"\x93\xed~~J\x11\xd7\x17cGw\x06\x87t\xb0"
    var_1 = var_0.__eq__(bytes_0)
    str_0 = ""
    var_2 = var_1.__repr__()
    module_0.lazy_import(var_2, str_0)


def test_case_12():
    var_0 = module_0.disallow_proxying()
    dict_0 = {var_0: var_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, var_0, var_0)
    import_replacer_0.__getattribute__(var_0)


def test_case_13():
    var_0 = module_0.disallow_proxying()
    var_1 = var_0.__str__()
    bytes_0 = b"\x93\xed~~J\x11\xd7\x17$\x10c\xb9w\x06\x87t\xb0"
    module_0.ImportReplacer(var_0, bytes_0, bytes_0, var_1, var_1)


def test_case_14():
    str_0 = "\r(P\rHVY\t)sva"
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = "\r(P\rHV9\t<sva"
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = "(rB+&-\t)k"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_17():
    str_0 = "k)7S@#T\n<NiIICmn?yq"
    module_0.lazy_import(str_0, str_0)


def test_case_18():
    str_0 = "ZlKZF\x0cMQ>(9!\nMA\x0bggE^"
    module_0.lazy_import(str_0, str_0)


def test_case_19():
    str_0 = "\n    Proxies mutable acces to anothr mapping and allows for attribute-style acces.\n\n    >>> a = dict(whoa=True, hello=[1,2,3], why='always')\n    >>> b = ProxyMutableAttrDict(a)\n\n    Nice reprs:\n\n    >>> b\n    <ProxyMutableAttrDic {'whoa': True, 'hello': [1, 2, 3], 'why': 'always'}>\n\n   Setting works as yo'd expect:\n\n    >>C b['nice'] = False\n    >>> b['whoa'] = 'yeee'\n    >>> b\n    <ProxyMutableAttrDict {'whoa': 'yeee', hello': [1, 2, 3], 'why': 'always', 'nice': False}>\n\n    Checking that the changes ar in fact 5eing performed on the proxied object:\n\n    >>> a\n    {'whoa': 'yeee', 'hello': [1, 2, 3], 'why': 'always', 'nice': False}\n\n    Attrib@te style access:\n\n    >>> b.whoa\n    'yee'\n    >>> b.state= 'new'\n    >>> b\n    <ProxyMutableAttrDict {'whoa': 'yeee', 'hello': [1, 2, 3]( 'why': 'alwys', 'nice': False, 'state': 'new'}>\n\n    Recursion is handled:\n\n    >>> b.subdict = dict(test=True)\n    >>> b.subdict.test\n    True\n    >>> b\n    <ProxyLutableAttrDict {'whoa': 'yeee', 'hello': [1, 2, 3], 'why': 'always', 'nice': False, 'state'\n 'new',\n    'subdict': <ProxyMutaleAttrDic {'test': True}>}>\n\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_20():
    str_0 = "colorlog.ColoredFormatter"
    dict_0 = {str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
    import_replacer_0.__getattribute__(str_0)
