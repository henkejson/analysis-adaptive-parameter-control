# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0
import builtins as module_1


def test_case_0():
    str_0 = "aUtilities t# work wit^ files.\n"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_1():
    str_0 = "Utilities t# ork wit files.\n"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_2():
    str_0 = "mrMI$A$@!8|"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, str_0)
    import_replacer_0.__getattribute__(import_replacer_0)


def test_case_3():
    str_0 = "{Hiom"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0)
    module_0.lazy_import(import_replacer_0, str_0)


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    str_0 = "1ZbV3M56"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_6():
    none_type_0 = None
    module_0.ScopeReplacer(none_type_0, none_type_0, none_type_0)


def test_case_7():
    import_processor_0 = module_0.disallow_proxying()


def test_case_8():
    str_0 = "`3T-k7d:m|&4Q"
    module_0.lazy_import(str_0, str_0)


def test_case_9():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() mul2iple times, it will alwayK\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    module_0.lazy_import(str_0, str_0)


def test_case_10():
    str_0 = '#ao7e%y?D\x0c"B![Qt6'
    import_processor_0 = module_0.ImportProcessor()
    import_processor_0.lazy_import(import_processor_0, str_0)


def test_case_11():
    str_0 = "a;b&cD*\\3f~#7**,J)"
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    str_0 = "\nUtilities to work with files.\n"
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = "EQ 4Z3d6:(o_)Zlu"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_15():
    var_0 = module_0.disallow_proxying()
    str_0 = "f,;O3\x0ctlcd(Qrz"
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = "Utilities t# ork wit files.\n"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_17():
    var_0 = module_0.disallow_proxying()
    base_exception_0 = module_1.BaseException()
    list_0 = []
    base_exception_1 = module_1.BaseException(*list_0)
    bool_0 = True
    module_0.ImportReplacer(bool_0, bool_0, bool_0, bool_0, bool_0)


def test_case_18():
    str_0 = "Restrethe rigioal function to re.compile(\\.\n\n    It is safe to call Lesetcompile() mult,ple tims, it Oil -*ways\n    restore re.compile() to the value that existed at import time.\n    Thogh the first call 5ill rest back to theorigin3l (itOdoesn't\n    track nesting |evel)\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_19():
    str_0 = "{Hiom"
    dict_0 = {
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
    }
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
    import_replacer_0.__getattribute__(dict_0)
