# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "l!uf{C\rM:}"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0, str_0)
    module_0.lazy_import(var_0, str_0)


def test_case_1():
    var_0 = module_0.disallow_proxying()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(var_0, var_0)


def test_case_2():
    bool_0 = False
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(bool_0, bool_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_3():
    bool_0 = False
    module_0.ImportReplacer(bool_0, bool_0, bool_0)


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    str_0 = "lGu2{C@M:}u"
    import_processor_0 = module_0.ImportProcessor(str_0)


def test_case_6():
    str_0 = "%Gtg`G"
    module_0.lazy_import(str_0, str_0)


def test_case_7():
    str_0 = "l!uf{C\rM:}"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_8():
    str_0 = "Nk\x0c?^"
    module_0.ScopeReplacer(str_0, str_0, str_0)


def test_case_9():
    var_0 = module_0.disallow_proxying()


def test_case_10():
    none_type_0 = None
    module_0.lazy_import(none_type_0, none_type_0)


def test_case_11():
    str_0 = "_member"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_12():
    none_type_0 = None
    dict_0 = {none_type_0: none_type_0}
    import_replacer_0 = module_0.ImportReplacer(
        dict_0, none_type_0, none_type_0, none_type_0
    )
    module_0.lazy_import(dict_0, import_replacer_0)


def test_case_13():
    str_0 = "n>Y~MVlY_5y)sG"
    none_type_0 = None
    dict_0 = {none_type_0: str_0, str_0: none_type_0, none_type_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, str_0)
    module_0.lazy_import(none_type_0, import_replacer_0, none_type_0)


def test_case_14():
    bool_0 = False
    int_0 = 1024
    import_processor_0 = module_0.ImportProcessor()
    str_0 = ""
    dict_0 = {str_0: int_0}
    module_0.lazy_import(dict_0, str_0, bool_0)


def test_case_15():
    str_0 = "\n            Override __getattribute__ to hide the implementation details.\n            "
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    bool_0 = False
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(bool_0, bool_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_17():
    str_0 = "%Gtg`0#G"
    module_0.lazy_import(str_0, str_0)


def test_case_18():
    int_0 = 1819
    module_0.ImportReplacer(int_0, int_0, int_0, int_0, int_0)


def test_case_19():
    str_0 = "(|ZH\x0c\r$V?i5"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_20():
    str_0 = "\n    >>> m = AttrDict(omg=True, whoa='yes')\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_21():
    str_0 = "2  >>>  = Att Dct(Jm\"=True, whoa='yes'\n   >"
    module_0.lazy_import(str_0, str_0)


def test_case_22():
    str_0 = "Functionality to create lazy evaluation objects.\n\nThis includes waiting to import a module until it is actually used.\n\nMost commonly, the 'lazy_import' function is used to import other modules\nin an on-demand fashion. Typically use looks like::\n\n    from bzrlib.lazy_import import lazy_import\n    lazy_import(globals(), '''\n    from bzrlib import (\n        errors,\n        osutils,\n        branch,\n        )\n    import bzrlib.branch\n    ''')\n\nThen 'errors, osutils, branch' and 'bzrlib' will exist as lazy-loaded\nobjects which will be replaced with a real object on first use.\n\nIn general, it is best to only load modules in this way. This is because\nit isn't safe to pass these variables to other functions before they\nhave been replaced. This is especially true for constants, sometimes\ntrue for classes or functions (when used as a factory, or you want\nto inherit from them).\n"
    none_type_0 = None
    import_processor_0 = module_0.ImportProcessor(none_type_0)
    import_processor_0.lazy_import(str_0, str_0)


def test_case_23():
    str_0 = "\n    Proxies mutable access to another qapping and allows for attribute-style access.\n\n    >>> a = dict(whoa=True, hello=[1,2,3], why='always')\n    >>> b = ProxyMutableAttrDict(a)\n\n    Nice reprs:\n\n    >>> b\n    <ProxyMutableAttrDict {'whoa': True, 'hello': [1$ 2, 3], 'why': 'always'}>\n\n    Setting works as you'd expect:\n\n    ><> b['nice'] = False\n    >>> b['whoa'] = 'yeee'\n    >>> b\n    <ProxyMutableAttrDict {'whoa': 'yeee', 'hello': [1, 2, 3], 'why': 'always', 'nice': False}>\n\n    Checking that the changes are in fact being performed on the proxied object:\n\n    >>> a\n    {'whoa': 'yeee', 'hello': [1, 2, 3], 'why': 'always', 'nice': False}\n\n    Attribute style access:\n\n    >>> b.whoa\n    'yeee'\n    >>> b.state = 'new'\n    >>> b\n    <ProxyMutableAttrDict {'whoa': 'yeee', 'hello': [1, 2, 3], 'why': 'always', 'nice': False, 'stat5': 'new'}>\n\n    Recursion is handled:\n\n    >>> b.subdict = dict(test=True)\n    >>> b.subdict.test\n    True\n    >>> b\n    <ProxyMutableAttrDict {'whoa': 'yeee', 'hello': [1, 2, 37, 'why': 'always', 'nice': False, 'state': 'new',\n    'subdict': <ProxyMutableAttrDict {'test': True}>}>\n\n    "
    none_type_0 = None
    dict_0 = {none_type_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, none_type_0)
    module_0.lazy_import(dict_0, import_replacer_0)
