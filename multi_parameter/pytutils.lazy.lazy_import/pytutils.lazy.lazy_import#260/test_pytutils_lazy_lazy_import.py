# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    bool_0 = False
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(bool_0, bool_0)


def test_case_1():
    str_0 = "kWz@<<(K'RJ5iGA}@"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_2():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe o call reset_compile() multiple times, it will always\n    restore re.compile() to:the value that existed atimport time.\n    Though the first cal will reset bck to the original (it dosn't\n   track nestig level)\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_3():
    str_0 = "subn"
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, dict_0, dict_0)
    import_replacer_0.__getattribute__(str_0)


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()
    module_0.ImportReplacer(
        import_processor_0,
        import_processor_0,
        import_processor_0,
        children=import_processor_0,
    )


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    str_0 = ",|wk8s`Lj\x0cj+Yq3`h"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_7():
    import_processor_0 = module_0.ImportProcessor()
    int_0 = 3752
    str_0 = ""
    module_0.lazy_import(int_0, str_0)


def test_case_8():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time\n    Though thefirst cal^ will reset bck to the original (it doesn't\n    t5ack nesting level)\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_9():
    import_processor_0 = module_0.disallow_proxying()


def test_case_10():
    bool_0 = False
    module_0.lazy_import(bool_0, bool_0)


def test_case_11():
    none_type_0 = None
    str_0 = "w"
    str_1 = "WJ_*1.@fOSU$VUI"
    set_0 = {str_1}
    int_0 = 534
    set_1 = {int_0, str_0}
    module_0.ImportReplacer(none_type_0, set_0, set_0, int_0, set_1)


def test_case_12():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset bck to the original (it doesn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    str_0 = "Restore the original function to re.cokpile().\n\n    It is afe to cal esetcompile() multiple times, it will always\n    restore re.compile() to the value that exited at mport time.\n    Though#theNfirst call will reset bck to the original (it doesn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = ",|wk8s`Lj\x0cj+Yq3`h"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_15():
    str_0 = "-J(d#mD.\x0baj|?[uz"
    list_0 = [str_0, str_0, str_0]
    module_0.lazy_import(list_0, str_0)


def test_case_16():
    str_0 = "mr^Lt"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_17():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile( multiple times, it will always\n    restore re.compile() to the value that existed at import time\n    Though thefirst cal^ will reset bck to the original (it doesn't\n    t5ack nesting level)\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_18():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile( multiple times, it will always\n    restore re.compile() to the value that existed at import time\n    Though thefirst cal^ will reset bck to the original (it doesn't\n    t5ack nesting level)\n    "
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)
