# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "A.F~!qO!\x0b_mGm\\{n"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_1():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_2():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0, none_type_0
    )
    illegal_use_of_scope_replacer_1 = illegal_use_of_scope_replacer_0.__eq__(
        none_type_0
    )
    var_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, illegal_use_of_scope_replacer_1, illegal_use_of_scope_replacer_1
    )


def test_case_3():
    var_0 = module_0.disallow_proxying()
    module_0.ImportReplacer(var_0, var_0, var_0)


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    str_0 = "lI(RyeUF4Bq)&&"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_6():
    import_processor_0 = module_0.disallow_proxying()


def test_case_7():
    str_0 = "W`q)L"
    module_0.lazy_import(str_0, str_0)


def test_case_8():
    str_0 = "b:jY\r)&lz9g\nX"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, dict_0)
    module_0.lazy_import(dict_0, import_replacer_0, dict_0)


def test_case_9():
    str_0 = "M0Q\n"
    module_0.lazy_import(str_0, str_0)


def test_case_10():
    str_0 = ""
    module_0.lazy_import(str_0, str_0)


def test_case_11():
    str_0 = 'Le25"&ZS#'
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    str_0 = "9.\n-`({}Ik}z2%)dxk*\n"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_13():
    str_0 = "I(Rye4Bq&&"
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    int_0 = -774
    str_0 = "l%I(Ry2UMF4Bkq)&&"
    var_0 = str_0.__repr__()
    module_0.ImportReplacer(int_0, str_0, str_0, var_0, var_0)


def test_case_15():
    str_0 = "x(R\neBJ&&"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_16():
    str_0 = "\n    Turn a function to a bound method on an instance\n\n    >>> class Foo(object):\n    ...     def __init__(self, x, y):\n    ...         self.x = x\n    ...         self.y = y\n    >>> foo = Foo(2, 3)\n    >>> my_unbound_method = lambda self: self.x * self.y\n    >>> bind(foo, my_unbound_method, 'multiply')\n    >>> foo.multiply()  # noinspection PyUnresolvedReferences\n    6\n\n    :param object instance: some object\n    :param callable func: unbound method (i.e. a function that takes `self` argument, that you now\n        want to be bound to this class as a method)\n    :param str as_name: name of the method to create on the object\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_17():
    str_0 = "Dn:Q"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0, dict_0)


def test_case_18():
    str_0 = "x$ax#CA\rBs9\x0bPC"
    dict_0 = {str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, dict_0)
    var_0 = module_0.ScopeReplacer(dict_0, import_replacer_0, str_0)
    var_0.__eq__(var_0)
