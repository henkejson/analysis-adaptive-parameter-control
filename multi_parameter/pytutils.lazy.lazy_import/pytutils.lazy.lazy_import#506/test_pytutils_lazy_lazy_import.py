# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    bool_0 = True
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bool_0, bool_0, bool_0
    )
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_1():
    int_0 = -1754
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(int_0, int_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_2():
    str_0 = "+cv};SZn%\\][u8"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_3():
    dict_0 = {}
    none_type_0 = None
    import_replacer_0 = module_0.ImportReplacer(dict_0, none_type_0, dict_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    str_0 = "eX5/vZ5t*{TD}cp,|\t"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_6():
    var_0 = module_0.disallow_proxying()


def test_case_7():
    str_0 = "\n    >>> log = get_logger()\n    >>> log.info('test')\n\n    >>> log = get_logger('test2')\n    >>> log.info('test2')\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_8():
    none_type_0 = None
    module_0.lazy_import(none_type_0, none_type_0, none_type_0)


def test_case_9():
    str_0 = "W"
    module_0.lazy_import(str_0, str_0)


def test_case_10():
    dict_0 = {}
    none_type_0 = None
    import_replacer_0 = module_0.ImportReplacer(
        dict_0, none_type_0, none_type_0, dict_0
    )
    import_replacer_0.__setattr__(import_replacer_0, import_replacer_0)


def test_case_11():
    str_0 = ""
    import_processor_0 = module_0.ImportProcessor()
    var_0 = module_0.disallow_proxying()
    var_1 = var_0.__str__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__str__()
    module_0.lazy_import(var_3, str_0, import_processor_0)


def test_case_12():
    str_0 = "\n    >>> log = get_logger()\n    >>> log.info('test')\n\n    >>> log = get_logger('test2')\n    >>> log.info('test2')\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    str_0 = "\n    >>> log = get_logger()\n    >>> log.info('test')\n\n    >>> log = get_logger('test2')\n    >>> log.info('test2')\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_14():
    str_0 = "\n    Loads (and returns) an env file specified by `filename` into the mapping `environ`.\n\n    >>> lines = ['TEST=${HOME}/yeee-$PATH', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../.../yeee-...:...'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_15():
    str_0 = "(BJen}\x0cpsw\n0#R"
    import_processor_0 = module_0.disallow_proxying()
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_16():
    str_0 = "q%s(\nzs)"
    module_0.ImportReplacer(str_0, str_0, str_0, str_0, str_0)


def test_case_17():
    str_0 = "gj&C*,\r#AhggH0'"
    module_0.lazy_import(str_0, str_0)


def test_case_18():
    dict_0 = {}
    str_0 = "%s"
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_19():
    dict_0 = {}
    str_0 = "\n            Override the __mro__ to fool `isinstance`.\n            "
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, str_0, dict_0)
    import_replacer_0.__getattribute__(str_0)
