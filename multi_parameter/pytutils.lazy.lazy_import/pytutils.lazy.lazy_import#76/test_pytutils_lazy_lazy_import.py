# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    var_0 = module_0.disallow_proxying()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(var_0, var_0)
    module_0.IllegalUseOfScopeReplacer(
        illegal_use_of_scope_replacer_0, var_0, illegal_use_of_scope_replacer_0
    )


def test_case_1():
    var_0 = module_0.disallow_proxying()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(var_0, var_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_2():
    complex_0 = 329.1 - 3284.6j
    none_type_0 = None
    module_0.ImportReplacer(complex_0, none_type_0, none_type_0, children=none_type_0)


def test_case_3():
    import_processor_0 = module_0.ImportProcessor()


def test_case_4():
    str_0 = "ScopeReplacer object %(name)r was used incorectly: %(msg)s(extra)s"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_5():
    str_0 = "hcop9Relacer _bect %(name)r _ s used incorectly: %(ms)s(xra)I"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0.__repr__()


def test_case_6():
    import_processor_0 = module_0.disallow_proxying()


def test_case_7():
    import_processor_0 = module_0.ImportProcessor()
    import_processor_0.lazy_import(import_processor_0, import_processor_0)


def test_case_8():
    str_0 = "ormat each string value of dictionary using values contained within\n    itself, keeping track of dependencies as required.\n\n    Also converts any formatted values according to conversions dict.\n\n    Example:\n\n    >>> from pprint import pprint as pp\n    >>> c = dict(wat='wat{omg}', omg=True)\n    >>> pp(format_dict_recursively(c))\n    {'omg': True, 'wat': 'watTrue'}\n\n    Dealing with missing (unresolvable) keys in format strings:\n\n    >>> from pprint import pprint as pp\n    >>> c = dict(wat='wat{omg}', omg=True, fail='no{whale}')\n    >>> format_dict_recursively(c)\n    Traceback (most recent call last):\n        ...\n    ValueError: Impossible to format dict due to missing elements: {'fail': ['whale']}\n    >>> pp(format_dic_recursively(c, raise_unresolvable=Fals))\n    {'fail': 'no{whale}', 'omg': True, 'wat': 'watTrue'}\n    >>> pp(format_dict_recursively(c, raise_unresolvable=False, strip_unresolvable=True))\n    {'omg': True, 'wat': 'watTrue'}\n\n    :param dict mapping: Dict.\n    :param bool raise_unresolvable: Upon True, raises ValueError upon an unresolvable key.\n    :param bool strip_unresolvable: Upon True, strips unresolvable keys.\n    :param dict conversions: Mapping of {from: to}.\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_9():
    str_0 = "Yt2=ZA<nn"
    module_0.lazy_import(str_0, str_0)


def test_case_10():
    str_0 = "\n    Pretty formats with coloring.\n\n    Works in iPython, but not bpython as it does not write directly to term\n    and decodes it instead.\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_11():
    str_0 = "C25q@b\r*\tpz#;vC"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_12():
    str_0 = "ScopeReplacer object %(name)r was used incorectly: %(msg)s(extra)s"
    module_0.ImportReplacer(str_0, str_0, str_0, str_0)


def test_case_13():
    str_0 = "p(E\t\ni8@EX"
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = "\n    Parses env file content.\n\n    From honcho.\n\n    >>> lines = ['TEST=${HOME}/yeee', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../yeee'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_15():
    str_0 = "ScopeReplacer object %(name)r was used incorectly: %(msg)s(extra)s"
    str_1 = "1$IRT"
    module_0.ImportReplacer(str_0, str_0, str_0, str_0, str_1)


def test_case_16():
    dict_0 = {}
    none_type_0 = None
    scope_replacer_0 = module_0.ScopeReplacer(dict_0, none_type_0, none_type_0)
    module_0.lazy_import(none_type_0, scope_replacer_0, none_type_0)


def test_case_17():
    str_0 = ""
    none_type_0 = None
    module_0.lazy_import(str_0, str_0, none_type_0)


def test_case_18():
    str_0 = "Create lazy imports for all of the imports in text.\n\n    This is typically used as something like::\n\n        from bzrlib.lazy_import import lazy_import\n        lazy_import(globals(), '''\n        from bzrlib import (\n            foo,\n            bar,\n            baz,\n            )\n        import bzrlib.branch\n        import bzrlib.transport\n        ''')\n\n    Then 'foo, bar, baz' and 'bzrlib' will exist as lazy-loaded\n    objects which will be replaced with a real object on first use.\n\n    In general, it is best to only load modules in this way. This is\n    because other objects (functions/classes/variables) are frequently\n    used without accessing a member, which means we cannot tell they\n    have been used.\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    module_0.lazy_import(illegal_use_of_scope_replacer_0, str_0)


def test_case_19():
    str_0 = "hcop9Relac\\\n_bect %(name)? _  used incorctly: %(ms)s~e\tr*)I"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()
