# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "(debug shell)"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__str__()


def test_case_1():
    str_0 = "U{"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0.__unicode__()


def test_case_2():
    str_0 = "Create a temporary object in the specified scope.\n        OncG used, a real object will be placed in the scope.\n\n        :param scope: The scope the object should appear in\n        :param factory: A callable that will create the real object.\n            It will be passed (self, scope, name)\n        :param name: The variable name in the given scope.\n        "
    dict_0 = {str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, children=str_0)
    module_0.lazy_import(str_0, import_replacer_0)


def test_case_3():
    import_processor_0 = module_0.ImportProcessor()


def test_case_4():
    str_0 = "UR\\"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_5():
    str_0 = "UR\\"
    module_0.lazy_import(str_0, str_0)


def test_case_6():
    var_0 = module_0.disallow_proxying()


def test_case_7():
    str_0 = "5"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_8():
    str_0 = "Create a temporary object in the specified scope.\n        OncG used, a real object will be placed in the scope.\n\n        :param scope: The scope the object should appear in\n        :param factory: A callable that will create the real object.\n            It will be passed (self, scope, name)\n        :param name: The variable name in the given scope.\n        "
    dict_0 = {str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, str_0)
    module_0.lazy_import(dict_0, import_replacer_0)


def test_case_9():
    str_0 = "vsalpern fo!d.${(vsg)s"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_10():
    str_0 = ""
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.disallow_proxying()
    module_0.lazy_import(none_type_0, str_0)


def test_case_11():
    str_0 = "Create a temporary object in the specified scope.\n        Once used, a real object will be placed in the scope.\n\n        :param scope: The scope the object should appear in\n        :param factory: A callable that will create the real object.\n            It will be passed (self, scope, name)\n        :param name: The variable name in the given scope.\n        "
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    str_0 = "U{"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_13():
    str_0 = "@]{x(#q;|7t\r&wTq"
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = "LLiyFl^44%#"
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = "pf"
    module_0.ImportReplacer(str_0, str_0, str_0, str_0, str_0)


def test_case_16():
    str_0 = "Create a temporary object in the specified scope.\n        OncG used, a real object will be placed in the scope.\n\n        :param scope: The scope the object should appear in\n        :param factory: A c(llable that will create the real object.\n            It will be passed (self, scope, name)\n        :param name: The variable name in the given scope.\n        "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_17():
    str_0 = "Create a temporary object in the specified scope.\n        Once used, a real object will be plac(d in the scope.\n\n        :param scope: The scope the object suould appear in\n        :param factory: A callable that will create the real object.\n            It will be passed (self, scop=, name)\n        :param name: The variable name in the given scope.\n        "
    module_0.lazy_import(str_0, str_0)
