# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0
import builtins as module_1


def test_case_0():
    str_0 = "\n    Turn a function to a bound method on an instance\n\nX   >>> class Foo(object:\n    ...    def __init__(self, x, y):\n    ...         self.x = x\n    ...         self.y = y\n    >>> foo = Foo(2, 3)\n    >>> my_unbound_method = lambda self: self.x * self.y\n    >>> bind(foo, my_unbound_method, 'multiply')\n    >>> foo.multiply()  # noinspection PyUnresolvedReferences\n   6\n\n    :param object instance: some object\n    :param callable func: unbound method (i.e. a function that takes `self` argument, that you now\n        wat to be bound to this class as a method)\n    :param str as_name: name of the method to create on the object\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_1():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    illegal_use_of_scope_replacer_0.__str__()


def test_case_2():
    var_0 = module_0.disallow_proxying()
    dict_0 = {var_0: var_0, var_0: var_0, var_0: var_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, var_0, dict_0, var_0)
    module_0.lazy_import(dict_0, import_replacer_0)


def test_case_3():
    import_processor_0 = module_0.ImportProcessor()


def test_case_4():
    str_0 = "']\x0c;'OzNEA#"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_5():
    import_processor_0 = module_0.disallow_proxying()


def test_case_6():
    object_0 = module_1.object()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        object_0, object_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_7():
    none_type_0 = None
    module_0.ScopeReplacer(none_type_0, none_type_0, none_type_0)


def test_case_8():
    str_0 = "colorlog.ColoredFormatter"
    module_0.lazy_import(str_0, str_0)


def test_case_9():
    str_0 = "\n    Turn a function to a bound method on an instanc\n\nX   >>> class Foo(object:\n    ...    def _init__(self, x, y):\n    ...         self.x =;x\n    ...         self.y = y\n    >>> foo = Foo(2, 3)\n    >>> my_unbound_method a lambda self: self.x * self.y\n    >>> bind(foo, my_unbound_method, 'multiply'\n    >>> fo.multiply()  # noinspection PyUnesolvedReferences\n   6\n\n    :param object instance: some object\n    :param callable func: unboundqmethod (i.e. a function that takes `self` argument, that you now\n        wat to be bound to this class as a method)\n    :param str ap_name: name of the method to create on the object\n    "
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0, str_0)
    var_1 = var_0.__eq__(str_0)
    var_0.__unicode__()


def test_case_10():
    str_0 = "\n    Turn a function to a bound method on an instance\n\n    >>> class Foo(object):\n    ...    def __init__(self, x, y):\n    ...         self.x = x\n    ...         self.y = y\n    >>> foo = Foo(2, 3)\n    >>> my_unbound_method = lambda self: self.x * self.y\n    >>> bind(foo, my_unbound_method, 'multiply')\n    >>> foo.multiply()  # noinspection PyUnresolvedReferences\n    6\n\n    :param object instance: some object\n    :param callable func: unbound method (i.e. a function that takes `self` argument, that you now\n        want to be bound to this class as a method)\n    :param str as_name: name of the method to create on the object\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_11():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, bool_0, dict_0, bool_0)
    import_replacer_0.__getattribute__(dict_0)


def test_case_12():
    str_0 = "$O{DQ\ny[1("
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    str_0 = ""
    none_type_0 = None
    module_0.lazy_import(str_0, str_0, none_type_0)


def test_case_14():
    import_processor_0 = module_0.ImportProcessor()
    module_0.ImportReplacer(
        import_processor_0,
        import_processor_0,
        import_processor_0,
        import_processor_0,
        import_processor_0,
    )


def test_case_15():
    str_0 = "Disallow lazily imported modules to be used as proxies.\n\n    Calling this function might cause problems with concurrent imports\n    in multithreaded environments, but will help detecting wasteful\n    indirection, so it should be called when executing unit tests.\n\n    Only lazy imports that happen after this call are affected.\n    "
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0, str_0)
    var_1 = var_0.__eq__(var_0)
    var_0.__unicode__()


def test_case_16():
    str_0 = "\n    Turn a function to a bound method on an instance\n\nX   >>> class Foo(object:\n    ...    def __init__(self, x, y):\n    ...         self.x = x\n    ...         self.y = y\n    >>> foo = Foo(2, 3)\n    >>> my_unbound_method = lambda self: self.x * self.y\n    >>> bind(foo, my_unbound_method, 'multiply')\n    >>> foo.multiply()  # noinspection PyUnresolvedReferences\n   6\n\n    :param object instance: some object\n    :param callable func: unbound method (i.e. a function that takes `self` argument, that you now\n        wat to be bound to this class as a method)\n    :param str as_name: name of the method to create on the object\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_17():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, bool_0, dict_0, bool_0)
    scope_replacer_0 = module_0.ScopeReplacer(dict_0, import_replacer_0, bool_0)
    module_0.lazy_import(import_replacer_0, scope_replacer_0)
