# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0
import builtins as module_1


def test_case_0():
    bool_0 = False
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(bool_0, bool_0)


def test_case_1():
    bool_0 = False
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(bool_0, bool_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_2():
    str_0 = ""
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_3():
    none_type_0 = None
    dict_0 = {none_type_0: none_type_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, none_type_0, dict_0, dict_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0, none_type_0)


def test_case_4():
    exception_0 = module_1.Exception()
    dict_0 = {exception_0: exception_0, exception_0: exception_0}
    import_replacer_0 = module_0.ImportReplacer(
        dict_0, exception_0, exception_0, children=dict_0
    )
    import_replacer_0.__call__()


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    str_0 = "VqD]\tu\\:\x0c"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_7():
    str_0 = "VqD]\tu\\:\x0c"
    module_0.lazy_import(str_0, str_0)


def test_case_8():
    var_0 = module_0.disallow_proxying()


def test_case_9():
    bool_0 = False
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(bool_0, bool_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_10():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_11():
    str_0 = 'Azs"P{(2jlBvZR'
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    str_0 = '9L"|'
    list_0 = [str_0, str_0, str_0]
    none_type_0 = None
    int_0 = 13
    module_0.ImportReplacer(list_0, str_0, none_type_0, list_0, int_0)


def test_case_13():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple imes, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call wMll reset back to the original (it doesn'\n    track nesting level)\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_14():
    bool_0 = False
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(bool_0, bool_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_15():
    str_0 = "Restore #he original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn'V\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = ""
    str_1 = "JPM"
    module_0.lazy_import(str_1, str_0)


def test_case_17():
    str_0 = "_!0C\x0b55(`G\n.DK8"
    module_0.lazy_import(str_0, str_0)


def test_case_18():
    dict_0 = {}
    none_type_0 = None
    dict_1 = {none_type_0: none_type_0}
    import_replacer_0 = module_0.ImportReplacer(dict_1, none_type_0, dict_0, dict_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0, none_type_0)


def test_case_19():
    var_0 = module_0.disallow_proxying()
    var_1 = var_0.__repr__()
    dict_0 = {var_1: var_1}
    import_replacer_0 = module_0.ImportReplacer(dict_0, var_1, dict_0)
    module_0.lazy_import(var_0, import_replacer_0)
