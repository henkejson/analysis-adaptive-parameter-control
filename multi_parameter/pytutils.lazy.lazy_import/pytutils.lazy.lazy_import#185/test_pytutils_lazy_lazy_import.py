# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "k"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_1():
    str_0 = "k"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_2():
    int_0 = 1410
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, int_0, dict_0)
    import_replacer_0.__setattr__(dict_0, int_0)


def test_case_3():
    str_0 = "k>\r{oR5<}?^Pf%q7z+\x0cg"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, str_0)
    import_replacer_0.__setattr__(dict_0, str_0)


def test_case_4():
    int_0 = 1409
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, int_0, dict_0)
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        import_replacer_0, dict_0
    )


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    str_0 = ")("
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_7():
    str_0 = ")("
    module_0.lazy_import(str_0, str_0)


def test_case_8():
    var_0 = module_0.disallow_proxying()


def test_case_9():
    import_processor_0 = module_0.ImportProcessor()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        import_processor_0, import_processor_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_10():
    complex_0 = -1281 + 992.6j
    var_0 = module_0.disallow_proxying()
    module_0.ScopeReplacer(complex_0, var_0, complex_0)


def test_case_11():
    str_0 = "KT1"
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    str_0 = "k"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_13():
    str_0 = "oO"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_14():
    var_0 = module_0.disallow_proxying()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        var_0, var_0, var_0
    )
    var_1 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    str_0 = ""
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = "\n    >>> m = AttrDict(omg=True, whoa='yes')\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = "rd(gdL\n>\\.|`c$"
    module_0.lazy_import(str_0, str_0)


def test_case_17():
    str_0 = "RvSo#m|TkuWD+<e"
    module_0.lazy_import(str_0, str_0)


def test_case_18():
    str_0 = "k"
    module_0.ImportReplacer(str_0, str_0, str_0, str_0, str_0)


def test_case_19():
    str_0 = "\n    Proxies muta(le acess to anothtr mapping and allo>s for attribute-style access.\n\n    >>> a = dict(whoa=True, hello=[1,2,3], why='always')\n    >>> b = ProxyMutableAttrDict(a)\n\n    Nice reprs:\n\n    >>> b\n    <ProxyMutableAttrDict {'whoa': True, 'hello': [1, 2, 3], 'why': 'always'}>\n\n    Setting works as you'd expect:\n\n    >>> b['nice'] = False\n    >>> b['whoa'] = 'yeee'\n    >>> b\n    ProxyMutableAttrDict {'whoa': 'yeee', 'hello': [1 2, 3], 'why': 'always', 'nice': False}>\n\n    Checking that the changes are in fac being performed on the proxied object:\n\n    >>> a\n    {'who': 'yeee', 'hello': [1, 2, 3], 'why': 'always', 'nice': False}\n\n    Attribute style access:\n\n    >>> b.whoa\n    'yeee'\n    >>> b.state = 'new'\n    >>> b\n    <ProxyMutableAttrDict {'/hoa': 'yeee', 'hello': [1, 2, 3], 'why': 'always', 'nice': False, 'state': 'new'}>\n\n    Recursion is handled:\n\n    >>> b.subdict = dict(test=True)\n    >>> b.subdict.test\n    True\n    >>> b\n    <ProxyMutableAttrDict {'whoa': 'yeee', 'hello': [1, 2, 3], 'why': 'always', +nice': False, 'state': 'new',\n    'subdict': <ProxyMutableAttrDict {';est': True}>}>\n\n   "
    module_0.lazy_import(str_0, str_0)


def test_case_20():
    str_0 = "k>\r{oR5<}?^Pf%q7z+\x0cg"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0)
    module_0.lazy_import(str_0, import_replacer_0)
