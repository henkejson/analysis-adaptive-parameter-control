# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    bytes_0 = b"'\xef\xbc\xea\x15\xcd\x80\xcf\x9514\x9a\xc4"
    var_0 = module_0.IllegalUseOfScopeReplacer(bytes_0, bytes_0)
    var_0.__str__()


def test_case_1():
    tuple_0 = ()
    tuple_1 = ()
    module_0.ImportReplacer(tuple_0, tuple_0, tuple_0, tuple_1)


def test_case_2():
    str_0 = "zJ\r2<Y_@"
    dict_0 = {str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0)
    import_replacer_0.__call__(*dict_0, **dict_0)


def test_case_3():
    import_processor_0 = module_0.ImportProcessor()


def test_case_4():
    var_0 = module_0.disallow_proxying()


def test_case_5():
    str_0 = "yc%8\rA#?7]FP'O"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_6():
    str_0 = "&F.SnX;jNbxn>l"
    module_0.lazy_import(str_0, str_0)


def test_case_7():
    bytes_0 = b"'\xef\xbc\xea\x15\xcd\x80\xcf\x9514\x9a\xc4"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bytes_0, bytes_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(bytes_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_8():
    str_0 = "\nG s\n"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    module_0.lazy_import(str_0, str_0)


def test_case_9():
    str_0 = "3"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_10():
    str_0 = "!E5_*OB#Cy()&9P31y"
    module_0.lazy_import(str_0, str_0)


def test_case_11():
    str_0 = ""
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    str_0 = "\nG s\n"
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    str_0 = "\nG s\n"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_14():
    bytes_0 = b"\xcd\x15\x82\x046\x86\xaaT86(JCG\xc6#"
    var_0 = bytes_0.__str__()
    module_0.lazy_import(bytes_0, var_0)


def test_case_15():
    str_0 = "Format each string value of dictionary using values contained within\n    itself, keeping track of dependencies as required.\n\n    Also converts any formatted values according to conversions dict.\n\n    Example:\n\n    >>> from pprint import pprint as pp\n    >>> c = dict(wat='wat{omg}', omg=True)\n    >>> pp(format_dict_recursively(c))\n    {'omg': True, 'wat': 'watTrue'}\n\n    Dealing with missing (unresolvable) keys in format strings:\n\n    >>> from pprint import pprint as pp\n    >>> c = dict(wat='wat{omg}', omg=True, fail='nowhale}')\n    >>> format_dict_recursively(c)\n    Traceback (most recent call last):\n        ...\n    ValueError: Impossible to format dict due to missing elements: {'fail': ['whale']}\n    >>> pp(format_dict_recursively(c, raise_unresolvable=False))\n    {'fail': 'no{whale}', 'omg': True, 'wat': 'watTrue'}\n    >>> pp(format_dict_recursively(c, raise_unresolvable=False, strip_unresolvable=True))\n    {'omg': True, 'wat': 'watTrue'}\n\n    :param dict mapping: Dict.\n    :param bool raise_unresolvable: Upon True, raises ValueError upon an unresolvable key.\n    :param bool strip_unresolvable: Upon True, strips unresolvable keys.\n    :param dict conversions: Mapping of {from: to}.\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = "\n    Update and/or insert query parameters in a URL.\n\n    >>> update_query_params('http://example.com?foo=bar&biz=baz', dict(foo=\nstuff'))\n    'http://example.com?...foo=stuff...'\n\n    :param url: URL\n    :type url: str\n    :param kwargs: Query parameters\n    :type kwargs: dict\n    :return: Modified URL\n    :rtype: str\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_17():
    bytes_0 = b"\xcd\x15\x82\x046\x86\xaaT86(JCG\xc6#"
    none_type_0 = None
    list_0 = [bytes_0]
    module_0.ImportReplacer(none_type_0, bytes_0, none_type_0, bytes_0, list_0)


def test_case_18():
    int_0 = 1024
    str_0 = "Upon request import 'module_path' as the name 'module_name'.\n        When imported, prepare children to also be imported.\n\n        :param scope: The scope that objects should be imported into.\n            Typically this is globals()\n        :param name: The variable name. Often this is the same as the\n            module_path. 'bzrlib'\n        :param module_path: A list for the fully specified module path\n            ['bzrlib', 'foo', 'bar']\n        :param member: The member inside the module to import, often this is\n            None, indicating the module is being imported.\n        :param children: Children entries to be imported later.\n            This should be a map of children specifications.\n            ::\n            \n                {'foo':(['bzrlib', 'foo'], None,\n                    {'bar':(['bzrlib', 'foo', 'bar'], None {})})\n                }\n\n        Examples::\n\n            import foo => name='foo' module_path='foo',\n                          member=None, children={}\n            import foo.bar => name='foo' module_path='foo', member=None,\n                              children={'bar':(['foo', 'bar'], None, {}}\n            from foo import bar => name='bar' module_path='foo', member='bar'\n                                   children={}\n            from foo import bar, baz would get translated into 2 import\n            requests. On for 'name=bar' and one for 'name=baz'\n        "
    module_0.lazy_import(int_0, str_0)


def test_case_19():
    str_0 = "\n    Efficiently advance an iterqtor n-steps ahead. If n is noe, consumewentirely.\n    Consumes at C level (and therefore speed) in cpython.\n    "
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, dict_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_20():
    str_0 = "wGc_@%"
    dict_0 = {str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0)
    none_type_0 = None
    none_type_1 = None
    scope_replacer_0 = module_0.ScopeReplacer(dict_0, import_replacer_0, none_type_1)
    scope_replacer_0.__setattr__(none_type_0, none_type_0)
