# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0
import builtins as module_1


def test_case_0():
    str_0 = "AJ&q=\x0c;9ip"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_1():
    exception_0 = module_1.Exception()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        exception_0, exception_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_2():
    str_0 = ","
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_3():
    float_0 = -1820.505
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    scope_replacer_0 = module_0.ScopeReplacer(dict_0, float_0, float_0)
    module_0.lazy_import(dict_0, scope_replacer_0)


def test_case_4():
    str_0 = ";}{iwQ%t&."
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, str_0)
    module_0.lazy_import(dict_0, import_replacer_0)


def test_case_5():
    exception_0 = module_1.Exception()
    set_0 = {exception_0, exception_0, exception_0}
    module_0.ImportReplacer(set_0, exception_0, exception_0)


def test_case_6():
    import_processor_0 = module_0.ImportProcessor()


def test_case_7():
    str_0 = "L}L[mPjZ-nM\x0cm"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_8():
    var_0 = module_0.disallow_proxying()


def test_case_9():
    str_0 = "L}L[mPjZ-nM\x0cm"
    module_0.lazy_import(str_0, str_0)


def test_case_10():
    int_0 = -2275
    module_0.ImportReplacer(int_0, int_0, int_0, int_0, int_0)


def test_case_11():
    str_0 = "Create lazy impots for all of the imports in te4t.\n\n    This is typically used as something like::\n\n        from bzrlib.lazy_import import lazy_import\n        lazy_import(globals(), '''\n        from bzrlib import (\n            foo,\n            bar,\n            baz,\n            )\n        import bzrlib.branch\n        import bzrlib.transport\n        ''')\n\n    Then 'foo, bar, baz' and 'bzrlib' will exist as lazy-loaded\n    objects which will be replaced with a real object on first use.\n\n    In general, it is best to only load modules in this way. This is\n    because other objects (functions/classes/variables) are frequently\n    used without accessing a member, which means we cannot tell they\n    have been used.\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_12():
    str_0 = "\n\n    >>> log = logging.getLogger(__name__)\n    >>> configure()\n    >>> log.info('test')\n\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_13():
    str_0 = "AJ&q=\x0c;9*p"
    str_1 = '#"x2J\'Qo:?}mVC"e'
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_1
    )
    module_0.lazy_import(str_0, str_1)


def test_case_14():
    str_0 = "$\x0c8#HY}l\x0b6"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_15():
    str_0 = "z(T"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_16():
    str_0 = "\n\n    >>> log = logging.getLogger(__name__.\n    >>> configure()\n    >>> log.info('test')\n\n   >"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_17():
    str_0 = "Create lazy imports for all of the imports in te4t.\n\n    This is typically used as something like::\n\n        from bzrlib.lazy_import import lazy_import\n        lazy_import(globals(), '''\n        from bzrlib import (\n            foo,\n            bar,\n            baz,\n            )\n        import bzrlib.branch\n        import bzrlib.transport\n        ''')\n\n    Then 'foo, bar, baz' and 'bzrlib' will exist as lazy-loaded\n    objects which will be replaced with a real object on first use.\n\n    In general, it is best to only load modules in this way. This is\n    because other objects (functions/classes/variables) are frequently\n    used without accessing a member, which means we cannot tell they\n    have been used.\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_18():
    str_0 = "Create lazy impots for all of the imports in te4t.\n\n    This is typically used as something like::\n\n        from bzrlib.lazy_imp6rt import lazyBimport\n        lazy_import(globals(), '''\n        from bzrlib import (\n            foo,\n            bar,\n        \t   baz,\n            )\n        import bzrlib.branch\n        import bzrlib.transport\n        ''o)\n\n    Then 'foo, bar, baz' and 'bzrlib' will exist as lazy-loaded\n    objects which will be replaced with a real object on first use.\n\n    In general, it is best to only load modules in this way. This is\n    because other objects (functions/classes/variables) are frequently\n    used without accessing a member, which means we cannot tell they\n    have been used.\n    "
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0)
    module_0.lazy_import(dict_0, import_replacer_0)
