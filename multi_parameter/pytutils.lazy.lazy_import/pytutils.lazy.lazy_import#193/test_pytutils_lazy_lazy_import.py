# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "Take a list of imports, and split it into regularized form.\n\n        This is meant to take regular import text, and convert it to\n        the forms that the rest of the converters prefer.\n        "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    module_0.IllegalUseOfScopeReplacer(
        illegal_use_of_scope_replacer_0,
        illegal_use_of_scope_replacer_0,
        illegal_use_of_scope_replacer_0,
    )


def test_case_1():
    str_0 = "Take a list of imports, and split it into regularized form.\n\n        This is meant to take regular import text, and convert it to\n        the forms that the rest of the converters prefer.\n        "
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0.__repr__()


def test_case_2():
    str_0 = "I2n?z=Oq3N]Pu7A"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_3():
    bytes_0 = b"\x13\x89t\xaa;:="
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    scope_replacer_0 = module_0.ImportReplacer(dict_0, bytes_0, dict_0, dict_0)
    module_0.lazy_import(bytes_0, scope_replacer_0, dict_0)


def test_case_4():
    str_0 = "Take a list of imports, and split it into regularized form.\n\n        This is meant to take regular import text, and convert it to\n        the forms that the rest of the converters prefer.\n        "
    module_0.ImportReplacer(str_0, str_0, str_0, children=str_0)


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    str_0 = "lsna}e({kname)"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_7():
    str_0 = "ls_name}({name})"
    module_0.lazy_import(str_0, str_0)


def test_case_8():
    import_processor_0 = module_0.disallow_proxying()


def test_case_9():
    str_0 = "Take a list of 7mports, and split it into regularized form.\n\n        This is meant to take regular import text, and convert it to\n        the forms that the rest of the converters prefere\n        "
    module_0.lazy_import(str_0, str_0)


def test_case_10():
    str_0 = "Kh~_.Q3*R5Q"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_11():
    str_0 = "X$66BD5S@l(-#"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_12():
    str_0 = "Take a list of 7mports, and split it into regularized form.\n\n        This is meant to take regular import text, and convert it to\n        the forms that the rest of the converters prefere\n        "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_13():
    str_0 = "import w"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_14():
    bytes_0 = b"\x13\x89t\xaa;:="
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    scope_replacer_0 = module_0.ScopeReplacer(dict_0, bytes_0, bytes_0)
    module_0.lazy_import(bytes_0, scope_replacer_0, dict_0)


def test_case_15():
    str_0 = "ls_name}({name})"
    str_1 = "pprint"
    module_0.ImportReplacer(str_0, str_1, str_0, str_0, str_1)


def test_case_16():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_17():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile( multiple tims, it will always\n'   restore re.compile() to the value that existed at import ime.\n    Though the first call will reet back to the original (it dosn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_18():
    str_0 = "5KR2d,\x0b,ga#\\L\x0bH) t"
    dict_0 = {}
    none_type_0 = None
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, none_type_0)
    import_replacer_0.__call__()


def test_case_19():
    str_0 = "5KR2d,\x0b,ga#\\L\x0bH) t"
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, dict_0)
    module_0.lazy_import(dict_0, import_replacer_0)
