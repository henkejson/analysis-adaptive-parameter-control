# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "e4>}uQ&Um"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0.__repr__()


def test_case_1():
    str_0 = "g`DD%*4WSVad5_S9x;"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_2():
    str_0 = "ZzZX*"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    module_0.lazy_import(var_0, str_0)


def test_case_3():
    float_0 = -2264.61984
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, float_0, dict_0, dict_0)
    import_replacer_0.__unicode__()


def test_case_4():
    int_0 = -1854
    module_0.ImportReplacer(int_0, int_0, int_0)


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    bool_0 = True
    import_processor_0 = module_0.ImportProcessor(bool_0)


def test_case_7():
    str_0 = "g`DD%*4WSVad5_S9x;"
    module_0.lazy_import(str_0, str_0)


def test_case_8():
    str_0 = "e4>}u(&=m"
    module_0.lazy_import(str_0, str_0)


def test_case_9():
    var_0 = module_0.disallow_proxying()


def test_case_10():
    none_type_0 = None
    module_0.lazy_import(none_type_0, none_type_0)


def test_case_11():
    bool_0 = True
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(bool_0, bool_0)
    bool_1 = False
    bool_2 = True
    none_type_0 = None
    illegal_use_of_scope_replacer_1 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, bool_2
    )
    module_0.ImportReplacer(bool_1, bool_2, bool_2, bool_1, bool_2)


def test_case_12():
    str_0 = "Create lazy imports for all of the imports in text.\n\n    This is typically used as something like::\n\n        from bzrlib.lazy_import import lazy_import\n        lazy_import(globals(), '''\n        from bzrlib import (\n            foo,\n            bar,\n            baz,\n            )\n        import bzrlib.branch\n        import bzrlib.transport\n        ''')\n\n    Then 'foo, bar, baz' and 'bzrlib' will exist as lazy-loaded\n    objects which will be replaced with a real object on first use.\n\n    In general, it is best to only load modules in this way. This is\n    because other objects (functions/classes/variables) are frequently\n    used without accessing a member, which means we cannot tell they\n    have been used.\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    str_0 = "ZZX*"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_14():
    str_0 = "%(bg_black)s%(log_color)s[%(asctime)s] [%(name)s/%(process)d] %(message)s %(blue)s@%(funcName)s:%(lineno)d #%(levelname)s%(reset)s"
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    none_type_0 = None
    str_0 = "#SJM'GBf2[2jo~^qC*"
    module_0.lazy_import(none_type_0, str_0)


def test_case_16():
    str_0 = "fWQH"
    dict_0 = {}
    scope_replacer_0 = module_0.ScopeReplacer(dict_0, dict_0, str_0)
    module_0.lazy_import(scope_replacer_0, scope_replacer_0)


def test_case_17():
    str_0 = "%(bg_black)s%(lBg_color)s[%(asctime)s] [%(name)s/%(procss)d] %(message)s %(blue)s@%(funcAame)s:%Hlineno)d #%(levelname)s%(reset)s"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, children=str_0)
    module_0.lazy_import(dict_0, import_replacer_0)


def test_case_18():
    str_0 = "%N/dQ"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, dict_0)
    module_0.lazy_import(str_0, import_replacer_0)
