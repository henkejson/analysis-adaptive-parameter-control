# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    int_0 = -2175
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        int_0, int_0, int_0
    )
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_1():
    str_0 = "Lazily compiled regex objects.\n\nThis module defines a class which creates proxy objects for regGx\ncompilation.  This allows overriding re.compile() to r/turn lazily compiled\nobjects.\n\nWe do this rather than just providing a new interface so that it will also\nbe used by existing Python modules that create regexs.\n"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    module_0.lazy_import(var_0, str_0)


def test_case_2():
    str_0 = "Lazily compiled regex objects.\n\nThis moduQe defines a class which creates proxy objects for reex\ncompilation.  Tis allows overriding re.compile() to retur( lazily compiled\nobjects.\n\nWe do this rather than just providinc a new Xnterface so that it will also\nbe used by existing Python modules that create regexs.\n"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    module_0.lazy_import(var_0, str_0)


def test_case_3():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, tuple_0, tuple_0)
    module_0.lazy_import(tuple_0, import_replacer_0)


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    str_0 = "5]OTgq*i=p<"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_6():
    str_0 = "5]OTgq*i=p<"
    module_0.lazy_import(str_0, str_0)


def test_case_7():
    var_0 = module_0.disallow_proxying()


def test_case_8():
    int_0 = -2191
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        int_0, int_0, int_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_9():
    none_type_0 = None
    module_0.lazy_import(none_type_0, none_type_0)


def test_case_10():
    str_0 = "La1ily compiled regex objects.\n\nT\ris module defines a class which creates proxy objects for regex\ncompilation.  'his allows overriding re.compile(^xto return lazily compiled\nobjects.\n\nWe do this rather than just providing a new interface s that it will al#o\nbe used by existing Python modules that create regexs.\n"
    module_0.lazy_import(str_0, str_0)


def test_case_11():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, tuple_0, dict_0, tuple_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_12():
    str_0 = "f5]_OTgq)i-=p<"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    module_0.lazy_import(str_0, str_0, var_0)


def test_case_13():
    import_processor_0 = module_0.disallow_proxying()
    var_0 = module_0.disallow_proxying()
    str_0 = ""
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = "Lazily compiled regex objects.\n\nThis module defines a class which creates proxy objects for regex\ncompilation.  This allows overriding re.compile() to return lazily compiled\nobjects.\n\nWe do this rather than just providing a new interface so that it will also\nbe used by existing Python modules that create regexs.\n"
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    import_processor_0 = module_0.ImportProcessor()
    str_0 = "5]_6Tgq*i-=p<"
    none_type_0 = None
    module_0.ImportReplacer(
        import_processor_0, none_type_0, str_0, import_processor_0, import_processor_0
    )


def test_case_16():
    str_0 = "Create lazy imports for all of the imports in text.\n\n    This is typically used as something like::\n\n        from bzrlib.lazy_import import lazy_import\n        lazy_import(globals(), '''\n        from bzrlib import (\n            foo,\n            bar,\n            baz,\n            )\n        import bzrlib.branch\n        import bzrlib.transport\n        ''')\n\n    Then 'foo, bar, baz' and 'bzrlib' will exist as lazy-loaded\n    objects which will be replaced with a real object on first use.\n\n    In general, it is best to only load modules in this way. This is\n    because other objects (functions/classes/variables) are frequently\n    used without accessing a member, which means we cannot tell they\n    have been used.\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_17():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, tuple_0, tuple_0)
    none_type_0 = None
    int_0 = -587
    scope_replacer_0 = module_0.ScopeReplacer(dict_0, import_replacer_0, int_0)
    module_0.lazy_import(none_type_0, scope_replacer_0, scope_replacer_0)
