# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0
import builtins as module_1


def test_case_0():
    var_0 = module_0.disallow_proxying()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        var_0, var_0, var_0
    )


def test_case_1():
    int_0 = -531
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(int_0, int_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_2():
    str_0 = 'rSB,rk":9G_.,BGwIY'
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_3():
    bytes_0 = b"\xc2\x16\x8c|F\x89\xca\x1a\xa6"
    module_0.ImportReplacer(bytes_0, bytes_0, bytes_0, children=bytes_0)


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    str_0 = " \n,Ow8a{*IH-|}{:'v"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_6():
    str_0 = " \n,Ow8a{*IH-|}{:'v"
    module_0.lazy_import(str_0, str_0)


def test_case_7():
    var_0 = module_0.disallow_proxying()


def test_case_8():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_9():
    none_type_0 = None
    module_0.lazy_import(none_type_0, none_type_0, none_type_0)


def test_case_10():
    none_type_0 = None
    dict_0 = {none_type_0: none_type_0, none_type_0: none_type_0}
    import_replacer_0 = module_0.ImportReplacer(
        dict_0, none_type_0, none_type_0, dict_0
    )
    module_0.lazy_import(import_replacer_0, import_replacer_0, none_type_0)


def test_case_11():
    str_0 = 'rSB,rk":9G_.,BGwIY'
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_12():
    var_0 = module_0.disallow_proxying()
    str_0 = ""
    module_0.lazy_import(var_0, str_0, var_0)


def test_case_13():
    set_0 = set()
    var_0 = module_1.Exception(*set_0)
    var_1 = var_0.__repr__()
    var_2 = var_0.__eq__(var_1)
    set_1 = {var_1}
    module_0.ImportReplacer(var_0, var_2, set_1, var_1, var_2)


def test_case_14():
    str_0 = "qcQH/+Ojd6{S#B3_"
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = "]4>(4\t{h\\gx$j37eLI"
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = "Create lazy imports for all of the imports in text.\n\n    This is typically used as something like::\n\n        from bzrlib.lazy_import import lazy_import\n        lazy_import(globals(), '''\n        from bzrlib import (\n            foo,\n            bar,\n            baz,\n            )\n        import bzrlib.branch\n        import bzrlib.transport\n        ''')\n\n    Then 'foo, bar, baz' and 'bzrlib' will exist as lazy-loaded\n    objects which will be replaced with a real object on first use.\n\n    In general, it is best to only load modules in this way. This is\n    because other objects (functions/classes/variables) are frequently\n    used without accessing a member, which means we cannot tell they\n    have been used.\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_17():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_18():
    float_0 = 1328.0
    dict_0 = {float_0: float_0, float_0: float_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, float_0, float_0)
    module_0.lazy_import(dict_0, import_replacer_0)


def test_case_19():
    import_processor_0 = module_0.ImportProcessor()
    dict_0 = {
        import_processor_0: import_processor_0,
        import_processor_0: import_processor_0,
    }
    var_0 = import_processor_0.__str__()
    import_replacer_0 = module_0.ImportReplacer(dict_0, import_processor_0, var_0)
    module_0.lazy_import(var_0, import_replacer_0)


def test_case_20():
    none_type_0 = None
    dict_0 = {none_type_0: none_type_0, none_type_0: none_type_0}
    tuple_0 = ()
    import_replacer_0 = module_0.ImportReplacer(dict_0, tuple_0, tuple_0, dict_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0, tuple_0)
