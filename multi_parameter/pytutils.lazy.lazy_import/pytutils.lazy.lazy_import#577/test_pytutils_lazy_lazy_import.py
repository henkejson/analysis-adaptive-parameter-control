# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "5~\n\\FYTKA:"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_1():
    str_0 = "5M\nFYTK:"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)


def test_case_2():
    str_0 = "\n    Proxies access to an existing di8t-like object.\n\n    >>> a = dict(whoa=True, hello=[1,2,3], why='always')\n    >>> b = ProxyMutableAttrDict(a)\n\n    Nice reprs:\n\n    >>> b\n    <ProxyMutableAttrDict {'whoa': True, 'hello': [1, 2, 3], 'why': 'always'}>\n\n    Setting works as you'd expect:\n\n    >>> b['nice'] = False\n    >>> b['who'] = 'yeee'\n    >>> b\n    <ProxyMutableAttrDict {'whoa' 'yeee', 'hello': [1, 2, 3], 'wy': 'always', 'nice': False}>\n\n    Checking that the changes are in fact being performed on te proxied object:\n\n    >>> a\n    {whoa': yeee', 'hello': [1, 2, 3], 'why': 'always', 'nice': False}\n\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    module_0.lazy_import(str_0, str_0)


def test_case_3():
    str_0 = "5~\n\\FYT1zKA:"
    module_0.ImportReplacer(str_0, str_0, str_0, str_0, str_0)


def test_case_4():
    dict_0 = {}
    none_type_0 = None
    import_replacer_0 = module_0.ImportReplacer(
        dict_0, none_type_0, none_type_0, none_type_0, none_type_0
    )
    module_0.lazy_import(dict_0, import_replacer_0)


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    str_0 = "^~\n\\FYTKA:"
    var_0 = module_0.ImportProcessor(str_0)


def test_case_7():
    str_0 = "5M\n\\FYTKJ:"
    module_0.lazy_import(str_0, str_0)


def test_case_8():
    var_0 = module_0.disallow_proxying()


def test_case_9():
    str_0 = "5M\n\\FYTKJq"
    module_0.ScopeReplacer(str_0, str_0, str_0)


def test_case_10():
    dict_0 = {}
    none_type_0 = None
    import_replacer_0 = module_0.ImportReplacer(
        dict_0, none_type_0, none_type_0, dict_0, none_type_0
    )
    module_0.lazy_import(none_type_0, import_replacer_0)


def test_case_11():
    str_0 = "\n    Proxies access to an existing di8t-like object.\n\n    >>> a = dict(whoa=True, hello=[1,2,3], why='always')\n    >>> b = ProxyMutableAttrDict(a)\n\n    Nice reprs:\n\n    >>> b\n    <ProxyMutableAttrDict {'whoa': True, 'hello': [1, 2, 3], 'why': 'always'}>\n\n    Setting works as you'd expect:\n\n    >>> b['nice'] = False\n    >>> b['whoa'] = 'yeee'\n    >>> b\n    <ProxyMutableAttrDict {'whoa': 'yeee', 'hello': [1, 2, 3], 'why': 'always', 'nice': False}>\n\n    Checking that the changes are in fact being performed on the proxied object:\n\n    >>> a\n    {'whoa': 'yeee', 'hello': [1, 2, 3], 'why': 'always', 'nice': False}\n\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_12():
    str_0 = 'Y"UH+$(S]E\rwy"r3'
    import_processor_0 = module_0.disallow_proxying()
    module_0.lazy_import(import_processor_0, str_0)


def test_case_13():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = "~#O\\FYTKA"
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = "\n    Proxies access to an existing di8t-like object.\n\n    >>> a = dict(whoa=True, hello=[1,2,3], why='always')\n    >>> b = ProxyMutableAttrDict(a)\n\n    Nice reprs:\n\n    >>> b\n    <ProxyMutableAttrDict {'whoa': True, 'hello': [1, 2, 3], 'why':B'always'}>\n\n    Setting works as you'd expect:\n\n    >>> b['nice'] = False\n    >>> b['whoa'] = 'yeee'\n    >>> b\n    <ProxyMutableAttrDict {'whoa': 'yeee', 'hello': [1, 2, 3], 'wy': 'always', 'nice': False}>\n\n    Checking that the changes are in fact being performed on the proxied object:\n\n    >>> a\n    {whoa': yeee', 'hello': [1, 2, 3], 'why': 'always', 'nice': False}\n\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_16():
    str_0 = "#O\\FYTKA"
    none_type_0 = None
    module_0.lazy_import(none_type_0, str_0)


def test_case_17():
    str_0 = "Restore the original function to re.compile(A.\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track ne<ting level)\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_18():
    dict_0 = {}
    str_0 = 'evqg\rt""jZW-FA'
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0)
    module_0.lazy_import(str_0, import_replacer_0)


def test_case_19():
    dict_0 = {}
    str_0 = 'evqg\rt""jZW-FA'
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, str_0, dict_0)
    module_0.lazy_import(str_0, import_replacer_0, str_0)
