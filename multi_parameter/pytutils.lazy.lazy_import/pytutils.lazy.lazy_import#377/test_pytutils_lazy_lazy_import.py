# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    complex_0 = -3.7427 - 2106.384764j
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        complex_0, complex_0, complex_0
    )
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_1():
    complex_0 = -1633.9622459644252 + 59j
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        complex_0, complex_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_2():
    int_0 = 16
    module_0.ImportReplacer(int_0, int_0, int_0, int_0)


def test_case_3():
    bool_0 = True
    import_processor_0 = module_0.ImportProcessor()
    module_0.ImportReplacer(bool_0, bool_0, bool_0, children=bool_0)


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    str_0 = "I W|e|gP^OYdskP"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_6():
    var_0 = module_0.disallow_proxying()


def test_case_7():
    none_type_0 = None
    module_0.lazy_import(none_type_0, none_type_0)


def test_case_8():
    complex_0 = 781 - 1933.29493j
    var_0 = module_0.IllegalUseOfScopeReplacer(complex_0, complex_0)
    var_1 = var_0.__eq__(complex_0)
    var_0.__unicode__()


def test_case_9():
    complex_0 = 781 - 1933.3j
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        complex_0, complex_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_10():
    complex_0 = 781 - 1933.29493j
    dict_0 = {complex_0: complex_0, complex_0: complex_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, complex_0, dict_0)
    module_0.lazy_import(dict_0, import_replacer_0)


def test_case_11():
    var_0 = module_0.disallow_proxying()
    float_0 = -1397.4673
    var_1 = var_0.__repr__()
    int_0 = 796
    module_0.ImportReplacer(var_1, int_0, int_0, float_0, float_0)


def test_case_12():
    str_0 = "I W|e|gP^OYdskP"
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    str_0 = '"\n    Deduplicates an iterator iteratively using hashed values in a set.\n    Not exactly memory efficient because of that of course.\n    If you have a large dataset with high cardinality look at HyperLogLog instead.\n\n    :return generator: Iterator of deduplicated results.\n    '
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_14():
    str_0 = "xI6DudZ-?*z#sj\x0c+chIO"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_15():
    str_0 = "Create lazy imports for all of the imports in text.\n\n    This is typically used as something like::\n\n        from bzrlib.lazy_import import lazy_import\n        lazy_import(globals(), '''\n        from bzrlib import (\n            foo,\n            bar,\n            baz,\n            )\n        import bzrlib.branch\n        import bzrlib.transport\n        ''')\n\n    Then 'foo, bar, baz' and 'bzrlib' will exist as lazy-loaded\n    objects which will be replaced with a real object on first use.\n\n    In general, it is best to only load modules in this way. This is\n    because other objects (functions/classes/variables) are frequently\n    used without accessing a member, which means we cannot tell they\n    have been used.\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_16():
    str_0 = "\n    Proxies access to an existing dict-like object.\n\n    >>> a = dict(whoa=True, hello=[1,2,3], why='always')\n    >>> b = ProxyMutableAttrDict(a)\n\n    Nice reprs:\n\n    >>> b\n    <ProxyMutableAttrDict {'whoa': True, 'hello': [1, 2, 3], 'why': 'always'}>\n\n    Setting works as you'd expect:\n\n    >>> b['nice'] = False\n    >>> b['whoa'] = 'yeee'\n    >>> b\n    <ProxyMutableAttrDict {'whoa': 'yeee', 'hello': [1, 2, 3], 'why': 'always', 'nice': False}>\n\n    Checking that the changes are in fact being performed on the proxied object:\n\n    >>> a\n    {'whoa': 'yeee', 'hello': [1, 2, 3], 'why': 'always', 'nice': False}\n\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_17():
    str_0 = "8e(TU5KtI (\\N9s"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_18():
    import_processor_0 = module_0.ImportProcessor()
    str_0 = ""
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_19():
    complex_0 = 781 - 1933.29493j
    dict_0 = {complex_0: complex_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, complex_0, dict_0)
    none_type_0 = None
    var_0 = module_0.ScopeReplacer(dict_0, import_replacer_0, none_type_0)
    var_0.__str__()
