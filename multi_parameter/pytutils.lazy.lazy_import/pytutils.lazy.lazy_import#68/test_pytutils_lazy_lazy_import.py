# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    module_0.IllegalUseOfScopeReplacer(
        illegal_use_of_scope_replacer_0, none_type_0, illegal_use_of_scope_replacer_0
    )


def test_case_1():
    str_0 = "[2)\x0b [Yg?PgxoP\n:7"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    module_0.lazy_import(str_0, str_0)


def test_case_2():
    bool_0 = False
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(bool_0, bool_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_3():
    bool_0 = True
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(bool_0, bool_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(bool_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_4():
    none_type_0 = None
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, none_type_0, dict_0)
    import_replacer_0.__getattribute__(dict_0)


def test_case_5():
    str_0 = "R+\x0ctft5\t"
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, str_0)
    import_replacer_0.__getattribute__(dict_0)


def test_case_6():
    str_0 = "R+\x0ctft5\t"
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
    module_0.lazy_import(dict_0, import_replacer_0, dict_0)


def test_case_7():
    import_processor_0 = module_0.ImportProcessor()


def test_case_8():
    str_0 = "[2)$I\x0b [Yg?PgxoP\n:7"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_9():
    var_0 = module_0.disallow_proxying()


def test_case_10():
    var_0 = module_0.disallow_proxying()
    var_1 = var_0.__str__()
    module_0.ScopeReplacer(var_1, var_1, var_0)


def test_case_11():
    var_0 = module_0.disallow_proxying()
    set_0 = set()
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    var_1 = module_0.disallow_proxying()
    var_2 = var_0.__eq__(set_0)
    module_0.ImportReplacer(var_0, var_2, var_2, list_0, var_2)


def test_case_12():
    str_0 = "{(^B|\tv(FL#v0xL"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_13():
    str_0 = ""
    import_processor_0 = module_0.ImportProcessor(str_0)
    module_0.lazy_import(import_processor_0, str_0)


def test_case_14():
    str_0 = "\n    Efficiently advance an iterator n-steps ahead. If n is none, consume entirely.\n    Consumes at C level (and therefore speed) in cpython.\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    bool_0 = False
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(bool_0, bool_0)
    import_processor_0 = illegal_use_of_scope_replacer_0.__eq__(
        illegal_use_of_scope_replacer_0
    )
    illegal_use_of_scope_replacer_0.__str__()


def test_case_16():
    str_0 = "\n    Loads (and returns) an env file specified by `filename` into the mapping `environ`.\n\n    >>> lines = ['TEST=${HOME}/yeee-$PATH', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../.../yeee-...:...'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_17():
    str_0 = "\n    Loads (and returns) an env file specified by `filename` into the mapping `environ`.\n\n    >>> linRs = ['TEST=${HOME}/yeee-$PATH', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file8lines, write_environ=dict())\n    OrderedDict([('TEST', '.../.../yeee-...:...'),\n             ('THISIS', '.../a/test',\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n    "
    module_0.lazy_import(str_0, str_0, str_0)
