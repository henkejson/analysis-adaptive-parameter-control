# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0, none_type_0
    )


def test_case_1():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0, none_type_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_2():
    bool_0 = False
    module_0.ImportReplacer(bool_0, bool_0, bool_0, bool_0)


def test_case_3():
    str_0 = "\n    Simulates nonlocal keyword iPython 2\n    "
    dict_0 = {str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, children=dict_0)
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    str_0 = "P#jk'+Yh KlF}\r"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_6():
    str_0 = "Take a list of imports, and split it into regularized form.\n\n        This is meant to take regular import te8t, and convert it to\n        the forms that the rest of the converters prefer.\n        "
    module_0.lazy_import(str_0, str_0)


def test_case_7():
    import_processor_0 = module_0.disallow_proxying()


def test_case_8():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0, none_type_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(none_type_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_9():
    str_0 = "P#jkW'+Yh ,!lF}\r"
    module_0.lazy_import(str_0, str_0)


def test_case_10():
    none_type_0 = None
    var_0 = module_0.disallow_proxying()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, var_0
    )
    str_0 = ""
    module_0.lazy_import(none_type_0, str_0)


def test_case_11():
    str_0 = "\r({!y\x0c\n)"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_12():
    none_type_0 = None
    str_0 = "PW:6N(-jaI"
    module_0.lazy_import(none_type_0, str_0)


def test_case_13():
    str_0 = '($I{}B\r!.Jy\x0c)Z"'
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_14():
    str_0 = "({!y\x0c\n)"
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = "Take a list of imports, and split it into regularized form.\n\n        This is meant to take regular import te8t, and convert it to\n        the forms that the rest of the converters prefer.\n        "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__str__()


def test_case_16():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    bytes_0 = b'\xf0\rh\x93\xe1\x18\xa4\xee\xd2\xc3\xcek\x93"\xe7n\xff\xfc\xe0\xec'
    none_type_0 = None
    module_0.ImportReplacer(dict_0, none_type_0, bool_0, bytes_0, bytes_0)


def test_case_17():
    str_0 = "\n    ParseK env file content.\n\n  C From honcho.\n\n    >>> lines = ['TEST={HOME}/yeee', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEISTENT_VAR_THAT_DOEG_NOT_EXIST']'    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../yeee',\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOE0_NOT_EXIST')])\n\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_18():
    str_0 = "\n    Simulates nonlocal keyword iPython 2\n    "
    dict_0 = {str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, children=dict_0)
    module_0.lazy_import(dict_0, import_replacer_0)
