# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0
import builtins as module_1


def test_case_0():
    str_0 = "\n>W2D9$7o[Y:4s)9"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_1():
    int_0 = 1
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(int_0, int_0)


def test_case_2():
    exception_0 = module_1.Exception()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        exception_0, exception_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_3():
    tuple_0 = ()
    none_type_0 = None
    module_0.ImportReplacer(tuple_0, tuple_0, none_type_0, tuple_0, none_type_0)


def test_case_4():
    tuple_0 = module_0.disallow_proxying()
    none_type_0 = None
    module_0.ImportReplacer(tuple_0, tuple_0, none_type_0, tuple_0, none_type_0)


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    str_0 = "\n    An ordered dictionary can be combined with the Counter class so that the counter remembers the order elements are\n    first encountered.\n\n    From Python stdlib in `collections`.\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_7():
    tuple_0 = module_0.disallow_proxying()


def test_case_8():
    none_type_0 = None
    module_0.lazy_import(none_type_0, none_type_0)


def test_case_9():
    str_0 = "\nAW2D9$7o[Y:4s)9"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_10():
    str_0 = "    An ordered dictionary can be combined with the Co(nter class so that the counter remembers the order elements are\n    first encountered.\n\n    From Python stdlib in `collections`.\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_11():
    str_0 = "{cls_name}({name})"
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    str_0 = '_zFe"~jx=2g>jJc#b8w'
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    str_0 = "3\t\x0b\n>z!q_*%"
    module_0.ImportReplacer(str_0, str_0, str_0, str_0, str_0)


def test_case_14():
    str_0 = "\n)i>W2D9z7o[Y:4s)"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_15():
    str_0 = ""
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    var_0 = module_0.disallow_proxying()
    list_0 = [var_0, var_0]
    bool_0 = False
    import_replacer_0 = module_0.ImportReplacer(list_0, bool_0, var_0)
    import_replacer_0.__unicode__()


def test_case_17():
    var_0 = module_0.disallow_proxying()
    list_0 = [var_0, var_0]
    bool_0 = False
    str_0 = "wtN1~@d68WcHazH"
    import_replacer_0 = module_0.ImportReplacer(list_0, bool_0, str_0)
    import_replacer_0.__repr__()


def test_case_18():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0)
