# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    var_0 = module_0.disallow_proxying()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(var_0, var_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_1():
    bool_0 = True
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bool_0, bool_0, bool_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(bool_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_2():
    bool_0 = True
    none_type_0 = None
    dict_0 = {bool_0: bool_0, none_type_0: bool_0}
    import_replacer_0 = module_0.ImportReplacer(
        dict_0, none_type_0, none_type_0, bool_0
    )
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, bool_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_3():
    str_0 = " l( )"
    float_0 = 3053.7333
    dict_0 = {str_0: str_0, str_0: float_0, str_0: float_0, str_0: float_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, float_0, str_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    str_0 = "/<ig+hax"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_6():
    var_0 = module_0.disallow_proxying()


def test_case_7():
    int_0 = -972
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(int_0, int_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_8():
    bytes_0 = b"\xdfo\xa5e\xba\x80\x81Q'\xac\xe9@7i"
    set_0 = {bytes_0}
    none_type_0 = None
    module_0.ScopeReplacer(set_0, none_type_0, bytes_0)


def test_case_9():
    str_0 = "<ig}+hax"
    module_0.lazy_import(str_0, str_0)


def test_case_10():
    bool_0 = True
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bool_0, bool_0, bool_0
    )
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_11():
    bool_0 = False
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(bool_0, bool_0)
    module_0.ImportReplacer(
        illegal_use_of_scope_replacer_0,
        illegal_use_of_scope_replacer_0,
        bool_0,
        bool_0,
        illegal_use_of_scope_replacer_0,
    )


def test_case_12():
    var_0 = module_0.disallow_proxying()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(var_0, var_0)
    var_1 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_13():
    str_0 = "{cls_name}({name})"
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = "<ig+ax"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    scope_replacer_0 = module_0.ScopeReplacer(dict_0, dict_0, str_0)
    module_0.lazy_import(dict_0, scope_replacer_0)


def test_case_15():
    none_type_0 = None
    str_0 = "}l{B<\x0cg(="
    none_type_1 = None
    illegal_use_of_scope_replacer_0 = module_0.disallow_proxying()
    module_0.lazy_import(none_type_1, str_0, none_type_0)


def test_case_16():
    str_0 = "\n    Load (and returns) an env file specified by `filename` into the mapping `environ`.\n\n    >>> lines = ['TEST=${HOME}/yeee-$PATH', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(line, write_environ=dict())\n    OrderedDict([('TEST', '.../.../yeee-...:...'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_17():
    str_0 = "{cls_#me}(Dwmnamme)"
    module_0.lazy_import(str_0, str_0)


def test_case_18():
    str_0 = ""
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_19():
    str_0 = "\n    Mark that this module should not be imported until an\n    attribute is needed off of it.\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_20():
    str_0 = "\n    Load (and returns) an env file specified by `filename` into the mapping `environ`.\n\n    >>> lines = ['TES[=${HOME}/yeee-$PATH', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(line, write_environ=dict())\n    OrderedDict([('TEST', '.../.../yeee-...:...'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST'\n])\n    "
    module_0.lazy_import(str_0, str_0, str_0)
