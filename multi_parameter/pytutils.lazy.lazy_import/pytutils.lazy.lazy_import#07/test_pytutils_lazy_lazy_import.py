# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "&m9Uo2VJ|\t<NhBc\\<z"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_1():
    var_0 = module_0.disallow_proxying()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(var_0, var_0)


def test_case_2():
    str_0 = "ic<Hy\x0bL}"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_3():
    none_type_0 = None
    str_0 = "iYc<Hy\x0bL}"
    module_0.ImportReplacer(none_type_0, str_0, none_type_0)


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    str_0 = "ic<DH\x0bL\t}"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_6():
    import_processor_0 = module_0.disallow_proxying()


def test_case_7():
    str_0 = "iYc<Hy\x0bL}"
    module_0.lazy_import(str_0, str_0)


def test_case_8():
    none_type_0 = None
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(
        dict_0, none_type_0, dict_0, none_type_0
    )
    module_0.lazy_import(dict_0, import_replacer_0)


def test_case_9():
    str_0 = "Restore the original function to re.compile().\n\n  p It is safe to call reset_compile() multip\ne times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the origina; (it doesn't\n    track nesting level)\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_10():
    none_type_0 = None
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(
        dict_0, none_type_0, none_type_0, dict_0
    )
    module_0.lazy_import(none_type_0, import_replacer_0)


def test_case_11():
    str_0 = "Invalid logging config: %s"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_12():
    str_0 = "\n   Set that tracks the time a\x0cvalue was added.\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    str_0 = "Ujp$f(MAfF8"
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = ""
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = "E+`CsA%3xp=2((+ "
    var_0 = module_0.disallow_proxying()
    module_0.ImportReplacer(str_0, str_0, str_0, str_0, str_0)


def test_case_16():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_17():
    str_0 = "f&<n3daz_\t??OT#c/"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_18():
    str_0 = "Upon request import 'module_path' as the name 'module_name'.\n        When imported, prepare children to also be imported.\n\n        :param scope: The scope that objects should be imported into.\n            Typically this is globals()\n        :param name: The variable name. Often this is the same as the\n            module_path. 'bzrlib'\n        :param module_path: A list for the fully specified module path\n            ['bzrlib', 'foo', 'bar']\n        :param member: The member inside the module to import, often this is\n            None, indicating the module is being imported.\n        :param children: Children entries to be imported later.\n            This should be a map of children specifications.\n            ::\n            \n                {'foo':(['bzrlib', 'foo'], None,\n                    {'bar':(['bzrlib', 'foo', 'bar'], None {})})\n                }\n\n        Examples::\n\n            import foo => name='foo' module_path='foo',\n                          member=None, children={}\n            import foo.bar => name='foo' module_path='foo', member=None,\n                              children={'bar':(['foo', 'bar'], None, {}}\n            from foo import bar => name='bar' module_path='foo', member='bar'\n                                   children={}\n            from foo import bar, baz would get translated into 2 import\n            requests. On for 'name=bar' and one for 'name=baz'\n        "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_19():
    list_0 = []
    import_processor_0 = module_0.ImportProcessor()
    dict_0 = {
        import_processor_0: list_0,
        import_processor_0: import_processor_0,
        import_processor_0: import_processor_0,
    }
    import_replacer_0 = module_0.ImportReplacer(dict_0, import_processor_0, list_0)
    module_0.lazy_import(dict_0, import_replacer_0, import_processor_0)


def test_case_20():
    list_0 = module_0.disallow_proxying()
    import_processor_0 = module_0.ImportProcessor()
    dict_0 = {
        import_processor_0: list_0,
        import_processor_0: import_processor_0,
        import_processor_0: import_processor_0,
    }
    import_processor_1 = module_0.ImportProcessor()
    import_replacer_0 = module_0.ImportReplacer(dict_0, import_processor_0, list_0)
    var_0 = module_0.ScopeReplacer(dict_0, import_replacer_0, import_processor_1)
    complex_0 = -1335.37833 + 577.1j
    module_0.lazy_import(var_0, var_0, complex_0)


def test_case_21():
    none_type_0 = None
    dict_0 = {}
    dict_1 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, none_type_0, dict_1, dict_0)
    module_0.lazy_import(dict_0, import_replacer_0)
