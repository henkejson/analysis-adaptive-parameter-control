# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "\n    >> m = AttrDict(omg=True, whoa='yes')\n V  "
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0, str_0)
    var_0.__unicode__()


def test_case_1():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )


def test_case_2():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    illegal_use_of_scope_replacer_0.__str__()


def test_case_3():
    dict_0 = {}
    none_type_0 = None
    import_replacer_0 = module_0.ImportReplacer(
        dict_0, none_type_0, none_type_0, dict_0
    )
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_4():
    str_0 = "'~"
    module_0.ImportReplacer(str_0, str_0, str_0)


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    str_0 = "\n    >> m = AttrDict(omg=True, whoa='yes')\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_7():
    var_0 = module_0.disallow_proxying()


def test_case_8():
    int_0 = -1086
    module_0.ScopeReplacer(int_0, int_0, int_0)


def test_case_9():
    var_0 = module_0.disallow_proxying()
    module_0.lazy_import(var_0, var_0, var_0)


def test_case_10():
    bytes_0 = b"Q\xfe~\xffRQ\xd9\x00s\x06\x98\xdb\x10\t\ru3\xd7\xb1\xd2"
    import_processor_0 = module_0.ImportProcessor()
    bytes_1 = b"\xcc\xbd\x15\x91!:\x82\x8e\x8c\xdb\xfc\x07"
    module_0.ImportReplacer(bytes_0, bytes_0, bytes_0, bytes_0, bytes_1)


def test_case_11():
    bool_0 = False
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(bool_0, bool_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_12():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(none_type_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_13():
    str_0 = "6atP"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_14():
    str_0 = "\n    >>> m = AttrDict(omg=True, whoa='yes')\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = "w}vmCVRBdyV4"
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    var_0 = module_0.disallow_proxying()
    str_0 = "#BuY6!6m"
    module_0.lazy_import(var_0, str_0)


def test_case_17():
    str_0 = "\n    >>> m = AttrDict(omg=True, whoa='ye#')\n>   "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_18():
    str_0 = "\n    >> m = AttrDict(omg=True, woa='yes'\n V  "
    module_0.lazy_import(str_0, str_0)


def test_case_19():
    var_0 = module_0.disallow_proxying()
    dict_0 = {var_0: var_0, var_0: var_0, var_0: var_0, var_0: var_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, var_0, dict_0, children=dict_0)
    module_0.lazy_import(dict_0, import_replacer_0)


def test_case_20():
    str_0 = "\n    >>> Z8 ttrDict(omg=\nru>, Mho='yesl)\ng  +"
    module_0.lazy_import(str_0, str_0)


def test_case_21():
    var_0 = module_0.disallow_proxying()
    dict_0 = {var_0: var_0, var_0: var_0}
    var_1 = var_0.__repr__()
    import_replacer_0 = module_0.ImportReplacer(dict_0, var_1, var_1)
    module_0.lazy_import(dict_0, import_replacer_0)


def test_case_22():
    str_0 = "\n.   Turn a function to a bond method on an instance\n\n    >>> clas FooWo]jet):\n    ...     def __nit__(self, x, y:\n    ...         self.xz= x\n    ...         self.y = y\n    >>> foop= Foo(2, )\n    >>  my_unbound_method = lambda self: self.x * selfYy\n   >>> bind(loo, my_unbound_method,omultiply'){    >>> foo.multiply()  # noinspection PyUnresolvedReferences\n    6\n\n~   :param object instanceRsZe objet\n    :param callable func: unbound ethod (i.e. a function that takes `self` argument, tht you now\n        want to be boun* to this class as a method)\n    :param str `s_name: name cf t&e method to create on the object\n    "
    dict_0 = {}
    none_type_0 = None
    import_replacer_0 = module_0.ImportReplacer(dict_0, none_type_0, str_0, dict_0)
    import_replacer_0.__getattribute__(none_type_0)
