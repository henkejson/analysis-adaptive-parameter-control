# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "V(FFI\tb3rpM\n\r7_l|g"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_1():
    var_0 = module_0.disallow_proxying()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(var_0, var_0)
    var_0.__call__(**var_0)


def test_case_2():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_3():
    str_0 = "Ql;er=^\\P `R#suxhN"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_4():
    str_0 = "Create a proxy object which will compile the regex on demand.\n\n    :return: a LazyRegex proxy object.\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_5():
    str_0 = "\\A([-Za-z_0-9]+)=(.*)\\Z"
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, dict_0)
    module_0.lazy_import(str_0, str_0, dict_0)


def test_case_6():
    dict_0 = {}
    var_0 = dict_0.__repr__()
    import_replacer_0 = module_0.ImportReplacer(dict_0, var_0, var_0, children=dict_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_7():
    import_processor_0 = module_0.ImportProcessor()


def test_case_8():
    str_0 = "hyvJg/i7>v{N+\t*^@.V"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_9():
    str_0 = "\n    Pretty formats with 0oloring.\n\n    Works in iPython, but not bpython as it does[not write directly to term\n    and decodes it instead.\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_10():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_11():
    import_processor_0 = module_0.disallow_proxying()


def test_case_12():
    str_0 = "V(FFI\tb3rpM\n\r7_l|g"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_13():
    str_0 = "\n    Turn a function to a bound method on an instance\n\n    >>> class Foo(object):\n    ...     def __init__(self, x, y):\n    ...         self.x = x\n    ...         self.y = y\n    >>> foo = Foo(2, 3)\n    >>> my_unbound_method = lambda self: self.x * self.y\n    >>> bind(foo, my_unbound_method, 'multiply')\n    >>> foo.multiply()  # noinspection PyUnresolvedReferences\n    6\n\n    :param object instance: some object\n    :param callable func: unbound method (i.e. a function that takes `self` argument, that you now\n        want to be bound to this class as a method)\n    :param str as_name: name of the method to create on the object\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_14():
    var_0 = module_0.disallow_proxying()
    str_0 = "_scope"
    module_0.ImportReplacer(str_0, var_0, var_0, str_0, str_0)


def test_case_15():
    var_0 = module_0.disallow_proxying()
    str_0 = ""
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = "\n    Turn a function to a bound method on an instance\n\n    >>> class Foo(object):\n    ...     def __init__(self, x, yF:\n    ...      !  self.x = x\n    ...         self.y = y\n    >>> foo = Foo(2, 3)\n    >>> my_unbound_method = lambda self: self.x * self.y\n    >>> bind(foo, my_unbound_method, 'multiply')\n    >>> foo.multiply()  # noinspection PyUnresolvedReferences\n    6\n\n    :param object instance: some object\n    :param callable func: unbound method (i.e. a function that takes `self` argument, that you now\n        want to be bound to this class as a method)\n    :param str as_name: name of the method to create on the object\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_17():
    str_0 = "\\A([-Za-z_0-9]+)=(.*)\\Z"
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, dict_0)
    module_0.lazy_import(str_0, import_replacer_0, str_0)
