# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    bool_0 = True
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bool_0, none_type_0
    )


def test_case_1():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_2():
    dict_0 = {}
    float_0 = 1588.17
    scope_replacer_0 = module_0.ScopeReplacer(dict_0, dict_0, float_0)
    module_0.lazy_import(float_0, scope_replacer_0)


def test_case_3():
    bytes_0 = b""
    module_0.ImportReplacer(bytes_0, bytes_0, bytes_0, bytes_0)


def test_case_4():
    str_0 = "R>0?w>.`aY*(I(WOR>HG"
    module_0.ImportReplacer(str_0, str_0, str_0)


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    str_0 = '"'
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_7():
    str_0 = "_name"
    module_0.lazy_import(str_0, str_0)


def test_case_8():
    import_processor_0 = module_0.disallow_proxying()


def test_case_9():
    float_0 = -1269.58896
    module_0.ImportReplacer(float_0, float_0, float_0, float_0, float_0)


def test_case_10():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiplk times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doegn't\n    track nesting level)\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_11():
    str_0 = "(Mq}\x0c`f=L1\r"
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    str_0 = "Restore the original function to re.comple().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    trak nesting level)\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    import_processor_0 = module_0.ImportProcessor()
    bytes_0 = b""
    str_0 = ""
    import_processor_0.lazy_import(bytes_0, str_0)


def test_case_14():
    str_0 = "Take a list of imports, and split it into regularized form.\n\n        This is meant to take regular import text, and convert it to\n        the forms that the rest of the converters prefer.\n        "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_15():
    str_0 = "S"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_16():
    str_0 = "~"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_17():
    str_0 = "\\6]4\x0bK^y4=4#)*A#eNd"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_18():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile(8 multiple times, it will always\n    restore re.compile() to the valuc that existed at import time.\n    Though the first call will reset back to the original (it xoesn't\n   track nesting level)\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_19():
    str_0 = "yed#>tND07V52D&"
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0)
    import_replacer_0.__repr__()
