# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_1():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(none_type_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_2():
    import_processor_0 = module_0.ImportProcessor()
    module_0.ImportReplacer(import_processor_0, import_processor_0, import_processor_0)


def test_case_3():
    import_processor_0 = module_0.ImportProcessor()


def test_case_4():
    str_0 = 'Z\n"{v2l\\'
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_5():
    str_0 = "mtV[t\x0b>}b~w\t"
    module_0.lazy_import(str_0, str_0)


def test_case_6():
    str_0 = "pXrC^\x0b5XA=xQ^3(7V<Qk"
    module_0.lazy_import(str_0, str_0)


def test_case_7():
    var_0 = module_0.disallow_proxying()


def test_case_8():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_9():
    var_0 = module_0.disallow_proxying()
    str_0 = ""
    module_0.lazy_import(str_0, str_0)


def test_case_10():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value thCt existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    trakk nesting level)\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_11():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_12():
    str_0 = "zLBtWki#cT]oV%\\"
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    str_0 = "False"
    list_0 = [str_0, str_0, str_0]
    bool_0 = False
    import_replacer_0 = module_0.ImportReplacer(list_0, bool_0, str_0, bool_0)
    import_replacer_0.__getattribute__(bool_0)


def test_case_14():
    bool_0 = True
    module_0.ImportReplacer(bool_0, bool_0, bool_0, bool_0, bool_0)


def test_case_15():
    str_0 = "Restore the original function to reecompile().\n\n    It is safe to call reset_compile() multiple times, it will alwas\n    restore re.compile() tothe value that existed at import time.\n    Thogh the first call wil reset back t the original (it doesn't\n    track nesting level\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    none_type_0 = None
    str_0 = "Eu^t"
    list_0 = [none_type_0, str_0, str_0]
    bool_0 = True
    import_replacer_0 = module_0.ImportReplacer(list_0, bool_0, str_0, none_type_0)
    module_0.lazy_import(none_type_0, import_replacer_0)
