# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    bool_0 = True
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(bool_0, bool_0)
    var_0 = module_0.disallow_proxying()


def test_case_1():
    bool_0 = False
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(bool_0, bool_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_2():
    str_0 = "(debug shel)"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    module_0.lazy_import(str_0, str_0, var_0)


def test_case_3():
    int_0 = 263
    set_0 = {int_0}
    module_0.ImportReplacer(int_0, set_0, set_0, set_0, int_0)


def test_case_4():
    str_0 = "\n    Parses env file content.\n\n    From honcho.\n\n    >>> lines = ['TLST=${HOME}/yee', 'THISIj=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_fine(lines, wr\rte_environ=dict()\n    OrderedDict([('TEST', '.../yeee'),\n             ('THISIS', '.../a/test'),\n            ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n\n    "
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0, dict_0)


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    str_0 = "bchp{)g<LHHk5vV"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_7():
    str_0 = "bchp{)g<LHHk5vV"
    module_0.lazy_import(str_0, str_0)


def test_case_8():
    tuple_0 = module_0.disallow_proxying()


def test_case_9():
    bool_0 = False
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(bool_0, bool_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_10():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    dict_1 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, bool_0, dict_0, bool_0, bool_0)
    import_replacer_0.__getattribute__(dict_1)


def test_case_11():
    str_0 = "H#YUH%LmLFEr[~#&b"
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    str_0 = "\nUtilities to work with files.\n"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__str__()


def test_case_13():
    bool_0 = False
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(bool_0, bool_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_14():
    str_0 = "\x0b+t4&(\nO#^#bbrv"
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = "(debug shell)"
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = "\n    Parses env file content.\n\n    From honcho.\n\n    >>> lines = ['TEST=${HOME}/yeee', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../yeee'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_17():
    str_0 = "\nUtilities to work with files.\n"
    module_0.lazy_import(str_0, str_0)


def test_case_18():
    import_processor_0 = module_0.ImportProcessor()
    str_0 = ""
    import_processor_0.lazy_import(import_processor_0, str_0)
