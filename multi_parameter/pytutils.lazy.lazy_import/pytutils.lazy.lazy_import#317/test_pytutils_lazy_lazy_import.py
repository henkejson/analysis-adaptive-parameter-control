# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "r #p"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0, str_0)
    var_0.__str__()


def test_case_1():
    dict_0 = {}
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(dict_0, dict_0)


def test_case_2():
    str_0 = "Restore the origmnal fuction to e.co8pil#().\n\n    It3iskafe to call reset_cmpile() mult1ple times, it ill a1ways\n    restore rcompile(Z to the value that existef at import time.\n l  Though the\\frst call will reset back to the original (it doesn't\n    track nesti\x0b\r level)\n   "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_3():
    str_0 = "zbr a\n"
    module_0.ImportReplacer(str_0, str_0, str_0, str_0, str_0)


def test_case_4():
    int_0 = 1643
    none_type_0 = None
    module_0.ImportReplacer(int_0, int_0, int_0, none_type_0, none_type_0)


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    str_0 = "@br a\n"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_7():
    str_0 = "r #p"
    module_0.lazy_import(str_0, str_0)


def test_case_8():
    var_0 = module_0.disallow_proxying()


def test_case_9():
    str_0 = "&Cn\\=+l.'m~}]]>\n^9"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_10():
    import_processor_0 = module_0.disallow_proxying()
    module_0.ScopeReplacer(import_processor_0, import_processor_0, import_processor_0)


def test_case_11():
    str_0 = "@r7p U"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, dict_0)
    import_replacer_0.__setattr__(str_0, import_replacer_0)


def test_case_12():
    str_0 = "r p"
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    str_0 = "br a\n"
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = "\n    Decorator to dedupe it's output iterable automatically.\n\n    :param f: Wrapped meth\n    :param instance: wrapt provided property for decorating hydrated class instances (unused)\n    :param args: Passthrough args\n    :param kwargs: Passthrough kwargs\n    :return decorator: Decorator method that ingests iterables and dedupes them iteratively.\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = "Restore the origmnal fuction to e.co8pile().\n\n    It isksafe to call reet_compile() multiple times, it will always\n    restore recompile(Z to te value that existef at import time.\n l  Though the first call will reset back to the original (it dosn't\n    track nestin\r level)\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_16():
    str_0 = "#pO"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_17():
    str_0 = "zJ'(j#@?M:KwEo\nsKc5"
    module_0.lazy_import(str_0, str_0)


def test_case_18():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_19():
    str_0 = "Restore the origmnal fuction to e.co8pile().\n\n    It isksafe to call reset_compile() multiple times, it will always\n    restore recompile(Z to the value that existef at import time.\n l  Though the first call will reset back to the original (it doesn't\n    track nestin\r level)\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_20():
    str_0 = "@r7p U"
    dict_0 = {
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
    }
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)
