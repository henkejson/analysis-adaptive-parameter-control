# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    none_type_0 = None
    var_0 = module_0.IllegalUseOfScopeReplacer(none_type_0, none_type_0)


def test_case_1():
    str_0 = 't#E^|wtZrXw("'
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__str__()


def test_case_2():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(none_type_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_3():
    str_0 = "cYP}"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_4():
    str_0 = "7mNc>H>*!s=0!B^ \x0caL"
    list_0 = [str_0, str_0, str_0, str_0]
    bool_0 = False
    import_replacer_0 = module_0.ImportReplacer(list_0, bool_0, str_0, str_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_5():
    bool_0 = False
    none_type_0 = None
    module_0.ImportReplacer(bool_0, none_type_0, bool_0)


def test_case_6():
    import_processor_0 = module_0.ImportProcessor()


def test_case_7():
    str_0 = 't#EL|1ZXw("'
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_8():
    var_0 = module_0.disallow_proxying()


def test_case_9():
    none_type_0 = None
    module_0.lazy_import(none_type_0, none_type_0)


def test_case_10():
    str_0 = "Make lazy_compile the default compile mode for regex compilation.\n\n    This overrides re.compile with lazy_compile. To restore the original\n    functionality, call reset_compile().\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_11():
    str_0 = 't#EL|tZrXw("'
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_12():
    bool_0 = True
    module_0.ImportReplacer(bool_0, bool_0, bool_0, bool_0, bool_0)


def test_case_13():
    str_0 = 'tpEL|tZrXw("'
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = '#z|tZpHw|"'
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = "Make lazy_compile the default compile od! forregex compilation.\n\n    This overrides re.compile with&lazy_compile. To resto(e the original\n    functionaliy, call resetcompile()s\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_16():
    str_0 = "Create lazy imports for all of the imports in text.\n\n    This is typically used as something like::\n\n        from bzrlib.lazy_import import lazy_import\n        lazy_import(globals(), '''\n        from bzrlib import (\n            foo,\n            bar,\n            baz,\n            )\n        import bzrlib.branch\n        import bzrlib.transport\n        ''')\n\n    Then 'foo, bar, baz' and 'bzrlib' will exist as lazy-loaded\n    objects which will be replaced with a real object on first use.\n\n    In general, it is best to only load modules in this way. This is\n    because other objects (functions/classes/variables) are frequently\n    used without accessing a member, which means we cannot tell they\n    have been used.\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_17():
    str_0 = "This converts a 'from foo import bar' string into an import map.\n\n        :param from_str: The import string to process\n        "
    list_0 = [str_0, str_0, str_0, str_0]
    bool_0 = False
    import_replacer_0 = module_0.ImportReplacer(list_0, bool_0, str_0, children=list_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0, list_0)
