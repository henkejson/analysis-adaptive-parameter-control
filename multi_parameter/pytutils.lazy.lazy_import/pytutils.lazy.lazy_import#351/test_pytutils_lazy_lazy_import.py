# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    bool_0 = True
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bool_0, none_type_0
    )


def test_case_1():
    int_0 = -632
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(int_0, int_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_2():
    str_0 = "\n    Loads (and returnsX an env fiZe specified by `filename` into the mapping `eniron`.\n\nH   >>> lines =5['TEST=${HOME}/yeee-$PATH', 'THISIS=~//test, 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT\r}XIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../.../yeee-...:...'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n           .  '.../swaggins/$NONEXISTEN%_VAR_THAT_DOES_NOT_EXIST')])\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    module_0.lazy_import(var_0, str_0)


def test_case_3():
    import_processor_0 = module_0.ImportProcessor()
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(
        dict_0, import_processor_0, import_processor_0, import_processor_0
    )
    module_0.lazy_import(import_processor_0, import_replacer_0)


def test_case_4():
    import_processor_0 = module_0.disallow_proxying()
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(
        dict_0, import_processor_0, import_processor_0, import_processor_0
    )
    module_0.lazy_import(import_processor_0, import_replacer_0)


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    str_0 = "\rlt>*V N"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_7():
    str_0 = "zQHHd&!IS_nl|"
    module_0.lazy_import(str_0, str_0)


def test_case_8():
    str_0 = "\n       :param strprefix: Prefix to add/remove from keys.\n        :param collections.MutableMapping Kapping Dict-like object to wrap\n        :param bool fanc-_repr: If True,(show ancy repr, otherwise just show dict's\n        :param bool dictify_repr: If True, cast mapping to a ict on repr\n        "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_9():
    var_0 = module_0.disallow_proxying()


def test_case_10():
    str_0 = "\rlt>*V N"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    module_0.lazy_import(var_0, str_0)


def test_case_11():
    str_0 = "\rlt>*V N"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    str_0 = "wV=<"
    none_type_0 = None
    str_1 = "-m(F"
    list_0 = [str_0, str_1]
    module_0.ImportReplacer(str_0, none_type_0, str_1, list_0, str_1)


def test_case_13():
    str_0 = ""
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_14():
    str_0 = "}@cWy#`]EWYui=>5"
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = "\n    Loads (and returns) an env file specified by `filename` into the mapping `environ`.\n\n    >>> lines = ['TEST=${HOME}/yeee-$PATH', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../.../yeee-...:...'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    import_processor_0 = module_0.ImportProcessor()
    dict_0 = {}
    dict_1 = {}
    import_replacer_0 = module_0.ImportReplacer(
        dict_1, import_processor_0, dict_0, import_processor_0, dict_0
    )
    module_0.lazy_import(import_processor_0, import_replacer_0, dict_0)


def test_case_17():
    var_0 = module_0.disallow_proxying()
    dict_0 = {}
    dict_1 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_1, var_0, dict_0, var_0, dict_0)
    module_0.lazy_import(dict_0, import_replacer_0, dict_1)


def test_case_18():
    import_processor_0 = module_0.ImportProcessor()
    dict_0 = {}
    dict_1 = {}
    none_type_0 = None
    import_replacer_0 = module_0.ImportReplacer(dict_1, import_processor_0, dict_1)
    none_type_1 = None
    scope_replacer_0 = module_0.ScopeReplacer(dict_0, import_replacer_0, none_type_1)
    scope_replacer_0.__setattr__(none_type_0, none_type_0)
