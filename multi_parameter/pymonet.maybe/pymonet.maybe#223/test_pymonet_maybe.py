# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import builtins as module_1


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    dict_0 = {}
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.ap(bool_0)
    var_2 = maybe_0.ap(dict_0)
    var_3 = var_2.bind(dict_0)
    var_4 = var_3.bind(var_0)
    bool_1 = var_2.__eq__(var_4)
    var_5 = var_2.map(var_2)
    var_6 = maybe_0.to_try()
    var_7 = maybe_0.to_either()
    var_8 = maybe_0.to_lazy()
    var_9 = var_5.to_box()
    var_10 = maybe_0.to_box()
    var_11 = maybe_0.to_validation()
    var_12 = var_5.get_or_else(var_10)
    var_11.map(var_7)


def test_case_3():
    str_0 = "\n    In mathematics, a semigroup is an algebraic structure\n    consisting of a set together with an associative binary operation.\n    A semigroup generalizes a monoid in that there might not exist an identity element.\n    It also (originally) generalized a group (a monoid with all inverses)\n    to a type where every element did not have to have an inverse, this the name semigroup.\n    "
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.bind(bool_0)
    bool_1 = maybe_0.__eq__(str_0)
    var_1 = maybe_0.to_either()
    bool_2 = False
    maybe_1 = module_0.Maybe(str_0, bool_2)


def test_case_4():
    bytes_0 = b"9T\x8b\x18\x89\xed"
    set_0 = {bytes_0, bytes_0}
    none_type_0 = None
    maybe_0 = module_0.Maybe(bytes_0, set_0)
    maybe_1 = module_0.Maybe(none_type_0, maybe_0)
    var_0 = maybe_0.get_or_else(set_0)
    maybe_2 = module_0.Maybe(set_0, none_type_0)
    var_1 = maybe_0.to_either()
    var_2 = maybe_0.map(var_1)
    maybe_2.bind(var_1)


def test_case_5():
    str_0 = "SbW%"
    str_1 = "Fcm0A C/"
    dict_0 = {str_1: str_1, str_1: str_1, str_1: str_1}
    bool_0 = False
    maybe_0 = module_0.Maybe(dict_0, bool_0)
    maybe_0.map(str_0)


def test_case_6():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.bind(var_0)
    var_2 = maybe_0.bind(var_0)


def test_case_7():
    float_0 = 2052.72145
    int_0 = 0
    maybe_0 = module_0.Maybe(int_0, int_0)
    maybe_0.bind(float_0)


def test_case_8():
    none_type_0 = None
    none_type_1 = None
    int_0 = -1475
    maybe_0 = module_0.Maybe(none_type_1, int_0)
    maybe_1 = module_0.Maybe(maybe_0, maybe_0)
    var_0 = maybe_1.ap(none_type_0)
    var_1 = var_0.to_try()
    var_1.to_either()


def test_case_9():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    maybe_0 = module_0.Maybe(dict_0, dict_0)
    var_0 = maybe_0.bind(bool_0)
    bytes_0 = b"\xc7\xf0\xfc\xbd\x08\xcec\xf0\x07\x81\xa8\xf2"
    bool_1 = var_0.__eq__(bytes_0)
    var_1 = var_0.to_try()
    var_2 = var_0.filter(maybe_0)
    var_3 = var_0.to_validation()
    var_4 = maybe_0.get_or_else(bool_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(bool_1, none_type_0)
    var_5 = var_2.map(var_0)
    var_6 = var_0.ap(var_2)
    var_7 = var_5.to_validation()
    var_8 = var_2.to_lazy()
    var_9 = var_0.map(var_7)
    var_10 = maybe_1.to_validation()
    maybe_1.ap(dict_0)


def test_case_10():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    maybe_0 = module_0.Maybe(dict_0, dict_0)
    var_0 = maybe_0.bind(bool_0)
    bytes_0 = b"\xc7\xf0\xfc\xbd\x08\xcec\xf0\x07\x81\xa8\xf2"
    bool_1 = var_0.__eq__(bytes_0)
    var_1 = var_0.to_try()
    var_2 = var_0.filter(maybe_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(bool_1, none_type_0)
    var_3 = var_2.map(var_0)
    var_4 = var_0.ap(var_2)
    var_5 = var_3.to_validation()
    var_6 = var_2.to_lazy()
    var_7 = var_0.to_box()
    maybe_1.filter(bool_1)


def test_case_11():
    str_0 = "q\n(];:"
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    maybe_0.filter(str_0)


def test_case_12():
    str_0 = "q\n(];:"
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.get_or_else(bool_0)
    maybe_0.filter(var_0)


def test_case_13():
    bool_0 = False
    bool_1 = True
    dict_0 = {bool_1: bool_1}
    maybe_0 = module_0.Maybe(dict_0, dict_0)
    var_0 = maybe_0.bind(bool_0)
    var_1 = maybe_0.filter(var_0)
    var_2 = maybe_0.bind(var_1)
    var_3 = var_0.bind(bool_1)
    var_4 = var_0.to_try()
    var_5 = var_0.filter(maybe_0)
    var_6 = var_0.to_validation()
    var_7 = maybe_0.get_or_else(bool_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(bool_1, none_type_0)
    var_8 = var_5.map(var_0)
    var_9 = maybe_1.to_either()
    var_10 = var_1.to_lazy()
    var_11 = maybe_1.to_box()
    maybe_1.filter(var_7)


def test_case_14():
    bool_0 = False
    list_0 = []
    bool_1 = True
    maybe_0 = module_0.Maybe(list_0, bool_1)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_lazy()
    var_2 = var_1.map(bool_0)


def test_case_15():
    str_0 = "+"
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_box()
    var_0.get_or_else(str_0)


def test_case_16():
    object_0 = module_1.object()
    maybe_0 = module_0.Maybe(object_0, object_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.map(maybe_0)
    var_2 = var_0.to_try()
    var_2.to_try()


def test_case_17():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    maybe_0 = module_0.Maybe(dict_0, dict_0)
    var_0 = maybe_0.bind(bool_0)
    bytes_0 = b"\xc7\xf0\xfc\xbd\x08\xcec\xf0\x07\x81\xa8\xf2"
    var_1 = var_0.bind(bool_0)
    bool_1 = var_1.__eq__(bytes_0)
    var_2 = var_0.to_try()
    var_3 = var_0.filter(maybe_0)
    var_4 = var_0.to_validation()
    var_5 = maybe_0.get_or_else(bool_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(bool_1, none_type_0)
    var_6 = var_3.map(var_0)
    var_7 = var_0.ap(var_3)
    var_8 = var_6.to_validation()
    var_9 = maybe_1.to_lazy()
    var_10 = var_9.to_box()
    bool_2 = False
    var_11 = maybe_0.get_or_else(bool_2)
    maybe_1.filter(var_11)


def test_case_18():
    bool_0 = False
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_try()
    var_0.filter(bool_0)


def test_case_19():
    complex_0 = -1041.3 - 3204.424j
    object_0 = module_1.object()
    bool_0 = True
    maybe_0 = module_0.Maybe(object_0, bool_0)
    var_0 = maybe_0.map(complex_0)
    bytes_0 = b"\xb6\xc4T\x97\\e\xb3m"
    bool_1 = False
    maybe_1 = module_0.Maybe(bool_1, bool_1)
    var_1 = maybe_1.to_validation()
    var_2 = var_1.to_try()
    var_3 = maybe_1.to_validation()
    var_2.ap(bytes_0)


def test_case_20():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    maybe_0 = module_0.Maybe(dict_0, dict_0)
    var_0 = maybe_0.bind(bool_0)
    var_1 = var_0.to_lazy()
    bytes_0 = b"\xc7\xf0\xfc\xbd\x08\xcec\xf0\x07\x81\xa8\xf2"
    var_2 = var_0.bind(bool_0)
    bool_1 = var_2.__eq__(bytes_0)
    var_3 = var_0.to_try()
    var_4 = var_0.filter(maybe_0)
    var_5 = maybe_0.get_or_else(bool_0)
    var_6 = var_1.bind(bytes_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(bool_1, none_type_0)
    var_7 = var_0.to_box()
    bool_2 = var_4.__eq__(maybe_1)
    var_8 = maybe_0.to_try()
    var_8.to_box()


def test_case_21():
    bool_0 = False
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_1, bool_1)
    dict_0 = {bool_1: bool_1}
    var_0 = maybe_0.ap(maybe_0)
    maybe_1 = module_0.Maybe(dict_0, dict_0)
    var_1 = maybe_1.bind(bool_0)
    var_2 = maybe_1.bind(dict_0)
    bytes_0 = b"\xc7\xf0\xfc\xbd\x08\xcec\xf0\x07\x81\xa8\xf2"
    var_3 = var_1.bind(bool_1)
    bool_2 = var_3.__eq__(bytes_0)
    var_4 = var_0.to_validation()
    var_5 = var_1.to_try()
    var_6 = var_1.filter(maybe_1)
    var_7 = var_1.to_validation()
    var_8 = var_2.map(var_4)
    maybe_2 = module_0.Maybe(var_5, bool_0)
    var_9 = var_5.map(var_2)
    var_10 = var_3.to_either()
    bool_3 = False
    maybe_3 = module_0.Maybe(maybe_2, bool_3)
    maybe_4 = module_0.Maybe(var_7, var_3)
    bool_4 = maybe_3.__eq__(maybe_2)
    var_11 = var_0.to_lazy()
    var_12 = var_10.to_box()
    maybe_2.filter(bool_2)
