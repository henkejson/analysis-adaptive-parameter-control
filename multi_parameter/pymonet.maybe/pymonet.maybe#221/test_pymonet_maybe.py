# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import builtins as module_1


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    none_type_0 = None
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    maybe_0 = module_0.Maybe(dict_0, bool_0)
    object_0 = module_1.object()
    bool_1 = maybe_0.__eq__(object_0)
    bool_2 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.to_try()
    var_2 = var_0.to_validation()
    var_3 = maybe_0.to_validation()
    maybe_0.bind(none_type_0)


def test_case_3():
    none_type_0 = None
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    maybe_0 = module_0.Maybe(dict_0, bool_0)
    object_0 = module_1.object()
    bool_1 = maybe_0.__eq__(object_0)
    var_0 = maybe_0.to_lazy()
    maybe_0.filter(none_type_0)


def test_case_4():
    float_0 = 261.25
    maybe_0 = module_0.Maybe(float_0, float_0)
    var_0 = maybe_0.ap(float_0)
    var_1 = maybe_0.map(var_0)
    var_2 = maybe_0.to_lazy()


def test_case_5():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.map(maybe_0)


def test_case_6():
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_box()
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    var_1 = maybe_1.bind(maybe_1)
    var_2 = maybe_1.get_or_else(maybe_1)
    var_3 = maybe_1.filter(var_2)


def test_case_7():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_either()
    maybe_0.bind(maybe_0)


def test_case_8():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_box()
    maybe_0.ap(none_type_0)


def test_case_9():
    str_0 = "tp+|q,W8qhL8\x0cX/!Q4"
    str_1 = "\n        Returns new ImmutableList with each element mapped into\n        result of argument called with each element of ImmutableList\n\n        :param fn: function to call with ImmutableList value\n        :type fn: Function(A) -> B\n        :returns: ImmutableList[B]\n        "
    str_2 = "}l"
    maybe_0 = module_0.Maybe(str_2, str_2)
    var_0 = maybe_0.map(str_1)
    var_1 = var_0.ap(str_1)
    var_2 = var_1.filter(str_0)
    var_3 = var_2.to_box()


def test_case_10():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = False
    var_0 = maybe_0.get_or_else(none_type_0)
    maybe_0.filter(bool_0)


def test_case_11():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.get_or_else(none_type_0)


def test_case_12():
    str_0 = "tp+|q,W8qhL8\x0cX/!4"
    str_1 = "\n        Returns new ImmutableList with each element mapped into\n        result of argument called with each element of ImmutableList\n\n        :param fn: function to call with ImmutableList value\n        :type fn: Function(A) -> B\n        :returns: ImmutableList[B]\n        "
    str_2 = "}l"
    maybe_0 = module_0.Maybe(str_2, str_2)
    var_0 = maybe_0.map(str_1)
    var_1 = var_0.to_either()
    var_1.filter(str_0)


def test_case_13():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_try()
    var_1.to_either()


def test_case_14():
    int_0 = 660
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.to_box()
    var_0.to_box()


def test_case_15():
    bytes_0 = b"\xc1R]\xdc\xc3J\x10\t0\x16=7\xca\xdd"
    none_type_0 = None
    maybe_0 = module_0.Maybe(bytes_0, none_type_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_try()
    var_1.to_either()


def test_case_16():
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.bind(bool_0)
    var_1 = var_0.to_try()
    float_0 = 561.2
    bool_1 = True
    maybe_1 = module_0.Maybe(float_0, bool_1)
    var_2 = maybe_1.get_or_else(bool_0)


def test_case_17():
    int_0 = -3060
    float_0 = -158.725
    bool_0 = False
    maybe_0 = module_0.Maybe(float_0, bool_0)
    var_0 = maybe_0.to_try()
    var_0.map(int_0)


def test_case_18():
    bytes_0 = b"CxT\xa3\xc1\x05.e\x8a9\t\xdd$\x85\xf2~\xd4q\xc3\x84"
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.map(var_0)
    var_2 = maybe_0.to_lazy()
    bool_1 = var_2.__eq__(maybe_0)
    var_3 = maybe_0.to_lazy()
    var_4 = var_2.to_either()
    var_5 = var_2.to_box()
    var_6 = var_3.ap(var_3)
    var_2.filter(var_5)


def test_case_19():
    none_type_0 = None
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    maybe_0 = module_0.Maybe(dict_0, bool_0)
    object_0 = module_1.object()
    bool_1 = maybe_0.__eq__(object_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.to_try()
    var_2 = var_0.to_validation()
    var_3 = maybe_0.to_validation()
    maybe_0.bind(none_type_0)


def test_case_20():
    int_0 = 205
    bool_0 = False
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_try()
    var_1.to_try()


def test_case_21():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.map(maybe_0)
    var_2 = maybe_0.get_or_else(maybe_0)
    bool_1 = maybe_0.__eq__(var_2)
    var_3 = maybe_0.get_or_else(var_2)
    var_4 = maybe_0.map(none_type_0)
    var_5 = var_2.to_lazy()
    var_6 = var_4.to_box()
    var_7 = var_4.to_validation()
    var_8 = var_6.to_lazy()
    var_7.map(var_2)


def test_case_22():
    bytes_0 = b"\xf2\x19\xb9\xcd\x7f[\x08\x1d\xb5`\xe7\x85\xd4|\xd3\xd37\x1f\xdf\xdc"
    list_0 = [bytes_0, bytes_0]
    tuple_0 = (bytes_0, list_0)
    maybe_0 = module_0.Maybe(tuple_0, tuple_0)
    str_0 = ":{^"
    var_0 = maybe_0.to_try()
    bytes_1 = b"\xda!6cO\xe1\xb2h<\xe6\xd4\x86\xae\xd8"
    maybe_1 = module_0.Maybe(bytes_1, bytes_1)
    var_1 = maybe_1.bind(str_0)
    var_2 = maybe_0.ap(var_0)
    bool_0 = var_2.__eq__(maybe_0)
    var_3 = var_1.to_validation()
    var_4 = maybe_1.to_try()
    var_3.filter(bytes_0)
