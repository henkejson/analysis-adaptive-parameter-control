# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.ap(bool_0)
    var_1 = maybe_0.filter(bool_0)
    var_2 = var_1.to_validation()
    var_3 = var_1.get_or_else(var_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    maybe_1 = module_0.Maybe(maybe_0, bool_0)


def test_case_3():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_lazy()
    bool_1 = maybe_0.__eq__(var_0)
    var_0.get_or_else(bool_0)


def test_case_4():
    int_0 = 630
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.bind(var_0)
    var_2 = var_1.map(int_0)


def test_case_5():
    str_0 = '<PIG"af7;7'
    bool_0 = False
    dict_0 = {str_0: str_0, bool_0: bool_0, str_0: str_0, str_0: str_0}
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_1, bool_1)
    maybe_0.map(dict_0)


def test_case_6():
    str_0 = "]^17yAV;)m_-0{X&"
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.map(var_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_2 = maybe_1.get_or_else(none_type_0)
    maybe_1.bind(none_type_0)


def test_case_7():
    str_0 = "\n        :param value: value to store in Box\n        :type value: Any\n        "
    tuple_0 = (str_0,)
    dict_0 = {}
    maybe_0 = module_0.Maybe(dict_0, dict_0)
    maybe_0.ap(tuple_0)


def test_case_8():
    str_0 = "F8IC7v4T)Pi>$K"
    float_0 = -1024.3
    bool_0 = True
    maybe_0 = module_0.Maybe(float_0, bool_0)
    var_0 = maybe_0.filter(str_0)


def test_case_9():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.ap(bool_0)
    var_1 = maybe_0.filter(bool_0)
    var_2 = var_1.to_validation()
    var_3 = maybe_0.to_try()
    var_4 = var_1.get_or_else(var_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    maybe_1 = module_0.Maybe(var_0, bool_0)
    var_5 = var_0.to_either()


def test_case_10():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.ap(bool_0)
    var_1 = maybe_0.filter(bool_0)
    var_2 = var_1.to_validation()
    var_3 = maybe_0.to_try()
    var_4 = var_1.to_lazy()
    var_5 = var_1.get_or_else(var_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    var_6 = var_1.to_try()
    bool_2 = False
    var_7 = var_1.to_validation()
    maybe_1 = module_0.Maybe(var_2, bool_2)
    var_8 = maybe_1.to_either()
    var_4.get_or_else(var_3)


def test_case_11():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.ap(bool_0)
    var_1 = var_0.ap(bool_0)
    var_2 = var_1.to_box()
    var_3 = maybe_0.to_try()
    var_4 = var_0.to_validation()
    var_5 = var_1.to_lazy()
    var_6 = var_1.get_or_else(var_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    var_2.get_or_else(maybe_0)


def test_case_12():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_try()
    generic_0 = module_1.Generic()
    none_type_1 = None
    maybe_1 = module_0.Maybe(none_type_1, none_type_1)
    maybe_1.map(generic_0)


def test_case_13():
    float_0 = 2139.282
    bytes_0 = b"\x9f\xb5\xdaUg\xfc:\tXE\x82-L"
    tuple_0 = (bytes_0,)
    bool_0 = True
    maybe_0 = module_0.Maybe(tuple_0, bool_0)
    var_0 = maybe_0.to_try()
    var_1 = var_0.bind(float_0)


def test_case_14():
    str_0 = "nC#lR"
    list_0 = [str_0, str_0]
    bool_0 = False
    maybe_0 = module_0.Maybe(list_0, bool_0)
    var_0 = maybe_0.to_try()


def test_case_15():
    bytes_0 = b"\xf5`\xae"
    bool_0 = False
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_validation()
    bool_2 = var_0.__eq__(bytes_0)


def test_case_16():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    complex_0 = -1602.174 + 3926.23j
    bool_0 = False
    maybe_1 = module_0.Maybe(complex_0, bool_0)
    var_0 = maybe_1.to_either()
    var_1 = maybe_0.to_lazy()
    var_2 = var_1.to_box()
    var_3 = maybe_1.to_validation()
    bool_1 = maybe_0.__eq__(bool_0)
    maybe_1.bind(var_2)


def test_case_17():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.filter(bool_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(bool_1, bool_1)
    maybe_1.filter(bool_0)


def test_case_18():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(bool_1, maybe_0)
    var_0 = maybe_1.to_lazy()
    bool_2 = maybe_0.__eq__(bool_1)
    var_1 = maybe_0.get_or_else(maybe_0)
    var_2 = var_0.to_validation()
    var_2.bind(var_0)


def test_case_19():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.ap(bool_0)
    str_0 = "\n        :param semigroup: other semigroup to concat\n        :type semigroup: First[B]\n        :returns: new First with first value\n        :rtype: First[A]\n        "
    maybe_1 = module_0.Maybe(str_0, str_0)
    maybe_2 = module_0.Maybe(var_0, maybe_0)
    var_1 = maybe_0.ap(bool_0)
    var_2 = var_0.bind(var_0)
    var_3 = var_2.ap(maybe_0)
    var_4 = var_3.to_validation()
    bool_1 = var_2.__eq__(maybe_2)
    var_5 = maybe_0.map(var_0)
    var_4.filter(var_4)


def test_case_20():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    int_0 = 1319
    bool_1 = False
    maybe_1 = module_0.Maybe(int_0, bool_1)
    bool_2 = maybe_1.__eq__(maybe_0)
    maybe_1.filter(maybe_1)
