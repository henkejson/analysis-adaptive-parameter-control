# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1


def test_case_0():
    int_0 = 3364
    maybe_0 = module_0.Maybe(int_0, int_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.to_try()
    maybe_0.bind(var_1)


def test_case_3():
    bytes_0 = b"-\x1aB\x848K\x936f\xdd\\\xbb\xcc\xf8\x9a7"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.bind(var_0)
    bool_0 = var_1.__eq__(maybe_0)
    var_2 = maybe_0.to_box()
    var_3 = var_0.to_try()
    int_0 = 3364
    maybe_1 = module_0.Maybe(int_0, int_0)
    var_4 = maybe_0.to_either()
    bool_1 = maybe_0.__eq__(var_3)


def test_case_4():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.ap(maybe_0)
    var_2 = maybe_0.ap(bool_0)
    var_0.map(var_0)


def test_case_5():
    bytes_0 = b"\x07S\xba\x1c\xf0v\xfe\x99\\+\xa3\xd4\x07Y"
    bool_0 = True
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    maybe_0.map(bytes_0)


def test_case_6():
    generic_0 = module_1.Generic()
    complex_0 = 262.247 - 1363j
    bool_0 = False
    maybe_0 = module_0.Maybe(complex_0, bool_0)
    maybe_0.bind(generic_0)


def test_case_7():
    bytes_0 = b"H\xdd\xf94\xa8-\xf8=`%\xbb\xb1%\xc9\x7f\x84"
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.ap(bytes_0)
    var_1 = var_0.to_try()
    var_2 = maybe_0.to_box()
    var_3 = maybe_0.ap(var_1)
    var_4 = var_0.filter(var_3)


def test_case_8():
    none_type_0 = None
    list_0 = []
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_either()
    maybe_0.ap(list_0)


def test_case_9():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_try()
    maybe_0.filter(var_0)


def test_case_10():
    str_0 = "X'T]eP0"
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = True
    maybe_1 = module_0.Maybe(maybe_0, bool_0)
    var_0 = maybe_1.get_or_else(str_0)
    var_0.to_box()


def test_case_11():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    var_1 = maybe_0.to_lazy()
    maybe_0.filter(var_0)


def test_case_12():
    complex_0 = 1344.84805 + 2755.25j
    maybe_0 = module_0.Maybe(complex_0, complex_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_try()
    var_1.ap(complex_0)


def test_case_13():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = maybe_0.__eq__(none_type_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.to_box()
    maybe_0.filter(var_1)


def test_case_14():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_lazy()
    bool_1 = False
    var_1 = maybe_0.to_validation()
    var_0.get_or_else(bool_1)


def test_case_15():
    list_0 = []
    bool_0 = True
    maybe_0 = module_0.Maybe(list_0, bool_0)
    var_0 = maybe_0.to_try()
    var_0.to_try()


def test_case_16():
    float_0 = -529.86
    bool_0 = True
    maybe_0 = module_0.Maybe(float_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_0.ap(var_0)


def test_case_17():
    list_0 = []
    set_0 = set()
    tuple_0 = (list_0, set_0)
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_validation()
    var_1.ap(tuple_0)


def test_case_18():
    bytes_0 = b"\x8f\x9b\x05\x97l\xa5DGfG\xa0*=\x8d\xf8ob\xbfl\xc4"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_box()
    var_0.ap(bool_0)


def test_case_19():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    none_type_1 = None
    maybe_1 = module_0.Maybe(none_type_1, none_type_1)
    var_1 = maybe_1.to_validation()
    var_2 = var_0.to_validation()
    maybe_2 = module_0.Maybe(var_1, maybe_1)
    var_2.map(var_2)
