# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    int_0 = -357
    maybe_0 = module_0.Maybe(int_0, int_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    none_type_0 = None
    bool_0 = False
    int_0 = -366
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.ap(bool_0)
    var_1 = var_0.filter(none_type_0)
    bool_1 = var_0.__eq__(maybe_0)
    var_2 = var_1.get_or_else(var_0)
    var_3 = var_0.to_validation()
    var_4 = var_2.to_try()
    none_type_1 = None
    maybe_1 = module_0.Maybe(none_type_1, none_type_1)


def test_case_3():
    bool_0 = True
    str_0 = "rf$eX,Qgv\tLAk^Q"
    set_0 = {str_0}
    list_0 = [set_0, set_0, str_0]
    int_0 = 346
    bytes_0 = b"R\xd9\x12\x189X\x16\xff"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.ap(int_0)
    maybe_1 = module_0.Maybe(var_0, var_0)
    var_1 = maybe_1.bind(list_0)
    bool_1 = var_1.__eq__(bool_0)


def test_case_4():
    bytes_0 = b"G9\xa5\x85\x15\xb1\xab\x8d\x16"
    bytes_1 = b"\xd2\xe9\xe6\xb6\x84n\x01\x8cg\x08"
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_1, bool_0)
    var_0 = maybe_0.map(maybe_0)
    var_1 = maybe_0.filter(bytes_1)
    var_2 = maybe_0.ap(bytes_0)
    var_3 = var_2.bind(var_2)
    var_4 = var_2.ap(bytes_0)
    var_5 = var_4.to_validation()
    bool_0.to_lazy()


def test_case_5():
    list_0 = []
    bool_0 = False
    maybe_0 = module_0.Maybe(list_0, bool_0)
    var_0 = maybe_0.get_or_else(list_0)
    maybe_0.map(var_0)


def test_case_6():
    bytes_0 = b"u\x8c\xc1\xf5.O\xd6+X\xb3\xb2\x04\x1b\xcc\x8f\xa4\xa0"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.filter(bytes_0)
    bool_0 = False
    var_1 = maybe_0.bind(maybe_0)
    maybe_1 = module_0.Maybe(bytes_0, bool_0)
    maybe_1.filter(var_1)


def test_case_7():
    none_type_0 = None
    bytes_0 = b"\xcc\xe7gb\x8a\xb2\x87\x14\xfch"
    str_0 = "'~\\"
    maybe_0 = module_0.Maybe(none_type_0, str_0)
    bool_0 = False
    maybe_1 = module_0.Maybe(str_0, bool_0)
    maybe_1.bind(bytes_0)


def test_case_8():
    bytes_0 = b"\x1bo"
    complex_0 = -1135.0439 + 1623.21j
    maybe_0 = module_0.Maybe(complex_0, complex_0)
    var_0 = maybe_0.ap(bytes_0)
    var_1 = var_0.to_either()


def test_case_9():
    bytes_0 = b"\xf4\xeb\xee\x92\xf8\xa2\xd9\x1c"
    tuple_0 = (bytes_0,)
    bool_0 = False
    maybe_0 = module_0.Maybe(tuple_0, bool_0)
    maybe_0.ap(bool_0)


def test_case_10():
    bytes_0 = b"u\x8c\xc1\xf5.O\xd6+X\xb3\xb2\x04\x1b\xcc\x8f\xa4\xa0"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.filter(bytes_0)
    var_1 = maybe_0.to_validation()
    bool_0 = False
    maybe_1 = module_0.Maybe(bytes_0, bool_0)
    maybe_1.filter(var_0)


def test_case_11():
    int_0 = -2949
    bool_0 = False
    bool_1 = False
    maybe_0 = module_0.Maybe(int_0, bool_1)
    maybe_1 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_1.to_either()
    maybe_1.filter(var_0)


def test_case_12():
    str_0 = ",8Z?;Sb4"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    var_1 = var_0.get_or_else(var_0)
    var_2 = var_0.get_or_else(str_0)
    var_2.to_either()


def test_case_13():
    int_0 = 1
    str_0 = "@1vf>ErVe^|"
    dict_0 = {int_0: str_0}
    list_0 = [dict_0, str_0, dict_0, str_0]
    bool_0 = False
    maybe_0 = module_0.Maybe(list_0, bool_0)
    var_0 = maybe_0.to_either()


def test_case_14():
    bytes_0 = b"G9\xa5\x85\x15\xb1\xab\x8d\x16"
    bytes_1 = b"\xd2\xe9\xe6\xb6\x84n\x01\x8cg\x08"
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, bytes_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_try()
    maybe_1 = module_0.Maybe(bytes_1, bool_0)
    var_2 = maybe_1.map(maybe_1)
    var_3 = maybe_1.filter(bytes_1)
    var_4 = maybe_1.ap(bytes_0)
    bool_1 = maybe_1.__eq__(var_4)
    var_5 = var_4.bind(var_4)
    var_6 = var_2.bind(var_0)
    var_7 = maybe_1.ap(bytes_0)
    var_8 = var_4.to_either()
    var_9 = var_4.to_box()
    var_10 = var_7.map(var_3)


def test_case_15():
    list_0 = []
    bool_0 = True
    maybe_0 = module_0.Maybe(list_0, bool_0)
    var_0 = maybe_0.bind(list_0)
    var_1 = var_0.ap(list_0)
    str_0 = "\n    In mathematics, a semigroup is an algebraic structure\n    consisting of a set together with an associative binary operation.\n    A semigroup generalizes a monoid in that there might not exist an identity element.\n    It also (originally) generalized a group (a monoid with all inverses)\n    to a type where every element did not have to have an inverse, this the name semigroup.\n    "
    maybe_1 = module_0.Maybe(str_0, list_0)
    maybe_2 = module_0.Maybe(list_0, list_0)
    var_2 = maybe_1.to_box()
    list_0.to_validation()


def test_case_16():
    bytes_0 = b"u\x8c\xc1\xf5.O\xd6+X\xb3\xb2\x04\x1b\xcc\x8f\xa4\xa0"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_validation()
    bool_0 = False
    var_1 = maybe_0.to_lazy()
    maybe_1 = module_0.Maybe(bytes_0, bool_0)
    maybe_1.filter(var_1)


def test_case_17():
    bool_0 = True
    none_type_0 = None
    bool_1 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_1)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.map(bool_0)
    var_1.to_validation()


def test_case_18():
    int_0 = -837
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.to_try()
    var_0.to_try()


def test_case_19():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_try()
    var_1 = var_0.get_or_else(none_type_0)
    bool_0 = True
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    var_2 = maybe_1.to_validation()
    var_3 = var_2.to_either()
    var_3.map(var_1)


def test_case_20():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_1.to_box()
    var_1 = maybe_0.to_either()
    var_2 = maybe_1.to_validation()
    var_3 = maybe_0.to_box()
    var_4 = maybe_1.get_or_else(maybe_0)
    var_4.map(var_3)


def test_case_21():
    int_0 = -2324
    float_0 = -2366.50202
    dict_0 = {int_0: float_0, float_0: float_0}
    bytes_0 = b"\x08"
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_validation()
    var_1.filter(dict_0)


def test_case_22():
    bytes_0 = b"\xa0\x15["
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    bytes_1 = b"\xc0B\x888\xa3\x83\x03\xdbw@\xc6\xe1"
    list_0 = [bytes_1, bytes_1, bytes_1]
    maybe_0 = module_0.Maybe(list_0, bytes_1)
    var_0 = maybe_0.ap(set_0)
    var_1 = maybe_0.bind(maybe_0)
    var_2 = maybe_0.bind(var_0)
    var_3 = var_1.ap(var_0)
    int_0 = 346
    bytes_2 = b"R\xd9\x12\x189X\x16\xff"
    maybe_1 = module_0.Maybe(var_0, int_0)
    var_4 = var_3.ap(var_0)
    maybe_2 = module_0.Maybe(bytes_1, var_1)
    var_5 = maybe_0.bind(bytes_2)
    bool_0 = var_5.__eq__(var_3)


def test_case_23():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_box()
    maybe_0.ap(maybe_0)
