# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.filter(var_0)
    var_2 = maybe_0.to_either()
    var_3 = maybe_0.to_try()
    var_4 = maybe_0.bind(maybe_0)
    maybe_1 = module_0.Maybe(var_0, bool_0)
    var_5 = maybe_1.map(var_3)
    var_6 = var_5.to_try()
    bool_1 = var_1.__eq__(maybe_1)
    var_7 = var_5.bind(maybe_0)


def test_case_3():
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.to_box()
    var_2 = maybe_0.to_try()
    var_3 = maybe_0.bind(maybe_0)
    var_4 = var_3.bind(maybe_0)
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    var_5 = maybe_0.to_box()
    var_6 = maybe_1.map(var_2)
    var_7 = var_6.to_try()
    bool_1 = var_3.__eq__(var_2)


def test_case_4():
    bool_0 = False
    set_0 = {bool_0}
    none_type_0 = None
    bool_1 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_1)
    maybe_0.map(set_0)


def test_case_5():
    str_0 = "Lazy[T, W]"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    var_1 = maybe_0.to_box()
    var_2 = maybe_0.bind(var_1)
    var_3 = maybe_0.get_or_else(var_0)
    var_4 = var_1.to_validation()
    var_1.get_or_else(str_0)


def test_case_6():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.bind(maybe_0)


def test_case_7():
    complex_0 = -336 + 19.4082j
    bytes_0 = b"4"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.ap(complex_0)
    var_1 = var_0.filter(complex_0)
    bool_0 = False
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    maybe_1.filter(var_0)


def test_case_8():
    none_type_0 = None
    complex_0 = -336 + 19.4082j
    complex_1 = 2359.72 + 1836.1094j
    bytes_0 = b"4"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.ap(complex_1)
    var_1 = var_0.filter(complex_0)
    var_2 = var_1.ap(none_type_0)
    bool_0 = False
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    var_3 = maybe_1.get_or_else(var_2)
    bytes_1 = b"a\x00\xec\x86\xcd\x1fdG\x86<-\xfe\n\x9e\n\n\xfdZ\\"
    bool_1 = False
    maybe_2 = module_0.Maybe(bytes_1, bool_1)
    maybe_2.filter(var_3)


def test_case_9():
    bytes_0 = b"\xd36G\xe4\xe9c\x15\x9b\xdc\t\x8am\x08\xe5"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.to_box()
    var_2 = var_1.to_try()


def test_case_10():
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_0, none_type_0)
    var_0 = maybe_0.to_either()


def test_case_11():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_validation()
    var_2 = var_1.to_box()
    var_2.ap(none_type_0)


def test_case_12():
    float_0 = -269.02387
    maybe_0 = module_0.Maybe(float_0, float_0)
    var_0 = maybe_0.to_lazy()


def test_case_13():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_0.get_or_else(none_type_0)


def test_case_14():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_try()


def test_case_15():
    bool_0 = True
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_validation()
    var_1 = var_0.to_either()
    var_2 = var_1.to_validation()


def test_case_16():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_validation()
    var_0.map(none_type_0)


def test_case_17():
    generic_0 = module_1.Generic()
    str_0 = "`t( GI--4(\t>"
    bool_0 = True
    maybe_0 = module_0.Maybe(generic_0, bool_0)
    var_0 = maybe_0.ap(generic_0)
    var_1 = var_0.to_lazy()
    var_2 = var_1.to_box()
    maybe_1 = module_0.Maybe(str_0, str_0)
    var_3 = maybe_1.to_validation()


def test_case_18():
    bool_0 = True
    none_type_0 = None
    bool_1 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_1)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_try()
    none_type_1 = None
    none_type_2 = None
    maybe_1 = module_0.Maybe(bool_0, none_type_2)
    maybe_1.filter(none_type_1)


def test_case_19():
    int_0 = -1080
    bool_0 = False
    maybe_0 = module_0.Maybe(int_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    bool_2 = maybe_0.__eq__(int_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.to_box()
    var_2 = var_1.to_try()
    bool_3 = var_0.__eq__(int_0)
    var_2.filter(var_1)


def test_case_20():
    complex_0 = -1690 + 4843.8532j
    maybe_0 = module_0.Maybe(complex_0, complex_0)
    var_0 = maybe_0.filter(maybe_0)
    str_0 = "rvT.Ef1bZgZk$c'5"
    list_0 = [str_0, str_0, str_0, str_0]
    maybe_1 = module_0.Maybe(str_0, list_0)
    none_type_0 = None
    maybe_2 = module_0.Maybe(none_type_0, none_type_0)
    var_1 = maybe_0.to_lazy()
    var_2 = maybe_2.ap(maybe_0)
    var_3 = var_2.to_either()


def test_case_21():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    none_type_0 = None
    var_0 = module_0.Maybe(none_type_0, none_type_0)
    var_1 = maybe_0.filter(var_0)
    bool_1 = var_0.__eq__(var_1)
    maybe_1 = module_0.Maybe(var_1, bool_1)
    var_2 = maybe_0.to_try()
    bool_2 = False
    maybe_2 = module_0.Maybe(maybe_0, bool_2)
    var_3 = var_1.to_box()
    var_4 = var_1.bind(var_0)
    var_5 = var_4.map(var_2)
    var_6 = var_1.to_lazy()
    var_7 = var_1.map(var_2)
    var_8 = module_0.Maybe(var_4, var_4)
    var_9 = maybe_2.get_or_else(var_7)
    bool_3 = True
    maybe_3 = module_0.Maybe(bool_1, bool_3)
    maybe_2.filter(var_3)
