# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1 = module_0.Maybe(maybe_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_1.filter(none_type_0)
    maybe_0.filter(maybe_1)


def test_case_3():
    bool_0 = True
    list_0 = [bool_0]
    bool_1 = False
    maybe_0 = module_0.Maybe(list_0, bool_1)
    bool_2 = maybe_0.__eq__(bool_1)
    var_0 = maybe_0.to_validation()
    float_0 = 2425.0
    bool_3 = var_0.__eq__(float_0)
    var_0.filter(var_0)


def test_case_4():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.get_or_else(maybe_0)
    var_2 = maybe_0.map(var_1)
    var_3 = maybe_0.to_try()
    var_4 = var_3.bind(var_3)
    var_5 = var_2.to_try()
    var_6 = maybe_0.to_box()
    var_7 = maybe_0.ap(bool_0)
    var_8 = maybe_0.filter(bool_0)
    var_9 = var_8.to_validation()
    maybe_1 = module_0.Maybe(bool_0, var_8)


def test_case_5():
    str_0 = "\n        :param semigroup: other semigroup to concat\n        :type semigroup: All[B]\n        :returns: new All with last truly value or first falsy\n        :rtype: All[A | B]\n        "
    bool_0 = False
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_lazy()
    var_2 = var_1.ap(str_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    maybe_1.map(str_0)


def test_case_6():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_box()
    none_type_0 = None
    var_1 = maybe_0.filter(none_type_0)
    var_2 = var_0.to_try()
    var_3 = maybe_0.bind(var_0)
    var_0.filter(var_0)


def test_case_7():
    bytes_0 = b"\xb1c1\x1a\x13e\xfbo\xc9"
    bytes_1 = b"\xf7}\xe9e\xf1\x91Y-\x18\xb3\x03\xa6"
    none_type_0 = None
    maybe_0 = module_0.Maybe(bytes_1, none_type_0)
    maybe_0.bind(bytes_0)


def test_case_8():
    float_0 = 2932.218
    bytes_0 = b"\xce"
    set_0 = {bytes_0, bytes_0}
    list_0 = [set_0, set_0, set_0, bytes_0]
    maybe_0 = module_0.Maybe(list_0, bytes_0)
    var_0 = maybe_0.ap(float_0)


def test_case_9():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.ap(none_type_0)


def test_case_10():
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1 = module_0.Maybe(maybe_0, bool_0)
    var_0 = maybe_1.filter(none_type_0)
    maybe_0.filter(maybe_1)


def test_case_11():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.get_or_else(maybe_0)
    maybe_1 = module_0.Maybe(maybe_0, var_1)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_2 = maybe_1.to_box()
    var_1.to_either()


def test_case_12():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_box()
    var_2 = var_1.to_validation()


def test_case_13():
    bool_0 = True
    bool_1 = True
    list_0 = [bool_1]
    bool_2 = False
    maybe_0 = module_0.Maybe(list_0, bool_2)
    var_0 = maybe_0.to_either()
    bool_3 = var_0.__eq__(bool_0)


def test_case_14():
    float_0 = -943.392705
    maybe_0 = module_0.Maybe(float_0, float_0)
    var_0 = maybe_0.to_box()


def test_case_15():
    str_0 = "bzWe_}mV NlasXIuW2X{"
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_lazy()
    bool_1 = var_0.__eq__(str_0)
    var_1 = maybe_0.to_lazy()
    var_2 = var_1.to_validation()
    bool_2 = True
    maybe_1 = module_0.Maybe(str_0, bool_2)
    var_1.get_or_else(bool_1)


def test_case_16():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.to_try()
    var_1.bind(maybe_0)


def test_case_17():
    none_type_0 = None
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    maybe_0 = module_0.Maybe(dict_0, bool_0)
    var_0 = maybe_0.to_try()
    var_1 = var_0.get_or_else(none_type_0)
    tuple_0 = ()
    bool_1 = False
    maybe_1 = module_0.Maybe(tuple_0, bool_1)
    var_2 = maybe_1.to_try()
    var_2.filter(var_1)


def test_case_18():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    dict_0 = {}
    maybe_1 = module_0.Maybe(dict_0, dict_0)
    var_0 = maybe_1.to_validation()


def test_case_19():
    bool_0 = True
    bool_0.bind(bool_0)


def test_case_20():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_try()
    var_1.to_validation()


def test_case_21():
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_validation()
    maybe_1 = module_0.Maybe(maybe_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    var_1 = maybe_1.to_box()
    var_2 = maybe_1.filter(none_type_0)
    bool_2 = var_2.__eq__(maybe_0)
    var_3 = var_0.to_either()
    var_1.map(bool_2)


def test_case_22():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.filter(maybe_0)
    bool_1 = maybe_0.__eq__(var_0)
    var_1 = maybe_0.ap(bool_1)
    var_2 = var_0.map(var_1)
    var_3 = var_2.to_lazy()
    var_4 = maybe_0.to_validation()
    var_3.filter(var_3)
