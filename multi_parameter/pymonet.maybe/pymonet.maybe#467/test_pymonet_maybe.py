# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    int_0 = -588
    maybe_0 = module_0.Maybe(int_0, int_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    str_0 = "Sum"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.filter(maybe_0)
    bool_0 = var_0.__eq__(maybe_0)
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    maybe_1.filter(maybe_0)


def test_case_3():
    bytes_0 = b"\x1a"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    bool_0 = maybe_0.__eq__(bytes_0)
    var_0 = maybe_0.to_box()
    bool_1 = False
    maybe_1 = module_0.Maybe(bytes_0, bool_1)
    maybe_1.filter(var_0)


def test_case_4():
    dict_0 = {}
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(dict_0, bool_0)
    bytes_0 = b"\xab\x8f\xfaF\xc7L\xcc"
    maybe_1 = module_0.Maybe(none_type_0, bytes_0)
    var_0 = maybe_1.to_box()
    var_1 = maybe_1.map(var_0)
    var_2 = maybe_1.filter(var_0)
    var_3 = maybe_1.bind(dict_0)
    var_0.map(none_type_0)


def test_case_5():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_try()
    var_1 = var_0.bind(none_type_0)
    var_2 = var_1.map(none_type_0)
    var_3 = var_2.bind(none_type_0)
    var_4 = var_3.get_or_else(none_type_0)
    complex_0 = 869.81914 - 736.188j
    none_type_1 = None
    maybe_1 = module_0.Maybe(complex_0, none_type_1)
    maybe_1.map(none_type_0)


def test_case_6():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    maybe_0.bind(maybe_0)


def test_case_7():
    str_0 = "Sum"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.to_try()
    var_1 = var_0.filter(var_0)
    maybe_1 = module_0.Maybe(maybe_0, var_0)
    var_2 = maybe_1.filter(var_0)
    var_3 = maybe_1.map(var_0)
    var_4 = maybe_1.ap(var_2)
    dict_0 = {}
    maybe_2 = module_0.Maybe(dict_0, dict_0)
    maybe_2.filter(var_0)


def test_case_8():
    str_0 = "lH"
    set_0 = {str_0, str_0}
    tuple_0 = (set_0,)
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_0.ap(tuple_0)


def test_case_9():
    bytes_0 = b"\x1a"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_box()
    bool_0 = False
    maybe_1 = module_0.Maybe(bytes_0, bool_0)
    maybe_1.filter(var_0)


def test_case_10():
    str_0 = "Sum"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    var_1 = maybe_0.filter(maybe_0)
    dict_0 = {}
    maybe_1 = module_0.Maybe(dict_0, dict_0)
    maybe_1.filter(maybe_0)


def test_case_11():
    str_0 = "\n        Transform Maybe to Try.\n\n        :returns: successfully Try with previous value when Maybe is not empty, othercase not successfully Try with None\n        :rtype: Try[A]\n        "
    bool_0 = False
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_0, none_type_0)
    var_0 = maybe_0.get_or_else(str_0)


def test_case_12():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_either()


def test_case_13():
    bool_0 = False
    dict_0 = {}
    bool_1 = False
    maybe_0 = module_0.Maybe(dict_0, bool_1)
    var_0 = maybe_0.to_either()
    var_0.get_or_else(bool_0)


def test_case_14():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_box()


def test_case_15():
    int_0 = 1
    bool_0 = False
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_either()
    var_2 = var_1.to_box()
    var_3 = var_1.to_try()
    var_4 = maybe_0.to_either()
    maybe_1 = module_0.Maybe(bool_0, var_1)
    bool_1 = maybe_1.__eq__(var_1)
    var_5 = maybe_0.to_either()
    var_6 = var_0.to_validation()
    var_7 = var_1.to_lazy()
    var_8 = maybe_0.to_try()
    bool_2 = var_7.__eq__(int_0)
    var_9 = maybe_1.get_or_else(bool_0)
    var_10 = maybe_1.filter(var_0)
    bool_3 = var_0.__eq__(var_8)
    var_11 = var_0.to_validation()
    var_8.map(var_1)


def test_case_16():
    int_0 = -3790
    maybe_0 = module_0.Maybe(int_0, int_0)
    none_type_0 = None
    bool_0 = True
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_1.to_lazy()
    var_1 = var_0.to_validation()


def test_case_17():
    bytes_0 = b"\xf4n"
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.ap(var_0)
    var_2 = maybe_0.to_lazy()
    var_3 = var_2.ap(bytes_0)
    var_3.to_lazy()


def test_case_18():
    str_0 = "Sum"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.filter(maybe_0)
    dict_0 = {}
    maybe_1 = module_0.Maybe(dict_0, dict_0)
    maybe_1.filter(maybe_0)


def test_case_19():
    int_0 = -13
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    bool_0 = False
    maybe_0 = module_0.Maybe(dict_0, bool_0)
    var_0 = maybe_0.to_validation()
    maybe_1 = module_0.Maybe(var_0, bool_0)
    var_1 = maybe_1.to_validation()
    var_2 = var_1.to_either()
    var_3 = var_2.to_try()
    var_3.to_box()


def test_case_20():
    complex_0 = 3087.517 + 1163.90753j
    bytes_0 = b"\x85\x94u\xc7\xfa\xdd\xd1"
    list_0 = [bytes_0]
    bool_0 = False
    maybe_0 = module_0.Maybe(list_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_box()
    var_1.map(complex_0)


def test_case_21():
    bool_0 = False
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.bind(bool_1)
    var_1 = var_0.get_or_else(var_0)
    bool_2 = var_0.__eq__(var_1)
    var_2 = var_0.to_try()
    var_2.to_either()
