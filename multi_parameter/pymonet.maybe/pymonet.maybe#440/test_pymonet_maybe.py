# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import builtins as module_1


def test_case_0():
    int_0 = -372
    maybe_0 = module_0.Maybe(int_0, int_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    bool_0 = True
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_validation()
    var_1 = var_0.to_lazy()
    bool_2 = maybe_0.__eq__(bool_0)
    var_2 = maybe_0.to_box()
    bool_3 = var_0.__eq__(bool_1)
    var_3 = maybe_0.ap(maybe_0)
    var_4 = var_3.ap(bool_0)
    var_5 = maybe_0.to_try()
    var_6 = maybe_0.filter(var_5)
    var_5.to_try()


def test_case_3():
    bytes_0 = b"\xe7\xe6\xf9"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_validation()
    bytes_1 = b"\xf8\xc48\x11\xc3"
    maybe_1 = module_0.Maybe(bytes_1, bytes_1)
    var_1 = maybe_1.filter(var_0)
    var_2 = var_1.get_or_else(maybe_1)
    var_3 = var_2.map(maybe_0)
    var_4 = var_1.to_either()


def test_case_4():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.to_validation()
    maybe_0.map(var_1)


def test_case_5():
    float_0 = 1859.46494
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, float_0)
    int_0 = 1
    var_0 = maybe_0.bind(float_0)
    var_1 = var_0.get_or_else(var_0)
    var_2 = maybe_0.ap(none_type_0)
    var_3 = maybe_0.to_lazy()
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, int_0: int_0}
    var_4 = var_0.get_or_else(float_0)
    var_5 = maybe_0.get_or_else(none_type_0)
    bool_0 = dict_0.__eq__(int_0)
    maybe_1 = module_0.Maybe(dict_0, float_0)


def test_case_6():
    str_0 = "\n        Returns Lazy with function returning argument.\n\n        :param value: value to return by Lazy constructor_fn\n        :type value: Any\n        :returns: Lazy with function returning argument\n        :rtype: Lazy[Function() -> A]\n        "
    list_0 = [str_0, str_0, str_0, str_0]
    tuple_0 = ()
    bool_0 = False
    maybe_0 = module_0.Maybe(tuple_0, bool_0)
    maybe_0.bind(list_0)


def test_case_7():
    none_type_0 = None
    bytes_0 = b"5\xac$}v8\x92\xdb\xa1\x1f\x7f"
    dict_0 = {bytes_0: bytes_0}
    bool_0 = True
    maybe_0 = module_0.Maybe(dict_0, bool_0)
    var_0 = maybe_0.ap(none_type_0)
    maybe_1 = module_0.Maybe(var_0, bytes_0)
    var_1 = maybe_1.to_either()
    var_2 = var_1.to_lazy()


def test_case_8():
    str_0 = "g{bey|0"
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = maybe_0.__eq__(str_0)
    var_0 = maybe_0.to_try()
    var_1 = module_1.object()
    var_2 = maybe_0.to_either()
    maybe_0.ap(maybe_0)


def test_case_9():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.filter(var_0)


def test_case_10():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_validation()
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    maybe_0.filter(var_0)


def test_case_11():
    bytes_0 = b"\xe7\xe6\xf9"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_validation()
    bytes_1 = b"\xf8\xc48\x11\xc3"
    maybe_1 = module_0.Maybe(bytes_1, bytes_1)
    var_1 = maybe_1.filter(var_0)
    var_2 = var_1.get_or_else(maybe_1)
    var_3 = var_1.to_either()


def test_case_12():
    int_0 = 0
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_either()
    var_2 = maybe_0.get_or_else(int_0)
    var_3 = var_0.to_box()
    var_3.map(var_2)


def test_case_13():
    tuple_0 = ()
    bool_0 = True
    maybe_0 = module_0.Maybe(tuple_0, bool_0)
    var_0 = maybe_0.to_either()
    none_type_0 = None
    none_type_1 = None
    bool_1 = False
    maybe_1 = module_0.Maybe(none_type_1, bool_1)
    var_1 = maybe_1.to_either()
    var_1.ap(none_type_0)


def test_case_14():
    int_0 = -4856
    bytes_0 = b"\x88\xcefs=#gvN\xda\x9c\x8a\xb4\xc2\xf4\xc6v\x15\xed\xd4"
    maybe_0 = module_0.Maybe(int_0, bytes_0)
    var_0 = maybe_0.to_box()
    bool_0 = var_0.__eq__(maybe_0)
    var_0.ap(int_0)


def test_case_15():
    tuple_0 = ()
    maybe_0 = module_0.Maybe(tuple_0, tuple_0)
    var_0 = maybe_0.to_box()
    var_0.to_box()


def test_case_16():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_lazy()


def test_case_17():
    tuple_0 = ()
    none_type_0 = None
    maybe_0 = module_0.Maybe(tuple_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_box()
    var_2 = var_1.to_try()
    var_2.to_box()


def test_case_18():
    bool_0 = True
    str_0 = ""
    tuple_0 = (bool_0, bool_0, str_0)
    maybe_0 = module_0.Maybe(tuple_0, tuple_0)
    var_0 = maybe_0.to_try()
    var_0.to_box()


def test_case_19():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_try()
    bool_0 = False
    var_0.ap(bool_0)


def test_case_20():
    bytes_0 = b"\xe7\xe6\xf9"
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.filter(bool_0)
    var_1 = var_0.to_lazy()
    bool_1 = var_0.__eq__(var_1)
    var_2 = maybe_0.to_box()
    bool_2 = maybe_0.__eq__(bool_0)
    var_3 = var_2.ap(var_1)
    var_4 = var_2.ap(var_3)
    var_5 = var_4.to_try()
    var_6 = maybe_0.filter(var_3)
    var_7 = maybe_0.to_either()
    var_8 = var_7.to_try()
    maybe_1 = module_0.Maybe(bool_2, bool_2)
    list_0 = [var_7, maybe_0]
    var_9 = maybe_0.map(list_0)
    var_10 = var_6.bind(var_3)


def test_case_21():
    bool_0 = True
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_validation()
    var_1 = var_0.to_lazy()
    bool_2 = maybe_0.__eq__(bool_0)
    var_2 = maybe_0.to_box()
    var_3 = var_0.to_box()
    var_4 = maybe_0.bind(var_3)
    bool_3 = var_3.__eq__(bool_1)
    bool_4 = maybe_0.__eq__(maybe_0)
    var_2.ap(var_2)


def test_case_22():
    bool_0 = True
    bool_1 = True
    bool_2 = False
    maybe_0 = module_0.Maybe(bool_1, bool_2)
    var_0 = maybe_0.to_validation()
    var_1 = var_0.to_lazy()
    bool_3 = maybe_0.__eq__(maybe_0)
    maybe_1 = module_0.Maybe(var_0, bool_3)
    var_2 = maybe_1.to_box()
    var_3 = var_1.to_validation()
    var_4 = maybe_1.bind(var_1)
    bool_4 = var_3.__eq__(bool_0)
    var_3.ap(var_1)


def test_case_23():
    int_0 = -1698
    maybe_0 = module_0.Maybe(int_0, int_0)
    none_type_0 = None
    bool_0 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.ap(none_type_0)
    var_1 = maybe_0.map(maybe_0)
    var_2 = maybe_0.ap(maybe_0)
    var_3 = maybe_0.get_or_else(maybe_0)
    var_4 = var_2.to_either()
    var_5 = var_1.to_box()
    var_6 = var_0.to_validation()
    var_7 = var_2.bind(var_5)
    bool_1 = var_3.__eq__(var_2)
    var_8 = var_3.ap(var_3)
    var_9 = maybe_0.ap(var_4)
    var_10 = var_2.to_try()
    var_5.filter(int_0)
