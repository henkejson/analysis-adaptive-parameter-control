# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1


def test_case_0():
    bytes_0 = b"\x9f\xdd\xf7-\xf3\xdc\xe5\x9f\xc3"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_validation()
    maybe_1 = module_0.Maybe(var_0, bool_1)
    var_1 = maybe_1.to_either()
    var_2 = maybe_0.bind(bool_0)
    var_3 = var_1.to_validation()
    bool_2 = True
    bool_3 = False
    maybe_2 = module_0.Maybe(bool_2, bool_3)
    var_4 = maybe_1.filter(var_1)
    var_5 = var_3.to_lazy()
    var_6 = var_3.to_box()


def test_case_3():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.filter(bool_0)
    bool_1 = var_0.__eq__(bool_0)
    maybe_1 = module_0.Maybe(var_0, bool_1)
    maybe_1.filter(maybe_1)


def test_case_4():
    float_0 = 1463.971
    maybe_0 = module_0.Maybe(float_0, float_0)
    generic_0 = module_1.Generic()
    var_0 = maybe_0.map(float_0)
    var_1 = maybe_0.to_validation()
    none_type_0 = None
    var_2 = maybe_0.filter(none_type_0)
    bool_0 = False
    var_3 = var_2.to_box()
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    var_4 = var_0.ap(bool_0)
    var_5 = var_0.to_lazy()
    float_1 = 515.9147
    maybe_1.bind(float_1)


def test_case_5():
    bytes_0 = b"\x9aX\x01\x9bm\xb12wq\xc4\xf4\xbe\xbb\xde\xee\xb6\xd7\x10e\x1a"
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    maybe_2 = module_0.Maybe(bytes_0, bytes_0)
    maybe_1.ap(maybe_1)


def test_case_6():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.filter(bool_0)
    bool_1 = var_0.__eq__(bool_0)
    maybe_1 = module_0.Maybe(var_0, bool_1)
    var_1 = var_0.bind(bool_1)
    maybe_1.filter(maybe_0)


def test_case_7():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_validation()
    maybe_0.bind(var_0)


def test_case_8():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = maybe_0.__eq__(none_type_0)
    var_0 = maybe_0.to_validation()
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    var_1 = maybe_1.to_either()
    var_2 = maybe_1.bind(var_1)
    var_3 = var_2.to_validation()
    var_4 = var_2.ap(var_1)
    var_5 = var_4.filter(var_0)
    var_6 = var_0.to_lazy()
    var_7 = var_6.to_box()


def test_case_9():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.filter(bool_0)
    bool_1 = var_0.__eq__(bool_0)
    maybe_1 = module_0.Maybe(var_0, bool_1)
    var_1 = var_0.to_either()
    var_2 = maybe_1.ap(var_1)
    var_3 = var_2.to_lazy()
    maybe_1.filter(var_2)


def test_case_10():
    bool_0 = False
    str_0 = "M@I[j`.H~q\n:"
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_0.filter(str_0)


def test_case_11():
    int_0 = -734
    str_0 = "\n        Call success_callback function with monad value when monad is successfully.\n\n        :params success_callback: function to apply with monad value.\n        :type success_callback: Function(A)\n        :returns: self\n        :rtype: Try[A]\n        "
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    var_1 = var_0.to_validation()
    maybe_1 = module_0.Maybe(int_0, bool_0)
    var_2 = maybe_0.to_either()
    var_3 = maybe_0.bind(var_2)
    var_4 = var_2.to_validation()
    var_5 = var_2.ap(var_3)
    var_6 = var_3.filter(var_1)
    var_7 = maybe_0.to_lazy()
    var_8 = var_1.to_box()


def test_case_12():
    bool_0 = False
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.get_or_else(bool_1)
    var_1 = maybe_0.to_try()
    maybe_0.filter(bool_1)


def test_case_13():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.filter(bool_0)
    bool_1 = var_0.__eq__(bool_0)
    var_1 = maybe_0.to_box()
    maybe_1 = module_0.Maybe(var_0, bool_1)
    var_2 = var_0.to_either()
    maybe_1.filter(var_2)


def test_case_14():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.to_try()
    var_2 = maybe_0.to_either()
    var_2.map(var_2)


def test_case_15():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.filter(bool_0)
    bool_1 = var_0.__eq__(bool_0)
    var_1 = maybe_0.to_box()
    maybe_1 = module_0.Maybe(var_0, bool_1)
    maybe_1.filter(maybe_1)


def test_case_16():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    bool_1 = maybe_1.__eq__(maybe_0)
    var_0 = maybe_1.to_validation()
    var_1 = maybe_0.to_box()
    bool_2 = var_0.__eq__(maybe_0)
    bool_3 = True
    list_0 = [var_0, var_0, maybe_1, bool_3]
    maybe_2 = module_0.Maybe(list_0, var_1)
    var_2 = maybe_1.to_try()
    var_3 = maybe_0.to_validation()
    var_4 = var_3.to_either()
    var_2.to_box()


def test_case_17():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_box()
    var_2 = var_1.to_try()
    var_3 = var_2.get_or_else(none_type_0)
    var_4 = var_0.ap(var_1)
    var_5 = var_0.map(maybe_0)
    var_3.to_lazy()


def test_case_18():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.filter(bool_0)
    bool_1 = var_0.__eq__(bool_0)
    var_1 = maybe_0.to_box()
    maybe_1 = module_0.Maybe(var_0, bool_1)
    var_2 = maybe_0.to_try()
    maybe_1.filter(var_1)


def test_case_19():
    none_type_0 = None
    complex_0 = 4003.094661 + 2277.11j
    set_0 = {complex_0, complex_0}
    str_0 = "\n        Transform Either to Maybe.\n\n        :returns: Empty Maybe\n        :rtype: Maybe[None]\n        "
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.filter(set_0)
    var_1 = var_0.to_validation()
    var_1.get_or_else(none_type_0)


def test_case_20():
    int_0 = 0
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.filter(int_0)
    var_1 = var_0.to_box()
    bool_1 = maybe_0.__eq__(bool_0)
    var_2 = var_0.get_or_else(maybe_0)
    var_3 = var_0.to_lazy()
    var_4 = var_3.to_try()
    var_3.to_lazy()


def test_case_21():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    int_0 = -944
    maybe_1 = module_0.Maybe(int_0, int_0)
    bool_1 = maybe_1.__eq__(maybe_0)
    var_0 = maybe_1.to_validation()
    var_1 = maybe_0.to_box()
    bool_2 = var_0.__eq__(maybe_0)
    bool_3 = True
    list_0 = [var_0, var_0, maybe_1, bool_3]
    maybe_2 = module_0.Maybe(list_0, var_1)
    var_2 = maybe_1.to_try()
    var_3 = maybe_0.to_validation()
    var_4 = var_3.to_either()
    var_2.to_box()
