# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import builtins as module_1
import typing as module_2


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    str_0 = "\n        Transform Maybe to Try.\n\n        :returns: successfully Try with previous value when Maybe is not empty, othercase not successfully Try with None\n        :rtype: Try[A]\n        "
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = module_1.object()
    var_1 = maybe_0.ap(str_0)
    var_2 = var_1.to_box()
    bool_0 = maybe_0.__eq__(maybe_0)
    var_3 = var_1.to_box()
    var_4 = var_1.get_or_else(var_1)
    var_5 = var_1.to_either()


def test_case_3():
    bool_0 = False
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_1, bool_1)
    bool_2 = maybe_0.__eq__(bool_0)


def test_case_4():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_box()
    bool_1 = False
    var_1 = maybe_0.map(bool_1)
    maybe_1 = module_0.Maybe(none_type_0, bool_1)
    var_2 = maybe_0.filter(maybe_0)
    var_3 = maybe_1.to_either()
    maybe_1.filter(var_0)


def test_case_5():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_1.to_lazy()
    var_1 = maybe_0.filter(none_type_0)
    maybe_1.map(var_0)


def test_case_6():
    str_0 = "\n        Transform Maybe to Try.\n\n        :returns: successfully Try with previous value when Maybe is not empty, othercase not successfully Try with None\n        :rtype: Try[A]\n        "
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.get_or_else(str_0)
    var_1 = maybe_0.ap(str_0)
    var_2 = var_1.to_box()
    bool_0 = maybe_0.__eq__(maybe_0)
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    var_3 = var_1.bind(var_2)
    maybe_2 = module_0.Maybe(var_3, bool_0)
    bool_1 = var_1.__eq__(var_0)
    var_4 = maybe_0.to_try()
    var_5 = maybe_0.ap(var_2)


def test_case_7():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    maybe_0.ap(none_type_0)


def test_case_8():
    int_0 = -1177
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.filter(maybe_0)
    var_1 = maybe_0.to_validation()
    var_2 = var_1.to_lazy()
    maybe_1 = module_0.Maybe(int_0, int_0)
    var_3 = maybe_1.to_try()
    var_4 = var_2.map(var_3)
    var_5 = maybe_0.to_validation()
    var_6 = var_2.to_validation()
    var_7 = maybe_1.to_validation()


def test_case_9():
    str_0 = "vzvxg6("
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.to_validation()
    bool_0 = False
    maybe_1 = module_0.Maybe(str_0, bool_0)
    none_type_0 = None
    var_1 = maybe_1.to_box()
    var_2 = maybe_1.get_or_else(none_type_0)
    var_3 = maybe_1.to_either()
    var_4 = maybe_1.to_try()
    var_4.to_either()


def test_case_10():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_either()


def test_case_11():
    bytes_0 = b"\x8eI\x958\xb7/x\x9b\xd0\x87\xe5"
    bool_0 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.to_try()
    bool_1 = True
    var_1 = maybe_0.to_box()
    maybe_1 = module_0.Maybe(bytes_0, bool_1)
    var_2 = maybe_1.to_either()
    var_3 = var_2.map(var_2)
    var_2.filter(var_2)


def test_case_12():
    str_0 = "\n        Transform Maybe to Try.\n\n        :returns: successfully Try with previous value when Maybe is not empty, othercase not successfully Try with None\n        :rtype: Try[A]\n        "
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.get_or_else(str_0)
    var_1 = maybe_0.ap(str_0)
    var_2 = var_1.to_box()
    bool_0 = maybe_0.__eq__(maybe_0)
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    var_3 = maybe_0.to_lazy()
    var_4 = var_1.to_box()
    var_5 = var_1.get_or_else(var_1)
    var_6 = var_1.to_either()


def test_case_13():
    none_type_0 = None
    dict_0 = {}
    maybe_0 = module_0.Maybe(dict_0, dict_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_validation()
    var_1.get_or_else(none_type_0)


def test_case_14():
    str_0 = "CaBlable[[U], Lazy[U, W]]"
    maybe_0 = module_0.Maybe(str_0, str_0)
    bool_0 = maybe_0.__eq__(str_0)
    bool_1 = True
    maybe_1 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.to_box()


def test_case_15():
    set_0 = set()
    bytes_0 = b""
    bool_0 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.to_try()
    var_0.ap(set_0)


def test_case_16():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = var_0.to_either()
    var_2 = var_1.to_try()
    str_0 = "LkGD'gVs\r%~"
    dict_0 = {}
    tuple_0 = (str_0, dict_0)
    maybe_1 = module_0.Maybe(tuple_0, tuple_0)


def test_case_17():
    str_0 = "xed"
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.to_validation()
    maybe_0.ap(str_0)


def test_case_18():
    generic_0 = module_2.Generic()
    none_type_0 = None
    bytes_0 = b"Z\x07\x8a\xf9\xcc\x01nD(^4\xeah1\xde"
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_validation()
    var_1.ap(none_type_0)


def test_case_19():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_lazy()
    maybe_0.ap(none_type_0)


def test_case_20():
    bool_0 = False
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_1, bool_1)
    var_0 = maybe_0.to_try()
    maybe_0.bind(bool_0)


def test_case_21():
    str_0 = "\n        Transform Maybe to Try.\n\n        :returns: successfully Try with previous value when Maybe is not empty, othercase not successfully Try with None\n        :rtype: Try[A]\n        "
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    var_1 = var_0.ap(var_0)
    var_2 = maybe_0.to_box()
    bool_0 = var_1.__eq__(str_0)
    maybe_1 = module_0.Maybe(var_1, bool_0)
    var_3 = var_1.bind(maybe_0)
    maybe_2 = module_0.Maybe(var_1, var_2)
    bool_1 = var_0.__eq__(var_3)
    var_4 = var_2.to_try()
    var_5 = var_0.ap(var_1)
