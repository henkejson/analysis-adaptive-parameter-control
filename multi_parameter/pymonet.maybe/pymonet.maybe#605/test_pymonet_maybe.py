# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1


def test_case_0():
    bytes_0 = b";u"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)


def test_case_1():
    set_0 = set()
    maybe_0 = module_0.Maybe(set_0, set_0)


def test_case_2():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = True
    var_0 = maybe_0.to_validation()
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    var_1 = maybe_1.filter(none_type_0)
    var_2 = maybe_1.to_validation()
    var_3 = maybe_1.to_lazy()
    bool_1 = maybe_1.__eq__(maybe_0)
    var_4 = var_1.map(none_type_0)
    maybe_2 = module_0.Maybe(none_type_0, var_1)
    maybe_0.filter(var_4)


def test_case_3():
    tuple_0 = ()
    bool_0 = False
    maybe_0 = module_0.Maybe(tuple_0, bool_0)
    bool_1 = maybe_0.__eq__(bool_0)
    var_0 = maybe_0.to_try()
    var_0.to_either()


def test_case_4():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1 = module_0.Maybe(none_type_0, maybe_0)
    var_0 = maybe_1.filter(none_type_0)
    var_1 = var_0.map(none_type_0)
    maybe_0.filter(var_1)


def test_case_5():
    tuple_0 = ()
    none_type_0 = None
    maybe_0 = module_0.Maybe(tuple_0, tuple_0)
    maybe_0.map(none_type_0)


def test_case_6():
    float_0 = -3222.568
    bool_0 = True
    maybe_0 = module_0.Maybe(float_0, bool_0)
    none_type_0 = None
    var_0 = maybe_0.bind(none_type_0)
    var_1 = maybe_0.bind(none_type_0)
    var_2 = maybe_0.to_try()
    var_3 = var_1.ap(bool_0)
    var_2.to_either()


def test_case_7():
    int_0 = -2175
    bool_0 = False
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.to_try()
    maybe_0.bind(var_0)


def test_case_8():
    bool_0 = True
    int_0 = -316
    bool_1 = True
    maybe_0 = module_0.Maybe(int_0, bool_1)
    var_0 = maybe_0.ap(bool_0)
    var_1 = var_0.to_validation()


def test_case_9():
    generic_0 = module_1.Generic()
    bool_0 = True
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_1, bool_1)
    maybe_0.ap(bool_0)


def test_case_10():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1 = module_0.Maybe(none_type_0, maybe_0)
    var_0 = maybe_1.filter(none_type_0)
    maybe_0.filter(maybe_1)


def test_case_11():
    none_type_0 = None
    none_type_1 = None
    maybe_0 = module_0.Maybe(none_type_1, none_type_1)
    maybe_0.filter(none_type_0)


def test_case_12():
    bool_0 = True
    none_type_0 = None
    int_0 = -2609
    bool_1 = True
    str_0 = "\n        Transform Lazy into successful Validation with constructor_fn result.\n\n        :returns: successfull Validation monad with previous value\n        :rtype: Validation[A, []]\n        "
    float_0 = 1689.3889
    dict_0 = {int_0: int_0, int_0: bool_1, str_0: bool_1, bool_1: float_0}
    maybe_0 = module_0.Maybe(dict_0, int_0)
    var_0 = maybe_0.ap(none_type_0)
    var_1 = var_0.get_or_else(bool_0)
    var_1.to_validation()


def test_case_13():
    none_type_0 = None
    none_type_1 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_1, bool_0)
    var_0 = maybe_0.get_or_else(none_type_0)
    var_0.to_validation()


def test_case_14():
    bytes_0 = b"V9\x1b\xbe\x84\xd0\x8c\x97'"
    int_0 = 4772
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.to_either()
    var_0.get_or_else(bytes_0)


def test_case_15():
    str_0 = ')h`;vNG3Rz"'
    list_0 = []
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_1 = module_0.Maybe(list_0, list_0)
    var_0 = maybe_1.to_either()
    var_0.get_or_else(str_0)


def test_case_16():
    bytes_0 = b" Ox%\xc4K\xcd\x84\xf4lP\xae\xdd\xe4U\xc9\x96N"
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.filter(bool_0)
    var_1 = var_0.ap(bool_0)
    var_2 = var_1.to_lazy()
    var_3 = var_2.map(bool_0)
    maybe_1 = module_0.Maybe(bytes_0, bool_0)
    var_4 = maybe_1.to_box()
    var_5 = maybe_1.to_box()
    var_4.get_or_else(var_5)


def test_case_17():
    bool_0 = False
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_try()
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1.filter(none_type_0)


def test_case_18():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_validation()
    maybe_1 = module_0.Maybe(none_type_0, var_0)
    var_1 = maybe_1.filter(none_type_0)
    var_2 = maybe_1.to_lazy()
    var_3 = var_1.map(none_type_0)
    maybe_2 = module_0.Maybe(none_type_0, var_1)
    maybe_0.filter(var_3)


def test_case_19():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    maybe_1 = module_0.Maybe(none_type_0, var_0)
    var_1 = maybe_1.filter(none_type_0)
    var_2 = maybe_1.to_lazy()
    var_3 = var_1.map(none_type_0)
    maybe_2 = module_0.Maybe(none_type_0, var_1)
    maybe_0.filter(var_3)


def test_case_20():
    bool_0 = False
    bytes_0 = b"\xf9T\xe3\x18"
    list_0 = [bool_0, bool_0, bytes_0]
    maybe_0 = module_0.Maybe(list_0, list_0)
    var_0 = maybe_0.to_validation()


def test_case_21():
    int_0 = -3389
    bool_0 = False
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_box()
    var_1.map(int_0)


def test_case_22():
    str_0 = ".zO.St@"
    list_0 = [str_0, str_0, str_0, str_0, str_0, str_0]
    none_type_0 = None
    dict_0 = {}
    tuple_0 = (dict_0, dict_0)
    maybe_0 = module_0.Maybe(dict_0, tuple_0)
    var_0 = maybe_0.ap(str_0)
    bool_0 = maybe_0.__eq__(var_0)
    var_1 = var_0.ap(none_type_0)
    var_2 = var_1.to_lazy()
    maybe_1 = module_0.Maybe(list_0, str_0)
    var_3 = maybe_1.map(var_0)
    var_4 = var_2.to_try()
    var_5 = var_4.get_or_else(maybe_0)
    var_4.to_either()


def test_case_23():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.filter(none_type_0)
    var_1 = maybe_0.to_validation()
    var_2 = maybe_0.to_lazy()
    bool_1 = maybe_0.__eq__(var_0)
    var_3 = var_2.to_validation()
    bool_2 = False
    maybe_1 = module_0.Maybe(bool_0, bool_2)
    var_4 = var_0.to_lazy()
    var_5 = maybe_0.to_lazy()
    var_6 = var_5.ap(bool_0)
    var_7 = var_5.to_either()
    var_8 = var_2.to_try()
    var_9 = var_4.to_try()
    var_9.to_try()


def test_case_24():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = True
    var_0 = maybe_0.to_validation()
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    var_1 = maybe_1.filter(none_type_0)
    var_2 = maybe_1.to_validation()
    var_3 = maybe_1.to_lazy()
    var_4 = var_1.to_validation()
    var_5 = maybe_0.to_box()
    var_6 = maybe_1.to_lazy()
    bool_1 = maybe_0.__eq__(maybe_0)
    var_7 = var_1.map(var_0)
    bool_2 = True
    maybe_2 = module_0.Maybe(var_0, bool_2)
    var_2.ap(var_3)
