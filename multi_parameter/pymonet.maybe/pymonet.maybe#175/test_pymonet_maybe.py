# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    int_0 = 1930
    maybe_0 = module_0.Maybe(int_0, int_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    bool_2 = maybe_0.__eq__(bool_0)
    bool_3 = maybe_0.__eq__(bool_0)


def test_case_3():
    bytes_0 = b"\xb8/5u\x14\x9b\xa0W\x8b4\xdc\xa6"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_lazy()
    bool_0 = maybe_0.__eq__(var_0)
    var_1 = maybe_0.get_or_else(maybe_0)
    var_2 = maybe_0.map(var_1)
    var_3 = maybe_0.to_either()
    none_type_0 = None
    var_4 = maybe_0.filter(var_3)
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1.filter(var_3)


def test_case_4():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.map(none_type_0)


def test_case_5():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.bind(none_type_0)
    bool_1 = False
    maybe_2 = module_0.Maybe(var_0, bool_1)
    var_1 = maybe_2.to_box()
    none_type_1 = None
    var_2 = var_0.to_box()
    bool_2 = True
    maybe_3 = module_0.Maybe(none_type_1, bool_2)
    var_3 = maybe_3.to_either()


def test_case_6():
    bytes_0 = b"\xa4^_\xed8\xe4t\nf\x0b\x85\xc8\xdci\xe1\xca;\xc7"
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    maybe_0.bind(bytes_0)


def test_case_7():
    str_0 = "T'DBLnLFz^WQm!\r.]"
    int_0 = -1155
    float_0 = -1554.28
    maybe_0 = module_0.Maybe(float_0, float_0)
    bool_0 = True
    maybe_1 = module_0.Maybe(maybe_0, bool_0)
    var_0 = maybe_1.ap(int_0)
    var_1 = var_0.get_or_else(str_0)
    var_1.to_lazy()


def test_case_8():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    maybe_0.ap(none_type_0)


def test_case_9():
    float_0 = -4443.918571
    bool_0 = False
    maybe_0 = module_0.Maybe(float_0, bool_0)
    bool_1 = True
    var_0 = maybe_0.get_or_else(bool_1)
    var_0.bind(bool_1)


def test_case_10():
    bool_0 = True
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_1, bool_1)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_box()
    var_2 = var_1.to_try()
    var_2.bind(bool_0)


def test_case_11():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_either()
    var_1.to_either()


def test_case_12():
    bool_0 = False
    none_type_0 = None
    bool_1 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_1)
    var_0 = maybe_0.to_lazy()
    maybe_0.filter(bool_0)


def test_case_13():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    maybe_0 = module_0.Maybe(dict_0, bool_0)
    var_0 = maybe_0.to_try()
    var_0.to_validation()


def test_case_14():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_try()
    var_0.to_box()


def test_case_15():
    none_type_0 = None
    str_0 = "One[value={}]"
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_0.filter(none_type_0)


def test_case_16():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = maybe_0.__eq__(none_type_0)
    var_0 = maybe_0.to_validation()
    bool_1 = var_0.__eq__(bool_0)
    var_1 = maybe_0.to_try()


def test_case_17():
    none_type_0 = None
    bool_0 = False
    none_type_1 = None
    bool_1 = True
    maybe_0 = module_0.Maybe(none_type_1, bool_1)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.filter(bool_0)
    var_2 = var_1.to_lazy()
    var_3 = var_2.to_validation()
    var_4 = var_1.to_lazy()
    var_5 = maybe_0.ap(var_4)
    var_6 = var_4.to_box()
    var_7 = var_4.ap(none_type_0)
    var_8 = maybe_0.get_or_else(bool_1)
    var_9 = maybe_0.ap(var_2)


def test_case_18():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_try()
    var_2 = maybe_0.to_box()
    var_1.to_either()


def test_case_19():
    str_0 = "\n        Take function (A) -> B and applied this function on current Validation value.\n\n        :param mapper: mapper function\n        :type mapper: Function(A) -> B\n        :returns: new Validation with mapped value and previous errors\n        :rtype: Validation[B, List[E]]\n        "
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    maybe_0.filter(str_0)


def test_case_20():
    str_0 = "Last[value={}]"
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_try()
    maybe_0.filter(str_0)


def test_case_21():
    bool_0 = False
    none_type_0 = None
    bool_1 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_1)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.filter(none_type_0)
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    bool_2 = maybe_1.__eq__(maybe_0)
    var_2 = maybe_0.to_box()
    var_2.bind(none_type_0)
