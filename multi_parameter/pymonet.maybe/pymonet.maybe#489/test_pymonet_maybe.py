# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1


def test_case_0():
    float_0 = 548.15662
    maybe_0 = module_0.Maybe(float_0, float_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    none_type_0 = None
    var_0 = maybe_0.filter(maybe_0)
    var_1 = maybe_0.get_or_else(none_type_0)
    bool_1 = maybe_0.__eq__(var_1)
    var_2 = maybe_0.bind(var_1)
    var_3 = var_2.to_try()
    var_1.to_either()


def test_case_3():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.to_box()
    var_2 = var_1.to_validation()
    var_3 = maybe_0.map(var_2)
    var_4 = var_3.to_box()
    var_5 = var_2.to_lazy()
    var_6 = var_5.to_validation()


def test_case_4():
    bytes_0 = b"Q\xda\xbfp\xae\x96\x88\x05\xb9\xc2?\xab\xe6"
    bool_0 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1.map(none_type_0)


def test_case_5():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_lazy()
    list_0 = [bool_0, bool_0, none_type_0, none_type_0]
    var_1 = maybe_0.filter(list_0)
    var_2 = var_1.bind(none_type_0)
    var_3 = maybe_0.to_try()
    var_3.to_validation()


def test_case_6():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    bytes_0 = b"\xb3\x9e"
    none_type_0 = None
    maybe_0 = module_0.Maybe(bytes_0, none_type_0)
    maybe_0.bind(set_0)


def test_case_7():
    float_0 = -902.61204
    int_0 = 1789
    str_0 = 'fQ^SITtRufy"O9}eX['
    bytes_0 = b"\xb3\xfc\x80u\xc0\xbet5"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.filter(str_0)
    var_1 = var_0.filter(int_0)
    var_2 = var_1.ap(float_0)
    var_3 = var_2.to_validation()
    var_4 = var_3.to_either()


def test_case_8():
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.ap(maybe_1)
    var_1 = maybe_0.to_try()
    var_1.to_try()


def test_case_9():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_either()
    maybe_0.filter(var_0)


def test_case_10():
    none_type_0 = None
    str_0 = "D>*/ST[~85)yPv,5bbx,"
    bool_0 = True
    bytes_0 = b"\xee\xc5P\n"
    bool_1 = True
    tuple_0 = (str_0, bool_0, bytes_0, bool_1)
    maybe_0 = module_0.Maybe(tuple_0, bool_1)
    var_0 = maybe_0.get_or_else(none_type_0)


def test_case_11():
    none_type_0 = None
    set_0 = set()
    none_type_1 = None
    maybe_0 = module_0.Maybe(set_0, none_type_1)
    var_0 = maybe_0.get_or_else(none_type_0)


def test_case_12():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.to_validation()
    var_2 = var_1.to_either()


def test_case_13():
    none_type_0 = None
    dict_0 = {}
    none_type_1 = None
    maybe_0 = module_0.Maybe(none_type_1, none_type_1)
    var_0 = maybe_0.to_lazy()
    maybe_1 = module_0.Maybe(dict_0, none_type_1)
    var_1 = maybe_1.to_lazy()
    var_2 = maybe_0.to_lazy()
    var_3 = maybe_1.to_validation()
    var_4 = maybe_1.to_box()
    var_5 = maybe_1.get_or_else(none_type_0)
    var_5.bind(var_3)


def test_case_14():
    generic_0 = module_1.Generic()
    float_0 = 1086.0
    maybe_0 = module_0.Maybe(float_0, float_0)
    var_0 = maybe_0.to_lazy()
    bool_0 = var_0.__eq__(generic_0)


def test_case_15():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_lazy()
    list_0 = [bool_0, bool_0, none_type_0, none_type_0]
    var_1 = maybe_0.filter(list_0)
    var_2 = var_1.bind(none_type_0)
    var_3 = maybe_0.to_try()
    var_4 = var_0.bind(bool_0)
    var_5 = var_0.to_try()
    var_5.to_lazy()


def test_case_16():
    bool_0 = True
    none_type_0 = None
    int_0 = -830
    float_0 = 77.87399
    none_type_1 = None
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_validation()
    maybe_1 = module_0.Maybe(float_0, none_type_1)
    var_1 = maybe_1.to_lazy()
    var_2 = var_1.to_validation()
    var_1.get_or_else(int_0)


def test_case_17():
    bytes_0 = b"^\xb5o\xa1R\x1c\xe6X\xe6s\xe1a;"
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.to_either()
    bool_1 = True
    maybe_1 = module_0.Maybe(var_0, bool_1)
    var_1 = maybe_0.filter(var_0)
    bool_2 = True
    maybe_2 = module_0.Maybe(var_1, bool_2)
    var_2 = var_1.filter(var_0)
    none_type_0 = None
    maybe_3 = module_0.Maybe(none_type_0, maybe_0)
    var_3 = maybe_0.get_or_else(var_0)
    maybe_4 = module_0.Maybe(none_type_0, var_0)
    var_4 = var_1.bind(maybe_3)
    bool_3 = maybe_1.__eq__(maybe_3)
    var_5 = var_1.to_try()
    var_6 = var_2.to_lazy()
    var_7 = var_6.to_either()
    var_8 = var_1.to_lazy()
    var_5.to_validation()


def test_case_18():
    complex_0 = 1082.8435 + 331.706778j
    none_type_0 = None
    maybe_0 = module_0.Maybe(complex_0, none_type_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_try()
    var_0.to_try()
