# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    int_0 = -689
    maybe_0 = module_0.Maybe(int_0, int_0)


def test_case_1():
    dict_0 = {}
    maybe_0 = module_0.Maybe(dict_0, dict_0)


def test_case_2():
    tuple_0 = ()
    none_type_0 = None
    maybe_0 = module_0.Maybe(tuple_0, none_type_0)
    bool_0 = maybe_0.__eq__(none_type_0)
    maybe_0.map(maybe_0)


def test_case_3():
    bool_0 = True
    complex_0 = -2417.62733 - 747.2j
    bool_1 = True
    maybe_0 = module_0.Maybe(complex_0, bool_1)
    var_0 = maybe_0.map(bool_0)
    maybe_1 = module_0.Maybe(var_0, bool_0)
    var_1 = var_0.to_try()
    var_1.to_validation()


def test_case_4():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    tuple_0 = ()
    bool_1 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.bind(bool_0)
    bool_2 = True
    maybe_1 = module_0.Maybe(bool_2, tuple_0)
    var_1 = maybe_0.map(maybe_0)
    var_2 = maybe_1.to_try()
    var_3 = var_1.filter(var_2)
    bytes_0 = b"\xa2"
    maybe_2 = module_0.Maybe(bytes_0, bool_0)
    maybe_1.filter(var_0)


def test_case_5():
    complex_0 = -110 + 2770j
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_0.bind(complex_0)


def test_case_6():
    none_type_0 = None
    bytes_0 = b"\xf2\xf4N"
    str_0 = "\n        Returns Lazy with function returning argument.\n\n        :param value: value to return by Lazy constructor_fn\n        :type value: Any\n        :returns: Lazy with function returning argument\n        :rtype: Lazy[Function() -> A]\n        "
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.ap(bytes_0)
    var_1 = var_0.to_lazy()
    var_2 = var_1.to_either()
    var_3 = var_2.to_try()
    var_3.filter(none_type_0)


def test_case_7():
    tuple_0 = ()
    none_type_0 = None
    maybe_0 = module_0.Maybe(tuple_0, none_type_0)
    bool_0 = maybe_0.__eq__(none_type_0)
    maybe_0.ap(tuple_0)


def test_case_8():
    none_type_0 = None
    bytes_0 = b"\xe0;s\x82f\x08\xc1\xb1i^)\xc3dt\x8bf \x96\x8e"
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.filter(none_type_0)
    var_1 = var_0.to_try()
    var_1.to_try()


def test_case_9():
    none_type_0 = None
    bytes_0 = b"\xe0;s\x82f\x08\xc1\xb1i^)\xc3dt\x8bf \x96\x8e"
    bool_0 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    maybe_0.filter(none_type_0)


def test_case_10():
    bool_0 = True
    none_type_0 = None
    bool_1 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_1)
    var_0 = maybe_0.get_or_else(bool_0)
    var_0.to_lazy()


def test_case_11():
    none_type_0 = None
    bytes_0 = b"\x1a`\xf4b"
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.to_lazy()
    var_2 = var_1.map(bytes_0)
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_3 = maybe_1.to_either()
    var_4 = maybe_1.get_or_else(maybe_1)
    var_4.to_try()


def test_case_12():
    int_0 = -703
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.to_either()


def test_case_13():
    bool_0 = True
    bool_1 = True
    bool_2 = True
    none_type_0 = None
    none_type_1 = None
    maybe_0 = module_0.Maybe(none_type_1, bool_0)
    var_0 = maybe_0.ap(none_type_0)
    var_1 = var_0.get_or_else(bool_1)
    maybe_1 = module_0.Maybe(bool_2, bool_2)
    var_2 = maybe_0.get_or_else(bool_1)
    var_3 = maybe_1.to_box()
    var_4 = maybe_1.ap(bool_1)
    var_5 = var_4.to_either()
    var_6 = var_5.to_validation()
    var_6.filter(bool_0)


def test_case_14():
    float_0 = 267.241976
    list_0 = [float_0, float_0, float_0]
    maybe_0 = module_0.Maybe(list_0, float_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_try()


def test_case_15():
    str_0 = "e"
    str_1 = "\n        Transform Lazy into Either (Right) with constructor_fn result.\n\n        :returns: Right monad with constructor_fn result\n        :rtype: Right[A]\n        "
    bool_0 = False
    maybe_0 = module_0.Maybe(str_1, bool_0)
    var_0 = maybe_0.to_lazy()
    var_0.get_or_else(str_0)


def test_case_16():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    tuple_0 = ()
    bool_1 = False
    maybe_0 = module_0.Maybe(tuple_0, bool_1)
    var_0 = maybe_0.to_try()
    var_0.map(list_0)


def test_case_17():
    list_0 = []
    complex_0 = -1688.66375 + 3404j
    bool_0 = True
    maybe_0 = module_0.Maybe(complex_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_0.ap(list_0)


def test_case_18():
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_1 = maybe_0.__eq__(bool_0)
    var_0 = maybe_0.to_validation()
    maybe_1 = module_0.Maybe(bool_0, none_type_0)
    maybe_1.ap(none_type_0)


def test_case_19():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_try()
    var_1.to_try()


def test_case_20():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.ap(maybe_0)
    var_1 = var_0.get_or_else(var_0)
    var_2 = var_0.map(var_1)
    var_3 = maybe_0.map(var_0)
    var_4 = var_0.to_try()
    var_5 = var_2.to_either()
    var_6 = var_1.filter(var_1)
    var_7 = var_0.to_box()
    var_8 = var_3.filter(var_5)
    maybe_1 = module_0.Maybe(maybe_0, var_7)
    var_9 = var_8.filter(var_1)
    var_10 = var_7.to_either()
    maybe_2 = module_0.Maybe(var_9, maybe_0)
    var_11 = var_7.to_try()
    maybe_3 = module_0.Maybe(var_2, var_11)
    var_12 = var_6.to_lazy()
    bool_1 = var_2.__eq__(maybe_1)
    var_13 = var_3.to_either()


def test_case_21():
    bool_0 = False
    set_0 = {bool_0}
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_1, bool_0)
    maybe_1 = module_0.Maybe(set_0, bool_1)
    bool_2 = maybe_0.__eq__(maybe_1)
    bool_3 = True
    none_type_0 = None
    maybe_2 = module_0.Maybe(none_type_0, bool_3)
    var_0 = maybe_2.ap(none_type_0)
    var_1 = maybe_1.to_box()
    var_2 = maybe_2.to_either()
    var_3 = var_0.ap(var_1)
    var_4 = maybe_1.to_try()
    var_5 = var_2.bind(var_4)
    var_4.to_try()
