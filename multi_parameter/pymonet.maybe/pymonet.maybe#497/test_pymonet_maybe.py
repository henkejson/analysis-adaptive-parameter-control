# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    str_0 = "-"
    maybe_0 = module_0.Maybe(str_0, str_0)


def test_case_1():
    str_0 = ""
    maybe_0 = module_0.Maybe(str_0, str_0)


def test_case_2():
    bool_0 = True
    str_0 = "\n        Transform Box into Right either.\n\n        :returns: right Either monad with previous value\n        :rtype: Right[A]\n        "
    tuple_0 = (str_0,)
    bool_1 = False
    maybe_0 = module_0.Maybe(tuple_0, bool_1)
    var_0 = maybe_0.to_lazy()
    bool_2 = maybe_0.__eq__(bool_1)
    var_1 = var_0.to_box()
    var_1.get_or_else(bool_0)


def test_case_3():
    bytes_0 = b"\xc9\x8a\xc6\x1f\xc1\xd5|\xbef\x0f\n8\x08\xa2"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.map(maybe_0)
    none_type_0 = None
    bool_0 = maybe_0.__eq__(none_type_0)
    var_1 = maybe_0.to_validation()
    var_2 = var_1.to_box()
    maybe_1 = module_0.Maybe(bytes_0, maybe_0)
    str_0 = "zm5'<iT#)y~+"
    var_1.get_or_else(str_0)


def test_case_4():
    int_0 = 1575
    bool_0 = False
    none_type_0 = None
    maybe_0 = module_0.Maybe(int_0, none_type_0)
    maybe_0.map(bool_0)


def test_case_5():
    complex_0 = -2389 - 631.52108j
    maybe_0 = module_0.Maybe(complex_0, complex_0)
    var_0 = maybe_0.bind(complex_0)
    bytes_0 = b"=\xf2?"
    maybe_1 = module_0.Maybe(bytes_0, bytes_0)
    var_1 = maybe_0.to_lazy()
    var_2 = maybe_1.to_validation()
    float_0 = 27.7212
    bool_0 = maybe_1.__eq__(float_0)
    var_3 = maybe_1.bind(var_1)
    var_4 = var_2.to_try()


def test_case_6():
    set_0 = set()
    int_0 = 0
    maybe_0 = module_0.Maybe(int_0, int_0)
    maybe_0.bind(set_0)


def test_case_7():
    str_0 = "\n        Transform Either into Validation.\n\n        :returns: successfull Validation monad with previous value\n        :rtype: Validation[A, []]\n        "
    maybe_0 = module_0.Maybe(str_0, str_0)
    maybe_1 = module_0.Maybe(maybe_0, maybe_0)
    complex_0 = -2983.00406 + 552.579919j
    int_0 = 2692
    bool_0 = True
    tuple_0 = (complex_0, int_0, bool_0)
    var_0 = maybe_0.ap(tuple_0)
    var_1 = maybe_0.map(var_0)
    var_2 = var_1.to_box()
    var_2.to_box()


def test_case_8():
    bool_0 = False
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_0, none_type_0)
    maybe_0.ap(bool_0)


def test_case_9():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.filter(bool_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(none_type_0, bool_1)
    maybe_1.filter(bool_0)


def test_case_10():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    maybe_0.filter(maybe_0)


def test_case_11():
    complex_0 = -2389 - 631.52108j
    maybe_0 = module_0.Maybe(complex_0, complex_0)
    var_0 = maybe_0.bind(complex_0)
    bytes_0 = b"=\xf2?"
    none_type_0 = None
    var_1 = var_0.get_or_else(none_type_0)
    var_2 = maybe_0.map(var_1)
    maybe_1 = module_0.Maybe(bytes_0, bytes_0)
    var_3 = maybe_0.to_lazy()
    var_4 = maybe_1.to_validation()
    float_0 = 27.7212
    bool_0 = maybe_1.__eq__(float_0)
    var_5 = maybe_1.bind(var_3)
    var_6 = var_4.to_try()


def test_case_12():
    bool_0 = False
    none_type_0 = None
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_try()
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_1 = maybe_1.get_or_else(bool_0)
    maybe_1.filter(bool_0)


def test_case_13():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_try()
    maybe_1 = module_0.Maybe(none_type_0, var_0)
    var_1 = maybe_1.to_validation()
    str_0 = "Kp;c6O6\x0c?a?*\x0cEAc"
    maybe_2 = module_0.Maybe(str_0, str_0)
    var_2 = maybe_2.to_either()


def test_case_14():
    str_0 = "#i&]<8"
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.to_validation()
    var_2 = maybe_0.to_validation()
    var_3 = maybe_0.to_box()
    var_4 = var_3.to_either()
    var_5 = maybe_0.to_either()
    var_5.ap(bool_0)


def test_case_15():
    complex_0 = -2389 - 631.52108j
    maybe_0 = module_0.Maybe(complex_0, complex_0)
    var_0 = maybe_0.bind(complex_0)
    bytes_0 = b"=\xf2?"
    maybe_1 = module_0.Maybe(bytes_0, bytes_0)
    var_1 = maybe_0.to_lazy()
    var_2 = maybe_1.to_validation()
    float_0 = 27.7212
    bool_0 = maybe_1.__eq__(float_0)
    var_3 = var_0.to_box()
    var_3.map(var_3)


def test_case_16():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_box()
    maybe_0.filter(var_0)


def test_case_17():
    bytes_0 = b"*7g\x9br\xb6\x94Dc"
    bool_0 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.to_lazy()


def test_case_18():
    str_0 = "One[value={}]"
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_0, str_0)
    bool_1 = maybe_0.__eq__(none_type_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.ap(str_0)
    var_2 = maybe_0.to_try()
    var_3 = maybe_0.bind(str_0)
    var_4 = maybe_0.filter(bool_0)
    var_5 = maybe_0.to_lazy()
    var_6 = var_4.to_try()
    var_7 = maybe_0.to_either()
    var_7.to_either()


def test_case_19():
    str_0 = "One[value={}]"
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(str_0, none_type_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_validation()
    maybe_0.ap(bool_0)


def test_case_20():
    str_0 = "s2XJZAE#iZ"
    bool_0 = False
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_0, str_0)
    bool_1 = maybe_0.__eq__(none_type_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.bind(none_type_0)
    var_2 = maybe_0.ap(str_0)
    var_3 = maybe_0.to_try()
    var_4 = maybe_0.bind(str_0)
    var_5 = maybe_0.filter(bool_0)
    var_6 = maybe_0.to_lazy()
    var_7 = var_6.to_try()
    var_8 = var_6.map(var_3)
    var_8.to_either()


def test_case_21():
    str_0 = "One[value={}]"
    maybe_0 = module_0.Maybe(str_0, str_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.to_try()
    var_2 = var_1.bind(var_0)
    var_3 = var_0.filter(var_0)
    var_2.to_lazy()


def test_case_22():
    str_0 = "One[value={}]"
    bool_0 = False
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_0, str_0)
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_1)
    var_0 = maybe_1.to_try()
    var_0.bind(none_type_0)
