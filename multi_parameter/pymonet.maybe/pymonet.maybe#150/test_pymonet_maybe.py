# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import typing as module_0
import pymonet.maybe as module_1


def test_case_0():
    generic_0 = module_0.Generic()
    maybe_0 = module_1.Maybe(generic_0, generic_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_1.Maybe(none_type_0, none_type_0)


def test_case_2():
    none_type_0 = None
    maybe_0 = module_1.Maybe(none_type_0, none_type_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_validation()
    maybe_0.map(var_0)


def test_case_3():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    tuple_0 = (dict_0,)
    maybe_0 = module_1.Maybe(tuple_0, bool_0)
    var_0 = maybe_0.to_try()
    maybe_1 = module_1.Maybe(dict_0, bool_0)
    bool_1 = maybe_1.__eq__(bool_0)
    var_1 = maybe_1.to_validation()
    var_1.map(maybe_0)


def test_case_4():
    none_type_0 = None
    bool_0 = True
    tuple_0 = (bool_0,)
    maybe_0 = module_1.Maybe(tuple_0, bool_0)
    var_0 = maybe_0.filter(maybe_0)
    bytes_0 = b"B@\xad\xd4\x05\xadU\xb1\x1e\xc5\xc0\xc3X\xe7\x1d`^Q\xde"
    bool_1 = maybe_0.__eq__(var_0)
    var_1 = maybe_0.map(bytes_0)
    maybe_1 = module_1.Maybe(var_0, none_type_0)
    maybe_1.filter(maybe_0)


def test_case_5():
    bytes_0 = b"Ab{\x84"
    int_0 = -2383
    bytes_1 = b"\xb7J\t\xeb\xa2\xbf"
    set_0 = {bytes_1, bytes_1, bytes_1}
    maybe_0 = module_1.Maybe(set_0, set_0)
    var_0 = maybe_0.bind(int_0)
    var_1 = var_0.get_or_else(bytes_0)
    var_1.to_box()


def test_case_6():
    bool_0 = True
    none_type_0 = None
    bool_1 = False
    maybe_0 = module_1.Maybe(none_type_0, bool_1)
    var_0 = maybe_0.to_validation()
    var_1 = var_0.to_box()
    maybe_1 = module_1.Maybe(bool_0, none_type_0)
    maybe_1.bind(bool_0)


def test_case_7():
    set_0 = set()
    bool_0 = True
    maybe_0 = module_1.Maybe(bool_0, bool_0)
    var_0 = maybe_0.ap(set_0)
    var_1 = var_0.to_lazy()
    var_2 = var_1.to_validation()
    var_3 = var_2.to_lazy()
    var_4 = var_3.to_either()
    var_5 = var_4.to_try()


def test_case_8():
    none_type_0 = None
    maybe_0 = module_1.Maybe(none_type_0, none_type_0)
    maybe_0.ap(maybe_0)


def test_case_9():
    bool_0 = True
    tuple_0 = (bool_0,)
    maybe_0 = module_1.Maybe(tuple_0, bool_0)
    var_0 = maybe_0.filter(maybe_0)
    var_1 = var_0.to_box()
    none_type_0 = None
    maybe_1 = module_1.Maybe(var_0, none_type_0)
    maybe_1.filter(maybe_0)


def test_case_10():
    bool_0 = True
    int_0 = 0
    maybe_0 = module_1.Maybe(int_0, int_0)
    maybe_0.filter(bool_0)


def test_case_11():
    str_0 = "`Ta"
    none_type_0 = None
    maybe_0 = module_1.Maybe(str_0, none_type_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.get_or_else(maybe_0)
    var_2 = var_0.to_box()
    maybe_0.filter(var_1)


def test_case_12():
    bool_0 = True
    tuple_0 = (bool_0,)
    maybe_0 = module_1.Maybe(tuple_0, bool_0)
    var_0 = maybe_0.filter(maybe_0)
    bool_1 = var_0.__eq__(var_0)
    none_type_0 = None
    var_1 = var_0.to_lazy()
    var_2 = maybe_0.to_either()
    maybe_1 = module_1.Maybe(var_0, none_type_0)
    maybe_1.filter(var_2)


def test_case_13():
    bool_0 = False
    none_type_0 = None
    maybe_0 = module_1.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_try()
    var_1.ap(bool_0)


def test_case_14():
    none_type_0 = None
    maybe_0 = module_1.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_box()
    var_0.map(none_type_0)


def test_case_15():
    str_0 = "\n        Returns failed Validation with None as value and errors list.\n\n        :params errors: list of errors to store\n        :type value: List[E]\n        :returns: Failed Validation\n        :rtype: Validation[None, List[E]]\n        "
    bytes_0 = b""
    list_0 = [str_0, str_0, bytes_0]
    complex_0 = -1215.3332 + 3396.9987j
    maybe_0 = module_1.Maybe(complex_0, complex_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_try()
    var_1.ap(list_0)


def test_case_16():
    tuple_0 = ()
    bool_0 = False
    maybe_0 = module_1.Maybe(tuple_0, bool_0)
    var_0 = maybe_0.to_lazy()
    bool_1 = True
    bool_2 = False
    maybe_1 = module_1.Maybe(bool_1, bool_2)
    var_1 = maybe_1.to_lazy()
    var_2 = maybe_1.to_either()
    var_2.to_either()


def test_case_17():
    none_type_0 = None
    maybe_0 = module_1.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_try()
    maybe_0.map(var_0)


def test_case_18():
    generic_0 = module_0.Generic()
    maybe_0 = module_1.Maybe(generic_0, generic_0)
    var_0 = maybe_0.to_validation()


def test_case_19():
    bool_0 = False
    maybe_0 = module_1.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = var_0.to_lazy()


def test_case_20():
    bool_0 = False
    maybe_0 = module_1.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_lazy()
    maybe_1 = module_1.Maybe(bool_0, bool_0)
    var_1 = maybe_1.to_box()
    var_2 = var_0.to_box()
    var_3 = var_1.to_either()
    var_1.filter(var_3)


def test_case_21():
    none_type_0 = None
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    tuple_0 = (dict_0,)
    maybe_0 = module_1.Maybe(tuple_0, bool_0)
    bool_1 = True
    maybe_1 = module_1.Maybe(none_type_0, bool_1)
    var_0 = maybe_0.to_try()
    tuple_1 = (maybe_1, var_0)
    maybe_2 = module_1.Maybe(var_0, tuple_1)
    var_1 = maybe_2.filter(maybe_0)
    bool_2 = var_1.__eq__(maybe_2)
    var_2 = var_1.to_lazy()
    var_3 = var_1.to_box()
    var_4 = maybe_0.to_either()
    var_5 = var_3.to_either()
    var_5.bind(var_4)
