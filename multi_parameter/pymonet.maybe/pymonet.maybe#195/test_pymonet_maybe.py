# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    none_type_0 = None
    none_type_1 = None
    maybe_0 = module_0.Maybe(none_type_1, none_type_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    maybe_1 = maybe_0.to_box()
    maybe_1.bind(none_type_1)


def test_case_3():
    int_0 = -209
    none_type_0 = None
    none_type_1 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_1, bool_0)
    bool_1 = maybe_0.__eq__(none_type_0)
    complex_0 = 882.9 - 1938.231j
    maybe_1 = module_0.Maybe(complex_0, complex_0)
    var_0 = maybe_1.to_lazy()
    var_1 = maybe_1.to_try()
    var_2 = var_1.get_or_else(int_0)


def test_case_4():
    bytes_0 = b"bE\x8c_\xfa\xd5\\\x156="
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    float_0 = -1525.0
    maybe_1 = module_0.Maybe(float_0, bytes_0)
    bool_1 = maybe_0.__eq__(maybe_1)
    complex_0 = 882.9 - 1938.231j
    maybe_2 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_1.map(complex_0)
    var_2 = var_1.map(var_0)
    var_3 = var_2.to_try()
    var_0.get_or_else(maybe_2)


def test_case_5():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.ap(maybe_0)


def test_case_6():
    str_0 = "nbF"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.to_lazy()
    str_1 = "\n        :returns: True\n        :rtype: Boolean\n        "
    maybe_1 = module_0.Maybe(str_1, str_1)
    var_1 = maybe_1.to_try()
    var_2 = maybe_1.bind(var_1)
    list_0 = [var_1, str_1]
    bool_0 = True
    maybe_2 = module_0.Maybe(list_0, bool_0)
    var_1.to_lazy()


def test_case_7():
    tuple_0 = ()
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_try()
    maybe_1 = module_0.Maybe(tuple_0, tuple_0)
    var_2 = maybe_1.to_lazy()
    none_type_1 = None
    var_3 = maybe_1.get_or_else(none_type_1)
    var_4 = var_2.to_either()
    var_5 = maybe_1.to_try()
    maybe_1.bind(var_5)


def test_case_8():
    float_0 = -1096.34935
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_either()
    none_type_1 = None
    bool_0 = True
    maybe_1 = module_0.Maybe(none_type_1, bool_0)
    var_1 = maybe_1.map(var_0)
    var_2 = var_1.ap(float_0)
    var_3 = var_2.to_lazy()
    bool_1 = True
    maybe_2 = module_0.Maybe(var_3, bool_1)
    var_4 = var_3.to_box()
    var_4.to_box()


def test_case_9():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.filter(bool_0)


def test_case_10():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.filter(bool_0)
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1.filter(maybe_1)


def test_case_11():
    dict_0 = {}
    int_0 = 214
    bool_0 = False
    str_0 = "\n        Transform Maybe to Try.\n\n        :returns: Lazy monad with function returning previous value in other case Left with None\n        :rtype: Lazy[Function() -> (A | None)]\n        "
    maybe_0 = module_0.Maybe(bool_0, str_0)
    var_0 = maybe_0.get_or_else(int_0)
    var_0.ap(dict_0)


def test_case_12():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.get_or_else(maybe_0)
    var_1.to_try()


def test_case_13():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.filter(var_0)
    list_0 = []
    maybe_1 = module_0.Maybe(list_0, list_0)
    var_2 = var_0.to_try()
    maybe_1.filter(var_0)


def test_case_14():
    bytes_0 = b"bE\x8c_\xfa\xd5\\\x156="
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = maybe_0.__eq__(bytes_0)
    none_type_1 = None
    bool_2 = True
    maybe_1 = module_0.Maybe(none_type_1, bool_2)
    complex_0 = 2549.99738 - 2381.5647j
    bool_3 = False
    maybe_2 = module_0.Maybe(complex_0, bool_3)
    var_0 = maybe_2.to_lazy()
    var_1 = maybe_0.to_either()
    var_2 = var_0.to_either()
    var_1.ap(complex_0)


def test_case_15():
    bytes_0 = b"\x96\x8d\x8ex2\xd3\xd90\xe4\xe1\x90#\xd2"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_box()
    var_0.to_box()


def test_case_16():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.filter(bool_0)
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_1 = maybe_0.to_lazy()
    maybe_1.filter(maybe_1)


def test_case_17():
    int_0 = 0
    bool_0 = False
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_0.to_lazy()


def test_case_18():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = True
    var_0 = maybe_0.to_try()
    maybe_1 = module_0.Maybe(bool_1, var_0)
    bool_2 = var_0.__eq__(bool_0)
    var_1 = maybe_0.to_validation()
    maybe_2 = module_0.Maybe(maybe_0, bool_1)
    var_2 = maybe_0.filter(bool_0)


def test_case_19():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_try()
    maybe_0.ap(var_0)


def test_case_20():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = False
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.to_validation()
    maybe_1 = module_0.Maybe(maybe_0, bool_1)
    var_2 = maybe_0.filter(bool_0)


def test_case_21():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_validation()
    var_0.to_validation()


def test_case_22():
    str_0 = "Hl"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    var_1 = maybe_0.filter(maybe_0)
    var_2 = var_1.to_validation()
    var_3 = maybe_0.bind(maybe_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    bool_1 = var_3.__eq__(maybe_0)
    var_4 = var_1.bind(var_1)
    var_5 = maybe_0.ap(bool_1)
    var_6 = var_4.to_try()
    var_7 = maybe_0.filter(var_6)
    var_8 = maybe_0.get_or_else(maybe_0)
    maybe_1 = module_0.Maybe(bool_1, bool_1)
    var_9 = var_6.get_or_else(maybe_1)
    var_10 = var_8.to_try()
    var_11 = maybe_0.to_box()
    str_1 = "Fv@L20"
    dict_0 = {str_1: maybe_0}
    module_1.Generic(**dict_0)
