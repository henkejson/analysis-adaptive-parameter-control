# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import builtins as module_1


def test_case_0():
    bytes_0 = b"\x15q\xa3\x19\xe2ni`&`\x9b"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    none_type_0 = None
    none_type_1 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_1, bool_0)
    var_0 = maybe_0.ap(none_type_0)
    var_1 = var_0.to_box()
    var_2 = var_0.to_either()
    bool_1 = maybe_0.__eq__(var_0)
    var_3 = maybe_0.bind(var_2)
    var_4 = var_3.get_or_else(var_3)
    var_5 = var_0.to_validation()
    var_6 = var_0.map(var_1)


def test_case_3():
    none_type_0 = None
    int_0 = -402
    maybe_0 = module_0.Maybe(int_0, int_0)
    bool_0 = True
    maybe_1 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_1.get_or_else(none_type_0)
    none_type_1 = None
    bool_1 = var_0.__eq__(maybe_1)
    maybe_2 = module_0.Maybe(none_type_1, none_type_1)
    bool_2 = maybe_2.__eq__(var_0)


def test_case_4():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_validation()
    maybe_0.map(var_0)


def test_case_5():
    none_type_0 = None
    list_0 = []
    bool_0 = False
    maybe_0 = module_0.Maybe(list_0, bool_0)
    maybe_0.bind(none_type_0)


def test_case_6():
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.ap(bool_0)


def test_case_7():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.filter(none_type_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(none_type_0, bool_1)
    maybe_1.filter(maybe_0)


def test_case_8():
    object_0 = module_1.object()
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.get_or_else(object_0)
    float_0 = -2756.45
    int_0 = -403
    maybe_1 = module_0.Maybe(int_0, int_0)
    var_1 = maybe_1.get_or_else(float_0)
    var_1.to_validation()


def test_case_9():
    str_0 = "\n        Call success_callback function with monad value when monad is successfully.\n\n        :params success_callback: function to apply with monad value.\n        :type success_callback: Function(A)\n        :returns: self\n        :rtype: Try[A]\n        "
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    var_1 = maybe_0.to_try()
    var_1.to_lazy()


def test_case_10():
    int_0 = 4800
    bool_0 = False
    maybe_0 = module_0.Maybe(int_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_try()
    maybe_1 = module_0.Maybe(var_0, var_0)
    var_1 = maybe_1.to_validation()
    var_2 = maybe_1.ap(int_0)
    var_3 = var_2.to_validation()
    var_4 = maybe_1.filter(var_0)
    var_5 = var_1.to_box()
    var_6 = maybe_0.to_either()
    var_7 = maybe_0.to_either()
    var_1.filter(var_2)


def test_case_11():
    list_0 = []
    maybe_0 = module_0.Maybe(list_0, list_0)
    var_0 = maybe_0.to_box()
    var_0.get_or_else(maybe_0)


def test_case_12():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.filter(none_type_0)
    var_1 = var_0.to_lazy()
    bytes_0 = b""
    bool_1 = False
    maybe_1 = module_0.Maybe(bytes_0, bool_1)
    maybe_1.filter(var_1)


def test_case_13():
    bool_0 = False
    bytes_0 = b"\x9b\xa0\x12L\x06Y\xf6"
    tuple_0 = (bytes_0,)
    bool_1 = False
    maybe_0 = module_0.Maybe(tuple_0, bool_1)
    var_0 = maybe_0.to_lazy()
    var_0.filter(bool_0)


def test_case_14():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_try()
    var_1 = var_0.get_or_else(none_type_0)
    bool_1 = True
    maybe_1 = module_0.Maybe(none_type_0, bool_1)


def test_case_15():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_validation()


def test_case_16():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.ap(none_type_0)
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_1 = maybe_0.to_box()
    bool_1 = var_0.__eq__(var_0)
    var_2 = var_0.to_lazy()
    var_3 = var_2.to_try()
    var_4 = var_0.to_try()
    var_5 = var_0.ap(none_type_0)
    var_6 = var_5.to_try()
    var_7 = var_6.bind(none_type_0)
    var_8 = var_6.get_or_else(maybe_0)
    var_6.ap(var_3)


def test_case_17():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_validation()
    maybe_0.map(none_type_0)


def test_case_18():
    int_0 = 4800
    bool_0 = False
    maybe_0 = module_0.Maybe(int_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    maybe_1 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_1.to_validation()
    maybe_0.filter(var_0)


def test_case_19():
    bytes_0 = b"U\xfa\xef\xfa\xccb5LjY\x13"
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.filter(bytes_0)
    var_1 = var_0.to_try()
    var_2 = var_0.to_either()
    var_3 = var_0.filter(var_2)
    var_4 = var_0.ap(bool_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(var_1, bool_1)
    var_5 = maybe_1.to_validation()
    bool_2 = maybe_0.__eq__(bool_0)
    var_6 = var_3.bind(var_5)
    maybe_2 = module_0.Maybe(bool_0, var_5)
    var_7 = var_3.to_box()
    var_8 = maybe_0.filter(var_3)
    var_9 = var_3.to_validation()
    maybe_3 = module_0.Maybe(maybe_2, var_0)
    bool_3 = maybe_0.__eq__(maybe_2)
