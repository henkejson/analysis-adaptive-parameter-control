# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    int_0 = 933
    maybe_0 = module_0.Maybe(int_0, int_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    bool_1 = maybe_0.__eq__(none_type_0)
    maybe_0.ap(none_type_0)


def test_case_3():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = maybe_0.__eq__(none_type_0)
    maybe_0.ap(none_type_0)


def test_case_4():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.map(bool_0)
    bool_1 = var_0.__eq__(bool_0)
    var_1 = maybe_0.filter(var_0)
    var_2 = maybe_0.get_or_else(bool_0)
    var_3 = maybe_0.to_box()
    var_4 = var_3.to_validation()
    var_5 = maybe_0.to_box()


def test_case_5():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    maybe_0.map(bool_0)


def test_case_6():
    complex_0 = 366.4965 + 642.275j
    bool_0 = False
    maybe_0 = module_0.Maybe(complex_0, bool_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    tuple_0 = ()
    bytes_0 = b"\xfcH\xf7\xda\x80\xc5\xcf\x8a8@\x90\x8a\x06{@\x1fS\xa4L"
    maybe_2 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_2.bind(tuple_0)
    var_1 = var_0.to_lazy()
    var_1.filter(none_type_0)


def test_case_7():
    bool_0 = False
    complex_0 = 2334.5 - 3313j
    bool_1 = True
    maybe_0 = module_0.Maybe(complex_0, bool_1)
    var_0 = maybe_0.ap(bool_0)
    none_type_0 = None
    bool_2 = False
    maybe_1 = module_0.Maybe(none_type_0, bool_2)
    maybe_1.bind(var_0)


def test_case_8():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_box()
    maybe_0.filter(var_0)


def test_case_9():
    str_0 = "QFhP\x0cn=J|"
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.get_or_else(bool_0)
    bool_1 = maybe_0.__eq__(var_0)
    var_2 = maybe_0.to_lazy()


def test_case_10():
    bytes_0 = b"3\x94D\x06\xfeQ\x9d\x0bg\n`\x830\xcaM\xb7\xb1\xb8\x89"
    bool_0 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    bool_1 = maybe_0.__eq__(bytes_0)
    none_type_0 = None
    var_0 = maybe_0.get_or_else(none_type_0)
    var_1 = maybe_0.to_lazy()
    var_2 = maybe_0.to_either()
    var_3 = var_2.to_try()
    var_3.map(bytes_0)


def test_case_11():
    str_0 = "=ke7H{;U)u[xk"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_either()
    bytes_0 = b"\xa0\xf2\x1e}\xd6\xd7\x05:\xca\xdb\xf0\xba=\x1cjW\xdd$\xbf"
    maybe_1 = module_0.Maybe(str_0, bytes_0)
    var_2 = maybe_0.ap(var_1)
    var_3 = maybe_1.to_validation()
    var_4 = maybe_1.to_either()
    var_4.to_either()


def test_case_12():
    str_0 = "$-FE![~>"
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_either()
    bool_1 = False
    maybe_1 = module_0.Maybe(var_0, bool_1)
    var_1 = maybe_1.to_try()
    var_1.to_lazy()


def test_case_13():
    int_0 = 607
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.ap(int_0)
    set_0 = {int_0, int_0}
    maybe_1 = module_0.Maybe(set_0, int_0)


def test_case_14():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()


def test_case_15():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_try()
    var_0.to_either()


def test_case_16():
    bool_0 = False
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_try()
    tuple_0 = (var_0, var_0, var_0)
    list_0 = [var_0, bool_0, tuple_0]
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    bool_2 = maybe_1.__eq__(list_0)
    int_0 = -946
    maybe_2 = module_0.Maybe(int_0, int_0)


def test_case_17():
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_validation()
    var_0.map(bool_0)


def test_case_18():
    none_type_0 = None
    bool_0 = none_type_0.__eq__(none_type_0)


def test_case_19():
    bytes_0 = b'?X"V\x9e\x01\xd5\xcc\xda\x16\xeb'
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_validation()
    var_2 = var_0.to_either()
    bool_0 = var_0.__eq__(maybe_0)
    var_0.to_lazy()


def test_case_20():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    bool_1 = maybe_0.__eq__(none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.map(var_0)
    var_1.to_box()


def test_case_21():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.filter(bool_0)
    var_1 = var_0.to_box()


def test_case_22():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.bind(bool_0)
    var_1 = module_0.Maybe(var_0, maybe_0)
    maybe_1 = module_0.Maybe(var_0, var_1)
    bool_1 = maybe_0.__eq__(var_1)
    var_2 = var_0.to_box()
    var_3 = maybe_0.get_or_else(maybe_0)
    maybe_2 = module_0.Maybe(var_2, var_2)
    var_4 = var_1.filter(maybe_2)
    var_5 = var_0.ap(bool_1)
    var_6 = var_5.to_either()
    bool_2 = False
    maybe_3 = module_0.Maybe(bool_0, bool_2)
    maybe_3.filter(var_6)
