# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    int_0 = -2881
    bytes_0 = b"\xf5\xe6\xd1\xdec\xe0\xfe\x16\xc1\x90\xf7A\xc9\x9cg"
    set_0 = {int_0, bytes_0, int_0}
    none_type_0 = None
    maybe_0 = module_0.Maybe(set_0, none_type_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_box()


def test_case_3():
    int_0 = -1659
    list_0 = [int_0, int_0, int_0]
    bytes_0 = b"Sg\x9d5\xd5\xdfE\x91\xd9"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    bool_0 = False
    var_0 = maybe_0.ap(bool_0)
    bool_1 = maybe_0.__eq__(bool_0)
    var_1 = maybe_0.filter(list_0)
    var_2 = var_1.to_validation()


def test_case_4():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.filter(maybe_0)
    var_1 = var_0.map(bool_0)
    bool_1 = maybe_0.to_either()
    var_2 = var_0.to_validation()
    var_2.get_or_else(bool_1)


def test_case_5():
    bool_0 = False
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_0, none_type_0)
    maybe_0.map(bool_0)


def test_case_6():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.filter(bool_0)
    var_1 = maybe_0.bind(maybe_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(var_1, bool_1)
    maybe_1.filter(bool_0)


def test_case_7():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_validation()
    bool_0 = var_0.__eq__(var_0)
    maybe_0.bind(var_0)


def test_case_8():
    bool_0 = True
    bool_1 = True
    tuple_0 = (bool_1, bool_1, bool_1)
    maybe_0 = module_0.Maybe(bool_1, bool_1)
    var_0 = maybe_0.to_box()
    bool_2 = var_0.__eq__(bool_1)
    maybe_1 = module_0.Maybe(tuple_0, tuple_0)
    var_1 = maybe_1.ap(bool_0)


def test_case_9():
    none_type_0 = None
    dict_0 = {
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        none_type_0: none_type_0,
    }
    maybe_0 = module_0.Maybe(none_type_0, dict_0)
    bool_0 = False
    maybe_1 = module_0.Maybe(dict_0, bool_0)
    maybe_1.ap(none_type_0)


def test_case_10():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.filter(bool_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(maybe_0, bool_1)
    maybe_1.filter(bool_0)


def test_case_11():
    str_0 = "zA=UGUT|"
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    none_type_0 = None
    var_0 = maybe_0.get_or_else(none_type_0)
    var_1 = maybe_0.to_either()
    var_2 = var_1.to_try()
    var_2.to_either()


def test_case_12():
    int_0 = 385
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.get_or_else(int_0)
    var_0.to_either()


def test_case_13():
    str_0 = ".n_xQ9KarV\t*FZ="
    maybe_0 = module_0.Maybe(str_0, str_0)
    bool_0 = False
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_1.to_try()
    var_1 = maybe_1.to_either()
    bool_1 = maybe_1.__eq__(maybe_1)
    var_0.bind(bool_0)


def test_case_14():
    str_0 = "}xcFeWu@\tDI4u[U\n^"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_either()


def test_case_15():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_box()


def test_case_16():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bytes_0 = b"he\xb9\xe0"
    tuple_0 = (bytes_0, bytes_0, bytes_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_lazy()
    maybe_1 = module_0.Maybe(tuple_0, bytes_0)
    var_2 = maybe_1.to_lazy()
    var_3 = maybe_1.to_try()
    bool_0 = var_3.__eq__(var_3)
    var_3.to_lazy()


def test_case_17():
    list_0 = []
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_either()
    var_1.bind(list_0)


def test_case_18():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.filter(bool_0)
    var_1 = var_0.to_try()
    bool_1 = False
    maybe_1 = module_0.Maybe(var_1, bool_1)
    maybe_1.filter(bool_0)


def test_case_19():
    none_type_0 = None
    set_0 = set()
    maybe_0 = module_0.Maybe(set_0, set_0)
    var_0 = maybe_0.to_validation()
    var_1 = var_0.to_either()
    var_1.filter(none_type_0)


def test_case_20():
    str_0 = "R1m:\x0cB!^aK&>hL"
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    bool_1 = maybe_0.__eq__(str_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.to_lazy()
    var_2 = maybe_0.map(var_1)
    var_3 = var_1.ap(str_0)
    var_4 = var_1.to_validation()
    var_5 = var_0.to_box()
    var_5.get_or_else(bool_0)


def test_case_21():
    str_0 = "A|9hMe'VF0YnL"
    maybe_0 = module_0.Maybe(str_0, str_0)
    bool_0 = maybe_0.__eq__(str_0)
    none_type_0 = None
    bool_1 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.map(none_type_0)
    var_2 = maybe_0.filter(none_type_0)
    var_3 = maybe_0.bind(bool_0)
    var_4 = maybe_0.to_try()
    var_5 = maybe_0.to_box()
    var_6 = var_4.bind(var_5)
    bool_2 = var_6.__eq__(var_4)
    var_7 = var_1.to_box()
    var_8 = var_2.filter(none_type_0)
    var_9 = var_7.to_validation()
    var_4.to_either()


def test_case_22():
    bool_0 = False
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_lazy()
    maybe_1 = module_0.Maybe(bool_1, bool_0)
    int_0 = -604
    bool_2 = maybe_0.__eq__(var_0)
    bool_3 = True
    maybe_2 = module_0.Maybe(maybe_0, bool_3)
    maybe_3 = module_0.Maybe(int_0, int_0)
    var_1 = var_0.to_either()
    var_2 = maybe_3.to_either()
    var_3 = maybe_0.to_either()
    bool_4 = maybe_1.__eq__(maybe_2)
    maybe_4 = module_0.Maybe(bool_1, var_0)
    var_4 = maybe_0.map(bool_3)
    var_5 = maybe_3.to_either()
    bool_5 = maybe_3.__eq__(maybe_3)
    var_6 = maybe_2.to_try()
    var_5.get_or_else(var_6)
