# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import builtins as module_1


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    bytes_0 = b"\xfb\xf7\xe0\xa8V_X\xce.\n\x90\xc7\xf4\x1ar\x8b<"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.filter(var_0)
    var_2 = var_1.to_lazy()
    var_3 = var_0.bind(maybe_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_4 = var_1.bind(var_0)
    var_5 = var_2.to_box()
    var_6 = var_0.filter(var_5)
    var_7 = var_2.ap(var_2)
    var_7.to_either()


def test_case_3():
    int_0 = 1932
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_either()
    bool_1 = var_0.__eq__(int_0)
    maybe_1 = module_0.Maybe(int_0, bool_0)
    none_type_0 = None
    bool_2 = maybe_1.__eq__(none_type_0)


def test_case_4():
    str_0 = "\n        Transform Either to Try.\n\n        :returns: Lazy monad with function returning previous value\n        :rtype: Lazy[Function() -> A]\n        "
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.map(str_0)
    var_1 = var_0.to_validation()


def test_case_5():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    set_0 = {bool_0, bool_0}
    maybe_0.map(set_0)


def test_case_6():
    complex_0 = -807.688 - 1576.46j
    bool_0 = True
    bytes_0 = b"\xa9\xca\x17\x83\xa7"
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.bind(bytes_0)
    var_1 = var_0.ap(bool_0)
    var_2 = maybe_0.get_or_else(var_1)
    maybe_1 = module_0.Maybe(complex_0, bool_0)
    var_3 = maybe_1.to_either()


def test_case_7():
    object_0 = module_1.object()
    bool_0 = True
    bool_1 = True
    set_0 = {bool_1, bool_1, bool_1}
    none_type_0 = None
    maybe_0 = module_0.Maybe(set_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.ap(bool_0)
    var_2 = var_1.map(object_0)
    var_3 = maybe_0.to_box()
    maybe_0.bind(var_3)


def test_case_8():
    list_0 = []
    bool_0 = False
    maybe_0 = module_0.Maybe(list_0, bool_0)
    maybe_0.ap(list_0)


def test_case_9():
    complex_0 = -807.688 - 1576.46j
    bool_0 = True
    bytes_0 = b"\xa9\xca\x17\x83\xa7"
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.bind(bytes_0)
    var_1 = var_0.ap(bool_0)
    var_2 = maybe_0.get_or_else(var_1)
    maybe_1 = module_0.Maybe(complex_0, bool_0)
    var_3 = var_2.filter(var_0)
    var_4 = var_2.bind(bytes_0)


def test_case_10():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bytes_0 = b"\xc40\x98"
    set_0 = set()
    maybe_1 = module_0.Maybe(set_0, set_0)
    maybe_1.filter(bytes_0)


def test_case_11():
    tuple_0 = ()
    maybe_0 = module_0.Maybe(tuple_0, tuple_0)
    none_type_0 = None
    var_0 = maybe_0.get_or_else(none_type_0)
    bool_0 = var_0.__eq__(maybe_0)
    var_0.get_or_else(none_type_0)


def test_case_12():
    dict_0 = {}
    bool_0 = True
    maybe_0 = module_0.Maybe(dict_0, bool_0)
    bool_1 = False
    set_0 = {bool_1, bool_1, bool_1}
    bool_2 = True
    maybe_1 = module_0.Maybe(set_0, bool_2)
    var_0 = maybe_1.to_box()
    var_0.to_box()


def test_case_13():
    bytes_0 = b"L\xd5C\x8d\x95*\xc8?\x95\xc94\x12f~c&\x1e\xecO"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_try()
    var_0.to_either()


def test_case_14():
    bool_0 = False
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_0, none_type_0)
    var_0 = maybe_0.to_try()
    var_0.to_try()


def test_case_15():
    int_0 = 135
    float_0 = 2516.9265
    bool_0 = False
    none_type_0 = None
    maybe_0 = module_0.Maybe(float_0, none_type_0)
    var_0 = maybe_0.to_validation()
    var_1 = var_0.to_box()
    var_2 = var_1.to_either()
    maybe_1 = module_0.Maybe(int_0, bool_0)
    var_3 = maybe_1.to_box()
    var_4 = var_3.to_either()
    var_4.filter(var_3)


def test_case_16():
    none_type_0 = None
    str_0 = "syq#Til0"
    dict_0 = {str_0: str_0, str_0: str_0}
    bool_0 = False
    maybe_0 = module_0.Maybe(dict_0, bool_0)
    var_0 = maybe_0.to_lazy()
    bool_1 = var_0.__eq__(var_0)
    var_1 = var_0.to_either()
    var_2 = var_1.to_lazy()
    var_3 = var_2.to_validation()
    var_4 = var_2.to_try()
    var_5 = maybe_0.to_box()
    var_3.get_or_else(none_type_0)


def test_case_17():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_box()
    bool_1 = True
    bool_2 = False
    maybe_1 = module_0.Maybe(bool_1, bool_2)
    bool_3 = maybe_1.__eq__(maybe_1)
    maybe_1.filter(maybe_1)


def test_case_18():
    bytes_0 = b"1b"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.filter(bytes_0)
    var_1 = var_0.to_lazy()
    var_2 = maybe_0.bind(maybe_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_3 = var_0.filter(bytes_0)
    var_4 = var_2.bind(maybe_0)
    var_5 = var_2.to_box()
    var_6 = maybe_0.get_or_else(var_2)
    var_7 = var_4.to_box()
    maybe_1 = module_0.Maybe(var_4, var_1)
    var_8 = var_2.to_try()
    var_9 = var_0.ap(var_8)
    var_10 = var_0.to_try()
    var_11 = maybe_1.filter(var_6)
    var_12 = var_0.to_box()
    var_13 = maybe_0.to_try()
    var_14 = maybe_1.filter(var_8)
    var_15 = var_6.to_try()
    var_16 = var_9.ap(var_9)
    int_0 = 5816
    var_17 = var_2.filter(int_0)
    var_18 = var_1.to_either()
    var_19 = var_11.to_validation()
    var_20 = var_14.bind(var_7)
    bool_1 = maybe_0.__eq__(var_4)
    var_21 = var_7.to_validation()
    var_22 = var_12.to_either()
    var_23 = var_20.to_lazy()
    var_24 = var_14.to_either()
    var_25 = var_4.to_box()
    var_26 = var_6.to_validation()
    var_5.bind(var_7)
