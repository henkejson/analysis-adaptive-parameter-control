# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import builtins as module_1
import typing as module_2


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_try()


def test_case_3():
    int_0 = -1127
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.ap(int_0)
    none_type_0 = None
    bool_0 = maybe_0.__eq__(none_type_0)
    var_1 = maybe_0.to_box()
    var_2 = maybe_0.get_or_else(maybe_0)
    var_3 = maybe_0.to_try()
    var_4 = var_2.to_either()
    var_5 = var_1.to_try()
    var_6 = var_2.to_lazy()
    var_7 = var_6.ap(var_2)
    var_8 = var_3.filter(var_2)
    var_9 = var_0.map(var_7)
    var_10 = var_9.filter(int_0)
    var_11 = var_9.to_lazy()


def test_case_4():
    bool_0 = True
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.bind(var_0)
    var_2 = maybe_0.filter(maybe_0)
    var_3 = var_2.to_try()
    var_4 = maybe_0.to_lazy()
    bool_2 = var_4.__eq__(var_4)
    var_5 = var_2.ap(var_3)
    var_6 = var_1.filter(var_4)
    var_7 = var_2.map(var_5)
    var_4.filter(var_2)


def test_case_5():
    str_0 = "\n        Transform Box into Lazy with returning value function.\n\n        :returns: not folded Lazy monad with function returning previous value\n        :rtype: Lazy[Function(() -> A)]\n        "
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_0.map(str_0)


def test_case_6():
    object_0 = module_1.object()
    maybe_0 = module_0.Maybe(object_0, object_0)
    var_0 = maybe_0.bind(object_0)


def test_case_7():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    maybe_0 = module_0.Maybe(dict_0, none_type_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.to_try()
    bytes_0 = b"q\xbb\xf2\xafc\x88b\xc6O."
    var_2 = var_0.to_try()
    int_0 = 2628
    tuple_0 = (int_0,)
    maybe_1 = module_0.Maybe(tuple_0, tuple_0)
    var_3 = maybe_1.bind(var_1)
    var_4 = var_3.filter(bytes_0)
    var_5 = maybe_1.to_box()
    maybe_0.bind(var_1)


def test_case_8():
    bool_0 = True
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.ap(bool_1)
    var_1 = maybe_0.filter(maybe_0)
    var_2 = var_1.to_try()
    var_3 = maybe_0.to_lazy()
    var_4 = var_1.filter(bool_1)
    var_3.to_lazy()


def test_case_9():
    bytes_0 = b"\x06\xc1\x7f\x04\xde"
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    maybe_0.ap(bytes_0)


def test_case_10():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    maybe_0 = module_0.Maybe(dict_0, bool_0)
    maybe_1 = module_0.Maybe(dict_0, dict_0)
    var_0 = maybe_1.filter(maybe_1)
    maybe_0.filter(bool_0)


def test_case_11():
    none_type_0 = None
    str_0 = "'|tN`fT_liYf>8"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    var_1 = maybe_0.to_validation()
    var_2 = var_0.bind(maybe_0)
    var_1.bind(none_type_0)


def test_case_12():
    bool_0 = True
    bool_1 = False
    set_0 = {bool_1}
    maybe_0 = module_0.Maybe(set_0, bool_1)
    var_0 = maybe_0.get_or_else(bool_0)
    var_0.to_either()


def test_case_13():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    maybe_0 = module_0.Maybe(dict_0, none_type_0)
    var_0 = maybe_0.to_box()
    int_0 = 2625
    tuple_0 = (int_0,)
    maybe_1 = module_0.Maybe(tuple_0, tuple_0)
    var_1 = maybe_1.bind(int_0)
    var_2 = maybe_1.to_box()
    var_3 = var_1.filter(int_0)
    var_4 = var_3.to_lazy()
    var_5 = maybe_1.to_either()
    maybe_0.filter(var_0)


def test_case_14():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    maybe_0 = module_0.Maybe(dict_0, none_type_0)
    var_0 = maybe_0.to_try()
    bytes_0 = b"q\xbb\xf2\xafc\x88b\xc6O."
    int_0 = 2628
    tuple_0 = (int_0,)
    var_1 = maybe_0.to_either()
    maybe_1 = module_0.Maybe(tuple_0, tuple_0)
    var_2 = maybe_1.bind(var_0)
    var_3 = var_2.filter(bytes_0)
    var_0.bind(none_type_0)


def test_case_15():
    bool_0 = True
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.filter(maybe_0)
    var_2 = var_1.to_try()
    var_3 = maybe_0.to_lazy()
    var_4 = var_1.filter(var_0)
    var_3.to_lazy()


def test_case_16():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_lazy()
    none_type_1 = None
    bool_1 = False
    maybe_1 = module_0.Maybe(bool_1, bool_1)
    var_1 = maybe_1.to_box()
    var_1.filter(none_type_1)


def test_case_17():
    bool_0 = True
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.filter(maybe_0)
    var_1 = var_0.to_try()
    var_2 = maybe_0.to_lazy()
    var_3 = var_0.filter(bool_1)
    var_2.to_lazy()


def test_case_18():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    maybe_0 = module_0.Maybe(dict_0, bool_0)
    var_0 = maybe_0.to_lazy()
    maybe_1 = module_0.Maybe(var_0, var_0)
    var_1 = maybe_1.filter(var_0)
    maybe_0.filter(var_0)


def test_case_19():
    generic_0 = module_2.Generic()
    str_0 = "%[<"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.filter(generic_0)
    var_1 = maybe_0.to_try()
    var_1.to_lazy()


def test_case_20():
    set_0 = set()
    maybe_0 = module_0.Maybe(set_0, set_0)
    var_0 = maybe_0.to_validation()
    var_1 = var_0.to_box()
    var_1.to_box()


def test_case_21():
    bytes_0 = b"\x86\x7f"
    bool_0 = False
    dict_0 = {bytes_0: bytes_0, bool_0: bool_0, bytes_0: bytes_0}
    none_type_0 = None
    maybe_0 = module_0.Maybe(dict_0, none_type_0)
    var_0 = maybe_0.to_validation()
    bytes_1 = b"q\xbb\xf2\xafc\x88b\xc6O."
    var_1 = var_0.to_try()
    tuple_0 = (var_1,)
    maybe_1 = module_0.Maybe(tuple_0, tuple_0)
    var_2 = maybe_1.bind(var_0)
    var_3 = var_2.filter(bytes_1)
    bool_1 = var_2.__eq__(maybe_0)
    var_4 = maybe_1.to_either()
    maybe_0.filter(var_0)


def test_case_22():
    generic_0 = module_2.Generic()
    none_type_0 = None
    maybe_0 = module_0.Maybe(generic_0, generic_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.to_validation()
    var_0.bind(none_type_0)


def test_case_23():
    bool_0 = True
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.bind(var_0)
    var_2 = maybe_0.filter(maybe_0)
    var_3 = var_2.to_try()
    var_4 = maybe_0.to_lazy()
    bool_2 = var_4.__eq__(var_4)
    var_5 = var_2.ap(var_3)
    var_6 = var_1.filter(var_4)
    var_7 = var_2.map(var_5)
    var_8 = var_4.to_box()
    var_9 = var_7.to_lazy()


def test_case_24():
    bytes_0 = b"1"
    bool_0 = False
    dict_0 = {bytes_0: bytes_0, bool_0: bool_0, bytes_0: bytes_0}
    none_type_0 = None
    maybe_0 = module_0.Maybe(dict_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = module_2.Generic()
    bytes_1 = b"q\xbb\xf2\xafc\x88b\xc6O."
    var_2 = var_0.to_try()
    int_0 = 2628
    tuple_0 = (int_0,)
    maybe_1 = module_0.Maybe(tuple_0, tuple_0)
    var_3 = maybe_1.bind(var_1)
    var_4 = var_3.filter(bytes_1)
    bool_1 = var_2.get_or_else(bytes_0)
    var_5 = maybe_1.to_either()
    maybe_0.filter(var_0)
