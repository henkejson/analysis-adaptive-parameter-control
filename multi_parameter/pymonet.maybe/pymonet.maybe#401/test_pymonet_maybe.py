# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import builtins as module_1
import typing as module_2


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    str_0 = "\n)#Nv"
    str_1 = "|T53\r="
    none_type_0 = None
    maybe_0 = module_0.Maybe(str_0, str_1)
    var_0 = maybe_0.ap(str_1)
    bool_0 = var_0.__eq__(none_type_0)


def test_case_3():
    complex_0 = -2676.81 + 1278.6207j
    maybe_0 = module_0.Maybe(complex_0, complex_0)
    bytes_0 = b"\x82\x86N"
    set_0 = {bytes_0, bytes_0}
    var_0 = maybe_0.ap(complex_0)
    var_1 = maybe_0.map(var_0)
    tuple_0 = (complex_0, bytes_0, set_0)
    maybe_1 = module_0.Maybe(tuple_0, set_0)
    var_2 = maybe_0.to_validation()
    var_3 = var_2.to_either()
    var_4 = maybe_1.to_box()
    var_4.ap(var_4)


def test_case_4():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    maybe_0.map(var_0)


def test_case_5():
    str_0 = "\n        If Maybe is empty return new empty Maybe, in other case\n        takes mapper function and returns new instance of Maybe\n        with result of mapper.\n\n        :param mapper: function to call with Maybe value\n        :type mapper: Function(A) -> B\n        :returns: Maybe[B | None]\n        "
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.ap(maybe_0)
    var_1 = maybe_0.to_either()
    var_2 = var_0.to_try()
    var_3 = var_2.map(maybe_0)
    none_type_0 = None
    var_4 = var_0.get_or_else(var_0)
    var_5 = maybe_0.to_lazy()
    var_6 = var_5.to_either()
    bool_0 = maybe_0.__eq__(none_type_0)
    var_7 = maybe_0.to_box()
    var_8 = maybe_0.ap(var_1)
    bool_1 = maybe_0.__eq__(bool_0)
    var_9 = maybe_0.to_lazy()
    var_10 = maybe_0.bind(var_7)
    var_11 = var_0.to_either()


def test_case_6():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.to_either()
    int_0 = -6307
    str_0 = "y"
    bool_0 = False
    maybe_1 = module_0.Maybe(str_0, bool_0)
    maybe_1.bind(int_0)


def test_case_7():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    var_1 = maybe_0.filter(var_0)
    var_2 = var_1.ap(var_0)
    var_3 = maybe_0.to_validation()


def test_case_8():
    bool_0 = False
    int_0 = 1
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.filter(bool_0)


def test_case_9():
    bool_0 = False
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    maybe_0.filter(maybe_0)


def test_case_10():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.get_or_else(none_type_0)
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_1 = maybe_1.to_validation()
    var_1.bind(var_0)


def test_case_11():
    int_0 = -2237
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.to_either()


def test_case_12():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_either()
    var_0.ap(var_0)


def test_case_13():
    bool_0 = False
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_box()
    var_0.filter(var_0)


def test_case_14():
    int_0 = 1672
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.get_or_else(int_0)
    none_type_0 = None
    var_1 = maybe_0.filter(none_type_0)
    var_2 = maybe_0.to_validation()
    var_3 = maybe_0.map(none_type_0)
    bool_1 = var_3.__eq__(maybe_0)
    var_4 = maybe_0.to_box()
    var_5 = var_2.to_either()
    var_6 = maybe_0.to_lazy()
    bool_2 = False
    maybe_1 = module_0.Maybe(var_5, bool_2)
    maybe_1.filter(var_0)


def test_case_15():
    float_0 = 2456.947
    str_0 = 's",^4$*'
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_0.filter(float_0)


def test_case_16():
    dict_0 = {}
    bool_0 = True
    maybe_0 = module_0.Maybe(dict_0, bool_0)
    var_0 = maybe_0.ap(dict_0)
    var_1 = var_0.to_try()
    var_1.to_lazy()


def test_case_17():
    bytes_0 = b"\xf3\xc5\x1b>\xa3\xce\xbf"
    set_0 = {bytes_0, bytes_0}
    bool_0 = False
    maybe_0 = module_0.Maybe(set_0, bool_0)
    var_0 = maybe_0.to_try()
    var_0.to_lazy()


def test_case_18():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_validation()


def test_case_19():
    bool_0 = False
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_either()
    var_1.get_or_else(bool_0)


def test_case_20():
    int_0 = 1359
    float_0 = 195.0863
    maybe_0 = module_0.Maybe(int_0, float_0)
    dict_0 = {}
    var_0 = maybe_0.ap(maybe_0)
    object_0 = module_1.object(**dict_0)
    maybe_1 = module_0.Maybe(object_0, dict_0)
    maybe_1.ap(dict_0)


def test_case_21():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_lazy()
    maybe_0.filter(var_0)


def test_case_22():
    int_0 = 1672
    none_type_0 = None
    maybe_0 = module_0.Maybe(int_0, none_type_0)
    var_0 = maybe_0.to_validation()
    maybe_1 = module_0.Maybe(int_0, var_0)
    var_1 = maybe_1.to_validation()
    none_type_1 = None
    var_2 = maybe_1.bind(none_type_1)
    var_3 = maybe_1.map(maybe_1)
    var_4 = var_3.filter(var_1)
    bool_0 = var_4.__eq__(maybe_1)
    var_5 = var_1.to_lazy()
    var_6 = var_3.to_try()
    var_7 = module_2.Generic()
    var_8 = maybe_1.get_or_else(var_7)
    bool_1 = var_8.__eq__(var_6)
    var_9 = var_4.to_either()
    var_10 = maybe_1.to_lazy()
    var_11 = var_10.ap(var_5)
    bool_2 = var_7.__eq__(var_8)
    bool_3 = False
    maybe_2 = module_0.Maybe(var_9, bool_3)
    maybe_2.filter(maybe_2)
