# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import builtins as module_1


def test_case_0():
    bytes_0 = b"\xe6{\x8a\xd2\x9c\x87L\xca\xf8\xb2\x87'\xc6\xf7\x1dU\xda\x13"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    bytes_0 = b"\x9e\x0f\xa1,\x8cm\xcf\x06\xc0\xa8\x88.J`\x18~J\x95\xb3"
    none_type_0 = None
    maybe_0 = module_0.Maybe(bytes_0, none_type_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    maybe_0.ap(bytes_0)


def test_case_3():
    set_0 = set()
    bool_0 = False
    maybe_0 = module_0.Maybe(set_0, bool_0)
    bool_1 = maybe_0.__eq__(bool_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(maybe_0, none_type_0)
    maybe_1.filter(none_type_0)


def test_case_4():
    set_0 = set()
    bool_0 = True
    maybe_0 = module_0.Maybe(set_0, bool_0)
    bool_1 = maybe_0.__eq__(bool_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.map(bool_1)
    var_2 = var_1.to_either()
    var_3 = var_1.to_lazy()


def test_case_5():
    set_0 = set()
    bool_0 = False
    maybe_0 = module_0.Maybe(set_0, bool_0)
    bool_1 = maybe_0.__eq__(bool_0)
    var_0 = maybe_0.to_box()
    maybe_0.map(bool_1)


def test_case_6():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_try()
    int_0 = 498
    maybe_1 = module_0.Maybe(int_0, int_0)
    var_1 = maybe_1.bind(var_0)
    var_2 = var_1.to_lazy()
    var_3 = var_2.to_try()
    var_3.to_validation()


def test_case_7():
    object_0 = module_1.object()
    maybe_0 = module_0.Maybe(object_0, object_0)
    tuple_0 = ()
    var_0 = maybe_0.to_either()
    var_1 = module_0.Maybe(tuple_0, var_0)
    var_2 = maybe_0.ap(tuple_0)
    var_3 = maybe_0.to_box()
    maybe_1 = module_0.Maybe(tuple_0, var_3)
    var_4 = var_2.filter(maybe_1)


def test_case_8():
    set_0 = set()
    bool_0 = True
    maybe_0 = module_0.Maybe(set_0, bool_0)
    none_type_0 = None
    var_0 = maybe_0.filter(bool_0)
    maybe_1 = module_0.Maybe(maybe_0, none_type_0)
    maybe_1.filter(none_type_0)


def test_case_9():
    bytes_0 = b"\x1d\x82I\x18\x0c\x14\xeb\xc3\xa2l\xbf\x98\xa9\xf2m^\x90\x1b\x16"
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bytes_0)
    var_0 = maybe_0.get_or_else(bytes_0)
    tuple_0 = (bytes_0, bytes_0, bool_0)
    tuple_1 = (tuple_0,)
    maybe_1 = module_0.Maybe(tuple_1, bool_0)
    maybe_2 = module_0.Maybe(tuple_1, var_0)
    var_1 = maybe_0.to_try()
    bool_1 = var_0.__eq__(maybe_1)


def test_case_10():
    int_0 = 0
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    maybe_1 = module_0.Maybe(maybe_0, int_0)
    var_0 = maybe_0.ap(int_0)
    bool_1 = False
    maybe_2 = module_0.Maybe(int_0, bool_1)
    var_1 = maybe_2.get_or_else(bool_0)
    var_2 = maybe_1.ap(maybe_0)
    var_3 = maybe_1.to_lazy()
    none_type_0 = None
    bool_2 = False
    maybe_3 = module_0.Maybe(none_type_0, bool_2)
    var_4 = maybe_3.to_try()
    var_5 = var_2.bind(var_0)
    maybe_3.map(none_type_0)


def test_case_11():
    int_0 = 0
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    maybe_1 = module_0.Maybe(maybe_0, int_0)
    var_0 = maybe_0.ap(int_0)
    bool_1 = False
    maybe_2 = module_0.Maybe(int_0, bool_1)
    var_1 = module_0.Maybe(bool_1, bool_1)
    none_type_0 = None
    bool_2 = False
    maybe_3 = module_0.Maybe(none_type_0, bool_2)
    var_2 = maybe_2.to_either()
    var_3 = maybe_0.bind(var_0)
    maybe_3.map(none_type_0)


def test_case_12():
    set_0 = set()
    bool_0 = True
    maybe_0 = module_0.Maybe(set_0, bool_0)
    bool_1 = maybe_0.__eq__(bool_0)
    none_type_0 = None
    var_0 = maybe_0.to_box()
    maybe_1 = module_0.Maybe(maybe_0, none_type_0)
    maybe_1.filter(none_type_0)


def test_case_13():
    set_0 = set()
    bool_0 = False
    maybe_0 = module_0.Maybe(set_0, bool_0)
    bool_1 = maybe_0.__eq__(bool_0)
    none_type_0 = None
    var_0 = maybe_0.to_box()
    maybe_1 = module_0.Maybe(maybe_0, none_type_0)
    maybe_1.filter(none_type_0)


def test_case_14():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_0.to_lazy()


def test_case_15():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_try()


def test_case_16():
    bool_0 = False
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    bool_2 = maybe_0.__eq__(bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = var_0.to_either()
    var_2 = var_0.to_either()
    var_1.to_either()


def test_case_17():
    bool_0 = True
    bool_1 = False
    bool_2 = False
    maybe_0 = module_0.Maybe(bool_1, bool_2)
    var_0 = maybe_0.to_validation()
    var_0.map(bool_0)


def test_case_18():
    none_type_0 = None
    none_type_1 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_1, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_box()
    var_1.get_or_else(none_type_0)


def test_case_19():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_validation()
    var_2 = maybe_0.to_try()
    bool_1 = maybe_0.__eq__(bool_0)
    var_3 = maybe_0.to_try()
    var_4 = var_2.filter(var_3)
    float_0 = 1302.688574
    maybe_1 = module_0.Maybe(var_2, bool_0)
    var_5 = maybe_1.filter(var_2)
    var_6 = var_4.get_or_else(var_4)
    bool_2 = var_5.__eq__(var_5)
    tuple_0 = (var_2, float_0, var_2, maybe_1)
    var_7 = var_3.get_or_else(tuple_0)
    none_type_0 = None
    var_8 = var_5.get_or_else(bool_1)
    var_9 = maybe_0.to_lazy()
    var_10 = maybe_0.to_lazy()
    var_11 = maybe_0.ap(none_type_0)
    maybe_2 = module_0.Maybe(bool_0, none_type_0)
    maybe_2.filter(var_6)


def test_case_20():
    bool_0 = False
    str_0 = "SZ"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.ap(maybe_0)
    maybe_1 = module_0.Maybe(str_0, var_0)
    maybe_2 = module_0.Maybe(var_0, bool_0)
    var_1 = maybe_0.ap(bool_0)
    maybe_3 = module_0.Maybe(bool_0, bool_0)
    bool_1 = maybe_3.__eq__(str_0)
    var_2 = maybe_3.to_box()
    var_3 = maybe_3.to_box()
    bool_2 = maybe_3.__eq__(maybe_3)
    var_4 = maybe_0.filter(var_1)
    maybe_2.bind(var_0)


def test_case_21():
    bool_0 = True
    str_0 = "\n        Take mapper function and returns result of them called with Right value.\n\n        :param mapper: function to apply on Right value\n        :type mapper: Function(A) -> Either[B]\n        :returns: result of mapper\n        :rtype: Either[B]\n        "
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.filter(bool_0)
    var_1 = var_0.ap(var_0)
    var_2 = var_1.to_box()
    var_3 = var_0.map(var_2)
    bool_1 = var_3.__eq__(maybe_0)
    var_4 = maybe_0.bind(bool_0)
    var_2.bind(maybe_0)
