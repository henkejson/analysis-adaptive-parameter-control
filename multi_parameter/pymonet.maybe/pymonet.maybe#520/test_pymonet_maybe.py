# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    int_0 = -2450
    maybe_0 = module_0.Maybe(int_0, int_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    bytes_0 = b"\x19\x99\xeb\xd3\x06 \x81*\xf6e \x07\xc9"
    tuple_0 = (bytes_0,)
    maybe_0 = module_0.Maybe(tuple_0, bytes_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = maybe_1.__eq__(maybe_0)


def test_case_3():
    bytes_0 = b"u\xcb\x80><\x8e\\!T&\xc5."
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.to_either()
    var_2 = maybe_0.filter(bytes_0)
    bool_0 = var_2.__eq__(var_1)
    var_3 = maybe_0.filter(var_1)
    var_1.to_either()


def test_case_4():
    none_type_0 = None
    complex_0 = -2710 + 164.494j
    maybe_0 = module_0.Maybe(none_type_0, complex_0)
    var_0 = maybe_0.to_validation()
    bool_0 = True
    maybe_1 = module_0.Maybe(complex_0, bool_0)
    var_1 = maybe_1.to_validation()
    bool_1 = True
    var_2 = maybe_1.ap(bool_1)
    var_3 = maybe_1.map(var_2)
    var_1.bind(bool_0)


def test_case_5():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    maybe_0 = module_0.Maybe(dict_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.filter(var_0)
    var_2 = var_1.bind(var_0)


def test_case_6():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_either()
    maybe_0.bind(var_0)


def test_case_7():
    int_0 = 1907
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.ap(int_0)
    bool_0 = False
    maybe_1 = module_0.Maybe(int_0, bool_0)
    var_1 = maybe_1.to_try()
    var_1.to_either()


def test_case_8():
    str_0 = "kk7!AOXiL"
    bool_0 = True
    dict_0 = {str_0: str_0, bool_0: str_0}
    set_0 = set()
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.bind(set_0)
    var_1 = var_0.ap(maybe_0)
    maybe_1 = module_0.Maybe(set_0, set_0)
    maybe_1.ap(dict_0)


def test_case_9():
    none_type_0 = None
    bool_0 = False
    complex_0 = 679.6 + 2785.5j
    maybe_0 = module_0.Maybe(complex_0, none_type_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_try()
    var_2 = var_1.get_or_else(bool_0)
    maybe_0.filter(none_type_0)


def test_case_10():
    bytes_0 = b"\xbe=j\xf0$\xf6\xb4\x92\xd6\xeah\t0S\xb3"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    var_1 = maybe_0.to_box()
    var_2 = maybe_0.get_or_else(bytes_0)
    var_3 = maybe_0.to_either()
    var_2.filter(var_2)


def test_case_11():
    int_0 = 586
    tuple_0 = ()
    maybe_0 = module_0.Maybe(tuple_0, tuple_0)
    var_0 = maybe_0.get_or_else(int_0)


def test_case_12():
    bytes_0 = b"\xbb\xe8\x97@\x8e\xb4\x96R\xd61\xc5\x87\x08\x99s\x12'\xaf["
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_try()
    var_2 = maybe_0.to_box()


def test_case_13():
    str_0 = "\n    Immutable list is data structure that doesn't allow to mutate instances\n    "
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_either()
    var_0.filter(none_type_0)


def test_case_14():
    none_type_0 = None
    int_0 = 37
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.ap(none_type_0)
    var_1 = var_0.to_lazy()
    var_2 = var_1.to_box()
    var_2.to_box()


def test_case_15():
    float_0 = -4378.00366
    set_0 = {float_0, float_0}
    bool_0 = False
    maybe_0 = module_0.Maybe(set_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.to_either()
    var_2 = maybe_0.to_lazy()
    var_3 = maybe_0.to_try()
    var_3.ap(set_0)


def test_case_16():
    bytes_0 = b"\x19\x99\xeb\xd3\x06 \x81*\xf6e \x07\xc9"
    tuple_0 = (bytes_0,)
    maybe_0 = module_0.Maybe(tuple_0, bytes_0)
    maybe_1 = module_0.Maybe(tuple_0, bytes_0)
    var_0 = maybe_1.to_lazy()
    var_1 = maybe_1.filter(var_0)
    var_2 = maybe_1.get_or_else(maybe_1)
    bool_0 = var_2.__eq__(var_0)
    var_3 = var_2.to_validation()
    var_4 = maybe_0.to_try()
    var_5 = var_4.get_or_else(var_4)
    var_5.ap(bytes_0)


def test_case_17():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.bind(none_type_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    var_1 = var_0.to_validation()
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_2 = var_0.filter(var_1)
    var_3 = var_2.to_lazy()
    var_4 = maybe_1.get_or_else(var_3)
    maybe_1.filter(var_1)


def test_case_18():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = maybe_0.__eq__(none_type_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_validation()
    maybe_0.filter(maybe_0)


def test_case_19():
    str_0 = "TffHGccd>a:% cX\x0bn"
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_try()
    var_1.to_try()


def test_case_20():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.filter(maybe_0)
    var_1 = maybe_0.get_or_else(var_0)
    maybe_1.filter(none_type_0)


def test_case_21():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.bind(none_type_0)
    bool_1 = var_0.__eq__(var_0)
    var_1 = maybe_0.to_validation()
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1.map(maybe_0)
