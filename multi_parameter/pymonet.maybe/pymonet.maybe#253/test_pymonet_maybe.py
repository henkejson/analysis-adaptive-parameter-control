# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    float_0 = 2419.27
    maybe_0 = module_0.Maybe(float_0, float_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    complex_0 = 2597.9 + 15.66j
    maybe_0 = module_0.Maybe(complex_0, complex_0)
    var_0 = maybe_0.ap(complex_0)
    str_0 = "dhVTPhz~dLj"
    bool_0 = maybe_0.__eq__(maybe_0)
    var_1 = maybe_0.get_or_else(str_0)
    var_1.to_try()


def test_case_3():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    none_type_1 = None
    maybe_1 = module_0.Maybe(none_type_1, maybe_0)
    var_0 = maybe_1.map(maybe_0)
    var_1 = var_0.filter(none_type_1)


def test_case_4():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_0.map(none_type_0)


def test_case_5():
    str_0 = "\x0c*+h~?Z,0\x0buq\nKH\tV"
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    bool_1 = maybe_0.__eq__(str_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.filter(var_0)
    var_2 = maybe_0.bind(maybe_0)
    maybe_1 = module_0.Maybe(maybe_0, bool_1)
    maybe_1.filter(str_0)


def test_case_6():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_0.bind(bool_0)


def test_case_7():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, none_type_0)
    maybe_0.ap(maybe_0)


def test_case_8():
    str_0 = "DpW'd+"
    int_0 = 1
    set_0 = {int_0, int_0, int_0, int_0}
    maybe_0 = module_0.Maybe(int_0, set_0)
    var_0 = maybe_0.filter(str_0)


def test_case_9():
    str_0 = "_"
    maybe_0 = module_0.Maybe(str_0, str_0)
    bool_0 = maybe_0.__eq__(str_0)
    var_0 = maybe_0.filter(bool_0)
    maybe_1 = module_0.Maybe(maybe_0, bool_0)
    maybe_1.filter(str_0)


def test_case_10():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.get_or_else(none_type_0)
    var_0.to_lazy()


def test_case_11():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_either()
    bool_1 = var_0.__eq__(none_type_0)


def test_case_12():
    tuple_0 = ()
    bool_0 = False
    maybe_0 = module_0.Maybe(tuple_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_either()
    var_2 = maybe_0.get_or_else(bool_0)
    maybe_1 = module_0.Maybe(maybe_0, tuple_0)
    var_3 = maybe_0.to_validation()
    maybe_2 = module_0.Maybe(maybe_1, bool_0)
    var_4 = maybe_2.to_either()
    var_2.to_try()


def test_case_13():
    str_0 = ";"
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    bool_1 = maybe_0.__eq__(str_0)
    var_0 = maybe_0.filter(bool_0)
    var_1 = maybe_0.to_box()
    maybe_1 = module_0.Maybe(maybe_0, bool_1)
    maybe_1.filter(str_0)


def test_case_14():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_try()


def test_case_15():
    float_0 = -2185.875085
    maybe_0 = module_0.Maybe(float_0, float_0)
    maybe_1 = module_0.Maybe(float_0, float_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.to_try()
    var_2 = maybe_0.to_try()
    var_3 = maybe_0.to_lazy()
    var_4 = maybe_1.ap(float_0)
    var_5 = maybe_0.get_or_else(maybe_0)
    var_3.get_or_else(maybe_0)


def test_case_16():
    str_0 = ""
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    bool_1 = maybe_0.__eq__(str_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    var_1 = maybe_0.filter(var_0)
    var_2 = maybe_0.to_box()
    var_3 = var_2.to_try()
    maybe_1 = module_0.Maybe(maybe_0, bool_1)
    var_4 = maybe_1.to_lazy()
    maybe_1.filter(str_0)


def test_case_17():
    bytes_0 = b"\x02P[\x90H\x99+\x98Q\rg\xce}\x0c<\xf1F\xa1BS"
    bytes_1 = b"\x90\xdbdw\xd5"
    bytes_2 = b"\x14mt\x01\x06\xbcQ\x93\xba\xcb\ng"
    maybe_0 = module_0.Maybe(bytes_2, bytes_2)
    var_0 = maybe_0.map(bytes_1)
    var_1 = var_0.filter(bytes_0)
    var_2 = var_1.to_try()


def test_case_18():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    none_type_1 = None
    maybe_1 = module_0.Maybe(none_type_1, none_type_1)
    var_0 = maybe_1.to_try()
    maybe_0.filter(var_0)


def test_case_19():
    str_0 = "_"
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    bool_1 = maybe_0.__eq__(str_0)
    var_0 = maybe_0.ap(str_0)
    var_1 = maybe_0.filter(var_0)
    var_2 = maybe_0.to_validation()
    var_3 = var_2.to_try()
    maybe_1 = module_0.Maybe(maybe_0, bool_1)
    var_4 = maybe_1.to_validation()
    maybe_1.filter(str_0)


def test_case_20():
    str_0 = "t"
    maybe_0 = module_0.Maybe(str_0, str_0)
    bool_0 = maybe_0.__eq__(str_0)
    var_0 = maybe_0.filter(bool_0)
    maybe_1 = module_0.Maybe(maybe_0, bool_0)
    var_1 = maybe_1.to_validation()
    maybe_1.filter(str_0)


def test_case_21():
    complex_0 = 2597.9 + 15.66j
    maybe_0 = module_0.Maybe(complex_0, complex_0)
    var_0 = maybe_0.filter(complex_0)
    var_1 = var_0.filter(maybe_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_2 = maybe_0.to_try()
    var_3 = maybe_0.to_validation()
    var_4 = maybe_0.to_lazy()
    var_5 = var_4.to_try()
    var_6 = var_1.to_box()
    var_7 = var_0.to_box()
    var_8 = var_1.ap(maybe_0)
    var_7.to_box()


def test_case_22():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_validation()
    var_1 = var_0.to_either()
    var_0.ap(none_type_0)


def test_case_23():
    complex_0 = 2597.9 + 15.66j
    maybe_0 = module_0.Maybe(complex_0, complex_0)
    var_0 = maybe_0.ap(maybe_0)
    bool_0 = maybe_0.__eq__(var_0)
    var_1 = var_0.get_or_else(maybe_0)
    var_2 = var_1.to_try()
    var_3 = maybe_0.to_box()
    bool_1 = var_1.__eq__(var_3)
    maybe_1 = module_0.Maybe(var_2, var_1)
    var_4 = maybe_1.to_validation()
    var_2.to_lazy()
