# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1


def test_case_0():
    bytes_0 = b"\x87\x1cd\xc3&\xdcv\xd9\xc4\xfbS\x03~\x16<\x11\xacWj\xff"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)


def test_case_1():
    set_0 = set()
    maybe_0 = module_0.Maybe(set_0, set_0)


def test_case_2():
    generic_0 = module_1.Generic()
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = maybe_0.__eq__(generic_0)


def test_case_3():
    generic_0 = module_1.Generic()
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_1 = module_0.Maybe(bool_0, generic_0)
    bool_1 = maybe_0.__eq__(generic_0)
    var_0 = maybe_0.to_validation()
    str_0 = "\n        Two Lazy are equals where both are evaluated both have the same value and constructor functions.\n        "
    var_1 = maybe_0.map(str_0)
    var_2 = var_1.map(var_0)
    var_3 = var_2.get_or_else(bool_0)
    var_3.to_lazy()


def test_case_4():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.get_or_else(none_type_0)
    int_0 = 2340
    bool_0 = True
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    var_1 = maybe_1.to_box()
    var_2 = var_1.to_validation()
    var_3 = var_1.to_lazy()
    bool_1 = False
    maybe_2 = module_0.Maybe(int_0, bool_1)
    var_4 = maybe_2.to_either()
    maybe_2.map(var_4)


def test_case_5():
    bool_0 = True
    none_type_0 = None
    none_type_1 = None
    bool_1 = True
    maybe_0 = module_0.Maybe(none_type_1, bool_1)
    var_0 = maybe_0.filter(none_type_0)
    var_1 = var_0.bind(bool_0)
    float_0 = -1896.8
    bytes_0 = b"\xc4\xb4\xac\xde\xec\xae^91\x02R\xf2>d\xd3_\nm"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    maybe_1 = module_0.Maybe(list_0, bytes_0)
    var_2 = maybe_1.get_or_else(float_0)
    var_2.map(maybe_1)


def test_case_6():
    bytes_0 = b"\xa2\xa2\x02Mh\x8f"
    bool_0 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    maybe_0.bind(bytes_0)


def test_case_7():
    bool_0 = False
    bytes_0 = b'm=\xe6J"\xa1\xab1~'
    str_0 = "\n        Take filterer function, when monad is successfully call filterer with monad value.\n        When filterer returns True method returns copy of monad, othercase\n        not successfully Try with previous value.\n\n        :params filterer: function to apply on monad value\n        :type filterer: Function(A) -> Boolean\n        :returns: Try with previous value\n        :rtype: Try[A]\n        "
    bytes_1 = b"\xd2\xfa\x84\x95J\x95~\xfd\xa5=z]\xd5C!D\x08\xed5\x14"
    maybe_0 = module_0.Maybe(bytes_1, bytes_1)
    var_0 = maybe_0.ap(str_0)
    var_1 = var_0.get_or_else(bytes_0)
    var_1.filter(bool_0)


def test_case_8():
    none_type_0 = None
    complex_0 = 560.452 + 1272.060356j
    maybe_0 = module_0.Maybe(complex_0, complex_0)
    var_0 = maybe_0.map(complex_0)
    bytes_0 = b"\xcat"
    var_1 = maybe_0.ap(complex_0)
    var_2 = maybe_0.ap(bytes_0)
    var_3 = maybe_0.to_either()
    bool_0 = False
    maybe_1 = module_0.Maybe(complex_0, bool_0)
    var_4 = maybe_0.to_lazy()
    maybe_1.ap(none_type_0)


def test_case_9():
    tuple_0 = ()
    bool_0 = True
    maybe_0 = module_0.Maybe(tuple_0, bool_0)
    var_0 = maybe_0.filter(tuple_0)


def test_case_10():
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.filter(bool_0)
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_1 = maybe_0.to_try()
    maybe_1.filter(maybe_0)


def test_case_11():
    int_0 = 4217
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.to_try()
    var_2 = maybe_0.ap(var_0)
    var_3 = var_0.map(maybe_0)
    var_4 = maybe_0.to_validation()
    var_4.to_validation()


def test_case_12():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_either()
    var_0.get_or_else(none_type_0)


def test_case_13():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_lazy()
    list_0 = [bool_0]
    maybe_1 = module_0.Maybe(list_0, var_0)
    bool_1 = maybe_0.__eq__(none_type_0)
    var_1 = maybe_0.to_box()
    var_2 = maybe_1.to_box()
    var_1.bind(none_type_0)


def test_case_14():
    none_type_0 = None
    bool_0 = False
    list_0 = [bool_0]
    int_0 = 2198
    bytes_0 = b'7\x15*p\x1e07ba\xc9\xc7\xbb"\xdc\xc1\xa3\xb7\xc2'
    maybe_0 = module_0.Maybe(list_0, int_0)
    tuple_0 = (list_0, int_0, bytes_0, maybe_0)
    bool_1 = True
    maybe_1 = module_0.Maybe(tuple_0, bool_1)
    var_0 = maybe_1.to_lazy()
    var_0.get_or_else(none_type_0)


def test_case_15():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_box()
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_2 = maybe_1.to_lazy()
    var_3 = var_2.map(var_1)
    var_3.to_validation()


def test_case_16():
    float_0 = -426.0
    none_type_0 = None
    maybe_0 = module_0.Maybe(float_0, none_type_0)
    var_0 = maybe_0.to_try()


def test_case_17():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.get_or_else(none_type_0)
    var_1.map(none_type_0)


def test_case_18():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_validation()


def test_case_19():
    bytes_0 = b" \xff"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_box()
    var_1.ap(bytes_0)


def test_case_20():
    int_0 = -1026
    bool_0 = True
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    maybe_1 = module_0.Maybe(int_0, bool_1)
    bool_2 = maybe_1.__eq__(maybe_0)
    var_0 = maybe_0.to_validation()
    str_0 = "\n        Two Lazy are equals where both are evaluated both have the same value and constructor functions.\n        "
    var_0.map(str_0)


def test_case_21():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.ap(bool_0)
    bool_1 = maybe_0.__eq__(var_0)
    var_1 = var_0.to_try()
    var_2 = maybe_0.map(var_0)
    var_3 = var_2.map(var_2)
    var_4 = var_2.to_validation()
    var_5 = maybe_0.filter(var_4)
    var_6 = var_0.bind(var_4)
    var_7 = var_2.get_or_else(var_2)
    var_8 = var_5.to_box()
    var_9 = var_4.to_either()
    var_10 = var_0.to_validation()
    none_type_0 = None
    maybe_1 = module_0.Maybe(var_1, none_type_0)
    var_11 = var_9.to_lazy()
    var_12 = var_9.to_box()
    var_13 = var_9.to_lazy()
    var_14 = maybe_1.to_lazy()
    maybe_1.filter(var_4)


def test_case_22():
    int_0 = -1026
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.ap(int_0)
    var_1 = var_0.to_try()
    var_2 = var_0.map(int_0)
    var_3 = var_2.to_box()
    var_4 = var_0.get_or_else(var_2)
    var_5 = var_0.to_box()
    maybe_1 = module_0.Maybe(maybe_0, var_5)
    bool_1 = maybe_0.__eq__(maybe_1)
    var_6 = var_4.to_either()
    var_1.ap(int_0)
