# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.ap(maybe_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(var_0, bool_1)
    var_1 = maybe_0.to_either()
    var_2 = var_0.to_validation()
    bool_2 = maybe_0.__eq__(var_1)
    var_1.get_or_else(maybe_0)


def test_case_3():
    str_0 = "cZ:e/I"
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.ap(maybe_0)
    var_1 = maybe_0.to_box()
    var_2 = maybe_0.to_lazy()
    var_3 = maybe_0.map(var_2)
    var_4 = var_3.to_box()
    var_5 = maybe_0.filter(str_0)
    bytes_0 = b"\xd4E\xdb\xea\x02\xca"
    bool_1 = var_2.__eq__(bytes_0)
    maybe_1 = maybe_0.to_try()


def test_case_4():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.ap(maybe_0)
    var_1 = maybe_0.bind(var_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(var_0, bool_1)
    var_2 = maybe_0.to_either()
    var_3 = var_0.to_validation()
    bool_2 = maybe_0.__eq__(var_2)
    var_4 = var_2.map(var_2)
    var_2.get_or_else(maybe_0)


def test_case_5():
    none_type_0 = None
    complex_0 = 2127.112 - 2993.3053j
    bool_0 = False
    maybe_0 = module_0.Maybe(complex_0, bool_0)
    maybe_0.bind(none_type_0)


def test_case_6():
    bool_0 = False
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.ap(bool_0)


def test_case_7():
    str_0 = "cZ:e/I"
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.ap(maybe_0)
    var_1 = maybe_0.filter(str_0)
    var_2 = maybe_0.to_lazy()
    var_3 = maybe_0.to_validation()
    var_4 = maybe_0.filter(var_3)
    bytes_0 = b"\xd4E\xdb\xea\x02\xca"
    bool_1 = var_2.__eq__(bytes_0)
    maybe_1 = module_0.Maybe(bool_0, var_3)


def test_case_8():
    bytes_0 = b"d\xf1"
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.filter(bytes_0)


def test_case_9():
    str_0 = "cZ:e/I"
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.ap(maybe_0)
    var_1 = maybe_0.filter(str_0)
    var_2 = maybe_0.to_lazy()
    var_3 = maybe_0.filter(var_0)
    bytes_0 = b"\xd4E\xdb\xea\x02\xca"
    bool_1 = var_2.__eq__(bytes_0)
    var_4 = maybe_0.get_or_else(var_1)
    var_5 = var_3.filter(var_4)


def test_case_10():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.get_or_else(bool_0)
    var_0.get_or_else(bool_0)


def test_case_11():
    generic_0 = module_1.Generic()
    bool_0 = False
    maybe_0 = module_0.Maybe(generic_0, bool_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.to_either()
    maybe_1 = module_0.Maybe(bool_0, var_0)
    bytes_0 = b""
    tuple_0 = (bytes_0,)
    var_0.ap(tuple_0)


def test_case_12():
    dict_0 = {}
    float_0 = 1346.984
    bool_0 = True
    maybe_0 = module_0.Maybe(float_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_either()
    var_1.get_or_else(dict_0)


def test_case_13():
    bytes_0 = b"q\xe8\x8c d@nQy\xb1\xd6\x83\xb2"
    set_0 = {bytes_0, bytes_0, bytes_0}
    maybe_0 = module_0.Maybe(set_0, set_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, bytes_0)
    var_0 = maybe_1.ap(bytes_0)
    none_type_1 = None
    var_1 = maybe_0.map(none_type_0)
    var_2 = maybe_1.filter(var_0)
    maybe_2 = module_0.Maybe(var_1, none_type_1)
    var_3 = maybe_1.map(var_2)
    bool_1 = none_type_0.__eq__(var_1)
    var_4 = var_1.to_either()
    var_5 = maybe_2.to_box()
    var_6 = maybe_0.get_or_else(maybe_2)
    var_7 = maybe_0.map(var_5)
    var_8 = var_2.to_box()
    var_9 = maybe_2.to_validation()
    bool_2 = maybe_1.__eq__(var_4)
    var_10 = maybe_0.bind(none_type_0)
    var_11 = maybe_1.to_lazy()
    var_12 = var_3.to_box()
    maybe_2.filter(var_4)


def test_case_14():
    none_type_0 = None
    none_type_1 = None
    bytes_0 = b"\\\x9d}\x8b\x8e\xcb\xf29$d\xfb\xca\xad.1\x9a\xa7"
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    bool_0 = False
    maybe_1 = module_0.Maybe(bytes_0, bool_0)
    var_1 = maybe_1.get_or_else(none_type_1)
    var_1.map(none_type_0)


def test_case_15():
    none_type_0 = None
    str_0 = "J}''o<sN`T^R9^|5m"
    int_0 = 739
    int_1 = -253
    tuple_0 = (str_0, int_0, int_1)
    none_type_1 = None
    maybe_0 = module_0.Maybe(tuple_0, none_type_1)
    var_0 = maybe_0.to_try()
    var_0.ap(none_type_0)


def test_case_16():
    int_0 = -1353
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.to_validation()
    var_0.map(int_0)


def test_case_17():
    none_type_0 = None
    int_0 = 0
    bool_0 = False
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = var_0.to_lazy()
    maybe_1 = module_0.Maybe(var_0, none_type_0)
    var_2 = var_0.to_lazy()
    var_3 = var_2.to_box()
    maybe_2 = module_0.Maybe(none_type_0, none_type_0)


def test_case_18():
    float_0 = -1060.32847
    none_type_0 = None
    list_0 = [none_type_0]
    maybe_0 = module_0.Maybe(none_type_0, list_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_try()
    var_1.ap(float_0)


def test_case_19():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    maybe_0.map(var_0)


def test_case_20():
    int_0 = 2570
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.to_lazy()
    bool_1 = False
    maybe_1 = module_0.Maybe(bool_1, bool_1)
    var_1 = maybe_1.to_lazy()
    bool_2 = True
    int_1 = 376
    bool_3 = True
    maybe_2 = module_0.Maybe(int_1, bool_3)
    var_2 = var_1.to_box()
    var_2.bind(bool_2)


def test_case_21():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_validation()
    var_2 = maybe_0.to_lazy()
    bool_1 = maybe_0.__eq__(maybe_0)
    var_3 = maybe_0.get_or_else(bool_1)
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    str_0 = "\n        Transform Validation to Try.\n\n        :returns: Lazy monad with function returning Validation value\n        :rtype: Lazy[Function() -> (A | None)]\n        "
    maybe_2 = module_0.Maybe(str_0, str_0)
    var_4 = maybe_2.to_box()


def test_case_22():
    bytes_0 = b"q\xe8\x8c d@nQy\xb1\xd6\x83\xb2"
    set_0 = {bytes_0, bytes_0, bytes_0}
    maybe_0 = module_0.Maybe(set_0, set_0)
    var_0 = maybe_0.ap(maybe_0)
    var_1 = maybe_0.get_or_else(var_0)
    var_2 = maybe_0.map(var_0)
    var_3 = maybe_0.get_or_else(var_1)
    maybe_1 = module_0.Maybe(maybe_0, bytes_0)
    var_4 = var_0.map(var_0)
    var_5 = maybe_1.to_either()
    bool_0 = maybe_1.__eq__(var_1)
    var_6 = var_0.to_box()
    var_7 = maybe_1.get_or_else(set_0)
    var_8 = maybe_1.to_validation()
    var_9 = var_8.to_lazy()
    bool_1 = var_0.__eq__(var_0)
    var_10 = var_6.to_lazy()
    var_11 = var_8.to_box()
    var_12 = var_0.filter(var_2)
    maybe_2 = module_0.Maybe(var_3, var_3)
    var_10.get_or_else(bytes_0)


def test_case_23():
    float_0 = -556.22235
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = False
    bool_1 = maybe_0.__eq__(maybe_0)
    maybe_1 = module_0.Maybe(float_0, bool_0)
    maybe_0.bind(maybe_0)
