# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    int_0 = 595
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.to_either()
    generic_0 = module_1.Generic()
    maybe_1 = module_0.Maybe(generic_0, generic_0)
    maybe_2 = module_0.Maybe(maybe_1, generic_0)
    var_2 = var_0.get_or_else(var_0)
    bool_0 = int_0.__eq__(maybe_1)
    bool_1 = maybe_0.__eq__(maybe_2)
    bool_2 = maybe_2.__eq__(var_0)
    var_1.get_or_else(int_0)


def test_case_3():
    bool_0 = True
    str_0 = '4lCP:jAR!%}g"'
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = maybe_0.__eq__(str_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_lazy()
    bool_2 = True
    dict_0 = {bool_2: bool_2}
    list_0 = [dict_0, dict_0, dict_0]
    var_2 = var_1.map(var_0)
    maybe_1 = module_0.Maybe(list_0, bool_2)
    var_0.map(bool_2)


def test_case_4():
    bytes_0 = b"\xc4\xba"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_try()
    bytes_1 = b"\xac\xe0\xdb\xab\xee\xd4\xccKF\xfd\x88\x0f\x94\xa3\x01hh"
    var_1 = maybe_0.to_try()
    none_type_0 = None
    bool_0 = True
    maybe_1 = module_0.Maybe(maybe_0, bool_0)
    bool_1 = True
    maybe_2 = module_0.Maybe(var_1, var_0)
    maybe_3 = module_0.Maybe(none_type_0, bool_1)
    var_2 = maybe_3.map(maybe_0)
    var_3 = maybe_3.to_either()
    var_4 = maybe_0.filter(none_type_0)
    bool_2 = maybe_3.__eq__(bytes_1)
    var_5 = maybe_2.to_validation()
    var_6 = var_5.to_lazy()
    var_0.to_box()


def test_case_5():
    int_0 = 1
    bool_0 = False
    maybe_0 = module_0.Maybe(int_0, bool_0)
    maybe_0.ap(maybe_0)


def test_case_6():
    int_0 = 595
    maybe_0 = module_0.Maybe(int_0, int_0)
    none_type_0 = None
    var_0 = maybe_0.bind(none_type_0)
    var_1 = var_0.to_try()
    var_2 = maybe_0.to_either()
    generic_0 = module_1.Generic()
    maybe_1 = module_0.Maybe(generic_0, generic_0)
    maybe_2 = module_0.Maybe(maybe_1, generic_0)
    maybe_3 = module_0.Maybe(generic_0, var_0)
    var_3 = var_1.get_or_else(var_1)
    bool_0 = int_0.__eq__(maybe_1)
    var_4 = maybe_2.map(var_2)
    bool_1 = var_4.__eq__(maybe_2)
    bool_2 = maybe_2.__eq__(var_1)
    var_5 = var_4.get_or_else(int_0)
    var_5.to_validation()


def test_case_7():
    bool_0 = False
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_box()
    maybe_0.bind(none_type_0)


def test_case_8():
    bool_0 = True
    float_0 = -1958.72647
    bool_1 = True
    maybe_0 = module_0.Maybe(float_0, bool_1)
    var_0 = maybe_0.ap(float_0)
    var_1 = var_0.ap(bool_0)
    var_2 = var_1.to_try()
    var_2.to_box()


def test_case_9():
    bool_0 = False
    int_0 = 595
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.filter(bool_0)
    var_1 = var_0.to_try()


def test_case_10():
    bytes_0 = b"\xa0\xbf\xce\x96"
    bool_0 = False
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_1, bool_1)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.filter(var_0)
    maybe_1 = module_0.Maybe(var_0, bool_0)
    var_2 = maybe_1.to_either()
    var_3 = var_2.to_validation()
    maybe_1.filter(bytes_0)


def test_case_11():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.to_lazy()
    bool_0 = var_0.__eq__(var_0)
    var_2 = maybe_0.get_or_else(none_type_0)
    var_3 = var_1.to_try()
    var_3.to_either()


def test_case_12():
    none_type_0 = None
    str_0 = "\n    Return the first element of the list which matches the keys, or None if no element matches.\n\n    :param collection: collection to search\n    :type collection: List[A]\n    :param key: function to decide witch element should be found\n    :type key: Function(A) -> Boolean\n    :returns: element of collection or None\n    :rtype: A | None\n    "
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.to_either()
    var_0.get_or_else(none_type_0)


def test_case_13():
    none_type_0 = None
    float_0 = -588.2999
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_either()
    bool_0 = False
    maybe_1 = module_0.Maybe(float_0, bool_0)
    var_0.filter(var_0)


def test_case_14():
    bool_0 = True
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_box()
    var_0.to_box()


def test_case_15():
    none_type_0 = None
    none_type_1 = None
    maybe_0 = module_0.Maybe(none_type_1, none_type_1)
    var_0 = maybe_0.to_lazy()
    var_0.get_or_else(none_type_0)


def test_case_16():
    str_0 = "NNoZ"
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.to_lazy()
    var_2 = maybe_0.get_or_else(maybe_0)
    var_3 = var_2.ap(maybe_0)
    var_4 = maybe_0.to_either()
    var_5 = maybe_0.to_validation()
    bool_2 = False
    maybe_1 = module_0.Maybe(maybe_0, bool_2)
    var_6 = var_2.to_box()
    var_7 = var_6.to_validation()
    var_8 = maybe_1.to_try()
    var_9 = var_1.to_either()
    var_10 = var_3.filter(var_2)
    var_11 = var_5.to_try()
    var_11.to_validation()


def test_case_17():
    int_0 = 359
    set_0 = {int_0, int_0}
    maybe_0 = module_0.Maybe(set_0, int_0)
    var_0 = maybe_0.to_validation()
    var_1 = var_0.to_either()
    var_2 = var_1.to_validation()
    var_2.to_validation()


def test_case_18():
    str_0 = "NNoZ"
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.get_or_else(maybe_0)
    var_2 = var_1.ap(maybe_0)
    var_3 = maybe_0.to_either()
    var_4 = maybe_0.to_validation()
    bool_2 = False
    maybe_1 = module_0.Maybe(maybe_0, bool_2)
    var_5 = var_1.to_box()
    var_6 = var_5.to_validation()
    var_7 = maybe_1.to_try()
    bool_3 = var_6.__eq__(str_0)
    var_8 = var_0.to_either()
    var_9 = var_2.filter(var_1)
    var_10 = var_3.to_lazy()
    var_11 = maybe_0.ap(bool_1)
    var_12 = maybe_1.to_validation()
    var_13 = maybe_0.to_lazy()
    var_14 = var_10.bind(var_9)
    var_5.map(var_14)


def test_case_19():
    str_0 = "NNoZ"
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.to_lazy()
    var_2 = maybe_0.get_or_else(maybe_0)
    bool_2 = var_0.__eq__(maybe_0)
    var_3 = var_1.to_either()
    var_4 = var_1.to_either()
    var_4.ap(bool_2)


def test_case_20():
    str_0 = "NNoZ"
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.to_try()
    var_2 = maybe_0.to_lazy()
    var_3 = maybe_0.get_or_else(maybe_0)
    var_3.ap(maybe_0)
