# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1


def test_case_0():
    int_0 = -2853
    maybe_0 = module_0.Maybe(int_0, int_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.ap(var_0)
    var_2 = var_1.bind(var_1)
    var_3 = var_2.to_lazy()
    bool_1 = var_2.__eq__(var_2)
    var_4 = var_2.to_box()
    var_5 = var_2.filter(var_1)
    var_6 = var_2.get_or_else(var_3)
    var_7 = var_6.to_validation()
    var_7.ap(bool_0)


def test_case_3():
    dict_0 = {}
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.bind(dict_0)
    var_1 = maybe_0.get_or_else(maybe_0)
    var_2 = maybe_0.map(var_1)
    var_3 = var_0.get_or_else(var_0)
    var_4 = var_0.to_lazy()
    none_type_0 = None
    bool_1 = var_1.__eq__(none_type_0)
    bool_2 = var_0.__eq__(var_0)
    var_5 = var_0.to_box()
    var_6 = var_5.to_validation()
    var_6.to_validation()


def test_case_4():
    bytes_0 = b"\x0b"
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.to_either()
    var_2 = maybe_0.to_box()
    var_3 = var_2.to_try()
    var_4 = maybe_0.map(bool_0)
    var_5 = var_1.to_lazy()
    var_2.map(var_2)


def test_case_5():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_validation()
    maybe_0.map(none_type_0)


def test_case_6():
    list_0 = []
    bool_0 = True
    maybe_0 = module_0.Maybe(list_0, bool_0)
    var_0 = maybe_0.bind(list_0)
    var_1 = var_0.to_validation()
    maybe_1 = module_0.Maybe(list_0, list_0)
    var_2 = maybe_1.get_or_else(maybe_1)
    var_3 = var_0.filter(var_1)
    bool_1 = False
    maybe_2 = module_0.Maybe(var_2, bool_1)
    var_4 = var_0.to_validation()


def test_case_7():
    list_0 = []
    bool_0 = False
    maybe_0 = module_0.Maybe(list_0, bool_0)
    maybe_0.bind(list_0)


def test_case_8():
    bool_0 = True
    float_0 = 611.0
    int_0 = 626
    tuple_0 = (float_0, int_0)
    set_0 = {int_0, float_0, tuple_0, float_0}
    maybe_0 = module_0.Maybe(tuple_0, set_0)
    var_0 = maybe_0.ap(bool_0)


def test_case_9():
    bytes_0 = b"\x04\xa29k`\x1d\xeb"
    float_0 = -552.149
    tuple_0 = (float_0, bytes_0)
    str_0 = '(o\x0cz4"L'
    tuple_1 = (bytes_0, tuple_0, str_0)
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    bool_1 = True
    maybe_0 = module_0.Maybe(list_0, bool_1)
    var_0 = maybe_0.filter(tuple_1)
    var_1 = var_0.to_validation()


def test_case_10():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_either()
    maybe_0.filter(var_0)


def test_case_11():
    bytes_0 = b"2\x18\xfce[\xdc\x9c\xc5A\x18"
    bytes_1 = b"T3\x9b\x18\xb7\xf1A4\xbc\x00,\xcc\x86\xfc\xc3E\x13!\xd7;"
    maybe_0 = module_0.Maybe(bytes_1, bytes_1)
    var_0 = maybe_0.get_or_else(bytes_0)
    var_0.to_lazy()


def test_case_12():
    float_0 = 727.72
    maybe_0 = module_0.Maybe(float_0, float_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_validation()


def test_case_13():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_box()


def test_case_14():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.to_lazy()
    bool_0 = var_1.__eq__(var_1)
    var_2 = maybe_0.to_lazy()
    var_3 = var_1.bind(var_2)
    maybe_1 = module_0.Maybe(var_3, var_3)
    var_0.get_or_else(bool_0)


def test_case_15():
    bytes_0 = b"\x93\xc5\x1aka\x02Um_\xdc\x9b\xc5\xa5\xf4\x85\xb8\xe4"
    tuple_0 = ()
    maybe_0 = module_0.Maybe(bytes_0, tuple_0)
    var_0 = maybe_0.to_validation()
    maybe_1 = module_0.Maybe(bytes_0, bytes_0)
    var_1 = maybe_1.bind(var_0)
    var_2 = var_1.filter(bytes_0)
    var_3 = var_2.get_or_else(bytes_0)
    bool_0 = True
    maybe_2 = module_0.Maybe(bool_0, bool_0)
    var_4 = maybe_2.map(bytes_0)
    var_5 = var_4.get_or_else(bytes_0)
    var_6 = maybe_2.to_try()
    var_7 = var_4.to_try()
    var_6.to_box()


def test_case_16():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.to_lazy()
    maybe_0.bind(var_0)


def test_case_17():
    str_0 = "\n        Call success_callback function with monad value when monad is not successfully.\n\n        :params fail_callback: function to apply with monad value.\n        :type fail_callback: Function(A)\n        :returns: self\n        :rtype: Try[A]\n        "
    set_0 = {str_0, str_0, str_0, str_0}
    maybe_0 = module_0.Maybe(set_0, str_0)
    generic_0 = module_1.Generic()
    complex_0 = -413.00142 + 3957j
    maybe_1 = module_0.Maybe(complex_0, complex_0)
    var_0 = maybe_1.to_validation()
    var_0.bind(generic_0)


def test_case_18():
    dict_0 = {}
    maybe_0 = module_0.Maybe(dict_0, dict_0)
    var_0 = maybe_0.to_validation()
    var_0.to_validation()


def test_case_19():
    none_type_0 = None
    dict_0 = {}
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.bind(dict_0)
    var_1 = var_0.ap(none_type_0)
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    none_type_1 = None
    bool_1 = maybe_1.__eq__(none_type_1)
    var_2 = maybe_1.to_box()
    bool_2 = False
    maybe_2 = module_0.Maybe(none_type_1, bool_2)
    var_3 = maybe_2.ap(var_1)
    bool_3 = False
    maybe_3 = module_0.Maybe(var_1, bool_3)
    var_4 = var_1.bind(var_1)
    var_5 = var_0.to_try()
    maybe_3.filter(maybe_2)


def test_case_20():
    int_0 = 2674
    int_1 = -1396
    bool_0 = True
    maybe_0 = module_0.Maybe(int_1, bool_0)
    var_0 = maybe_0.bind(int_0)
    var_1 = var_0.to_box()
    int_2 = 1943
    bool_1 = var_0.__eq__(int_2)
    var_2 = var_0.to_either()
    maybe_1 = module_0.Maybe(int_2, int_2)
    var_3 = maybe_0.to_box()
    var_4 = var_2.to_box()
    var_5 = maybe_0.map(int_0)
    bool_2 = False
    maybe_2 = module_0.Maybe(bool_1, var_4)
    maybe_3 = module_0.Maybe(var_5, bool_2)
    var_6 = var_4.to_lazy()
    var_7 = var_6.to_box()
    var_8 = var_4.ap(var_0)
    var_9 = maybe_1.to_lazy()
    maybe_4 = module_0.Maybe(maybe_3, var_3)
    bool_3 = var_0.__eq__(maybe_3)
    maybe_5 = module_0.Maybe(var_7, var_3)
    var_7.get_or_else(var_7)


def test_case_21():
    int_0 = 1
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.filter(int_0)
    var_1 = var_0.to_box()
    var_2 = var_1.to_lazy()
    none_type_1 = None
    maybe_1 = module_0.Maybe(none_type_1, none_type_1)
    var_3 = maybe_1.to_lazy()
    var_4 = var_3.to_validation()
    var_5 = var_4.to_lazy()
    bool_1 = False
    set_0 = {bool_1, bool_1, bool_1}
    bool_2 = False
    maybe_2 = module_0.Maybe(set_0, bool_2)
    var_6 = maybe_2.to_either()
    var_6.to_either()


def test_case_22():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.bind(none_type_0)
    var_1 = var_0.ap(none_type_0)
    var_2 = module_0.Maybe(bool_0, none_type_0)
    var_3 = var_2.to_lazy()
    bool_1 = var_2.__eq__(var_2)
    var_4 = var_2.to_box()
    var_5 = maybe_0.to_either()
    var_6 = var_2.to_box()
    var_7 = var_2.get_or_else(var_3)
    var_7.to_validation()
