# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1


def test_case_0():
    str_0 = "Q"
    maybe_0 = module_0.Maybe(str_0, str_0)


def test_case_1():
    set_0 = set()
    maybe_0 = module_0.Maybe(set_0, set_0)


def test_case_2():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(bool_1, bool_1)
    var_0 = maybe_1.to_box()
    bool_2 = maybe_1.__eq__(maybe_1)
    generic_0 = module_1.Generic()
    none_type_0 = None
    bool_3 = True
    maybe_2 = module_0.Maybe(none_type_0, bool_3)
    var_1 = maybe_1.to_box()
    none_type_0.map(var_1)


def test_case_3():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = maybe_0.__eq__(bool_0)
    var_0 = maybe_0.to_try()
    var_0.ap(bool_0)


def test_case_4():
    bytes_0 = b"\x05Ns\xc7ZO\xe2\xee3\x00\x10\xab\x05\x10\xba"
    int_0 = 1145
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.map(bytes_0)
    maybe_1 = module_0.Maybe(var_0, bool_0)
    var_1 = maybe_1.to_box()
    var_2 = var_1.to_validation()
    var_3 = var_2.to_box()


def test_case_5():
    float_0 = -1081.0
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.map(float_0)


def test_case_6():
    float_0 = 1065.0126
    bool_0 = False
    maybe_0 = module_0.Maybe(float_0, bool_0)
    maybe_1 = module_0.Maybe(maybe_0, maybe_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_1.bind(var_0)
    var_2 = maybe_0.to_try()


def test_case_7():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_validation()
    none_type_1 = None
    bool_0 = False
    maybe_1 = module_0.Maybe(none_type_1, bool_0)
    bool_1 = maybe_1.__eq__(bool_0)
    var_1 = maybe_1.to_lazy()
    maybe_1.bind(var_1)


def test_case_8():
    int_0 = 1
    int_1 = 0
    maybe_0 = module_0.Maybe(int_1, int_1)
    var_0 = module_0.Maybe(maybe_0, maybe_0)
    var_1 = var_0.ap(int_0)
    var_2 = var_0.get_or_else(var_1)


def test_case_9():
    complex_0 = -1660.9 + 3908.263j
    maybe_0 = module_0.Maybe(complex_0, complex_0)
    var_0 = maybe_0.bind(maybe_0)
    bool_0 = True
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_1 = maybe_1.ap(maybe_0)
    var_2 = maybe_0.to_box()
    var_3 = var_1.map(bool_0)
    var_4 = var_3.to_try()
    var_5 = var_3.filter(var_1)
    var_6 = var_3.to_box()


def test_case_10():
    tuple_0 = ()
    int_0 = 0
    maybe_0 = module_0.Maybe(int_0, int_0)
    maybe_0.filter(tuple_0)


def test_case_11():
    list_0 = []
    maybe_0 = module_0.Maybe(list_0, list_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    bool_0 = var_0.__eq__(var_0)
    var_1 = maybe_0.get_or_else(var_0)
    var_0.to_lazy()


def test_case_12():
    int_0 = 1
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.to_either()


def test_case_13():
    int_0 = 10
    list_0 = []
    none_type_0 = None
    maybe_0 = module_0.Maybe(list_0, none_type_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_try()
    maybe_1 = module_0.Maybe(var_0, var_1)
    var_2 = maybe_1.ap(int_0)


def test_case_14():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = maybe_0.__eq__(bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.to_box()


def test_case_15():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_box()
    var_2 = var_1.to_validation()
    var_3 = var_2.to_either()
    var_3.to_either()


def test_case_16():
    str_0 = "\x0cv\\\ru(M6:MS;8"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.to_try()
    var_0.to_lazy()


def test_case_17():
    complex_0 = -1660.9 + 3908.263j
    maybe_0 = module_0.Maybe(complex_0, complex_0)
    var_0 = maybe_0.bind(maybe_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_1 = maybe_1.ap(maybe_0)
    var_2 = maybe_0.to_box()
    var_3 = maybe_0.to_try()
    var_4 = var_1.filter(var_3)
    var_5 = var_0.to_box()
    var_6 = var_3.get_or_else(var_3)
    var_7 = var_0.map(var_2)
    var_8 = var_1.to_validation()


def test_case_18():
    str_0 = "P+P0lA\r|UW3DVr8f'-"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.to_either()
    var_2 = maybe_0.ap(str_0)
    var_3 = maybe_0.to_either()
    var_4 = var_2.to_either()
    set_0 = {str_0, str_0, str_0}
    bool_0 = False
    var_5 = var_0.to_box()
    maybe_1 = module_0.Maybe(set_0, bool_0)
    var_6 = maybe_0.to_box()
    var_7 = maybe_1.to_try()
    var_8 = var_4.ap(var_4)
    bool_1 = maybe_1.__eq__(var_7)
    var_9 = maybe_0.filter(var_4)
    var_7.to_validation()


def test_case_19():
    complex_0 = -1660.9 + 3908.263j
    maybe_0 = module_0.Maybe(complex_0, complex_0)
    var_0 = maybe_0.bind(maybe_0)
    bool_0 = True
    maybe_1 = module_0.Maybe(maybe_0, maybe_0)
    var_1 = maybe_1.ap(maybe_0)
    var_2 = maybe_0.to_box()
    var_3 = var_1.map(bool_0)
    var_4 = var_3.to_try()
    var_5 = var_3.filter(var_1)
    var_2.filter(maybe_1)


def test_case_20():
    bool_0 = True
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    bool_2 = True
    maybe_1 = module_0.Maybe(bool_0, bool_2)
    none_type_0 = None
    var_0 = maybe_0.to_try()
    bool_3 = maybe_1.__eq__(maybe_1)
    bool_4 = False
    generic_0 = module_1.Generic()
    bool_5 = False
    maybe_2 = module_0.Maybe(none_type_0, bool_4)
    var_1 = maybe_1.ap(var_0)
    bool_6 = maybe_1.__eq__(bool_4)
    var_2 = maybe_1.to_lazy()
    var_3 = maybe_1.bind(bool_1)
    maybe_3 = module_0.Maybe(none_type_0, bool_5)
    var_2.filter(var_2)


def test_case_21():
    bool_0 = True
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    bool_2 = True
    var_0 = maybe_0.to_box()
    maybe_1 = module_0.Maybe(bool_0, bool_2)
    var_1 = maybe_0.to_try()
    bool_3 = maybe_1.__eq__(maybe_1)
    bool_4 = False
    generic_0 = module_1.Generic()
    bool_5 = var_1.__eq__(maybe_0)
    var_2 = var_1.map(bool_3)
    bool_6 = False
    maybe_2 = module_0.Maybe(bool_0, bool_6)
    var_3 = maybe_2.to_lazy()
    var_4 = maybe_1.filter(var_1)
    var_5 = maybe_1.ap(bool_4)
    var_6 = maybe_1.bind(var_1)
    var_7 = var_6.map(var_3)
    bool_7 = var_7.__eq__(maybe_2)
    var_8 = maybe_0.to_box()
    var_1.ap(var_5)
