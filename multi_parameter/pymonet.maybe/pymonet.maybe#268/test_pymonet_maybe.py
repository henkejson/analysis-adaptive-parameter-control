# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    bytes_0 = b"\xc3\xac\xad'"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    bool_0 = maybe_0.__eq__(maybe_0)


def test_case_3():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.filter(bool_0)
    var_1 = var_0.bind(bool_0)
    bool_1 = var_1.__eq__(bool_0)
    var_2 = maybe_0.to_lazy()
    var_3 = maybe_0.map(var_2)
    var_4 = maybe_0.to_box()
    var_5 = var_4.to_either()


def test_case_4():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_0.map(maybe_0)


def test_case_5():
    str_0 = "l)>_a~tO5{"
    bool_0 = True
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    bool_2 = True
    maybe_1 = module_0.Maybe(maybe_0, bool_2)
    var_0 = maybe_1.ap(str_0)


def test_case_6():
    list_0 = []
    none_type_0 = None
    maybe_0 = module_0.Maybe(list_0, none_type_0)
    var_0 = maybe_0.to_either()
    maybe_1 = module_0.Maybe(list_0, none_type_0)
    maybe_1.ap(list_0)


def test_case_7():
    int_0 = 0
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.filter(var_0)
    var_2 = var_0.to_validation()


def test_case_8():
    str_0 = "\n        Take mapper function and return value of Left.\n\n        :returns: Stored value\n        :rtype: A\n        "
    int_0 = -1063
    none_type_0 = None
    maybe_0 = module_0.Maybe(int_0, none_type_0)
    maybe_0.filter(str_0)


def test_case_9():
    list_0 = []
    str_0 = "Nngo/%"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.get_or_else(list_0)
    var_0.to_validation()


def test_case_10():
    float_0 = -892.5
    none_type_0 = None
    none_type_1 = None
    maybe_0 = module_0.Maybe(float_0, none_type_1)
    var_0 = maybe_0.get_or_else(none_type_0)
    maybe_0.filter(float_0)


def test_case_11():
    float_0 = -3077.4
    float_1 = 368.4384
    maybe_0 = module_0.Maybe(float_1, float_1)
    var_0 = maybe_0.to_either()
    var_1 = var_0.ap(float_0)
    var_2 = var_1.to_validation()


def test_case_12():
    int_0 = -145
    tuple_0 = (int_0, int_0)
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.filter(tuple_0)
    var_1 = var_0.to_box()
    var_1.to_box()


def test_case_13():
    int_0 = -1680
    str_0 = ",o,\t*%r-"
    dict_0 = {}
    bool_0 = True
    dict_1 = {str_0: bool_0, bool_0: int_0}
    maybe_0 = module_0.Maybe(dict_1, int_0)
    var_0 = maybe_0.to_try()
    bool_1 = var_0.__eq__(dict_0)
    bool_2 = False
    maybe_1 = module_0.Maybe(str_0, bool_2)
    var_1 = maybe_1.to_box()
    var_2 = var_1.ap(maybe_0)
    var_3 = maybe_1.to_validation()
    var_4 = var_3.to_try()
    set_0 = set()
    var_3.get_or_else(set_0)


def test_case_14():
    int_0 = 0
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_validation()


def test_case_15():
    bytes_0 = b"p+\xb3VF\x93"
    set_0 = set()
    bool_0 = False
    maybe_0 = module_0.Maybe(set_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_either()
    var_1.get_or_else(bytes_0)


def test_case_16():
    bytes_0 = b"\xc3\xac\xad'"
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_try()
    maybe_1 = module_0.Maybe(bytes_0, bytes_0)
    bool_1 = maybe_1.__eq__(maybe_1)


def test_case_17():
    int_0 = 0
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = module_0.Maybe(maybe_0, bool_0)
    var_1 = maybe_0.filter(var_0)
    var_2 = var_0.to_validation()


def test_case_18():
    str_0 = "pC"
    dict_0 = {str_0: str_0, str_0: str_0}
    bool_0 = False
    maybe_0 = module_0.Maybe(dict_0, bool_0)
    var_0 = maybe_0.to_lazy()
    set_0 = set()
    maybe_1 = module_0.Maybe(set_0, set_0)
    var_1 = maybe_1.to_validation()
    var_1.to_validation()


def test_case_19():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.bind(var_0)
    var_2 = var_1.bind(bool_0)
    bool_1 = var_2.__eq__(bool_0)
    var_3 = maybe_0.to_validation()
    var_4 = var_1.ap(maybe_0)
    none_type_0 = None
    var_5 = var_2.filter(none_type_0)
    var_6 = var_4.to_try()
    var_7 = var_2.ap(var_5)
    var_8 = var_7.get_or_else(var_4)
    var_9 = maybe_0.filter(var_3)
    var_10 = var_9.to_lazy()
    bool_2 = var_1.__eq__(var_8)
    var_11 = var_1.to_lazy()
    bool_3 = False
    maybe_1 = module_0.Maybe(var_8, bool_3)
    var_12 = maybe_1.to_try()
    var_13 = var_9.to_validation()
    var_14 = var_7.get_or_else(var_0)
    var_15 = var_0.to_box()


def test_case_20():
    float_0 = 8.3
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.to_box()
    maybe_1 = module_0.Maybe(float_0, none_type_0)
    bool_1 = maybe_1.__eq__(maybe_0)
    var_0.get_or_else(bool_1)


def test_case_21():
    bool_0 = True
    str_0 = "Callable[[U], Lazy[U, W]]"
    bool_1 = False
    maybe_0 = module_0.Maybe(str_0, bool_1)
    maybe_0.bind(bool_0)


def test_case_22():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    var_0.map(var_0)
