# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import builtins as module_1
import typing as module_2


def test_case_0():
    int_0 = 2271
    maybe_0 = module_0.Maybe(int_0, int_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    object_0 = module_1.object()
    bytes_0 = b"\xba\xb9\x1a\xf1\x177.E&171\xe8q\xcfT\xb1\x9c"
    maybe_0 = module_0.Maybe(object_0, bytes_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.filter(var_0)
    var_2 = maybe_0.map(maybe_0)
    bool_0 = var_2.__eq__(var_0)
    object_1 = module_1.object()
    maybe_1 = module_0.Maybe(object_0, bool_0)
    maybe_1.filter(maybe_0)


def test_case_3():
    dict_0 = {}
    str_0 = "}6obuV8MY+3e"
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    maybe_0.map(dict_0)


def test_case_4():
    object_0 = module_1.object()
    none_type_0 = None
    bytes_0 = b"\x90wDG&\x84o\x0fWp"
    maybe_0 = module_0.Maybe(object_0, bytes_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.filter(var_0)
    var_2 = maybe_0.bind(bytes_0)
    var_3 = maybe_0.ap(object_0)
    bool_0 = none_type_0.__eq__(none_type_0)
    object_1 = module_1.object()
    maybe_1 = module_0.Maybe(var_0, none_type_0)
    maybe_1.filter(none_type_0)


def test_case_5():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_either()
    maybe_0.bind(var_0)


def test_case_6():
    none_type_0 = None
    int_0 = 2699
    str_0 = "vm-&b'9nB2??\t@"
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.filter(int_0)
    var_1 = var_0.ap(none_type_0)


def test_case_7():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.to_either()
    maybe_0.ap(var_1)


def test_case_8():
    bytes_0 = b"\xba\xb9\x1a\xf1\x177.E&171\xe8q\xcfT\xb1\x9c"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.filter(bytes_0)
    bool_0 = maybe_0.__eq__(bytes_0)
    maybe_1 = module_0.Maybe(bytes_0, bool_0)
    maybe_1.filter(maybe_0)


def test_case_9():
    bool_0 = False
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.filter(bool_0)


def test_case_10():
    generic_0 = module_2.Generic()
    bool_0 = True
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.get_or_else(bool_0)
    maybe_1 = module_0.Maybe(generic_0, bool_0)
    bool_2 = maybe_1.__eq__(maybe_1)
    none_type_0 = None
    maybe_2 = module_0.Maybe(none_type_0, maybe_1)
    var_1 = maybe_1.to_try()
    var_1.to_try()


def test_case_11():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.get_or_else(var_0)
    maybe_0.filter(var_0)


def test_case_12():
    object_0 = module_1.object()
    bytes_0 = b"\xba\xb9\x1a\xf1\x177.E&171\xe8q\xcfT\xb1\x9c"
    maybe_0 = module_0.Maybe(object_0, bytes_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.filter(var_0)
    bool_0 = maybe_0.__eq__(object_0)
    maybe_1 = module_0.Maybe(object_0, bool_0)
    maybe_1.filter(maybe_0)


def test_case_13():
    bool_0 = False
    int_0 = 4709
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.to_validation()
    var_2 = var_1.to_either()
    var_3 = var_1.to_lazy()
    var_1.get_or_else(bool_0)


def test_case_14():
    object_0 = module_1.object()
    bool_0 = object_0.__eq__(object_0)
    maybe_0 = module_0.Maybe(object_0, bool_0)
    maybe_1 = module_0.Maybe(object_0, bool_0)
    var_0 = maybe_1.to_try()
    bool_1 = False
    maybe_2 = module_0.Maybe(var_0, bool_1)
    var_1 = maybe_2.to_box()
    bool_2 = var_1.__eq__(object_0)
    maybe_2.filter(var_1)


def test_case_15():
    object_0 = module_1.object()
    bytes_0 = b"\xba\xb9\x1a\xf1\x177.E&171\xe8q\xcfT\xb1\x9c"
    maybe_0 = module_0.Maybe(object_0, bytes_0)
    var_0 = maybe_0.filter(bytes_0)
    var_1 = maybe_0.map(maybe_0)
    var_2 = var_1.ap(object_0)
    var_3 = var_2.to_lazy()
    bool_0 = var_1.__eq__(var_3)
    object_1 = module_1.object()
    maybe_1 = module_0.Maybe(object_0, bool_0)
    maybe_1.filter(maybe_0)


def test_case_16():
    int_0 = 1
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.to_try()
    var_0.to_box()


def test_case_17():
    generic_0 = module_2.Generic()
    bool_0 = True
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_try()
    maybe_1 = module_0.Maybe(generic_0, bool_0)
    maybe_2 = module_0.Maybe(maybe_1, bool_0)
    var_1 = maybe_0.to_either()
    var_2 = maybe_0.to_box()
    bool_2 = maybe_0.__eq__(maybe_1)
    var_3 = maybe_0.to_validation()
    var_4 = var_0.get_or_else(maybe_2)
    var_1.get_or_else(bool_1)


def test_case_18():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_0.ap(var_0)


def test_case_19():
    none_type_0 = None
    none_type_1 = None
    maybe_0 = module_0.Maybe(none_type_1, none_type_1)
    var_0 = maybe_0.to_validation()
    var_0.get_or_else(none_type_0)


def test_case_20():
    bool_0 = False
    none_type_0 = None
    bool_1 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_1)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_either()
    var_2 = maybe_0.ap(var_1)
    var_3 = var_0.to_validation()
    var_4 = var_0.to_either()
    var_5 = maybe_0.to_lazy()
    bool_2 = var_4.__eq__(var_5)
    maybe_1 = module_0.Maybe(maybe_0, bool_0)
    var_0.get_or_else(bool_0)


def test_case_21():
    str_0 = "yge X*vp$lq*LJyp@~fa"
    str_1 = "9OF 6\x0cx,e#kgYkJGHmeO"
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_try()
    var_1.filter(str_1)


def test_case_22():
    str_0 = "rI{4I\n3v"
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_either()
    dict_0 = {}
    maybe_1 = module_0.Maybe(dict_0, dict_0)
    bool_1 = maybe_1.__eq__(maybe_1)
    bool_2 = maybe_1.__eq__(maybe_0)
    none_type_0 = None
    maybe_1.ap(none_type_0)
