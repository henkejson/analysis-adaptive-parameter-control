# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = maybe_1.__eq__(maybe_0)
    var_0 = maybe_0.to_try()
    bool_1 = maybe_1.__eq__(none_type_0)
    var_1 = maybe_1.to_validation()
    maybe_2 = module_0.Maybe(none_type_0, none_type_0)
    var_2 = maybe_2.to_box()
    var_3 = maybe_2.to_either()
    var_4 = maybe_1.to_validation()
    maybe_2.bind(none_type_0)


def test_case_3():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.ap(none_type_0)
    var_1 = var_0.map(bool_0)
    var_2 = var_1.to_try()
    var_2.to_validation()


def test_case_4():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = var_0.to_try()
    maybe_0.map(var_0)


def test_case_5():
    none_type_0 = None
    bytes_0 = b"\xad\x1d\x15\xdbO<\x86\xbb\xe4:\xa6\x8d\x95\xf2i\x0cRu\xa7"
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.to_box()
    var_2 = maybe_0.bind(var_1)
    var_3 = var_2.filter(none_type_0)
    var_4 = var_3.filter(bytes_0)
    bool_1 = var_4.__eq__(var_2)
    var_5 = var_4.to_box()
    var_6 = maybe_0.filter(maybe_0)
    var_7 = var_3.bind(var_6)
    var_8 = var_4.ap(var_1)
    var_9 = var_2.get_or_else(none_type_0)
    var_5.map(var_8)


def test_case_6():
    bytes_0 = b"\x1b\x83\x97\xe5e\xf9"
    bool_0 = False
    tuple_0 = (bytes_0, bool_0)
    str_0 = "\n        Take function, store it and call with Task value during calling fork function.\n        Return result of called.\n\n        :param fn: mapper function\n        :type fn: Function(value) -> Task[reject, mapped_value]\n        :returns:  new Task with mapper resolve attribute\n        :rtype: Task[reject, mapped_value]\n        "
    none_type_0 = None
    bool_1 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_1)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.ap(str_0)
    var_2 = var_1.get_or_else(tuple_0)
    var_2.to_lazy()


def test_case_7():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    maybe_0.ap(bool_0)


def test_case_8():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.filter(none_type_0)
    var_1 = var_0.to_either()
    maybe_1 = module_0.Maybe(bool_0, none_type_0)
    maybe_1.filter(bool_0)


def test_case_9():
    tuple_0 = ()
    bool_0 = False
    maybe_0 = module_0.Maybe(tuple_0, bool_0)
    none_type_0 = None
    var_0 = maybe_0.get_or_else(none_type_0)
    maybe_0.filter(none_type_0)


def test_case_10():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    maybe_0 = module_0.Maybe(set_0, set_0)
    var_0 = maybe_0.to_box()


def test_case_11():
    int_0 = 3901
    complex_0 = 478 + 2716j
    bool_0 = False
    maybe_0 = module_0.Maybe(complex_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_validation()
    var_2 = var_1.to_box()
    var_3 = var_2.to_lazy()
    var_4 = var_3.bind(int_0)


def test_case_12():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.bind(var_0)


def test_case_13():
    str_0 = "'M.(;$/V-F+'=k"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.to_try()
    var_0.to_box()


def test_case_14():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_try()


def test_case_15():
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_0.ap(none_type_0)


def test_case_16():
    set_0 = set()
    maybe_0 = module_0.Maybe(set_0, set_0)
    maybe_1 = module_0.Maybe(maybe_0, maybe_0)
    list_0 = []
    list_1 = [list_0, list_0, list_0, list_0]
    bool_0 = True
    maybe_2 = module_0.Maybe(list_1, bool_0)
    var_0 = maybe_2.to_lazy()
    var_1 = maybe_2.to_lazy()
    var_2 = maybe_2.to_validation()
    var_3 = var_1.to_box()
    bool_1 = maybe_1.__eq__(bool_0)
    var_4 = var_1.to_try()
    var_5 = var_1.bind(var_4)


def test_case_17():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_try()
    var_1.to_box()


def test_case_18():
    none_type_0 = None
    bytes_0 = b"\xadO<\x86\xbb\xe4:\xc9'\x95\xf2\xd9\x0c\xcau\xa7"
    bool_0 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.to_box()
    var_2 = module_0.Maybe(var_1, var_1)
    var_3 = var_2.filter(none_type_0)
    var_4 = var_3.filter(bytes_0)
    var_5 = var_3.ap(var_1)
    var_6 = var_2.to_try()
    bool_1 = var_4.__eq__(var_2)
    var_7 = var_2.filter(var_0)
    maybe_0.filter(maybe_0)
