# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = maybe_0.__eq__(bool_0)
    var_0 = maybe_0.filter(none_type_0)
    var_1 = var_0.filter(bool_0)
    bool_2 = var_1.__eq__(maybe_0)
    var_2 = maybe_0.to_box()
    var_3 = var_2.to_lazy()
    var_3.get_or_else(bool_1)


def test_case_3():
    float_0 = 675.01
    bool_0 = True
    maybe_0 = module_0.Maybe(float_0, bool_0)
    bytes_0 = b"\xcf\xe7\x8f^\xac{`7\x80h\xd8\xfe\xdc\xf9\x10r\xe1"
    maybe_1 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_validation()
    var_2 = var_0.to_lazy()
    var_3 = maybe_0.to_box()
    var_4 = maybe_0.to_lazy()
    var_5 = maybe_0.map(var_2)
    var_6 = var_2.to_box()
    int_0 = 0
    var_7 = maybe_0.to_box()
    var_4.filter(int_0)


def test_case_4():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_validation()
    set_0 = set()
    var_2 = maybe_0.to_try()
    int_0 = 0
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    bool_1 = False
    var_3 = var_1.to_lazy()
    maybe_1 = module_0.Maybe(dict_0, bool_1)
    maybe_1.map(set_0)


def test_case_5():
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.filter(maybe_0)
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_1 = var_0.bind(none_type_0)
    var_2 = var_1.bind(var_1)
    maybe_1.filter(bool_0)


def test_case_6():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_either()
    maybe_0.bind(var_0)


def test_case_7():
    int_0 = 1
    int_1 = 76
    str_0 = "v_\x0cX<<jBk45[=?\\"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.ap(int_1)
    var_1 = var_0.ap(int_0)
    var_2 = var_1.to_try()


def test_case_8():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.ap(none_type_0)


def test_case_9():
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.filter(maybe_0)
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1.filter(bool_0)


def test_case_10():
    bool_0 = True
    bool_1 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_1, none_type_0)
    var_0 = maybe_0.to_validation()
    int_0 = -1717
    maybe_1 = module_0.Maybe(int_0, int_0)
    var_1 = maybe_1.ap(bool_1)
    var_2 = var_1.get_or_else(bool_0)


def test_case_11():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    float_0 = -429.94
    bool_1 = False
    maybe_0 = module_0.Maybe(float_0, bool_1)
    var_0 = maybe_0.get_or_else(list_0)
    int_0 = -4322
    bool_2 = True
    maybe_1 = module_0.Maybe(int_0, bool_2)
    var_1 = maybe_1.to_validation()
    var_2 = var_1.to_box()
    var_2.ap(var_0)


def test_case_12():
    bytes_0 = b"\xa1\x8cI\x10\xce\xc3\xdb\x95\xc7J\xc8"
    set_0 = {bytes_0, bytes_0, bytes_0}
    generic_0 = module_1.Generic()
    maybe_0 = module_0.Maybe(generic_0, generic_0)
    var_0 = maybe_0.filter(set_0)
    var_1 = var_0.to_box()
    var_2 = maybe_0.to_either()


def test_case_13():
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.filter(maybe_0)
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_1 = maybe_1.to_either()
    maybe_1.filter(bool_0)


def test_case_14():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_box()
    var_0.to_box()


def test_case_15():
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.filter(maybe_0)
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_2 = maybe_0.to_try()
    var_3 = maybe_1.to_validation()
    bool_1 = False
    maybe_1.filter(bool_1)


def test_case_16():
    tuple_0 = ()
    none_type_0 = None
    maybe_0 = module_0.Maybe(tuple_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    maybe_1 = module_0.Maybe(tuple_0, tuple_0)
    var_1 = maybe_1.to_lazy()
    var_2 = maybe_1.to_box()
    var_3 = var_1.bind(var_2)
    var_4 = var_1.to_either()


def test_case_17():
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.filter(maybe_0)
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_1 = maybe_1.to_try()
    bool_1 = False
    maybe_1.filter(bool_1)


def test_case_18():
    int_0 = -1777
    int_0.to_box()


def test_case_19():
    int_0 = -1777
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.to_box()
    var_2 = maybe_0.map(var_0)
    var_3 = maybe_0.ap(maybe_0)
    bool_0 = maybe_0.__eq__(var_3)
    var_4 = var_0.bind(var_0)
    var_5 = var_0.to_try()
    var_6 = var_3.filter(var_5)
    var_7 = var_6.to_try()
    var_8 = var_2.to_lazy()
    var_9 = var_6.to_try()
    var_10 = var_8.to_either()
    var_11 = var_3.to_try()
    bool_1 = var_1.__eq__(int_0)
    bytes_0 = b"\xa4\xac\x86\xdab\xba?\xb4\x84\xc2$\x18\xf9\x10\xc4b\xcf\x03\xc4"
    var_12 = maybe_0.get_or_else(bytes_0)
    var_13 = var_9.map(maybe_0)
    var_14 = maybe_0.to_lazy()
    var_5.to_either()


def test_case_20():
    int_0 = -1777
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.to_box()
    var_2 = maybe_0.map(var_0)
    var_3 = maybe_0.ap(maybe_0)
    bool_0 = maybe_0.__eq__(var_3)
    var_4 = var_0.bind(var_0)
    var_5 = var_0.to_try()
    var_6 = var_3.filter(var_5)
    var_7 = var_6.to_try()
    var_8 = var_2.to_lazy()
    var_9 = var_3.to_try()
    var_9.to_either()


def test_case_21():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    maybe_0.filter(bool_1)
