# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1
import builtins as module_2


def test_case_0():
    complex_0 = -901.5 + 4052.84592j
    maybe_0 = module_0.Maybe(complex_0, complex_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    str_0 = "\rSMG"
    none_type_0 = None
    bool_0 = False
    generic_0 = module_1.Generic()
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.ap(str_0)
    var_1 = var_0.filter(bool_0)
    bool_2 = var_1.__eq__(generic_0)
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    maybe_1.filter(str_0)


def test_case_3():
    bytes_0 = b"\x8a\xf4\x07u\x16(\xaf\xafb"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.bind(maybe_0)
    var_1 = maybe_0.to_box()
    var_2 = var_1.to_lazy()
    var_3 = maybe_0.bind(maybe_0)
    var_4 = var_1.ap(maybe_0)


def test_case_4():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_0.ap(maybe_0)


def test_case_5():
    bool_0 = False
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_1, bool_1)
    var_0 = maybe_0.to_box()
    maybe_0.bind(bool_0)


def test_case_6():
    str_0 = "\rSMG"
    none_type_0 = None
    bool_0 = False
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.ap(str_0)
    var_1 = var_0.filter(bool_0)
    var_2 = maybe_0.get_or_else(maybe_0)
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    maybe_1.filter(str_0)


def test_case_7():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.filter(bool_0)
    var_1 = maybe_0.to_try()
    var_2 = module_2.object()
    var_2.get_or_else(maybe_0)


def test_case_8():
    str_0 = "T}'P{FXW=%${8v=\x0cfWqN"
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.get_or_else(bool_0)
    str_1 = "\n        Returns Lazy with function returning argument.\n\n        :param value: value to return by Lazy constructor_fn\n        :type value: Any\n        :returns: Lazy with function returning argument\n        :rtype: Lazy[Function() -> A]\n        "
    bool_1 = False
    maybe_1 = module_0.Maybe(str_1, bool_1)
    maybe_1.filter(var_0)


def test_case_9():
    bytes_0 = b"\xd9\xfb0\x04=\xc7\xd3\xc2\xd5:Y\xd9("
    bool_0 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.to_box()
    bool_1 = var_0.__eq__(bytes_0)
    bool_2 = True
    maybe_1 = module_0.Maybe(bytes_0, bool_2)
    none_type_0 = None
    var_1 = maybe_1.map(none_type_0)
    var_2 = maybe_1.to_try()
    var_3 = maybe_1.to_either()
    var_4 = var_3.ap(var_2)
    var_5 = maybe_1.bind(bytes_0)
    none_type_1 = None
    var_6 = maybe_1.filter(maybe_1)
    var_7 = var_6.bind(none_type_1)
    var_8 = maybe_1.to_try()
    var_9 = maybe_1.to_validation()
    maybe_2 = module_0.Maybe(var_9, bool_2)


def test_case_10():
    str_0 = "T}'P{FXW=%${8v=\x0cfWqN"
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_either()
    str_1 = "\n        Returns Lazy with function returning argument.\n\n        :param value: value to return by Lazy constructor_fn\n        :type value: Any\n        :returns: Lazy with function returning argument\n        :rtype: Lazy[Function() -> A]\n        "
    bool_1 = False
    var_1 = maybe_0.to_box()
    maybe_1 = module_0.Maybe(str_1, bool_1)
    maybe_1.filter(var_0)


def test_case_11():
    str_0 = "\n        Applies the function inside the Box[A] structure to another applicative type.\n\n        :param applicative: applicative contains function\n        :type applicative: Box[B]\n        :returns: new Box with result of contains function\n        :rtype: Box[A(B)]\n        "
    maybe_0 = module_0.Maybe(str_0, str_0)
    maybe_1 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_1.to_lazy()
    var_1 = var_0.to_try()
    var_2 = maybe_1.to_box()
    bool_0 = maybe_1.__eq__(var_2)
    var_3 = maybe_1.map(maybe_1)
    var_4 = maybe_1.bind(maybe_0)
    bool_1 = var_4.__eq__(bool_0)
    var_5 = var_0.to_box()
    maybe_2 = module_0.Maybe(var_2, bool_1)
    var_6 = var_4.filter(var_4)
    bool_2 = maybe_2.__eq__(var_2)
    maybe_2.filter(var_1)


def test_case_12():
    float_0 = 2295.0
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_1 = module_0.Maybe(float_0, bool_0)
    var_0 = maybe_1.to_lazy()
    var_1 = var_0.bind(var_0)
    maybe_1.map(var_0)


def test_case_13():
    none_type_0 = None
    complex_0 = 418.07 + 110.65j
    maybe_0 = module_0.Maybe(complex_0, complex_0)
    var_0 = maybe_0.to_try()
    var_1 = var_0.map(none_type_0)
    var_1.to_either()


def test_case_14():
    float_0 = 1200.0
    bool_0 = False
    maybe_0 = module_0.Maybe(float_0, bool_0)
    var_0 = maybe_0.to_try()
    var_0.to_try()


def test_case_15():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_0.to_validation()


def test_case_16():
    generic_0 = module_1.Generic()
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_validation()
    bool_1 = True
    maybe_1 = module_0.Maybe(generic_0, bool_1)
    var_1 = maybe_1.to_try()
    var_2 = var_1.bind(bool_1)


def test_case_17():
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_either()
    var_2 = var_1.to_try()
    var_1.bind(bool_0)


def test_case_18():
    bytes_0 = b"\xd9\xfb0\x04=\xc7\xd3\xc2\xd5:Y\xd9("
    bool_0 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.to_box()
    bool_1 = maybe_0.__eq__(maybe_0)
    bool_2 = True
    maybe_1 = module_0.Maybe(bool_2, bool_2)
    var_0.map(var_0)


def test_case_19():
    int_0 = -601
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.ap(int_0)
    var_1 = maybe_0.bind(none_type_0)
    bool_1 = maybe_0.__eq__(var_0)
    var_2 = var_1.to_try()
    var_3 = maybe_0.to_validation()
    var_3.to_validation()


def test_case_20():
    str_0 = "W"
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    bool_1 = maybe_0.__eq__(str_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.to_validation()
    maybe_1 = module_0.Maybe(str_0, str_0)
    maybe_2 = module_0.Maybe(maybe_1, bool_1)
    var_2 = maybe_1.to_box()
    bool_2 = True
    maybe_3 = module_0.Maybe(bool_0, bool_2)
    bool_3 = maybe_1.__eq__(maybe_3)
    var_2.get_or_else(var_0)
