# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    list_0 = []
    none_type_0 = None
    maybe_0 = module_0.Maybe(list_0, none_type_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.to_try()
    bool_0 = maybe_0.__eq__(maybe_0)
    var_2 = maybe_0.to_box()
    var_2.to_box()


def test_case_3():
    int_0 = -1385
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.get_or_else(bool_0)
    var_1 = maybe_0.bind(maybe_0)
    bool_1 = False
    none_type_0 = None
    maybe_1 = module_0.Maybe(bool_1, int_0)
    bool_2 = maybe_0.__eq__(int_0)
    var_2 = maybe_1.map(none_type_0)
    var_3 = var_2.bind(none_type_0)
    var_4 = maybe_0.bind(none_type_0)
    maybe_2 = module_0.Maybe(int_0, bool_1)
    var_5 = var_1.to_lazy()
    var_6 = maybe_2.to_validation()


def test_case_4():
    bytes_0 = b"\xfc\xecM\x07\xb7\xbar\x0f\xe7v\xf4\x8f\xc1\xf7\xe6"
    bool_0 = False
    none_type_0 = None
    int_0 = 2326
    bool_1 = True
    maybe_0 = module_0.Maybe(int_0, bool_1)
    var_0 = maybe_0.map(none_type_0)
    var_1 = var_0.map(bool_0)
    var_2 = var_1.to_box()
    var_3 = var_2.to_lazy()
    var_4 = var_3.ap(bytes_0)


def test_case_5():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    maybe_0.map(maybe_0)


def test_case_6():
    bool_0 = False
    bool_1 = False
    set_0 = {bool_1, bool_1, bool_1, bool_1}
    maybe_0 = module_0.Maybe(set_0, bool_1)
    maybe_0.bind(bool_0)


def test_case_7():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    dict_1 = {}
    tuple_0 = (dict_1,)
    int_0 = -790
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.ap(tuple_0)
    var_1 = var_0.to_either()
    var_2 = var_1.to_lazy()
    var_3 = var_2.to_validation()
    var_3.get_or_else(dict_0)


def test_case_8():
    bytes_0 = b"^\xfb\xd6\xc8\xd3\x9d`\xaa\x9b\xc3_a"
    list_0 = [bytes_0]
    bool_0 = False
    maybe_0 = module_0.Maybe(list_0, bool_0)
    maybe_0.ap(bytes_0)


def test_case_9():
    int_0 = -73
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.to_either()
    dict_0 = {}
    bool_0 = True
    maybe_1 = module_0.Maybe(dict_0, bool_0)
    var_1 = maybe_1.filter(var_0)


def test_case_10():
    float_0 = -1470.553
    maybe_0 = module_0.Maybe(float_0, float_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    var_1 = maybe_0.to_lazy()
    maybe_1 = module_0.Maybe(float_0, float_0)
    var_2 = maybe_1.to_validation()
    var_2.get_or_else(float_0)


def test_case_11():
    str_0 = "\n        Return monad value when is successfully.\n        Othercase return default_value argument.\n\n        :params default_value: value to return when monad is not successfully.\n        :type default_value: B\n        :returns: monad value\n        :rtype: A | B\n        "
    bool_0 = False
    bool_1 = False
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, bool_1)
    var_0 = maybe_0.get_or_else(str_0)
    dict_0 = {str_0: bool_0, bool_0: str_0, bool_1: bool_0}
    bool_2 = False
    maybe_1 = module_0.Maybe(dict_0, bool_2)
    maybe_1.bind(dict_0)


def test_case_12():
    none_type_0 = None
    str_0 = "\n        :returns: Copy of self\n        :rtype: Left[A]\n        "
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.map(str_0)
    var_1 = maybe_0.map(none_type_0)
    var_2 = maybe_0.ap(maybe_0)
    maybe_1 = module_0.Maybe(none_type_0, var_2)
    var_3 = maybe_0.map(var_2)
    list_0 = [str_0, str_0, maybe_0]
    var_4 = var_2.ap(list_0)
    var_5 = var_4.bind(var_3)
    var_6 = maybe_0.get_or_else(list_0)
    bool_0 = False
    maybe_2 = module_0.Maybe(var_2, bool_0)
    bool_1 = maybe_2.__eq__(var_2)
    var_7 = maybe_0.filter(var_6)
    var_8 = maybe_0.to_box()
    var_9 = maybe_0.to_try()
    var_10 = maybe_0.map(var_8)
    var_11 = maybe_2.to_either()
    var_12 = var_7.to_try()
    var_13 = var_3.ap(var_2)
    var_14 = maybe_1.map(var_7)
    bool_2 = var_1.__eq__(var_12)
    var_15 = maybe_2.to_validation()
    var_16 = var_8.to_either()


def test_case_13():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_box()
    none_type_1 = None
    maybe_1 = module_0.Maybe(none_type_1, none_type_1)
    maybe_0.filter(none_type_0)


def test_case_14():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_validation()
    bool_0 = var_1.__eq__(none_type_0)
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_2 = maybe_1.to_validation()
    var_2.to_validation()


def test_case_15():
    generic_0 = module_1.Generic()
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_try()
    var_0.to_try()


def test_case_16():
    list_0 = []
    none_type_0 = None
    maybe_0 = module_0.Maybe(list_0, none_type_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.to_try()
    var_2 = maybe_0.to_box()
    var_2.to_box()


def test_case_17():
    int_0 = -257
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_0.get_or_else(int_0)


def test_case_18():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_validation()
    var_0.ap(none_type_0)


def test_case_19():
    float_0 = 2478.4
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.ap(float_0)
    var_1 = var_0.ap(float_0)
    var_2 = var_1.to_lazy()
    var_3 = var_2.to_box()
    bool_1 = True
    maybe_1 = module_0.Maybe(float_0, bool_1)
    var_4 = maybe_1.bind(float_0)
    var_5 = var_4.to_box()
    var_5.bind(float_0)


def test_case_20():
    none_type_0 = None
    str_0 = "\n        :returns: Copy of self\n        :rtype: Left[A]\n        "
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.map(str_0)
    var_1 = maybe_0.map(none_type_0)
    var_2 = maybe_0.ap(maybe_0)
    var_3 = maybe_0.map(var_2)
    list_0 = [str_0, str_0, maybe_0]
    var_4 = var_2.ap(list_0)
    var_5 = maybe_0.get_or_else(list_0)
    bool_0 = False
    var_6 = var_2.filter(var_5)
    maybe_1 = module_0.Maybe(var_2, bool_0)
    bool_1 = maybe_1.__eq__(var_2)
    var_7 = maybe_0.filter(var_5)
    maybe_2 = module_0.Maybe(list_0, var_4)
    var_8 = var_2.to_validation()
    var_5.to_validation()


def test_case_21():
    int_0 = -1385
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.bind(bool_0)
    var_1 = var_0.filter(int_0)
    var_2 = var_1.to_lazy()
    var_3 = maybe_0.filter(var_2)
    var_4 = maybe_0.get_or_else(var_3)
    var_5 = var_3.bind(var_0)
    bool_1 = True
    maybe_1 = module_0.Maybe(var_0, bool_1)
    bool_2 = maybe_1.__eq__(var_3)
    var_6 = var_1.bind(var_5)
