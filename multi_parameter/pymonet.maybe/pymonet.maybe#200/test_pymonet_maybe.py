# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    str_0 = "P"
    maybe_0 = module_0.Maybe(str_0, str_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    float_0 = -2741.89414
    maybe_0 = module_0.Maybe(float_0, float_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.ap(var_0)
    var_2 = maybe_0.to_try()
    var_3 = maybe_0.map(var_2)
    var_4 = var_3.filter(maybe_0)
    bool_0 = maybe_0.__eq__(var_4)
    bool_1 = False
    maybe_1 = module_0.Maybe(var_2, bool_1)
    bool_2 = var_0.__eq__(bool_0)
    var_5 = maybe_1.to_either()
    var_6 = maybe_0.bind(bool_0)
    maybe_1.filter(var_2)


def test_case_3():
    bytes_0 = b"\xa1V\xd1\xaf\xb2\xc1\x12\x8d\xa6{\xc7\x8c/X\x86\xc8\xb4n/"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    bool_0 = maybe_0.__eq__(bytes_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.get_or_else(bool_0)
    var_1.get_or_else(maybe_0)


def test_case_4():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.to_box()
    none_type_1 = None
    maybe_1 = module_0.Maybe(none_type_1, none_type_1)
    maybe_1.map(var_1)


def test_case_5():
    bytes_0 = b"w8\xfa\xe4 \x9f\x14\xe0\x89`!\xf7-\xb1s@"
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    maybe_0.bind(bytes_0)


def test_case_6():
    tuple_0 = ()
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_either()
    maybe_1 = module_0.Maybe(var_0, var_0)
    maybe_2 = module_0.Maybe(maybe_1, maybe_1)
    var_1 = maybe_2.ap(tuple_0)


def test_case_7():
    float_0 = 589.8
    bool_0 = True
    list_0 = [float_0, float_0, float_0, bool_0]
    int_0 = -866
    none_type_0 = None
    maybe_0 = module_0.Maybe(int_0, none_type_0)
    maybe_0.ap(list_0)


def test_case_8():
    none_type_0 = None
    str_0 = "o("
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.filter(str_0)
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1.filter(maybe_1)


def test_case_9():
    bool_0 = False
    float_0 = 2847.46828
    maybe_0 = module_0.Maybe(float_0, float_0)
    var_0 = maybe_0.get_or_else(bool_0)
    var_0.to_try()


def test_case_10():
    none_type_0 = None
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_try()
    bool_1 = True
    tuple_0 = (set_0, var_1, bool_1, bool_0)
    float_0 = 66.0
    bool_2 = False
    maybe_1 = module_0.Maybe(float_0, bool_2)
    var_2 = maybe_1.get_or_else(tuple_0)
    var_2.get_or_else(none_type_0)


def test_case_11():
    int_0 = -539
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.to_box()
    var_0.filter(int_0)


def test_case_12():
    bytes_0 = b""
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.to_box()


def test_case_13():
    str_0 = "\x0b272\nq"
    int_0 = 1302
    tuple_0 = (str_0, int_0)
    maybe_0 = module_0.Maybe(tuple_0, str_0)
    bool_0 = True
    maybe_1 = module_0.Maybe(maybe_0, bool_0)
    var_0 = maybe_1.to_lazy()


def test_case_14():
    none_type_0 = None
    bytes_0 = b"0\xb6\xa7M.\x10\xc8\xe1"
    maybe_0 = module_0.Maybe(bytes_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.ap(none_type_0)
    tuple_0 = (bytes_0, var_0, bytes_0)
    bool_0 = False
    maybe_1 = module_0.Maybe(tuple_0, bool_0)
    maybe_1.filter(none_type_0)


def test_case_15():
    none_type_0 = None
    str_0 = "o("
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.filter(str_0)
    var_1 = maybe_0.to_try()
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1.filter(var_1)


def test_case_16():
    bytes_0 = b"\xb48k\x96\x97cg\xe0\x0f\xc2j\xfdm\x89\xcf\xd9!o"
    bool_0 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.to_try()


def test_case_17():
    none_type_0 = None
    str_0 = "o("
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.filter(str_0)
    var_1 = maybe_0.to_validation()
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1.filter(var_1)


def test_case_18():
    dict_0 = {}
    none_type_0 = None
    maybe_0 = module_0.Maybe(dict_0, none_type_0)
    var_0 = maybe_0.to_validation()
    var_0.ap(var_0)


def test_case_19():
    float_0 = -2741.89414
    maybe_0 = module_0.Maybe(float_0, float_0)
    var_0 = maybe_0.to_lazy()
    int_0 = 0
    var_1 = maybe_0.to_try()
    var_2 = var_0.to_either()
    var_3 = maybe_0.map(var_1)
    var_4 = maybe_0.get_or_else(maybe_0)
    var_5 = var_3.filter(var_4)
    bool_0 = maybe_0.__eq__(var_5)
    bool_1 = False
    maybe_1 = module_0.Maybe(var_1, bool_1)
    bool_2 = var_0.__eq__(int_0)
    maybe_1.filter(var_1)


def test_case_20():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_1.to_box()
    var_0.to_box()


def test_case_21():
    float_0 = -2741.89414
    maybe_0 = module_0.Maybe(float_0, float_0)
    var_0 = maybe_0.to_lazy()
    maybe_1 = module_0.Maybe(var_0, var_0)
    var_1 = maybe_0.to_try()
    var_2 = maybe_0.map(var_1)
    none_type_0 = None
    bool_0 = maybe_0.__eq__(none_type_0)
    var_3 = maybe_0.ap(none_type_0)
    var_4 = var_0.ap(var_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    var_4.to_either()


def test_case_22():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(maybe_0, bool_1)
    var_0 = maybe_1.to_lazy()
    var_1 = var_0.to_try()
    float_0 = -2741.89414
    maybe_2 = module_0.Maybe(float_0, float_0)
    var_2 = maybe_2.to_lazy()
    int_0 = 0
    var_3 = var_2.ap(var_2)
    var_4 = maybe_2.to_try()
    var_5 = maybe_2.map(var_4)
    var_6 = maybe_2.get_or_else(var_3)
    var_7 = var_5.filter(var_6)
    none_type_0 = None
    var_8 = var_3.ap(none_type_0)
    bool_2 = maybe_2.__eq__(none_type_0)
    var_9 = var_5.get_or_else(none_type_0)
    bool_3 = False
    maybe_3 = module_0.Maybe(var_4, bool_3)
    bool_4 = var_2.__eq__(int_0)
    var_10 = maybe_3.to_either()
    var_11 = maybe_2.bind(bool_2)
    var_12 = maybe_3.to_either()
    var_13 = var_2.ap(var_4)
    var_14 = maybe_3.to_either()
    var_12.ap(var_10)
