# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    bytes_0 = b"\x90"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)


def test_case_1():
    bytes_0 = b""
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)


def test_case_2():
    bool_0 = False
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_validation()
    bool_2 = False
    maybe_1 = module_0.Maybe(bool_0, bool_2)
    bool_3 = maybe_1.__eq__(maybe_1)
    var_1 = maybe_1.to_validation()


def test_case_3():
    str_0 = "-"
    int_0 = 1
    set_0 = {int_0, int_0, int_0, int_0}
    set_1 = set()
    bool_0 = False
    float_0 = -593.380654
    list_0 = [float_0, float_0, float_0]
    bool_1 = True
    maybe_0 = module_0.Maybe(list_0, bool_1)
    var_0 = maybe_0.filter(bool_0)
    var_1 = var_0.map(set_1)
    var_2 = var_1.get_or_else(set_0)
    var_2.bind(str_0)


def test_case_4():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = False
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_1.to_lazy()
    var_1 = var_0.to_try()
    var_2 = maybe_1.to_try()
    maybe_2 = module_0.Maybe(var_2, none_type_0)
    maybe_1.map(var_2)


def test_case_5():
    str_0 = "\n        :param semigroup: other semigroup to concat\n        :type semigroup: Min[B]\n        :returns: new Min with smallest value\n        :rtype: Min[A | B]\n        "
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.to_validation()
    var_1 = var_0.to_try()
    bool_0 = False
    maybe_1 = module_0.Maybe(maybe_0, bool_0)
    maybe_2 = module_0.Maybe(str_0, str_0)
    var_2 = maybe_2.to_lazy()
    maybe_3 = module_0.Maybe(str_0, str_0)
    var_3 = maybe_3.to_validation()
    var_4 = maybe_3.ap(maybe_3)
    var_5 = var_4.get_or_else(str_0)
    var_6 = maybe_3.bind(var_5)
    var_5.to_try()


def test_case_6():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_lazy()
    maybe_0.bind(var_0)


def test_case_7():
    float_0 = -677.88
    bool_0 = False
    maybe_0 = module_0.Maybe(float_0, bool_0)
    maybe_0.ap(float_0)


def test_case_8():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_1.filter(maybe_1)
    var_1 = var_0.to_lazy()
    maybe_2 = module_0.Maybe(maybe_1, bool_0)


def test_case_9():
    bytes_0 = b"\xad\xbdV\x18\xb3@\x81e\xc3q\x02\xe2>"
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.filter(bytes_0)


def test_case_10():
    int_0 = 0
    set_0 = {int_0, int_0}
    list_0 = [int_0, int_0, set_0, set_0]
    bool_0 = False
    tuple_0 = (bool_0,)
    set_1 = {tuple_0}
    maybe_0 = module_0.Maybe(set_1, bool_0)
    var_0 = maybe_0.get_or_else(list_0)
    var_0.to_box()


def test_case_11():
    str_0 = ")x#gPmqYQ"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.to_validation()
    bool_0 = False
    maybe_1 = module_0.Maybe(str_0, bool_0)
    var_1 = maybe_0.to_either()
    var_2 = maybe_1.to_try()
    str_1 = "Q S87}7"
    bool_1 = var_0.__eq__(str_1)


def test_case_12():
    bytes_0 = b"\x89}\xf3\xf4d\xc7 \x1b\xc7BV\xcd95\x93q\xc4\x86\xbb"
    bool_0 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.to_try()
    var_1.to_try()


def test_case_13():
    bytes_0 = b"\xcf\x1e\x8dE\x9b\x90-\x9dt\x80\x99"
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_try()
    int_0 = -267
    none_type_0 = None
    maybe_1 = module_0.Maybe(int_0, none_type_0)
    var_2 = maybe_1.to_validation()
    var_3 = var_2.to_either()
    var_3.filter(var_3)


def test_case_14():
    list_0 = []
    int_0 = 725
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_0 = module_0.Maybe(int_0, list_0)
    var_1 = maybe_0.to_either()
    var_2 = maybe_0.to_validation()
    var_3 = maybe_0.to_validation()
    var_4 = maybe_0.to_try()
    var_5 = maybe_0.to_box()
    var_6 = var_3.to_lazy()
    var_4.to_validation()


def test_case_15():
    float_0 = -1451.5454
    maybe_0 = module_0.Maybe(float_0, float_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.to_either()
    bool_0 = maybe_0.__eq__(maybe_0)
    var_2 = maybe_0.to_box()
    var_3 = maybe_0.to_validation()
    var_4 = maybe_0.map(var_3)
    var_5 = var_2.to_validation()
    var_6 = var_3.to_either()
    var_2.map(maybe_0)


def test_case_16():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_try()
    var_0.to_box()


def test_case_17():
    int_0 = 183
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_0.filter(int_0)


def test_case_18():
    bool_0 = False
    bool_0.to_lazy()


def test_case_19():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_either()
    var_1.to_either()


def test_case_20():
    list_0 = []
    maybe_0 = module_0.Maybe(list_0, list_0)
    none_type_0 = None
    bool_0 = maybe_0.__eq__(none_type_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.to_validation()
    var_2 = maybe_0.to_validation()
    var_3 = maybe_0.to_try()
    var_4 = maybe_0.get_or_else(var_1)
    maybe_1 = module_0.Maybe(var_0, var_2)
    var_3.to_validation()


def test_case_21():
    float_0 = -1467.107834936393
    maybe_0 = module_0.Maybe(float_0, float_0)
    var_0 = maybe_0.map(maybe_0)
    bool_0 = maybe_0.__eq__(var_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    bool_2 = False
    maybe_1 = module_0.Maybe(var_0, bool_2)
    var_1 = maybe_1.to_try()
    var_2 = maybe_0.get_or_else(bool_2)
    var_3 = maybe_1.to_lazy()
    bool_3 = True
    bool_4 = False
    var_4 = maybe_0.filter(var_0)
    maybe_2 = module_0.Maybe(var_1, bool_4)
    var_5 = maybe_0.ap(float_0)
    var_6 = var_3.to_validation()
    var_7 = var_0.to_lazy()
    maybe_1.filter(bool_3)
