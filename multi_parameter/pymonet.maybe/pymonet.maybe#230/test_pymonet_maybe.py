# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    bytes_0 = b"w\x07K\xd1<\x06\xb9\x17\xcdf"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bytes_0 = b"\xd5\xab\x1cA\xa3"
    maybe_1 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_1.filter(maybe_1)
    maybe_2 = module_0.Maybe(maybe_1, bytes_0)
    bool_1 = maybe_2.__eq__(maybe_0)
    maybe_0.filter(bytes_0)


def test_case_3():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bytes_0 = b"\xd5\xab\x1cA\xa3"
    maybe_1 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_1.ap(maybe_1)
    var_1 = maybe_1.filter(maybe_1)
    var_2 = maybe_0.to_lazy()
    maybe_2 = module_0.Maybe(var_2, var_0)
    bool_1 = maybe_2.__eq__(maybe_0)
    var_3 = var_1.ap(var_2)
    maybe_0.filter(var_3)


def test_case_4():
    none_type_0 = None
    bytes_0 = b"a\xfb"
    tuple_0 = ()
    complex_0 = 965.67101 - 1015.050946j
    bool_0 = True
    maybe_0 = module_0.Maybe(complex_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.ap(bool_0)
    var_2 = maybe_0.filter(tuple_0)
    var_3 = var_2.map(bytes_0)
    var_4 = var_3.filter(none_type_0)


def test_case_5():
    none_type_0 = None
    bool_0 = False
    int_0 = 1
    tuple_0 = (bool_0, int_0, int_0)
    maybe_0 = module_0.Maybe(tuple_0, none_type_0)
    str_0 = "Dz{lZOu#q&f\r}j\nI`6\\"
    maybe_1 = module_0.Maybe(str_0, bool_0)
    maybe_1.ap(maybe_0)


def test_case_6():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.bind(var_0)


def test_case_7():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_0.ap(bool_0)


def test_case_8():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bytes_0 = b"\xd5\xab\x1cA\xa3"
    maybe_1 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_1.filter(maybe_1)
    var_1 = var_0.to_either()
    maybe_0.filter(bytes_0)


def test_case_9():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.get_or_else(none_type_0)
    var_1 = maybe_0.get_or_else(maybe_0)
    maybe_0.filter(var_1)


def test_case_10():
    bytes_0 = b"\x10\x94j\xc6\xa8\xb9\x92&jqE\xb3o\x0e"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    none_type_0 = None
    dict_0 = {bytes_0: bytes_0}
    maybe_1 = module_0.Maybe(bytes_0, dict_0)
    bool_0 = True
    tuple_0 = ()
    var_0 = maybe_0.bind(tuple_0)
    var_1 = maybe_0.get_or_else(bool_0)
    var_2 = maybe_0.get_or_else(none_type_0)
    var_3 = maybe_0.filter(var_2)
    var_2.to_box()


def test_case_11():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bytes_0 = b"\xd5\xab\x1cA\xa3"
    maybe_1 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_1.ap(maybe_1)
    var_1 = maybe_1.filter(maybe_1)
    var_2 = maybe_0.to_lazy()
    maybe_2 = module_0.Maybe(var_2, var_0)
    bool_1 = maybe_2.__eq__(maybe_0)
    var_3 = var_1.ap(var_2)
    var_4 = maybe_0.to_either()
    maybe_0.filter(var_3)


def test_case_12():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    float_0 = -1576.4
    str_0 = "\n        Call success_callback function with monad value when monad is successfully.\n\n        :params success_callback: function to apply with monad value.\n        :type success_callback: Function(A)\n        :returns: self\n        :rtype: Try[A]\n        "
    maybe_1 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_1.to_box()
    var_1 = var_0.to_either()
    var_1.ap(float_0)


def test_case_13():
    int_0 = -1419
    int_1 = 2142
    list_0 = [int_0, int_0, int_1, int_0]
    int_2 = 995
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    maybe_1 = module_0.Maybe(int_2, none_type_0)
    var_0 = maybe_1.to_box()
    var_1 = var_0.to_either()
    var_1.filter(list_0)


def test_case_14():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.bind(none_type_0)
    var_1 = var_0.to_lazy()
    var_1.get_or_else(none_type_0)


def test_case_15():
    bytes_0 = b"\xd9&\xc12\xe1/4#7p\xde\xd0T\xa2\xb6\xb9\xcd\xdf^"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    str_0 = ""
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_either()
    var_1.map(dict_0)


def test_case_16():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bytes_0 = b"\xd5\xaba\x0f\xa3"
    maybe_1 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_1.ap(maybe_1)
    var_1 = var_0.to_validation()
    var_2 = var_0.map(var_1)
    var_3 = var_2.to_box()
    var_4 = maybe_1.to_try()
    var_5 = maybe_0.to_lazy()
    var_6 = var_0.bind(var_3)
    bool_1 = var_2.__eq__(var_5)
    var_7 = var_6.filter(var_0)
    var_8 = maybe_0.to_box()
    var_9 = maybe_0.to_either()
    maybe_0.filter(bool_1)


def test_case_17():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_try()
    bool_1 = maybe_0.__eq__(bool_0)
    var_1 = var_0.get_or_else(none_type_0)
    var_2 = maybe_0.to_validation()
    var_1.to_validation()


def test_case_18():
    int_0 = -540
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, int_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.bind(var_0)
    bool_1 = maybe_0.__eq__(var_1)
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    bool_0.to_either()


def test_case_19():
    int_0 = 0
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.to_validation()
    var_1.filter(var_0)


def test_case_20():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bytes_0 = b"\xd5\xab\x1cA\xa3"
    maybe_1 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_1.ap(maybe_1)
    var_1 = maybe_1.to_lazy()
    var_2 = var_1.to_box()
    var_3 = maybe_1.get_or_else(var_2)
    var_4 = maybe_1.to_try()
    var_5 = maybe_0.to_lazy()
    var_6 = var_0.bind(var_2)
    bool_1 = var_6.__eq__(var_1)
    bool_2 = var_1.__eq__(var_3)
    var_7 = var_6.filter(var_0)
    bool_3 = var_2.__eq__(var_3)
    maybe_0.filter(bool_2)


def test_case_21():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bytes_0 = b"\xd5\xab\x1cA\xa3"
    maybe_1 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_1.ap(maybe_1)
    var_1 = var_0.to_validation()
    var_2 = maybe_1.bind(var_0)
    var_3 = maybe_0.to_lazy()
    maybe_2 = module_0.Maybe(var_3, var_0)
    bool_1 = maybe_2.__eq__(var_2)
    bool_2 = var_2.__eq__(var_0)
    var_4 = maybe_2.filter(var_0)
    var_5 = maybe_0.to_either()
    maybe_0.filter(bool_2)


def test_case_22():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    bytes_0 = b"\xd5\xaba\x0f\xa3"
    maybe_1 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_1.ap(maybe_1)
    var_1 = var_0.to_validation()
    var_2 = var_0.map(var_1)
    var_3 = var_2.to_box()
    var_4 = maybe_1.get_or_else(var_3)
    var_5 = maybe_1.to_try()
    var_6 = maybe_0.to_lazy()
    var_7 = module_0.Maybe(var_1, var_6)
    bool_2 = var_7.__eq__(var_2)
    bool_3 = var_2.__eq__(var_4)
    var_8 = var_7.filter(var_0)
    var_9 = maybe_0.to_box()
    var_10 = maybe_0.to_either()
    maybe_0.filter(bool_3)


def test_case_23():
    float_0 = 1490.0
    bool_0 = True
    bool_1 = False
    maybe_0 = module_0.Maybe(float_0, bool_1)
    var_0 = maybe_0.to_validation()
    maybe_0.bind(bool_0)
