# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    bool_0 = True
    var_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    bool_0 = False
    var_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    bool_0 = True
    bytes_0 = b'<"OI\xa6\x1a'
    bool_1 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_1)
    var_0 = maybe_0.get_or_else(bytes_0)
    maybe_1 = module_0.Maybe(maybe_0, bytes_0)
    var_1 = maybe_1.filter(bool_0)
    bytes_1 = b"i\x85\x14\xb6\x94P"
    bool_2 = maybe_0.__eq__(bytes_1)
    var_2 = var_1.to_validation()
    var_2.ap(bool_1)


def test_case_3():
    str_0 = "\n        If Maybe is empty return new empty Maybe, in other case\n        takes mapper function and returns result of mapper.\n\n        :param mapper: function to call with Maybe.value\n        :type mapper: Function(A) -> Maybe[B]\n        :returns: Maybe[B | None]\n        "
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.map(str_0)
    var_2 = var_0.to_try()
    var_2.to_either()


def test_case_4():
    float_0 = 33.44
    none_type_0 = None
    maybe_0 = module_0.Maybe(float_0, none_type_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.to_validation()
    maybe_0.map(var_1)


def test_case_5():
    str_0 = "6o5m@%4gsguj[Z"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.filter(maybe_0)
    var_1 = maybe_0.bind(maybe_0)
    bool_0 = var_1.__eq__(var_1)
    var_2 = maybe_0.to_validation()
    var_3 = var_0.map(str_0)
    var_4 = var_1.to_either()
    bytes_0 = b"\xf94\xcd<\x84\xba\x1d\x96\x95\xbc\xea\xed\xc3fS\xbe\xda"
    none_type_0 = None
    maybe_1 = module_0.Maybe(bytes_0, none_type_0)
    var_5 = var_4.bind(var_2)
    maybe_1.filter(var_3)


def test_case_6():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    maybe_1 = module_0.Maybe(var_0, maybe_0)
    var_1 = maybe_0.ap(var_0)
    maybe_0.bind(maybe_0)


def test_case_7():
    float_0 = 2714.0
    int_0 = -1663
    int_1 = 3638
    bool_0 = True
    maybe_0 = module_0.Maybe(int_1, bool_0)
    var_0 = maybe_0.ap(int_0)
    var_1 = var_0.to_try()
    var_2 = var_1.get_or_else(float_0)


def test_case_8():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_0.ap(none_type_0)


def test_case_9():
    str_0 = "M-O`@-'835<^y-["
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.filter(maybe_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(str_0, none_type_0)
    maybe_1.filter(str_0)


def test_case_10():
    bytes_0 = b"\xd8\xde6\xfb\x17"
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.to_lazy()
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0}
    var_1 = var_0.to_box()
    bool_1 = maybe_0.__eq__(bytes_0)
    var_2 = maybe_0.get_or_else(bytes_0)
    bool_2 = True
    var_3 = var_1.to_lazy()
    var_4 = var_0.to_validation()
    maybe_1 = module_0.Maybe(set_0, bool_2)
    var_5 = var_3.to_try()
    var_6 = maybe_1.ap(var_2)
    var_0.to_lazy()


def test_case_11():
    none_type_0 = None
    bool_0 = False
    bool_1 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_1)
    var_0 = maybe_0.get_or_else(bool_0)
    var_0.get_or_else(bool_0)


def test_case_12():
    int_0 = 506
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.to_either()
    var_0.to_either()


def test_case_13():
    str_0 = "M-O`@-'835<^y-["
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.filter(maybe_0)
    var_1 = var_0.to_box()
    none_type_0 = None
    maybe_1 = module_0.Maybe(var_1, none_type_0)
    maybe_1.filter(var_1)


def test_case_14():
    str_0 = "\n        Transform Validation to Box.\n\n        :returns: Box with Validation value\n        :rtype: Box[A]\n        "
    list_0 = [str_0, str_0]
    maybe_0 = module_0.Maybe(list_0, list_0)
    var_0 = maybe_0.to_either()
    list_1 = [var_0, var_0]
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_1 = maybe_1.to_box()
    var_2 = var_1.to_either()
    var_3 = var_2.to_box()
    var_3.get_or_else(list_1)


def test_case_15():
    bool_0 = False
    bytes_0 = b'<"OI\xa6\x1a'
    bool_1 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_1)
    var_0 = maybe_0.to_lazy()
    maybe_1 = module_0.Maybe(maybe_0, bytes_0)
    var_1 = maybe_1.filter(bool_0)
    bytes_1 = b"i\x85\x14\xb6\x94P"
    var_2 = var_0.to_try()
    maybe_0.ap(bytes_1)


def test_case_16():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_try()
    bytes_0 = b"\xa0\xffw\x0bk$\xb8"
    maybe_1 = module_0.Maybe(bytes_0, bytes_0)
    var_0.to_try()


def test_case_17():
    str_0 = "6o5m@%4gsguj[Z"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.filter(maybe_0)
    var_1 = maybe_0.to_validation()
    none_type_0 = None
    maybe_1 = module_0.Maybe(var_1, none_type_0)
    maybe_1.filter(var_1)


def test_case_18():
    bool_0 = True
    bool_0.to_lazy()


def test_case_19():
    str_0 = "6o5m@%4gsguj[Z"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.filter(maybe_0)
    bool_0 = var_0.__eq__(var_0)
    var_1 = maybe_0.to_validation()
    var_2 = var_0.map(str_0)
    var_3 = var_2.to_either()
    bytes_0 = b"\xf94\xcd<\x84\xba\x1d\x96\x95\xbc\xea\xed\xc3fS\xbe\xda"
    none_type_0 = None
    maybe_1 = module_0.Maybe(bytes_0, none_type_0)
    maybe_1.filter(var_2)


def test_case_20():
    set_0 = set()
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(set_0, bool_0)
    maybe_1 = module_0.Maybe(set_0, none_type_0)
    var_0 = maybe_1.to_either()
    var_1 = maybe_1.to_lazy()
    bool_1 = True
    maybe_2 = module_0.Maybe(set_0, bool_1)
    var_2 = maybe_1.get_or_else(maybe_1)
    var_3 = maybe_2.map(set_0)
    bool_2 = maybe_2.__eq__(maybe_1)
    var_4 = maybe_2.to_try()
    bool_3 = maybe_1.__eq__(var_4)
    var_2.ap(var_2)


def test_case_21():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_validation()
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_1 = maybe_0.get_or_else(var_0)
    var_1.filter(none_type_0)
