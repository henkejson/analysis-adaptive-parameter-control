# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import builtins as module_1
import typing as module_2


def test_case_0():
    bytes_0 = b"\x83\x8f"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    object_0 = module_1.object()
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = maybe_0.__eq__(object_0)


def test_case_3():
    float_0 = 2467.03
    maybe_0 = module_0.Maybe(float_0, float_0)
    var_0 = maybe_0.to_try()
    bool_0 = var_0.__eq__(float_0)
    var_1 = maybe_0.map(var_0)
    var_2 = maybe_0.to_try()
    var_2.to_either()


def test_case_4():
    bool_0 = False
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.map(bool_0)


def test_case_5():
    bytes_0 = b"\xbf\xdb\xaa\x05\xb6cKb\xfe\\\\\x87m\x10@\xef"
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.map(bytes_0)
    var_2 = var_1.bind(maybe_0)
    var_3 = var_2.ap(bool_0)
    var_4 = maybe_0.filter(var_3)
    var_5 = var_2.to_validation()
    var_6 = var_3.to_try()
    var_7 = var_1.to_lazy()


def test_case_6():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = maybe_0.__eq__(bool_0)
    var_0 = maybe_0.to_either()
    maybe_0.bind(var_0)


def test_case_7():
    bytes_0 = b"\x901"
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, bytes_0)
    var_0 = maybe_0.ap(bytes_0)
    var_1 = var_0.to_box()


def test_case_8():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bytes_0 = b"lu\x19\x9da2"
    maybe_0.ap(bytes_0)


def test_case_9():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.filter(none_type_0)


def test_case_10():
    int_0 = -1343
    int_1 = -3517
    bool_0 = True
    maybe_0 = module_0.Maybe(int_1, bool_0)
    var_0 = maybe_0.get_or_else(int_0)
    var_0.to_lazy()


def test_case_11():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = False
    var_0 = maybe_0.get_or_else(bool_1)
    var_1 = maybe_0.to_either()
    var_2 = var_1.to_try()
    var_3 = var_2.get_or_else(none_type_0)
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1.map(var_3)


def test_case_12():
    none_type_0 = None
    none_type_1 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_1, bool_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.bind(none_type_0)


def test_case_13():
    list_0 = []
    complex_0 = 2314.1 - 624.5j
    maybe_0 = module_0.Maybe(list_0, complex_0)
    var_0 = maybe_0.to_box()
    var_0.to_box()


def test_case_14():
    str_0 = "ehE0GF!\n!OEAY"
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_box()
    var_0.ap(str_0)


def test_case_15():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_validation()
    var_1.to_validation()


def test_case_16():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_try()
    var_0.to_box()


def test_case_17():
    none_type_0 = None
    none_type_1 = None
    maybe_0 = module_0.Maybe(none_type_1, none_type_1)
    var_0 = maybe_0.to_validation()
    var_0.get_or_else(none_type_0)


def test_case_18():
    generic_0 = module_2.Generic()
    bool_0 = True
    maybe_0 = module_0.Maybe(generic_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.map(generic_0)
    var_2 = var_1.map(generic_0)
    var_3 = var_2.to_try()
    bool_1 = False
    maybe_1 = module_0.Maybe(generic_0, bool_1)
    int_0 = -330
    maybe_2 = module_0.Maybe(int_0, int_0)
    bool_2 = maybe_2.__eq__(maybe_1)
    bytes_0 = b"\xca\x83=\x98\xe1\xa3"
    none_type_0 = None
    maybe_3 = module_0.Maybe(bytes_0, none_type_0)


def test_case_19():
    str_0 = "I+[F_7E|a=sZ!k^GeZ"
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    tuple_0 = (set_0,)
    tuple_1 = (bool_0, tuple_0)
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_try()
    bool_1 = var_0.__eq__(tuple_1)
    int_0 = 411
    bool_2 = True
    maybe_1 = module_0.Maybe(int_0, bool_2)
    var_1 = maybe_1.ap(tuple_1)
    str_1 = "K19L3-\\?RtlTrQLrir"
    bool_3 = True
    maybe_2 = module_0.Maybe(str_1, bool_3)
    var_2 = maybe_2.filter(bool_0)
    var_3 = var_2.to_validation()
    maybe_3 = module_0.Maybe(var_3, bool_2)
    var_4 = var_1.to_either()
    var_5 = var_2.get_or_else(bool_2)
    str_2 = "ImmutableList: you can not add any other instace than ImmutableList"
    var_6 = var_0.get_or_else(set_0)
    var_7 = var_1.bind(var_6)
    var_8 = var_7.to_try()
    var_9 = maybe_1.ap(var_8)
    bool_4 = var_1.__eq__(var_1)
    maybe_4 = module_0.Maybe(str_2, var_3)
    var_6.to_either()


def test_case_20():
    bytes_0 = b"\xbf\xdb\xaa\x05\xb6cKb\xfe\\\\\x87m\x10@\xef"
    bool_0 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    none_type_0 = None
    maybe_0.map(none_type_0)
