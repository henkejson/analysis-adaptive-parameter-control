# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = maybe_0.__eq__(none_type_0)
    var_0 = maybe_0.filter(bool_1)
    var_1 = var_0.ap(maybe_0)
    var_2 = var_0.to_either()
    bool_2 = var_0.__eq__(maybe_0)
    var_3 = maybe_0.to_box()
    var_4 = var_1.to_lazy()


def test_case_3():
    float_0 = -2049.357
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_either()
    bool_1 = False
    maybe_1 = module_0.Maybe(float_0, bool_1)
    bool_2 = maybe_1.__eq__(bool_1)
    var_2 = maybe_1.to_lazy()


def test_case_4():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.map(bool_0)
    var_1 = var_0.to_box()
    var_2 = maybe_0.filter(var_1)


def test_case_5():
    bytes_0 = b""
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    bool_1 = False
    var_0 = maybe_0.to_either()
    maybe_1 = module_0.Maybe(bytes_0, bool_1)
    maybe_1.map(bytes_0)


def test_case_6():
    int_0 = -1774
    none_type_0 = None
    maybe_0 = module_0.Maybe(int_0, int_0)
    bool_0 = False
    var_0 = maybe_0.filter(bool_0)
    var_1 = var_0.bind(bool_0)
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    maybe_1.filter(int_0)


def test_case_7():
    bool_0 = False
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    bool_2 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    var_1 = maybe_0.to_box()
    maybe_0.bind(var_1)


def test_case_8():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = maybe_0.__eq__(none_type_0)
    var_0 = maybe_0.filter(bool_1)
    var_1 = var_0.ap(var_0)
    var_2 = var_1.to_either()
    var_3 = var_0.to_either()
    var_4 = var_2.bind(var_3)
    bool_2 = False
    maybe_1 = module_0.Maybe(var_1, bool_2)
    var_5 = maybe_1.ap(var_3)
    var_6 = var_1.bind(var_5)
    bool_3 = maybe_0.__eq__(maybe_0)


def test_case_9():
    int_0 = -1774
    none_type_0 = None
    maybe_0 = module_0.Maybe(int_0, int_0)
    bool_0 = False
    var_0 = maybe_0.filter(bool_0)
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    maybe_1.filter(int_0)


def test_case_10():
    float_0 = -307.070172
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.map(float_0)
    var_1 = maybe_0.get_or_else(bool_0)
    var_2 = maybe_0.filter(var_1)


def test_case_11():
    list_0 = []
    complex_0 = -306 - 271.2442j
    none_type_0 = None
    maybe_0 = module_0.Maybe(list_0, none_type_0)
    var_0 = maybe_0.get_or_else(list_0)
    var_0.get_or_else(complex_0)


def test_case_12():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = maybe_0.__eq__(none_type_0)
    var_0 = maybe_0.filter(bool_0)
    var_1 = maybe_0.to_either()
    bool_2 = var_1.__eq__(maybe_0)
    var_2 = var_1.to_box()
    var_3 = var_0.to_lazy()


def test_case_13():
    none_type_0 = None
    bool_0 = False
    bool_1 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_1)
    bool_2 = maybe_0.__eq__(none_type_0)
    var_0 = maybe_0.filter(bool_2)
    var_1 = var_0.ap(maybe_0)
    var_2 = var_1.ap(bool_1)
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    var_3 = maybe_1.to_either()
    var_3.to_either()


def test_case_14():
    float_0 = -2049.357
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_either()
    bool_1 = False
    maybe_1 = module_0.Maybe(float_0, bool_1)
    bool_2 = maybe_1.__eq__(bool_1)
    var_2 = maybe_1.to_box()
    var_3 = maybe_1.to_lazy()


def test_case_15():
    int_0 = -1774
    none_type_0 = None
    maybe_0 = module_0.Maybe(int_0, int_0)
    bool_0 = False
    var_0 = maybe_0.filter(bool_0)
    var_1 = var_0.to_lazy()
    var_2 = var_0.bind(var_1)
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    maybe_1.filter(int_0)


def test_case_16():
    float_0 = 16.0
    none_type_0 = None
    none_type_1 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_1, bool_0)
    var_0 = maybe_0.to_try()
    var_1 = var_0.get_or_else(none_type_0)
    var_1.filter(float_0)


def test_case_17():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_try()


def test_case_18():
    bytes_0 = b"\x85"
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.to_validation()
    bool_1 = True
    maybe_1 = module_0.Maybe(bytes_0, bool_1)
    var_1 = maybe_1.to_box()
    var_2 = maybe_1.to_box()
    var_2.get_or_else(bool_1)


def test_case_19():
    complex_0 = -4652.46 - 3447.82044j
    bool_0 = False
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_0, none_type_0)
    var_0 = maybe_0.to_validation()
    var_0.filter(complex_0)


def test_case_20():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.to_try()
    bool_0 = True
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    var_2 = var_0.to_box()
    var_1.map(var_1)


def test_case_21():
    list_0 = []
    str_0 = "<*ss1xI\\1W~b:W\x0bkq"
    str_1 = "\n        :param fork: function to call during fork\n        :type fork: Function(reject, resolve) -> Any\n        "
    list_1 = [str_1, str_1]
    maybe_0 = module_0.Maybe(list_1, str_1)
    var_0 = maybe_0.ap(str_0)
    var_1 = maybe_0.ap(var_0)
    var_2 = var_0.to_lazy()
    var_3 = maybe_0.to_lazy()
    bool_0 = maybe_0.__eq__(str_0)
    maybe_1 = module_0.Maybe(var_1, var_0)
    bool_1 = maybe_0.__eq__(var_0)
    var_4 = var_2.ap(list_0)
    var_4.to_validation()
