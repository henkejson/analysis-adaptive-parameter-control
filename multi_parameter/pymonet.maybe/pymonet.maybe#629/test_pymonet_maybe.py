# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    bytes_0 = b"\x11\x1aq\x145\xa9\xb9\xc7>"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    int_0 = 1741
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.ap(maybe_0)
    int_1 = 3730
    var_1 = var_0.ap(int_1)
    var_2 = var_1.map(int_0)
    var_3 = var_1.to_validation()
    bool_0 = var_1.__eq__(var_1)
    var_4 = var_2.filter(int_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(var_3, bool_1)
    maybe_1.filter(int_1)


def test_case_3():
    bytes_0 = b"\x9f\xd5\x01b\x0bx\xefr)\x1e="
    bytes_1 = b"\xddr\xfa\xe9\xb2"
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_1, bool_0)
    bool_1 = maybe_0.__eq__(bytes_0)
    var_0 = maybe_0.to_validation()
    var_0.bind(bytes_0)


def test_case_4():
    int_0 = 1741
    maybe_0 = module_0.Maybe(int_0, int_0)
    int_1 = 3730
    var_0 = maybe_0.ap(int_1)
    var_1 = var_0.map(int_0)
    var_2 = var_0.to_validation()
    var_3 = var_1.filter(int_0)
    bool_0 = False
    maybe_1 = module_0.Maybe(var_2, bool_0)
    maybe_1.filter(int_1)


def test_case_5():
    bool_0 = False
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    bool_2 = maybe_0.__eq__(bool_1)
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    maybe_0.map(bool_1)


def test_case_6():
    int_0 = 1741
    maybe_0 = module_0.Maybe(int_0, int_0)
    int_1 = 3730
    var_0 = maybe_0.ap(int_1)
    var_1 = var_0.bind(maybe_0)
    var_2 = var_0.to_validation()
    var_3 = var_1.filter(int_0)
    bool_0 = False
    maybe_1 = module_0.Maybe(var_2, bool_0)
    maybe_1.filter(int_1)


def test_case_7():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_0.bind(bool_0)


def test_case_8():
    int_0 = 1741
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.ap(int_0)
    var_1 = var_0.to_validation()
    var_2 = var_0.filter(int_0)
    bool_0 = False
    maybe_1 = module_0.Maybe(var_1, bool_0)
    maybe_1.filter(int_0)


def test_case_9():
    bool_0 = True
    none_type_0 = None
    bool_1 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_1)
    var_0 = maybe_0.to_validation()
    maybe_0.ap(bool_0)


def test_case_10():
    bytes_0 = b"\x9f\xd5\x01b\x0bx\xefr)\x1e="
    bytes_1 = b"\xddr\xfa\xe9\xb2"
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_1, bool_0)
    bool_1 = maybe_0.__eq__(bytes_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.to_try()
    var_2 = maybe_0.filter(var_0)


def test_case_11():
    bool_0 = False
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.get_or_else(bool_0)
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    bool_2 = maybe_1.__eq__(var_0)
    bool_3 = var_1.__eq__(bool_1)
    var_2 = maybe_1.to_lazy()
    var_1.to_box()


def test_case_12():
    set_0 = set()
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.get_or_else(set_0)


def test_case_13():
    str_0 = "'gKr8r"
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_lazy()
    str_1 = "5C'g=Gv{60\rFmg^b`CMN"
    maybe_1 = module_0.Maybe(str_1, str_1)
    var_2 = maybe_1.get_or_else(str_1)
    var_3 = maybe_0.filter(var_1)
    var_4 = var_0.bind(var_1)
    var_5 = maybe_1.get_or_else(str_0)
    maybe_2 = module_0.Maybe(var_0, maybe_0)
    var_5.to_try()


def test_case_14():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_either()
    maybe_0.map(var_0)


def test_case_15():
    complex_0 = 1227.3837 - 826.8j
    bool_0 = True
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.ap(complex_0)
    var_1 = var_0.to_box()
    var_1.to_box()


def test_case_16():
    str_0 = ""
    set_0 = set()
    maybe_0 = module_0.Maybe(str_0, set_0)
    var_0 = maybe_0.to_box()
    bool_0 = var_0.__eq__(str_0)
    var_1 = maybe_0.to_lazy()
    var_0.map(var_0)


def test_case_17():
    int_0 = 1741
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.ap(int_0)
    var_1 = var_0.to_lazy()
    var_2 = var_0.filter(int_0)
    bool_0 = False
    maybe_1 = module_0.Maybe(var_1, bool_0)
    maybe_1.filter(int_0)


def test_case_18():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_try()
    var_0.to_try()


def test_case_19():
    bytes_0 = b"\x11\x1aq\x145\xa9\xb9\xc7>"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_validation()
    var_1 = var_0.to_try()


def test_case_20():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_validation()


def test_case_21():
    bytes_0 = b"\x9f\xd5\x01b\x0bx\xefr)\x1e="
    bytes_1 = b"\xddr\xfa\xe9\xb2"
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_1, bool_0)
    bool_1 = maybe_0.__eq__(bytes_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.bind(bytes_0)
    var_2 = var_0.to_validation()
    var_1.get_or_else(var_2)


def test_case_22():
    float_0 = 2186.21788
    int_0 = 995
    str_0 = "\n        Applies the function inside the Box[A] structure to another applicative type.\n\n        :param applicative: applicative contains function\n        :type applicative: Box[B]\n        :returns: new Box with result of contains function\n        :rtype: Box[A(B)]\n        "
    tuple_0 = (float_0, int_0, str_0, float_0)
    list_0 = [tuple_0, int_0, float_0]
    bool_0 = True
    maybe_0 = module_0.Maybe(list_0, bool_0)
    int_1 = 2993
    tuple_1 = ()
    none_type_0 = None
    maybe_1 = module_0.Maybe(tuple_1, none_type_0)
    var_0 = maybe_1.to_lazy()
    var_1 = var_0.to_validation()
    maybe_2 = module_0.Maybe(tuple_1, tuple_1)
    maybe_2.bind(int_1)


def test_case_23():
    bool_0 = False
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.get_or_else(bool_0)
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    bool_2 = maybe_1.__eq__(maybe_0)
    bool_3 = var_0.__eq__(bool_1)
    var_1 = maybe_1.to_lazy()
    var_0.to_box()


def test_case_24():
    none_type_0 = None
    none_type_1 = None
    maybe_0 = module_0.Maybe(none_type_1, none_type_1)
    bool_0 = maybe_0.__eq__(maybe_0)
    maybe_0.bind(none_type_0)
