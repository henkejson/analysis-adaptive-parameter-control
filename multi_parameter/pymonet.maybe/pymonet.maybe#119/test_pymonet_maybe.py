# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    dict_0 = {}
    bool_0 = False
    maybe_0 = module_0.Maybe(dict_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = var_0.to_lazy()
    bool_1 = maybe_0.__eq__(maybe_0)
    var_2 = maybe_0.to_try()
    maybe_1 = module_0.Maybe(var_2, dict_0)
    var_2.to_try()


def test_case_3():
    dict_0 = {}
    bool_0 = True
    maybe_0 = module_0.Maybe(dict_0, bool_0)
    var_0 = maybe_0.to_either()
    bool_1 = maybe_0.__eq__(bool_0)
    var_1 = var_0.to_try()


def test_case_4():
    none_type_0 = None
    bool_0 = False
    int_0 = 0
    bool_1 = True
    maybe_0 = module_0.Maybe(int_0, bool_1)
    var_0 = maybe_0.ap(bool_0)
    var_1 = var_0.map(none_type_0)


def test_case_5():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    maybe_1 = module_0.Maybe(maybe_0, none_type_0)
    maybe_0.map(none_type_0)


def test_case_6():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.bind(none_type_0)
    var_1 = var_0.to_box()
    var_1.to_box()


def test_case_7():
    str_0 = "ysB\x0ck2\r#a1%l+^d\n8pRK"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.to_box()
    bool_0 = False
    maybe_1 = module_0.Maybe(maybe_0, bool_0)
    maybe_1.bind(var_0)


def test_case_8():
    bytes_0 = b"g\x954:1\xb5P\xd9\x147\xc9$,\xeb3\xcf\xe0"
    float_0 = 1069.2
    bool_0 = False
    maybe_0 = module_0.Maybe(float_0, bool_0)
    maybe_0.ap(bytes_0)


def test_case_9():
    dict_0 = {}
    bool_0 = True
    maybe_0 = module_0.Maybe(dict_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.filter(var_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    var_2 = maybe_0.to_try()
    var_3 = maybe_0.map(bool_1)
    maybe_1 = module_0.Maybe(var_2, dict_0)
    var_2.to_try()


def test_case_10():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_try()
    bool_1 = True
    maybe_1 = module_0.Maybe(none_type_0, bool_1)
    var_1 = maybe_1.to_try()
    var_2 = maybe_1.get_or_else(bool_1)
    var_3 = maybe_1.bind(none_type_0)
    var_4 = var_3.to_either()
    maybe_2 = module_0.Maybe(none_type_0, none_type_0)
    var_1.ap(maybe_1)


def test_case_11():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    maybe_1 = module_0.Maybe(none_type_0, maybe_0)
    var_1 = maybe_1.to_try()
    var_1.to_try()


def test_case_12():
    none_type_0 = None
    none_type_1 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_1, bool_0)
    var_0 = maybe_0.to_either()
    var_0.get_or_else(none_type_0)


def test_case_13():
    bool_0 = False
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_0, none_type_0)
    maybe_1 = module_0.Maybe(maybe_0, none_type_0)
    var_0 = maybe_1.to_box()


def test_case_14():
    str_0 = "4TGF;zc,v"
    int_0 = 2281
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.to_lazy()
    var_0.filter(str_0)


def test_case_15():
    dict_0 = {}
    bool_0 = True
    str_0 = "\n        If Maybe is empty or filterer returns False return default_value, in other case\n        return new instance of Maybe with the same value.\n\n        :param filterer:\n        :type filterer: Function(A) -> Boolean\n        :returns: copy of self when filterer returns True, in other case empty Maybe\n        :rtype: Maybe[A] | Maybe[None]\n        "
    none_type_0 = None
    maybe_0 = module_0.Maybe(str_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    maybe_1 = module_0.Maybe(dict_0, bool_0)
    var_1 = maybe_1.to_validation()
    var_2 = maybe_1.filter(var_1)
    var_3 = var_2.to_lazy()
    bool_1 = maybe_1.__eq__(maybe_1)
    var_4 = maybe_1.to_try()
    var_5 = maybe_1.map(bool_1)
    maybe_2 = module_0.Maybe(var_4, dict_0)


def test_case_16():
    str_0 = "Last[value={}]"
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    maybe_1 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_1.to_try()
    var_0.to_validation()


def test_case_17():
    bool_0 = False
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.to_lazy()
    int_0 = -5292
    var_2 = var_1.to_either()
    maybe_1 = module_0.Maybe(int_0, var_1)
    var_3 = maybe_0.map(var_0)
    var_1.get_or_else(var_2)


def test_case_18():
    dict_0 = {}
    bool_0 = False
    maybe_0 = module_0.Maybe(dict_0, bool_0)
    var_0 = maybe_0.to_validation()
    maybe_0.filter(var_0)


def test_case_19():
    dict_0 = {}
    bool_0 = True
    str_0 = "\n        If Maybe is empty or filterer returns False return default_value, in other case\n        return new instance of Maybe with the same value.\n\n        :param filterer:\n        :type filterer: Function(A) -> Boolean\n        :returns: copy of self when filterer returns True, in other case empty Maybe\n        :rtype: Maybe[A] | Maybe[None]\n        "
    none_type_0 = None
    maybe_0 = module_0.Maybe(str_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    maybe_1 = module_0.Maybe(dict_0, bool_0)
    var_1 = maybe_1.to_validation()
    var_2 = maybe_1.filter(var_1)
    var_3 = var_2.to_lazy()
    var_4 = maybe_1.to_either()
    var_5 = maybe_1.to_box()
    bool_1 = True
    maybe_2 = module_0.Maybe(maybe_1, bool_1)
    var_6 = var_0.to_try()
    var_7 = var_4.to_try()
    var_6.ap(maybe_1)


def test_case_20():
    dict_0 = {}
    bool_0 = True
    maybe_0 = module_0.Maybe(dict_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.map(bool_1)
    bool_2 = False
    maybe_1 = module_0.Maybe(var_0, dict_0)
    var_2 = maybe_1.get_or_else(bool_2)
    bool_3 = maybe_1.__eq__(var_1)
    var_3 = var_1.bind(var_0)
    var_4 = var_1.filter(var_0)
    var_5 = var_1.to_try()
    var_6 = var_0.map(var_5)
    var_7 = var_3.get_or_else(var_5)
    var_8 = var_6.bind(bool_0)
    var_9 = maybe_0.to_either()
    var_10 = var_1.bind(bool_1)
    maybe_2 = module_0.Maybe(var_10, bool_0)
    maybe_3 = module_0.Maybe(maybe_2, var_5)
    var_11 = var_1.ap(var_0)
    var_12 = var_8.bind(var_9)
    var_13 = var_11.get_or_else(var_12)
    maybe_1.filter(var_13)
