# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    str_0 = "}Xa\n:EFNA!:84}jfh)1"
    maybe_0 = module_0.Maybe(str_0, str_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = maybe_0.__eq__(maybe_0)


def test_case_3():
    float_0 = 3760.40292
    maybe_0 = module_0.Maybe(float_0, float_0)
    bool_0 = maybe_0.__eq__(float_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    var_1 = maybe_0.to_lazy()
    var_2 = maybe_0.map(var_1)
    var_3 = maybe_0.to_lazy()
    var_4 = maybe_0.map(var_3)
    var_5 = var_4.to_try()
    var_5.to_lazy()


def test_case_4():
    float_0 = 3760.40292
    maybe_0 = module_0.Maybe(float_0, float_0)
    var_0 = maybe_0.bind(maybe_0)
    var_1 = maybe_0.to_lazy()
    var_2 = maybe_0.map(var_1)
    var_3 = maybe_0.to_lazy()
    var_4 = maybe_0.map(var_3)
    var_5 = var_4.to_try()
    var_5.to_lazy()


def test_case_5():
    bool_0 = False
    none_type_0 = None
    bool_1 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_1)
    bool_2 = maybe_0.__eq__(bool_0)
    var_0 = maybe_0.to_either()
    maybe_0.map(var_0)


def test_case_6():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.to_box()
    maybe_0.bind(var_1)


def test_case_7():
    tuple_0 = ()
    float_0 = 664.9
    tuple_1 = (float_0,)
    set_0 = {tuple_0, tuple_1, tuple_1}
    int_0 = 0
    tuple_2 = (tuple_0, set_0, set_0, int_0)
    bool_0 = True
    none_type_0 = None
    float_1 = -1014.75
    float_2 = -2474.05
    maybe_0 = module_0.Maybe(float_2, float_2)
    var_0 = maybe_0.bind(float_1)
    var_1 = var_0.ap(none_type_0)
    var_2 = var_1.get_or_else(bool_0)
    var_2.map(tuple_2)


def test_case_8():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.ap(none_type_0)


def test_case_9():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.filter(bool_0)


def test_case_10():
    float_0 = -378.3539
    int_0 = 0
    none_type_0 = None
    maybe_0 = module_0.Maybe(float_0, none_type_0)
    maybe_1 = module_0.Maybe(int_0, float_0)
    maybe_2 = module_0.Maybe(int_0, none_type_0)
    var_0 = maybe_2.to_lazy()
    maybe_0.filter(var_0)


def test_case_11():
    int_0 = -1388
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.to_box()
    var_2 = maybe_0.get_or_else(int_0)
    var_0.to_lazy()


def test_case_12():
    bytes_0 = b"\xdf\x9e<\xabS\x9d\xf9\x1b\t\xd9\xa3\xfb\x14~\x03\x9d\xeb"
    none_type_0 = None
    maybe_0 = module_0.Maybe(bytes_0, none_type_0)
    var_0 = maybe_0.get_or_else(bytes_0)
    var_0.to_try()


def test_case_13():
    bytes_0 = b"\xf4\x05\xbf\x13\x8f\xba\xa4\xdeG\x1e\xea"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_either()
    var_2 = var_1.to_validation()
    bytes_1 = b"_6:\xb9'\xbe\x9e\xafEs\xb6\x91:\xfe^\xbd"
    tuple_0 = (bytes_1,)
    bool_0 = True
    maybe_1 = module_0.Maybe(tuple_0, bool_0)
    var_3 = maybe_1.filter(tuple_0)
    bool_1 = maybe_1.__eq__(var_3)
    var_4 = maybe_1.to_either()
    var_5 = var_4.to_box()
    var_6 = var_5.to_try()
    var_6.to_either()


def test_case_14():
    float_0 = -378.3539
    int_0 = 0
    none_type_0 = None
    maybe_0 = module_0.Maybe(float_0, none_type_0)
    var_0 = maybe_0.to_either()
    maybe_1 = module_0.Maybe(int_0, var_0)
    maybe_2 = module_0.Maybe(int_0, var_0)
    var_1 = maybe_2.to_lazy()
    maybe_0.filter(var_1)


def test_case_15():
    str_0 = ".i#Fc\r>Xg-vg.tz\x0cQ,?Y"
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_either()
    var_2 = maybe_0.to_box()
    bool_1 = maybe_0.__eq__(str_0)
    var_3 = maybe_0.to_validation()
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1.bind(str_0)


def test_case_16():
    bool_0 = False
    bool_1 = False
    bool_2 = True
    maybe_0 = module_0.Maybe(bool_2, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.to_lazy()
    var_2 = var_0.to_either()
    maybe_1 = module_0.Maybe(bool_1, bool_2)
    var_3 = maybe_1.to_validation()
    var_4 = var_3.to_either()
    var_5 = var_4.to_box()
    var_5.to_box()


def test_case_17():
    bytes_0 = b"\xed\x1d\xc8Jv2\x0eD\x16\xc2N\xc8ppOVa\x9f"
    none_type_0 = None
    bool_0 = False
    list_0 = [bool_0, bool_0]
    none_type_1 = None
    bool_1 = True
    maybe_0 = module_0.Maybe(none_type_1, bool_1)
    var_0 = maybe_0.bind(list_0)
    var_1 = var_0.filter(none_type_0)
    var_2 = var_1.filter(bytes_0)
    var_3 = var_2.to_lazy()
    var_4 = var_3.to_either()
    var_5 = var_4.to_box()


def test_case_18():
    float_0 = -378.3539
    int_0 = 0
    none_type_0 = None
    maybe_0 = module_0.Maybe(float_0, none_type_0)
    var_0 = maybe_0.to_either()
    bool_0 = False
    maybe_1 = module_0.Maybe(int_0, bool_0)
    maybe_2 = module_0.Maybe(int_0, bool_0)
    var_1 = maybe_2.to_lazy()
    var_2 = var_1.to_box()
    bool_1 = var_2.__eq__(float_0)


def test_case_19():
    bytes_0 = b"#\xb1\xe4\xe1"
    bytes_1 = b"\xa6\x96\x08\x95\x15\xcb-\x17\xc8S946(u\xaf\x0e.\xe5\x9d"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    maybe_1 = module_0.Maybe(bytes_0, bytes_1)
    var_0 = maybe_1.to_lazy()
    var_1 = maybe_1.map(var_0)
    var_2 = var_0.ap(var_0)
    bool_0 = maybe_1.__eq__(maybe_0)
    var_3 = maybe_1.to_box()
    var_4 = var_0.to_box()
    var_5 = maybe_1.to_validation()
    var_6 = var_1.to_either()
    maybe_2 = module_0.Maybe(var_2, bytes_0)
    var_7 = var_0.to_try()
    bool_1 = var_2.__eq__(maybe_2)
    var_4.map(var_5)


def test_case_20():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    bool_1.to_lazy()
