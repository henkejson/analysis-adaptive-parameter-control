# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import builtins as module_1


def test_case_0():
    int_0 = -457
    maybe_0 = module_0.Maybe(int_0, int_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    bytes_0 = b"\xf8lZ\xd6\x92"
    bool_0 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    bool_1 = maybe_0.__eq__(bool_0)
    var_1 = maybe_0.get_or_else(bool_0)
    bool_2 = var_1.__eq__(var_0)
    maybe_0.filter(bool_0)


def test_case_3():
    bytes_0 = b"i\x01\x977\xbc_\x0f\x16I\xae\x85\xb87kD"
    list_0 = [bytes_0, bytes_0, bytes_0]
    bool_0 = True
    maybe_0 = module_0.Maybe(list_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.filter(var_0)
    var_2 = var_0.ap(var_1)
    var_3 = var_1.to_box()
    var_0.filter(var_2)


def test_case_4():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.get_or_else(none_type_0)
    maybe_0.map(var_0)


def test_case_5():
    bytes_0 = b"\xf8lZ\xd6\x92"
    none_type_0 = None
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    maybe_1 = module_0.Maybe(maybe_0, bytes_0)
    bool_0 = maybe_1.__eq__(maybe_0)
    var_0 = maybe_0.to_validation()
    str_0 = "-w3=Cl+"
    maybe_2 = module_0.Maybe(maybe_0, str_0)
    var_1 = maybe_2.bind(maybe_0)
    maybe_3 = module_0.Maybe(maybe_0, bool_0)
    var_2 = maybe_0.to_either()
    var_3 = maybe_3.to_either()
    var_4 = var_3.bind(var_0)
    maybe_4 = module_0.Maybe(none_type_0, maybe_0)


def test_case_6():
    bytes_0 = b"v\x94\xd2\x03(lQ\xf2\x87(\x9d0\xa7\xae6h\xdb"
    none_type_0 = None
    maybe_0 = module_0.Maybe(bytes_0, none_type_0)
    var_0 = maybe_0.to_validation()
    bool_0 = False
    maybe_1 = module_0.Maybe(bytes_0, bool_0)
    maybe_1.bind(var_0)


def test_case_7():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.ap(maybe_0)
    var_1 = var_0.filter(var_0)
    var_2 = var_0.to_box()


def test_case_8():
    int_0 = 8
    str_0 = "<ty_yrx"
    dict_0 = {str_0: str_0}
    none_type_0 = None
    maybe_0 = module_0.Maybe(dict_0, none_type_0)
    maybe_0.ap(int_0)


def test_case_9():
    bytes_0 = b"\xf8lZ\xd6\x92"
    bool_0 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    maybe_0.filter(bool_0)


def test_case_10():
    complex_0 = 2435.12 - 1832.921401161353j
    maybe_0 = module_0.Maybe(complex_0, complex_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    var_1 = maybe_0.to_validation()
    var_1.map(maybe_0)


def test_case_11():
    bytes_0 = b"i\x01\x977\xbc_\x0f\x16I\xae\x85\xb87kD"
    list_0 = [bytes_0, bytes_0, bytes_0]
    bool_0 = True
    maybe_0 = module_0.Maybe(list_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.filter(var_0)
    var_2 = maybe_0.to_either()
    var_3 = var_2.to_validation()
    var_4 = var_3.to_either()
    maybe_1 = module_0.Maybe(var_3, bool_0)


def test_case_12():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_either()
    var_0.to_either()


def test_case_13():
    bool_0 = True
    list_0 = [bool_0]
    int_0 = 761
    set_0 = {int_0}
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_1, bool_1)
    var_0 = maybe_0.to_box()
    maybe_1 = module_0.Maybe(var_0, maybe_0)
    var_1 = maybe_1.to_either()
    var_2 = var_1.map(set_0)
    var_2.get_or_else(list_0)


def test_case_14():
    int_0 = -1599
    list_0 = [int_0, int_0, int_0]
    maybe_0 = module_0.Maybe(list_0, list_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.ap(var_0)
    var_1.to_lazy()


def test_case_15():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    maybe_0 = module_0.Maybe(set_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_validation()
    complex_0 = -1122 - 913.9j
    float_0 = -2832.7519
    bool_1 = False
    maybe_1 = module_0.Maybe(float_0, bool_1)
    maybe_1.ap(complex_0)


def test_case_16():
    bool_0 = True
    none_type_0 = None
    bool_1 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_1)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.to_box()
    var_2 = var_0.get_or_else(bool_0)
    var_1.map(bool_0)


def test_case_17():
    str_0 = ";=S9iT0x>qhmg"
    object_0 = module_1.object()
    str_1 = ""
    dict_0 = {str_0: str_0, object_0: str_0, str_0: str_1, str_1: str_1}
    bool_0 = False
    maybe_0 = module_0.Maybe(dict_0, bool_0)
    var_0 = maybe_0.to_try()


def test_case_18():
    bool_0 = True
    list_0 = [bool_0]
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, list_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.filter(bool_0)
    var_2 = var_1.to_either()
    var_3 = var_1.to_validation()
    var_4 = var_1.to_lazy()
    var_5 = var_4.to_either()
    maybe_1 = module_0.Maybe(none_type_0, var_0)


def test_case_19():
    bytes_0 = b"\xf8lZ\xd6\x92"
    dict_0 = {}
    maybe_0 = module_0.Maybe(dict_0, bytes_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.ap(bytes_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(bytes_0, bool_1)
    var_1 = var_0.filter(var_0)
    maybe_2 = module_0.Maybe(var_1, var_0)
    maybe_1.filter(bool_1)


def test_case_20():
    bytes_0 = b"\xf8lZ\xd6\x92"
    dict_0 = {}
    maybe_0 = module_0.Maybe(dict_0, bytes_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.ap(bytes_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(bytes_0, bool_1)
    bool_2 = maybe_1.__eq__(var_0)
    var_1 = var_0.get_or_else(maybe_0)
    var_2 = var_1.filter(var_0)
    var_3 = var_0.to_either()
    maybe_2 = module_0.Maybe(var_2, var_1)
    var_4 = maybe_2.to_box()
    maybe_1.filter(bool_1)


def test_case_21():
    bool_0 = False
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_0, none_type_0)
    var_0 = maybe_0.to_try()
    bool_1 = var_0.__eq__(bool_0)
    bool_2 = maybe_0.__eq__(maybe_0)
    bool_3 = True
    maybe_1 = module_0.Maybe(var_0, bool_3)
    bool_4 = maybe_0.__eq__(maybe_1)
    var_1 = maybe_1.to_box()
    var_0.filter(var_1)
