# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1
import builtins as module_2


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    int_0 = -2905
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.map(var_0)
    var_2 = maybe_0.to_box()
    var_3 = var_2.to_try()
    bool_0 = maybe_0.__eq__(var_2)
    var_3.to_either()


def test_case_3():
    bytes_0 = b"]\xf3\xc54\xe5\xea5\xe4B\x1e\x1a\xfa\x95o\x9fQ"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    bool_0 = False
    list_0 = [maybe_0, bytes_0, bool_0, bool_0]
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.map(var_0)
    var_2 = maybe_0.ap(list_0)


def test_case_4():
    float_0 = -2115.8
    int_0 = 0
    bool_0 = False
    maybe_0 = module_0.Maybe(int_0, float_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.bind(var_0)
    var_2 = var_1.to_box()
    var_3 = maybe_0.to_validation()
    var_4 = maybe_0.get_or_else(bool_0)
    var_2.filter(var_4)


def test_case_5():
    bytes_0 = b"Z\x19\xd0\x1c\xcf*n\x8e\xa6)\xf5d\xeb\xf3\xd5("
    dict_0 = {bytes_0: bytes_0}
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.bind(dict_0)


def test_case_6():
    int_0 = 2106
    bool_0 = False
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.get_or_else(int_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1.ap(int_0)


def test_case_7():
    generic_0 = module_1.Generic()
    list_0 = [generic_0, generic_0, generic_0]
    int_0 = -3499
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.filter(generic_0)
    var_1 = maybe_0.get_or_else(list_0)
    bool_0 = False
    maybe_1 = module_0.Maybe(int_0, bool_0)
    maybe_1.filter(var_1)


def test_case_8():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_validation()
    maybe_0.filter(var_0)


def test_case_9():
    str_0 = "P|}+V5"
    str_1 = "0+?KQz>:k?Kzg3bW"
    bool_0 = True
    maybe_0 = module_0.Maybe(str_1, bool_0)
    var_0 = maybe_0.get_or_else(str_0)


def test_case_10():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_validation()
    var_1 = var_0.to_try()
    var_2 = maybe_0.get_or_else(var_0)


def test_case_11():
    int_0 = 1082
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_lazy()


def test_case_12():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = False
    maybe_2 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_1.to_either()
    var_2 = maybe_1.to_try()
    var_3 = maybe_1.to_either()
    var_2.to_try()


def test_case_13():
    str_0 = "\n        Transform Maybe to Try.\n\n        :returns: Lazy monad with function returning previous value in other case Left with None\n        :rtype: Lazy[Function() -> (A | None)]\n        "
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    none_type_1 = None
    var_0 = maybe_0.ap(bool_0)
    none_type_2 = None
    maybe_1 = module_0.Maybe(none_type_2, none_type_2)
    var_1 = maybe_1.to_box()
    var_2 = maybe_1.to_box()
    var_3 = maybe_0.ap(str_0)
    var_4 = var_1.to_try()
    var_5 = maybe_0.to_try()
    var_4.ap(none_type_1)


def test_case_14():
    generic_0 = module_1.Generic()
    dict_0 = {generic_0: generic_0, generic_0: generic_0, generic_0: generic_0}
    list_0 = [dict_0, dict_0, generic_0]
    int_0 = -3499
    maybe_0 = module_0.Maybe(int_0, int_0)
    maybe_1 = module_0.Maybe(maybe_0, maybe_0)
    var_0 = maybe_1.to_lazy()
    var_1 = maybe_1.get_or_else(list_0)
    float_0 = -2982.692
    bool_0 = False
    maybe_2 = module_0.Maybe(float_0, bool_0)
    maybe_2.filter(var_1)


def test_case_15():
    int_0 = -1809
    bool_0 = False
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.to_lazy()
    maybe_0.bind(var_0)


def test_case_16():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_try()
    var_0.to_lazy()


def test_case_17():
    bytes_0 = b"\xce\x850"
    set_0 = {bytes_0, bytes_0, bytes_0}
    none_type_0 = None
    generic_0 = module_1.Generic()
    bool_0 = True
    maybe_0 = module_0.Maybe(generic_0, bool_0)
    var_0 = maybe_0.filter(set_0)
    var_1 = var_0.to_lazy()
    var_2 = var_1.to_validation()
    var_3 = var_2.to_try()
    var_2.ap(none_type_0)


def test_case_18():
    object_0 = module_2.object()
    maybe_0 = module_0.Maybe(object_0, object_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_validation()
    var_2 = maybe_0.bind(var_1)
    var_3 = maybe_0.get_or_else(maybe_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(object_0, none_type_0)
    float_0 = -244.34252133460174
    var_4 = var_1.to_box()
    var_5 = var_3.map(float_0)
    var_6 = var_3.to_validation()
    generic_0 = module_1.Generic()
    bool_0 = maybe_0.__eq__(var_5)
    var_7 = maybe_0.to_lazy()
    maybe_2 = module_0.Maybe(float_0, none_type_0)
    var_8 = var_5.filter(var_7)
    var_9 = var_5.to_try()
    var_10 = var_9.get_or_else(maybe_2)
    maybe_1.filter(var_4)


def test_case_19():
    object_0 = module_2.object()
    maybe_0 = module_0.Maybe(object_0, object_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(object_0, none_type_0)
    var_1 = maybe_0.to_either()
    float_0 = -241.7
    var_2 = var_1.to_box()
    var_3 = var_0.map(float_0)
    var_4 = var_0.to_validation()
    generic_0 = module_1.Generic()
    bool_0 = maybe_0.__eq__(var_3)
    var_5 = maybe_1.to_validation()
    bool_1 = var_0.__eq__(var_0)
    var_6 = maybe_0.to_lazy()
    int_0 = -2136
    maybe_2 = module_0.Maybe(var_1, int_0)
    maybe_3 = module_0.Maybe(maybe_2, none_type_0)
    var_7 = var_3.filter(var_6)
    var_8 = var_0.get_or_else(maybe_3)
    var_9 = var_0.ap(bool_0)
    maybe_1.map(var_6)


def test_case_20():
    none_type_0 = None
    tuple_0 = ()
    maybe_0 = module_0.Maybe(tuple_0, tuple_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.to_lazy()
    var_2 = var_1.to_try()
    var_2.bind(none_type_0)


def test_case_21():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_box()
    bool_0 = maybe_0.__eq__(maybe_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    bool_2 = True
    bool_3 = maybe_0.__eq__(bool_2)
    var_0.map(var_0)
