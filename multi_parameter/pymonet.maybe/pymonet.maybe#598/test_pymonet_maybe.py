# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    complex_0 = 2286.9216 + 1519.502j
    maybe_0 = module_0.Maybe(complex_0, complex_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    set_0 = set()
    bool_0 = False
    maybe_0 = module_0.Maybe(set_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)


def test_case_3():
    tuple_0 = ()
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.map(tuple_0)
    var_1 = var_0.to_try()
    var_2 = var_0.to_try()


def test_case_4():
    none_type_0 = None
    int_0 = -34
    none_type_1 = None
    maybe_0 = module_0.Maybe(int_0, none_type_1)
    maybe_0.map(none_type_0)


def test_case_5():
    bytes_0 = b'\x8d=%"\x92I\xfa'
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    none_type_0 = None
    var_0 = maybe_0.bind(maybe_0)
    var_1 = maybe_0.get_or_else(none_type_0)
    bool_0 = var_1.__eq__(maybe_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    var_1.filter(var_1)


def test_case_6():
    str_0 = "o+k/y3.cv)Fg>#\tD?72"
    maybe_0 = module_0.Maybe(str_0, str_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_try()
    bool_1 = False
    maybe_1 = module_0.Maybe(str_0, bool_1)
    bool_2 = var_0.__eq__(bool_1)
    var_1 = maybe_0.to_lazy()
    tuple_0 = (var_0, str_0, var_0)
    bool_3 = True
    maybe_2 = module_0.Maybe(tuple_0, bool_3)
    var_2 = var_1.bind(bool_0)
    var_3 = var_0.bind(maybe_0)
    bool_4 = False
    maybe_3 = module_0.Maybe(bool_0, bool_4)
    var_4 = maybe_3.to_either()
    var_5 = maybe_1.to_try()
    var_6 = var_4.to_box()
    var_7 = maybe_2.get_or_else(maybe_2)
    var_8 = maybe_1.to_validation()
    bool_5 = True
    tuple_1 = (bool_5,)
    maybe_4 = module_0.Maybe(str_0, tuple_1)
    bool_6 = True
    maybe_5 = module_0.Maybe(var_1, bool_6)
    var_9 = var_2.map(var_5)
    var_10 = var_8.to_box()
    maybe_3.bind(str_0)


def test_case_7():
    bool_0 = False
    complex_0 = 702.9268 - 2135.791j
    dict_0 = {complex_0: complex_0, complex_0: complex_0, complex_0: complex_0}
    maybe_0 = module_0.Maybe(dict_0, dict_0)
    var_0 = maybe_0.ap(bool_0)


def test_case_8():
    dict_0 = {}
    maybe_0 = module_0.Maybe(dict_0, dict_0)
    maybe_0.ap(dict_0)


def test_case_9():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.filter(none_type_0)
    none_type_1 = None
    maybe_1 = module_0.Maybe(none_type_1, none_type_1)
    maybe_1.filter(var_0)


def test_case_10():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_box()
    maybe_0.filter(maybe_0)


def test_case_11():
    bytes_0 = b'\x8d=%"\x92I\xfa'
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    none_type_0 = None
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.get_or_else(none_type_0)
    bool_0 = var_1.__eq__(maybe_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    var_1.filter(var_1)


def test_case_12():
    none_type_0 = None
    none_type_1 = None
    maybe_0 = module_0.Maybe(none_type_1, none_type_1)
    var_0 = maybe_0.get_or_else(none_type_0)


def test_case_13():
    bytes_0 = b"\xac\x9c "
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_either()


def test_case_14():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.to_validation()
    var_2 = maybe_0.to_either()
    var_3 = maybe_0.to_validation()
    var_2.ap(var_0)


def test_case_15():
    none_type_0 = None
    str_0 = " Vl|f"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.to_box()
    var_0.filter(none_type_0)


def test_case_16():
    list_0 = []
    int_0 = -565
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_either()
    var_1.map(list_0)


def test_case_17():
    bool_0 = False
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_validation()


def test_case_18():
    str_0 = "+nZAOihr,="
    tuple_0 = (str_0, str_0, str_0)
    dict_0 = {tuple_0: str_0}
    maybe_0 = module_0.Maybe(dict_0, dict_0)
    var_0 = maybe_0.to_try()
    var_0.to_box()


def test_case_19():
    int_0 = 0
    set_0 = {int_0, int_0, int_0}
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.filter(set_0)
    none_type_1 = None
    none_type_2 = None
    maybe_1 = module_0.Maybe(none_type_2, none_type_2)
    var_1 = maybe_1.to_try()
    var_1.map(none_type_1)


def test_case_20():
    bytes_0 = b"\xba\x82\x1b"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_box()
    maybe_1 = module_0.Maybe(var_0, bytes_0)
    var_1 = maybe_0.map(var_0)
    var_2 = maybe_0.to_validation()
    var_2.get_or_else(var_2)


def test_case_21():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.to_validation()
    var_1.filter(var_1)


def test_case_22():
    bytes_0 = b"1\x07"
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.get_or_else(none_type_0)
    var_1 = maybe_0.to_either()
    var_2 = maybe_0.filter(bytes_0)
    var_3 = var_1.bind(var_1)
    bool_1 = var_2.__eq__(bytes_0)
    var_4 = maybe_0.filter(var_1)
    bool_2 = maybe_0.__eq__(maybe_0)
    var_5 = var_1.ap(var_2)
    maybe_1 = module_0.Maybe(var_5, none_type_0)
    var_6 = var_2.bind(var_5)
    maybe_2 = module_0.Maybe(var_1, var_2)
    var_7 = maybe_1.to_either()
    var_8 = var_1.to_try()
    var_9 = var_6.to_lazy()
    var_10 = maybe_0.get_or_else(bool_2)
    maybe_1.filter(var_10)


def test_case_23():
    str_0 = "o+k/y3.cv)Fg>#\tD?72"
    maybe_0 = module_0.Maybe(str_0, str_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_try()
    bool_1 = False
    maybe_1 = module_0.Maybe(str_0, bool_1)
    bool_2 = var_0.__eq__(bool_1)
    var_1 = maybe_1.to_validation()
    var_2 = maybe_0.filter(var_1)
    bool_3 = maybe_0.__eq__(var_2)
    var_3 = maybe_1.to_validation()
    var_4 = var_0.filter(var_1)
    var_4.ap(var_0)
