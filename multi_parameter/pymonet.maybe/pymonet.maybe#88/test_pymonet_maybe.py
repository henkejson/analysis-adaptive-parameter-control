# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1
import builtins as module_2


def test_case_0():
    bytes_0 = b"\xbd%\xeeX\xcaI\xa4#\xce\xb3W\x8dD\xe9W!RMg\x98"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    complex_0 = -4291.72733 + 2000.7j
    bool_0 = True
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.filter(complex_0)
    var_1 = maybe_0.to_either()
    var_2 = var_1.to_box()
    maybe_1 = module_0.Maybe(var_0, complex_0)
    var_3 = maybe_0.filter(bool_0)
    bool_2 = var_3.__eq__(var_0)
    bool_3 = maybe_0.__eq__(bool_1)


def test_case_3():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.to_box()
    var_2 = var_0.to_box()
    var_3 = var_1.to_lazy()
    bytes_0 = b"(\xa2\xfa\xd7\xdeb\xe3"
    maybe_1 = module_0.Maybe(bytes_0, bytes_0)
    var_4 = maybe_1.bind(none_type_0)
    maybe_2 = module_0.Maybe(var_4, none_type_0)
    var_5 = maybe_1.to_validation()
    bool_0 = var_5.__eq__(var_1)
    var_6 = maybe_1.map(var_5)
    var_7 = var_6.filter(var_3)
    var_8 = var_6.bind(var_6)
    bool_1 = maybe_2.__eq__(maybe_1)
    var_9 = maybe_1.to_try()
    var_10 = var_4.bind(var_9)
    var_11 = var_4.to_lazy()


def test_case_4():
    str_0 = "dxBC~PZYVReo"
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.map(str_0)


def test_case_5():
    none_type_0 = None
    int_0 = 1351
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.filter(none_type_0)
    tuple_0 = ()
    str_0 = "\n        Return monad value when is successfully.\n        Othercase return default_value argument.\n\n        :params default_value: value to return when monad is not successfully.\n        :type default_value: B\n        :returns: monad value\n        :rtype: A | B\n        "
    tuple_1 = (var_0, tuple_0, str_0)
    var_1 = var_0.bind(tuple_1)
    var_2 = var_0.to_either()


def test_case_6():
    dict_0 = {}
    int_0 = 419
    int_1 = -1505
    tuple_0 = (int_0, dict_0, int_1)
    list_0 = [dict_0, dict_0, tuple_0, dict_0]
    bool_0 = True
    maybe_0 = module_0.Maybe(list_0, bool_0)
    generic_0 = module_1.Generic()
    list_1 = []
    maybe_1 = module_0.Maybe(list_1, list_1)
    maybe_1.bind(generic_0)


def test_case_7():
    bytes_0 = b"\xbd%\xeeX\xcaI\xa4#\xce\xb3W\x8dD\xe9W!RMg\x98"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.ap(bytes_0)
    var_2 = var_1.to_validation()
    var_0.get_or_else(var_1)


def test_case_8():
    bool_0 = False
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.ap(bool_0)


def test_case_9():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    maybe_0.filter(maybe_0)


def test_case_10():
    none_type_0 = None
    set_0 = set()
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_try()
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    var_1 = maybe_1.filter(var_0)
    var_2 = var_1.get_or_else(set_0)
    var_2.to_lazy()


def test_case_11():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    var_1 = maybe_0.map(var_0)
    var_2 = maybe_0.filter(none_type_0)
    var_3 = var_2.to_lazy()
    var_4 = var_3.to_box()
    int_0 = -3152
    bool_1 = maybe_0.__eq__(var_1)
    bool_2 = False
    maybe_1 = module_0.Maybe(int_0, bool_2)
    var_5 = maybe_1.get_or_else(bool_2)
    var_6 = var_1.to_validation()
    var_7 = var_6.to_either()
    var_8 = var_0.to_box()
    bool_3 = var_1.__eq__(var_5)
    var_9 = maybe_0.map(var_4)
    maybe_1.filter(bool_2)


def test_case_12():
    object_0 = module_2.object()
    maybe_0 = module_0.Maybe(object_0, object_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_validation()
    var_2 = var_1.to_try()
    var_2.to_lazy()


def test_case_13():
    float_0 = -157.8723
    maybe_0 = module_0.Maybe(float_0, float_0)
    var_0 = maybe_0.to_box()
    var_0.filter(float_0)


def test_case_14():
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_0, none_type_0)
    var_0 = maybe_0.to_box()
    bytes_0 = b"\xd6\xc74\x95\xa9\x80NW\nz\xaf\xe4J\xa7\xc9"
    maybe_1 = module_0.Maybe(bytes_0, bytes_0)
    var_1 = maybe_1.to_box()
    var_2 = var_1.to_lazy()
    var_3 = var_1.to_try()
    var_4 = var_2.map(bytes_0)
    var_5 = maybe_1.to_validation()
    var_4.to_lazy()


def test_case_15():
    int_0 = 1600
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_validation()
    bool_0 = var_1.__eq__(var_1)
    var_1.to_validation()


def test_case_16():
    dict_0 = {}
    generic_0 = module_1.Generic(**dict_0)
    maybe_0 = module_0.Maybe(generic_0, dict_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_either()
    var_2 = var_1.to_validation()
    bool_0 = False
    maybe_1 = module_0.Maybe(var_2, bool_0)


def test_case_17():
    str_0 = "M27nd*3"
    list_0 = [str_0, str_0]
    bool_0 = False
    maybe_0 = module_0.Maybe(list_0, bool_0)
    var_0 = maybe_0.to_try()
    float_0 = 807.8
    list_1 = [float_0, float_0]
    maybe_1 = module_0.Maybe(list_1, list_1)
    var_1 = maybe_1.to_validation()
    var_2 = var_1.to_lazy()
    var_3 = var_2.map(var_0)


def test_case_18():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    list_1 = [list_0, list_0]
    maybe_0 = module_0.Maybe(list_1, bool_0)
    var_0 = maybe_0.to_validation()


def test_case_19():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_either()
    bool_0 = maybe_0.__eq__(maybe_0)
    bytes_0 = b"\xfa~\x01\x95\x89"
    maybe_1 = module_0.Maybe(var_0, var_0)
    none_type_1 = None
    bool_1 = var_0.__eq__(bool_0)
    maybe_2 = module_0.Maybe(none_type_0, bool_0)
    var_1 = maybe_2.ap(bytes_0)
    var_2 = maybe_1.to_either()
    set_0 = set()
    list_0 = [none_type_0, none_type_1, set_0, none_type_0]
    var_3 = var_1.ap(list_0)
    var_4 = var_1.to_lazy()
    var_4.filter(var_2)
