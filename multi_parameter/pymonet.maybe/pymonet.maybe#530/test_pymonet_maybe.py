# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import builtins as module_1


def test_case_0():
    complex_0 = -1469.8 - 490j
    var_0 = module_0.Maybe(complex_0, complex_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.get_or_else(none_type_0)
    var_1 = maybe_0.to_validation()
    var_0.to_either()


def test_case_3():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = maybe_0.__eq__(none_type_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_box()


def test_case_4():
    float_0 = 1616.663
    bool_0 = True
    maybe_0 = module_0.Maybe(float_0, bool_0)
    var_0 = maybe_0.ap(maybe_0)
    var_1 = maybe_0.ap(float_0)
    none_type_0 = None
    bool_1 = False
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    maybe_2 = module_0.Maybe(none_type_0, bool_1)
    var_2 = maybe_2.to_either()
    var_3 = var_0.to_box()
    var_4 = var_0.map(var_3)


def test_case_5():
    none_type_0 = None
    none_type_1 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_1, bool_0)
    maybe_0.map(none_type_0)


def test_case_6():
    none_type_0 = None
    none_type_1 = None
    int_0 = 5897
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.get_or_else(none_type_1)
    var_1 = maybe_0.to_try()
    var_2 = maybe_0.get_or_else(none_type_1)
    var_3 = maybe_0.filter(var_0)
    var_4 = maybe_0.bind(var_3)
    bool_0 = var_4.__eq__(none_type_0)
    var_5 = var_3.to_either()
    maybe_1 = module_0.Maybe(none_type_0, maybe_0)
    var_6 = maybe_0.to_validation()
    var_7 = maybe_0.to_validation()


def test_case_7():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    none_type_1 = None
    none_type_2 = None
    maybe_1 = module_0.Maybe(none_type_2, none_type_2)
    maybe_1.bind(none_type_1)


def test_case_8():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    maybe_0.ap(none_type_0)


def test_case_9():
    bytes_0 = b"\xba\xf9\xc6\xb7\xe4\x8a\xd8\x8c\xbb\x9f\xc6\xa4\xeaK\xa2\xec"
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.filter(bytes_0)
    object_0 = module_1.object()
    var_1 = var_0.to_try()
    var_2 = var_0.to_try()
    var_2.to_lazy()


def test_case_10():
    object_0 = module_1.object()
    tuple_0 = (object_0,)
    none_type_0 = None
    maybe_0 = module_0.Maybe(tuple_0, none_type_0)
    var_0 = maybe_0.to_box()
    maybe_0.filter(object_0)


def test_case_11():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    var_1 = maybe_0.to_validation()
    var_1.ap(none_type_0)


def test_case_12():
    none_type_0 = None
    none_type_1 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_1, bool_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_lazy()
    var_2 = var_1.map(none_type_0)
    var_2.to_box()


def test_case_13():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_either()
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    var_2 = maybe_1.to_validation()


def test_case_14():
    bytes_0 = b"\x07f"
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.to_lazy()


def test_case_15():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_0.to_lazy()


def test_case_16():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = maybe_0.__eq__(none_type_0)
    var_0 = maybe_0.to_validation()
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_1 = maybe_1.to_either()
    var_2 = maybe_0.to_lazy()
    var_3 = maybe_1.to_try()
    var_4 = maybe_1.to_either()
    bool_1 = var_4.__eq__(var_0)
    maybe_0.filter(var_3)


def test_case_17():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = maybe_0.__eq__(none_type_0)
    var_0 = maybe_0.to_either()
    var_1 = module_0.Maybe(none_type_0, var_0)
    var_2 = var_1.to_validation()
    var_3 = maybe_0.to_validation()


def test_case_18():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_validation()
    var_1 = var_0.to_box()
    var_2 = var_1.to_lazy()
    var_3 = var_2.to_validation()


def test_case_19():
    complex_0 = 1154.9 + 351.3j
    complex_0.to_either()


def test_case_20():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_validation()
    var_1.ap(none_type_0)


def test_case_21():
    none_type_0 = None
    bytes_0 = b"\x16\xfcN\x91R\x00\xfc\xe4\xa0]\xde+\xa2\xc2\xef\xcb#"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.bind(none_type_0)
    var_1 = var_0.to_lazy()
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_2 = maybe_1.to_lazy()
    var_3 = var_2.to_either()
    var_4 = var_3.to_validation()
    var_5 = var_4.to_try()
    var_6 = var_5.get_or_else(none_type_0)
    var_6.bind(none_type_0)


def test_case_22():
    bytes_0 = b"\xba\xf9\xc6\xb7\xe4\x8a\xd8\x8c\xbb\x9f\xc6\xa4\xeaK\xa2\xec"
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    none_type_0 = None
    var_0 = maybe_0.map(none_type_0)
    var_1 = var_0.to_try()
    var_2 = maybe_0.filter(bytes_0)
    bool_1 = var_2.__eq__(maybe_0)
    module_1.object(**bytes_0)


def test_case_23():
    bytes_0 = b"\xba\xf9\xc6\xb7\xe4\x8a\xd8\x8c\xbb\x9f\xc6\xa4\xeaK\xa2\xec"
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    none_type_0 = None
    var_0 = maybe_0.map(none_type_0)
    var_1 = module_0.Maybe(bytes_0, none_type_0)
    var_2 = maybe_0.filter(bytes_0)
    bool_1 = var_2.__eq__(var_1)
    module_1.object(*var_1)
