# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)


def test_case_1():
    set_0 = set()
    int_0 = 471
    validation_0 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.__eq__(set_0)


def test_case_2():
    str_0 = "\x0b&> \n5y2\\+azxL"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, str_0)
    var_0 = validation_0.to_either()


def test_case_3():
    bytes_0 = b"\x036\x87lAIde\x99\xad\x1d\xcf\xae\x1e\x1a"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()


def test_case_4():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)


def test_case_5():
    bytes_0 = b"\x82\x89\xcf"
    none_type_0 = None
    validation_0 = module_0.Validation(bytes_0, none_type_0)
    validation_0.is_fail()


def test_case_6():
    complex_0 = -1019.07 - 1416.04911j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_maybe()
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    validation_0.map(var_0)


def test_case_7():
    bytes_0 = b"\x036\x87lAIde\x99\xad\x1d\xcf>\x1e\x1a"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    set_0 = var_0.bind(var_0)
    validation_0.bind(set_0)


def test_case_8():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.ap(bool_0)


def test_case_9():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_box()


def test_case_10():
    float_0 = 1156.1977110573685
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, float_0)
    bool_0 = False
    var_0 = validation_0.__eq__(bool_0)
    var_1 = validation_0.to_lazy()
    var_2 = var_1.__str__()


def test_case_11():
    complex_0 = 1111.0644 + 4759.6444j
    none_type_0 = None
    validation_0 = module_0.Validation(complex_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_maybe()
    var_2 = var_1.__eq__(complex_0)
    var_2.to_either()


def test_case_12():
    none_type_0 = None
    bytes_0 = b"\x1db\xf3\\h\xc9\x8c\n3\x8c\xa0\xe1\xb7\x9e"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_try()
    var_0.ap(none_type_0)


def test_case_13():
    bytes_0 = b"\x036\x87lAIde\x99\xad\x1d\xcf\xae\x1e\x1a"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_maybe()


def test_case_14():
    str_0 = "\x0b&> \n5y2\\+azxL"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, str_0)
    validation_1 = module_0.Validation(none_type_0, validation_0)
    var_0 = validation_0.__eq__(validation_1)
    validation_1.to_either()


def test_case_15():
    str_0 = "\x0b&> \n5y2\\+azxL"
    none_type_0 = None
    set_0 = set()
    validation_0 = module_0.Validation(none_type_0, set_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.to_maybe()
    var_2 = validation_0.to_try()
    validation_1 = module_0.Validation(var_0, validation_0)
    validation_2 = module_0.Validation(var_2, str_0)
    var_3 = validation_2.__eq__(var_2)
    var_3.to_either()


def test_case_16():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.__str__()
    var_1.to_maybe()


def test_case_17():
    str_0 = "\x0b&> \n5y2\\+azxL"
    none_type_0 = None
    set_0 = set()
    validation_0 = module_0.Validation(none_type_0, set_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.to_maybe()
    var_2 = validation_0.to_try()
    var_3 = validation_0.to_either()
    validation_1 = module_0.Validation(var_0, validation_0)
    validation_2 = module_0.Validation(var_2, str_0)
    var_4 = validation_2.__eq__(var_2)
    var_4.to_either()
