# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bool_0 = False
    str_0 = "\n        Take mapper function and returns result of them called with Right value.\n\n        :param mapper: function to apply on Right value\n        :type mapper: Function(A) -> Either[B]\n        :returns: result of mapper\n        :rtype: Either[B]\n        "
    validation_0 = module_0.Validation(bool_0, str_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.__eq__(bool_0)


def test_case_1():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.__str__()
    var_0.to_either()


def test_case_2():
    str_0 = "YE(!*/u+h,{l<q@'\t4"
    str_1 = "N#%'8R"
    validation_0 = module_0.Validation(str_0, str_1)
    var_0 = validation_0.to_either()
    var_0.is_fail()


def test_case_3():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_4():
    bool_0 = True
    str_0 = "\n        Take mapper function and returns result of them called with Right value.\n\n        :param mapper: function to apply on Right value\n        :type mapper: Function(A) -> Either[B]\n        :returns: result of mapper\n        :rtype: Either[B]\n        "
    validation_0 = module_0.Validation(bool_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.map(str_0)


def test_case_5():
    bool_0 = False
    str_0 = "\n        Take mapper function and returns result of them called with Right value.\n\n        :param mapper: function to apply on Right value\n        :type mapper: Function(A) -> Either[B]\n        :returns: result of mapper\n        :rtype: Either[B]\n        "
    validation_0 = module_0.Validation(bool_0, str_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.__eq__(bool_0)
    var_2 = validation_0.is_fail()


def test_case_6():
    bool_0 = False
    bool_1 = True
    set_0 = {bool_0, bool_1}
    str_0 = "yW:$&k!VJ\r<O<C`R"
    set_1 = {str_0, str_0, str_0, str_0}
    validation_0 = module_0.Validation(set_1, str_0)
    validation_0.map(set_0)


def test_case_7():
    str_0 = "3cy%"
    validation_0 = module_0.Validation(str_0, str_0)
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    validation_1.bind(validation_0)


def test_case_8():
    bool_0 = False
    tuple_0 = (bool_0,)
    list_0 = [tuple_0, tuple_0, bool_0, tuple_0]
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    validation_0.ap(list_0)


def test_case_9():
    bool_0 = False
    str_0 = "\n        Take mapper function and returns result of them called with Right value.\n\n        :param mapper: function to apply on Right value\n        :type mapper: Function(A) -> Either[B]\n        :returns: result of mapper\n        :rtype: Either[B]\n        "
    validation_0 = module_0.Validation(bool_0, str_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.__eq__(bool_0)
    none_type_0 = None
    var_2 = var_0.__eq__(none_type_0)
    var_3 = validation_0.to_box()
    var_1.bind(str_0)


def test_case_10():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_box()
    var_1.to_box()


def test_case_11():
    bool_0 = False
    none_type_0 = None
    validation_0 = module_0.Validation(bool_0, none_type_0)
    validation_0.to_try()


def test_case_12():
    bool_0 = False
    str_0 = "\n        Take mapper function and returns result of them called with Right value.\n\n        :param mapper: function to apply on Right value\n        :type mapper: Function(A) -> Either[B]\n        :returns: result of mapper\n        :rtype: Either[B]\n        "
    validation_0 = module_0.Validation(bool_0, str_0)
    var_0 = validation_0.__eq__(validation_0)
    var_0.map(str_0)


def test_case_13():
    bool_0 = False
    str_0 = "\n        Take mapper function and returns result of them called with Right value.\n\n        :param mapper: function to apply on Right value\n        :type mapper: Function(A) -> Either[B]\n        :returns: result of mapper\n        :rtype: Either[B]\n        "
    validation_0 = module_0.Validation(bool_0, str_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.__eq__(bool_0)
    var_2 = validation_0.__str__()
    var_0.map(str_0)


def test_case_14():
    str_0 = ""
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.to_either()
    var_2 = var_1.__str__()


def test_case_15():
    bool_0 = False
    str_0 = "\n        Take mapper function and returns result of them called with Right value.\n\n        :param mapper: function to apply on Right value\n        :type mapper: Function(A) -> Either[B]\n        :returns: result of mapper\n        :rtype: Either[B]\n        "
    validation_0 = module_0.Validation(bool_0, str_0)
    validation_1 = module_0.Validation(str_0, bool_0)
    var_0 = validation_0.__eq__(validation_1)
    var_0.is_success()
