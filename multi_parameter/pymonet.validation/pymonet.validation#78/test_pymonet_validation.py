# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    str_0 = "\n        Transform Either into Validation.\n\n        :returns: successfull Validation monad with previous value\n        :rtype: Validation[A, []]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    validation_1 = module_0.Validation(var_0, str_0)
    none_type_0 = None
    validation_2 = module_0.Validation(validation_0, none_type_0)
    var_1 = validation_1.__eq__(var_0)
    var_2 = validation_0.to_either()
    list_0 = []
    list_1 = [list_0, list_0, list_0, list_0]
    validation_3 = module_0.Validation(list_1, list_0)
    var_1.bind(validation_1)


def test_case_1():
    bytes_0 = b"\xb5\xe1\xa7"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.is_fail()
    var_1.to_either()


def test_case_2():
    bytes_0 = b"\x8f`\x1c\xe5\xd8\x9f\x19>\xd0k\x90"
    set_0 = {bytes_0, bytes_0}
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_either()
    var_0.map(set_0)


def test_case_3():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_maybe()


def test_case_4():
    bytes_0 = b"W\x85b\xdf\x0c\xe2\x0e"
    validation_0 = module_0.Validation(bytes_0, bytes_0)


def test_case_5():
    bytes_0 = b"w"
    none_type_0 = None
    none_type_1 = None
    validation_0 = module_0.Validation(bytes_0, none_type_1)
    validation_0.map(none_type_0)


def test_case_6():
    str_0 = "t+"
    set_0 = {str_0}
    bytes_0 = b"W\x85b\xdf\x0c\xe2\x0e"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_0.bind(set_0)


def test_case_7():
    none_type_0 = None
    bytes_0 = b";\x83Y\x04XRt\xc1C\xfb,r,\x08\x92\xd5\xa2\xcb\xe3"
    set_0 = {bytes_0}
    validation_0 = module_0.Validation(set_0, none_type_0)
    validation_0.ap(none_type_0)


def test_case_8():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.to_try()
    var_2 = var_1.__str__()
    var_2.to_lazy()


def test_case_9():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_lazy()


def test_case_10():
    bool_0 = False
    none_type_0 = None
    validation_0 = module_0.Validation(bool_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_either()
    validation_0.bind(var_0)


def test_case_11():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.to_try()


def test_case_12():
    none_type_0 = None
    bytes_0 = b"\xa1\x0e\x00\x1b2"
    validation_0 = module_0.Validation(none_type_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    int_0 = 1
    validation_1 = module_0.Validation(int_0, int_0)
    var_1 = validation_0.is_success()
    validation_1.map(dict_0)


def test_case_13():
    str_0 = "\n        Transform Either into Validation.\n\n        :returns: successfull Validation monad with previous value\n        :rtype: Validation[A, []]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_maybe()
    validation_1 = module_0.Validation(var_1, str_0)
    none_type_0 = None
    validation_2 = module_0.Validation(validation_0, none_type_0)
    var_2 = validation_0.to_either()
    list_0 = []
    var_3 = validation_1.to_try()
    var_4 = validation_1.__eq__(validation_2)
    var_5 = validation_0.to_try()
    var_6 = validation_2.__eq__(list_0)
    var_3.to_either()


def test_case_14():
    bytes_0 = b""
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, bytes_0)
    var_0 = validation_0.__eq__(none_type_0)
    var_1 = validation_0.__str__()
    var_2 = validation_0.is_fail()
    validation_0.map(var_1)
