# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.to_box()
    list_0 = [validation_0, var_1]
    var_2 = validation_0.__eq__(list_0)
    var_3 = validation_0.to_lazy()


def test_case_1():
    str_0 = "\n    Last is a Monoidtat will always return the lastest, value when 2 Last instin7es are combined.\n    "
    validation_0 = module_0.Validation(str_0, str_0)


def test_case_2():
    int_0 = -291
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.to_either()


def test_case_3():
    int_0 = -3963
    bool_0 = True
    validation_0 = module_0.Validation(int_0, bool_0)
    validation_0.is_fail()


def test_case_4():
    bytes_0 = b'"\xb95\xdal\xbfc\xdb\xf1K'
    list_0 = [bytes_0, bytes_0, bytes_0]
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.__eq__(list_0)
    validation_0.map(bytes_0)


def test_case_5():
    bool_0 = False
    bool_1 = True
    dict_0 = {bool_1: bool_1}
    validation_0 = module_0.Validation(dict_0, bool_1)
    validation_0.bind(bool_0)


def test_case_6():
    dict_0 = {}
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.ap(dict_0)


def test_case_7():
    bool_0 = False
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.map(bool_0)


def test_case_8():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_box()
    var_2 = var_1.to_either()
    var_2.bind(none_type_0)


def test_case_9():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_try()
    var_1 = validation_0.__str__()
    var_0.ap(var_0)


def test_case_10():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.__str__()
    var_0.ap(var_0)


def test_case_11():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.__eq__(bool_0)
    var_1.to_try()


def test_case_12():
    none_type_0 = None
    bytes_0 = b"\x045\\O)C\xd3^\x16t\xb8\xcfxe\xe8j\x82P\xcd^"
    validation_0 = module_0.Validation(none_type_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_try()
    var_1.to_box()


def test_case_13():
    complex_0 = 1223.511 - 853.54j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    validation_0 = module_0.Validation(complex_0, list_0)
    var_0 = validation_0.__str__()
    none_type_0 = None
    float_0 = -1563.8
    validation_1 = module_0.Validation(none_type_0, list_0)
    validation_1.ap(float_0)


def test_case_14():
    bytes_0 = b"\xea\x03\xf1O\xf9\xaa}:\x05\n\xb3\x16F\xdf\x1es\xa5\xdc"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    validation_1 = module_0.Validation(bytes_0, bytes_0)
    var_1 = validation_1.to_either()
    var_1.to_either()


def test_case_15():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_maybe()
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    var_1 = var_0.__eq__(none_type_0)
    validation_1.to_try()


def test_case_16():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_1 = module_0.Validation(validation_0, validation_0)
    var_0 = validation_1.__eq__(validation_0)
    var_1 = validation_1.__eq__(validation_1)
    validation_1.to_try()
