# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    none_type_0 = None
    bytes_0 = b"\x04\x8d\xce\xb25tI6\x95\x95\x1f"
    none_type_1 = None
    validation_0 = module_0.Validation(bytes_0, none_type_1)
    var_0 = validation_0.__eq__(none_type_0)
    var_0.to_lazy()


def test_case_1():
    str_0 = "(u?D=iC`o{:W"
    bool_0 = False
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_try()
    tuple_0 = (str_0, bool_0, dict_0)
    validation_1 = module_0.Validation(tuple_0, dict_0)
    var_1 = validation_1.__str__()
    var_2 = validation_0.to_lazy()
    validation_1.map(var_1)


def test_case_2():
    str_0 = "\n        Take mapper function and return value of Left.\n\n        :returns: Stored value\n        :rtype: A\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(str_0)
    var_1 = validation_0.__str__()
    var_2 = var_0.__eq__(var_0)
    var_3 = validation_0.to_maybe()
    var_4 = validation_0.to_lazy()
    var_5 = var_0.__str__()
    var_6 = validation_0.to_try()
    var_7 = validation_0.to_lazy()
    var_8 = var_1.__eq__(var_7)
    var_8.to_either()


def test_case_3():
    none_type_0 = None
    float_0 = 657.74588
    set_0 = {float_0, float_0, float_0}
    str_0 = "\n    In mathematics, a semigroup is an algebraic structure\n    consisting of a set together with an associative binary operation.\n    A semigroup generalizes a monoid in that there might not exist an identity element.\n    It also (originally) generalized a group (a monoid with all inverses)\n    to a type where every element did not have to have an inverse, this the name semigroup.\n    "
    bytes_0 = b'\x17e"\xc40\xe1\xfas3\xfb+\xfb\xe3\x8cMQB'
    tuple_0 = (float_0, float_0, bytes_0)
    set_1 = set()
    tuple_1 = (set_0, str_0, tuple_0, set_1)
    dict_0 = {float_0: float_0, float_0: tuple_1}
    validation_0 = module_0.Validation(dict_0, set_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.bind(none_type_0)
    var_1.is_success()


def test_case_4():
    int_0 = -3812
    validation_0 = module_0.Validation(int_0, int_0)


def test_case_5():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_0.__str__()


def test_case_6():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.is_fail()


def test_case_7():
    none_type_0 = None
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_0.map(none_type_0)


def test_case_8():
    int_0 = 1049
    tuple_0 = ()
    set_0 = {tuple_0}
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_either()
    validation_0.bind(int_0)


def test_case_9():
    tuple_0 = ()
    bytes_0 = b"\x0b"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, tuple_0)
    validation_0.ap(bytes_0)


def test_case_10():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.to_lazy()
    var_1.to_lazy()


def test_case_11():
    int_0 = -2916
    validation_0 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_lazy()
    validation_0.map(var_1)


def test_case_12():
    str_0 = "wV1N"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(str_0)
    var_1 = validation_0.to_either()
    var_2 = var_1.__eq__(var_0)
    var_3 = validation_0.to_maybe()
    var_4 = validation_0.to_box()
    var_5 = validation_0.to_lazy()
    var_6 = var_0.__str__()
    var_7 = validation_0.to_try()
    var_8 = validation_0.to_lazy()
    var_9 = var_5.ap(var_7)
    var_10 = var_1.__eq__(var_4)
    var_11 = var_4.to_either()
    var_12 = var_8.to_try()
    validation_1 = module_0.Validation(var_5, var_7)
    var_0.to_either()


def test_case_13():
    bool_0 = True
    none_type_0 = None
    validation_0 = module_0.Validation(bool_0, none_type_0)
    validation_0.to_try()


def test_case_14():
    str_0 = ""
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(str_0)
    var_1 = validation_0.__str__()
    var_2 = var_0.__eq__(var_0)
    var_3 = validation_0.to_maybe()
    var_4 = validation_0.to_box()
    var_5 = var_3.to_lazy()
    var_6 = var_5.__str__()
    var_7 = var_4.to_try()
    var_0.to_lazy()


def test_case_15():
    str_0 = ""
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_either()
    var_2 = str_0.__eq__(str_0)
    var_3 = var_1.to_maybe()
    var_4 = var_3.to_box()
    var_0.to_lazy()


def test_case_16():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    str_0 = "\n        Take mapper function and return value of Left.\n\n        :returns: Stored value\n        :rtype: A\n        "
    validation_1 = module_0.Validation(str_0, str_0)
    var_0 = validation_1.to_box()
    var_1 = validation_0.to_lazy()
    var_2 = var_0.to_try()
    var_3 = var_0.ap(var_1)
    var_4 = validation_0.__eq__(validation_1)
    validation_0.to_either()
