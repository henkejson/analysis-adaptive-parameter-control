# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bytes_0 = b"\x04\xed\xf1\xd4\xb8\xee\xaas.B\x884\xb5Y"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.__eq__(validation_0)
    int_0 = 1536
    validation_1 = module_0.Validation(int_0, bytes_0)
    validation_1.map(var_1)


def test_case_1():
    bytes_0 = b"\x04\xed\xf1\xd4\xb8\xee\xaas.B\x884\xb5Y"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.__eq__(var_0)
    int_0 = 1536
    validation_1 = module_0.Validation(var_0, var_1)
    var_2 = validation_0.to_try()
    validation_1.ap(int_0)


def test_case_2():
    bytes_0 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_either()
    var_2 = validation_0.__eq__(validation_0)
    int_0 = 1536
    validation_1 = module_0.Validation(int_0, var_0)
    var_2.to_try()


def test_case_3():
    bytes_0 = b"\x04\xed\xf1\xd4\xb8\xee\xaas.B\x884\xb5Y"
    int_0 = 0
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_either()
    var_2 = validation_0.__eq__(var_1)
    validation_1 = module_0.Validation(var_1, var_2)
    var_3 = var_1.ap(validation_0)
    validation_2 = module_0.Validation(int_0, bytes_0)


def test_case_4():
    str_0 = "gZD]O~/?N+EnA"
    str_1 = "H)dYI_OS\nG4&f ``E[2^"
    validation_0 = module_0.Validation(str_0, str_1)
    var_0 = validation_0.to_either()


def test_case_5():
    bytes_0 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.__str__()
    var_1.to_maybe()


def test_case_6():
    str_0 = "\n        Take function (A) -> b and applied this function on current box value and returns new box with mapped value.\n\n        :param mapper: mapper function\n        :type mapper: Function(A) -> B\n        :returns: new box with mapped value\n        :rtype: Box[B]\n        "
    validation_0 = module_0.Validation(str_0, str_0)


def test_case_7():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.to_either()


def test_case_8():
    str_0 = "O$\x0c"
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.is_fail()
    var_0.bind(str_0)


def test_case_9():
    str_0 = "r^\x0cCRuPc&}p\x0c@"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.bind(str_0)


def test_case_10():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.to_box()
    validation_0.map(none_type_0)


def test_case_11():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_try()


def test_case_12():
    bytes_0 = b"\x04\xed\xf1\xd4\xb8\xee\xaas.B\x884\xb5Y"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.__eq__(validation_0)
    int_0 = 1536
    validation_1 = module_0.Validation(int_0, bytes_0)
    var_2 = validation_0.to_maybe()
    validation_1.map(var_1)


def test_case_13():
    bytes_0 = b""
    int_0 = 0
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_either()
    validation_1 = module_0.Validation(var_1, int_0)
    var_2 = validation_0.__eq__(validation_1)
    validation_2 = module_0.Validation(var_2, var_0)
    var_0.to_maybe()
