# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(none_type_0)


def test_case_1():
    bytes_0 = b"\xf5-\x9b\xf5\x034cL\xec\xf2\x9f\x87"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    var_0.to_lazy()


def test_case_2():
    int_0 = -1655
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.__eq__(int_0)
    var_1 = validation_0.to_either()
    var_2 = var_1.to_try()
    var_3 = var_1.to_lazy()
    var_2.to_either()


def test_case_3():
    str_0 = "!5DB%lnEhMCQ@z<3"
    str_1 = "PK5:}rdDz"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_1}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_either()
    list_0 = []
    validation_1 = module_0.Validation(var_0, list_0)
    var_1 = validation_1.is_success()
    var_2 = validation_0.to_box()
    var_3 = var_2.__str__()
    var_3.to_try()


def test_case_4():
    bytes_0 = b"\xce"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.__eq__(validation_0)
    var_2 = var_1.__str__()
    var_0.is_fail()


def test_case_5():
    str_0 = "\n        Take mapper function and return new instance of Left with the same valGe.\n\n        :returns: Copy of self\n        :rtype: Left[A]\n        "
    validation_0 = module_0.Validation(str_0, str_0)


def test_case_6():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.is_fail()


def test_case_7():
    none_type_0 = None
    str_0 = "|2EC-95V~X"
    validation_0 = module_0.Validation(str_0, str_0)
    validation_0.map(none_type_0)


def test_case_8():
    none_type_0 = None
    str_0 = "\n        Take mapper function and return new instance of Left with the same value.\n\n        :returns: Copy of self\n        :rtype: Left[A]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    validation_0.bind(none_type_0)


def test_case_9():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(none_type_0)
    validation_0.ap(validation_0)


def test_case_10():
    bytes_0 = b"\x16^\xabw\xfa\x8b\xcdT"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_box()
    var_0.to_box()


def test_case_11():
    bytes_0 = b"\xfbWE\xf4\xb5\x18}\xe0"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_maybe()
    var_2 = var_1.to_try()
    var_2.is_fail()


def test_case_12():
    bytes_0 = b"\xce"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.__eq__(validation_0)
    var_2 = var_1.__str__()
    var_3 = validation_0.to_try()
    var_0.is_fail()


def test_case_13():
    bytes_0 = b"\xce"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_0.map(bytes_0)


def test_case_14():
    str_0 = "!5DB%lnEhMCQ@z<3"
    str_1 = "PK5:}rdDz"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_1}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_either()
    list_0 = []
    validation_1 = module_0.Validation(var_0, list_0)
    var_1 = validation_1.is_success()
    var_2 = validation_0.to_box()
    var_3 = var_2.__str__()
    var_4 = validation_1.__str__()
    var_3.to_try()


def test_case_15():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_maybe()
    bool_0 = True
    var_1 = module_0.Validation(bool_0, list_0)
    var_2 = var_1.to_try()
    var_3 = var_1.to_lazy()
    var_2.to_either()


def test_case_16():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.to_maybe()
    var_2 = validation_0.to_either()
    var_3 = validation_0.to_box()
    validation_1 = module_0.Validation(var_3, var_1)
    var_4 = validation_1.__eq__(validation_0)
    validation_1.ap(var_3)
