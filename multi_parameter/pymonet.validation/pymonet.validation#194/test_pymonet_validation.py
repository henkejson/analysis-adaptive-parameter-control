# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0
import builtins as module_1


def test_case_0():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(none_type_0)
    validation_0.to_either()


def test_case_1():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.__str__()
    var_2 = validation_0.__str__()
    var_2.to_maybe()


def test_case_2():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    bytes_0 = b""
    list_0 = [bytes_0, bytes_0, bytes_0]
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.__str__()
    var_1 = var_0.__eq__(dict_0)
    var_1.is_fail()


def test_case_3():
    bytes_0 = b"M\xed\xd2Z \xb0R\x02\x1c\xef\xf1\x84W\xae\x0b"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()


def test_case_4():
    bool_0 = True
    var_0 = module_0.Validation(bool_0, bool_0)


def test_case_5():
    bytes_0 = b"B_0d%\xac\xa5<E\x03\xee+c\x1d\xec\xc7\xa1\x0c\xa5"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_try()


def test_case_6():
    bytes_0 = b"\x8f%\x1e7\x0e\\3"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.is_fail()
    var_0.to_try()


def test_case_7():
    bool_0 = True
    str_0 = "8?\\"
    validation_0 = module_0.Validation(str_0, str_0)
    validation_0.map(bool_0)


def test_case_8():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    none_type_0 = None
    validation_0.bind(none_type_0)


def test_case_9():
    complex_0 = 153.7897 + 1503.04j
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.ap(complex_0)


def test_case_10():
    complex_0 = 1985.55914 - 295.46667j
    validation_0 = module_0.Validation(complex_0, complex_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.__eq__(complex_0)
    validation_0.ap(var_0)


def test_case_11():
    float_0 = 2243.444
    set_0 = {float_0, float_0, float_0}
    bool_0 = False
    set_1 = set()
    none_type_0 = None
    validation_0 = module_0.Validation(set_1, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.__eq__(bool_0)
    var_1.map(set_0)


def test_case_12():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.__eq__(none_type_0)
    var_2 = var_0.to_either()
    var_3 = var_0.__str__()
    var_1.bind(validation_0)


def test_case_13():
    str_0 = "\n    Return the first element of the list which matches the keys, or None if no element matches.\n\n    :param collection: collection to search\n    :type collection: List[A]\n    :param key: function to decide witch element should be found\n    :type key: Function(A) -> Boolean\n    :returns: element of collection or None\n    :rtype: A | None\n    "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    int_0 = 1
    validation_1 = module_0.Validation(int_0, int_0)
    validation_1.is_success()


def test_case_14():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(validation_0)
    module_1.object(**var_0)


def test_case_15():
    bytes_0 = b""
    list_0 = [bytes_0]
    validation_0 = module_0.Validation(list_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_lazy()
    validation_0.bind(var_1)


def test_case_16():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_1 = module_0.Validation(validation_0, validation_0)
    var_0 = validation_0.__eq__(validation_1)
    var_1 = validation_0.__eq__(validation_0)
    validation_1.__str__()


def test_case_17():
    float_0 = 425.4
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_maybe()
    var_0.map(float_0)
