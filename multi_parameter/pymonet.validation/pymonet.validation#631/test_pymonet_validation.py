# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bytes_0 = b"\xf2\xf4p\x98\x93\xcf\x18I\xb1"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_box()
    var_1.to_box()


def test_case_1():
    bytes_0 = b"/CQYx`b\x15\xa8"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, bytes_0)
    bool_0 = False
    validation_1 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_1.to_lazy()
    var_1 = validation_1.__eq__(none_type_0)
    var_2 = var_1.__eq__(bool_0)
    var_1.map(bool_0)


def test_case_2():
    str_0 = "FU!LN+_xMpWJ)8QKU"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    var_0.to_box()


def test_case_3():
    int_0 = -513
    str_0 = "\tz \x0cAF5}su"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.to_either()
    var_2 = var_1.to_box()
    validation_1 = module_0.Validation(str_0, str_0)
    var_3 = validation_1.to_either()
    var_4 = var_3.map(int_0)


def test_case_4():
    str_0 = "-5%jsA=U"
    validation_0 = module_0.Validation(str_0, str_0)
    validation_1 = module_0.Validation(validation_0, str_0)
    var_0 = validation_1.to_maybe()
    var_1 = var_0.to_either()
    var_0.is_success()


def test_case_5():
    complex_0 = -749.513794 - 1435.5757j
    validation_0 = module_0.Validation(complex_0, complex_0)


def test_case_6():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.to_either()


def test_case_7():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.is_fail()


def test_case_8():
    bool_0 = True
    str_0 = "S}[\n"
    validation_0 = module_0.Validation(str_0, str_0)
    validation_0.map(bool_0)


def test_case_9():
    bytes_0 = b"\xf2\xf4p\x98\x93\xcf\x18I\xb1"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_0.bind(validation_0)


def test_case_10():
    bool_0 = True
    set_0 = {bool_0}
    validation_0 = module_0.Validation(set_0, set_0)
    validation_0.ap(bool_0)


def test_case_11():
    bool_0 = True
    int_0 = 0
    validation_0 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.to_box()
    var_0.map(bool_0)


def test_case_12():
    str_0 = "-5%jsA=U"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_maybe()
    var_2 = var_1.to_either()
    var_2.is_fail()


def test_case_13():
    float_0 = 1494.0
    list_0 = [float_0]
    validation_0 = module_0.Validation(list_0, float_0)
    validation_0.to_try()


def test_case_14():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.to_maybe()
    var_1.to_maybe()


def test_case_15():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.is_success()
    var_1 = validation_0.__eq__(list_0)
    bool_0 = True
    var_2 = validation_0.__str__()
    bytes_0 = b"Hg\xdd\xc5r\xe0\x1b\xe5\xfe\xed\xbat\x08"
    validation_1 = module_0.Validation(bytes_0, bytes_0)
    var_3 = validation_1.to_box()
    var_4 = var_0.__str__()
    var_4.map(bool_0)


def test_case_16():
    set_0 = set()
    int_0 = 1
    validation_0 = module_0.Validation(int_0, set_0)
    var_0 = validation_0.to_either()
    bool_0 = False
    bytes_0 = b"\xf9W\xba\x8aXD\xc1\xdd\xb0W\rc\x0f\xad.\xb2"
    str_0 = ""
    bool_1 = True
    tuple_0 = (bytes_0, str_0, str_0, bool_1)
    list_0 = [bool_0, bool_0, tuple_0, tuple_0]
    validation_1 = module_0.Validation(bool_0, list_0)
    validation_1.ap(int_0)


def test_case_17():
    bytes_0 = b"\xf2\xf4p\x98\x93\xcf\x18I\xb1"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_1 = module_0.Validation(bytes_0, validation_0)
    var_0 = validation_0.__eq__(validation_1)
    var_1 = validation_0.to_lazy()
    var_2 = var_1.__str__()
    var_3 = var_1.to_box()
    var_3.to_box()
