# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    none_type_0 = None
    tuple_0 = ()
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(tuple_0)
    var_0.to_maybe()


def test_case_1():
    str_0 = ",[n /mceO>RKV"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()


def test_case_2():
    str_0 = "\n    First is a Monoid that will always return the first, value when 2 First instances are combined.\n    "
    validation_0 = module_0.Validation(str_0, str_0)


def test_case_3():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.is_success()


def test_case_4():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.is_fail()


def test_case_5():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    str_0 = "\n    First is a Monoid that will always return the first, value when 2 First instances are combined.\n    "
    validation_0 = module_0.Validation(str_0, str_0)
    validation_0.map(tuple_0)


def test_case_6():
    int_0 = -319
    dict_0 = {int_0: int_0}
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    validation_0.bind(dict_0)


def test_case_7():
    bool_0 = True
    bytes_0 = b"\xf8\xa5\xc7\x8e\xad\xfa\x9c\xcb\xf2[#"
    validation_0 = module_0.Validation(bytes_0, bool_0)
    validation_0.ap(bool_0)


def test_case_8():
    str_0 = ",[n /mceO>RKV"
    bool_0 = False
    validation_0 = module_0.Validation(str_0, bool_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.to_lazy()
    validation_1 = module_0.Validation(bool_0, var_0)
    var_2 = validation_1.__eq__(validation_0)
    validation_1.to_either()


def test_case_9():
    bool_0 = False
    str_0 = '@0M2p~XFL"u&$nx'
    validation_0 = module_0.Validation(bool_0, str_0)
    validation_1 = module_0.Validation(str_0, str_0)
    var_0 = validation_1.to_lazy()
    var_1 = var_0.bind(bool_0)
    var_2 = var_1.__str__()
    var_3 = var_2.__str__()


def test_case_10():
    str_0 = ",[n /mceO>RKV"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_lazy()
    validation_1 = module_0.Validation(var_0, str_0)
    var_1 = validation_1.__eq__(validation_0)
    var_2 = var_0.to_either()
    var_1.to_lazy()


def test_case_11():
    str_0 = "g:9?\x0c>?@NCWGW\x0b3% i"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_try()
    var_0.is_fail()


def test_case_12():
    str_0 = ",[n /mceO>RKV"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_either()


def test_case_13():
    none_type_0 = None
    list_0 = []
    validation_0 = module_0.Validation(none_type_0, list_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.__eq__(var_0)
    var_2 = var_0.to_maybe()
    var_3 = validation_0.to_maybe()
    var_4 = var_3.to_try()
    var_3.map(var_2)


def test_case_14():
    none_type_0 = None
    str_0 = "g:9?\x0c>?@NCWGW\x0b3% i"
    validation_0 = module_0.Validation(none_type_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_maybe()
    var_2 = none_type_0.__str__()
    var_2.to_lazy()


def test_case_15():
    none_type_0 = None
    list_0 = []
    validation_0 = module_0.Validation(none_type_0, list_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.__eq__(var_0)
    var_2 = var_0.to_maybe()
    var_3 = validation_0.to_maybe()
    var_4 = var_3.to_try()
    var_3.map(var_2)


def test_case_16():
    str_0 = "/ocZ]<iLuc#Jr[U\x0bl"
    set_0 = set()
    validation_0 = module_0.Validation(str_0, set_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.__str__()
    var_1.to_maybe()
