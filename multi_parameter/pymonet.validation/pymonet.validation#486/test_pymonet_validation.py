# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    none_type_0 = None
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(none_type_0)
    var_0.to_maybe()


def test_case_1():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.__str__()
    var_0.bind(tuple_0)


def test_case_2():
    bytes_0 = b"6\xd4\xd6\xe2"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.__str__()
    var_1.to_try()


def test_case_3():
    int_0 = 0
    list_0 = [int_0, int_0, int_0, int_0]
    validation_0 = module_0.Validation(int_0, list_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_either()


def test_case_4():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)


def test_case_5():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.is_fail()


def test_case_6():
    int_0 = 0
    tuple_0 = (int_0,)
    bool_0 = False
    tuple_1 = (bool_0,)
    validation_0 = module_0.Validation(tuple_1, tuple_1)
    validation_0.map(tuple_0)


def test_case_7():
    set_0 = set()
    bool_0 = True
    set_1 = {bool_0, bool_0, bool_0}
    validation_0 = module_0.Validation(bool_0, set_1)
    validation_0.bind(set_0)


def test_case_8():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.ap(validation_0)


def test_case_9():
    complex_0 = -918.9119 + 1827.3j
    none_type_0 = None
    validation_0 = module_0.Validation(complex_0, none_type_0)
    var_0 = validation_0.to_box()
    var_0.is_success()


def test_case_10():
    none_type_0 = None
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(none_type_0)
    var_1 = validation_0.to_lazy()


def test_case_11():
    none_type_0 = None
    str_0 = "\n        Take function Function(A) -> B and returns new Lazy with mapped result of Lazy constructor function.\n        Both mapper end constructor will be called only during calling fold method.\n\n        :param mapper: mapper function\n        :type mapper: Function(A) -> B\n        :returns: Lazy with mapped value\n        :rtype: Lazy[Function() -> B)]\n        "
    list_0 = [str_0, str_0, str_0, str_0]
    validation_0 = module_0.Validation(none_type_0, list_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_either()
    var_1.map(none_type_0)


def test_case_12():
    tuple_0 = ()
    int_0 = 3704
    validation_0 = module_0.Validation(tuple_0, int_0)
    validation_0.to_try()


def test_case_13():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_maybe()


def test_case_14():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, validation_0)
    var_0 = validation_1.__eq__(validation_0)
    var_1 = validation_0.to_maybe()


def test_case_15():
    int_0 = 1489
    list_0 = [int_0, int_0, int_0, int_0]
    validation_0 = module_0.Validation(int_0, list_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_either()
    var_2 = validation_0.__str__()
    var_2.to_lazy()


def test_case_16():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_either()
    var_0.to_either()
