# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0
import builtins as module_1


def test_case_0():
    int_0 = 1854
    validation_0 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.__eq__(validation_0)


def test_case_1():
    bytes_0 = b"\xfd\xa3;\xad+\x8d\xfa"
    bytes_1 = b"\xd7\x9d\xb7\x16"
    validation_0 = module_0.Validation(bytes_1, bytes_1)
    var_0 = validation_0.__eq__(bytes_0)
    list_0 = [validation_0]
    var_1 = validation_0.to_maybe()
    var_0.bind(list_0)


def test_case_2():
    object_0 = module_1.object()
    bytes_0 = b"\x99P\xc6\xe7m"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.__eq__(object_0)
    var_1.to_box()


def test_case_3():
    int_0 = 1854
    validation_0 = module_0.Validation(int_0, int_0)


def test_case_4():
    int_0 = 1854
    validation_0 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_0.to_maybe()


def test_case_5():
    float_0 = 2691.0
    validation_0 = module_0.Validation(float_0, float_0)
    validation_0.is_fail()


def test_case_6():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_box()
    dict_0 = {bool_0: bool_0, bool_0: validation_0}
    validation_1 = module_0.Validation(validation_0, dict_0)
    var_0.ap(validation_1)


def test_case_7():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.bind(none_type_0)


def test_case_8():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.ap(bool_0)


def test_case_9():
    int_0 = 1854
    validation_0 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_lazy()
    var_2 = var_1.__eq__(var_0)
    var_2.is_success()


def test_case_10():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_try()
    var_2 = var_1.__str__()
    var_2.to_either()


def test_case_11():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.to_try()


def test_case_12():
    int_0 = 1854
    none_type_0 = None
    list_0 = []
    validation_0 = module_0.Validation(int_0, list_0)
    var_0 = validation_0.__eq__(none_type_0)
    var_1 = var_0.__str__()
    var_2 = validation_0.to_either()
    var_0.is_success()


def test_case_13():
    int_0 = 1854
    list_0 = []
    validation_0 = module_0.Validation(int_0, list_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_either()
    var_2 = validation_0.is_success()
    var_3 = var_0.__eq__(var_0)
    var_3.is_fail()


def test_case_14():
    bytes_0 = b"\xfd\xa3;\xad+\x8d\xfa"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    bytes_1 = b"\xd7\x9d\xb7\x16"
    validation_1 = module_0.Validation(bytes_1, bytes_1)
    var_0 = validation_1.__eq__(validation_1)
    list_0 = []
    var_1 = validation_0.__str__()
    var_1.bind(list_0)


def test_case_15():
    int_0 = 1854
    list_0 = [int_0, int_0]
    validation_0 = module_0.Validation(int_0, list_0)
    var_0 = validation_0.to_either()
    validation_0.map(int_0)


def test_case_16():
    int_0 = 1854
    none_type_0 = None
    list_0 = []
    validation_0 = module_0.Validation(int_0, list_0)
    var_0 = validation_0.__eq__(none_type_0)
    var_1 = validation_0.to_maybe()
    var_2 = var_0.__str__()
    var_3 = validation_0.to_either()
    var_2.to_try()


def test_case_17():
    bytes_0 = b"\xfd\xa3;\xad+\x8d\xfa"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    bytes_1 = b"\xd7\x9d\xb7\x16"
    validation_1 = module_0.Validation(bytes_1, bytes_1)
    var_0 = validation_1.__eq__(validation_1)
    list_0 = []
    var_1 = validation_1.to_maybe()
    var_2 = var_1.bind(list_0)
    var_3 = validation_1.is_success()
    var_4 = validation_1.to_maybe()
    var_5 = validation_1.to_either()
    var_6 = validation_1.__eq__(validation_0)
    validation_1.map(var_2)
