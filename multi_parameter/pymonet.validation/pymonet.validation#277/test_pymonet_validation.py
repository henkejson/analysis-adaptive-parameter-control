# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    none_type_0 = None
    none_type_1 = None
    float_0 = 2978.71
    validation_0 = module_0.Validation(float_0, float_0)
    var_0 = validation_0.__eq__(none_type_1)
    var_0.ap(none_type_0)


def test_case_1():
    bytes_0 = b"\x8ci\x84\x070\x1c\xd0\t"
    tuple_0 = (bytes_0,)
    list_0 = [tuple_0, bytes_0]
    validation_0 = module_0.Validation(list_0, bytes_0)
    var_0 = validation_0.__str__()
    var_0.is_fail()


def test_case_2():
    bool_0 = True
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    list_0 = [validation_0]
    validation_1 = module_0.Validation(validation_0, list_0)
    var_0 = validation_1.to_maybe()
    var_1 = var_0.to_box()
    validation_2 = module_0.Validation(bool_0, var_1)
    var_2 = validation_2.__eq__(bool_0)


def test_case_3():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_4():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    validation_0 = module_0.Validation(list_0, bool_0)
    validation_0.to_maybe()


def test_case_5():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.is_fail()


def test_case_6():
    int_0 = 1
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.map(int_0)


def test_case_7():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.bind(none_type_0)


def test_case_8():
    none_type_0 = None
    bool_0 = True
    validation_0 = module_0.Validation(none_type_0, bool_0)
    validation_0.ap(none_type_0)


def test_case_9():
    bool_0 = False
    none_type_0 = None
    validation_0 = module_0.Validation(bool_0, none_type_0)
    bytes_0 = b"\x8b"
    var_0 = validation_0.to_box()
    validation_1 = module_0.Validation(bytes_0, bytes_0)
    var_1 = validation_1.to_maybe()
    var_2 = var_1.to_box()
    var_0.bind(var_2)


def test_case_10():
    int_0 = -446
    str_0 = "2pp!@u\\z\t"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.ap(int_0)
    var_2 = var_1.to_try()
    var_2.is_success()


def test_case_11():
    str_0 = "[iFl4ZQU,2{UU-rYKO"
    set_0 = {str_0, str_0, str_0, str_0}
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_try()
    var_1.is_success()


def test_case_12():
    int_0 = 2413
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.to_try()


def test_case_13():
    bool_0 = False
    str_0 = "\n        Transform Lazy into not empty Maybe with constructor_fn result.\n\n        :returns: not empty Maybe monad with constructor_fn result\n        :rtype: Maybe[A]\n        "
    validation_0 = module_0.Validation(bool_0, str_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.to_either()
    var_2 = validation_0.__eq__(bool_0)
    bool_0.ap(bool_0)


def test_case_14():
    bool_0 = False
    none_type_0 = None
    validation_0 = module_0.Validation(bool_0, none_type_0)
    bytes_0 = b""
    var_0 = validation_0.to_box()
    validation_1 = module_0.Validation(bytes_0, bytes_0)
    var_1 = validation_1.__str__()
    str_0 = "tN :\nyQS"
    var_0.map(str_0)


def test_case_15():
    bool_0 = False
    str_0 = "\n        Transform Lazy into not empty Maybe with constructor_fn result.\n\n        :returns: not empty Maybe monad with constructor_fn result\n        :rtype: Maybe[A]\n        "
    var_0 = module_0.Validation(bool_0, str_0)
    var_1 = var_0.__eq__(var_0)
    var_2 = var_0.to_lazy()
    var_3 = var_2.bind(var_2)
    var_3.is_fail()


def test_case_16():
    complex_0 = -1460.734 - 163.8116j
    set_0 = {complex_0, complex_0, complex_0, complex_0}
    list_0 = [set_0, set_0, complex_0]
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.__eq__(list_0)
    var_1.to_either()


def test_case_17():
    bool_0 = False
    str_0 = "\n        Transform Lazy into not empty Maybe with constructor_fn result.\n\n        :returns: not empty Maybe monad with constructor_fn result\n        :rtype: Maybe[A]\n        "
    dict_0 = {str_0: str_0, bool_0: bool_0, str_0: str_0, bool_0: bool_0}
    tuple_0 = ()
    validation_0 = module_0.Validation(dict_0, tuple_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.to_box()
    var_2 = validation_0.to_either()
    str_1 = ""
    validation_0.map(str_1)


def test_case_18():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    str_0 = "\n        Transform Lazy into not empty Maybe with constructor_fn result.\n\n        :returns: not empty Maybe monad with constructor_fn result\n        :rtype: Maybe[A]\n        "
    validation_1 = module_0.Validation(bool_0, str_0)
    var_0 = validation_1.__eq__(validation_0)
    var_1 = validation_1.to_box()
    var_2 = validation_1.to_either()
    var_3 = validation_1.__eq__(bool_0)
    var_4 = validation_1.__eq__(validation_1)
    bool_0.ap(bool_0)
