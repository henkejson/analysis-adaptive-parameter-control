# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bool_0 = False
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.__eq__(bool_0)
    var_0.is_success()


def test_case_1():
    float_0 = -889.535618
    none_type_0 = None
    dict_0 = {
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        none_type_0: none_type_0,
    }
    validation_0 = module_0.Validation(none_type_0, dict_0)
    var_0 = validation_0.__str__()
    var_1 = var_0.__eq__(float_0)


def test_case_2():
    bool_0 = False
    list_0 = [bool_0]
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_lazy()
    var_1.to_lazy()


def test_case_3():
    bytes_0 = b"\xd5J\xb4?\t\xf0\xd4"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.map(bytes_0)
    var_2 = validation_0.__str__()
    var_3 = var_1.to_try()
    validation_1 = module_0.Validation(var_3, bytes_0)


def test_case_4():
    none_type_0 = None
    var_0 = none_type_0.__str__()


def test_case_5():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_6():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.__str__()


def test_case_7():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.is_fail()


def test_case_8():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(none_type_0)
    validation_0.map(none_type_0)


def test_case_9():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.bind(bool_0)


def test_case_10():
    str_0 = "\x0b"
    none_type_0 = None
    dict_0 = {none_type_0: none_type_0}
    validation_0 = module_0.Validation(none_type_0, dict_0)
    validation_0.ap(str_0)


def test_case_11():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.__eq__(none_type_0)
    validation_0.map(none_type_0)


def test_case_12():
    int_0 = -242
    validation_0 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.__str__()
    var_1.to_lazy()


def test_case_13():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_try()
    var_0.to_try()


def test_case_14():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_maybe()
    var_0.is_success()


def test_case_15():
    bytes_0 = b"\xd5J\xb4?\t\xf0\xd4"
    none_type_0 = None
    validation_0 = module_0.Validation(bytes_0, none_type_0)
    var_0 = validation_0.__eq__(none_type_0)
    var_1 = validation_0.__eq__(validation_0)
    var_1.is_success()


def test_case_16():
    str_0 = "Maybe[T]"
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, str_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.to_lazy()
    var_2 = var_1.to_maybe()
    var_3 = var_2.__str__()
    validation_1 = module_0.Validation(var_3, var_0)
    var_4 = validation_1.__eq__(validation_0)
    validation_0.map(validation_1)


def test_case_17():
    bool_0 = True
    str_0 = "K[7[1X83!Dz6e Ar&"
    tuple_0 = (str_0,)
    bytes_0 = b"\xe6\xf3\x04\x91v"
    dict_0 = {tuple_0: tuple_0, bytes_0: bool_0}
    validation_0 = module_0.Validation(bool_0, dict_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_lazy()
    var_2 = var_1.to_maybe()
    validation_1 = module_0.Validation(var_2, bool_0)
    bool_1 = False
    var_3 = var_1.__eq__(bool_1)
    var_3.is_success()


def test_case_18():
    bool_0 = False
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.__eq__(bool_0)
    var_1 = validation_0.to_maybe()
    var_2 = validation_0.__str__()
    var_0.map(var_2)


def test_case_19():
    bool_0 = True
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.__eq__(bool_0)
    var_1 = validation_0.to_either()
    var_2 = var_1.to_lazy()
    str_0 = "$O_2H:,~6~*L"
    validation_1 = module_0.Validation(var_1, var_0)
    validation_0.map(str_0)
