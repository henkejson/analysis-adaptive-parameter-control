# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bytes_0 = b" \x96&\xfb\xe5\x99BG\xb6\x91;"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    none_type_0 = None
    var_0 = validation_0.__eq__(none_type_0)


def test_case_1():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.__str__()
    var_0.to_box()


def test_case_2():
    complex_0 = -1387.1102624839843 + 2747.5197187066738j
    bytes_0 = b"[\xe2SU\xda\xaa\xf6\x93c\x11\x8c\xc4\xac"
    validation_0 = module_0.Validation(complex_0, bytes_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.to_either()
    var_2 = validation_0.to_maybe()


def test_case_3():
    bytes_0 = b"[\xe2SU\xda\xaa\xf6\x93c\x11\x8c\xc4\xac"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()


def test_case_4():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)


def test_case_5():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.is_fail()


def test_case_6():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.map(validation_0)


def test_case_7():
    bytes_0 = b"\xcb\xe3g\xc7["
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0}
    validation_0 = module_0.Validation(tuple_0, dict_0)
    validation_0.bind(bytes_0)


def test_case_8():
    int_0 = 1544
    str_0 = "WBsfu:Ja_d&"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_lazy()
    var_2 = var_1.to_try()
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, str_0)
    var_3 = validation_1.to_maybe()
    validation_2 = module_0.Validation(int_0, none_type_0)
    var_4 = validation_2.to_lazy()
    var_5 = validation_0.is_fail()
    validation_2.ap(var_2)


def test_case_9():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    str_0 = "\n        :param semigroup: other semigroup to concat\n        :type semigroup: Map[B]\n        :returns: new Map with concated all values\n        :rtype: Map[A]\n        "
    validation_0 = module_0.Validation(set_0, str_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.to_either()
    var_2 = var_1.to_lazy()
    var_3 = var_2.__str__()
    var_3.to_try()


def test_case_10():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.ap(none_type_0)
    var_2 = var_0.to_either()
    var_0.is_fail()


def test_case_11():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.to_try()


def test_case_12():
    int_0 = 284
    str_0 = "WBsfu:Ja_d&"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_lazy()
    var_2 = var_1.to_try()
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, str_0)
    var_3 = validation_1.to_maybe()
    validation_2 = module_0.Validation(int_0, str_0)
    bool_0 = True
    var_4 = validation_2.__eq__(bool_0)
    var_5 = validation_1.to_box()
    var_6 = validation_2.__eq__(str_0)
    validation_3 = module_0.Validation(int_0, int_0)
    bytes_0 = b"Q?4"
    validation_4 = module_0.Validation(none_type_0, bytes_0)
    var_7 = validation_2.to_maybe()
    validation_5 = module_0.Validation(int_0, var_3)
    var_8 = validation_0.__eq__(validation_4)
    var_4.to_box()


def test_case_13():
    none_type_0 = None
    list_0 = [none_type_0]
    validation_0 = module_0.Validation(none_type_0, list_0)
    var_0 = validation_0.__str__()
    var_0.to_box()


def test_case_14():
    complex_0 = -1388.3586 + 2747.352474j
    validation_0 = module_0.Validation(complex_0, complex_0)
    var_0 = validation_0.__eq__(validation_0)
    var_0.is_success()


def test_case_15():
    none_type_0 = None
    bool_0 = True
    bool_1 = False
    str_0 = ""
    tuple_0 = (bool_1, str_0)
    validation_0 = module_0.Validation(tuple_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.__eq__(bool_0)
    var_1.map(none_type_0)


def test_case_16():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.is_fail()
    none_type_0 = None
    bool_0 = True
    validation_1 = module_0.Validation(bool_0, none_type_0)
    validation_1.to_maybe()
