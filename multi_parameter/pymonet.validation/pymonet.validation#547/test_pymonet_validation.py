# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(none_type_0)


def test_case_1():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_2():
    str_0 = "\n        Transform Lazy into Box with constructor_fn result.\n\n        :returns: Box monad with constructor_fn result\n        :rtype: Box[A]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()


def test_case_3():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    validation_0 = module_0.Validation(tuple_0, bool_0)
    validation_0.is_fail()


def test_case_4():
    int_0 = 1
    str_0 = "\n        Returns first element of ImmutableList that passed\n        info argument returns True\n\n        :param fn: function to call with ImmutableList value\n        :type fn: Function(A) -> bool\n        :returns: A\n        "
    dict_0 = {str_0: str_0}
    list_0 = [dict_0, str_0, str_0]
    none_type_0 = None
    validation_0 = module_0.Validation(list_0, none_type_0)
    validation_0.map(int_0)


def test_case_5():
    str_0 = "\n        Transform Lazy into Box with constructor_fn result.\n\n        :returns: Box monad with constructor_fn result\n        :rtype: Box[A]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    validation_1 = module_0.Validation(var_0, var_0)
    validation_2 = module_0.Validation(validation_1, validation_1)
    validation_2.bind(validation_0)


def test_case_6():
    str_0 = '="'
    str_1 = "\n        Returns new ImmutableList with only this elements that passed\n        info argument returns True\n\n        :param fn: function to call with ImmutableList value\n        :type fn: Function(A) -> bool\n        :returns: ImmutableList[A]\n        "
    validation_0 = module_0.Validation(str_1, str_1)
    validation_0.ap(str_0)


def test_case_7():
    str_0 = "\n        Transform Lazy into Box with constructor_fn result.\n\n        :returns: Box monad with constructor_fn result\n        :rtype: Box[A]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    var_1 = validation_1.to_box()
    var_2 = var_1.__eq__(validation_0)


def test_case_8():
    str_0 = "\n        Transform Lazy into Box wi>h constructor_fn result.\n\n        :returns: Box monad with construcor_fn result\n        :rtype: Box[A]\n       "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.to_lazy()


def test_case_9():
    none_type_0 = None
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_try()
    var_1 = var_0.__eq__(none_type_0)


def test_case_10():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)


def test_case_11():
    tuple_0 = ()
    none_type_0 = None
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.__str__()
    var_2 = validation_0.to_box()
    var_0.ap(none_type_0)


def test_case_12():
    none_type_0 = None
    dict_0 = {none_type_0: none_type_0}
    validation_0 = module_0.Validation(none_type_0, dict_0)
    var_0 = validation_0.to_try()
    var_1 = validation_0.__str__()
    var_1.is_success()


def test_case_13():
    int_0 = 2824
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_try()
    int_0.to_lazy()


def test_case_14():
    str_0 = "\n        Transform Lazy into Box with constructor_fn result.\n\n        :returns: Box monad with constructor_fn result\n        :rtype: Box[A]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    validation_1 = validation_0.to_either()
    var_1 = validation_1.__eq__(validation_0)


def test_case_15():
    str_0 = "\n        Transform Lazy into Box with constructor_fn result.\n\n        :returns: Box monad with constructor_fn result\n        :rtype: Box[A]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    validation_1 = module_0.Validation(str_0, validation_0)
    var_0 = validation_0.__eq__(validation_1)


def test_case_16():
    none_type_0 = None
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.to_try()
    var_2 = var_1.__eq__(none_type_0)
