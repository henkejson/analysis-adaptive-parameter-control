# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import builtins as module_0
import pymonet.validation as module_1


def test_case_0():
    object_0 = module_0.object()
    bytes_0 = b"\xf3&-\x03\x87X\xc6"
    set_0 = {bytes_0}
    validation_0 = module_1.Validation(set_0, object_0)
    var_0 = validation_0.__eq__(object_0)
    var_0.bind(bytes_0)


def test_case_1():
    str_0 = "4$S"
    validation_0 = module_1.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.__str__()
    var_1.is_fail()


def test_case_2():
    bytes_0 = b"s\x99um\xc6\r"
    bytes_0.to_lazy()


def test_case_3():
    none_type_0 = None
    validation_0 = module_1.Validation(none_type_0, none_type_0)


def test_case_4():
    str_0 = "<c*Cq}8N`"
    list_0 = [str_0, str_0, str_0, str_0]
    validation_0 = module_1.Validation(list_0, str_0)
    var_0 = validation_0.to_maybe()


def test_case_5():
    bytes_0 = b"\x08\\\x9c\xd4\x83s%\xee/\x17+\xf4=\x07\xc9\xbd"
    validation_0 = module_1.Validation(bytes_0, bytes_0)
    var_0 = validation_0.is_fail()
    var_0.is_success()


def test_case_6():
    int_0 = -226
    str_0 = "Fist[value={}]"
    validation_0 = module_1.Validation(str_0, str_0)
    validation_0.map(int_0)


def test_case_7():
    float_0 = 1770.0
    none_type_0 = None
    validation_0 = module_1.Validation(none_type_0, none_type_0)
    validation_0.bind(float_0)


def test_case_8():
    none_type_0 = None
    none_type_1 = None
    validation_0 = module_1.Validation(none_type_1, none_type_1)
    validation_0.ap(none_type_0)


def test_case_9():
    bool_0 = True
    validation_0 = module_1.Validation(bool_0, bool_0)
    var_0 = validation_0.to_box()
    var_0.to_box()


def test_case_10():
    bool_0 = False
    none_type_0 = None
    validation_0 = module_1.Validation(bool_0, none_type_0)
    var_0 = validation_0.to_lazy()


def test_case_11():
    bool_0 = False
    validation_0 = module_1.Validation(bool_0, bool_0)
    validation_1 = module_1.Validation(validation_0, bool_0)
    validation_1.to_try()


def test_case_12():
    str_0 = "4$S"
    validation_0 = module_1.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = module_1.Validation(str_0, str_0)
    var_2 = str_0.__eq__(validation_0)
    var_3 = var_0.to_maybe()
    validation_1 = module_1.Validation(var_3, var_0)


def test_case_13():
    set_0 = set()
    float_0 = -2200.0
    validation_0 = module_1.Validation(float_0, float_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_either()
    var_1.bind(set_0)


def test_case_14():
    str_0 = "4$S"
    validation_0 = module_1.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    validation_1 = validation_0.__eq__(validation_0)
    var_1 = str_0.__eq__(validation_0)
    var_2 = var_0.to_maybe()
    validation_2 = validation_0.to_lazy()


def test_case_15():
    bytes_0 = b"\x87E\x97\xe3)\xbe\x06"
    validation_0 = module_1.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_box()
    var_2 = validation_0.to_either()
    var_3 = validation_0.__str__()
    var_4 = validation_0.is_success()
    var_5 = validation_0.is_fail()
    var_6 = var_2.to_try()
    var_7 = validation_0.__eq__(var_5)
    var_8 = validation_0.to_lazy()
    validation_1 = module_1.Validation(var_7, validation_0)
    var_9 = var_1.to_either()
    var_10 = validation_0.to_maybe()
    var_11 = var_2.map(var_5)
    var_12 = var_8.to_either()
    var_13 = validation_1.__eq__(validation_0)
    validation_1.to_maybe()


def test_case_16():
    tuple_0 = ()
    validation_0 = module_1.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_try()
    var_1.map(tuple_0)


def test_case_17():
    bytes_0 = b""
    validation_0 = module_1.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_box()
    var_2 = validation_0.to_either()
    var_3 = validation_0.__str__()
    var_4 = validation_0.is_success()
    var_5 = validation_0.is_fail()
    var_6 = var_2.to_try()
    var_4.to_maybe()


def test_case_18():
    bytes_0 = b""
    validation_0 = module_1.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_box()
    var_2 = validation_0.to_either()
    var_3 = var_2.to_lazy()
    var_4 = validation_0.is_success()
    var_5 = validation_0.to_maybe()
    var_6 = var_2.to_try()
    var_4.to_maybe()
