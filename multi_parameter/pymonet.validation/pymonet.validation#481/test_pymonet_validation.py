# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    int_0 = 4301
    str_0 = "{P)tx.+\x0c"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.__eq__(int_0)
    var_1.is_fail()


def test_case_1():
    str_0 = "\n    First is a Monoid that will always return the first, value when 2 First instances are combined.\n    "
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, str_0)
    var_0 = validation_0.to_either()
    validation_1 = module_0.Validation(none_type_0, str_0)
    var_1 = validation_1.__eq__(str_0)
    validation_2 = module_0.Validation(str_0, str_0)
    var_2 = validation_2.to_maybe()
    var_3 = var_2.to_try()
    var_4 = validation_2.to_lazy()
    var_5 = validation_1.to_try()
    var_6 = validation_2.is_fail()
    var_6.is_fail()


def test_case_2():
    str_0 = ""
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, str_0)
    var_0 = validation_0.to_either()
    validation_1 = module_0.Validation(none_type_0, str_0)
    var_1 = validation_1.__eq__(str_0)
    validation_2 = module_0.Validation(str_0, str_0)
    var_2 = validation_1.to_maybe()
    var_3 = validation_2.to_maybe()
    var_4 = validation_2.is_success()
    var_3.bind(validation_1)


def test_case_3():
    str_0 = "\n    First is a Monoid that will always return the first, value when 2 First instances are combined.\n    "
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, str_0)
    var_0 = validation_0.__eq__(str_0)
    validation_1 = module_0.Validation(str_0, str_0)
    var_1 = validation_0.__str__()
    var_2 = validation_1.to_maybe()
    var_3 = validation_1.to_lazy()
    var_4 = validation_0.to_try()
    var_1.to_lazy()


def test_case_4():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_5():
    float_0 = 1224.0
    validation_0 = module_0.Validation(float_0, float_0)
    validation_0.is_fail()


def test_case_6():
    none_type_0 = None
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.map(none_type_0)


def test_case_7():
    bool_0 = False
    none_type_0 = None
    validation_0 = module_0.Validation(bool_0, none_type_0)
    validation_0.bind(bool_0)


def test_case_8():
    str_0 = "\n    First is a Monoid ~hat will always return the first, value when 2 First instances are combined.\n    "
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, str_0)
    var_0 = validation_0.to_either()
    validation_1 = module_0.Validation(none_type_0, str_0)
    var_1 = validation_1.__eq__(str_0)
    validation_2 = module_0.Validation(str_0, str_0)
    var_2 = validation_2.to_maybe()
    validation_0.ap(str_0)


def test_case_9():
    none_type_0 = None
    float_0 = -3061.5
    validation_0 = module_0.Validation(float_0, float_0)
    var_0 = validation_0.to_box()
    var_0.ap(none_type_0)


def test_case_10():
    str_0 = "T\x0bj "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_lazy()
    var_0.to_lazy()


def test_case_11():
    str_0 = "o!i4yf"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_either()
    var_0.is_fail()


def test_case_12():
    str_0 = "\n    First is a Monoid that will always return the first, value when 2 First instances are combined.\n    "
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, str_0)
    var_0 = validation_0.to_either()
    bool_0 = False
    validation_1 = module_0.Validation(var_0, bool_0)
    var_1 = var_0.__eq__(none_type_0)
    var_2 = validation_1.__eq__(validation_1)
    validation_2 = module_0.Validation(var_1, var_0)
    var_3 = var_0.__str__()
    var_4 = var_0.to_maybe()
    validation_2.to_try()


def test_case_13():
    str_0 = "\n    First is a Monoid that will always return the first, value when 2 First instances are combined.\n    "
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, str_0)
    var_0 = validation_0.to_either()
    str_1 = "P"
    validation_1 = module_0.Validation(none_type_0, str_1)
    var_1 = validation_0.__eq__(validation_1)
    validation_2 = module_0.Validation(none_type_0, validation_0)
    var_2 = validation_0.to_maybe()
    validation_3 = module_0.Validation(var_1, validation_1)
    validation_3.to_maybe()


def test_case_14():
    float_0 = 2241.0
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.__str__()
    var_1 = var_0.__eq__(float_0)
    list_0 = []
    validation_0.map(list_0)
