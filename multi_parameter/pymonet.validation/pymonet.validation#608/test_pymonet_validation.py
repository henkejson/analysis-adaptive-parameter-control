# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    str_0 = '\t"'
    tuple_0 = (str_0, str_0)
    validation_0 = module_0.Validation(tuple_0, str_0)
    var_0 = validation_0.__str__()
    var_0.map(str_0)


def test_case_1():
    str_0 = "\n.(Mj'x\r?"
    list_0 = [str_0, str_0, str_0, str_0]
    validation_0 = module_0.Validation(list_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_box()
    var_2 = var_1.__str__()
    var_2.to_lazy()


def test_case_2():
    bytes_0 = b"\xf4\xd6w\xf1cv\x10F\x1bg\xb3\xdb\xd7\xab"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_0.is_fail()


def test_case_3():
    complex_0 = -1998 - 544.52j
    validation_0 = module_0.Validation(complex_0, complex_0)


def test_case_4():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.to_try()


def test_case_5():
    int_0 = -2561
    none_type_0 = None
    validation_0 = module_0.Validation(int_0, none_type_0)
    validation_0.is_fail()


def test_case_6():
    bool_0 = True
    none_type_0 = None
    validation_0 = module_0.Validation(bool_0, none_type_0)
    validation_0.map(bool_0)


def test_case_7():
    int_0 = 1567
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.bind(int_0)


def test_case_8():
    float_0 = 30.0544
    str_0 = ">#7}>RC~@mYW"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.to_try()
    validation_0.ap(float_0)


def test_case_9():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.to_maybe()
    var_2 = var_1.to_try()
    var_2.to_box()


def test_case_10():
    bytes_0 = b"\xd6w\xf1cv\x10F\x1bg\xb3\xdb\xd7\xab\x8e"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_either()
    var_1.ap(bytes_0)


def test_case_11():
    bytes_0 = b"\xf4\xd6w\xf1cv\x10F\x1bg\xb3\xdb\xd7\xab\x8e"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_either()
    var_2 = var_1.ap(bytes_0)
    var_3 = validation_0.__str__()
    var_4 = validation_0.to_box()
    var_5 = validation_0.to_either()
    var_6 = var_5.map(var_4)
    var_7 = var_1.to_lazy()
    var_8 = validation_0.to_either()
    var_6.is_success()


def test_case_12():
    bytes_0 = b'p\xae\n"\x10'
    str_0 = "\n        Call success_callback function with monad value when monad is successfully.\n\n        :params success_callback: function to apply with monad value.\n        :type success_callback: Function(A)\n        :returns: self\n        :rtype: Try[A]\n        "
    validation_0 = module_0.Validation(str_0, bytes_0)
    var_0 = validation_0.__eq__(bytes_0)
    var_1 = validation_0.is_success()
    validation_1 = module_0.Validation(str_0, validation_0)
    var_2 = var_0.__eq__(bytes_0)
    var_2.to_try()


def test_case_13():
    bytes_0 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_either()
    var_2 = validation_0.__str__()
    var_3 = validation_0.to_maybe()
    var_4 = validation_0.to_try()
    var_5 = validation_0.to_either()
    var_6 = var_1.__str__()
    var_6.is_fail()


def test_case_14():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.is_fail()
    var_1 = validation_0.to_maybe()
    var_0.is_fail()


def test_case_15():
    bytes_0 = b"\xf4\xd6w\xf1cv\x10F\x1bg\xb3\xdb\xd7\xab\x8e"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.is_fail()
    validation_1 = module_0.Validation(bytes_0, var_0)
    var_1 = validation_0.to_either()
    var_2 = validation_0.__eq__(validation_1)
    var_3 = validation_0.__str__()
    var_4 = validation_0.to_maybe()
    var_5 = validation_0.to_try()
    var_6 = var_1.__str__()
    var_6.is_fail()
