# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    float_0 = 1993.0
    validation_0 = module_0.Validation(float_0, float_0)
    float_1 = -1440.546
    validation_1 = module_0.Validation(float_1, float_1)
    var_0 = validation_1.__eq__(validation_0)
    var_0.ap(validation_1)


def test_case_1():
    int_0 = -889
    dict_0 = {int_0: int_0}
    bytes_0 = b"e:\xd1"
    list_0 = [bytes_0]
    validation_0 = module_0.Validation(list_0, bytes_0)
    var_0 = validation_0.__eq__(dict_0)


def test_case_2():
    none_type_0 = None
    bytes_0 = b"$"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_lazy()
    var_2 = var_1.bind(none_type_0)
    var_2.to_either()


def test_case_3():
    bytes_0 = b"\x7f\xde\x05\xb9]\xc0\x93\xd65;"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.to_maybe()
    var_2 = validation_0.is_success()
    var_1.to_maybe()


def test_case_4():
    bytes_0 = b" \xf5S\x14=\x01[S\xe3\xd5\xf7"
    validation_0 = module_0.Validation(bytes_0, bytes_0)


def test_case_5():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.is_success()


def test_case_6():
    str_0 = "h\\?.F7>Q8 L"
    list_0 = [str_0, str_0]
    validation_0 = module_0.Validation(list_0, str_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.is_fail()
    var_1.to_either()


def test_case_7():
    bool_0 = True
    none_type_0 = None
    validation_0 = module_0.Validation(bool_0, none_type_0)
    validation_0.map(none_type_0)


def test_case_8():
    none_type_0 = None
    str_0 = "IJb!9,C"
    list_0 = [str_0, str_0, str_0]
    none_type_1 = None
    validation_0 = module_0.Validation(list_0, none_type_1)
    validation_0.bind(none_type_0)


def test_case_9():
    dict_0 = {}
    str_0 = "_"
    tuple_0 = (dict_0, str_0, str_0)
    tuple_1 = ()
    list_0 = [tuple_1, tuple_1, tuple_1]
    validation_0 = module_0.Validation(tuple_1, list_0)
    validation_0.ap(tuple_0)


def test_case_10():
    int_0 = 861
    int_1 = -1088
    validation_0 = module_0.Validation(int_1, int_1)
    var_0 = validation_0.to_box()
    var_0.ap(int_0)


def test_case_11():
    bytes_0 = b"e:\xd1"
    list_0 = [bytes_0]
    validation_0 = module_0.Validation(list_0, bytes_0)
    var_0 = validation_0.to_lazy()


def test_case_12():
    str_0 = "a\rB61KI\\-"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_try()
    var_1 = validation_0.to_lazy()
    set_0 = {str_0, str_0}
    set_0.to_maybe()


def test_case_13():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.__eq__(validation_0)
    var_0.to_lazy()


def test_case_14():
    bytes_0 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.to_either()
    var_2 = bytes_0.__str__()
    var_3 = validation_0.to_maybe()
    var_4 = var_3.to_box()
    var_1.is_success()


def test_case_15():
    none_type_0 = None
    bytes_0 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_lazy()
    validation_1 = module_0.Validation(none_type_0, bytes_0)
    var_1 = validation_1.to_maybe()
    var_2 = validation_1.to_try()
    var_3 = var_0.to_either()
    var_3.is_success()


def test_case_16():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.__str__()
    var_2 = validation_0.is_fail()
    var_1.is_success()
