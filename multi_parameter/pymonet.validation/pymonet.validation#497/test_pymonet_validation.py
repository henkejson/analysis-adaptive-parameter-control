# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    none_type_0 = None
    none_type_1 = None
    validation_0 = module_0.Validation(none_type_1, none_type_1)
    var_0 = validation_0.__eq__(none_type_0)
    var_1 = var_0.__str__()
    validation_0.is_success()


def test_case_1():
    str_0 = "n0e&%5"
    bytes_0 = b"|\x08"
    int_0 = -2258
    dict_0 = {str_0: str_0, str_0: bytes_0, int_0: str_0, int_0: str_0}
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.__str__()
    var_0.ap(dict_0)


def test_case_2():
    list_0 = []
    bytes_0 = b"(K"
    validation_0 = module_0.Validation(list_0, bytes_0)
    var_0 = validation_0.__str__()
    var_0.to_either()


def test_case_3():
    str_0 = "\n    Function for return function depended on first function argument\n    cond get list of two-item tuples,\n    first is condition_function, second is execute_function.\n    Returns this execute_function witch first condition_function return truly value.\n\n    :param condition_list: list of two-item tuples (condition_function, execute_function)\n    :type condition_list: List[(Function, Function)]\n    :returns: Returns this execute_function witch first condition_function return truly value\n    :rtype: Function\n    "
    set_0 = {str_0, str_0}
    list_0 = [str_0, set_0]
    validation_0 = module_0.Validation(list_0, set_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_box()
    validation_1 = module_0.Validation(var_1, list_0)
    var_2 = validation_1.to_box()
    var_2.is_success()


def test_case_4():
    bytes_0 = b"\xf2\x8f\xf0?\xdb\xf9h\xae\xfa\x8bxj\xa8\xeb\xac\xd8W\x06\xcd5"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.is_success()
    var_1.map(var_1)


def test_case_5():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)


def test_case_6():
    bool_0 = True
    str_0 = "1F_}Ro>noNAr"
    tuple_0 = (bool_0, str_0)
    list_0 = [tuple_0]
    validation_0 = module_0.Validation(list_0, tuple_0)
    var_0 = validation_0.is_fail()
    int_0 = -1311
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    validation_1 = module_0.Validation(dict_0, dict_0)


def test_case_7():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.map(bool_0)


def test_case_8():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.bind(validation_0)


def test_case_9():
    float_0 = 1235.92149
    set_0 = {float_0, float_0, float_0}
    float_1 = 3039.881
    validation_0 = module_0.Validation(float_1, float_1)
    validation_0.ap(set_0)


def test_case_10():
    bytes_0 = b"\xf2\x8f\xf0?\xdb\xf9h\xae\xfa\x8bxj\xa8\xeb\xac\xd8W\x06\xcd5"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_maybe()
    var_2 = var_0.to_either()
    var_3 = validation_0.is_success()
    var_3.map(var_3)


def test_case_11():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.to_try()


def test_case_12():
    bool_0 = True
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_maybe()
    var_1.map(bool_0)


def test_case_13():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_box()
    var_1.is_fail()


def test_case_14():
    bytes_0 = b"`,\xef\xdb\x89\xad\xf8]9\x8cA\xeb8#>=\xfc"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.__eq__(validation_0)
    var_2 = validation_0.to_lazy()
    var_3 = validation_0.to_box()
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    var_4 = validation_1.__eq__(none_type_0)
    var_5 = var_2.map(var_0)
    var_6 = var_4.__str__()
    var_6.map(var_6)


def test_case_15():
    bytes_0 = b"`,\xef\xdb\x89\xad\xf8]9\x8cA\xeb8#>=\xfc"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    validation_1 = module_0.Validation(var_0, var_0)
    var_1 = validation_1.__eq__(validation_0)
    var_2 = var_0.to_either()
    var_3 = var_0.__str__()
    var_4 = var_0.to_box()
    var_3.to_box()
