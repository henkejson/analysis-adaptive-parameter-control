# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    str_0 = "c23bag,De[sz> "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(str_0)
    validation_1 = module_0.Validation(validation_0, validation_0)
    var_1 = validation_0.to_either()
    var_2 = var_1.to_lazy()
    var_2.is_success()


def test_case_1():
    str_0 = "c23bagDe[sz> "
    validation_0 = module_0.Validation(str_0, str_0)
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, str_0)
    var_0 = validation_0.__eq__(str_0)
    var_1 = validation_0.to_either()
    var_2 = var_1.to_lazy()
    var_3 = validation_1.is_success()
    var_4 = validation_0.__str__()
    var_5 = validation_0.to_try()


def test_case_2():
    bytes_0 = b"\xfb\x11\x86\x92\xfa[a\x806>Z+\x89uNB\x03"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_either()
    var_0.is_success()


def test_case_3():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_4():
    str_0 = "c23bagDe[sz> "
    validation_0 = module_0.Validation(str_0, str_0)
    validation_1 = module_0.Validation(validation_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_1.to_box()
    var_2 = validation_0.is_fail()
    var_3 = validation_1.to_lazy()
    var_2.is_success()


def test_case_5():
    bytes_0 = b"D;V\x8a\x17C"
    list_0 = [bytes_0]
    list_1 = [list_0, bytes_0, list_0, list_0]
    bytes_1 = b"f\xa7~\xf0\xc7+\xd6A$F\xc2"
    validation_0 = module_0.Validation(bytes_1, bytes_1)
    validation_0.map(list_1)


def test_case_6():
    list_0 = []
    float_0 = 1309.59102
    validation_0 = module_0.Validation(float_0, float_0)
    validation_0.bind(list_0)


def test_case_7():
    none_type_0 = None
    str_0 = "/t{S"
    validation_0 = module_0.Validation(str_0, none_type_0)
    validation_0.ap(none_type_0)


def test_case_8():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.to_try()


def test_case_9():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.__str__()
    var_1.to_try()


def test_case_10():
    int_0 = -760
    str_0 = "c23bagDe[sz> "
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, str_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.to_either()
    validation_1 = module_0.Validation(var_1, int_0)
    var_2 = validation_0.to_maybe()
    var_3 = validation_0.to_box()
    var_4 = var_2.to_lazy()
    var_5 = module_0.Validation(var_4, int_0)
    var_6 = var_0.to_maybe()
    var_2.to_maybe()


def test_case_11():
    str_0 = "c23bagDe[sz> "
    validation_0 = module_0.Validation(str_0, str_0)
    validation_1 = module_0.Validation(str_0, validation_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_1.__eq__(validation_0)
    validation_2 = module_0.Validation(var_0, var_0)
    validation_1.to_either()


def test_case_12():
    str_0 = "c23bagDe[sz> "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.__eq__(str_0)
    validation_1 = module_0.Validation(validation_0, validation_0)
    validation_1.to_maybe()


def test_case_13():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_1 = module_0.Validation(var_0, var_0)
    var_1 = validation_0.to_either()
    var_2 = validation_1.to_box()
    var_3 = validation_0.to_lazy()
    var_0.bind(var_3)


def test_case_14():
    int_0 = -760
    str_0 = ""
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, str_0)
    var_0 = validation_0.__eq__(str_0)
    var_1 = validation_0.to_either()
    validation_1 = module_0.Validation(var_1, int_0)
    var_2 = validation_0.to_maybe()
    var_3 = validation_0.to_box()
    var_0.is_fail()
