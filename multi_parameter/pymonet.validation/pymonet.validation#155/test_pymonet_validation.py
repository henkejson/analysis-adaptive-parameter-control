# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bool_0 = True
    bool_1 = False
    validation_0 = module_0.Validation(bool_0, bool_1)
    none_type_0 = None
    var_0 = validation_0.__eq__(none_type_0)


def test_case_1():
    bool_0 = True
    bytes_0 = b"C\xaa"
    list_0 = [bool_0, bytes_0, bool_0, bool_0]
    validation_0 = module_0.Validation(list_0, bytes_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_either()
    var_2 = validation_0.to_lazy()
    var_3 = var_2.to_maybe()


def test_case_2():
    int_0 = 735
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    tuple_0 = ()
    validation_1 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_1.to_either()
    validation_1.map(int_0)


def test_case_3():
    bytes_0 = b"C\xaa"
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bytes_0)
    list_0 = [bool_0, bytes_0, bool_0, bool_0]
    validation_1 = module_0.Validation(list_0, bytes_0)
    none_type_0 = None
    var_0 = validation_1.__eq__(none_type_0)
    var_1 = validation_1.__str__()
    var_2 = var_1.__str__()
    var_3 = validation_0.to_either()
    var_4 = validation_0.to_maybe()


def test_case_4():
    str_0 = "\n        Transform Maybe to Try.\n\n        :returns: Lazy monad with function returning previous value in other case Left with None\n        :rtype: Lazy[Function() -> (A | None)]\n        "
    validation_0 = module_0.Validation(str_0, str_0)


def test_case_5():
    str_0 = "\n        Transform Maybe to Try.\n\n        :returns: Lazy monad with function returning previous value in other case Left with None\n        :rtype: Lazy[Function() -> (A | None)]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.is_success()
    var_1 = validation_0.to_box()


def test_case_6():
    bool_0 = True
    none_type_0 = None
    validation_0 = module_0.Validation(bool_0, none_type_0)
    validation_0.is_fail()


def test_case_7():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.bind(validation_0)


def test_case_8():
    bool_0 = False
    bool_1 = False
    none_type_0 = None
    validation_0 = module_0.Validation(bool_1, none_type_0)
    validation_0.ap(bool_0)


def test_case_9():
    complex_0 = -1076.5349 - 2475.4j
    validation_0 = module_0.Validation(complex_0, complex_0)
    var_0 = validation_0.to_box()


def test_case_10():
    bool_0 = False
    bytes_0 = b"$\xe4\xac"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_try()
    var_1 = var_0.__str__()
    var_1.ap(bool_0)


def test_case_11():
    list_0 = []
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, list_0)
    var_0 = validation_0.to_maybe()
    var_0.bind(bool_0)


def test_case_12():
    bool_0 = True
    bytes_0 = b"C\xaa"
    validation_0 = module_0.Validation(bool_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.__str__()
    var_2 = var_1.__eq__(var_1)
    var_3 = var_0.__str__()
    var_2.to_maybe()


def test_case_13():
    bool_0 = True
    bytes_0 = b""
    validation_0 = module_0.Validation(bool_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.__str__()
    var_2 = validation_0.to_either()
    var_3 = var_0.__eq__(var_2)
    validation_1 = module_0.Validation(var_1, var_1)
    var_4 = validation_0.to_lazy()
    var_5 = validation_1.to_maybe()
    var_0.to_box()


def test_case_14():
    bool_0 = True
    bytes_0 = b"C\xaa"
    bool_1 = False
    validation_0 = module_0.Validation(bool_0, bytes_0)
    validation_1 = module_0.Validation(bool_0, bool_1)
    var_0 = validation_0.__eq__(validation_1)
    var_0.to_either()
