# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0
import builtins as module_1


def test_case_0():
    bytes_0 = b"\x19{sx\xe7X:\x86\x1dj]\xdfhi(\xcc$\xe2V\x97"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.is_success()
    var_0.is_fail()


def test_case_1():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    validation_1 = module_0.Validation(validation_0, validation_0)
    var_1 = validation_1.__eq__(validation_0)
    validation_1.is_success()


def test_case_2():
    bytes_0 = b"}\x89\xa9"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_0.is_success()


def test_case_3():
    bytes_0 = b"\xc5\xe8\x87C\xf4\xba\xa6\x91\x06\xc5\xb8\xd2\xa6\xd1k\x08-\xfe"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_0.is_success()


def test_case_4():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)


def test_case_5():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.is_success()
    var_0.to_either()


def test_case_6():
    bytes_0 = b"\x19{sx\xe7X:\x86\x1dj]\xdfhi(\xcc$\xe2V\x97"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.is_success()
    complex_0 = 1138.70028 - 1976.4313j
    validation_1 = module_0.Validation(complex_0, complex_0)
    validation_1.is_fail()


def test_case_7():
    set_0 = set()
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.map(set_0)


def test_case_8():
    none_type_0 = None
    str_0 = "%nD\x0b&"
    str_1 = "%nD\x0b&"
    validation_0 = module_0.Validation(none_type_0, str_0)
    validation_1 = module_0.Validation(validation_0, str_0)
    validation_2 = module_0.Validation(str_1, none_type_0)
    var_0 = validation_2.__eq__(str_0)
    var_1 = validation_0.__str__()
    var_2 = validation_0.__str__()
    validation_0.bind(validation_1)


def test_case_9():
    bool_0 = False
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_0]
    none_type_0 = None
    validation_0 = module_0.Validation(list_0, none_type_0)
    validation_0.ap(list_0)


def test_case_10():
    bool_0 = True
    str_0 = "rJJA:\x0b`\t^l`;z\nP\t'\n"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_box()
    list_0 = [str_0, str_0]
    none_type_0 = None
    validation_1 = module_0.Validation(list_0, none_type_0)
    validation_1.ap(bool_0)


def test_case_11():
    str_0 = "%nD\x0b&"
    validation_0 = module_0.Validation(str_0, str_0)
    validation_1 = validation_0.is_fail()
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_lazy()
    var_2 = validation_1.__str__()
    var_3 = var_2.__str__()
    var_3.to_lazy()


def test_case_12():
    complex_0 = -2219.347395 + 1636.516154j
    str_0 = "%nD\x0b&"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_try()
    var_2 = validation_0.to_lazy()
    var_3 = validation_0.__eq__(str_0)
    var_4 = var_0.bind(complex_0)
    var_5 = var_1.map(var_0)
    var_6 = var_5.__eq__(complex_0)
    var_5.is_fail()


def test_case_13():
    complex_0 = -685.682 - 2566.88567j
    none_type_0 = None
    dict_0 = {}
    bool_0 = False
    validation_0 = module_0.Validation(none_type_0, dict_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_box()
    var_2 = var_1.__eq__(bool_0)
    object_0 = module_1.object(**dict_0)
    validation_1 = module_0.Validation(object_0, dict_0)
    var_3 = validation_1.__eq__(none_type_0)
    var_3.bind(complex_0)


def test_case_14():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
    validation_0 = module_0.Validation(list_0, tuple_0)
    var_0 = validation_0.to_maybe()
    var_0.is_success()


def test_case_15():
    str_0 = "%nD\x0b&"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()


def test_case_16():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_try()
    var_1.is_fail()


def test_case_17():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.is_fail()
    var_1 = validation_0.__str__()
    validation_0.map(validation_0)
