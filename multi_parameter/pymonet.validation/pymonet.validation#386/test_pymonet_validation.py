# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    float_0 = 41.865211155807195
    bytes_0 = b"a(\xe9\xfb\xa2z"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    float_1 = -2611.37937
    dict_0 = {float_1: float_0}
    var_0 = validation_0.__eq__(dict_0)
    var_1 = validation_0.to_either()


def test_case_1():
    int_0 = 0
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, int_0)
    list_0 = []
    validation_1 = module_0.Validation(bool_0, list_0)
    var_0 = validation_1.__str__()
    var_0.map(bool_0)


def test_case_2():
    bytes_0 = b"\xe3P\x89"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.is_fail()
    var_2 = validation_0.is_success()
    var_3 = validation_0.to_either()
    complex_0 = 31.02 + 20.99j
    var_4 = validation_0.__eq__(var_2)
    var_1.map(complex_0)


def test_case_3():
    bytes_0 = b"a(\xe9\xfb\xa2z"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()


def test_case_4():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_lazy()
    var_1.is_success()


def test_case_5():
    bytes_0 = b"\xe3P\x89"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.is_fail()
    var_1 = validation_0.is_success()
    var_2 = validation_0.to_either()
    var_3 = validation_0.__eq__(var_1)
    var_4 = validation_0.to_maybe()
    var_5 = validation_0.to_lazy()
    var_0.to_box()


def test_case_6():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)


def test_case_7():
    int_0 = -2883
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.is_fail()


def test_case_8():
    none_type_0 = None
    bytes_0 = b"1`?\xdd\xbd\x1a\xca0\x0e$\xcd\t"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_0.map(none_type_0)


def test_case_9():
    float_0 = 53.594845227146294
    validation_0 = module_0.Validation(float_0, float_0)
    validation_0.bind(float_0)


def test_case_10():
    none_type_0 = None
    none_type_1 = None
    validation_0 = module_0.Validation(none_type_1, none_type_1)
    validation_0.ap(none_type_0)


def test_case_11():
    bytes_0 = b"DO\x8fz\x12\x16\xfc\xd9\x10A/\x96\xa5\xc2\xdf}\t"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_box()
    none_type_0 = None
    validation_1 = module_0.Validation(validation_0, none_type_0)
    var_1 = validation_0.to_either()
    var_2 = var_1.ap(var_1)
    var_3 = var_1.bind(var_2)
    var_4 = var_3.to_lazy()


def test_case_12():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_1 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_lazy()


def test_case_13():
    bytes_0 = b"\xe3P\x89"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.is_success()
    var_2 = var_1.__eq__(var_0)
    var_3 = validation_0.to_either()
    complex_0 = 31.02 + 20.99j
    var_4 = validation_0.__eq__(var_1)
    var_5 = var_0.to_either()
    var_6 = var_3.map(var_4)
    var_7 = var_0.map(complex_0)
    validation_0.map(complex_0)


def test_case_14():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.to_try()


def test_case_15():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)


def test_case_16():
    none_type_0 = None
    str_0 = "\n        Take function and applied this function with monad value and returns new monad with mapped value.\n\n        :params mapper: function to apply on monad value\n        :type mapper: Function(A) -> B\n        :returns: for successfully new Try with mapped value, othercase copy of self\n        :rtype: Try[B]\n        "
    list_0 = [str_0, str_0, str_0, str_0]
    validation_0 = module_0.Validation(list_0, str_0)
    var_0 = validation_0.__str__()
    none_type_1 = None
    validation_1 = module_0.Validation(var_0, list_0)
    var_1 = validation_0.to_either()
    var_2 = validation_0.__eq__(validation_1)
    var_3 = validation_1.to_lazy()
    var_4 = var_3.bind(none_type_1)
    var_0.ap(none_type_0)


def test_case_17():
    none_type_0 = None
    set_0 = set()
    validation_0 = module_0.Validation(none_type_0, set_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_box()
    var_2 = var_1.to_maybe()
    var_2.map(none_type_0)
