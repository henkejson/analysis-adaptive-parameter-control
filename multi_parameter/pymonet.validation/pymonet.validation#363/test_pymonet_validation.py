# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)
    var_0.is_fail()


def test_case_1():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    bool_1 = True
    validation_0 = module_0.Validation(bool_1, bool_1)
    var_0 = validation_0.__eq__(list_0)
    var_0.to_box()


def test_case_2():
    tuple_0 = ()
    bool_0 = True
    list_0 = []
    validation_0 = module_0.Validation(bool_0, list_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.__eq__(tuple_0)
    var_1.to_box()


def test_case_3():
    list_0 = []
    none_type_0 = None
    validation_0 = module_0.Validation(list_0, none_type_0)
    str_0 = "\n        :param semigroup: other semigroup to concat\n        :type semigroup: First[B]\n        :returns: new First with first value\n        :rtype: First[A]\n        "
    validation_1 = module_0.Validation(str_0, str_0)
    var_0 = validation_1.to_maybe()
    var_0.to_maybe()


def test_case_4():
    int_0 = 1
    validation_0 = module_0.Validation(int_0, int_0)


def test_case_5():
    float_0 = 88.332102
    validation_0 = module_0.Validation(float_0, float_0)
    validation_0.to_either()


def test_case_6():
    int_0 = 1
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.is_fail()


def test_case_7():
    bytes_0 = b""
    str_0 = "\n        Transform Either into Validation.\n\n        :returns: successfull Validation monad with previous value\n        :rtype: Validation[A, []]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    validation_0.map(bytes_0)


def test_case_8():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    complex_0 = -3250.764226 + 3762.16j
    list_0 = [complex_0, complex_0, none_type_0]
    validation_1 = module_0.Validation(complex_0, list_0)
    var_1 = validation_1.__str__()
    var_2 = var_1.__eq__(none_type_0)
    var_3 = validation_1.to_maybe()
    validation_2 = module_0.Validation(none_type_0, none_type_0)
    var_4 = validation_2.to_box()
    var_5 = validation_2.__eq__(validation_2)
    validation_2.bind(validation_2)


def test_case_9():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_maybe()
    str_0 = ":'\n?MpGWh \r3"
    validation_0.ap(str_0)


def test_case_10():
    none_type_0 = None
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.to_maybe()
    var_1.ap(none_type_0)


def test_case_11():
    int_0 = -1193
    none_type_0 = None
    validation_0 = module_0.Validation(int_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.__str__()
    none_type_1 = None
    validation_1 = module_0.Validation(none_type_1, none_type_1)
    validation_1.to_maybe()


def test_case_12():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_try()
    validation_0.is_success()


def test_case_13():
    str_0 = "\x0b$e'\"\x0bXVGrc~\t-*X2OX"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_try()
    var_1 = validation_0.__eq__(str_0)
    var_2 = var_0.__str__()
    var_2.to_either()


def test_case_14():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    none_type_0 = None
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.to_either()
    validation_0.map(none_type_0)


def test_case_15():
    none_type_0 = None
    complex_0 = -3250.764226 + 3762.16j
    list_0 = [complex_0, complex_0, none_type_0]
    validation_0 = module_0.Validation(complex_0, list_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_maybe()
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    var_2 = validation_1.__eq__(none_type_0)
    var_3 = validation_1.__eq__(validation_1)
    var_2.to_either()


def test_case_16():
    str_0 = "];r9z,6bS~P"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.ap(str_0)
    var_2 = var_1.to_try()
    var_2.to_either()


def test_case_17():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.__str__()
    var_0.to_maybe()


def test_case_18():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    complex_0 = -3250.764226 + 3762.16j
    list_0 = [complex_0, complex_0, none_type_0]
    validation_1 = module_0.Validation(complex_0, list_0)
    var_1 = validation_1.__str__()
    var_2 = var_1.__eq__(none_type_0)
    var_3 = validation_1.to_maybe()
    validation_2 = module_0.Validation(none_type_0, none_type_0)
    var_4 = validation_2.__eq__(validation_1)
    var_5 = validation_2.__eq__(validation_2)
    var_4.to_either()
