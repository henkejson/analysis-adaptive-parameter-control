# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0
import builtins as module_1


def test_case_0():
    str_0 = "\n        Take mapper function and return new instance of Right with mapped value.\n\n        :param mapper: function to apply on Right value\n        :type mapper: Function(A) -> B\n        :returns: new Right with result of mapper\n        :rtype: Right[B]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_lazy()
    var_2 = validation_0.__eq__(var_0)
    validation_1 = module_0.Validation(validation_0, validation_0)


def test_case_1():
    none_type_0 = None
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.__eq__(none_type_0)
    var_1.to_try()


def test_case_2():
    bytes_0 = b"\xc4\xc7\xd4\x90\x16"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_try()
    validation_1 = module_0.Validation(bytes_0, bytes_0)
    var_2 = validation_1.to_maybe()
    var_3 = validation_0.__eq__(bytes_0)
    var_4 = validation_1.is_success()
    var_4.map(var_2)


def test_case_3():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_4():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.to_try()


def test_case_5():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.is_fail()


def test_case_6():
    bool_0 = True
    bool_1 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_1: bool_1, bool_1: bool_0}
    bool_2 = True
    tuple_0 = (bool_0, dict_0, bool_2, dict_0)
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    validation_0.map(tuple_0)


def test_case_7():
    complex_0 = -253 + 1203.01073j
    bytes_0 = b"\xb1\x0fvx\xe2\x1d\x88\x90*\xb7\xbc:\xcaZ\xec\xdf"
    list_0 = [bytes_0, bytes_0, bytes_0]
    validation_0 = module_0.Validation(bytes_0, list_0)
    validation_0.bind(complex_0)


def test_case_8():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.ap(validation_0)


def test_case_9():
    set_0 = set()
    none_type_0 = None
    validation_0 = module_0.Validation(set_0, none_type_0)
    var_0 = validation_0.to_box()


def test_case_10():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.to_try()
    var_2 = var_0.to_maybe()
    module_1.object(**list_0)


def test_case_11():
    str_0 = "\n        Take mapper function and return new instance of Right with mapped value.\n\n        :param mapper: function to apply on Right value\n        :type mapper: Function(A) -> B\n        :returns: new Right with result of mapper\n        :rtype: Right[B]\n        "
    set_0 = set()
    validation_0 = module_0.Validation(str_0, str_0)
    none_type_0 = None
    var_0 = validation_0.to_lazy()
    var_1 = var_0.ap(str_0)
    var_2 = validation_0.__eq__(var_1)
    validation_1 = module_0.Validation(validation_0, none_type_0)
    var_3 = validation_0.__eq__(str_0)
    var_4 = validation_1.__eq__(validation_0)
    var_5 = validation_0.to_lazy()
    var_3.ap(set_0)


def test_case_12():
    str_0 = "x,mKi'UL\rpW;L0V7ARZ8"
    bytes_0 = b"\xb7\x89:"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_either()
    validation_0.map(str_0)


def test_case_13():
    bytes_0 = b"\xc4\xc7\xd4\x90\x16"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_maybe()
    var_2 = var_1.to_try()
    validation_1 = module_0.Validation(bytes_0, bytes_0)
    var_3 = validation_1.to_maybe()
    var_4 = validation_0.__eq__(bytes_0)
    var_5 = validation_1.is_success()
    var_5.map(var_3)


def test_case_14():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.to_either()
    var_2 = var_1.to_try()
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    var_3 = validation_1.to_box()
    var_4 = var_3.__str__()
    var_5 = var_4.__eq__(var_2)
    var_5.is_success()


def test_case_15():
    set_0 = set()
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, set_0)
    var_0 = validation_0.__str__()
    var_0.to_lazy()
