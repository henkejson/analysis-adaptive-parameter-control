# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    str_0 = "KKv@h6om"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    bool_0 = False
    var_1 = validation_0.__eq__(bool_0)
    var_2 = validation_0.to_try()
    validation_1 = module_0.Validation(var_0, var_2)
    var_2.to_lazy()


def test_case_1():
    bool_0 = True
    none_type_0 = None
    int_0 = -504
    set_0 = {none_type_0, bool_0, none_type_0, int_0}
    validation_0 = module_0.Validation(bool_0, set_0)
    var_0 = validation_0.__str__()
    var_0.to_box()


def test_case_2():
    none_type_0 = None
    str_0 = "TAoYEo"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    validation_0.map(none_type_0)


def test_case_3():
    str_0 = "hrR}Yk%.E"
    bytes_0 = b"\x1c}\x11\xba\x80\xb0\xc7\xce\xf4\xa28\x9f\xc0,[Z\x00\x1a\x1cf"
    tuple_0 = (str_0, str_0, str_0, bytes_0)
    str_1 = "KKv@h6om"
    validation_0 = module_0.Validation(str_1, str_1)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_box()
    var_1.bind(tuple_0)


def test_case_4():
    complex_0 = -854.800482 - 219.7389j
    validation_0 = module_0.Validation(complex_0, complex_0)


def test_case_5():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.__str__()


def test_case_6():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.is_fail()


def test_case_7():
    none_type_0 = None
    complex_0 = -3806 + 255.718j
    dict_0 = {complex_0: complex_0, complex_0: complex_0}
    validation_0 = module_0.Validation(dict_0, dict_0)
    validation_1 = module_0.Validation(none_type_0, complex_0)
    var_0 = validation_0.__str__()
    validation_1.bind(dict_0)


def test_case_8():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.ap(validation_0)


def test_case_9():
    str_0 = "=4Q?3c9xP\r}s~0O\\4b;i"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.to_lazy()
    var_2 = validation_0.__str__()
    var_3 = validation_0.to_maybe()
    var_4 = validation_0.to_try()
    var_5 = validation_0.to_box()
    var_6 = validation_0.to_maybe()
    var_7 = var_4.__str__()
    var_8 = validation_0.to_either()


def test_case_10():
    list_0 = []
    bytes_0 = b"Gg\x85\x80\xf8\xd0\xfbM\xfc>*J\x1fa\xe0"
    tuple_0 = (list_0, bytes_0)
    tuple_1 = (tuple_0,)
    int_0 = 1294
    validation_0 = module_0.Validation(tuple_1, int_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.__str__()


def test_case_11():
    bytes_0 = b"\x8b\xe8\x0e\x1cl\xe2 \x90\xcd\xb9~(b\x8e\x18\xbe\xec\x0b\x8b\xcd"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_try()
    var_1 = validation_0.to_try()
    var_2 = var_1.map(validation_0)
    list_0 = []
    validation_1 = module_0.Validation(list_0, list_0)
    var_3 = validation_1.to_maybe()
    list_1 = [list_0, list_0, list_0, list_0]
    var_4 = var_1.__eq__(var_2)
    var_5 = validation_0.to_try()
    validation_2 = module_0.Validation(list_1, list_1)
    var_4.bind(var_3)


def test_case_12():
    str_0 = "=4Q?3c9xP\r}s~0O\\4b;i"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.to_lazy()
    var_2 = validation_0.__str__()
    var_3 = validation_0.to_maybe()
    var_4 = validation_0.to_box()
    var_5 = validation_0.to_maybe()
    var_6 = validation_0.to_either()
    var_7 = var_0.__eq__(validation_0)
    var_8 = var_1.to_maybe()
    var_9 = var_4.__str__()
    var_9.map(str_0)


def test_case_13():
    str_0 = "=4Q?3c9xP\r}s~0O\\4b;i"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(validation_0)
    var_0.is_success()


def test_case_14():
    bytes_0 = b"\xef\xfc\xb0z\x82\xfa\xae"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(bytes_0)
    var_1 = validation_0.__str__()
    validation_1 = module_0.Validation(var_0, bytes_0)
    var_2 = validation_1.__eq__(var_1)
    var_3 = validation_1.to_either()
    validation_2 = module_0.Validation(validation_0, var_2)
    var_4 = validation_2.__eq__(validation_1)
    validation_3 = module_0.Validation(var_0, var_4)
    validation_4 = module_0.Validation(var_0, var_2)
    validation_4.ap(validation_0)


def test_case_15():
    bytes_0 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.__eq__(bytes_0)
    var_2 = validation_0.__str__()
    validation_1 = module_0.Validation(var_1, bytes_0)
    var_3 = validation_1.is_fail()
    var_4 = validation_1.to_either()
    validation_2 = module_0.Validation(validation_0, var_3)
    validation_2.to_either()
