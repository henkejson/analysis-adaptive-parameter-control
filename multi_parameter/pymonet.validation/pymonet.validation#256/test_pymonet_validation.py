# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bool_0 = False
    str_0 = "\n    Data type for storage any type of data\n    "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_try()
    var_1 = validation_0.__eq__(bool_0)
    var_1.map(var_1)


def test_case_1():
    str_0 = ";S"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    var_0.to_box()


def test_case_2():
    bytes_0 = b"vB3@\xb5\xa8_j"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.__str__()
    var_1.is_fail()


def test_case_3():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    none_type_0 = None
    var_0 = validation_0.to_maybe()
    validation_0.map(none_type_0)


def test_case_4():
    int_0 = -647
    int_1 = -651
    str_0 = "D?at'"
    tuple_0 = (str_0, int_1)
    validation_0 = module_0.Validation(int_0, tuple_0)
    var_0 = validation_0.to_maybe()
    var_0.is_fail()


def test_case_5():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_6():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.is_fail()


def test_case_7():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.map(validation_0)


def test_case_8():
    bytes_0 = b"\x94\xc8\x13"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.__eq__(validation_0)
    var_2 = validation_0.__eq__(var_1)
    validation_1 = module_0.Validation(var_2, var_1)
    validation_0.bind(var_1)


def test_case_9():
    bytes_0 = b"\xe3\x80\x93\xe6d\x84A"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_1 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_1.to_lazy()
    validation_2 = module_0.Validation(var_0, validation_1)
    var_1 = validation_1.to_lazy()
    var_2 = var_0.to_either()
    var_3 = var_2.to_box()
    var_4 = validation_0.to_box()
    var_5 = validation_0.to_either()
    bool_0 = False
    validation_1.ap(bool_0)


def test_case_10():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    validation_0 = module_0.Validation(list_0, bool_0)
    var_0 = validation_0.to_box()
    var_0.is_fail()


def test_case_11():
    bool_0 = False
    bool_1 = True
    validation_0 = module_0.Validation(bool_1, bool_1)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.__eq__(bool_0)
    var_1.to_box()


def test_case_12():
    bytes_0 = b"\xe3\x80\x93\xe6A"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_1 = module_0.Validation(bytes_0, var_0)
    var_0.to_try()


def test_case_13():
    str_0 = ""
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.__eq__(var_0)
    var_2 = validation_0.to_lazy()
    validation_1 = module_0.Validation(var_1, validation_0)
    var_3 = var_0.to_lazy()
    var_0.bind(var_3)


def test_case_14():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.__str__()
    var_0.to_maybe()


def test_case_15():
    bytes_0 = b"\x94\xc8\x13"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    var_1 = module_0.Validation(var_0, validation_0)
    var_2 = validation_0.__eq__(var_1)
    validation_1 = module_0.Validation(var_2, var_1)
    validation_1.__str__()
