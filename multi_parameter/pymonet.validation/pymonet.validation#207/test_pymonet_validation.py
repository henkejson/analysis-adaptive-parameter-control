# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    complex_0 = 607 + 213.693j
    set_0 = {complex_0}
    str_0 = "~wPm\tU[L:=yZ]Yut"
    validation_0 = module_0.Validation(str_0, str_0)
    bytes_0 = b"l"
    validation_1 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_1.__eq__(validation_0)
    list_0 = [var_0, str_0]
    validation_2 = module_0.Validation(list_0, str_0)
    var_1 = validation_2.to_box()
    var_2 = var_1.__eq__(set_0)


def test_case_1():
    bytes_0 = b'_\xc47\xff\xe23#\xe9"(]\x91CZ\x12\xcf$P'
    int_0 = 1847
    validation_0 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.__eq__(bytes_0)
    validation_1 = module_0.Validation(var_0, var_0)
    var_1 = validation_1.to_lazy()
    var_2 = var_1.to_either()
    var_3 = var_2.__str__()


def test_case_2():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    validation_1 = module_0.Validation(list_0, list_0)
    var_0 = validation_1.to_box()
    var_1 = validation_0.__str__()
    var_1.is_fail()


def test_case_3():
    int_0 = 1
    none_type_0 = None
    validation_0 = module_0.Validation(int_0, none_type_0)
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    validation_1 = module_0.Validation(set_0, set_0)
    str_0 = "aqr&-^\x0bh"
    validation_2 = module_0.Validation(str_0, str_0)
    var_0 = validation_2.__str__()


def test_case_4():
    none_type_0 = None
    bool_0 = False
    list_0 = []
    bool_1 = False
    tuple_0 = (bool_0, list_0, bool_1)
    validation_0 = module_0.Validation(tuple_0, list_0)
    var_0 = validation_0.to_either()
    var_0.ap(none_type_0)


def test_case_5():
    int_0 = 3996
    var_0 = int_0.__str__()


def test_case_6():
    int_0 = 3994
    var_0 = module_0.Validation(int_0, int_0)


def test_case_7():
    bytes_0 = b"\xf4\xc9|B\xf9S\xa6K\xfd6w\xc6K2\xe4"
    none_type_0 = None
    validation_0 = module_0.Validation(bytes_0, none_type_0)
    validation_0.to_either()


def test_case_8():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.to_lazy()
    var_2 = validation_0.to_lazy()
    var_3 = var_2.to_try()
    validation_0.is_fail()


def test_case_9():
    bool_0 = False
    list_0 = [bool_0]
    str_0 = "\n        Applies the function inside the Lazy[A] structure to another applicative type for notempty Lazy.\n        For empty returns copy of itself\n\n        :param applicative: applicative contains function\n        :type applicative: Lazy[Function(A) -> B]\n        :returns: new Lazy with result of contains function\n        :rtype: Lazy[B]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    validation_0.map(list_0)


def test_case_10():
    str_0 = "\n        Applies the function inside the Box[A] structure to another applicative type.\n\n        :param applicative: applicative contains function\n        :type applicative: Box[B]\n        :returns: new Box with result of contains function\n        :rtype: Box[A(B)]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    validation_0.bind(str_0)


def test_case_11():
    str_0 = "\n        :param semigroup: other semigroup to concat\n        :type semigroup: All[B]\n        :returns: new All with last truly value or first falsy\n        :rtype: All[A | B]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    validation_0.ap(validation_0)


def test_case_12():
    str_0 = ""
    none_type_0 = None
    validation_0 = module_0.Validation(str_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.__str__()


def test_case_13():
    bytes_0 = b"\xb1\x996\x10[K\x1e+\xe9"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_try()
    var_0.to_maybe()


def test_case_14():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_0.to_maybe()


def test_case_15():
    int_0 = 1
    none_type_0 = None
    validation_0 = module_0.Validation(int_0, none_type_0)
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    validation_1 = module_0.Validation(set_0, set_0)
    str_0 = "aqr&-^\x0bh"
    validation_2 = module_0.Validation(str_0, str_0)
    var_0 = validation_2.to_either()


def test_case_16():
    str_0 = "<qh7"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_try()
    var_1.to_lazy()


def test_case_17():
    none_type_0 = None
    none_type_1 = None
    bool_0 = False
    list_0 = []
    bool_1 = False
    tuple_0 = (bool_0, list_0, bool_1)
    validation_0 = module_0.Validation(tuple_0, list_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_maybe()
    validation_1 = module_0.Validation(none_type_0, none_type_1)
    var_0.ap(none_type_1)
