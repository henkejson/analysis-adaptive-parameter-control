# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    str_0 = ""
    str_1 = ""
    set_0 = {str_1, str_1, str_1, str_1}
    bytes_0 = b"\xe8F\x03\xa5\x0f'\x1b\x8d\x1d"
    none_type_0 = None
    validation_0 = module_0.Validation(bytes_0, none_type_0)
    var_0 = validation_0.__eq__(set_0)
    var_0.ap(str_0)


def test_case_1():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.__str__()


def test_case_2():
    dict_0 = {}
    int_0 = 3463
    int_1 = -2946
    set_0 = {int_0, int_0, int_0, int_1}
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.__str__()
    validation_1 = module_0.Validation(validation_0, set_0)
    var_0.ap(dict_0)


def test_case_3():
    float_0 = -3202.0
    set_0 = {float_0}
    validation_0 = module_0.Validation(float_0, set_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.is_success()
    var_1.map(validation_0)


def test_case_4():
    float_0 = 296.0
    dict_0 = {}
    bytes_0 = b"\xf8\xc2\x9es\x02u\x8b\xa3)h\x94d\xae3"
    validation_0 = module_0.Validation(dict_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.bind(dict_0)
    var_2 = var_1.__str__()
    var_3 = var_0.__eq__(float_0)
    var_3.is_success()


def test_case_5():
    bool_0 = True
    bool_0.to_lazy()


def test_case_6():
    bool_0 = True
    var_0 = module_0.Validation(bool_0, bool_0)


def test_case_7():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.is_fail()


def test_case_8():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.__eq__(set_0)
    var_2 = validation_0.to_box()
    var_3 = validation_0.to_maybe()
    var_4 = var_2.to_either()
    var_5 = validation_0.__str__()
    validation_0.map(validation_0)


def test_case_9():
    bool_0 = True
    bool_1 = True
    validation_0 = module_0.Validation(bool_1, bool_1)
    validation_0.bind(bool_0)


def test_case_10():
    none_type_0 = None
    str_0 = "\n        Transform Validation to Try.\n\n        :returns: successfully Try with Validation value value. Try is successful when Validation has no errors\n        :rtype: Try[A]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    validation_0.ap(none_type_0)


def test_case_11():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.is_success()
    var_1 = validation_0.__str__()
    var_2 = validation_0.to_box()


def test_case_12():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(bool_0)
    var_1 = validation_0.to_lazy()
    var_2 = var_1.to_try()
    var_2.ap(var_1)


def test_case_13():
    float_0 = -1691.987
    validation_0 = module_0.Validation(float_0, float_0)
    validation_0.to_try()


def test_case_14():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    int_0 = 1765
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.__eq__(set_0)
    var_2 = validation_0.to_box()
    var_3 = validation_0.__eq__(int_0)
    var_4 = validation_0.to_maybe()
    var_5 = validation_0.to_either()
    var_4.to_maybe()


def test_case_15():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    int_0 = 1765
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.__eq__(set_0)
    var_2 = validation_0.to_box()
    var_3 = validation_0.__eq__(int_0)
    var_4 = validation_0.to_maybe()
    var_5 = var_2.to_either()
    var_6 = var_2.to_maybe()
    var_7 = validation_0.__str__()
    none_type_0 = None
    validation_1 = module_0.Validation(int_0, none_type_0)
    var_8 = validation_0.__eq__(validation_1)
    var_5.ap(var_3)
