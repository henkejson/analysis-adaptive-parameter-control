# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bytes_0 = b"\x80\x9a\x11\xb9\xdb~ \xf1\xe4\x0bA\xed{\xed\xa4\xb4\xe4"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    none_type_0 = None
    validation_1 = module_0.Validation(bytes_0, none_type_0)
    var_0 = validation_0.is_success()
    var_1 = validation_0.__eq__(none_type_0)
    var_1.to_either()


def test_case_1():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.is_fail()
    var_1 = validation_0.__str__()
    var_0.to_lazy()


def test_case_2():
    bytes_0 = b'\x89\xc0"!\xa1\x81\x16'
    str_0 = "\n        Transform Box into Validation.\n\n        :returns: failed Validation monad with previous value as error\n        :rtype: Validation[None, [A]]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(bytes_0)
    bool_0 = False
    tuple_0 = (bool_0,)
    validation_1 = module_0.Validation(tuple_0, tuple_0)
    var_1 = validation_1.__str__()
    var_2 = validation_1.to_try()
    var_2.is_fail()


def test_case_3():
    bytes_0 = b"\xeb"
    set_0 = {bytes_0}
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    bool_1 = False
    bool_2 = True
    dict_0 = {bool_1: bool_1, bool_2: bool_2, bool_2: bool_1}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.bind(list_0)
    var_2 = var_1.to_maybe()
    var_3 = var_2.__eq__(set_0)


def test_case_4():
    bytes_0 = b"\x80\x9a\x11\xb9\xdb~ \xf1\xe4\x0bA\xed{\xed\xa4\xb4\xe4"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_box()


def test_case_5():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_6():
    int_0 = 984
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.is_fail()


def test_case_7():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.map(validation_0)


def test_case_8():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.bind(validation_0)


def test_case_9():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    list_0 = [validation_0, validation_0, validation_0, bool_0]
    validation_0.ap(list_0)


def test_case_10():
    bytes_0 = b'\x89\xc0"!\xa1\x81\x16'
    str_0 = "\n        Transform Box into Validation.\n\n        :returns: failed Validation monad with previous value as error\n        :rtype: Validation[None, [A]]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.is_fail()
    var_1 = validation_0.__eq__(bytes_0)
    bool_0 = False
    tuple_0 = (bool_0,)
    validation_1 = module_0.Validation(tuple_0, tuple_0)
    var_2 = validation_1.__str__()
    var_3 = validation_1.to_try()
    var_4 = validation_1.to_box()
    var_3.is_fail()


def test_case_11():
    bytes_0 = b'\x89\xc0"!\xa1\x81\x16'
    str_0 = "\n        Transform Box into Validation.\n\n        :returns: failed Validation monad with previous value as error\n        :rtype: Validation[None, [A]]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(bytes_0)
    validation_1 = validation_0.to_lazy()
    var_1 = validation_1.__str__()
    var_2 = validation_1.to_try()
    var_2.is_fail()


def test_case_12():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.to_try()


def test_case_13():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_either()
    var_0.to_either()


def test_case_14():
    bytes_0 = b"\x80\x9a\x11\xb9\xdb~ \xf1\xe4\x0bA\xed{\xed\xa4\xb4\xe4"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.is_success()


def test_case_15():
    bytes_0 = b'\x89\xc0"!\xa1\x81\x16'
    str_0 = "\n        Transform Box into Validation.\n\n        :returns: failed Validation monad with previous value as error\n        :rtype: Validation[None, [A]]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(bytes_0)
    bool_0 = False
    tuple_0 = (bool_0,)
    validation_1 = module_0.Validation(tuple_0, tuple_0)
    var_1 = validation_0.__eq__(validation_1)
    var_2 = validation_1.__str__()
    var_3 = validation_1.to_try()
    var_3.is_fail()


def test_case_16():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_box()
    var_1.bind(tuple_0)
