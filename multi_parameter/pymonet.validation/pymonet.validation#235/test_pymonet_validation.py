# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bool_0 = False
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(bool_0)
    var_0.to_either()


def test_case_1():
    list_0 = []
    none_type_0 = None
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_try()
    var_1 = validation_0.to_box()
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    int_0 = -933
    bool_0 = True
    validation_2 = module_0.Validation(bool_0, bool_0)
    var_2 = var_1.__eq__(var_1)
    var_3 = validation_0.to_either()
    validation_3 = module_0.Validation(list_0, var_1)
    validation_2.bind(int_0)


def test_case_2():
    bytes_0 = b"}\x04\x04\xe5\xe4\x0e?-\x08\xa3\xeb\xee_"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    validation_0 = module_0.Validation(dict_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_0.is_fail()


def test_case_3():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)


def test_case_4():
    float_0 = 4450.464708
    validation_0 = module_0.Validation(float_0, float_0)
    validation_0.is_success()


def test_case_5():
    bytes_0 = b"z\x83\xcd]\xb4\x06\xda\x01\x85\nA\xe3*\xd0Z\xfbI\x11"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.is_success()
    validation_1 = module_0.Validation(var_0, var_0)
    validation_1.is_fail()


def test_case_6():
    bool_0 = True
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(bool_0)
    var_1 = var_0.__str__()
    validation_0.map(none_type_0)


def test_case_7():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    validation_1 = module_0.Validation(validation_0, validation_0)
    var_0 = validation_1.__eq__(validation_1)
    validation_0.bind(var_0)


def test_case_8():
    complex_0 = 259.05 + 508j
    dict_0 = {complex_0: complex_0}
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.__eq__(dict_0)
    var_2 = validation_0.to_try()
    validation_0.ap(var_1)


def test_case_9():
    bool_0 = False
    none_type_0 = None
    validation_0 = module_0.Validation(bool_0, none_type_0)
    var_0 = validation_0.to_box()
    validation_0.to_try()


def test_case_10():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_lazy()
    var_0.is_fail()


def test_case_11():
    str_0 = "\ta(?@~B~8;Xd"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.to_lazy()
    var_2 = var_1.to_either()
    var_3 = validation_0.to_try()
    var_4 = validation_0.__eq__(var_3)
    var_5 = var_3.__eq__(str_0)
    var_4.to_maybe()


def test_case_12():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.to_try()


def test_case_13():
    complex_0 = 259.05 + 508j
    dict_0 = {complex_0: complex_0}
    validation_0 = module_0.Validation(dict_0, dict_0)
    validation_1 = module_0.Validation(validation_0, validation_0)
    var_0 = validation_1.__eq__(validation_1)
    var_1 = validation_0.__str__()
    var_2 = validation_0.to_lazy()
    var_3 = var_2.map(complex_0)
    var_1.to_box()


def test_case_14():
    complex_0 = 259.05 + 508j
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_lazy()
    var_2 = var_1.map(complex_0)
    var_3 = validation_0.to_box()
    var_4 = var_1.__str__()
    var_2.is_fail()


def test_case_15():
    complex_0 = 259.05 + 508j
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    validation_1 = module_0.Validation(validation_0, validation_0)
    var_0 = validation_1.__eq__(validation_1)
    var_1 = validation_0.__str__()
    validation_1.map(complex_0)


def test_case_16():
    bool_0 = False
    bool_1 = False
    tuple_0 = (bool_1, bool_1, bool_1, bool_1)
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.__str__()
    var_1.map(bool_0)


def test_case_17():
    complex_0 = 259.05 + 508j
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    validation_1 = validation_0.to_maybe()
    var_0 = validation_1.__eq__(validation_1)
    var_1 = validation_0.__str__()
    var_2 = validation_0.to_lazy()
    var_3 = var_2.map(complex_0)
    var_1.to_box()


def test_case_18():
    complex_0 = 259.05 + 508j
    dict_0 = {complex_0: complex_0}
    tuple_0 = ()
    none_type_0 = None
    validation_0 = module_0.Validation(dict_0, none_type_0)
    validation_1 = module_0.Validation(dict_0, tuple_0)
    var_0 = validation_0.__eq__(validation_1)
    var_1 = var_0.__str__()
    var_1.to_lazy()
