# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    str_0 = "|R<"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(validation_0)


def test_case_1():
    str_0 = "\n        Returns new ImmutableList with each element mapped into\n        result of argument called with each element of ImmutableList\n\n        :param fn: function to call with ImmutableList value\n        :type fn: Function(A) -> B\n        :returns: ImmutableList[B]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.is_success()
    var_2 = validation_0.__eq__(var_1)
    var_3 = validation_0.is_success()
    var_1.to_try()


def test_case_2():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.__str__()
    var_0.to_box()


def test_case_3():
    str_0 = "\n        Returns new ImmutableList with each element mapped into\n        result of argument called with each element of ImmutableList\n\n        :param fn: function to call with ImmutableList value\n        :type fn: Function(A) -> B\n        :returns: ImmutableList[B]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_either()
    var_2 = validation_0.to_lazy()
    var_3 = validation_0.to_maybe()
    var_4 = validation_0.is_success()
    var_5 = validation_0.__eq__(validation_0)
    validation_0.map(var_3)


def test_case_4():
    str_0 = "\n        Returns new ImmutableList with each element mapped into\n        result of argument called with each element of ImmutableList\n\n        :param fn: function to call with ImmutableList value\n        :type fn: Function(A) -> B\n        :returns: ImmutableList[B]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.is_success()
    var_2 = validation_0.to_box()


def test_case_5():
    str_0 = "|=22"
    validation_0 = module_0.Validation(str_0, str_0)


def test_case_6():
    str_0 = "|=22"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()


def test_case_7():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.is_fail()


def test_case_8():
    str_0 = "\n        Returns new ImmutableList with each element mapped into\n        result of argument called with each element of ImmutableList\n\n        :param fn: function to call with ImmutableList value\n        :type fn: Function(A) -> B\n        :returns: ImmutableList[B]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.is_success()
    var_1 = validation_0.__eq__(validation_0)
    validation_0.map(str_0)


def test_case_9():
    int_0 = 1
    bool_0 = False
    list_0 = [bool_0]
    validation_0 = module_0.Validation(list_0, list_0)
    validation_0.bind(int_0)


def test_case_10():
    list_0 = []
    str_0 = "|=22"
    validation_0 = module_0.Validation(str_0, str_0)
    validation_0.ap(list_0)


def test_case_11():
    bytes_0 = b"A\x02|#"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_lazy()


def test_case_12():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_either()
    var_2 = var_1.to_lazy()
    bool_1 = True
    validation_1 = module_0.Validation(bool_1, bool_1)
    var_3 = validation_1.to_box()
    var_4 = var_3.to_lazy()
    var_5 = var_4.bind(var_2)
    var_5.to_lazy()


def test_case_13():
    str_0 = "\n        Returns new ImmutableList with each element mapped into\n        result of argument called with each element of ImmutableList\n\n        :param fn: function to call with ImmutableList value\n        :type fn: Function(A) -> B\n        :returns: ImmutableList[B]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_try()
    var_1 = validation_0.is_success()
    var_2 = var_0.__eq__(var_0)
    var_3 = validation_0.to_maybe()


def test_case_14():
    str_0 = ""
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.is_success()
    var_1 = validation_0.__str__()
    var_2 = validation_0.to_either()
    var_3 = validation_0.to_lazy()
    var_4 = validation_0.to_maybe()
    var_5 = validation_0.to_try()
    var_6 = validation_0.is_success()
    validation_0.map(var_4)


def test_case_15():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_either()
    var_0.is_success()


def test_case_16():
    str_0 = "\n        Returns new ImmutableList with each element mapped into\n        result of argument called with each element of ImmutableList\n\n        :param fn: function to call with ImmutableList value\n        :type fn: Function(A) -> B\n        :returns: ImmutableList[B]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = module_0.Validation(validation_0, validation_0)
    var_2 = validation_0.to_maybe()
    var_3 = validation_0.is_success()
    var_4 = validation_0.is_fail()
    var_5 = validation_0.__eq__(var_1)
    var_6 = validation_0.to_either()
    var_6.to_either()
