# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bool_0 = False
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, bool_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_1 = module_0.Validation(var_0, var_0)
    var_1 = validation_1.__eq__(none_type_0)
    var_1.map(validation_0)


def test_case_1():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    list_0 = [bool_0, bool_0, bool_0, dict_0]
    validation_0 = module_0.Validation(bool_0, list_0)
    var_0 = validation_0.__eq__(bool_0)
    var_0.is_success()


def test_case_2():
    str_0 = "c8E5RIZa6E"
    validation_0 = module_0.Validation(str_0, str_0)


def test_case_3():
    bytes_0 = b'\xb0u\x83\x0e"\xf4\xfc\x10ag\x04\xa4'
    none_type_0 = None
    validation_0 = module_0.Validation(bytes_0, none_type_0)
    validation_0.to_either()


def test_case_4():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    list_0 = [bool_0, bool_0, bool_0, dict_0]
    validation_0 = module_0.Validation(bool_0, list_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.__eq__(bool_0)
    var_2 = validation_0.to_lazy()
    var_3 = validation_0.is_fail()
    validation_1 = module_0.Validation(dict_0, var_1)
    var_1.is_success()


def test_case_5():
    int_0 = 0
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.map(int_0)


def test_case_6():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.bind(set_0)


def test_case_7():
    int_0 = 0
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.ap(int_0)


def test_case_8():
    bytes_0 = b",\x8b\xce\tQ\xf9ZG"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_box()
    var_0.to_box()


def test_case_9():
    bytes_0 = b"Y\x1e\x7f\x0e\xe4XC\xf2\xb5\xf1\xa4\xf9\x8d8\xdb\x8c\x87A\xf9"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_try()
    var_1.is_fail()


def test_case_10():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.__str__()
    var_1 = var_0.__eq__(tuple_1)
    var_1.is_success()


def test_case_11():
    int_0 = 3495
    str_0 = "X!yOm8`YAG2^g)"
    var_0 = module_0.Validation(int_0, str_0)
    var_1 = var_0.__str__()


def test_case_12():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    list_0 = [bool_0, bool_0, bool_0, dict_0]
    validation_0 = module_0.Validation(bool_0, list_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.__eq__(bool_0)
    var_2 = validation_0.to_try()
    var_1.is_success()


def test_case_13():
    int_0 = 3495
    dict_0 = {int_0: int_0}
    validation_0 = module_0.Validation(int_0, dict_0)
    var_0 = validation_0.__eq__(int_0)
    var_1 = validation_0.to_either()
    validation_1 = module_0.Validation(var_1, var_1)
    var_0.is_fail()


def test_case_14():
    int_0 = 3495
    dict_0 = {}
    validation_0 = module_0.Validation(int_0, dict_0)
    var_0 = validation_0.__eq__(int_0)
    var_1 = validation_0.to_either()
    validation_1 = module_0.Validation(var_1, var_1)
    var_1.is_success()


def test_case_15():
    bool_0 = False
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, bool_0)
    var_0 = validation_0.__eq__(validation_0)
    none_type_1 = None
    validation_1 = module_0.Validation(var_0, var_0)
    var_1 = validation_1.to_lazy()
    validation_2 = module_0.Validation(var_0, none_type_1)
    var_2 = validation_2.to_lazy()
    var_3 = var_1.to_box()
    var_4 = var_2.ap(var_2)
    var_5 = validation_0.__eq__(validation_2)
    var_1.is_fail()


def test_case_16():
    float_0 = -3182.1
    str_0 = "Min[value={}]"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.map(float_0)
    var_2 = var_1.to_box()
    var_2.to_box()


def test_case_17():
    bytes_0 = b"\xe9\xd7x"
    dict_0 = {}
    validation_0 = module_0.Validation(bytes_0, dict_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_box()
    var_2 = var_1.to_try()
    tuple_0 = (dict_0,)
    validation_1 = module_0.Validation(dict_0, tuple_0)
    validation_1.map(dict_0)
