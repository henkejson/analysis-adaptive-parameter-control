# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)
    var_0.to_box()


def test_case_1():
    bool_0 = True
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(bool_0)
    var_0.to_try()


def test_case_2():
    str_0 = "\n        Transform Validation to Try.\n\n        :returns: successfully Try with Validation value value. Try is successful when Validation has no errors\n        :rtype: Try[A]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_box()
    var_2 = validation_0.to_either()
    var_2.to_either()


def test_case_3():
    str_0 = "\n        Transform Validation to Try.\n\n        :returns: successfully Try with Validation value value. Try is successful when Validation has no errors\n        :rtype: Try[A]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.to_either()
    var_1.to_either()


def test_case_4():
    none_type_0 = None
    str_0 = "\n        :param constructor_fn: function to call during fold method call\n        :type constructor_fn: Function() -> A\n        "
    validation_0 = module_0.Validation(none_type_0, str_0)
    var_0 = validation_0.to_maybe()
    var_0.to_maybe()


def test_case_5():
    str_0 = "\n        Returns new ImmutableList with each element mapped into\n        result of argument called with each element of ImmutableList\n\n        :param fn:Ufunction to call with ImmutableList value\n        :type fn:hFunction(A) -> B\n        :returns: ImmutableList[B]\n        "
    validation_0 = module_0.Validation(str_0, str_0)


def test_case_6():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.to_either()


def test_case_7():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_0.is_fail()


def test_case_8():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.map(none_type_0)


def test_case_9():
    none_type_0 = None
    complex_0 = 1970 - 425.757j
    validation_0 = module_0.Validation(complex_0, complex_0)
    validation_0.bind(none_type_0)


def test_case_10():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.ap(validation_0)


def test_case_11():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.__str__()


def test_case_12():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_try()
    var_1.is_fail()


def test_case_13():
    str_0 = "\n        Returns new ImmutableList with each element mapped into\n        result of argument called with each element of ImmutableList\n\n        :param fn: function to call with ImmutableList value\n        :type fn: Function(A) -> B\n        :returns: ImmutableList[B]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    validation_1.to_try()


def test_case_14():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.__str__()
    list_0 = []
    validation_1 = module_0.Validation(list_0, list_0)
    var_2 = validation_1.to_box()
    var_3 = validation_1.to_maybe()
    var_2.is_fail()


def test_case_15():
    float_0 = -3601.3959384421346
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.__eq__(set_0)
    var_1 = validation_0.__eq__(float_0)
    var_2 = validation_0.__str__()
    validation_1 = module_0.Validation(set_0, var_1)
    var_3 = module_0.Validation(float_0, validation_1)
    var_2.to_maybe()


def test_case_16():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_1 = module_0.Validation(validation_0, validation_0)
    var_0 = validation_1.__eq__(validation_0)
    var_1 = var_0.__eq__(var_0)
    var_1.to_maybe()
