# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    str_0 = "$-Fc[f0;<V69Sg` 8y\x0b"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(str_0)
    var_1 = validation_0.to_try()
    str_0.to_box()


def test_case_1():
    str_0 = "\n        Returns Lazy with function returning argument.\n\n        :param value: value to return by Lazy constructor_fn\n        :type value: Any\n        :returns: Lazy with function returning argument\n        :rtype: Lazy[Function() -> A]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    var_0.map(str_0)


def test_case_2():
    int_0 = 0
    none_type_0 = None
    bytes_0 = b'\x97\xd8B{\xf9\xaf\x19y\x8e\xd9N"\x1d\xb0\xb3'
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.__eq__(none_type_0)
    var_1.map(int_0)


def test_case_3():
    bytes_0 = b"%\xa9i\xdar\x8c\xcb\xb8\xe8\xba\x1bI"
    list_0 = []
    validation_0 = module_0.Validation(bytes_0, list_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_box()
    var_2 = validation_0.__str__()
    none_type_0 = None
    str_0 = "\n        Transform Box into Validation.\n\n        :returns: successfull Validation monad with previous value\n        :rtype: Validation[A, []]\n        "
    set_0 = {str_0, str_0, str_0}
    validation_1 = module_0.Validation(set_0, set_0)
    var_3 = validation_1.__eq__(none_type_0)
    var_3.ap(list_0)


def test_case_4():
    str_0 = "$-Fc[f0;<V69Sg` 8y\x0b"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.__eq__(var_0)
    var_2 = var_0.to_try()
    var_3 = validation_0.to_maybe()
    var_1.to_box()


def test_case_5():
    complex_0 = -1591 - 49j
    validation_0 = module_0.Validation(complex_0, complex_0)


def test_case_6():
    bytes_0 = b'\xb8\xbf"\x119\x13\x90\xdc'
    dict_0 = {bytes_0: bytes_0}
    none_type_0 = None
    validation_0 = module_0.Validation(dict_0, none_type_0)
    validation_0.__str__()


def test_case_7():
    str_0 = "\n    The Try control gives us the ability write safe code\n    without focusing on try-catch blocks in the presence of exceptions.\n    "
    none_type_0 = None
    validation_0 = module_0.Validation(str_0, none_type_0)
    var_0 = validation_0.to_lazy()
    str_1 = "@yh  7k"
    none_type_1 = None
    validation_1 = module_0.Validation(str_1, none_type_1)
    validation_1.is_fail()


def test_case_8():
    none_type_0 = None
    none_type_1 = None
    validation_0 = module_0.Validation(none_type_1, none_type_1)
    validation_0.map(none_type_0)


def test_case_9():
    str_0 = "$-Fc[f0;<V69Sg` 8y\x0b"
    none_type_0 = None
    str_1 = "Y(B7\\[D/>Yy"
    validation_0 = module_0.Validation(none_type_0, str_1)
    var_0 = validation_0.to_either()
    var_1 = var_0.map(str_0)
    var_2 = var_1.to_lazy()
    var_3 = var_1.to_box()
    validation_1 = module_0.Validation(str_0, str_0)
    var_4 = validation_1.to_box()
    var_5 = validation_1.__eq__(str_0)
    validation_1.bind(var_2)


def test_case_10():
    none_type_0 = None
    bytes_0 = b'\x97\xd8B{\xf9\xaf\x19y\x8e\xd9N"\x1d\xb0\xb3'
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    validation_0.ap(none_type_0)


def test_case_11():
    str_0 = "$-Fc[f0;<V69Sg` 8y\x0b"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.__eq__(str_0)
    var_2 = validation_0.to_try()
    var_0.to_box()


def test_case_12():
    bytes_0 = b"\x98\x02"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, bytes_0)
    bool_0 = False
    tuple_0 = (bool_0,)
    validation_1 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_1.to_lazy()
    var_1 = validation_1.to_try()
    var_2 = var_0.ap(validation_1)
    var_3 = validation_1.to_box()
    var_4 = var_0.to_try()
    validation_2 = module_0.Validation(none_type_0, var_4)
    var_4.to_box()


def test_case_13():
    str_0 = 'Ww,3QA,g"{[aUjT7nc'
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_try()
    var_0.to_maybe()


def test_case_14():
    none_type_0 = None
    str_0 = "Y(B7\\[D/>Yy"
    str_1 = 'n*P;*(z,"Ci9R'
    validation_0 = module_0.Validation(none_type_0, str_1)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_lazy()
    var_2 = validation_0.to_box()
    validation_1 = module_0.Validation(str_0, var_0)
    var_3 = validation_1.to_box()
    var_4 = validation_1.__eq__(var_1)
    var_5 = validation_0.__eq__(validation_0)
    var_6 = var_2.to_try()
    validation_1.map(validation_1)


def test_case_15():
    str_0 = "Y(B7\\[D/>Yy"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_lazy()
    var_2 = validation_0.to_box()
    validation_1 = module_0.Validation(var_1, var_1)
    var_3 = var_0.to_box()
    var_4 = validation_0.__eq__(validation_1)
    var_5 = validation_1.__eq__(var_2)
    var_6 = validation_0.to_try()
    var_7 = var_0.bind(var_3)
    var_0.to_either()


def test_case_16():
    dict_0 = {}
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, dict_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_box()
    var_1.is_success()
