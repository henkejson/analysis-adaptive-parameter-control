# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0
import builtins as module_1


def test_case_0():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(none_type_0)
    var_0.is_success()


def test_case_1():
    str_0 = "4WOI'"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    object_0 = module_1.object()


def test_case_2():
    str_0 = "\n        Transform Either to Try.\n\n        :returns: resolved Try monad with previous value. Right is resolved successfully, Left not.\n        :rtype: Box[A]\n        "
    str_1 = ""
    validation_0 = module_0.Validation(str_1, str_1)
    var_0 = validation_0.is_success()
    var_1 = validation_0.is_success()
    var_2 = validation_0.to_either()
    var_3 = var_2.__str__()
    var_4 = var_1.__eq__(str_0)
    var_4.to_maybe()


def test_case_3():
    str_0 = "iSRA-"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()


def test_case_4():
    bool_0 = True
    str_0 = "4WOI'"
    validation_0 = module_0.Validation(bool_0, str_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_1 = module_0.Validation(str_0, str_0)
    var_1 = validation_1.to_maybe()
    var_2 = validation_0.is_success()
    var_3 = validation_1.is_success()
    var_4 = validation_0.__str__()
    var_2.to_maybe()


def test_case_5():
    str_0 = "4OI'"
    validation_0 = module_0.Validation(str_0, str_0)


def test_case_6():
    none_type_0 = None
    str_0 = "<h:d%[7X"
    validation_0 = module_0.Validation(none_type_0, str_0)
    var_0 = validation_0.is_fail()
    var_0.to_maybe()


def test_case_7():
    bool_0 = True
    str_0 = "4WOI'"
    validation_0 = module_0.Validation(bool_0, str_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_1 = module_0.Validation(str_0, str_0)
    var_1 = validation_1.is_success()
    var_2 = validation_0.__str__()
    var_3 = validation_0.to_either()
    var_4 = var_3.to_maybe()
    validation_0.map(var_4)


def test_case_8():
    bytes_0 = b"q\x94v\xf6\x17-g\xe4\xdeC\xa3\xc6\xc1Q~z\xf8\xca"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.bind(bytes_0)


def test_case_9():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.ap(none_type_0)


def test_case_10():
    bool_0 = False
    str_0 = "4WOI'"
    validation_0 = module_0.Validation(bool_0, str_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_box()
    var_2 = validation_0.__str__()


def test_case_11():
    bytes_0 = b"JO\x80\xae\xa5\xdc\xed\x90\xe0\x18\xf5L\x1a\xe5\xf0\x9fBAS\xf1"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_box()
    var_2 = var_1.to_try()
    var_3 = var_2.__str__()
    var_3.to_try()


def test_case_12():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.to_try()


def test_case_13():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_maybe()
    var_0.to_maybe()


def test_case_14():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.__str__()
    var_0.to_try()


def test_case_15():
    bool_0 = True
    str_0 = "4WOI'"
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_box()
    validation_1 = module_0.Validation(bool_0, str_0)
    var_1 = validation_1.__eq__(validation_1)
    validation_2 = module_0.Validation(str_0, str_0)
    var_2 = validation_0.__eq__(validation_1)
    validation_3 = module_0.Validation(var_0, validation_1)
    var_3 = var_0.__eq__(validation_3)
    var_3.to_maybe()
