# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    none_type_0 = None
    str_0 = ".uAblk49'PA.,f;]$}"
    validation_0 = module_0.Validation(str_0, str_0)
    validation_1 = module_0.Validation(none_type_0, str_0)
    var_0 = validation_1.is_fail()
    var_1 = validation_1.__eq__(validation_1)
    var_2 = var_0.__str__()


def test_case_1():
    str_0 = "\n        Transform Either to Try.\n\n        :returns: resolved Try monad with previous value. Right is resolved successfully, Left not.\n        :rtype: Box[A]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.__eq__(str_0)
    var_2 = validation_0.__str__()
    var_3 = var_0.to_box()
    validation_0.map(var_3)


def test_case_2():
    str_0 = "\n        Transform Either to Try.\n\n        :returns: resolved Try monad with previous value. Right is resolved successfully, Left not.\n        :rtype: Box[A]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    var_0.to_either()


def test_case_3():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_maybe()


def test_case_4():
    str_0 = "ImmutableList{}"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, str_0)
    var_0 = validation_0.to_box()
    none_type_1 = None
    validation_1 = module_0.Validation(none_type_1, str_0)
    var_1 = validation_1.to_maybe()
    validation_2 = module_0.Validation(var_1, none_type_1)
    dict_0 = {str_0: str_0, str_0: str_0}
    none_type_2 = None
    var_2 = validation_1.is_fail()
    validation_3 = module_0.Validation(dict_0, none_type_2)
    validation_3.is_success()


def test_case_5():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_6():
    int_0 = 40
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.is_fail()


def test_case_7():
    list_0 = []
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.map(list_0)


def test_case_8():
    int_0 = 2919
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.bind(int_0)


def test_case_9():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.ap(none_type_0)


def test_case_10():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_box()
    var_0.to_box()


def test_case_11():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_lazy()


def test_case_12():
    bytes_0 = b"\xfb\x9f\xb8N"
    list_0 = [bytes_0, bytes_0, bytes_0]
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_try()
    var_1.to_maybe()


def test_case_13():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.to_try()


def test_case_14():
    str_0 = ".uAblk49'PA.,f;]$}"
    validation_0 = module_0.Validation(str_0, str_0)
    int_0 = 519
    list_0 = [int_0]
    none_type_0 = None
    validation_1 = module_0.Validation(list_0, none_type_0)
    var_0 = validation_1.__eq__(validation_0)
    var_0.is_fail()


def test_case_15():
    str_0 = ".uAblk49'PA.,f;]$}"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    var_0.to_either()


def test_case_16():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.is_fail()
    var_1 = validation_0.__str__()
    var_1.is_success()


def test_case_17():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_either()
    var_2 = validation_0.to_maybe()
    var_3 = validation_0.is_fail()
