# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bytes_0 = b"x\xc9\xbez"
    none_type_0 = None
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(none_type_0)
    var_0.to_box()


def test_case_1():
    str_0 = "\n        If Maybe is empty or filterer returns False return default_value, in other case\n        return new instance of Maybe with the same value.\n\n        :param filterer:\n        :type filterer: Function(A) -> Boolean\n        :returns: copy of self when filterer returns True, in other case empty Maybe\n        :rtype: Maybe[A] | Maybe[None]\n        "
    list_0 = [str_0]
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.__str__()


def test_case_2():
    bytes_0 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_maybe()
    var_2 = validation_0.is_fail()
    var_3 = validation_0.__eq__(var_1)
    var_4 = validation_0.__str__()
    int_0 = 1959
    var_0.ap(int_0)


def test_case_3():
    bytes_0 = b"x\xc9\xbez"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.is_fail()
    var_2 = validation_0.__eq__(var_1)
    var_3 = validation_0.__eq__(validation_0)
    var_4 = validation_0.to_lazy()
    var_1.map(bytes_0)


def test_case_4():
    bytes_0 = b"x\xc9\xbez"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.to_either()
    var_1.is_fail()


def test_case_5():
    none_type_0 = None
    none_type_0.is_fail()


def test_case_6():
    int_0 = 12
    validation_0 = module_0.Validation(int_0, int_0)


def test_case_7():
    bytes_0 = b"g \x9c\x9b\xec\\\\|C=\xcb\xee\x89\xd3\x16sNC"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_0.map(bytes_0)


def test_case_8():
    int_0 = 516
    list_0 = [int_0]
    validation_0 = module_0.Validation(list_0, int_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.to_lazy()
    str_0 = "\t@\\:Q("
    validation_1 = module_0.Validation(str_0, str_0)
    var_2 = validation_1.to_maybe()
    validation_2 = module_0.Validation(var_2, var_2)
    validation_2.bind(var_1)


def test_case_9():
    bytes_0 = b"x\xc9\xbez"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.__eq__(var_0)
    var_2 = validation_0.__eq__(validation_0)
    var_3 = validation_0.to_lazy()
    var_4 = var_2.__str__()
    validation_0.ap(var_0)


def test_case_10():
    str_0 = "hvzVj5VZc\\wqdkf~"
    set_0 = {str_0, str_0}
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.__eq__(set_0)
    var_1.is_success()


def test_case_11():
    int_0 = -508
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.to_try()


def test_case_12():
    bytes_0 = b"x\xc9\xbez"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.is_fail()
    var_2 = validation_0.__eq__(var_1)
    var_3 = validation_0.__eq__(validation_0)
    var_4 = validation_0.to_lazy()
    var_5 = var_4.to_box()
    var_6 = var_2.__eq__(var_0)
    var_4.is_success()


def test_case_13():
    bytes_0 = b"x\xc9\xbez"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.is_fail()
    var_2 = var_0.__eq__(bytes_0)
    bool_0 = True
    tuple_0 = (var_0, var_2, bool_0)
    var_3 = validation_0.to_box()
    validation_1 = module_0.Validation(tuple_0, var_2)
    var_4 = validation_1.__eq__(validation_0)
    var_5 = validation_0.to_box()
    var_6 = var_5.to_lazy()
    var_7 = var_0.__str__()
    var_8 = var_5.ap(var_6)
    var_9 = var_0.map(var_8)
    var_10 = var_9.ap(bytes_0)
