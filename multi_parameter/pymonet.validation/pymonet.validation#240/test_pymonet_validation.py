# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import builtins as module_0
import pymonet.validation as module_1


def test_case_0():
    object_0 = module_0.object()
    none_type_0 = None
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    tuple_0 = (dict_0,)
    none_type_1 = None
    validation_0 = module_1.Validation(none_type_1, none_type_1)
    var_0 = validation_0.__eq__(tuple_0)
    var_0.bind(none_type_0)


def test_case_1():
    set_0 = set()
    validation_0 = module_1.Validation(set_0, set_0)
    list_0 = []
    validation_1 = module_1.Validation(list_0, list_0)
    var_0 = validation_1.is_fail()
    var_1 = validation_1.is_fail()
    var_2 = validation_1.__str__()
    var_3 = validation_1.to_box()
    var_3.bind(validation_1)


def test_case_2():
    none_type_0 = None
    validation_0 = module_1.Validation(none_type_0, none_type_0)


def test_case_3():
    none_type_0 = None
    validation_0 = module_1.Validation(none_type_0, none_type_0)
    validation_0.__str__()


def test_case_4():
    float_0 = -1735.349104
    none_type_0 = None
    validation_0 = module_1.Validation(float_0, none_type_0)
    validation_0.is_fail()


def test_case_5():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0}
    bool_0 = False
    validation_0 = module_1.Validation(bool_0, dict_0)
    validation_0.map(tuple_0)


def test_case_6():
    bool_0 = False
    none_type_0 = None
    validation_0 = module_1.Validation(none_type_0, none_type_0)
    validation_0.bind(bool_0)


def test_case_7():
    bytes_0 = b"\x0bJ"
    validation_0 = module_1.Validation(bytes_0, bytes_0)
    validation_0.ap(bytes_0)


def test_case_8():
    bool_0 = False
    none_type_0 = None
    validation_0 = module_1.Validation(bool_0, none_type_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.to_try()


def test_case_9():
    none_type_0 = None
    validation_0 = module_1.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()


def test_case_10():
    str_0 = "v"
    bytes_0 = b"j\x7f"
    validation_0 = module_1.Validation(str_0, bytes_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.__eq__(var_0)
    var_2 = validation_0.to_maybe()
    var_3 = var_2.__str__()
    var_4 = var_0.to_try()
    var_5 = var_0.to_either()
    var_6 = var_0.to_box()
    none_type_0 = None
    validation_1 = module_1.Validation(none_type_0, var_6)
    validation_1.to_maybe()


def test_case_11():
    bool_0 = True
    validation_0 = module_1.Validation(bool_0, bool_0)
    validation_0.to_try()


def test_case_12():
    bytes_0 = b""
    validation_0 = module_1.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_maybe()
    validation_1 = module_1.Validation(var_0, var_1)
    validation_2 = module_1.Validation(validation_0, validation_1)
    var_2 = var_1.to_try()
    var_2.to_lazy()


def test_case_13():
    int_0 = -4785
    list_0 = []
    validation_0 = module_1.Validation(list_0, int_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_0.to_either()


def test_case_14():
    str_0 = "v"
    bytes_0 = b"j\x7f"
    validation_0 = module_1.Validation(str_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_either()
    var_2 = validation_0.__str__()
    var_3 = var_2.__eq__(var_1)
    var_2.is_success()


def test_case_15():
    bytes_0 = b'\x7f\xfa\x1f\x97\x8a"wX0\xd58\xeaw\x01'
    str_0 = "Vr4Qr/"
    validation_0 = module_1.Validation(str_0, bytes_0)
    var_0 = validation_0.__eq__(bytes_0)
    var_1 = validation_0.to_maybe()
    var_2 = var_1.__str__()
    var_2.to_try()


def test_case_16():
    tuple_0 = ()
    validation_0 = module_1.Validation(tuple_0, tuple_0)
    bytes_0 = b"j\x7f"
    var_0 = validation_0.to_lazy()
    var_1 = var_0.__eq__(bytes_0)
    var_2 = validation_0.to_maybe()
    var_3 = var_0.__str__()
    var_4 = validation_0.to_try()
    var_5 = validation_0.to_either()
    var_4.to_box()


def test_case_17():
    bytes_0 = b"\xd8\x89\x7fzg"
    str_0 = ""
    validation_0 = module_1.Validation(str_0, bytes_0)
    validation_1 = module_1.Validation(validation_0, validation_0)
    bool_0 = True
    validation_2 = module_1.Validation(bool_0, bytes_0)
    var_0 = validation_2.__eq__(validation_0)
    var_1 = validation_1.__eq__(validation_2)
    var_2 = validation_0.to_maybe()
    var_3 = var_1.__str__()
    var_4 = var_2.to_try()
    var_5 = validation_2.to_either()
    var_6 = var_5.to_box()
    none_type_0 = None
    validation_3 = module_1.Validation(none_type_0, var_0)
    var_7 = var_6.to_maybe()
    var_8 = validation_0.__eq__(bytes_0)
    var_9 = var_4.map(validation_3)
    validation_4 = module_1.Validation(var_3, validation_0)
    var_9.to_maybe()
