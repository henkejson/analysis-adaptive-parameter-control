# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bool_0 = False
    bytes_0 = b"\x99\xefU\xce\x8b\xc4\x18\xd5\x9f\xce\x11"
    bool_1 = False
    validation_0 = module_0.Validation(bool_1, bool_1)
    var_0 = validation_0.__eq__(bytes_0)
    var_0.ap(bool_0)


def test_case_1():
    none_type_0 = None
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.is_success()
    var_1 = validation_0.__str__()
    var_1.bind(none_type_0)


def test_case_2():
    bool_0 = False
    str_0 = "M&G"
    validation_0 = module_0.Validation(bool_0, str_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.__str__()
    var_1.to_lazy()


def test_case_3():
    bytes_0 = b"\x80!\x93\xe0&\x9fu\xe4"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_try()
    var_2 = validation_0.to_lazy()
    validation_1 = module_0.Validation(bytes_0, bytes_0)
    var_1.to_box()


def test_case_4():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.__eq__(validation_0)
    var_1.to_try()


def test_case_5():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    validation_0 = module_0.Validation(dict_0, dict_0)
    int_0 = 2308
    var_0 = validation_0.to_maybe()
    tuple_0 = (int_0,)
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, dict_0)
    validation_2 = module_0.Validation(bool_0, tuple_0)
    var_1 = validation_1.to_maybe()
    validation_2.map(tuple_0)


def test_case_6():
    str_0 = "N\nZQ\r<'~D}zK"
    validation_0 = module_0.Validation(str_0, str_0)


def test_case_7():
    complex_0 = -569.59 + 3415.59744j
    validation_0 = module_0.Validation(complex_0, complex_0)
    validation_0.to_maybe()


def test_case_8():
    str_0 = ")hYtUv33Kw8D&zqJ"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.is_fail()


def test_case_9():
    bytes_0 = b"b\x02e\xc6_w\x9a\x1dd\xe0\x92\xffS,\xd0"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_0.map(validation_0)


def test_case_10():
    str_0 = "$/qCu8d@\\d"
    bytes_0 = b"\xaf\xea\t\x98r\x0e>\x8b\x9b\x96\x82=\x94\xdf~\x0ef\xa3\xf7\xad"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_0.bind(str_0)


def test_case_11():
    none_type_0 = None
    str_0 = "Max[value={}]"
    validation_0 = module_0.Validation(str_0, str_0)
    validation_0.ap(none_type_0)


def test_case_12():
    str_0 = ")hYtUv33Kw8D&zqJ"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_box()


def test_case_13():
    str_0 = "N\nZQ\r<'~D}zK"
    validation_0 = module_0.Validation(str_0, str_0)
    validation_1 = module_0.Validation(str_0, validation_0)
    var_0 = validation_0.to_lazy()


def test_case_14():
    bool_0 = True
    str_0 = "V g]kU'=y]+a_t^"
    tuple_0 = (bool_0, str_0, bool_0)
    int_0 = 1679
    validation_0 = module_0.Validation(tuple_0, int_0)
    validation_0.to_try()


def test_case_15():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    validation_1 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_either()
    var_1 = validation_1.__str__()
    var_2 = validation_1.__eq__(list_0)
    var_3 = validation_1.__str__()
    var_4 = var_3.__eq__(var_2)
    var_2.to_either()


def test_case_16():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.__eq__(validation_0)
    var_0.bind(var_0)


def test_case_17():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_either()
    validation_1 = validation_0.to_lazy()
    var_1 = validation_0.to_either()
    var_2 = validation_1.to_maybe()
    var_3 = validation_0.to_either()
    var_4 = validation_1.__eq__(list_0)
    var_5 = validation_1.__str__()
    var_4.to_either()


def test_case_18():
    list_0 = []
    list_1 = []
    none_type_0 = None
    validation_0 = module_0.Validation(list_1, none_type_0)
    validation_1 = module_0.Validation(list_0, list_0)
    var_0 = validation_1.is_fail()
    var_1 = validation_1.to_maybe()
    var_2 = validation_1.__eq__(validation_0)
    var_3 = validation_1.__eq__(list_0)
    var_4 = validation_0.__eq__(validation_0)
    var_5 = validation_1.__str__()
    bool_0 = False
    var_6 = validation_1.to_maybe()
    var_6.ap(bool_0)
