# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bool_0 = False
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(bool_0)


def test_case_1():
    bytes_0 = b"K\xc1H\xf4\x03\\\xeaL\xc5\xe5\xab\xb8@\xd7]\x92\\I\x0e{"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()


def test_case_2():
    bytes_0 = b"K\xc1H\xf4\x03\\\xeaL\xc5\xe5\xab\xb8@\xd7]\x92\\I\x0e{"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.__str__()
    var_2 = validation_0.is_fail()
    var_3 = validation_0.to_either()
    var_1.to_lazy()


def test_case_3():
    bool_0 = True
    none_type_0 = None
    validation_0 = module_0.Validation(bool_0, none_type_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.to_either()
    str_0 = "8^[z~LR"
    validation_1 = module_0.Validation(str_0, str_0)
    var_2 = validation_1.to_maybe()
    var_3 = var_2.to_either()


def test_case_4():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_5():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.to_either()


def test_case_6():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.is_fail()


def test_case_7():
    bool_0 = False
    int_0 = -805
    list_0 = [bool_0, int_0, int_0, int_0]
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.map(list_0)


def test_case_8():
    bytes_0 = b"K\xc1H\xf4\x03\\\xeaL\xc5\xe5\xab\xb8@\xd7]\x92\\I\x0e{"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.is_success()
    var_2 = validation_0.__str__()
    var_3 = validation_0.to_either()
    var_4 = validation_0.to_maybe()
    var_5 = var_2.__str__()
    validation_0.bind(validation_0)


def test_case_9():
    dict_0 = {}
    bool_0 = False
    none_type_0 = None
    validation_0 = module_0.Validation(bool_0, none_type_0)
    validation_0.ap(dict_0)


def test_case_10():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_box()
    validation_0.__str__()


def test_case_11():
    bytes_0 = b"K\xc1H\xf4\x03\\\xeaL\xc5\xe5\xab\xb8@\xd7]\x92\\I\x0e{"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.__str__()
    var_2 = validation_0.is_fail()
    var_3 = validation_0.to_box()
    var_4 = var_3.__str__()


def test_case_12():
    bytes_0 = b"K\xc1H\xf4\x03\\\xeaL\xc5\xe5\xab\xb8@\xd7]\x92\\I\x0e{"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.__eq__(bytes_0)
    var_2 = validation_0.__str__()
    var_3 = var_2.__str__()
    var_4 = var_0.to_either()
    var_5 = var_4.to_try()
    var_6 = validation_0.to_maybe()
    var_7 = var_1.__str__()
    var_1.to_either()


def test_case_13():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.to_try()


def test_case_14():
    none_type_0 = None
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_either()
    var_0.bind(none_type_0)


def test_case_15():
    bytes_0 = b"\xc1H\xf4\x03\\\xeaL\xc5\xe5\xab\xb8@\xd7]\x92\\I\x0e{"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = module_0.Validation(validation_0, validation_0)
    var_1 = validation_0.__eq__(var_0)
    var_1.is_success()


def test_case_16():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_either()
    var_2 = validation_0.to_maybe()
    var_0.map(validation_0)


def test_case_17():
    dict_0 = {}
    var_0 = dict_0.__eq__(dict_0)
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_1 = validation_0.__str__()
    var_1.map(dict_0)
