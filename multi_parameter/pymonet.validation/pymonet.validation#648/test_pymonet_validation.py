# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0
import builtins as module_1


def test_case_0():
    bytes_0 = b"3w0\x01\x8b\x0b\x85MD\x96;\xb5\\m\xf3\xad"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.__eq__(bytes_0)
    var_2 = validation_0.__str__()
    var_3 = validation_0.__str__()
    validation_0.bind(var_2)


def test_case_1():
    bytes_0 = b"3w0\x01\x8b\x0b\x85MD\x96;\xb5\\m\xf3\xad"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    dict_0 = {}
    validation_1 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_1.to_either()
    var_1 = validation_1.to_try()
    var_2 = validation_0.__eq__(bytes_0)
    var_3 = var_0.to_try()
    var_4 = validation_0.to_either()
    var_5 = validation_1.is_success()
    validation_0.ap(var_0)


def test_case_2():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)


def test_case_3():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.__str__()


def test_case_4():
    bytes_0 = b"\x89\xc4\xb5\x8b\x1a]r\xda\x9f=\x0b\x98e\xea\x8e\x0b"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.is_fail()
    var_0.to_box()


def test_case_5():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.map(none_type_0)


def test_case_6():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.ap(validation_0)


def test_case_7():
    bytes_0 = b"\xf26\xa0f\xd0E\xda\xfc\xb7\xf8\xbc\x8d\xfa"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_box()
    var_0.is_fail()


def test_case_8():
    bool_0 = False
    str_0 = "tF"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.to_box()
    var_1.bind(bool_0)


def test_case_9():
    none_type_0 = None
    int_0 = -2585
    none_type_1 = None
    validation_0 = module_0.Validation(int_0, none_type_1)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_either()
    var_2 = var_1.__eq__(none_type_0)
    bytes_0 = b"\x08\xf9\xb4}\x93\xef\x16\xa6\x03\x93E\xd7\xac\x03\x16+\xa6\x13"
    validation_1 = module_0.Validation(bytes_0, bytes_0)
    var_3 = validation_1.__str__()
    var_4 = var_3.__str__()
    var_4.ap(bytes_0)


def test_case_10():
    bool_0 = True
    str_0 = "\n        Transform Validation to Try.\n\n        :returns: Lazy monad with function returning Validation value\n        :rtype: Lazy[Function() -> (A | None)]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_try()
    var_1 = var_0.__eq__(bool_0)
    var_1.is_success()


def test_case_11():
    bool_0 = False
    str_0 = "\n        Transform Validation to Try.\n\n        :returns: Lazy monad with function returning Validation value\n        :rtype: Lazy[Function() -> (A | None)]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.__eq__(bool_0)
    var_1.is_success()


def test_case_12():
    int_0 = -2318
    validation_0 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_1 = module_0.Validation(var_0, int_0)
    object_0 = module_1.object()
    validation_2 = module_0.Validation(validation_0, var_0)
    validation_2.__str__()


def test_case_13():
    bytes_0 = b"3w0\x01\x8b\x0b\x85MD\x96;\xb5\\m\xf3\xad"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    dict_0 = {}
    validation_1 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_1.to_either()
    var_1 = validation_1.to_try()
    var_2 = validation_0.__eq__(bytes_0)
    var_3 = var_0.to_try()
    var_4 = validation_0.to_try()
    var_5 = validation_1.__str__()
    var_4.is_success()


def test_case_14():
    bytes_0 = b"GOfxQ\xc0\x81\xfcT\xb3u\xe7j\x81\xe3\xa7o"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    dict_0 = {}
    validation_1 = module_0.Validation(dict_0, dict_0)
    var_1 = validation_1.to_either()
    var_2 = validation_0.__eq__(bytes_0)
    var_3 = validation_0.__eq__(validation_1)
    var_4 = validation_1.to_maybe()
    var_5 = validation_1.__eq__(var_3)
    var_5.bind(var_5)
