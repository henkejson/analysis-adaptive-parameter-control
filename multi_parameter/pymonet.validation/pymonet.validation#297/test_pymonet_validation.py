# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    str_0 = "tFo0nJ)C:=kV.&YfG"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_lazy()
    var_2 = var_0.__eq__(validation_0)
    var_3 = validation_0.to_try()
    var_4 = validation_0.to_maybe()
    var_5 = validation_0.__eq__(validation_0)
    var_6 = var_5.__str__()
    var_5.to_box()


def test_case_1():
    none_type_0 = None
    int_0 = -429
    validation_0 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.__eq__(none_type_0)


def test_case_2():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.__str__()
    var_0.bind(bool_0)


def test_case_3():
    str_0 = "mge-\t[@({[\r\x0bg]?"
    set_0 = {str_0}
    validation_0 = module_0.Validation(set_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_maybe()
    var_2 = validation_0.to_box()


def test_case_4():
    str_0 = "tFo0nJ)C:=kV.&YfG"
    validation_0 = module_0.Validation(str_0, str_0)


def test_case_5():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.to_either()


def test_case_6():
    int_0 = -83
    str_0 = "Sum[value={}]"
    tuple_0 = (int_0, int_0, str_0)
    validation_0 = module_0.Validation(int_0, tuple_0)
    var_0 = validation_0.is_fail()
    var_0.to_lazy()


def test_case_7():
    int_0 = 4557
    validation_0 = module_0.Validation(int_0, int_0)
    none_type_0 = None
    validation_0.map(none_type_0)


def test_case_8():
    none_type_0 = None
    int_0 = -429
    validation_0 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.__eq__(none_type_0)
    var_1 = var_0.__str__()
    validation_0.bind(none_type_0)


def test_case_9():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.ap(bool_0)


def test_case_10():
    bytes_0 = b"\x92\x08>,g\xfc\xc3\xd0\r\x1b\xd0 l\xea\xea!"
    list_0 = [bytes_0, bytes_0]
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_box()
    var_0.bind(list_0)


def test_case_11():
    bool_0 = True
    bool_1 = False
    tuple_0 = (bool_0, bool_1)
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_lazy()
    str_0 = "AD]"
    validation_1 = var_0.to_box()
    tuple_1 = (validation_0, str_0)
    var_1 = validation_1.__eq__(tuple_1)
    var_2 = validation_0.__str__()
    validation_0.bind(bool_1)


def test_case_12():
    bytes_0 = b"e\\\xfa\xf8 $\x85\xebm}7\x82\xc3\xf8"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    str_0 = "tFo0nJ)C:=kV.&YfG"
    validation_1 = module_0.Validation(str_0, str_0)
    var_1 = validation_1.__str__()
    var_2 = validation_1.__eq__(validation_1)
    var_3 = validation_1.to_lazy()
    bytes_1 = b"]P\t\x0ew\xdf"
    bool_0 = True
    validation_2 = module_0.Validation(bytes_1, bool_0)
    var_4 = var_3.__eq__(bool_0)
    validation_3 = module_0.Validation(validation_2, str_0)
    var_5 = validation_1.__eq__(validation_0)
    var_4.bind(var_0)


def test_case_13():
    none_type_0 = None
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.__str__()
    var_0.ap(none_type_0)


def test_case_14():
    bytes_0 = b"e\\\xfa\xf8 $\x85\xebm}7\x82\xc3\xf8"
    tuple_0 = ()
    validation_0 = module_0.Validation(bytes_0, tuple_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.__str__()
    var_1.to_lazy()


def test_case_15():
    bool_0 = True
    none_type_0 = None
    tuple_0 = ()
    validation_0 = module_0.Validation(bool_0, tuple_0)
    var_0 = validation_0.to_either()
    var_0.bind(none_type_0)
