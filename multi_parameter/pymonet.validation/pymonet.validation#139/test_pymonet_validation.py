# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    complex_0 = -2580.556 + 213.427254j
    validation_0 = module_0.Validation(complex_0, complex_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.__eq__(complex_0)


def test_case_1():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.__str__()
    var_0.to_box()


def test_case_2():
    set_0 = set()
    str_0 = "x2i6q!Yo<UP=}VP3 "
    set_1 = {str_0}
    validation_0 = module_0.Validation(str_0, str_0)
    list_0 = [set_0, set_1]
    validation_1 = module_0.Validation(list_0, set_1)
    var_0 = validation_1.__str__()
    var_1 = validation_1.to_either()
    var_2 = var_1.to_box()
    var_3 = var_1.to_box()
    var_4 = var_3.to_either()
    var_5 = validation_1.is_fail()
    var_6 = var_4.to_lazy()
    var_7 = var_1.__eq__(list_0)
    validation_2 = module_0.Validation(var_5, var_4)


def test_case_3():
    str_0 = "\n        Take function and applied this function on current Validation value and returns folder result.\n\n        :param mapper: mapper function\n        :type mapper: Function(A) -> Validation[B, E]\n        :returns: new Validation with mapped value\n        :rtype: Validation[B, E]\n        "
    dict_0 = {str_0: str_0, str_0: str_0}
    validation_0 = module_0.Validation(dict_0, str_0)
    var_0 = validation_0.to_either()
    var_0.is_success()


def test_case_4():
    str_0 = "{T@^N"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    tuple_0 = ()
    var_1 = validation_0.__eq__(validation_0)
    tuple_0.to_try()


def test_case_5():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_6():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.to_maybe()


def test_case_7():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.is_fail()


def test_case_8():
    float_0 = -1452.2491584274926
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, float_0)
    validation_0.map(none_type_0)


def test_case_9():
    int_0 = -8
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.bind(validation_0)


def test_case_10():
    str_0 = "3b`.]1$C"
    bytes_0 = b"\xdbmik\xb3\xcc."
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_0.ap(str_0)


def test_case_11():
    none_type_0 = None
    tuple_0 = ()
    validation_0 = module_0.Validation(none_type_0, tuple_0)
    var_0 = validation_0.to_box()


def test_case_12():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_lazy()


def test_case_13():
    bytes_0 = b"\xa2$@MK~\xac\xa5!\xdar\x8f]\x01"
    none_type_0 = None
    validation_0 = module_0.Validation(bytes_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_either()
    validation_1 = module_0.Validation(bytes_0, bytes_0)


def test_case_14():
    complex_0 = -373 + 982.0407966034059j
    validation_0 = module_0.Validation(complex_0, complex_0)
    validation_0.to_try()


def test_case_15():
    none_type_0 = None
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_either()
    var_0.bind(none_type_0)


def test_case_16():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.to_either()
    var_2 = var_1.__str__()
    var_2.bind(list_0)


def test_case_17():
    str_0 = "{T@^N"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_try()
    var_2 = var_0.to_either()
    var_3 = validation_0.__eq__(validation_0)
    var_4 = var_2.bind(var_3)
    var_5 = var_0.to_either()
    var_6 = var_1.bind(var_1)
    var_7 = var_5.to_try()
    validation_1 = module_0.Validation(var_7, var_7)
    var_8 = validation_0.__eq__(validation_1)
    str_0.map(var_2)
