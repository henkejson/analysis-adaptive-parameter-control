# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0
import builtins as module_1


def test_case_0():
    int_0 = -1667
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, int_0)
    var_0 = validation_0.__eq__(int_0)
    var_1 = var_0.__str__()
    validation_0.to_maybe()


def test_case_1():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.__str__()
    var_0.is_fail()


def test_case_2():
    int_0 = 1237
    dict_0 = {int_0: int_0}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.__str__()
    var_0.to_either()


def test_case_3():
    object_0 = module_1.object()
    list_0 = [object_0, object_0]
    validation_0 = module_0.Validation(object_0, list_0)
    var_0 = validation_0.to_either()
    var_0.is_fail()


def test_case_4():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_box()
    var_2 = var_1.to_try()
    var_2.is_success()


def test_case_5():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.__eq__(bool_0)
    var_2 = validation_0.to_maybe()
    var_1.to_maybe()


def test_case_6():
    int_0 = -1803
    validation_0 = module_0.Validation(int_0, int_0)


def test_case_7():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.to_either()


def test_case_8():
    bool_0 = False
    none_type_0 = None
    validation_0 = module_0.Validation(bool_0, none_type_0)
    validation_0.is_fail()


def test_case_9():
    int_0 = 0
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.map(validation_0)


def test_case_10():
    int_0 = 1
    str_0 = "\n        Returns True when errors list are not empty.\n\n        :returns: True for empty errors not list\n        :rtype: Boolean\n        "
    validation_0 = module_0.Validation(str_0, int_0)
    validation_0.bind(int_0)


def test_case_11():
    bool_0 = True
    tuple_0 = ()
    none_type_0 = None
    validation_0 = module_0.Validation(tuple_0, none_type_0)
    validation_0.ap(bool_0)


def test_case_12():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.to_try()
    var_1.to_either()


def test_case_13():
    bytes_0 = b's\xbd\xc0\x88\x8a\xcb"'
    list_0 = []
    none_type_0 = None
    validation_0 = module_0.Validation(list_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.map(bytes_0)
    var_2 = var_1.__str__()


def test_case_14():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    dict_0 = {}
    var_0 = validation_0.to_lazy()
    validation_1 = module_0.Validation(dict_0, dict_0)
    var_1 = var_0.bind(dict_0)
    var_2 = validation_1.is_success()
    var_3 = validation_1.to_either()
    var_4 = var_3.to_try()
    var_5 = validation_1.to_maybe()
    var_6 = var_0.to_maybe()


def test_case_15():
    none_type_0 = None
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.is_success()
    var_1 = validation_0.to_try()
    var_2 = var_1.__eq__(none_type_0)
    var_2.is_success()


def test_case_16():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = var_0.__eq__(none_type_0)
    var_2 = var_1.__str__()
    var_0.to_maybe()


def test_case_17():
    bool_0 = False
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    str_0 = "x#o_Q:c~1~r9t]A;PY"
    var_0 = validation_0.__eq__(str_0)
    validation_1 = module_0.Validation(var_0, bool_0)
    var_1 = validation_0.__eq__(validation_1)
    var_2 = validation_1.to_lazy()
    var_3 = var_2.to_try()
    var_4 = var_2.__str__()
    var_5 = var_2.to_maybe()
    var_2.is_success()
