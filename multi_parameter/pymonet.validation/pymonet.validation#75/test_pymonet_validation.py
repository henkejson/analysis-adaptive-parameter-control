# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bool_0 = False
    bytes_0 = b"\xadr"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_lazy()
    var_2 = var_1.bind(bool_0)
    var_3 = var_2.__str__()
    var_3.is_fail()


def test_case_1():
    bytes_0 = b""
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(bool_0)
    var_0.ap(bytes_0)


def test_case_2():
    bool_0 = True
    str_0 = "pr~"
    list_0 = [bool_0, bool_0, str_0, str_0]
    validation_0 = module_0.Validation(list_0, str_0)
    var_0 = validation_0.__str__()
    bytes_0 = b""
    validation_1 = module_0.Validation(bytes_0, bytes_0)
    validation_2 = module_0.Validation(var_0, list_0)
    validation_3 = module_0.Validation(bool_0, var_0)
    var_1 = validation_3.__eq__(bytes_0)
    validation_2.ap(var_1)


def test_case_3():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_either()
    var_0.is_success()


def test_case_4():
    bytes_0 = b"\xd2\xabi\xe6\xbb,\xbf\x02Z}\xc2a\xc89"
    list_0 = [bytes_0, bytes_0]
    tuple_0 = (list_0,)
    validation_0 = module_0.Validation(tuple_0, list_0)
    var_0 = validation_0.to_try()
    var_1 = validation_0.is_success()
    var_2 = validation_0.to_either()
    var_3 = var_2.to_lazy()
    var_4 = var_3.to_try()
    var_4.bind(var_4)


def test_case_5():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_6():
    int_0 = 905
    none_type_0 = None
    validation_0 = module_0.Validation(int_0, none_type_0)
    validation_0.is_success()


def test_case_7():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_box()
    validation_0.is_fail()


def test_case_8():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.map(none_type_0)


def test_case_9():
    bool_0 = True
    bool_1 = True
    validation_0 = module_0.Validation(bool_1, bool_1)
    validation_0.bind(bool_0)


def test_case_10():
    str_0 = "u"
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.ap(str_0)
    validation_1 = module_0.Validation(validation_0, validation_0)
    validation_1.ap(str_0)


def test_case_11():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_try()
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    var_2 = validation_0.__eq__(validation_0)
    validation_0.to_maybe()


def test_case_12():
    str_0 = 'U7[I_7\n7"'
    bytes_0 = b" 5:\x99\xc0\xb2\x10?\xf20\xc5^"
    str_1 = "\n        Transform Either into Validation.\n\n        :returns: successfull Validation monad with previous value\n        :rtype: Validation[A, []]\n        "
    validation_0 = module_0.Validation(bytes_0, str_1)
    var_0 = validation_0.to_try()
    var_1 = var_0.__eq__(str_0)


def test_case_13():
    str_0 = ""
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, str_0)
    var_0 = validation_0.__str__()
    var_0.is_fail()


def test_case_14():
    bool_0 = True
    str_0 = "\n        It takes as a parameter function returning another Validation.\n        Function is called with Validation value and returns new Validation with previous value\n        and concated new and old errors.\n\n        :param monad: monad contains function\n        :type monad: Function(A) -> Validation[Any, List[E]]\n        :returns: new validation with stored errors\n        :rtype: Validation[A, List[E]]\n        "
    list_0 = [bool_0, bool_0, str_0, str_0]
    validation_0 = module_0.Validation(list_0, str_0)
    var_0 = validation_0.to_lazy()
    bytes_0 = b""
    validation_1 = module_0.Validation(var_0, bytes_0)
    var_1 = validation_1.to_lazy()
    none_type_0 = None
    validation_2 = module_0.Validation(bytes_0, bool_0)
    var_2 = var_1.to_try()
    var_3 = validation_1.to_lazy()
    validation_3 = module_0.Validation(none_type_0, none_type_0)
    var_4 = validation_2.__eq__(validation_3)
    var_5 = var_0.to_maybe()
    var_6 = var_0.map(validation_2)
    var_7 = var_1.bind(var_6)
    var_7.to_lazy()


def test_case_15():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    validation_0 = module_0.Validation(bool_0, dict_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_box()
    var_2 = var_1.to_maybe()
    var_2.bind(dict_0)


def test_case_16():
    bool_0 = True
    str_0 = "\n        It takes as a parameter function returning another Validation.\n        Function is called with Validation value and returns new Validation with previous value\n        and concated new and old errors.\n\n        :param monad: monad contains function\n        :type monad: Function(A) -> Validation[Any, List[E]]\n        :returns: new validation with stored errors\n        :rtype: Validation[A, List[E]]\n        "
    list_0 = [bool_0, bool_0, str_0, str_0]
    validation_0 = module_0.Validation(list_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.to_lazy()
    bytes_0 = b""
    validation_1 = module_0.Validation(bytes_0, bytes_0)
    var_2 = var_0.__eq__(validation_0)
    var_3 = validation_1.to_lazy()
    none_type_0 = None
    var_4 = validation_0.to_lazy()
    var_5 = validation_1.to_try()
    validation_2 = module_0.Validation(none_type_0, none_type_0)
    var_6 = var_0.to_box()
    var_7 = var_6.to_lazy()
    var_8 = var_3.__eq__(var_5)
    var_9 = validation_1.to_maybe()
    validation_1.map(var_9)
