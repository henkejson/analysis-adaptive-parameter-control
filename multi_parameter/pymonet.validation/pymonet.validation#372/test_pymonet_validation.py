# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_0.bind(var_0)


def test_case_1():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(none_type_0)


def test_case_2():
    bytes_0 = b"51lio\xa3\x1b"
    str_0 = "K5A^%a4[`CV\x0cm"
    validation_0 = module_0.Validation(bytes_0, str_0)
    var_0 = validation_0.__str__()


def test_case_3():
    bytes_0 = b"\xe8R\x87z\x90`i\xca\xa7V\xc3\xf4\xc5N"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    validation_1 = module_0.Validation(bytes_0, bytes_0)
    var_1 = validation_0.__str__()
    validation_2 = module_0.Validation(var_0, var_0)


def test_case_4():
    str_0 = "\n        Take mapper function and return value of Left.\n\n        :returns: Stored value\n        :rtype: A\n        "
    none_type_0 = None
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.__eq__(none_type_0)
    var_2 = var_1.__str__()
    var_2.bind(str_0)


def test_case_5():
    none_type_0 = None
    str_0 = "@T"
    set_0 = {str_0, str_0, str_0}
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.ap(none_type_0)
    var_2 = var_1.to_lazy()
    var_2.is_fail()


def test_case_6():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)


def test_case_7():
    float_0 = 35.74
    validation_0 = module_0.Validation(float_0, float_0)
    validation_0.to_either()


def test_case_8():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.is_fail()


def test_case_9():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_either()
    var_2 = validation_0.to_lazy()
    validation_0.map(bool_0)


def test_case_10():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    validation_0.bind(tuple_0)


def test_case_11():
    bytes_0 = b"51lio\xa3\x1b"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    validation_0.ap(validation_0)


def test_case_12():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_box()


def test_case_13():
    bytes_0 = b"51lio\xa3\x1b"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_try()
    var_1 = validation_0.__str__()
    var_1.to_either()


def test_case_14():
    int_0 = 1
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_1 = module_0.Validation(none_type_0, int_0)
    var_0 = validation_0.__eq__(validation_1)
    var_1 = var_0.__str__()
    validation_2 = module_0.Validation(none_type_0, none_type_0)
    var_0.to_maybe()


def test_case_15():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_try()
    var_0.is_fail()


def test_case_16():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_lazy()
    var_1.is_fail()
