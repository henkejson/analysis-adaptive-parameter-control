# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    complex_0 = 1133.5662443461545 + 843j
    validation_0 = module_0.Validation(complex_0, complex_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.to_lazy()
    var_2 = validation_0.__eq__(validation_0)
    var_3 = var_0.to_box()
    var_4 = module_0.Validation(var_3, var_0)
    var_5 = var_4.to_box()
    var_3.is_success()


def test_case_1():
    bytes_0 = b"\x8b0\xef\xbfQ\xa60\xd1\x10Q"
    int_0 = 2025
    validation_0 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.__eq__(bytes_0)


def test_case_2():
    list_0 = []
    bool_0 = True
    list_1 = [list_0, bool_0, bool_0, list_0]
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.__str__()
    var_1 = var_0.__eq__(list_1)
    var_1.to_maybe()


def test_case_3():
    str_0 = "9yW2`\x0bv@9"
    set_0 = {str_0}
    list_0 = []
    list_1 = [set_0, list_0, str_0, str_0]
    validation_0 = module_0.Validation(list_1, str_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.__str__()
    var_2 = validation_0.is_fail()
    var_1.to_try()


def test_case_4():
    int_0 = -1253
    list_0 = [int_0, int_0, int_0, int_0]
    validation_0 = module_0.Validation(int_0, list_0)
    var_0 = validation_0.to_either()


def test_case_5():
    int_0 = -1253
    list_0 = [int_0, int_0, int_0, int_0]
    validation_0 = module_0.Validation(int_0, list_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_maybe()


def test_case_6():
    int_0 = 2025
    validation_0 = module_0.Validation(int_0, int_0)


def test_case_7():
    bytes_0 = b"\xdb\x15\xc9l(k?"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.is_fail()


def test_case_8():
    none_type_0 = None
    bool_0 = True
    bool_1 = False
    none_type_1 = None
    validation_0 = module_0.Validation(bool_1, none_type_1)
    var_0 = validation_0.__eq__(bool_0)
    var_1 = validation_0.__eq__(none_type_0)
    validation_0.map(bool_1)


def test_case_9():
    int_0 = 1
    dict_0 = {int_0: int_0, int_0: int_0}
    none_type_0 = None
    validation_0 = module_0.Validation(dict_0, none_type_0)
    validation_0.bind(dict_0)


def test_case_10():
    float_0 = -1602.0
    validation_0 = module_0.Validation(float_0, float_0)
    none_type_0 = None
    validation_0.ap(none_type_0)


def test_case_11():
    none_type_0 = None
    bool_0 = True
    validation_0 = module_0.Validation(none_type_0, bool_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.to_either()
    var_1.to_either()


def test_case_12():
    str_0 = "9yW2`\x0bv@9"
    set_0 = {str_0}
    list_0 = []
    list_1 = [set_0, list_0, str_0, str_0]
    validation_0 = module_0.Validation(list_1, str_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.is_fail()
    var_2 = validation_0.to_lazy()
    var_2.to_lazy()


def test_case_13():
    int_0 = -1253
    list_0 = [int_0, int_0, int_0, int_0]
    validation_0 = module_0.Validation(int_0, list_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_try()


def test_case_14():
    complex_0 = 1133 + 843j
    validation_0 = module_0.Validation(complex_0, complex_0)
    bool_0 = True
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, bool_0)
    var_0 = validation_1.__eq__(validation_0)
    var_0.ap(var_0)


def test_case_15():
    bytes_0 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.is_fail()
    var_2 = validation_0.to_either()
    var_3 = var_2.to_maybe()
    var_1.to_lazy()
