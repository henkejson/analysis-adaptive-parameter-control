# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    str_0 = "D"
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(str_0)
    var_0.to_either()


def test_case_1():
    str_0 = "=</.Yv"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    var_0.is_success()


def test_case_2():
    str_0 = "\n        Transform Box into Right either.\n\n        :returns: right Either monad with previous value\n        :rtype: Right[A]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    none_type_0 = None
    bytes_0 = b"\x99\xa7\x05\x04\x88\xde\xac"
    var_0 = validation_0.to_either()
    validation_1 = module_0.Validation(bytes_0, bytes_0)
    var_1 = var_0.__str__()
    validation_2 = module_0.Validation(none_type_0, str_0)
    bytes_0.ap(none_type_0)


def test_case_3():
    str_0 = "\n        Transform Box into Right either.\n\n        :returns: right Either monad with previous value\n        :rtype: Right[A]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    complex_0 = -1175.4998 + 2222.07j
    list_0 = [complex_0, complex_0, complex_0]
    tuple_0 = (complex_0, list_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.is_success()
    tuple_0.to_try()


def test_case_4():
    str_0 = "=</.Yv"
    validation_0 = module_0.Validation(str_0, str_0)


def test_case_5():
    str_0 = "=</.Yv"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.is_success()


def test_case_6():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.is_success()
    var_1 = var_0.__eq__(tuple_0)
    validation_1 = module_0.Validation(tuple_0, tuple_0)
    var_2 = validation_1.to_lazy()
    var_3 = validation_1.is_fail()
    var_4 = validation_1.is_fail()
    var_3.bind(tuple_0)


def test_case_7():
    bytes_0 = b"\xc1\xaeoR\x95R{)[\x1fJ\xeb\xe6\xe5[\xa0\x0bo\xbc"
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.map(bytes_0)


def test_case_8():
    str_0 = "=</.Yv"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.to_try()
    var_2 = validation_0.__str__()
    validation_0.bind(str_0)


def test_case_9():
    none_type_0 = None
    int_0 = -2054
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.ap(none_type_0)


def test_case_10():
    tuple_0 = ()
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, tuple_0)
    var_0 = validation_0.to_try()
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    var_1 = validation_1.to_lazy()
    var_2 = var_1.to_maybe()
    var_3 = var_2.to_either()
    var_2.to_maybe()


def test_case_11():
    str_0 = "\n        Transform Box into Right either.\n\n        :returns: right Either monad with previous value\n        :rtype: Right[A]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    none_type_0 = None
    var_0 = validation_0.to_maybe()
    bytes_0 = b"\x99\xa7\x05\x04\x88\xde\xac"
    var_1 = validation_0.to_either()
    validation_1 = module_0.Validation(bytes_0, bytes_0)
    var_2 = validation_1.is_success()
    var_3 = validation_1.to_try()
    var_4 = var_3.__str__()
    validation_2 = module_0.Validation(none_type_0, var_0)
    var_3.ap(none_type_0)


def test_case_12():
    int_0 = 784
    tuple_0 = ()
    validation_0 = module_0.Validation(int_0, tuple_0)
    validation_1 = module_0.Validation(tuple_0, int_0)
    validation_2 = module_0.Validation(validation_0, validation_0)
    var_0 = validation_1.__eq__(validation_2)
    int_1 = 472
    validation_3 = module_0.Validation(int_1, validation_1)
    validation_1.__str__()


def test_case_13():
    bytes_0 = b"\xcd\x8a\xf2"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_either()
    var_2 = validation_0.__eq__(validation_0)
    var_3 = var_2.__str__()
    var_2.to_try()


def test_case_14():
    int_0 = 784
    tuple_0 = ()
    validation_0 = module_0.Validation(int_0, tuple_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.__eq__(int_0)
    validation_0.map(validation_0)


def test_case_15():
    int_0 = 784
    tuple_0 = ()
    validation_0 = module_0.Validation(int_0, tuple_0)
    validation_1 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.to_maybe()
    validation_1.is_fail()


def test_case_16():
    int_0 = 784
    tuple_0 = ()
    validation_0 = module_0.Validation(int_0, tuple_0)
    var_0 = validation_0.__str__()
    validation_1 = module_0.Validation(int_0, int_0)
    var_1 = validation_0.__str__()
    var_0.map(tuple_0)
