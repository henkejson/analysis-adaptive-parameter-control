# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    validation_1 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_1.__eq__(tuple_0)
    validation_1.map(validation_0)


def test_case_1():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    validation_1 = validation_0.__str__()
    var_0 = validation_0.is_fail()


def test_case_2():
    int_0 = 0
    tuple_0 = (int_0,)
    float_0 = 165.0776
    int_1 = -62
    str_0 = "RMSf\x0c{HvY~'57KTLC\\/k"
    tuple_1 = (float_0, int_1, str_0)
    validation_0 = module_0.Validation(tuple_0, tuple_1)
    var_0 = validation_0.__str__()


def test_case_3():
    str_0 = "O ?\t)>Ybxk%!0"
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_either()
    var_0.ap(str_0)


def test_case_4():
    str_0 = "\n        Transform Maybe to Try.\n\n        :returns: successfully Try with previous value when Maybe is not empty, othercase not successfully Try with None\n        :rtype: Try[A]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    bytes_0 = b'\xbd?Jz\xc0"X\xcc\xf4\xbd\x8d\r\x8a'
    dict_0 = {}
    int_0 = 1435
    tuple_0 = (bytes_0, dict_0, int_0, dict_0)
    validation_1 = module_0.Validation(tuple_0, dict_0)


def test_case_5():
    none_type_0 = None
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_maybe()
    var_0.ap(none_type_0)


def test_case_6():
    bytes_0 = b"\xb3\x8b<\x97\xc5\xb7\xeb\x84=\xb0\xa1\xce"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.__eq__(validation_0)
    bool_0 = True
    var_2 = validation_0.to_try()
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    validation_1 = module_0.Validation(var_1, list_0)
    var_3 = validation_1.__eq__(var_1)
    var_4 = validation_0.to_try()
    var_1.to_either()


def test_case_7():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_8():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.is_success()


def test_case_9():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.is_fail()


def test_case_10():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    validation_1 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_1.to_try()
    validation_1.map(var_0)


def test_case_11():
    bytes_0 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.is_fail()
    var_1 = validation_0.to_lazy()
    validation_0.bind(bytes_0)


def test_case_12():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.ap(none_type_0)


def test_case_13():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.to_lazy()
    var_2 = var_1.__str__()
    var_3 = var_2.__eq__(dict_0)
    var_3.is_success()


def test_case_14():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_maybe()
    var_1.is_fail()


def test_case_15():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)
    var_0.to_try()


def test_case_16():
    bool_0 = True
    none_type_0 = None
    str_0 = "\\c"
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_1 = module_0.Validation(none_type_0, str_0)
    var_0 = validation_1.__eq__(validation_0)
    bool_0.to_try()
