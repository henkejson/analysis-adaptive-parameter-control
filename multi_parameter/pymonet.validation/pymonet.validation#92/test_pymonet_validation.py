# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    str_0 = 'xFVX/"70Rj@lm{0[\x0c`L'
    set_0 = {str_0, str_0}
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.__eq__(set_0)
    var_0.to_maybe()


def test_case_1():
    list_0 = []
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, list_0)
    var_0 = validation_0.__str__()
    var_0.to_either()


def test_case_2():
    bytes_0 = b"\xf3\x03\xc1\xde"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.__str__()
    var_0.to_try()


def test_case_3():
    str_0 = 'xFVX/"70Rj@lm{0[\x0c`L'
    set_0 = {str_0, str_0}
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_maybe()
    var_2 = validation_0.__eq__(set_0)
    var_2.to_lazy()


def test_case_4():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)


def test_case_5():
    float_0 = -2588.0
    validation_0 = module_0.Validation(float_0, float_0)
    validation_0.__str__()


def test_case_6():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.__eq__(bool_0)
    var_2 = var_0.to_lazy()
    str_0 = "#vc#?s{2xiRqxG\x0b_Y\\"
    var_3 = validation_0.__eq__(str_0)
    var_4 = validation_0.is_fail()
    var_1.to_box()


def test_case_7():
    str_0 = 'xFVX/"70Rj@lm{0[\x0c`L'
    set_0 = {str_0, str_0}
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_maybe()
    validation_0.map(var_0)


def test_case_8():
    bytes_0 = b"\xc5"
    bytes_1 = b"\xcf\xd8,\x8b=+@\x18\x8c\xe0Rx\xa4"
    validation_0 = module_0.Validation(bytes_0, bytes_1)
    validation_0.bind(bytes_0)


def test_case_9():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    validation_0.ap(tuple_0)


def test_case_10():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.to_either()
    var_2 = var_1.to_lazy()
    var_2.is_fail()


def test_case_11():
    bool_0 = False
    none_type_0 = None
    validation_0 = module_0.Validation(bool_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_box()


def test_case_12():
    str_0 = 'xFVX/"70Rj@lm{0[\x0c`L'
    list_0 = [str_0, str_0]
    validation_0 = module_0.Validation(str_0, list_0)
    var_0 = validation_0.to_try()
    var_1 = validation_0.to_try()
    var_2 = validation_0.to_lazy()
    var_3 = var_2.ap(str_0)
    set_0 = {str_0, str_0}
    validation_1 = module_0.Validation(set_0, set_0)
    var_4 = validation_1.to_either()
    var_5 = validation_1.to_maybe()
    var_6 = validation_1.__eq__(set_0)
    var_6.to_lazy()


def test_case_13():
    str_0 = 'xFVX/"70Rj@lm{0[\x0c`L'
    set_0 = {str_0, str_0}
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.__eq__(set_0)
    validation_1 = module_0.Validation(var_0, str_0)
    var_2 = validation_0.to_either()
    validation_2 = module_0.Validation(var_0, var_0)
    var_3 = validation_2.__eq__(validation_1)
    var_4 = validation_2.to_lazy()
    var_5 = var_0.__eq__(validation_1)
    var_6 = validation_0.to_either()
    var_7 = validation_1.to_maybe()
    var_8 = var_7.map(var_3)
    var_1.to_try()


def test_case_14():
    str_0 = "bL#X71.9v0"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_box()
    var_2 = validation_0.to_maybe()
    var_3 = var_2.to_either()
    var_4 = var_3.__str__()
    var_5 = validation_0.to_either()
    var_4.is_success()


def test_case_15():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, validation_0)
    var_0 = validation_0.to_either()
    str_0 = "bL#X71.9v0"
    validation_2 = module_0.Validation(str_0, str_0)
    var_1 = validation_2.__eq__(validation_2)
    var_2 = validation_2.to_box()
    var_3 = var_2.to_try()
    var_4 = validation_2.to_maybe()
    var_5 = var_4.to_either()
    var_6 = validation_2.to_either()
    var_3.map(var_5)


def test_case_16():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_maybe()
