# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    dict_0 = {}
    int_0 = 2564
    validation_0 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.__eq__(dict_0)
    var_0.to_lazy()


def test_case_1():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.__str__()
    int_0 = 0
    validation_1 = module_0.Validation(int_0, int_0)
    validation_1.to_maybe()


def test_case_2():
    bool_0 = False
    str_0 = "\nPo.s3Ai#<*&l'fg.\n2'"
    validation_0 = module_0.Validation(bool_0, str_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.__str__()
    var_0.ap(var_1)


def test_case_3():
    str_0 = "l(j3#h\nj-4'+V"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.to_either()
    var_2 = var_0.__str__()
    var_0.is_success()


def test_case_4():
    str_0 = "x,>f<},~Hpw=D;aT"
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_maybe()
    var_0.bind(str_0)


def test_case_5():
    int_0 = 2564
    validation_0 = module_0.Validation(int_0, int_0)


def test_case_6():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.to_try()


def test_case_7():
    bytes_0 = b"\x04>"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.is_fail()
    var_1 = var_0.__str__()
    var_1.is_success()


def test_case_8():
    bool_0 = True
    complex_0 = -2266.089 + 2251.732714j
    validation_0 = module_0.Validation(complex_0, complex_0)
    validation_0.map(bool_0)


def test_case_9():
    str_0 = "-V^\x0cnC'7w<e|jq"
    validation_0 = module_0.Validation(str_0, str_0)
    validation_0.bind(str_0)


def test_case_10():
    bool_0 = False
    bytes_0 = b"\x18"
    dict_0 = {bool_0: bytes_0, bool_0: bytes_0}
    int_0 = 1318
    str_0 = "_+k. rM|NOJ)`$"
    bool_1 = False
    dict_1 = {int_0: int_0, int_0: int_0, int_0: str_0, str_0: bool_1}
    validation_0 = module_0.Validation(dict_1, bool_1)
    validation_0.ap(dict_0)


def test_case_11():
    bytes_0 = b"\xf6\xbb\xed\x8dM\x0f\xa8\xd3\xaa\x84\xcb\x80\xc4\xb2\x10\xa0_08\xe7"
    int_0 = -3895
    validation_0 = module_0.Validation(bytes_0, int_0)
    var_0 = validation_0.to_box()


def test_case_12():
    none_type_0 = None
    none_type_1 = None
    validation_0 = module_0.Validation(none_type_1, none_type_1)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.map(none_type_0)
    var_1.to_maybe()


def test_case_13():
    str_0 = "Q(+lv6y k%EQ&7+n\x0b"
    bytes_0 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_either()
    var_2 = var_1.__eq__(str_0)
    tuple_0 = (var_2, validation_0, var_1, validation_0)
    list_0 = [tuple_0, str_0, var_1, var_0]
    str_1 = "\n        Call success_callback function with monad value when monad is not successfully.\n\n        :params fail_callback: function to apply with monad value.\n        :type fail_callback: Function(A)\n        :returns: self\n        :rtype: Try[A]\n        "
    bool_0 = True
    validation_1 = module_0.Validation(str_1, bool_0)
    var_3 = validation_1.__eq__(list_0)
    var_3.to_maybe()


def test_case_14():
    bool_0 = True
    str_0 = "\nPo.s3Ai#<*&l'fg.\n2'"
    validation_0 = module_0.Validation(bool_0, str_0)
    var_0 = validation_0.__eq__(validation_0)
    var_0.to_box()


def test_case_15():
    bool_0 = False
    str_0 = "\nPo.s3Ai#<*&l'fg.\n2'"
    validation_0 = module_0.Validation(bool_0, str_0)
    validation_1 = module_0.Validation(validation_0, validation_0)
    var_0 = validation_1.__eq__(validation_0)
    validation_1.to_maybe()
