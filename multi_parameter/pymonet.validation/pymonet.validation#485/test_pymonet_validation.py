# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bool_0 = True
    bool_1 = True
    bytes_0 = b"s\x9e\x89\r\xc2\x92\xd9\x8e\xec\xdf\xfc\x0c\xec\x95\xf4l\xf0"
    dict_0 = {bool_1: bool_1, bool_1: bool_1, bytes_0: bool_1}
    validation_0 = module_0.Validation(bool_0, dict_0)
    var_0 = validation_0.__eq__(bool_1)
    var_0.bind(bool_1)


def test_case_1():
    bytes_0 = b"&\x9a\x0f\xdf#B\xff5<D\x01\x83Z/\x02\xa2}\xfb\xb3"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.__str__()
    var_2 = bytes_0.__eq__(bytes_0)
    var_0.to_try()


def test_case_2():
    bool_0 = True
    bytes_0 = b"s\x9e\x89\r\xc2\x92\xd9\x8e\xec\xdf\xfc\x0c\xec\x95\xf4l\xf0"
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bytes_0: bool_0}
    validation_0 = module_0.Validation(dict_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_0.to_maybe()


def test_case_3():
    str_0 = "Try[value={}, is_success={}]"
    str_0.to_maybe()


def test_case_4():
    bytes_0 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_0)


def test_case_5():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.is_success()


def test_case_6():
    bytes_0 = b"&\x9a\x0f\xdf#B\xff5<D\x01\x83Z/\x02\xa2}\xfb\xb3"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.is_fail()
    var_2 = validation_0.__str__()
    var_3 = var_1.__eq__(var_1)
    var_0.to_try()


def test_case_7():
    bytes_0 = b"\n\xbe"
    none_type_0 = None
    none_type_1 = None
    validation_0 = module_0.Validation(none_type_1, bytes_0)
    validation_0.map(none_type_0)


def test_case_8():
    int_0 = -5696
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.bind(int_0)


def test_case_9():
    bool_0 = True
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.ap(bool_0)


def test_case_10():
    bool_0 = False
    none_type_0 = None
    validation_0 = module_0.Validation(bool_0, none_type_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.__str__()
    var_1.to_either()


def test_case_11():
    bytes_0 = b"&\x9a\x0f\xdf#B\xff5<D\x01\x83Z/\x02\xa2}\xfb\xb3"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_lazy()
    var_2 = validation_0.to_try()
    var_3 = validation_0.to_maybe()
    var_4 = validation_0.to_maybe()
    var_5 = var_3.to_try()
    var_6 = validation_0.__str__()
    var_6.to_either()


def test_case_12():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.to_try()


def test_case_13():
    bytes_0 = b"HI\xdb\xacT\x88\xd4\xc2\x93b3\x96"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_try()
    var_1.to_maybe()


def test_case_14():
    int_0 = -223
    set_0 = {int_0, int_0, int_0}
    validation_0 = module_0.Validation(set_0, int_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_0.is_success()


def test_case_15():
    int_0 = -223
    set_0 = {int_0, int_0, int_0}
    validation_0 = module_0.Validation(set_0, int_0)
    var_0 = validation_0.__eq__(set_0)
    var_1 = validation_0.to_lazy()
    var_2 = var_1.to_try()
    var_3 = var_1.to_maybe()
    var_4 = var_1.to_maybe()
    var_2.to_try()


def test_case_16():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_either()
    str_0 = "Try[value={}, is_success={}]"
    bool_0 = True
    none_type_0 = None
    validation_1 = module_0.Validation(bool_0, str_0)
    var_1 = validation_1.__eq__(validation_1)
    var_2 = validation_1.to_maybe()
    var_3 = var_2.bind(none_type_0)
    var_4 = validation_1.__str__()
    var_5 = validation_0.__str__()
    var_6 = validation_0.to_try()
    var_7 = validation_0.to_maybe()
    var_8 = var_0.to_try()
    var_9 = var_0.to_lazy()
    var_8.to_maybe()


def test_case_17():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    none_type_0 = None
    validation_1 = module_0.Validation(dict_0, none_type_0)
    var_0 = validation_1.__eq__(validation_0)
    var_0.to_maybe()
