# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(bool_0)
    validation_0.map(validation_0)


def test_case_1():
    bytes_0 = b"\xee\xd7"
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_try()
    var_1.to_lazy()


def test_case_2():
    str_0 = "M7V\r"
    bool_0 = False
    none_type_0 = None
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_either()
    var_2 = var_1.map(none_type_0)
    var_3 = var_2.bind(str_0)
    var_4 = var_3.bind(bool_0)
    none_type_1 = None
    validation_1 = module_0.Validation(str_0, none_type_1)
    var_5 = validation_1.to_box()
    validation_1.to_try()


def test_case_3():
    bool_0 = True
    bool_0.to_lazy()


def test_case_4():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_5():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_lazy()


def test_case_6():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.is_fail()


def test_case_7():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(bool_0)
    validation_0.bind(bool_0)


def test_case_8():
    bytes_0 = b"~\xa0\xec\x8c\xb8\x03i\\\xa1\xc6^\x8a\xc6\xc7\xc8=[\xbc\x97j"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    bool_0 = False
    validation_0.ap(bool_0)


def test_case_9():
    bytes_0 = (
        b" \xb4\xc9\xb4y\x15\xfb\x81\xbb\x81\x07\xfc\xa3\x8f\xcd\xae\xd6\xb8\x8f\xff"
    )
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_lazy()
    var_0.is_fail()


def test_case_10():
    bytes_0 = b"6\xc8\xf8\xf7\x9ft="
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_1.to_lazy()
    var_1 = var_0.to_try()
    var_1.is_success()


def test_case_11():
    str_0 = "\n        Transform Lazy into Either (Right) with constructor_fn result.\n\n        :returns: Right monad with constructor_fn result\n        :rtype: Right[A]\n        "
    str_1 = "tNf}bDg/}dYD*75%4X"
    none_type_0 = None
    bool_0 = False
    validation_0 = module_0.Validation(none_type_0, bool_0)
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    var_0 = module_0.Validation(str_0, str_1)
    var_1 = var_0.__eq__(var_0)
    var_1.is_fail()


def test_case_12():
    bool_0 = True
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.__str__()
    var_0.bind(bool_0)


def test_case_13():
    str_0 = "/eu<"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.is_success()
    validation_1 = module_0.Validation(str_0, str_0)
    var_1 = validation_1.is_fail()
    validation_2 = module_0.Validation(var_0, validation_1)
    int_0 = -631
    bool_0 = False
    validation_3 = module_0.Validation(bool_0, bool_0)
    var_2 = validation_3.__eq__(int_0)
    var_3 = validation_3.__eq__(validation_2)
    var_4 = validation_2.__eq__(var_0)
    var_2.is_success()


def test_case_14():
    bytes_0 = b"\xee\xd7"
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bytes_0)
    var_0 = validation_0.__str__()
    var_0.to_try()


def test_case_15():
    bytes_0 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_lazy()
    var_2 = var_1.to_box()
    var_2.is_success()
