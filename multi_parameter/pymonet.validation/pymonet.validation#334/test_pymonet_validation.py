# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_0.to_either()


def test_case_1():
    complex_0 = -1387.8871 - 3057.94j
    none_type_0 = None
    validation_0 = module_0.Validation(complex_0, complex_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.map(var_0)
    var_2 = var_0.to_maybe()
    var_3 = var_2.to_box()
    var_4 = var_3.to_either()
    validation_1 = module_0.Validation(complex_0, none_type_0)
    var_5 = validation_1.to_lazy()
    var_6 = var_5.to_try()
    var_7 = var_0.map(var_2)
    var_8 = var_5.to_try()
    var_9 = validation_0.__eq__(var_3)
    var_9.is_fail()


def test_case_2():
    bytes_0 = b"\xa4q\xb0\xa6\xc9`\xfc\xb5\x81\xa9\x98j\xb7}j"
    tuple_0 = (bytes_0,)
    str_0 = ""
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    var_0.map(tuple_0)


def test_case_3():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    validation_0 = module_0.Validation(bool_0, set_0)
    var_0 = validation_0.__str__()
    var_0.bind(bool_0)


def test_case_4():
    int_0 = 1890
    list_0 = [int_0]
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_either()


def test_case_5():
    str_0 = "g`+Iu"
    none_type_0 = None
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    validation_0.map(none_type_0)


def test_case_6():
    bytes_0 = b"\xc6\x82FO.\xcf\xc4v9\xfc\xf3"
    bytes_0.to_lazy()


def test_case_7():
    str_0 = "v\\ZJ"
    validation_0 = module_0.Validation(str_0, str_0)


def test_case_8():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_box()
    validation_0.is_fail()


def test_case_9():
    none_type_0 = None
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, none_type_0)
    validation_0.bind(none_type_0)


def test_case_10():
    bool_0 = True
    float_0 = -1184.27
    validation_0 = module_0.Validation(float_0, float_0)
    validation_0.ap(bool_0)


def test_case_11():
    dict_0 = {}
    none_type_0 = None
    validation_0 = module_0.Validation(dict_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_0.to_lazy()


def test_case_12():
    bytes_0 = b"/\x10uK8g\xd6k\xe8\xad|\xbfm\x15V"
    list_0 = [bytes_0, bytes_0, bytes_0]
    list_1 = [list_0, bytes_0, bytes_0, list_0]
    complex_0 = 747.927663 - 322.32j
    tuple_0 = (list_1, complex_0)
    none_type_0 = None
    validation_0 = module_0.Validation(tuple_0, none_type_0)
    validation_0.to_try()


def test_case_13():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_try()
    var_1.to_box()


def test_case_14():
    bytes_0 = b"\xc6\x82FO.\xcf\xc4v9\xfc\xf3"
    none_type_0 = None
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_maybe()
    var_2 = var_1.to_lazy()
    validation_1 = module_0.Validation(validation_0, none_type_0)
    var_3 = validation_1.__eq__(validation_0)
    validation_1.to_maybe()


def test_case_15():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_either()
    var_0.is_success()
