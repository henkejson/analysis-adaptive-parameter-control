# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bytes_0 = b':\xc7\xa2"\x82\xbc~\xb0\xba\x10Y4'
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.__eq__(validation_0)
    var_2 = validation_0.to_lazy()


def test_case_1():
    none_type_0 = None
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(none_type_0)
    var_0.is_fail()


def test_case_2():
    bytes_0 = b':\xc7\xa2"\x82\xbc~\xb0\xba\x10Y4'
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.__eq__(validation_0)
    var_2 = validation_0.to_lazy()
    var_3 = var_2.to_box()


def test_case_3():
    bytes_0 = b"-\xd8\x98\xf9\xe0\x0bJ1\x020\xf29"
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_maybe()
    var_2 = var_1.to_lazy()
    var_3 = var_2.to_try()
    var_3.bind(bytes_0)


def test_case_4():
    int_0 = 834
    float_0 = -2224.8
    list_0 = [float_0, int_0, int_0, float_0]
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.__str__()
    var_1.bind(int_0)


def test_case_5():
    bytes_0 = b':\xc7\xa2"\x82\xbc~\xb0\xba\x10Y4'
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.to_lazy()


def test_case_6():
    bytes_0 = b':\xc7\xa2"\x82\xbc~\xb0\xba\x10Y4'
    bytes_0.is_success()


def test_case_7():
    bytes_0 = b':\xc7\xa2"\x82\xbc~\xb0\xba\x10Y4'
    var_0 = module_0.Validation(bytes_0, bytes_0)


def test_case_8():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.to_maybe()


def test_case_9():
    str_0 = '5YX;"qWc'
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.is_fail()
    var_0.is_fail()


def test_case_10():
    none_type_0 = None
    bool_0 = False
    none_type_1 = None
    validation_0 = module_0.Validation(bool_0, none_type_1)
    validation_0.map(none_type_0)


def test_case_11():
    str_0 = "NV>1T1\x0b1> -KT\x0bHh"
    validation_0 = module_0.Validation(str_0, str_0)
    validation_0.bind(validation_0)


def test_case_12():
    bool_0 = True
    int_0 = 3814
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.ap(bool_0)


def test_case_13():
    bytes_0 = b':\xc7\xa2"\x82\xbc~\xb0\x86]%\xba\x10Y4'
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.to_box()
    var_2 = validation_0.to_lazy()


def test_case_14():
    str_0 = "\n        Return monad value when is successfully.\n        Othercase return default_value argument.\n\n        :params default_value: value to return when monad is not successfully.\n        :type default_value: B\n        :returns: monad value\n        :rtype: A | B\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_lazy()


def test_case_15():
    bytes_0 = b':\xc7\xa2"\x82\xbc~\xb0\xba\x10Y4'
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.__eq__(validation_0)
    var_2 = validation_0.to_lazy()
    var_3 = var_2.to_box()


def test_case_16():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.to_try()


def test_case_17():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.__str__()
    var_0.is_success()


def test_case_18():
    bytes_0 = b':\xc7\xa2"\x82\xbc~\xb0\xba\x10Y4'
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.is_fail()
    var_1 = validation_0.__str__()
    var_2 = validation_0.to_maybe()
    var_3 = module_0.Validation(bytes_0, var_2)
    var_4 = validation_0.to_lazy()
    var_5 = validation_0.__eq__(var_3)
    var_3.to_maybe()


def test_case_19():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_maybe()
    var_0.to_maybe()
