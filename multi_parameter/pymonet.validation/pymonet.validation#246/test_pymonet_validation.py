# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    none_type_0 = None
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(none_type_0)
    validation_0.is_fail()


def test_case_1():
    int_0 = -898
    set_0 = {int_0, int_0, int_0}
    bytes_0 = b""
    validation_0 = module_0.Validation(set_0, bytes_0)
    var_0 = validation_0.__str__()
    var_0.is_success()


def test_case_2():
    list_0 = []
    str_0 = "Min[value={}]"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.is_fail()
    var_1 = validation_0.__eq__(list_0)
    var_2 = validation_0.__str__()
    str_0.bind(str_0)


def test_case_3():
    str_0 = ""
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()


def test_case_4():
    bool_0 = True
    float_0 = -687.8309
    bytes_0 = b"aP5h\x1bw'\xe7\x1c-"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_lazy()
    var_2 = validation_0.__eq__(float_0)
    var_2.ap(bool_0)


def test_case_5():
    list_0 = []
    str_0 = "Min[value={}]"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.is_success()
    var_2 = validation_0.__eq__(list_0)
    var_2.to_lazy()


def test_case_6():
    str_0 = "Min[value={},]"
    validation_0 = module_0.Validation(str_0, str_0)


def test_case_7():
    none_type_0 = None
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(none_type_0)
    validation_0.map(validation_0)


def test_case_8():
    str_0 = ""
    validation_0 = module_0.Validation(str_0, str_0)
    validation_0.bind(validation_0)


def test_case_9():
    int_0 = 0
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.ap(int_0)


def test_case_10():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = module_0.Validation(validation_0, validation_0)
    var_1 = var_0.__eq__(set_0)
    var_2 = var_0.to_box()
    var_2.bind(bool_0)


def test_case_11():
    str_0 = ""
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_lazy()


def test_case_12():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_box()
    validation_0.to_maybe()


def test_case_13():
    none_type_0 = None
    none_type_1 = None
    validation_0 = module_0.Validation(none_type_1, none_type_0)
    validation_0.to_try()


def test_case_14():
    list_0 = []
    str_0 = "Min[value={}]"
    validation_0 = module_0.Validation(str_0, list_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.is_success()
    var_1.to_lazy()


def test_case_15():
    list_0 = []
    str_0 = "Min[value={}]"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.__eq__(validation_0)
    var_2 = validation_0.is_success()
    var_3 = validation_0.__eq__(list_0)
    var_2.bind(list_0)


def test_case_16():
    str_0 = "Min[value={}]"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.is_success()
    var_2 = var_0.__str__()
    var_3 = validation_0.__str__()
    tuple_0 = ()
    validation_1 = module_0.Validation(validation_0, tuple_0)
    var_4 = validation_1.__eq__(validation_0)
    var_5 = validation_0.__eq__(var_1)
    var_6 = var_0.to_either()
    var_1.bind(var_2)
