# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    str_0 = "\n        Take function and applied this function with monad value and returns new monad with mapped value.\n\n        :params mapper: function to apply on monad value\n        :type mapper: Function(A) -> B\n        :returns: for successfully new Try with mapped value, othercase copy of self\n        :rtype: Try[B]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.is_success()
    var_2 = validation_0.__eq__(var_0)


def test_case_1():
    bool_0 = False
    dict_0 = {}
    validation_0 = module_0.Validation(bool_0, dict_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.__str__()
    var_1.to_either()


def test_case_2():
    bool_0 = False
    dict_0 = {}
    validation_0 = module_0.Validation(bool_0, dict_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_lazy()
    var_2 = var_1.to_either()
    var_3 = validation_0.to_maybe()
    var_4 = var_2.to_try()
    var_5 = var_2.__str__()
    var_4.to_either()


def test_case_3():
    str_0 = "\n        Transform Box into Validation.\n\n        :returns: failed Validation monad with previous value as error\n        :rtype: Validation[None, [A]]\n        "
    var_0 = str_0.__eq__(str_0)


def test_case_4():
    str_0 = "\n        Take function and applied this function with monad value and returns new monad with mapped value.\n\n        :params mapper: function to apply on monad value\n        :type mapper: Function(A) -> B\n        :returns: for successfully new Try with mapped value, othercase copy of self\n        :rtype: Try[B]\n        "
    validation_0 = module_0.Validation(str_0, str_0)


def test_case_5():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.is_fail()


def test_case_6():
    bool_0 = True
    bytes_0 = b"w\xb2lz4\x11\xab-\xf2\xa9\xf6"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    validation_0 = module_0.Validation(dict_0, bytes_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.is_fail()
    var_2 = validation_0.__eq__(bool_0)
    validation_0.map(var_1)


def test_case_7():
    bytes_0 = b"\xa2\xd1R,\x8b0y\xaa"
    bytes_1 = b"\x9b\xeca<\xfdI\xee\xb4\x89\xa3ju\xfe"
    validation_0 = module_0.Validation(bytes_1, bytes_1)
    validation_0.bind(bytes_0)


def test_case_8():
    complex_0 = -778.07348 - 743.3014j
    str_0 = "Ba5g_5o<g?%*@%Mr["
    set_0 = {complex_0, complex_0, str_0}
    int_0 = 1727
    validation_0 = module_0.Validation(set_0, int_0)
    none_type_0 = None
    validation_0.ap(none_type_0)


def test_case_9():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.to_maybe()
    validation_0.to_either()


def test_case_10():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_try()
    var_1.is_fail()


def test_case_11():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    validation_0 = module_0.Validation(dict_0, none_type_0)
    validation_0.to_try()


def test_case_12():
    bytes_0 = b"w\xb2lz4\x11\xab-\xf2\xa9\xf6"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    validation_0 = module_0.Validation(dict_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = var_0.__str__()
    var_2 = var_1.__str__()
    var_3 = validation_0.is_success()
    var_0.to_either()


def test_case_13():
    str_0 = "\n        Take function and applied this function with monad value and returns new monad with mapped value.\n\n        :params mapper: function to apply on monad value\n        :type mapper: Function(A) -> B\n        :returns: for successfully new Try with mapped value, othercase copy of self\n        :rtype: Try[B]\n        "
    none_type_0 = None
    validation_0 = module_0.Validation(str_0, none_type_0)
    validation_1 = module_0.Validation(str_0, str_0)
    var_0 = validation_1.to_either()
    var_1 = validation_1.is_success()
    var_2 = validation_1.__str__()
    var_3 = var_0.to_box()
    var_4 = var_3.__str__()
    var_5 = var_3.__str__()
    var_6 = validation_1.to_maybe()
    var_7 = var_6.to_either()
    var_8 = var_7.__str__()


def test_case_14():
    bytes_0 = b"w\xb2lz4\x11\xab-\xf2\xa9\xf6"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    validation_0 = module_0.Validation(dict_0, bytes_0)
    var_0 = module_0.Validation(validation_0, validation_0)
    var_1 = validation_0.__eq__(var_0)
    var_0.__str__()
