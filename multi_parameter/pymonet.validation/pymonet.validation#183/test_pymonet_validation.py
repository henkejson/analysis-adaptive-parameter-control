# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    bytes_0 = b"r\x88\xc4\x88\xdaO\xce\x1e0\x82\xe4%_\xb7\xc0\x80\x9c"
    validation_1 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_1.__eq__(validation_1)
    validation_2 = module_0.Validation(validation_1, validation_1)
    validation_2.map(bool_0)


def test_case_1():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_try()
    var_1 = validation_0.__eq__(var_0)


def test_case_2():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_try()
    var_1 = validation_0.to_try()
    var_2 = validation_0.to_either()
    var_3 = validation_0.to_try()
    var_0.to_maybe()


def test_case_3():
    bytes_0 = b"\x98'\xd7^\xdb"
    validation_0 = module_0.Validation(bytes_0, bytes_0)


def test_case_4():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_try()
    var_1 = validation_0.is_success()


def test_case_5():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.is_fail()
    var_1 = var_0.__str__()


def test_case_6():
    str_0 = "\x0bpAr|!}@&&>DF1dz3F"
    str_1 = ".8lhN@wktZ> T"
    dict_0 = {str_1: str_1, str_1: str_1, str_1: str_1, str_1: str_1}
    validation_0 = module_0.Validation(dict_0, str_1)
    validation_0.map(str_0)


def test_case_7():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.bind(none_type_0)


def test_case_8():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.ap(none_type_0)


def test_case_9():
    complex_0 = -1639.762694 + 678.499053j
    validation_0 = module_0.Validation(complex_0, complex_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.to_either()
    var_1.is_success()


def test_case_10():
    str_0 = "ImmutableList[U]"
    validation_0 = module_0.Validation(str_0, str_0)
    str_1 = "SDQ|"
    validation_1 = module_0.Validation(str_1, str_1)
    var_0 = validation_1.is_success()
    var_1 = validation_1.to_either()
    var_2 = validation_1.to_lazy()
    validation_2 = module_0.Validation(str_1, str_1)
    var_3 = validation_1.to_maybe()
    validation_1.bind(validation_2)


def test_case_11():
    bytes_0 = b"\xff\xff2\xa9|s\x84\x92U\xdf\x7f\x12\x93\x07J"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    var_0.is_success()


def test_case_12():
    bytes_0 = b"\x98'\xd7^\xdb"
    set_0 = {bytes_0, bytes_0, bytes_0}
    none_type_0 = None
    validation_0 = module_0.Validation(set_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.__str__()
    var_2 = var_1.__str__()
    var_3 = validation_0.to_lazy()
    var_4 = var_0.to_maybe()
    validation_0.to_try()


def test_case_13():
    str_0 = "Fs"
    bytes_0 = b"\x98'\xd7^\xdb"
    set_0 = {bytes_0, bytes_0, bytes_0}
    validation_0 = module_0.Validation(set_0, bytes_0)
    var_0 = validation_0.__eq__(str_0)
    bool_0 = True
    validation_1 = module_0.Validation(bool_0, bool_0)
    validation_2 = module_0.Validation(var_0, var_0)
    var_1 = validation_1.__eq__(validation_2)
    validation_3 = module_0.Validation(bytes_0, str_0)
    validation_2.map(validation_3)


def test_case_14():
    dict_0 = {}
    none_type_0 = None
    int_0 = 14
    validation_0 = module_0.Validation(none_type_0, int_0)
    validation_1 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_1.to_either()
    var_1 = validation_1.__eq__(dict_0)
    var_2 = validation_1.to_maybe()
    var_3 = validation_1.to_either()
    validation_2 = module_0.Validation(var_3, dict_0)
    var_4 = validation_2.__str__()
    var_5 = var_0.to_try()
    var_3.bind(validation_1)
