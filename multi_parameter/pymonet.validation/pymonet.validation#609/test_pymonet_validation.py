# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_0.is_success()


def test_case_1():
    bool_0 = False
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(bool_0)
    var_0.is_fail()


def test_case_2():
    none_type_0 = None
    dict_0 = {}
    validation_0 = module_0.Validation(none_type_0, dict_0)
    var_0 = validation_0.__eq__(none_type_0)
    validation_1 = module_0.Validation(none_type_0, validation_0)
    var_1 = validation_0.__eq__(none_type_0)
    var_2 = validation_1.__eq__(validation_1)
    var_3 = validation_0.__str__()
    var_2.map(validation_0)


def test_case_3():
    dict_0 = {}
    bytes_0 = b"\xa7J\xd1\xfb\x9c\xcf\xd1>p"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    var_0.ap(dict_0)


def test_case_4():
    str_0 = "eun:9P%b"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.__str__()
    var_1.bind(str_0)


def test_case_5():
    none_type_0 = None
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_maybe()
    none_type_0.is_success()


def test_case_6():
    none_type_0 = None
    none_type_0.to_box()


def test_case_7():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_8():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.is_success()


def test_case_9():
    int_0 = -365
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.is_fail()


def test_case_10():
    float_0 = 1331.33012
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.map(float_0)


def test_case_11():
    str_0 = "\\1{~.PHRo"
    list_0 = [str_0, str_0]
    complex_0 = -281.5 + 2969.29j
    validation_0 = module_0.Validation(complex_0, complex_0)
    validation_0.bind(list_0)


def test_case_12():
    int_0 = 0
    int_1 = -2649
    none_type_0 = None
    validation_0 = module_0.Validation(int_1, none_type_0)
    validation_0.ap(int_0)


def test_case_13():
    str_0 = "0`t9/*h-&r."
    none_type_0 = None
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.__eq__(none_type_0)
    var_1.bind(str_0)


def test_case_14():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_lazy()
    validation_0.is_success()


def test_case_15():
    bool_0 = False
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(bool_0)
    tuple_0 = (var_0,)
    list_0 = [tuple_0, bool_0, tuple_0, validation_0]
    validation_1 = module_0.Validation(list_0, bool_0)
    validation_1.to_try()


def test_case_16():
    bool_0 = True
    bytes_0 = b"B\xe5\xc8T1d*$"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    validation_0 = module_0.Validation(set_0, bytes_0)
    var_0 = validation_0.__eq__(bool_0)
    var_1 = module_0.Validation(validation_0, bytes_0)
    var_2 = var_1.to_maybe()
    validation_1 = module_0.Validation(validation_0, set_0)
    var_3 = validation_1.to_try()
    var_3.is_fail()


def test_case_17():
    dict_0 = {}
    float_0 = -1681.77
    validation_0 = module_0.Validation(float_0, dict_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_box()
    var_2 = var_1.to_maybe()
    var_3 = var_0.to_box()
    var_3.is_success()


def test_case_18():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    list_0 = [validation_0]
    validation_1 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.__eq__(validation_1)
    validation_2 = module_0.Validation(validation_1, validation_0)
    var_1 = validation_2.__eq__(var_0)
    var_2 = validation_2.__eq__(validation_1)
    var_3 = var_1.__str__()
    var_1.map(var_1)


def test_case_19():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_box()
    validation_0.to_try()
