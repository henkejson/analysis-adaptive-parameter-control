# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bool_0 = False
    list_0 = [bool_0]
    str_0 = "Maybe[T]"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(list_0)
    var_0.is_fail()


def test_case_1():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_box()
    var_2 = var_1.to_lazy()
    var_2.to_lazy()


def test_case_2():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_lazy()
    var_2 = var_0.to_box()
    var_3 = validation_0.to_maybe()
    var_4 = var_2.__eq__(dict_0)
    var_5 = validation_0.is_fail()
    var_4.to_maybe()


def test_case_3():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.is_success()
    var_1 = var_0.__str__()
    var_2 = validation_0.to_maybe()
    var_1.is_fail()


def test_case_4():
    str_0 = "Maybe[T]"
    validation_0 = module_0.Validation(str_0, str_0)


def test_case_5():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.to_maybe()


def test_case_6():
    int_0 = 33
    dict_0 = {}
    tuple_0 = (int_0, int_0, dict_0, int_0)
    int_1 = 0
    validation_0 = module_0.Validation(int_1, dict_0)
    validation_1 = module_0.Validation(tuple_0, dict_0)
    validation_2 = module_0.Validation(tuple_0, validation_1)
    none_type_0 = None
    var_0 = validation_1.__eq__(none_type_0)
    var_1 = validation_0.is_fail()


def test_case_7():
    bool_0 = True
    int_0 = 33
    dict_0 = {}
    tuple_0 = (int_0, int_0, dict_0, int_0)
    int_1 = 0
    validation_0 = module_0.Validation(int_1, dict_0)
    validation_1 = module_0.Validation(tuple_0, dict_0)
    var_0 = validation_1.to_either()
    validation_1.map(bool_0)


def test_case_8():
    str_0 = 'J^*"f'
    bool_0 = True
    none_type_0 = None
    validation_0 = module_0.Validation(bool_0, none_type_0)
    validation_0.bind(str_0)


def test_case_9():
    complex_0 = 517.5 + 463.1j
    complex_1 = 2728.98012 - 2576.5j
    str_0 = "/+e`1e6D\n*'(y3"
    validation_0 = module_0.Validation(complex_1, str_0)
    validation_0.ap(complex_0)


def test_case_10():
    bool_0 = True
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, bool_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.__eq__(bool_0)
    set_0 = {bool_0, bool_0}
    tuple_0 = (bool_0, bool_0, set_0, set_0)
    validation_1 = module_0.Validation(tuple_0, set_0)
    bytes_0 = b"\xe5\xdb\x92\xee\xce\x9c\x9a\x8e\x9d\xcc"
    validation_2 = module_0.Validation(tuple_0, bytes_0)
    var_2 = validation_1.to_box()


def test_case_11():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.to_try()


def test_case_12():
    str_0 = "Maybe[T]"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    var_0.to_box()


def test_case_13():
    int_0 = 33
    dict_0 = {}
    tuple_0 = (int_0, int_0, dict_0, int_0)
    int_1 = 0
    validation_0 = module_0.Validation(int_1, dict_0)
    validation_1 = module_0.Validation(tuple_0, dict_0)
    validation_2 = module_0.Validation(tuple_0, validation_1)
    var_0 = validation_2.__eq__(validation_0)
    var_0.is_fail()


def test_case_14():
    str_0 = "Lazy[T, U]"
    float_0 = -1186.218
    list_0 = [float_0, float_0, float_0, float_0]
    tuple_0 = (float_0, float_0, list_0)
    validation_0 = module_0.Validation(list_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.bind(tuple_0)
    var_1.is_success()


def test_case_15():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.__str__()
    var_2 = var_0.to_try()
    var_2.to_box()


def test_case_16():
    int_0 = 33
    dict_0 = {}
    tuple_0 = (int_0, int_0, dict_0, int_0)
    int_1 = 0
    validation_0 = module_0.Validation(int_1, dict_0)
    validation_1 = module_0.Validation(tuple_0, dict_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.to_box()
    var_2 = var_1.__eq__(int_1)
    var_3 = var_2.__str__()
    list_0 = [var_3]
    validation_2 = module_0.Validation(var_1, list_0)
    var_4 = validation_0.__eq__(validation_0)
    var_1.bind(dict_0)


def test_case_17():
    bool_0 = True
    int_0 = 33
    dict_0 = {}
    validation_0 = module_0.Validation(int_0, dict_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.__eq__(bool_0)
    var_2 = validation_0.__str__()
    var_0.to_box()
