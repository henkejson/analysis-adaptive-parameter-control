# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(none_type_0)
    var_0.to_either()


def test_case_1():
    bool_0 = False
    none_type_0 = None
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(none_type_0)
    bool_1 = True
    list_0 = [bool_1, bool_1, bool_0, var_0]
    list_1 = [list_0]
    dict_0 = {}
    validation_1 = module_0.Validation(dict_0, dict_0)
    var_1 = validation_1.__str__()
    var_1.bind(list_1)


def test_case_2():
    none_type_0 = None
    set_0 = {none_type_0}
    int_0 = -1228
    bytes_0 = b"\xa0:\xddz\xedo\x97\xe8\xad\x8b\xf33Xi\x18"
    tuple_0 = (set_0, set_0, int_0, bytes_0)
    validation_0 = module_0.Validation(none_type_0, tuple_0)
    var_0 = validation_0.__str__()
    var_0.is_success()


def test_case_3():
    str_0 = ">Tr{:-ziU"
    set_0 = {str_0, str_0, str_0}
    validation_0 = module_0.Validation(set_0, str_0)
    var_0 = validation_0.to_either()
    var_0.is_success()


def test_case_4():
    str_0 = "w"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    var_0.is_fail()


def test_case_5():
    float_0 = 1895.547618
    var_0 = float_0.__str__()


def test_case_6():
    complex_0 = 510.7 - 739.72988j
    validation_0 = module_0.Validation(complex_0, complex_0)


def test_case_7():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.to_try()


def test_case_8():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.is_fail()


def test_case_9():
    none_type_0 = None
    complex_0 = 510.7 - 739.72988j
    validation_0 = module_0.Validation(complex_0, complex_0)
    validation_0.map(none_type_0)


def test_case_10():
    bool_0 = True
    bytes_0 = b"60\xba\x9a\xc8\x80\xc5R\xd8\xa6\x16k\xd5\xa9W\x1dY\xef\xc0"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    validation_0 = module_0.Validation(bytes_0, set_0)
    validation_0.bind(bool_0)


def test_case_11():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_lazy()
    validation_0.ap(bool_0)


def test_case_12():
    bool_0 = True
    none_type_0 = None
    validation_0 = module_0.Validation(bool_0, none_type_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.to_try()
    var_2 = validation_0.__eq__(bool_0)
    var_1.to_either()


def test_case_13():
    bool_0 = False
    int_0 = 1055
    set_0 = {int_0, int_0, int_0}
    none_type_0 = None
    validation_0 = module_0.Validation(set_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_maybe()
    var_2 = var_0.to_maybe()
    var_2.map(bool_0)


def test_case_14():
    str_0 = "\n        Returns failed Validation with None as value and errors list.\n\n        :params errors: list of errors to store\n        :type value: List[E]\n        :returns: Failed Validation\n        :rtype: Validation[None, List[E]]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.is_fail()
    var_1 = validation_0.__eq__(validation_0)
    var_2 = validation_0.to_either()
    var_0.to_lazy()


def test_case_15():
    str_0 = ""
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.is_fail()
    var_1 = validation_0.to_maybe()
    var_1.is_fail()


def test_case_16():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_try()
    var_1.is_success()


def test_case_17():
    str_0 = "\n        Returns failed Validation with None as value and errors list.\n\n        :params errors: list of errors to store\n        :type value: List[E]\n        :returns: Failed Validation\n        :rtype: Validation[None, List[E]]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.is_fail()
    var_1 = var_0.__str__()
    validation_1 = module_0.Validation(str_0, var_1)
    var_2 = validation_1.to_try()
    var_3 = validation_0.__eq__(validation_1)
    var_2.to_either()
