# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    float_0 = 1003.0
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.__eq__(float_0)
    var_1 = var_0.__str__()


def test_case_1():
    none_type_0 = None
    dict_0 = {none_type_0: none_type_0}
    tuple_0 = (dict_0,)
    bool_0 = True
    tuple_1 = (tuple_0, bool_0)
    validation_0 = module_0.Validation(none_type_0, tuple_1)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_box()
    var_2 = validation_0.__str__()


def test_case_2():
    bytes_0 = b"\x974\xc8T$\x1d"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.__eq__(validation_0)
    set_0 = set()
    validation_1 = module_0.Validation(var_1, var_1)
    var_2 = validation_1.__eq__(set_0)
    var_0.is_fail()


def test_case_3():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_lazy()
    var_0.map(var_1)


def test_case_4():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)


def test_case_5():
    str_0 = "HaeMK6>X^"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.is_success()


def test_case_6():
    bool_0 = False
    set_0 = {bool_0}
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.is_fail()
    var_1 = validation_0.to_lazy()


def test_case_7():
    bytes_0 = b")\x88'\xd7\xf7\xe7@:\xf8\xd6q\xff6L\tTo[~"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_0.map(bytes_0)


def test_case_8():
    float_0 = 1003.0
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.__eq__(float_0)
    validation_1 = module_0.Validation(var_0, bool_0)
    int_0 = 334
    validation_0.bind(int_0)


def test_case_9():
    bytes_0 = b"\xaa\xab\xee\x0c\xb9\x97Q\xc4\xc6\x9d\x1eYj"
    float_0 = 912.262423
    validation_0 = module_0.Validation(float_0, float_0)
    validation_0.ap(bytes_0)


def test_case_10():
    float_0 = 1003.0
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.__eq__(float_0)
    var_1 = validation_0.to_box()
    var_1.is_success()


def test_case_11():
    float_0 = 346.0
    validation_0 = module_0.Validation(float_0, float_0)
    validation_0.to_try()


def test_case_12():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0, tuple_0}
    validation_0 = module_0.Validation(set_0, tuple_0)
    var_0 = validation_0.__str__()
    var_0.to_either()


def test_case_13():
    none_type_0 = None
    dict_0 = {none_type_0: none_type_0}
    tuple_0 = (dict_0,)
    bool_0 = True
    tuple_1 = (tuple_0, bool_0)
    validation_0 = module_0.Validation(none_type_0, tuple_1)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_box()
    var_2 = validation_0.__eq__(validation_0)
    var_2.bind(none_type_0)


def test_case_14():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_lazy()


def test_case_15():
    bytes_0 = b"\x974\xc8T$\x1d"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.to_maybe()
    validation_1 = module_0.Validation(var_1, var_0)
    var_2 = var_0.to_maybe()
    var_3 = validation_1.to_box()
    var_4 = var_0.__eq__(var_0)
    var_5 = validation_0.to_try()
    var_6 = var_2.__str__()
    var_3.is_fail()


def test_case_16():
    bytes_0 = b"\x974\xc8T$\x1d"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.to_either()
    float_0 = 346.0
    none_type_0 = None
    float_1 = 1544.27638
    validation_1 = module_0.Validation(none_type_0, float_1)
    bytes_1 = b"\x7fi\xe0&"
    validation_2 = module_0.Validation(float_0, bytes_1)
    var_2 = validation_2.__eq__(validation_1)
    var_1.to_either()
