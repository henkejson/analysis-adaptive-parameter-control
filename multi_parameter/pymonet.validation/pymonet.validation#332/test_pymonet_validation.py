# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.__eq__(validation_0)


def test_case_1():
    float_0 = -1509.246
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(float_0)
    var_0.is_fail()


def test_case_2():
    str_0 = "l#?\x0cY~C>e5HYq"
    str_1 = "\n        :returns: False\n        :rtype: Boolean\n        "
    validation_0 = module_0.Validation(str_0, str_1)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.__str__()
    var_2 = validation_0.to_box()
    var_3 = validation_0.__eq__(str_0)
    var_1.to_maybe()


def test_case_3():
    dict_0 = {}
    list_0 = [dict_0]
    validation_0 = module_0.Validation(list_0, dict_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_maybe()
    var_1.is_fail()


def test_case_4():
    bool_0 = True
    int_0 = -1775
    str_0 = "zI?\x0b\x0cC)iVL"
    list_0 = [str_0]
    list_1 = [list_0]
    validation_0 = module_0.Validation(list_1, list_1)
    var_0 = validation_0.to_either()
    var_1 = var_0.ap(int_0)
    var_2 = var_1.__str__()
    var_2.map(bool_0)


def test_case_5():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_lazy()
    var_2 = var_1.__eq__(list_0)
    var_3 = validation_0.to_either()
    var_0.ap(var_0)


def test_case_6():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.__eq__(validation_0)
    var_2 = validation_0.to_maybe()
    validation_0.bind(var_0)


def test_case_7():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)


def test_case_8():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.__str__()


def test_case_9():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.__eq__(validation_0)
    validation_0.is_fail()


def test_case_10():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    none_type_0 = None
    var_0 = validation_0.__eq__(none_type_0)
    none_type_1 = None
    var_1 = validation_0.to_either()
    var_2 = var_1.to_lazy()
    var_3 = validation_0.is_fail()
    var_4 = var_1.to_try()
    validation_1 = module_0.Validation(var_2, none_type_1)
    validation_0.map(validation_1)


def test_case_11():
    bytes_0 = b"\x1e]\xb6xm\x1b\x8b\xd12\x9e\xbas\xa18q"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_0.ap(validation_0)


def test_case_12():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_try()
    var_2 = var_1.__eq__(list_0)
    var_2.to_lazy()


def test_case_13():
    bytes_0 = b"+0H\x8a\xba2o!gq\x1d\x0f=\xf6\x7f:q\xf2"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_try()
    var_0.is_success()


def test_case_14():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.__eq__(validation_0)
    none_type_0 = None
    var_1 = validation_0.__eq__(none_type_0)
    var_2 = validation_0.__str__()
    var_2.is_success()


def test_case_15():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    bool_0 = True
    validation_1 = module_0.Validation(validation_0, bool_0)
    none_type_0 = None
    var_0 = validation_1.__eq__(none_type_0)
    var_1 = validation_0.__eq__(validation_1)
    validation_2 = module_0.Validation(set_0, var_0)
    validation_1.to_either()
