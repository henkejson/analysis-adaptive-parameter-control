# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    tuple_0 = (bool_0, list_0)
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(tuple_0)
    var_0.to_either()


def test_case_1():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.__str__()
    var_0.is_success()


def test_case_2():
    str_0 = "&%M7+y_'BK"
    none_type_0 = None
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, str_0)
    var_0 = validation_0.__str__()
    validation_0.ap(none_type_0)


def test_case_3():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.to_maybe()
    var_2 = var_1.to_try()
    var_3 = validation_0.to_maybe()
    var_1.to_maybe()


def test_case_4():
    str_0 = "Dfz&."
    validation_0 = module_0.Validation(str_0, str_0)


def test_case_5():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.__str__()


def test_case_6():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.is_fail()


def test_case_7():
    bool_0 = True
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.map(bool_0)


def test_case_8():
    str_0 = "Ld;ZJoAq"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.__str__()
    validation_0.bind(str_0)


def test_case_9():
    int_0 = 2502
    bool_0 = False
    validation_0 = module_0.Validation(int_0, bool_0)
    dict_0 = {}
    validation_1 = module_0.Validation(dict_0, dict_0)
    validation_1.ap(dict_0)


def test_case_10():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_box()


def test_case_11():
    int_0 = -1017
    validation_0 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_maybe()
    complex_0 = 1917.142902 + 2937.98j
    validation_1 = module_0.Validation(complex_0, complex_0)
    validation_1.to_try()


def test_case_12():
    bool_0 = True
    list_0 = [bool_0]
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_try()


def test_case_13():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.to_lazy()
    var_2 = validation_0.to_either()
    var_0.to_lazy()


def test_case_14():
    bytes_0 = b"X\xd9\x19jM\xe4\xe5 \x97"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_0.is_success()


def test_case_15():
    bytes_0 = b"\xb3\xb2\xfa\xeb=\xdc}f\xf7\xdf\xc1m\r"
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.__str__()
    var_1.bind(bytes_0)


def test_case_16():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.is_fail()
    var_1 = validation_0.__eq__(validation_0)
    var_2 = validation_0.to_box()
    validation_1 = module_0.Validation(var_0, var_2)
    validation_2 = module_0.Validation(validation_1, var_1)
    var_3 = validation_1.__eq__(validation_0)
    var_4 = validation_0.to_either()
    var_5 = var_4.to_lazy()
    var_3.is_fail()
