# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    str_0 = "inf"
    bytes_0 = b"F\xb8>)\xafSt\xb8\xb2"
    validation_0 = module_0.Validation(bytes_0, str_0)
    var_0 = validation_0.__eq__(bytes_0)
    var_0.to_maybe()


def test_case_1():
    float_0 = -3758.3941
    set_0 = {float_0, float_0}
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, set_0)
    var_0 = validation_0.to_either()


def test_case_2():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_maybe()
    var_0.to_maybe()


def test_case_3():
    bytes_0 = b"F\xb8>)\xafSt\xb8\xb2"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, bytes_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.__eq__(bytes_0)
    var_2 = validation_0.to_maybe()
    var_1.to_either()


def test_case_4():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_5():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.__str__()


def test_case_6():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.is_fail()


def test_case_7():
    bytes_0 = b"\x01\xc5\xad&\xb6\x08\x0c\x10\x88\xf5\xb4q\x8e"
    bool_0 = False
    none_type_0 = None
    validation_0 = module_0.Validation(bool_0, none_type_0)
    validation_0.map(bytes_0)


def test_case_8():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.bind(none_type_0)


def test_case_9():
    bytes_0 = b"\x12\xf0&q)\xe7Z&}\xc6\x91\xfa\xb6\xaa;x"
    none_type_0 = None
    validation_0 = module_0.Validation(bytes_0, none_type_0)
    validation_0.ap(none_type_0)


def test_case_10():
    str_0 = '^"G$F'
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    set_0 = {bool_0, bool_0}
    validation_0 = module_0.Validation(dict_0, set_0)
    var_0 = validation_0.to_box()
    var_0.bind(str_0)


def test_case_11():
    bytes_0 = b"F\xb8>)\xafSt\xb8\xb2"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, bytes_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.__eq__(bytes_0)
    var_2 = validation_0.__str__()
    var_2.bind(none_type_0)


def test_case_12():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_box()
    validation_0.is_success()


def test_case_13():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_box()
    validation_0.to_try()


def test_case_14():
    bool_0 = True
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.__eq__(bool_0)
    var_1 = validation_0.to_either()
    var_2 = var_0.__str__()
    validation_0.bind(var_2)


def test_case_15():
    none_type_0 = None
    bool_0 = True
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = module_0.Validation(none_type_0, bool_0)
    var_1 = validation_0.__eq__(var_0)
    validation_0.is_fail()


def test_case_16():
    str_0 = ";@\x0bK\x0b\t\x0br*"
    bytes_0 = b"F\xb8>)\xafSt\xb8\xb2"
    validation_0 = module_0.Validation(bytes_0, str_0)
    var_0 = validation_0.__eq__(bytes_0)
    var_1 = validation_0.__str__()
    bytes_0.is_fail()


def test_case_17():
    bytes_0 = b"\x93\xff\x8cK"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.is_fail()
    var_1.ap(bytes_0)


def test_case_18():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.__str__()
    var_1 = var_0.__str__()
    validation_0.bind(var_1)
