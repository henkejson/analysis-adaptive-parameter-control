# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bytes_0 = b"\xdb\x16"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(bytes_0)
    var_0.to_box()


def test_case_1():
    str_0 = "ij\x0bn1w;"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    var_0.to_try()


def test_case_2():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    validation_1 = module_0.Validation(validation_0, set_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.__str__()
    var_2 = validation_0.to_either()
    var_3 = validation_0.__eq__(validation_0)
    var_4 = validation_0.__str__()
    var_5 = validation_0.to_maybe()
    var_6 = var_0.to_either()
    var_7 = var_6.to_box()
    none_type_0 = None
    var_4.map(none_type_0)


def test_case_3():
    set_0 = set()
    var_0 = module_0.Validation(set_0, set_0)


def test_case_4():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.to_try()


def test_case_5():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.is_fail()


def test_case_6():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.map(none_type_0)


def test_case_7():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.bind(validation_0)


def test_case_8():
    bytes_0 = b"\x90^\xe6\xdb\xe4\x0f\x9c\xb3\x12\x84\xc7h\x7f&\x99u\x96<\xe1"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_0.ap(validation_0)


def test_case_9():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_either()


def test_case_10():
    bytes_0 = b"\x90^\xe6\xdb\xe4\x0f\x9c\xb3\x12\x84\xc7h\x7f&\x99u\x96<\xe1"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.to_maybe()
    var_2 = var_1.to_box()
    var_3 = var_2.to_lazy()
    var_2.bind(validation_0)


def test_case_11():
    bytes_0 = b"\xa0\x1c\xf8{M\xf9\x87"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    float_0 = 6330.683895
    none_type_0 = None
    validation_0 = module_0.Validation(float_0, dict_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.__eq__(none_type_0)
    var_1.to_try()


def test_case_12():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.__str__()
    var_1 = module_0.Validation(validation_0, var_0)
    var_2 = validation_0.to_try()
    var_3 = var_1.__eq__(validation_0)
    var_2.to_maybe()
