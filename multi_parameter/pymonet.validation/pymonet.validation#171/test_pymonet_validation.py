# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    set_0 = set()
    int_0 = -602
    list_0 = [int_0, int_0]
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.__eq__(set_0)
    var_0.to_lazy()


def test_case_1():
    str_0 = "Ub>\rr\x0c]_fD6L]jV"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    validation_1.is_success()


def test_case_2():
    int_0 = -602
    list_0 = [int_0, int_0]
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.is_success()
    var_1 = validation_0.to_maybe()
    var_2 = validation_0.__eq__(validation_0)
    var_3 = validation_0.to_lazy()
    var_4 = var_3.__str__()
    var_4.to_maybe()


def test_case_3():
    float_0 = -877.0
    validation_0 = module_0.Validation(float_0, float_0)


def test_case_4():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.to_try()


def test_case_5():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.is_fail()


def test_case_6():
    bool_0 = False
    str_0 = '%:a )\n#/"($|&ZLN}n+'
    bytes_0 = b"Rxeg\xfa\x10BE\xb4\xeeY\xe2\x9a\xbd\xcfV\xc1\xd7R"
    tuple_0 = (bytes_0,)
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.bind(str_0)
    var_2 = var_1.to_try()
    none_type_0 = None
    validation_1 = module_0.Validation(var_2, none_type_0)
    validation_1.map(bool_0)


def test_case_7():
    bool_0 = True
    bytes_0 = b"\x14\xf4S\xe3\xa9\xd40\x0ed\xae\n\xcb\xc9\x7f"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_0.bind(bool_0)


def test_case_8():
    none_type_0 = None
    str_0 = "\tc2T4>\\3#sX/"
    float_0 = -64.77026
    set_0 = {float_0, float_0, float_0, str_0}
    tuple_0 = (str_0, float_0, set_0)
    none_type_1 = None
    validation_0 = module_0.Validation(tuple_0, none_type_1)
    validation_0.ap(none_type_0)


def test_case_9():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_box()
    var_0.to_box()


def test_case_10():
    int_0 = -602
    list_0 = [int_0, int_0]
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.is_success()
    var_1 = validation_0.__eq__(validation_0)
    var_2 = validation_0.to_lazy()
    var_3 = var_2.__str__()
    var_0.is_fail()


def test_case_11():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(bool_0)
    var_1 = validation_0.to_lazy()
    var_2 = var_1.to_either()
    set_0 = {bool_0}
    validation_1 = module_0.Validation(set_0, bool_0)
    validation_1.to_try()


def test_case_12():
    int_0 = -602
    list_0 = [int_0, int_0]
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.__str__()
    var_0.to_maybe()


def test_case_13():
    bytes_0 = b"\xadmmWy\x0fn\xee\xae\xb6\x8d\xe6\xbe\x03\xc3"
    bool_0 = True
    bytes_1 = b"\x16#\xcf\x9c\xf4\xda\xdf\xe4\xdb\xad\xc8\x1e\x00)\x10"
    bytes_2 = b"\xd8\x93\x80N+\xab"
    str_0 = "ydfWnJFAfyy"
    tuple_0 = (str_0,)
    tuple_1 = (bytes_1, bytes_2, tuple_0)
    tuple_2 = ()
    validation_0 = module_0.Validation(tuple_1, tuple_2)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_box()
    var_2 = var_1.to_lazy()
    var_3 = var_2.to_box()
    var_4 = var_3.to_lazy()
    var_5 = var_4.bind(bool_0)
    var_6 = var_5.ap(bytes_0)
    var_6.is_fail()


def test_case_14():
    set_0 = set()
    int_0 = -602
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.__eq__(validation_0)
    var_2 = validation_0.to_maybe()
    var_3 = var_2.__eq__(int_0)
    var_4 = var_2.to_either()
    var_3.to_either()


def test_case_15():
    str_0 = "Ub>\rr\x0c]_fD6L]jV"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    var_1 = validation_1.__eq__(validation_0)
    var_2 = var_1.__str__()
    validation_2 = module_0.Validation(var_2, var_2)
    var_3 = validation_2.to_either()
    var_4 = var_3.bind(var_0)
