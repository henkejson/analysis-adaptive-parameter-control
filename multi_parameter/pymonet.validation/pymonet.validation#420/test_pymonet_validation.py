# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    none_type_0 = None
    bytes_0 = b"\xe6\x97\xf3\xd4"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    validation_0 = module_0.Validation(dict_0, bytes_0)
    var_0 = validation_0.__eq__(none_type_0)


def test_case_1():
    bytes_0 = b"l\xf1b\xe6{\xb8N\xa6\xad\x11\x133[QSn\xc7\xde"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()


def test_case_2():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    set_0 = {bool_0, bool_0, bool_0}
    validation_0 = module_0.Validation(list_0, set_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_maybe()
    var_2 = validation_0.to_maybe()
    var_3 = validation_0.to_box()


def test_case_3():
    bytes_0 = b"p\xe6{\xb8N\xea\xad\x11\x133[\xee\xcfSn\xc7\xde"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()


def test_case_4():
    bytes_0 = b"b\xe6{\xb8N\xa6\xad\x11\x133[\xeeQSn\xc7\xde"
    validation_0 = module_0.Validation(bytes_0, bytes_0)


def test_case_5():
    bytes_0 = b"H\xc1\x8d\xda"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.is_fail()
    var_0.to_lazy()


def test_case_6():
    bytes_0 = b";\xbbA\xaf"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_0.map(bytes_0)


def test_case_7():
    bytes_0 = b"b\xe6Z\xb8N\xa6\xad\xec3[\n\x1fSn\xc7\xde"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_0.bind(bytes_0)


def test_case_8():
    int_0 = -1839
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.ap(int_0)


def test_case_9():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    list_0 = [dict_0]
    none_type_0 = None
    validation_0 = module_0.Validation(list_0, none_type_0)
    var_0 = validation_0.to_box()


def test_case_10():
    bytes_0 = b"\xe6\x97\xf3\xd4"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_lazy()


def test_case_11():
    int_0 = 1400
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.to_try()


def test_case_12():
    str_0 = ""
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    var_0.to_maybe()


def test_case_13():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_maybe()
    var_1.to_maybe()


def test_case_14():
    int_0 = 2556
    validation_0 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.__eq__(validation_0)
    var_0.to_box()


def test_case_15():
    str_0 = ""
    validation_0 = module_0.Validation(str_0, str_0)
    validation_1 = module_0.Validation(validation_0, str_0)
    var_0 = validation_1.to_either()
    var_1 = var_0.to_try()


def test_case_16():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    bytes_0 = b"k\n\x97\xb5\x13\xc5\xbcI\x18\xee^\xca4I\xb0\x04\xd2\xfazQ"
    set_0 = {bool_0, bool_0, bool_0}
    validation_0 = module_0.Validation(list_0, set_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = var_0.__eq__(var_0)
    validation_1 = module_0.Validation(bytes_0, var_1)
    var_2 = validation_1.__eq__(validation_0)
    validation_1.to_either()


def test_case_17():
    str_0 = ""
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    var_0.is_success()
