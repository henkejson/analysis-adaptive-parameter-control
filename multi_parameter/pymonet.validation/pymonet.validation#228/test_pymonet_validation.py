# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0
import builtins as module_1


def test_case_0():
    bool_0 = False
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_1 = module_0.Validation(var_0, none_type_0)
    var_1 = var_0.__eq__(bool_0)
    var_2 = validation_1.__eq__(var_0)
    var_2.to_try()


def test_case_1():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(none_type_0)


def test_case_2():
    none_type_0 = None
    dict_0 = {}
    validation_0 = module_0.Validation(none_type_0, dict_0)
    var_0 = validation_0.__str__()
    var_0.to_try()


def test_case_3():
    str_0 = '"<~^|_\r'
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_1 = module_0.Validation(str_0, str_0)
    validation_2 = module_0.Validation(none_type_0, str_0)
    var_0 = validation_2.__eq__(validation_2)
    var_1 = validation_1.to_try()
    var_2 = validation_1.__str__()
    var_3 = var_1.__eq__(var_0)
    module_1.object(*var_0)


def test_case_4():
    bytes_0 = b"}\xd7f)\xa0#\x1dv\xd5>$#\x01\x9a\xa4"
    validation_0 = module_0.Validation(bytes_0, bytes_0)


def test_case_5():
    int_0 = -220
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.to_try()


def test_case_6():
    int_0 = 801
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.is_fail()


def test_case_7():
    bytes_0 = b"}f)\xa0#v\xd5>$#\x01\x9a~\xa4"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    int_0 = -1064
    list_0 = [bytes_0]
    tuple_0 = (int_0, list_0)
    validation_0.map(tuple_0)


def test_case_8():
    bytes_0 = b"\x1b\xc7:)#\xbavn>\x16\x8b\x01\x9a\xa4"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_0.bind(bytes_0)


def test_case_9():
    str_0 = '"|<~^\x0c_A\r:'
    validation_0 = module_0.Validation(str_0, str_0)
    validation_0.ap(str_0)


def test_case_10():
    str_0 = "\n        :param constructor_fn: function to call during fold method call\n        :type constructor_fn: Function() -> A\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_box()


def test_case_11():
    int_0 = 1
    validation_0 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.to_lazy()


def test_case_12():
    int_0 = 801
    bool_0 = True
    validation_0 = module_0.Validation(int_0, bool_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_box()
    var_1.is_success()


def test_case_13():
    bytes_0 = b"}\xd7fS\xa0#\x1dvd$K\x9a\xa4"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()


def test_case_14():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_1 = module_0.Validation(var_0, none_type_0)
    var_1 = validation_0.__eq__(none_type_0)
    validation_2 = module_0.Validation(none_type_0, var_1)
    var_2 = validation_0.__eq__(var_0)
    var_3 = validation_2.__eq__(validation_1)
    var_1.ap(validation_0)


def test_case_15():
    bytes_0 = b"}f)\xa0#v\xd5\x83>$#\x01\xce~\xa4"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()


def test_case_16():
    bool_0 = True
    set_0 = {bool_0}
    bytes_0 = b"\x8d\xff\xb4\xfa\xf7\xdbb\xc5j\xf7R\xd0]"
    list_0 = []
    validation_0 = module_0.Validation(bytes_0, list_0)
    var_0 = validation_0.to_either()
    var_0.map(set_0)


def test_case_17():
    str_0 = ""
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_1 = module_0.Validation(str_0, str_0)
    var_0 = validation_1.to_either()
    validation_2 = module_0.Validation(none_type_0, str_0)
    var_1 = validation_2.__eq__(validation_2)
    var_2 = validation_1.to_try()
    var_3 = var_2.__eq__(var_1)
    var_4 = validation_1.to_maybe()
    var_1.ap(var_0)
