# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0
import builtins as module_1


def test_case_0():
    bool_0 = True
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.__eq__(bool_0)
    var_2 = validation_0.is_fail()


def test_case_1():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.__str__()
    validation_0.ap(validation_0)


def test_case_2():
    bool_0 = False
    none_type_0 = None
    str_0 = "{Le?b_l3jLycp=SF)~"
    set_0 = {bool_0, none_type_0}
    validation_0 = module_0.Validation(none_type_0, set_0)
    var_0 = validation_0.__str__()
    var_1 = var_0.__eq__(str_0)
    var_1.to_maybe()


def test_case_3():
    none_type_0 = None
    none_type_1 = None
    bool_0 = False
    bool_1 = False
    set_0 = {bool_1}
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.map(bool_0)
    var_2 = var_1.map(none_type_1)
    var_3 = var_2.bind(none_type_0)
    var_3.is_fail()


def test_case_4():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)


def test_case_5():
    object_0 = module_1.object()
    validation_0 = module_0.Validation(object_0, object_0)
    validation_0.map(object_0)


def test_case_6():
    int_0 = 0
    float_0 = 4358.0
    set_0 = {float_0, float_0, float_0, float_0}
    validation_0 = module_0.Validation(set_0, float_0)
    validation_0.bind(int_0)


def test_case_7():
    complex_0 = 23 - 3384.76j
    none_type_0 = None
    validation_0 = module_0.Validation(complex_0, none_type_0)
    validation_0.ap(complex_0)


def test_case_8():
    str_0 = "r:TGy4ST\t1"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_box()


def test_case_9():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_box()
    var_2 = validation_0.to_lazy()
    validation_0.bind(var_2)


def test_case_10():
    int_0 = 1791
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_box()
    none_type_1 = None
    validation_1 = module_0.Validation(none_type_1, int_0)
    str_0 = "\n    The Either type represents values with two possibilities: B value of type Either[A, B] is either Left[A or Right[B]\n    But not both in the same time.\n    "
    set_0 = {str_0, str_0}
    validation_2 = module_0.Validation(set_0, set_0)
    var_2 = validation_2.to_either()
    var_2.is_success()


def test_case_11():
    bool_0 = True
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.is_success()
    var_1 = validation_0.__eq__(dict_0)
    var_2 = validation_0.__eq__(bool_0)
    var_3 = validation_0.to_try()
    var_4 = var_1.__eq__(var_2)
    var_3.map(var_2)


def test_case_12():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.to_either()
    var_2 = var_0.to_lazy()
    var_0.to_maybe()


def test_case_13():
    bytes_0 = b"u\x909\t\xed\xa7\x8dhT \xb7\xf5\xc9rk\xe8dq\x10\x96"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, bytes_0)
    var_0 = validation_0.to_maybe()
    str_0 = "wF]YWMm{BFv;YkKv|e="
    validation_1 = module_0.Validation(str_0, str_0)
    validation_1.bind(none_type_0)


def test_case_14():
    bytes_0 = b"d\x0c\xf8\x9b\xf1F\xb9"
    none_type_0 = None
    validation_0 = module_0.Validation(bytes_0, none_type_0)
    var_0 = validation_0.__eq__(none_type_0)
    validation_1 = validation_0.__eq__(validation_0)
    validation_1.to_box()


def test_case_15():
    bytes_0 = b"d\x0c\xf8\x9b\xf1F\xb9"
    none_type_0 = None
    validation_0 = module_0.Validation(bytes_0, none_type_0)
    var_0 = module_0.Validation(validation_0, bytes_0)
    validation_1 = module_0.Validation(bytes_0, bytes_0)
    validation_2 = validation_1.__eq__(validation_0)
    validation_2.map(validation_2)
