# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    set_0 = set()
    none_type_0 = None
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.__eq__(none_type_0)


def test_case_1():
    int_0 = 1
    list_0 = [int_0]
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_either()
    var_0.is_success()


def test_case_2():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_box()
    var_1.is_fail()


def test_case_3():
    str_0 = "\n        Take mapper function and return value of Left.\n\n        :returns: Stored value\n        :rtype: A\n        "
    validation_0 = module_0.Validation(str_0, str_0)


def test_case_4():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.is_success()


def test_case_5():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.to_lazy()
    var_2 = var_0.to_box()
    var_3 = var_0.ap(tuple_0)
    var_4 = validation_0.is_fail()


def test_case_6():
    str_0 = "s>Le6TeUw#_X%Ey\x0c\x0c"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_lazy()
    validation_0.map(str_0)


def test_case_7():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_0.bind(bool_0)


def test_case_8():
    str_0 = "s>Le6TeUw#_X%Ey\x0c\x0c"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.__str__()
    validation_0.ap(str_0)


def test_case_9():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.to_box()
    var_1.is_fail()


def test_case_10():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_either()
    validation_0.to_either()


def test_case_11():
    float_0 = -2403.0
    dict_0 = {float_0: float_0}
    validation_0 = module_0.Validation(dict_0, float_0)
    validation_0.to_try()


def test_case_12():
    bytes_0 = b"/([5\x0c\x89\xef\xb4\xfb\xeaZWH[\x8d"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.__eq__(validation_0)


def test_case_13():
    bytes_0 = b"/([5\x0c\x89\xef\xb4\xfb\xeaZWH[\x8d"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)


def test_case_14():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.__eq__(var_0)
    var_2 = validation_0.to_maybe()


def test_case_15():
    set_0 = set()
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, set_0)
    var_0 = validation_0.__str__()
    var_0.to_try()


def test_case_16():
    bytes_0 = b"/([5\x0c\x89\xef\xb4\xfb\xeaZWH[\x8d"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = module_0.Validation(bytes_0, validation_0)
    var_1 = var_0.__eq__(validation_0)
    var_2 = validation_0.__str__()
    var_3 = validation_0.__eq__(validation_0)
    var_4 = validation_0.is_success()
    var_3.to_box()
