# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0
import builtins as module_1


def test_case_0():
    bytes_0 = b"\x97\x12\x86\xfd\xd0\xd9\xdc\x97\x15\xd4\xbdo[I"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    validation_1 = module_0.Validation(bytes_0, bytes_0)
    var_1 = validation_0.__eq__(validation_1)
    var_2 = validation_0.__str__()
    validation_1.bind(validation_0)


def test_case_1():
    bytes_0 = b"N\x87\x07y\xec"
    float_0 = 1889.04395
    none_type_0 = None
    validation_0 = module_0.Validation(float_0, none_type_0)
    var_0 = validation_0.__eq__(bytes_0)
    var_1 = var_0.__str__()
    var_2 = var_1.__str__()
    var_3 = var_2.__str__()
    var_0.to_lazy()


def test_case_2():
    str_0 = "\n        Returns failed Validation with None as value and errors list.\n\n        :params errors: list of errors to store\n        :type value: List[E]\n        :returns: Failed Validation\n        :rtype: Validation[None, List[E]]\n        "
    bool_0 = True
    tuple_0 = (str_0, bool_0)
    validation_0 = module_0.Validation(tuple_0, str_0)
    var_0 = validation_0.__str__()


def test_case_3():
    none_type_0 = None
    none_type_0.is_success()


def test_case_4():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)


def test_case_5():
    float_0 = 217.845
    validation_0 = module_0.Validation(float_0, float_0)
    validation_0.to_either()


def test_case_6():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.is_fail()


def test_case_7():
    bytes_0 = b""
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.map(bytes_0)


def test_case_8():
    bytes_0 = b"\x9a\x92Z"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_try()
    validation_0.ap(bytes_0)


def test_case_9():
    none_type_0 = None
    str_0 = "w\\$a {B"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.to_either()
    validation_0.ap(none_type_0)


def test_case_10():
    none_type_0 = None
    list_0 = []
    validation_0 = module_0.Validation(none_type_0, list_0)
    var_0 = validation_0.to_lazy()


def test_case_11():
    bytes_0 = b"\x82m<\x7f5\x9d0\x179\xf4\x9f`\xc7B\x1d"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_try()
    var_1.to_box()


def test_case_12():
    none_type_0 = None
    dict_0 = {
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        none_type_0: none_type_0,
    }
    validation_0 = module_0.Validation(dict_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.__eq__(validation_0)
    validation_1 = module_0.Validation(none_type_0, dict_0)
    var_2 = validation_1.is_success()
    var_3 = validation_0.__eq__(validation_1)
    var_3.to_either()


def test_case_13():
    bytes_0 = b"\x97\x12\x86\xfd\xd0\xd9\xdc\x97\x15\xd4\xbdo[I"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_maybe()
    bytes_0.to_maybe()


def test_case_14():
    bytes_0 = b"E3\x83\xad9\x94%"
    dict_0 = {}
    none_type_0 = None
    validation_0 = module_0.Validation(bytes_0, dict_0)
    var_0 = validation_0.to_maybe()
    var_0.ap(none_type_0)


def test_case_15():
    object_0 = module_1.object()
    none_type_0 = None
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.__eq__(none_type_0)
    var_1.to_maybe()


def test_case_16():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.__eq__(list_0)
    bytes_0 = b"\xf3\x8e\xe8Ah\xa0\xe5\x1c\xcb\xa9\x7f\x9b\xd1\xbfs{D\xf8"
    validation_1 = module_0.Validation(bytes_0, bytes_0)
    var_2 = validation_1.is_fail()
    var_3 = validation_1.is_success()
    var_2.to_lazy()
