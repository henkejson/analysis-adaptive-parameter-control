# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    str_0 = "GrJ9KS"
    int_0 = -2019
    validation_0 = module_0.Validation(int_0, str_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_maybe()
    var_2 = var_0.__str__()
    var_3 = var_2.__str__()
    validation_1 = module_0.Validation(var_2, int_0)
    validation_2 = module_0.Validation(var_2, validation_0)
    var_4 = validation_0.__eq__(validation_2)
    var_5 = validation_2.to_lazy()
    validation_2.bind(var_4)


def test_case_1():
    bytes_0 = b"\x86\xf5"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(bytes_0)


def test_case_2():
    bytes_0 = b"P\xa2\x91\xef\n\xd7\x9c\xd9p\xc3f\xbc\xe3\xdd\xd7\xe4a`"
    bytes_1 = b"\x81H\xceP@\xc9\xf9\x90\x84"
    tuple_0 = ()
    validation_0 = module_0.Validation(bytes_1, tuple_0)
    var_0 = validation_0.__str__()
    bytes_2 = b")\x92\xa4o\x92a\xcd\xb2\xdc\xee\x07\xbf\x10"
    validation_1 = module_0.Validation(bytes_2, bytes_2)
    var_1 = validation_1.to_lazy()
    var_2 = var_1.bind(var_1)
    var_3 = var_1.to_try()
    var_4 = var_3.__str__()
    var_4.ap(bytes_0)


def test_case_3():
    bytes_0 = b"\xb6Q\xbdG\xe9\xd4\xdc _O\xfalu\xc6V\x9aX\xc0\xc1"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()


def test_case_4():
    complex_0 = -3369.91 - 261.6j
    list_0 = [complex_0, complex_0, complex_0]
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_either()
    int_0 = -818
    validation_1 = module_0.Validation(int_0, int_0)


def test_case_5():
    bytes_0 = b"l\x14"
    validation_0 = module_0.Validation(bytes_0, bytes_0)


def test_case_6():
    int_0 = -2008
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.is_success()


def test_case_7():
    int_0 = -310
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.is_fail()


def test_case_8():
    int_0 = -2032
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.map(validation_0)


def test_case_9():
    bytes_0 = b"l\x14"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_0.bind(validation_0)


def test_case_10():
    str_0 = "N5l&%+C"
    validation_0 = module_0.Validation(str_0, str_0)
    none_type_0 = None
    validation_0.ap(none_type_0)


def test_case_11():
    bytes_0 = b"aQ\x14\xce\xc8\xfa\xcd\x859wyGb\x15l\xd7>"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_box()


def test_case_12():
    int_0 = -2017
    validation_0 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.to_lazy()


def test_case_13():
    bytes_0 = b"l\x14"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_try()


def test_case_14():
    int_0 = -1904
    none_type_0 = None
    validation_0 = module_0.Validation(int_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_try()


def test_case_15():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)
    var_0.is_success()


def test_case_16():
    str_0 = "N5l&%+C"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    validation_1 = module_0.Validation(str_0, var_0)


def test_case_17():
    set_0 = set()
    str_0 = "]^;Bk'g)luL{HyI"
    validation_0 = module_0.Validation(str_0, set_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_box()
    var_2 = var_1.__str__()
    var_3 = var_2.__str__()
    var_4 = var_3.__str__()
    var_5 = var_4.__str__()
    var_6 = var_5.__str__()
    var_6.ap(str_0)


def test_case_18():
    list_0 = []
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, list_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_box()
    var_2 = var_1.__eq__(list_0)
    var_2.to_lazy()
