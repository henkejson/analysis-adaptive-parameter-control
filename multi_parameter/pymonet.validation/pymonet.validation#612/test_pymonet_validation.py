# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bytes_0 = b"\x19\xbe0\xb3\xcc"
    int_0 = 0
    validation_0 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.__eq__(bytes_0)
    var_0.to_try()


def test_case_1():
    tuple_0 = ()
    list_0 = [tuple_0]
    validation_0 = module_0.Validation(list_0, tuple_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.to_either()
    list_1 = [validation_0]
    var_2 = validation_0.__eq__(var_1)
    var_3 = validation_0.to_lazy()
    validation_0.bind(list_1)


def test_case_2():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_lazy()


def test_case_3():
    complex_0 = -956.347 - 261.50867j
    validation_0 = module_0.Validation(complex_0, complex_0)


def test_case_4():
    str_0 = "H\r"
    set_0 = {str_0, str_0, str_0}
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.is_fail()
    var_0.to_try()


def test_case_5():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.map(bool_0)


def test_case_6():
    str_0 = 'oSAja#^2"Gb;Q}0 ?'
    validation_0 = module_0.Validation(str_0, str_0)
    validation_0.bind(str_0)


def test_case_7():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.ap(validation_0)


def test_case_8():
    tuple_0 = ()
    bytes_0 = b'\xc4_\x08\x86\x81"\xfa\x13C'
    validation_0 = module_0.Validation(bytes_0, tuple_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.__eq__(validation_0)
    var_2 = validation_0.to_box()
    var_3 = tuple_0.__str__()
    int_0 = 2846
    none_type_0 = None
    validation_1 = module_0.Validation(int_0, none_type_0)
    validation_1.is_success()


def test_case_9():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_lazy()


def test_case_10():
    bytes_0 = b"\x9dIh\xf1\xa1Q9\xa1\x9e"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_1 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_1.to_lazy()
    var_1 = var_0.to_box()
    validation_0.to_try()


def test_case_11():
    tuple_0 = ()
    bytes_0 = b'\xc4_\x08\x86\x81"\xfa\x13C'
    validation_0 = module_0.Validation(bytes_0, tuple_0)
    var_0 = validation_0.is_success()
    var_1 = validation_0.to_either()


def test_case_12():
    tuple_0 = ()
    bytes_0 = b'\xc4_\x08\x86\x81"\xfa\x13C'
    validation_0 = module_0.Validation(bytes_0, tuple_0)
    list_0 = [tuple_0]
    validation_1 = module_0.Validation(list_0, tuple_0)
    var_0 = validation_1.to_maybe()
    var_1 = validation_0.to_either()
    list_1 = [validation_1]
    validation_2 = module_0.Validation(var_1, list_1)
    var_2 = validation_1.__eq__(var_1)
    var_3 = var_0.__str__()
    var_4 = validation_2.__str__()
    set_0 = var_1.to_box()
    var_5 = validation_2.is_success()
    var_6 = var_0.to_try()
    var_7 = var_0.to_box()
    var_6.ap(var_7)


def test_case_13():
    tuple_0 = ()
    bytes_0 = b'\xc4_\x08\x86\x81"\xfa\x13C'
    validation_0 = module_0.Validation(bytes_0, tuple_0)
    validation_1 = validation_0.__str__()
    validation_1.is_fail()


def test_case_14():
    str_0 = ">ELk5hZ\\< "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.__str__()
    validation_1 = module_0.Validation(str_0, str_0)
    var_2 = validation_1.to_lazy()
    var_3 = var_2.__eq__(str_0)
    var_4 = validation_1.to_maybe()
    var_3.is_fail()


def test_case_15():
    tuple_0 = ()
    bytes_0 = b'\xc4_\x08\x86\x81"\xfa\x13C'
    validation_0 = module_0.Validation(bytes_0, tuple_0)
    list_0 = [tuple_0]
    validation_1 = module_0.Validation(list_0, tuple_0)
    var_0 = module_0.Validation(bytes_0, validation_1)
    var_1 = validation_0.to_either()
    var_2 = validation_0.__eq__(validation_0)
    validation_2 = validation_0.to_try()
    var_3 = validation_1.__eq__(var_0)
    var_2.is_success()
