# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0
import builtins as module_1


def test_case_0():
    str_0 = "(vln],"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.__eq__(var_0)
    validation_0.bind(validation_0)


def test_case_1():
    str_0 = "JIX/qx/_$5UZ"
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, str_0)
    var_0 = validation_0.__str__()
    validation_0.bind(str_0)


def test_case_2():
    str_0 = "(3ln],"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    validation_0.bind(validation_0)


def test_case_3():
    bool_0 = True
    bytes_0 = b"R\xbf\xa9#\x14lN\xc7\xddK\x9e.\nU1\xab\xebt\xe7\xa4"
    tuple_0 = (bool_0, bytes_0)
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_either()
    var_1.map(tuple_0)


def test_case_4():
    str_0 = '}s?xt\\"?Jr{e'
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    var_0.is_success()


def test_case_5():
    none_type_0 = None
    var_0 = none_type_0.__str__()


def test_case_6():
    str_0 = "3+n],"
    validation_0 = module_0.Validation(str_0, str_0)


def test_case_7():
    bytes_0 = b"\x80\xd4^\xdd0N4n\n=Lwv\x96"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    validation_0 = module_0.Validation(bytes_0, list_0)
    var_0 = validation_0.is_success()


def test_case_8():
    int_0 = -416
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.is_fail()


def test_case_9():
    list_0 = []
    object_0 = module_1.object(*list_0)
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.map(object_0)


def test_case_10():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.ap(validation_0)


def test_case_11():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.to_lazy()
    var_2 = var_1.bind(none_type_0)
    var_3 = var_1.to_either()
    var_4 = var_1.to_maybe()
    var_5 = var_1.__str__()
    var_3.is_success()


def test_case_12():
    bytes_0 = b"\xe6\xb3\x82\xb7\xa6s\x06\x83{aWf\x8e"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_box()


def test_case_13():
    int_0 = -4224
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.to_try()


def test_case_14():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_lazy()
    var_2 = var_0.to_lazy()
    var_3 = var_2.__str__()
    var_3.to_maybe()


def test_case_15():
    str_0 = "(3ln],"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_0.bind(validation_0)


def test_case_16():
    bytes_0 = b""
    int_0 = 1270
    validation_0 = module_0.Validation(int_0, bytes_0)
    var_0 = validation_0.__str__()
    var_1 = var_0.__eq__(var_0)
    bool_0 = True
    bytes_1 = b"\x86p\xdc\x9a6\xf5M\xec%I\x85"
    validation_1 = module_0.Validation(bool_0, bytes_1)
    var_0.ap(int_0)


def test_case_17():
    str_0 = "3ln],"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    validation_1 = module_0.Validation(str_0, var_0)
    var_1 = validation_1.__eq__(validation_0)
    var_2 = var_1.__eq__(str_0)
    var_3 = var_0.to_try()
    var_4 = validation_1.to_box()
    var_2.to_lazy()
