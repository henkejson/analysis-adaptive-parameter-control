# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(none_type_0)
    validation_0.bind(none_type_0)


def test_case_1():
    str_0 = "\n        Transform Either to Try.\n\n        :returns: resolved Try monad with previous value. Right is resolved successfully, Left not.\n        :rtype: Box[A]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    int_0 = -2367
    var_1 = int_0.__eq__(int_0)
    var_2 = validation_0.to_try()


def test_case_2():
    str_0 = "\n        Transform Either to Try.\n\n        :returns: resolved Try monad with previous value. Right is reslved successfully, Left not.\n        :rtype: Box[A]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(str_0)
    var_1 = validation_0.to_maybe()
    var_0.to_maybe()


def test_case_3():
    bytes_0 = b"\x1fT\x19/fm\x9ag8\x00\xae\xa5\x0f\x15\xaa\xc4\xf0\xf8\x08"
    validation_0 = module_0.Validation(bytes_0, bytes_0)


def test_case_4():
    bytes_0 = b"\x1fT\x19/fm\x9ag8\x00\xae\xa5\x0f\x15\xaa\xc4\xf0\xf8\x08"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_try()


def test_case_5():
    int_0 = 1
    none_type_0 = None
    validation_0 = module_0.Validation(int_0, none_type_0)
    validation_0.is_fail()


def test_case_6():
    list_0 = []
    int_0 = 2218
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.map(list_0)


def test_case_7():
    bool_0 = False
    int_0 = 2599
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.ap(bool_0)


def test_case_8():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_box()
    var_0.is_success()


def test_case_9():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.__eq__(validation_0)
    none_type_0.to_try()


def test_case_10():
    none_type_0 = None
    int_0 = 1356
    validation_0 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_lazy()
    var_2 = validation_0.__eq__(none_type_0)
    var_3 = var_1.to_try()
    var_4 = validation_0.__eq__(validation_0)
    var_4.to_lazy()


def test_case_11():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)
    var_0.to_maybe()


def test_case_12():
    str_0 = "\n        Transform Either to Try.\n\n        :returns: resolved Try monad with previous value. Right is reslved successfully, Left not.\n        :rtype: Box[A]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    var_0.to_either()


def test_case_13():
    str_0 = "\n        Transform Either to Try.\n\n        :returns: resolved Try monad with previous value. Right is resolved successfully, Left not.\n        :rtype: Box[A]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(str_0)
    none_type_0 = None
    validation_1 = module_0.Validation(str_0, none_type_0)
    var_1 = validation_1.__eq__(validation_0)
    var_2 = var_1.__str__()
    str_1 = 'j-"KBS\x0bF[R>U&JG/Gc'
    var_2.map(str_1)


def test_case_14():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_maybe()
    set_0 = set()
    var_2 = validation_0.to_maybe()
    var_3 = validation_0.__eq__(validation_0)
    list_0 = [dict_0, set_0]
    var_4 = validation_0.to_maybe()
    validation_1 = module_0.Validation(list_0, list_0)
    var_5 = validation_1.to_box()
    var_6 = var_5.to_try()
    var_6.to_lazy()


def test_case_15():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_maybe()
    set_0 = set()
    var_2 = validation_0.to_maybe()
    var_3 = validation_0.__eq__(validation_0)
    list_0 = [dict_0, set_0]
    var_4 = validation_0.to_maybe()
    validation_1 = module_0.Validation(list_0, list_0)
    var_5 = validation_1.to_box()
    var_6 = validation_0.__str__()
    var_7 = var_5.to_try()
    var_7.to_lazy()
