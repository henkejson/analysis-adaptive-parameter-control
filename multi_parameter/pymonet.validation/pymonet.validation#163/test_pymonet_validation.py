# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0
import builtins as module_1


def test_case_0():
    str_0 = "\n        Method executes a reducer function\n        on each element of the array, resulting in a single output value.\n\n        :param fn: function to call with ImmutableList value\n        :type fn: Function(A, B) -> A\n        :returns: A\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    none_type_0 = None
    var_0 = validation_0.__eq__(none_type_0)
    var_1 = validation_0.is_fail()


def test_case_1():
    none_type_0 = None
    bool_0 = False
    dict_0 = {}
    tuple_0 = (bool_0, dict_0)
    validation_0 = module_0.Validation(dict_0, tuple_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.__eq__(none_type_0)
    var_1.to_maybe()


def test_case_2():
    str_0 = "\n        Method executes a reducer function\n        on each element of the array, resulting in a single output value.\n\n        :param fn: function to call with ImmutableList value\n        :type fn: Function(A, B) -> A\n        :returns: A\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    none_type_0 = None
    var_1 = validation_0.__eq__(none_type_0)
    var_2 = validation_0.is_fail()


def test_case_3():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)


def test_case_4():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_box()
    validation_0.to_maybe()


def test_case_5():
    list_0 = []
    none_type_0 = None
    validation_0 = module_0.Validation(list_0, list_0)
    validation_0.map(none_type_0)


def test_case_6():
    bytes_0 = b"h4\x99\xae\x08Y\x0f\xb2"
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.bind(bytes_0)


def test_case_7():
    int_0 = -1252
    bool_0 = True
    int_1 = 0
    none_type_0 = None
    validation_0 = module_0.Validation(int_1, none_type_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.__eq__(bool_0)
    validation_1 = module_0.Validation(var_1, var_1)
    validation_1.ap(int_0)


def test_case_8():
    str_0 = "\n        Method executes a reducer function\n        on each element of the array, resulting in a single output value.\n\n        :param fn: function to call with ImmutableList value\n        :type fn: Function(A, B) -> A\n        :returns: A\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_maybe()
    str_1 = "[J@|ybKaa)"
    var_2 = var_1.bind(str_1)
    var_3 = validation_0.to_try()
    var_4 = validation_0.to_lazy()
    var_5 = validation_0.__str__()
    var_6 = var_2.map(var_0)
    var_7 = var_2.bind(str_1)
    validation_1 = module_0.Validation(str_0, var_7)
    var_1.is_fail()


def test_case_9():
    complex_0 = 2727.34233 - 1286.282j
    none_type_0 = None
    validation_0 = module_0.Validation(complex_0, none_type_0)
    none_type_1 = None
    validation_1 = module_0.Validation(complex_0, none_type_1)
    validation_1.to_try()


def test_case_10():
    complex_0 = 171.245 + 839.504j
    tuple_0 = ()
    validation_0 = module_0.Validation(complex_0, tuple_0)
    var_0 = validation_0.__str__()


def test_case_11():
    complex_0 = 171.245 + 839.504j
    validation_0 = module_0.Validation(complex_0, complex_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_box()
    var_1.is_fail()


def test_case_12():
    str_0 = "\n        Method executes a reducer function\n        on each element of the array, resulting in a single output value.\n\n        :param fn: function to call with ImmutableList value\n        :type fn: Function(A, B) -> A\n        :returns: A\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(str_0)
    var_1 = validation_0.to_maybe()
    var_2 = var_1.bind(var_1)
    var_3 = validation_0.to_try()
    var_4 = validation_0.to_maybe()
    validation_1 = module_0.Validation(str_0, str_0)
    var_5 = validation_0.__str__()
    validation_1.map(var_0)


def test_case_13():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.__eq__(none_type_0)
    set_0 = {var_0, var_0}
    validation_1 = module_0.Validation(validation_0, set_0)
    set_0.is_fail()


def test_case_14():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_try()
    var_1.to_try()


def test_case_15():
    str_0 = "\n        Method executes a reducer function\n        on each element of the array, resulting in a single output value.\n\n        :param fn: function to call with ImmutableList value\n        :type fn: Function(A, B) -> A\n        :returns: A\n        "
    none_type_0 = None
    validation_0 = module_0.Validation(str_0, none_type_0)
    validation_1 = module_0.Validation(str_0, str_0)
    var_0 = validation_1.to_maybe()
    var_1 = var_0.__eq__(str_0)
    var_2 = validation_0.__eq__(validation_1)
    var_3 = validation_1.__eq__(validation_1)
    var_4 = validation_1.to_maybe()
    var_5 = validation_1.to_either()
    str_1 = "[J@|ybKaa)"
    var_6 = var_4.bind(str_1)
    var_7 = validation_1.to_try()
    var_8 = validation_1.to_maybe()
    validation_2 = module_0.Validation(str_0, str_0)
    var_9 = validation_1.to_lazy()
    var_10 = validation_1.__str__()
    validation_2.map(var_3)


def test_case_16():
    tuple_0 = ()
    object_0 = module_1.object()
    int_0 = 125
    list_0 = [tuple_0, tuple_0, tuple_0]
    tuple_1 = (tuple_0, object_0, int_0, list_0)
    validation_0 = module_0.Validation(tuple_1, tuple_0)
    var_0 = validation_0.to_maybe()
    var_0.to_maybe()
