# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    complex_0 = 1530.8 + 61.63j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    bool_0 = False
    tuple_0 = (bool_0,)
    validation_0 = module_0.Validation(tuple_0, bool_0)
    var_0 = validation_0.__eq__(list_0)
    var_0.to_box()


def test_case_1():
    bytes_0 = b"\x7fIw\x86\xfb\xdaR"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_try()
    var_2 = validation_0.__str__()


def test_case_2():
    int_0 = -2670
    validation_0 = module_0.Validation(int_0, int_0)
    str_0 = "O"
    validation_1 = module_0.Validation(str_0, str_0)
    var_0 = validation_1.to_either()
    var_1 = validation_1.to_maybe()
    var_1.is_fail()


def test_case_3():
    str_0 = ""
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    var_0.is_success()


def test_case_4():
    bytes_0 = b"\x7fIw\xfb\xda\x86"
    validation_0 = module_0.Validation(bytes_0, bytes_0)


def test_case_5():
    bytes_0 = b"\x7fIw\x86\xfb\xdaR"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_try()
    validation_1 = module_0.Validation(bytes_0, bytes_0)


def test_case_6():
    int_0 = -2182
    none_type_0 = None
    validation_0 = module_0.Validation(int_0, none_type_0)
    validation_0.is_fail()


def test_case_7():
    int_0 = 2658
    none_type_0 = None
    validation_0 = module_0.Validation(int_0, none_type_0)
    validation_0.map(none_type_0)


def test_case_8():
    int_0 = -1537
    validation_0 = module_0.Validation(int_0, int_0)
    bytes_0 = b"\x7fIw\x86\xfb\xdaR"
    validation_1 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_1.__eq__(validation_1)
    validation_1.bind(int_0)


def test_case_9():
    bool_0 = False
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, bool_0)
    validation_0.ap(bool_0)


def test_case_10():
    bytes_0 = b"\x7fIw\x86\xfb\xdaR"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.__eq__(validation_0)
    var_2 = validation_0.to_try()
    var_2.ap(var_2)


def test_case_11():
    complex_0 = 1530.8 + 61.63j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    validation_0 = module_0.Validation(list_0, list_0)
    bool_0 = True
    tuple_0 = (bool_0,)
    validation_1 = module_0.Validation(tuple_0, bool_0)
    var_0 = validation_1.to_lazy()
    var_1 = validation_1.__eq__(list_0)
    validation_2 = module_0.Validation(bool_0, list_0)
    var_2 = validation_2.to_maybe()
    var_3 = var_2.__eq__(var_1)
    var_4 = var_3.__str__()
    var_5 = validation_1.to_lazy()


def test_case_12():
    bool_0 = False
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_maybe()
    var_1.map(bool_0)


def test_case_13():
    bytes_0 = b"\x7fIw\x86\xfb\xdaR"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_1 = module_0.Validation(bytes_0, bytes_0)


def test_case_14():
    bytes_0 = b""
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, bytes_0)
    var_0 = validation_0.to_either()
    validation_0.ap(var_0)


def test_case_15():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.__str__()
    var_0.is_fail()


def test_case_16():
    complex_0 = 1521.0509355409429 + 61.63j
    list_0 = [complex_0, complex_0, complex_0, complex_0, complex_0]
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_maybe()
    validation_1 = module_0.Validation(validation_0, complex_0)
    var_1 = validation_0.__eq__(validation_1)
    var_1.is_success()
