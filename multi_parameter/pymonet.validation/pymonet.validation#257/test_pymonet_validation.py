# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0
import builtins as module_1


def test_case_0():
    str_0 = "\n        :param semigroup: other semigroup to concat\n        :type semigroup: All[B]\n        :returns: new All with last truly value or first falsy\n        :rtype: All[A | B]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    str_1 = "6\r\x0cE'B\r#8,CN"
    var_0 = validation_0.__eq__(str_1)
    var_1 = validation_0.__str__()


def test_case_1():
    str_0 = "\n        :param semigroup: other semigroup to concat\n        :type semigroup: All[B]\n        :returns: new All with last truly value or first falsy\n        :rtype: All[A | B]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    str_1 = "e|8t\x0b~{"
    str_2 = "6\r\x0cE'B\r#8,CN"
    bytes_0 = b"\xdb\xc9\xf2,\x9b(\t"
    validation_1 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_1.to_either()
    var_1 = var_0.bind(str_2)
    var_2 = var_1.ap(str_1)
    var_3 = var_2.to_box()


def test_case_2():
    str_0 = "M5D4Dc,."
    validation_0 = module_0.Validation(str_0, str_0)
    tuple_0 = (str_0,)
    none_type_0 = None
    validation_1 = module_0.Validation(tuple_0, none_type_0)
    var_0 = validation_1.to_lazy()
    var_1 = validation_0.is_success()
    var_2 = validation_0.is_success()
    var_3 = validation_0.to_maybe()
    var_4 = validation_0.is_fail()


def test_case_3():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_4():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.to_maybe()


def test_case_5():
    list_0 = []
    list_1 = []
    validation_0 = module_0.Validation(list_1, list_1)
    validation_0.map(list_0)


def test_case_6():
    str_0 = "s4]oQytv:?7ZK,)s\r.@'"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.to_lazy()
    str_1 = "$A,yk1?B"
    validation_0.bind(str_1)


def test_case_7():
    str_0 = "\n        :param semigroup: other semigroup to concat\n        :type semigroup: All[B]\n        :returns: new All with last truly value or first falsy\n        :rtype: All[A | B]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_try()
    bytes_0 = b"\xdb\xc9\xf2,\x9b(\t"
    var_1 = validation_0.__eq__(bytes_0)
    var_2 = validation_0.__str__()
    var_3 = validation_0.__eq__(bytes_0)
    validation_0.ap(var_0)


def test_case_8():
    object_0 = module_1.object()
    bytes_0 = b"\x8e\n\x8c\xfc\x9c5\xe1\x13T^\x1e"
    int_0 = 5445
    tuple_0 = (object_0, bytes_0, bytes_0, int_0)
    validation_0 = module_0.Validation(tuple_0, bytes_0)
    var_0 = validation_0.to_box()
    var_0.is_success()


def test_case_9():
    none_type_0 = None
    bool_0 = True
    bool_1 = True
    validation_0 = module_0.Validation(bool_1, bool_1)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_box()
    var_2 = var_1.to_either()
    var_3 = var_2.__eq__(bool_0)
    var_3.ap(none_type_0)


def test_case_10():
    str_0 = "\n        :param semigroup: other semigroup to concat\n        :type semigroup: All[B]\n        :returns: new All with last truly value or first falsy\n        :rtype: All[A | B]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_try()
    str_1 = "6\r\x0cE'B\r#8,CN"
    var_1 = validation_0.to_maybe()
    var_2 = var_0.__eq__(var_0)
    var_3 = validation_0.__eq__(validation_0)
    var_4 = validation_0.is_success()
    str_1.to_either()


def test_case_11():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_try()
    var_1.to_either()


def test_case_12():
    str_0 = "\n        :param semigroup: other semigroup to concat\n        :type semigroup: All[B]\n        :returns: new All with last truly value or first falsy\n        :rtype: All[A | B]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    validation_1 = module_0.Validation(validation_0, validation_0)
    var_0 = validation_1.__eq__(validation_0)
    var_0.to_box()


def test_case_13():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.__str__()
    list_0 = [var_0]
    bool_0 = True
    tuple_0 = (list_0, bool_0, validation_0, var_0)
    validation_1 = module_0.Validation(tuple_0, list_0)
    var_1 = validation_1.__str__()


def test_case_14():
    bool_0 = False
    bytes_0 = b""
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    validation_0 = module_0.Validation(set_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_0.bind(bool_0)
