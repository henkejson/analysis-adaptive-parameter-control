# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0
import builtins as module_1


def test_case_0():
    bytes_0 = b"9\x90\x0f\rZ\xe2\xcb\xde\xb7O\xa1x\x1a\xd9"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, bytes_0)
    int_0 = -469
    var_0 = validation_0.to_box()
    bytes_1 = b"\xc9!,\xe4\x90'"
    validation_1 = module_0.Validation(bytes_1, int_0)
    var_1 = validation_1.__eq__(validation_1)
    var_1.to_box()


def test_case_1():
    bool_0 = False
    none_type_0 = None
    validation_0 = module_0.Validation(bool_0, none_type_0)
    int_0 = -469
    var_0 = validation_0.to_box()
    bytes_0 = b"\xc9!,\xe4\x90'"
    int_1 = 240
    validation_1 = module_0.Validation(bytes_0, int_1)
    var_1 = validation_1.__eq__(int_0)
    var_1.to_box()


def test_case_2():
    bytes_0 = b"\xd2w\x02\xfc:X\xd6\xa2\x0e"
    tuple_0 = (bytes_0,)
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, tuple_0)
    var_0 = validation_0.__str__()
    var_0.is_fail()


def test_case_3():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    none_type_1 = None
    validation_1 = module_0.Validation(none_type_1, none_type_1)
    str_0 = "$3z"
    validation_2 = module_0.Validation(str_0, str_0)
    var_0 = validation_2.to_either()
    validation_3 = module_0.Validation(str_0, str_0)
    var_1 = validation_3.to_maybe()
    var_2 = var_1.__str__()
    var_2.is_fail()


def test_case_4():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_5():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.to_either()


def test_case_6():
    str_0 = "ImmutableList: you can not add any other instace than ImmutableList"
    list_0 = [str_0, str_0]
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.is_fail()
    var_0.is_fail()


def test_case_7():
    bool_0 = True
    list_0 = [bool_0]
    object_0 = module_1.object()
    none_type_0 = None
    validation_0 = module_0.Validation(object_0, none_type_0)
    validation_0.map(list_0)


def test_case_8():
    bytes_0 = b'i\x0b"\xaf\xf3\x81\xa8R\xaa\xef\x98\xe6\xdb\xea*T%\x86]\xd2'
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    validation_0 = module_0.Validation(dict_0, dict_0)
    validation_0.bind(bytes_0)


def test_case_9():
    str_0 = "\n        Transform Maybe into Validation.\n\n        :returns: successfull Validation monad with previous value or None when Maybe is empty\n        :rtype: Validation[A, []]\n        "
    bool_0 = True
    list_0 = [bool_0]
    validation_0 = module_0.Validation(list_0, list_0)
    validation_0.ap(str_0)


def test_case_10():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_box()


def test_case_11():
    bytes_0 = b"\x89\t<\xb6"
    float_0 = -439.6
    validation_0 = module_0.Validation(float_0, float_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.__str__()
    var_2 = var_1.__eq__(bytes_0)
    var_3 = var_2.__str__()
    var_3.is_fail()


def test_case_12():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_box()
    var_2 = var_0.to_either()
    var_2.is_success()


def test_case_13():
    bytes_0 = b"4Aa\xbe\xb1+\x0b\xea2\n\xea-\x01"
    none_type_0 = None
    validation_0 = module_0.Validation(bytes_0, none_type_0)
    validation_0.to_try()


def test_case_14():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    none_type_1 = None
    validation_1 = module_0.Validation(none_type_1, none_type_1)
    str_0 = "$3z"
    validation_2 = module_0.Validation(str_0, str_0)
    var_0 = validation_2.to_either()
    var_1 = validation_2.__eq__(validation_0)
    validation_3 = module_0.Validation(str_0, str_0)
    var_2 = validation_2.to_try()
    var_3 = validation_3.to_maybe()
    var_4 = validation_2.to_either()
    var_5 = var_3.__str__()
    validation_1.ap(var_5)


def test_case_15():
    bytes_0 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_maybe()
    validation_0.map(var_1)


def test_case_16():
    str_0 = ""
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    none_type_0 = None
    validation_1 = module_0.Validation(list_0, none_type_0)
    validation_1.to_either()
