# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    str_0 = "\n        Transform Box into Validation.\n\n        :returns: successfull Validation monad with previous value\n        :rtype: Validation[A, []]\n        "
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_box()
    var_1.ap(str_0)


def test_case_1():
    none_type_0 = None
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(none_type_0)
    var_0.to_lazy()


def test_case_2():
    str_0 = "\n    Data type for storage any type of data\n    "
    validation_0 = module_0.Validation(str_0, str_0)
    bytes_0 = b"\xd5|\xed"
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_box()
    validation_1 = module_0.Validation(var_0, var_0)
    validation_1.bind(bytes_0)


def test_case_3():
    int_0 = -4034
    str_0 = "ImmutableList[T]"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.map(int_0)
    var_1.is_success()


def test_case_4():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)


def test_case_5():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.to_either()


def test_case_6():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.is_fail()


def test_case_7():
    int_0 = 219
    dict_0 = {int_0: int_0}
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    validation_0 = module_0.Validation(none_type_0, list_0)
    validation_0.map(dict_0)


def test_case_8():
    bytes_0 = b"\xd5|\xed"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_0.bind(bytes_0)


def test_case_9():
    bytes_0 = b"\xb7^\xa2k\xfd\x85\xfc\n\xb4a\xaa\xb4z("
    float_0 = -3291.19
    validation_0 = module_0.Validation(float_0, float_0)
    validation_0.ap(bytes_0)


def test_case_10():
    str_0 = "\n    Data type for storage any type of data\n    "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.to_either()
    var_2 = var_1.to_box()
    var_3 = validation_0.to_box()


def test_case_11():
    bytes_0 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_lazy()
    var_0.is_fail()


def test_case_12():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_either()
    var_1.is_success()


def test_case_13():
    str_0 = ""
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_try()
    var_1 = var_0.__eq__(str_0)
    var_1.to_try()


def test_case_14():
    bytes_0 = b"\xd5|\xed"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()


def test_case_15():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_maybe()
    validation_1 = module_0.Validation(tuple_0, var_0)


def test_case_16():
    str_0 = ""
    validation_0 = module_0.Validation(str_0, str_0)
    bytes_0 = b"\xd5|\xed"
    var_0 = validation_0.__eq__(str_0)
    var_1 = validation_0.__str__()
    validation_1 = module_0.Validation(var_0, var_0)
    var_2 = validation_1.__eq__(validation_1)
    validation_1.bind(bytes_0)


def test_case_17():
    bytes_0 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_lazy()
    var_1.is_fail()


def test_case_18():
    str_0 = "\n    Data type for storage any type of data\n    "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_box()
    validation_1 = module_0.Validation(var_0, var_0)
    var_1 = validation_0.__eq__(validation_1)
    validation_1.ap(validation_1)
