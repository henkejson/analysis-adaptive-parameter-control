# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    str_0 = "x8kYsVy<nX/E1Jy"
    list_0 = [str_0]
    set_0 = set()
    bool_0 = False
    validation_0 = module_0.Validation(set_0, bool_0)
    var_0 = validation_0.__eq__(list_0)
    validation_0.__str__()


def test_case_1():
    str_0 = "\n        Transform Box into successfull Try.\n\n        :returns: successfull Try monad with previous value\n        :rtype: Try[A]\n        "
    bool_0 = True
    bytes_0 = b"\xd7XS"
    validation_0 = module_0.Validation(bytes_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.map(bool_0)
    bytes_0.is_success()


def test_case_2():
    none_type_0 = None
    none_type_0.to_lazy()


def test_case_3():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_4():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.__str__()


def test_case_5():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.is_fail()
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    var_1 = validation_0.to_maybe()


def test_case_6():
    str_0 = "v_y@hgCG87"
    dict_0 = {str_0: str_0, str_0: str_0}
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_1 = module_0.Validation(validation_0, dict_0)
    validation_0.map(dict_0)


def test_case_7():
    bool_0 = False
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, bool_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.__eq__(validation_0)
    validation_0.bind(validation_0)


def test_case_8():
    none_type_0 = None
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    validation_0 = module_0.Validation(dict_0, bool_0)
    validation_0.ap(none_type_0)


def test_case_9():
    bool_0 = False
    bytes_0 = b'Lh4{\xb3\x0c\xfa`\x96\x0f\x88\xc2\xf9"'
    dict_0 = {bool_0: bool_0, bytes_0: bytes_0}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.to_lazy()


def test_case_10():
    bool_0 = False
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, bool_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.__eq__(validation_0)
    var_2 = var_0.__str__()


def test_case_11():
    bool_0 = False
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, bool_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.__eq__(validation_0)
    var_2 = var_0.to_box()
    var_3 = var_2.__str__()


def test_case_12():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.to_try()


def test_case_13():
    bool_0 = True
    set_0 = {bool_0}
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, set_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.ap(bool_0)
    var_2 = var_1.to_lazy()
    var_3 = var_2.to_box()
    var_4 = var_3.__eq__(set_0)
    validation_1 = module_0.Validation(bool_0, set_0)
    none_type_0.to_lazy()


def test_case_14():
    bool_0 = False
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, bool_0)
    var_0 = validation_0.__eq__(validation_0)
    var_0.bind(none_type_0)


def test_case_15():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.__str__()
    var_0.to_lazy()


def test_case_16():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_either()
    var_2 = validation_0.__str__()
    var_2.is_success()


def test_case_17():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0}
    validation_0 = module_0.Validation(tuple_0, dict_0)
    var_0 = validation_0.__str__()
    var_0.is_success()


def test_case_18():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = module_0.Validation(validation_0, validation_0)
    var_1 = validation_0.to_try()
    var_2 = var_0.__eq__(validation_0)
    var_3 = var_1.__str__()
    var_2.is_success()
