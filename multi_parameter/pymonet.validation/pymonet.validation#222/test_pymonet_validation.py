# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    str_0 = "\n        Two Lazy are equals where both are evaluated both have the same value and constructor functions.\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.__eq__(var_0)
    var_0.map(var_0)


def test_case_1():
    str_0 = "'>xmhi@H9?M)\nTb"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_box()


def test_case_2():
    bytes_0 = b"\xa2O\xf7\xbfX\xc9?\xd7\xc3\x1c0\x90\xaf\x19\xca\x94\x806d\xaa"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_0.is_success()


def test_case_3():
    bytes_0 = b"\xfa\x14Z\xe2\xcd\rTZ\x10\x91\xa9N\x9f)\x16\xee&\xec\x0e"
    tuple_0 = ()
    validation_0 = module_0.Validation(bytes_0, tuple_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.to_maybe()
    var_2 = validation_0.to_either()


def test_case_4():
    bytes_0 = b"\xfa\x14Z\xe2\xcd\rTZ\x10\x91\xa9N\x9f)\x16\xee&\xec\x0e"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()


def test_case_5():
    str_0 = "'>~xchi@Hk9?M\rb"
    validation_0 = module_0.Validation(str_0, str_0)


def test_case_6():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.to_maybe()


def test_case_7():
    str_0 = "0xmhRV@H;?M=\n]"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.is_fail()


def test_case_8():
    str_0 = "'>~xchi@Hk9?MFb"
    validation_0 = module_0.Validation(str_0, str_0)
    none_type_0 = None
    validation_0.map(none_type_0)


def test_case_9():
    int_0 = 277
    none_type_0 = None
    validation_0 = module_0.Validation(int_0, none_type_0)
    validation_0.bind(none_type_0)


def test_case_10():
    str_0 = "'>xci@HKrM"
    validation_0 = module_0.Validation(str_0, str_0)
    validation_0.ap(str_0)


def test_case_11():
    int_0 = 277
    validation_0 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.to_box()


def test_case_12():
    str_0 = ' i,"-%(mJs\nd'
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_box()
    var_2 = var_1.to_try()


def test_case_13():
    bytes_0 = b"\xfaoZ\xe2\xcdTZ\x10\x91\xa9N\x9f)\x16\xdc\xee&\xec\x0e"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_try()


def test_case_14():
    str_0 = "0xmhRV@H;?M=\n]"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(validation_0)


def test_case_15():
    bytes_0 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.__str__()
    var_2 = var_0.to_box()
    var_3 = validation_0.__eq__(var_0)
    validation_1 = module_0.Validation(var_2, validation_0)


def test_case_16():
    str_0 = "\n        Two Lazy are equals where both are evaluated bot have the same value and constructor functions.\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.is_success()
    var_2 = validation_0.to_lazy()
    validation_1 = module_0.Validation(var_2, validation_0)
    var_3 = validation_0.__eq__(validation_1)
    var_3.to_box()
