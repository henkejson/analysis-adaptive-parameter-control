# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    int_0 = -8
    validation_0 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.__eq__(int_0)


def test_case_1():
    str_0 = "hoz=rkr,F(s<5{8[Xo6"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()


def test_case_2():
    str_0 = "hoz=rkr,F(s<5{8[XA6"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.__eq__(str_0)
    var_2 = var_0.ap(str_0)


def test_case_3():
    str_0 = "hoz=rkr,F(s<5{8[XA6"
    validation_0 = module_0.Validation(str_0, str_0)
    validation_1 = module_0.Validation(str_0, validation_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.is_fail()


def test_case_4():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)


def test_case_5():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.__str__()


def test_case_6():
    int_0 = 245
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.is_fail()


def test_case_7():
    int_0 = 1140
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.map(int_0)


def test_case_8():
    str_0 = "S:djUVyWx"
    validation_0 = module_0.Validation(str_0, str_0)
    validation_0.bind(str_0)


def test_case_9():
    str_0 = "3LAHa8)>I7'B?:("
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_box()
    validation_0.ap(var_0)


def test_case_10():
    str_0 = "hoz=rkr,F(s<5{8[XA6"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_lazy()


def test_case_11():
    int_0 = 491
    validation_0 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_try()
    var_1.to_either()


def test_case_12():
    int_0 = 3006
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.to_try()


def test_case_13():
    none_type_0 = None
    bytes_0 = b""
    validation_0 = module_0.Validation(none_type_0, bytes_0)
    var_0 = validation_0.to_maybe()


def test_case_14():
    int_0 = 17
    validation_0 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.__eq__(validation_0)


def test_case_15():
    str_0 = "\n        :param semigroup: other semigroup to concat\n        :type semigroup: Max[B]\n        :returns: new Max with largest value\n        :rtype: Max[A | B]\n        "
    bool_0 = False
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_lazy()
    validation_1 = module_0.Validation(bool_0, bool_0)
    var_2 = validation_1.__eq__(str_0)
    var_3 = var_1.to_maybe()
    var_4 = var_1.__eq__(var_1)
    validation_2 = module_0.Validation(str_0, var_0)
    var_5 = validation_2.__eq__(validation_1)
    validation_3 = module_0.Validation(validation_2, var_4)
    validation_3.to_maybe()


def test_case_16():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_try()
    var_1 = validation_0.to_either()
    var_1.is_success()


def test_case_17():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.__eq__(dict_0)
    var_1 = validation_0.__str__()
    var_1.to_maybe()
