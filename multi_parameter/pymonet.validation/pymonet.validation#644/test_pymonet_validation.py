# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    str_0 = "\n"
    none_type_0 = None
    bool_0 = False
    validation_0 = module_0.Validation(none_type_0, bool_0)
    var_0 = validation_0.__eq__(str_0)


def test_case_1():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_maybe()
    var_0.is_success()


def test_case_2():
    complex_0 = 2849.1 - 371.57j
    list_0 = [complex_0]
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_lazy()
    var_2 = var_1.__eq__(list_0)
    var_3 = var_2.__str__()
    bytes_0 = b"\x9bma\xe6b\xb5_\xd3)\xd6\xc5\x96od\x1a\xfb|"
    none_type_0 = None
    validation_1 = module_0.Validation(bytes_0, none_type_0)
    var_4 = validation_1.to_lazy()
    var_5 = var_4.ap(list_0)


def test_case_3():
    none_type_0 = None
    none_type_0.to_maybe()


def test_case_4():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)


def test_case_5():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.to_either()


def test_case_6():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.is_fail()


def test_case_7():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_1 = module_0.Validation(validation_0, none_type_0)
    validation_1.map(none_type_0)


def test_case_8():
    str_0 = "q!\x0b|'Vu{"
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    validation_0.bind(str_0)


def test_case_9():
    bool_0 = True
    none_type_0 = None
    dict_0 = {bool_0: bool_0, bool_0: none_type_0}
    validation_0 = module_0.Validation(none_type_0, dict_0)
    validation_1 = module_0.Validation(dict_0, none_type_0)
    validation_1.ap(bool_0)


def test_case_10():
    bool_0 = False
    dict_0 = {}
    validation_0 = module_0.Validation(bool_0, dict_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.to_either()
    var_2 = var_0.__eq__(validation_0)
    var_3 = var_0.to_lazy()
    var_2.bind(var_1)


def test_case_11():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    tuple_0 = ()
    validation_1 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_1.to_lazy()
    var_0.to_lazy()


def test_case_12():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.to_try()


def test_case_13():
    str_0 = "\n"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.is_fail()
    var_1 = validation_0.__str__()
    bytes_0 = b"K>J\xca\x03\xa45\x0fUC\xc2\xf1\xb9_L@\te"
    var_1.bind(bytes_0)


def test_case_14():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_try()
    var_2 = var_0.to_either()
    var_3 = var_1.__str__()


def test_case_15():
    bytes_0 = b"\x84\xe2\x8e\xc2\xa8!\xf8"
    bool_0 = True
    validation_0 = module_0.Validation(bytes_0, bool_0)
    var_0 = validation_0.__eq__(validation_0)


def test_case_16():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.__str__()
    var_0.bind(var_0)


def test_case_17():
    dict_0 = {}
    str_0 = 'Ry\x0c<|(["\x0cWG5tNY;}i+'
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.is_fail()
    var_1 = validation_0.to_either()
    var_2 = validation_0.__eq__(dict_0)
    var_2.to_box()


def test_case_18():
    bool_0 = False
    bytes_0 = b"\x84\xe2\x8e\xc2\xa8!\xf8"
    str_0 = 'Ry\x0c<|(["\x0cWG5tNY;}i+'
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.__eq__(bytes_0)
    validation_1 = module_0.Validation(str_0, var_1)
    var_2 = validation_1.__eq__(validation_0)
    var_2.map(bool_0)
