# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    str_0 = "\n        Transform Either to Try.\n\n        :returns: resolved Try monad with previous value. Right is resolved successfully, Left not.\n        :rtype: Box[A]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.is_success()
    var_1 = validation_0.__eq__(validation_0)
    var_1.to_try()


def test_case_1():
    set_0 = set()
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(set_0)
    var_1 = var_0.__str__()
    var_1.to_box()


def test_case_2():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.__str__()
    var_2 = validation_0.to_either()
    var_0.ap(dict_0)


def test_case_3():
    bytes_0 = b"\xcd\xca\x8c9\x8d\x10[\x12\x96T\xc8t=\xdf"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.is_success()
    var_1 = validation_0.__eq__(var_0)
    var_2 = validation_0.is_success()
    var_3 = validation_0.__str__()
    var_2.to_either()


def test_case_4():
    str_0 = '54r=Q"k'
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_maybe()
    var_2 = validation_0.to_either()
    var_3 = var_2.to_lazy()
    var_4 = validation_0.__eq__(str_0)
    var_4.to_either()


def test_case_5():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_maybe()
    var_0.is_fail()


def test_case_6():
    bytes_0 = b"\x9a\xef\xbcy\xe3\xba\xc2;\x9f\x95\xbb\xec\x02\x8dN\xca\x1c\xbc"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_box()
    var_2 = var_1.to_lazy()
    var_2.to_lazy()


def test_case_7():
    str_0 = "\n        :param semigroup: other semigroup to concat\n        :type semigroup: Max[B]\n        :returns: new Max with largest value\n        :rtype: Max[A | B]\n        "
    validation_0 = module_0.Validation(str_0, str_0)


def test_case_8():
    complex_0 = -2193.2 + 2827.041j
    validation_0 = module_0.Validation(complex_0, complex_0)
    float_0 = 2167.0
    validation_1 = module_0.Validation(float_0, float_0)
    validation_1.__str__()


def test_case_9():
    bytes_0 = b">\x935\x13"
    bool_0 = False
    dict_0 = {bytes_0: bytes_0, bool_0: bytes_0}
    str_0 = 'ig*28QP""d0R2'
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.is_fail()
    validation_0.ap(dict_0)


def test_case_10():
    none_type_0 = None
    bytes_0 = b"\xc1a\x9d\x9ax U\x14\x10"
    none_type_1 = None
    validation_0 = module_0.Validation(bytes_0, none_type_1)
    validation_0.map(none_type_0)


def test_case_11():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.bind(bool_0)


def test_case_12():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.to_either()
    var_0.bind(validation_0)


def test_case_13():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    validation_0.to_try()


def test_case_14():
    str_0 = "*\x0c"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_lazy()
    var_2 = var_1.to_try()
    var_3 = validation_0.to_lazy()
    var_4 = validation_0.is_success()
    var_4.to_try()


def test_case_15():
    str_0 = "\n        Transform Validation to Either.\n\n        :returns: Right monad with previous value when Validation has no errors, in other case Left with errors list\n        :rtype: Right[A] | Left[E]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_try()
    var_0.to_either()


def test_case_16():
    float_0 = 2066.49
    str_0 = '4r=Q"k'
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_maybe()
    var_2 = validation_0.is_success()
    var_3 = validation_0.to_either()
    var_4 = validation_0.to_lazy()
    validation_1 = module_0.Validation(float_0, var_4)
    var_5 = validation_1.__eq__(validation_0)
    var_6 = validation_0.to_either()
    var_7 = var_3.to_maybe()
    var_8 = var_7.to_either()
    var_9 = var_1.__str__()
    var_9.to_maybe()
