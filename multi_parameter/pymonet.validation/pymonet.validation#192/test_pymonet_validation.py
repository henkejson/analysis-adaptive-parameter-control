# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)
    none_type_0.is_fail()


def test_case_1():
    set_0 = set()
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, set_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_try()
    var_0.ap(set_0)


def test_case_2():
    float_0 = -3805.6
    str_0 = "\n        Transform Either to Box.\n\n        :returns: Box monad with previous value\n        :rtype: Box[A]\n        "
    validation_0 = module_0.Validation(float_0, str_0)
    var_0 = validation_0.__str__()
    var_0.to_try()


def test_case_3():
    none_type_0 = None
    bytes_0 = b"_h\xd3\x1d"
    validation_0 = module_0.Validation(none_type_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_0.to_maybe()


def test_case_4():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_5():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.to_either()


def test_case_6():
    bytes_0 = b"\x1d\x9c("
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.is_fail()
    var_0.is_fail()


def test_case_7():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.map(bool_0)


def test_case_8():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_0.bind(var_0)


def test_case_9():
    dict_0 = {}
    str_0 = '"RM\nE4u\x0bmk:J|\x0bn~cl='
    list_0 = [str_0]
    validation_0 = module_0.Validation(str_0, list_0)
    validation_0.ap(dict_0)


def test_case_10():
    str_0 = "\n    Immutable list is data structure that doesn't allow to mutate instances\n    "
    list_0 = [str_0]
    validation_0 = module_0.Validation(list_0, str_0)
    var_0 = validation_0.is_success()
    validation_1 = module_0.Validation(var_0, var_0)
    var_1 = validation_1.to_box()
    var_1.is_fail()


def test_case_11():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()


def test_case_12():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.__eq__(validation_0)
    var_2 = var_0.map(var_0)
    var_2.to_either()


def test_case_13():
    str_0 = "up\x0bj8rcq!_}"
    validation_0 = module_0.Validation(str_0, str_0)
    validation_1 = module_0.Validation(validation_0, str_0)
    var_0 = validation_1.to_try()
    var_0.to_either()


def test_case_14():
    str_0 = "up\x0bj8rcq!_}"
    validation_0 = module_0.Validation(str_0, str_0)
    validation_1 = validation_0.__eq__(str_0)
    validation_1.to_try()


def test_case_15():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_try()
    var_2 = validation_0.__eq__(validation_0)
    var_3 = validation_0.to_maybe()
    var_4 = var_3.__str__()
    var_4.is_success()


def test_case_16():
    str_0 = '"RM\nE4u\x0bmk:|\x0bn~cl='
    list_0 = [str_0]
    validation_0 = module_0.Validation(str_0, list_0)
    var_0 = module_0.Validation(list_0, list_0)
    var_1 = var_0.to_either()


def test_case_17():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.is_success()
    var_2 = validation_0.is_fail()
    var_3 = validation_0.to_either()
    var_1.to_box()


def test_case_18():
    bytes_0 = b"u\xf6\xa6\x02MN\x00!\x86;D\xf6\xc0J\x84\xb7\xef"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    validation_0 = module_0.Validation(dict_0, bytes_0)
    var_0 = validation_0.to_box()
    bytes_1 = b"\xcaC\\\x8b0\x91\xfb\xfd#\xb3\x05i\xaem\xdb"
    var_1 = validation_0.to_either()
    var_2 = validation_0.to_maybe()
    none_type_0 = None
    none_type_1 = None
    validation_1 = module_0.Validation(bytes_1, bytes_1)
    var_3 = validation_1.to_box()
    validation_2 = module_0.Validation(none_type_1, none_type_1)
    var_4 = var_3.to_try()
    var_5 = validation_0.to_either()
    var_6 = validation_1.__eq__(validation_2)
    validation_2.bind(none_type_0)
