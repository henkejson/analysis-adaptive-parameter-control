# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bytes_0 = b"\xbd\x0c{\xa0\xafc\x7f\xc8\xb4\x1d\xb3\x10\x9cO"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.__eq__(validation_0)
    var_2 = var_0.to_either()
    var_3 = var_0.__str__()
    var_4 = validation_0.to_try()
    var_3.to_maybe()


def test_case_1():
    bytes_0 = b"v\xa6"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(bytes_0)
    var_0.to_maybe()


def test_case_2():
    int_0 = -1636
    tuple_0 = (int_0,)
    dict_0 = {tuple_0: tuple_0}
    tuple_1 = ()
    bytes_0 = b"g\xfc^\xa8\xa1\xfc\x90C\xafHS\xe0!7\xf3\xbe\x8a\rV"
    validation_0 = module_0.Validation(tuple_0, bytes_0)
    validation_1 = module_0.Validation(dict_0, tuple_1)
    var_0 = validation_1.__eq__(int_0)
    int_1 = 292
    bool_0 = True
    var_1 = validation_1.__str__()
    validation_2 = module_0.Validation(bool_0, bool_0)
    validation_2.bind(int_1)


def test_case_3():
    int_0 = 1
    tuple_0 = (int_0,)
    bytes_0 = b"g\xfc^\xa8\xa1\xfc\x90C\xafHS\xe0!7\xf3\xbe\x8a\rV"
    validation_0 = module_0.Validation(tuple_0, bytes_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.__eq__(int_0)
    bool_0 = True
    var_2 = validation_0.__str__()
    validation_1 = module_0.Validation(bool_0, bool_0)
    validation_1.to_maybe()


def test_case_4():
    bytes_0 = b"\xbd\x0c{\xa0\xafc\x7f\xc8\xb4\x1d\xb3\x10\x9cO"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_either()
    var_2 = var_0.__str__()
    var_3 = validation_0.to_either()
    var_0.to_either()


def test_case_5():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)


def test_case_6():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.is_success()


def test_case_7():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    validation_1 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.is_fail()
    var_0.to_lazy()


def test_case_8():
    none_type_0 = None
    str_0 = ""
    list_0 = [str_0]
    validation_0 = module_0.Validation(list_0, str_0)
    validation_0.map(none_type_0)


def test_case_9():
    bytes_0 = b"\xac\x87>F\xc5w\x9d\x91&</\x04\x93\xcf\xd8\x03"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    validation_0.bind(bytes_0)


def test_case_10():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.ap(none_type_0)


def test_case_11():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_box()
    validation_1 = module_0.Validation(var_0, none_type_0)
    validation_1.to_try()


def test_case_12():
    bytes_0 = b"\xfb}\xc3\x00\xd7\x8e\xf7?\xadu"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_lazy()
    validation_1 = module_0.Validation(var_0, var_0)
    validation_0.map(var_0)


def test_case_13():
    none_type_0 = None
    none_type_1 = None
    validation_0 = module_0.Validation(none_type_1, none_type_1)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_try()
    var_2 = validation_0.__eq__(none_type_0)
    var_3 = var_2.__eq__(var_1)
    var_4 = var_0.to_either()
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    int_0 = -2169
    validation_1 = module_0.Validation(dict_0, int_0)
    var_5 = var_2.__str__()
    validation_2 = module_0.Validation(none_type_0, validation_0)
    var_3.ap(int_0)


def test_case_14():
    bytes_0 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_0.to_maybe()


def test_case_15():
    dict_0 = {}
    str_0 = "HKhszZ.0"
    validation_0 = module_0.Validation(str_0, dict_0)
    var_0 = validation_0.__eq__(dict_0)
    var_1 = validation_0.to_either()
    var_2 = var_1.to_maybe()
    var_0.to_maybe()


def test_case_16():
    bytes_0 = b"\xbd\x0c{\xa0\xafc\x7f\xc8\xb4\x1d\xb3\x9cO"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_1 = module_0.Validation(validation_0, validation_0)
    var_0 = validation_1.__eq__(validation_0)
    validation_1.to_either()
