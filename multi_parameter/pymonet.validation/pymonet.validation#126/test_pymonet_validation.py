# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0
import builtins as module_1


def test_case_0():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)


def test_case_1():
    list_0 = []
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(list_0)


def test_case_2():
    bytes_0 = b"\xc7\xd5["
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.__str__()


def test_case_3():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_box()
    var_1.to_box()


def test_case_4():
    str_0 = "5ffQarV`m"
    bytes_0 = b'>\xd8\x95\x9d\xe8\r\xfc|y"+Fe\xad\x87'
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_either()
    var_2 = var_1.to_box()
    var_3 = var_2.__eq__(bytes_0)
    bool_0 = True
    bytes_1 = b"\xb9"
    validation_1 = module_0.Validation(bool_0, bytes_1)
    var_4 = validation_1.to_either()
    var_5 = var_4.map(str_0)
    var_5.to_either()


def test_case_5():
    bytes_0 = b"\xc7\xd5["
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_maybe()
    var_2 = validation_0.to_lazy()
    var_3 = validation_0.is_success()


def test_case_6():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)


def test_case_7():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.is_success()


def test_case_8():
    bytes_0 = b"\xa7Q\x1c3\x8d*P7\x83w\x12\xe0\xdd\x98^\x0b;\t>\x1c"
    none_type_0 = None
    validation_0 = module_0.Validation(bytes_0, none_type_0)
    validation_0.is_fail()


def test_case_9():
    object_0 = module_1.object()
    none_type_0 = None
    none_type_1 = None
    validation_0 = module_0.Validation(none_type_1, none_type_1)
    validation_0.map(none_type_0)


def test_case_10():
    float_0 = 536.0322
    bytes_0 = b"\xc7\xd5["
    validation_0 = module_0.Validation(float_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.__str__()
    var_2 = validation_0.to_lazy()
    validation_0.bind(validation_0)


def test_case_11():
    str_0 = '\t5bp4\x0b#!\r!"q<\\^YW,.-'
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.ap(str_0)


def test_case_12():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(bool_0)
    var_1 = validation_0.to_box()
    validation_0.is_success()


def test_case_13():
    bytes_0 = b"\xc7\xd5["
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_lazy()
    var_2 = validation_0.is_success()


def test_case_14():
    float_0 = 1864.424
    validation_0 = module_0.Validation(float_0, float_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_box()
    var_0.is_fail()


def test_case_15():
    int_0 = -2260
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.to_try()


def test_case_16():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.is_success()
    var_1 = validation_0.is_fail()
    var_2 = validation_0.to_maybe()
    var_2.map(var_2)


def test_case_17():
    float_0 = 536.0322
    bytes_0 = b"\xc7\xd5["
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_maybe()
    none_type_0 = None
    validation_1 = module_0.Validation(float_0, float_0)
    bool_0 = True
    var_2 = none_type_0.__eq__(bool_0)
    var_3 = validation_0.__eq__(validation_1)


def test_case_18():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
    validation_0 = module_0.Validation(list_0, tuple_0)
    var_0 = validation_0.__str__()
    var_0.to_try()
