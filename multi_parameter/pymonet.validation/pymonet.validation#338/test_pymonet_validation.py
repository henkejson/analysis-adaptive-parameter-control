# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    none_type_0 = None
    none_type_1 = None
    validation_0 = module_0.Validation(none_type_1, none_type_1)
    var_0 = validation_0.__eq__(none_type_0)
    var_1 = validation_0.to_box()


def test_case_1():
    none_type_0 = None
    float_0 = 382.33835680330367
    list_0 = [float_0, float_0, float_0, float_0]
    validation_0 = module_0.Validation(none_type_0, list_0)
    var_0 = validation_0.__str__()


def test_case_2():
    none_type_0 = None
    none_type_0.to_lazy()


def test_case_3():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_4():
    bytes_0 = b"=\x0c\xefBa\x05/\xd9\xa3\x0f"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()


def test_case_5():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.is_fail()


def test_case_6():
    none_type_0 = None
    none_type_1 = None
    validation_0 = module_0.Validation(none_type_1, none_type_1)
    validation_0.map(none_type_0)


def test_case_7():
    bytes_0 = b" :\xb83AY\x8d<> K\x17"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    validation_0.bind(var_0)


def test_case_8():
    none_type_0 = None
    none_type_1 = None
    validation_0 = module_0.Validation(none_type_1, none_type_1)
    var_0 = validation_0.__eq__(none_type_0)
    validation_0.ap(none_type_0)


def test_case_9():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.__eq__(validation_0)


def test_case_10():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.ap(bool_0)
    var_2 = var_0.to_try()
    var_3 = validation_0.to_lazy()
    var_4 = var_0.map(var_0)


def test_case_11():
    str_0 = "4:1\rIkXX\\LJu@Rka"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.to_lazy()
    var_2 = validation_0.to_try()
    var_0.map(var_0)


def test_case_12():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_either()
    var_0.is_fail()


def test_case_13():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)


def test_case_14():
    str_0 = "Vx9Jn\\K.\\}:>TBg*)^RN"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.__str__()
    bytes_0 = b"\xf3\x1dg2\x0b\xa1\x06\xedI\xc8\xaf\xcb"
    str_1 = 'KlR[NNr"bEGk<k'
    int_0 = -3592
    tuple_0 = (bytes_0, str_1, int_0, str_1)
    validation_1 = module_0.Validation(tuple_0, bytes_0)
    var_2 = validation_1.to_lazy()


def test_case_15():
    str_0 = ""
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, str_0)
    int_0 = 1039
    validation_1 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.is_success()
    var_1 = validation_0.__str__()
    var_0.to_box()


def test_case_16():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_maybe()
    var_0.map(validation_0)


def test_case_17():
    bytes_0 = b" :]\xfd\xb83AY\x8d<> K\x17"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.__eq__(var_0)
    validation_1 = module_0.Validation(var_1, var_0)
    var_2 = validation_1.__eq__(validation_0)
    var_3 = var_1.__str__()
    validation_1.__str__()
