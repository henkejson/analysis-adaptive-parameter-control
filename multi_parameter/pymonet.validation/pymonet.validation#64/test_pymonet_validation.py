# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    int_0 = 648
    tuple_0 = (int_0,)
    tuple_1 = (tuple_0,)
    validation_0 = module_0.Validation(tuple_1, tuple_1)
    var_0 = validation_0.__eq__(tuple_1)
    var_1 = validation_0.__str__()
    var_1.map(validation_0)


def test_case_1():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.is_fail()
    var_2 = validation_0.to_either()
    var_1.to_box()


def test_case_2():
    int_0 = -1364
    tuple_0 = (int_0,)
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.is_success()
    var_2 = validation_0.to_either()
    var_0.to_maybe()


def test_case_3():
    bytes_0 = b"\xfc\xaf\x8b\x84"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.is_fail()
    var_2 = validation_0.__eq__(validation_0)
    var_3 = validation_0.to_maybe()
    var_3.is_fail()


def test_case_4():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)


def test_case_5():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.is_success()


def test_case_6():
    bytes_0 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.is_fail()


def test_case_7():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.is_success()
    bytes_0 = b"a\xa4\xacJD\xadU\xfb"
    validation_0.map(bytes_0)


def test_case_8():
    bool_0 = True
    list_0 = [bool_0]
    bool_1 = False
    bytes_0 = b"\xc5ey\xca\xa8\xe3E\x82D\xb6)\xd7C\xa9\xab\xe6"
    validation_0 = module_0.Validation(bool_1, bytes_0)
    validation_0.bind(list_0)


def test_case_9():
    float_0 = 1795.0735
    validation_0 = module_0.Validation(float_0, float_0)
    none_type_0 = None
    validation_0.ap(none_type_0)


def test_case_10():
    bool_0 = False
    str_0 = "9PSGh4I>m9A8"
    tuple_0 = (bool_0, str_0)
    none_type_0 = None
    validation_0 = module_0.Validation(tuple_0, none_type_0)
    var_0 = validation_0.to_box()


def test_case_11():
    float_0 = 1347.0151
    validation_0 = module_0.Validation(float_0, float_0)
    var_0 = validation_0.to_lazy()
    validation_0.to_either()


def test_case_12():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.to_try()


def test_case_13():
    float_0 = 1795.0735
    validation_0 = module_0.Validation(float_0, float_0)
    var_0 = validation_0.__eq__(validation_0)
    none_type_0 = None
    validation_0.ap(none_type_0)


def test_case_14():
    int_0 = 648
    tuple_0 = (int_0,)
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.__str__()


def test_case_15():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_maybe()
    validation_1 = module_0.Validation(set_0, set_0)
    var_1 = validation_1.to_either()
    bytes_0 = b"a\xa4\xacJD\xadU\xfb"
    validation_1.map(bytes_0)


def test_case_16():
    int_0 = 648
    tuple_0 = (int_0,)
    tuple_1 = (tuple_0,)
    none_type_0 = None
    validation_0 = module_0.Validation(tuple_1, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_maybe()
    var_1.bind(int_0)


def test_case_17():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.__str__()
    var_0.to_lazy()


def test_case_18():
    int_0 = -1364
    tuple_0 = (int_0,)
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.is_success()
    str_0 = "\t'$;c)'eS,s"
    validation_1 = module_0.Validation(int_0, str_0)
    var_2 = validation_1.is_fail()
    var_3 = validation_0.to_either()
    var_4 = validation_1.__eq__(validation_0)
    var_5 = validation_1.to_either()
    var_4.to_box()
