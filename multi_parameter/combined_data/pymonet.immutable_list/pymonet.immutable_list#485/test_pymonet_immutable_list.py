# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.immutable_list as module_0


def test_case_0():
    immutable_list_0 = module_0.ImmutableList()
    bool_0 = immutable_list_0.__eq__(immutable_list_0)
    var_0 = immutable_list_0.to_list()
    var_1 = immutable_list_0.reduce(var_0, immutable_list_0)


def test_case_1():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.__len__()
    immutable_list_1 = module_0.ImmutableList(var_0, is_empty=var_0)
    bool_0 = immutable_list_0.__eq__(var_0)
    immutable_list_2 = immutable_list_0.unshift(var_0)
    immutable_list_3 = module_0.ImmutableList(var_0)
    immutable_list_3.find(var_0)


def test_case_2():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.append(immutable_list_0)
    immutable_list_1.filter(immutable_list_0)


def test_case_3():
    bytes_0 = b"s\x15FK\xc8\xed\xe1\xe0\xf5\x18"
    int_0 = 1392
    tuple_0 = (bytes_0, int_0)
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(is_empty=bool_0)
    immutable_list_0.__add__(tuple_0)


def test_case_4():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.__len__()
    none_type_0 = None
    immutable_list_1 = immutable_list_0.append(none_type_0)


def test_case_5():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(tail=none_type_0, is_empty=none_type_0)
    var_0 = immutable_list_0.to_list()


def test_case_6():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    str_0 = immutable_list_1.__str__()
    immutable_list_1.find(immutable_list_1)


def test_case_7():
    str_0 = " be<*8\t"
    immutable_list_0 = module_0.ImmutableList(tail=str_0)
    var_0 = immutable_list_0.__len__()
    float_0 = 2036.0813
    immutable_list_1 = module_0.ImmutableList(float_0)
    immutable_list_1.map(var_0)


def test_case_8():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_0.filter(immutable_list_0)


def test_case_9():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.find(immutable_list_0)
    immutable_list_0.filter(immutable_list_0)


def test_case_10():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = module_0.ImmutableList(
        immutable_list_0, is_empty=immutable_list_0
    )
    immutable_list_1.find(immutable_list_0)


def test_case_11():
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(bool_0)
    immutable_list_1 = immutable_list_0.unshift(bool_0)
    var_0 = immutable_list_1.to_list()
    var_1 = immutable_list_0.to_list()
    list_0 = [immutable_list_1]
    immutable_list_0.reduce(list_0, list_0)


def test_case_12():
    immutable_list_0 = module_0.ImmutableList()


def test_case_13():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_1.filter(immutable_list_0)


def test_case_14():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.append(immutable_list_0)
    immutable_list_2 = module_0.ImmutableList(
        immutable_list_0, is_empty=immutable_list_0
    )
    str_0 = immutable_list_2.__str__()
    immutable_list_3 = module_0.ImmutableList(str_0)
    immutable_list_4 = immutable_list_1.append(immutable_list_1)
    immutable_list_3.find(immutable_list_0)


def test_case_15():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.append(immutable_list_0)
    immutable_list_2 = module_0.ImmutableList(
        immutable_list_0, is_empty=immutable_list_0
    )
    var_0 = immutable_list_2.__len__()
    immutable_list_2.find(immutable_list_0)


def test_case_16():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList()
    list_0 = [none_type_0, none_type_0, none_type_0, immutable_list_0]
    immutable_list_1 = immutable_list_0.unshift(list_0)
    bool_0 = immutable_list_0.__eq__(none_type_0)
    immutable_list_2 = immutable_list_0.append(immutable_list_1)
    immutable_list_3 = immutable_list_0.__add__(immutable_list_1)
    immutable_list_4 = module_0.ImmutableList(is_empty=immutable_list_3)
    var_0 = immutable_list_1.__len__()
    var_1 = immutable_list_2.to_list()
    var_0.append(var_1)


def test_case_17():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.__add__(immutable_list_0)
    str_0 = immutable_list_1.to_list()
    str_1 = "\n        Applies the function inside the Either[A] structure to another applicative type.\n\n        :param applicative: applicative contains function\n        :type applicative: Either[B]\n        :returns: new Either with result of contains function\n        :rtype: Either[A(B)]\n        "
    tuple_0 = (str_1, immutable_list_1)
    var_0 = immutable_list_0.find(tuple_0)
    var_1 = immutable_list_1.__len__()
    immutable_list_1.map(var_1)


def test_case_18():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.append(immutable_list_0)
    bool_0 = immutable_list_0.__eq__(immutable_list_0)
    bool_1 = immutable_list_0.__eq__(immutable_list_0)
    immutable_list_2 = immutable_list_0.unshift(immutable_list_1)
    bool_2 = immutable_list_1.__eq__(immutable_list_2)
    immutable_list_3 = module_0.ImmutableList(immutable_list_1)
    immutable_list_3.find(bool_0)


def test_case_19():
    immutable_list_0 = module_0.ImmutableList()
    bool_0 = immutable_list_0.__eq__(immutable_list_0)
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    none_type_0 = None
    immutable_list_2 = module_0.ImmutableList(
        none_type_0, none_type_0, immutable_list_0
    )
    str_0 = immutable_list_1.__str__()
    immutable_list_3 = module_0.ImmutableList(tail=str_0)
    immutable_list_4 = immutable_list_1.append(immutable_list_0)
    immutable_list_5 = immutable_list_4.unshift(str_0)
    var_0 = immutable_list_1.__len__()
    str_1 = immutable_list_0.__str__()
    var_1 = immutable_list_2.find(var_0)
    var_2 = immutable_list_0.reduce(immutable_list_3, immutable_list_5)
    immutable_list_6 = module_0.ImmutableList()
    immutable_list_4.reduce(none_type_0, immutable_list_1)


def test_case_20():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.append(immutable_list_0)
    immutable_list_2 = immutable_list_0.append(immutable_list_1)
    bool_0 = immutable_list_0.__eq__(immutable_list_0)
    bool_1 = immutable_list_0.__eq__(immutable_list_1)
    immutable_list_3 = immutable_list_0.unshift(immutable_list_1)
    bool_2 = immutable_list_2.__eq__(immutable_list_3)
    immutable_list_3.find(bool_0)
