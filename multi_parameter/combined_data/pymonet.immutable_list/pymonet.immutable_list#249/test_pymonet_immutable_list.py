# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.immutable_list as module_0
import typing as module_1


def test_case_0():
    immutable_list_0 = module_0.ImmutableList()
    bool_0 = immutable_list_0.__eq__(immutable_list_0)


def test_case_1():
    bytes_0 = b"\xd2f\xac\xa9!"
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(bytes_0, is_empty=bool_0)
    bool_1 = immutable_list_0.__eq__(bool_0)
    immutable_list_0.find(bool_1)


def test_case_2():
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.append(bool_0)


def test_case_3():
    int_0 = 3968
    float_0 = 768.0
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(tail=float_0, is_empty=bool_0)
    immutable_list_0.__add__(int_0)


def test_case_4():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.__len__()
    immutable_list_0.filter(var_0)


def test_case_5():
    float_0 = 3384.33
    immutable_list_0 = module_0.ImmutableList(float_0)
    var_0 = immutable_list_0.__len__()
    immutable_list_0.find(var_0)


def test_case_6():
    float_0 = 325.039919
    immutable_list_0 = module_0.ImmutableList(float_0)
    var_0 = immutable_list_0.to_list()
    immutable_list_0.find(var_0)


def test_case_7():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.append(immutable_list_0)
    var_0 = immutable_list_0.reduce(immutable_list_0, immutable_list_1)
    str_0 = var_0.__str__()
    var_0.filter(immutable_list_0)


def test_case_8():
    none_type_0 = None
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(none_type_0, is_empty=bool_0)
    var_0 = immutable_list_0.find(immutable_list_0)
    immutable_list_0.map(none_type_0)


def test_case_9():
    immutable_list_0 = module_0.ImmutableList()
    str_0 = immutable_list_0.__str__()
    bool_0 = immutable_list_0.__eq__(immutable_list_0)
    immutable_list_1 = immutable_list_0.append(immutable_list_0)
    var_0 = immutable_list_0.find(immutable_list_0)
    immutable_list_2 = immutable_list_0.unshift(var_0)
    var_1 = immutable_list_0.reduce(var_0, immutable_list_1)
    immutable_list_2.map(var_0)


def test_case_10():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_0.filter(immutable_list_0)


def test_case_11():
    immutable_list_0 = module_0.ImmutableList()
    bool_0 = immutable_list_0.__eq__(immutable_list_0)
    var_0 = immutable_list_0.find(immutable_list_0)
    immutable_list_0.filter(var_0)


def test_case_12():
    float_0 = 325.039919
    immutable_list_0 = module_0.ImmutableList(float_0)
    immutable_list_0.find(float_0)


def test_case_13():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.reduce(immutable_list_0, immutable_list_0)
    immutable_list_0.filter(var_0)


def test_case_14():
    generic_0 = module_1.Generic()
    complex_0 = -1413.9 + 489j
    immutable_list_0 = module_0.ImmutableList(complex_0)
    immutable_list_0.reduce(generic_0, generic_0)


def test_case_15():
    immutable_list_0 = module_0.ImmutableList()


def test_case_16():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_1.find(immutable_list_0)


def test_case_17():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_2 = immutable_list_1.__add__(immutable_list_0)
    immutable_list_1.find(immutable_list_0)


def test_case_18():
    str_0 = "\n        Transform Box into successfull Try.\n\n        :returns: successfull Try monad with previous value\n        :rtype: Try[A]\n        "
    immutable_list_0 = module_0.ImmutableList(tail=str_0)
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    immutable_list_1 = module_0.ImmutableList(is_empty=list_0)
    bool_0 = immutable_list_1.__eq__(immutable_list_0)


def test_case_19():
    immutable_list_0 = module_0.ImmutableList()
    bool_0 = immutable_list_0.__eq__(immutable_list_0)
    immutable_list_1 = immutable_list_0.append(immutable_list_0)
    var_0 = immutable_list_0.find(immutable_list_0)
    immutable_list_2 = immutable_list_1.unshift(immutable_list_0)
    immutable_list_2.reduce(bool_0, var_0)


def test_case_20():
    bytes_0 = b"\xd2f\xac\xa9!"
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(bytes_0, is_empty=bool_0)
    immutable_list_1 = immutable_list_0.append(bool_0)
    var_0 = immutable_list_1.__len__()
    immutable_list_1.find(bool_0)


def test_case_21():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = module_0.ImmutableList(
        immutable_list_0, immutable_list_0, immutable_list_0
    )
    bool_0 = immutable_list_1.__eq__(immutable_list_0)
    immutable_list_1.find(bool_0)
