# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.immutable_list as module_0


def test_case_0():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    bool_0 = immutable_list_0.__eq__(immutable_list_0)
    immutable_list_1.find(bool_0)


def test_case_1():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    bool_0 = immutable_list_1.__eq__(immutable_list_0)
    immutable_list_1.find(bool_0)


def test_case_2():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_1.find(immutable_list_1)


def test_case_3():
    str_0 = "UvK969q>3R"
    set_0 = {str_0, str_0, str_0}
    tuple_0 = (set_0,)
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(none_type_0)
    bool_0 = False
    immutable_list_1 = module_0.ImmutableList(is_empty=bool_0)
    immutable_list_2 = immutable_list_1.__add__(immutable_list_0)
    immutable_list_2.__add__(tuple_0)


def test_case_4():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.__len__()
    complex_0 = 1309.75745 + 537.26j
    immutable_list_0.filter(complex_0)


def test_case_5():
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(bool_0)
    var_0 = immutable_list_1.__len__()
    immutable_list_1.find(var_0)


def test_case_6():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    str_0 = immutable_list_0.__str__()
    immutable_list_1.find(immutable_list_1)


def test_case_7():
    int_0 = 507
    immutable_list_0 = module_0.ImmutableList(int_0)
    immutable_list_1 = immutable_list_0.__add__(immutable_list_0)
    var_0 = immutable_list_1.to_list()
    immutable_list_0.find(int_0)


def test_case_8():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_0.map(immutable_list_0)


def test_case_9():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(tail=none_type_0)
    immutable_list_1 = module_0.ImmutableList()
    immutable_list_2 = immutable_list_1.unshift(none_type_0)
    immutable_list_2.map(immutable_list_1)


def test_case_10():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_0.filter(immutable_list_0)


def test_case_11():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.reduce(immutable_list_0, immutable_list_0)
    bool_0 = var_0.__eq__(immutable_list_0)
    var_1 = var_0.find(bool_0)
    immutable_list_1 = module_0.ImmutableList(tail=bool_0)
    bool_1 = var_0.__eq__(immutable_list_0)
    immutable_list_1.filter(var_0)


def test_case_12():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.find(immutable_list_0)
    immutable_list_1 = module_0.ImmutableList()
    immutable_list_1.filter(immutable_list_1)


def test_case_13():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.find(immutable_list_0)
    immutable_list_1 = module_0.ImmutableList()
    bool_0 = immutable_list_1.reduce(immutable_list_1, immutable_list_1)
    immutable_list_1.filter(immutable_list_1)


def test_case_14():
    none_type_0 = None
    str_0 = "\n        Take function (A) -> B and applied this function on current Validation value.\n\n        :param mapper: mapper function\n        :type mapper: Function(A) -> B\n        :returns: new Validation with mapped value and previous errors\n        :rtype: Validation[B, List[E]]\n        "
    immutable_list_0 = module_0.ImmutableList(str_0, none_type_0)
    immutable_list_0.reduce(none_type_0, none_type_0)


def test_case_15():
    immutable_list_0 = module_0.ImmutableList()


def test_case_16():
    none_type_0 = None
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(none_type_0, is_empty=bool_0)
    immutable_list_1 = immutable_list_0.append(bool_0)


def test_case_17():
    float_0 = 385.0
    str_0 = "nv=g}tXVD0,l5`Wve"
    immutable_list_0 = module_0.ImmutableList(str_0)
    var_0 = immutable_list_0.__len__()
    var_0.append(float_0)


def test_case_18():
    int_0 = 507
    immutable_list_0 = module_0.ImmutableList(int_0)
    immutable_list_0.find(int_0)


def test_case_19():
    none_type_0 = None
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(bool_0)
    immutable_list_1.reduce(none_type_0, none_type_0)


def test_case_20():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.find(immutable_list_0)
    immutable_list_1 = module_0.ImmutableList(tail=immutable_list_0)
    bool_0 = immutable_list_1.__eq__(immutable_list_0)
    immutable_list_0.filter(var_0)


def test_case_21():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_2 = immutable_list_1.__add__(immutable_list_1)
    immutable_list_1.find(immutable_list_1)
