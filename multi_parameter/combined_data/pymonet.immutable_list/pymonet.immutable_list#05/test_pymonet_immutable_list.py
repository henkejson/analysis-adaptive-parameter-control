# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.immutable_list as module_0


def test_case_0():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(is_empty=none_type_0)
    bool_0 = immutable_list_0.__eq__(immutable_list_0)
    var_0 = immutable_list_0.to_list()


def test_case_1():
    tuple_0 = ()
    immutable_list_0 = module_0.ImmutableList()
    bool_0 = immutable_list_0.__eq__(tuple_0)


def test_case_2():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(tail=none_type_0)
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_1.find(immutable_list_0)


def test_case_3():
    list_0 = []
    immutable_list_0 = list_0.append(list_0)
    bool_0 = True
    immutable_list_1 = module_0.ImmutableList(tail=list_0, is_empty=bool_0)
    immutable_list_2 = immutable_list_1.unshift(list_0)
    var_0 = immutable_list_2.__len__()
    immutable_list_3 = module_0.ImmutableList()
    immutable_list_4 = immutable_list_3.__add__(immutable_list_3)
    immutable_list_5 = immutable_list_4.append(immutable_list_3)
    immutable_list_1.__add__(var_0)


def test_case_4():
    immutable_list_0 = module_0.ImmutableList()
    str_0 = immutable_list_0.__str__()
    var_0 = immutable_list_0.__len__()
    immutable_list_0.map(var_0)


def test_case_5():
    complex_0 = -2654.85 - 2495.6j
    immutable_list_0 = module_0.ImmutableList(complex_0)
    var_0 = immutable_list_0.__len__()
    immutable_list_0.find(immutable_list_0)


def test_case_6():
    immutable_list_0 = module_0.ImmutableList()
    str_0 = immutable_list_0.__str__()


def test_case_7():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    var_0 = immutable_list_1.to_list()
    immutable_list_1.find(immutable_list_0)


def test_case_8():
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList()
    bool_1 = immutable_list_0.__eq__(immutable_list_0)
    str_0 = immutable_list_0.__str__()
    immutable_list_1 = module_0.ImmutableList()
    immutable_list_2 = immutable_list_0.unshift(bool_0)
    var_0 = immutable_list_2.to_list()
    immutable_list_3 = module_0.ImmutableList()
    var_1 = immutable_list_1.find(immutable_list_3)
    var_2 = immutable_list_3.find(var_1)
    immutable_list_2.map(var_1)


def test_case_9():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_0.filter(immutable_list_0)


def test_case_10():
    none_type_0 = None
    int_0 = -2778
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.append(int_0)
    immutable_list_1.filter(none_type_0)


def test_case_11():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.find(immutable_list_0)
    immutable_list_0.filter(var_0)


def test_case_12():
    complex_0 = -2654.85 - 2495.6j
    immutable_list_0 = module_0.ImmutableList(complex_0)
    immutable_list_0.find(immutable_list_0)


def test_case_13():
    int_0 = 767
    str_0 = 'H"}`8:BT/xI2O&fOg'
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(is_empty=bool_0)
    var_0 = immutable_list_0.reduce(int_0, str_0)


def test_case_14():
    str_0 = "\n    Perform left-to-right function composition.\n\n    :param value: argument of first applied function\n    :type value: Any\n    :param functions: list of functions to applied from left-to-right\n    :type functions: List[Function]\n    :returns: result of all functions\n    :rtype: Any\n    "
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(str_0)
    bool_0 = immutable_list_0.__eq__(immutable_list_0)
    var_0 = immutable_list_0.to_list()
    immutable_list_1 = var_0.__add__(var_0)
    immutable_list_0.reduce(str_0, none_type_0)


def test_case_15():
    immutable_list_0 = module_0.ImmutableList()


def test_case_16():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_2 = immutable_list_1.__add__(immutable_list_1)
    immutable_list_1.find(immutable_list_0)


def test_case_17():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    var_0 = immutable_list_1.__len__()
    immutable_list_1.find(immutable_list_0)


def test_case_18():
    complex_0 = -2654.85 - 2495.6j
    immutable_list_0 = module_0.ImmutableList(complex_0)
    immutable_list_1 = immutable_list_0.unshift(complex_0)
    bool_0 = immutable_list_1.__eq__(immutable_list_0)
    immutable_list_0.find(immutable_list_0)


def test_case_19():
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList()
    bool_1 = immutable_list_0.__eq__(immutable_list_0)
    str_0 = immutable_list_0.__str__()
    immutable_list_1 = module_0.ImmutableList()
    immutable_list_2 = immutable_list_0.unshift(bool_0)
    var_0 = immutable_list_0.reduce(str_0, str_0)
    immutable_list_2.reduce(var_0, immutable_list_2)


def test_case_20():
    immutable_list_0 = module_0.ImmutableList()
    bool_0 = immutable_list_0.__eq__(immutable_list_0)
    immutable_list_1 = immutable_list_0.unshift(bool_0)
    bool_1 = immutable_list_0.__eq__(immutable_list_1)
    immutable_list_1.find(immutable_list_1)
