# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.immutable_list as module_0


def test_case_0():
    bytes_0 = b"\xf68\xbb\xeeo\tf"
    immutable_list_0 = module_0.ImmutableList(bytes_0)
    immutable_list_1 = immutable_list_0.append(bytes_0)
    bool_0 = immutable_list_0.__eq__(immutable_list_0)
    immutable_list_0.find(bytes_0)


def test_case_1():
    bytes_0 = b"\xf68\xbb\xeeo\tf"
    immutable_list_0 = module_0.ImmutableList(bytes_0)
    bool_0 = immutable_list_0.__eq__(bytes_0)
    immutable_list_0.find(bytes_0)


def test_case_2():
    bytes_0 = b"\xf68\x19\xeeoTY"
    immutable_list_0 = module_0.ImmutableList(bytes_0)
    immutable_list_1 = immutable_list_0.__add__(immutable_list_0)


def test_case_3():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.to_list()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_2 = immutable_list_1.unshift(var_0)
    var_1 = immutable_list_0.reduce(var_0, var_0)
    var_2 = immutable_list_0.reduce(var_1, var_0)
    none_type_0 = None
    immutable_list_0.__add__(none_type_0)


def test_case_4():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.__len__()
    immutable_list_0.filter(var_0)


def test_case_5():
    bytes_0 = b"\xf68\xbb\x96o\tf"
    immutable_list_0 = module_0.ImmutableList(bytes_0)
    var_0 = immutable_list_0.__len__()
    immutable_list_0.find(bytes_0)


def test_case_6():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.to_list()
    immutable_list_2 = module_0.ImmutableList()


def test_case_7():
    bytes_0 = b"\xf68\xbb\xeeo\tf"
    immutable_list_0 = module_0.ImmutableList(bytes_0)
    immutable_list_1 = immutable_list_0.append(bytes_0)
    str_0 = immutable_list_1.__str__()
    immutable_list_0.find(bytes_0)


def test_case_8():
    str_0 = "\n        Transform Maybe to Box.\n\n        :returns: Box monad with previous value when Maybe is not empty, in other case Box with None\n        :rtype: Box[A | None]\n        "
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(none_type_0)
    immutable_list_0.map(str_0)


def test_case_9():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_0.filter(immutable_list_0)


def test_case_10():
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(is_empty=bool_0)
    immutable_list_1 = immutable_list_0.__add__(immutable_list_0)
    var_0 = immutable_list_0.find(immutable_list_1)
    var_1 = immutable_list_1.reduce(var_0, immutable_list_1)
    immutable_list_1.filter(var_1)


def test_case_11():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.find(immutable_list_0)
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_1.find(immutable_list_0)


def test_case_12():
    bytes_0 = b"\xf68\xbb\xeeo\tf"
    immutable_list_0 = module_0.ImmutableList(bytes_0)
    immutable_list_0.find(bytes_0)


def test_case_13():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.reduce(immutable_list_0, immutable_list_0)
    immutable_list_0.filter(var_0)


def test_case_14():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList()
    str_0 = immutable_list_0.__str__()
    str_1 = immutable_list_0.__str__()
    var_0 = immutable_list_0.to_list()
    var_1 = immutable_list_0.find(var_0)
    var_2 = immutable_list_0.reduce(immutable_list_0, str_0)
    var_3 = var_2.__len__()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_1.reduce(none_type_0, var_1)


def test_case_15():
    immutable_list_0 = module_0.ImmutableList()


def test_case_16():
    immutable_list_0 = module_0.ImmutableList()
    str_0 = immutable_list_0.__str__()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_1.find(immutable_list_0)


def test_case_17():
    bytes_0 = b"\xf68\xbb\xeeo\tf"
    immutable_list_0 = module_0.ImmutableList(bytes_0)
    immutable_list_1 = immutable_list_0.append(bytes_0)
    immutable_list_0.find(bytes_0)


def test_case_18():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_1.find(immutable_list_0)


def test_case_19():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(none_type_0)
    str_0 = immutable_list_0.__str__()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    var_0 = immutable_list_1.append(str_0)
    immutable_list_2 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_2.find(immutable_list_1)


def test_case_20():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    var_0 = immutable_list_1.__len__()
    immutable_list_1.find(immutable_list_0)


def test_case_21():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = module_0.ImmutableList(
        immutable_list_0, immutable_list_0, immutable_list_0
    )
    immutable_list_1.find(immutable_list_0)


def test_case_22():
    str_0 = "x&yYvH+flr@vxNI"
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(bool_0)
    bool_1 = immutable_list_0.__eq__(immutable_list_0)
    immutable_list_0.reduce(str_0, str_0)


def test_case_23():
    bytes_0 = b"\xdfa\x07\x18?\xc9\x1a4\x19u\r"
    immutable_list_0 = module_0.ImmutableList()
    str_0 = immutable_list_0.__str__()
    str_1 = immutable_list_0.__str__()
    var_0 = immutable_list_0.to_list()
    var_1 = immutable_list_0.find(var_0)
    var_2 = immutable_list_0.reduce(immutable_list_0, str_0)
    var_3 = var_2.__len__()
    immutable_list_1 = module_0.ImmutableList(tail=bytes_0)
    immutable_list_1.map(var_2)


def test_case_24():
    bytes_0 = b"\xf68\xbb\xeeo\tf"
    immutable_list_0 = module_0.ImmutableList(bytes_0)
    immutable_list_1 = immutable_list_0.append(bytes_0)
    bool_0 = immutable_list_1.__eq__(immutable_list_0)
    str_0 = immutable_list_1.__str__()
    immutable_list_0.find(bytes_0)


def test_case_25():
    tuple_0 = ()
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(none_type_0, none_type_0)
    immutable_list_1 = immutable_list_0.unshift(tuple_0)
    bool_0 = immutable_list_0.__eq__(immutable_list_1)
    immutable_list_1.find(immutable_list_1)
