# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.immutable_list as module_0


def test_case_0():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(none_type_0, none_type_0)
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    bool_0 = immutable_list_0.__eq__(immutable_list_1)
    immutable_list_1.find(immutable_list_0)


def test_case_1():
    complex_0 = 1286.82 + 2830.73j
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(tail=none_type_0)
    immutable_list_1 = immutable_list_0.unshift(complex_0)
    bool_0 = immutable_list_1.__eq__(complex_0)


def test_case_2():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.append(immutable_list_0)
    var_0 = immutable_list_0.to_list()
    immutable_list_0.filter(var_0)


def test_case_3():
    float_0 = 1355.57051
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(bool_0, is_empty=bool_0)
    immutable_list_0.__add__(float_0)


def test_case_4():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.__len__()
    var_0.to_list()


def test_case_5():
    bytes_0 = b"\x81\x94\xf2\xd2\x90TO\xb9\xa7N\xd6\x04\xa6J\xf5CxUc\x7f"
    immutable_list_0 = module_0.ImmutableList(bytes_0)
    str_0 = immutable_list_0.__len__()
    immutable_list_0.find(bytes_0)


def test_case_6():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.to_list()
    immutable_list_0.filter(var_0)


def test_case_7():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(none_type_0, none_type_0)
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    var_0 = immutable_list_1.to_list()
    immutable_list_1.find(immutable_list_1)


def test_case_8():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.append(immutable_list_0)
    var_0 = immutable_list_1.to_list()
    immutable_list_2 = immutable_list_0.append(var_0)
    var_1 = immutable_list_2.__len__()
    immutable_list_0.map(immutable_list_0)


def test_case_9():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.append(immutable_list_0)
    var_0 = immutable_list_1.__len__()
    str_0 = immutable_list_0.__str__()
    immutable_list_2 = module_0.ImmutableList(var_0)
    bool_0 = immutable_list_2.__eq__(immutable_list_2)
    var_1 = immutable_list_0.__len__()
    immutable_list_1.map(var_0)


def test_case_10():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_0.filter(immutable_list_0)


def test_case_11():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.find(immutable_list_0)
    immutable_list_0.filter(immutable_list_0)


def test_case_12():
    bytes_0 = b"\x81\x94\xf2\xd2\x90TO\xb9\xa7N\xd6\x04\xa6J\xf5CxUc\x7f"
    immutable_list_0 = module_0.ImmutableList(bytes_0)
    immutable_list_0.find(bytes_0)


def test_case_13():
    immutable_list_0 = module_0.ImmutableList()
    none_type_0 = None
    var_0 = immutable_list_0.reduce(immutable_list_0, none_type_0)
    var_1 = immutable_list_0.to_list()
    var_2 = immutable_list_0.find(var_1)


def test_case_14():
    bytes_0 = b"\xdc\xf8\xcb\x84\xc7\xb8\xa1\xd9\x96\xe1\xee\x1a"
    immutable_list_0 = module_0.ImmutableList(bytes_0)
    str_0 = "\n        :param constructor_fn: function to call during fold method call\n        :type constructor_fn: Function() -> A\n        "
    immutable_list_0.reduce(bytes_0, str_0)


def test_case_15():
    immutable_list_0 = module_0.ImmutableList()


def test_case_16():
    bytes_0 = b"\x81\x94\xf2\xd2\x90TO\xb9\xa7N\xd6\x04\xa6J\xf5CxUc\x7f"
    immutable_list_0 = module_0.ImmutableList(bytes_0)
    str_0 = immutable_list_0.__str__()
    immutable_list_0.find(bytes_0)


def test_case_17():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(none_type_0, none_type_0)
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_1.find(immutable_list_1)


def test_case_18():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(none_type_0, none_type_0)
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    bool_0 = immutable_list_1.__eq__(immutable_list_1)
    immutable_list_1.find(immutable_list_1)


def test_case_19():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(none_type_0, none_type_0)
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    var_0 = immutable_list_1.__add__(immutable_list_1)
    immutable_list_1.find(immutable_list_1)


def test_case_20():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(none_type_0, none_type_0)
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    str_0 = immutable_list_1.to_list()
    var_0 = immutable_list_1.__add__(immutable_list_0)
    str_1 = immutable_list_1.__len__()
    var_0.find(immutable_list_1)


def test_case_21():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(none_type_0, none_type_0)
    immutable_list_1 = module_0.ImmutableList(immutable_list_0, immutable_list_0)
    immutable_list_1.find(immutable_list_1)


def test_case_22():
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(is_empty=bool_0)
    complex_0 = 2840.32789 + 1269.15j
    list_0 = [complex_0, complex_0]
    tuple_0 = (complex_0, list_0)
    none_type_0 = None
    set_0 = set()
    set_1 = set()
    list_1 = [set_1, set_1, set_0]
    bytes_0 = b"<\x15\x8c\x1d"
    tuple_1 = (set_0, list_1, bytes_0, set_1)
    immutable_list_1 = module_0.ImmutableList()
    immutable_list_2 = immutable_list_1.unshift(tuple_1)
    immutable_list_3 = immutable_list_2.append(none_type_0)
    immutable_list_3.reduce(tuple_0, complex_0)


def test_case_23():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.append(immutable_list_0)
    immutable_list_1.filter(immutable_list_0)


def test_case_24():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(none_type_0, none_type_0)
    immutable_list_1 = immutable_list_0.append(immutable_list_0)
    immutable_list_2 = immutable_list_0.unshift(immutable_list_1)
    str_0 = immutable_list_2.__str__()
    var_0 = immutable_list_0.reduce(none_type_0, immutable_list_2)
    immutable_list_3 = immutable_list_0.append(str_0)
    bool_0 = immutable_list_1.__eq__(immutable_list_3)
    var_0.find(immutable_list_2)
