# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.immutable_list as module_0


def test_case_0():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    bool_0 = immutable_list_0.__eq__(immutable_list_1)
    immutable_list_1.find(immutable_list_1)


def test_case_1():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.__add__(immutable_list_0)


def test_case_2():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.__len__()
    none_type_0 = None
    str_0 = "\n        Take filterer function, when monad is successfully call filterer with monad value.\n        When filterer returns True method returns copy of monad, othercase\n        not successfully Try with previous value.\n\n        :params filterer: function to apply on monad value\n        :type filterer: Function(A) -> Boolean\n        :returns: Try with previous value\n        :rtype: Try[A]\n        "
    immutable_list_1 = module_0.ImmutableList(str_0)
    immutable_list_1.__add__(none_type_0)


def test_case_3():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.__len__()


def test_case_4():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    bool_0 = immutable_list_1.__len__()
    immutable_list_1.find(immutable_list_1)


def test_case_5():
    dict_0 = {}
    immutable_list_0 = module_0.ImmutableList(is_empty=dict_0)
    str_0 = immutable_list_0.__str__()


def test_case_6():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    var_0 = immutable_list_1.to_list()
    immutable_list_1.find(var_0)


def test_case_7():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.find(none_type_0)
    bool_0 = True
    immutable_list_1 = module_0.ImmutableList(is_empty=bool_0)
    immutable_list_1.map(none_type_0)


def test_case_8():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.append(immutable_list_0)
    immutable_list_2 = immutable_list_1.append(immutable_list_1)
    none_type_0 = None
    immutable_list_3 = module_0.ImmutableList(tail=immutable_list_1)
    immutable_list_4 = immutable_list_2.append(none_type_0)
    immutable_list_5 = module_0.ImmutableList(
        tail=immutable_list_1, is_empty=immutable_list_4
    )
    none_type_1 = None
    bool_0 = immutable_list_1.__eq__(immutable_list_1)
    immutable_list_6 = module_0.ImmutableList(tail=none_type_0)
    var_0 = immutable_list_1.find(none_type_1)
    var_1 = immutable_list_1.to_list()
    var_2 = immutable_list_3.__len__()
    immutable_list_1.map(var_2)


def test_case_9():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_0.filter(immutable_list_0)


def test_case_10():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.__add__(immutable_list_0)
    immutable_list_1.filter(immutable_list_1)


def test_case_11():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.__add__(immutable_list_0)
    var_0 = immutable_list_1.find(immutable_list_0)
    immutable_list_1.filter(var_0)


def test_case_12():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.reduce(immutable_list_0, immutable_list_0)
    immutable_list_1.filter(immutable_list_0)


def test_case_13():
    bytes_0 = b""
    immutable_list_0 = module_0.ImmutableList(bytes_0)
    immutable_list_1 = module_0.ImmutableList(tail=immutable_list_0)
    var_0 = immutable_list_1.__len__()
    str_0 = "FyeN}).HA"
    immutable_list_0.reduce(immutable_list_1, str_0)


def test_case_14():
    immutable_list_0 = module_0.ImmutableList()


def test_case_15():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.append(immutable_list_0)
    immutable_list_2 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_2.find(immutable_list_2)


def test_case_16():
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(is_empty=bool_0)
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)


def test_case_17():
    immutable_list_0 = module_0.ImmutableList()
    bool_0 = immutable_list_0.__eq__(immutable_list_0)
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_1.find(immutable_list_1)


def test_case_18():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.append(immutable_list_0)
    immutable_list_2 = immutable_list_1.append(immutable_list_0)
    immutable_list_3 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_3.find(immutable_list_3)


def test_case_19():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_1.find(immutable_list_1)


def test_case_20():
    float_0 = -1871.6332
    immutable_list_0 = module_0.ImmutableList(float_0)
    var_0 = immutable_list_0.__len__()
    immutable_list_0.find(float_0)


def test_case_21():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_2 = immutable_list_0.__add__(immutable_list_0)
    bool_0 = immutable_list_1.__eq__(immutable_list_2)
    var_0 = immutable_list_1.__len__()
    immutable_list_3 = immutable_list_0.unshift(immutable_list_0)
    var_1 = immutable_list_1.to_list()
    immutable_list_3.reduce(var_1, immutable_list_1)


def test_case_22():
    str_0 = "87*npZ3j:Houi\x0c"
    immutable_list_0 = module_0.ImmutableList(str_0)
    immutable_list_1 = immutable_list_0.append(immutable_list_0)
    bool_0 = immutable_list_1.__eq__(immutable_list_0)
    immutable_list_0.find(str_0)


def test_case_23():
    float_0 = -1871.6332
    immutable_list_0 = module_0.ImmutableList(float_0)
    immutable_list_0.find(float_0)
