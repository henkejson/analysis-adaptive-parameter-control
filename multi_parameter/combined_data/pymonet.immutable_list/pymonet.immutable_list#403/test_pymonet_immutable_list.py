# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.immutable_list as module_0


def test_case_0():
    tuple_0 = ()
    immutable_list_0 = module_0.ImmutableList(tuple_0)
    bool_0 = immutable_list_0.__eq__(immutable_list_0)
    immutable_list_0.find(tuple_0)


def test_case_1():
    none_type_0 = None
    float_0 = -760.36964
    immutable_list_0 = module_0.ImmutableList(float_0)
    bool_0 = immutable_list_0.__eq__(none_type_0)
    immutable_list_1 = immutable_list_0.__add__(immutable_list_0)
    immutable_list_0.find(none_type_0)


def test_case_2():
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(bool_0)
    var_0 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_0.find(var_0)


def test_case_3():
    float_0 = -736.204117
    str_0 = "e"
    tuple_0 = (float_0, str_0)
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.__len__()
    var_0.map(tuple_0)


def test_case_4():
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(bool_0)
    var_0 = immutable_list_0.__len__()
    immutable_list_0.find(var_0)


def test_case_5():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(tail=none_type_0, is_empty=none_type_0)
    var_0 = immutable_list_0.to_list()
    var_1 = immutable_list_0.reduce(var_0, none_type_0)


def test_case_6():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = module_0.ImmutableList(immutable_list_0)
    immutable_list_2 = immutable_list_1.__add__(immutable_list_1)
    var_0 = immutable_list_2.to_list()
    immutable_list_2.find(immutable_list_1)


def test_case_7():
    bool_0 = False
    bool_1 = True
    immutable_list_0 = module_0.ImmutableList(bool_0, is_empty=bool_1)
    var_0 = immutable_list_0.__len__()
    immutable_list_0.map(var_0)


def test_case_8():
    immutable_list_0 = module_0.ImmutableList()
    none_type_0 = None
    immutable_list_1 = immutable_list_0.append(none_type_0)
    bool_0 = immutable_list_0.__eq__(immutable_list_0)
    immutable_list_2 = immutable_list_0.__add__(immutable_list_0)
    bool_1 = immutable_list_2.__eq__(none_type_0)
    immutable_list_3 = immutable_list_0.append(none_type_0)
    var_0 = immutable_list_0.__len__()
    var_1 = immutable_list_0.__len__()
    complex_0 = -188.1 - 626.1j
    immutable_list_1.map(complex_0)


def test_case_9():
    int_0 = 2200
    immutable_list_0 = module_0.ImmutableList(is_empty=int_0)
    immutable_list_0.filter(int_0)


def test_case_10():
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(is_empty=bool_0)
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    var_0 = immutable_list_0.__len__()
    immutable_list_1.filter(var_0)


def test_case_11():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = module_0.ImmutableList(immutable_list_0)
    var_0 = immutable_list_0.find(immutable_list_0)
    immutable_list_1.find(immutable_list_1)


def test_case_12():
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(bool_0)
    immutable_list_0.find(immutable_list_0)


def test_case_13():
    bytes_0 = b""
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(bytes_0, none_type_0, bytes_0)
    str_0 = immutable_list_0.__str__()
    bool_0 = immutable_list_0.__eq__(immutable_list_0)
    immutable_list_0.reduce(none_type_0, bytes_0)


def test_case_14():
    immutable_list_0 = module_0.ImmutableList()


def test_case_15():
    none_type_0 = None
    float_0 = -760.36964
    immutable_list_0 = module_0.ImmutableList(float_0)
    str_0 = immutable_list_0.__str__()
    immutable_list_0.find(none_type_0)


def test_case_16():
    none_type_0 = None
    float_0 = -760.36964
    immutable_list_0 = module_0.ImmutableList(float_0)
    immutable_list_1 = immutable_list_0.append(float_0)
    immutable_list_0.find(none_type_0)


def test_case_17():
    bytes_0 = b"\xe5\xe1\x1e\xcf\xca,C\xf1p*r"
    str_0 = "\n    Min is a Monoid that will combines 2 numbers, resulting in the smallest of the two.\n    "
    immutable_list_0 = module_0.ImmutableList(tail=str_0)
    immutable_list_0.append(bytes_0)


def test_case_18():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.to_list()
    immutable_list_1 = module_0.ImmutableList()
    immutable_list_2 = immutable_list_1.unshift(immutable_list_1)
    immutable_list_3 = immutable_list_1.unshift(immutable_list_1)
    var_1 = immutable_list_3.__len__()
    immutable_list_4 = module_0.ImmutableList()
    immutable_list_5 = var_1.__add__(immutable_list_4)
    var_1.unshift(immutable_list_3)


def test_case_19():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = module_0.ImmutableList(immutable_list_0)
    immutable_list_2 = immutable_list_1.__add__(immutable_list_1)
    immutable_list_2.find(immutable_list_1)


def test_case_20():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = module_0.ImmutableList()
    immutable_list_2 = immutable_list_1.unshift(immutable_list_0)
    str_0 = immutable_list_0.__str__()
    immutable_list_3 = module_0.ImmutableList()
    bool_0 = immutable_list_0.__eq__(str_0)
    str_1 = immutable_list_0.__str__()
    str_2 = immutable_list_3.__str__()
    immutable_list_2.reduce(immutable_list_2, immutable_list_2)


def test_case_21():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(none_type_0)
    immutable_list_1 = immutable_list_0.append(none_type_0)
    immutable_list_2 = immutable_list_0.__add__(immutable_list_1)
    bool_0 = immutable_list_0.__eq__(immutable_list_1)
    immutable_list_3 = immutable_list_0.unshift(immutable_list_1)
    str_0 = immutable_list_1.__str__()
    immutable_list_3.find(none_type_0)


def test_case_22():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = module_0.ImmutableList()
    var_0 = immutable_list_1.__len__()
    str_0 = immutable_list_0.__str__()
    var_1 = immutable_list_1.find(var_0)
    bytes_0 = b"h\x96K\xf1Q\x7f:T\\"
    var_2 = immutable_list_1.reduce(var_0, bytes_0)
    immutable_list_0.__add__(var_2)


def test_case_23():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(none_type_0)
    immutable_list_1 = module_0.ImmutableList(
        immutable_list_0, none_type_0, none_type_0
    )
    immutable_list_2 = immutable_list_0.__add__(immutable_list_1)
    bool_0 = immutable_list_0.__eq__(immutable_list_1)
    immutable_list_3 = immutable_list_0.unshift(immutable_list_1)
    str_0 = immutable_list_1.__str__()
    immutable_list_3.find(none_type_0)
