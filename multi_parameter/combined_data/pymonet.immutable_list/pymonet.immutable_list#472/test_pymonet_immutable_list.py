# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.immutable_list as module_0


def test_case_0():
    immutable_list_0 = module_0.ImmutableList()
    bool_0 = immutable_list_0.__eq__(immutable_list_0)
    immutable_list_0.filter(bool_0)


def test_case_1():
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(bool_0, is_empty=bool_0)
    bool_1 = immutable_list_0.__eq__(bool_0)
    immutable_list_0.find(bool_0)


def test_case_2():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_1.find(immutable_list_1)


def test_case_3():
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.find(immutable_list_0)
    var_1 = immutable_list_0.find(var_0)
    immutable_list_0.__add__(bool_0)


def test_case_4():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.__len__()
    var_1 = immutable_list_0.find(immutable_list_0)
    immutable_list_0.filter(var_0)


def test_case_5():
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(bool_0, is_empty=bool_0)
    bool_1 = immutable_list_0.__len__()
    immutable_list_0.find(bool_0)


def test_case_6():
    immutable_list_0 = module_0.ImmutableList()
    bool_0 = immutable_list_0.to_list()
    immutable_list_0.filter(bool_0)


def test_case_7():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    var_0 = immutable_list_1.to_list()
    var_1 = immutable_list_0.find(var_0)
    immutable_list_0.filter(var_0)


def test_case_8():
    none_type_0 = None
    none_type_1 = None
    immutable_list_0 = module_0.ImmutableList(tail=none_type_1)
    immutable_list_0.map(none_type_0)


def test_case_9():
    bool_0 = True
    str_0 = "\n        Take 2 functions call only one of then with either value and return her result.\n\n        :params error: function to call when Either is Left\n        :type error: Function(A) -> B\n        :params success: function to call when Either is Right\n        :type success: Function(A) -> B\n        :returns: result of success handler when Eihter is Right, result of error handler when Eihter is Left\n        :rtpye: B\n        "
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(none_type_0)
    immutable_list_1 = immutable_list_0.append(str_0)
    immutable_list_1.map(bool_0)


def test_case_10():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_0.filter(immutable_list_0)


def test_case_11():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    bool_0 = immutable_list_1.__eq__(immutable_list_1)
    var_0 = immutable_list_0.find(immutable_list_1)
    immutable_list_1.filter(immutable_list_0)


def test_case_12():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.find(immutable_list_0)
    immutable_list_0.filter(var_0)


def test_case_13():
    immutable_list_0 = module_0.ImmutableList()
    bool_0 = immutable_list_0.reduce(immutable_list_0, immutable_list_0)
    immutable_list_0.filter(bool_0)


def test_case_14():
    immutable_list_0 = module_0.ImmutableList()


def test_case_15():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.__len__()
    str_0 = immutable_list_0.__str__()
    var_1 = immutable_list_0.find(var_0)
    immutable_list_0.filter(var_0)


def test_case_16():
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(bool_0, is_empty=bool_0)
    var_0 = immutable_list_0.append(immutable_list_0)
    immutable_list_0.find(bool_0)


def test_case_17():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.__len__()
    immutable_list_1 = immutable_list_0.unshift(var_0)
    var_1 = immutable_list_0.find(immutable_list_1)
    immutable_list_2 = immutable_list_1.append(immutable_list_0)
    immutable_list_0.filter(var_0)


def test_case_18():
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(bool_0, is_empty=bool_0)
    immutable_list_1 = immutable_list_0.append(immutable_list_0)
    var_0 = immutable_list_1.__len__()
    immutable_list_0.find(bool_0)


def test_case_19():
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(tail=bool_0)
    immutable_list_1 = module_0.ImmutableList()
    var_0 = immutable_list_0.reduce(immutable_list_1, immutable_list_0)
    var_1 = immutable_list_0.find(var_0)
    bool_1 = immutable_list_0.__eq__(immutable_list_1)
    var_0.filter(var_0)


def test_case_20():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    immutable_list_0 = module_0.ImmutableList(tail=none_type_0)
    immutable_list_1 = immutable_list_0.unshift(list_0)
    immutable_list_1.reduce(none_type_0, none_type_0)


def test_case_21():
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(bool_0, is_empty=bool_0)
    immutable_list_0.find(bool_0)


def test_case_22():
    immutable_list_0 = module_0.ImmutableList()
    bytes_0 = b"O\x0e~#\x053R*\x17\xf8\x0c\xfd\xd9\xad3\xef"
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    bool_0 = immutable_list_0.__eq__(immutable_list_1)
    var_0 = immutable_list_0.find(immutable_list_0)
    immutable_list_0.filter(bytes_0)


def test_case_23():
    immutable_list_0 = module_0.ImmutableList()
    bytes_0 = b"O\x0e~#\x053R*\x17\xf8\x0c\xfd\xd9\xad3\xef"
    var_0 = immutable_list_0.to_list()
    str_0 = var_0.__str__()
    var_1 = immutable_list_0.find(var_0)
    immutable_list_1 = module_0.ImmutableList(bytes_0)
    immutable_list_2 = var_0.append(immutable_list_1)
    immutable_list_3 = immutable_list_1.__add__(immutable_list_0)
    immutable_list_1.reduce(var_0, str_0)
