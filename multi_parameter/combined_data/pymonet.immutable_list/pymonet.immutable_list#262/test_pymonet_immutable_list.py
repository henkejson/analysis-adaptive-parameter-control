# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.immutable_list as module_0
import builtins as module_1


def test_case_0():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(is_empty=none_type_0)
    bool_0 = immutable_list_0.__eq__(immutable_list_0)
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_1.find(bool_0)


def test_case_1():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(is_empty=none_type_0)
    bool_0 = immutable_list_0.__eq__(none_type_0)
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_1.find(bool_0)


def test_case_2():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_1.find(immutable_list_0)


def test_case_3():
    none_type_0 = None
    none_type_1 = None
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.append(none_type_1)
    immutable_list_1.__add__(none_type_0)


def test_case_4():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    var_0 = immutable_list_0.__len__()
    immutable_list_1.find(var_0)


def test_case_5():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    var_0 = immutable_list_1.__len__()
    var_1 = immutable_list_0.__len__()
    immutable_list_1.find(var_1)


def test_case_6():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    var_0 = immutable_list_0.to_list()
    immutable_list_1.find(immutable_list_0)


def test_case_7():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(is_empty=none_type_0)
    bool_0 = immutable_list_0.__eq__(immutable_list_0)
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    str_0 = immutable_list_1.to_list()
    var_0 = immutable_list_0.reduce(immutable_list_0, immutable_list_1)
    immutable_list_1.find(var_0)


def test_case_8():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = module_0.ImmutableList()
    none_type_0 = None
    immutable_list_1.map(none_type_0)


def test_case_9():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(none_type_0)
    immutable_list_1 = module_0.ImmutableList()
    str_0 = immutable_list_1.__str__()
    immutable_list_2 = immutable_list_1.__add__(immutable_list_1)
    str_1 = immutable_list_2.__str__()
    str_2 = immutable_list_2.__str__()
    str_3 = immutable_list_2.__str__()
    immutable_list_3 = immutable_list_1.append(immutable_list_2)
    immutable_list_4 = immutable_list_1.__add__(immutable_list_1)
    var_0 = immutable_list_4.to_list()
    immutable_list_4.map(str_1)


def test_case_10():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_0.filter(immutable_list_0)


def test_case_11():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.__add__(immutable_list_0)
    var_0 = immutable_list_0.find(immutable_list_1)
    immutable_list_2 = immutable_list_1.__add__(immutable_list_0)


def test_case_12():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    var_0 = immutable_list_0.reduce(immutable_list_0, immutable_list_1)
    immutable_list_1.find(var_0)


def test_case_13():
    set_0 = set()
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(is_empty=none_type_0)
    immutable_list_1 = module_0.ImmutableList(tail=none_type_0)
    immutable_list_2 = module_0.ImmutableList(is_empty=none_type_0)
    var_0 = immutable_list_1.to_list()
    var_1 = immutable_list_1.find(set_0)
    immutable_list_3 = immutable_list_1.unshift(set_0)
    var_2 = immutable_list_2.__len__()
    immutable_list_4 = immutable_list_3.unshift(none_type_0)
    immutable_list_5 = module_0.ImmutableList()
    var_3 = immutable_list_4.__len__()
    str_0 = "\n        Method executes a reducer function\n        on each element of the array, resulting in a single output value.\n\n        :param fn: function to call with ImmutableList value\n        :type fn: Function(A, B) -> A\n        :returns: A\n        "
    immutable_list_3.reduce(var_0, str_0)


def test_case_14():
    immutable_list_0 = module_0.ImmutableList()


def test_case_15():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.find(immutable_list_0)
    var_1 = immutable_list_0.reduce(var_0, var_0)
    str_0 = immutable_list_0.__str__()
    var_2 = immutable_list_0.__len__()


def test_case_16():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.append(immutable_list_0)
    immutable_list_2 = module_0.ImmutableList(
        immutable_list_1, is_empty=immutable_list_1
    )
    immutable_list_2.find(immutable_list_1)


def test_case_17():
    immutable_list_0 = module_0.ImmutableList()
    none_type_0 = None
    immutable_list_1 = module_0.ImmutableList(immutable_list_0, is_empty=none_type_0)
    bool_0 = immutable_list_1.__len__()
    immutable_list_1.find(bool_0)


def test_case_18():
    none_type_0 = None
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(is_empty=bool_0)
    immutable_list_1 = immutable_list_0.append(none_type_0)
    immutable_list_2 = module_0.ImmutableList(none_type_0)
    var_0 = immutable_list_2.__len__()
    immutable_list_3 = module_0.ImmutableList(tail=none_type_0)
    immutable_list_4 = immutable_list_3.append(none_type_0)
    str_0 = "Lazy[T, W]"
    immutable_list_5 = module_0.ImmutableList(str_0, is_empty=str_0)
    var_1 = immutable_list_5.to_list()
    var_2 = immutable_list_5.__len__()
    immutable_list_5.reduce(var_2, none_type_0)


def test_case_19():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = module_0.ImmutableList(is_empty=immutable_list_0)
    immutable_list_2 = immutable_list_1.unshift(none_type_0)
    var_0 = immutable_list_2.__len__()
    var_1 = immutable_list_2.__len__()
    var_2 = immutable_list_2.reduce(var_0, var_0)
    object_0 = module_1.object()
    immutable_list_3 = immutable_list_2.append(var_1)
    var_3 = immutable_list_2.find(none_type_0)
    var_4 = immutable_list_2.to_list()
    immutable_list_2.filter(var_4)


def test_case_20():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = module_0.ImmutableList(
        immutable_list_0, is_empty=immutable_list_0
    )
    bool_0 = immutable_list_1.__eq__(immutable_list_0)
    immutable_list_1.find(bool_0)


def test_case_21():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(is_empty=none_type_0)
    bool_0 = immutable_list_0.__eq__(none_type_0)
    bool_1 = immutable_list_0.__eq__(immutable_list_0)
    immutable_list_1 = immutable_list_0.unshift(none_type_0)
    bool_2 = immutable_list_0.__eq__(immutable_list_1)
    immutable_list_2 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_2.find(bool_1)


def test_case_22():
    none_type_0 = None
    bytes_0 = b"y\xb6\x18Q*\xa8\xcbG>o\x98"
    immutable_list_0 = module_0.ImmutableList(bytes_0, is_empty=bytes_0)
    immutable_list_0.find(none_type_0)
