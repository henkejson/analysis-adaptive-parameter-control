# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.immutable_list as module_0


def test_case_0():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = module_0.ImmutableList(immutable_list_0)
    bool_0 = immutable_list_0.__eq__(immutable_list_0)
    immutable_list_1.find(immutable_list_1)


def test_case_1():
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(is_empty=bool_0)
    immutable_list_1 = immutable_list_0.unshift(bool_0)
    bool_1 = immutable_list_0.__eq__(bool_0)
    immutable_list_1.find(bool_0)


def test_case_2():
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(is_empty=bool_0)
    immutable_list_1 = immutable_list_0.unshift(bool_0)
    immutable_list_1.find(bool_0)


def test_case_3():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.to_list()
    str_0 = "\n        If Maybe is empty return new empty Maybe, in other case\n        takes mapper function and returns result of mapper.\n\n        :param mapper: function to call with Maybe.value\n        :type mapper: Function(A) -> Maybe[B]\n        :returns: Maybe[B | None]\n        "
    immutable_list_1 = module_0.ImmutableList()
    immutable_list_1.__add__(str_0)


def test_case_4():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.__len__()
    immutable_list_0.filter(var_0)


def test_case_5():
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(is_empty=bool_0)
    immutable_list_1 = immutable_list_0.unshift(bool_0)
    bool_1 = immutable_list_1.__len__()
    immutable_list_1.find(bool_0)


def test_case_6():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.__len__()
    str_0 = var_0.__str__()
    str_1 = immutable_list_0.__str__()


def test_case_7():
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(is_empty=bool_0)
    immutable_list_1 = immutable_list_0.unshift(bool_0)
    str_0 = immutable_list_1.__str__()
    immutable_list_1.find(bool_0)


def test_case_8():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.__len__()
    bool_0 = True
    immutable_list_1 = module_0.ImmutableList(is_empty=bool_0)
    immutable_list_1.map(var_0)


def test_case_9():
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(is_empty=bool_0)
    bool_1 = True
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    none_type_0 = None
    immutable_list_2 = immutable_list_1.unshift(bool_1)
    var_0 = immutable_list_0.to_list()
    dict_0 = {}
    immutable_list_3 = module_0.ImmutableList(bool_1, is_empty=dict_0)
    immutable_list_4 = immutable_list_3.unshift(bool_1)
    immutable_list_4.map(none_type_0)


def test_case_10():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_0.filter(immutable_list_0)


def test_case_11():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.find(immutable_list_0)
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_1.filter(var_0)


def test_case_12():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.find(immutable_list_0)


def test_case_13():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(none_type_0)
    var_0 = immutable_list_0.reduce(none_type_0, immutable_list_0)
    var_1 = immutable_list_0.find(immutable_list_0)
    immutable_list_0.filter(var_1)


def test_case_14():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(is_empty=none_type_0)
    immutable_list_1 = module_0.ImmutableList(none_type_0)
    var_0 = immutable_list_1.to_list()
    bool_0 = immutable_list_1.__eq__(immutable_list_1)
    bool_1 = immutable_list_1.__eq__(immutable_list_1)
    immutable_list_2 = var_0.append(bool_1)
    var_1 = immutable_list_0.reduce(var_0, immutable_list_2)
    immutable_list_3 = immutable_list_1.unshift(immutable_list_2)
    bool_2 = immutable_list_3.__eq__(none_type_0)
    var_2 = immutable_list_1.find(none_type_0)
    var_3 = immutable_list_1.__len__()
    immutable_list_4 = module_0.ImmutableList(immutable_list_1, is_empty=var_0)
    immutable_list_4.reduce(var_3, none_type_0)


def test_case_15():
    immutable_list_0 = module_0.ImmutableList()


def test_case_16():
    float_0 = 3104.480098
    immutable_list_0 = module_0.ImmutableList(float_0)
    immutable_list_1 = immutable_list_0.append(float_0)
    immutable_list_1.find(immutable_list_0)


def test_case_17():
    complex_0 = 4117.8613 + 243.934j
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(complex_0)
    immutable_list_2 = immutable_list_1.append(complex_0)
    immutable_list_1.find(immutable_list_1)


def test_case_18():
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(bool_0)
    var_0 = immutable_list_0.__len__()
    immutable_list_0.find(immutable_list_0)


def test_case_19():
    bytes_0 = b"\xdc\xfb\xe4a\xc9\xa0#\x82\n\xe2\x17\x93"
    immutable_list_0 = module_0.ImmutableList(bytes_0)
    immutable_list_0.find(immutable_list_0)


def test_case_20():
    bytes_0 = b""
    none_type_0 = None
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(is_empty=none_type_0)
    var_0 = immutable_list_0.__len__()
    immutable_list_1 = module_0.ImmutableList(var_0)
    immutable_list_2 = immutable_list_1.append(bytes_0)
    immutable_list_3 = immutable_list_2.append(none_type_0)
    immutable_list_3.reduce(bytes_0, bool_0)


def test_case_21():
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(bool_0)
    immutable_list_1 = immutable_list_0.append(bool_0)
    bool_1 = immutable_list_0.__eq__(immutable_list_1)
    immutable_list_0.find(immutable_list_0)


def test_case_22():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = module_0.ImmutableList(immutable_list_0)
    bool_0 = immutable_list_0.__eq__(immutable_list_1)
    immutable_list_1.find(bool_0)
