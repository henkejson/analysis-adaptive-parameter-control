# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.immutable_list as module_0


def test_case_0():
    immutable_list_0 = module_0.ImmutableList()
    bool_0 = immutable_list_0.__eq__(immutable_list_0)
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_1.find(immutable_list_0)


def test_case_1():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    none_type_0 = None
    bool_0 = immutable_list_0.__eq__(none_type_0)
    immutable_list_1.find(immutable_list_0)


def test_case_2():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_1.find(immutable_list_0)


def test_case_3():
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(is_empty=bool_0)
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    var_0 = immutable_list_0.find(bool_0)
    immutable_list_1.__add__(var_0)


def test_case_4():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    var_0 = immutable_list_1.__len__()
    immutable_list_1.find(var_0)


def test_case_5():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.to_list()


def test_case_6():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    var_0 = immutable_list_1.to_list()
    immutable_list_1.find(var_0)


def test_case_7():
    none_type_0 = None
    none_type_1 = None
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(none_type_1)
    immutable_list_2 = module_0.ImmutableList(is_empty=immutable_list_1)
    immutable_list_2.map(none_type_0)


def test_case_8():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    list_0 = [dict_0, bool_0, bool_0, dict_0]
    str_0 = "Ao\t^J'eVD6<\\\nxUvT"
    immutable_list_0 = module_0.ImmutableList(is_empty=str_0)
    var_0 = immutable_list_0.find(list_0)
    bytes_0 = b"\xb5\x89K\xce&"
    tuple_0 = ()
    float_0 = 2351.0
    immutable_list_1 = module_0.ImmutableList(is_empty=float_0)
    immutable_list_2 = immutable_list_1.unshift(tuple_0)
    immutable_list_2.map(bytes_0)


def test_case_9():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_0.filter(immutable_list_0)


def test_case_10():
    none_type_0 = None
    str_0 = "\n        Transform Lazy into successful Validation with constructor_fn result.\n\n        :returns: successfull Validation monad with previous value\n        :rtype: Validation[A, []]\n        "
    immutable_list_0 = module_0.ImmutableList(tail=str_0)
    var_0 = immutable_list_0.reduce(none_type_0, none_type_0)
    bool_0 = immutable_list_0.__eq__(none_type_0)
    bytes_0 = b"i\xba\xe7\x82!5 \xf5\xfcj\xfe"
    immutable_list_1 = module_0.ImmutableList(is_empty=bytes_0)
    immutable_list_2 = immutable_list_1.append(bytes_0)
    none_type_1 = None
    var_1 = immutable_list_2.find(none_type_1)
    bool_1 = immutable_list_1.__eq__(immutable_list_2)
    immutable_list_0.filter(var_0)


def test_case_11():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    var_0 = immutable_list_0.to_list()
    var_1 = immutable_list_0.find(var_0)
    immutable_list_1.find(immutable_list_1)


def test_case_12():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    var_0 = immutable_list_0.reduce(immutable_list_0, immutable_list_1)
    immutable_list_1.find(var_0)


def test_case_13():
    bool_0 = True
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(bool_0, none_type_0)
    str_0 = immutable_list_0.__str__()
    var_0 = immutable_list_0.__len__()
    immutable_list_0.reduce(var_0, none_type_0)


def test_case_14():
    immutable_list_0 = module_0.ImmutableList()


def test_case_15():
    immutable_list_0 = module_0.ImmutableList()
    str_0 = immutable_list_0.__str__()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_1.find(immutable_list_0)


def test_case_16():
    immutable_list_0 = module_0.ImmutableList()
    bool_0 = immutable_list_0.__eq__(immutable_list_0)
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_2 = immutable_list_1.append(immutable_list_0)
    immutable_list_1.find(immutable_list_2)


def test_case_17():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    var_0 = immutable_list_1.__add__(immutable_list_1)
    immutable_list_1.find(var_0)


def test_case_18():
    str_0 = "\n        Transform Lazy into successful Validation with constructor_fn result.\n\n        :returns: successfull Validation monad with previous value\n        :rtype: Validation[A, []]\n        "
    immutable_list_0 = module_0.ImmutableList(tail=str_0)
    bool_0 = immutable_list_0.__eq__(immutable_list_0)
    immutable_list_1 = module_0.ImmutableList(bool_0, is_empty=bool_0)
    var_0 = immutable_list_1.__len__()
    immutable_list_1.find(bool_0)


def test_case_19():
    int_0 = -223
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(tail=none_type_0, is_empty=int_0)
    immutable_list_1 = immutable_list_0.unshift(int_0)
    var_0 = immutable_list_1.to_list()
    immutable_list_1.reduce(var_0, int_0)


def test_case_20():
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(is_empty=bool_0)
    bool_1 = False
    none_type_0 = None
    immutable_list_1 = module_0.ImmutableList(tail=none_type_0)
    immutable_list_2 = immutable_list_1.append(bool_1)
    var_0 = immutable_list_1.__len__()
    var_1 = immutable_list_2.find(var_0)
    bool_2 = immutable_list_2.__eq__(immutable_list_1)
    immutable_list_3 = immutable_list_1.append(var_1)
    var_2 = immutable_list_2.__len__()
    immutable_list_4 = module_0.ImmutableList()
    str_0 = var_2.__str__()
    immutable_list_5 = immutable_list_1.append(str_0)


def test_case_21():
    str_0 = "\n        Transform Lazy into successful Validation with constructor_fn result.\n\n        :returns: successfull Validation monad with previous value\n        :rtype: Validation[A, []]\n        "
    immutable_list_0 = module_0.ImmutableList(tail=str_0)
    bool_0 = immutable_list_0.__eq__(immutable_list_0)
    immutable_list_1 = module_0.ImmutableList(bool_0, is_empty=bool_0)
    immutable_list_1.find(bool_0)


def test_case_22():
    bytes_0 = b"IO>\xdd\xa1\xc1\t\xde\x14!\x8a\x15j\x8e\xfd\x7f"
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_2 = module_0.ImmutableList(tail=immutable_list_1)
    var_0 = immutable_list_0.reduce(bytes_0, bytes_0)
    immutable_list_3 = immutable_list_0.unshift(bytes_0)
    bool_0 = immutable_list_0.__eq__(immutable_list_1)
    immutable_list_3.find(var_0)
