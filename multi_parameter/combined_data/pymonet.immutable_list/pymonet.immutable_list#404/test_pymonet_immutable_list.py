# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.immutable_list as module_0


def test_case_0():
    int_0 = 1070
    immutable_list_0 = module_0.ImmutableList(int_0)
    bool_0 = immutable_list_0.__eq__(immutable_list_0)
    var_0 = immutable_list_0.to_list()
    immutable_list_0.find(immutable_list_0)


def test_case_1():
    set_0 = set()
    immutable_list_0 = module_0.ImmutableList()
    bool_0 = immutable_list_0.__eq__(set_0)
    immutable_list_1 = module_0.ImmutableList()
    none_type_0 = None
    var_0 = immutable_list_1.reduce(none_type_0, immutable_list_1)
    var_1 = immutable_list_1.find(var_0)
    var_2 = immutable_list_1.__len__()
    var_3 = var_0.__len__()


def test_case_2():
    str_0 = "?{]y0D#KI[@6pPx"
    immutable_list_0 = module_0.ImmutableList(tail=str_0)
    immutable_list_1 = immutable_list_0.unshift(str_0)
    immutable_list_1.find(immutable_list_0)


def test_case_3():
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.append(bool_0)
    immutable_list_1.__add__(bool_0)


def test_case_4():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.__len__()


def test_case_5():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(none_type_0, none_type_0)
    var_0 = immutable_list_0.to_list()


def test_case_6():
    str_0 = "?{]y0D#KI[@6pPx"
    immutable_list_0 = module_0.ImmutableList(tail=str_0)
    immutable_list_1 = immutable_list_0.unshift(str_0)
    immutable_list_0.to_list()


def test_case_7():
    int_0 = 1
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.reduce(immutable_list_0, int_0)
    var_1 = immutable_list_0.reduce(var_0, int_0)
    immutable_list_0.map(var_1)


def test_case_8():
    immutable_list_0 = module_0.ImmutableList()
    str_0 = immutable_list_0.__str__()
    immutable_list_1 = immutable_list_0.append(immutable_list_0)
    none_type_0 = None
    immutable_list_1.map(none_type_0)


def test_case_9():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_0.filter(immutable_list_0)


def test_case_10():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.__len__()
    var_1 = immutable_list_0.find(var_0)
    immutable_list_0.filter(immutable_list_0)


def test_case_11():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(none_type_0, none_type_0)
    str_0 = "\n        Returns True when errors list are not empty.\n\n        :returns: True for empty errors not list\n        :rtype: Boolean\n        "
    none_type_1 = None
    var_0 = immutable_list_0.reduce(none_type_1, str_0)
    immutable_list_0.filter(var_0)


def test_case_12():
    dict_0 = {}
    immutable_list_0 = module_0.ImmutableList(dict_0)
    int_0 = -112
    bool_0 = False
    immutable_list_1 = module_0.ImmutableList(int_0, is_empty=bool_0)
    immutable_list_1.reduce(int_0, dict_0)


def test_case_13():
    immutable_list_0 = module_0.ImmutableList()


def test_case_14():
    bytes_0 = b"\x90;"
    immutable_list_0 = module_0.ImmutableList(bytes_0)
    str_0 = immutable_list_0.__str__()
    immutable_list_0.find(bytes_0)


def test_case_15():
    none_type_0 = None
    int_0 = 1070
    immutable_list_0 = module_0.ImmutableList(int_0)
    immutable_list_1 = immutable_list_0.append(none_type_0)
    immutable_list_1.find(immutable_list_1)


def test_case_16():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.append(immutable_list_0)
    immutable_list_2 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_3 = immutable_list_1.append(immutable_list_1)
    bool_0 = immutable_list_2.__eq__(immutable_list_3)
    var_0 = immutable_list_0.__len__()
    immutable_list_2.find(immutable_list_1)


def test_case_17():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = module_0.ImmutableList(immutable_list_0, immutable_list_0)
    immutable_list_2 = immutable_list_0.unshift(immutable_list_0)
    var_0 = immutable_list_2.__len__()
    bool_0 = immutable_list_2.__eq__(immutable_list_1)
    var_1 = immutable_list_0.find(var_0)
    str_0 = immutable_list_2.__str__()
    immutable_list_2.filter(var_1)


def test_case_18():
    bytes_0 = b"\x9e\x90;\xbd"
    immutable_list_0 = module_0.ImmutableList(bytes_0)
    immutable_list_0.find(bytes_0)


def test_case_19():
    bytes_0 = b"\xb6\x9e\x90{\xbd"
    immutable_list_0 = module_0.ImmutableList(bytes_0)
    var_0 = immutable_list_0.__len__()
    immutable_list_0.find(bytes_0)


def test_case_20():
    str_0 = "\n        Returns True when errors list are not empty.\n\n        :returns: True for empty errors not list\n        :rtype: Boolean\n        "
    immutable_list_0 = module_0.ImmutableList()
    bool_0 = immutable_list_0.__eq__(immutable_list_0)
    none_type_0 = None
    var_0 = immutable_list_0.find(none_type_0)
    var_1 = immutable_list_0.to_list()
    bool_1 = var_1.__eq__(str_0)
    immutable_list_1 = immutable_list_0.append(str_0)
    immutable_list_2 = immutable_list_0.unshift(str_0)
    immutable_list_3 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_4 = module_0.ImmutableList(tail=immutable_list_0)
    immutable_list_5 = immutable_list_2.unshift(var_1)
    bool_2 = immutable_list_4.__eq__(immutable_list_1)
    str_1 = immutable_list_1.__str__()
    var_2 = immutable_list_3.__len__()
    int_0 = -1573
    var_3 = immutable_list_4.find(int_0)
    immutable_list_6 = module_0.ImmutableList(var_0)
    immutable_list_7 = module_0.ImmutableList(var_1)
    immutable_list_8 = module_0.ImmutableList(tail=none_type_0)
    immutable_list_3.reduce(var_1, immutable_list_0)


def test_case_21():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.__add__(immutable_list_0)
    immutable_list_2 = immutable_list_0.unshift(immutable_list_1)
    immutable_list_3 = immutable_list_0.unshift(immutable_list_0)
    bool_0 = immutable_list_3.__eq__(immutable_list_2)
    var_0 = immutable_list_0.__len__()
    immutable_list_3.find(immutable_list_1)


def test_case_22():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.__add__(immutable_list_0)
    immutable_list_2 = immutable_list_0.unshift(immutable_list_1)
    immutable_list_3 = immutable_list_0.unshift(immutable_list_0)
    var_0 = immutable_list_3.__len__()
    bool_0 = immutable_list_3.__eq__(immutable_list_2)
    immutable_list_3.find(immutable_list_1)
