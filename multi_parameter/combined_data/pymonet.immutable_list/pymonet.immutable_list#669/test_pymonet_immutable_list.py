# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import builtins as module_0
import pymonet.immutable_list as module_1


def test_case_0():
    object_0 = module_0.object()
    immutable_list_0 = module_1.ImmutableList()
    bool_0 = immutable_list_0.__eq__(object_0)


def test_case_1():
    immutable_list_0 = module_1.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_1.find(immutable_list_1)


def test_case_2():
    str_0 = "\n    In mathematics and computer science, currying is the technique of translating the evaluation of a function.\n    It that takes multiple arguments (or a tuple of arguments) into evaluating a sequence of functions.\n    each with a single argument.\n    "
    immutable_list_0 = module_1.ImmutableList(str_0)
    immutable_list_1 = immutable_list_0.append(str_0)
    str_1 = immutable_list_0.__str__()
    immutable_list_1.__add__(str_0)


def test_case_3():
    immutable_list_0 = module_1.ImmutableList()
    var_0 = immutable_list_0.__len__()
    var_0.filter(var_0)


def test_case_4():
    tuple_0 = ()
    int_0 = 3299
    immutable_list_0 = module_1.ImmutableList(int_0, is_empty=int_0)
    var_0 = immutable_list_0.__len__()
    immutable_list_0.filter(tuple_0)


def test_case_5():
    immutable_list_0 = module_1.ImmutableList()
    var_0 = immutable_list_0.to_list()
    immutable_list_0.filter(var_0)


def test_case_6():
    object_0 = module_0.object()
    immutable_list_0 = module_1.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(object_0)
    bool_0 = immutable_list_1.__eq__(immutable_list_0)
    str_0 = immutable_list_1.__str__()


def test_case_7():
    immutable_list_0 = module_1.ImmutableList()
    immutable_list_0.map(immutable_list_0)


def test_case_8():
    immutable_list_0 = module_1.ImmutableList()
    immutable_list_0.filter(immutable_list_0)


def test_case_9():
    none_type_0 = None
    immutable_list_0 = module_1.ImmutableList()
    bool_0 = False
    immutable_list_1 = module_1.ImmutableList(is_empty=bool_0)
    immutable_list_2 = immutable_list_1.unshift(none_type_0)
    var_0 = immutable_list_1.find(none_type_0)
    immutable_list_2.filter(bool_0)


def test_case_10():
    none_type_0 = None
    immutable_list_0 = module_1.ImmutableList()
    var_0 = immutable_list_0.find(immutable_list_0)
    immutable_list_0.filter(none_type_0)


def test_case_11():
    immutable_list_0 = module_1.ImmutableList()
    immutable_list_1 = module_1.ImmutableList(immutable_list_0)
    immutable_list_1.find(immutable_list_1)


def test_case_12():
    complex_0 = -1129 - 362.1496j
    immutable_list_0 = module_1.ImmutableList()
    var_0 = immutable_list_0.reduce(complex_0, immutable_list_0)
    immutable_list_1 = module_1.ImmutableList(immutable_list_0)
    immutable_list_1.find(immutable_list_1)


def test_case_13():
    str_0 = "7h6sm3ODCL\x0co("
    bool_0 = True
    bool_1 = True
    tuple_0 = ()
    immutable_list_0 = module_1.ImmutableList(bool_1, is_empty=tuple_0)
    immutable_list_0.reduce(str_0, bool_0)


def test_case_14():
    immutable_list_0 = module_1.ImmutableList()


def test_case_15():
    immutable_list_0 = module_1.ImmutableList()
    immutable_list_1 = immutable_list_0.append(immutable_list_0)
    immutable_list_2 = module_1.ImmutableList(immutable_list_0)
    immutable_list_2.find(immutable_list_2)


def test_case_16():
    immutable_list_0 = module_1.ImmutableList()
    immutable_list_1 = immutable_list_0.__add__(immutable_list_0)
    immutable_list_2 = immutable_list_1.append(immutable_list_0)
    immutable_list_3 = module_1.ImmutableList(immutable_list_0)
    immutable_list_3.find(immutable_list_3)


def test_case_17():
    none_type_0 = None
    bool_0 = False
    str_0 = "\n        Transform Lazy into successful Validation with constructor_fn result.\n\n        :returns: successfull Validation monad with previous value\n        :rtype: Validation[A, []]\n        "
    immutable_list_0 = module_1.ImmutableList(is_empty=str_0)
    immutable_list_1 = immutable_list_0.unshift(bool_0)
    immutable_list_1.reduce(none_type_0, none_type_0)


def test_case_18():
    immutable_list_0 = module_1.ImmutableList()
    immutable_list_1 = immutable_list_0.__add__(immutable_list_0)
    var_0 = immutable_list_0.reduce(immutable_list_0, immutable_list_0)
    immutable_list_2 = immutable_list_0.__add__(immutable_list_0)
    str_0 = immutable_list_0.__str__()
    immutable_list_2.map(var_0)


def test_case_19():
    immutable_list_0 = module_1.ImmutableList()
    immutable_list_1 = module_1.ImmutableList(immutable_list_0)
    none_type_0 = None
    immutable_list_2 = immutable_list_1.append(none_type_0)
    var_0 = immutable_list_2.__len__()
    immutable_list_1.find(immutable_list_0)


def test_case_20():
    none_type_0 = None
    bool_0 = False
    immutable_list_0 = module_1.ImmutableList(tail=none_type_0, is_empty=bool_0)
    bool_1 = immutable_list_0.__eq__(immutable_list_0)
    var_0 = immutable_list_0.to_list()
    immutable_list_1 = var_0.append(var_0)


def test_case_21():
    immutable_list_0 = module_1.ImmutableList()
    immutable_list_1 = module_1.ImmutableList(immutable_list_0)
    none_type_0 = None
    immutable_list_2 = immutable_list_1.append(none_type_0)
    bool_0 = immutable_list_1.__eq__(immutable_list_2)
    immutable_list_1.find(immutable_list_0)
