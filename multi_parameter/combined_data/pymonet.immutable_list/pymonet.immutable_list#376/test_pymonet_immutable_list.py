# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.immutable_list as module_0


def test_case_0():
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(bool_0, is_empty=bool_0)
    bool_1 = immutable_list_0.__eq__(immutable_list_0)
    immutable_list_0.find(bool_0)


def test_case_1():
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(bool_0, is_empty=bool_0)
    bool_1 = immutable_list_0.__eq__(bool_0)
    immutable_list_0.find(immutable_list_0)


def test_case_2():
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(bool_0, is_empty=bool_0)
    immutable_list_1 = immutable_list_0.__add__(immutable_list_0)
    immutable_list_0.find(immutable_list_0)


def test_case_3():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_0.__add__(none_type_0)


def test_case_4():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.__len__()
    immutable_list_0.filter(var_0)


def test_case_5():
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(bool_0, is_empty=bool_0)
    var_0 = immutable_list_0.__len__()
    immutable_list_0.find(var_0)


def test_case_6():
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(bool_0)
    var_0 = immutable_list_0.to_list()
    immutable_list_0.find(var_0)


def test_case_7():
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(bool_0, is_empty=bool_0)
    immutable_list_1 = immutable_list_0.__add__(immutable_list_0)
    str_0 = immutable_list_1.__str__()
    var_0 = immutable_list_1.__len__()
    immutable_list_0.find(var_0)


def test_case_8():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.__len__()
    immutable_list_0.map(immutable_list_0)


def test_case_9():
    str_0 = "C>~u]ssV4Xx\t$U+cA^p"
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    immutable_list_0 = module_0.ImmutableList(tail=str_0, is_empty=set_0)
    var_0 = immutable_list_0.find(bool_0)
    bool_1 = True
    immutable_list_1 = module_0.ImmutableList()
    immutable_list_2 = immutable_list_1.__add__(immutable_list_1)
    var_1 = immutable_list_1.find(bool_1)
    immutable_list_2.map(var_0)


def test_case_10():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_0.filter(immutable_list_0)


def test_case_11():
    immutable_list_0 = module_0.ImmutableList()
    float_0 = -3291.4
    var_0 = immutable_list_0.find(float_0)
    immutable_list_1 = module_0.ImmutableList(float_0, float_0)
    immutable_list_1.find(float_0)


def test_case_12():
    float_0 = -3291.4
    immutable_list_0 = module_0.ImmutableList(float_0, float_0)
    immutable_list_0.find(float_0)


def test_case_13():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList()
    float_0 = -1796.4
    immutable_list_1 = module_0.ImmutableList(float_0, float_0)
    var_0 = immutable_list_0.reduce(none_type_0, immutable_list_1)
    immutable_list_1.find(float_0)


def test_case_14():
    bytes_0 = b"#\xe0\xa1cc\x1f\x85"
    immutable_list_0 = module_0.ImmutableList(bytes_0)
    var_0 = immutable_list_0.__len__()
    immutable_list_1 = var_0.__add__(bytes_0)
    immutable_list_0.reduce(var_0, var_0)


def test_case_15():
    immutable_list_0 = module_0.ImmutableList()


def test_case_16():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.__len__()
    str_0 = immutable_list_0.__str__()
    immutable_list_0.filter(var_0)


def test_case_17():
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(bool_0, is_empty=bool_0)
    immutable_list_1 = immutable_list_0.append(bool_0)
    immutable_list_0.find(immutable_list_0)


def test_case_18():
    float_0 = 595.1
    immutable_list_0 = module_0.ImmutableList(float_0, float_0)
    immutable_list_1 = immutable_list_0.unshift(float_0)
    immutable_list_0.find(immutable_list_0)


def test_case_19():
    float_0 = 389.0
    immutable_list_0 = module_0.ImmutableList(float_0, float_0)
    var_0 = immutable_list_0.__add__(immutable_list_0)
    immutable_list_0.find(var_0)


def test_case_20():
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(bool_0, is_empty=bool_0)
    immutable_list_1 = immutable_list_0.__add__(immutable_list_0)
    var_0 = immutable_list_1.__len__()
    immutable_list_0.find(var_0)


def test_case_21():
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(bool_0, is_empty=bool_0)
    immutable_list_0.find(bool_0)


def test_case_22():
    str_0 = "\n    In mathematics and computer science, currying is the technique of translating the evaluation of a function.\n    It that takes multiple arguments (or a tuple of arguments) into evaluating a sequence of functions.\n    each with a single argument.\n    "
    set_0 = {str_0}
    list_0 = []
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(list_0)
    var_0 = immutable_list_0.find(str_0)
    bool_0 = immutable_list_1.__eq__(set_0)
    immutable_list_1.reduce(var_0, immutable_list_1)


def test_case_23():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.__len__()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_1.filter(immutable_list_0)


def test_case_24():
    float_0 = 389.0
    immutable_list_0 = module_0.ImmutableList(float_0, float_0)
    immutable_list_1 = module_0.ImmutableList(is_empty=float_0)
    bool_0 = immutable_list_1.__eq__(immutable_list_0)
    immutable_list_0.find(immutable_list_1)


def test_case_25():
    float_0 = 389.0
    immutable_list_0 = module_0.ImmutableList(float_0, float_0)
    immutable_list_1 = immutable_list_0.__add__(immutable_list_0)
    bool_0 = immutable_list_1.__eq__(immutable_list_0)
    immutable_list_0.find(immutable_list_1)
