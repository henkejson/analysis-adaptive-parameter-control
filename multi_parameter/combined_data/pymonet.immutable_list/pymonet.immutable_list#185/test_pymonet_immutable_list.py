# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.immutable_list as module_0


def test_case_0():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = module_0.ImmutableList(immutable_list_0)
    bool_0 = immutable_list_1.__eq__(immutable_list_0)
    immutable_list_1.find(immutable_list_1)


def test_case_1():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_1.find(immutable_list_1)


def test_case_2():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(none_type_0)
    immutable_list_2 = immutable_list_1.__add__(immutable_list_1)
    str_0 = immutable_list_0.__str__()
    immutable_list_3 = immutable_list_1.append(str_0)
    bool_0 = immutable_list_3.__eq__(str_0)
    var_0 = immutable_list_0.to_list()
    immutable_list_1.__add__(str_0)


def test_case_3():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(is_empty=none_type_0)
    var_0 = immutable_list_0.to_list()
    var_1 = immutable_list_0.__len__()


def test_case_4():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_2 = immutable_list_1.__len__()
    immutable_list_1.find(immutable_list_1)


def test_case_5():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.to_list()


def test_case_6():
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.append(bool_0)
    str_0 = immutable_list_1.__str__()
    immutable_list_2 = module_0.ImmutableList(is_empty=bool_0)


def test_case_7():
    str_0 = "\n        Return rejected Task with stored value argument.\n\n        :param value: value to store in Task\n        :type value: A\n        :returns: rejected Task\n        :rtype: Task[Function(reject, _) -> A]\n        "
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_0.map(str_0)


def test_case_8():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_0.filter(immutable_list_0)


def test_case_9():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.find(immutable_list_0)
    var_1 = immutable_list_0.find(immutable_list_0)
    var_2 = immutable_list_0.reduce(var_1, immutable_list_0)


def test_case_10():
    str_0 = "\n        Transform Box into Right either.\n\n        :returns: right Either monad with previous value\n        :rtype: Right[A]\n        "
    immutable_list_0 = module_0.ImmutableList(str_0, is_empty=str_0)
    none_type_0 = None
    bool_0 = False
    immutable_list_1 = module_0.ImmutableList(tail=none_type_0, is_empty=bool_0)
    immutable_list_2 = module_0.ImmutableList(tail=immutable_list_0, is_empty=str_0)
    immutable_list_0.reduce(str_0, str_0)


def test_case_11():
    immutable_list_0 = module_0.ImmutableList()


def test_case_12():
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(is_empty=bool_0)
    str_0 = immutable_list_0.__str__()


def test_case_13():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.append(immutable_list_0)
    immutable_list_2 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_2.find(immutable_list_2)


def test_case_14():
    immutable_list_0 = module_0.ImmutableList()
    bool_0 = immutable_list_0.__eq__(immutable_list_0)
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_1.find(immutable_list_1)


def test_case_15():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_2 = immutable_list_1.__add__(immutable_list_0)
    immutable_list_1.find(immutable_list_1)


def test_case_16():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = module_0.ImmutableList(immutable_list_0)
    bool_0 = immutable_list_1.__len__()
    immutable_list_1.find(immutable_list_1)


def test_case_17():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = module_0.ImmutableList(immutable_list_0)
    immutable_list_1.find(immutable_list_1)


def test_case_18():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.find(immutable_list_0)
    immutable_list_1 = immutable_list_0.append(immutable_list_0)
    immutable_list_2 = immutable_list_0.unshift(immutable_list_0)
    var_1 = immutable_list_0.to_list()
    immutable_list_1.filter(var_1)


def test_case_19():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_2 = immutable_list_0.__add__(immutable_list_0)
    bool_0 = immutable_list_1.__eq__(immutable_list_1)
    var_0 = immutable_list_0.__len__()
    bool_1 = True
    immutable_list_1.reduce(immutable_list_1, bool_1)


def test_case_20():
    str_0 = "\n        Take function and applied this function on current box value and returns mapped value.\n\n        :param mapper: mapper function\n        :type mapper: Function(A) -> B\n        :returns: new box with mapped value\n        :rtype: B\n        "
    bytes_0 = b"g\xd3\x80\x0cNJ6K\x0c\x0f"
    immutable_list_0 = module_0.ImmutableList()
    set_0 = {str_0, str_0, bytes_0}
    immutable_list_1 = immutable_list_0.append(bytes_0)
    bool_0 = immutable_list_1.__eq__(set_0)
    var_0 = immutable_list_1.find(bytes_0)
    immutable_list_2 = module_0.ImmutableList()
    bool_1 = immutable_list_1.__eq__(immutable_list_2)
    immutable_list_3 = immutable_list_2.unshift(immutable_list_1)
    immutable_list_3.find(var_0)


def test_case_21():
    dict_0 = {}
    immutable_list_0 = module_0.ImmutableList(is_empty=dict_0)
    list_0 = [immutable_list_0]
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    var_0 = immutable_list_0.to_list()
    immutable_list_2 = immutable_list_0.append(var_0)
    var_1 = immutable_list_2.find(dict_0)
    immutable_list_2.map(list_0)
