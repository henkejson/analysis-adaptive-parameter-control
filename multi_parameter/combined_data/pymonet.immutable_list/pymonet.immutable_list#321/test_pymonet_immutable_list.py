# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.immutable_list as module_0
import typing as module_1


def test_case_0():
    bytes_0 = b"\xe5\xbd\x89\xfb\xac\xfc "
    immutable_list_0 = module_0.ImmutableList(bytes_0)
    bool_0 = immutable_list_0.__eq__(immutable_list_0)
    immutable_list_0.find(bytes_0)


def test_case_1():
    bytes_0 = b"\xe5\xbd\x89\xfb\xac\xfc "
    immutable_list_0 = module_0.ImmutableList(bytes_0)
    bool_0 = immutable_list_0.__eq__(bytes_0)
    immutable_list_0.find(bytes_0)


def test_case_2():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.find(immutable_list_0)
    var_1 = immutable_list_0.__len__()
    immutable_list_1 = immutable_list_0.append(immutable_list_0)


def test_case_3():
    bytes_0 = b"\xbd\x8a\x19R\xa5\x8b!\x9f\xed"
    immutable_list_0 = module_0.ImmutableList(is_empty=bytes_0)
    immutable_list_0.__add__(bytes_0)


def test_case_4():
    str_0 = "\n    Perform right-to-left function composition.\n\n    :param value: argument of first applied function\n    :type value: Any\n    :param functions: list of functions to applied from right-to-left\n    :type functions: List[Function]\n    :returns: result of all functions\n    :rtype: Any\n    "
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(str_0, is_empty=bool_0)
    var_0 = immutable_list_0.__len__()


def test_case_5():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(none_type_0, none_type_0)
    var_0 = immutable_list_0.to_list()


def test_case_6():
    bool_0 = False
    generic_0 = module_1.Generic()
    immutable_list_0 = module_0.ImmutableList(is_empty=bool_0)
    immutable_list_1 = immutable_list_0.unshift(generic_0)
    var_0 = immutable_list_1.to_list()
    immutable_list_1.find(var_0)


def test_case_7():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.find(immutable_list_0)
    immutable_list_1 = immutable_list_0.unshift(var_0)
    immutable_list_0.map(immutable_list_0)


def test_case_8():
    bool_0 = False
    none_type_0 = None
    bool_1 = False
    immutable_list_0 = module_0.ImmutableList(none_type_0, bool_0, bool_1)
    immutable_list_0.map(bool_0)


def test_case_9():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_0.filter(immutable_list_0)


def test_case_10():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.find(immutable_list_0)
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_1.filter(immutable_list_1)


def test_case_11():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.find(immutable_list_0)
    immutable_list_0.filter(immutable_list_0)


def test_case_12():
    bytes_0 = b"\xe5\xbd\x89\xfb\xac\xfc "
    immutable_list_0 = module_0.ImmutableList(bytes_0)
    immutable_list_0.find(bytes_0)


def test_case_13():
    str_0 = "\n    Perform right-to-left function composition.\n\n    :param value: argument of first applied function\n    :type value: Any\n    :param functions: list of functions to applied from right-to-left\n    :type functions: List[Function]\n    :returns: result of all functions\n    :rtype: Any\n    "
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.find(str_0)
    immutable_list_1 = immutable_list_0.append(str_0)
    var_1 = immutable_list_1.reduce(str_0, str_0)
    immutable_list_0.filter(var_0)


def test_case_14():
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(is_empty=bool_0)
    var_0 = immutable_list_0.__len__()
    immutable_list_1 = immutable_list_0.unshift(bool_0)
    var_1 = immutable_list_0.__len__()
    bool_1 = immutable_list_0.__eq__(bool_0)
    bool_2 = immutable_list_0.__eq__(immutable_list_0)
    str_0 = immutable_list_0.__str__()
    immutable_list_1.reduce(immutable_list_1, bool_0)


def test_case_15():
    immutable_list_0 = module_0.ImmutableList()


def test_case_16():
    bytes_0 = b"!\x90\\}\x18\x7f=\x97$\x9e\xc3\r\xcc"
    immutable_list_0 = module_0.ImmutableList(bytes_0)
    str_0 = immutable_list_0.__str__()
    immutable_list_0.find(bytes_0)


def test_case_17():
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(is_empty=bool_0)
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_1.find(bool_0)


def test_case_18():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.reduce(immutable_list_0, immutable_list_0)
    bool_0 = True
    immutable_list_1 = module_0.ImmutableList(bool_0, bool_0)
    bool_1 = immutable_list_0.__eq__(immutable_list_1)
    immutable_list_1.find(var_0)


def test_case_19():
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(is_empty=bool_0)
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    var_0 = immutable_list_1.__len__()
    immutable_list_2 = immutable_list_1.append(bool_0)
    immutable_list_2.find(var_0)


def test_case_20():
    float_0 = 1699.0
    float_1 = 840.333
    immutable_list_0 = module_0.ImmutableList(float_1)
    immutable_list_0.reduce(float_0, float_0)


def test_case_21():
    none_type_0 = None
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(bool_0, bool_0)
    immutable_list_1 = immutable_list_0.__add__(immutable_list_0)
    bool_1 = immutable_list_1.__eq__(immutable_list_0)
    immutable_list_0.find(none_type_0)


def test_case_22():
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(is_empty=bool_0)
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    var_0 = immutable_list_1.__len__()
    immutable_list_1.find(var_0)
