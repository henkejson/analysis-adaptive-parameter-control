# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.immutable_list as module_0


def test_case_0():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    bool_0 = immutable_list_1.__eq__(immutable_list_1)
    immutable_list_1.find(immutable_list_1)


def test_case_1():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.reduce(immutable_list_0, immutable_list_0)
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    bool_0 = immutable_list_1.__eq__(var_0)
    immutable_list_1.find(var_0)


def test_case_2():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_1.find(immutable_list_0)


def test_case_3():
    none_type_0 = None
    none_type_1 = None
    immutable_list_0 = module_0.ImmutableList(none_type_1)
    immutable_list_0.__add__(none_type_0)


def test_case_4():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    var_0 = immutable_list_0.__len__()
    immutable_list_1.find(var_0)


def test_case_5():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    var_0 = immutable_list_1.__len__()
    immutable_list_1.find(var_0)


def test_case_6():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.to_list()
    var_1 = immutable_list_0.find(var_0)
    immutable_list_1 = module_0.ImmutableList()


def test_case_7():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.append(immutable_list_0)
    var_1 = var_0.to_list()
    immutable_list_1 = var_1.append(immutable_list_0)
    immutable_list_0.filter(var_0)


def test_case_8():
    immutable_list_0 = module_0.ImmutableList()
    bool_0 = immutable_list_0.__eq__(immutable_list_0)
    str_0 = immutable_list_0.__str__()
    bool_1 = immutable_list_0.__eq__(immutable_list_0)
    var_0 = immutable_list_0.find(immutable_list_0)
    var_1 = immutable_list_0.find(var_0)
    immutable_list_0.map(var_1)


def test_case_9():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_0.filter(immutable_list_0)


def test_case_10():
    int_0 = -353
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.find(int_0)
    immutable_list_1 = immutable_list_0.append(int_0)
    immutable_list_1.filter(var_0)


def test_case_11():
    str_0 = "\n        Take filterer function, when monad is successfully call filterer with monad value.\n        When filterer returns True method returns copy of monad, othercase\n        not successfully Try with previous value.\n\n        :params filterer: function to apply on monad value\n        :type filterer: Function(A) -> Boolean\n        :returns: Try with previous value\n        :rtype: Try[A]\n        "
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(none_type_0)
    var_0 = immutable_list_0.reduce(str_0, str_0)


def test_case_12():
    bool_0 = True
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = module_0.ImmutableList(bool_0, none_type_0)
    immutable_list_1.reduce(immutable_list_0, none_type_0)


def test_case_13():
    immutable_list_0 = module_0.ImmutableList()


def test_case_14():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    str_0 = immutable_list_0.__str__()
    immutable_list_1.find(immutable_list_0)


def test_case_15():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    var_0 = immutable_list_0.append(immutable_list_1)
    immutable_list_1.find(var_0)


def test_case_16():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    var_0 = immutable_list_1.__add__(immutable_list_0)
    immutable_list_1.find(var_0)


def test_case_17():
    str_0 = "h@&?22)#AX$#"
    immutable_list_0 = module_0.ImmutableList(str_0, str_0)
    bool_0 = False
    bytes_0 = b"\xa79U\x15H\x1d\xefN\x00\xfe\x01U\x0c\xfd\x10K\xa1M\x82\xae"
    none_type_0 = None
    int_0 = -568
    bool_1 = True
    immutable_list_1 = module_0.ImmutableList(tail=int_0, is_empty=bool_1)
    immutable_list_2 = immutable_list_1.append(none_type_0)
    immutable_list_3 = immutable_list_2.unshift(bytes_0)
    immutable_list_3.reduce(bool_0, bool_0)


def test_case_18():
    dict_0 = {}
    immutable_list_0 = module_0.ImmutableList(tail=dict_0)
    immutable_list_0.map(immutable_list_0)


def test_case_19():
    immutable_list_0 = module_0.ImmutableList()
    bool_0 = immutable_list_0.__eq__(immutable_list_0)
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    none_type_0 = None
    var_0 = immutable_list_0.to_list()
    immutable_list_2 = immutable_list_1.unshift(none_type_0)
    bool_1 = immutable_list_0.__eq__(immutable_list_2)
    var_1 = immutable_list_0.to_list()
    var_2 = immutable_list_1.__len__()
    immutable_list_1.find(none_type_0)


def test_case_20():
    bytes_0 = b"2\xd6\xban\x93\x8b5K\xc5\x13\xe8\x00B#e\xcd>^"
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(bool_0, is_empty=bool_0)
    var_0 = immutable_list_0.__len__()
    immutable_list_0.find(bytes_0)


def test_case_21():
    bytes_0 = b"2\xd6\xban\x93\x8b5K\xc5\x13\xe8\x00B#e\xcd>^"
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(bool_0, is_empty=bool_0)
    immutable_list_0.find(bytes_0)
