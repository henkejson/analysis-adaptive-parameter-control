# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.immutable_list as module_0


def test_case_0():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = module_0.ImmutableList()
    bool_0 = immutable_list_0.__eq__(immutable_list_1)
    bool_1 = immutable_list_0.__eq__(none_type_0)


def test_case_1():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList()
    bool_0 = immutable_list_0.__eq__(none_type_0)


def test_case_2():
    str_0 = "de\x0bpGA>{U!Vf<f$n]L"
    immutable_list_0 = module_0.ImmutableList(str_0, str_0, str_0)
    var_0 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_0.find(var_0)


def test_case_3():
    none_type_0 = None
    int_0 = 1147
    immutable_list_0 = module_0.ImmutableList(is_empty=int_0)
    immutable_list_0.__add__(none_type_0)


def test_case_4():
    immutable_list_0 = module_0.ImmutableList()
    str_0 = immutable_list_0.__str__()
    var_0 = immutable_list_0.__len__()


def test_case_5():
    str_0 = "de\x0bA>{U!,Vff<'$n]L"
    immutable_list_0 = module_0.ImmutableList(str_0, str_0, str_0)
    var_0 = immutable_list_0.__len__()
    immutable_list_0.find(var_0)


def test_case_6():
    str_0 = "H:8x3J|`T@-"
    immutable_list_0 = module_0.ImmutableList(str_0, str_0, str_0)
    none_type_0 = None
    var_0 = immutable_list_0.__len__()
    immutable_list_1 = module_0.ImmutableList(var_0)
    immutable_list_2 = immutable_list_1.append(none_type_0)
    immutable_list_0.to_list()


def test_case_7():
    tuple_0 = ()
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_2 = immutable_list_0.unshift(tuple_0)
    immutable_list_3 = immutable_list_1.append(immutable_list_2)
    immutable_list_0.map(immutable_list_1)


def test_case_8():
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(is_empty=bool_0)
    var_0 = immutable_list_0.find(immutable_list_0)
    immutable_list_1 = immutable_list_0.unshift(bool_0)
    immutable_list_2 = immutable_list_0.unshift(bool_0)
    immutable_list_1.map(var_0)


def test_case_9():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_0.filter(immutable_list_0)


def test_case_10():
    float_0 = 1016.042943
    immutable_list_0 = module_0.ImmutableList(tail=float_0, is_empty=float_0)
    var_0 = immutable_list_0.__len__()
    var_1 = immutable_list_0.find(var_0)
    immutable_list_0.filter(var_0)


def test_case_11():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.find(none_type_0)
    str_0 = var_0.__str__()


def test_case_12():
    str_0 = "de\x0bA>{U!,Vff<'$n]L"
    immutable_list_0 = module_0.ImmutableList(str_0, str_0, str_0)
    immutable_list_0.find(str_0)


def test_case_13():
    list_0 = []
    int_0 = 2207
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(tail=none_type_0)
    var_0 = immutable_list_0.reduce(int_0, int_0)
    var_0.append(list_0)


def test_case_14():
    bool_0 = True
    tuple_0 = (bool_0,)
    immutable_list_0 = module_0.ImmutableList(tuple_0)
    var_0 = immutable_list_0.to_list()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_1.reduce(tuple_0, immutable_list_0)


def test_case_15():
    immutable_list_0 = module_0.ImmutableList()


def test_case_16():
    float_0 = 1016.042943
    immutable_list_0 = module_0.ImmutableList(tail=float_0, is_empty=float_0)
    var_0 = immutable_list_0.__add__(immutable_list_0)
    var_1 = immutable_list_0.find(var_0)
    immutable_list_0.filter(var_0)


def test_case_17():
    str_0 = "\n        Take mapper function and return new instance of Right with mapped value.\n\n        :param mapper: function to apply on Right value\n        :type mapper: Function(A) -> B\n        :returns: new Right with result of mapper\n        :rtype: Right[B]\n        "
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(bool_0)
    var_0 = str_0.find(str_0)
    str_1 = immutable_list_0.__len__()


def test_case_18():
    float_0 = 1016.042943
    immutable_list_0 = module_0.ImmutableList(tail=float_0, is_empty=float_0)
    var_0 = immutable_list_0.__len__()
    none_type_0 = None
    var_1 = immutable_list_0.reduce(none_type_0, none_type_0)
    var_2 = immutable_list_0.find(var_1)
    immutable_list_1 = module_0.ImmutableList(immutable_list_0, none_type_0, var_2)
    var_3 = immutable_list_0.__len__()
    var_4 = immutable_list_0.__len__()
    immutable_list_1.reduce(var_0, var_0)


def test_case_19():
    float_0 = 1016.042943
    immutable_list_0 = module_0.ImmutableList(tail=float_0, is_empty=float_0)
    none_type_0 = None
    bool_0 = True
    var_0 = immutable_list_0.find(immutable_list_0)
    immutable_list_1 = module_0.ImmutableList(immutable_list_0, none_type_0, bool_0)
    bool_1 = immutable_list_1.__eq__(immutable_list_0)
    immutable_list_1.find(bool_0)


def test_case_20():
    none_type_0 = None
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(bool_0, is_empty=none_type_0)
    immutable_list_0.find(none_type_0)


def test_case_21():
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(is_empty=bool_0)
    var_0 = immutable_list_0.to_list()
    immutable_list_1 = immutable_list_0.append(immutable_list_0)
    bool_1 = immutable_list_1.__eq__(immutable_list_0)
    immutable_list_2 = immutable_list_0.unshift(var_0)
    immutable_list_2.find(immutable_list_2)
