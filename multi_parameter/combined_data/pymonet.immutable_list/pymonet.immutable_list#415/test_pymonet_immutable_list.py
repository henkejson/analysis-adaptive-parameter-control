# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.immutable_list as module_0
import typing as module_1


def test_case_0():
    immutable_list_0 = module_0.ImmutableList()
    bool_0 = immutable_list_0.__eq__(immutable_list_0)
    immutable_list_0.map(immutable_list_0)


def test_case_1():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.__len__()
    var_1 = immutable_list_0.reduce(var_0, immutable_list_0)
    immutable_list_1 = immutable_list_0.append(immutable_list_0)
    bool_0 = immutable_list_1.__eq__(immutable_list_0)


def test_case_2():
    dict_0 = {}
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(dict_0)
    var_0 = immutable_list_1.__len__()


def test_case_3():
    int_0 = 1
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(int_0, is_empty=bool_0)
    immutable_list_0.__add__(int_0)


def test_case_4():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.__len__()


def test_case_5():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(none_type_0)
    str_0 = immutable_list_1.__str__()


def test_case_6():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.__add__(immutable_list_0)
    generic_0 = module_1.Generic()
    var_0 = immutable_list_0.find(immutable_list_0)
    immutable_list_2 = immutable_list_0.__add__(immutable_list_0)
    immutable_list_2.map(var_0)


def test_case_7():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_0.filter(immutable_list_0)


def test_case_8():
    str_0 = ""
    immutable_list_0 = module_0.ImmutableList(tail=str_0)
    immutable_list_0.filter(immutable_list_0)


def test_case_9():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    var_0 = immutable_list_0.find(immutable_list_1)
    immutable_list_0.filter(immutable_list_0)


def test_case_10():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_1.find(immutable_list_0)


def test_case_11():
    float_0 = 823.096701
    list_0 = [float_0, float_0, float_0, float_0]
    immutable_list_0 = module_0.ImmutableList(list_0)
    immutable_list_1 = immutable_list_0.unshift(list_0)
    immutable_list_1.reduce(immutable_list_0, immutable_list_1)


def test_case_12():
    immutable_list_0 = module_0.ImmutableList()


def test_case_13():
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(bool_0, is_empty=bool_0)
    immutable_list_1 = immutable_list_0.append(immutable_list_0)
    immutable_list_2 = immutable_list_1.__add__(immutable_list_0)
    immutable_list_0.find(bool_0)


def test_case_14():
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(bool_0, is_empty=bool_0)
    var_0 = immutable_list_0.__len__()
    immutable_list_0.find(var_0)


def test_case_15():
    str_0 = "[()rr"
    immutable_list_0 = module_0.ImmutableList(str_0)
    tuple_0 = (str_0,)
    complex_0 = -480 - 555.6246j
    immutable_list_1 = immutable_list_0.append(complex_0)
    none_type_0 = None
    immutable_list_2 = module_0.ImmutableList(tail=none_type_0)
    str_1 = immutable_list_0.__str__()
    immutable_list_0.reduce(tuple_0, str_0)


def test_case_16():
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(bool_0, is_empty=bool_0)
    immutable_list_0.find(bool_0)


def test_case_17():
    immutable_list_0 = module_0.ImmutableList()
    bool_0 = True
    immutable_list_1 = module_0.ImmutableList(immutable_list_0, is_empty=bool_0)
    bool_1 = immutable_list_0.__eq__(immutable_list_1)
    immutable_list_2 = immutable_list_0.unshift(immutable_list_0)
    var_0 = immutable_list_2.__len__()
    immutable_list_2.find(immutable_list_0)
