# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.immutable_list as module_0
import typing as module_1


def test_case_0():
    set_0 = set()
    immutable_list_0 = module_0.ImmutableList(set_0)
    bool_0 = immutable_list_0.__eq__(immutable_list_0)
    immutable_list_0.find(immutable_list_0)


def test_case_1():
    set_0 = set()
    immutable_list_0 = module_0.ImmutableList(set_0)
    generic_0 = module_1.Generic()
    bool_0 = immutable_list_0.__eq__(generic_0)
    immutable_list_0.find(immutable_list_0)


def test_case_2():
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(bool_0)
    immutable_list_1.find(immutable_list_0)


def test_case_3():
    immutable_list_0 = module_0.ImmutableList()
    float_0 = -1932.0
    var_0 = immutable_list_0.find(immutable_list_0)
    immutable_list_0.__add__(float_0)


def test_case_4():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.__len__()
    immutable_list_0.filter(var_0)


def test_case_5():
    set_0 = set()
    immutable_list_0 = module_0.ImmutableList(set_0)
    var_0 = immutable_list_0.__len__()
    immutable_list_0.find(immutable_list_0)


def test_case_6():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.to_list()
    immutable_list_0.filter(immutable_list_0)


def test_case_7():
    set_0 = set()
    immutable_list_0 = module_0.ImmutableList(set_0)
    immutable_list_1 = immutable_list_0.append(immutable_list_0)
    bool_0 = immutable_list_1.to_list()
    immutable_list_0.find(immutable_list_0)


def test_case_8():
    int_0 = -2292
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(is_empty=bool_0)
    immutable_list_0.map(int_0)


def test_case_9():
    tuple_0 = ()
    immutable_list_0 = module_0.ImmutableList()
    none_type_0 = None
    immutable_list_1 = module_0.ImmutableList(is_empty=none_type_0)
    immutable_list_2 = immutable_list_0.append(tuple_0)
    immutable_list_2.map(tuple_0)


def test_case_10():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_0.filter(immutable_list_0)


def test_case_11():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.append(immutable_list_0)
    immutable_list_2 = immutable_list_0.append(immutable_list_0)
    var_0 = immutable_list_2.find(immutable_list_0)
    var_1 = immutable_list_0.__len__()
    str_0 = "\n        Take function and call constructor function passing returned value to fn function.\n\n        It's only way to call function store in Lazy\n        :param fn: Function(constructor_fn) -> B\n        :returns: result od folder function\n        :rtype: B\n        "
    var_2 = immutable_list_0.find(str_0)
    immutable_list_1.filter(var_1)


def test_case_12():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.find(immutable_list_0)
    immutable_list_0.filter(var_0)


def test_case_13():
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(bool_0)
    immutable_list_0.find(immutable_list_0)


def test_case_14():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.reduce(immutable_list_0, immutable_list_0)
    var_1 = immutable_list_0.find(immutable_list_0)
    immutable_list_0.filter(var_1)


def test_case_15():
    set_0 = set()
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.append(set_0)
    bool_0 = True
    immutable_list_2 = module_0.ImmutableList(
        immutable_list_0, immutable_list_0, bool_0
    )
    immutable_list_2.reduce(bool_0, bool_0)


def test_case_16():
    immutable_list_0 = module_0.ImmutableList()


def test_case_17():
    set_0 = set()
    immutable_list_0 = module_0.ImmutableList(set_0)
    str_0 = immutable_list_0.__str__()
    bool_0 = immutable_list_0.__eq__(immutable_list_0)
    immutable_list_0.find(immutable_list_0)


def test_case_18():
    set_0 = set()
    immutable_list_0 = module_0.ImmutableList(set_0)
    immutable_list_1 = immutable_list_0.append(immutable_list_0)
    bool_0 = immutable_list_0.__eq__(immutable_list_1)
    immutable_list_0.find(immutable_list_0)


def test_case_19():
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(bool_0)
    var_0 = immutable_list_1.append(immutable_list_0)
    immutable_list_1.find(var_0)


def test_case_20():
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(bool_0)
    var_0 = immutable_list_1.__len__()
    immutable_list_1.find(var_0)


def test_case_21():
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(bool_0)
    immutable_list_1 = immutable_list_0.__add__(immutable_list_0)
    immutable_list_0.reduce(immutable_list_0, immutable_list_1)


def test_case_22():
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(bool_0, is_empty=bool_0)
    immutable_list_1 = module_0.ImmutableList()
    none_type_0 = None
    bool_1 = immutable_list_1.__eq__(immutable_list_0)
    immutable_list_0.__add__(none_type_0)
