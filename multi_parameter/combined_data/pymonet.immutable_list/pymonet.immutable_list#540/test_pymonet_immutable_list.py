# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.immutable_list as module_0


def test_case_0():
    immutable_list_0 = module_0.ImmutableList()
    bool_0 = immutable_list_0.__eq__(immutable_list_0)
    immutable_list_1 = module_0.ImmutableList()
    immutable_list_2 = immutable_list_0.append(immutable_list_1)
    var_0 = immutable_list_0.__len__()


def test_case_1():
    immutable_list_0 = module_0.ImmutableList()
    none_type_0 = None
    var_0 = immutable_list_0.to_list()
    immutable_list_1 = immutable_list_0.unshift(none_type_0)
    var_1 = immutable_list_0.reduce(immutable_list_0, immutable_list_0)


def test_case_2():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_0.__add__(none_type_0)


def test_case_3():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.__len__()
    immutable_list_0.map(var_0)


def test_case_4():
    float_0 = 1379.878
    immutable_list_0 = module_0.ImmutableList(float_0, float_0)
    immutable_list_0.__len__()


def test_case_5():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.to_list()


def test_case_6():
    int_0 = 1
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(int_0)
    immutable_list_2 = immutable_list_1.append(int_0)
    str_0 = immutable_list_1.__str__()
    immutable_list_2.find(immutable_list_2)


def test_case_7():
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(bool_0, bool_0, bool_0)
    immutable_list_1 = immutable_list_0.append(immutable_list_0)
    none_type_0 = None
    immutable_list_1.map(none_type_0)


def test_case_8():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_0.filter(immutable_list_0)


def test_case_9():
    float_0 = 1379.8797222056576
    immutable_list_0 = module_0.ImmutableList(float_0, float_0)
    immutable_list_0.filter(float_0)


def test_case_10():
    none_type_0 = None
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    none_type_1 = None
    immutable_list_0 = module_0.ImmutableList(none_type_1)
    var_0 = immutable_list_0.find(list_0)
    bool_1 = var_0.__eq__(none_type_0)


def test_case_11():
    float_0 = 1378.6577581836896
    immutable_list_0 = module_0.ImmutableList(float_0, float_0)
    immutable_list_0.find(immutable_list_0)


def test_case_12():
    complex_0 = -72.2 - 355.91075j
    none_type_0 = None
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(complex_0, is_empty=bool_0)
    immutable_list_0.reduce(none_type_0, none_type_0)


def test_case_13():
    immutable_list_0 = module_0.ImmutableList()


def test_case_14():
    immutable_list_0 = module_0.ImmutableList()
    str_0 = immutable_list_0.__str__()


def test_case_15():
    int_0 = 1
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(int_0)
    immutable_list_2 = immutable_list_1.append(int_0)
    immutable_list_2.find(immutable_list_2)


def test_case_16():
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = module_0.ImmutableList(bool_0)
    var_0 = immutable_list_1.__len__()
    var_1 = immutable_list_0.__len__()
    immutable_list_1.find(var_0)


def test_case_17():
    immutable_list_0 = module_0.ImmutableList()
    bool_0 = immutable_list_0.__eq__(immutable_list_0)
    bool_1 = immutable_list_0.__eq__(bool_0)
    immutable_list_1 = module_0.ImmutableList(immutable_list_0, immutable_list_0)
    immutable_list_2 = immutable_list_0.append(immutable_list_1)
    var_0 = immutable_list_2.__len__()
    var_1 = immutable_list_2.find(var_0)
    immutable_list_1.reduce(bool_1, bool_0)


def test_case_18():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = module_0.ImmutableList(immutable_list_0)
    bool_0 = immutable_list_1.__eq__(immutable_list_0)
    var_0 = immutable_list_1.__len__()
    immutable_list_1.find(var_0)


def test_case_19():
    str_0 = "\n        Take function and call constructor function passing returned value to fn function.\n\n        It's only way to call function store in Lazy\n        :param fn: Function(constructor_fn) -> B\n        :returns: result od folder function\n        :rtype: B\n        "
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(str_0, none_type_0)
    immutable_list_0.find(none_type_0)


def test_case_20():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.__add__(immutable_list_0)
    bool_0 = immutable_list_0.__eq__(immutable_list_1)
    immutable_list_2 = module_0.ImmutableList(immutable_list_1, bool_0)
    none_type_0 = None
    immutable_list_2.find(none_type_0)
