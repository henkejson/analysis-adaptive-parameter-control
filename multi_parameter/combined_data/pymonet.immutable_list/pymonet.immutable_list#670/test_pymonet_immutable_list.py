# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.immutable_list as module_0


def test_case_0():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    bool_0 = immutable_list_0.__eq__(immutable_list_1)
    immutable_list_1.find(immutable_list_1)


def test_case_1():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_1.find(immutable_list_1)


def test_case_2():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(tail=none_type_0)
    immutable_list_1 = immutable_list_0.__add__(immutable_list_0)
    bool_0 = immutable_list_1.__eq__(immutable_list_1)
    var_0 = immutable_list_0.reduce(none_type_0, none_type_0)
    bool_1 = var_0.__eq__(none_type_0)
    str_0 = immutable_list_0.__str__()
    immutable_list_1.__add__(bool_0)


def test_case_3():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.__len__()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_1.find(var_0)


def test_case_4():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    var_0 = immutable_list_1.__len__()
    immutable_list_1.find(var_0)


def test_case_5():
    bytes_0 = b"\xe2\xfd\xaa\xcc\x8d\xa7s&\xb9\xa7\x8c[\x04\xbaF\xf8h\x0f"
    immutable_list_0 = module_0.ImmutableList(bytes_0)
    var_0 = immutable_list_0.to_list()
    immutable_list_0.find(var_0)


def test_case_6():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    str_0 = immutable_list_1.__str__()
    immutable_list_1.find(immutable_list_1)


def test_case_7():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.__len__()
    immutable_list_0.map(var_0)


def test_case_8():
    str_0 = "\n        Transform Either to Try.\n\n        :returns: Lazy monad with function returning previous value\n        :rtype: Lazy[Function() -> A]\n        "
    immutable_list_0 = module_0.ImmutableList(tail=str_0)
    immutable_list_0.map(str_0)


def test_case_9():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_0.filter(immutable_list_0)


def test_case_10():
    bool_0 = True
    bool_1 = True
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(bool_1, none_type_0)
    immutable_list_1 = immutable_list_0.append(bool_0)
    immutable_list_1.filter(bool_0)


def test_case_11():
    bool_0 = True
    int_0 = -1586
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.find(int_0)
    var_0.unshift(bool_0)


def test_case_12():
    immutable_list_0 = module_0.ImmutableList()
    none_type_0 = None
    var_0 = immutable_list_0.reduce(immutable_list_0, none_type_0)
    immutable_list_1 = module_0.ImmutableList(none_type_0, var_0, var_0)


def test_case_13():
    bool_0 = True
    none_type_0 = None
    bool_1 = True
    immutable_list_0 = module_0.ImmutableList(bool_1, is_empty=bool_1)
    immutable_list_0.reduce(bool_0, none_type_0)


def test_case_14():
    immutable_list_0 = module_0.ImmutableList()


def test_case_15():
    bytes_0 = b"\xe2\xfd\xaa\xcc\x8d\xa7s&\xb9\xa7\x8c[\x04\xbaF\xf8h\x0f"
    immutable_list_0 = module_0.ImmutableList(bytes_0)
    immutable_list_1 = immutable_list_0.append(bytes_0)
    immutable_list_0.find(immutable_list_0)


def test_case_16():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    bool_0 = immutable_list_1.__eq__(immutable_list_1)
    immutable_list_1.find(immutable_list_1)


def test_case_17():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_2 = immutable_list_1.__add__(immutable_list_1)
    immutable_list_1.find(immutable_list_2)


def test_case_18():
    bytes_0 = b"\xe2\xfd\xaa\xcc\x8d\xa7s&\xb9\xa7\x8c[\x04\xbaF\xf8h\x0f"
    immutable_list_0 = module_0.ImmutableList(bytes_0)
    immutable_list_1 = immutable_list_0.__len__()
    immutable_list_0.find(immutable_list_0)


def test_case_19():
    bytes_0 = b'X\xc7\xdb~\xdcq\xfd\xefu"]\xbf\xd4\xa2\xc9T'
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(is_empty=bool_0)
    immutable_list_1 = module_0.ImmutableList(tail=immutable_list_0)
    immutable_list_2 = immutable_list_1.unshift(bytes_0)
    immutable_list_3 = immutable_list_0.__add__(immutable_list_0)
    immutable_list_4 = immutable_list_0.unshift(bool_0)
    str_0 = immutable_list_4.__str__()
    immutable_list_5 = immutable_list_4.unshift(str_0)
    immutable_list_6 = immutable_list_1.unshift(immutable_list_1)
    str_1 = immutable_list_0.__str__()
    none_type_0 = None
    immutable_list_7 = module_0.ImmutableList()
    var_0 = immutable_list_1.find(none_type_0)
    int_0 = 796
    immutable_list_4.reduce(var_0, int_0)


def test_case_20():
    bytes_0 = b"\xe2\xfd\xaa\xcc\x8d\xa7s&\xb9\xa7\x8c[\x04\xbaF\xf8h\x0f"
    immutable_list_0 = module_0.ImmutableList(bytes_0)
    immutable_list_1 = immutable_list_0.append(immutable_list_0)
    var_0 = immutable_list_0.unshift(bytes_0)
    bool_0 = var_0.__eq__(immutable_list_1)
    immutable_list_0.find(var_0)


def test_case_21():
    bytes_0 = b"\xe2\xfd\xaa\xcc\x8d\xa7s&\xb9\xa7\x8c[\x04\xbaF\xf8h\x0f"
    immutable_list_0 = module_0.ImmutableList(bytes_0)
    immutable_list_0.find(immutable_list_0)
