# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.immutable_list as module_0


def test_case_0():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(tail=none_type_0)
    bool_0 = immutable_list_0.__eq__(immutable_list_0)
    var_0 = immutable_list_0.find(bool_0)
    immutable_list_0.filter(immutable_list_0)


def test_case_1():
    str_0 = "Box[value={}]"
    bool_0 = True
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(bool_0, none_type_0)
    bool_1 = immutable_list_0.__eq__(str_0)


def test_case_2():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.append(immutable_list_0)
    immutable_list_0.filter(var_0)


def test_case_3():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(tail=none_type_0)
    bool_0 = immutable_list_0.__eq__(immutable_list_0)
    var_0 = immutable_list_0.reduce(none_type_0, immutable_list_0)
    immutable_list_1 = var_0.__add__(immutable_list_0)
    immutable_list_2 = module_0.ImmutableList(immutable_list_1)
    immutable_list_2.__add__(none_type_0)


def test_case_4():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.__len__()
    var_0.to_list()


def test_case_5():
    bool_0 = True
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(bool_0, none_type_0)
    var_0 = immutable_list_0.__len__()
    var_1 = immutable_list_0.to_list()
    immutable_list_0.find(var_1)


def test_case_6():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.to_list()


def test_case_7():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    str_0 = immutable_list_1.__str__()
    immutable_list_1.find(str_0)


def test_case_8():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(tail=none_type_0)
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    immutable_list_1 = module_0.ImmutableList(is_empty=dict_0)
    immutable_list_2 = module_0.ImmutableList()
    immutable_list_2.map(immutable_list_1)


def test_case_9():
    float_0 = 2269.2788
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(tail=float_0, is_empty=none_type_0)
    immutable_list_1 = immutable_list_0.unshift(float_0)
    immutable_list_1.map(float_0)


def test_case_10():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_0.filter(immutable_list_0)


def test_case_11():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.find(immutable_list_0)
    str_0 = immutable_list_0.__str__()
    immutable_list_0.filter(immutable_list_0)


def test_case_12():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_1.find(immutable_list_1)


def test_case_13():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.reduce(immutable_list_0, immutable_list_0)


def test_case_14():
    str_0 = "\n        Create not empty maybe.\n\n        :param mapper: value to store in Maybe\n        :type mapper: Any\n        :returns: Maybe[Any]\n        "
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(str_0)
    immutable_list_2 = module_0.ImmutableList()
    bool_0 = True
    tuple_0 = (bool_0, immutable_list_0)
    var_0 = immutable_list_2.to_list()
    var_1 = immutable_list_2.reduce(var_0, str_0)
    bool_1 = immutable_list_1.__eq__(tuple_0)
    var_2 = immutable_list_0.__len__()
    float_0 = -2349.2
    immutable_list_3 = immutable_list_2.unshift(float_0)
    immutable_list_1.reduce(var_2, immutable_list_3)


def test_case_15():
    immutable_list_0 = module_0.ImmutableList()


def test_case_16():
    immutable_list_0 = module_0.ImmutableList()
    str_0 = immutable_list_0.__str__()


def test_case_17():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_2 = immutable_list_1.__add__(immutable_list_0)
    immutable_list_1.find(immutable_list_1)


def test_case_18():
    str_0 = "\n        Create not empty maybe.\n\n        :param mapper: value to store in Maybe\n        :type mapper: Any\n        :returns: Maybe[Any]\n        "
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(str_0)
    var_0 = immutable_list_1.__len__()
    immutable_list_0.filter(var_0)


def test_case_19():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = module_0.ImmutableList(
        immutable_list_0, is_empty=immutable_list_0
    )
    immutable_list_1.find(immutable_list_0)


def test_case_20():
    bytes_0 = b"\x12\xbawk\x1e\xad\x11\xe0"
    immutable_list_0 = module_0.ImmutableList(bytes_0)
    var_0 = immutable_list_0.__len__()
    immutable_list_1 = module_0.ImmutableList()
    immutable_list_0.reduce(var_0, immutable_list_1)


def test_case_21():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(none_type_0)
    immutable_list_2 = module_0.ImmutableList(is_empty=immutable_list_0)
    immutable_list_3 = immutable_list_1.append(none_type_0)
    bool_0 = immutable_list_1.__eq__(immutable_list_0)
    immutable_list_4 = immutable_list_0.append(immutable_list_1)
    var_0 = immutable_list_4.find(immutable_list_2)
    var_1 = immutable_list_1.to_list()
    immutable_list_4.filter(immutable_list_2)


def test_case_22():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.append(immutable_list_0)
    var_0 = immutable_list_0.find(immutable_list_0)
    immutable_list_1.filter(var_0)


def test_case_23():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    str_0 = immutable_list_1.__str__()
    bool_0 = immutable_list_1.__eq__(immutable_list_0)
    immutable_list_1.find(str_0)
