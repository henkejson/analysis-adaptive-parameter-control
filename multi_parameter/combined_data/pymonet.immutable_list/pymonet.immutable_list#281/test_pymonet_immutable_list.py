# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.immutable_list as module_0


def test_case_0():
    str_0 = ":G\rAq+c!n^!U9y{M"
    immutable_list_0 = module_0.ImmutableList(str_0, str_0, str_0)
    bool_0 = immutable_list_0.__eq__(immutable_list_0)
    immutable_list_0.find(str_0)


def test_case_1():
    str_0 = ":G\rAq+c!n^!U9y{M"
    immutable_list_0 = module_0.ImmutableList(is_empty=str_0)
    bool_0 = immutable_list_0.__eq__(str_0)
    immutable_list_1 = module_0.ImmutableList(
        immutable_list_0, immutable_list_0, immutable_list_0
    )
    immutable_list_1.find(str_0)


def test_case_2():
    str_0 = ":G\rAq+c!n^!U9y{M"
    immutable_list_0 = module_0.ImmutableList(is_empty=str_0)
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_1.find(str_0)


def test_case_3():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(tail=none_type_0)
    immutable_list_0.__add__(none_type_0)


def test_case_4():
    str_0 = ":G\rAq+c!n^!U9y{M"
    immutable_list_0 = module_0.ImmutableList(is_empty=str_0)
    var_0 = immutable_list_0.__len__()
    immutable_list_1 = module_0.ImmutableList(var_0)
    immutable_list_1.find(str_0)


def test_case_5():
    str_0 = ":G\rAq+c!n^!U9y{M"
    immutable_list_0 = module_0.ImmutableList(str_0, str_0, str_0)
    var_0 = immutable_list_0.__len__()
    immutable_list_0.find(str_0)


def test_case_6():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.to_list()
    var_0.to_list()


def test_case_7():
    str_0 = ":G\rAq+c!n^!U9y{M"
    immutable_list_0 = module_0.ImmutableList(is_empty=str_0)
    immutable_list_1 = module_0.ImmutableList(
        immutable_list_0, immutable_list_0, immutable_list_0
    )
    bool_0 = immutable_list_1.to_list()
    immutable_list_1.find(str_0)


def test_case_8():
    str_0 = "\n        Take function and applied this function on current Validation value and returns folder result.\n\n        :param mapper: mapper function\n        :type mapper: Function(A) -> Validation[B, E]\n        :returns: new Validation with mapped value\n        :rtype: Validation[B, E]\n        "
    none_type_0 = None
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(none_type_0, is_empty=bool_0)
    immutable_list_1 = immutable_list_0.append(str_0)
    var_0 = immutable_list_1.__len__()
    immutable_list_0.map(var_0)


def test_case_9():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = module_0.ImmutableList(
        tail=immutable_list_0, is_empty=immutable_list_0
    )
    immutable_list_1.map(immutable_list_1)


def test_case_10():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_0.filter(immutable_list_0)


def test_case_11():
    str_0 = ":G\rAq+c!n^!U9y{M"
    immutable_list_0 = module_0.ImmutableList(is_empty=str_0)
    list_0 = immutable_list_0.find(immutable_list_0)
    immutable_list_1 = module_0.ImmutableList(
        immutable_list_0, immutable_list_0, immutable_list_0
    )
    immutable_list_1.find(str_0)


def test_case_12():
    str_0 = "LP. "
    immutable_list_0 = module_0.ImmutableList(str_0)
    immutable_list_0.find(str_0)


def test_case_13():
    str_0 = ":G\rAq+c!n^!U9y{M"
    immutable_list_0 = module_0.ImmutableList(is_empty=str_0)
    immutable_list_1 = module_0.ImmutableList(
        immutable_list_0, immutable_list_0, immutable_list_0
    )
    bool_0 = immutable_list_0.reduce(str_0, immutable_list_0)
    immutable_list_1.find(str_0)


def test_case_14():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList()
    str_0 = immutable_list_0.__str__()
    immutable_list_1 = immutable_list_0.unshift(none_type_0)
    bool_0 = immutable_list_0.__eq__(immutable_list_1)
    immutable_list_2 = module_0.ImmutableList(immutable_list_0)
    bool_1 = immutable_list_0.__eq__(bool_0)
    str_1 = immutable_list_0.__str__()
    immutable_list_3 = immutable_list_1.__add__(immutable_list_0)
    var_0 = immutable_list_3.__len__()
    var_1 = immutable_list_2.to_list()
    immutable_list_4 = immutable_list_2.__add__(immutable_list_2)
    immutable_list_4.reduce(var_0, immutable_list_1)


def test_case_15():
    immutable_list_0 = module_0.ImmutableList()


def test_case_16():
    none_type_0 = None
    bool_0 = False
    dict_0 = {none_type_0: none_type_0, bool_0: bool_0, bool_0: bool_0}
    immutable_list_0 = module_0.ImmutableList(tail=none_type_0, is_empty=dict_0)
    str_0 = immutable_list_0.__str__()


def test_case_17():
    str_0 = ":G\rAq+cn^Uy{M"
    immutable_list_0 = module_0.ImmutableList(is_empty=str_0)
    var_0 = immutable_list_0.append(str_0)
    immutable_list_1 = module_0.ImmutableList(var_0)
    immutable_list_1.find(str_0)


def test_case_18():
    str_0 = ":G\rAq+c!n^!U9y{M"
    immutable_list_0 = module_0.ImmutableList(is_empty=str_0)
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    bool_0 = immutable_list_1.__eq__(immutable_list_0)
    immutable_list_1.find(str_0)


def test_case_19():
    int_0 = 3350
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_2 = immutable_list_1.append(int_0)
    immutable_list_2.find(immutable_list_1)


def test_case_20():
    str_0 = ":G\rAq+c!n^!U9y{M"
    immutable_list_0 = module_0.ImmutableList(str_0)
    var_0 = immutable_list_0.__len__()
    immutable_list_0.find(str_0)


def test_case_21():
    str_0 = ":G\rAq+c!n^!U9y{M"
    immutable_list_0 = module_0.ImmutableList(str_0, str_0, str_0)
    immutable_list_0.find(str_0)


def test_case_22():
    str_0 = "\r/Ek"
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(str_0)
    immutable_list_0.reduce(none_type_0, str_0)


def test_case_23():
    str_0 = ":G\rAq+c!n^!U9y{M"
    immutable_list_0 = module_0.ImmutableList(is_empty=str_0)
    immutable_list_1 = immutable_list_0.__add__(immutable_list_0)
    bool_0 = immutable_list_1.__eq__(immutable_list_0)
    immutable_list_2 = module_0.ImmutableList(
        immutable_list_0, immutable_list_0, immutable_list_0
    )
    immutable_list_2.find(str_0)


def test_case_24():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    var_0 = immutable_list_0.__len__()
    var_1 = immutable_list_0.find(var_0)
    immutable_list_1.filter(var_1)
