# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.immutable_list as module_0


def test_case_0():
    str_0 = "\n        :param semigroup: other semigroup to concat\n        :type semigroup: Sum[B]\n        :returns: new Sum with sum of concat semigroups values\n        :rtype: Sum[A]\n        "
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(str_0)
    bool_0 = immutable_list_1.__eq__(immutable_list_0)
    var_0 = immutable_list_0.__len__()
    var_1 = immutable_list_0.find(str_0)
    immutable_list_1.find(var_1)


def test_case_1():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(none_type_0)
    bool_0 = immutable_list_0.__eq__(none_type_0)
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_1.find(immutable_list_0)


def test_case_2():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.append(immutable_list_0)
    immutable_list_0.filter(immutable_list_0)


def test_case_3():
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(is_empty=bool_0)
    var_0 = immutable_list_0.__len__()
    str_0 = "h_aQfeVLxn"
    bytes_0 = b"oX\xef\x1d{h}\x8at\xf7g\\\x81\xa96"
    immutable_list_1 = module_0.ImmutableList(bytes_0)
    immutable_list_2 = immutable_list_1.append(str_0)
    immutable_list_2.__add__(var_0)


def test_case_4():
    str_0 = "\n        :param semigroup: other semigroup to concat\n        :type semigroup: Sum[B]\n        :returns: new Sum with sum of concat semigroups values\n        :rtype: Sum[A]\n        "
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(str_0)
    var_0 = immutable_list_0.__len__()
    immutable_list_1.find(immutable_list_1)


def test_case_5():
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(bool_0, is_empty=bool_0)
    var_0 = immutable_list_0.__len__()
    immutable_list_0.find(bool_0)


def test_case_6():
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(is_empty=bool_0)
    str_0 = immutable_list_0.__str__()
    str_1 = immutable_list_0.__str__()


def test_case_7():
    str_0 = "\n        :param semigroup: other semigroup to concat\n        :type semigroup: Sum[B]\n        :returns: new Sum with sum of concat semigroups values\n        :rtype: Sum[A]\n        "
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(str_0)
    var_0 = immutable_list_1.to_list()
    var_1 = immutable_list_1.to_list()
    immutable_list_1.find(var_1)


def test_case_8():
    bool_0 = True
    bool_1 = True
    bytes_0 = b"=.\xe7\x90w\xd3W\x1d\x14\xfb\xbb"
    immutable_list_0 = module_0.ImmutableList(bool_1, is_empty=bytes_0)
    immutable_list_0.map(bool_0)


def test_case_9():
    immutable_list_0 = module_0.ImmutableList()
    bool_0 = immutable_list_0.__eq__(immutable_list_0)
    var_0 = immutable_list_0.to_list()
    var_1 = immutable_list_0.find(var_0)
    var_2 = immutable_list_0.find(immutable_list_0)
    immutable_list_1 = immutable_list_0.append(immutable_list_0)
    immutable_list_2 = immutable_list_1.append(var_1)
    none_type_0 = None
    str_0 = immutable_list_0.__str__()
    var_3 = immutable_list_1.reduce(none_type_0, var_0)
    var_4 = immutable_list_0.find(immutable_list_0)
    var_5 = immutable_list_0.__len__()
    immutable_list_1.map(var_5)


def test_case_10():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_0.filter(immutable_list_0)


def test_case_11():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(none_type_0)
    immutable_list_1 = immutable_list_0.append(none_type_0)
    immutable_list_2 = immutable_list_0.append(immutable_list_0)
    immutable_list_3 = immutable_list_1.__add__(immutable_list_2)
    str_0 = immutable_list_0.__str__()
    var_0 = immutable_list_2.to_list()
    var_1 = var_0.__len__()
    var_2 = immutable_list_0.reduce(var_0, immutable_list_0)
    str_1 = immutable_list_2.__str__()
    var_3 = immutable_list_0.find(str_0)
    immutable_list_3.filter(var_3)


def test_case_12():
    str_0 = "\n        :param semigroup: other semigroup to concat\n        :type semigroup: Sum[B]\n        :returns: new Sum with sum of concat semigroups values\n        :rtype: Sum[A]\n        "
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(str_0)
    var_0 = immutable_list_0.__len__()
    var_1 = immutable_list_0.find(str_0)
    immutable_list_1.find(var_1)


def test_case_13():
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(bool_0, is_empty=bool_0)
    immutable_list_0.find(immutable_list_0)


def test_case_14():
    str_0 = "\n        :param semigroup: other semigroup to concat\n        :type semigroup: Sum[B]\n        :returns: new Sum with sum of concat semigroups values\n        :rtype: Sum[A]\n        "
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(str_0)
    var_0 = immutable_list_0.__len__()
    var_1 = immutable_list_0.reduce(var_0, var_0)
    immutable_list_1.find(var_1)


def test_case_15():
    none_type_0 = None
    none_type_1 = None
    int_0 = -3556
    tuple_0 = (none_type_1, int_0)
    immutable_list_0 = module_0.ImmutableList(tuple_0)
    immutable_list_0.reduce(none_type_0, none_type_0)


def test_case_16():
    immutable_list_0 = module_0.ImmutableList()


def test_case_17():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_0.filter(immutable_list_0)


def test_case_18():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(none_type_0)
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    bool_0 = immutable_list_1.__eq__(immutable_list_1)
    var_0 = immutable_list_0.find(immutable_list_1)
    immutable_list_2 = immutable_list_0.__add__(immutable_list_1)
    immutable_list_3 = immutable_list_2.unshift(none_type_0)
    immutable_list_1.find(none_type_0)


def test_case_19():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(none_type_0)
    immutable_list_1 = immutable_list_0.append(none_type_0)
    immutable_list_2 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_3 = immutable_list_2.append(none_type_0)
    var_0 = immutable_list_0.__len__()
    immutable_list_3.find(var_0)


def test_case_20():
    str_0 = "\n        :param semigroup: other semigroup to concat\n        :type semigroup: Sum[B]\n        :returns: new Sum with sum of concat semigroups values\n        :rtype: Sum[A]\n        "
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(str_0)
    var_0 = immutable_list_0.__len__()
    var_1 = immutable_list_1.__len__()
    immutable_list_1.find(immutable_list_1)


def test_case_21():
    complex_0 = -265.48440173453747 - 2967.91224j
    immutable_list_0 = module_0.ImmutableList(complex_0)
    immutable_list_1 = immutable_list_0.__add__(immutable_list_0)
    immutable_list_1.reduce(complex_0, immutable_list_0)


def test_case_22():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(none_type_0)
    immutable_list_1 = immutable_list_0.append(none_type_0)
    immutable_list_2 = immutable_list_0.append(immutable_list_0)
    str_0 = immutable_list_0.__str__()
    var_0 = immutable_list_2.to_list()
    bool_0 = immutable_list_2.__eq__(immutable_list_1)
    immutable_list_3 = immutable_list_1.unshift(var_0)
    immutable_list_3.find(var_0)
