# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.immutable_list as module_0
import builtins as module_1


def test_case_0():
    bytes_0 = b"?\rZ\xa6\x94\xbd\x84:u\x95(O\x1d\x1a\x9b\xe5>*"
    immutable_list_0 = module_0.ImmutableList(bytes_0)
    bool_0 = immutable_list_0.__eq__(immutable_list_0)
    immutable_list_0.find(bytes_0)


def test_case_1():
    bytes_0 = b"?\rZ\xa6\x94\xbd\x84:u\x95(O\x1d\x1a\x9b\xe5>*"
    immutable_list_0 = module_0.ImmutableList(bytes_0)
    bool_0 = immutable_list_0.__eq__(bytes_0)
    immutable_list_0.find(bytes_0)


def test_case_2():
    bytes_0 = b"?\rZ\xa6\x94\xbd\x84:u\x95(O\x1d\x1a\x9b\xe5>*"
    immutable_list_0 = module_0.ImmutableList(bytes_0)
    immutable_list_1 = immutable_list_0.append(bytes_0)
    immutable_list_0.find(bytes_0)


def test_case_3():
    str_0 = "\n        Take function and applied this function with monad value and returns new monad with mapped value.\n\n        :params mapper: function to apply on monad value\n        :type mapper: Function(A) -> B\n        :returns: for successfully new Try with mapped value, othercase copy of self\n        :rtype: Try[B]\n        "
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(is_empty=bool_0)
    immutable_list_0.__add__(str_0)


def test_case_4():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.__len__()


def test_case_5():
    immutable_list_0 = module_0.ImmutableList()
    str_0 = immutable_list_0.__str__()


def test_case_6():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(is_empty=none_type_0)
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    var_0 = immutable_list_1.to_list()
    immutable_list_1.find(var_0)


def test_case_7():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_0.map(immutable_list_0)


def test_case_8():
    bool_0 = False
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(none_type_0)
    none_type_1 = None
    immutable_list_1 = module_0.ImmutableList()
    var_0 = immutable_list_1.reduce(bool_0, none_type_1)
    object_0 = module_1.object()
    var_1 = immutable_list_1.find(object_0)
    immutable_list_2 = module_0.ImmutableList(tail=object_0)
    var_2 = immutable_list_2.__len__()
    immutable_list_2.map(var_2)


def test_case_9():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_0.filter(immutable_list_0)


def test_case_10():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(is_empty=none_type_0)
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    var_0 = immutable_list_0.find(none_type_0)
    immutable_list_1.find(var_0)


def test_case_11():
    bytes_0 = b"?\rZ\xa6\x94\xbd\x84:u\x95(O\x1d\x1a\x9b\xe5>*"
    immutable_list_0 = module_0.ImmutableList(bytes_0)
    immutable_list_0.find(bytes_0)


def test_case_12():
    bytes_0 = b"\x07\xa5\xca\xd7\xaa\xdc\xd8\x8dd\x0f\xd2"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    immutable_list_0 = module_0.ImmutableList(tail=dict_0)
    immutable_list_1 = module_0.ImmutableList()
    var_0 = immutable_list_1.reduce(immutable_list_1, immutable_list_1)


def test_case_13():
    immutable_list_0 = module_0.ImmutableList()


def test_case_14():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(is_empty=none_type_0)
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_1.find(immutable_list_0)


def test_case_15():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(is_empty=none_type_0)
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    bool_0 = immutable_list_0.__eq__(immutable_list_1)
    immutable_list_1.find(immutable_list_0)


def test_case_16():
    bytes_0 = b"?\rZ\xa6\x94\xbd\x84:u\x95(O\x1d\x1a\x9b\xe5>*"
    immutable_list_0 = module_0.ImmutableList(bytes_0, is_empty=bytes_0)
    immutable_list_1 = immutable_list_0.append(bytes_0)
    immutable_list_2 = immutable_list_1.__add__(immutable_list_1)
    immutable_list_0.find(bytes_0)


def test_case_17():
    immutable_list_0 = module_0.ImmutableList()
    bool_0 = False
    immutable_list_1 = immutable_list_0.append(bool_0)
    var_0 = immutable_list_1.to_list()
    int_0 = 345
    int_1 = 3771
    var_1 = immutable_list_0.__len__()
    immutable_list_2 = module_0.ImmutableList(int_0)
    str_0 = immutable_list_2.__str__()
    immutable_list_2.reduce(int_0, int_1)


def test_case_18():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList()
    bool_0 = immutable_list_0.__eq__(immutable_list_0)
    var_0 = immutable_list_0.find(bool_0)
    immutable_list_1 = module_0.ImmutableList()
    immutable_list_2 = module_0.ImmutableList(none_type_0, none_type_0, none_type_0)
    immutable_list_3 = immutable_list_1.unshift(immutable_list_2)
    var_1 = immutable_list_1.__len__()
    immutable_list_3.reduce(immutable_list_1, var_0)


def test_case_19():
    bytes_0 = b"?\rZ\xa6\x94\xbd\x84:u\x95(O\x1d\x1a\x9b\xe5>*"
    immutable_list_0 = module_0.ImmutableList(bytes_0)
    immutable_list_1 = immutable_list_0.__len__()
    immutable_list_0.find(bytes_0)


def test_case_20():
    bytes_0 = b"?\rZ\xa6\x94\xbd\x84:u\x95(O\x1d\x1a\x9b\xe5>*"
    immutable_list_0 = module_0.ImmutableList(bytes_0, is_empty=bytes_0)
    immutable_list_1 = immutable_list_0.append(bytes_0)
    bool_0 = immutable_list_1.__eq__(immutable_list_0)
    immutable_list_0.find(bytes_0)


def test_case_21():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(is_empty=none_type_0)
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    var_0 = immutable_list_1.__len__()
    immutable_list_1.find(immutable_list_0)


def test_case_22():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.__add__(immutable_list_0)
    var_0 = immutable_list_0.__len__()
    var_1 = immutable_list_1.find(var_0)
    str_0 = var_0.__str__()
    immutable_list_1.filter(str_0)
