# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import builtins as module_0
import flutils.namedtupleutils as module_1
import collections as module_2


def test_case_0():
    object_0 = module_0.object()
    module_1.to_namedtuple(object_0)


def test_case_1():
    bytes_0 = b"\x14\x8c\xdfS\xdd\xedN.\x1bs\xdf\xdf\xb1P\x9dG}\x86"
    bool_0 = True
    bytes_1 = b"\x1c"
    dict_0 = {bytes_0: bool_0}
    tuple_0 = (bool_0, bool_0, bytes_1, dict_0)
    tuple_1 = (bool_0, tuple_0)
    list_0 = [bytes_0, bool_0, tuple_1]
    tuple_2 = (bytes_0, bool_0, list_0, bytes_1)
    module_1.to_namedtuple(tuple_2)


def test_case_2():
    str_0 = "author"
    dict_0 = {str_0: str_0, str_0: str_0}
    var_0 = module_1.to_namedtuple(dict_0)
    var_1 = module_1.to_namedtuple(var_0)


def test_case_3():
    bytes_0 = b"d\n\xc5\x98R])#\x05\xcc"
    module_1.to_namedtuple(bytes_0)


def test_case_4():
    list_0 = []
    var_0 = module_1.to_namedtuple(list_0)


def test_case_5():
    ordered_dict_0 = module_2.OrderedDict()
    var_0 = module_1.to_namedtuple(ordered_dict_0)
    module_2.namedtuple(ordered_dict_0, var_0)


def test_case_6():
    str_0 = "author"
    dict_0 = {str_0: str_0, str_0: str_0}
    ordered_dict_0 = module_2.OrderedDict(**dict_0)
    var_0 = module_1.to_namedtuple(dict_0)
    tuple_0 = (ordered_dict_0, var_0, ordered_dict_0)
    var_1 = module_1.to_namedtuple(tuple_0)


def test_case_7():
    str_0 = ", cannot be a keyword"
    dict_0 = {str_0: str_0, str_0: str_0}
    set_0 = {str_0, str_0}
    var_0 = module_1.to_namedtuple(dict_0)
    var_1 = module_1.to_namedtuple(dict_0)
    var_2 = module_1.to_namedtuple(var_1)
    tuple_0 = (set_0, var_1, set_0)
    var_3 = module_1.to_namedtuple(var_1)
    var_4 = module_1.to_namedtuple(tuple_0)
    var_5 = module_1.to_namedtuple(var_0)


def test_case_8():
    str_0 = "Run the given command line command and return the command's\n    return code.\n\n    When the given ``command`` is executed, the command's stdout and\n    stderr outputs are captured in a pseudo terminal.  The captured\n    outputs are then added to this function's ``stdout`` and ``stderr``\n    IO objects.\n\n    This function will capture any ANSI escape codes in the output of\n    the given command.  This even includes ANSI colors.\n\n    Args:\n        command (str, List[str], Tuple[str]): The command to execute.\n        stdout (:obj:`typing.IO`, optional):  An input/output stream\n            that will hold the command's ``stdout``.  Defaults to:\n            :obj:`sys.stdout <sys.stdout>`; which will output\n            the command's ``stdout`` to the terminal.\n        stderr (:obj:`typing.IO`, optional):  An input/output stream\n            that will hold the command's ``stderr``.  Defaults to:\n            :obj:`sys.stderr <sys.stderr>`; which will output\n            the command's ``stderr`` to the terminal.\n        columns (int, optional): The number of character columns the pseudo\n            terminal may use.  If ``force_dimensions`` is :obj:`False`, this\n            will be the fallback columns value when the the current terminal's\n            column size cannot be found.  If ``force_dimensions`` is\n            :obj:`True`, this will be actual character column value.\n            Defaults to: ``80``.\n        lines (int, optional): The number of character lines the pseudo\n            terminal may use.  If ``force_dimensions`` is :obj:`False`, this\n            will be the fallback lines value when the the current terminal's\n            line size cannot be found.  If ``force_dimensions`` is :obj:`True`,\n            this will be actual character lines value.  Defaults to: ``24``.\n        force_dimensions (bool, optional): This controls how the given\n            ``columns`` and ``lines`` values are to be used.  A value of\n            :obj:`False` will use the given ``columns`` and ``lines`` as\n            fallback values if the current terminal dimensions cannot be\n            successfully queried.  A value of :obj:`True` will resize the\n            pseudo terminal using the given ``columns`` and ``lines`` values.\n            Defaults to: :obj:`False`.\n        interactive (bool, optional): A value of :obj:`True` will\n            interactively run the given ``command``.  Defaults to:\n            :obj:`False`.\n        **kwargs: Any additional key-word-arguments used with\n            :obj:`Popen <subprocess.Popen>`.  ``stdout`` and ``stderr``\n            will not be used if given in ``**default_kwargs``.  Defaults to:\n            ``{}``.\n\n    Returns:\n        int: The return value from running the given ``command``\n\n    Raises:\n        RuntimeError: When using ``interactive=True`` and the ``bash``\n            executable cannot be located.\n        OSError: Any errors raised when trying to read the pseudo terminal.\n\n    Example:\n        An example using :obj:`~flutils.cmdutils.run` in code::\n\n            from flutils.cmdutils import run\n            from io import BytesIO\n            import sys\n            import os\n\n            home = os.path.expanduser('~')\n            with BytesIO() as stream:\n                return_code = run(\n                    'ls \"%s\"' % home,\n                    stdout=stream,\n                    stderr=stream\n                )\n                text = stream.getvalue()\n            text = text.decode(sys.getdefaultencoding())\n            if return_code == 0:\n                print(text)\n            else:\n                print('Error: %s' % text)\n    "
    tuple_0 = (str_0,)
    list_0 = [tuple_0]
    list_1 = [list_0, tuple_0, list_0, list_0]
    var_0 = module_1.to_namedtuple(list_1)


def test_case_9():
    list_0 = []
    var_0 = module_1.to_namedtuple(list_0)
    list_1 = [list_0, list_0, list_0]
    var_1 = module_1.to_namedtuple(list_1)


def test_case_10():
    int_0 = -3781
    dict_0 = {int_0: int_0, int_0: int_0}
    var_0 = module_1.to_namedtuple(dict_0)
    str_0 = "eD\nLcH'T"
    module_1.to_namedtuple(str_0)


def test_case_11():
    str_0 = "autho "
    dict_0 = {str_0: str_0, str_0: str_0}
    ordered_dict_0 = module_2.OrderedDict(**dict_0)
    var_0 = module_1.to_namedtuple(ordered_dict_0)
    var_1 = module_1.to_namedtuple(ordered_dict_0)
    bytes_0 = b"X\xf2A!\xfeG\xf3UN\xd1\xde\x97\xe6\x9b"
    set_0 = {bytes_0, bytes_0}
    var_2 = module_1.to_namedtuple(var_1)
    module_1.to_namedtuple(set_0)
