# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1


def test_case_0():
    none_type_0 = None
    module_0.to_namedtuple(none_type_0)


def test_case_1():
    float_0 = 4615.408284
    set_0 = set()
    tuple_0 = (float_0, set_0)
    tuple_1 = (tuple_0, set_0)
    var_0 = module_0.to_namedtuple(tuple_1)


def test_case_2():
    str_0 = "directory_present"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_3():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_4():
    bytes_0 = b"?\xf4\xf5cs\xcb6\x10"
    module_0.to_namedtuple(bytes_0)


def test_case_5():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_6():
    complex_0 = -490.9091 + 4408.45j
    bytes_0 = b"\x0f\x81\xf8\xf6\xfc\xb7\x91\xf0'\x85\xbc\xdd\xf7\xde"
    dict_0 = {complex_0: bytes_0, bytes_0: complex_0}
    tuple_0 = (complex_0, bytes_0, dict_0)
    module_0.to_namedtuple(tuple_0)


def test_case_7():
    str_0 = "directory_present"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_8():
    str_0 = "Ensure the state of the given :obj:`path` is present and a directory.\n\n    This function processes the given ``path`` with\n    :obj:`~flutils.normalize_path`.\n\n    If the given ``path`` does **NOT** exist, it will be created as a\n    directory.\n\n    If the parent paths of the given ``path`` do not exist, they will also be\n    created with the ``mode``, ``user`` and ``group``.\n\n    If the given ``path`` does exist as a directory, the ``mode``, ``user``,\n    and :``group`` will be applied.\n\n    Args:\n        path (:obj:`str`, :obj:`bytes` or :obj:`Path <pathlib.Path>`):\n            The path of the directory.\n        mode (:obj:`int`, optional): The mode applied to the ``path``.\n            Defaults to ``0o700``.\n        user (:obj:`str` or :obj:`int`, optional): The \"login name\" used to\n            set the owner of the given ``path``.  A value of ``'-1'`` will\n            leave the owner unchanged.  Defaults to the \"login name\" of the\n            current user.\n        group (:obj:`str` or :obj:`int`, optional): The group name used to set\n            the group of the given ``path``.  A value of ``'-1'`` will leave\n            the group unchanged.  Defaults to the current user's group.\n\n    Raises:\n        ValueError: if the given ``path`` contains a glob pattern.\n        ValueError: if the given ``path`` is not an absolute path.\n        FileExistsError: if the given ``path`` exists and is not a directory.\n        FileExistsError: if a parent of the given ``path`` exists and is\n            not a directory.\n\n    :rtype: :obj:`Path <pathlib.Path>`\n\n        * :obj:`PosixPath <pathlib.PosixPath>` or\n          :obj:`WindowsPath <pathlib.WindowsPath>` depending on the system.\n\n        .. Note:: :obj:`Path <pathlib.Path>` objects are immutable. Therefore,\n           any given ``path`` of type :obj:`Path <pathlib.Path>` will not be\n           the same object returned.\n\n    Example:\n        >>> from flutils.pathutils import directory_present\n        >>> directory_present('~/tmp/test_path')\n        PosixPath('/Users/len/tmp/test_path')\n\n    "
    list_0 = [str_0, str_0, str_0, str_0]
    dict_0 = {str_0: list_0}
    tuple_0 = (list_0, dict_0)
    var_0 = module_0.to_namedtuple(tuple_0)
    var_1 = module_0.to_namedtuple(var_0)
    var_2 = module_0.to_namedtuple(var_0)
    str_1 = "h/]k&*\nv!q/ O$v5F"
    module_1.namedtuple(str_1, var_0)


def test_case_9():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    var_1 = module_0.to_namedtuple(var_0)
    bytes_0 = b"C{\x81\xf4\xec\x82\xa1\x04\x8b\xb9\\\xd4\xec\x1b\xff\xf5"
    module_0.to_namedtuple(bytes_0)


def test_case_10():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_11():
    dict_0 = {}
    list_0 = [dict_0, dict_0]
    list_1 = [list_0, list_0, list_0]
    var_0 = module_0.to_namedtuple(list_1)


def test_case_12():
    str_0 = "validate_identifier "
    list_0 = [str_0, str_0, str_0, str_0]
    dict_0 = {str_0: list_0}
    tuple_0 = (list_0, dict_0)
    var_0 = module_0.to_namedtuple(list_0)
    var_1 = module_0.to_namedtuple(tuple_0)
    int_0 = -1543
    var_2 = module_0.to_namedtuple(var_1)
    module_0.to_namedtuple(int_0)
