# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1


def test_case_0():
    none_type_0 = None
    module_0.to_namedtuple(none_type_0)


def test_case_1():
    int_0 = 20
    tuple_0 = (int_0,)
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_2():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_3():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_4():
    str_0 = "\tF"
    module_0.to_namedtuple(str_0)


def test_case_5():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_6():
    str_0 = "download_url"
    dict_0 = {str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_7():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_8():
    int_0 = -673
    bool_0 = False
    dict_0 = {int_0: bool_0}
    var_0 = module_0.to_namedtuple(dict_0)
    dict_1 = {var_0: int_0}
    var_1 = module_0.to_namedtuple(dict_1)
    var_2 = module_0.to_namedtuple(var_1)


def test_case_9():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_10():
    str_0 = "w{!nB?[RuZ)CG+12"
    bool_0 = False
    dict_0 = {bool_0: bool_0, str_0: bool_0, bool_0: bool_0}
    tuple_0 = (str_0, bool_0, dict_0, bool_0)
    var_0 = module_0.to_namedtuple(tuple_0)
    list_0 = []
    var_1 = module_0.to_namedtuple(list_0)
    var_2 = module_0.to_namedtuple(list_0)
    var_3 = module_0.to_namedtuple(var_0)
    var_4 = module_0.to_namedtuple(var_1)
    ordered_dict_0 = module_1.OrderedDict()
    var_5 = module_0.to_namedtuple(ordered_dict_0)
    var_6 = module_0.to_namedtuple(var_1)
    var_7 = module_0.to_namedtuple(var_6)
    bool_1 = False
    module_0.to_namedtuple(bool_1)


def test_case_11():
    bytes_0 = b"\xd7"
    dict_0 = {bytes_0: bytes_0}
    list_0 = [dict_0, dict_0]
    module_0.to_namedtuple(list_0)


def test_case_12():
    str_0 = " n=~a(hv Aw&ZZK"
    bool_0 = True
    str_1 = "RZ<Wf?["
    str_2 = "R\x0c"
    str_3 = " \t"
    dict_0 = {str_0: bool_0, str_1: bool_0, str_2: bool_0, str_3: str_2}
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    list_0 = [ordered_dict_0, bool_0]
    var_0 = module_0.to_namedtuple(list_0)
    none_type_0 = None
    module_0.to_namedtuple(none_type_0)
