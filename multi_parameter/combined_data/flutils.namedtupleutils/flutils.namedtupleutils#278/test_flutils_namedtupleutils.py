# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1


def test_case_0():
    bool_0 = True
    module_0.to_namedtuple(bool_0)


def test_case_1():
    int_0 = 80
    list_0 = [int_0, int_0]
    tuple_0 = (list_0,)
    var_0 = module_0.to_namedtuple(tuple_0)
    dict_0 = {}
    var_1 = module_0.to_namedtuple(dict_0)


def test_case_2():
    str_0 = "r"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_3():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_4():
    bytes_0 = b"\xa1\x9a\xbc1\xa9Z\x05\xb9\x98\x08\xa9X\xce\x10+"
    module_0.to_namedtuple(bytes_0)


def test_case_5():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_6():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    var_0 = module_0.to_namedtuple(dict_0)
    int_0 = 3380
    module_0.to_namedtuple(int_0)


def test_case_7():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_8():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_9():
    bytes_0 = b"J\xbf\xdf\xb2of\xcc\xb9+\x10y%\x98\xe2mz\xe5\x02\xe6\x1e"
    tuple_0 = (bytes_0, bytes_0)
    dict_0 = {tuple_0: tuple_0, bytes_0: tuple_0, tuple_0: tuple_0}
    tuple_1 = (tuple_0, tuple_0, dict_0)
    module_0.to_namedtuple(tuple_1)


def test_case_10():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_11():
    bool_0 = False
    str_0 = "d'5.iMH"
    bool_1 = False
    dict_0 = {bool_0: bool_0, bool_0: str_0, str_0: str_0, bool_1: bool_0}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_12():
    str_0 = "ry\n"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)
    var_2 = module_0.to_namedtuple(var_1)
    none_type_0 = None
    module_0.to_namedtuple(none_type_0)
