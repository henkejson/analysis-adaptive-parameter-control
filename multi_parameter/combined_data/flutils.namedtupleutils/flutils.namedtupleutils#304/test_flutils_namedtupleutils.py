# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1


def test_case_0():
    float_0 = -1188.225174
    module_0.to_namedtuple(float_0)


def test_case_1():
    none_type_0 = None
    list_0 = [none_type_0]
    var_0 = module_0.to_namedtuple(list_0)
    var_1 = module_0.to_namedtuple(list_0)


def test_case_2():
    str_0 = "decode"
    bool_0 = True
    dict_0 = {bool_0: bool_0, str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_3():
    bytes_0 = b"x\xfe\t\x18k\x083\x0c\xf5\x85\xf5\x1eK"
    module_0.to_namedtuple(bytes_0)


def test_case_4():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_5():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)
    var_1 = module_0.to_namedtuple(list_0)
    var_2 = module_1.OrderedDict(*list_0)
    var_3 = module_0.to_namedtuple(var_2)


def test_case_6():
    bytes_0 = b"q"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    list_0 = [bytes_0, dict_0]
    module_0.to_namedtuple(list_0)


def test_case_7():
    bool_0 = False
    str_0 = "l5TOyK^&R;Q-W5"
    tuple_0 = (bool_0, bool_0, str_0)
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_8():
    str_0 = "dec1\x0cjde"
    bool_0 = True
    dict_0 = {bool_0: bool_0, str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    list_0 = [var_0, var_0, var_0, var_0]
    var_1 = module_0.to_namedtuple(dict_0)
    var_2 = module_0.to_namedtuple(var_1)
    var_3 = module_0.to_namedtuple(list_0)
    var_4 = module_0.to_namedtuple(var_1)
    var_5 = module_0.to_namedtuple(var_3)
    var_6 = module_0.to_namedtuple(var_3)
    var_7 = module_0.to_namedtuple(list_0)
    var_8 = module_0.to_namedtuple(var_3)
    module_0.to_namedtuple(str_0)


def test_case_9():
    str_0 = "Y"
    str_1 = "\rEX\t"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_1}
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    var_0 = module_0.to_namedtuple(ordered_dict_0)
