# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1


def test_case_0():
    bool_0 = True
    module_0.to_namedtuple(bool_0)


def test_case_1():
    bool_0 = False
    set_0 = {bool_0}
    list_0 = [set_0, bool_0, set_0, bool_0]
    tuple_0 = (bool_0, set_0, list_0)
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_2():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_3():
    str_0 = "f.72UY8"
    module_0.to_namedtuple(str_0)


def test_case_4():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_5():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_6():
    str_0 = "run"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_7():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_8():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_9():
    bool_0 = False
    str_0 = "^VM&yi];|XUc75"
    dict_0 = {bool_0: bool_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    module_1.namedtuple(dict_0, bool_0)


def test_case_10():
    bytes_0 = b"\xed&H\x8e\xb1\xf9\xc3\x8d~\x17"
    int_0 = -383
    dict_0 = {int_0: bytes_0, bytes_0: int_0, bytes_0: bytes_0, bytes_0: int_0}
    tuple_0 = (bytes_0, int_0, dict_0, int_0)
    module_0.to_namedtuple(tuple_0)


def test_case_11():
    str_0 = "__attr_map__ must be a tuple containing strings."
    str_1 = "Y\n"
    list_0 = [str_0, str_1, str_0]
    dict_0 = {str_0: str_1, str_0: list_0, str_1: str_1}
    dict_1 = {str_0: str_0, str_0: str_0, str_1: dict_0}
    var_0 = module_0.to_namedtuple(dict_1)
    ordered_dict_0 = module_1.OrderedDict(**dict_1)
    module_1.namedtuple(var_0, ordered_dict_0)
