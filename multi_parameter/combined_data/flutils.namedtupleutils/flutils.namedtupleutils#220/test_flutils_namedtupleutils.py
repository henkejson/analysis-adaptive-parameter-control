# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import builtins as module_0
import flutils.namedtupleutils as module_1
import collections as module_2


def test_case_0():
    object_0 = module_0.object()
    module_1.to_namedtuple(object_0)


def test_case_1():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    var_0 = module_1.to_namedtuple(list_0)
    none_type_0 = None
    module_1.to_namedtuple(none_type_0)


def test_case_2():
    bytes_0 = b"n]N\x8a\xc2Ob\x86\xe7\x17{d`\xdf"
    module_1.to_namedtuple(bytes_0)


def test_case_3():
    tuple_0 = ()
    ordered_dict_0 = module_1.to_namedtuple(tuple_0)


def test_case_4():
    str_0 = ", cannot start with a number"
    list_0 = [str_0]
    var_0 = module_1.to_namedtuple(list_0)


def test_case_5():
    list_0 = []
    var_0 = module_1.to_namedtuple(list_0)


def test_case_6():
    str_0 = "R"
    dict_0 = {str_0: str_0, str_0: str_0}
    var_0 = module_1.to_namedtuple(dict_0)
    var_1 = module_1.to_namedtuple(var_0)


def test_case_7():
    ordered_dict_0 = module_2.OrderedDict()
    var_0 = module_1.to_namedtuple(ordered_dict_0)


def test_case_8():
    str_0 = "R"
    str_1 = "\x0bLf(<JkQ\nT3z"
    dict_0 = {str_0: str_0, str_1: str_1}
    var_0 = module_1.to_namedtuple(dict_0)
    var_1 = module_1.to_namedtuple(var_0)
    module_2.namedtuple(var_1, var_0, module=var_1)


def test_case_9():
    ordered_dict_0 = module_2.OrderedDict()
    var_0 = module_1.to_namedtuple(ordered_dict_0)
    var_1 = module_1.to_namedtuple(var_0)


def test_case_10():
    dict_0 = {}
    var_0 = module_1.to_namedtuple(dict_0)


def test_case_11():
    object_0 = module_0.object()
    bytes_0 = b"n]N\x8a\xc2Ob\x86\xe7\x17{d`\xdf"
    str_0 = ':rhr"euS'
    dict_0 = {object_0: object_0, bytes_0: object_0, object_0: bytes_0, bytes_0: str_0}
    module_1.to_namedtuple(dict_0)


def test_case_12():
    str_0 = "/-)_.mWWO;'o +"
    str_1 = "\t\x0cxFV"
    str_2 = "\x0b>])-JHM9tSi+^|H}\x0c/#"
    dict_0 = {str_0: str_0, str_1: str_2}
    ordered_dict_0 = module_1.to_namedtuple(dict_0)
    module_1.to_namedtuple(str_0)
