# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1


def test_case_0():
    bool_0 = True
    module_0.to_namedtuple(bool_0)


def test_case_1():
    complex_0 = -2084 + 1105.5j
    tuple_0 = (complex_0,)
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_2():
    str_0 = "j~"
    dict_0 = {str_0: str_0}
    tuple_0 = (dict_0,)
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_3():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_4():
    str_0 = "j~"
    module_0.to_namedtuple(str_0)


def test_case_5():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_6():
    str_0 = "PPL"
    tuple_0 = ()
    dict_0 = {str_0: str_0, str_0: tuple_0, str_0: str_0, tuple_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_7():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_8():
    str_0 = "ohv>{UuAfS_8N"
    list_0 = [str_0, str_0, str_0]
    var_0 = module_0.to_namedtuple(list_0)


def test_case_9():
    str_0 = "PPL"
    tuple_0 = ()
    dict_0 = {str_0: str_0, str_0: tuple_0, str_0: str_0, tuple_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_10():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    var_0 = module_0.to_namedtuple(dict_0)
    bytes_0 = b"/\\\xa9,\xcd\x8a\xd9\xc6|\xbb\x82\x90\x94\xdb\xef\xd6\xde"
    tuple_0 = (var_0, bytes_0)
    tuple_1 = (bool_0, tuple_0, var_0)
    var_1 = module_0.to_namedtuple(tuple_1)
    var_2 = module_0.to_namedtuple(var_1)


def test_case_11():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_12():
    float_0 = -624.50792
    set_0 = {float_0, float_0}
    dict_0 = {float_0: float_0, float_0: set_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)
    var_2 = module_0.to_namedtuple(var_1)
    bytes_0 = b"o\xe4\xae?|g\xe23\xdc\x9b\x1b\x84\xa6\x8c{"
    dict_1 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    list_0 = [dict_1]
    module_0.to_namedtuple(list_0)


def test_case_13():
    set_0 = set()
    str_0 = "cR\n"
    dict_0 = {str_0: set_0, str_0: set_0}
    var_0 = module_0.to_namedtuple(dict_0)
    tuple_0 = (set_0, set_0, str_0, dict_0)
    var_1 = module_0.to_namedtuple(tuple_0)
    str_1 = "1M*4"
    int_0 = 1
    var_2 = module_0.to_namedtuple(tuple_0)
    tuple_1 = (var_1, int_0)
    int_1 = 4306
    dict_1 = {str_1: tuple_1, int_1: int_0, int_0: tuple_1}
    tuple_2 = (dict_1, var_0, var_0)
    var_3 = module_0.to_namedtuple(tuple_2)
    tuple_3 = ()
    var_4 = module_0.to_namedtuple(tuple_3)
    var_5 = module_0.to_namedtuple(var_4)
    var_6 = module_0.to_namedtuple(dict_0)
    list_0 = [var_5]
    var_7 = module_0.to_namedtuple(list_0)
    module_1.namedtuple(tuple_2, list_0, defaults=tuple_1, module=set_0)
