# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1


def test_case_0():
    bool_0 = True
    module_0.to_namedtuple(bool_0)


def test_case_1():
    list_0 = []
    str_0 = "python_requires"
    dict_0 = {str_0: str_0, str_0: list_0, str_0: str_0, str_0: list_0}
    var_0 = module_1.namedtuple(str_0, dict_0)
    list_1 = [var_0, list_0, dict_0]
    var_1 = module_0.to_namedtuple(list_1)
    var_2 = module_0.to_namedtuple(var_1)


def test_case_2():
    str_0 = "pyhon_reuires"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_3():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_4():
    str_0 = "c[o.EQ;dqMKgK\n?\\n+P"
    module_0.to_namedtuple(str_0)


def test_case_5():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_6():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    var_0 = module_0.to_namedtuple(dict_0)
    int_0 = 8
    module_0.to_namedtuple(int_0)


def test_case_7():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_8():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_9():
    bytes_0 = b"\xef:\xea"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.to_namedtuple(dict_0)


def test_case_10():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_11():
    bytes_0 = b"\xbfi\x04\xe2\xe2F\x86\xb1\x87=p\x9f\xebY\x1ds\x01"
    tuple_0 = (bytes_0,)
    var_0 = module_0.to_namedtuple(tuple_0)
    list_0 = []
    var_1 = module_0.to_namedtuple(list_0)


def test_case_12():
    list_0 = []
    str_0 = "python_requires"
    str_1 = "__attr_map__ contains an invalid item of: "
    dict_0 = {str_0: str_0, str_0: list_0, str_0: str_0, str_1: list_0}
    ordered_dict_0 = module_1.OrderedDict(*list_0, **dict_0)
    var_0 = module_0.to_namedtuple(list_0)
    var_1 = module_0.to_namedtuple(var_0)
    list_1 = [var_0, list_0, ordered_dict_0, dict_0]
    var_2 = module_0.to_namedtuple(list_1)


def test_case_13():
    list_0 = []
    str_0 = "python_requires"
    str_1 = " Ye2jl2u"
    dict_0 = {str_0: str_0, str_0: list_0, str_0: str_0, str_1: list_0}
    var_0 = module_0.to_namedtuple(list_0)
    ordered_dict_0 = module_1.OrderedDict(*list_0, **dict_0)
    list_1 = [ordered_dict_0, list_0, dict_0]
    var_1 = module_0.to_namedtuple(list_1)
    set_0 = set()
    list_2 = [set_0, set_0]
    var_2 = module_0.to_namedtuple(list_2)
    var_3 = module_0.to_namedtuple(var_1)
    var_4 = module_0.to_namedtuple(list_1)
