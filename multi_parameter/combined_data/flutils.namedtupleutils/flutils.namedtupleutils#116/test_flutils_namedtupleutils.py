# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import builtins as module_1
import collections as module_2


def test_case_0():
    int_0 = 1148
    module_0.to_namedtuple(int_0)


def test_case_1():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    tuple_0 = (object_0, dict_0, dict_0)
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_2():
    str_0 = "iOf"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_3():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_4():
    bytes_0 = b"\x850w5"
    module_0.to_namedtuple(bytes_0)


def test_case_5():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_6():
    str_0 = "is_subclass_of_any"
    dict_0 = {str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    ordered_dict_0 = module_2.OrderedDict()
    var_1 = module_0.to_namedtuple(var_0)
    var_2 = module_0.to_namedtuple(ordered_dict_0)
    tuple_0 = (var_1, var_0)
    var_3 = module_0.to_namedtuple(tuple_0)


def test_case_7():
    dict_0 = {}
    tuple_0 = module_0.to_namedtuple(dict_0)
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_8():
    str_0 = "@a1~d"
    list_0 = [str_0, str_0]
    dict_0 = {str_0: str_0, str_0: list_0}
    tuple_0 = (dict_0, list_0)
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_9():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0]
    var_0 = module_0.to_namedtuple(list_0)


def test_case_10():
    str_0 = "8d\x0ba)C28"
    bool_0 = False
    dict_0 = {str_0: str_0, str_0: bool_0, str_0: bool_0, bool_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    module_2.namedtuple(dict_0, bool_0)


def test_case_11():
    bytes_0 = b";\x80bt\x08\x9b\x9e\x04WB\x9b\x84=\xa3,\xe8"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    tuple_0 = (dict_0, dict_0, dict_0)
    module_0.to_namedtuple(tuple_0)


def test_case_12():
    str_0 = "is_subclMass_of_an\t"
    dict_0 = {str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    ordered_dict_0 = module_2.OrderedDict()
    var_1 = module_0.to_namedtuple(ordered_dict_0)
    var_2 = module_0.to_namedtuple(ordered_dict_0)
    float_0 = 851.4494977274204
    tuple_0 = (var_1, float_0)
    var_3 = module_0.to_namedtuple(tuple_0)
    module_2.namedtuple(dict_0, var_2, rename=dict_0)
