# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1


def test_case_0():
    bool_0 = True
    module_0.to_namedtuple(bool_0)


def test_case_1():
    bool_0 = True
    int_0 = 563
    set_0 = {int_0, int_0, int_0, bool_0}
    list_0 = [bool_0, bool_0, set_0, bool_0]
    tuple_0 = (list_0, int_0, list_0)
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_2():
    bytes_0 = b"\n"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    tuple_0 = (dict_0,)
    module_0.to_namedtuple(tuple_0)


def test_case_3():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_4():
    bytes_0 = b"8S ^\xdcka\xfe\x1d\x8b\xfb\x83\x9b\x03\xfa\x86\xba{"
    module_0.to_namedtuple(bytes_0)


def test_case_5():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_6():
    str_0 = "patch"
    dict_0 = {str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_7():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_8():
    str_0 = "$8"
    list_0 = [str_0, str_0]
    dict_0 = {str_0: list_0, str_0: list_0}
    bool_0 = False
    tuple_0 = (bool_0, list_0)
    var_0 = module_0.to_namedtuple(tuple_0)
    var_1 = module_0.to_namedtuple(dict_0)
    var_2 = module_0.to_namedtuple(var_1)
    list_1 = [var_2, list_0]
    var_3 = module_0.to_namedtuple(list_0)
    var_4 = module_0.to_namedtuple(list_1)
    module_0.to_namedtuple(str_0)


def test_case_9():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_10():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    var_0 = module_0.to_namedtuple(tuple_1)


def test_case_11():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    var_0 = module_0.to_namedtuple(dict_0)
    module_0.to_namedtuple(bool_0)


def test_case_12():
    str_0 = "j "
    list_0 = [str_0, str_0, str_0]
    dict_0 = {str_0: list_0, str_0: list_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)
    list_1 = [var_1, list_0]
    var_2 = module_0.to_namedtuple(list_1)
    none_type_0 = None
    module_0.to_namedtuple(none_type_0)
