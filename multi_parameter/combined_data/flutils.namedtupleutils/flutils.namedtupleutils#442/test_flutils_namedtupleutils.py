# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import builtins as module_1
import collections as module_2


def test_case_0():
    none_type_0 = None
    module_0.to_namedtuple(none_type_0)


def test_case_1():
    str_0 = "JVH8zCG"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)
    object_0 = module_1.object()
    bool_0 = True
    list_0 = [bool_0, object_0]
    var_2 = module_0.to_namedtuple(list_0)
    module_0.to_namedtuple(bool_0)


def test_case_2():
    str_0 = "JVH8zCG"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_3():
    ordered_dict_0 = module_2.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_4():
    bytes_0 = b"(\x04\xcf\xc2\x8c\x17V\x84"
    module_0.to_namedtuple(bytes_0)


def test_case_5():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_6():
    str_0 = ", cannot start with an underscore '_'"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)
    var_2 = module_0.to_namedtuple(var_0)
    var_3 = module_0.to_namedtuple(var_2)
    var_4 = module_0.to_namedtuple(var_3)


def test_case_7():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_8():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)
    list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
    var_1 = module_0.to_namedtuple(list_0)
    var_2 = module_0.to_namedtuple(tuple_0)
    var_3 = module_0.to_namedtuple(list_0)
    var_4 = module_0.to_namedtuple(var_3)
    var_5 = module_0.to_namedtuple(list_0)


def test_case_9():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_10():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    var_0 = module_0.to_namedtuple(dict_0)
    str_0 = ", cannot start with an underscore '_'"
    str_1 = "The given 'command' must be of type: str, List[str] or Tuple[str]."
    dict_1 = {str_0: str_0, str_0: str_0, str_0: str_0, str_1: str_1, str_0: str_0}
    var_1 = module_0.to_namedtuple(dict_1)
    var_2 = module_0.to_namedtuple(var_1)
    bool_1 = True
    list_0 = [var_1, var_1, str_0]
    var_3 = module_0.to_namedtuple(list_0)
    var_4 = module_0.to_namedtuple(var_3)
    var_5 = module_0.to_namedtuple(dict_1)
    module_0.to_namedtuple(bool_1)


def test_case_11():
    str_0 = "JVH8zCG"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    bytes_0 = b"\xe5"
    var_1 = module_0.to_namedtuple(var_0)
    dict_1 = {bytes_0: bytes_0, var_1: bytes_0, var_1: bytes_0}
    var_2 = module_0.to_namedtuple(var_1)
    module_0.to_namedtuple(dict_1)


def test_case_12():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    list_0 = [dict_0, bool_0, bool_0]
    var_0 = module_0.to_namedtuple(list_0)
    str_0 = "\x0bVH8zWG"
    dict_1 = {str_0: str_0, str_0: str_0, str_0: str_0}
    var_1 = module_0.to_namedtuple(dict_1)
    none_type_0 = None
    module_2.namedtuple(none_type_0, bool_0)
