# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1


def test_case_0():
    none_type_0 = None
    module_0.to_namedtuple(none_type_0)


def test_case_1():
    int_0 = -1134
    dict_0 = {int_0: int_0}
    var_0 = module_0.to_namedtuple(dict_0)
    tuple_0 = (int_0, dict_0, var_0, var_0)
    list_0 = [tuple_0, tuple_0, int_0]
    var_1 = module_0.to_namedtuple(list_0)


def test_case_2():
    str_0 = "Tr"
    bool_0 = True
    dict_0 = {str_0: str_0, bool_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_3():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_4():
    bytes_0 = b"\x83=\xec\x96\xab\x8a\x99J\xda\xd9\xe0\xfd\xe3"
    module_0.to_namedtuple(bytes_0)


def test_case_5():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_6():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_7():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_8():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)
    var_1 = module_0.to_namedtuple(tuple_0)
    tuple_1 = (tuple_0,)
    var_2 = module_0.to_namedtuple(tuple_1)


def test_case_9():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_10():
    str_0 = "jP+y|f}\r"
    complex_0 = 463.94632 - 3022.3j
    bytes_0 = b"x"
    dict_0 = {str_0: str_0, complex_0: complex_0, str_0: str_0, complex_0: bytes_0}
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    bool_0 = True
    list_0 = [bool_0]
    ordered_dict_1 = module_1.OrderedDict()
    float_0 = 95.6725
    tuple_0 = (ordered_dict_1, ordered_dict_1, var_0, ordered_dict_1)
    var_1 = module_0.to_namedtuple(list_0)
    var_2 = module_0.to_namedtuple(tuple_0)
    module_1.OrderedDict(*float_0)


def test_case_11():
    bytes_0 = b"\x83\x82a%d"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.to_namedtuple(dict_0)


def test_case_12():
    str_0 = "Tr"
    bool_0 = True
    dict_0 = {str_0: str_0, bool_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_13():
    str_0 = "\tqHIf"
    complex_0 = 463.94632 - 3022.3j
    bytes_0 = b"x\x82"
    dict_0 = {str_0: str_0, complex_0: complex_0, str_0: str_0, complex_0: bytes_0}
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    bool_0 = False
    dict_1 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    bool_1 = False
    list_0 = [bool_0]
    bool_2 = False
    bool_3 = True
    var_1 = module_0.to_namedtuple(var_0)
    ordered_dict_1 = module_1.OrderedDict()
    float_0 = -613.17
    tuple_0 = (bool_1, var_0, ordered_dict_1, float_0)
    list_1 = [bool_2, bool_3]
    tuple_1 = (dict_1, dict_1, tuple_0, list_1)
    var_2 = module_0.to_namedtuple(list_0)
    var_3 = module_0.to_namedtuple(tuple_1)
    none_type_0 = None
    module_0.to_namedtuple(none_type_0)
