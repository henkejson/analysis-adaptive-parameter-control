# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1


def test_case_0():
    float_0 = -1346.061191
    module_0.to_namedtuple(float_0)


def test_case_1():
    bool_0 = True
    str_0 = "VPGRCVy"
    dict_0 = {bool_0: bool_0, str_0: bool_0, bool_0: bool_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_2():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_3():
    str_0 = "^!F5q,w?39z>e(T"
    module_0.to_namedtuple(str_0)


def test_case_4():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_5():
    bool_0 = True
    str_0 = "VPGRCVy"
    bytes_0 = b"p\xfc\x16\x9e\xe9\xcd\x89\xab\xdaS\xeeRn\x1e"
    dict_0 = {bool_0: bool_0, str_0: bytes_0, bool_0: bool_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_6():
    bool_0 = True
    str_0 = "Check if the given ``obj`` has **ANY** of the given ``attrs`` and are\n    callable.\n\n    Args:\n        obj (:obj:`Any <typing.Any>`): The object to check.\n        *attrs (:obj:`str`): The names of the attributes to check.\n\n    :rtype:\n        :obj:`bool`\n\n        * :obj:`True` if ANY of the given ``*attrs`` exist on the given ``obj``\n          and ANY are callable;\n        * :obj:`False` otherwise.\n\n    Example:\n        >>> from flutils.objutils import has_any_callables\n        >>> has_any_callables(dict(),'get','keys','items','values','foo')\n        True\n    "
    str_1 = "VPGRCVy"
    bytes_0 = b"p\xfc\x16\x9e\xe9\xcd\x89\xab\xdaS\xeeRn\x1e"
    dict_0 = {str_0: bool_0, str_1: bytes_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_7():
    bytes_0 = b"[\xc5\xb1aWl\x85\x90\x0e\xe6\xe8"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.to_namedtuple(dict_0)


def test_case_8():
    var_0 = module_1.OrderedDict()
    none_type_0 = None
    var_1 = module_0.to_namedtuple(var_0)
    var_2 = module_0.to_namedtuple(var_1)
    module_0.to_namedtuple(none_type_0)


def test_case_9():
    bool_0 = False
    int_0 = 2
    list_0 = [int_0, bool_0]
    complex_0 = -601.707 + 923.885j
    tuple_0 = (bool_0, bool_0, list_0, complex_0)
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_10():
    bool_0 = True
    str_0 = "Check if the given ``obj`` has **ANY** of the given ``attrs`` and are\n    callable.\n\n    Args:\n        obj (:obj:`Any <typing.Any>`): The object to check.\n        *attrs (:obj:`str`): The names of the attributes to check.\n\n    :rtype:\n        :obj:`bool`\n\n        * :obj:`True` if ANY of the given ``*attrs`` exist on the given ``obj``\n          and ANY are callable;\n        * :obj:`False` otherwise.\n\n    Example:\n        >>> from flutils.objutils import has_any_callables\n        >>> has_any_callables(dict(),'get','keys','items','values','foo')\n        True\n    "
    str_1 = "KHZxF24\n"
    bytes_0 = b"p\xfc\x16\x9e\xe9\xcd\x89\xab\xdaS\xeeRn\x1e"
    str_2 = "The given 'setup_dir' of %r does NOT exist."
    dict_0 = {str_0: bool_0, str_1: bytes_0, str_2: str_0}
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    tuple_0 = (ordered_dict_0, dict_0, bool_0)
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    tuple_1 = (bool_0, bool_0, bool_0, tuple_0)
    var_1 = module_0.to_namedtuple(tuple_1)
    var_2 = module_0.to_namedtuple(ordered_dict_0)
    list_0 = [var_2, var_2]
    var_3 = module_0.to_namedtuple(list_0)
