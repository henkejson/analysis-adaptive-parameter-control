# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import builtins as module_0
import flutils.namedtupleutils as module_1
import collections as module_2


def test_case_0():
    object_0 = module_0.object()
    module_1.to_namedtuple(object_0)


def test_case_1():
    bytes_0 = b"#\xdeH\xb5\x1b\x99\x93~\xf4\x12\xa5\xfbR\xbf/\x98\xae$"
    int_0 = 811
    tuple_0 = (bytes_0, int_0, int_0)
    set_0 = {tuple_0, tuple_0, bytes_0}
    str_0 = "$kMI\x0c?0}03X"
    tuple_1 = (set_0, str_0, tuple_0)
    var_0 = module_1.to_namedtuple(tuple_1)
    var_1 = module_1.to_namedtuple(var_0)


def test_case_2():
    ordered_dict_0 = module_2.OrderedDict()
    var_0 = module_1.to_namedtuple(ordered_dict_0)


def test_case_3():
    bytes_0 = b"\xe6\xdbd\xc8\xd8\xafG\xb8\xeb"
    module_1.to_namedtuple(bytes_0)


def test_case_4():
    tuple_0 = ()
    var_0 = module_1.to_namedtuple(tuple_0)


def test_case_5():
    dict_0 = {}
    var_0 = module_1.to_namedtuple(dict_0)


def test_case_6():
    str_0 = "Parse the given tuple, with each row containing a :term:`foreign-name`\n    and return info needed for the cherry-picking-module.\n    "
    list_0 = [str_0, str_0, str_0]
    var_0 = module_1.to_namedtuple(list_0)


def test_case_7():
    ordered_dict_0 = module_2.OrderedDict()
    var_0 = module_1.to_namedtuple(ordered_dict_0)
    var_1 = module_1.to_namedtuple(var_0)


def test_case_8():
    list_0 = []
    var_0 = module_1.to_namedtuple(list_0)


def test_case_9():
    str_0 = "\x0bHkBRjS`w[JL"
    dict_0 = {str_0: str_0}
    var_0 = module_1.to_namedtuple(dict_0)
    var_1 = module_1.to_namedtuple(var_0)


def test_case_10():
    ordered_dict_0 = module_2.OrderedDict()
    tuple_0 = (ordered_dict_0, ordered_dict_0, ordered_dict_0)
    object_0 = module_0.object()
    var_0 = module_1.to_namedtuple(ordered_dict_0)
    list_0 = [ordered_dict_0, object_0]
    var_1 = module_1.to_namedtuple(list_0)
    var_2 = module_1.to_namedtuple(tuple_0)
    str_0 = "`\x0c\rrW$u+uD"
    dict_0 = {str_0: str_0, object_0: object_0, var_2: var_2}
    var_3 = module_1.to_namedtuple(dict_0)
    var_4 = module_1.to_namedtuple(tuple_0)
    var_5 = module_1.to_namedtuple(var_2)


def test_case_11():
    str_0 = "LMVo"
    dict_0 = {str_0: str_0}
    var_0 = module_1.to_namedtuple(dict_0)
    var_1 = module_1.to_namedtuple(var_0)


def test_case_12():
    str_0 = "LMVo"
    bool_0 = False
    bytes_0 = b"z\x1c"
    tuple_0 = (bool_0, bytes_0, bool_0)
    dict_0 = {str_0: str_0, str_0: tuple_0}
    var_0 = module_1.to_namedtuple(dict_0)
    var_1 = module_1.to_namedtuple(var_0)
    var_2 = module_1.to_namedtuple(var_1)
    var_3 = module_1.to_namedtuple(var_1)
    var_4 = module_1.to_namedtuple(var_1)
    var_5 = module_1.to_namedtuple(var_0)
    var_6 = module_1.to_namedtuple(var_1)
    var_7 = module_1.to_namedtuple(var_2)
    var_8 = module_1.to_namedtuple(var_2)
    var_9 = module_1.to_namedtuple(var_0)
    var_10 = module_1.to_namedtuple(var_7)
    var_11 = module_1.to_namedtuple(var_6)
    var_12 = module_1.to_namedtuple(var_8)
    bytes_1 = b"\x034\xcey\x98\xcb\x93\xde"
    var_13 = module_1.to_namedtuple(var_6)
    dict_1 = {var_8: var_1, bytes_1: var_3}
    module_1.to_namedtuple(dict_1)


def test_case_13():
    str_0 = " M_o"
    bool_0 = False
    bytes_0 = b"z\x1c"
    tuple_0 = (bool_0, bytes_0, bool_0)
    dict_0 = {str_0: str_0, str_0: tuple_0}
    var_0 = module_1.to_namedtuple(dict_0)
    var_1 = module_1.to_namedtuple(var_0)
    module_2.namedtuple(var_0, str_0, rename=var_1)
