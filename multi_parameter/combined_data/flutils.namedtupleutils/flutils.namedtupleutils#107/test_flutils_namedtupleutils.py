# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1


def test_case_0():
    none_type_0 = None
    module_0.to_namedtuple(none_type_0)


def test_case_1():
    str_0 = "b"
    dict_0 = {str_0: str_0}
    int_0 = 24
    tuple_0 = (dict_0, dict_0, dict_0, int_0)
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_2():
    str_0 = "b"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_3():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_4():
    str_0 = '\x0c2_3&~^"w&Ks'
    module_0.to_namedtuple(str_0)


def test_case_5():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_6():
    bool_0 = True
    dict_0 = {
        bool_0: bool_0,
        bool_0: bool_0,
        bool_0: bool_0,
        bool_0: bool_0,
        bool_0: bool_0,
        bool_0: bool_0,
        bool_0: bool_0,
    }
    var_0 = module_0.to_namedtuple(dict_0)
    ordered_dict_0 = module_1.OrderedDict()
    var_1 = module_0.to_namedtuple(var_0)
    var_2 = module_0.to_namedtuple(var_0)
    var_3 = module_0.to_namedtuple(ordered_dict_0)
    module_1.namedtuple(var_1, bool_0, defaults=var_3)


def test_case_7():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    var_1 = module_0.to_namedtuple(var_0)
    var_2 = module_0.to_namedtuple(var_0)


def test_case_8():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_9():
    str_0 = "b"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_10():
    str_0 = "6sy??c=DX\t5vCfJo"
    dict_0 = {str_0: str_0}
    int_0 = 24
    tuple_0 = (dict_0, dict_0, dict_0, int_0)
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_11():
    bytes_0 = b"M\xcbX}\xd0"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.to_namedtuple(dict_0)


def test_case_12():
    tuple_0 = ()
    str_0 = " N"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)
    tuple_1 = (var_0, var_0)
    bytes_0 = b"qnY\xa5\x9c\xc5\xf2\x12\x16G<\xdaX\x8c\xef"
    bytes_1 = b"\\\xf6\xe3\x02\xdd\x15\xad\xd2\x18\xbb\xda\xa4]\xc4"
    tuple_2 = (tuple_1, bytes_0, bytes_1, tuple_1)
    var_2 = module_0.to_namedtuple(tuple_0)
    var_3 = module_0.to_namedtuple(tuple_2)
    var_4 = module_0.to_namedtuple(var_3)
    complex_0 = -832.5 - 4410j
    module_0.to_namedtuple(complex_0)
