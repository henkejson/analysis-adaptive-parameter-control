# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1
import builtins as module_2


def test_case_0():
    int_0 = 444
    module_0.to_namedtuple(int_0)


def test_case_1():
    str_0 = "Used with map() to expand foreign-names into a named tuple.\n\n    See the :term:`foreign-name` documentation for the format of this string.\n\n    The tuple contains three parts:\n\n    - attr_name: If applicable, the attribute identifier that will be\n      set on the cherry-picking module.\n    - mod_name: The fullname of the module to be cherry-picked.\n    - mod_attr_name: If applicable the attribute identifier on the\n        cherry-picked module that will be bound to the ``attr_name``.\n        An empty str value indicates that the entire module will be used.\n    "
    set_0 = {str_0}
    tuple_0 = (str_0, set_0, set_0)
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_2():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_3():
    str_0 = "2UD"
    module_0.to_namedtuple(str_0)


def test_case_4():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_5():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_6():
    str_0 = "U9o"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_7():
    dict_0 = {}
    list_0 = [dict_0, dict_0]
    var_0 = module_0.to_namedtuple(list_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_8():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_9():
    bytes_0 = b"\xb4\xe9\x01\xe2BC\x90.!\xeb].*Q\xe1\x05Z+"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.to_namedtuple(dict_0)


def test_case_10():
    str_0 = "9"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    int_0 = 1822
    tuple_0 = (dict_0, str_0, int_0, int_0)
    var_0 = module_0.to_namedtuple(tuple_0)
    dict_1 = module_1.OrderedDict()
    module_0.to_namedtuple(str_0)


def test_case_11():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(dict_0)
    var_2 = module_0.to_namedtuple(var_0)
    var_3 = module_0.to_namedtuple(dict_0)
    tuple_0 = ()
    var_4 = module_0.to_namedtuple(tuple_0)
    var_5 = module_0.to_namedtuple(dict_0)
    bool_0 = True
    var_6 = module_0.to_namedtuple(var_0)
    dict_1 = {bool_0: bool_0}
    var_7 = module_0.to_namedtuple(dict_1)
    var_8 = module_0.to_namedtuple(dict_1)
    var_9 = module_0.to_namedtuple(var_8)
    var_10 = module_0.to_namedtuple(dict_1)
    dict_2 = {}
    var_11 = module_0.to_namedtuple(var_0)
    var_12 = module_0.to_namedtuple(var_7)
    var_13 = module_0.to_namedtuple(dict_2)
    int_0 = 3551
    var_14 = module_0.to_namedtuple(var_6)
    var_15 = module_0.to_namedtuple(var_0)
    module_0.to_namedtuple(int_0)


def test_case_12():
    str_0 = "\ro"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    tuple_0 = module_0.to_namedtuple(dict_0)
    var_0 = module_0.to_namedtuple(tuple_0)
    var_1 = module_0.to_namedtuple(tuple_0)
    var_2 = module_0.to_namedtuple(var_0)
    var_3 = module_0.to_namedtuple(var_2)
    var_4 = module_0.to_namedtuple(dict_0)
    var_5 = module_0.to_namedtuple(var_3)
    object_0 = module_2.object()
    module_0.to_namedtuple(object_0)
