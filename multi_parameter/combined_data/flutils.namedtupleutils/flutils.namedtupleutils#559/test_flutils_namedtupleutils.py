# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1


def test_case_0():
    none_type_0 = None
    module_0.to_namedtuple(none_type_0)


def test_case_1():
    float_0 = 3561.527664
    bool_0 = True
    bool_1 = True
    list_0 = [bool_0, bool_1]
    tuple_0 = (float_0, bool_0, list_0)
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_2():
    bytes_0 = b"C\x98\xaeE\xe2\xef>\x0b\xc7"
    dict_0 = {bytes_0: bytes_0}
    module_0.to_namedtuple(dict_0)


def test_case_3():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_4():
    str_0 = ", cannot be a keyword"
    module_0.to_namedtuple(str_0)


def test_case_5():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_6():
    float_0 = -2846.3421
    str_0 = "CBqn::&hQc:J>l("
    bool_0 = True
    str_1 = "Q\x0c"
    str_2 = "2|}%||^"
    dict_0 = {str_0: bool_0, float_0: bool_0, str_1: float_0, str_2: str_2}
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    var_1 = module_0.to_namedtuple(var_0)
    module_0.to_namedtuple(str_1)


def test_case_7():
    bool_0 = False
    str_0 = "Qj"
    dict_0 = {str_0: bool_0, str_0: bool_0, str_0: str_0, str_0: str_0}
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_8():
    str_0 = "%/<(=TE+r>@5M"
    list_0 = []
    list_1 = [str_0, list_0, str_0, list_0]
    var_0 = module_0.to_namedtuple(list_1)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_9():
    bool_0 = True
    str_0 = "2|}%||^"
    dict_0 = {str_0: bool_0, str_0: bool_0, str_0: str_0, str_0: str_0}
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    var_1 = module_0.to_namedtuple(var_0)
    none_type_0 = None
    module_0.to_namedtuple(none_type_0)


def test_case_10():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_11():
    str_0 = "CBqn::&hQc:J>l("
    bool_0 = True
    str_1 = "The cherry-picking module attribute identifiers as the key. And the\n    value is the module name, which should be the key in ``modules``\n    "
    str_2 = "Q\x0c"
    str_3 = "2|}%||^"
    dict_0 = {str_0: bool_0, str_1: bool_0, str_2: str_1, str_3: str_3}
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    var_1 = module_0.to_namedtuple(var_0)
    none_type_0 = None
    module_0.to_namedtuple(none_type_0)
