# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1


def test_case_0():
    int_0 = 6
    module_0.to_namedtuple(int_0)


def test_case_1():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    var_0 = module_0.to_namedtuple(list_0)


def test_case_2():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_3():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_4():
    bytes_0 = b"\x90\xbcO\xf1\xb2-\xaeI\x19\xa8\xd8`r\xe4\xcd*"
    module_0.to_namedtuple(bytes_0)


def test_case_5():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_6():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_7():
    str_0 = "rk0NuT7at7"
    dict_0 = {str_0: str_0, str_0: str_0}
    tuple_0 = module_0.to_namedtuple(dict_0)


def test_case_8():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_9():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_10():
    bytes_0 = b"\xef@\x88VM\xcb\x91\x105v\x12\xcc\xa7"
    set_0 = set()
    dict_0 = {bytes_0: bytes_0, bytes_0: set_0, bytes_0: set_0}
    module_0.to_namedtuple(dict_0)


def test_case_11():
    str_0 = "Wraps the single paragraph in the given ``text`` so every line is\n        at most ``width`` characters long. All wrapping options are taken\n        from instance attributes of the\n        :obj:`~flutils.txtutils.AnsiTextWrapper` instance.\n\n        Args:\n            text (str): The text to be wrapped.\n\n        Returns:\n            A ``List[str]`` of output lines, without final newlines.\n            If the wrapped output has no content, the returned list is\n            empty.\n        "
    dict_0 = {str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    bool_0 = False
    dict_1 = {bool_0: bool_0, bool_0: var_0}
    var_1 = module_0.to_namedtuple(dict_1)
    module_0.to_namedtuple(bool_0)


def test_case_12():
    str_0 = "rk0NuT7at7"
    dict_0 = {str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_13():
    str_0 = "\x0bk0NuT7at7"
    dict_0 = {str_0: str_0, str_0: str_0}
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    tuple_0 = ()
    var_1 = module_0.to_namedtuple(var_0)
    var_2 = module_0.to_namedtuple(tuple_0)
    list_0 = [dict_0, var_1]
    var_3 = module_0.to_namedtuple(list_0)
    var_4 = module_0.to_namedtuple(var_1)
    var_5 = module_0.to_namedtuple(tuple_0)
    bool_0 = False
    list_1 = [bool_0]
    var_6 = module_0.to_namedtuple(list_1)
    var_7 = module_0.to_namedtuple(var_2)
    var_8 = module_0.to_namedtuple(list_1)
    var_9 = module_0.to_namedtuple(list_1)
    dict_1 = {bool_0: bool_0, bool_0: var_2}
    var_10 = module_0.to_namedtuple(dict_1)
    var_11 = module_0.to_namedtuple(var_6)
    var_12 = module_0.to_namedtuple(dict_1)
    var_13 = module_0.to_namedtuple(var_2)
    none_type_0 = None
    module_0.to_namedtuple(none_type_0)
