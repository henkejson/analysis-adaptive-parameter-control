# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1


def test_case_0():
    bool_0 = True
    module_0.to_namedtuple(bool_0)


def test_case_1():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    var_0 = module_0.to_namedtuple(list_0)


def test_case_2():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_3():
    str_0 = "|)"
    module_0.to_namedtuple(str_0)


def test_case_4():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_5():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_6():
    str_0 = "kH"
    dict_0 = {str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_7():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_8():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_9():
    bool_0 = False
    str_0 = "kH"
    dict_0 = {bool_0: str_0, str_0: bool_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_10():
    bool_0 = False
    str_0 = "gA}?IhL#{!F(G9a"
    dict_0 = {bool_0: str_0, str_0: bool_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)
    var_2 = module_0.to_namedtuple(var_1)


def test_case_11():
    bytes_0 = b"8I\x98k\xbe\nQ\xa9r"
    bool_0 = False
    complex_0 = 1513.4 - 802j
    dict_0 = {bool_0: bytes_0, bool_0: bool_0, bytes_0: complex_0}
    ordered_dict_0 = module_1.OrderedDict()
    tuple_0 = (bytes_0, bool_0, dict_0, ordered_dict_0)
    module_0.to_namedtuple(tuple_0)


def test_case_12():
    str_0 = "-LzNEXsCe$'eR<t"
    tuple_0 = (str_0,)
    list_0 = [tuple_0, tuple_0, str_0]
    var_0 = module_0.to_namedtuple(list_0)
    var_1 = module_0.to_namedtuple(var_0)
    var_2 = module_0.to_namedtuple(var_1)
    bool_0 = False
    str_1 = "u2\x0b\x0c"
    dict_0 = {bool_0: str_1, str_1: bool_0}
    var_3 = module_0.to_namedtuple(dict_0)
    tuple_1 = (bool_0, str_1)
    module_1.namedtuple(var_0, bool_0, module=tuple_1)
