# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1


def test_case_0():
    bool_0 = True
    module_0.to_namedtuple(bool_0)


def test_case_1():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    var_0 = module_0.to_namedtuple(list_0)


def test_case_2():
    str_0 = "author"
    dict_0 = {str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_3():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_4():
    bytes_0 = b"\xbf\tY\x0c\xf5c\xa9\x87\xd9Lo\xdf\x0c\x8d\xc8\xe9\xba4"
    module_0.to_namedtuple(bytes_0)


def test_case_5():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_6():
    float_0 = 211.974
    dict_0 = {float_0: float_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)
    var_2 = module_0.to_namedtuple(var_0)


def test_case_7():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_8():
    int_0 = -945
    bool_0 = False
    str_0 = "{NL6wQ\nm"
    int_1 = -671
    dict_0 = {str_0: str_0, str_0: int_0, str_0: int_1}
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    tuple_0 = (int_0, int_0, bool_0, ordered_dict_0)
    var_0 = module_0.to_namedtuple(tuple_0)
    complex_0 = -1485.1588 + 276.9475j
    module_0.to_namedtuple(complex_0)


def test_case_9():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_10():
    bytes_0 = b"ny\x9f"
    bool_0 = False
    float_0 = 903.197043
    dict_0 = {bytes_0: bytes_0, bytes_0: bool_0, bytes_0: bytes_0, float_0: bytes_0}
    module_0.to_namedtuple(dict_0)


def test_case_11():
    str_0 = "author"
    str_1 = "s6hQfjV\x0c"
    dict_0 = {str_0: str_0, str_1: str_0}
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    var_1 = module_0.to_namedtuple(ordered_dict_0)
    var_2 = module_0.to_namedtuple(var_1)
    var_3 = module_0.to_namedtuple(var_1)
    dict_1 = {var_3: var_3}
    var_4 = module_0.to_namedtuple(var_1)
    var_5 = module_0.to_namedtuple(dict_1)
    str_2 = "__attr_map__ must be a tuple not %r"
    module_0.to_namedtuple(str_2)
