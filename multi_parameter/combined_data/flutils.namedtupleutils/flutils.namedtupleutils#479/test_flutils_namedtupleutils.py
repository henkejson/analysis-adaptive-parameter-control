# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1


def test_case_0():
    set_0 = set()
    module_0.to_namedtuple(set_0)


def test_case_1():
    str_0 = "fiN"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    complex_0 = 507.87994 - 3747.004562j
    tuple_0 = (str_0, str_0, dict_0, complex_0)
    var_0 = module_0.to_namedtuple(tuple_0)
    var_1 = module_0.to_namedtuple(tuple_0)


def test_case_2():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_3():
    bytes_0 = b"p\xa8\xf6\x86"
    module_0.to_namedtuple(bytes_0)


def test_case_4():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_5():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_6():
    str_0 = "TN"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_7():
    bool_0 = False
    dict_0 = {}
    int_0 = 1493
    tuple_0 = (int_0,)
    tuple_1 = (dict_0, dict_0, tuple_0, tuple_0)
    tuple_2 = (bool_0, tuple_1)
    var_0 = module_0.to_namedtuple(tuple_0)
    var_1 = module_0.to_namedtuple(tuple_2)
    tuple_3 = (var_1,)
    list_0 = [var_1]
    var_2 = module_0.to_namedtuple(list_0)
    var_3 = module_0.to_namedtuple(tuple_3)


def test_case_8():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_9():
    list_0 = []
    tuple_0 = (list_0,)
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_10():
    bytes_0 = b"\xe0\xb2\xf3\xf4g1\x17h>:\x1c\x82O"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    list_0 = [dict_0, dict_0]
    module_0.to_namedtuple(list_0)


def test_case_11():
    float_0 = -418.62
    dict_0 = {float_0: float_0, float_0: float_0}
    tuple_0 = (float_0, float_0, dict_0)
    tuple_1 = (tuple_0,)
    var_0 = module_0.to_namedtuple(tuple_1)
    var_1 = module_0.to_namedtuple(var_0)
    bool_0 = False
    module_0.to_namedtuple(bool_0)


def test_case_12():
    str_0 = "Nq1\\,n^3cQXd>"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    complex_0 = 1339.4996 - 2287.1j
    tuple_0 = (str_0, str_0, dict_0, complex_0)
    tuple_1 = (tuple_0,)
    var_0 = module_0.to_namedtuple(tuple_1)
    var_1 = module_0.to_namedtuple(var_0)
    float_0 = -4204.183826
    dict_1 = {float_0: float_0, float_0: float_0}
    tuple_2 = (float_0, float_0, dict_1)
    tuple_3 = (tuple_2,)
    var_2 = module_0.to_namedtuple(tuple_3)
    var_3 = module_0.to_namedtuple(var_2)
    bool_0 = True
    module_0.to_namedtuple(bool_0)


def test_case_13():
    str_0 = "fiC "
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    complex_0 = 1339.4996 - 2287.1j
    tuple_0 = (str_0, str_0, dict_0, complex_0)
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(tuple_0)
    var_2 = module_0.to_namedtuple(tuple_0)
    module_0.to_namedtuple(str_0)
