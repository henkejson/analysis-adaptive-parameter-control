# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import builtins as module_0
import flutils.namedtupleutils as module_1
import collections as module_2


def test_case_0():
    object_0 = module_0.object()
    module_1.to_namedtuple(object_0)


def test_case_1():
    float_0 = -1530.9
    dict_0 = {float_0: float_0, float_0: float_0}
    list_0 = [dict_0]
    tuple_0 = (float_0, dict_0, list_0)
    var_0 = module_1.to_namedtuple(tuple_0)


def test_case_2():
    ordered_dict_0 = module_2.OrderedDict()
    var_0 = module_1.to_namedtuple(ordered_dict_0)


def test_case_3():
    bytes_0 = b"\xa3\xa7-JE\xbe`\xc3\xb8\x1b"
    module_1.to_namedtuple(bytes_0)


def test_case_4():
    list_0 = []
    var_0 = module_1.to_namedtuple(list_0)


def test_case_5():
    bool_0 = False
    str_0 = "y"
    dict_0 = {str_0: bool_0, str_0: bool_0, str_0: str_0, str_0: bool_0}
    var_0 = module_1.to_namedtuple(dict_0)
    var_1 = module_1.to_namedtuple(var_0)


def test_case_6():
    bool_0 = False
    str_0 = "y"
    str_1 = ":EtW6w@o{w\"',&$]"
    dict_0 = {str_0: bool_0, str_0: bool_0, str_0: str_0, str_1: bool_0}
    var_0 = module_1.to_namedtuple(dict_0)
    var_1 = module_1.to_namedtuple(var_0)
    float_0 = 1402.84
    module_2.namedtuple(str_1, float_0, rename=var_0)


def test_case_7():
    ordered_dict_0 = module_2.OrderedDict()
    var_0 = module_1.to_namedtuple(ordered_dict_0)
    var_1 = module_1.to_namedtuple(var_0)
    var_2 = module_1.to_namedtuple(var_1)
    module_2.namedtuple(ordered_dict_0, ordered_dict_0)


def test_case_8():
    int_0 = -2908
    bytes_0 = b"\xe2h\xe9^\x8e"
    dict_0 = {int_0: int_0, int_0: int_0, bytes_0: int_0, bytes_0: int_0}
    module_1.to_namedtuple(dict_0)


def test_case_9():
    tuple_0 = ()
    var_0 = module_1.to_namedtuple(tuple_0)


def test_case_10():
    bool_0 = True
    str_0 = ",Cz6-S2LQ97GxwYm"
    str_1 = "ix\r"
    str_2 = ":EtW6w@o{w\"',&$]"
    dict_0 = {str_0: bool_0, str_1: bool_0, str_1: str_0, str_2: bool_0}
    ordered_dict_0 = module_2.OrderedDict(**dict_0)
    dict_1 = {bool_0: bool_0, bool_0: bool_0}
    var_0 = module_1.to_namedtuple(ordered_dict_0)
    tuple_0 = (var_0, dict_1, str_1, str_1)
    var_1 = module_1.to_namedtuple(tuple_0)
    module_2.namedtuple(var_0, var_0, defaults=var_0, module=var_1)
