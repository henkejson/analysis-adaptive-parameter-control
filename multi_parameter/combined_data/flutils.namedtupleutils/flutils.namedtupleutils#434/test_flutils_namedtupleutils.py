# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1


def test_case_0():
    bool_0 = True
    module_0.to_namedtuple(bool_0)


def test_case_1():
    str_0 = " substituted in sys.modules during a lazy load"
    int_0 = 1242
    tuple_0 = (str_0, int_0, int_0)
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_2():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_3():
    bytes_0 = b"\x06Xi\xba\xf3O\xbc"
    module_0.to_namedtuple(bytes_0)


def test_case_4():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_5():
    str_0 = "create_mdule"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_6():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_7():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_8():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_9():
    int_0 = -1391
    dict_0 = {int_0: int_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(dict_0)


def test_case_10():
    str_0 = "Oh'U3LX6,3`z]F"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_11():
    bool_0 = False
    set_0 = set()
    bytes_0 = b"m\xcd\xb8\xf7}\xad\x81G6\x00\xf4\xb2\xa3\xb8\x8ad"
    dict_0 = {bool_0: set_0, bool_0: set_0, bytes_0: bytes_0, bool_0: set_0}
    tuple_0 = (set_0, dict_0, bool_0, dict_0)
    module_0.to_namedtuple(tuple_0)


def test_case_12():
    str_0 = "create_mdule"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    ordered_dict_0 = module_0.to_namedtuple(dict_0)
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_13():
    str_0 = "ceq\x0c"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [str_0, dict_0, dict_0, str_0]
    var_0 = module_0.to_namedtuple(list_0)
    list_1 = [var_0]
    module_1.OrderedDict(*list_1)
