# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1


def test_case_0():
    complex_0 = 1337 - 1312.102115j
    module_0.to_namedtuple(complex_0)


def test_case_1():
    bytes_0 = b"\xaej\xd4\x15\x8b"
    int_0 = 2
    tuple_0 = (bytes_0, int_0)
    var_0 = module_0.to_namedtuple(tuple_0)
    module_0.to_namedtuple(int_0)


def test_case_2():
    str_0 = "G"
    dict_0 = {str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_3():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_4():
    bytes_0 = b"\xdb\xa3\xed\xc1\xfc\x96\xa3>\xe3\x07\x17\xdfZ\xce\xb4\xb8\x1c\xaevk"
    module_0.to_namedtuple(bytes_0)


def test_case_5():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_6():
    str_0 = "1"
    none_type_0 = None
    dict_0 = {none_type_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_7():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_8():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_9():
    str_0 = ""
    none_type_0 = None
    str_1 = "f"
    dict_0 = {str_0: none_type_0, str_1: none_type_0, str_1: none_type_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_10():
    str_0 = ""
    none_type_0 = None
    str_1 = "XG>t"
    dict_0 = {str_0: none_type_0, str_1: none_type_0, str_1: none_type_0}
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    var_1 = module_0.to_namedtuple(ordered_dict_0)
    var_2 = module_0.to_namedtuple(var_1)
    module_0.to_namedtuple(str_0)


def test_case_11():
    bytes_0 = b")\x10W\x82K\x98\x1a\x16S\x8a\xb4\xf6\xa2D"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.to_namedtuple(dict_0)


def test_case_12():
    str_0 = ""
    none_type_0 = None
    str_1 = "f"
    str_2 = "X\t"
    dict_0 = {str_0: none_type_0, str_1: none_type_0, str_2: none_type_0}
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    var_1 = module_0.to_namedtuple(ordered_dict_0)
    var_2 = module_0.to_namedtuple(var_1)
    module_1.namedtuple(str_0, str_1)
