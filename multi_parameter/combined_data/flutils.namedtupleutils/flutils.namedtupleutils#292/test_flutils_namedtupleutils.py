# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1


def test_case_0():
    int_0 = -3030
    module_0.to_namedtuple(int_0)


def test_case_1():
    int_0 = -3023
    tuple_0 = (int_0,)
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_2():
    str_0 = "author"
    dict_0 = {str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_3():
    ordered_dict_0 = module_1.OrderedDict()
    ordered_dict_1 = module_0.to_namedtuple(ordered_dict_0)


def test_case_4():
    str_0 = "author"
    module_0.to_namedtuple(str_0)


def test_case_5():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_6():
    set_0 = set()
    bytes_0 = b"x\xf7\x9816\x93P\x9d\xe3\xc9\xe6\x92\xd13\x9a\xd3\xf5"
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, bytes_0: bytes_0}
    tuple_1 = (set_0, bytes_0, dict_0)
    complex_0 = 317.82858 - 718.3757j
    tuple_2 = (tuple_1, complex_0)
    module_0.to_namedtuple(tuple_2)


def test_case_7():
    str_0 = "author"
    dict_0 = {str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_8():
    str_0 = "\x0c{iGg}xJTL*[t"
    dict_0 = {str_0: str_0, str_0: str_0}
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    var_1 = module_0.to_namedtuple(var_0)
    var_2 = module_0.to_namedtuple(var_1)
    ordered_dict_1 = module_1.OrderedDict()
    module_1.namedtuple(ordered_dict_1, ordered_dict_1, module=ordered_dict_1)


def test_case_9():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_10():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_11():
    str_0 = "\rKy"
    dict_0 = {str_0: str_0, str_0: str_0}
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    var_1 = module_0.to_namedtuple(var_0)
    var_2 = module_0.to_namedtuple(dict_0)
    ordered_dict_1 = module_1.OrderedDict(**dict_0)
    module_1.namedtuple(ordered_dict_1, var_2)
