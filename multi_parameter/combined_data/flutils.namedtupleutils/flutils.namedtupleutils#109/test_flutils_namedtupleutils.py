# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1


def test_case_0():
    none_type_0 = None
    module_0.to_namedtuple(none_type_0)


def test_case_1():
    float_0 = -2674.581958
    list_0 = [float_0]
    var_0 = module_0.to_namedtuple(list_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_2():
    int_0 = 3
    str_0 = "A"
    dict_0 = {str_0: int_0, str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_3():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_4():
    bytes_0 = b"8\xb0\xb3\x01\xc5'Qxb\xc8\x13\x1a\xfc"
    module_0.to_namedtuple(bytes_0)


def test_case_5():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_6():
    int_0 = 3
    str_0 = "A"
    dict_0 = {str_0: int_0, str_0: int_0, int_0: str_0, int_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_7():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_8():
    str_0 = "X\x0c0FIVnGF<zE("
    int_0 = 3
    str_1 = "A"
    dict_0 = {str_1: int_0, str_1: str_0, str_0: str_1, str_0: str_1}
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_9():
    int_0 = 3
    str_0 = ""
    dict_0 = {
        str_0: str_0,
        str_0: int_0,
        str_0: int_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
    }
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    dict_1 = {
        int_0: ordered_dict_0,
        int_0: ordered_dict_0,
        int_0: dict_0,
        str_0: ordered_dict_0,
    }
    tuple_0 = (int_0, str_0, int_0, dict_1)
    var_0 = module_0.to_namedtuple(tuple_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_10():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)
    var_1 = module_0.to_namedtuple(list_0)
    var_2 = module_0.to_namedtuple(var_1)
    bool_0 = False
    str_0 = "%VcxEkJ,AoPua`#"
    tuple_0 = (bool_0, str_0)
    var_3 = module_0.to_namedtuple(tuple_0)
    module_0.to_namedtuple(str_0)


def test_case_11():
    bytes_0 = b"=\xe9\xd6y\xd9lA\x03\xddr\xfeq-X\xcc\x9d\x01\xca\x8e\x00"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.to_namedtuple(dict_0)


def test_case_12():
    int_0 = 3
    str_0 = "Z\r"
    str_1 = "E3B$"
    dict_0 = {str_0: int_0, str_1: str_1, str_1: str_0, str_1: str_1}
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    dict_1 = {
        int_0: ordered_dict_0,
        int_0: ordered_dict_0,
        int_0: dict_0,
        str_1: ordered_dict_0,
    }
    tuple_0 = (int_0, str_0, int_0, dict_1)
    bytes_0 = b"I"
    list_0 = [tuple_0, bytes_0, dict_1]
    tuple_1 = (list_0, dict_1, ordered_dict_0, str_1)
    var_0 = module_0.to_namedtuple(tuple_1)
    var_1 = module_0.to_namedtuple(var_0)
