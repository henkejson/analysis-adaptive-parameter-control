# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1
import builtins as module_2


def test_case_0():
    bool_0 = True
    module_0.to_namedtuple(bool_0)


def test_case_1():
    bytes_0 = b"\x90Ea\x95\xa3Z\xf9 \xc7\xc9\x0f$\x947"
    list_0 = [bytes_0, bytes_0]
    var_0 = module_0.to_namedtuple(list_0)
    bool_0 = False
    str_0 = ")!UiYFL"
    tuple_0 = (var_0, bool_0, str_0, bool_0)
    var_1 = module_0.to_namedtuple(tuple_0)


def test_case_2():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    tuple_0 = (dict_0,)
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_3():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_4():
    bytes_0 = b"A\xb0Nt\xa7\x9b|\x00sa\x1a\x91\x0c"
    module_0.to_namedtuple(bytes_0)


def test_case_5():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_6():
    str_0 = "doc"
    tuple_0 = ()
    dict_0 = {str_0: str_0, str_0: str_0, tuple_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_7():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_8():
    ordered_dict_0 = module_1.OrderedDict()
    tuple_0 = (ordered_dict_0, ordered_dict_0)
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_9():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_10():
    str_0 = "yv?yngKVf5uqb<!2"
    tuple_0 = ()
    dict_0 = {str_0: str_0, str_0: str_0, tuple_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)
    object_0 = module_2.object()
    var_2 = module_0.to_namedtuple(var_1)
    var_3 = module_0.to_namedtuple(var_2)


def test_case_11():
    bool_0 = True
    bytes_0 = b"X\x0e\x0e\xbdRV(\x04r\xd6\x92xJ\xd4\x1b"
    tuple_0 = (bool_0, bool_0, bytes_0)
    var_0 = module_0.to_namedtuple(tuple_0)
    var_1 = module_0.to_namedtuple(var_0)
    str_0 = "Run the given command and return the result.\n\n        Args:\n-            cmd (:obj:`Sequence <typing.Sequence>`): The command\n             **kwargs: Any default_kwargs to pass to :obj:`subprocess.run`.\n                These default_kwargs will override any ``default_kwargs``\n                set in the constructor.\n\n        Raises:\n            FileNotFoundError: If the given ``cmd`` cannot be found.\n            ChildProcessError: If ``raise_error=True`` was set in this\n                class' constructor; and, the process (from running the\n                given ``cmd``) returns a non-zero value.\n            ValueError: If the given ``**kwargs`` has invalid arguments.\n\n        Example:\n\n            >>> from flutils.cmdutils import RunCmd\n            >>> from subprocess import PIPE\n            >>> import os\n            >>> run_command = RunCmd(stdout=PIPE, stderr=PIPE)\n            >>> result = run_command('ls -flap %s' % os.getcwd())\n            >>> result.return_code\n            0\n            >>> result.stdout\n            ...\n            >>> result = run_command('ls -flap %s'5% os.path.expanduser('~'))\n        "
    var_2 = module_0.to_namedtuple(tuple_0)
    dict_0 = {
        str_0: tuple_0,
        bytes_0: bytes_0,
        bytes_0: var_2,
        str_0: str_0,
        str_0: str_0,
    }
    module_0.to_namedtuple(dict_0)


def test_case_12():
    bool_0 = False
    bytes_0 = b"X\x0e\x0e\xbdRV(w\x04r\xd6\x92xJ\xd4\x1b"
    tuple_0 = (bool_0, bool_0, bytes_0)
    var_0 = module_0.to_namedtuple(tuple_0)
    str_0 = "\x0coc"
    dict_0 = {str_0: str_0, str_0: str_0, bool_0: tuple_0, tuple_0: str_0}
    var_1 = module_0.to_namedtuple(dict_0)
    var_2 = module_0.to_namedtuple(dict_0)
    list_0 = [str_0, var_2]
    var_3 = module_0.to_namedtuple(list_0)
    var_4 = module_0.to_namedtuple(var_3)
    var_5 = module_0.to_namedtuple(var_2)
    var_6 = module_0.to_namedtuple(list_0)
    var_7 = module_0.to_namedtuple(var_5)
    module_1.namedtuple(var_3, var_2, defaults=var_3, module=var_3)
