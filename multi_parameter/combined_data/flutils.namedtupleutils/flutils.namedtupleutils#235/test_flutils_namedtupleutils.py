# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1


def test_case_0():
    bool_0 = False
    module_0.to_namedtuple(bool_0)


def test_case_1():
    str_0 = "U)Z{@Oh?f41`GN(?&V"
    int_0 = 3380
    tuple_0 = (str_0, int_0)
    var_0 = module_0.to_namedtuple(tuple_0)
    str_1 = "y*]XHulX`/"
    module_0.to_namedtuple(str_1)


def test_case_2():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_3():
    str_0 = "y*]XHulX`/"
    module_0.to_namedtuple(str_0)


def test_case_4():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_5():
    str_0 = "Sg"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(dict_0)
    bool_0 = False
    tuple_0 = (bool_0, var_1, dict_0)
    var_2 = module_0.to_namedtuple(tuple_0)
    var_3 = module_0.to_namedtuple(var_1)


def test_case_6():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_7():
    str_0 = "AZP52"
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_8():
    ordered_dict_0 = module_1.OrderedDict()
    ordered_dict_1 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_1)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_9():
    str_0 = 'S?B.<V" '
    str_1 = "KK1GQIEs\\DL7c"
    str_2 = "Convert a bytes type of escaped utf8 hexadecimal to a string.\n\n    Args:\n        data (bytes or bytearray or memoryview): The escaped utf8\n            hexadecimal bytes.\n        errors (str or :obj:`~UserString`): The error checking level.\n\n    Returns:\n        str: The given ``data`` (of escaped utf8 hexadecimal bytes)\n            converted into a :obj:`str`.\n        int: The number of the given ``data`` bytes consumed.\n\n    Raises:\n         UnicodeDecodeError: if the given ``data`` contains escaped\n            utf8 hexadecimal that references invalid utf8 bytes.\n\n\n    "
    dict_0 = {str_0: str_0, str_1: str_1, str_0: str_0, str_2: str_2}
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_10():
    int_0 = 1604
    bytes_0 = b"\x0c\x18\xa6!\x8d\xda%\xfb\x9e\x16\xfa\xd5\x8d\xcek\xd6"
    tuple_0 = (int_0, bytes_0)
    dict_0 = {tuple_0: int_0, bytes_0: int_0}
    module_0.to_namedtuple(dict_0)


def test_case_11():
    str_0 = "3e\t13\x0bOI/)"
    str_1 = "\tl_wuEXyF"
    dict_0 = {str_0: str_0, str_1: str_1, str_1: str_1, str_1: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    module_0.to_namedtuple(str_1)
