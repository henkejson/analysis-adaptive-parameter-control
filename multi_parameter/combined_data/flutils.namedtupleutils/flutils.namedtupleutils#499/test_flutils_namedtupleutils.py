# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1


def test_case_0():
    bool_0 = False
    module_0.to_namedtuple(bool_0)


def test_case_1():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    list_0 = [bool_0, dict_0]
    var_0 = module_0.to_namedtuple(list_0)


def test_case_2():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_3():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_4():
    str_0 = ""
    module_0.to_namedtuple(str_0)


def test_case_5():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_6():
    str_0 = "G"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_7():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_8():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    var_1 = module_0.to_namedtuple(var_0)
    var_2 = module_0.to_namedtuple(var_1)


def test_case_9():
    list_0 = []
    str_0 = "G"
    str_1 = "xI\r/z|?pLlrh~';/"
    dict_0 = {str_0: list_0, str_0: str_0, str_0: str_0, str_1: list_0}
    ordered_dict_0 = module_1.OrderedDict(*list_0, **dict_0)
    list_1 = [ordered_dict_0]
    list_2 = [list_1, ordered_dict_0]
    var_0 = module_0.to_namedtuple(list_2)
    str_2 = "module object for "
    module_0.to_namedtuple(str_2)


def test_case_10():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_11():
    bytes_0 = b"\x07\xc2\xbe/\x12hN\xb5\xfb_\xcc\xd4\xceg'\x12"
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)
    var_1 = module_0.to_namedtuple(tuple_0)
    var_2 = module_0.to_namedtuple(tuple_0)
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    tuple_1 = (bytes_0, dict_0, dict_0)
    module_0.to_namedtuple(tuple_1)


def test_case_12():
    str_0 = "N\x0b"
    str_1 = "C4LlV{@ (~=3u"
    dict_0 = {str_0: str_0, str_1: str_1, str_0: str_1}
    tuple_0 = (dict_0,)
    tuple_1 = (tuple_0,)
    var_0 = module_0.to_namedtuple(tuple_1)
    module_1.OrderedDict(*var_0)
