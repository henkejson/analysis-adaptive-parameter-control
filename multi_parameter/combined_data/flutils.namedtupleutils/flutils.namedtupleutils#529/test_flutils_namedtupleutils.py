# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1


def test_case_0():
    bool_0 = False
    module_0.to_namedtuple(bool_0)


def test_case_1():
    float_0 = 2315.372
    list_0 = [float_0, float_0, float_0, float_0]
    var_0 = module_0.to_namedtuple(list_0)


def test_case_2():
    int_0 = -21
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_3():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_4():
    str_0 = "5#ByR,oF"
    module_0.to_namedtuple(str_0)


def test_case_5():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_6():
    str_0 = "SRL"
    dict_0 = {str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_7():
    str_0 = "a;Y\\b"
    list_0 = [str_0]
    var_0 = module_0.to_namedtuple(list_0)


def test_case_8():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    var_1 = module_0.to_namedtuple(ordered_dict_0)
    var_2 = module_0.to_namedtuple(var_0)


def test_case_9():
    str_0 = "5#ByR,oF"
    set_0 = {str_0}
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: set_0}
    tuple_0 = (dict_0, str_0, dict_0)
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_10():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_11():
    bytes_0 = b"\xe6\\\\\xe5\x9c\x83\x0b\xb1\xfa"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    tuple_0 = (dict_0,)
    module_0.to_namedtuple(tuple_0)


def test_case_12():
    str_0 = "\x0cRL"
    dict_0 = {str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(dict_0)
    int_0 = -1364
    var_2 = module_0.to_namedtuple(var_1)
    tuple_0 = ()
    var_3 = module_0.to_namedtuple(var_0)
    var_4 = module_0.to_namedtuple(tuple_0)
    var_5 = module_0.to_namedtuple(tuple_0)
    module_0.to_namedtuple(int_0)
