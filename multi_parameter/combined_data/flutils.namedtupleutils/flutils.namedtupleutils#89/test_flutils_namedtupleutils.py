# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1


def test_case_0():
    none_type_0 = None
    module_0.to_namedtuple(none_type_0)


def test_case_1():
    bool_0 = False
    ordered_dict_0 = module_1.OrderedDict()
    tuple_0 = (bool_0, ordered_dict_0, ordered_dict_0)
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_2():
    str_0 = "Q"
    dict_0 = {str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_3():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_4():
    str_0 = "A Finder that is used by Python's import to provide a\n    :obj:`ModuleSpec <importlib.machinery.ModuleSpec>` for a cherry-picking\n    module package.\n\n    This finder is a singleton, in that, on first use of\n    :obj:`~flutils.cherry_pick` this finder object is added to the top of\n    :obj:`sys.meta_path`.  Each subsequent use of :obj:`~flutils.cherry_pick`\n    will use the same object.\n\n    This object is used to cache a cherry-picking-module's data from a\n    module-package that is using the :obj:`~flutils.cherry_pick` function.\n\n    The :obj:`ModuleSpec <importlib.machinery.ModuleSpec>` created in this\n    finder's ``find_spec()`` method, will be set to use the custom\n    :obj:`~_CherryPicker <flutils.moduleutils._CherryPick>` loader.\n    Additionally, the cached data will be added to the spec's loader_state.\n    The loader_state (cached cherry-picking-module data) will be used by\n    :obj:`~_CherryPicker <flutils.moduleutils._CherryPick>` loader to create\n    the cherry-picked-module.\n    "
    module_0.to_namedtuple(str_0)


def test_case_5():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_6():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)
    var_2 = module_0.to_namedtuple(dict_0)


def test_case_7():
    ordered_dict_0 = module_1.OrderedDict()
    tuple_0 = module_0.to_namedtuple(ordered_dict_0)
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_8():
    str_0 = ""
    dict_0 = {str_0: str_0}
    ordered_dict_0 = module_1.OrderedDict()
    tuple_0 = (str_0, ordered_dict_0, ordered_dict_0)
    list_0 = [dict_0, tuple_0, tuple_0]
    var_0 = module_0.to_namedtuple(list_0)


def test_case_9():
    bool_0 = True
    bytes_0 = b"5\x8e\xf7rF"
    tuple_0 = (bool_0, bytes_0, bytes_0)
    var_0 = module_0.to_namedtuple(tuple_0)
    bool_1 = False
    dict_0 = {bool_1: bool_1, bytes_0: tuple_0, bool_0: bool_0}
    list_0 = [dict_0]
    module_0.to_namedtuple(list_0)


def test_case_10():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_11():
    str_0 = "Q"
    dict_0 = {str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_12():
    str_0 = "\x0cuthor_email"
    str_1 = "V61ezE2%b# "
    tuple_0 = (str_0, str_0, str_1)
    bool_0 = True
    dict_0 = {
        tuple_0: str_1,
        tuple_0: str_0,
        str_1: str_1,
        str_0: bool_0,
        bool_0: tuple_0,
    }
    bool_1 = False
    tuple_1 = (tuple_0, dict_0, bool_1, str_1)
    var_0 = module_0.to_namedtuple(tuple_0)
    list_0 = [tuple_0, str_0]
    tuple_2 = (tuple_1, list_0, bool_0)
    ordered_dict_0 = module_1.OrderedDict()
    tuple_3 = (tuple_2, bool_0, list_0, str_1)
    var_1 = module_0.to_namedtuple(tuple_3)
    var_2 = module_0.to_namedtuple(var_1)
    bool_2 = True
    bytes_0 = b"\xeb\x95"
    ordered_dict_1 = module_1.OrderedDict()
    bool_3 = False
    dict_1 = {bool_3: bool_3, bytes_0: bool_2, bool_2: bool_2}
    list_1 = [dict_1]
    module_0.to_namedtuple(list_1)
