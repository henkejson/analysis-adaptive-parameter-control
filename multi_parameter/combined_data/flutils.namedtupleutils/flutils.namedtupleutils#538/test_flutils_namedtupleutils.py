# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1


def test_case_0():
    bool_0 = True
    module_0.to_namedtuple(bool_0)


def test_case_1():
    none_type_0 = None
    int_0 = -591
    tuple_0 = (none_type_0, int_0, int_0)
    var_0 = module_0.to_namedtuple(tuple_0)
    module_1.namedtuple(none_type_0, none_type_0, rename=none_type_0)


def test_case_2():
    str_0 = "RunCmd"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_3():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_4():
    bytes_0 = b"\x19'c\xb030"
    module_0.to_namedtuple(bytes_0)


def test_case_5():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_6():
    bool_0 = False
    tuple_0 = (bool_0,)
    dict_0 = {tuple_0: bool_0, bool_0: bool_0, bool_0: bool_0, tuple_0: tuple_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)
    module_0.to_namedtuple(bool_0)


def test_case_7():
    str_0 = "RunCmd"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_8():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_9():
    str_0 = "RunCmd"
    str_1 = "@M\\tDx:Us3"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0, str_1: str_1}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_10():
    bytes_0 = b"K[\x8d"
    tuple_0 = ()
    dict_0 = {bytes_0: bytes_0, bytes_0: tuple_0, tuple_0: tuple_0, tuple_0: bytes_0}
    module_0.to_namedtuple(dict_0)


def test_case_11():
    str_0 = "a5"
    str_1 = "\nK"
    list_0 = [str_0]
    var_0 = module_0.to_namedtuple(list_0)
    dict_0 = {str_0: str_0, str_1: str_1, str_1: str_1}
    var_1 = module_0.to_namedtuple(dict_0)
    var_2 = module_0.to_namedtuple(var_1)
    bool_0 = False
    module_0.to_namedtuple(bool_0)
