# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1


def test_case_0():
    complex_0 = 1712 - 719.706j
    module_0.to_namedtuple(complex_0)


def test_case_1():
    int_0 = -2253
    tuple_0 = (int_0, int_0, int_0)
    var_0 = module_0.to_namedtuple(tuple_0)
    str_0 = "metadat4a"
    dict_0 = {tuple_0: tuple_0, str_0: str_0, str_0: str_0, str_0: str_0}
    var_1 = module_0.to_namedtuple(dict_0)
    var_2 = module_0.to_namedtuple(var_1)


def test_case_2():
    float_0 = 128.7079
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(dict_0)
    var_2 = module_0.to_namedtuple(var_1)
    module_0.to_namedtuple(float_0)


def test_case_3():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_4():
    bytes_0 = b"\xef u\xe4[\x91\xb5\xef\xdf\xb7"
    module_0.to_namedtuple(bytes_0)


def test_case_5():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_6():
    int_0 = -2253
    tuple_0 = (int_0, int_0, int_0)
    str_0 = "metadat4a"
    dict_0 = {tuple_0: tuple_0, str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_7():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)
    bytes_0 = b"\xaf\xc1\xed\x05\xd7\xd7\xa21jQ\xcb\xf9\xb1\xed\x90"
    var_1 = module_0.to_namedtuple(list_0)
    list_1 = [bytes_0, bytes_0, bytes_0]
    var_2 = module_0.to_namedtuple(list_1)


def test_case_8():
    str_0 = "izmv>Y(w:"
    dict_0 = {str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    int_0 = 8
    module_0.to_namedtuple(int_0)


def test_case_9():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_10():
    str_0 = "v\x0b"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    tuple_0 = (dict_0, str_0)
    var_0 = module_0.to_namedtuple(tuple_0)
    var_1 = module_0.to_namedtuple(tuple_0)
    int_0 = 8
    var_2 = module_0.to_namedtuple(tuple_0)
    var_3 = module_0.to_namedtuple(var_2)
    var_4 = module_0.to_namedtuple(dict_0)
    module_0.to_namedtuple(int_0)


def test_case_11():
    bytes_0 = b"n"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    tuple_0 = (bytes_0, dict_0)
    module_0.to_namedtuple(tuple_0)
