# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import builtins as module_0
import flutils.namedtupleutils as module_1
import collections as module_2


def test_case_0():
    object_0 = module_0.object()
    module_1.to_namedtuple(object_0)


def test_case_1():
    bytes_0 = b"9\x19\xd2\xab\x11\xd9\x96\xc9\x9c\xef\xb1\xf1\xc1\x17\x1f"
    float_0 = -3516.0
    list_0 = [float_0, float_0, bytes_0, float_0]
    tuple_0 = (bytes_0, float_0, list_0, list_0)
    var_0 = module_1.to_namedtuple(tuple_0)


def test_case_2():
    none_type_0 = None
    dict_0 = {none_type_0: none_type_0, none_type_0: none_type_0}
    var_0 = module_1.to_namedtuple(dict_0)


def test_case_3():
    ordered_dict_0 = module_2.OrderedDict()
    var_0 = module_1.to_namedtuple(ordered_dict_0)


def test_case_4():
    str_0 = ""
    module_1.to_namedtuple(str_0)


def test_case_5():
    list_0 = []
    var_0 = module_1.to_namedtuple(list_0)


def test_case_6():
    dict_0 = {}
    var_0 = module_1.to_namedtuple(dict_0)


def test_case_7():
    dict_0 = {}
    var_0 = module_1.to_namedtuple(dict_0)
    var_1 = module_1.to_namedtuple(var_0)


def test_case_8():
    tuple_0 = ()
    var_0 = module_1.to_namedtuple(tuple_0)


def test_case_9():
    str_0 = "KZ`'Th4vJ\x0b\x0c\nT,{^4`"
    dict_0 = {str_0: str_0}
    var_0 = module_1.to_namedtuple(dict_0)
    var_1 = module_1.to_namedtuple(var_0)
    var_2 = module_1.to_namedtuple(var_0)
    var_3 = module_1.to_namedtuple(var_1)


def test_case_10():
    str_0 = "XcZpo%b0j-"
    dict_0 = {str_0: str_0}
    str_1 = "l"
    dict_1 = {str_1: str_1, str_1: dict_0, str_1: str_0, str_0: dict_0}
    var_0 = module_1.to_namedtuple(dict_1)
    var_1 = module_1.to_namedtuple(var_0)


def test_case_11():
    str_0 = "X\x0cZpo%b0j-"
    dict_0 = {str_0: str_0, str_0: str_0}
    var_0 = module_1.to_namedtuple(dict_0)
    var_1 = module_1.to_namedtuple(var_0)
    str_1 = "\nl"
    list_0 = module_1.to_namedtuple(var_1)
    var_2 = module_1.to_namedtuple(var_0)
    var_3 = module_1.to_namedtuple(var_0)
    dict_1 = {var_1: var_1, str_1: list_0, str_1: var_3, str_0: dict_0}
    ordered_dict_0 = module_2.OrderedDict(**dict_1)
    var_4 = module_1.to_namedtuple(dict_1)
    none_type_0 = None
    var_5 = module_1.to_namedtuple(dict_1)
    var_6 = module_1.to_namedtuple(ordered_dict_0)
    var_7 = module_1.to_namedtuple(var_3)
    var_8 = module_1.to_namedtuple(var_5)
    module_1.to_namedtuple(none_type_0)


def test_case_12():
    bool_0 = False
    bytes_0 = b""
    object_0 = module_0.object()
    bytes_1 = b"'\x08\x8er[\xae5`V\xd8(\xc4^\x08\xb1\x11V\xdc\xe5"
    dict_0 = {object_0: bytes_1, bytes_0: object_0}
    tuple_0 = (bool_0, bytes_1, dict_0)
    dict_1 = {bool_0: bool_0, bytes_0: tuple_0}
    tuple_1 = (object_0, dict_1)
    str_0 = "J\\i9u!j!Z"
    tuple_2 = (bool_0, bytes_0, tuple_1, str_0)
    tuple_3 = (tuple_2, tuple_1)
    list_0 = [tuple_3, str_0, tuple_3, tuple_0]
    bool_1 = True
    tuple_4 = (list_0, bool_1)
    module_1.to_namedtuple(tuple_4)
