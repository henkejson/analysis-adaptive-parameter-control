# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1


def test_case_0():
    none_type_0 = None
    module_0.to_namedtuple(none_type_0)


def test_case_1():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    var_0 = module_0.to_namedtuple(list_0)
    var_1 = module_0.to_namedtuple(var_0)
    var_2 = module_0.to_namedtuple(list_0)


def test_case_2():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_3():
    bytes_0 = b"\xe9f\xa5-\x0c\xa9\xa06\xe6 \xdd^D\xd8"
    module_0.to_namedtuple(bytes_0)


def test_case_4():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_5():
    str_0 = "dfDJA"
    dict_0 = {str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_6():
    ordered_dict_0 = module_1.OrderedDict()
    list_0 = [ordered_dict_0, ordered_dict_0, ordered_dict_0]
    var_0 = module_0.to_namedtuple(list_0)
    var_1 = module_0.to_namedtuple(ordered_dict_0)
    var_2 = module_0.to_namedtuple(var_1)


def test_case_7():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_8():
    bool_0 = False
    str_0 = "X__doc"
    dict_0 = {bool_0: str_0, str_0: bool_0}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_9():
    bytes_0 = b"$\xb7)\xec\xa3"
    int_0 = 128
    dict_0 = {bytes_0: int_0, int_0: int_0}
    module_0.to_namedtuple(dict_0)


def test_case_10():
    str_0 = "__additional_attrs__ must be a dict in %r"
    dict_0 = {str_0: str_0}
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    list_0 = [ordered_dict_0]
    var_0 = module_0.to_namedtuple(list_0)


def test_case_11():
    bool_0 = False
    str_0 = "\x0bP_doc"
    list_0 = [str_0]
    bytes_0 = b"\xc4\x9c\xb6\xe9\x9b\x18Uf\x1cx"
    tuple_0 = (bool_0, str_0, list_0, bytes_0)
    tuple_1 = (tuple_0,)
    var_0 = module_0.to_namedtuple(list_0)
    var_1 = module_0.to_namedtuple(tuple_1)
    dict_0 = {bool_0: str_0, str_0: list_0}
    var_2 = module_0.to_namedtuple(dict_0)
    module_1.namedtuple(var_1, bytes_0, rename=var_1, defaults=var_0, module=var_1)
