# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1
import builtins as module_2


def test_case_0():
    int_0 = -1355
    module_0.to_namedtuple(int_0)


def test_case_1():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    tuple_0 = (bool_0, dict_0, bool_0)
    var_0 = module_0.to_namedtuple(tuple_0)
    var_1 = module_0.to_namedtuple(var_0)
    module_0.to_namedtuple(bool_0)


def test_case_2():
    float_0 = -1463.14981
    dict_0 = {float_0: float_0}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_3():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_4():
    str_0 = "&jc#\t=(FkW.3"
    module_0.to_namedtuple(str_0)


def test_case_5():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_6():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_7():
    bytes_0 = b"\xd7\rIt"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    var_0 = module_0.to_namedtuple(list_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_8():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_9():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_10():
    str_0 = "uPNq"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_11():
    str_0 = "Q;G&)*&\tO%^/&Mo"
    str_1 = "uP.q"
    dict_0 = {str_1: str_1, str_1: str_1, str_0: str_1, str_1: str_1}
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_12():
    bytes_0 = b"vf\xc64\xac\x80\xf8xd\xc9"
    tuple_0 = (bytes_0,)
    tuple_1 = (tuple_0,)
    dict_0 = {tuple_0: bytes_0, tuple_1: tuple_1, bytes_0: bytes_0, tuple_1: tuple_1}
    tuple_2 = (dict_0,)
    module_0.to_namedtuple(tuple_2)


def test_case_13():
    str_0 = "Yg\t"
    list_0 = [str_0]
    dict_0 = {str_0: str_0, str_0: list_0}
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    module_2.object(**dict_0)
