# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1


def test_case_0():
    none_type_0 = None
    module_0.to_namedtuple(none_type_0)


def test_case_1():
    bool_0 = True
    list_0 = [bool_0]
    var_0 = module_0.to_namedtuple(list_0)


def test_case_2():
    str_0 = "dM\x0c$\x0cN>w)brOm{Fq\x0ck]7"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_3():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_4():
    bytes_0 = b"\xc4"
    module_0.to_namedtuple(bytes_0)


def test_case_5():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_6():
    bool_0 = False
    bool_1 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_1}
    var_0 = module_0.to_namedtuple(dict_0)
    int_0 = -123
    module_0.to_namedtuple(int_0)


def test_case_7():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_8():
    bool_0 = True
    bytes_0 = b"\xf1\xbfB\xad\xbbC<6\x0f\xa3\xd6\xa2\xd9"
    float_0 = -3474.926
    bytes_1 = b""
    tuple_0 = (bool_0, bytes_0, float_0, bytes_1)
    var_0 = module_0.to_namedtuple(tuple_0)
    int_0 = -3838
    list_0 = [int_0, int_0, int_0, int_0]
    var_1 = module_0.to_namedtuple(list_0)
    var_2 = module_0.to_namedtuple(var_1)
    var_3 = module_0.to_namedtuple(var_1)


def test_case_9():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_10():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)
    bool_0 = True
    module_1.namedtuple(bool_0, bool_0)


def test_case_11():
    bytes_0 = b""
    bool_0 = False
    dict_0 = {bytes_0: bytes_0, bytes_0: bool_0}
    tuple_0 = (bytes_0, dict_0, bool_0)
    list_0 = [tuple_0]
    module_0.to_namedtuple(list_0)


def test_case_12():
    list_0 = []
    str_0 = "UR"
    dict_0 = {str_0: list_0, str_0: str_0, str_0: list_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_13():
    bool_0 = True
    bytes_0 = b"\x12\xf1\xe9\xad\x14f\xa7\xa3\x82,\xb2\xc5P\xf3\x1a-\x15"
    str_0 = "NL\x0c"
    dict_0 = {
        str_0: bytes_0,
        str_0: bytes_0,
        str_0: bytes_0,
        bool_0: bool_0,
        bool_0: str_0,
    }
    var_0 = module_0.to_namedtuple(dict_0)
    bool_1 = False
    list_0 = [bool_1, var_0]
    var_1 = module_0.to_namedtuple(list_0)
    tuple_0 = (var_0, dict_0, var_0)
    var_2 = module_0.to_namedtuple(tuple_0)
    none_type_0 = None
    module_0.to_namedtuple(none_type_0)
