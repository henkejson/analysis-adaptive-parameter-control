# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1


def test_case_0():
    none_type_0 = None
    module_0.to_namedtuple(none_type_0)


def test_case_1():
    bool_0 = False
    tuple_0 = (bool_0, bool_0, bool_0)
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_2():
    str_0 = "prep_cmd"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_3():
    bytes_0 = b"C\xee\x9b\xea\xcf"
    module_0.to_namedtuple(bytes_0)


def test_case_4():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_5():
    str_0 = "1a"
    str_1 = "Return a string describing the file type if it exists.\n\n    This function processes the given ``path`` with\n    :obj:`~flutils.normalize_path`.\n\n    Args:\n        path (:obj:`str`, :obj:`bytes` or :obj:`Path <pathlib.Path>`):\n            The path to check for existence.\n\n    :rtype:\n        :obj:`str`\n\n        * ``''`` (empty string): if the given ``path`` does NOT exist; or,\n          is a broken symbolic link; or, other errors (such as permission\n          errors) are propagated.\n        * ``'directory'``: if the given ``path`` points to a directory or\n          is a symbolic link pointing to a directory.\n        * ``'file'``: if the given ``path`` points to a regular file or is a\n          symbolic link pointing to a regular file.\n        * ``'block device'``: if the given ``path`` points to a block device or\n          is a symbolic link pointing to a block device.\n        * ``'char device'``: if the given ``path`` points to a character device\n          or is a symbolic link pointing to a character device.\n        * ``'FIFO'``: if the given ``path`` points to a FIFO or is a symbolic\n          link pointing to a FIFO.\n        * ``'socket'``: if the given ``path`` points to a Unix socket or is a\n          symbolic link pointing to a Unix socket.\n\n    Example:\n        >>> from flutils.pathutils import exists_as\n        >>> exists_as('~/tmp')\n        'directory'\n    "
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_1, str_1: str_1}
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    list_0 = [ordered_dict_0, ordered_dict_0]
    var_0 = module_0.to_namedtuple(list_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_6():
    str_0 = "prep_cmd"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_7():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)
    ordered_dict_0 = module_1.OrderedDict()
    var_1 = module_0.to_namedtuple(list_0)


def test_case_8():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)
    var_1 = module_0.to_namedtuple(var_0)
    var_2 = module_0.to_namedtuple(tuple_0)
    var_3 = module_0.to_namedtuple(tuple_0)
    var_4 = module_0.to_namedtuple(var_2)
    var_5 = module_0.to_namedtuple(tuple_0)
    var_6 = module_0.to_namedtuple(var_2)
    var_7 = module_0.to_namedtuple(var_2)
    var_8 = module_0.to_namedtuple(var_5)
    var_9 = module_0.to_namedtuple(var_7)
    var_10 = module_0.to_namedtuple(tuple_0)
    var_11 = module_0.to_namedtuple(var_10)
    var_12 = module_0.to_namedtuple(var_7)
    var_13 = module_0.to_namedtuple(var_10)
    var_14 = module_0.to_namedtuple(tuple_0)
    var_15 = module_0.to_namedtuple(var_7)
    var_16 = module_0.to_namedtuple(tuple_0)
    dict_0 = {var_10: var_13, var_16: var_6}
    var_17 = module_0.to_namedtuple(dict_0)


def test_case_9():
    bytes_0 = b"\x98\xbeXq\xae\xd6\x83\xea<\xae\x16\xff\xb2\x14\xa1\x186@"
    dict_0 = {bytes_0: bytes_0}
    module_0.to_namedtuple(dict_0)


def test_case_10():
    str_0 = "&7w/C+KJ0"
    str_1 = "R\x0b"
    dict_0 = {str_1: str_0, str_1: str_0, str_0: str_0}
    str_2 = "Return a string describing the file type if it exists.\n\n    This function processes the given ``path`` with\n    :obj:`~flutils.normalize_path`.\n\n    Args:\n        path (:obj:`str`, :obj:`bytes` or :obj:`Path <pathlib.Path>`):\n            The path to check for existence.\n\n    :rtype:\n        :obj:`str`\n\n        * ``''`` (empty string): if the given ``path`` does NOT exist; or,\n          is a broken symbolic link; or, other errors (such as permission\n          errors) are propagated.\n        * ``'directory'``: if the given ``path`` points to a directory or\n          is a symbolic link pointing to a directory.\n        * ``'file'``: if the given ``path`` points to a regular file or is a\n          symbolic link pointing to a regular file.\n        * ``'block device'``: if the given ``path`` points to a block device or\n          is a symbolic link pointing to a block device.\n        * ``'char device'``: if the given ``path`` points to a character device\n          or is a symbolic link pointing to a character device.\n        * ``'FIFO'``: if the given ``path`` points to a FIFO or is a symbolic\n          link pointing to a FIFO.\n        * ``'socket'``: if the given ``path`` points to a Unix socket or is a\n          symbolic link pointing to a Unix socket.\n\n    Example:\n        >>> from flutils.pathutils import exists_as\n        >>> exists_as('~/tmp')\n        'directory'\n    "
    str_3 = "prep_cmd"
    dict_1 = {str_0: str_0, str_1: dict_0, str_2: str_2, str_3: str_2}
    ordered_dict_0 = module_1.OrderedDict(**dict_1)
    list_0 = [ordered_dict_0, ordered_dict_0]
    var_0 = module_0.to_namedtuple(list_0)
    var_1 = module_0.to_namedtuple(var_0)
    float_0 = -3170.14
    tuple_0 = (str_1, dict_1, float_0)
    var_2 = module_0.to_namedtuple(tuple_0)
    module_0.to_namedtuple(str_2)
