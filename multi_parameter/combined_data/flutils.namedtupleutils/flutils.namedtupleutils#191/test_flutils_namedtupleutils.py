# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1


def test_case_0():
    none_type_0 = None
    module_0.to_namedtuple(none_type_0)


def test_case_1():
    bool_0 = True
    str_0 = "H8iKb2M"
    tuple_0 = (bool_0, str_0, bool_0)
    var_0 = module_0.to_namedtuple(tuple_0)
    str_1 = "version"
    dict_0 = {str_1: str_1}
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    var_1 = module_0.to_namedtuple(ordered_dict_0)
    var_2 = module_0.to_namedtuple(var_1)


def test_case_2():
    str_0 = "H8iKb2M"
    dict_0 = {str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_3():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_4():
    str_0 = "VfS}8slT\x0cYwWJ^uu'"
    module_0.to_namedtuple(str_0)


def test_case_5():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_6():
    float_0 = -771.0
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(dict_0)
    var_2 = module_0.to_namedtuple(var_0)
    str_0 = "?{6d_oj"
    module_0.to_namedtuple(str_0)


def test_case_7():
    str_0 = "Convert the given ``data`` into base64 Characters.\n\n    Args:\n        data (bytes or bytearray or memoryview): Bytes to be converted\n            to a string of base64 characters.\n        errors (str or :obj:`~UserString`): Not used.  This argument exists\n            to meet the interface requirements.  Any value given to this\n            argument is ignored.\n\n    Returns:\n        str: of base64 Characters\n        int: the number of the given ``data`` bytes consumed.\n    "
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    module_1.namedtuple(ordered_dict_0, str_0, defaults=var_0)


def test_case_8():
    bytes_0 = b"\x06\xa6O\xa5\xea<\x84\n\x1d\x9cj\xe9/>Kk\x8d\x11\x82\xcd"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    list_0 = [dict_0, dict_0]
    module_0.to_namedtuple(list_0)


def test_case_9():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_10():
    bool_0 = True
    str_0 = "H8iKb2M"
    tuple_0 = (bool_0, str_0, bool_0)
    var_0 = module_0.to_namedtuple(tuple_0)
    str_1 = "version\r"
    dict_0 = {str_1: str_1}
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    var_1 = module_0.to_namedtuple(ordered_dict_0)
    module_0.to_namedtuple(bool_0)
