# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1


def test_case_0():
    bool_0 = True
    module_0.to_namedtuple(bool_0)


def test_case_1():
    complex_0 = -1128.8361 - 2818.72912j
    dict_0 = {complex_0: complex_0, complex_0: complex_0, complex_0: complex_0}
    bool_0 = False
    tuple_0 = (dict_0, bool_0)
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_2():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_3():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_4():
    str_0 = "o::^=\n5D#bS6j8R\\n"
    module_0.to_namedtuple(str_0)


def test_case_5():
    tuple_0 = ()
    tuple_1 = module_0.to_namedtuple(tuple_0)


def test_case_6():
    str_0 = "Check if the given ``obj`` is a subclass of any of the given\n    ``*classes``.\n\n    Args:\n        obj (:obj:`Any <typing.Any>`): The object to check.\n        *classes (:obj:`Any <typing.Any>`): The classes to check against.\n\n    :rtype:\n        :obj:`bool`\n\n        * :obj:`True` if the given ``obj`` is an instance of ANY given\n          ``*classes``;\n        * :obj:`False` otherwise.\n\n    Example:\n        >>> from flutils.objutils import is_subclass_of_any\n        >>> from collections import ValuesView, KeysView, UserList\n        >>> obj = dict(a=1, b=2)\n        >>> is_subclass_of_any(obj.keys(),ValuesView,KeysView,UserList)\n        True\n    "
    dict_0 = {str_0: str_0}
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_7():
    str_0 = "WExgNB"
    dict_0 = {str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_8():
    complex_0 = -1096.5104160291185 - 2818.72912j
    dict_0 = {complex_0: complex_0, complex_0: complex_0, complex_0: complex_0}
    tuple_0 = module_0.to_namedtuple(dict_0)
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_9():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_10():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    var_0 = module_0.to_namedtuple(tuple_1)


def test_case_11():
    str_0 = "\rgwt"
    dict_0 = {str_0: str_0}
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    list_0 = [str_0, str_0, ordered_dict_0]
    tuple_0 = (list_0,)
    var_0 = module_0.to_namedtuple(tuple_0)
    var_1 = module_0.to_namedtuple(var_0)
    var_2 = module_0.to_namedtuple(dict_0)
    var_3 = module_0.to_namedtuple(ordered_dict_0)
    bool_0 = True
    module_0.to_namedtuple(bool_0)


def test_case_12():
    bool_0 = False
    bytes_0 = b"mr"
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bytes_0, bytes_0: bytes_0}
    dict_1 = {bool_0: bool_0, bool_0: dict_0, bytes_0: dict_0, bool_0: dict_0}
    list_0 = [dict_1, bool_0, bytes_0, bool_0]
    list_1 = [dict_1, dict_0, list_0]
    module_0.to_namedtuple(list_1)
