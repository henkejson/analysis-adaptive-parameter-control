# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1
import builtins as module_2


def test_case_0():
    none_type_0 = None
    module_0.to_namedtuple(none_type_0)


def test_case_1():
    int_0 = -1041
    tuple_0 = (int_0,)
    var_0 = module_0.to_namedtuple(tuple_0)
    var_1 = module_0.to_namedtuple(var_0)
    var_2 = module_0.to_namedtuple(var_1)
    var_3 = module_0.to_namedtuple(var_2)


def test_case_2():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_3():
    str_0 = "wRp6\x0c.(,I!1U?D0/}"
    module_0.to_namedtuple(str_0)


def test_case_4():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_5():
    str_0 = "RunCmd"
    dict_0 = {str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_6():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_7():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_8():
    str_0 = "Jx9PGa\x0b)RD"
    dict_0 = {str_0: str_0}
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    bool_0 = True
    tuple_0 = (str_0, ordered_dict_0, bool_0)
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_9():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_10():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    object_0 = module_2.object(**ordered_dict_0)
    str_0 = "Jx9PGa\x0b)RD"
    dict_0 = {str_0: str_0}
    ordered_dict_1 = module_1.OrderedDict(**dict_0)
    var_1 = module_0.to_namedtuple(var_0)
    bool_0 = False
    tuple_0 = (str_0, ordered_dict_1, bool_0)
    var_2 = module_0.to_namedtuple(tuple_0)
    dict_1 = {bool_0: var_1}
    var_3 = module_0.to_namedtuple(dict_1)


def test_case_11():
    bool_0 = False
    bytes_0 = b"tH4\x0f$u<\xc6\xf7\xed\xdcG\xbew\xe2\xf2\xc8\x03S"
    bool_1 = True
    dict_0 = {bytes_0: bool_1}
    tuple_0 = (bool_0, bytes_0, dict_0)
    module_0.to_namedtuple(tuple_0)


def test_case_12():
    str_0 = " v"
    str_1 = "'|@mV! Au$"
    dict_0 = {str_0: str_0, str_1: str_0, str_0: str_1}
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    float_0 = 5569.37777
    str_2 = "Convert the given ``text`` of base64 characters into the base64\n    decoded bytes.\n\n    Args:\n        text (str): The string input.  The given string input can span\n            across many lines and be indented any number of spaces.\n        errors (str): Not used.  This argument exists to meet the\n            interface requirements.  Any value given to this argument\n            is ignored.\n\n    Returns:\n        bytes: The given ``text`` converted into base64 bytes.\n        int: The length of the returned bytes.\n    "
    tuple_0 = (float_0, str_2)
    var_1 = module_0.to_namedtuple(tuple_0)
    set_0 = {var_1, str_2, tuple_0, tuple_0}
    tuple_1 = (set_0, set_0)
    var_2 = module_0.to_namedtuple(tuple_1)
    str_3 = "RunCmd"
    var_3 = module_0.to_namedtuple(var_2)
    var_4 = module_0.to_namedtuple(var_3)
    dict_1 = {str_3: str_3, str_3: str_3}
    var_5 = module_0.to_namedtuple(var_2)
    ordered_dict_1 = module_1.OrderedDict(**dict_1)
    var_6 = module_0.to_namedtuple(ordered_dict_1)
    object_0 = module_2.object()
    var_7 = module_0.to_namedtuple(ordered_dict_1)
    var_8 = module_0.to_namedtuple(var_6)
    list_0 = [str_3, dict_1, ordered_dict_1, str_3]
    var_9 = module_0.to_namedtuple(list_0)
    var_10 = module_0.to_namedtuple(var_9)
    module_0.to_namedtuple(object_0)
