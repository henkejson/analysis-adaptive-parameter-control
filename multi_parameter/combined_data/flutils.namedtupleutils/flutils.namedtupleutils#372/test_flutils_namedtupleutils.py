# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1


def test_case_0():
    int_0 = 70
    module_0.to_namedtuple(int_0)


def test_case_1():
    str_0 = "$$R}=QA5JVadq {X"
    set_0 = {str_0, str_0}
    list_0 = [str_0, set_0]
    var_0 = module_0.to_namedtuple(list_0)


def test_case_2():
    bytes_0 = b"+I\x8d"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.to_namedtuple(dict_0)


def test_case_3():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_4():
    str_0 = "minor"
    module_0.to_namedtuple(str_0)


def test_case_5():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_6():
    bool_0 = True
    str_0 = "T3F\\\x0b"
    dict_0 = {bool_0: bool_0, bool_0: str_0, bool_0: bool_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_7():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_8():
    str_0 = "minor"
    list_0 = [str_0, str_0, str_0]
    var_0 = module_0.to_namedtuple(list_0)


def test_case_9():
    ordered_dict_0 = module_1.OrderedDict()
    tuple_0 = (ordered_dict_0,)
    var_0 = module_0.to_namedtuple(tuple_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_10():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_11():
    bool_0 = False
    str_0 = "is_list_like"
    dict_0 = {str_0: bool_0, bool_0: bool_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_12():
    str_0 = "\\\x0b8{'&`m^<IE"
    int_0 = 4971
    bool_0 = False
    tuple_0 = (str_0, int_0, bool_0, bool_0)
    ordered_dict_0 = module_1.OrderedDict()
    str_1 = "\x0cP"
    list_0 = [str_1, str_1, str_1, str_1]
    dict_0 = {str_1: tuple_0, tuple_0: tuple_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(list_0)
    dict_1 = {str_1: list_0}
    module_1.namedtuple(list_0, var_1, rename=dict_1)
