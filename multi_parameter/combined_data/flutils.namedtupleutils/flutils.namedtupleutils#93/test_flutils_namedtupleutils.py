# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1


def test_case_0():
    bool_0 = False
    module_0.to_namedtuple(bool_0)


def test_case_1():
    float_0 = 1805.586533
    tuple_0 = (float_0,)
    var_0 = module_0.to_namedtuple(tuple_0)
    var_1 = module_0.to_namedtuple(tuple_0)


def test_case_2():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_3():
    str_0 = "i-$\n!{b~Vs}"
    module_0.to_namedtuple(str_0)


def test_case_4():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_5():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_6():
    str_0 = "path"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_7():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_8():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_9():
    complex_0 = -981.66299 + 2255.976916j
    dict_0 = {complex_0: complex_0, complex_0: complex_0, complex_0: complex_0}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_10():
    str_0 = " is not a proper bas64 character string: "
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    bool_0 = True
    tuple_0 = (str_0, dict_0, str_0, bool_0)
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_11():
    bytes_0 = b"\xcf\xe5\xaex\xdb\xc7\xcc\xc1\xf7\xcd\xae\x08\xb6\xcc\xc5\x18"
    dict_0 = {bytes_0: bytes_0}
    module_0.to_namedtuple(dict_0)


def test_case_12():
    str_0 = "path"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_13():
    int_0 = 20
    list_0 = [int_0, int_0, int_0]
    var_0 = module_0.to_namedtuple(list_0)
    str_0 = "pat\t"
    none_type_0 = None
    str_1 = "{}b0"
    str_2 = "MF Ut:# K44D9"
    dict_0 = {
        str_0: none_type_0,
        str_1: none_type_0,
        str_2: none_type_0,
        str_1: none_type_0,
    }
    var_1 = module_0.to_namedtuple(dict_0)
    var_2 = module_0.to_namedtuple(var_1)
    module_0.to_namedtuple(int_0)
