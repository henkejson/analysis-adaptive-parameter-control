# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1


def test_case_0():
    bool_0 = False
    module_0.to_namedtuple(bool_0)


def test_case_1():
    none_type_0 = None
    str_0 = "doc"
    dict_0 = {str_0: none_type_0, str_0: none_type_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_2():
    str_0 = "doc"
    dict_0 = {str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_3():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_4():
    bytes_0 = b"b\xaf\x91L|9&\xd4D\x01\xe8\x1d\xf0Ot"
    module_0.to_namedtuple(bytes_0)


def test_case_5():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_6():
    int_0 = 4
    dict_0 = {int_0: int_0, int_0: int_0}
    var_0 = module_0.to_namedtuple(dict_0)
    module_0.to_namedtuple(int_0)


def test_case_7():
    str_0 = " is not a proper bas64 character string: "
    none_type_0 = None
    dict_0 = {str_0: none_type_0, str_0: none_type_0}
    var_0 = module_0.to_namedtuple(dict_0)


def test_case_8():
    bool_0 = True
    bytes_0 = b"p] \x9f\x852\xde~Z\xc2\x11Wft\x9aKX"
    tuple_0 = ()
    dict_0 = {bytes_0: bool_0, bool_0: bool_0, tuple_0: bytes_0}
    tuple_1 = (dict_0, bool_0, dict_0, bool_0)
    tuple_2 = (bool_0, bytes_0, tuple_1)
    module_0.to_namedtuple(tuple_2)


def test_case_9():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_10():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_11():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    bool_0 = True
    var_1 = module_0.to_namedtuple(var_0)
    list_0 = [var_0, ordered_dict_0, bool_0, ordered_dict_0]
    var_2 = module_0.to_namedtuple(list_0)


def test_case_12():
    str_0 = " is not a proper bas64 character string: "
    none_type_0 = None
    str_1 = "do\x0b"
    dict_0 = {str_0: none_type_0, str_1: none_type_0}
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    list_0 = [ordered_dict_0, dict_0, ordered_dict_0, dict_0]
    var_0 = module_0.to_namedtuple(list_0)
    var_1 = module_0.to_namedtuple(var_0)
