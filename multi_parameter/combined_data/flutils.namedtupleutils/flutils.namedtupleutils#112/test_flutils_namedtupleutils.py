# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1
import builtins as module_2


def test_case_0():
    float_0 = -333.3676923076498
    module_0.to_namedtuple(float_0)


def test_case_1():
    complex_0 = 646 - 2854.627j
    list_0 = [complex_0]
    set_0 = {complex_0, complex_0, complex_0, complex_0}
    bool_0 = False
    tuple_0 = (set_0, bool_0)
    tuple_1 = (complex_0, list_0, tuple_0, list_0)
    var_0 = module_0.to_namedtuple(tuple_1)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_2():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_3():
    bytes_0 = b"5\xb7\xe5.G5\xc0b\x82"
    module_0.to_namedtuple(bytes_0)


def test_case_4():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_5():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0}
    dict_0 = {tuple_0: set_0, tuple_0: tuple_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(dict_0)


def test_case_6():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_7():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_8():
    str_0 = "to_namedtuple"
    bytes_0 = b""
    dict_0 = {str_0: bytes_0, str_0: bytes_0, str_0: bytes_0}
    list_0 = [str_0, str_0, dict_0, str_0]
    var_0 = module_0.to_namedtuple(list_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_9():
    str_0 = "wJky9%'"
    list_0 = [str_0]
    list_1 = [list_0, list_0, str_0, str_0]
    var_0 = module_0.to_namedtuple(list_1)
    var_1 = module_0.to_namedtuple(var_0)
    str_1 = "%\t_R##"
    str_2 = ""
    dict_0 = {str_1: str_1, str_2: str_2}
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    list_2 = [ordered_dict_0]
    var_2 = module_0.to_namedtuple(list_2)


def test_case_10():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    var_1 = module_0.to_namedtuple(ordered_dict_0)
    var_2 = module_0.to_namedtuple(ordered_dict_0)
    var_3 = module_0.to_namedtuple(var_2)
    var_4 = module_0.to_namedtuple(var_3)
    var_5 = module_0.to_namedtuple(var_1)
    var_6 = module_0.to_namedtuple(var_2)
    dict_0 = {var_0: var_1, var_1: var_4, var_5: var_4, var_1: var_0}
    tuple_0 = (var_2, dict_0)
    var_7 = module_0.to_namedtuple(tuple_0)
    var_8 = module_0.to_namedtuple(tuple_0)
    var_9 = module_0.to_namedtuple(var_7)
    ordered_dict_1 = module_1.OrderedDict(*var_4)
    bytes_0 = b"\x7fV\xd6\xb5\x0eqj\x1f`F\xa3\xdd\xee\xea\xf4\xb0Y\xb1\xa3\xc7"
    var_10 = module_0.to_namedtuple(var_3)
    var_11 = module_0.to_namedtuple(tuple_0)
    var_12 = module_0.to_namedtuple(dict_0)
    dict_1 = {var_7: tuple_0, bytes_0: var_0}
    module_0.to_namedtuple(dict_1)


def test_case_11():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    var_1 = module_0.to_namedtuple(ordered_dict_0)
    var_2 = module_0.to_namedtuple(ordered_dict_0)
    var_3 = module_0.to_namedtuple(var_2)
    var_4 = module_0.to_namedtuple(var_3)
    var_5 = module_0.to_namedtuple(var_1)
    var_6 = module_0.to_namedtuple(var_5)
    float_0 = -333.3676923076498
    tuple_0 = (float_0, var_1)
    var_7 = module_0.to_namedtuple(tuple_0)
    var_8 = module_0.to_namedtuple(var_6)
    var_9 = module_0.to_namedtuple(tuple_0)
    ordered_dict_1 = module_1.OrderedDict()
    bytes_0 = b"\x7fV\xd6\xb5\x0eqj\x1f`F\xa3\xdd\xee\xea\xf4\xb0Y\xb1\xa3\xc7"
    object_0 = module_2.object(*ordered_dict_1)
    var_10 = module_0.to_namedtuple(ordered_dict_1)
    var_11 = module_0.to_namedtuple(ordered_dict_0)
    var_12 = module_0.to_namedtuple(var_5)
    var_13 = module_0.to_namedtuple(var_11)
    bytes_1 = b"]\xffY\xde\x83"
    str_0 = " ZMF"
    str_1 = "(\x1b\\[[0-9;:]+[ABCDEFGHJKSTfhilmns])"
    dict_0 = {str_0: var_7, var_8: var_10, str_1: var_1}
    tuple_1 = (ordered_dict_0, bytes_1, bytes_0, dict_0)
    var_14 = module_0.to_namedtuple(tuple_1)
