# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import flutils.namedtupleutils as module_0
import collections as module_1
import builtins as module_2


def test_case_0():
    bool_0 = False
    module_0.to_namedtuple(bool_0)


def test_case_1():
    bytes_0 = b"\x91e\xa8\xc9\x95"
    complex_0 = 1738 - 538.08j
    str_0 = "has_any_callables"
    tuple_0 = (bytes_0, complex_0, str_0)
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_2():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)


def test_case_3():
    str_0 = "vUJ)Q"
    module_0.to_namedtuple(str_0)


def test_case_4():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)


def test_case_5():
    str_0 = "initial_indent_len"
    dict_0 = {str_0: str_0, str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_6():
    ordered_dict_0 = module_1.OrderedDict()
    var_0 = module_0.to_namedtuple(ordered_dict_0)
    var_1 = module_0.to_namedtuple(var_0)


def test_case_7():
    tuple_0 = ()
    var_0 = module_0.to_namedtuple(tuple_0)


def test_case_8():
    bool_0 = True
    str_0 = 'oRM#\nw|#t1b"ZDd/8LV'
    bytes_0 = b"\x15\xce-\xb2d\xd1FZR\xa5\xa1\x12x+\x11\r\x0e"
    tuple_0 = (bool_0, str_0, str_0, bytes_0)
    var_0 = module_0.to_namedtuple(tuple_0)
    bool_1 = True
    dict_0 = {str_0: str_0, str_0: bool_1, str_0: bool_1}
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    dict_1 = {str_0: ordered_dict_0, str_0: bool_1}
    var_1 = module_0.to_namedtuple(dict_1)
    var_2 = module_0.to_namedtuple(var_0)
    ordered_dict_1 = module_1.OrderedDict(**dict_1)
    tuple_1 = (bool_1, ordered_dict_1)
    tuple_2 = (bool_1, tuple_1, ordered_dict_0, ordered_dict_1)
    var_3 = module_0.to_namedtuple(tuple_2)
    var_4 = module_0.to_namedtuple(var_3)
    module_1.namedtuple(str_0, ordered_dict_0)


def test_case_9():
    bool_0 = True
    str_0 = 'oRM#\nw|#t1b"ZDd/8LV'
    bytes_0 = b"\x15\xce-\xb2d\xd1FZR\xa5\xa1\x12x+\x11\r\x0e"
    tuple_0 = (bool_0, str_0, str_0, bytes_0)
    var_0 = module_0.to_namedtuple(tuple_0)
    bool_1 = True
    str_1 = "initial_indent_len"
    dict_0 = {str_1: str_1, str_1: bool_1, str_1: bool_1}
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    dict_1 = {
        var_0: dict_0,
        str_1: ordered_dict_0,
        str_1: ordered_dict_0,
        str_1: bool_1,
    }
    var_1 = module_0.to_namedtuple(dict_1)
    ordered_dict_1 = module_1.OrderedDict(**dict_1)
    module_2.object(**var_0)


def test_case_10():
    bytes_0 = b"\xc6~\x0b\xcc"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    tuple_0 = (bytes_0, dict_0, dict_0)
    module_0.to_namedtuple(tuple_0)


def test_case_11():
    bool_0 = False
    str_0 = 'oRM#\nw|#t1b"ZDd/8LV'
    bytes_0 = b"\x15\xce-\xb2d\xd1FZR\xa5\xa1\x12x+\x11\r\x0e"
    tuple_0 = (bool_0, str_0, str_0, bytes_0)
    var_0 = module_0.to_namedtuple(tuple_0)
    bool_1 = True
    var_1 = module_0.to_namedtuple(tuple_0)
    str_1 = "\nX"
    dict_0 = {str_1: str_1, str_1: bool_1, str_0: str_0, str_1: bool_1, var_0: bool_0}
    object_0 = module_2.object()
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    var_2 = module_0.to_namedtuple(tuple_0)
    dict_1 = {str_1: var_2, str_0: tuple_0, str_1: bool_1}
    var_3 = module_0.to_namedtuple(dict_1)
    ordered_dict_1 = module_1.OrderedDict(**dict_1)
    tuple_1 = (bool_1, var_3, ordered_dict_0, ordered_dict_1)
    var_4 = module_0.to_namedtuple(tuple_1)
    var_5 = module_0.to_namedtuple(dict_0)
    object_1 = module_2.object()
    module_0.to_namedtuple(object_1)
