# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1


def test_case_0():
    str_0 = "25\\"
    maybe_0 = module_0.Maybe(str_0, str_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    str_0 = "Ch0)IR"
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_lazy()
    bool_1 = False
    bool_2 = False
    maybe_1 = module_0.Maybe(bool_2, bool_2)
    bool_3 = maybe_1.__eq__(none_type_0)
    maybe_2 = module_0.Maybe(none_type_0, bool_1)
    bool_4 = maybe_1.__eq__(maybe_1)
    maybe_3 = module_0.Maybe(maybe_2, maybe_2)
    var_1 = maybe_3.map(str_0)
    var_2 = maybe_2.to_lazy()
    var_3 = var_1.to_try()


def test_case_3():
    str_0 = "zr6^[T61m9,&/[P@kF8-"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.filter(maybe_0)
    none_type_0 = None
    bool_0 = var_0.__eq__(none_type_0)


def test_case_4():
    generic_0 = module_1.Generic()
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_0.ap(maybe_0)


def test_case_5():
    str_0 = "zr6^[T61m9,&/[P@kF8-"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_validation()
    maybe_1 = module_0.Maybe(var_0, var_0)
    var_2 = maybe_0.bind(var_1)
    bool_0 = var_2.__eq__(str_0)
    var_3 = var_2.to_box()
    var_4 = maybe_0.to_lazy()
    bool_1 = var_2.__eq__(maybe_1)
    var_1.filter(var_0)


def test_case_6():
    float_0 = -466.152
    bool_0 = False
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    maybe_0.bind(float_0)


def test_case_7():
    str_0 = "zr6^[T61m9,&/[P@kF8-"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.filter(maybe_0)
    none_type_0 = None
    int_0 = 1
    var_1 = maybe_0.filter(int_0)
    var_2 = var_0.to_try()
    var_3 = var_0.to_box()
    var_4 = maybe_0.to_either()
    bool_0 = True
    var_5 = maybe_0.get_or_else(var_4)
    str_1 = "\n        Take function (A) -> B and applied this function on current Validation value.\n\n        :param mapper: mapper function\n        :type mapper: Function(A) -> B\n        :returns: new Validation with mapped value and previous errors\n        :rtype: Validation[B, List[E]]\n        "
    bool_1 = True
    maybe_1 = module_0.Maybe(bool_0, bool_1)
    var_6 = maybe_1.ap(str_1)
    bool_2 = False
    maybe_2 = module_0.Maybe(none_type_0, bool_2)


def test_case_8():
    none_type_0 = None
    none_type_1 = None
    maybe_0 = module_0.Maybe(none_type_1, none_type_1)
    maybe_0.ap(none_type_0)


def test_case_9():
    float_0 = 2320.32938
    none_type_0 = None
    maybe_0 = module_0.Maybe(float_0, none_type_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_either()
    var_2 = var_1.to_try()
    bool_0 = False
    maybe_1 = module_0.Maybe(float_0, bool_0)
    maybe_1.filter(var_2)


def test_case_10():
    str_0 = "25\\"
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.get_or_else(str_0)
    var_0.to_lazy()


def test_case_11():
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.get_or_else(bool_0)
    var_0.to_validation()


def test_case_12():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_either()


def test_case_13():
    bytes_0 = b"'K\x16\x1f\x02c\x9d\x186\xe8#A\xee\xf47M\x01"
    none_type_0 = None
    maybe_0 = module_0.Maybe(bytes_0, none_type_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.to_either()
    var_2 = maybe_0.to_validation()
    maybe_1 = module_0.Maybe(bytes_0, var_0)
    var_3 = maybe_0.get_or_else(var_1)
    bool_0 = maybe_0.__eq__(var_0)


def test_case_14():
    bool_0 = False
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_box()
    var_0.bind(bool_0)


def test_case_15():
    float_0 = 2785.35
    maybe_0 = module_0.Maybe(float_0, float_0)
    var_0 = maybe_0.to_lazy()


def test_case_16():
    str_0 = "bYZi;z=N9F,FaK,$"
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_try()
    var_0.to_box()


def test_case_17():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_1 = module_0.Maybe(maybe_0, maybe_0)
    var_0 = maybe_1.to_lazy()
    var_1 = var_0.to_validation()
    maybe_2 = module_0.Maybe(bool_0, maybe_1)
    var_2 = maybe_1.to_lazy()
    var_3 = maybe_1.to_box()
    none_type_0 = None
    bool_1 = maybe_1.__eq__(maybe_1)
    var_4 = maybe_2.to_try()
    bool_2 = False
    var_5 = maybe_0.to_try()
    maybe_3 = module_0.Maybe(none_type_0, bool_2)
    var_6 = maybe_3.to_either()
    var_7 = var_6.to_lazy()
    var_8 = var_7.map(var_0)
    var_9 = var_0.to_either()
    var_8.to_validation()


def test_case_18():
    none_type_0 = None
    none_type_1 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_1, bool_0)
    var_0 = maybe_0.to_validation()
    var_0.get_or_else(none_type_0)


def test_case_19():
    complex_0 = -1223.445633 + 1348.182j
    bool_0 = False
    maybe_0 = module_0.Maybe(complex_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.to_lazy()
    maybe_1 = var_1.to_try()
    bool_1 = var_1.__eq__(maybe_0)
    var_2 = maybe_0.to_validation()
    maybe_2 = module_0.Maybe(complex_0, complex_0)
    bool_2 = maybe_2.__eq__(complex_0)
    var_3 = maybe_2.to_box()
    var_4 = var_3.to_lazy()
    bool_3 = var_3.__eq__(bool_2)
    var_4.filter(var_0)
