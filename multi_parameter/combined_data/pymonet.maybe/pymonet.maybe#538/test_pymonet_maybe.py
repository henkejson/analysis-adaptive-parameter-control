# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import builtins as module_1


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    bytes_0 = b"H\x16\x9e\x15e:jl\xd2\xb3\xf6h\xab\xf9\xc2N\xe0.3"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.filter(maybe_0)
    var_1 = var_0.ap(bytes_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(bytes_0, none_type_0)
    var_2 = maybe_1.to_either()
    bool_0 = var_1.__eq__(var_1)
    maybe_1.filter(var_2)


def test_case_3():
    tuple_0 = ()
    object_0 = module_1.object(*tuple_0)
    set_0 = set()
    maybe_0 = module_0.Maybe(set_0, set_0)
    var_0 = maybe_0.to_try()
    tuple_1 = (var_0, var_0)
    bool_0 = True
    maybe_1 = module_0.Maybe(tuple_1, bool_0)
    bool_1 = maybe_1.__eq__(object_0)


def test_case_4():
    bytes_0 = b"\xe0"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.to_lazy()
    var_2 = maybe_0.to_lazy()
    var_3 = maybe_0.filter(var_2)
    var_4 = var_3.to_lazy()
    var_5 = var_2.to_box()
    var_6 = maybe_0.map(var_2)
    var_7 = maybe_0.get_or_else(bytes_0)
    var_8 = var_2.to_validation()
    var_4.to_lazy()


def test_case_5():
    list_0 = []
    maybe_0 = module_0.Maybe(list_0, list_0)
    maybe_0.map(list_0)


def test_case_6():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.ap(none_type_0)
    var_1 = maybe_0.to_try()
    var_2 = var_0.bind(var_0)
    var_3 = var_0.to_lazy()
    var_3.get_or_else(var_1)


def test_case_7():
    complex_0 = -4464.9771 + 1129j
    int_0 = -1096
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_lazy()
    none_type_1 = None
    maybe_1 = module_0.Maybe(int_0, none_type_1)
    maybe_1.bind(complex_0)


def test_case_8():
    none_type_0 = None
    float_0 = 657.634336
    maybe_0 = module_0.Maybe(float_0, float_0)
    var_0 = maybe_0.ap(none_type_0)
    var_1 = var_0.to_box()
    var_2 = var_1.to_either()


def test_case_9():
    bool_0 = True
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    none_type_0 = None
    bool_2 = maybe_0.__eq__(none_type_0)
    maybe_0.ap(bool_0)


def test_case_10():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.filter(var_0)
    var_2 = var_1.to_try()


def test_case_11():
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_0, none_type_0)
    maybe_0.filter(none_type_0)


def test_case_12():
    int_0 = -37
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.get_or_else(int_0)


def test_case_13():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_either()
    var_2 = maybe_0.get_or_else(bool_0)
    var_1.map(var_0)


def test_case_14():
    str_0 = "\n        Take filterer function, when monad is successfully call filterer with monad value.\n        When filterer returns True method returns copy of monad, othercase\n        not successfully Try with previous value.\n\n        :params filterer: function to apply on monad value\n        :type filterer: Function(A) -> Boolean\n        :returns: Try with previous value\n        :rtype: Try[A]\n        "
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.ap(maybe_0)
    var_1 = maybe_0.to_lazy()
    var_2 = maybe_0.to_either()
    var_1.to_lazy()


def test_case_15():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_box()
    none_type_0 = None
    maybe_0.filter(none_type_0)


def test_case_16():
    bool_0 = True
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.get_or_else(bool_1)
    bool_2 = True
    maybe_1 = module_0.Maybe(bool_1, bool_2)
    maybe_2 = module_0.Maybe(bool_0, maybe_1)
    bool_3 = var_0.__eq__(bool_1)
    var_1 = maybe_0.filter(maybe_1)
    var_2 = maybe_2.to_validation()
    maybe_3 = module_0.Maybe(maybe_1, maybe_1)
    var_3 = maybe_0.bind(bool_0)
    none_type_0 = None
    maybe_4 = module_0.Maybe(bool_0, none_type_0)


def test_case_17():
    float_0 = 2806.37
    int_0 = 0
    bool_0 = False
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.to_validation()
    maybe_1 = module_0.Maybe(maybe_0, bool_0)
    var_1 = maybe_1.to_validation()
    var_2 = maybe_1.to_try()
    var_2.bind(float_0)


def test_case_18():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_try()
    bool_1 = maybe_0.__eq__(none_type_0)
    var_1 = maybe_1.to_box()
    var_2 = maybe_0.get_or_else(maybe_1)
    var_2.get_or_else(maybe_0)


def test_case_19():
    bool_0 = True
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.get_or_else(bool_1)
    var_1 = maybe_0.ap(var_0)
    bool_2 = var_1.__eq__(maybe_0)
    var_2 = maybe_0.filter(var_1)
    var_3 = maybe_0.to_validation()
    maybe_1 = module_0.Maybe(bool_0, var_1)
    var_4 = maybe_1.to_try()
    var_5 = var_4.get_or_else(maybe_1)
    bool_3 = var_5.__eq__(var_5)
    bool_4 = maybe_0.__eq__(bool_0)
    maybe_2 = module_0.Maybe(var_2, var_2)
    var_6 = var_5.to_either()
    list_0 = [maybe_2]
    var_7 = bool_3.ap(list_0)
    var_8 = var_2.to_box()
    var_9 = var_2.to_try()
    var_10 = maybe_2.bind(var_4)
    var_11 = var_7.to_box()
    var_12 = var_6.to_lazy()
    var_13 = var_4.filter(maybe_1)
    bool_5 = var_2.__eq__(maybe_1)
    var_9.to_validation()
