# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    float_0 = -1269.7823
    bool_0 = True
    maybe_0 = module_0.Maybe(float_0, bool_0)
    bool_1 = maybe_0.__eq__(float_0)
    maybe_1 = module_0.Maybe(float_0, bool_0)
    var_0 = maybe_1.to_lazy()


def test_case_3():
    none_type_0 = None
    int_0 = 1
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.filter(none_type_0)
    var_1 = var_0.filter(maybe_0)
    maybe_1 = module_0.Maybe(int_0, var_0)
    bool_0 = maybe_0.__eq__(maybe_1)
    maybe_2 = module_0.Maybe(none_type_0, bool_0)
    var_2 = var_1.to_lazy()
    var_3 = maybe_1.to_lazy()
    var_4 = maybe_0.map(var_2)


def test_case_4():
    bytes_0 = b"i\r'?c\xd1"
    none_type_0 = None
    complex_0 = -1719.6903 - 1942.6j
    maybe_0 = module_0.Maybe(none_type_0, complex_0)
    none_type_1 = None
    maybe_1 = module_0.Maybe(bytes_0, none_type_1)
    var_0 = maybe_1.to_lazy()
    maybe_1.map(maybe_1)


def test_case_5():
    str_0 = "p%q"
    float_0 = -1269.7823
    bool_0 = True
    maybe_0 = module_0.Maybe(float_0, bool_0)
    bool_1 = maybe_0.__eq__(str_0)
    maybe_1 = module_0.Maybe(bool_1, bool_1)
    var_0 = maybe_1.to_lazy()
    var_1 = maybe_0.bind(maybe_1)


def test_case_6():
    float_0 = -1269.7823
    bool_0 = True
    maybe_0 = module_0.Maybe(float_0, bool_0)
    bool_1 = maybe_0.__eq__(float_0)
    bool_2 = False
    maybe_1 = module_0.Maybe(float_0, bool_2)
    maybe_1.bind(maybe_1)


def test_case_7():
    float_0 = -4696.908
    bool_0 = True
    maybe_0 = module_0.Maybe(float_0, bool_0)
    var_0 = maybe_0.ap(maybe_0)
    var_1 = maybe_0.map(var_0)
    var_2 = maybe_0.bind(float_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(var_0, bool_1)
    var_3 = maybe_0.to_validation()
    var_4 = maybe_0.to_try()
    var_5 = maybe_0.bind(var_4)
    var_6 = maybe_0.to_box()
    var_7 = var_6.to_validation()


def test_case_8():
    bool_0 = True
    bytes_0 = b"\xa8\xbe\xdd\xe0\x86:\xbe\x05 \xe4\xe3\x12"
    bool_1 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_1)
    maybe_0.ap(bool_0)


def test_case_9():
    none_type_0 = None
    int_0 = 1
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.filter(none_type_0)


def test_case_10():
    none_type_0 = None
    int_0 = 1
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.filter(maybe_0)
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1.filter(var_0)


def test_case_11():
    str_0 = "\n        :param semigroup: other semigroup to concat\n        :type semigroup: Sum[B]\n        :returns: new Sum with sum of concat semigroups values\n        :rtype: Sum[A]\n        "
    float_0 = -1269.7823
    bool_0 = True
    maybe_0 = module_0.Maybe(float_0, bool_0)
    bool_1 = maybe_0.__eq__(str_0)
    maybe_1 = maybe_0.get_or_else(float_0)
    maybe_1.to_lazy()


def test_case_12():
    bool_0 = True
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_1, bool_1)
    var_0 = maybe_0.get_or_else(bool_0)
    var_0.to_try()


def test_case_13():
    str_0 = "p%q"
    float_0 = -1269.7823
    bool_0 = True
    maybe_0 = module_0.Maybe(float_0, bool_0)
    bool_1 = maybe_0.__eq__(str_0)
    maybe_1 = module_0.Maybe(bool_1, bool_1)
    var_0 = maybe_0.to_either()
    var_1 = maybe_1.to_lazy()
    var_2 = maybe_1.to_validation()


def test_case_14():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    none_type_0 = None
    maybe_0 = module_0.Maybe(set_0, none_type_0)
    var_0 = maybe_0.to_either()
    var_0.ap(bool_0)


def test_case_15():
    bool_0 = True
    set_0 = {bool_0}
    maybe_0 = module_0.Maybe(set_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_lazy()
    var_2 = var_0.to_lazy()
    var_3 = var_2.to_box()
    var_4 = var_1.to_try()
    var_4.to_try()


def test_case_16():
    str_0 = "p%q"
    float_0 = -1269.7823
    bool_0 = True
    maybe_0 = module_0.Maybe(float_0, bool_0)
    bool_1 = maybe_0.__eq__(str_0)
    maybe_1 = module_0.Maybe(bool_1, bool_1)
    var_0 = maybe_1.to_box()
    var_0.filter(var_0)


def test_case_17():
    int_0 = 1
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.to_lazy()


def test_case_18():
    none_type_0 = None
    int_0 = 1
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.filter(none_type_0)
    var_1 = maybe_0.filter(none_type_0)
    var_2 = var_1.to_try()
    var_3 = var_1.get_or_else(var_2)
    var_4 = maybe_0.to_either()
    var_5 = var_4.to_box()
    var_4.get_or_else(maybe_0)


def test_case_19():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_try()
    maybe_0.bind(none_type_0)


def test_case_20():
    float_0 = 2917.9
    maybe_0 = module_0.Maybe(float_0, float_0)
    var_0 = maybe_0.to_validation()
    var_1 = var_0.to_box()
    var_1.to_box()


def test_case_21():
    int_0 = -217
    bool_0 = False
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.to_validation()
    maybe_1 = module_0.Maybe(var_0, bool_0)
    var_1 = maybe_1.to_lazy()
    var_1.to_lazy()


def test_case_22():
    bool_0 = False
    generic_0 = module_1.Generic()
    maybe_0 = module_0.Maybe(generic_0, generic_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_box()
    var_1.filter(bool_0)


def test_case_23():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_try()
    var_1.to_box()


def test_case_24():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    float_0 = 1581.124
    none_type_1 = None
    maybe_2 = module_0.Maybe(float_0, none_type_1)
    bool_0 = maybe_2.__eq__(maybe_1)


def test_case_25():
    none_type_0 = None
    int_0 = 1
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.filter(none_type_0)
    var_1 = var_0.filter(maybe_0)
    maybe_1 = module_0.Maybe(int_0, var_0)
    bool_0 = maybe_0.__eq__(maybe_1)
    maybe_2 = module_0.Maybe(none_type_0, bool_0)
    var_2 = var_1.to_lazy()
    var_3 = maybe_1.to_lazy()
    var_4 = var_0.bind(var_3)


def test_case_26():
    none_type_0 = None
    none_type_1 = None
    int_0 = 1
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.filter(none_type_0)
    var_1 = maybe_0.filter(none_type_1)
    bool_0 = var_1.__eq__(var_1)
    bytes_0 = b"\x89Z\x00,\x8ek\x03\xe1j\xda\x7f\xf9\x11Hi"
    maybe_1 = module_0.Maybe(var_1, bytes_0)
    var_2 = maybe_0.to_box()
    var_3 = var_1.filter(var_2)
    var_4 = var_0.ap(none_type_0)
    var_5 = var_1.to_lazy()
    var_6 = var_0.to_validation()
