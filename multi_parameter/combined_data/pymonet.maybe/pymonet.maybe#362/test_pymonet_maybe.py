# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    bytes_0 = b"HR9\x1a\x13^\x14\r\xb6\xe0c\x1d$\xe7@~\xde\xe8\x80{"
    none_type_1 = None
    maybe_1 = module_0.Maybe(bytes_0, none_type_1)
    var_0 = maybe_1.to_try()
    bool_1 = maybe_1.__eq__(bool_0)
    var_1 = maybe_1.to_box()
    maybe_1.map(var_1)


def test_case_3():
    none_type_0 = None
    int_0 = 705
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.map(none_type_0)


def test_case_4():
    none_type_0 = None
    str_0 = "\n        :param semigroup: other semigroup to concat\n        :type semigroup: First[B]\n        :returns: new First with first value\n        :rtype: First[A]\n        "
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    maybe_0.map(none_type_0)


def test_case_5():
    none_type_0 = None
    str_0 = "\n        Method executes a reducer function\n        on each element of the array, resulting in a single output value.\n\n        :param fn: function to call with ImmutableList value\n        :type fn: Function(A, B) -> A\n        :returns: A\n        "
    set_0 = {none_type_0, str_0, str_0, none_type_0}
    tuple_0 = (str_0, set_0)
    maybe_0 = module_0.Maybe(none_type_0, tuple_0)
    var_0 = maybe_0.bind(maybe_0)
    var_1 = maybe_0.filter(var_0)
    var_2 = maybe_0.to_box()
    maybe_1 = module_0.Maybe(maybe_0, maybe_0)
    var_3 = maybe_1.to_try()
    module_1.Generic(*var_0, **var_0)


def test_case_6():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.bind(none_type_0)


def test_case_7():
    bytes_0 = b"\xe3"
    none_type_0 = None
    generic_0 = module_1.Generic()
    maybe_0 = module_0.Maybe(none_type_0, generic_0)
    list_0 = [none_type_0, bytes_0, generic_0]
    var_0 = maybe_0.ap(list_0)
    var_1 = maybe_0.to_either()
    var_2 = var_1.to_box()
    var_3 = var_2.to_validation()
    var_3.map(bytes_0)


def test_case_8():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    none_type_1 = None
    bool_1 = True
    tuple_0 = ()
    maybe_1 = module_0.Maybe(none_type_1, tuple_0)
    maybe_1.ap(bool_1)


def test_case_9():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1 = module_0.Maybe(none_type_0, maybe_0)
    var_0 = maybe_1.filter(none_type_0)
    maybe_0.filter(none_type_0)


def test_case_10():
    str_0 = "$-Oi;{(/"
    dict_0 = {}
    maybe_0 = module_0.Maybe(dict_0, dict_0)
    maybe_0.filter(str_0)


def test_case_11():
    none_type_0 = None
    str_0 = "\n        Method executes a reducer function\n        on each element of the array, resulting in a single output value.\n\n        :param fn: function to call with ImmutableList value\n        :type fn: Function(A, B) -> A\n        :returns: A\n        "
    set_0 = {none_type_0, str_0, str_0, none_type_0}
    tuple_0 = (str_0, set_0)
    maybe_0 = module_0.Maybe(none_type_0, tuple_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.filter(var_0)
    var_2 = var_1.get_or_else(str_0)
    var_3 = maybe_0.bind(tuple_0)
    var_4 = maybe_0.to_try()
    var_5 = var_3.to_box()
    var_5.bind(str_0)


def test_case_12():
    int_0 = 3183
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.get_or_else(int_0)
    var_0.to_validation()


def test_case_13():
    none_type_0 = None
    float_0 = 2216.7178
    none_type_1 = None
    maybe_0 = module_0.Maybe(float_0, none_type_1)
    var_0 = maybe_0.to_either()
    var_0.get_or_else(none_type_0)


def test_case_14():
    bytes_0 = b"G\x04\x85\x92\x1ea.\x06\xe1\xeep\xc6"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_lazy()
    bool_0 = maybe_0.__eq__(maybe_0)
    var_1 = maybe_0.to_box()
    var_2 = maybe_0.to_validation()
    var_3 = var_2.to_try()


def test_case_15():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.get_or_else(none_type_0)
    var_1 = maybe_0.to_validation()
    none_type_1 = None
    maybe_1 = module_0.Maybe(none_type_1, none_type_1)
    var_2 = maybe_1.to_box()
    var_3 = maybe_0.to_try()
    maybe_0.map(none_type_1)


def test_case_16():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    maybe_1 = module_0.Maybe(none_type_0, maybe_0)
    var_1 = maybe_1.filter(none_type_0)
    maybe_0.filter(var_0)


def test_case_17():
    none_type_0 = None
    str_0 = "\n        Method executes a reducer function\n        on each element of the array, resulting in a single output value.\n\n        :param fn: function to call with ImmutableList value\n        :type fn: Function(A, B) -> A\n        :returns: A\n        "
    set_0 = {none_type_0, str_0, str_0, none_type_0}
    tuple_0 = (str_0, set_0)
    maybe_0 = module_0.Maybe(none_type_0, tuple_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.filter(var_0)
    var_2 = maybe_0.to_box()
    maybe_1 = module_0.Maybe(maybe_0, maybe_0)
    var_3 = maybe_1.to_try()
    var_3.to_try()


def test_case_18():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_try()
    var_0.to_either()


def test_case_19():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_either()
    maybe_1 = module_0.Maybe(none_type_0, maybe_0)
    var_2 = maybe_1.filter(var_1)
    var_3 = maybe_0.to_box()
    maybe_0.filter(var_0)


def test_case_20():
    none_type_0 = None
    str_0 = "\n        Method executes a reducer function\n        on each element of the array, resulting in a single output value.\n\n        :param fn: function to call with ImmutableList value\n        :type fn: Function(A, B) -> A\n        :returns: A\n        "
    set_0 = {none_type_0, str_0, str_0, none_type_0}
    tuple_0 = (str_0, set_0)
    maybe_0 = module_0.Maybe(none_type_0, tuple_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.filter(var_0)
    var_2 = maybe_0.to_box()
    maybe_1 = var_0.map(var_0)
    var_3 = maybe_1.to_try()
    var_3.to_try()


def test_case_21():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = True
    maybe_1 = module_0.Maybe(bool_1, none_type_0)
    bool_2 = maybe_1.__eq__(maybe_1)
    var_0 = maybe_0.filter(none_type_0)
    var_1 = maybe_1.get_or_else(maybe_1)
    maybe_1.map(maybe_0)


def test_case_22():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.ap(maybe_0)
    bool_1 = True
    maybe_1 = module_0.Maybe(bool_1, none_type_0)
    var_1 = maybe_1.to_lazy()
    var_2 = maybe_0.filter(var_1)
    var_3 = maybe_0.to_try()
    bool_2 = maybe_1.__eq__(var_0)
    var_4 = maybe_0.to_lazy()
    var_5 = var_0.to_validation()
    var_6 = var_2.to_try()
    var_7 = maybe_1.to_box()
    maybe_2 = module_0.Maybe(var_7, var_4)
    maybe_1.filter(var_3)
