# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_box()
    none_type_1 = None
    maybe_1 = module_0.Maybe(none_type_1, none_type_1)
    bool_0 = maybe_1.__eq__(var_0)


def test_case_3():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = True
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.ap(maybe_1)
    bool_1 = maybe_1.__eq__(var_0)
    var_1 = maybe_1.ap(maybe_1)
    var_2 = maybe_1.filter(var_1)
    var_3 = var_1.to_lazy()
    maybe_0.filter(none_type_0)


def test_case_4():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_either()
    maybe_0.map(bool_0)


def test_case_5():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = maybe_0.__eq__(none_type_0)
    var_0 = maybe_0.ap(none_type_0)
    bool_2 = var_0.__eq__(bool_0)
    maybe_1 = module_0.Maybe(var_0, bool_0)
    var_1 = var_0.bind(bool_2)
    var_2 = var_1.filter(bool_2)
    var_3 = var_2.to_validation()
    maybe_2 = module_0.Maybe(bool_0, none_type_0)
    bool_3 = maybe_1.ap(var_0)
    var_4 = maybe_0.to_either()
    var_5 = var_4.map(var_0)


def test_case_6():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_0.bind(none_type_0)


def test_case_7():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = True
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_1.ap(maybe_1)
    var_1 = maybe_1.filter(var_0)
    maybe_0.filter(none_type_0)


def test_case_8():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = True
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_1.filter(maybe_0)
    maybe_0.filter(none_type_0)


def test_case_9():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.ap(maybe_0)
    var_1 = maybe_0.get_or_else(bool_0)
    var_2 = maybe_0.map(var_1)
    bool_1 = maybe_0.__eq__(var_2)
    var_3 = var_0.to_try()
    bool_2 = maybe_0.__eq__(none_type_0)
    var_4 = maybe_0.filter(var_0)
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_5 = var_0.to_lazy()
    maybe_1.filter(none_type_0)


def test_case_10():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    str_0 = ":)'"
    none_type_1 = None
    bytes_0 = b""
    bool_1 = False
    maybe_1 = module_0.Maybe(bytes_0, bool_1)
    var_0 = maybe_1.to_either()
    var_1 = maybe_1.get_or_else(none_type_1)
    dict_0 = {var_1: maybe_1, var_1: none_type_1, bytes_0: none_type_1}
    maybe_2 = module_0.Maybe(dict_0, var_1)
    maybe_2.map(str_0)


def test_case_11():
    str_0 = "Jd^Zb6 c"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.to_box()
    maybe_1 = module_0.Maybe(maybe_0, maybe_0)
    var_0.bind(var_0)


def test_case_12():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = True
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_1.ap(maybe_1)
    var_1 = maybe_1.filter(var_0)
    var_2 = var_0.to_lazy()
    maybe_0.filter(none_type_0)


def test_case_13():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = True
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_1.filter(maybe_0)
    var_1 = maybe_0.to_lazy()
    maybe_0.filter(none_type_0)


def test_case_14():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    list_1 = [list_0, bool_0, bool_0, list_0]
    maybe_0 = module_0.Maybe(list_1, bool_0)
    var_0 = maybe_0.to_try()


def test_case_15():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = maybe_0.__eq__(none_type_0)
    var_0 = maybe_0.ap(maybe_0)
    bool_2 = maybe_0.__eq__(none_type_0)
    bool_3 = False
    maybe_1 = module_0.Maybe(bool_1, bool_3)
    var_1 = maybe_0.filter(var_0)
    var_2 = var_1.to_validation()
    maybe_2 = module_0.Maybe(var_0, maybe_1)
    bool_4 = maybe_2.__eq__(bool_1)
    var_2.map(maybe_1)


def test_case_16():
    none_type_0 = None
    none_type_1 = None
    maybe_0 = module_0.Maybe(none_type_1, none_type_1)
    var_0 = maybe_0.to_validation()
    bool_0 = maybe_0.__eq__(var_0)
    var_0.map(none_type_0)


def test_case_17():
    int_0 = 0
    int_1 = -980
    bool_0 = True
    maybe_0 = module_0.Maybe(int_1, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_box()
    var_2 = maybe_0.filter(var_1)
    var_1.ap(int_0)


def test_case_18():
    complex_0 = 2804.456 - 1298.153282j
    bool_0 = False
    tuple_0 = (complex_0, bool_0)
    maybe_0 = module_0.Maybe(tuple_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_either()
    var_1.bind(bool_0)


def test_case_19():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = maybe_0.__eq__(none_type_0)
    var_0 = maybe_0.to_validation()
    bool_2 = var_0.__eq__(bool_1)
    bool_3 = True
    bool_4 = maybe_0.__eq__(maybe_0)
    maybe_1 = module_0.Maybe(maybe_0, bool_3)
    var_1 = maybe_1.to_lazy()
    maybe_0.filter(bool_1)


def test_case_20():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_box()
    bool_1 = True
    maybe_1 = module_0.Maybe(none_type_0, bool_1)
    bool_2 = maybe_1.__eq__(maybe_0)
    var_1 = maybe_1.ap(maybe_1)
    var_2 = maybe_1.get_or_else(bool_0)
    var_3 = var_1.to_try()
    bool_3 = maybe_1.__eq__(none_type_0)
    var_4 = maybe_1.filter(var_1)
    maybe_2 = module_0.Maybe(none_type_0, none_type_0)
    var_5 = var_1.to_lazy()
    var_6 = maybe_2.ap(var_5)
    maybe_0.filter(none_type_0)
