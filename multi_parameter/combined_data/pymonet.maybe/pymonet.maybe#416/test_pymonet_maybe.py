# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import builtins as module_1


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)


def test_case_3():
    bool_0 = True
    set_0 = {bool_0}
    maybe_0 = module_0.Maybe(set_0, bool_0)
    object_0 = module_1.object()
    bool_1 = maybe_0.__eq__(object_0)
    bool_2 = maybe_0.__eq__(maybe_0)


def test_case_4():
    str_0 = "+j3d0"
    none_type_0 = None
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.map(str_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_1 = var_0.filter(bool_0)
    maybe_1 = module_0.Maybe(bool_0, none_type_0)
    maybe_1.filter(none_type_0)


def test_case_5():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_try()
    maybe_0.ap(maybe_0)


def test_case_6():
    bool_0 = True
    str_0 = "\n        Create empty maybe.\n\n        :returns: Maybe[None]\n        "
    bool_1 = True
    maybe_0 = module_0.Maybe(str_0, bool_1)
    var_0 = maybe_0.map(bool_0)
    var_1 = maybe_0.to_try()
    var_2 = maybe_0.bind(var_1)
    var_3 = maybe_0.ap(bool_0)
    var_4 = var_3.ap(bool_0)
    var_5 = var_4.to_try()
    var_6 = var_3.to_either()
    var_7 = maybe_0.bind(var_3)


def test_case_7():
    bytes_0 = b"~o\xfc\x9f5\xe8\xc1\xa0\rK\xbd\xa5\x91\xa3\xd8"
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.ap(bytes_0)
    var_1 = var_0.to_lazy()


def test_case_8():
    tuple_0 = ()
    str_0 = "$$++Q0"
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    maybe_1 = module_0.Maybe(maybe_0, bool_0)
    var_0 = maybe_1.filter(str_0)
    var_1 = var_0.ap(tuple_0)


def test_case_9():
    bool_0 = True
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_1, bool_1)
    var_0 = maybe_0.get_or_else(bool_0)
    var_0.to_try()


def test_case_10():
    complex_0 = -251.75625 - 1499.14065j
    bool_0 = False
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.get_or_else(complex_0)
    var_0.to_lazy()


def test_case_11():
    bytes_0 = b"\x8ddF`\x95\xf6\xee\x12\xe4\x90O~\x8d"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_try()


def test_case_12():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    int_0 = 0
    bool_1 = False
    maybe_1 = module_0.Maybe(int_0, bool_1)
    var_0 = maybe_1.to_either()
    bool_2 = var_0.__eq__(maybe_1)


def test_case_13():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_validation()
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_1 = var_0.to_either()
    var_2 = maybe_1.get_or_else(maybe_1)
    var_3 = maybe_0.to_box()
    maybe_1.map(var_2)


def test_case_14():
    bool_0 = True
    int_0 = 0
    bool_1 = False
    maybe_0 = module_0.Maybe(int_0, bool_1)
    var_0 = maybe_0.to_box()
    var_0.ap(bool_0)


def test_case_15():
    set_0 = set()
    bool_0 = True
    maybe_0 = module_0.Maybe(set_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_either()


def test_case_16():
    bool_0 = True
    set_0 = {bool_0}
    maybe_0 = module_0.Maybe(set_0, bool_0)
    object_0 = module_1.object()
    bool_1 = maybe_0.__eq__(object_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.bind(var_0)
    var_2 = maybe_0.bind(var_0)
    var_3 = maybe_0.to_try()
    bool_2 = False
    maybe_1 = module_0.Maybe(var_0, bool_2)
    var_4 = maybe_1.to_lazy()


def test_case_17():
    bytes_0 = b"z\xbaw?\xee\xd1z\xb3X\xd6"
    bool_0 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = var_0.to_either()


def test_case_18():
    list_0 = []
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_either()
    var_2 = maybe_0.to_try()
    var_3 = var_1.to_lazy()
    var_3.filter(list_0)


def test_case_19():
    set_0 = set()
    none_type_0 = None
    maybe_0 = module_0.Maybe(set_0, none_type_0)
    bool_0 = maybe_0.__eq__(maybe_0)


def test_case_20():
    bytes_0 = b"?\xe6\x80\x8f+\x14\\"
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    maybe_0.bind(none_type_0)


def test_case_21():
    bytes_0 = b"?\xe6\x80\x8f+\x14\\"
    none_type_0 = None
    bool_0 = True
    dict_0 = {bytes_0: bool_0}
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.ap(dict_0)
    set_0 = {bool_0}
    maybe_1 = module_0.Maybe(set_0, bool_0)
    maybe_2 = module_0.Maybe(var_0, maybe_1)
    bool_1 = maybe_1.__eq__(maybe_2)
    bool_2 = maybe_1.__eq__(maybe_1)
    var_1 = maybe_1.bind(none_type_0)
    var_2 = maybe_1.to_either()
    var_3 = var_1.bind(var_2)
    var_4 = var_2.bind(var_2)
    var_5 = maybe_1.bind(var_2)
    var_6 = var_3.to_validation()
    var_7 = var_3.get_or_else(var_2)
    var_8 = var_1.map(var_6)
    bool_3 = False
    maybe_3 = module_0.Maybe(var_2, bool_3)
    var_9 = maybe_3.to_lazy()
    var_10 = var_8.to_try()
    var_11 = var_5.filter(var_3)
    var_12 = var_0.to_try()
