# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import builtins as module_1
import typing as module_2


def test_case_0():
    str_0 = "y"
    maybe_0 = module_0.Maybe(str_0, str_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    bytes_0 = b"\x17?\x90\xdbp\xd3\xd8=\xc7%\xe9S\x8e\xbfBV\x99n$"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    none_type_0 = None
    int_0 = -1700
    bool_0 = True
    maybe_1 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_1.filter(none_type_0)
    bool_1 = var_0.__eq__(none_type_0)
    var_1 = var_0.to_either()
    maybe_2 = module_0.Maybe(bytes_0, bool_1)
    bool_2 = maybe_2.__eq__(maybe_0)


def test_case_3():
    bool_0 = False
    set_0 = {bool_0}
    none_type_0 = None
    maybe_0 = module_0.Maybe(set_0, none_type_0)
    var_0 = maybe_0.get_or_else(set_0)
    var_1 = maybe_0.to_box()
    bool_1 = maybe_0.__eq__(var_0)
    var_2 = var_1.to_either()


def test_case_4():
    set_0 = set()
    none_type_0 = None
    bool_0 = False
    str_0 = "5gB!y['|uW!aE"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.filter(bool_0)
    var_1 = var_0.map(none_type_0)
    var_2 = var_1.get_or_else(set_0)
    var_2.to_either()


def test_case_5():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_1 = maybe_1.to_lazy()
    var_2 = var_1.to_either()
    var_2.ap(var_0)


def test_case_6():
    bytes_0 = b"\x17?\x90\xdbp\xd3\xd8=\xc7%\xe9S\x8e\xbfBV\x99n$"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    none_type_0 = None
    var_0 = maybe_0.ap(bytes_0)
    var_1 = var_0.get_or_else(none_type_0)
    var_2 = maybe_0.bind(var_1)
    bool_0 = False
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    var_3 = var_0.filter(none_type_0)
    bool_1 = var_3.__eq__(var_1)
    var_4 = var_3.to_either()
    maybe_1.filter(var_4)


def test_case_7():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.bind(none_type_0)


def test_case_8():
    bytes_0 = b"\xcf\xf9\x08\x18\xa7\xd5\xee\xa8\xc7\xe0'\xb0\xf5j\xe3"
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.ap(bool_0)
    var_1 = var_0.filter(none_type_0)
    var_2 = var_1.to_either()
    var_3 = var_2.ap(bytes_0)
    var_3.to_either()


def test_case_9():
    int_0 = 0
    maybe_0 = module_0.Maybe(int_0, int_0)
    maybe_0.ap(int_0)


def test_case_10():
    complex_0 = 569.76 + 356.84057j
    bool_0 = True
    maybe_0 = module_0.Maybe(complex_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.filter(bool_0)
    var_2 = maybe_0.get_or_else(var_1)


def test_case_11():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_try()
    maybe_1 = module_0.Maybe(var_0, var_0)
    var_1 = maybe_1.filter(var_0)
    var_2 = var_1.to_either()
    maybe_0.filter(var_2)


def test_case_12():
    none_type_0 = None
    int_0 = 1061
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.get_or_else(none_type_0)


def test_case_13():
    bool_0 = False
    set_0 = {bool_0}
    none_type_0 = None
    maybe_0 = module_0.Maybe(set_0, none_type_0)
    var_0 = maybe_0.get_or_else(set_0)
    var_1 = maybe_0.to_box()
    var_2 = var_1.to_either()


def test_case_14():
    str_0 = "\n        :param semigroup: other semigroup to concat\n        :type semigroup: Map[B]\n        :returns: new Map with concated all values\n        :rtype: Map[A]\n        "
    bool_0 = False
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_try()
    var_2 = var_1.get_or_else(str_0)
    var_2.to_box()


def test_case_15():
    bytes_0 = b"@\xf75"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.ap(bytes_0)
    var_1 = maybe_0.filter(var_0)
    var_2 = maybe_0.to_lazy()
    var_3 = maybe_0.to_lazy()
    var_4 = var_0.to_either()
    maybe_1 = module_0.Maybe(bytes_0, bytes_0)
    var_2.to_lazy()


def test_case_16():
    bytes_0 = b"\x17?\x90\xdbp\xd3\xd8=\xc7%\xe9S\x8e\xbfBV\x99n$"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    none_type_0 = None
    var_0 = maybe_0.ap(bytes_0)
    var_1 = var_0.get_or_else(bytes_0)
    var_2 = maybe_0.bind(bytes_0)
    maybe_1 = module_0.Maybe(none_type_0, var_2)
    var_3 = maybe_1.to_try()
    none_type_1 = None
    var_4 = maybe_1.filter(none_type_1)
    var_5 = var_2.to_box()
    var_6 = var_4.to_either()
    maybe_2 = module_0.Maybe(var_3, none_type_1)
    maybe_2.filter(none_type_1)


def test_case_17():
    bytes_0 = b"\x17?\x90\xdbp\xd3\xd8=\xc7%\xe9S\x8e\xbfBV\x99n$"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    none_type_0 = None
    bool_0 = False
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_1.to_try()
    int_0 = -918
    int_1 = -1700
    bool_1 = True
    maybe_2 = module_0.Maybe(int_1, bool_1)
    var_1 = maybe_2.filter(var_0)
    bool_2 = var_1.__eq__(var_0)
    var_2 = var_1.to_either()
    var_3 = var_1.to_validation()
    var_4 = var_1.filter(bool_1)
    var_5 = maybe_2.ap(var_3)
    var_6 = maybe_2.to_validation()
    var_7 = maybe_0.ap(int_0)


def test_case_18():
    none_type_0 = None
    int_0 = 2758
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.ap(none_type_0)
    var_1 = var_0.to_box()
    set_0 = {int_0, int_0}
    int_1 = 0
    list_0 = [int_1]
    maybe_1 = module_0.Maybe(list_0, int_1)
    var_2 = maybe_1.to_validation()
    var_3 = var_2.to_try()
    var_4 = var_3.get_or_else(set_0)
    var_4.bind(none_type_0)


def test_case_19():
    bytes_0 = b"@\xf75"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.ap(bytes_0)
    var_1 = maybe_0.filter(var_0)
    var_2 = maybe_0.to_lazy()
    var_3 = maybe_0.to_lazy()
    var_4 = var_0.to_either()
    var_5 = var_3.to_try()
    maybe_1 = module_0.Maybe(bytes_0, bytes_0)
    var_2.to_lazy()


def test_case_20():
    bytes_0 = b"\x17?\x90\xdbp\xd3\xd8=\xc7%\xe9S\x8e\xbfBV\x99n$"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    none_type_0 = None
    bool_0 = False
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_1.to_try()
    none_type_1 = None
    int_0 = -1700
    bool_1 = maybe_0.__eq__(maybe_0)
    bool_2 = True
    maybe_2 = module_0.Maybe(int_0, bool_2)
    var_1 = maybe_2.filter(none_type_1)
    bool_3 = var_1.__eq__(none_type_1)
    var_2 = maybe_1.to_either()
    object_0 = module_1.object()
    var_3 = var_1.filter(bool_2)
    var_4 = maybe_2.ap(none_type_1)
    var_5 = maybe_2.to_validation()
    var_6 = var_3.to_validation()
    var_7 = var_2.to_lazy()
    maybe_3 = module_0.Maybe(var_5, var_2)
    module_2.Generic(**int_0)


def test_case_21():
    bytes_0 = b"\x17?\x90\xdbp\xd3\xd8=\xc7%\xe9S\x8e\xbfBV\x99n$"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    none_type_0 = None
    bool_0 = False
    maybe_1 = module_0.Maybe(maybe_0, maybe_0)
    var_0 = maybe_0.to_try()
    none_type_1 = None
    int_0 = -1700
    maybe_2 = module_0.Maybe(bool_0, none_type_0)
    var_1 = maybe_0.filter(var_0)
    bool_1 = maybe_2.__eq__(maybe_2)
    var_2 = maybe_0.to_either()
    bool_2 = False
    maybe_3 = module_0.Maybe(bytes_0, bool_2)
    var_3 = var_1.filter(none_type_1)
    maybe_4 = module_0.Maybe(none_type_1, maybe_3)
    var_4 = var_2.to_box()
    bool_3 = var_4.__eq__(int_0)
    var_5 = var_1.to_either()
    var_6 = var_4.ap(maybe_4)
    var_7 = var_6.to_validation()
    var_8 = maybe_1.to_either()
    maybe_3.bind(maybe_0)
