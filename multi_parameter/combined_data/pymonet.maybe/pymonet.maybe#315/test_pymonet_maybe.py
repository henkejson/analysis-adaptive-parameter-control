# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1
import builtins as module_2


def test_case_0():
    float_0 = -1909.165719
    maybe_0 = module_0.Maybe(float_0, float_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    bytes_0 = b",\xc6\x08\xb1\xd8*"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    bool_0 = False
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.filter(maybe_0)
    bool_1 = maybe_1.__eq__(var_0)
    maybe_1.filter(maybe_1)


def test_case_3():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.filter(none_type_0)
    str_0 = "\n        Returns new ImmutableList with argument value on the begin of list\n        and other list elements after it\n\n        :param new_element: element to append on the begin of list\n        :type fn: A\n        :returns: ImmutableList[A]\n        "
    bool_1 = False
    maybe_1 = module_0.Maybe(str_0, bool_1)
    bool_2 = maybe_1.__eq__(bool_1)
    var_1 = maybe_1.get_or_else(str_0)


def test_case_4():
    bytes_0 = b",\xc6\x08\xb1\xd8*"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.map(maybe_0)
    bool_0 = False
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    var_1 = var_0.filter(var_0)
    bool_1 = maybe_1.__eq__(var_1)
    maybe_1.filter(maybe_1)


def test_case_5():
    generic_0 = module_1.Generic()
    bool_0 = False
    maybe_0 = module_0.Maybe(generic_0, bool_0)
    var_0 = maybe_0.to_box()
    bool_1 = maybe_0.__eq__(var_0)
    var_1 = maybe_0.to_validation()
    var_2 = var_0.to_lazy()
    var_3 = var_1.to_lazy()
    var_4 = var_0.to_either()
    maybe_0.map(var_0)


def test_case_6():
    bytes_0 = b",\xc6\x08\xb1\xd8*"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.ap(maybe_0)
    bool_0 = False
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    var_1 = var_0.bind(var_0)
    var_2 = var_0.filter(var_0)
    maybe_1.filter(bool_0)


def test_case_7():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = False
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_1.to_validation()
    maybe_1.bind(var_0)


def test_case_8():
    bytes_0 = b",\xc6\x08\xb1\xd8*"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    bool_0 = False
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.ap(bytes_0)
    var_1 = var_0.filter(var_0)
    maybe_1.filter(bool_0)


def test_case_9():
    bytes_0 = b""
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    maybe_0.ap(bytes_0)


def test_case_10():
    bytes_0 = b",\xc6\x08\xb1\xd8*"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    bool_0 = False
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.filter(maybe_0)
    maybe_1.filter(maybe_1)


def test_case_11():
    bool_0 = True
    none_type_0 = None
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.filter(none_type_0)
    maybe_1 = module_0.Maybe(maybe_0, bool_1)
    bool_2 = maybe_0.__eq__(bool_1)
    var_1 = maybe_1.get_or_else(none_type_0)


def test_case_12():
    object_0 = module_2.object()
    bytes_0 = b",\xc6\x08\xb1\xd8*"
    maybe_0 = module_0.Maybe(object_0, bytes_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.ap(object_0)
    bool_0 = False
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    var_2 = var_1.filter(var_0)
    maybe_1.filter(object_0)


def test_case_13():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.to_either()
    var_2 = var_1.to_lazy()
    var_2.get_or_else(none_type_0)


def test_case_14():
    bytes_0 = b",\xc6\x08\xb1\xd8*"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.ap(maybe_0)
    bool_0 = False
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    var_1 = var_0.filter(var_0)
    var_2 = maybe_0.to_box()
    maybe_1.filter(bool_0)


def test_case_15():
    bytes_0 = b",\xc6\x08\xb1\xd8*"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.ap(maybe_0)
    bool_0 = False
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    var_2 = var_1.filter(var_1)
    bool_1 = maybe_1.__eq__(var_2)
    maybe_1.filter(bool_0)


def test_case_16():
    none_type_0 = None
    list_0 = []
    generic_0 = module_1.Generic(*list_0)
    none_type_1 = None
    maybe_0 = module_0.Maybe(none_type_1, none_type_1)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.map(generic_0)
    var_2 = var_1.to_try()
    var_2.ap(none_type_0)


def test_case_17():
    bool_0 = False
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    none_type_1 = None
    bool_1 = True
    maybe_1 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_1.filter(none_type_1)
    str_0 = "\n        Returns new ImmutableList with argument value on the begin of list\n        and other list elements after it\n\n        :param new_element: element to append on the begin of list\n        :type fn: A\n        :returns: ImmutableList[A]\n        "
    var_1 = maybe_1.to_try()
    bool_2 = False
    maybe_2 = module_0.Maybe(str_0, bool_2)
    bool_3 = maybe_2.__eq__(bool_0)
    var_2 = var_0.get_or_else(var_0)
    var_3 = maybe_2.get_or_else(str_0)


def test_case_18():
    bytes_0 = b"'`\\\x14\x10/\x88f\xcf\xf4\x1d\x1e\x864"
    bool_0 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.to_try()
    var_0.to_try()


def test_case_19():
    bytes_0 = b",\xc6\x08\xb1\xd8*"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.ap(maybe_0)
    bool_0 = False
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    var_1 = maybe_0.to_validation()
    var_2 = var_0.filter(var_0)
    maybe_1.filter(bool_0)


def test_case_20():
    bytes_0 = b",\xc6\x08\xb1\xd8*"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.to_either()
    var_2 = maybe_0.ap(var_0)
    bool_0 = False
    var_3 = var_2.to_box()
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    var_4 = var_2.filter(var_1)
    var_5 = var_0.to_validation()
    maybe_1.filter(var_0)


def test_case_21():
    bytes_0 = b",o\xb1\x00\xd0\xa3"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.ap(maybe_0)
    bool_0 = False
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    var_2 = var_1.filter(var_1)
    bool_1 = var_1.__eq__(var_2)
    maybe_1.filter(bool_0)


def test_case_22():
    bytes_0 = b"\rI\x00\x08\x88\\\xe0\xf9\xac\xdd?\x13? \xa2"
    none_type_0 = None
    str_0 = "&rA3@}\x0cCpj.<~v{"
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    maybe_1 = module_0.Maybe(bytes_0, none_type_0)
    var_0 = maybe_1.to_box()
    int_0 = 492
    maybe_2 = module_0.Maybe(int_0, maybe_1)
    var_1 = maybe_1.to_lazy()
    var_2 = var_1.to_try()
    bool_1 = maybe_1.__eq__(maybe_1)
    maybe_1.filter(var_1)
