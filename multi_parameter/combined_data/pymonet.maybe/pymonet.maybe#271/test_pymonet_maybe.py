# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import builtins as module_1


def test_case_0():
    str_0 = "b$$<1.N'"
    maybe_0 = module_0.Maybe(str_0, str_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = maybe_0.__eq__(none_type_0)
    var_0 = maybe_0.get_or_else(none_type_0)
    var_0.to_validation()


def test_case_3():
    bytes_0 = b"]\x93kJF\x19"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_try()
    bool_0 = True
    var_1 = maybe_0.map(bytes_0)
    maybe_1 = module_0.Maybe(bytes_0, bool_0)


def test_case_4():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.ap(maybe_0)


def test_case_5():
    int_0 = -912
    maybe_0 = module_0.Maybe(int_0, int_0)
    float_0 = 322.584
    var_0 = maybe_0.to_box()
    maybe_1 = module_0.Maybe(float_0, float_0)
    var_1 = maybe_1.ap(float_0)
    var_2 = maybe_1.bind(float_0)
    var_3 = maybe_1.bind(var_1)
    var_4 = var_3.to_lazy()
    var_5 = maybe_1.to_try()
    var_5.to_try()


def test_case_6():
    complex_0 = 93.98767 + 316.733j
    none_type_0 = None
    bytes_0 = b"(i'\xfcfo\x0cY\xa3R\xb8\xf4"
    list_0 = [bytes_0]
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = maybe_0.__eq__(complex_0)
    var_0 = maybe_0.get_or_else(none_type_0)
    var_1 = maybe_0.ap(none_type_0)
    var_2 = maybe_0.map(var_1)
    var_3 = maybe_0.ap(none_type_0)
    var_4 = var_1.bind(complex_0)
    var_5 = var_4.bind(list_0)
    var_6 = var_5.get_or_else(bool_0)
    var_7 = var_4.filter(var_1)
    int_0 = 387
    var_8 = maybe_0.to_lazy()
    var_9 = var_4.get_or_else(int_0)
    var_10 = var_3.to_try()
    var_11 = var_3.to_validation()
    var_12 = var_1.get_or_else(list_0)
    var_13 = var_5.map(var_9)
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1.bind(var_13)


def test_case_7():
    none_type_0 = None
    str_0 = "hE"
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.ap(none_type_0)
    var_1 = var_0.to_box()


def test_case_8():
    bytes_0 = b"]\x93kJF\x19"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.filter(bytes_0)
    var_1 = maybe_0.bind(maybe_0)
    maybe_1 = module_0.Maybe(var_0, var_0)
    var_2 = var_0.filter(maybe_0)
    var_3 = maybe_0.to_box()
    var_3.bind(var_1)


def test_case_9():
    bool_0 = True
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_1 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_1.to_validation()
    maybe_1.filter(var_0)


def test_case_10():
    int_0 = -1647
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.get_or_else(int_0)
    var_1.bind(int_0)


def test_case_11():
    str_0 = "\n        Take function and applied this function with monad value and returns function result.\n\n        :params binder: function to apply on monad value\n        :type binder: Function(A) -> Try[B]\n        :returns: for successfully result of binder, othercase copy of self\n        :rtype: Try[B]\n        "
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.to_either()
    var_2 = var_1.to_try()
    var_1.filter(var_2)


def test_case_12():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_either()


def test_case_13():
    list_0 = []
    bool_0 = False
    maybe_0 = module_0.Maybe(list_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.to_box()
    var_2 = var_0.to_either()
    var_3 = var_2.to_box()
    var_3.to_box()


def test_case_14():
    object_0 = module_1.object()
    bool_0 = True
    maybe_0 = module_0.Maybe(object_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_either()


def test_case_15():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = maybe_0.__eq__(none_type_0)
    var_0 = maybe_0.to_try()
    var_0.to_validation()


def test_case_16():
    bool_0 = True
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_1 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_1.to_validation()
    float_0 = -3473.482876
    var_1 = maybe_1.filter(var_0)
    var_2 = var_1.bind(var_0)
    str_0 = "\n        Transform Box into not empty Maybe.\n\n        :returns: non empty Maybe monad with previous value\n        :rtype: Maybe[A]\n        "
    maybe_2 = module_0.Maybe(str_0, str_0)
    var_3 = maybe_2.filter(float_0)
    var_4 = var_1.to_box()
    var_5 = var_3.bind(var_4)
    var_6 = maybe_0.to_lazy()
    var_7 = maybe_2.to_lazy()


def test_case_17():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.to_validation()
    maybe_0.map(maybe_0)


def test_case_18():
    complex_0 = 93.98767 + 316.733j
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(complex_0, bool_0)
    var_0 = maybe_0.map(complex_0)
    bool_1 = maybe_0.__eq__(var_0)
    var_1 = var_0.get_or_else(maybe_0)
    var_2 = maybe_0.ap(var_1)
    var_3 = var_2.map(var_1)
    var_4 = var_2.ap(complex_0)
    var_5 = maybe_0.bind(var_4)
    var_6 = var_2.map(var_2)
    var_7 = var_1.ap(none_type_0)
    var_8 = var_3.bind(none_type_0)
    var_9 = maybe_0.bind(var_4)
    var_10 = var_9.get_or_else(none_type_0)
    var_11 = var_1.filter(var_4)
    var_12 = var_6.get_or_else(var_9)
    var_13 = var_1.to_try()
    var_14 = var_3.to_validation()
    var_15 = var_6.get_or_else(var_7)
    maybe_1 = module_0.Maybe(var_11, var_13)
    var_16 = var_3.to_lazy()


def test_case_19():
    bytes_0 = b"(i'\xfcfo\x0cY\xa3R\xb8\xf4"
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    var_1 = var_0.ap(bool_0)
    var_2 = maybe_0.get_or_else(var_1)
    var_3 = maybe_0.map(maybe_0)
    var_4 = var_0.to_box()
    var_5 = var_2.ap(bool_0)
    var_6 = var_2.bind(bool_0)
    var_7 = maybe_0.bind(var_3)
    var_8 = var_0.get_or_else(var_2)
    var_9 = var_6.filter(var_0)
    var_10 = var_6.to_lazy()
    var_11 = var_9.get_or_else(var_3)
    var_12 = var_8.to_try()
    var_13 = var_11.to_validation()
    var_14 = var_5.get_or_else(var_9)
    var_15 = var_8.map(var_13)
    maybe_1 = module_0.Maybe(var_7, var_1)
    var_16 = var_8.bind(var_8)
    var_17 = var_9.get_or_else(var_5)
    var_18 = var_10.map(var_6)
    var_19 = var_5.to_try()
    bool_2 = maybe_1.__eq__(var_8)
    var_20 = maybe_0.to_validation()


def test_case_20():
    bytes_0 = b"(i'\xfcfo\x0cY\xa3R\xb8\xf4"
    bool_0 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    var_0.ap(bool_0)
