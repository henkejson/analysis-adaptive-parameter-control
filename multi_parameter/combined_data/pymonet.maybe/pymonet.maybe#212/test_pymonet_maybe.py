# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import builtins as module_1
import typing as module_2


def test_case_0():
    int_0 = -415
    maybe_0 = module_0.Maybe(int_0, int_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_try()
    bool_2 = maybe_0.__eq__(maybe_0)
    var_1 = maybe_0.get_or_else(none_type_0)
    bool_3 = maybe_0.__eq__(none_type_0)
    var_2 = maybe_0.to_lazy()
    maybe_0.map(var_2)


def test_case_3():
    float_0 = 2138.5
    none_type_0 = None
    maybe_0 = module_0.Maybe(float_0, none_type_0)
    bool_0 = True
    bool_1 = maybe_0.__eq__(bool_0)
    var_0 = maybe_0.to_try()


def test_case_4():
    float_0 = -3.86
    int_0 = 2359
    float_1 = 3049.262684
    bytes_0 = b"\xa9Q\x1b#y\xd6\xff\xd9>\xfd\xff\xb7\x15\xe0\xc7%c"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.map(float_1)
    var_1 = var_0.filter(int_0)
    var_2 = var_1.map(float_0)


def test_case_5():
    int_0 = 3175
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_1.ap(int_0)
    maybe_0.map(var_0)


def test_case_6():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.to_lazy()
    var_2 = maybe_0.ap(maybe_0)
    object_0 = module_1.object()
    bool_1 = maybe_0.__eq__(object_0)
    var_3 = maybe_0.to_lazy()
    var_4 = var_0.to_either()
    var_5 = maybe_0.bind(var_4)
    var_6 = var_0.to_either()
    var_7 = var_3.to_either()
    var_0.ap(none_type_0)


def test_case_7():
    complex_0 = 1973 - 18.5j
    float_0 = -2207.8
    bool_0 = False
    set_0 = {bool_0, complex_0}
    tuple_0 = (complex_0, float_0, bool_0, set_0)
    bool_1 = True
    maybe_0 = module_0.Maybe(tuple_0, bool_1)
    var_0 = maybe_0.filter(complex_0)
    var_1 = maybe_0.to_lazy()
    var_2 = var_0.to_lazy()
    none_type_0 = None
    var_3 = var_0.to_lazy()
    bool_2 = True
    bool_3 = var_1.__eq__(bool_2)
    maybe_1 = module_0.Maybe(complex_0, none_type_0)
    maybe_1.bind(none_type_0)


def test_case_8():
    float_0 = 1044.2
    bool_0 = False
    maybe_0 = module_0.Maybe(float_0, bool_0)
    str_0 = 'e2@WI"m[.H{{G-<b=, '
    maybe_1 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_1.filter(maybe_0)
    none_type_0 = None
    var_1 = maybe_1.ap(none_type_0)


def test_case_9():
    bytes_0 = b"\x92\xea\xdeK\xb9"
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    maybe_0.ap(bytes_0)


def test_case_10():
    bool_0 = True
    str_0 = "Q\x0cV}zZbWB't\r:]"
    bool_1 = True
    maybe_0 = module_0.Maybe(str_0, bool_1)
    var_0 = maybe_0.filter(bool_0)


def test_case_11():
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.filter(bool_0)
    maybe_1.filter(var_0)


def test_case_12():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_try()
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    bool_2 = True
    maybe_1 = module_0.Maybe(list_0, bool_2)
    var_1 = maybe_1.filter(var_0)
    var_2 = var_1.get_or_else(none_type_0)


def test_case_13():
    int_0 = -1117
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.to_either()
    var_0.to_either()


def test_case_14():
    float_0 = -4133.48
    bool_0 = False
    maybe_0 = module_0.Maybe(float_0, bool_0)
    var_0 = maybe_0.to_either()
    var_0.to_either()


def test_case_15():
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.filter(var_0)
    maybe_1.filter(var_0)


def test_case_16():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_box()


def test_case_17():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.filter(var_0)


def test_case_18():
    float_0 = 1044.2
    bool_0 = False
    maybe_0 = module_0.Maybe(float_0, bool_0)
    str_0 = 'e2@WI"m[.H{{G-<b=, '
    maybe_1 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_1.filter(maybe_0)
    var_1 = var_0.to_try()


def test_case_19():
    generic_0 = module_2.Generic()
    maybe_0 = module_0.Maybe(generic_0, generic_0)
    var_0 = maybe_0.to_validation()
    var_0.to_validation()


def test_case_20():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_validation()
    bytes_0 = b""
    maybe_1 = module_0.Maybe(bool_0, bytes_0)
    var_1 = maybe_1.to_validation()
    var_2 = maybe_0.filter(var_0)
    var_3 = module_2.Generic()
    var_4 = var_2.to_lazy()


def test_case_21():
    dict_0 = {}
    bool_0 = True
    maybe_0 = module_0.Maybe(dict_0, bool_0)
    str_0 = "\\Jo<TxY4 aWC',"
    bool_1 = maybe_0.__eq__(maybe_0)
    dict_1 = {str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = maybe_0.to_either()
    list_0 = []
    var_1 = maybe_0.to_validation()
    var_2 = maybe_0.bind(var_1)
    int_0 = 1172
    maybe_1 = module_0.Maybe(int_0, int_0)
    var_3 = maybe_1.to_either()
    maybe_2 = module_0.Maybe(var_1, bool_0)
    var_4 = maybe_1.to_lazy()
    var_5 = maybe_0.to_try()
    var_6 = maybe_1.bind(var_3)
    var_7 = maybe_1.ap(list_0)
    var_8 = var_7.bind(var_7)
    bool_2 = False
    bool_3 = var_6.__eq__(bool_2)
    bool_4 = var_7.__eq__(dict_1)
    var_9 = var_3.map(var_7)
    maybe_3 = module_0.Maybe(var_7, var_3)
    var_10 = var_8.ap(maybe_3)
    bool_5 = maybe_3.__eq__(var_10)
    var_11 = var_2.to_box()
    maybe_4 = module_0.Maybe(var_3, var_3)
    bool_6 = var_7.__eq__(var_7)
    var_12 = var_10.get_or_else(bool_6)
    var_13 = var_3.bind(var_12)
    bool_7 = maybe_1.__eq__(int_0)
    var_14 = var_7.map(dict_1)
    var_15 = var_6.to_either()
    var_16 = var_14.to_either()
    var_17 = var_14.to_either()
    var_13.to_either()


def test_case_22():
    dict_0 = {}
    bool_0 = True
    maybe_0 = module_0.Maybe(dict_0, bool_0)
    str_0 = "\\Jo<TxY4 aWC',"
    bool_1 = maybe_0.__eq__(maybe_0)
    dict_1 = {str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.filter(var_0)
    var_2 = maybe_0.to_either()
    var_3 = maybe_0.to_validation()
    var_4 = maybe_0.bind(var_3)
    int_0 = 1172
    maybe_1 = module_0.Maybe(int_0, int_0)
    var_5 = maybe_1.to_either()
    maybe_2 = module_0.Maybe(dict_1, bool_1)
    var_6 = maybe_0.to_validation()
    var_7 = var_4.filter(var_5)
    var_3.to_validation()


def test_case_23():
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    bool_1 = maybe_0.__eq__(bool_0)
    var_1 = var_0.to_box()
    var_2 = maybe_0.to_either()
    var_3 = var_1.to_lazy()
    var_4 = maybe_0.to_try()
    var_2.bind(var_1)
