# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    str_0 = "NOuD$\n+U<<q)"
    maybe_0 = module_0.Maybe(str_0, str_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = maybe_0.__eq__(none_type_0)
    maybe_1 = module_0.Maybe(maybe_0, none_type_0)


def test_case_3():
    bytes_0 = b"\xca\x1e\xc6\xeb{\x87+\xf5G\xb7A\x93\x17\xc10\xfc#j"
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.map(bytes_0)
    var_1 = var_0.to_try()
    var_2 = var_1.get_or_else(bytes_0)
    var_2.to_try()


def test_case_4():
    bool_0 = True
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    maybe_0.map(bool_0)


def test_case_5():
    bytes_0 = b"*\xe4\x1d\x0f0`_\xd9\xae(\x86"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.bind(bytes_0)
    bool_0 = False
    maybe_1 = module_0.Maybe(bool_0, bytes_0)
    var_1 = maybe_1.map(bytes_0)
    var_2 = maybe_1.ap(bytes_0)
    var_3 = maybe_1.filter(bytes_0)
    var_4 = var_2.to_try()
    var_5 = var_4.filter(bool_0)
    maybe_2 = module_0.Maybe(bytes_0, bool_0)
    var_6 = maybe_2.get_or_else(maybe_2)
    var_7 = var_2.get_or_else(var_6)
    var_8 = maybe_2.to_box()
    bool_1 = var_1.__eq__(maybe_2)
    maybe_3 = module_0.Maybe(var_4, var_3)


def test_case_6():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.bind(var_0)
    var_2 = maybe_0.to_box()
    maybe_1 = module_0.Maybe(var_2, bool_0)
    var_3 = maybe_1.to_validation()
    bool_1 = False
    bool_2 = False
    maybe_2 = module_0.Maybe(bool_2, bool_2)
    maybe_2.bind(bool_1)


def test_case_7():
    bytes_0 = b"Zmf\x1e\xf6\xa4\x95\xdal\x17:\xc5\xa6\xf7B"
    list_0 = [bytes_0, bytes_0]
    none_type_0 = None
    float_0 = 130.376362
    bool_0 = True
    maybe_0 = module_0.Maybe(float_0, bool_0)
    var_0 = maybe_0.ap(none_type_0)
    var_1 = var_0.to_lazy()
    var_1.get_or_else(list_0)


def test_case_8():
    str_0 = "btmZa>6\nHg^#=S!c`Yb"
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    maybe_0.ap(str_0)


def test_case_9():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = True
    maybe_1 = module_0.Maybe(bool_1, bool_1)
    bool_2 = maybe_1.__eq__(maybe_1)
    var_0 = maybe_1.get_or_else(bool_0)
    var_1 = maybe_0.map(var_0)
    var_2 = maybe_1.filter(bool_0)
    none_type_0 = None
    var_3 = maybe_1.to_either()
    var_4 = var_2.get_or_else(none_type_0)
    var_5 = var_2.to_validation()
    var_4.to_try()


def test_case_10():
    str_0 = 'S6:"e>C5Dtv^OR'
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    maybe_0.filter(str_0)


def test_case_11():
    str_0 = 'HVP[DK6V."1'
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.get_or_else(str_0)
    var_0.to_box()


def test_case_12():
    str_0 = "7\x0b%\\msWS!{h"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.to_either()
    var_0.to_either()


def test_case_13():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_lazy()
    var_1.to_lazy()


def test_case_14():
    str_0 = "f"
    bytes_0 = b"(&\x81\xde\xfa\xbe\xb6\t\x01\xaa\x81\xc8\xafamw"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.to_box()
    var_1.filter(str_0)


def test_case_15():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_try()
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_1 = maybe_1.to_validation()
    var_2 = maybe_1.to_lazy()
    maybe_2 = module_0.Maybe(maybe_1, var_0)
    bool_0 = maybe_2.__eq__(var_2)
    bool_1 = True
    maybe_3 = module_0.Maybe(bool_1, var_1)


def test_case_16():
    int_0 = 2353
    dict_0 = {int_0: int_0}
    bool_0 = True
    maybe_0 = module_0.Maybe(dict_0, bool_0)
    var_0 = maybe_0.to_try()
    var_0.to_validation()


def test_case_17():
    none_type_0 = None
    set_0 = set()
    str_0 = '24I\x0c["JUwO>8)`/ggM_e'
    maybe_0 = module_0.Maybe(set_0, str_0)
    var_0 = maybe_0.to_validation()
    var_0.get_or_else(none_type_0)


def test_case_18():
    bytes_0 = b"*\xe4\x1d\x0f0`_\xd9\xae(\x86"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.bind(bytes_0)
    var_1 = maybe_0.map(maybe_0)
    var_2 = maybe_0.ap(bytes_0)
    var_3 = var_0.filter(bytes_0)
    var_4 = var_2.to_try()
    var_5 = var_3.get_or_else(var_1)
    var_6 = var_2.to_lazy()
    var_7 = var_5.get_or_else(bytes_0)
    var_8 = var_5.bind(var_5)
    var_9 = var_3.map(var_5)
    maybe_1 = module_0.Maybe(var_6, bytes_0)
    var_10 = var_2.to_validation()
    var_11 = var_6.to_validation()
    var_12 = var_3.to_try()
    bool_0 = var_3.__eq__(maybe_0)
    var_13 = var_1.ap(var_7)
    var_14 = var_4.get_or_else(var_8)
    var_15 = var_2.to_validation()
    var_7.bind(var_1)


def test_case_19():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_1.to_lazy()
    var_1 = maybe_1.to_either()
    bool_0 = var_0.__eq__(maybe_0)
    var_2 = var_0.to_either()
    var_3 = var_2.to_lazy()
    var_2.to_either()


def test_case_20():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = True
    maybe_1 = module_0.Maybe(bool_1, bool_1)
    bool_2 = maybe_1.__eq__(maybe_1)
    var_0 = maybe_1.get_or_else(bool_0)
    var_1 = maybe_0.map(var_0)
    none_type_0 = None
    var_2 = maybe_1.to_either()
    var_2.get_or_else(none_type_0)


def test_case_21():
    set_0 = set()
    maybe_0 = module_0.Maybe(set_0, set_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.get_or_else(set_0)
    var_1.get_or_else(maybe_0)
