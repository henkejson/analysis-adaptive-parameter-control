# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_lazy()
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    var_1 = maybe_1.to_try()
    var_2 = var_0.to_box()
    bool_1 = var_1.__eq__(bool_0)
    maybe_2 = module_0.Maybe(bool_0, bool_0)
    var_3 = maybe_2.to_try()
    bool_2 = maybe_2.__eq__(maybe_2)
    var_4 = maybe_2.bind(var_3)
    bool_3 = var_3.__eq__(var_3)
    var_3.to_validation()


def test_case_3():
    set_0 = set()
    float_0 = 2302.0
    none_type_0 = None
    maybe_0 = module_0.Maybe(float_0, none_type_0)
    bool_0 = maybe_0.__eq__(set_0)


def test_case_4():
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = maybe_0.__eq__(bool_0)
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_1.map(maybe_0)
    bool_2 = maybe_1.__eq__(maybe_1)
    var_1 = maybe_1.bind(var_0)
    var_2 = var_1.filter(var_0)
    maybe_2 = module_0.Maybe(var_1, bool_1)
    maybe_2.filter(none_type_0)


def test_case_5():
    str_0 = "uN:A>5dRacr7`"
    bool_0 = False
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    maybe_0.map(str_0)


def test_case_6():
    bool_0 = True
    bool_1 = True
    none_type_0 = None
    none_type_1 = None
    maybe_0 = module_0.Maybe(none_type_1, bool_0)
    var_0 = maybe_0.get_or_else(bool_1)
    bool_2 = var_0.__eq__(none_type_0)
    maybe_1 = module_0.Maybe(bool_0, bool_1)
    var_1 = maybe_1.to_validation()
    var_2 = maybe_1.ap(bool_1)


def test_case_7():
    str_0 = ".["
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    bool_1 = maybe_0.__eq__(str_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.filter(var_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1.ap(none_type_0)


def test_case_8():
    complex_0 = 3344.765266 - 434.3j
    maybe_0 = module_0.Maybe(complex_0, complex_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.filter(maybe_0)


def test_case_9():
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = maybe_0.__eq__(bool_0)
    var_0 = maybe_0.bind(maybe_0)
    var_1 = var_0.filter(maybe_0)
    maybe_1 = module_0.Maybe(var_0, bool_1)
    maybe_1.filter(none_type_0)


def test_case_10():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    str_0 = "\n        Returns new ImmutableList with elements from previous one\n        and argument value on the end of list\n\n        :param new_element: element to append on the end of list\n        :type fn: A\n        :returns: ImmutableList[A]\n        "
    list_0 = [str_0, str_0, str_0, str_0]
    bool_1 = False
    var_0 = maybe_0.to_try()
    maybe_1 = module_0.Maybe(bool_1, bool_1)
    var_1 = maybe_1.get_or_else(list_0)
    var_2 = maybe_1.to_validation()


def test_case_11():
    str_0 = ""
    str_1 = "\n        Transform Box into Right either.\n\n        :returns: right Either monad with previous value\n        :rtype: Right[A]\n        "
    bool_0 = False
    set_0 = {bool_0, str_1, str_1}
    maybe_0 = module_0.Maybe(str_0, set_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_try()
    maybe_1 = module_0.Maybe(str_1, bool_0)
    var_2 = maybe_1.to_either()
    var_3 = var_2.to_try()
    var_3.to_try()


def test_case_12():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_box()
    var_0.bind(none_type_0)


def test_case_13():
    bool_0 = False
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.to_lazy()
    var_2 = var_1.map(var_0)
    bool_2 = maybe_0.__eq__(bool_0)
    var_3 = maybe_0.to_box()
    maybe_1 = module_0.Maybe(maybe_0, bool_1)
    var_4 = maybe_1.to_try()
    var_5 = maybe_0.to_lazy()
    var_6 = module_0.Maybe(var_1, maybe_0)
    none_type_0 = None
    maybe_2 = module_0.Maybe(none_type_0, none_type_0)
    var_7 = maybe_2.to_box()
    var_0.to_box()


def test_case_14():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_either()
    maybe_0.map(var_0)


def test_case_15():
    bool_0 = False
    bool_1 = False
    bool_2 = True
    maybe_0 = module_0.Maybe(bool_1, bool_2)
    var_0 = maybe_0.ap(bool_1)
    maybe_1 = module_0.Maybe(bool_0, bool_1)
    var_1 = maybe_1.to_lazy()
    maybe_1.bind(var_0)


def test_case_16():
    bool_0 = True
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    bool_2 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_try()
    var_0.map(var_0)


def test_case_17():
    str_0 = "x_Lj?%uA>;j"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.bind(maybe_0)
    none_type_0 = None
    var_1 = var_0.filter(none_type_0)
    var_2 = maybe_0.to_lazy()
    bool_0 = var_0.__eq__(maybe_0)
    var_3 = maybe_0.to_validation()
    var_4 = maybe_0.filter(var_3)
    var_5 = var_0.to_validation()
    var_6 = maybe_0.ap(var_3)
    bool_1 = True
    maybe_1 = module_0.Maybe(bool_0, bool_1)
    var_7 = var_4.filter(bool_1)
    var_3.to_validation()
