# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    str_0 = 'LVA|+*yM7 k"cBV'
    maybe_0 = module_0.Maybe(str_0, str_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    none_type_0 = None
    str_0 = "\n        Take function and applied this function on current box value and returns mapped value.\n\n        :param mapper: mapper function\n        :type mapper: Function(A) -> B\n        :returns: new box with mapped value\n        :rtype: B\n        "
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, str_0]
    maybe_0 = module_0.Maybe(list_0, dict_0)
    var_0 = maybe_0.ap(none_type_0)
    var_1 = maybe_0.filter(var_0)
    var_2 = maybe_0.bind(dict_0)
    var_3 = var_2.to_try()
    bool_0 = var_2.__eq__(str_0)
    var_4 = maybe_0.to_lazy()
    bool_1 = var_4.__eq__(var_1)
    bool_2 = var_4.__eq__(var_1)
    maybe_1 = module_0.Maybe(maybe_0, bool_2)
    var_5 = maybe_1.to_box()
    var_6 = var_2.map(var_5)
    var_7 = var_1.to_lazy()
    var_8 = var_1.to_either()


def test_case_3():
    bytes_0 = b"]t\xc5\xe8:c\xf6\xae\x8as\xa1\xf9]\x8ed\xde\x91\xf7g"
    none_type_0 = None
    bool_0 = True
    bool_1 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_1)
    var_0 = maybe_0.map(bool_0)
    var_1 = var_0.filter(none_type_0)
    bool_2 = True
    maybe_1 = module_0.Maybe(bytes_0, bool_2)


def test_case_4():
    set_0 = set()
    maybe_0 = module_0.Maybe(set_0, set_0)
    var_0 = maybe_0.to_try()
    maybe_0.ap(maybe_0)


def test_case_5():
    none_type_0 = None
    str_0 = "\n        Take function and applied this function on current box value and returns mapped value.\n\n        :param mapper: mapper function\n        :type mapper: Function(A) -> B\n        :returns: new box with mapped value\n        :rtype: B\n        "
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, str_0]
    maybe_0 = module_0.Maybe(list_0, dict_0)
    var_0 = maybe_0.ap(none_type_0)
    var_1 = maybe_0.filter(var_0)
    var_2 = maybe_0.bind(dict_0)
    var_3 = var_0.to_either()
    var_4 = var_3.to_validation()
    var_4.bind(var_4)


def test_case_6():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_try()
    maybe_0.bind(var_0)


def test_case_7():
    none_type_0 = None
    complex_0 = -1482.75301 + 885.58872j
    maybe_0 = module_0.Maybe(complex_0, complex_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.ap(none_type_0)
    var_2 = var_1.filter(none_type_0)
    var_3 = var_2.to_lazy()
    var_4 = maybe_0.to_try()
    var_5 = var_0.to_try()


def test_case_8():
    complex_0 = -2274.0254 + 227.4608j
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.ap(complex_0)


def test_case_9():
    bytes_0 = b"]t\xc5\xe8:c\xf6\xae\x8as\xa1\xf9]\x8ed\xde\x91\xf7g"
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.filter(none_type_0)
    bool_1 = True
    maybe_1 = module_0.Maybe(bytes_0, bool_1)


def test_case_10():
    str_0 = "\n        Take function and applied this function on current box value and returns mapped value.\n\n        :param mapper: mapper function\n        :type mapper: Function(A) -> B\n        :returns: new box with mapped value\n        :rtype: B\n        "
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, str_0]
    maybe_0 = module_0.Maybe(list_0, dict_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.filter(dict_0)
    var_2 = maybe_0.ap(str_0)
    bool_0 = var_0.__eq__(var_1)
    maybe_1 = module_0.Maybe(maybe_0, bool_0)
    bool_1 = maybe_0.__eq__(var_1)
    maybe_2 = module_0.Maybe(var_0, dict_0)
    var_3 = var_1.map(bool_1)
    maybe_1.filter(bool_0)


def test_case_11():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.get_or_else(bool_0)


def test_case_12():
    bool_0 = True
    bytes_0 = b"(\x9d\xc7\x1a\xd8}Ec\xec"
    none_type_0 = None
    maybe_0 = module_0.Maybe(bytes_0, none_type_0)
    var_0 = maybe_0.get_or_else(bool_0)
    var_0.to_try()


def test_case_13():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_either()
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)


def test_case_14():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_either()
    bool_1 = False
    var_1 = maybe_0.to_try()
    var_2 = maybe_0.get_or_else(bool_1)
    var_3 = var_0.to_lazy()
    var_2.to_box()


def test_case_15():
    bool_0 = False
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_0, none_type_0)
    var_0 = maybe_0.to_box()
    int_0 = 3684
    list_0 = [int_0, int_0]
    maybe_1 = module_0.Maybe(list_0, int_0)
    var_1 = maybe_1.to_box()
    var_2 = var_1.to_try()
    var_2.filter(var_0)


def test_case_16():
    bytes_0 = b"\x94\xc7M"
    bool_0 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.to_box()
    var_0.get_or_else(bool_0)


def test_case_17():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_lazy()


def test_case_18():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_0.filter(maybe_0)


def test_case_19():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1 = module_0.Maybe(maybe_0, maybe_0)
    var_0 = maybe_1.to_try()


def test_case_20():
    none_type_0 = None
    str_0 = "\n        Take function and applied this function on current box value and returns mapped value.\n\n        :param mapper: mapper function\n        :type mapper: Function(A) -> B\n        :returns: new box with mapped value\n        :rtype: B\n        "
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, str_0]
    maybe_0 = module_0.Maybe(list_0, dict_0)
    var_0 = maybe_0.ap(none_type_0)
    var_1 = maybe_0.filter(var_0)
    var_2 = maybe_0.bind(dict_0)
    var_3 = var_2.map(str_0)
    var_4 = var_2.filter(var_0)
    var_5 = var_4.to_validation()
    var_6 = var_1.get_or_else(var_5)
    var_7 = var_0.ap(var_6)
    var_8 = var_7.to_validation()
    var_9 = maybe_0.to_lazy()


def test_case_21():
    tuple_0 = ()
    maybe_0 = module_0.Maybe(tuple_0, tuple_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.to_box()
    var_2 = maybe_0.to_try()
    var_3 = maybe_0.to_lazy()
    var_1.get_or_else(var_1)


def test_case_22():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_validation()
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_1 = maybe_1.to_lazy()
    var_2 = maybe_1.get_or_else(var_1)
    var_3 = maybe_1.to_validation()
    var_4 = maybe_1.to_lazy()
    var_5 = maybe_1.to_try()
    var_6 = var_1.to_validation()
    var_7 = var_3.to_either()
    var_8 = var_4.to_validation()
    var_9 = var_4.ap(var_4)
    var_10 = var_4.to_try()
    var_4.filter(var_3)


def test_case_23():
    none_type_0 = None
    str_0 = "\n        Take function and applied this function on current box value and returns mapped value.\n\n        :param mapper: mapper function\n        :type mapper: Function(A) -> B\n        :returns: new box with mapped value\n        :rtype: B\n        "
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, str_0]
    maybe_0 = module_0.Maybe(list_0, dict_0)
    var_0 = maybe_0.filter(none_type_0)
    var_1 = maybe_0.bind(dict_0)
    str_1 = "E@TqK](=rs"
    var_2 = var_1.map(str_1)
    var_3 = var_1.filter(dict_0)
    var_4 = var_3.to_validation()
    var_5 = var_0.get_or_else(var_4)
    var_6 = var_0.ap(var_5)
    bool_0 = var_0.__eq__(var_2)
    maybe_1 = module_0.Maybe(var_1, str_1)
    bool_0.to_box()


def test_case_24():
    none_type_0 = None
    str_0 = "\n        Take function and applied this function on current box value and returns mapped value.\n\n        :param mapper: mapper function\n        :type mapper: Function(A) -> B\n        :returns: new box with mapped value\n        :rtype: B\n        "
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, str_0]
    maybe_0 = module_0.Maybe(list_0, dict_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.ap(none_type_0)
    var_2 = maybe_0.filter(var_1)
    var_3 = maybe_0.bind(dict_0)
    var_4 = var_3.to_try()
    bool_0 = var_3.__eq__(str_0)
    maybe_1 = module_0.Maybe(var_1, bool_0)
    maybe_2 = module_0.Maybe(bool_0, bool_0)
    bool_1 = var_2.__eq__(maybe_2)
    bool_2 = False
    maybe_3 = module_0.Maybe(bool_2, var_0)
    var_5 = var_0.to_lazy()
    bool_3 = maybe_1.__eq__(maybe_1)
    bool_4 = var_3.__eq__(maybe_2)
    maybe_4 = module_0.Maybe(maybe_0, maybe_0)
    var_6 = var_1.to_box()
    var_4.to_lazy()
