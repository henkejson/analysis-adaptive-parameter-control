# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(bool_1, bool_1)
    var_0 = maybe_1.get_or_else(bool_0)
    bool_2 = maybe_0.__eq__(maybe_1)
    var_1 = maybe_0.to_either()
    var_2 = maybe_0.filter(var_0)
    maybe_1.filter(var_0)


def test_case_3():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_1 = module_0.Maybe(bool_0, maybe_0)
    none_type_0 = None
    var_0 = maybe_1.get_or_else(none_type_0)
    bool_1 = maybe_1.__eq__(bool_0)
    var_1 = maybe_0.map(var_0)
    var_2 = var_1.to_either()
    var_3 = maybe_0.ap(bool_0)
    var_4 = var_3.filter(var_0)
    var_5 = var_3.filter(var_2)


def test_case_4():
    bool_0 = False
    str_0 = "\n        If Maybe is empty return default_value, in other case.\n\n        :param default_value: value to return if Maybe is empty\n        :type default_value: Any\n  6     :returns: value lf Maybe or default_value\n        :rtype: A\n        "
    list_0 = [bool_0, str_0, str_0]
    maybe_0 = module_0.Maybe(list_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_lazy()
    maybe_0.map(var_0)


def test_case_5():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(bool_1, bool_1)
    var_0 = maybe_0.bind(maybe_0)
    var_1 = maybe_1.to_either()
    bool_2 = maybe_1.__eq__(bool_0)
    var_2 = maybe_0.to_either()
    var_3 = maybe_0.filter(var_0)
    maybe_1.filter(var_0)


def test_case_6():
    bytes_0 = b"\xbe."
    bool_0 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.to_validation()
    maybe_0.bind(var_0)


def test_case_7():
    int_0 = 1172
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.filter(int_0)
    var_1 = maybe_0.ap(int_0)


def test_case_8():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = True
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.ap(maybe_1)
    var_2 = var_1.to_lazy()
    var_3 = var_1.to_either()
    var_4 = maybe_1.to_validation()
    var_5 = maybe_1.filter(var_4)
    var_6 = maybe_1.get_or_else(none_type_0)
    var_7 = maybe_1.to_either()
    var_6.to_try()


def test_case_9():
    int_0 = 1172
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.filter(int_0)


def test_case_10():
    int_0 = 1172
    bool_0 = False
    maybe_0 = module_0.Maybe(int_0, bool_0)
    maybe_0.filter(int_0)


def test_case_11():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(bool_1, bool_1)
    bool_2 = maybe_1.__eq__(bool_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.filter(var_0)
    var_2 = var_1.get_or_else(var_0)
    maybe_1.filter(var_2)


def test_case_12():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(bool_1, bool_1)
    var_0 = maybe_1.get_or_else(bool_0)
    var_1 = maybe_0.filter(var_0)
    maybe_1.filter(var_0)


def test_case_13():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(bool_1, bool_1)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.filter(var_0)
    maybe_1.filter(var_1)


def test_case_14():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_either()


def test_case_15():
    none_type_0 = None
    int_0 = 0
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.to_box()
    var_0.ap(none_type_0)


def test_case_16():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(bool_1, bool_1)
    var_0 = maybe_1.get_or_else(bool_0)
    bool_2 = maybe_1.to_box()
    var_1 = maybe_0.to_either()
    var_2 = maybe_0.filter(var_0)
    maybe_1.filter(var_0)


def test_case_17():
    int_0 = 1172
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.filter(int_0)
    var_1 = var_0.to_lazy()


def test_case_18():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    bool_0 = var_0.__eq__(maybe_0)
    var_1 = var_0.to_validation()


def test_case_19():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_try()
    bool_1 = False
    maybe_1 = module_0.Maybe(bool_1, bool_1)
    var_1 = maybe_0.to_either()
    var_2 = maybe_0.filter(bool_0)
    maybe_1.filter(bool_0)


def test_case_20():
    bool_0 = True
    tuple_0 = (bool_0,)
    none_type_0 = None
    maybe_0 = module_0.Maybe(tuple_0, none_type_0)
    var_0 = maybe_0.to_try()
    var_0.to_try()


def test_case_21():
    str_0 = "\n    Map is a Semigroup that will always return contated all values inside Map value\n    "
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_either()
    complex_0 = -804.0708 - 288.860471j
    maybe_1 = module_0.Maybe(complex_0, complex_0)
    var_1 = maybe_1.filter(var_0)
    var_2 = var_1.to_validation()
    var_3 = var_2.to_lazy()


def test_case_22():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = True
    maybe_1 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_1.get_or_else(maybe_1)
    var_1 = maybe_0.to_lazy()
    bool_2 = maybe_1.__eq__(var_1)
    var_2 = var_1.to_validation()
    var_3 = var_2.to_either()
    var_4 = maybe_0.filter(maybe_1)
    var_3.filter(var_3)


def test_case_23():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    int_0 = 1188
    bool_1 = maybe_0.__eq__(maybe_0)
    bool_2 = False
    maybe_1 = module_0.Maybe(int_0, bool_2)
    var_0 = maybe_1.get_or_else(bool_1)
    var_1 = maybe_0.filter(var_0)
    maybe_1.filter(int_0)


def test_case_24():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_1.get_or_else(bool_0)
    bool_2 = maybe_1.__eq__(bool_0)
    var_1 = maybe_0.filter(var_0)
    maybe_1.filter(bool_1)
