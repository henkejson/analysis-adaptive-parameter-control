# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    bytes_0 = b"\x80"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.filter(bytes_0)
    var_1 = maybe_0.get_or_else(var_0)


def test_case_3():
    bytes_0 = b"M\x9a\xebs\x8eK\x93\xf2"
    bool_0 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.to_box()
    bool_1 = maybe_0.__eq__(bytes_0)
    var_1 = maybe_0.get_or_else(bytes_0)
    maybe_1 = module_0.Maybe(maybe_0, bool_0)
    var_2 = maybe_1.to_try()


def test_case_4():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.map(none_type_0)
    var_1 = var_0.filter(maybe_0)
    maybe_1 = module_0.Maybe(bool_0, none_type_0)
    maybe_1.filter(none_type_0)


def test_case_5():
    int_0 = -365
    tuple_0 = ()
    bool_0 = False
    maybe_0 = module_0.Maybe(tuple_0, bool_0)
    maybe_0.map(int_0)


def test_case_6():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.map(none_type_0)
    var_1 = maybe_0.bind(none_type_0)
    var_2 = var_0.filter(maybe_0)
    bool_1 = True
    var_3 = maybe_0.to_try()
    maybe_1 = module_0.Maybe(bool_1, none_type_0)
    maybe_2 = module_0.Maybe(bool_0, none_type_0)
    maybe_2.filter(none_type_0)


def test_case_7():
    none_type_0 = None
    str_0 = "-Es+wZ?a^>8\tQ^t\x0b&"
    maybe_0 = module_0.Maybe(str_0, none_type_0)
    maybe_0.bind(none_type_0)


def test_case_8():
    int_0 = -3388
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.ap(maybe_0)
    var_1 = maybe_0.to_box()
    var_2 = maybe_0.to_either()


def test_case_9():
    none_type_0 = None
    none_type_1 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_1, bool_0)
    maybe_0.ap(none_type_0)


def test_case_10():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.filter(none_type_0)


def test_case_11():
    bytes_0 = b""
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    maybe_0.filter(bytes_0)


def test_case_12():
    bytes_0 = b"\x80"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.filter(bytes_0)
    var_1 = maybe_0.get_or_else(var_0)
    maybe_1 = module_0.Maybe(bytes_0, maybe_0)


def test_case_13():
    none_type_0 = None
    none_type_1 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_1, bool_0)
    var_0 = maybe_0.get_or_else(none_type_0)
    var_0.to_validation()


def test_case_14():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    tuple_0 = (set_0,)
    tuple_1 = ()
    maybe_0 = module_0.Maybe(tuple_1, tuple_1)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_validation()
    var_1.ap(tuple_0)


def test_case_15():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.map(none_type_0)
    var_1 = var_0.ap(none_type_0)
    var_2 = var_0.to_validation()
    var_3 = var_0.filter(var_2)
    none_type_1 = None
    var_4 = var_1.to_lazy()
    maybe_1 = module_0.Maybe(bool_0, none_type_1)
    maybe_1.filter(none_type_0)


def test_case_16():
    float_0 = 2156.3626
    bool_0 = False
    maybe_0 = module_0.Maybe(float_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_either()


def test_case_17():
    str_0 = "\n        Return rejected Task with stored value argument.\n\n        :param value: value to store in Task\n        :type value: A\n        :returns: rejected Task\n        :rtype: Task[Function(reject, _) -> A]\n        "
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, str_0)
    var_0 = maybe_0.to_try()
    var_1 = var_0.filter(str_0)
    var_2 = var_1.filter(str_0)
    bool_0 = var_1.__eq__(str_0)
    var_2.to_validation()


def test_case_18():
    int_0 = 2907
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.to_validation()
    var_1 = var_0.to_either()
    var_2 = var_1.to_validation()
    var_3 = var_2.to_lazy()
    var_4 = var_3.to_either()


def test_case_19():
    complex_0 = -2144.342 - 2216.8163j
    bool_0 = False
    maybe_0 = module_0.Maybe(complex_0, bool_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.to_validation()
    var_1.bind(bool_0)


def test_case_20():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.map(none_type_0)
    var_1 = var_0.ap(none_type_0)
    var_2 = maybe_0.to_try()
    var_3 = var_0.filter(var_0)
    none_type_1 = None
    var_4 = var_1.to_lazy()
    var_5 = var_4.to_validation()
    maybe_1 = module_0.Maybe(bool_0, none_type_1)
    maybe_1.filter(none_type_0)


def test_case_21():
    int_0 = 1758
    int_1 = 1093
    maybe_0 = module_0.Maybe(int_1, int_1)
    var_0 = maybe_0.bind(int_0)
    bool_0 = True
    bool_1 = maybe_0.__eq__(var_0)
    maybe_1 = module_0.Maybe(int_1, bool_0)
    var_1 = maybe_0.bind(int_0)
    var_2 = var_1.filter(var_1)
    bool_2 = var_2.__eq__(var_1)
    var_3 = var_0.to_try()
    bool_3 = var_1.__eq__(var_0)
