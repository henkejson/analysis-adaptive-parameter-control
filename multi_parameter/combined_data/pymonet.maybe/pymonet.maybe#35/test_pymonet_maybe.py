# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import builtins as module_1


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    bool_0 = True
    dict_0 = {}
    maybe_0 = module_0.Maybe(dict_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.ap(dict_0)
    var_2 = maybe_0.map(dict_0)
    var_3 = var_2.bind(bool_0)
    bool_1 = var_3.__eq__(var_0)
    var_4 = var_2.filter(var_0)
    list_0 = []
    var_5 = var_3.to_validation()
    maybe_1 = module_0.Maybe(list_0, list_0)
    var_6 = var_3.to_try()
    maybe_1.filter(var_4)


def test_case_3():
    bool_0 = True
    dict_0 = {}
    maybe_0 = module_0.Maybe(dict_0, bool_0)
    var_0 = maybe_0.map(dict_0)
    var_1 = var_0.filter(dict_0)
    list_0 = []
    var_2 = var_1.to_validation()
    maybe_1 = module_0.Maybe(list_0, list_0)
    maybe_1.filter(var_1)


def test_case_4():
    complex_0 = 795.816 - 442.292j
    set_0 = {complex_0}
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.map(set_0)


def test_case_5():
    bool_0 = True
    dict_0 = {}
    maybe_0 = module_0.Maybe(dict_0, bool_0)
    var_0 = maybe_0.ap(dict_0)
    var_1 = var_0.filter(maybe_0)
    maybe_1 = var_0.bind(var_0)
    list_0 = []
    var_2 = var_1.to_validation()
    maybe_2 = module_0.Maybe(list_0, list_0)
    maybe_2.filter(var_1)


def test_case_6():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_box()
    maybe_0.bind(var_0)


def test_case_7():
    str_0 = "\n        :returns: Copy of self\n        :rtype: Left[A]\n        "
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.filter(var_0)
    var_2 = maybe_0.ap(maybe_0)


def test_case_8():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    maybe_0.ap(none_type_0)


def test_case_9():
    str_0 = "\n        :returns: Copy of self\n        :rtype: Left[A]\n        "
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_either()
    maybe_0.filter(var_0)


def test_case_10():
    str_0 = "\n        :returns: Copy of self\n        :rtype: Left[A]\n        "
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.filter(bool_0)
    var_1 = var_0.get_or_else(str_0)
    maybe_1 = module_0.Maybe(str_0, bool_0)
    var_2 = maybe_1.to_either()
    maybe_1.filter(var_2)


def test_case_11():
    bool_0 = True
    dict_0 = {}
    maybe_0 = module_0.Maybe(dict_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.ap(dict_0)
    var_2 = maybe_0.map(dict_0)
    var_3 = var_2.bind(bool_0)
    bool_1 = var_3.__eq__(var_0)
    var_4 = var_2.filter(var_0)
    maybe_1 = module_0.Maybe(dict_0, bool_0)
    list_0 = []
    maybe_2 = module_0.Maybe(list_0, list_0)
    var_5 = maybe_2.get_or_else(maybe_2)
    var_6 = maybe_1.to_try()
    maybe_2.filter(var_4)


def test_case_12():
    int_0 = 788
    set_0 = {int_0, int_0, int_0, int_0}
    bool_0 = True
    maybe_0 = module_0.Maybe(set_0, bool_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_lazy()
    var_2 = var_1.to_box()
    var_3 = var_0.to_box()
    var_2.ap(set_0)


def test_case_13():
    int_0 = 4515
    list_0 = [int_0, int_0, int_0, int_0]
    none_type_0 = None
    maybe_0 = module_0.Maybe(list_0, none_type_0)
    var_0 = maybe_0.to_either()


def test_case_14():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_either()


def test_case_15():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_try()
    var_0.to_box()


def test_case_16():
    bytes_0 = b"R\x04\xa5\x15\xc5bx\x1e\xd1\xcb\xd4"
    bool_0 = False
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_try()
    maybe_1 = module_0.Maybe(bytes_0, bool_0)


def test_case_17():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.to_either()
    var_2 = maybe_0.to_validation()
    var_3 = var_2.to_either()
    var_3.ap(var_3)


def test_case_18():
    str_0 = "K1P"
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.to_lazy()
    var_2 = var_1.to_validation()
    var_2.bind(str_0)


def test_case_19():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    bool_0 = maybe_0.__eq__(var_0)
    var_1 = var_0.to_validation()
    var_2 = var_0.to_either()
    var_3 = maybe_0.to_validation()
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_4 = var_0.map(maybe_0)
    var_5 = maybe_1.get_or_else(none_type_0)
    bytes_0 = b"\xc8G\x9f\xbcx"
    var_6 = var_0.bind(bytes_0)
    bool_1 = maybe_1.__eq__(maybe_1)
    var_7 = maybe_1.to_lazy()
    var_4.get_or_else(var_6)


def test_case_20():
    bool_0 = True
    dict_0 = {}
    maybe_0 = module_0.Maybe(dict_0, bool_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.map(dict_0)
    var_2 = var_1.bind(bool_0)
    bool_1 = var_2.__eq__(var_0)
    var_3 = module_0.Maybe(bool_0, var_0)
    var_4 = var_3.filter(maybe_0)
    list_0 = []
    maybe_1 = module_0.Maybe(list_0, list_0)
    var_5 = var_4.get_or_else(maybe_1)
    bool_2 = maybe_1.__eq__(bool_0)
    var_6 = maybe_0.map(var_0)
    bool_3 = var_6.__eq__(var_3)
    var_7 = var_2.to_lazy()
    object_0 = module_1.object()
    var_8 = var_3.to_lazy()
    var_9 = maybe_0.bind(maybe_0)
    bool_4 = var_3.__eq__(var_2)
