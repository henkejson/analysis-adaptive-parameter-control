# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    str_0 = "\n        Transform Validation to Either.\n\n        :returns: Right monad with previous value when Validation has no urrors, in other case Left with errors list\n        :rtype: Right[A] | Left[E]\n        "
    maybe_0 = module_0.Maybe(str_0, str_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    str_0 = "i13wc}.UH^@"
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    maybe_1 = module_0.Maybe(maybe_0, maybe_0)
    var_0 = maybe_1.filter(str_0)
    bool_1 = maybe_0.__eq__(maybe_1)
    maybe_0.filter(str_0)


def test_case_3():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = maybe_0.__eq__(bool_0)
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    maybe_1.filter(bool_0)


def test_case_4():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.ap(maybe_0)
    var_1 = maybe_0.map(var_0)
    var_2 = maybe_0.to_box()
    var_3 = var_1.filter(var_2)
    var_4 = var_2.to_validation()


def test_case_5():
    bool_0 = False
    str_0 = "q1[\n?yb(0;"
    float_0 = -294.74
    maybe_0 = module_0.Maybe(float_0, float_0)
    var_0 = maybe_0.map(str_0)
    var_1 = var_0.ap(bool_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1.map(var_1)


def test_case_6():
    bytes_0 = b"UP\xe2D\x83Q\xf5\xf3)<"
    bytes_1 = b"\x88\x11\xb5^\xceD\x9a\x90*=zY\xb7\xba;\x07%\xe4\xc5"
    maybe_0 = module_0.Maybe(bytes_1, bytes_1)
    var_0 = maybe_0.map(bytes_0)
    var_1 = maybe_0.to_either()
    var_2 = maybe_0.bind(var_1)
    var_3 = maybe_0.ap(var_0)
    var_4 = var_0.map(var_3)
    var_5 = var_4.to_box()
    var_6 = maybe_0.filter(var_5)


def test_case_7():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.get_or_else(bool_0)
    maybe_0.bind(var_0)


def test_case_8():
    int_0 = -2750
    bytes_0 = b"\xaf~\x94\xb9*%\xfa\x84|\n\xb9"
    bool_0 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    maybe_0.ap(int_0)


def test_case_9():
    str_0 = "i13wc}.UH^@"
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    maybe_1 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_1.filter(str_0)
    maybe_0.filter(bool_0)


def test_case_10():
    str_0 = "i13wc}.UH^@"
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.filter(str_0)


def test_case_11():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.filter(var_0)
    var_2 = var_1.to_lazy()
    var_3 = maybe_0.get_or_else(var_0)
    maybe_1 = module_0.Maybe(var_0, var_1)
    bool_1 = maybe_1.__eq__(maybe_0)
    var_4 = maybe_1.to_lazy()
    var_5 = var_3.to_box()


def test_case_12():
    str_0 = "\n        Transform Validation to Either.\n\n        :returns: Right monad with previous value when Validation has no errors, in other case Left with errors list\n        :rtype: Right[A] | Left[E]\n        "
    maybe_0 = module_0.Maybe(str_0, str_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_1.get_or_else(maybe_0)
    var_0.to_lazy()


def test_case_13():
    str_0 = "Js|zv#-G$1,F2O\t$ 4bp"
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_try()
    maybe_1 = module_0.Maybe(str_0, str_0)
    var_1 = maybe_1.to_either()
    var_2 = var_1.to_try()
    var_3 = var_2.filter(var_1)


def test_case_14():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = maybe_0.__eq__(bool_0)
    bool_2 = maybe_0.__eq__(bool_0)
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_1.to_either()
    maybe_1.filter(var_0)


def test_case_15():
    str_0 = "i13wc}.UH^@"
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_validation()
    bool_1 = maybe_0.__eq__(bool_0)
    var_1 = maybe_0.to_lazy()
    var_2 = maybe_0.to_validation()
    maybe_1 = module_0.Maybe(var_1, var_1)
    var_3 = maybe_1.filter(str_0)
    var_4 = maybe_0.to_box()
    var_5 = var_3.to_validation()
    maybe_0.filter(var_4)


def test_case_16():
    str_0 = "2Q 4TNa0"
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_lazy()


def test_case_17():
    str_0 = "i13wc}.UH^@"
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    maybe_1 = module_0.Maybe(maybe_0, maybe_0)
    var_0 = maybe_1.filter(str_0)
    bool_1 = var_0.to_try()
    maybe_0.filter(str_0)


def test_case_18():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_try()
    var_0.to_lazy()


def test_case_19():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.filter(var_0)
    var_2 = maybe_0.to_box()
    bool_1 = var_0.__eq__(bool_0)
    bool_2 = var_1.__eq__(var_1)
    maybe_1 = module_0.Maybe(var_0, var_1)
    bool_0.ap(bool_0)


def test_case_20():
    str_0 = "i13wc}.UH^@"
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_validation()
    maybe_1 = module_0.Maybe(str_0, str_0)
    var_1 = maybe_1.filter(str_0)
    var_2 = var_1.map(str_0)
    maybe_0.filter(var_0)


def test_case_21():
    str_0 = "i1r`3wc}.UH^@"
    str_0.to_box()


def test_case_22():
    str_0 = "i13wc}.UH^@"
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_lazy()
    maybe_1 = module_0.Maybe(str_0, maybe_0)
    var_1 = maybe_0.filter(maybe_0)
    var_2 = var_0.to_either()
    var_3 = var_1.to_either()
    maybe_2 = module_0.Maybe(var_2, var_2)
    var_4 = maybe_2.map(var_3)
    var_2.to_either()


def test_case_23():
    str_0 = "i13wc}.UH^@"
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_validation()
    bool_1 = maybe_0.__eq__(bool_0)
    var_1 = maybe_0.to_lazy()
    var_2 = maybe_0.to_validation()
    maybe_1 = module_0.Maybe(var_1, var_1)
    var_3 = maybe_1.filter(bool_0)
    var_4 = var_2.to_either()
    bool_2 = var_2.__eq__(maybe_1)
    var_5 = var_1.to_validation()
    maybe_0.filter(var_5)
