# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    str_0 = "M_kD:%2T.Hke"
    maybe_0 = module_0.Maybe(str_0, str_0)


def test_case_1():
    set_0 = set()
    maybe_0 = module_0.Maybe(set_0, set_0)


def test_case_2():
    str_0 = "tww[f{T3//#\rf\t1 "
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.filter(str_0)
    var_1 = maybe_0.to_box()
    bool_1 = maybe_0.__eq__(var_0)
    var_2 = maybe_0.to_try()
    var_2.to_box()


def test_case_3():
    str_0 = "tww[f{T3//#\rf\t1 "
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.to_box()
    bool_1 = maybe_0.__eq__(var_0)
    var_2 = maybe_0.map(var_1)
    var_3 = var_2.to_box()
    var_4 = maybe_0.to_box()


def test_case_4():
    int_0 = 1278
    tuple_0 = ()
    maybe_0 = module_0.Maybe(tuple_0, tuple_0)
    maybe_0.map(int_0)


def test_case_5():
    bytes_0 = b"\nxz"
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.to_either()
    bool_1 = maybe_0.__eq__(bytes_0)
    maybe_1 = module_0.Maybe(bytes_0, bytes_0)
    var_1 = maybe_1.get_or_else(bytes_0)
    var_2 = maybe_1.bind(bytes_0)
    bool_2 = False
    maybe_2 = module_0.Maybe(bytes_0, bool_2)
    var_3 = maybe_2.to_box()
    var_1.to_box()


def test_case_6():
    bytes_0 = b"\xe4\xd0\xd3\x91l \xa0\x03\x07\xac\x19\xf8\xae\x80O\xb5\x81?"
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    bool_1 = maybe_0.__eq__(bool_0)
    maybe_1 = module_0.Maybe(bool_1, bool_1)
    maybe_2 = module_0.Maybe(maybe_0, bool_1)
    var_0 = maybe_1.to_box()
    var_1 = maybe_1.to_either()
    bool_2 = False
    maybe_3 = module_0.Maybe(var_1, bool_2)
    maybe_4 = module_0.Maybe(bool_1, bool_0)
    var_2 = maybe_0.filter(maybe_3)
    var_3 = var_1.to_box()
    bool_3 = False
    maybe_5 = module_0.Maybe(bool_1, bool_3)
    var_4 = var_2.get_or_else(maybe_3)
    maybe_5.bind(bool_1)


def test_case_7():
    str_0 = "tww[f{T3//#\rf\t1 "
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.filter(str_0)
    var_1 = maybe_0.to_box()
    bool_1 = maybe_0.__eq__(var_0)
    var_2 = maybe_0.to_try()
    var_3 = var_1.ap(var_0)
    var_4 = var_0.ap(var_1)
    var_1.map(str_0)


def test_case_8():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.to_box()
    maybe_0.ap(none_type_0)


def test_case_9():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.filter(maybe_1)
    var_1 = maybe_0.to_either()
    bool_2 = var_1.__eq__(var_1)
    maybe_1.filter(var_0)


def test_case_10():
    int_0 = 2357
    none_type_0 = None
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.get_or_else(int_0)
    var_0.map(none_type_0)


def test_case_11():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    var_0.filter(none_type_0)


def test_case_12():
    bytes_0 = b"\xe4\xd0\xd3\x91l \xa0\x03\x07\xac\x19\xf8\xae\x80O\xb5\x81?"
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    bool_1 = maybe_0.__eq__(bool_0)
    maybe_1 = module_0.Maybe(bool_1, bool_1)
    maybe_2 = module_0.Maybe(maybe_0, bool_1)
    var_0 = maybe_1.to_box()
    var_1 = maybe_1.to_either()
    bool_2 = False
    maybe_3 = module_0.Maybe(var_1, bool_2)
    var_2 = maybe_0.bind(var_0)
    var_3 = maybe_0.filter(maybe_3)
    var_4 = var_2.bind(bool_1)
    bool_3 = maybe_0.__eq__(var_4)
    var_5 = var_1.to_box()
    var_6 = var_1.to_validation()


def test_case_13():
    set_0 = set()
    none_type_0 = None
    maybe_0 = module_0.Maybe(set_0, none_type_0)
    var_0 = maybe_0.to_box()


def test_case_14():
    int_0 = -1374
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.bind(int_0)
    var_2 = var_1.ap(int_0)
    var_2.to_box()


def test_case_15():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_either()
    var_2 = var_1.to_try()
    var_2.filter(none_type_0)


def test_case_16():
    str_0 = "\n        Returns Lazy with function returning argument.\n\n        :param value: value to return by Lazy constructor_fn\n        :type value: Any\n        :returns: Lazy with function returning argument\n        :rtype: Lazy[Function() -> A]\n        "
    none_type_0 = None
    maybe_0 = module_0.Maybe(str_0, none_type_0)
    dict_0 = {none_type_0: maybe_0}
    var_0 = maybe_0.to_try()
    maybe_0.ap(dict_0)


def test_case_17():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    bool_1 = False
    maybe_2 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.filter(maybe_2)
    var_1 = maybe_1.to_either()
    bool_2 = var_1.__eq__(var_1)
    var_2 = maybe_0.to_validation()
    maybe_2.filter(var_2)


def test_case_18():
    bool_0 = True
    none_type_0 = None
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_validation()
    var_0.get_or_else(none_type_0)


def test_case_19():
    bytes_0 = b"\xe4\xd0\xd3\x91l \xa0\x03\x07\xac\x19\xf8\xae\x80O\xb5\x81?"
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.to_lazy()
    maybe_1 = module_0.Maybe(var_0, var_0)
    var_1 = var_0.to_either()
    bool_1 = False
    maybe_2 = module_0.Maybe(var_1, bool_1)
    maybe_3 = module_0.Maybe(bytes_0, bool_0)
    var_2 = maybe_0.filter(maybe_2)
    var_3 = maybe_1.to_either()
    var_4 = maybe_3.bind(bool_0)
    bool_2 = var_3.__eq__(var_3)
    var_5 = maybe_3.to_validation()
    maybe_2.filter(var_5)


def test_case_20():
    bool_0 = True
    tuple_0 = ()
    maybe_0 = module_0.Maybe(tuple_0, bool_0)
    var_0 = maybe_0.ap(maybe_0)
    var_1 = var_0.to_either()
    maybe_1 = module_0.Maybe(maybe_0, bool_0)
    maybe_2 = module_0.Maybe(maybe_1, maybe_1)
    var_2 = maybe_0.to_box()
    var_3 = maybe_1.to_either()
    bool_1 = True
    var_4 = var_3.to_try()
    maybe_3 = module_0.Maybe(tuple_0, var_3)
    maybe_4 = module_0.Maybe(bool_1, var_2)
    var_5 = maybe_0.filter(var_2)
    var_6 = maybe_0.to_lazy()
    var_7 = var_6.to_box()
    var_8 = maybe_2.bind(var_3)
    bool_2 = maybe_4.__eq__(maybe_2)
    bool_3 = var_5.__eq__(var_5)
    var_9 = var_2.to_either()
    var_2.get_or_else(maybe_2)


def test_case_21():
    bool_0 = True
    tuple_0 = ()
    maybe_0 = module_0.Maybe(tuple_0, bool_0)
    var_0 = maybe_0.ap(maybe_0)
    maybe_1 = module_0.Maybe(tuple_0, var_0)
    var_1 = maybe_1.bind(var_0)
    maybe_2 = module_0.Maybe(var_1, var_1)
    var_2 = maybe_0.to_box()
    var_3 = maybe_1.to_either()
    var_4 = maybe_2.map(var_0)
    bool_1 = False
    var_5 = maybe_1.ap(bool_0)
    maybe_3 = module_0.Maybe(tuple_0, var_3)
    maybe_4 = var_4.bind(maybe_1)
    var_6 = module_0.Maybe(var_0, bool_1)
    var_7 = maybe_0.to_lazy()
    var_8 = var_7.to_box()
    var_9 = maybe_2.bind(var_3)
    var_10 = var_1.get_or_else(var_0)
    bool_2 = var_6.__eq__(var_6)
    var_11 = var_6.to_validation()
    var_12 = var_9.to_try()
    maybe_5 = module_0.Maybe(bool_1, bool_2)
    var_13 = maybe_4.filter(var_10)
    var_14 = var_11.to_lazy()
    var_15 = var_1.to_try()
    var_16 = maybe_1.to_box()
    var_8.bind(var_0)
