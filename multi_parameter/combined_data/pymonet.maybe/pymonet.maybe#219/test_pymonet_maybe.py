# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    str_0 = "\n        Transform Lazy into successful Validation with constructor_fn result.\n\n        :returns: successfull Validation monad with previous value\n        :rtype: Validation[A, []]\n        "
    maybe_0 = module_0.Maybe(str_0, str_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    none_type_0 = None
    bool_1 = False
    maybe_0 = module_0.Maybe(list_0, bool_1)
    var_0 = maybe_0.to_box()
    bool_2 = False
    maybe_1 = module_0.Maybe(none_type_0, bool_2)
    bool_3 = maybe_1.__eq__(bool_0)
    var_1 = maybe_1.get_or_else(list_0)
    var_2 = maybe_1.to_either()
    var_1.to_box()


def test_case_3():
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.map(none_type_0)
    var_1 = var_0.to_lazy()
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    var_2 = maybe_1.ap(bool_0)
    var_3 = var_2.filter(bool_0)
    var_4 = var_3.filter(bool_0)
    var_5 = var_1.to_validation()
    var_6 = var_4.bind(bool_0)
    maybe_2 = module_0.Maybe(var_5, bool_0)
    var_7 = maybe_2.to_box()
    var_8 = var_7.to_lazy()


def test_case_4():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_validation()
    bool_0 = True
    maybe_0.map(bool_0)


def test_case_5():
    bool_0 = True
    int_0 = 1462
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.bind(bool_0)
    var_1 = var_0.to_either()
    var_2 = maybe_0.to_either()
    var_3 = var_1.to_box()
    var_1.filter(var_1)


def test_case_6():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    bool_1 = False
    bool_2 = True
    tuple_0 = (dict_0, bool_1, bool_2, bool_1)
    bool_3 = False
    maybe_0 = module_0.Maybe(bool_3, bool_3)
    maybe_0.bind(tuple_0)


def test_case_7():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.filter(maybe_0)
    var_1 = var_0.ap(bool_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(var_0, none_type_0)
    maybe_1.filter(maybe_1)


def test_case_8():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = var_0.to_box()
    maybe_0.ap(var_1)


def test_case_9():
    complex_0 = -2824.212 + 531.26849j
    bool_0 = True
    bool_1 = False
    str_0 = "\rC#jF(f7|c1e"
    maybe_0 = module_0.Maybe(complex_0, str_0)
    var_0 = maybe_0.ap(bool_1)
    var_1 = maybe_0.get_or_else(bool_0)
    var_2 = maybe_0.filter(var_1)
    var_3 = var_2.to_either()
    var_4 = var_3.to_box()
    var_5 = var_4.to_lazy()
    var_6 = var_3.to_try()
    str_1 = "j"
    bool_2 = var_3.__eq__(str_1)


def test_case_10():
    none_type_0 = None
    str_0 = "J\rwC.CZ^p7 \x0c+"
    list_0 = [str_0, str_0]
    list_1 = [list_0, str_0]
    bool_0 = False
    maybe_0 = module_0.Maybe(list_1, bool_0)
    var_0 = maybe_0.to_either()
    var_0.filter(none_type_0)


def test_case_11():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_box()


def test_case_12():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_either()


def test_case_13():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_lazy()


def test_case_14():
    float_0 = -615.0
    bool_0 = False
    maybe_0 = module_0.Maybe(float_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_try()


def test_case_15():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.filter(maybe_0)
    var_1 = var_0.ap(bool_0)
    var_2 = var_1.to_try()
    none_type_0 = None
    maybe_1 = module_0.Maybe(var_0, none_type_0)
    maybe_1.filter(maybe_1)


def test_case_16():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    bool_1 = False
    bool_2 = False
    maybe_0 = module_0.Maybe(bool_1, bool_2)
    var_0 = maybe_0.to_try()
    var_0.ap(set_0)


def test_case_17():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_validation()


def test_case_18():
    str_0 = '?yV".#UL%*72\t}cKQmlm'
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_validation()


def test_case_19():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.filter(maybe_0)
    var_1 = var_0.ap(bool_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(var_0, none_type_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    maybe_1.filter(maybe_1)


def test_case_20():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_0.filter(maybe_0)


def test_case_21():
    bytes_0 = b"\xa5\xc0\x1f\x85"
    int_0 = 487
    maybe_0 = module_0.Maybe(bytes_0, int_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    maybe_1 = module_0.Maybe(int_0, var_0)
    var_1 = maybe_0.bind(var_0)
    var_2 = maybe_0.to_box()
    var_3 = var_2.to_validation()
    var_4 = maybe_0.to_lazy()
    bool_0 = var_0.__eq__(maybe_1)
    var_5 = var_0.to_box()
    var_3.to_validation()


def test_case_22():
    bool_0 = True
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    bool_2 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.to_lazy()
    var_0.bind(var_0)
