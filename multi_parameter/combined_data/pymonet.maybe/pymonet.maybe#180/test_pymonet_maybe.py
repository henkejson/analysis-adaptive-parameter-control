# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import typing as module_0
import pymonet.maybe as module_1


def test_case_0():
    generic_0 = module_0.Generic()
    maybe_0 = module_1.Maybe(generic_0, generic_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_1.Maybe(bool_0, bool_0)


def test_case_2():
    str_0 = "Sum"
    maybe_0 = module_1.Maybe(str_0, str_0)
    var_0 = maybe_0.bind(maybe_0)
    int_0 = -1969
    var_1 = maybe_0.to_try()
    var_2 = maybe_0.filter(var_1)
    var_3 = maybe_0.to_lazy()
    bool_0 = False
    maybe_1 = module_1.Maybe(var_3, bool_0)
    bool_1 = maybe_1.__eq__(var_2)
    var_4 = maybe_0.to_try()
    var_5 = maybe_0.filter(var_4)
    var_6 = var_5.get_or_else(int_0)


def test_case_3():
    bool_0 = True
    bool_1 = True
    maybe_0 = module_1.Maybe(bool_0, bool_0)
    var_0 = maybe_0.filter(bool_1)
    var_1 = maybe_0.ap(var_0)
    var_2 = var_1.to_lazy()
    var_3 = maybe_0.bind(bool_0)
    var_4 = var_2.to_box()
    bool_2 = var_0.__eq__(var_0)
    bool_3 = maybe_0.__eq__(bool_2)
    var_5 = var_3.bind(var_0)
    var_6 = var_2.to_either()
    var_7 = maybe_0.to_box()
    var_7.bind(var_5)


def test_case_4():
    int_0 = 1291
    bool_0 = True
    maybe_0 = module_1.Maybe(int_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.bind(int_0)
    var_2 = var_1.map(bool_0)
    var_3 = var_2.to_try()
    var_4 = var_2.map(var_3)
    var_5 = var_2.to_box()
    maybe_1 = module_1.Maybe(bool_0, bool_0)
    var_6 = maybe_1.to_validation()
    var_6.get_or_else(int_0)


def test_case_5():
    str_0 = "]Y\x0b6V["
    bool_0 = False
    maybe_0 = module_1.Maybe(str_0, bool_0)
    maybe_0.map(str_0)


def test_case_6():
    bool_0 = False
    maybe_0 = module_1.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.get_or_else(bool_0)
    maybe_0.bind(maybe_0)


def test_case_7():
    none_type_0 = None
    bytes_0 = b"\x14\x0e35(\xbe\xa3\xfb\x8a\xd3\x18![\xb2\x87"
    str_0 = "\n        Create not empty maybe.\n\n        :param mapper: value to store in Maybe\n        :type mapper: Any\n        :returns: Maybe[Any]\n        "
    maybe_0 = module_1.Maybe(str_0, str_0)
    var_0 = maybe_0.filter(bytes_0)
    var_1 = maybe_0.ap(none_type_0)
    list_0 = []
    list_1 = [list_0, list_0, list_0, list_0]
    bool_0 = True
    maybe_1 = module_1.Maybe(list_1, bool_0)
    str_0.bind(var_1)


def test_case_8():
    none_type_0 = None
    str_0 = "4>LBL3,w$T\\L3i("
    set_0 = {none_type_0, str_0, str_0}
    bool_0 = False
    maybe_0 = module_1.Maybe(set_0, bool_0)
    maybe_0.ap(str_0)


def test_case_9():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_1.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_validation()
    maybe_0.filter(var_0)


def test_case_10():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_1.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.get_or_else(none_type_0)
    maybe_1 = module_1.Maybe(none_type_0, bool_0)
    var_0.get_or_else(maybe_1)


def test_case_11():
    str_0 = "\n    Create a new function that, when invoked,\n    caches the result of calling fn for a given argument set and returns the result.\n    Subsequent calls to the memoized fn with the same argument set will not result in an additional call to fn;\n    instead, the cached result for that set of arguments will be returned.\n\n    :param fn: function to invoke\n    :type fn: Function(A) -> B\n    :param key: function to decide if result should be taken from cache\n    :type key: Function(A, A) -> Boolean\n    :returns: new function invoking old one\n    :rtype: Function(A) -> B\n    "
    bool_0 = True
    maybe_0 = module_1.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_either()


def test_case_12():
    none_type_0 = None
    maybe_0 = module_1.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_either()
    var_0.get_or_else(maybe_0)


def test_case_13():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_1.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_box()


def test_case_14():
    tuple_0 = ()
    maybe_0 = module_1.Maybe(tuple_0, tuple_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_box()


def test_case_15():
    int_0 = -1204
    set_0 = {int_0, int_0, int_0, int_0}
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_1.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_try()
    var_0.ap(set_0)


def test_case_16():
    none_type_0 = None
    maybe_0 = module_1.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_either()
    maybe_1 = module_1.Maybe(none_type_0, none_type_0)
    var_2 = maybe_1.to_try()
    var_2.to_validation()


def test_case_17():
    int_0 = -2115
    bytes_0 = b"]\x97\x02O\x95#rqQ>\t\xb0di"
    maybe_0 = module_1.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_validation()
    var_1 = var_0.to_box()
    var_1.filter(int_0)


def test_case_18():
    str_0 = "Sum"
    maybe_0 = module_1.Maybe(str_0, str_0)
    var_0 = maybe_0.bind(maybe_0)
    int_0 = -1969
    var_1 = maybe_0.to_try()
    var_2 = maybe_0.filter(var_1)
    var_3 = maybe_0.to_lazy()
    bool_0 = True
    maybe_1 = module_1.Maybe(var_3, bool_0)
    bool_1 = maybe_1.__eq__(var_2)
    var_4 = maybe_0.to_try()
    var_5 = maybe_0.filter(var_4)
    var_6 = var_5.get_or_else(int_0)


def test_case_19():
    bool_0 = False
    none_type_0 = None
    bool_1 = True
    maybe_0 = module_1.Maybe(none_type_0, bool_1)
    var_0 = maybe_0.bind(none_type_0)
    var_1 = maybe_0.get_or_else(var_0)
    var_2 = maybe_0.get_or_else(none_type_0)
    maybe_1 = module_1.Maybe(bool_0, none_type_0)
    bool_2 = var_1.__eq__(bool_0)
    var_3 = var_0.ap(bool_1)
    var_4 = var_3.to_either()
    var_5 = var_3.to_validation()
    maybe_2 = module_1.Maybe(bool_1, none_type_0)
    var_6 = maybe_0.bind(var_1)
    bool_3 = var_3.__eq__(var_3)
    var_7 = maybe_1.to_either()
    var_8 = maybe_0.to_try()
    var_9 = maybe_1.to_validation()
    var_10 = maybe_0.filter(var_9)
    var_11 = maybe_1.to_box()
    var_12 = maybe_1.to_either()
    bool_4 = maybe_1.__eq__(maybe_2)
    var_12.to_either()
