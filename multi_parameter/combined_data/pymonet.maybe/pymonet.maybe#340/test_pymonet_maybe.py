# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    bytes_0 = b"_r\xab\xc3}\x7f\xdcec\xeb\xa3S\xfe\xfe\xe6\xd5`^\x98"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    bool_1 = False
    int_0 = 0
    set_0 = {bool_0, bool_0, bool_0}
    list_0 = [bool_1, int_0, set_0, bool_0]
    maybe_1 = module_0.Maybe(bool_1, list_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_1.ap(maybe_0)
    var_2 = maybe_1.ap(var_1)
    var_3 = var_2.to_validation()
    maybe_2 = module_0.Maybe(var_0, var_0)
    maybe_3 = module_0.Maybe(var_2, var_3)
    var_4 = maybe_3.bind(var_3)
    var_5 = maybe_1.to_lazy()
    maybe_4 = module_0.Maybe(bool_0, bool_0)
    var_6 = maybe_4.to_validation()
    var_0.get_or_else(var_6)


def test_case_3():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = maybe_0.__eq__(none_type_0)
    maybe_1 = module_0.Maybe(bool_0, maybe_0)
    var_0 = maybe_1.filter(maybe_1)
    maybe_0.filter(bool_0)


def test_case_4():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1 = module_0.Maybe(maybe_0, maybe_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_1.map(none_type_0)
    var_2 = maybe_1.get_or_else(maybe_0)
    maybe_0.bind(var_0)


def test_case_5():
    bytes_0 = b"\xd8\xce(\xa1\x96\xb3"
    bool_0 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    maybe_0.map(bytes_0)


def test_case_6():
    str_0 = ""
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.bind(bool_0)
    var_1 = maybe_0.to_lazy()
    var_2 = maybe_0.to_validation()
    var_1.filter(var_1)


def test_case_7():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = maybe_0.to_validation()
    maybe_1 = module_0.Maybe(bool_0, maybe_0)
    var_0 = maybe_1.filter(maybe_1)
    var_1 = maybe_0.ap(var_0)
    var_2 = maybe_1.ap(maybe_1)
    var_3 = maybe_0.to_validation()
    maybe_0.filter(var_3)


def test_case_8():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1 = module_0.Maybe(maybe_0, maybe_0)
    var_0 = maybe_1.filter(maybe_1)
    var_1 = maybe_0.ap(var_0)
    maybe_0.filter(maybe_0)


def test_case_9():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = False
    var_0 = maybe_0.get_or_else(none_type_0)
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    var_1 = maybe_0.to_try()
    var_2 = maybe_0.get_or_else(maybe_0)


def test_case_10():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_validation()
    int_0 = 1048
    var_1 = maybe_0.to_either()
    tuple_0 = (bool_0, maybe_0, int_0)
    maybe_1 = module_0.Maybe(tuple_0, tuple_0)
    var_2 = maybe_1.to_box()


def test_case_11():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_box()


def test_case_12():
    bool_0 = False
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_0, none_type_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.get_or_else(none_type_0)
    var_2 = maybe_0.to_lazy()
    var_2.filter(none_type_0)


def test_case_13():
    none_type_0 = None
    int_0 = -71
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.to_try()
    var_0.ap(none_type_0)


def test_case_14():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_validation()


def test_case_15():
    str_0 = "m"
    bool_0 = True
    float_0 = 477.28462
    list_0 = [float_0, bool_0, float_0, bool_0]
    tuple_0 = (str_0, bool_0, list_0, float_0)
    maybe_0 = module_0.Maybe(tuple_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_try()
    var_1.to_lazy()


def test_case_16():
    str_0 = "\n    Last is a Monoid that will always return the lastest, value when 2 Last instances are combined.\n    "
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    bool_0 = maybe_0.__eq__(var_0)
    var_1 = maybe_0.ap(bool_0)
    var_2 = var_0.ap(var_0)
    var_3 = maybe_0.to_lazy()
    var_4 = var_2.bind(var_1)
    set_0 = {bool_0}
    var_5 = maybe_0.get_or_else(var_3)
    var_6 = maybe_0.to_try()
    var_7 = var_0.bind(var_0)
    int_0 = -2101
    bool_1 = True
    var_8 = maybe_0.to_try()
    maybe_1 = module_0.Maybe(int_0, bool_1)
    var_9 = var_3.to_box()
    var_10 = maybe_1.ap(set_0)
    var_8.to_either()


def test_case_17():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.to_lazy()
    var_2 = var_1.to_either()
    maybe_1 = module_0.Maybe(bool_0, none_type_0)
    var_3 = maybe_1.to_either()
    var_4 = maybe_1.to_box()
    var_5 = maybe_1.to_lazy()
    var_6 = var_0.map(var_0)
    bool_1 = False
    maybe_2 = module_0.Maybe(maybe_1, bool_1)
    var_7 = var_5.to_try()
    var_8 = maybe_2.to_lazy()
    var_5.filter(var_3)


def test_case_18():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = maybe_0.__eq__(none_type_0)
    bool_1 = True
    maybe_1 = module_0.Maybe(bool_0, bool_1)
    bool_2 = maybe_1.__eq__(maybe_0)
    var_0 = maybe_1.filter(maybe_1)
    var_1 = maybe_0.ap(var_0)
    var_2 = maybe_1.to_lazy()
    var_3 = maybe_1.ap(bool_1)
    var_4 = maybe_1.to_try()
    bool_3 = True
    maybe_2 = module_0.Maybe(none_type_0, bool_3)
    maybe_3 = module_0.Maybe(maybe_1, none_type_0)
    bool_4 = maybe_0.__eq__(var_3)
    var_5 = var_1.to_lazy()
    var_6 = var_1.get_or_else(bool_0)
    var_7 = maybe_3.to_box()
    maybe_0.filter(var_0)
