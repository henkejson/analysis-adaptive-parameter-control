# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import builtins as module_1
import typing as module_2


def test_case_0():
    str_0 = "\r37D"
    maybe_0 = module_0.Maybe(str_0, str_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)


def test_case_3():
    bytes_0 = b"\xb2"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.get_or_else(maybe_0)
    var_2 = var_1.to_box()
    bool_0 = var_1.__eq__(bytes_0)
    var_3 = maybe_0.to_validation()
    var_4 = maybe_0.to_either()
    bool_1 = maybe_0.__eq__(var_2)
    var_2.filter(var_1)


def test_case_4():
    bool_0 = False
    dict_0 = {}
    none_type_0 = None
    maybe_0 = module_0.Maybe(dict_0, none_type_0)
    var_0 = maybe_0.to_try()
    var_1 = var_0.get_or_else(bool_0)
    bytes_0 = b"\xf5"
    int_0 = 2480
    maybe_1 = module_0.Maybe(int_0, bytes_0)
    var_2 = maybe_1.filter(maybe_1)
    var_3 = var_2.ap(var_2)
    var_4 = var_2.to_lazy()
    var_5 = maybe_0.to_either()
    var_6 = maybe_1.map(var_0)
    var_4.filter(var_6)


def test_case_5():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.to_either()
    bool_0 = False
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    maybe_2 = module_0.Maybe(none_type_0, none_type_0)
    bool_1 = maybe_0.__eq__(var_0)
    var_2 = maybe_2.to_try()
    bool_2 = maybe_1.__eq__(maybe_1)
    var_3 = maybe_0.to_either()
    var_4 = maybe_2.to_lazy()
    var_5 = var_4.to_either()
    maybe_2.ap(maybe_2)


def test_case_6():
    none_type_0 = None
    int_0 = 1215
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.bind(none_type_0)
    var_1 = var_0.to_try()
    none_type_1 = None
    list_0 = [none_type_1]
    module_1.object(*list_0)


def test_case_7():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.bind(none_type_0)


def test_case_8():
    bool_0 = True
    int_0 = 1
    bytes_0 = b'\x80EB%\x84\x08w\n(\xf1\x10!K\x89"\xde02\xda('
    bytes_1 = b"m\xce\xf5D\xd1[6\xc5l|u{`\xc5\xcf\r\x1a"
    maybe_0 = module_0.Maybe(bytes_0, bytes_1)
    var_0 = maybe_0.ap(int_0)
    var_1 = var_0.get_or_else(bool_0)
    var_1.to_validation()


def test_case_9():
    generic_0 = module_2.Generic()
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.filter(generic_0)


def test_case_10():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.filter(none_type_0)


def test_case_11():
    int_0 = 1
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.get_or_else(int_0)


def test_case_12():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.to_either()
    bool_0 = True
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    maybe_2 = module_0.Maybe(none_type_0, none_type_0)
    bool_1 = maybe_1.__eq__(maybe_1)
    var_2 = maybe_0.to_either()
    var_1.get_or_else(none_type_0)


def test_case_13():
    bool_0 = False
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_box()
    var_0.ap(bool_0)


def test_case_14():
    bool_0 = True
    none_type_0 = None
    bool_1 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_1)
    var_0 = maybe_0.bind(bool_0)
    var_1 = var_0.to_lazy()
    var_1.to_lazy()


def test_case_15():
    float_0 = -1990.0
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.ap(float_0)
    var_2 = var_1.ap(float_0)
    var_3 = var_2.to_try()
    maybe_1 = module_0.Maybe(float_0, float_0)


def test_case_16():
    str_0 = "\t\x0cK;C.uoA*XV\rP@5^f="
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_try()
    var_0.to_validation()


def test_case_17():
    int_0 = 1949
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.to_validation()


def test_case_18():
    list_0 = []
    maybe_0 = module_0.Maybe(list_0, list_0)
    var_0 = maybe_0.to_validation()
    var_0.to_validation()


def test_case_19():
    bytes_0 = b"\xb2"
    bytes_0.to_either()


def test_case_20():
    bool_0 = True
    bytes_0 = b"\xd4\x05\x88J*\x9eQ\xba\xe6k\x8c\x87\xb7\xfa"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    maybe_1 = module_0.Maybe(maybe_0, bool_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_1.filter(bool_0)
    var_2 = maybe_0.to_validation()
    maybe_2 = module_0.Maybe(bool_0, maybe_0)
    var_3 = maybe_0.ap(maybe_2)
    var_4 = maybe_0.to_validation()
    bool_1 = maybe_1.__eq__(var_2)
    var_5 = maybe_0.to_box()
    var_6 = maybe_2.to_box()
    var_7 = maybe_1.to_lazy()
    bool_2 = False
    var_8 = var_0.ap(bool_2)
    var_9 = maybe_0.to_lazy()
    var_10 = maybe_1.to_lazy()
    var_11 = var_2.to_box()
    var_12 = var_1.get_or_else(maybe_1)
    var_13 = var_10.to_either()
    var_14 = maybe_1.to_try()
    var_15 = maybe_2.to_validation()


def test_case_21():
    complex_0 = -1669 - 2929j
    set_0 = {complex_0, complex_0, complex_0}
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_box()
    var_2 = var_1.to_either()
    var_2.filter(set_0)


def test_case_22():
    bytes_0 = b"\xb2"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.get_or_else(maybe_0)
    var_2 = var_1.to_box()
    var_3 = maybe_0.filter(var_1)
    var_4 = maybe_0.to_validation()
    maybe_1 = module_0.Maybe(var_1, var_2)
    var_5 = maybe_0.to_lazy()
    var_6 = maybe_0.ap(var_4)
    var_7 = maybe_1.to_validation()
    bool_0 = maybe_1.__eq__(var_3)
    var_8 = var_7.to_box()
    bool_1 = var_8.__eq__(var_8)
    var_9 = maybe_0.to_try()
    var_10 = var_1.get_or_else(maybe_0)
    var_11 = var_10.ap(maybe_0)
    var_2.bind(var_8)
