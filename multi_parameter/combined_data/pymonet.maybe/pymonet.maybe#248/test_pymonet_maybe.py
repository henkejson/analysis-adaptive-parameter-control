# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1
import builtins as module_2


def test_case_0():
    bytes_0 = b"R\xe8gdq\x1a 3\xe3a:G\\A"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    bytes_0 = b"z\x04\x0f\x0ba\xc1\x9c\xde"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    bool_0 = False
    maybe_1 = module_0.Maybe(maybe_0, bool_0)
    var_0 = maybe_0.filter(bytes_0)
    bool_1 = var_0.__eq__(maybe_0)
    maybe_1.filter(bool_1)


def test_case_3():
    bytes_0 = b"z\x04\x0f\x0ba\xc1\x9c\xde"
    generic_0 = module_1.Generic()
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_try()
    maybe_1 = module_0.Maybe(generic_0, var_0)
    var_1 = maybe_1.to_lazy()
    var_2 = var_1.to_box()
    var_3 = maybe_0.ap(generic_0)
    var_4 = var_1.map(var_2)
    var_5 = maybe_0.filter(var_0)
    bool_0 = var_5.__eq__(var_2)
    var_6 = var_3.to_validation()
    var_7 = maybe_1.bind(var_1)
    var_8 = var_6.to_try()
    var_0.to_lazy()


def test_case_4():
    object_0 = module_2.object()
    maybe_0 = module_0.Maybe(object_0, object_0)
    none_type_0 = None
    var_0 = maybe_0.map(none_type_0)
    var_1 = var_0.to_validation()
    var_2 = maybe_0.to_box()
    var_3 = var_2.to_validation()
    var_4 = var_3.to_box()


def test_case_5():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_0.ap(maybe_0)


def test_case_6():
    bytes_0 = b"\r\x8cD\xc9\x02\x86wr\xdb"
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.ap(bytes_0)
    maybe_1 = module_0.Maybe(bytes_0, bytes_0)
    var_1 = maybe_1.get_or_else(maybe_1)
    var_2 = var_1.get_or_else(var_1)


def test_case_7():
    bool_0 = True
    list_0 = []
    maybe_0 = module_0.Maybe(list_0, list_0)
    maybe_0.ap(bool_0)


def test_case_8():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    set_0 = {bool_0}
    none_type_0 = None
    maybe_1 = module_0.Maybe(set_0, none_type_0)
    var_0 = maybe_1.to_either()
    var_1 = maybe_1.to_try()
    maybe_1.filter(var_0)


def test_case_9():
    bytes_0 = b"\x8b\xa2\xe0\x89"
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.get_or_else(bytes_0)
    var_1.to_validation()


def test_case_10():
    bytes_0 = b"hM\xa8\x9e\x01\xc5\x8a\xe7\xb9\x8cy\x04"
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_either()
    maybe_1 = module_0.Maybe(var_0, none_type_0)
    var_1 = maybe_1.to_box()
    var_1.filter(bytes_0)


def test_case_11():
    float_0 = 1479.0
    bool_0 = False
    maybe_0 = module_0.Maybe(float_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.to_box()
    var_1.to_box()


def test_case_12():
    bytes_0 = b"R\xe8gdq\x1a 3\xe3a:G\\A"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_try()


def test_case_13():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_0.to_validation()


def test_case_14():
    bytes_0 = b"z\x04\x0f\x0ba\xc1\x9c\xde"
    generic_0 = module_1.Generic()
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    bool_0 = False
    var_0 = maybe_0.to_try()
    maybe_1 = module_0.Maybe(generic_0, bool_0)
    var_1 = maybe_1.to_lazy()
    var_2 = var_1.to_box()
    var_3 = maybe_0.ap(generic_0)
    var_4 = var_1.map(var_2)
    var_5 = maybe_0.filter(var_0)
    bool_1 = var_5.__eq__(var_2)
    maybe_1.filter(bool_1)


def test_case_15():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.to_either()
    var_2 = maybe_0.to_try()
    var_1.ap(none_type_0)


def test_case_16():
    complex_0 = -299.6027 + 2653.63j
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, complex_0)
    var_0 = maybe_0.filter(complex_0)
    bool_0 = var_0.__eq__(var_0)
    bool_0.to_box()


def test_case_17():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.bind(none_type_0)


def test_case_18():
    float_0 = -2020.1
    bool_0 = False
    bool_1 = False
    none_type_0 = None
    maybe_0 = module_0.Maybe(float_0, bool_1)
    var_0 = maybe_0.get_or_else(none_type_0)
    var_0.filter(bool_0)
