# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import builtins as module_1


def test_case_0():
    int_0 = -2519
    maybe_0 = module_0.Maybe(int_0, int_0)


def test_case_1():
    bool_0 = False
    object_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    complex_0 = 3781.876257 + 1221.1111j
    maybe_0 = module_0.Maybe(complex_0, complex_0)
    var_0 = maybe_0.filter(complex_0)
    var_1 = var_0.to_try()
    bool_0 = maybe_0.__eq__(var_1)
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1.filter(none_type_0)


def test_case_3():
    set_0 = set()
    bytes_0 = b"\xa2\x85B0\x91\x7f)\xabH\xea<\x8c\xea\x92\x89"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.ap(set_0)
    var_2 = maybe_0.to_validation()
    bool_0 = var_2.__eq__(var_2)
    var_3 = maybe_0.map(var_0)
    var_4 = maybe_0.bind(set_0)
    str_0 = "r%2CG;4A$\ttLkuem3-"
    var_5 = var_0.to_try()
    bool_1 = var_0.__eq__(var_5)
    bool_2 = True
    maybe_1 = module_0.Maybe(str_0, bool_2)
    var_6 = maybe_1.to_either()


def test_case_4():
    complex_0 = -1712.209 + 1004j
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_0, none_type_0)
    maybe_0.map(complex_0)


def test_case_5():
    float_0 = 925.87
    bool_0 = True
    maybe_0 = module_0.Maybe(float_0, bool_0)
    var_0 = maybe_0.ap(bool_0)
    var_1 = maybe_0.bind(var_0)


def test_case_6():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_try()
    maybe_0.bind(var_0)


def test_case_7():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.ap(none_type_0)


def test_case_8():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.filter(var_0)
    var_2 = maybe_0.ap(bool_0)
    var_3 = maybe_0.bind(var_2)


def test_case_9():
    complex_0 = 3781.876257 + 1221.1111j
    maybe_0 = module_0.Maybe(complex_0, complex_0)
    var_0 = maybe_0.filter(complex_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1.filter(none_type_0)


def test_case_10():
    bool_0 = True
    str_0 = "T"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.get_or_else(bool_0)
    var_0.to_try()


def test_case_11():
    bytes_0 = b"\x10\x0b\x02U\xadF\x1a\xbeT\x0b!}\x8dI\x16\x9al\xb5"
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.get_or_else(bytes_0)
    var_0.to_box()


def test_case_12():
    bool_0 = True
    object_0 = module_1.object()
    maybe_0 = module_0.Maybe(object_0, object_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_lazy()
    var_1.get_or_else(bool_0)


def test_case_13():
    set_0 = set()
    bool_0 = False
    maybe_0 = module_0.Maybe(set_0, bool_0)
    var_0 = maybe_0.to_either()


def test_case_14():
    str_0 = "\x0cH$:K/<K]i@"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.bind(str_0)
    var_1 = maybe_0.to_lazy()
    var_2 = var_0.to_box()
    bool_0 = True
    var_3 = var_0.to_try()
    maybe_1 = module_0.Maybe(str_0, bool_0)
    var_4 = maybe_1.ap(var_1)
    var_5 = maybe_0.to_validation()


def test_case_15():
    none_type_0 = None
    none_type_1 = None
    maybe_0 = module_0.Maybe(none_type_1, none_type_1)
    var_0 = maybe_0.to_validation()
    bool_0 = False
    maybe_1 = module_0.Maybe(var_0, bool_0)
    var_1 = maybe_1.to_box()
    var_1.get_or_else(none_type_0)


def test_case_16():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    maybe_2 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.to_validation()
    var_2 = var_0.to_try()


def test_case_17():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_try()
    var_1.bind(var_0)


def test_case_18():
    float_0 = 925.87
    maybe_0 = module_0.Maybe(float_0, float_0)
    var_0 = maybe_0.ap(float_0)
    var_1 = var_0.filter(float_0)
    var_2 = var_1.to_either()
    var_3 = var_2.ap(float_0)
    bool_0 = True
    maybe_1 = module_0.Maybe(float_0, bool_0)
    var_4 = maybe_1.ap(bool_0)
    var_5 = var_1.bind(var_4)
    var_6 = var_5.bind(float_0)
    bool_1 = var_6.__eq__(maybe_1)


def test_case_19():
    complex_0 = 3781.876257 + 1221.1111j
    maybe_0 = module_0.Maybe(complex_0, complex_0)
    var_0 = maybe_0.filter(complex_0)
    bool_0 = maybe_0.__eq__(var_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1.filter(none_type_0)
