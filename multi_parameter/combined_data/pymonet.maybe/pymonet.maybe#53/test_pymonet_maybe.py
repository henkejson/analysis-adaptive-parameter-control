# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    maybe_1 = module_0.Maybe(bool_0, none_type_0)
    bool_1 = maybe_0.__eq__(maybe_1)
    var_0 = maybe_0.filter(maybe_0)
    maybe_1.filter(none_type_0)


def test_case_3():
    str_0 = "Max[value={}]"
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.get_or_else(bool_0)
    var_1 = maybe_0.to_try()
    bool_1 = maybe_0.__eq__(str_0)
    var_1.ap(maybe_0)


def test_case_4():
    bytes_0 = b"\x11y\xada\x12s\xa2F\xf8\x1dmc\xe5\xff\xbe\x95\xac"
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    maybe_1 = module_0.Maybe(maybe_0, bool_0)
    var_0 = maybe_1.to_try()
    float_0 = -1470.36
    bool_1 = True
    maybe_2 = module_0.Maybe(float_0, bool_1)
    var_1 = maybe_2.bind(var_0)
    maybe_3 = module_0.Maybe(var_1, bool_0)
    var_2 = maybe_3.map(bytes_0)


def test_case_5():
    bool_0 = True
    str_0 = "0mQD)j&c]R-y%!{V"
    none_type_0 = None
    maybe_0 = module_0.Maybe(str_0, none_type_0)
    maybe_0.map(bool_0)


def test_case_6():
    str_0 = "Max[value={}]"
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.get_or_else(bool_0)
    var_1 = maybe_0.bind(var_0)
    var_2 = maybe_0.to_try()
    bool_1 = maybe_0.__eq__(str_0)
    var_2.ap(maybe_0)


def test_case_7():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    maybe_0.bind(none_type_0)


def test_case_8():
    int_0 = -198
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.to_validation()
    set_0 = {int_0, int_0}
    bool_0 = False
    var_1 = maybe_0.ap(int_0)
    maybe_1 = module_0.Maybe(set_0, bool_0)
    var_2 = maybe_1.to_try()
    int_1 = 746
    list_0 = [int_1, int_1, int_1]
    maybe_2 = module_0.Maybe(list_0, list_0)
    var_3 = maybe_2.to_try()
    bool_1 = maybe_2.__eq__(int_1)


def test_case_9():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    maybe_0.ap(maybe_0)


def test_case_10():
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    maybe_1 = module_0.Maybe(bool_0, none_type_0)
    var_0 = maybe_0.filter(maybe_0)
    maybe_1.filter(none_type_0)


def test_case_11():
    int_0 = 1954
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.bind(maybe_0)
    var_2 = var_1.to_lazy()
    var_3 = maybe_0.to_validation()
    var_3.to_validation()


def test_case_12():
    str_0 = "p46"
    bytes_0 = b"\x94a\x84\x83\xbd\xb1\xe1\x81\xa3\xcc\xe6\x14n\xdaQ\x84a_\xa2"
    none_type_0 = None
    maybe_0 = module_0.Maybe(bytes_0, none_type_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_box()
    var_1.get_or_else(str_0)


def test_case_13():
    bytes_0 = b"\xc4\xf9\x02"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_validation()


def test_case_14():
    int_0 = 200
    bool_0 = False
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.to_box()
    maybe_0.filter(var_0)


def test_case_15():
    int_0 = 1597
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.filter(int_0)
    bool_1 = True
    var_1 = maybe_0.to_box()
    bool_2 = False
    var_2 = var_0.ap(bool_0)
    var_3 = maybe_0.to_lazy()
    var_4 = var_3.to_either()
    var_5 = var_3.to_try()
    maybe_1 = module_0.Maybe(bool_0, int_0)
    var_6 = maybe_0.map(var_3)
    var_7 = var_3.ap(var_4)
    maybe_2 = module_0.Maybe(bool_1, bool_2)


def test_case_16():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    bool_0 = maybe_0.__eq__(none_type_0)
    bool_1 = var_0.__eq__(bool_0)
    maybe_1 = module_0.Maybe(var_0, var_0)
    var_1 = maybe_0.to_either()
    var_2 = var_0.to_box()
    var_3 = var_1.to_lazy()
    var_1.get_or_else(none_type_0)


def test_case_17():
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    none_type_1 = None
    maybe_1 = module_0.Maybe(bool_0, none_type_1)
    bool_1 = maybe_0.__eq__(maybe_1)
    var_0 = maybe_1.to_try()
    var_1 = maybe_0.filter(maybe_0)
    var_2 = maybe_0.to_box()
    maybe_1.filter(none_type_1)


def test_case_18():
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    none_type_1 = None
    maybe_1 = module_0.Maybe(bool_0, none_type_1)
    bool_1 = maybe_0.__eq__(maybe_1)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.filter(maybe_0)
    var_2 = maybe_0.to_box()
    maybe_1.filter(none_type_1)


def test_case_19():
    none_type_0 = None
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    maybe_0 = module_0.Maybe(tuple_0, bool_0)
    var_0 = maybe_0.ap(none_type_0)
    none_type_1 = None
    maybe_1 = module_0.Maybe(none_type_1, none_type_1)
    var_1 = maybe_1.to_validation()
    var_1.to_validation()


def test_case_20():
    float_0 = 2585.64
    dict_0 = {}
    bool_0 = True
    maybe_0 = module_0.Maybe(float_0, bool_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(dict_0, none_type_0)
    float_1 = -542.09275
    bool_1 = True
    maybe_2 = module_0.Maybe(float_1, bool_1)
    var_0 = maybe_2.map(dict_0)
    var_1 = maybe_2.get_or_else(dict_0)
    bool_2 = maybe_2.__eq__(maybe_2)
    bool_3 = False
    tuple_0 = (bool_3, maybe_1, var_1, maybe_2)
    var_2 = var_0.get_or_else(tuple_0)
    var_1.get_or_else(bool_1)


def test_case_21():
    bool_0 = False
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_0, none_type_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    bool_2 = False
    var_0 = maybe_0.to_lazy()
    maybe_1 = module_0.Maybe(bool_0, bool_2)
    maybe_0.filter(none_type_0)
