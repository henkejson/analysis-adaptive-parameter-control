# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    str_0 = "\n        Applies the function inside the Maybe[A] structure to another applicative type for notempty Maybe.\n        For empty returns copy of itself\n\n        :param applicative: applicative contains function\n        :type applicative: Maybe[B]\n        :returns: new Maybe with result of contains function\n        :rtype: Maybe[A(B) | None]\n        "
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    var_1 = var_0.to_box()
    var_2 = maybe_0.to_validation()
    bool_0 = maybe_0.__eq__(maybe_0)


def test_case_3():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    bool_0 = True
    maybe_0 = module_0.Maybe(list_0, bool_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.map(none_type_0)
    var_2 = var_1.to_either()
    var_3 = maybe_0.bind(none_type_0)
    var_4 = var_1.to_try()
    bool_1 = maybe_0.__eq__(var_4)
    maybe_1 = module_0.Maybe(none_type_0, list_0)


def test_case_4():
    generic_0 = module_1.Generic()
    int_0 = 1312
    none_type_0 = None
    maybe_0 = module_0.Maybe(int_0, none_type_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.to_validation()
    maybe_0.map(var_1)


def test_case_5():
    int_0 = 1
    bytes_0 = b""
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    maybe_0.bind(int_0)


def test_case_6():
    int_0 = 462
    none_type_0 = None
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.map(int_0)
    var_1 = var_0.filter(int_0)
    var_2 = var_1.ap(int_0)
    var_3 = var_1.get_or_else(none_type_0)
    bool_0 = False
    bool_1 = var_0.__eq__(var_1)
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    maybe_1 = module_0.Maybe(int_0, dict_0)
    maybe_2 = module_0.Maybe(none_type_0, var_1)
    var_4 = var_0.ap(maybe_2)
    var_5 = maybe_1.to_try()
    var_5.to_validation()


def test_case_7():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.bind(maybe_0)
    var_1 = maybe_0.filter(bool_0)
    generic_0 = module_1.Generic()
    var_2 = var_1.to_try()
    bool_1 = False
    maybe_1 = module_0.Maybe(bool_1, bool_1)
    var_3 = maybe_0.get_or_else(generic_0)
    var_4 = maybe_1.ap(maybe_0)
    bool_2 = var_2.__eq__(bool_0)
    maybe_1.filter(maybe_0)


def test_case_8():
    bytes_0 = b"\xec\xdd\xf92\xb6N\x1d\x1bf"
    bool_0 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    maybe_0.filter(maybe_0)


def test_case_9():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    bool_2 = True
    var_0 = maybe_0.get_or_else(maybe_0)
    maybe_1 = module_0.Maybe(bool_0, bool_2)
    var_0.ap(bool_1)


def test_case_10():
    none_type_0 = None
    none_type_1 = None
    maybe_0 = module_0.Maybe(none_type_1, none_type_1)
    var_0 = maybe_0.to_either()
    var_0.map(none_type_0)


def test_case_11():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_either()
    maybe_1 = module_0.Maybe(maybe_0, var_0)
    var_1 = var_0.bind(var_0)
    var_2 = maybe_0.filter(var_0)
    generic_0 = module_1.Generic()
    var_3 = var_2.filter(generic_0)
    var_4 = var_2.to_lazy()
    bool_1 = False
    maybe_2 = module_0.Maybe(bool_1, bool_1)
    var_5 = maybe_0.get_or_else(generic_0)
    var_6 = maybe_2.ap(maybe_0)
    bool_2 = var_3.__eq__(maybe_1)
    int_0 = 1092
    maybe_2.filter(int_0)


def test_case_12():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_box()
    var_2 = var_1.to_lazy()


def test_case_13():
    int_0 = -909
    set_0 = {int_0, int_0}
    dict_0 = {int_0: int_0, int_0: set_0}
    bool_0 = False
    maybe_0 = module_0.Maybe(dict_0, bool_0)
    var_0 = maybe_0.to_try()
    none_type_0 = None
    bool_1 = True
    var_1 = maybe_0.to_validation()
    bool_2 = var_0.__eq__(var_1)
    maybe_1 = module_0.Maybe(bool_1, bool_1)
    maybe_2 = module_0.Maybe(maybe_1, maybe_1)
    var_2 = maybe_1.to_validation()
    bool_3 = var_1.__eq__(none_type_0)
    var_3 = maybe_2.to_either()
    var_4 = var_3.to_validation()
    maybe_3 = module_0.Maybe(var_4, bool_1)
    var_5 = maybe_0.to_try()
    var_6 = maybe_3.to_validation()
    var_3.to_either()


def test_case_14():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = var_0.to_either()
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    var_2 = maybe_1.filter(maybe_0)
    var_3 = var_2.to_lazy()
    var_4 = var_3.ap(var_1)
    var_5 = var_2.to_either()
    var_6 = var_3.to_validation()
    bool_1 = False
    maybe_2 = module_0.Maybe(var_1, bool_1)
    var_7 = var_5.bind(var_1)
    maybe_2.filter(var_3)


def test_case_15():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_either()
    maybe_1 = module_0.Maybe(maybe_0, var_0)
    var_1 = var_0.bind(var_0)
    var_2 = maybe_0.filter(var_0)
    generic_0 = module_1.Generic()
    var_3 = var_2.filter(generic_0)
    var_4 = var_2.to_try()
    bool_1 = False
    maybe_2 = module_0.Maybe(bool_1, bool_1)
    var_5 = maybe_0.get_or_else(generic_0)
    var_6 = maybe_2.ap(maybe_0)
    bool_2 = var_3.__eq__(maybe_1)
    int_0 = 1092
    maybe_2.filter(int_0)
