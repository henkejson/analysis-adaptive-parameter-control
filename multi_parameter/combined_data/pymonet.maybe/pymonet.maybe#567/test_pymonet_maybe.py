# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    float_0 = 4010.833
    maybe_0 = module_0.Maybe(float_0, float_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    bool_0 = True
    bytes_0 = b"n\x0c#\xf9\x11g\xa8;\x02\xa2g\xf4\x99\x91\x9c\xf6\xaa\x8f\x88"
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.bind(bool_0)
    none_type_0 = None
    bool_2 = var_1.__eq__(bytes_0)
    var_2 = maybe_0.to_box()
    var_3 = var_1.get_or_else(none_type_0)
    var_3.get_or_else(none_type_0)


def test_case_3():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_box()
    var_2 = var_1.to_lazy()
    str_0 = "@1f7v-r3+'FvU]{*&/Ee"
    bool_0 = False
    str_1 = "Callable[[U], Lazy[U, W]]"
    maybe_1 = module_0.Maybe(str_1, str_1)
    var_3 = maybe_1.map(bool_0)
    var_4 = var_3.bind(str_0)
    var_5 = var_4.filter(var_2)


def test_case_4():
    tuple_0 = ()
    maybe_0 = module_0.Maybe(tuple_0, tuple_0)
    var_0 = maybe_0.to_box()
    maybe_0.map(var_0)


def test_case_5():
    int_0 = 869
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, int_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.ap(int_0)
    maybe_1 = module_0.Maybe(int_0, int_0)
    var_2 = maybe_1.bind(var_1)
    var_3 = maybe_1.to_validation()


def test_case_6():
    none_type_0 = None
    tuple_0 = ()
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.bind(tuple_0)


def test_case_7():
    bool_0 = True
    float_0 = 586.87839
    none_type_0 = None
    maybe_0 = module_0.Maybe(float_0, none_type_0)
    maybe_0.ap(bool_0)


def test_case_8():
    none_type_0 = None
    str_0 = "2,$e,0"
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    maybe_0.filter(none_type_0)


def test_case_9():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.get_or_else(none_type_0)
    var_1 = maybe_0.bind(var_0)
    var_0.to_lazy()


def test_case_10():
    int_0 = 3616
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.get_or_else(var_0)
    var_0.ap(int_0)


def test_case_11():
    none_type_0 = None
    bool_0 = True
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_try()
    var_2 = var_1.get_or_else(none_type_0)
    var_2.ap(none_type_0)


def test_case_12():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    str_0 = "\n        Applies the function inside the Maybe[A] structure to another applicative type for notempty Maybe.\n        For empty returns copy of itself\n\n        :param applicative: applicative contains function\n        :type applicative: Maybe[B]\n        :returns: new Maybe with result of contains function\n        :rtype: Maybe[A(B) | None]\n        "
    bool_1 = False
    maybe_0 = module_0.Maybe(str_0, bool_1)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_try()
    var_2 = maybe_0.to_box()
    var_3 = maybe_0.to_either()
    var_2.ap(dict_0)


def test_case_13():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_try()
    var_0.to_try()


def test_case_14():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_try()
    maybe_0.bind(var_0)


def test_case_15():
    complex_0 = -1806.512 + 553.093j
    bool_0 = False
    maybe_0 = module_0.Maybe(complex_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = var_0.to_box()
    var_2 = var_1.to_try()
    var_2.to_either()


def test_case_16():
    int_0 = 0
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.filter(none_type_0)
    var_1 = var_0.to_lazy()
    var_2 = var_1.to_try()
    var_2.filter(int_0)


def test_case_17():
    tuple_0 = ()
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.bind(maybe_0)
    var_2 = maybe_0.to_either()
    var_3 = maybe_0.bind(var_2)
    var_4 = var_3.to_lazy()
    maybe_1 = module_0.Maybe(maybe_0, bool_0)
    var_5 = maybe_0.ap(tuple_0)
    none_type_1 = None
    var_6 = var_4.to_box()
    bool_1 = True
    bool_2 = maybe_1.__eq__(var_3)
    maybe_2 = module_0.Maybe(none_type_1, bool_1)
    var_7 = maybe_2.to_either()
    maybe_3 = module_0.Maybe(var_3, bool_1)
    var_8 = maybe_3.filter(none_type_0)


def test_case_18():
    str_0 = "ObB'n&zsp"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.get_or_else(str_0)
    bool_0 = maybe_0.__eq__(var_1)
    var_2 = maybe_0.map(var_1)
    bytes_0 = b"\xc3\x07\xcf"
    var_3 = maybe_0.ap(var_1)
    var_4 = var_3.get_or_else(var_2)
    var_5 = var_4.to_try()
    var_6 = maybe_0.filter(var_5)
    maybe_1 = module_0.Maybe(bytes_0, bytes_0)
    var_7 = maybe_1.to_try()
    var_8 = maybe_1.bind(maybe_1)
    bool_1 = var_4.__eq__(maybe_1)
    var_7.to_try()


def test_case_19():
    float_0 = -273.0
    bool_0 = False
    maybe_0 = module_0.Maybe(float_0, bool_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    var_1 = maybe_0.to_lazy()
    bool_1 = maybe_0.__eq__(maybe_0)
    var_2 = maybe_0.to_try()
    var_3 = maybe_0.to_validation()
    var_0.bind(float_0)
