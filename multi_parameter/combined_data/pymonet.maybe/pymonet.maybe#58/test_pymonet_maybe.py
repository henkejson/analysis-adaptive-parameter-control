# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    bytes_0 = b"\x18Y\x1f\x9fR\xdca\x9ey(f\xa7\xfb\xe6J"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    bytes_0 = b""
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    float_0 = 238.0
    list_0 = [float_0, float_0]
    bool_0 = False
    maybe_1 = module_0.Maybe(list_0, bool_0)
    bool_1 = maybe_1.__eq__(bytes_0)


def test_case_3():
    bytes_0 = b"\xe5\xb5\xc2\x9asj\x86\xed\xb8\xfe1|\xe2"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    none_type_0 = None
    var_0 = maybe_0.get_or_else(bytes_0)
    var_1 = maybe_0.filter(none_type_0)
    maybe_1 = module_0.Maybe(var_0, var_0)
    var_2 = maybe_1.ap(maybe_0)
    var_3 = var_1.ap(var_2)
    var_4 = var_2.map(var_2)
    var_5 = maybe_0.bind(var_1)


def test_case_4():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.map(none_type_0)


def test_case_5():
    none_type_0 = None
    bool_0 = False
    bool_1 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_1)
    maybe_0.bind(bool_0)


def test_case_6():
    bytes_0 = b"\xe5\xb5\xc2\x9asj\x86\xed\xb8\xfe1|\xe2"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    str_0 = '9|"?3-9t\nV:;'
    none_type_0 = None
    var_0 = maybe_0.get_or_else(bytes_0)
    var_1 = maybe_0.filter(none_type_0)
    maybe_1 = module_0.Maybe(str_0, str_0)
    var_2 = maybe_1.ap(maybe_0)
    var_3 = var_2.to_either()


def test_case_7():
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.ap(bool_0)
    none_type_1 = None
    maybe_1 = module_0.Maybe(bool_0, none_type_1)
    maybe_1.ap(bool_0)


def test_case_8():
    dict_0 = {}
    complex_0 = 2794.46 - 312.62255j
    bytes_0 = b"\x18Y\x1f\x9fR\xdca\x9ey(f\xa7C\x97J"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.filter(complex_0)
    var_1 = var_0.filter(dict_0)
    var_2 = var_1.to_try()
    var_2.to_either()


def test_case_9():
    int_0 = 382
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.to_either()
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1.filter(var_0)


def test_case_10():
    complex_0 = -2449.53 - 1336j
    none_type_0 = None
    bool_0 = True
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_box()
    maybe_1 = module_0.Maybe(complex_0, bool_0)
    maybe_2 = module_0.Maybe(complex_0, none_type_0)
    var_1 = maybe_2.to_either()
    var_2 = var_1.to_box()
    var_3 = maybe_2.get_or_else(maybe_2)
    var_3.filter(var_2)


def test_case_11():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_either()


def test_case_12():
    str_0 = "<"
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.to_lazy()
    var_2 = var_1.to_either()
    var_2.to_either()


def test_case_13():
    none_type_0 = None
    int_0 = 0
    maybe_0 = module_0.Maybe(int_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_box()
    var_2 = var_1.to_try()
    var_2.to_try()


def test_case_14():
    set_0 = set()
    bool_0 = False
    maybe_0 = module_0.Maybe(set_0, bool_0)
    var_0 = maybe_0.to_try()


def test_case_15():
    bytes_0 = b"\xe5\xb5\xc2\x9asj\x86\xed\xb8\xfe1|\xe2"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    str_0 = '9|"?3-9t\nV:;'
    none_type_0 = None
    var_0 = maybe_0.filter(none_type_0)
    maybe_1 = module_0.Maybe(str_0, str_0)
    var_1 = var_0.to_validation()
    maybe_2 = module_0.Maybe(var_0, var_1)
    str_0.filter(var_1)


def test_case_16():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, none_type_0)
    var_0 = maybe_0.to_validation()
    bool_1 = var_0.__eq__(none_type_0)
    var_1 = var_0.to_lazy()
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    bool_2 = maybe_1.__eq__(bool_1)
    var_2 = maybe_1.to_validation()
    var_3 = var_2.to_either()
    var_4 = var_0.to_lazy()
    int_0 = -5
    var_5 = maybe_1.to_try()
    maybe_2 = module_0.Maybe(var_5, int_0)
    bool_3 = var_1.__eq__(var_5)


def test_case_17():
    dict_0 = {}
    complex_0 = 2794.46 - 312.62255j
    bytes_0 = b"\x18Y\x1f\x9fR\xdca\x9ey(f\xa7C\x97J"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.filter(complex_0)
    var_1 = var_0.filter(dict_0)
    var_2 = var_1.to_try()
    bool_0 = var_1.__eq__(maybe_0)


def test_case_18():
    bytes_0 = b"\xe5\xb5\xc2\x9asj\x86\xed\xb8\xfe1|\xe2"
    float_0 = -995.3402
    maybe_0 = module_0.Maybe(float_0, bytes_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    none_type_0 = None
    var_0 = maybe_0.get_or_else(none_type_0)
    var_0.filter(var_0)


def test_case_19():
    bytes_0 = b"\xe5\xb5\xc2\x9asj\x86\xed\xb8\xfe1|\xe2"
    bool_0 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    bytes_1 = b"\xd3\xad\xf4\x1e"
    bool_2 = True
    maybe_1 = module_0.Maybe(bytes_1, bool_2)
    maybe_0.filter(maybe_1)
