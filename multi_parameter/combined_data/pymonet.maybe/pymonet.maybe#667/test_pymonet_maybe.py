# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    none_type_0 = None
    maybe_0 = module_0.Maybe(set_0, none_type_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_try()


def test_case_3():
    bool_0 = False
    none_type_0 = None
    bool_1 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_1)
    var_0 = maybe_0.bind(maybe_0)
    maybe_1 = module_0.Maybe(maybe_0, maybe_0)
    bool_2 = maybe_1.__eq__(var_0)
    var_1 = maybe_1.map(bool_0)
    var_2 = maybe_0.get_or_else(var_0)
    var_3 = var_2.to_lazy()
    var_4 = maybe_1.to_validation()
    maybe_2 = module_0.Maybe(var_1, bool_2)
    var_5 = maybe_2.to_lazy()
    var_6 = var_5.to_validation()
    var_6.to_validation()


def test_case_4():
    str_0 = "!<$JG}e"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.ap(maybe_0)
    var_1 = var_0.get_or_else(str_0)
    var_2 = maybe_0.map(str_0)
    var_3 = maybe_0.to_either()
    var_4 = var_3.to_box()
    var_5 = var_4.to_try()


def test_case_5():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_try()
    maybe_0.map(none_type_0)


def test_case_6():
    bool_0 = False
    none_type_0 = None
    bool_1 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_1)
    var_0 = maybe_0.bind(maybe_0)
    maybe_1 = module_0.Maybe(maybe_0, maybe_0)
    bool_2 = maybe_0.__eq__(var_0)
    var_1 = maybe_1.map(bool_0)
    var_2 = maybe_1.map(bool_2)
    var_3 = var_1.to_validation()
    var_4 = var_0.to_validation()
    var_5 = maybe_1.to_try()


def test_case_7():
    str_0 = ".M^\r\\p6X"
    bytes_0 = b"\xac\xc2\x13\xb5\xe9\xd7\xcdr\xc65\x00\xe7"
    tuple_0 = (bytes_0,)
    bool_0 = False
    maybe_0 = module_0.Maybe(tuple_0, bool_0)
    maybe_0.bind(str_0)


def test_case_8():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.get_or_else(none_type_0)
    maybe_0.ap(none_type_0)


def test_case_9():
    none_type_0 = None
    bytes_0 = b"'u\xd6\x94\xe9"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    maybe_0 = module_0.Maybe(dict_0, dict_0)
    var_0 = maybe_0.filter(none_type_0)
    var_1 = var_0.to_try()


def test_case_10():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.map(bool_0)
    var_1 = maybe_0.to_either()
    var_2 = maybe_0.filter(var_1)
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1.filter(maybe_1)


def test_case_11():
    str_0 = "\n    One is a Monoid that will combine 2 values of any type using logical disjunction OR on their coerced Boolean values.\n    "
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_try()
    var_2 = var_0.to_validation()
    bool_1 = var_0.__eq__(var_0)
    var_3 = var_0.to_lazy()


def test_case_12():
    bool_0 = True
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_either()


def test_case_13():
    generic_0 = module_1.Generic()
    none_type_0 = None
    maybe_0 = module_0.Maybe(generic_0, none_type_0)
    var_0 = maybe_0.to_box()
    var_0.to_box()


def test_case_14():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.map(bool_0)
    var_1 = var_0.to_lazy()
    var_2 = var_1.to_either()
    maybe_1 = module_0.Maybe(bool_0, var_2)
    var_3 = maybe_0.filter(var_1)
    maybe_2 = module_0.Maybe(none_type_0, none_type_0)
    var_4 = maybe_0.to_validation()
    maybe_2.filter(var_4)


def test_case_15():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.map(bool_0)
    var_1 = maybe_0.get_or_else(var_0)
    var_2 = var_1.to_either()
    var_3 = maybe_0.filter(var_1)
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_4 = maybe_0.to_validation()
    maybe_1.filter(var_4)


def test_case_16():
    bool_0 = True
    int_0 = 1127
    bool_1 = False
    maybe_0 = module_0.Maybe(int_0, bool_1)
    var_0 = maybe_0.to_validation()
    var_1 = var_0.to_either()
    var_1.map(bool_0)


def test_case_17():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.map(bool_0)
    var_1 = var_0.to_either()
    maybe_1 = module_0.Maybe(bool_0, var_1)
    var_2 = maybe_0.filter(var_0)
    maybe_2 = module_0.Maybe(none_type_0, none_type_0)
    var_3 = maybe_0.to_validation()
    maybe_2.filter(var_3)
