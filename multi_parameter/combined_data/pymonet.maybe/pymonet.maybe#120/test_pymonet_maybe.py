# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import builtins as module_1
import typing as module_2


def test_case_0():
    int_0 = -23
    maybe_0 = module_0.Maybe(int_0, int_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    str_0 = "\n        Transform Either to Maybe.\n\n        :returns: Maybe with previous value\n        :rtype: Maybe[A]\n        "
    maybe_0 = module_0.Maybe(str_0, str_0)
    bool_0 = False
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    bool_1 = maybe_1.__eq__(maybe_0)
    var_0 = maybe_0.map(str_0)
    var_1 = maybe_0.filter(bool_1)
    maybe_1.filter(bool_1)


def test_case_3():
    str_0 = "\n        Transform Either to Maybe.\n\n        :returns: Maybe with previous value\n        :rtype: Maybe[A]\n        "
    maybe_0 = module_0.Maybe(str_0, str_0)
    bool_0 = False
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    bool_1 = maybe_0.__eq__(str_0)
    var_0 = maybe_0.map(str_0)
    var_1 = maybe_0.filter(bool_1)
    maybe_1.filter(bool_1)


def test_case_4():
    str_0 = "\n        Transform Either to Maybe.\n\n        :returns: Maybe with previos value\n        :rtype: Maybe[A]\n        "
    maybe_0 = module_0.Maybe(str_0, str_0)
    bool_0 = False
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.map(str_0)
    var_1 = maybe_0.filter(bool_0)
    maybe_1.filter(bool_0)


def test_case_5():
    none_type_0 = None
    dict_0 = {}
    bool_0 = False
    maybe_0 = module_0.Maybe(dict_0, bool_0)
    maybe_1 = module_0.Maybe(dict_0, none_type_0)
    maybe_0.ap(maybe_0)


def test_case_6():
    str_0 = "\n        Transform Either to Maybe.\n\n        :returns: Maybe with previous value\n        :rtype: Maybe[A]\n        "
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.bind(maybe_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(bool_1, bool_1)
    var_2 = maybe_0.filter(str_0)
    maybe_1.filter(var_0)


def test_case_7():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.get_or_else(none_type_0)
    bool_0 = var_0.__eq__(var_0)
    maybe_0.bind(var_0)


def test_case_8():
    bool_0 = True
    str_0 = "0~\r^3~phoBhEL{\r6ly-"
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.filter(none_type_0)
    var_1 = var_0.ap(bool_0)
    var_2 = maybe_0.to_try()
    var_3 = var_2.map(var_2)
    bool_1 = var_0.__eq__(var_3)
    var_4 = var_0.get_or_else(str_0)
    var_5 = var_0.to_try()
    var_5.to_try()


def test_case_9():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    maybe_0.ap(bool_0)


def test_case_10():
    str_0 = "\n        Transform Either to Maybe.\n\n        :returns: Maybe with previous value\n        :rtype: Maybe[A]\n        "
    maybe_0 = module_0.Maybe(str_0, str_0)
    bool_0 = False
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.filter(str_0)
    maybe_1.filter(maybe_1)


def test_case_11():
    str_0 = "4Keypf1T>3>Yc9G"
    object_0 = module_1.object()
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, str_0)
    var_0 = maybe_0.get_or_else(str_0)
    var_0.ap(object_0)


def test_case_12():
    int_0 = -916
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.get_or_else(int_0)
    var_0.to_lazy()


def test_case_13():
    int_0 = -23
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.to_either()


def test_case_14():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.to_either()
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    var_2 = maybe_1.to_lazy()
    var_3 = maybe_1.to_try()


def test_case_15():
    str_0 = "$CM\x0c*^\x0bleA;Z5n+"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.to_box()


def test_case_16():
    str_0 = "v/\nQ7"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.filter(str_0)
    var_1 = var_0.to_box()
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, str_0)
    var_2 = maybe_1.to_validation()
    var_3 = var_2.to_either()
    bool_0 = False
    maybe_2 = module_0.Maybe(str_0, bool_0)
    var_4 = maybe_2.to_box()
    var_4.map(str_0)


def test_case_17():
    str_0 = "\n        Transform Either to Maybe.\n\n        :returns: Maybe with previous value\n        :rtype: Maybe[A]\n        "
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.to_lazy()
    bool_1 = False
    maybe_1 = module_0.Maybe(bool_1, bool_1)
    var_2 = maybe_0.filter(str_0)
    maybe_1.filter(var_0)


def test_case_18():
    none_type_0 = None
    bytes_0 = b"\xa91"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_try()
    var_0.ap(none_type_0)


def test_case_19():
    generic_0 = module_2.Generic()
    complex_0 = -1080.5212 - 546.64987j
    maybe_0 = module_0.Maybe(generic_0, complex_0)
    var_0 = maybe_0.to_validation()
    maybe_1 = module_0.Maybe(var_0, var_0)
    var_1 = maybe_1.to_either()


def test_case_20():
    bytes_0 = b"\xf9"
    bool_0 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.to_validation()
    bytes_1 = b"\xb5\xe16\xbe2i\x15wT\xc0\x11\xe9"
    bool_1 = False
    maybe_1 = module_0.Maybe(bytes_1, bool_1)
    var_1 = maybe_1.to_validation()
    var_1.map(var_0)


def test_case_21():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.ap(bool_0)
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    var_1 = maybe_1.to_lazy()
    var_2 = var_1.to_box()
    var_3 = var_2.to_lazy()
    var_4 = var_3.to_box()
    var_5 = var_4.to_either()
    var_5.map(var_0)


def test_case_22():
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.filter(none_type_0)
    var_1 = var_0.ap(bool_0)
    var_2 = maybe_0.to_try()
    var_3 = var_2.map(var_2)
    bool_1 = var_0.__eq__(var_3)
    var_4 = var_1.to_lazy()
    var_5 = var_1.ap(var_4)
    bool_2 = var_0.__eq__(maybe_0)
    module_2.Generic(*var_2)


def test_case_23():
    str_0 = ""
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_validation()
    var_1.to_validation()
