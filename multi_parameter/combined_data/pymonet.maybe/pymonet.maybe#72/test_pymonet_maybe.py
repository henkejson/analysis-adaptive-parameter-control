# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1


def test_case_0():
    int_0 = -767
    maybe_0 = module_0.Maybe(int_0, int_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    str_0 = "\n        Take function and applied this function on current Validation value and returns folder result.\n\n        :param mapper: mapper function\n        :type mapper: Function(A) -> Validation[B, E]\n        :returns: new Validation with mapped value\n        :rtype: Validation[B, E]\n        "
    maybe_0 = module_0.Maybe(str_0, str_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    var_1 = var_0.to_either()
    bool_1 = var_1.__eq__(var_0)
    bool_2 = False
    maybe_1 = module_0.Maybe(bool_2, bool_2)
    var_2 = var_0.filter(maybe_1)
    bool_3 = True
    maybe_2 = module_0.Maybe(maybe_1, bool_3)
    maybe_1.filter(maybe_1)


def test_case_3():
    str_0 = "XR6g\r\n=%K"
    tuple_0 = (str_0,)
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_either()
    maybe_1 = module_0.Maybe(tuple_0, str_0)
    none_type_1 = None
    var_1 = maybe_1.ap(none_type_1)
    var_2 = var_1.to_validation()
    var_3 = var_1.bind(var_2)
    bool_1 = var_3.__eq__(none_type_1)
    var_2.to_validation()


def test_case_4():
    str_0 = "\n        Take function and applied this function on current Validation value and returns folder result.\n\n        :param mapper: mapper function\n        :type mapper: Function(A) -> Validation[B, E]\n        :returns: new Validation with mapped value\n        :rtype: Validation[B, E]\n        "
    maybe_0 = module_0.Maybe(str_0, str_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    var_1 = var_0.to_either()
    bool_1 = var_1.__eq__(var_0)
    bool_2 = False
    maybe_1 = module_0.Maybe(bool_2, bool_2)
    var_2 = var_0.filter(maybe_1)
    maybe_2 = var_2.map(var_1)
    maybe_1.filter(maybe_1)


def test_case_5():
    bool_0 = True
    none_type_0 = None
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    maybe_0.map(none_type_0)


def test_case_6():
    complex_0 = 770.027 + 365.65588j
    int_0 = 488
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.bind(complex_0)


def test_case_7():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    var_1 = maybe_0.bind(var_0)
    var_2 = maybe_0.to_try()
    var_3 = maybe_0.ap(var_2)
    float_0 = -1913.1772
    bool_1 = False
    set_0 = {bool_1, bool_1}
    list_0 = [set_0, bool_1]
    var_4 = var_0.map(var_3)
    var_5 = maybe_0.get_or_else(bool_0)
    var_6 = maybe_0.map(float_0)
    var_7 = maybe_0.map(var_2)
    int_0 = 5064
    none_type_0 = None
    var_8 = var_2.get_or_else(bool_0)
    var_9 = var_6.to_try()
    var_10 = var_2.filter(var_8)
    maybe_1 = module_0.Maybe(int_0, none_type_0)
    maybe_1.bind(list_0)


def test_case_8():
    bytes_0 = b"{\n\x05E\x7f\xf4\xd4\xa2\x83\xe4\xbf"
    str_0 = "XR6g\r\n=%K"
    tuple_0 = (str_0,)
    maybe_0 = module_0.Maybe(tuple_0, str_0)
    var_0 = maybe_0.ap(bytes_0)


def test_case_9():
    set_0 = set()
    tuple_0 = ()
    generic_0 = module_1.Generic(*tuple_0)
    none_type_0 = None
    maybe_0 = module_0.Maybe(generic_0, none_type_0)
    maybe_0.ap(set_0)


def test_case_10():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.filter(maybe_0)


def test_case_11():
    int_0 = 1764
    list_0 = [int_0]
    tuple_0 = (int_0, list_0, int_0)
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    tuple_1 = (tuple_0,)
    var_0 = maybe_0.get_or_else(tuple_1)
    maybe_0.filter(tuple_0)


def test_case_12():
    tuple_0 = ()
    none_type_0 = None
    maybe_0 = module_0.Maybe(tuple_0, none_type_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_try()
    var_1.ap(tuple_0)


def test_case_13():
    int_0 = 1764
    list_0 = [int_0]
    tuple_0 = (int_0, list_0, int_0)
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(tuple_0, bool_0)
    var_0 = maybe_0.ap(none_type_0)
    var_1 = var_0.to_box()
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1.filter(tuple_0)


def test_case_14():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = maybe_0.to_box()
    var_0 = maybe_0.to_lazy()
    maybe_0.filter(var_0)


def test_case_15():
    bytes_0 = b"?9:\xce\xfer.y"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_lazy()
    int_0 = 982
    bool_0 = False
    maybe_1 = module_0.Maybe(int_0, bool_0)
    var_1 = maybe_1.to_box()
    var_2 = var_1.to_validation()
    var_3 = var_2.to_either()
    var_4 = var_3.to_validation()
    var_4.filter(var_0)


def test_case_16():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()


def test_case_17():
    int_0 = -767
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.to_try()
    var_0.to_try()


def test_case_18():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.to_try()
    var_1.bind(maybe_0)


def test_case_19():
    bool_0 = False
    bytes_0 = b"z\xf5\xd1\x9aF>"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_validation()
    var_1 = var_0.to_lazy()
    var_1.get_or_else(bool_0)


def test_case_20():
    bytes_0 = b"\xe8S\x1b\xae\xd6_\xd2AK\n\xf5\xbb"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_either()
    var_2 = maybe_0.ap(bytes_0)
    var_3 = maybe_0.get_or_else(bytes_0)
    bool_0 = var_3.__eq__(maybe_0)
    var_4 = maybe_0.filter(var_3)
    var_3.map(var_3)


def test_case_21():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_try()
    var_1.to_either()


def test_case_22():
    str_0 = "\n        Take function and applied this function on current Validation value and returns folder result.\n\n        :param mapper: mapper function\n        :type mapper: Function(A) -> Validation[B, E]\n        :returns: new Validation with mapped value\n        :rtype: Validation[B, E]\n        "
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_try()
    var_1.filter(var_0)


def test_case_23():
    str_0 = "\n        Take function and applied this function on current Validation value and returns folder result.\n\n        :param mapper: mapper function\n        :type mapper: Function(A) -> Validation[B, E]\n        :returns: new Validation with mapped value\n        :rtype: Validation[B, E]\n        "
    maybe_0 = module_0.Maybe(str_0, str_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    var_1 = maybe_0.filter(bool_0)
    var_2 = var_0.to_either()
    bool_1 = var_1.__eq__(var_0)
    bool_2 = False
    var_3 = var_0.to_try()
    maybe_1 = module_0.Maybe(bool_2, bool_2)
    var_4 = var_0.filter(var_1)
    maybe_2 = module_0.Maybe(var_1, var_3)
    var_5 = maybe_1.get_or_else(str_0)
    maybe_1.filter(var_3)
