# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1


def test_case_0():
    int_0 = 1
    maybe_0 = module_0.Maybe(int_0, int_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = maybe_0.__eq__(bool_0)
    var_0 = maybe_0.to_try()


def test_case_3():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bytes_0 = b"\xbc\xc5\x9a\xa0k\xdf^\xda\x8bD"
    maybe_1 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_1.ap(bool_0)
    var_2 = var_1.map(none_type_0)
    var_3 = var_2.to_try()
    maybe_0.filter(var_2)


def test_case_4():
    str_0 = "LUcDTT,"
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_box()
    maybe_0.map(var_0)


def test_case_5():
    complex_0 = -3271 + 1752.20969j
    bool_0 = True
    maybe_0 = module_0.Maybe(complex_0, bool_0)
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: complex_0, bool_0: bool_0}
    var_0 = maybe_0.bind(dict_0)
    var_1 = maybe_0.filter(complex_0)
    var_2 = var_1.to_lazy()
    var_3 = var_2.ap(complex_0)
    var_3.to_box()


def test_case_6():
    complex_0 = 1159 - 104.49017j
    bytes_0 = b"\xd2\x0c\xd3\x839\xac\xc9\xe6\xe9\x1b\x19\x9e\xd8i\x0c\x10\xba&i"
    bool_0 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    maybe_0.bind(complex_0)


def test_case_7():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    none_type_0 = None
    var_0 = maybe_0.ap(none_type_0)


def test_case_8():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_either()
    bool_2 = maybe_0.__eq__(bool_0)
    var_1 = maybe_0.to_try()
    maybe_0.ap(bool_2)


def test_case_9():
    float_0 = 1489.483
    int_0 = 1
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.filter(float_0)


def test_case_10():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    str_0 = "U"
    float_0 = 4550.467379
    none_type_1 = None
    maybe_1 = module_0.Maybe(float_0, none_type_1)
    maybe_1.filter(str_0)


def test_case_11():
    int_0 = 2992
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.ap(int_0)
    var_1 = var_0.bind(var_0)
    bool_1 = maybe_0.__eq__(bool_0)
    var_2 = var_0.to_validation()
    var_3 = var_1.filter(var_0)
    var_4 = var_0.to_validation()
    var_5 = maybe_0.get_or_else(var_4)
    bool_2 = var_5.__eq__(var_0)
    maybe_1 = module_0.Maybe(var_5, bool_2)
    var_6 = maybe_1.to_box()
    maybe_1.filter(none_type_0)


def test_case_12():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.get_or_else(none_type_0)
    var_0.ap(none_type_0)


def test_case_13():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    maybe_0 = module_0.Maybe(set_0, set_0)
    var_0 = maybe_0.ap(maybe_0)
    var_1 = maybe_0.to_either()


def test_case_14():
    float_0 = 422.878
    bool_0 = False
    maybe_0 = module_0.Maybe(float_0, bool_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.to_validation()


def test_case_15():
    int_0 = -2853
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.to_box()
    var_2 = maybe_0.ap(int_0)
    var_3 = maybe_0.to_box()
    var_3.bind(var_3)


def test_case_16():
    none_type_0 = None
    none_type_1 = None
    maybe_0 = module_0.Maybe(none_type_1, none_type_1)
    var_0 = maybe_0.to_box()
    var_0.get_or_else(none_type_0)


def test_case_17():
    bool_0 = False
    complex_0 = 1132.222562 + 559.9282j
    maybe_0 = module_0.Maybe(complex_0, complex_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_box()
    var_2 = var_1.to_lazy()
    var_3 = var_2.ap(bool_0)


def test_case_18():
    bytes_0 = b"\x9e\xf8x\xaaj\x9e\xcf"
    bool_0 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.to_lazy()
    maybe_0.bind(var_0)


def test_case_19():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = maybe_0.__eq__(bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.to_box()
    var_2 = maybe_0.to_try()
    bool_2 = maybe_0.__eq__(var_2)
    bool_3 = var_0.__eq__(var_1)


def test_case_20():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    maybe_0 = module_0.Maybe(list_0, bool_0)
    var_0 = maybe_0.to_validation()
    bool_1 = var_0.__eq__(bool_0)
    list_1 = [list_0, bool_0]
    module_1.Generic(*list_1)


def test_case_21():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_either()
    var_2 = var_1.to_try()
    var_2.to_try()


def test_case_22():
    none_type_0 = None
    none_type_1 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_1, none_type_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.to_box()
    var_2 = maybe_0.to_try()
    bool_2 = var_2.__eq__(bool_0)
    bool_3 = var_2.__eq__(maybe_0)


def test_case_23():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    maybe_0 = module_0.Maybe(bool_0, list_0)
    var_0 = maybe_0.filter(bool_0)
    bool_1 = maybe_0.__eq__(list_0)
    var_1 = maybe_0.to_lazy()
    bool_2 = var_0.__eq__(maybe_0)
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    var_2 = maybe_1.to_try()
    maybe_2 = module_0.Maybe(bool_0, bool_0)
    var_3 = maybe_2.to_try()
    var_4 = maybe_2.filter(var_2)
    var_5 = maybe_2.to_box()
    var_6 = var_5.to_validation()
    bool_3 = var_3.__eq__(bool_1)
    var_7 = maybe_0.to_try()
    var_7.ap(var_3)


def test_case_24():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bytes_0 = b"\xbc\xc5\x9a\xa0k\xdf^\xda\x8bD"
    maybe_1 = module_0.Maybe(bytes_0, bytes_0)
    bool_1 = maybe_0.__eq__(bool_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_1.ap(bool_0)
    var_2 = var_1.map(none_type_0)
    var_3 = var_2.to_try()
    bool_2 = var_1.__eq__(var_1)
