# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    bytes_0 = b"\x91$4"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    str_0 = "\n        Take function and applied this function with monad value and returns function result.\n\n        :params binder: function to apply on monad value\n        :type binder: Function(A) -> Try[B]\n        :returns: for successfully result of binder, othercase copy of self\n        :rtype: Try[B]\n        "
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_lazy()
    bool_1 = maybe_0.__eq__(maybe_0)
    var_1 = maybe_0.to_validation()
    var_2 = maybe_0.to_lazy()
    maybe_1 = module_0.Maybe(str_0, bool_0)


def test_case_3():
    bool_0 = True
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_1, bool_1)
    var_0 = maybe_0.to_validation()
    bool_2 = maybe_0.__eq__(bool_1)
    var_1 = maybe_0.get_or_else(bool_0)
    var_1.ap(var_1)


def test_case_4():
    bytes_0 = b"\xd0\xce\x17\\\x19,\x19\x11\x8c\x91B\xe7\xa3F\\7"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    var_1 = maybe_0.to_box()
    var_2 = maybe_0.map(maybe_0)
    var_3 = var_2.filter(var_1)
    var_4 = var_3.filter(var_0)


def test_case_5():
    none_type_0 = None
    bytes_0 = b"'S\xf2x\x90"
    list_0 = [bytes_0, bytes_0]
    bool_0 = False
    maybe_0 = module_0.Maybe(list_0, bool_0)
    maybe_0.map(none_type_0)


def test_case_6():
    bool_0 = True
    str_0 = "\\a^:daOFJu^]\x0b!"
    int_0 = -1459
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.ap(int_0)
    var_1 = maybe_0.bind(var_0)
    var_2 = maybe_0.get_or_else(str_0)
    var_2.bind(bool_0)


def test_case_7():
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_0, none_type_0)
    var_0 = maybe_0.to_box()
    str_0 = "\n        Take mapper function and return new instance of Left with the same value.\n\n        :returns: Copy of self\n        :rtype: Left[A]\n        "
    bool_1 = False
    maybe_1 = module_0.Maybe(str_0, bool_1)
    maybe_1.bind(var_0)


def test_case_8():
    none_type_0 = None
    tuple_0 = ()
    bool_0 = False
    maybe_0 = module_0.Maybe(tuple_0, bool_0)
    maybe_0.ap(none_type_0)


def test_case_9():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_validation()
    maybe_0.filter(var_0)


def test_case_10():
    float_0 = 2016.5
    complex_0 = 1127.14 + 1223.757j
    list_0 = [complex_0, complex_0, complex_0]
    none_type_0 = None
    maybe_0 = module_0.Maybe(list_0, none_type_0)
    var_0 = maybe_0.get_or_else(float_0)
    var_0.to_either()


def test_case_11():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_box()
    var_2 = var_1.to_lazy()
    maybe_1 = module_0.Maybe(var_2, var_2)
    var_3 = maybe_1.to_either()


def test_case_12():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_either()
    var_0.to_either()


def test_case_13():
    bytes_0 = b"\xf9Y\xe3\x1a\xfe\x9f\xc7\r\xcf"
    bytes_1 = b"|u#\x02i.\x00\xbbf@`\x9f\x9e\xcc)\x95"
    bool_0 = False
    maybe_0 = module_0.Maybe(bytes_1, bool_0)
    bool_1 = True
    maybe_1 = module_0.Maybe(maybe_0, bool_1)
    var_0 = maybe_1.to_try()
    var_1 = var_0.map(bytes_0)


def test_case_14():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_try()
    var_0.to_try()


def test_case_15():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.filter(var_0)
    var_0.ap(maybe_0)


def test_case_16():
    bool_0 = False
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_validation()
    none_type_0 = None
    bool_2 = maybe_0.__eq__(none_type_0)
    var_1 = maybe_0.filter(bool_1)
    var_2 = var_1.to_box()
    var_3 = var_1.ap(var_0)
    var_4 = var_3.to_box()
    var_5 = maybe_0.map(var_4)
    var_6 = var_1.bind(maybe_0)
    var_7 = var_6.ap(var_3)
    var_8 = var_6.get_or_else(var_3)
    var_9 = maybe_0.ap(var_6)
    maybe_1 = module_0.Maybe(var_1, bool_0)
    bool_3 = True
    maybe_2 = module_0.Maybe(bool_2, bool_3)
    var_10 = maybe_2.to_lazy()
    var_11 = var_6.to_lazy()
    var_12 = var_6.get_or_else(var_2)
    var_13 = maybe_0.to_either()
    var_14 = maybe_1.to_box()
    var_15 = var_10.to_try()
    maybe_1.filter(var_0)


def test_case_17():
    bool_0 = False
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.filter(bool_1)
    var_1 = var_0.bind(maybe_0)
    var_2 = var_1.ap(bool_0)
    var_3 = maybe_0.to_either()
    maybe_1 = module_0.Maybe(var_0, bool_0)
    bool_2 = maybe_1.__eq__(maybe_1)
    var_4 = var_1.get_or_else(var_3)
    var_5 = maybe_1.to_box()
    maybe_1.filter(var_0)


def test_case_18():
    str_0 = "\n        Transform Lazy into Either (Right) with constructor_fn result.\n\n        :returns: Right monad with constructor_fn result\n        :rtype: Right[A]\n        "
    none_type_0 = None
    maybe_0 = module_0.Maybe(str_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    maybe_1 = module_0.Maybe(str_0, str_0)
    bool_0 = var_0.__eq__(maybe_0)
    var_1 = maybe_1.get_or_else(str_0)
    var_2 = maybe_1.filter(none_type_0)
    bool_1 = maybe_1.__eq__(maybe_1)
    bool_2 = False
    var_3 = var_2.to_box()
    var_4 = maybe_0.get_or_else(var_1)
    maybe_2 = module_0.Maybe(str_0, bool_2)
    var_5 = var_0.to_box()
    var_6 = maybe_0.to_validation()
    var_7 = var_0.to_either()
    bool_3 = var_2.__eq__(maybe_1)
    var_8 = maybe_0.to_lazy()
    var_9 = maybe_2.to_box()
    var_10 = maybe_1.get_or_else(var_5)
    var_11 = maybe_1.to_lazy()
    var_9.filter(var_9)
