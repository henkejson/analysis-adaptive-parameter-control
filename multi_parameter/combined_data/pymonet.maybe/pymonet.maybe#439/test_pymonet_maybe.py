# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1


def test_case_0():
    float_0 = 2781.0
    maybe_0 = module_0.Maybe(float_0, float_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    list_0 = []
    bool_0 = True
    maybe_0 = module_0.Maybe(list_0, bool_0)
    bool_1 = maybe_0.__eq__(list_0)
    int_0 = 0
    bool_2 = False
    maybe_1 = module_0.Maybe(int_0, bool_2)


def test_case_3():
    int_0 = 1
    str_0 = "Sum"
    maybe_0 = module_0.Maybe(int_0, str_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.map(var_0)


def test_case_4():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = True
    maybe_1 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_1.bind(bool_0)
    str_0 = "cdtG;_f0'9"
    var_1 = maybe_1.filter(str_0)
    var_2 = var_1.filter(bool_0)
    var_3 = var_2.to_box()
    maybe_0.filter(bool_0)


def test_case_5():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    maybe_0 = module_0.Maybe(list_0, bool_0)
    maybe_0.bind(list_0)


def test_case_6():
    bytes_0 = b"\xb7\xa2\x8d\x17U\xf3"
    tuple_0 = (bytes_0,)
    maybe_0 = module_0.Maybe(tuple_0, bytes_0)
    var_0 = maybe_0.ap(tuple_0)
    var_1 = maybe_0.to_validation()
    var_2 = maybe_0.to_validation()
    var_3 = maybe_0.to_box()
    var_3.map(var_3)


def test_case_7():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.ap(none_type_0)


def test_case_8():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = True
    maybe_1 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_1.filter(bool_0)
    maybe_0.filter(bool_0)


def test_case_9():
    int_0 = 1149
    int_1 = 1107
    maybe_0 = module_0.Maybe(int_1, int_1)
    var_0 = maybe_0.get_or_else(int_0)
    var_0.to_box()


def test_case_10():
    bool_0 = False
    bytes_0 = b"H\xa6\n\x7f"
    bool_1 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_1)
    var_0 = maybe_0.get_or_else(bool_0)
    var_0.to_lazy()


def test_case_11():
    float_0 = 2781.0
    maybe_0 = module_0.Maybe(float_0, float_0)
    var_0 = maybe_0.to_either()


def test_case_12():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = True
    bool_2 = True
    maybe_1 = module_0.Maybe(bool_1, bool_2)
    var_0 = maybe_0.to_box()
    str_0 = "cdtG;_f0'9"
    var_1 = maybe_1.filter(str_0)
    var_2 = maybe_0.to_either()
    var_3 = var_1.filter(bool_0)
    var_4 = var_3.to_box()
    maybe_0.filter(bool_0)


def test_case_13():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = True
    maybe_1 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_box()
    var_1 = maybe_1.filter(bool_0)
    var_2 = var_1.to_box()
    maybe_0.filter(bool_0)


def test_case_14():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_box()


def test_case_15():
    str_0 = "nkRr"
    int_0 = -1052
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    maybe_0 = module_0.Maybe(dict_0, int_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_try()
    var_2 = var_1.get_or_else(str_0)
    var_2.to_try()


def test_case_16():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = True
    maybe_1 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_1.filter(bool_0)
    maybe_0.filter(bool_0)


def test_case_17():
    float_0 = -9.45
    int_0 = 2165
    set_0 = {int_0, int_0, int_0, int_0}
    maybe_0 = module_0.Maybe(set_0, set_0)
    var_0 = maybe_0.to_try()
    var_0.ap(float_0)


def test_case_18():
    none_type_0 = None
    none_type_1 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_try()
    var_0.filter(none_type_1)


def test_case_19():
    dict_0 = {}
    generic_0 = module_1.Generic(**dict_0)
    none_type_0 = None
    list_0 = [generic_0, none_type_0, generic_0]
    maybe_0 = module_0.Maybe(list_0, none_type_0)
    var_0 = maybe_0.to_validation()
    var_1 = var_0.to_either()
    var_0.ap(none_type_0)


def test_case_20():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.to_either()
    var_2 = var_1.to_validation()
    var_3 = maybe_0.to_try()
    var_4 = var_0.to_either()
    maybe_0.filter(var_1)


def test_case_21():
    str_0 = "]V"
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    bool_1 = True
    maybe_1 = module_0.Maybe(str_0, bool_1)
    var_0 = maybe_0.to_box()
    none_type_0 = None
    maybe_2 = module_0.Maybe(none_type_0, bool_0)
    var_1 = maybe_1.to_either()
    int_0 = -1884
    maybe_3 = module_0.Maybe(int_0, var_1)
    str_1 = "\tm]s[C<:EFnD!e["
    maybe_4 = module_0.Maybe(str_0, str_1)
    var_2 = maybe_4.to_try()
    var_3 = var_1.to_box()
    var_4 = var_0.ap(maybe_3)
    maybe_0.map(var_1)


def test_case_22():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_box()
    bool_1 = maybe_0.__eq__(maybe_0)
    var_0.filter(bool_0)


def test_case_23():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    bool_1 = True
    bool_2 = True
    maybe_2 = module_0.Maybe(bool_1, bool_2)
    str_0 = "cdt~V;_f09"
    var_0 = maybe_2.filter(str_0)
    var_1 = var_0.to_box()
    var_2 = var_0.to_box()
    bool_3 = maybe_2.__eq__(maybe_1)
    maybe_0.filter(bool_3)


def test_case_24():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = True
    maybe_1 = module_0.Maybe(bool_0, bool_1)
    none_type_0 = None
    bool_2 = True
    bool_3 = True
    maybe_2 = module_0.Maybe(bool_2, bool_3)
    var_0 = maybe_2.map(none_type_0)
    var_1 = var_0.to_try()
    var_2 = maybe_2.get_or_else(maybe_0)
    var_3 = maybe_2.bind(var_1)
    str_0 = "cdtG;_f0'9"
    var_4 = maybe_2.filter(str_0)
    var_5 = maybe_0.to_either()
    var_6 = var_4.to_box()
    bool_4 = var_2.__eq__(var_2)
    maybe_0.filter(var_5)
