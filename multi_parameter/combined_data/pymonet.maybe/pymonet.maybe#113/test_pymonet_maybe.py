# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    str_0 = ".{Syg\t]0"
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.filter(str_0)
    maybe_1 = module_0.Maybe(var_0, str_0)
    bytes_0 = b""
    bytes_1 = b"y\\\x9a\x91K7ev@"
    none_type_0 = None
    maybe_2 = module_0.Maybe(bytes_1, none_type_0)
    bool_1 = maybe_2.__eq__(maybe_2)
    maybe_2.bind(bytes_0)


def test_case_3():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.to_box()
    bool_0 = maybe_0.__eq__(var_0)
    var_2 = var_1.to_lazy()


def test_case_4():
    bool_0 = False
    bytes_0 = b"\x0c\x03:\x8b"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.bind(maybe_0)
    var_1 = maybe_0.filter(bool_0)
    var_2 = var_1.map(var_1)
    bool_1 = False
    maybe_1 = module_0.Maybe(bytes_0, bool_1)
    maybe_1.filter(var_2)


def test_case_5():
    dict_0 = {}
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.map(dict_0)


def test_case_6():
    none_type_0 = None
    bool_0 = False
    bytes_0 = b".\x0c:\xec\x8b\x19"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.filter(bool_0)
    var_1 = var_0.ap(none_type_0)
    bytes_1 = b"\xf5b\x9b\x88\xa2\r"
    bool_1 = False
    maybe_1 = module_0.Maybe(bytes_1, bool_1)
    maybe_1.filter(maybe_0)


def test_case_7():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_box()
    maybe_0.ap(none_type_0)


def test_case_8():
    complex_0 = 1201.24 + 32.38j
    bytes_0 = b"L35'\xd5|_\x9cn2\x13\xbd\xbc"
    bool_0 = True
    maybe_0 = module_0.Maybe(complex_0, bool_0)
    var_0 = maybe_0.to_box()
    maybe_1 = module_0.Maybe(complex_0, bytes_0)
    var_1 = maybe_1.to_lazy()
    var_2 = maybe_1.to_box()
    maybe_2 = module_0.Maybe(var_2, var_2)
    var_3 = maybe_1.filter(var_1)


def test_case_9():
    none_type_0 = None
    list_0 = []
    bool_0 = True
    maybe_0 = module_0.Maybe(list_0, bool_0)
    var_0 = maybe_0.get_or_else(none_type_0)


def test_case_10():
    bool_0 = True
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.get_or_else(bool_0)
    var_0.to_box()


def test_case_11():
    int_0 = 1163
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    var_1 = maybe_0.to_either()
    var_1.filter(var_0)


def test_case_12():
    bytes_0 = b"\xe0cx\xbf\xfb\x1b%\x13?\x875`\x05\xc6\xdc("
    tuple_0 = (bytes_0,)
    bool_0 = False
    maybe_0 = module_0.Maybe(tuple_0, bool_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.to_validation()
    maybe_1 = module_0.Maybe(var_0, maybe_0)


def test_case_13():
    none_type_0 = None
    list_0 = []
    bool_0 = True
    maybe_0 = module_0.Maybe(list_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.get_or_else(none_type_0)


def test_case_14():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    list_0 = [maybe_0, maybe_0, maybe_0]
    set_0 = set()
    float_0 = 1000.4068
    bool_1 = maybe_0.__eq__(float_0)
    bool_2 = True
    maybe_1 = module_0.Maybe(set_0, bool_2)
    var_0 = maybe_1.filter(list_0)
    var_1 = var_0.to_either()
    var_2 = var_1.to_try()
    str_0 = "5c+ZUI=o>/"
    none_type_0 = None
    maybe_2 = module_0.Maybe(str_0, none_type_0)
    var_3 = maybe_2.to_lazy()
    var_4 = var_2.bind(var_1)
    var_5 = maybe_2.to_either()
    maybe_2.filter(var_3)


def test_case_15():
    bool_0 = False
    bytes_0 = b"\xc1\xbe\xd9\xf2:\xe1\x9e\x19\xb2\xbe\x1f\xf9rVw\x13\x15\xea"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_try()
    var_1 = var_0.get_or_else(bool_0)
    var_1.to_either()


def test_case_16():
    set_0 = set()
    bool_0 = False
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_try()
    var_0.bind(set_0)


def test_case_17():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_validation()


def test_case_18():
    str_0 = "\n        :returns: Copy of self\n        :rtype: Left[A]\n        "
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.to_lazy()
    bool_0 = maybe_0.__eq__(maybe_0)
    var_1 = maybe_0.to_box()
    var_2 = var_0.to_either()
    var_3 = maybe_0.to_either()
    bool_1 = str_0.__eq__(var_2)
    var_4 = var_3.to_lazy()
    var_5 = maybe_0.bind(var_0)
    module_1.Generic(**maybe_0)


def test_case_19():
    dict_0 = {}
    bool_0 = False
    maybe_0 = module_0.Maybe(dict_0, bool_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_1.to_lazy()
    maybe_2 = module_0.Maybe(none_type_0, none_type_0)
    var_1 = maybe_1.to_lazy()
    var_2 = var_0.to_try()
    var_3 = maybe_1.to_box()
    var_4 = maybe_1.to_lazy()
    var_5 = var_3.to_validation()
    var_6 = var_5.to_lazy()
    var_7 = var_3.to_lazy()
    var_3.bind(var_5)


def test_case_20():
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = True
    maybe_1 = module_0.Maybe(none_type_0, bool_1)
    bool_2 = False
    maybe_2 = module_0.Maybe(bool_1, maybe_1)
    bool_3 = maybe_1.__eq__(maybe_0)
    maybe_3 = module_0.Maybe(none_type_0, bool_1)
    var_0 = maybe_2.ap(bool_2)
    var_1 = maybe_1.to_box()
    var_2 = maybe_0.to_either()
    maybe_4 = module_0.Maybe(maybe_2, bool_0)
    var_3 = var_2.to_try()
    var_4 = maybe_4.get_or_else(maybe_4)
    var_5 = var_2.to_try()


def test_case_21():
    set_0 = set()
    maybe_0 = module_0.Maybe(set_0, set_0)
    str_0 = '\tm42_Eduj*.t\x0c77#]b"'
    bool_0 = maybe_0.__eq__(set_0)
    maybe_1 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_1.ap(maybe_0)
    bool_1 = False
    maybe_2 = module_0.Maybe(var_0, bool_1)
    var_1 = var_0.to_either()
    bool_2 = maybe_1.__eq__(var_0)
    bool_3 = maybe_0.__eq__(maybe_1)
    var_2 = var_0.to_box()
    var_2.to_box()
