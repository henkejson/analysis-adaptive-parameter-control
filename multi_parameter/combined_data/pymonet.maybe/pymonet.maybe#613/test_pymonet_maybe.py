# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    str_0 = "\n        Transform Maybe to Box.\n\n        :returns: Box monad with previous value when Maybe is not empty, in other case Box with None\n        :rtype: Box[A | None]\n        "
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1 = module_0.Maybe(str_0, none_type_0)
    bool_0 = maybe_1.__eq__(maybe_1)
    var_0 = maybe_1.get_or_else(maybe_0)
    maybe_1.bind(str_0)


def test_case_3():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.to_try()
    var_2 = maybe_0.get_or_else(none_type_0)
    var_3 = maybe_0.to_lazy()
    bool_0 = maybe_0.__eq__(var_3)
    var_4 = var_3.to_either()
    var_5 = var_4.to_try()
    var_2.filter(var_1)


def test_case_4():
    list_0 = []
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_0.map(list_0)


def test_case_5():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.filter(bool_0)
    var_1 = var_0.bind(maybe_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1.filter(var_1)


def test_case_6():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    none_type_0 = None
    bool_1 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.ap(bool_0)
    bool_2 = True
    var_1 = maybe_0.to_lazy()
    maybe_1 = module_0.Maybe(none_type_0, bool_2)
    var_2 = maybe_1.to_box()
    var_3 = maybe_1.bind(var_2)
    var_4 = var_1.to_either()
    var_5 = maybe_1.to_try()
    var_6 = maybe_1.to_either()
    var_7 = maybe_1.to_try()
    var_2.ap(bool_2)


def test_case_7():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    maybe_0 = module_0.Maybe(dict_0, bool_0)
    none_type_0 = None
    maybe_0.ap(none_type_0)


def test_case_8():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.filter(bool_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1.filter(maybe_0)


def test_case_9():
    none_type_0 = None
    none_type_1 = None
    maybe_0 = module_0.Maybe(none_type_1, none_type_1)
    maybe_0.filter(none_type_0)


def test_case_10():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.get_or_else(var_0)
    var_2 = var_1.ap(bool_0)
    var_3 = maybe_0.to_validation()
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    var_3.to_validation()


def test_case_11():
    int_0 = 101
    none_type_0 = None
    maybe_0 = module_0.Maybe(int_0, none_type_0)
    var_0 = maybe_0.get_or_else(int_0)
    var_0.filter(int_0)


def test_case_12():
    str_0 = "\n    Perform right-to-left function composition.\n\n    :param value: argument of first applied function\n    :type value: Any\n    :param functions: list of functions to applied from right-to-left\n    :type functions: List[Function]\n    :returns: result of all functions\n    :rtype: Any\n    "
    bytes_0 = b"m\x95\xdc\x08\xe5\xc8\xaf*\xe6\x84D\xb0"
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.map(none_type_0)
    var_2 = var_0.to_try()
    maybe_1 = module_0.Maybe(bytes_0, bytes_0)
    none_type_1 = None
    var_3 = maybe_1.bind(none_type_1)
    maybe_2 = module_0.Maybe(str_0, none_type_1)
    var_4 = maybe_1.to_lazy()
    bool_1 = maybe_1.__eq__(maybe_1)
    var_5 = var_3.to_either()
    var_4.to_lazy()


def test_case_13():
    bytes_0 = b"]\xf4n"
    bool_0 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.to_either()
    maybe_0.filter(var_0)


def test_case_14():
    int_0 = -591
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.to_box()
    var_0.to_box()


def test_case_15():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_box()
    maybe_0.filter(var_0)


def test_case_16():
    float_0 = 622.81
    dict_0 = {float_0: float_0}
    float_1 = 294.91
    tuple_0 = (float_1,)
    maybe_0 = module_0.Maybe(tuple_0, tuple_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.map(dict_0)


def test_case_17():
    int_0 = 331
    bool_0 = False
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.to_lazy()


def test_case_18():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0}
    list_0 = [set_0, set_0, set_0, tuple_0]
    bool_0 = True
    maybe_0 = module_0.Maybe(list_0, bool_0)
    var_0 = maybe_0.to_try()
    var_0.to_either()


def test_case_19():
    list_0 = []
    generic_0 = module_1.Generic(*list_0)
    bytes_0 = b"\x1f\xee\xa2/*\xd35\xb0\x1b\xb0\x18\x04\x12Ne\xb8"
    bool_0 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.to_try()
    var_0.map(generic_0)


def test_case_20():
    tuple_0 = ()
    list_0 = [tuple_0]
    list_1 = [tuple_0, list_0, list_0, list_0]
    maybe_0 = module_0.Maybe(list_1, list_0)
    var_0 = maybe_0.to_validation()
    var_1 = var_0.to_try()


def test_case_21():
    str_0 = "Aosb\tQ"
    none_type_0 = None
    maybe_0 = module_0.Maybe(str_0, none_type_0)
    var_0 = maybe_0.to_validation()
    bool_0 = maybe_0.__eq__(maybe_0)
    var_1 = maybe_0.to_validation()
    maybe_0.bind(var_1)


def test_case_22():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.map(none_type_0)
    var_1 = var_0.to_try()
    var_1.ap(none_type_0)


def test_case_23():
    bool_0 = True
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_1, bool_0)
    none_type_0 = None
    bool_2 = maybe_0.__eq__(bool_1)
    var_0 = maybe_0.to_lazy()
    maybe_1 = module_0.Maybe(var_0, var_0)
    var_1 = var_0.to_box()
    var_1.bind(none_type_0)


def test_case_24():
    list_0 = []
    list_1 = [list_0, list_0, list_0]
    maybe_0 = module_0.Maybe(list_1, list_1)
    maybe_1 = module_0.Maybe(list_0, list_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    none_type_0 = None
    var_0 = maybe_0.map(maybe_0)
    var_1 = maybe_0.bind(list_0)
    bool_1 = var_0.__eq__(list_1)
    var_2 = maybe_0.to_lazy()
    var_3 = var_1.filter(none_type_0)
    var_4 = var_3.to_validation()
    var_5 = var_0.ap(none_type_0)
    var_6 = var_0.filter(maybe_0)
    bool_2 = False
    maybe_2 = module_0.Maybe(var_1, bool_2)
    bool_3 = False
    maybe_3 = module_0.Maybe(bool_3, bool_3)
    var_7 = var_3.filter(list_0)
    var_8 = maybe_3.to_try()
    var_9 = var_6.to_lazy()
    var_10 = maybe_3.to_try()
    var_11 = maybe_0.ap(var_5)
    var_12 = var_7.to_try()
    var_13 = maybe_1.to_either()
    var_14 = maybe_0.get_or_else(var_4)
    bool_4 = maybe_3.__eq__(var_11)
