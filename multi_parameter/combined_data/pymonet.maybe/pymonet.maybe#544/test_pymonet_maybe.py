# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import builtins as module_1
import typing as module_2


def test_case_0():
    float_0 = 866.886
    maybe_0 = module_0.Maybe(float_0, float_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_lazy()
    var_2 = maybe_0.to_lazy()


def test_case_3():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = maybe_0.__eq__(none_type_0)
    var_0 = maybe_0.to_validation()
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_1 = maybe_0.to_box()


def test_case_4():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.filter(none_type_0)
    bool_1 = maybe_0.to_lazy()
    var_1 = maybe_0.to_validation()
    var_2 = maybe_0.map(var_1)
    var_3 = var_1.to_either()


def test_case_5():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.to_lazy()
    var_0.ap(maybe_0)


def test_case_6():
    bytes_0 = b"\x14\xd1\xedX\xb0\x91\x9c\x19\xd4\xfd\x12/\x82\xa7m\x9a\xa4\xd8/"
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.map(bool_0)
    var_1 = maybe_0.to_box()
    var_2 = maybe_0.to_either()
    var_3 = maybe_0.filter(var_0)
    var_4 = maybe_0.map(var_3)
    var_5 = maybe_0.get_or_else(var_0)
    var_6 = var_3.to_either()
    var_7 = var_5.to_try()
    bool_1 = var_3.__eq__(maybe_0)
    var_8 = var_5.to_box()
    bool_2 = maybe_0.__eq__(var_4)
    bool_3 = False
    maybe_1 = module_0.Maybe(var_1, bool_3)
    int_0 = 1
    var_9 = var_3.get_or_else(int_0)
    bool_4 = True
    var_10 = var_5.to_either()
    var_11 = var_1.to_validation()
    bool_5 = maybe_0.__eq__(int_0)
    maybe_2 = var_0.bind(bool_4)
    maybe_1.filter(var_5)


def test_case_7():
    bool_0 = False
    list_0 = [bool_0]
    bool_1 = False
    maybe_0 = module_0.Maybe(list_0, bool_1)
    var_0 = maybe_0.to_validation()
    maybe_0.bind(var_0)


def test_case_8():
    str_0 = "\n        Returns failed Validation with None as value and errors list.\n\n        :params errors: list of errors to store\n        :type value: List[E]\n        :returns: Failed Validation\n        :rtype: Validation[None, List[E]]\n        "
    set_0 = {str_0, str_0}
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.ap(set_0)
    var_1 = var_0.to_lazy()
    var_2 = var_1.to_try()
    tuple_0 = (var_2, var_2, var_2)
    none_type_0 = None
    object_0 = module_1.object()
    maybe_1 = module_0.Maybe(object_0, object_0)
    var_3 = maybe_1.map(none_type_0)
    var_4 = var_3.get_or_else(tuple_0)
    var_4.to_either()


def test_case_9():
    none_type_0 = None
    list_0 = []
    maybe_0 = module_0.Maybe(none_type_0, list_0)
    var_0 = maybe_0.to_try()
    maybe_0.ap(none_type_0)


def test_case_10():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_1 = module_0.Maybe(bool_0, maybe_0)
    var_0 = maybe_1.filter(maybe_0)
    maybe_0.filter(maybe_0)


def test_case_11():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.filter(none_type_0)
    bool_1 = var_0.__eq__(none_type_0)
    var_1 = maybe_0.to_validation()
    maybe_1 = var_0.get_or_else(var_1)
    var_2 = maybe_0.to_validation()


def test_case_12():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.get_or_else(none_type_0)
    var_1 = maybe_0.to_either()
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    var_2 = maybe_1.to_lazy()
    var_0.to_try()


def test_case_13():
    bool_0 = False
    str_0 = ""
    set_0 = {str_0, str_0}
    bytes_0 = b"I\x18\x13\x83\xb0]]r\xce:R\xa7\xe7n\xa2\x8di\x89"
    float_0 = -794.9
    tuple_0 = (set_0, bytes_0, float_0)
    bool_1 = True
    maybe_0 = module_0.Maybe(tuple_0, bool_1)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_box()
    maybe_1 = module_0.Maybe(var_1, var_0)
    var_2 = maybe_1.get_or_else(bool_0)


def test_case_14():
    str_0 = "b']o"
    int_0 = -30
    list_0 = [str_0, int_0, int_0]
    tuple_0 = (str_0, int_0, list_0)
    bool_0 = False
    maybe_0 = module_0.Maybe(int_0, bool_0)
    maybe_1 = module_0.Maybe(tuple_0, bool_0)
    var_0 = maybe_1.to_box()
    var_1 = maybe_1.get_or_else(var_0)
    none_type_0 = None
    var_2 = maybe_1.to_box()
    var_0.get_or_else(none_type_0)


def test_case_15():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_1 = module_0.Maybe(bool_0, maybe_0)
    var_0 = maybe_1.to_lazy()
    var_1 = maybe_1.filter(var_0)
    var_2 = maybe_0.to_try()
    maybe_0.filter(var_2)


def test_case_16():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()


def test_case_17():
    str_0 = "\\=T\\>i\x0c"
    set_0 = {str_0, str_0, str_0}
    maybe_0 = module_0.Maybe(set_0, set_0)
    var_0 = maybe_0.to_try()
    var_0.to_lazy()


def test_case_18():
    bytes_0 = b"b\x13\x18|\x89g\x8e\xdeH5\xa8\x1ds\x19\xd9\x92\x11"
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.to_validation()


def test_case_19():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_1 = module_0.Maybe(bool_0, maybe_0)
    var_0 = maybe_1.to_validation()
    var_1 = maybe_1.filter(var_0)
    var_2 = maybe_0.to_validation()
    maybe_0.filter(var_2)


def test_case_20():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_validation()
    var_1.get_or_else(none_type_0)


def test_case_21():
    bytes_0 = b"\x14\xd1\xedX\xb0\x91\x9c\x19\xd4\xfd\x12/\x82\xa7m\x9a\xa4\xd8/"
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.to_box()
    var_2 = maybe_0.filter(var_0)
    var_3 = maybe_0.get_or_else(var_0)
    var_4 = var_3.to_try()
    bool_1 = var_2.__eq__(maybe_0)
    maybe_1 = module_0.Maybe(var_3, var_0)
    var_5 = var_2.to_box()
    var_5.get_or_else(maybe_0)


def test_case_22():
    dict_0 = {}
    generic_0 = module_2.Generic(**dict_0)
    str_0 = "_:Syb.lY!`O~4+E;SNBe"
    bool_0 = False
    maybe_0 = module_0.Maybe(dict_0, bool_0)
    maybe_1 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_1.map(generic_0)
    bool_1 = True
    maybe_2 = module_0.Maybe(bool_1, bool_1)
    maybe_3 = module_0.Maybe(maybe_2, maybe_2)
    var_1 = maybe_3.to_try()
    bool_2 = var_1.__eq__(var_0)
    bool_3 = True
    bool_4 = maybe_2.__eq__(maybe_3)
    bool_5 = True
    bool_6 = maybe_2.__eq__(var_0)
    dict_1 = {bool_3: bool_3, bool_5: bool_3, bool_3: bool_5, bool_5: bool_3}
    maybe_4 = module_0.Maybe(bool_3, dict_1)
    var_2 = maybe_4.to_either()
    var_3 = var_1.map(str_0)
    maybe_5 = module_0.Maybe(dict_1, dict_1)
    bool_7 = maybe_4.__eq__(bool_5)
