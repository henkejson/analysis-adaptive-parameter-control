# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1


def test_case_0():
    float_0 = 1316.1
    maybe_0 = module_0.Maybe(float_0, float_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    bytes_0 = b"\xfd\xa7\xd8&\x0fo\x01\x17\xdb\x8c"
    float_0 = 1125.088574
    bool_0 = True
    tuple_0 = (bool_0, bool_0, float_0, bool_0)
    maybe_0 = module_0.Maybe(float_0, tuple_0)
    var_0 = maybe_0.bind(bytes_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    var_1 = maybe_0.ap(maybe_0)
    bool_2 = maybe_0.__eq__(bool_0)
    bool_3 = maybe_0.__eq__(bool_0)
    bool_4 = maybe_0.__eq__(var_1)
    var_2 = var_1.filter(var_1)
    var_3 = var_1.bind(bool_1)


def test_case_3():
    bytes_0 = b"\xfd\xa7\xd8&\x0fo\x01\x17\xdb\x8c"
    float_0 = 1125.088574
    bool_0 = True
    tuple_0 = (bool_0, bool_0, float_0, bool_0)
    maybe_0 = module_0.Maybe(float_0, tuple_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.bind(var_0)
    bool_1 = var_0.__eq__(maybe_0)
    var_2 = maybe_0.ap(float_0)
    bool_2 = maybe_0.__eq__(bytes_0)
    bool_3 = maybe_0.__eq__(bytes_0)
    bool_4 = var_0.__eq__(bytes_0)
    var_3 = maybe_0.filter(bool_3)


def test_case_4():
    bytes_0 = b"\xfd\xa7\xd8&\x0fo\x01\x17\xdb\x8c"
    float_0 = 1125.088574
    bool_0 = True
    tuple_0 = (bool_0, bool_0, float_0, bool_0)
    maybe_0 = module_0.Maybe(float_0, tuple_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.bind(var_0)
    bool_1 = var_0.__eq__(maybe_0)
    var_2 = maybe_0.ap(float_0)
    bool_2 = maybe_0.__eq__(bytes_0)
    bool_3 = maybe_0.__eq__(bytes_0)
    list_0 = [bool_0, bool_0, var_1, bool_2]
    var_3 = var_2.map(list_0)
    bool_4 = var_3.__eq__(var_0)
    var_4 = var_1.filter(var_2)


def test_case_5():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_box()
    str_0 = "\x0c\\aH]_EIkO"
    bool_1 = True
    tuple_0 = (bool_1,)
    bool_2 = False
    maybe_1 = module_0.Maybe(tuple_0, bool_2)
    maybe_1.map(str_0)


def test_case_6():
    int_0 = 6040
    none_type_0 = None
    maybe_0 = module_0.Maybe(int_0, none_type_0)
    bool_0 = maybe_0.__eq__(int_0)
    maybe_0.bind(bool_0)


def test_case_7():
    float_0 = 1368.42808
    none_type_0 = None
    maybe_0 = module_0.Maybe(float_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.ap(var_0)
    maybe_1 = module_0.Maybe(float_0, var_1)
    var_2 = maybe_1.filter(var_0)
    var_3 = maybe_0.to_validation()
    var_4 = maybe_0.to_either()
    var_5 = maybe_0.get_or_else(float_0)
    maybe_0.filter(float_0)


def test_case_8():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = True
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_1.filter(bool_0)
    maybe_0.filter(maybe_0)


def test_case_9():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.get_or_else(bool_0)
    var_1 = maybe_0.to_validation()
    var_2 = maybe_0.to_box()
    var_1.filter(var_0)


def test_case_10():
    bytes_0 = b"'=\x1a\xa8\xb8T@T\x8c"
    set_0 = set()
    maybe_0 = module_0.Maybe(set_0, set_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_1.to_box()
    var_1 = maybe_1.get_or_else(bytes_0)
    generic_0 = module_1.Generic()
    bool_0 = False
    maybe_2 = module_0.Maybe(generic_0, bool_0)
    var_2 = maybe_1.to_validation()
    bool_1 = maybe_2.__eq__(var_1)
    var_3 = maybe_2.to_either()
    var_4 = var_2.to_box()


def test_case_11():
    bytes_0 = b"\xfd\xa7\xd8&\x0fo\x01\x17\xdb\x8c"
    float_0 = 1125.088574
    bool_0 = True
    tuple_0 = (bool_0, bool_0, float_0, bool_0)
    maybe_0 = module_0.Maybe(float_0, tuple_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.bind(var_0)
    bool_1 = var_0.__eq__(maybe_0)
    var_2 = maybe_0.ap(float_0)
    bool_2 = maybe_0.__eq__(bytes_0)
    bool_3 = maybe_0.__eq__(bytes_0)
    var_3 = maybe_0.bind(var_0)
    var_4 = var_3.to_either()
    var_5 = var_1.to_try()
    var_5.to_validation()


def test_case_12():
    str_0 = "cm\tUN\x0bBBVpW<;"
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_validation()
    var_2 = var_1.to_try()
    var_2.ap(str_0)


def test_case_13():
    str_0 = "U"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.filter(str_0)
    var_1 = var_0.ap(var_0)
    var_2 = var_0.bind(maybe_0)
    var_3 = maybe_0.to_box()
    var_4 = var_1.to_lazy()
    var_5 = var_0.to_try()
    var_6 = maybe_0.to_lazy()
    var_7 = var_5.get_or_else(str_0)
    maybe_1 = module_0.Maybe(str_0, str_0)
    var_8 = maybe_1.bind(maybe_1)
    var_9 = maybe_1.get_or_else(var_2)


def test_case_14():
    none_type_0 = None
    dict_0 = {}
    maybe_0 = module_0.Maybe(dict_0, dict_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.to_validation()
    var_2 = var_0.map(none_type_0)
    var_3 = var_2.to_try()
    var_3.to_either()


def test_case_15():
    none_type_0 = None
    bool_0 = True
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_try()
    var_1 = var_0.map(none_type_0)
    var_1.to_lazy()


def test_case_16():
    float_0 = 1368.42808
    none_type_0 = None
    maybe_0 = module_0.Maybe(float_0, none_type_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.to_lazy()
    maybe_0.ap(var_0)


def test_case_17():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = True
    none_type_1 = None
    maybe_1 = module_0.Maybe(none_type_1, bool_0)
    var_0 = maybe_1.filter(bool_0)
    var_1 = maybe_0.to_validation()
    maybe_0.filter(maybe_0)


def test_case_18():
    int_0 = -1588
    dict_0 = {int_0: int_0, int_0: int_0}
    list_0 = [dict_0]
    maybe_0 = module_0.Maybe(list_0, dict_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_try()
    var_1.to_try()


def test_case_19():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_validation()
    bool_1 = maybe_0.__eq__(maybe_0)
    var_0.to_validation()
