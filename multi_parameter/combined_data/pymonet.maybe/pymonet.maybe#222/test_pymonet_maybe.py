# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1


def test_case_0():
    int_0 = 1708
    maybe_0 = module_0.Maybe(int_0, int_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    none_type_1 = None
    maybe_1 = module_0.Maybe(none_type_0, none_type_1)
    var_0 = maybe_0.get_or_else(none_type_0)
    bool_0 = maybe_1.__eq__(maybe_1)


def test_case_3():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    maybe_1 = module_0.Maybe(none_type_0, maybe_0)
    var_0 = maybe_1.to_box()
    var_1 = maybe_1.to_validation()
    none_type_1 = None
    maybe_2 = module_0.Maybe(var_1, var_0)
    var_2 = var_0.to_try()
    bool_1 = maybe_0.__eq__(bool_0)
    var_3 = maybe_1.bind(none_type_1)


def test_case_4():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.map(none_type_0)
    none_type_1 = None
    maybe_1 = module_0.Maybe(none_type_0, none_type_1)
    var_1 = maybe_1.to_try()
    bool_1 = maybe_1.__eq__(maybe_1)
    var_1.to_validation()


def test_case_5():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    maybe_0.map(bool_0)


def test_case_6():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    none_type_1 = None
    maybe_1 = module_0.Maybe(none_type_0, none_type_1)
    var_0 = maybe_1.to_try()
    bool_0 = maybe_1.__eq__(maybe_1)
    maybe_1.bind(var_0)


def test_case_7():
    int_0 = 1708
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.ap(maybe_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_1 = maybe_0.to_box()
    var_2 = maybe_1.to_box()
    var_3 = maybe_0.filter(var_1)
    list_0 = [maybe_0, none_type_0, maybe_1, var_0]
    var_4 = maybe_1.to_lazy()
    var_5 = maybe_1.to_lazy()
    var_6 = maybe_1.get_or_else(var_5)
    var_7 = var_4.bind(var_4)
    var_8 = maybe_1.get_or_else(none_type_0)
    var_9 = maybe_1.to_either()
    bool_0 = maybe_1.__eq__(list_0)
    maybe_1.filter(none_type_0)


def test_case_8():
    int_0 = 1708
    maybe_0 = module_0.Maybe(int_0, int_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    list_0 = [maybe_1, none_type_0, maybe_1, none_type_0]
    var_0 = maybe_1.ap(maybe_0)
    var_1 = maybe_1.to_lazy()
    var_2 = maybe_1.get_or_else(var_1)
    var_3 = var_1.ap(var_1)
    var_4 = maybe_1.get_or_else(none_type_0)
    bool_0 = maybe_1.__eq__(maybe_1)
    var_5 = maybe_1.to_either()
    bool_1 = maybe_1.__eq__(list_0)
    bool_2 = maybe_1.__eq__(var_0)
    maybe_1.filter(none_type_0)


def test_case_9():
    str_0 = 'tG|*\nv"o}>c:L~'
    list_0 = [str_0]
    float_0 = 1017.2
    bool_0 = True
    maybe_0 = module_0.Maybe(float_0, bool_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.ap(list_0)
    var_2 = maybe_0.filter(var_0)
    var_3 = var_1.to_try()
    var_4 = var_1.to_box()
    var_5 = maybe_0.to_try()
    var_6 = maybe_0.to_box()
    var_4.bind(var_6)


def test_case_10():
    int_0 = 0
    maybe_0 = module_0.Maybe(int_0, int_0)
    maybe_0.filter(maybe_0)


def test_case_11():
    none_type_0 = None
    str_0 = '7tF]~S#06H"u\x0c2='
    bytes_0 = b"\x81\xa0I\x80`o\x8b\x9fZ,\xc2\xb3\xf3"
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.get_or_else(str_0)
    var_0.bind(none_type_0)


def test_case_12():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_either()
    none_type_1 = None
    maybe_1 = module_0.Maybe(none_type_0, none_type_1)
    var_1 = maybe_1.to_try()
    bool_0 = maybe_1.__eq__(maybe_1)
    maybe_1.filter(var_1)


def test_case_13():
    bytes_0 = b"`\xb6\xf2\x8c\xeeb\xcad\xd5\x91^W\xdax\x87:\x19\xfc\r\xca"
    str_0 = "@rmbocl~h,I##%:w9L"
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_box()
    var_0.ap(bytes_0)


def test_case_14():
    bytes_0 = b"w\xc8\xf0`\x1fr\xe3[8\nG\xb6\x0c\xb5F\x1b\xb7u\x0b"
    dict_0 = {}
    bool_0 = True
    maybe_0 = module_0.Maybe(dict_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_validation()
    var_1.get_or_else(bytes_0)


def test_case_15():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()


def test_case_16():
    complex_0 = -628.830064 - 3131j
    bool_0 = True
    maybe_0 = module_0.Maybe(complex_0, bool_0)
    maybe_1 = module_0.Maybe(maybe_0, bool_0)
    int_0 = 420
    bool_1 = True
    maybe_2 = module_0.Maybe(int_0, bool_1)
    var_0 = maybe_2.to_try()


def test_case_17():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_try()


def test_case_18():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_validation()


def test_case_19():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_try()
    var_2 = maybe_0.get_or_else(maybe_0)
    var_1.to_validation()


def test_case_20():
    int_0 = 1708
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.ap(maybe_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_1 = var_0.get_or_else(maybe_0)
    var_2 = maybe_0.to_box()
    var_3 = maybe_1.to_box()
    var_4 = maybe_0.filter(var_2)
    list_0 = [maybe_1, none_type_0, maybe_1, none_type_0]
    var_5 = maybe_1.to_lazy()
    var_6 = maybe_1.to_lazy()
    var_7 = maybe_1.get_or_else(var_6)
    var_8 = var_6.ap(var_6)
    var_9 = maybe_1.get_or_else(none_type_0)
    bool_0 = maybe_1.__eq__(maybe_1)
    var_10 = maybe_1.to_either()
    bool_1 = maybe_1.__eq__(list_0)
    var_11 = var_0.map(var_4)
    bool_2 = var_11.__eq__(var_8)
    generic_0 = module_1.Generic()
    bool_3 = var_11.__eq__(var_11)
    maybe_1.filter(var_10)
