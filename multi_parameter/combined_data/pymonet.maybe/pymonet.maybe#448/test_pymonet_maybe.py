# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    int_0 = 2242
    maybe_0 = module_0.Maybe(int_0, int_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_box()
    maybe_0.map(none_type_0)


def test_case_3():
    none_type_0 = None
    bytes_0 = b"[\x95\x1c\x9b\x16\xfbf/)\xa7\xcbJ"
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    bool_1 = maybe_0.__eq__(bytes_0)
    bool_2 = maybe_0.__eq__(none_type_0)
    maybe_1 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_try()


def test_case_4():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.bind(bool_0)
    var_1 = maybe_0.filter(var_0)
    var_2 = maybe_0.map(var_0)
    var_3 = maybe_0.bind(maybe_0)
    var_4 = maybe_0.to_lazy()
    maybe_1 = module_0.Maybe(bool_0, none_type_0)
    maybe_1.filter(maybe_0)


def test_case_5():
    bool_0 = False
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    maybe_0.map(bool_0)


def test_case_6():
    none_type_0 = None
    list_0 = []
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.map(var_0)
    bool_1 = maybe_0.__eq__(bool_0)
    var_2 = var_1.ap(var_0)
    var_3 = var_2.filter(list_0)
    var_4 = var_2.get_or_else(var_2)
    var_5 = var_4.bind(var_2)
    var_0.bind(var_2)


def test_case_7():
    bool_0 = False
    bytes_0 = b"\xfe\x95%\xa2\xc2\x14\xf3\x97\xce\xb5\x9d_)"
    list_0 = [bool_0, bytes_0, bool_0, bool_0]
    maybe_0 = module_0.Maybe(list_0, bool_0)
    maybe_0.ap(bytes_0)


def test_case_8():
    none_type_0 = None
    list_0 = []
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.filter(var_0)
    var_2 = var_0.to_box()
    bytes_0 = b"zy\t\x11\x99\xd0B\x0e\xda\xdb"
    var_3 = maybe_0.bind(var_0)
    var_4 = maybe_0.map(var_3)
    var_5 = var_4.to_lazy()
    var_6 = maybe_0.bind(bytes_0)
    bool_1 = maybe_0.__eq__(bool_0)
    bool_2 = var_6.__eq__(var_4)
    var_7 = maybe_0.to_either()
    var_8 = var_3.map(bool_0)
    var_9 = var_6.to_lazy()
    maybe_1 = module_0.Maybe(bool_0, none_type_0)
    maybe_2 = module_0.Maybe(list_0, bool_0)
    var_10 = maybe_1.get_or_else(none_type_0)
    var_11 = maybe_2.to_validation()
    maybe_1.filter(maybe_0)


def test_case_9():
    int_0 = -1105
    none_type_0 = None
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.bind(int_0)
    var_2 = var_1.to_box()
    var_2.get_or_else(none_type_0)


def test_case_10():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_either()
    bool_0 = var_0.__eq__(none_type_0)
    var_1 = maybe_0.to_box()
    var_2 = var_1.to_either()
    var_3 = var_0.to_try()
    var_3.to_box()


def test_case_11():
    str_0 = "Y1B\t%VYoof"
    set_0 = {str_0}
    maybe_0 = module_0.Maybe(set_0, str_0)
    int_0 = 1946
    bool_0 = False
    maybe_1 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_1.to_either()
    maybe_2 = module_0.Maybe(int_0, int_0)
    bool_1 = maybe_2.__eq__(maybe_1)
    var_1 = maybe_2.to_lazy()
    var_2 = var_1.to_validation()
    bool_2 = True
    maybe_3 = module_0.Maybe(bool_2, bool_2)
    var_3 = maybe_3.to_box()
    var_4 = maybe_0.to_try()


def test_case_12():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_lazy()


def test_case_13():
    dict_0 = {}
    bool_0 = True
    maybe_0 = module_0.Maybe(dict_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_box()
    var_1.to_box()


def test_case_14():
    str_0 = "\n        Transform Maybe to Either.\n\n        :returns: Right monad with previous value when Maybe is not empty, in other case Left with None\n        :rtype: Either[A | None]\n        "
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_lazy()


def test_case_15():
    tuple_0 = ()
    maybe_0 = module_0.Maybe(tuple_0, tuple_0)
    var_0 = maybe_0.to_try()
    var_0.to_box()


def test_case_16():
    bytes_0 = b"34E.\xdb\x17\xe1\x0f\x8aQ\xef"
    none_type_0 = None
    maybe_0 = module_0.Maybe(bytes_0, none_type_0)
    var_0 = maybe_0.to_box()
    int_0 = -2176
    maybe_1 = module_0.Maybe(int_0, int_0)
    var_1 = maybe_1.to_validation()
    var_2 = var_1.to_try()
    var_2.to_box()


def test_case_17():
    float_0 = 947.99753
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, float_0)
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_1.to_validation()
    maybe_2 = module_0.Maybe(float_0, bool_0)
    var_1 = maybe_2.to_lazy()
    var_0.to_validation()


def test_case_18():
    none_type_0 = None
    none_type_0.to_lazy()


def test_case_19():
    bool_0 = True
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    maybe_0.bind(bool_0)


def test_case_20():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    bytes_0 = b"zy\t\x11\x99\xd0B\x0e\xda\xdb"
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.map(var_0)
    var_2 = maybe_0.bind(bytes_0)
    bool_1 = maybe_0.__eq__(bool_0)
    bool_2 = False
    maybe_1 = module_0.Maybe(bool_2, var_0)
    var_3 = var_1.to_either()
    bool_3 = False
    maybe_2 = module_0.Maybe(bytes_0, bool_3)
    bool_4 = maybe_0.__eq__(maybe_0)
    var_4 = var_2.to_lazy()
    var_5 = var_1.to_validation()
    maybe_3 = module_0.Maybe(bool_3, var_2)
    var_6 = var_4.to_box()
    var_7 = maybe_3.to_try()


def test_case_21():
    dict_0 = {}
    bool_0 = False
    maybe_0 = module_0.Maybe(dict_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_box()
    var_1.to_box()
