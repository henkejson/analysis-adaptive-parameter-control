# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    bytes_0 = b"\x87\x0f\xe5H\xea\xd0\xae\x8bLo\x0b\x9dx\xa4^N\xc3m\x86"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)


def test_case_1():
    bytes_0 = b""
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)


def test_case_2():
    bytes_0 = b"9\xe1\xbeta\x96\x1c\xf2w\x83X\x92\xc3\xfe\xc1t*\xe6\x91"
    bool_0 = False
    list_0 = [bytes_0, bool_0, bytes_0, bool_0]
    dict_0 = {}
    maybe_0 = module_0.Maybe(list_0, bytes_0)
    var_0 = maybe_0.filter(bytes_0)
    var_1 = maybe_0.ap(bytes_0)
    var_2 = var_1.get_or_else(dict_0)
    bool_1 = var_1.__eq__(var_1)
    var_3 = maybe_0.to_either()


def test_case_3():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = maybe_0.__eq__(none_type_0)
    bool_0.get_or_else(none_type_0)


def test_case_4():
    bytes_0 = b"\xeal\xc8\xac"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    maybe_0 = module_0.Maybe(set_0, set_0)
    var_0 = maybe_0.map(set_0)
    var_1 = maybe_0.to_box()
    var_2 = maybe_0.map(var_1)
    var_3 = var_2.ap(set_0)
    bool_0 = var_3.__eq__(var_2)
    bool_1 = maybe_0.__eq__(maybe_0)
    var_4 = var_1.to_try()
    var_5 = maybe_0.to_validation()
    var_1.to_box()


def test_case_5():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_validation()
    var_2 = var_1.to_try()
    maybe_0.map(var_0)


def test_case_6():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_validation()
    var_1 = var_0.to_try()
    none_type_1 = None
    bytes_0 = b"\x924\xdd<\xb6\x9e\xcb\rNE"
    maybe_1 = module_0.Maybe(bytes_0, bytes_0)
    var_2 = maybe_1.bind(none_type_1)
    var_3 = maybe_1.to_box()


def test_case_7():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.bind(maybe_0)


def test_case_8():
    bytes_0 = b"9\xe1\xbeta\x96\x1c\xf2w\x83X\x92\xc3\xfe\xc1t*\xe6\x91"
    bool_0 = False
    list_0 = [bytes_0, bool_0, bytes_0, bool_0]
    bool_1 = False
    dict_0 = {}
    maybe_0 = module_0.Maybe(list_0, bytes_0)
    var_0 = maybe_0.filter(bytes_0)
    var_1 = maybe_0.ap(bytes_0)
    var_2 = var_1.get_or_else(dict_0)
    bool_2 = var_2.__eq__(bool_1)
    maybe_1 = module_0.Maybe(list_0, bool_1)


def test_case_9():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_0.ap(bool_0)


def test_case_10():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    dict_0 = {}
    maybe_0 = module_0.Maybe(dict_0, dict_0)
    maybe_0.filter(set_0)


def test_case_11():
    tuple_0 = ()
    complex_0 = 2666.1686 + 2064j
    bool_0 = False
    maybe_0 = module_0.Maybe(complex_0, bool_0)
    var_0 = maybe_0.get_or_else(tuple_0)


def test_case_12():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_either()


def test_case_13():
    str_0 = ")(W'D[\x0bt\r6x"
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, str_0)
    maybe_1 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_1.to_try()
    var_1 = maybe_1.to_validation()
    var_2 = maybe_0.to_box()


def test_case_14():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.to_either()
    var_2 = var_1.to_try()
    var_1.get_or_else(none_type_0)


def test_case_15():
    int_0 = 106
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.ap(int_0)
    var_1 = var_0.to_lazy()
    var_2 = var_1.ap(int_0)
    var_3 = var_2.ap(int_0)
    var_3.filter(int_0)


def test_case_16():
    bytes_0 = b"\xad]z\xa4\x01\xed\xc7o\xa0\"f\x9fV\xd1\xc5\xf8'\xfc"
    int_0 = -810
    none_type_0 = None
    maybe_0 = module_0.Maybe(int_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_0.get_or_else(bytes_0)


def test_case_17():
    bool_0 = True
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_1, bool_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.to_try()
    var_2 = var_1.get_or_else(bool_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(bool_0, none_type_0)
    var_3 = maybe_1.to_lazy()
    var_3.to_lazy()


def test_case_18():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_try()
    str_0 = "M"
    maybe_1 = module_0.Maybe(str_0, str_0)
    var_1 = maybe_1.to_validation()
    var_2 = var_1.to_box()
    var_2.bind(var_0)


def test_case_19():
    str_0 = "X1z}{m`cJ'qS1"
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_validation()
    var_1 = var_0.to_box()
    var_1.get_or_else(str_0)


def test_case_20():
    bytes_0 = b"\xeal\xc8\xac"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    maybe_0 = module_0.Maybe(set_0, set_0)
    var_0 = maybe_0.map(set_0)
    var_1 = maybe_0.to_box()
    var_2 = maybe_0.map(var_1)
    var_3 = var_2.ap(set_0)
    bool_0 = var_3.__eq__(var_2)
    bool_1 = maybe_0.__eq__(maybe_0)
    var_4 = maybe_0.to_lazy()
    maybe_1 = module_0.Maybe(var_4, var_1)
    var_5 = var_4.to_try()
    var_5.to_try()


def test_case_21():
    str_0 = "xwa.Q\rf;8v{JzA!Kp\t<s"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.to_box()
    bool_0 = False
    maybe_1 = module_0.Maybe(str_0, bool_0)
    var_1 = maybe_1.to_lazy()
    var_2 = var_1.to_box()
    var_2.map(var_0)


def test_case_22():
    bytes_0 = b"\xeal\xc8\xac"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    maybe_0 = module_0.Maybe(set_0, set_0)
    var_0 = maybe_0.map(set_0)
    var_1 = maybe_0.to_box()
    var_2 = maybe_0.map(var_1)
    bool_0 = maybe_0.__eq__(var_2)
    bool_1 = maybe_0.__eq__(maybe_0)
    var_3 = maybe_0.to_lazy()
    var_4 = var_2.to_validation()
    var_5 = maybe_0.to_box()
    var_5.ap(bytes_0)


def test_case_23():
    int_0 = 1
    float_0 = 1348.0005601322455
    bool_0 = False
    maybe_0 = module_0.Maybe(float_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_lazy()
    bool_2 = maybe_0.__eq__(var_0)
    var_1 = var_0.map(maybe_0)
    var_2 = var_0.map(bool_2)
    maybe_0.filter(int_0)
