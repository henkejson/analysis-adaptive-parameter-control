# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    int_0 = 1
    maybe_0 = module_0.Maybe(int_0, int_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    int_0 = -1637
    none_type_0 = None
    str_0 = "T0e!quI!S#0@&"
    maybe_0 = module_0.Maybe(str_0, int_0)
    var_0 = maybe_0.ap(none_type_0)
    var_1 = var_0.ap(none_type_0)
    var_2 = var_0.filter(int_0)
    var_3 = maybe_0.to_either()
    var_4 = var_3.to_try()
    var_5 = var_1.map(var_4)


def test_case_3():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_0.ap(maybe_0)


def test_case_4():
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.bind(bool_0)
    var_1 = var_0.bind(bool_0)
    var_2 = var_1.to_try()
    maybe_1 = module_0.Maybe(var_2, var_1)
    var_3 = var_2.get_or_else(none_type_0)
    maybe_2 = module_0.Maybe(bool_0, bool_0)
    var_4 = maybe_2.filter(var_3)
    var_5 = maybe_1.to_validation()
    var_6 = var_0.to_lazy()
    var_7 = maybe_2.to_validation()
    var_8 = maybe_2.to_either()
    var_9 = var_4.get_or_else(var_3)
    var_10 = var_0.to_lazy()


def test_case_5():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    maybe_0.bind(maybe_0)


def test_case_6():
    int_0 = -1637
    str_0 = "0e!quI!S#@&"
    maybe_0 = module_0.Maybe(str_0, int_0)
    var_0 = maybe_0.ap(maybe_0)
    bool_0 = False
    maybe_1 = module_0.Maybe(int_0, bool_0)
    maybe_1.filter(int_0)


def test_case_7():
    int_0 = -844
    bool_0 = True
    set_0 = set()
    tuple_0 = (int_0, int_0, bool_0, set_0)
    int_1 = -3582
    tuple_1 = (int_1,)
    maybe_0 = module_0.Maybe(tuple_1, int_1)
    var_0 = maybe_0.filter(tuple_0)


def test_case_8():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_try()
    maybe_0.filter(var_0)


def test_case_9():
    float_0 = 2993.0
    maybe_0 = module_0.Maybe(float_0, float_0)
    var_0 = maybe_0.to_lazy()
    float_1 = -1472.3
    bool_0 = False
    maybe_1 = module_0.Maybe(float_1, bool_0)
    var_1 = maybe_1.to_lazy()
    var_2 = var_0.to_validation()
    var_3 = maybe_0.get_or_else(var_1)


def test_case_10():
    bool_0 = True
    dict_0 = {}
    none_type_0 = None
    maybe_0 = module_0.Maybe(dict_0, none_type_0)
    var_0 = maybe_0.get_or_else(bool_0)
    var_0.to_either()


def test_case_11():
    complex_0 = -2115.39737 - 1016.78j
    str_0 = "ehkcJSNgJ8"
    list_0 = [str_0]
    maybe_0 = module_0.Maybe(list_0, str_0)
    var_0 = maybe_0.to_either()
    var_0.get_or_else(complex_0)


def test_case_12():
    str_0 = "\n        Returns new ImmutableList with elements from previous one\n        and argument value on the end of list\n\n        :param new_element: element to append on the end of list\n        :type fn: A\n        :returns: ImmutableList[A]\n        "
    str_1 = "\n    In mathematics and computer science, currying is the technique of translating the evaluation of a function.\n    It that takes multiple arguments (or a tuple of arguments) into evaluating a sequence of functions.\n    each with a single argument.\n    "
    bool_0 = False
    maybe_0 = module_0.Maybe(str_1, bool_0)
    var_0 = maybe_0.to_either()
    var_0.bind(str_0)


def test_case_13():
    bytes_0 = b"xh\xe1\xfc\xb3\xb3\xdd*\xe4[\x00,\x8e\xa2\xaf\xe2"
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bytes_0)
    var_0 = maybe_0.get_or_else(bytes_0)
    var_1 = maybe_0.filter(var_0)
    var_2 = maybe_0.ap(bool_0)
    var_3 = maybe_0.to_try()
    bool_1 = var_2.__eq__(bool_0)
    var_4 = var_2.to_box()
    bool_2 = var_2.__eq__(var_1)
    var_3.to_try()


def test_case_14():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.to_either()
    var_2 = maybe_0.to_box()
    var_3 = maybe_0.to_box()
    maybe_0.ap(none_type_0)


def test_case_15():
    int_0 = -1637
    none_type_0 = None
    str_0 = "T0e!quI!S#0@&"
    maybe_0 = module_0.Maybe(str_0, int_0)
    var_0 = maybe_0.ap(none_type_0)
    var_1 = var_0.to_try()
    var_2 = var_0.ap(none_type_0)
    var_3 = var_0.filter(int_0)
    var_4 = maybe_0.to_either()
    var_5 = var_4.to_try()
    var_6 = var_0.to_validation()
    var_7 = maybe_0.filter(var_6)


def test_case_16():
    bytes_0 = b"xh\xe1\xfc\xb3\xb3\xdd*\xe4[\x00,\x8e\xa2\xaf\xe2"
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bytes_0)
    var_0 = maybe_0.get_or_else(bytes_0)
    var_1 = maybe_0.filter(var_0)
    var_2 = maybe_0.ap(bool_0)
    maybe_1 = module_0.Maybe(maybe_0, bytes_0)
    var_3 = var_2.filter(bool_0)
    var_4 = var_2.to_validation()


def test_case_17():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    bool_1 = maybe_0.__eq__(var_0)
    bool_2 = False
    maybe_1 = module_0.Maybe(maybe_0, bool_2)
    var_1 = maybe_0.filter(var_0)
    var_2 = maybe_1.to_validation()
    maybe_1.filter(bool_0)


def test_case_18():
    none_type_0 = None
    dict_0 = {}
    bool_0 = False
    tuple_0 = (dict_0, bool_0)
    bool_1 = False
    none_type_1 = None
    maybe_0 = module_0.Maybe(bool_1, none_type_1)
    maybe_1 = module_0.Maybe(maybe_0, none_type_1)
    var_0 = maybe_1.to_lazy()
    var_1 = var_0.to_validation()
    var_2 = var_1.to_lazy()
    var_3 = var_2.ap(tuple_0)
    var_3.filter(none_type_0)


def test_case_19():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_lazy()
    maybe_1 = module_0.Maybe(bool_0, var_0)
    maybe_2 = module_0.Maybe(bool_0, bool_0)
    bool_1 = maybe_1.__eq__(maybe_2)
    var_1 = maybe_1.map(bool_0)
    var_2 = maybe_0.get_or_else(maybe_0)
    bool_2 = False
    maybe_3 = module_0.Maybe(maybe_2, bool_2)
    var_3 = maybe_2.filter(var_2)
    var_4 = maybe_3.to_validation()
    var_5 = var_2.to_lazy()
    var_6 = maybe_3.to_validation()
    maybe_3.filter(bool_0)


def test_case_20():
    bytes_0 = b"\x1b\x1d\xce\xeeO|LGz"
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    none_type_0 = None
    var_0 = maybe_0.bind(none_type_0)
    bool_1 = maybe_0.__eq__(none_type_0)
    maybe_1 = module_0.Maybe(bool_0, bytes_0)
    bool_2 = maybe_0.__eq__(maybe_1)
    var_1 = maybe_0.to_lazy()
    var_2 = maybe_0.to_try()
    maybe_2 = module_0.Maybe(none_type_0, none_type_0)
    bool_3 = maybe_2.__eq__(maybe_2)
