# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1


def test_case_0():
    float_0 = -2293.97
    maybe_0 = module_0.Maybe(float_0, float_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    generic_0 = module_1.Generic()
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    bytes_0 = b"B\xb3j\x10H\xce8y\x89B\xb3\x00s\x86\xe0f\xc6'\xca"
    maybe_0 = module_0.Maybe(dict_0, bytes_0)
    bool_1 = maybe_0.__eq__(generic_0)
    dict_1 = {}
    var_0 = maybe_0.to_either()
    none_type_0 = None
    bool_2 = False
    maybe_1 = module_0.Maybe(none_type_0, bool_2)
    var_1 = maybe_1.to_validation()
    var_1.bind(dict_1)


def test_case_3():
    complex_0 = -1078.538866 - 2630.89834j
    float_0 = 4676.2
    maybe_0 = module_0.Maybe(float_0, float_0)
    var_0 = maybe_0.map(complex_0)


def test_case_4():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.map(none_type_0)


def test_case_5():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.filter(bool_0)
    bool_1 = False
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_1 = var_0.to_box()
    var_2 = maybe_0.bind(var_1)
    var_3 = var_2.filter(var_1)
    maybe_2 = module_0.Maybe(maybe_0, var_1)
    var_4 = var_1.to_validation()
    var_5 = maybe_2.map(var_1)
    bool_2 = var_3.__eq__(bool_1)
    maybe_1.filter(bool_2)


def test_case_6():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_either()
    maybe_0.bind(var_0)


def test_case_7():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.ap(maybe_0)
    var_2 = maybe_0.to_validation()
    var_3 = var_2.to_box()


def test_case_8():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.ap(none_type_0)


def test_case_9():
    float_0 = -2293.97
    maybe_0 = module_0.Maybe(float_0, float_0)
    var_0 = maybe_0.filter(float_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(float_0, none_type_0)
    maybe_1.filter(maybe_0)


def test_case_10():
    generic_0 = module_1.Generic()
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    bytes_0 = b"B\xb3j\x10H\xce8y\x89B\xb3\x00s\x86\xe0f\xc6'\xca"
    maybe_0 = module_0.Maybe(dict_0, bytes_0)
    bool_1 = maybe_0.__eq__(generic_0)
    dict_1 = {}
    var_0 = maybe_0.to_either()
    maybe_1 = module_0.Maybe(bytes_0, maybe_0)
    var_1 = maybe_1.to_box()
    var_2 = maybe_1.ap(dict_0)
    var_3 = var_2.get_or_else(dict_1)
    var_4 = var_1.to_try()
    var_5 = var_2.to_box()
    var_6 = maybe_1.to_lazy()
    var_7 = var_2.to_box()
    var_8 = var_7.ap(maybe_0)
    var_4.ap(bytes_0)


def test_case_11():
    float_0 = -287.06
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(float_0, bool_0)
    var_0 = maybe_0.ap(float_0)
    var_1 = var_0.to_either()
    var_2 = var_0.get_or_else(none_type_0)
    none_type_1 = None
    maybe_1 = module_0.Maybe(float_0, none_type_1)
    var_3 = var_0.filter(bool_0)
    var_4 = maybe_1.to_lazy()
    var_5 = maybe_1.get_or_else(maybe_1)
    var_6 = var_4.bind(float_0)
    var_7 = var_6.ap(var_1)
    var_7.to_validation()


def test_case_12():
    int_0 = -1682
    bool_0 = False
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_box()
    str_0 = "^JdWCJ"
    maybe_1 = module_0.Maybe(str_0, str_0)
    var_2 = maybe_1.to_either()
    var_3 = var_2.to_lazy()
    bool_1 = False
    maybe_2 = module_0.Maybe(var_3, bool_1)
    var_4 = maybe_2.to_validation()
    var_4.ap(var_1)


def test_case_13():
    float_0 = -2293.97
    maybe_0 = module_0.Maybe(float_0, float_0)
    var_0 = maybe_0.filter(float_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(float_0, none_type_0)
    var_1 = maybe_1.to_either()
    maybe_1.filter(var_1)


def test_case_14():
    float_0 = -2293.97
    maybe_0 = module_0.Maybe(float_0, float_0)
    var_0 = maybe_0.to_box()


def test_case_15():
    float_0 = -2293.97
    maybe_0 = module_0.Maybe(float_0, float_0)
    var_0 = maybe_0.filter(float_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(float_0, none_type_0)
    var_1 = maybe_1.to_box()
    maybe_1.filter(var_1)


def test_case_16():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_validation()
    var_1.get_or_else(none_type_0)


def test_case_17():
    int_0 = 1
    none_type_0 = None
    list_0 = [int_0, int_0]
    maybe_0 = module_0.Maybe(list_0, int_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.ap(none_type_0)
    var_2 = var_1.to_try()
    maybe_1 = module_0.Maybe(int_0, int_0)
    var_3 = maybe_1.to_try()
    var_4 = var_3.get_or_else(int_0)


def test_case_18():
    bytes_0 = b"\x92\xc3\x94D\x91\x8d\x9b\x85R"
    bool_0 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.to_try()
    var_0.map(bool_0)


def test_case_19():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_validation()


def test_case_20():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_validation()


def test_case_21():
    bytes_0 = b"\xba'C\xa2\xfd\x1cs\xd3\x89\xda"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_validation()
    var_0.get_or_else(bytes_0)


def test_case_22():
    bool_0 = True
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    bool_2 = maybe_0.__eq__(maybe_0)


def test_case_23():
    none_type_0 = None
    float_0 = -58.156
    maybe_0 = module_0.Maybe(float_0, float_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_box()
    bool_0 = var_1.__eq__(maybe_0)
    var_2 = maybe_0.bind(float_0)
    var_3 = maybe_0.to_either()
    var_4 = var_0.ap(var_2)
    var_5 = maybe_0.to_either()
    bool_1 = maybe_0.__eq__(var_2)
    bool_2 = False
    bool_3 = var_0.__eq__(none_type_0)
    var_6 = var_5.to_lazy()
    maybe_1 = module_0.Maybe(var_5, bool_2)
    var_7 = maybe_0.to_box()
    bool_3.get_or_else(var_7)


def test_case_24():
    float_0 = -2293.97
    bool_0 = False
    maybe_0 = module_0.Maybe(float_0, bool_0)
    maybe_1 = module_0.Maybe(float_0, bool_0)
    maybe_2 = module_0.Maybe(bool_0, bool_0)
    str_0 = "\n        :param semigroup: other semigroup to concat\n        :type semigroup: Min[B]\n        :returns: new Min with smallest value\n        :rtype: Min[A | B]\n        "
    bool_1 = maybe_2.__eq__(maybe_2)
    maybe_2.ap(str_0)
