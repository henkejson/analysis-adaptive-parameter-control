# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1
import builtins as module_2


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    generic_0 = module_1.Generic()
    maybe_0 = module_0.Maybe(generic_0, generic_0)
    var_0 = maybe_0.map(maybe_0)
    var_1 = maybe_0.ap(maybe_0)
    bool_0 = var_0.__eq__(var_1)
    var_2 = maybe_0.to_either()
    bool_1 = var_0.__eq__(generic_0)
    var_3 = maybe_0.to_either()
    bool_2 = var_1.__eq__(var_3)
    var_4 = var_2.to_lazy()
    var_5 = maybe_0.to_validation()
    var_6 = var_0.get_or_else(maybe_0)
    var_7 = var_6.filter(maybe_0)
    bytes_0 = b"\x19\xb5\xb8\x9bzE\x84\x80"
    bool_3 = var_7.__eq__(bytes_0)
    var_8 = maybe_0.to_lazy()
    bool_4 = maybe_0.__eq__(var_4)
    maybe_1 = module_0.Maybe(bool_1, generic_0)
    var_9 = maybe_1.to_box()
    var_10 = var_1.to_validation()
    var_5.ap(var_6)


def test_case_3():
    int_0 = 856
    str_0 = "Lazy[T, U]"
    tuple_0 = (int_0, int_0, str_0)
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: tuple_0}
    bool_0 = True
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    bool_2 = maybe_0.__eq__(dict_0)


def test_case_4():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.map(none_type_0)
    var_1 = var_0.filter(none_type_0)
    var_2 = var_1.bind(none_type_0)
    bool_1 = True
    maybe_1 = module_0.Maybe(none_type_0, bool_1)
    bool_2 = maybe_1.__eq__(bool_1)
    var_3 = maybe_1.to_box()
    var_3.to_box()


def test_case_5():
    tuple_0 = ()
    dict_0 = {}
    maybe_0 = module_0.Maybe(tuple_0, dict_0)
    maybe_0.ap(maybe_0)


def test_case_6():
    none_type_0 = None
    bool_0 = False
    bool_1 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_1)
    var_0 = maybe_0.bind(bool_0)
    bool_2 = var_0.__eq__(bool_0)
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_1 = maybe_1.to_validation()
    maybe_1.bind(var_1)


def test_case_7():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.ap(none_type_0)


def test_case_8():
    complex_0 = -965.777032 + 1953.1j
    bool_0 = False
    set_0 = {bool_0, bool_0}
    maybe_0 = module_0.Maybe(bool_0, set_0)
    var_0 = maybe_0.filter(complex_0)


def test_case_9():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_0.filter(none_type_0)


def test_case_10():
    generic_0 = module_1.Generic()
    str_0 = "4X{qTe"
    set_0 = set()
    bool_0 = True
    maybe_0 = module_0.Maybe(set_0, bool_0)
    var_0 = maybe_0.get_or_else(str_0)
    var_0.to_validation()


def test_case_11():
    none_type_0 = None
    bool_0 = True
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_1, bool_1)
    var_0 = maybe_0.get_or_else(bool_0)
    var_0.filter(none_type_0)


def test_case_12():
    list_0 = []
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = maybe_0.__eq__(list_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.filter(var_0)
    var_2 = maybe_0.to_lazy()
    bool_2 = var_0.__eq__(var_2)
    maybe_1 = module_0.Maybe(var_2, none_type_0)
    maybe_1.filter(bool_1)


def test_case_13():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.get_or_else(none_type_0)
    var_2 = maybe_0.to_either()
    var_3 = maybe_0.to_try()
    var_3.to_lazy()


def test_case_14():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.to_box()


def test_case_15():
    none_type_0 = None
    bytes_0 = b"\x05\xf0\x9e"
    none_type_1 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_1, bool_0)
    var_0 = maybe_0.filter(bytes_0)
    var_1 = var_0.filter(none_type_0)
    var_2 = var_1.to_lazy()


def test_case_16():
    generic_0 = module_1.Generic()
    list_0 = []
    tuple_0 = (generic_0, list_0)
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.bind(tuple_0)
    var_1.to_validation()


def test_case_17():
    list_0 = []
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = maybe_0.__eq__(list_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.filter(var_0)
    var_2 = maybe_0.to_lazy()
    bool_2 = var_0.__eq__(var_2)
    maybe_1 = module_0.Maybe(var_2, none_type_0)
    maybe_1.filter(bool_1)


def test_case_18():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, none_type_0)
    var_0 = maybe_0.to_try()
    var_0.to_try()


def test_case_19():
    bytes_0 = b"\xf3\xa6\xcaXg\xed\x8b\xc527\xb0\x10\x8c\xc9\x96z"
    list_0 = [bytes_0, bytes_0]
    maybe_0 = module_0.Maybe(list_0, list_0)
    var_0 = maybe_0.to_validation()
    var_1 = var_0.to_try()
    str_0 = "R"
    maybe_1 = module_0.Maybe(str_0, str_0)


def test_case_20():
    none_type_0 = None
    none_type_1 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_1)
    var_0 = maybe_0.to_lazy()
    bool_0 = True
    maybe_1 = module_0.Maybe(var_0, bool_0)
    var_1 = maybe_0.to_try()
    bool_1 = maybe_0.__eq__(none_type_0)
    var_2 = maybe_0.to_validation()
    var_3 = var_2.to_either()
    var_4 = maybe_1.to_try()
    var_5 = maybe_1.get_or_else(maybe_1)
    var_4.to_box()


def test_case_21():
    list_0 = []
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = maybe_0.__eq__(list_0)
    bool_2 = True
    maybe_1 = module_0.Maybe(bool_0, bool_2)
    none_type_1 = None
    maybe_2 = module_0.Maybe(none_type_1, bool_2)
    var_0 = maybe_1.to_validation()
    var_1 = maybe_2.to_lazy()
    bool_3 = var_1.to_validation()
    none_type_2 = None
    maybe_3 = module_0.Maybe(bool_2, none_type_2)
    var_2 = maybe_1.map(none_type_0)
    var_3 = maybe_1.ap(maybe_3)
    var_4 = var_2.get_or_else(none_type_2)
    var_5 = var_0.to_lazy()
    var_6 = var_2.to_try()
    var_7 = var_3.filter(var_6)
    bool_4 = var_7.__eq__(var_3)
    var_8 = maybe_2.to_either()
    maybe_3.filter(none_type_1)


def test_case_22():
    bool_0 = False
    generic_0 = module_1.Generic()
    bool_1 = True
    maybe_0 = module_0.Maybe(generic_0, bool_1)
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_1.to_try()
    bool_2 = maybe_1.__eq__(maybe_1)
    var_1 = maybe_1.to_either()
    var_2 = var_1.to_try()
    var_3 = var_2.get_or_else(maybe_1)
    var_4 = maybe_0.map(var_0)
    var_5 = var_1.to_validation()
    var_6 = var_5.to_try()
    var_5.ap(var_0)


def test_case_23():
    generic_0 = module_1.Generic()
    maybe_0 = module_0.Maybe(generic_0, generic_0)
    var_0 = maybe_0.ap(maybe_0)
    bool_0 = maybe_0.__eq__(var_0)
    var_1 = maybe_0.to_either()
    bool_1 = var_1.__eq__(generic_0)
    var_2 = maybe_0.bind(generic_0)
    var_3 = maybe_0.to_either()
    bool_2 = var_0.__eq__(var_3)
    var_4 = var_0.filter(var_0)
    var_5 = var_2.to_lazy()
    var_6 = maybe_0.to_box()
    var_7 = var_2.to_validation()
    module_2.object(**var_0)
