# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import builtins as module_1


def test_case_0():
    int_0 = 1381
    maybe_0 = module_0.Maybe(int_0, int_0)


def test_case_1():
    dict_0 = {}
    maybe_0 = module_0.Maybe(dict_0, dict_0)


def test_case_2():
    str_0 = "\n        Create empty maybe.\n\n        :returns: Maybe[None]\n        "
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.filter(var_0)
    var_2 = var_0.to_try()
    var_3 = var_2.map(str_0)
    bool_0 = maybe_0.__eq__(str_0)
    bool_1 = var_1.__eq__(var_1)


def test_case_3():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.map(none_type_0)
    var_1 = var_0.to_either()
    var_2 = var_0.map(var_1)
    var_3 = var_2.map(var_1)
    var_4 = var_1.to_try()
    var_4.ap(none_type_0)


def test_case_4():
    set_0 = set()
    list_0 = [set_0]
    none_type_0 = None
    maybe_0 = module_0.Maybe(list_0, none_type_0)
    var_0 = maybe_0.to_try()
    maybe_1 = module_0.Maybe(list_0, list_0)
    bool_0 = maybe_1.__eq__(maybe_1)
    maybe_0.map(var_0)


def test_case_5():
    bool_0 = True
    bytes_0 = b"T\xab\xaf\x0b0\xe0\x8a\xfd\xac"
    int_0 = 0
    set_0 = {int_0, int_0, int_0}
    dict_0 = {bytes_0: bytes_0, int_0: int_0, bytes_0: set_0, bytes_0: set_0}
    maybe_0 = module_0.Maybe(dict_0, set_0)
    var_0 = maybe_0.bind(bool_0)
    var_1 = var_0.to_try()
    var_1.to_box()


def test_case_6():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    maybe_0.bind(none_type_0)


def test_case_7():
    str_0 = "\n        Create empty maybe.\n\n        :returns: Maybe[None]\n        "
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.filter(var_0)
    var_2 = var_1.to_try()
    var_3 = var_0.to_try()
    var_4 = var_1.to_validation()
    var_5 = var_3.map(var_4)
    bool_0 = maybe_0.__eq__(str_0)
    bool_1 = var_1.__eq__(var_1)
    var_6 = maybe_0.ap(var_3)


def test_case_8():
    bool_0 = False
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.to_either()
    var_2 = maybe_0.to_lazy()
    var_3 = maybe_0.to_either()
    maybe_0.ap(none_type_0)


def test_case_9():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_validation()
    maybe_0.filter(var_0)


def test_case_10():
    bool_0 = False
    bytes_0 = b"b\x0b\\\x92\xf1\x1c8@<cQ\xc0\xcb\xe6\x0fS\xf0\xa0\xba\x8e"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.get_or_else(bool_0)
    var_0.to_try()


def test_case_11():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    var_0.to_box()


def test_case_12():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    maybe_0 = module_0.Maybe(set_0, bool_0)
    var_0 = maybe_0.to_either()
    var_0.filter(bool_0)


def test_case_13():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.filter(var_0)
    var_2 = maybe_0.to_either()
    var_3 = var_2.to_lazy()
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    var_4 = maybe_1.to_either()


def test_case_14():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_box()
    module_1.object(**none_type_0)


def test_case_15():
    bool_0 = True
    tuple_0 = (bool_0,)
    tuple_1 = (tuple_0,)
    maybe_0 = module_0.Maybe(tuple_1, tuple_1)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_box()
    var_2 = var_1.to_either()
    var_2.to_either()


def test_case_16():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.to_validation()
    var_2 = maybe_0.to_lazy()
    var_3 = var_1.to_box()
    maybe_1 = module_0.Maybe(none_type_0, var_1)


def test_case_17():
    str_0 = "\n        Create empty maybe.\n\n        :returns: Maybe[None]\n        "
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.filter(var_0)
    var_2 = var_1.to_try()
    var_3 = var_0.to_try()
    var_4 = var_1.to_validation()
    bool_0 = maybe_0.__eq__(str_0)
    bool_1 = var_1.__eq__(var_1)


def test_case_18():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.filter(var_0)
    var_2 = maybe_0.to_either()
    var_3 = maybe_0.to_box()
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    module_1.object(**var_0)


def test_case_19():
    int_0 = 1421
    set_0 = {int_0, int_0, int_0}
    tuple_0 = (set_0,)
    bytes_0 = b"\x95\xbc'\xc8\x10\xc2\x02"
    int_1 = -3272
    tuple_1 = (int_0, tuple_0, bytes_0, int_1)
    int_2 = 2918
    none_type_0 = None
    maybe_0 = module_0.Maybe(int_2, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.map(tuple_1)
    var_2 = var_1.to_try()


def test_case_20():
    bytes_0 = b"\xda\xf6&\xf1e\xe3\xca\x12\xb4"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.filter(bytes_0)
    var_1 = var_0.ap(bytes_0)
    bool_0 = maybe_0.__eq__(var_0)
    var_2 = var_1.get_or_else(bytes_0)
    var_3 = maybe_0.map(bytes_0)
    bool_1 = var_0.ap(var_1)
    var_4 = var_3.filter(var_2)
    var_5 = var_0.to_validation()
    var_6 = var_3.ap(bool_1)
    var_7 = var_6.to_box()
    var_8 = var_4.get_or_else(var_0)
    var_9 = maybe_0.to_validation()
    var_10 = maybe_0.to_either()
    var_11 = maybe_0.to_validation()
    var_12 = maybe_0.to_lazy()
    var_12.filter(var_12)


def test_case_21():
    dict_0 = {}
    maybe_0 = module_0.Maybe(dict_0, dict_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    maybe_0.ap(maybe_0)
