# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1


def test_case_0():
    int_0 = 3036
    maybe_0 = module_0.Maybe(int_0, int_0)


def test_case_1():
    tuple_0 = ()
    maybe_0 = module_0.Maybe(tuple_0, tuple_0)


def test_case_2():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.ap(bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    var_1 = maybe_0.to_try()
    bool_2 = var_0.__eq__(none_type_0)
    maybe_1 = module_0.Maybe(bool_2, bool_2)
    var_2 = maybe_1.to_validation()
    var_3 = maybe_0.filter(maybe_0)
    maybe_1.filter(var_0)


def test_case_3():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.bind(none_type_0)
    var_1 = maybe_0.to_either()
    bool_1 = var_0.__eq__(var_1)
    maybe_1 = module_0.Maybe(bool_1, bool_1)
    var_2 = var_0.filter(var_1)
    maybe_1.filter(none_type_0)


def test_case_4():
    str_0 = "\n        Method executes a reducer function\n        on each element of the array, resulting in a single output value.\n\n        :param fn: function to call with ImmutableList value\n        :type fn: Function(A, B) -> A\n        :returns: A\n        "
    str_1 = "\x0cjTN/'\\"
    maybe_0 = module_0.Maybe(str_1, str_1)
    var_0 = maybe_0.map(str_0)
    var_1 = var_0.to_box()


def test_case_5():
    bool_0 = True
    none_type_0 = None
    none_type_1 = None
    maybe_0 = module_0.Maybe(bool_0, none_type_1)
    bool_1 = maybe_0.__eq__(bool_0)
    maybe_1 = module_0.Maybe(none_type_0, maybe_0)
    var_0 = maybe_0.to_box()
    maybe_0.map(none_type_1)


def test_case_6():
    bool_0 = True
    bool_1 = True
    dict_0 = {bool_1: bool_1, bool_1: bool_1}
    bool_2 = False
    maybe_0 = module_0.Maybe(dict_0, bool_2)
    maybe_0.bind(bool_0)


def test_case_7():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.bind(none_type_0)
    var_1 = module_1.Generic()
    var_2 = maybe_0.ap(var_0)
    bool_1 = var_0.__eq__(var_1)
    maybe_1 = module_0.Maybe(bool_1, bool_1)
    var_3 = var_0.filter(var_1)
    maybe_1.filter(none_type_0)


def test_case_8():
    bool_0 = True
    none_type_0 = None
    none_type_1 = None
    maybe_0 = module_0.Maybe(bool_0, none_type_1)
    bool_1 = maybe_0.__eq__(bool_0)
    maybe_0.ap(none_type_0)


def test_case_9():
    bytes_0 = b"\xb3\xa2{n\x12.\x9b\xd8"
    str_0 = "Box[value={}]"
    tuple_0 = (str_0,)
    bytes_1 = b"\x9a"
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_1, bool_0)
    var_0 = maybe_0.filter(tuple_0)
    var_1 = var_0.to_try()
    var_1.ap(bytes_0)


def test_case_10():
    str_0 = "!k9"
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    set_0 = {str_0, str_0, str_0}
    none_type_0 = None
    var_0 = maybe_0.filter(none_type_0)
    var_1 = var_0.filter(maybe_0)
    var_2 = maybe_0.ap(var_0)
    var_3 = maybe_0.get_or_else(none_type_0)
    maybe_1 = module_0.Maybe(set_0, none_type_0)
    var_4 = maybe_1.get_or_else(maybe_1)


def test_case_11():
    float_0 = -1135.9563
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(float_0, bool_0)
    var_0 = maybe_0.ap(float_0)
    var_1 = var_0.to_either()
    maybe_1 = module_0.Maybe(float_0, float_0)
    var_2 = maybe_1.bind(float_0)
    var_3 = var_2.ap(none_type_0)
    var_4 = var_3.map(var_1)
    var_5 = var_4.to_try()
    maybe_2 = module_0.Maybe(float_0, none_type_0)
    var_6 = maybe_2.to_either()


def test_case_12():
    float_0 = 1461.35264
    dict_0 = {float_0: float_0, float_0: float_0}
    maybe_0 = module_0.Maybe(dict_0, float_0)
    var_0 = maybe_0.to_lazy()


def test_case_13():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_either()
    str_0 = "KB_A&^:\r$d7"
    maybe_1 = module_0.Maybe(none_type_0, str_0)
    var_2 = maybe_1.to_box()
    var_3 = maybe_1.map(var_0)
    maybe_2 = module_0.Maybe(none_type_0, var_1)
    maybe_3 = module_0.Maybe(var_0, maybe_1)
    var_4 = var_2.to_either()
    var_4.get_or_else(var_4)


def test_case_14():
    set_0 = set()
    none_type_0 = None
    maybe_0 = module_0.Maybe(set_0, none_type_0)
    var_0 = maybe_0.to_try()
    var_0.to_try()


def test_case_15():
    bool_0 = False
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_validation()
    var_1 = var_0.to_box()
    var_2 = var_1.to_lazy()
    var_3 = var_2.to_box()


def test_case_16():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_validation()
    var_1 = var_0.to_lazy()
    var_2 = var_1.to_try()


def test_case_17():
    tuple_0 = ()
    bool_0 = True
    maybe_0 = module_0.Maybe(tuple_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_validation()
    maybe_1 = module_0.Maybe(var_1, maybe_0)
    var_1.to_validation()


def test_case_18():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_validation()
    var_2 = maybe_0.to_either()
    var_3 = maybe_0.to_try()
    var_3.map(var_2)


def test_case_19():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.ap(bool_0)
    var_1 = maybe_0.bind(var_0)
    maybe_1 = module_0.Maybe(maybe_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_1)
    var_2 = maybe_0.to_either()
    maybe_2 = module_0.Maybe(none_type_0, var_1)
    var_3 = maybe_2.to_validation()
    var_4 = maybe_0.to_try()
    bool_2 = var_1.__eq__(var_2)
    var_5 = var_3.to_either()
    maybe_3 = module_0.Maybe(bool_2, bool_2)
    var_6 = maybe_3.to_validation()
    var_7 = var_1.filter(var_2)
    bool_3 = var_1.__eq__(maybe_2)
    var_8 = var_7.to_either()
    none_type_1 = None
    maybe_4 = module_0.Maybe(bool_2, none_type_1)
    var_9 = var_8.to_box()
    var_5.to_either()
