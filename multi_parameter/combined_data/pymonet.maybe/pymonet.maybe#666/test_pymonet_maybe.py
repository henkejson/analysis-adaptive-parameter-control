# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import builtins as module_1


def test_case_0():
    int_0 = -3040
    maybe_0 = module_0.Maybe(int_0, int_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    bool_0 = maybe_0.__eq__(maybe_0)
    var_1 = var_0.to_either()


def test_case_3():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    maybe_1 = module_0.Maybe(maybe_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_1.get_or_else(bool_0)
    var_2 = maybe_0.bind(var_0)
    var_3 = maybe_0.to_lazy()
    var_4 = var_2.to_validation()
    var_5 = var_3.bind(bool_0)
    var_6 = var_3.to_try()
    bool_1 = var_6.__eq__(var_3)
    bool_2 = maybe_0.__eq__(var_0)


def test_case_4():
    none_type_0 = None
    bytes_0 = b"\xdb+\xecA\x0f\xd2,\xc3\xcc\xbd\xe4\xf9"
    bool_0 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.get_or_else(none_type_0)
    str_0 = "\n        Applies the function inside the Either[A] structure to another applicative type.\n\n        :param applicative: applicative contains function\n        :type applicative: Either[B]\n        :returns: new Either with result of contains function\n        :rtype: Either[A(B)]\n        "
    maybe_1 = module_0.Maybe(str_0, str_0)
    var_1 = maybe_1.to_lazy()
    tuple_0 = (str_0, var_1, var_1)
    tuple_1 = (tuple_0,)
    maybe_2 = module_0.Maybe(tuple_1, str_0)
    var_2 = maybe_2.map(var_0)
    var_3 = var_2.to_try()


def test_case_5():
    str_0 = "\t^Th[f("
    list_0 = [str_0]
    int_0 = -465
    none_type_0 = None
    maybe_0 = module_0.Maybe(int_0, none_type_0)
    maybe_0.map(list_0)


def test_case_6():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    maybe_1 = module_0.Maybe(maybe_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    maybe_1.bind(none_type_0)


def test_case_7():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    object_0 = module_1.object()
    var_0 = maybe_0.ap(bool_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(bool_0, bool_1)
    var_1 = maybe_0.filter(bool_1)
    maybe_1.filter(var_0)


def test_case_8():
    tuple_0 = ()
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_0.ap(tuple_0)


def test_case_9():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.filter(bool_1)
    maybe_1.filter(maybe_1)


def test_case_10():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    maybe_1 = maybe_0.get_or_else(bool_1)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.map(maybe_1)
    var_2 = maybe_0.bind(var_0)
    var_3 = maybe_0.to_lazy()
    var_4 = var_2.to_validation()
    bool_2 = var_0.__eq__(maybe_0)
    var_5 = var_3.bind(bool_0)
    var_6 = var_3.to_try()
    bool_3 = var_6.__eq__(var_3)
    var_7 = var_0.to_box()
    bool_4 = maybe_0.__eq__(var_0)


def test_case_11():
    str_0 = "H[<*A}B\r5_NV;\x0cVsh2\n"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.to_either()
    var_0.to_either()


def test_case_12():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    int_0 = 951
    maybe_2 = module_0.Maybe(bool_0, int_0)
    var_0 = maybe_2.to_try()
    var_1 = maybe_1.to_either()
    var_2 = maybe_2.to_try()
    var_3 = var_2.get_or_else(var_0)
    var_2.to_try()


def test_case_13():
    bytes_0 = b""
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.to_try()
    none_type_0 = None
    bool_1 = True
    maybe_1 = module_0.Maybe(none_type_0, bool_1)
    var_1 = maybe_1.to_box()
    var_1.to_box()


def test_case_14():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_validation()
    bool_1 = False
    maybe_1 = module_0.Maybe(none_type_0, bool_1)
    var_1 = maybe_1.to_box()
    var_1.to_box()


def test_case_15():
    str_0 = "y%!\x0bP7ga\x0c"
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_lazy()


def test_case_16():
    bool_0 = False
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    maybe_1 = module_0.Maybe(bool_0, none_type_0)
    var_1 = var_0.to_either()


def test_case_17():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.get_or_else(bool_0)
    bool_1 = maybe_0.__eq__(none_type_0)
    var_1 = maybe_0.to_try()
    maybe_1 = module_0.Maybe(none_type_0, var_1)
    maybe_0.filter(bool_1)


def test_case_18():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_0.to_validation()


def test_case_19():
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    bool_2 = False
    maybe_1 = module_0.Maybe(maybe_0, bool_2)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.map(bool_2)
    var_2 = var_1.bind(none_type_0)
    var_3 = maybe_0.to_lazy()
    var_4 = maybe_1.to_validation()
    bool_3 = var_1.__eq__(maybe_1)
    maybe_1.bind(none_type_0)


def test_case_20():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    maybe_1 = module_0.Maybe(maybe_0, none_type_0)
    var_0 = maybe_0.map(maybe_1)
    var_1 = maybe_0.bind(var_0)
    var_2 = maybe_0.to_lazy()
    var_3 = var_1.to_validation()
    bool_2 = var_1.__eq__(maybe_0)
    var_4 = var_2.bind(bool_0)
    var_5 = var_2.to_try()
    bool_3 = var_5.__eq__(var_2)
    none_type_0.to_box()
