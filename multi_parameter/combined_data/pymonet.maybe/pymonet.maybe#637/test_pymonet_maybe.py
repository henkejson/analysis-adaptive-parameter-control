# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    int_0 = -1249
    maybe_0 = module_0.Maybe(int_0, int_0)


def test_case_1():
    bytes_0 = b""
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)


def test_case_2():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.ap(maybe_0)
    var_1 = var_0.get_or_else(var_0)
    var_2 = maybe_0.bind(maybe_0)
    var_3 = var_2.filter(maybe_0)
    bool_1 = var_1.__eq__(var_0)
    maybe_1 = module_0.Maybe(var_1, var_1)
    bytes_0 = b"\xb4\x83\xf2\xae\xdf"
    none_type_0 = None
    var_4 = var_2.to_try()
    var_5 = maybe_0.map(var_4)
    var_6 = var_3.filter(none_type_0)
    maybe_2 = module_0.Maybe(bytes_0, bytes_0)
    var_4.ap(var_5)


def test_case_3():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.map(maybe_0)
    bool_1 = maybe_0.__eq__(var_0)


def test_case_4():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.filter(none_type_0)
    var_1 = var_0.map(none_type_0)


def test_case_5():
    none_type_0 = None
    tuple_0 = ()
    maybe_0 = module_0.Maybe(tuple_0, tuple_0)
    maybe_0.map(none_type_0)


def test_case_6():
    int_0 = 3309
    str_0 = "\n    One is a Monoid that will combine 2 values of any type using logical disjunction OR on their coerced Boolean values.\n    "
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.bind(int_0)
    var_1 = var_0.to_try()
    var_1.to_either()


def test_case_7():
    int_0 = 0
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.get_or_else(maybe_0)
    maybe_0.bind(int_0)


def test_case_8():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.filter(var_0)
    var_2 = maybe_0.ap(bool_0)


def test_case_9():
    none_type_0 = None
    none_type_1 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_1, bool_0)
    maybe_0.ap(none_type_0)


def test_case_10():
    bool_0 = False
    none_type_0 = None
    bool_1 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_1)
    var_0 = maybe_0.to_either()
    maybe_0.filter(bool_0)


def test_case_11():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.ap(none_type_0)
    var_2 = maybe_0.filter(var_1)
    var_3 = var_2.to_try()
    bool_1 = var_1.__eq__(var_1)
    var_4 = maybe_0.map(none_type_0)
    var_5 = maybe_0.map(var_3)
    var_6 = var_5.get_or_else(var_1)
    var_6.to_either()


def test_case_12():
    bool_0 = False
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.get_or_else(none_type_0)
    maybe_0.filter(bool_0)


def test_case_13():
    int_0 = -1095
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.to_lazy()
    bytes_0 = b"\x19]\x08\xd0%\xdbS\x84L5\xf8\xb4\x02"
    bool_1 = True
    maybe_1 = module_0.Maybe(bytes_0, bool_1)
    var_1 = maybe_1.to_either()
    var_2 = var_1.to_try()
    var_3 = var_2.filter(var_0)


def test_case_14():
    int_0 = 703
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_lazy()
    var_2 = var_1.to_validation()
    var_2.to_validation()


def test_case_15():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_box()
    bytes_0 = b"S\xa8*\x06\x86+\xdbX\xc7\xfd\x19\xacO\x1a\xce\xf1"
    bool_1 = False
    tuple_0 = (bytes_0, bool_1, bytes_0)
    str_0 = "3;aJI32bg \tmqS`Pzg"
    maybe_1 = module_0.Maybe(str_0, str_0)
    none_type_1 = None
    var_1 = maybe_1.map(none_type_1)
    var_2 = maybe_1.to_lazy()
    var_3 = var_2.map(tuple_0)
    var_3.to_either()


def test_case_16():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_lazy()
    maybe_0.filter(var_0)


def test_case_17():
    bytes_0 = b"\x18\x85"
    set_0 = {bytes_0, bytes_0, bytes_0}
    none_type_0 = None
    maybe_0 = module_0.Maybe(set_0, none_type_0)
    var_0 = maybe_0.to_try()


def test_case_18():
    set_0 = set()
    maybe_0 = module_0.Maybe(set_0, set_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.to_validation()
    maybe_0.filter(var_1)


def test_case_19():
    int_0 = 1219
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_box()
    var_1.filter(int_0)


def test_case_20():
    str_0 = "z,Y4Q.iU8XB "
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.map(maybe_0)
    var_1 = var_0.get_or_else(var_0)
    var_2 = maybe_0.to_either()
    var_3 = maybe_0.bind(str_0)
    var_4 = maybe_0.get_or_else(maybe_0)
    var_5 = var_2.to_try()
    maybe_1 = module_0.Maybe(str_0, var_3)
    var_6 = var_3.to_validation()
    var_7 = var_3.to_either()
    float_0 = -2129.591174
    var_8 = maybe_1.to_validation()
    var_9 = var_2.bind(float_0)
    bool_0 = maybe_0.__eq__(var_3)
    var_10 = maybe_0.to_validation()
    maybe_2 = module_0.Maybe(var_2, maybe_0)
    var_11 = maybe_2.to_lazy()


def test_case_21():
    set_0 = set()
    maybe_0 = module_0.Maybe(set_0, set_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.to_lazy()
    var_2 = maybe_0.to_try()
    var_3 = var_1.to_box()
    var_4 = maybe_0.to_validation()
    var_5 = var_0.map(maybe_0)
    var_5.to_either()


def test_case_22():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    bool_2 = True
    maybe_1 = module_0.Maybe(bool_0, bool_2)
    var_0 = maybe_1.to_either()
    var_1 = var_0.to_lazy()
    maybe_0.map(var_0)
