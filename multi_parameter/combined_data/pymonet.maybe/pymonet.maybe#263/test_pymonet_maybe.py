# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import builtins as module_1
import typing as module_2


def test_case_0():
    bool_0 = True
    object_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    str_0 = "Sum[value={}]"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.get_or_else(str_0)
    var_1 = maybe_0.get_or_else(maybe_0)
    bool_0 = maybe_0.__eq__(var_1)
    object_0 = module_1.object()
    var_2 = var_1.to_either()
    var_3 = var_2.map(object_0)
    var_4 = maybe_0.ap(object_0)
    maybe_1 = module_0.Maybe(var_1, var_2)
    var_5 = maybe_1.ap(bool_0)
    var_6 = maybe_1.filter(var_2)


def test_case_3():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
    int_0 = 1
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    bool_1 = maybe_0.__eq__(list_0)


def test_case_4():
    str_0 = "Sum[value={}]"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.get_or_else(str_0)
    var_1 = maybe_0.get_or_else(maybe_0)
    bool_0 = maybe_0.__eq__(var_1)
    var_2 = var_1.to_either()
    var_3 = var_1.map(var_2)
    var_4 = maybe_0.ap(str_0)
    var_5 = var_4.to_lazy()
    var_0.to_lazy()


def test_case_5():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.map(none_type_0)


def test_case_6():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.bind(bool_0)
    var_1 = maybe_0.map(var_0)
    var_2 = var_0.to_validation()
    var_3 = maybe_0.map(var_2)
    bool_1 = False
    maybe_1 = module_0.Maybe(var_1, bool_1)
    var_4 = maybe_0.get_or_else(var_1)
    maybe_1.filter(var_2)


def test_case_7():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = True
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_1.map(var_0)
    var_2 = maybe_1.get_or_else(none_type_0)
    bool_1 = True
    maybe_2 = module_0.Maybe(none_type_0, bool_1)
    var_3 = maybe_2.filter(var_2)
    maybe_3 = module_0.Maybe(none_type_0, none_type_0)
    var_4 = maybe_3.to_try()
    var_5 = maybe_3.to_validation()
    var_6 = maybe_2.ap(none_type_0)
    bool_2 = var_4.__eq__(maybe_3)
    var_7 = var_3.to_validation()
    bytes_0 = b"\x02\x00\x9c\x80\xbf"
    var_8 = maybe_1.get_or_else(bytes_0)
    maybe_3.bind(var_5)


def test_case_8():
    str_0 = "\r81_}4\x0bzTZ3[J\n?"
    maybe_0 = module_0.Maybe(str_0, str_0)
    none_type_0 = None
    var_0 = maybe_0.ap(str_0)
    var_1 = var_0.filter(none_type_0)


def test_case_9():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = True
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_1.map(var_0)
    var_2 = maybe_1.get_or_else(none_type_0)
    bool_1 = True
    maybe_2 = module_0.Maybe(none_type_0, bool_1)
    var_3 = maybe_2.filter(var_2)
    maybe_3 = module_0.Maybe(none_type_0, none_type_0)
    var_4 = maybe_3.to_try()
    var_5 = maybe_3.to_validation()
    var_6 = maybe_2.ap(none_type_0)
    list_0 = [var_5]
    maybe_4 = module_0.Maybe(var_4, list_0)
    var_7 = maybe_3.ap(var_1)
    var_8 = maybe_2.filter(var_2)


def test_case_10():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_validation()
    maybe_0.filter(none_type_0)


def test_case_11():
    float_0 = -128.9349
    maybe_0 = module_0.Maybe(float_0, float_0)
    var_0 = maybe_0.get_or_else(float_0)
    var_1 = maybe_0.to_either()
    var_2 = var_1.to_box()
    bool_0 = True
    maybe_1 = module_0.Maybe(float_0, bool_0)
    var_3 = maybe_1.ap(float_0)
    var_4 = var_3.to_validation()
    var_4.filter(var_2)


def test_case_12():
    str_0 = "\r81_}4\x0bzTZ3[J\n?"
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.get_or_else(str_0)
    maybe_1 = module_0.Maybe(str_0, str_0)
    none_type_0 = None
    var_1 = maybe_1.ap(str_0)
    var_2 = var_1.filter(none_type_0)


def test_case_13():
    str_0 = "Sum[value={}]"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    object_0 = var_0.get_or_else(var_0)
    var_1 = var_0.to_either()
    var_2 = maybe_0.ap(var_0)
    maybe_1 = module_0.Maybe(var_2, var_2)
    var_3 = var_2.filter(var_1)
    bytes_0 = b""
    maybe_2 = module_0.Maybe(var_1, bytes_0)
    var_4 = maybe_2.to_either()
    var_5 = maybe_1.map(str_0)
    var_6 = var_5.filter(var_0)
    maybe_2.filter(var_0)


def test_case_14():
    str_0 = "Q-F+]RJ#T[Xm9"
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    var_1 = maybe_0.to_box()
    var_2 = var_0.get_or_else(bool_0)
    bool_1 = maybe_0.__eq__(var_0)
    object_0 = module_1.object()
    var_3 = var_0.to_validation()
    var_4 = var_3.to_either()
    var_2.map(var_2)


def test_case_15():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    none_type_0 = None
    bool_1 = False
    maybe_1 = module_0.Maybe(none_type_0, bool_1)
    var_0 = maybe_1.to_validation()
    var_1 = maybe_1.to_box()


def test_case_16():
    str_0 = "\n    Return increased by 1 argument.\n\n    :param value:\n    :type value: Int\n    :returns:\n    :rtype: Int\n    "
    dict_0 = {str_0: str_0, str_0: str_0}
    maybe_0 = module_0.Maybe(dict_0, str_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.to_lazy()
    var_0.to_box()


def test_case_17():
    float_0 = 562.23516
    float_1 = -3086.794
    none_type_0 = None
    maybe_0 = module_0.Maybe(float_1, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.ap(float_0)
    var_0.to_lazy()


def test_case_18():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_try()
    var_0.to_box()


def test_case_19():
    str_0 = "\n        Returns new ImmutableList with only this elements that passed\n        info argument returns True\n\n        :param fn: function to call with ImmutableList value\n        :type fn: Function(A) -> bool\n        :returns: ImmutableList[A]\n        "
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.to_validation()
    var_0.ap(str_0)


def test_case_20():
    str_0 = "\n        Transform Validation to Box.\n\n        :returns: Box with Validation value\n        :rtype: Box[A]\n        "
    str_1 = "All"
    maybe_0 = module_0.Maybe(str_1, str_1)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.bind(str_0)
    var_2 = var_1.to_try()
    var_0.filter(var_0)


def test_case_21():
    str_0 = "\n1"
    int_0 = 0
    set_0 = {int_0, int_0}
    bool_0 = False
    maybe_0 = module_0.Maybe(set_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_try()
    var_1.ap(str_0)


def test_case_22():
    generic_0 = module_2.Generic()
    maybe_0 = module_0.Maybe(generic_0, generic_0)
    var_0 = maybe_0.bind(generic_0)
    bool_0 = var_0.__eq__(maybe_0)
    var_1 = maybe_0.to_validation()
    var_2 = maybe_0.to_lazy()
    var_2.to_lazy()


def test_case_23():
    float_0 = 1029.976
    none_type_0 = None
    maybe_0 = module_0.Maybe(float_0, none_type_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    module_1.object(*var_0)
