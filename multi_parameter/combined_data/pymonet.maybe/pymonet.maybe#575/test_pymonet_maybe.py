# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1


def test_case_0():
    str_0 = "."
    maybe_0 = module_0.Maybe(str_0, str_0)


def test_case_1():
    str_0 = ""
    maybe_0 = module_0.Maybe(str_0, str_0)


def test_case_2():
    generic_0 = module_1.Generic()
    bool_0 = True
    maybe_0 = module_0.Maybe(generic_0, bool_0)
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.bind(bool_0)
    var_1 = var_0.bind(var_0)
    var_2 = maybe_0.to_either()
    var_3 = var_1.ap(var_2)
    var_4 = maybe_0.filter(generic_0)
    var_5 = maybe_0.to_lazy()
    var_6 = var_0.to_validation()
    bool_1 = maybe_0.__eq__(var_4)


def test_case_3():
    complex_0 = -1889.288 - 2353.14j
    maybe_0 = module_0.Maybe(complex_0, complex_0)
    bool_0 = maybe_0.__eq__(complex_0)
    none_type_0 = None
    bool_1 = False
    maybe_1 = module_0.Maybe(none_type_0, bool_1)
    maybe_2 = module_0.Maybe(bool_0, maybe_1)
    var_0 = maybe_1.to_either()


def test_case_4():
    generic_0 = module_1.Generic()
    bool_0 = True
    maybe_0 = module_0.Maybe(generic_0, bool_0)
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.map(maybe_1)
    var_1 = maybe_0.bind(bool_0)
    var_2 = maybe_0.to_either()
    var_3 = var_0.ap(bool_0)
    var_4 = maybe_1.ap(var_2)
    var_5 = var_4.ap(var_0)
    var_6 = maybe_0.filter(generic_0)
    var_7 = var_5.bind(maybe_1)
    var_8 = var_1.to_validation()
    bool_1 = maybe_0.__eq__(var_6)
    bool_2 = False
    maybe_2 = module_0.Maybe(bool_2, bool_2)


def test_case_5():
    int_0 = -352
    bool_0 = False
    maybe_0 = module_0.Maybe(int_0, bool_0)
    maybe_0.ap(maybe_0)


def test_case_6():
    bytes_0 = b"T;\xc4\x19\xea"
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.bind(bytes_0)


def test_case_7():
    none_type_0 = None
    str_0 = "\\DsA8'jee"
    tuple_0 = (str_0,)
    bool_0 = False
    maybe_0 = module_0.Maybe(tuple_0, bool_0)
    maybe_0.bind(none_type_0)


def test_case_8():
    str_0 = "e\n1QrUPY"
    set_0 = {str_0}
    float_0 = -2326.2129
    bool_0 = True
    maybe_0 = module_0.Maybe(float_0, bool_0)
    var_0 = maybe_0.ap(set_0)
    var_1 = var_0.to_validation()


def test_case_9():
    int_0 = -571
    bytes_0 = b"\xc3\x16"
    none_type_0 = None
    maybe_0 = module_0.Maybe(bytes_0, none_type_0)
    maybe_0.ap(int_0)


def test_case_10():
    generic_0 = module_1.Generic()
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.filter(generic_0)
    var_1 = var_0.to_either()
    var_2 = var_0.to_lazy()
    var_3 = var_1.to_try()
    var_4 = var_0.bind(var_3)


def test_case_11():
    str_0 = "\\DsA8'jee"
    tuple_0 = (str_0,)
    bool_0 = False
    maybe_0 = module_0.Maybe(tuple_0, bool_0)
    maybe_0.filter(str_0)


def test_case_12():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.get_or_else(none_type_0)
    bool_1 = False
    none_type_1 = None
    bytes_0 = b"\x9d\x19\xe6/q"
    bool_2 = True
    maybe_1 = module_0.Maybe(bytes_0, bool_2)
    var_1 = maybe_1.ap(none_type_1)
    bool_3 = False
    maybe_2 = module_0.Maybe(var_1, bool_3)
    maybe_2.bind(bool_1)


def test_case_13():
    bytes_0 = b""
    float_0 = 95.75021
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.get_or_else(float_0)
    var_0.filter(bytes_0)


def test_case_14():
    complex_0 = -1889.288 - 2354.444153568392j
    maybe_0 = module_0.Maybe(complex_0, complex_0)
    bool_0 = maybe_0.__eq__(complex_0)
    maybe_1 = maybe_0.to_either()
    maybe_2 = maybe_1.to_lazy()
    maybe_1.to_either()


def test_case_15():
    int_0 = 0
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_lazy()
    set_0 = {int_0}
    maybe_1 = module_0.Maybe(set_0, set_0)
    var_2 = maybe_1.to_validation()
    var_3 = var_2.to_box()


def test_case_16():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_box()


def test_case_17():
    bool_0 = False
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_lazy()
    var_0.to_lazy()


def test_case_18():
    str_0 = "\n        Take function and call constructor function passing returned value to fn function.\n\n        It's only way to call function store in Lazy\n        :param fn: Function(constructor_fn) -> B\n        :returns: result od folder function\n        :rtype: B\n        "
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.to_try()


def test_case_19():
    complex_0 = -1889.288 - 2353.14j
    maybe_0 = module_0.Maybe(complex_0, complex_0)
    bool_0 = maybe_0.__eq__(complex_0)
    none_type_0 = None
    bool_1 = False
    maybe_1 = module_0.Maybe(none_type_0, bool_1)
    var_0 = maybe_1.to_try()
    var_0.to_validation()


def test_case_20():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.to_validation()


def test_case_21():
    bool_0 = False
    bool_1 = True
    tuple_0 = ()
    str_0 = "2>H'^'&c/zp64"
    set_0 = {str_0}
    maybe_0 = module_0.Maybe(set_0, str_0)
    var_0 = maybe_0.ap(tuple_0)
    var_1 = var_0.bind(bool_1)
    var_2 = var_1.ap(var_0)
    var_3 = var_2.filter(var_0)
    var_4 = var_1.to_lazy()
    var_5 = var_4.to_box()
    var_5.bind(bool_0)


def test_case_22():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    bytes_0 = b"\x98G\xdb\xda\xe7\n\xdb\np\x91\xc2E\xb3"
    bool_1 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_1)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_box()
    var_1.get_or_else(list_0)


def test_case_23():
    generic_0 = module_1.Generic()
    maybe_0 = module_0.Maybe(generic_0, generic_0)
    var_0 = maybe_0.to_either()
    none_type_0 = None
    var_1 = maybe_0.map(var_0)
    maybe_1 = module_0.Maybe(none_type_0, var_0)
    var_2 = maybe_1.filter(generic_0)
    var_3 = maybe_1.to_either()
    var_4 = var_3.map(var_3)
    var_5 = var_0.to_try()
    var_6 = var_3.ap(var_3)
    var_7 = var_4.ap(var_5)
    int_0 = -389
    var_8 = maybe_1.ap(int_0)
    var_9 = var_7.ap(var_1)
    var_10 = maybe_0.filter(generic_0)
    var_11 = var_10.to_lazy()
    var_12 = maybe_1.to_box()
    var_13 = var_9.bind(var_0)
    bool_0 = maybe_0.__eq__(var_8)
    maybe_2 = module_0.Maybe(var_0, var_9)
    var_14 = maybe_2.get_or_else(var_9)


def test_case_24():
    bool_0 = True
    bool_1 = False
    bool_2 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1 = module_0.Maybe(bool_0, bool_2)
    maybe_2 = module_0.Maybe(bool_0, bool_1)
    bool_3 = maybe_2.__eq__(maybe_2)
    var_0 = maybe_2.to_validation()
    var_1 = var_0.to_box()
    bool_4 = var_1.__eq__(bool_0)
    maybe_2.ap(maybe_2)
