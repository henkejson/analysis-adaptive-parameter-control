# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1


def test_case_0():
    str_0 = "DVwv.r94;OWE7\x0c[,|\x0bvK"
    maybe_0 = module_0.Maybe(str_0, str_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    bytes_0 = b"\xaf\xb7\xf7|\x18n\x18E\x80,\xdc/\xda\x13$\xb9\xf5"
    bool_0 = False
    float_0 = -1551.276276
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1 = module_0.Maybe(bytes_0, float_0)
    var_0 = maybe_1.to_try()
    maybe_2 = module_0.Maybe(maybe_1, bool_0)
    var_1 = maybe_1.ap(maybe_0)
    var_2 = var_1.map(var_0)
    var_3 = var_1.map(float_0)
    bool_1 = maybe_2.__eq__(var_2)
    var_4 = var_2.ap(var_1)
    var_5 = maybe_2.to_box()
    var_6 = var_3.map(var_4)
    var_7 = var_6.bind(var_2)
    bool_2 = maybe_2.__eq__(var_7)
    maybe_3 = module_0.Maybe(var_4, bool_0)
    var_0.to_either()


def test_case_3():
    float_0 = 3397.0
    maybe_0 = module_0.Maybe(float_0, float_0)
    var_0 = maybe_0.to_lazy()
    bool_0 = maybe_0.__eq__(var_0)
    var_1 = maybe_0.to_try()


def test_case_4():
    str_0 = "\n        Transform Validation to Try.\n\n        :returns: successfully Try with Validation value value. Try is successful when Validation has no errors\n        :rtype: Try[A]\n        "
    tuple_0 = (str_0,)
    complex_0 = -4124.011114 + 3067j
    bool_0 = True
    maybe_0 = module_0.Maybe(complex_0, bool_0)
    var_0 = maybe_0.map(tuple_0)
    var_1 = var_0.to_validation()
    var_2 = var_1.to_lazy()


def test_case_5():
    dict_0 = {}
    none_type_0 = None
    maybe_0 = module_0.Maybe(dict_0, dict_0)
    bool_0 = dict_0.__eq__(dict_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.to_box()
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.map(var_0)


def test_case_6():
    bytes_0 = b'\xc1\xd6"\xf7\xbdO\xf2\xd0F\xfa\x85\xd1\x17'
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    set_0 = {bytes_0}
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.to_try()
    var_2 = var_1.get_or_else(set_0)
    var_3 = maybe_0.bind(var_2)
    bool_0 = True
    maybe_1 = module_0.Maybe(set_0, bool_0)


def test_case_7():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    none_type_0 = None
    var_1 = maybe_0.get_or_else(maybe_0)
    var_2 = maybe_0.to_try()
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1.bind(var_1)


def test_case_8():
    bytes_0 = b'\xa0)T\xf9@"\x1e\xab\xba\xd7M\x9e\x1c-\xbd\x13A\xc4\xa8o'
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, bytes_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.bind(var_0)
    var_2 = maybe_0.ap(bytes_0)
    var_3 = var_2.map(bytes_0)
    var_4 = var_3.to_either()
    var_5 = var_4.to_lazy()
    maybe_1 = module_0.Maybe(bytes_0, bytes_0)
    var_6 = maybe_1.to_try()
    var_6.to_lazy()


def test_case_9():
    none_type_0 = None
    none_type_1 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_1, bool_0)
    maybe_1 = module_0.Maybe(maybe_0, bool_0)
    maybe_1.ap(none_type_0)


def test_case_10():
    none_type_0 = None
    bool_0 = True
    none_type_1 = None
    bool_1 = True
    maybe_0 = module_0.Maybe(none_type_1, bool_1)
    var_0 = maybe_0.filter(none_type_0)
    var_1 = var_0.to_box()
    maybe_1 = module_0.Maybe(var_1, none_type_0)
    maybe_1.filter(bool_0)


def test_case_11():
    none_type_0 = None
    int_0 = -333
    none_type_1 = None
    maybe_0 = module_0.Maybe(int_0, none_type_1)
    maybe_0.filter(none_type_0)


def test_case_12():
    dict_0 = {}
    generic_0 = module_1.Generic()
    maybe_0 = module_0.Maybe(generic_0, generic_0)
    var_0 = maybe_0.get_or_else(dict_0)
    var_0.to_box()


def test_case_13():
    str_0 = "7h+y\n"
    str_1 = "}>oS ,xnt,]*q"
    maybe_0 = module_0.Maybe(str_1, str_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(maybe_0, none_type_0)
    var_0 = maybe_1.to_either()
    str_2 = "\n    Map is a Semigroup that will always return contated all values inside Map value\n    "
    bool_0 = False
    maybe_2 = module_0.Maybe(str_2, bool_0)
    var_1 = maybe_2.get_or_else(str_1)
    var_2 = maybe_2.to_either()
    var_1.filter(str_0)


def test_case_14():
    bool_0 = True
    bytes_0 = b"#,\x06m\x0c\x11\xd7\x16\x04\xd9\xa9\xd7\x13\xa6\xfc\x8c"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.filter(var_0)
    var_2 = maybe_0.to_lazy()
    var_2.filter(bool_0)


def test_case_15():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.get_or_else(maybe_0)
    bool_1 = True
    maybe_1 = module_0.Maybe(bool_1, bool_1)
    var_2 = maybe_1.ap(maybe_0)
    var_3 = maybe_0.to_box()
    var_4 = var_2.to_lazy()
    var_5 = var_4.to_box()
    var_6 = var_5.to_validation()
    var_0.map(var_2)


def test_case_16():
    str_0 = "\n    The Try control gives us the ability write safe code\n    without focusing on try-catch blocks in the presence of exceptions.\n    "
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_lazy()
    bool_1 = maybe_0.__eq__(var_0)
    var_1 = maybe_0.to_try()


def test_case_17():
    float_0 = 1530.84
    maybe_0 = module_0.Maybe(float_0, float_0)
    var_0 = maybe_0.to_lazy()
    bool_0 = maybe_0.__eq__(var_0)
    var_1 = maybe_0.to_validation()
    var_2 = maybe_0.get_or_else(maybe_0)


def test_case_18():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    maybe_0 = module_0.Maybe(bool_0, list_0)
    var_0 = maybe_0.to_validation()
    maybe_1 = module_0.Maybe(list_0, bool_0)
    var_1 = maybe_1.to_validation()
    bool_1 = True
    var_2 = maybe_1.to_lazy()
    maybe_2 = module_0.Maybe(bool_1, bool_1)
    var_3 = maybe_2.to_validation()
    var_3.map(var_1)


def test_case_19():
    dict_0 = {}
    bool_0 = dict_0.__eq__(dict_0)


def test_case_20():
    float_0 = 33.500344
    maybe_0 = module_0.Maybe(float_0, float_0)
    var_0 = maybe_0.to_lazy()
    bool_0 = maybe_0.__eq__(var_0)
    var_1 = var_0.to_validation()
    var_2 = maybe_0.to_try()


def test_case_21():
    bytes_0 = b"\xaf\xb7\xf7|\x18n\x18E\x80,\xdc/\xda\x13$\xb9\xf5"
    bool_0 = False
    float_0 = -1551.276276
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1 = module_0.Maybe(bytes_0, float_0)
    var_0 = maybe_1.to_try()
    maybe_2 = module_0.Maybe(maybe_1, bool_0)
    var_1 = maybe_1.to_lazy()
    var_2 = var_1.bind(var_0)
    var_3 = maybe_1.ap(maybe_0)
    var_4 = maybe_1.bind(maybe_0)
    bool_1 = maybe_2.__eq__(maybe_2)
    var_5 = var_3.ap(var_0)
    bool_2 = var_5.__eq__(var_5)
    var_6 = maybe_1.to_box()
    var_7 = var_3.map(var_6)
    var_8 = maybe_1.to_lazy()
    var_9 = var_8.bind(var_5)
    bool_3 = var_7.__eq__(var_6)
    bool_4 = False
    maybe_3 = module_0.Maybe(var_4, bool_4)
    var_0.to_either()


def test_case_22():
    str_0 = "`},q)-a|X85}&aN4"
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_either()
