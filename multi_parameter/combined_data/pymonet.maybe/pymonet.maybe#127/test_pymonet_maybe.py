# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    generic_0 = module_1.Generic()
    maybe_0 = module_0.Maybe(generic_0, generic_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.to_try()
    int_0 = -915
    maybe_1 = module_0.Maybe(generic_0, int_0)
    bool_0 = maybe_1.__eq__(int_0)
    var_2 = maybe_1.bind(var_0)


def test_case_3():
    int_0 = 4550
    list_0 = [int_0]
    maybe_0 = module_0.Maybe(int_0, list_0)
    bool_0 = True
    maybe_1 = module_0.Maybe(int_0, bool_0)
    bool_1 = maybe_1.__eq__(bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.map(var_0)
    var_2 = maybe_1.filter(var_0)
    var_3 = maybe_1.get_or_else(var_1)


def test_case_4():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    maybe_0.map(maybe_0)


def test_case_5():
    str_0 = "F\nz"
    bool_0 = False
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    maybe_1 = module_0.Maybe(str_0, bool_0)
    tuple_0 = ()
    maybe_1.bind(tuple_0)


def test_case_6():
    bool_0 = True
    str_0 = "\n-x4:0-9\x0brf\nmK"
    bool_1 = True
    maybe_0 = module_0.Maybe(str_0, bool_1)
    var_0 = maybe_0.ap(bool_0)


def test_case_7():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_try()
    maybe_0.ap(maybe_0)


def test_case_8():
    str_0 = "\n        Transform Either to Maybe.\n\n        :returns: Maybe with previous value\n        :rtype: Maybe[A]\n        "
    maybe_0 = module_0.Maybe(str_0, str_0)
    maybe_1 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.filter(maybe_0)
    var_1 = maybe_1.filter(var_0)
    var_2 = var_0.to_validation()
    bool_0 = False
    maybe_2 = module_0.Maybe(var_2, bool_0)
    maybe_2.filter(maybe_1)


def test_case_9():
    bytes_0 = b"\xe1,\xf9\xd5\x94\xdb+\xec]O\x0b\xc2\xa1\xf3c\x86\xfd"
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_0, none_type_0)
    var_0 = maybe_0.get_or_else(bytes_0)
    var_0.to_validation()


def test_case_10():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.to_box()
    var_2 = var_0.to_validation()
    var_3 = maybe_0.bind(var_2)
    none_type_1 = None
    var_4 = maybe_0.to_validation()
    maybe_1 = module_0.Maybe(none_type_1, none_type_1)
    maybe_1.ap(none_type_1)


def test_case_11():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.to_either()
    var_2 = maybe_0.to_lazy()
    var_3 = var_2.to_validation()
    bool_1 = var_2.__eq__(maybe_0)
    var_1.to_either()


def test_case_12():
    complex_0 = 3599.69 + 2486j
    str_0 = "\n        Take filterer function, when monad is successfully call filterer with monad value.\n        When filterer returns True method returns copy of monad, othercase\n        not successfully Try with previous value.\n\n        :params filterer: function to apply on monad value\n        :type filterer: Function(A) -> Boolean\n        :returns: Try with previous value\n        :rtype: Try[A]\n        "
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    maybe_1 = module_0.Maybe(maybe_0, bool_0)
    var_0 = maybe_1.to_box()
    var_1 = var_0.to_lazy()
    var_1.get_or_else(complex_0)


def test_case_13():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.to_try()
    none_type_1 = None
    bool_1 = False
    maybe_1 = module_0.Maybe(bool_1, bool_1)
    var_2 = maybe_1.to_validation()
    var_2.ap(none_type_1)


def test_case_14():
    bool_0 = False
    str_0 = "dq&w\n=Np@_klP3TB\x0bZf"
    bool_1 = True
    maybe_0 = module_0.Maybe(str_0, bool_1)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_either()
    var_2 = var_0.ap(var_0)
    var_3 = maybe_0.get_or_else(bool_0)


def test_case_15():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_validation()
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_1 = maybe_1.to_try()
    var_2 = maybe_0.to_lazy()
    var_3 = var_2.to_box()
    var_4 = var_3.to_try()
    var_5 = maybe_1.get_or_else(var_0)
    maybe_1.ap(maybe_1)


def test_case_16():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_try()


def test_case_17():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = var_0.to_box()
    var_2 = var_1.to_try()
    var_2.to_try()


def test_case_18():
    int_0 = 1
    list_0 = [int_0, int_0]
    bytes_0 = b"\xa6-\xfe\n\x1e\xcb\x85\xc3\x16d\xff\x1d\x95Y\x1c\xc7\x8b\x8aB"
    bool_0 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_0.get_or_else(list_0)


def test_case_19():
    bool_0 = True
    bool_0.to_lazy()


def test_case_20():
    str_0 = "\n        Transform Either to Maybe.\n\n        :returns: Maybe with previous value\n        :rtype: Maybe[A]\n        "
    maybe_0 = module_0.Maybe(str_0, str_0)
    maybe_1 = module_0.Maybe(str_0, str_0)
    bool_0 = maybe_1.__eq__(maybe_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_1.ap(str_0)
    var_2 = var_1.filter(var_1)
    var_3 = maybe_1.filter(var_0)
    var_4 = var_2.to_validation()
    bool_1 = False
    maybe_2 = module_0.Maybe(var_4, bool_1)
    var_5 = var_1.map(var_0)
    maybe_2.filter(maybe_1)


def test_case_21():
    float_0 = 1244.147
    bytes_0 = b"~\xc3\x11\xb4\xaf\xe2\xf3#\x96\xb6\x98"
    dict_0 = {float_0: bytes_0}
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.ap(dict_0)
    var_1 = maybe_0.to_either()
    var_2 = maybe_0.map(var_0)
    int_0 = -137
    var_3 = maybe_0.bind(var_0)
    var_4 = maybe_0.to_box()
    bool_1 = False
    maybe_1 = module_0.Maybe(int_0, bool_1)
    var_5 = maybe_1.to_try()
    maybe_2 = module_0.Maybe(var_2, var_1)
    bool_2 = maybe_2.__eq__(var_3)
    var_6 = var_0.to_lazy()
    var_7 = var_6.to_validation()
    var_8 = var_6.map(var_0)
    var_9 = var_6.bind(var_1)


def test_case_22():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.to_validation()
    var_2 = var_1.to_lazy()
    var_0.to_lazy()
