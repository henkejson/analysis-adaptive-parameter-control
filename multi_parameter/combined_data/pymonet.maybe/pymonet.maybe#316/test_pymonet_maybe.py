# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    bool_0 = True
    none_type_0 = None
    bool_1 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_1)
    var_0 = maybe_0.to_either()
    bool_2 = maybe_0.__eq__(none_type_0)
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    maybe_1 = module_0.Maybe(dict_0, dict_0)
    bool_3 = maybe_1.__eq__(maybe_0)
    bool_2.to_box()


def test_case_3():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.to_box()
    bool_1 = maybe_0.__eq__(bool_0)
    var_0.bind(var_0)


def test_case_4():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.bind(none_type_0)
    bool_1 = True
    maybe_1 = module_0.Maybe(none_type_0, bool_1)
    var_1 = maybe_1.to_box()
    var_2 = var_1.to_validation()
    var_3 = maybe_1.ap(var_1)
    var_4 = maybe_1.filter(var_1)
    var_5 = var_3.map(var_2)
    var_2.filter(var_1)


def test_case_5():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    maybe_0.map(var_0)


def test_case_6():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.to_lazy()
    var_2 = var_1.to_try()
    maybe_0.bind(none_type_0)


def test_case_7():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_validation()
    var_2 = maybe_0.ap(var_0)
    var_3 = maybe_0.filter(var_0)
    var_0.get_or_else(var_0)


def test_case_8():
    str_0 = "VvEz?@%j 7L]5`"
    bool_0 = False
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    maybe_0.ap(str_0)


def test_case_9():
    none_type_0 = None
    str_0 = "H`d+m"
    set_0 = {str_0, str_0}
    maybe_0 = module_0.Maybe(set_0, set_0)
    var_0 = maybe_0.filter(none_type_0)
    var_1 = var_0.to_either()
    var_2 = var_1.map(var_1)


def test_case_10():
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_1 = maybe_0.__eq__(bool_0)
    maybe_0.filter(bool_0)


def test_case_11():
    int_0 = 1
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.get_or_else(int_0)
    var_0.to_validation()


def test_case_12():
    none_type_0 = None
    str_0 = "\n    Maybe type is the most common way of representing nothingness (or the null type).\n    Maybe is effectively abstract and has two concrete subtypes: Box (also Some) and Nothing.\n    "
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.get_or_else(none_type_0)


def test_case_13():
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_1 = maybe_0.__eq__(bool_0)
    var_0 = maybe_0.to_box()
    maybe_0.map(bool_0)


def test_case_14():
    none_type_0 = None
    str_0 = "kQP=\x0c\nZ}vB"
    set_0 = {str_0}
    bool_0 = True
    maybe_0 = module_0.Maybe(set_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.ap(none_type_0)
    var_1.to_lazy()


def test_case_15():
    none_type_0 = None
    str_0 = "H`d+m"
    set_0 = {str_0, str_0}
    maybe_0 = module_0.Maybe(set_0, set_0)
    var_0 = maybe_0.filter(none_type_0)
    var_1 = var_0.to_try()
    bool_0 = False
    maybe_1 = module_0.Maybe(var_0, bool_0)


def test_case_16():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.to_try()
    tuple_0 = (var_1, var_1, none_type_0, none_type_0)
    maybe_1 = module_0.Maybe(tuple_0, var_1)
    var_1.to_try()


def test_case_17():
    dict_0 = {}
    bool_0 = True
    maybe_0 = module_0.Maybe(dict_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = var_0.to_lazy()
    var_2 = var_1.to_validation()


def test_case_18():
    str_0 = "\n        Return resolved Task with stored value argument.\n\n        :param value: value to store in Task\n        :type value: A\n        :returns: resolved Task\n        :rtype: Task[Function(_, resolve) -> A]\n        "
    none_type_0 = None
    none_type_1 = None
    maybe_0 = module_0.Maybe(none_type_1, str_0)
    var_0 = maybe_0.ap(str_0)
    var_1 = var_0.filter(none_type_0)
    maybe_1 = module_0.Maybe(str_0, str_0)
    bool_0 = False
    var_2 = var_0.to_validation()
    maybe_2 = module_0.Maybe(bool_0, bool_0)
    var_3 = maybe_2.to_validation()
    var_2.filter(var_0)


def test_case_19():
    str_0 = "9?+tocp"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.ap(maybe_0)
    var_2 = var_0.to_validation()
    var_2.to_validation()


def test_case_20():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_1 = module_0.Maybe(maybe_0, bool_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_1.to_lazy()
    bool_1 = True
    maybe_2 = module_0.Maybe(bool_0, bool_1)
    var_2 = maybe_1.get_or_else(var_1)
    var_3 = var_2.to_either()
    bool_2 = var_2.__eq__(var_2)
    bool_3 = var_1.__eq__(maybe_0)
    var_4 = maybe_1.get_or_else(maybe_1)
    bool_4 = var_4.__eq__(var_2)
    bool_2.to_box()


def test_case_21():
    str_0 = "\n        Return resolved Task with stored value argument.\n\n        :param value: value to store in Task\n        :type value: A\n        :returns: resolved Task\n        :rtype: Task[Function(_, resolve) -> A]\n        "
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, str_0)
    var_0 = maybe_0.ap(str_0)
    var_1 = var_0.filter(none_type_0)
    list_0 = []
    var_2 = var_1.map(list_0)
    var_3 = maybe_0.filter(str_0)
    var_4 = var_2.ap(list_0)
    var_5 = var_4.to_either()
    maybe_1 = module_0.Maybe(var_5, var_5)
    bool_0 = var_1.__eq__(var_2)
    var_6 = var_3.bind(maybe_0)
    var_7 = var_6.map(var_5)
    var_8 = maybe_1.get_or_else(none_type_0)
    var_8.to_box()
