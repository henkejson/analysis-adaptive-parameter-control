# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import builtins as module_1


def test_case_0():
    complex_0 = 2385.9044 - 1444j
    maybe_0 = module_0.Maybe(complex_0, complex_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    bytes_0 = b""
    bytes_1 = b"\x07\x04\x1bd\xc3\xaf\xad@"
    maybe_0 = module_0.Maybe(bytes_1, bytes_1)
    var_0 = maybe_0.map(bytes_1)
    var_1 = var_0.filter(var_0)
    var_2 = maybe_0.get_or_else(bytes_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    maybe_1 = module_0.Maybe(bytes_1, var_2)
    maybe_1.filter(var_0)


def test_case_3():
    complex_0 = -114 + 841.841j
    maybe_0 = module_0.Maybe(complex_0, complex_0)
    none_type_0 = None
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.to_either()
    bool_0 = maybe_0.__eq__(none_type_0)
    var_2 = maybe_0.to_either()
    bool_1 = maybe_0.__eq__(var_2)
    var_3 = var_2.to_try()
    var_4 = maybe_0.ap(none_type_0)
    bool_2 = var_1.__eq__(var_4)


def test_case_4():
    float_0 = 356.6271
    int_0 = -3321
    bool_0 = False
    maybe_0 = module_0.Maybe(int_0, bool_0)
    maybe_0.map(float_0)


def test_case_5():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.bind(maybe_0)
    var_1 = var_0.ap(maybe_0)
    var_2 = var_0.bind(var_1)
    var_3 = var_0.to_box()
    var_3.filter(none_type_0)


def test_case_6():
    str_0 = "{(X`#!5.D-W6)BK3"
    bool_0 = True
    dict_0 = {str_0: bool_0}
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.bind(dict_0)


def test_case_7():
    object_0 = module_1.object()
    float_0 = 2240.918
    str_0 = "}@Zc]3h=p?9+!6{=h<"
    none_type_0 = None
    maybe_0 = module_0.Maybe(str_0, none_type_0)
    maybe_0.ap(float_0)


def test_case_8():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.filter(none_type_0)
    var_1 = var_0.ap(bool_0)
    var_2 = maybe_0.get_or_else(maybe_0)
    var_3 = var_0.to_box()
    var_3.filter(none_type_0)


def test_case_9():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_validation()
    maybe_0.filter(var_0)


def test_case_10():
    none_type_0 = None
    none_type_1 = None
    maybe_0 = module_0.Maybe(none_type_1, none_type_1)
    var_0 = maybe_0.get_or_else(none_type_0)
    var_0.to_box()


def test_case_11():
    none_type_0 = None
    set_0 = set()
    maybe_0 = module_0.Maybe(set_0, set_0)
    var_0 = maybe_0.to_either()
    var_0.map(none_type_0)


def test_case_12():
    bytes_0 = b"\xdf\xdc/A{r\xcd\xfc\x93xxk\x01\x9c!3I\x12"
    complex_0 = 2737.796 - 2020.941j
    bool_0 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.to_box()
    bool_1 = maybe_0.__eq__(maybe_0)
    bool_1.get_or_else(complex_0)


def test_case_13():
    tuple_0 = ()
    maybe_0 = module_0.Maybe(tuple_0, tuple_0)
    bytes_0 = b"\xc9\xee\xe4\xb9\x94x\xb8\x85M[jW"
    bytes_1 = b"\x05\xc0\x97\xb1\xa3\xa7*"
    bool_0 = True
    maybe_1 = module_0.Maybe(bytes_1, bool_0)
    var_0 = maybe_1.to_lazy()
    var_1 = var_0.bind(bytes_0)
    var_1.get_or_else(maybe_0)


def test_case_14():
    bytes_0 = b"\xdf\xdc/A{r\xcd\xfc\x93xxk\x01\x9c!3I\x12"
    complex_0 = 2737.796 - 2020.941j
    bool_0 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_either()
    bool_1 = var_1.__eq__(maybe_0)
    var_2 = maybe_0.to_lazy()
    var_3 = var_2.map(var_1)
    var_1.get_or_else(complex_0)


def test_case_15():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.ap(none_type_0)
    str_0 = "inf"
    var_1 = maybe_0.ap(str_0)
    var_2 = var_1.to_try()
    var_2.to_box()


def test_case_16():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_try()
    var_0.to_validation()


def test_case_17():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_0.bind(none_type_0)


def test_case_18():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_0.filter(maybe_0)


def test_case_19():
    bytes_0 = b"\xb9"
    bytes_1 = b"\x07\x04\x1bd\xc3\xaf\x08@"
    maybe_0 = module_0.Maybe(bytes_1, bytes_1)
    var_0 = maybe_0.map(bytes_1)
    var_1 = maybe_0.to_try()
    complex_0 = 2780.1 - 742.995j
    var_2 = var_0.filter(var_1)
    bool_0 = var_1.__eq__(var_1)
    var_3 = maybe_0.bind(var_1)
    var_4 = var_1.get_or_else(bytes_0)
    bytes_2 = b"\xe4\x84\xc08\xa7\xcd=\x807"
    bool_1 = True
    bool_2 = maybe_0.__eq__(maybe_0)
    var_5 = var_0.ap(bytes_1)
    maybe_1 = module_0.Maybe(bytes_2, bool_1)
    var_6 = var_5.ap(var_4)
    var_7 = var_3.bind(var_4)
    var_8 = maybe_1.ap(complex_0)
    var_9 = var_8.to_lazy()
    var_10 = maybe_0.filter(var_6)
    bool_3 = var_3.__eq__(var_10)
    var_11 = var_2.filter(bool_3)
    var_12 = var_11.to_lazy()
    var_13 = var_9.to_validation()
    var_14 = var_10.ap(var_13)
    var_15 = maybe_1.get_or_else(var_7)
    var_16 = var_5.map(var_0)
    bool_4 = False
    var_17 = maybe_0.get_or_else(bool_4)
    var_18 = maybe_0.to_either()
    var_19 = var_18.to_box()
    var_17.to_try()


def test_case_20():
    bytes_0 = b"\x07\x04\x1bd\xc3\xaf\x08@"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.map(bytes_0)
    none_type_0 = None
    var_1 = var_0.ap(none_type_0)
    var_2 = maybe_0.to_try()
    complex_0 = 2780.1 - 742.995j
    var_3 = var_0.filter(var_2)
    var_4 = var_2.get_or_else(var_2)
    bytes_1 = b"\xe4\x84\xc08\xa7\xcd=\x807"
    bool_0 = True
    bool_1 = maybe_0.__eq__(maybe_0)
    var_5 = var_0.ap(bytes_0)
    maybe_1 = module_0.Maybe(bytes_1, bool_0)
    var_6 = var_5.ap(var_4)
    var_7 = maybe_1.bind(var_4)
    var_8 = maybe_1.ap(complex_0)
    var_9 = var_8.to_lazy()
    var_10 = var_8.get_or_else(var_1)
    maybe_2 = module_0.Maybe(bytes_0, var_2)
    var_11 = maybe_2.bind(var_1)
    bool_2 = var_11.__eq__(maybe_0)
    var_12 = var_3.filter(var_10)
    var_9.to_lazy()


def test_case_21():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_try()
    var_1.to_either()
