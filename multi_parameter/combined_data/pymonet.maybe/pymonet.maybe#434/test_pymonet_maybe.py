# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    float_0 = 1410.738
    maybe_0 = module_0.Maybe(float_0, float_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.ap(bool_0)
    bool_1 = var_0.__eq__(var_0)
    bool_2 = var_0.__eq__(bool_1)
    var_1 = maybe_0.map(maybe_0)
    var_2 = maybe_0.map(var_0)
    var_3 = maybe_0.to_lazy()
    var_4 = maybe_0.get_or_else(maybe_0)


def test_case_3():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.map(maybe_0)


def test_case_4():
    set_0 = set()
    bool_0 = True
    maybe_0 = module_0.Maybe(set_0, bool_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.filter(var_0)
    var_2 = maybe_0.bind(set_0)
    var_3 = var_2.map(var_2)
    var_4 = var_3.ap(maybe_0)
    var_5 = var_2.to_lazy()
    maybe_1 = module_0.Maybe(var_1, var_0)
    var_6 = var_4.bind(var_4)
    var_7 = maybe_0.filter(var_6)
    var_8 = var_6.to_box()
    var_9 = var_2.to_try()
    var_10 = var_7.to_validation()
    none_type_0 = None
    maybe_2 = module_0.Maybe(var_9, none_type_0)
    maybe_2.filter(maybe_0)


def test_case_5():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_lazy()
    bool_1 = maybe_0.__eq__(maybe_0)
    var_1 = maybe_0.to_either()
    var_2 = var_1.to_box()
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    maybe_1.bind(var_2)


def test_case_6():
    bool_0 = False
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    maybe_0.ap(maybe_0)


def test_case_7():
    complex_0 = 5612.875335 - 894.5j
    maybe_0 = module_0.Maybe(complex_0, complex_0)
    var_0 = maybe_0.filter(complex_0)
    bool_0 = False
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    maybe_1.filter(maybe_0)


def test_case_8():
    str_0 = "\n        Take mapper function and return value of Left.\n\n        :returns: Stored value\n        :rtype: A\n        "
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.get_or_else(str_0)
    var_0.to_lazy()


def test_case_9():
    float_0 = -1810.28466
    bool_0 = True
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.get_or_else(float_0)


def test_case_10():
    none_type_0 = None
    float_0 = -928.829572
    maybe_0 = module_0.Maybe(float_0, float_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.to_lazy()
    var_0.get_or_else(none_type_0)


def test_case_11():
    complex_0 = 5612.875335 - 894.5j
    maybe_0 = module_0.Maybe(complex_0, complex_0)
    var_0 = maybe_0.filter(complex_0)
    bool_0 = False
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    var_1 = maybe_1.to_either()
    maybe_1.filter(maybe_0)


def test_case_12():
    str_0 = "\n    The Either type represents values with two possibilities: B value of type Either[A, B] is either Left[A or Right[B]\n    But not both in the same time.\n    "
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.ap(none_type_0)
    var_1 = var_0.to_box()
    var_2 = var_1.to_either()
    var_2.ap(str_0)


def test_case_13():
    none_type_0 = None
    dict_0 = {}
    maybe_0 = module_0.Maybe(dict_0, dict_0)
    var_0 = maybe_0.to_box()
    var_0.ap(none_type_0)


def test_case_14():
    bool_0 = False
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.filter(bool_0)
    var_1 = var_0.ap(bool_0)
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    var_2 = maybe_1.to_lazy()
    maybe_1.filter(bool_0)


def test_case_15():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.ap(none_type_0)
    var_1 = var_0.to_box()
    var_2 = var_1.to_either()
    var_3 = var_1.to_validation()
    var_4 = var_0.to_either()
    var_5 = maybe_0.filter(var_0)
    var_6 = maybe_0.to_validation()
    var_7 = var_6.to_box()
    var_8 = var_0.to_try()


def test_case_16():
    bool_0 = True
    bool_1 = False
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_1, none_type_0)
    var_0 = maybe_0.to_try()
    var_1 = var_0.get_or_else(bool_0)
    var_1.to_try()


def test_case_17():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.to_box()
    var_1.to_box()


def test_case_18():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_validation()
    var_1 = var_0.to_try()
    var_1.to_validation()


def test_case_19():
    bool_0 = False
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.filter(bool_0)
    var_1 = var_0.ap(bool_0)
    var_2 = var_1.to_lazy()
    var_3 = var_2.to_try()
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    var_4 = maybe_1.to_lazy()
    maybe_1.filter(bool_0)


def test_case_20():
    bytes_0 = b"\xdd\xab~'2HHf\xf5\xc59\xc6=!\x06\x9aC"
    bool_0 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    maybe_1 = module_0.Maybe(bool_0, bytes_0)
    var_0 = maybe_0.to_box()
    bool_1 = maybe_0.__eq__(maybe_0)
    var_1 = maybe_0.get_or_else(bytes_0)
    var_1.to_box()


def test_case_21():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.get_or_else(none_type_0)
    var_2 = var_0.to_validation()
    var_3 = maybe_0.get_or_else(none_type_0)
    maybe_0.filter(maybe_0)


def test_case_22():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.map(bool_0)
    var_1 = maybe_0.ap(maybe_0)
    bool_1 = var_0.__eq__(var_1)
    var_2 = var_0.map(maybe_0)
    var_3 = maybe_0.bind(var_1)
    var_4 = var_3.to_either()
    maybe_1 = module_0.Maybe(var_0, var_1)
    var_5 = maybe_1.to_validation()
    var_6 = var_1.ap(var_1)
    var_7 = var_6.ap(var_6)
    var_8 = var_6.to_box()
    var_9 = var_8.to_try()
    var_10 = maybe_0.ap(var_0)
    var_11 = maybe_0.ap(var_3)
    float_0 = 2692.85372
    var_12 = var_0.get_or_else(var_0)
    var_13 = var_0.to_validation()
    bool_2 = var_0.__eq__(maybe_1)
    maybe_2 = module_0.Maybe(var_9, var_12)
    bool_3 = True
    bool_4 = False
    maybe_3 = module_0.Maybe(float_0, bool_4)
    var_14 = maybe_2.to_either()
    maybe_4 = module_0.Maybe(bool_3, var_0)
    var_15 = var_10.get_or_else(maybe_4)
    var_16 = var_3.to_validation()
    var_17 = var_2.bind(bool_2)
    var_9.to_try()
