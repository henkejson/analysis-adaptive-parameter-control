# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    bool_0 = True
    object_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_lazy()
    maybe_0.bind(var_0)


def test_case_3():
    int_0 = -850
    complex_0 = -746.8657 + 3637.1071j
    maybe_0 = module_0.Maybe(complex_0, complex_0)
    var_0 = maybe_0.map(int_0)
    bool_0 = var_0.__eq__(complex_0)
    var_1 = var_0.to_try()


def test_case_4():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.get_or_else(maybe_0)
    maybe_0.map(var_0)


def test_case_5():
    none_type_0 = None
    complex_0 = -1563.727 - 1026.2687j
    bool_0 = True
    maybe_0 = module_0.Maybe(complex_0, bool_0)
    var_0 = maybe_0.ap(none_type_0)
    var_1 = var_0.get_or_else(none_type_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    var_2 = var_0.to_validation()
    bool_2 = maybe_0.__eq__(bool_1)
    var_3 = maybe_0.to_either()
    bool_3 = True
    maybe_1 = module_0.Maybe(var_0, bool_3)
    var_4 = var_0.to_try()
    var_5 = maybe_1.to_either()
    var_6 = var_0.ap(complex_0)
    var_7 = maybe_1.get_or_else(maybe_0)
    var_8 = var_7.to_box()
    var_9 = var_0.filter(var_7)
    var_10 = maybe_0.map(bool_1)
    var_11 = var_6.bind(var_2)
    var_12 = maybe_1.ap(maybe_0)


def test_case_6():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.ap(bool_0)
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_1 = var_0.to_box()
    var_2 = maybe_0.filter(var_0)
    maybe_1.filter(bool_0)


def test_case_7():
    none_type_0 = None
    none_type_1 = None
    maybe_0 = module_0.Maybe(none_type_1, none_type_1)
    maybe_0.ap(none_type_0)


def test_case_8():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.ap(bool_0)
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_1 = maybe_0.filter(var_0)
    var_2 = var_0.get_or_else(var_1)
    maybe_1.filter(bool_0)


def test_case_9():
    tuple_0 = ()
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.get_or_else(tuple_0)


def test_case_10():
    float_0 = -605.891505
    bool_0 = False
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.ap(float_0)
    var_1 = var_0.to_lazy()
    var_2 = var_1.to_try()
    bool_2 = True
    maybe_1 = module_0.Maybe(float_0, bool_2)
    bool_3 = maybe_1.__eq__(float_0)
    var_3 = maybe_1.to_either()


def test_case_11():
    none_type_0 = None
    str_0 = "8"
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.get_or_else(none_type_0)
    maybe_1 = module_0.Maybe(str_0, str_0)
    var_1 = maybe_1.to_lazy()
    var_2 = maybe_0.to_either()
    var_2.to_either()


def test_case_12():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_try()
    var_1.to_lazy()


def test_case_13():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_try()
    maybe_1 = module_0.Maybe(bool_0, bool_0)


def test_case_14():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_try()
    var_0.to_validation()


def test_case_15():
    set_0 = set()
    complex_0 = -637.889 - 2681.84j
    maybe_0 = module_0.Maybe(complex_0, complex_0)
    var_0 = maybe_0.to_validation()
    var_1 = var_0.to_box()
    var_1.bind(set_0)


def test_case_16():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.to_box()
    var_2 = var_1.to_lazy()
    var_0.filter(maybe_0)


def test_case_17():
    bool_0 = False
    str_0 = "TEg"
    tuple_0 = (bool_0, str_0)
    list_0 = [tuple_0]
    maybe_0 = module_0.Maybe(list_0, tuple_0)
    var_0 = maybe_0.to_lazy()
    bool_1 = False
    maybe_1 = module_0.Maybe(maybe_0, bool_1)
    var_1 = maybe_1.to_try()
    var_2 = maybe_0.filter(var_1)
    bool_2 = maybe_0.__eq__(var_2)
    var_3 = maybe_1.to_try()
    var_3.to_lazy()


def test_case_18():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_try()
    bool_1 = maybe_0.__eq__(bool_0)
    bool_2 = maybe_0.__eq__(maybe_0)
    var_1 = maybe_0.to_box()
    var_2 = maybe_0.to_box()
    var_3 = var_2.ap(maybe_0)
    var_0.ap(bool_0)


def test_case_19():
    int_0 = 193
    list_0 = []
    bool_0 = False
    maybe_0 = module_0.Maybe(list_0, bool_0)
    bool_1 = maybe_0.__eq__(int_0)
    str_0 = "\n    Immutable list is data structure that doesn't allow to mutate instances\n    "
    maybe_1 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_1.to_try()
    var_2 = maybe_0.get_or_else(var_1)
    var_3 = var_0.map(maybe_0)
    var_4 = maybe_1.get_or_else(int_0)
    var_5 = var_0.to_box()
    bool_2 = maybe_0.__eq__(int_0)
    var_4.to_box()
