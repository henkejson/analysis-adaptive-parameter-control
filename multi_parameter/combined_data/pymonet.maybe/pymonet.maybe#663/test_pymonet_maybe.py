# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    dict_0 = {}
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.filter(dict_0)
    var_1 = maybe_0.filter(bool_1)
    bool_2 = maybe_0.__eq__(dict_0)
    bool_3 = True
    maybe_1 = module_0.Maybe(bool_3, bool_3)
    list_0 = []
    maybe_2 = module_0.Maybe(list_0, list_0)
    maybe_2.filter(var_1)


def test_case_3():
    tuple_0 = ()
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, tuple_0)
    bool_0 = maybe_0.__eq__(tuple_0)
    maybe_1 = module_0.Maybe(tuple_0, tuple_0)
    maybe_2 = module_0.Maybe(tuple_0, maybe_1)
    maybe_1.map(maybe_1)


def test_case_4():
    int_0 = 4537
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.to_validation()
    var_2 = maybe_0.map(var_1)
    var_3 = var_1.to_lazy()
    var_4 = maybe_0.bind(int_0)
    var_5 = maybe_0.to_either()
    var_6 = maybe_0.to_lazy()
    var_7 = var_6.to_box()
    var_8 = var_7.to_validation()
    var_9 = maybe_0.get_or_else(var_2)


def test_case_5():
    bool_0 = True
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_1, bool_1)
    maybe_0.bind(bool_0)


def test_case_6():
    float_0 = -2346.17
    dict_0 = {}
    none_type_0 = None
    maybe_0 = module_0.Maybe(dict_0, none_type_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_either()
    maybe_1 = module_0.Maybe(var_1, var_0)
    var_2 = maybe_1.ap(float_0)
    bool_0 = var_2.__eq__(var_1)


def test_case_7():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.get_or_else(maybe_0)
    maybe_0.ap(none_type_0)


def test_case_8():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.filter(bool_0)
    list_0 = []
    maybe_1 = module_0.Maybe(list_0, list_0)
    maybe_1.filter(var_0)


def test_case_9():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    bool_1 = False
    maybe_0 = module_0.Maybe(dict_0, bool_1)
    var_0 = maybe_0.to_box()
    none_type_0 = None
    var_1 = maybe_0.get_or_else(none_type_0)
    maybe_0.filter(var_1)


def test_case_10():
    str_0 = "H:EQa"
    set_0 = {str_0, str_0, str_0, str_0}
    maybe_0 = module_0.Maybe(set_0, set_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_try()
    var_1.to_lazy()


def test_case_11():
    none_type_0 = None
    dict_0 = {none_type_0: none_type_0, none_type_0: none_type_0}
    bool_0 = False
    maybe_0 = module_0.Maybe(dict_0, bool_0)
    var_0 = maybe_0.to_either()
    bool_1 = False
    maybe_1 = module_0.Maybe(none_type_0, bool_1)
    maybe_1.map(var_0)


def test_case_12():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_box()


def test_case_13():
    bool_0 = False
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_either()
    var_1.to_either()


def test_case_14():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.bind(bool_0)
    var_1 = maybe_0.filter(var_0)
    var_2 = var_1.bind(var_0)
    var_3 = maybe_0.to_validation()
    var_4 = var_2.bind(var_2)
    var_5 = var_0.to_try()
    bool_1 = maybe_0.__eq__(var_3)
    list_0 = []
    maybe_1 = module_0.Maybe(list_0, list_0)
    maybe_1.filter(var_5)


def test_case_15():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.to_either()
    var_2 = var_1.to_box()
    bool_0 = False
    maybe_1 = module_0.Maybe(maybe_0, bool_0)
    none_type_1 = None
    bool_1 = True
    var_3 = var_0.get_or_else(var_0)
    maybe_2 = module_0.Maybe(none_type_1, bool_1)
    var_4 = maybe_0.to_box()
    var_5 = maybe_2.to_either()
    var_6 = var_5.to_try()
    var_6.ap(var_6)


def test_case_16():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_validation()


def test_case_17():
    str_0 = "\rf}?JBM~"
    none_type_0 = None
    none_type_1 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_1, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = var_0.to_try()
    var_2 = var_1.get_or_else(none_type_0)
    var_2.filter(str_0)


def test_case_18():
    complex_0 = -346.6 - 2894.72140823617j
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, complex_0)
    var_0 = maybe_0.bind(complex_0)
    var_1 = maybe_0.to_try()
    var_2 = var_0.to_lazy()
    maybe_1 = module_0.Maybe(complex_0, complex_0)
    var_3 = maybe_1.bind(complex_0)
    var_4 = var_3.map(complex_0)
    var_5 = var_4.to_box()
    maybe_2 = module_0.Maybe(var_5, var_4)
    var_6 = maybe_2.bind(var_2)
    str_0 = "\n        Returns Lazy with function returning argument.\n\n        :param value: value to return by Lazy constructor_fn\n        :type value: Any\n        :returns: Lazy with function returning argument\n        :rtype: Lazy[Function() -> A]\n        "
    var_7 = var_0.to_either()
    none_type_1 = None
    var_8 = var_7.ap(none_type_1)
    list_0 = [str_0, str_0, str_0]
    maybe_3 = module_0.Maybe(list_0, str_0)
    bool_0 = maybe_3.__eq__(maybe_0)
    var_9 = var_7.to_box()
    var_1.to_validation()


def test_case_19():
    tuple_0 = ()
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    none_type_1 = None
    var_0 = maybe_0.to_either()
    bool_0 = maybe_0.__eq__(none_type_0)
    maybe_1 = module_0.Maybe(none_type_1, none_type_1)
    int_0 = 3931
    var_1 = maybe_1.get_or_else(int_0)
    maybe_2 = module_0.Maybe(tuple_0, none_type_1)
    bool_1 = maybe_2.__eq__(maybe_1)
    maybe_3 = module_0.Maybe(none_type_1, none_type_1)
    var_2 = maybe_0.to_lazy()
    var_3 = var_2.to_try()
    maybe_1.filter(maybe_1)
