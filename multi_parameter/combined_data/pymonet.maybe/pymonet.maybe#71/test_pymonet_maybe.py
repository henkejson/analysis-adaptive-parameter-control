# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    str_0 = "lff]3Bku"
    maybe_0 = module_0.Maybe(str_0, str_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    int_0 = 600
    bytes_0 = b"\xf9\x0etJ\xf0\x81w&\xe4\xcd\xe8\xf8\x80Q\xe3;"
    tuple_0 = (bytes_0,)
    dict_0 = {int_0: int_0, int_0: int_0, int_0: bytes_0, bytes_0: tuple_0}
    list_0 = [bytes_0]
    none_type_0 = None
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.bind(none_type_0)
    var_2 = var_1.ap(int_0)
    var_3 = var_2.to_either()
    maybe_1 = module_0.Maybe(list_0, var_3)
    var_4 = maybe_1.bind(dict_0)
    var_5 = maybe_1.get_or_else(var_4)
    bool_0 = maybe_1.__eq__(bytes_0)
    maybe_2 = module_0.Maybe(var_4, var_4)
    var_6 = var_5.filter(maybe_2)
    var_7 = var_6.to_box()
    var_7.map(var_3)


def test_case_3():
    bytes_0 = b"gY|\t\x89\xc5\x97\xec\x94\\"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.map(var_0)
    var_2 = maybe_0.bind(maybe_0)


def test_case_4():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_validation()
    maybe_0.ap(maybe_0)


def test_case_5():
    float_0 = -47.0
    tuple_0 = ()
    bool_0 = False
    maybe_0 = module_0.Maybe(tuple_0, bool_0)
    maybe_0.bind(float_0)


def test_case_6():
    complex_0 = 2389.82244 + 1350.1j
    bool_0 = True
    maybe_0 = module_0.Maybe(complex_0, bool_0)
    var_0 = maybe_0.to_box()
    none_type_0 = None
    var_1 = maybe_0.get_or_else(none_type_0)
    var_2 = maybe_0.ap(complex_0)
    var_3 = maybe_0.map(var_2)
    var_4 = maybe_0.ap(complex_0)


def test_case_7():
    bool_0 = True
    float_0 = -2406.0
    none_type_0 = None
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_1, none_type_0)
    var_0 = maybe_0.to_lazy()
    maybe_1 = module_0.Maybe(float_0, none_type_0)
    var_1 = maybe_1.to_either()
    var_2 = var_0.ap(var_1)
    maybe_1.ap(bool_0)


def test_case_8():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    var_1 = maybe_0.filter(bool_0)
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    var_2 = maybe_1.to_try()
    var_3 = maybe_1.to_either()


def test_case_9():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    maybe_0.filter(bool_0)


def test_case_10():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_either()
    var_0.ap(none_type_0)


def test_case_11():
    float_0 = -4592.0866
    bool_0 = False
    maybe_0 = module_0.Maybe(float_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.get_or_else(float_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(var_0, bool_1)
    var_2 = maybe_0.to_either()
    maybe_2 = module_0.Maybe(bool_0, maybe_0)
    var_1.to_try()


def test_case_12():
    int_0 = 600
    bytes_0 = b"\xe0\xe79\x85\x7f\x96'\x89\xa2\x9e\x92"
    none_type_0 = None
    list_0 = [bytes_0]
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.map(list_0)
    var_1 = var_0.ap(int_0)
    var_2 = var_1.to_either()
    maybe_1 = module_0.Maybe(list_0, var_2)
    var_3 = maybe_1.filter(none_type_0)
    var_4 = var_0.to_box()
    bool_0 = var_1.__eq__(var_1)
    var_5 = maybe_1.to_lazy()


def test_case_13():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_0.get_or_else(none_type_0)


def test_case_14():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_try()


def test_case_15():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_try()
    maybe_0.filter(var_0)


def test_case_16():
    bool_0 = False
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_0, none_type_0)
    bytes_0 = b";\xd7\xe3=\xf21\xe4\xa7j\xa2a\x0c\xe8\x81{p\x84\xd4<g"
    maybe_1 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_1.to_validation()
    var_0.map(maybe_0)


def test_case_17():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_validation()
    bool_1 = False
    maybe_1 = module_0.Maybe(maybe_0, bool_1)
    bool_2 = False
    maybe_2 = module_0.Maybe(none_type_0, bool_2)
    var_1 = maybe_2.to_try()


def test_case_18():
    bytes_0 = b"]n\xdfC\xf3\xac\x91\x8d\x00"
    bytes_0.ap(bytes_0)


def test_case_19():
    int_0 = -2512
    bool_0 = False
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.map(int_0)
    var_1.to_either()


def test_case_20():
    float_0 = -3331.0
    tuple_0 = (float_0,)
    bool_0 = True
    maybe_0 = module_0.Maybe(tuple_0, bool_0)
    bytes_0 = b"\xe1\xe9"
    bool_1 = True
    bool_2 = True
    maybe_1 = module_0.Maybe(bool_1, bool_2)
    var_0 = maybe_1.to_try()
    var_1 = maybe_1.to_lazy()
    var_2 = maybe_1.filter(bytes_0)
    var_3 = maybe_1.bind(var_1)
    var_4 = var_2.to_validation()
    var_5 = var_1.ap(float_0)
    bytes_1 = b"\x11\x85|\xce\x8e\xc9\x8e)H2\xde\xadA\xe0\xd0Ez\xc6\xee"
    var_6 = var_2.to_try()
    var_7 = var_2.to_validation()
    bool_3 = False
    maybe_2 = module_0.Maybe(bytes_1, bool_3)
    bool_4 = maybe_2.__eq__(var_2)
    var_8 = var_1.bind(var_7)


def test_case_21():
    int_0 = 600
    bytes_0 = b"\xf9\x0etJ\xf0\x81w&\xe4\xcd\xe8\xf8\x80Q\xe3;"
    tuple_0 = (bytes_0,)
    dict_0 = {int_0: int_0, int_0: int_0, int_0: bytes_0, bytes_0: tuple_0}
    bytes_1 = b"\x10+\x94m\x90\x1f\xe3\x07K\xab\xa1\x04\xc7\x1fVC\xd0\x0e\x03\x1c"
    none_type_0 = None
    none_type_1 = None
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.map(var_0)
    var_2 = var_1.map(none_type_1)
    var_3 = var_2.filter(int_0)
    var_4 = var_3.bind(none_type_0)
    var_5 = var_4.ap(bytes_1)
    var_6 = var_2.to_lazy()
    var_7 = var_6.to_either()
    maybe_1 = module_0.Maybe(dict_0, var_0)
    var_8 = maybe_1.bind(var_6)
    var_9 = var_2.get_or_else(var_3)
    bool_0 = var_0.__eq__(var_1)
    none_type_2 = None
    var_10 = var_3.bind(var_3)
    var_11 = var_5.ap(tuple_0)
    var_12 = var_7.to_lazy()
    var_13 = var_1.filter(var_1)
    bool_1 = var_2.__eq__(var_13)
    var_14 = var_2.get_or_else(none_type_2)
    var_15 = var_3.bind(var_11)
