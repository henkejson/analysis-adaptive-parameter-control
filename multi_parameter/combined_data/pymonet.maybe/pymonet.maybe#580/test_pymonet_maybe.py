# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_either()
    maybe_1 = module_0.Maybe(var_0, var_0)
    var_1 = maybe_1.bind(var_0)
    bool_1 = var_1.__eq__(maybe_1)
    var_2 = var_0.to_box()
    var_0.bind(var_2)


def test_case_3():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.bind(var_0)
    bool_1 = var_1.__eq__(var_0)
    var_2 = var_0.to_box()
    var_3 = var_0.bind(var_2)
    var_4 = maybe_0.bind(var_2)
    var_5 = maybe_0.filter(var_2)


def test_case_4():
    none_type_0 = None
    int_0 = 1
    maybe_0 = module_0.Maybe(int_0, int_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.filter(none_type_0)
    var_1 = maybe_0.to_either()
    var_2 = var_0.get_or_else(none_type_0)
    var_3 = var_0.map(var_1)
    bool_1 = True
    var_4 = maybe_0.filter(none_type_0)
    complex_0 = 845 + 1785.7j
    var_5 = var_0.filter(complex_0)
    var_6 = var_0.filter(bool_1)
    bool_2 = maybe_0.__eq__(var_5)
    var_7 = var_6.get_or_else(int_0)
    var_8 = var_3.to_try()
    var_9 = maybe_0.to_try()
    var_10 = var_0.to_lazy()
    bool_3 = var_5.__eq__(maybe_0)
    var_11 = var_5.to_try()
    var_12 = var_6.filter(var_8)
    var_13 = var_4.to_box()


def test_case_5():
    none_type_0 = None
    none_type_1 = None
    maybe_0 = module_0.Maybe(none_type_1, none_type_1)
    maybe_0.map(none_type_0)


def test_case_6():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.to_validation()
    maybe_1 = module_0.Maybe(var_0, var_0)
    var_2 = maybe_1.bind(var_0)
    bool_1 = var_2.__eq__(maybe_1)
    var_3 = maybe_1.to_either()
    maybe_0.bind(var_3)


def test_case_7():
    float_0 = -1694.9
    int_0 = 2734
    bytes_0 = b"7\xc4\xf5c\xd5\xc7\x1fL\x98\xc3\x9cVYI"
    maybe_0 = module_0.Maybe(int_0, float_0)
    var_0 = maybe_0.ap(bytes_0)
    var_1 = var_0.to_box()
    var_1.bind(int_0)


def test_case_8():
    tuple_0 = ()
    maybe_0 = module_0.Maybe(tuple_0, tuple_0)
    maybe_0.ap(tuple_0)


def test_case_9():
    str_0 = "\n    Create a new function that, when invoked,\n    caches the result of calling fn for a given argument set and returns the result.\n    Subsequent calls to the memoized fn with the same argument set will not result in an additional call to fn;\n    instead, the cached result for that set of arguments will be returned.\n\n    :param fn: function to invoke\n    :type fn: Function(A) -> B\n    :param key: function to decide if result should be taken from cache\n    :type key: Function(A, A) -> Boolean\n    :returns: new function invoking old one\n    :rtype: Function(A) -> B\n    "
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(maybe_0, none_type_0)
    bool_1 = True
    bool_2 = False
    maybe_2 = module_0.Maybe(bool_1, bool_2)
    maybe_2.filter(maybe_1)


def test_case_10():
    bytes_0 = b"\xf0Myg7*\xd8`O\xec/\xa2\x86>"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.get_or_else(bytes_0)
    var_0.to_try()


def test_case_11():
    bytes_0 = b"\rR\x96xI`*9\xa6\x9f\xa0\rE\xab\xcc\x10{"
    none_type_0 = None
    none_type_1 = None
    maybe_0 = module_0.Maybe(bytes_0, none_type_1)
    var_0 = maybe_0.get_or_else(none_type_0)
    var_0.get_or_else(bytes_0)


def test_case_12():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_try()
    var_1.to_box()


def test_case_13():
    none_type_0 = None
    bytes_0 = b"0"
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.filter(none_type_0)
    var_1 = var_0.to_box()
    none_type_1 = None
    maybe_1 = module_0.Maybe(none_type_1, none_type_1)
    maybe_1.filter(var_1)


def test_case_14():
    bytes_0 = b"=\\D\xbc\xd7\xb6\x89\xeb\x13m\x98\xc4M\xe6H\x17\xbc\xff\x9c"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    bool_0 = maybe_0.__eq__(bytes_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.filter(bool_0)
    var_2 = maybe_0.filter(var_0)
    var_3 = maybe_0.get_or_else(var_1)
    none_type_0 = None
    var_4 = maybe_0.map(var_1)
    var_5 = maybe_0.ap(none_type_0)
    var_6 = maybe_0.to_either()
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    var_7 = maybe_1.to_box()
    bool_1 = maybe_0.__eq__(var_3)
    var_8 = maybe_0.to_box()
    var_8.map(var_6)


def test_case_15():
    none_type_0 = None
    int_0 = 1
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_either()
    maybe_1 = module_0.Maybe(int_0, int_0)
    bool_1 = maybe_1.__eq__(maybe_1)
    var_2 = maybe_1.filter(none_type_0)
    var_3 = maybe_1.to_either()
    bool_2 = True
    complex_0 = 845 + 1785.7j
    var_4 = var_2.filter(complex_0)
    var_5 = var_2.filter(bool_2)
    var_6 = maybe_1.to_lazy()
    var_7 = var_2.get_or_else(none_type_0)
    var_8 = var_2.to_try()
    maybe_2 = module_0.Maybe(var_4, var_7)
    maybe_2.filter(var_3)


def test_case_16():
    bytes_0 = b"\xc6e\x93\xde\x0c\xbd\xb7\xa1\x0c\xa8\x9b\xfa\xa0\xa4\xb1u"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    bool_0 = False
    maybe_0 = module_0.Maybe(list_0, bool_0)
    var_0 = maybe_0.to_lazy()


def test_case_17():
    float_0 = 810.0
    maybe_0 = module_0.Maybe(float_0, float_0)
    var_0 = maybe_0.to_try()
    bool_0 = var_0.__eq__(float_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(float_0, none_type_0)


def test_case_18():
    list_0 = []
    bool_0 = False
    maybe_0 = module_0.Maybe(list_0, bool_0)
    var_0 = maybe_0.to_try()
    var_1 = var_0.get_or_else(var_0)
    maybe_1 = module_0.Maybe(list_0, bool_0)
    var_1.to_try()


def test_case_19():
    list_0 = []
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_0.ap(list_0)


def test_case_20():
    bytes_0 = b""
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, bytes_0)
    var_0 = maybe_0.to_validation()


def test_case_21():
    str_0 = "\n    Max is a Monoid that will combines 2 numbers, resulting in the largest of the two.\n    "
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    none_type_0 = None
    var_0 = maybe_0.to_try()
    maybe_1 = module_0.Maybe(none_type_0, str_0)
    var_1 = maybe_1.to_lazy()
    var_2 = var_1.to_either()
    var_2.map(bool_0)


def test_case_22():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_try()
    var_1.to_either()


def test_case_23():
    none_type_0 = None
    int_0 = 1
    maybe_0 = module_0.Maybe(int_0, int_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_either()
    var_0.get_or_else(none_type_0)


def test_case_24():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_lazy()
    maybe_0.filter(var_0)
