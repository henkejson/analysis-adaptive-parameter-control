# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    bytes_0 = b"\x86\xff'\xdf\x00F~\xdd"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)


def test_case_1():
    list_0 = []
    maybe_0 = module_0.Maybe(list_0, list_0)


def test_case_2():
    int_0 = 414
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.ap(maybe_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    none_type_0 = None
    var_1 = maybe_0.get_or_else(int_0)
    var_1.ap(none_type_0)


def test_case_3():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = maybe_0.__eq__(none_type_0)
    var_0 = maybe_0.filter(none_type_0)
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_1 = maybe_1.to_box()
    maybe_1.filter(bool_0)


def test_case_4():
    int_0 = 2327
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.map(int_0)
    var_1 = maybe_0.to_box()
    var_1.filter(int_0)


def test_case_5():
    str_0 = "{"
    set_0 = {str_0, str_0, str_0}
    bool_0 = False
    maybe_0 = module_0.Maybe(set_0, bool_0)
    maybe_0.map(set_0)


def test_case_6():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = maybe_0.__eq__(none_type_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.to_lazy()
    bool_2 = True
    maybe_1 = module_0.Maybe(bool_0, bool_2)
    var_2 = maybe_0.bind(none_type_0)
    var_3 = maybe_1.map(var_0)
    var_4 = var_3.bind(var_0)
    var_5 = var_4.filter(var_0)
    var_6 = var_3.to_validation()
    maybe_2 = module_0.Maybe(maybe_1, maybe_0)


def test_case_7():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.get_or_else(none_type_0)
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_1 = maybe_1.to_try()
    var_2 = maybe_0.to_either()
    var_3 = maybe_1.to_try()
    maybe_0.bind(var_3)


def test_case_8():
    str_0 = "qStwFV\\$$"
    list_0 = []
    int_0 = 1
    str_1 = "\n        Applies the function inside the Maybe[A] structure to another applicative type for notempty Maybe.\n        For empty returns copy of itself\n\n        :param applicative: applicative contains function\n        :type applicative: Maybe[B]\n        :returns: new Maybe with result of contains function\n        :rtype: Maybe[A(B) | None]\n        "
    set_0 = {str_1, str_1, str_1}
    bool_0 = True
    maybe_0 = module_0.Maybe(set_0, bool_0)
    var_0 = maybe_0.ap(int_0)
    var_1 = var_0.ap(list_0)
    var_2 = var_1.get_or_else(str_0)
    var_2.to_either()


def test_case_9():
    float_0 = 735.07148
    bool_0 = False
    maybe_0 = module_0.Maybe(float_0, bool_0)
    maybe_0.ap(float_0)


def test_case_10():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_1 = module_0.Maybe(maybe_0, maybe_0)
    var_0 = maybe_1.filter(bool_0)
    maybe_0.filter(bool_0)


def test_case_11():
    str_0 = " 6\x0bcQ]L"
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0}
    maybe_0 = module_0.Maybe(dict_0, dict_0)
    var_0 = maybe_0.get_or_else(str_0)


def test_case_12():
    float_0 = -79.781
    bool_0 = False
    maybe_0 = module_0.Maybe(float_0, bool_0)
    maybe_1 = module_0.Maybe(maybe_0, bool_0)
    var_0 = maybe_0.get_or_else(maybe_1)
    var_1 = maybe_0.to_try()
    maybe_2 = module_0.Maybe(var_0, var_0)
    var_2 = maybe_2.filter(float_0)
    maybe_0.filter(var_0)


def test_case_13():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = maybe_0.__eq__(none_type_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    var_1 = var_0.to_either()
    var_2 = maybe_0.filter(var_0)
    var_3 = maybe_0.filter(none_type_0)
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_4 = maybe_1.to_box()
    maybe_1.filter(var_3)


def test_case_14():
    str_0 = "mUHYq\x0cwq^[6;e"
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    maybe_1 = module_0.Maybe(str_0, str_0)
    maybe_2 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_2.to_lazy()
    var_1 = maybe_2.to_box()


def test_case_15():
    float_0 = -79.781
    bool_0 = False
    maybe_0 = module_0.Maybe(float_0, bool_0)
    maybe_1 = module_0.Maybe(maybe_0, bool_0)
    var_0 = maybe_1.to_try()
    var_1 = maybe_0.to_lazy()
    maybe_2 = module_0.Maybe(var_0, var_0)
    var_2 = maybe_2.filter(float_0)
    maybe_0.filter(var_0)


def test_case_16():
    float_0 = -79.781
    bool_0 = False
    maybe_0 = module_0.Maybe(float_0, bool_0)
    var_0 = maybe_0.to_try()
    maybe_1 = module_0.Maybe(var_0, var_0)
    var_1 = maybe_1.filter(float_0)
    maybe_0.filter(var_0)


def test_case_17():
    int_0 = 1043
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_0.map(int_0)


def test_case_18():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.filter(none_type_0)
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_1 = maybe_1.to_validation()
    maybe_1.filter(bool_0)


def test_case_19():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = maybe_0.__eq__(none_type_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.filter(var_0)
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_2 = var_1.to_lazy()
    var_3 = var_2.to_validation()
    maybe_1.filter(maybe_1)


def test_case_20():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    none_type_0 = None
    maybe_0 = module_0.Maybe(set_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    bool_1 = maybe_0.__eq__(bool_0)
    var_1 = maybe_0.to_box()
    var_2 = var_1.to_validation()
    maybe_1 = module_0.Maybe(set_0, none_type_0)
    bool_2 = maybe_1.__eq__(maybe_1)
    bool_3 = maybe_1.__eq__(maybe_1)
    bool_4 = maybe_0.__eq__(bool_2)
    maybe_2 = module_0.Maybe(bool_1, bool_2)
    var_3 = maybe_1.to_validation()
    bool_5 = maybe_1.__eq__(set_0)
    var_4 = var_0.to_either()
    var_5 = var_1.to_validation()
    var_1.filter(maybe_2)


def test_case_21():
    float_0 = 560.09373
    maybe_0 = module_0.Maybe(float_0, float_0)
    tuple_0 = ()
    var_0 = maybe_0.ap(maybe_0)
    bool_0 = False
    var_1 = maybe_0.ap(bool_0)
    float_1 = 585.978
    var_2 = maybe_0.filter(tuple_0)
    var_3 = var_1.to_either()
    var_4 = var_3.to_lazy()
    bool_1 = True
    list_0 = [var_2, float_0, bool_1]
    var_5 = var_2.ap(list_0)
    none_type_0 = None
    bool_2 = var_0.__eq__(none_type_0)
    var_6 = maybe_0.get_or_else(var_4)
    var_7 = var_3.to_box()
    var_8 = maybe_0.ap(var_7)
    var_9 = maybe_0.filter(float_0)
    var_10 = var_0.map(var_8)
    var_11 = var_10.ap(var_7)
    var_12 = var_1.ap(float_1)
    maybe_1 = module_0.Maybe(var_4, var_8)
    bool_3 = maybe_0.__eq__(var_5)
    var_13 = var_2.map(var_11)
    var_14 = var_13.get_or_else(var_1)
    var_15 = var_5.ap(none_type_0)
    var_16 = var_4.ap(var_6)
    var_17 = var_12.to_lazy()
    var_18 = var_6.bind(var_5)
    var_19 = var_13.to_box()
    var_20 = maybe_1.to_lazy()
    var_21 = maybe_0.to_lazy()
