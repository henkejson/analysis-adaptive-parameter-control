# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1
import builtins as module_2


def test_case_0():
    bytes_0 = b"\xe4\x8cw\xb5\x8a$\xab\xa4\xc7"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    float_0 = -2031.0
    bool_0 = True
    maybe_0 = module_0.Maybe(float_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = module_0.Maybe(var_0, bool_0)
    bool_1 = var_1.__eq__(var_1)


def test_case_3():
    str_0 = ""
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = maybe_0.__eq__(str_0)
    maybe_0.ap(none_type_0)


def test_case_4():
    generic_0 = module_1.Generic()
    int_0 = 453
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.map(var_0)
    var_2 = var_1.to_validation()
    var_3 = maybe_0.to_either()
    var_4 = var_3.ap(generic_0)
    str_0 = "8=u.=nF"
    maybe_1 = module_0.Maybe(str_0, str_0)
    var_5 = maybe_1.to_lazy()
    var_6 = maybe_1.bind(var_5)
    var_7 = var_6.to_validation()
    var_8 = maybe_1.to_validation()


def test_case_5():
    str_0 = "JTOd\x0b+lmMyCFXJ?h"
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    maybe_0.ap(maybe_0)


def test_case_6():
    none_type_0 = None
    none_type_1 = None
    int_0 = -2513
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.bind(none_type_0)
    var_1 = maybe_0.to_validation()
    var_1.ap(none_type_1)


def test_case_7():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_either()
    maybe_0.bind(var_0)


def test_case_8():
    int_0 = -1929
    bytes_0 = b"\x83~]\x02\x8f\xaeM\x0e8>\x98r\xee\x88"
    bool_0 = True
    set_0 = {bytes_0, bytes_0, bool_0}
    int_1 = 359
    str_0 = "\n        :returns: False\n        :rtype: Boolean\n        "
    list_0 = [str_0, str_0]
    bool_1 = True
    maybe_0 = module_0.Maybe(list_0, bool_1)
    var_0 = maybe_0.bind(int_1)
    maybe_1 = module_0.Maybe(var_0, list_0)
    var_1 = maybe_1.ap(set_0)
    var_2 = var_1.to_box()
    list_1 = [var_2, set_0]
    maybe_2 = module_0.Maybe(list_1, list_0)
    var_3 = maybe_2.ap(int_0)


def test_case_9():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    str_0 = "\n        :param semigroup: other semigroup to concat\n        :type semigroup: Sum[B]\n        :returns: new Sum with sum of concat semigroups values\n        :rtype: Sum[A]\n        "
    bool_1 = False
    var_0 = maybe_0.filter(maybe_0)
    maybe_1 = module_0.Maybe(str_0, bool_1)
    maybe_1.filter(var_0)


def test_case_10():
    str_0 = "#!Q"
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    maybe_0.filter(maybe_0)


def test_case_11():
    bytes_0 = b"~il\xb8\x86w\x1b\xc0\xc1*t\x85\xed\x18y\x1d"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.get_or_else(bytes_0)
    var_1 = maybe_0.to_validation()
    var_0.filter(var_1)


def test_case_12():
    none_type_0 = None
    bytes_0 = b"\x95\xb8}\x00J\x15@\x9c\n\xcci"
    bool_0 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.get_or_else(none_type_0)
    var_1.to_box()


def test_case_13():
    list_0 = []
    maybe_0 = module_0.Maybe(list_0, list_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.to_try()
    var_2 = maybe_0.to_either()
    maybe_1 = module_0.Maybe(var_2, list_0)
    var_3 = maybe_1.to_box()
    var_4 = maybe_1.to_box()
    var_5 = var_3.to_lazy()


def test_case_14():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_box()
    bool_1 = False
    var_1 = maybe_0.filter(var_0)
    maybe_1 = module_0.Maybe(var_0, bool_1)
    maybe_1.filter(var_0)


def test_case_15():
    set_0 = set()
    maybe_0 = module_0.Maybe(set_0, set_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_validation()
    bool_0 = False
    bytes_0 = b"\x88\xb3\xab\x1c\x91\xa8\x88\xf6U.MA<&\x9c\xf6"
    maybe_1 = module_0.Maybe(bool_0, bytes_0)


def test_case_16():
    int_0 = 223
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_either()
    bool_1 = True
    maybe_1 = module_0.Maybe(int_0, bool_1)


def test_case_17():
    str_0 = "y};tW>"
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    generic_0 = module_1.Generic()
    maybe_1 = module_0.Maybe(generic_0, generic_0)
    var_0 = maybe_1.to_try()
    var_0.to_box()


def test_case_18():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    float_0 = -2031.0
    bool_1 = True
    maybe_0 = module_0.Maybe(float_0, bool_1)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_try()
    bool_2 = var_1.__eq__(set_0)


def test_case_19():
    float_0 = 820.883141
    maybe_0 = module_0.Maybe(float_0, float_0)
    var_0 = maybe_0.ap(maybe_0)
    none_type_0 = None
    bool_0 = True
    maybe_1 = maybe_0.get_or_else(maybe_0)
    var_1 = var_0.map(none_type_0)
    var_2 = var_1.filter(var_0)
    var_3 = maybe_1.to_either()
    bool_1 = maybe_1.__eq__(maybe_1)
    list_0 = []
    var_4 = maybe_0.bind(list_0)
    var_5 = maybe_1.bind(var_4)
    object_0 = module_2.object(*list_0)
    none_type_1 = None
    var_6 = maybe_1.to_lazy()
    bool_2 = maybe_1.__eq__(var_1)
    maybe_2 = module_0.Maybe(var_4, bool_0)
    maybe_3 = module_0.Maybe(none_type_1, none_type_1)
    var_7 = maybe_1.to_try()
    var_3.get_or_else(bool_1)


def test_case_20():
    float_0 = 820.883141
    maybe_0 = module_0.Maybe(float_0, float_0)
    var_0 = maybe_0.ap(maybe_0)
    var_1 = var_0.bind(var_0)
    none_type_0 = None
    bool_0 = False
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    var_2 = maybe_1.to_box()
    var_3 = maybe_1.to_either()
    var_4 = var_1.to_lazy()
    bool_1 = maybe_1.__eq__(maybe_1)
    list_0 = []
    var_5 = var_0.to_try()
    var_6 = maybe_1.to_lazy()
    object_0 = module_2.object(*list_0)
    none_type_1 = None
    var_7 = var_0.ap(var_6)
    var_8 = var_3.to_lazy()
    maybe_2 = module_0.Maybe(var_6, bool_0)
    maybe_3 = module_0.Maybe(none_type_1, none_type_1)
    var_9 = maybe_1.to_try()
    maybe_3.filter(list_0)
