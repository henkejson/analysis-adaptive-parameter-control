# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    int_0 = -140
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.filter(int_0)
    bool_0 = maybe_0.__eq__(int_0)
    var_1 = var_0.to_try()
    var_2 = maybe_0.to_lazy()
    var_3 = var_0.to_lazy()
    bool_1 = maybe_0.__eq__(var_1)
    var_1.to_validation()


def test_case_3():
    complex_0 = 523.20071 - 3340j
    maybe_0 = module_0.Maybe(complex_0, complex_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.map(var_0)


def test_case_4():
    complex_0 = 2635.425182 - 416.46j
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, complex_0)
    var_0 = maybe_0.to_either()
    maybe_1 = module_0.Maybe(complex_0, bool_0)
    var_1 = var_0.bind(var_0)
    maybe_1.map(maybe_1)


def test_case_5():
    float_0 = 1175.0108
    bool_0 = True
    maybe_0 = module_0.Maybe(float_0, bool_0)
    bytes_0 = b"\x9e\xd0\xda\xe7W_zVHt"
    list_0 = []
    list_1 = [list_0, list_0]
    str_0 = '<sEEP 3otyE<?,eqM"'
    maybe_1 = module_0.Maybe(list_1, str_0)
    var_0 = maybe_1.bind(bytes_0)
    var_1 = var_0.filter(maybe_0)


def test_case_6():
    str_0 = "/UDQ"
    int_0 = 1914
    none_type_0 = None
    maybe_0 = module_0.Maybe(int_0, none_type_0)
    maybe_0.bind(str_0)


def test_case_7():
    int_0 = -1763
    bool_0 = True
    list_0 = [bool_0]
    bytes_0 = b"a\xf0"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.ap(list_0)
    var_1 = var_0.get_or_else(int_0)
    var_1.to_validation()


def test_case_8():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_either()
    maybe_0.ap(bool_0)


def test_case_9():
    str_0 = "0"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.to_try()
    maybe_1 = module_0.Maybe(maybe_0, maybe_0)
    bool_0 = False
    maybe_2 = module_0.Maybe(str_0, bool_0)
    var_1 = maybe_0.to_box()
    var_2 = maybe_1.filter(str_0)
    maybe_2.filter(var_1)


def test_case_10():
    none_type_0 = None
    int_0 = 2642
    set_0 = set()
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    set_1 = {int_0}
    tuple_0 = (int_0, set_0, set_1)
    maybe_1 = module_0.Maybe(tuple_0, int_0)
    var_0 = maybe_1.get_or_else(none_type_0)
    var_0.to_box()


def test_case_11():
    bool_0 = False
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_0, none_type_0)
    var_0 = maybe_0.get_or_else(none_type_0)
    var_0.to_try()


def test_case_12():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_either()
    maybe_1 = module_0.Maybe(maybe_0, bool_0)


def test_case_13():
    none_type_0 = None
    none_type_1 = None
    maybe_0 = module_0.Maybe(none_type_1, none_type_1)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.to_box()
    var_2 = var_1.to_lazy()
    var_3 = var_2.to_validation()
    var_3.get_or_else(none_type_0)


def test_case_14():
    str_0 = "A^*Y[3\rpwOCQL\x0bOr~fBN"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.to_box()


def test_case_15():
    str_0 = ""
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.to_try()
    maybe_1 = module_0.Maybe(maybe_0, maybe_0)
    bool_0 = False
    maybe_2 = module_0.Maybe(str_0, bool_0)
    var_1 = maybe_0.to_box()
    var_2 = maybe_1.filter(str_0)
    maybe_2.filter(var_1)


def test_case_16():
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_either()
    maybe_1 = module_0.Maybe(var_1, var_0)
    var_2 = maybe_0.to_validation()
    var_3 = maybe_0.to_try()
    var_4 = maybe_0.to_box()
    var_4.ap(var_3)


def test_case_17():
    bool_0 = True
    int_0 = -140
    str_0 = "0"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.filter(int_0)
    var_1 = maybe_0.ap(str_0)
    bool_1 = maybe_0.__eq__(int_0)
    var_2 = var_0.bind(str_0)
    var_3 = var_1.ap(bool_0)
    var_4 = var_1.to_validation()
    var_5 = var_1.to_either()
    var_6 = var_0.to_lazy()
    var_7 = var_1.filter(int_0)
    bool_2 = var_0.__eq__(str_0)
    bool_3 = maybe_0.__eq__(bool_2)
    var_8 = var_7.get_or_else(var_6)
    var_9 = var_8.map(bool_0)
    bool_2.to_validation()


def test_case_18():
    none_type_0 = None
    str_0 = "\n        Transform Lazy into Either (Right) with constructor_fn result.\n\n        :returns: Right monad with constructor_fn result\n        :rtype: Right[A]\n        "
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_0.get_or_else(none_type_0)


def test_case_19():
    complex_0 = -4257.803 - 887.9347j
    none_type_0 = None
    list_0 = []
    bool_0 = True
    maybe_0 = module_0.Maybe(list_0, bool_0)
    var_0 = maybe_0.filter(none_type_0)
    var_1 = var_0.to_lazy()
    var_2 = var_1.to_box()
    var_2.get_or_else(complex_0)


def test_case_20():
    bytes_0 = b""
    none_type_0 = None
    maybe_0 = module_0.Maybe(bytes_0, none_type_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_validation()
    var_0.map(maybe_0)


def test_case_21():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    list_0 = maybe_0.get_or_else(maybe_0)
    list_1 = [list_0, list_0]
    str_0 = '<sEEP 3otyE<?,eqM"'
    maybe_1 = module_0.Maybe(list_1, str_0)
    bool_1 = maybe_1.to_lazy()
    var_0 = maybe_0.to_box()
    bool_2 = False
    maybe_2 = module_0.Maybe(maybe_1, bool_2)
    var_1 = maybe_2.to_box()
    var_2 = maybe_1.filter(var_1)
    bool_3 = var_2.__eq__(maybe_2)
    var_3 = maybe_2.to_either()
    var_0.get_or_else(bool_2)


def test_case_22():
    str_0 = "0"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.ap(maybe_0)
    var_1 = maybe_0.to_try()
    maybe_1 = module_0.Maybe(maybe_0, maybe_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    bool_1 = False
    maybe_2 = module_0.Maybe(str_0, bool_1)
    var_2 = maybe_0.to_box()
    var_3 = maybe_1.filter(str_0)
    maybe_2.filter(var_2)
