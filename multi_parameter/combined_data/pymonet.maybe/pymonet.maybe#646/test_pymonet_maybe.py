# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1
import builtins as module_2


def test_case_0():
    int_0 = 744
    maybe_0 = module_0.Maybe(int_0, int_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_1.ap(none_type_0)
    var_1 = maybe_1.ap(maybe_1)
    var_2 = maybe_0.to_either()
    bool_1 = True
    bool_2 = False
    var_3 = maybe_1.to_either()
    var_4 = var_0.map(var_1)
    bool_3 = maybe_1.__eq__(var_3)
    maybe_2 = module_0.Maybe(bool_2, bool_2)
    maybe_3 = module_0.Maybe(none_type_0, bool_3)
    bool_4 = True
    maybe_4 = module_0.Maybe(maybe_1, bool_4)
    bool_5 = False
    maybe_5 = module_0.Maybe(bool_2, bool_5)
    var_5 = maybe_2.get_or_else(bool_1)
    var_6 = var_0.to_try()
    maybe_6 = module_0.Maybe(var_3, bool_2)
    maybe_2.map(var_5)


def test_case_3():
    none_type_0 = None
    bytes_0 = b"\x98\xf9\x83FD\xd7\x18\xfa\x9c\xdbVp\xd4z\x11=\x92"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    maybe_0 = module_0.Maybe(set_0, set_0)
    var_0 = maybe_0.ap(none_type_0)
    maybe_1 = module_0.Maybe(none_type_0, set_0)
    var_1 = var_0.map(maybe_1)
    var_2 = var_0.to_try()
    var_3 = var_0.ap(set_0)
    var_4 = var_1.to_either()
    var_5 = maybe_1.to_box()
    var_2.ap(set_0)


def test_case_4():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_try()
    maybe_0.map(none_type_0)


def test_case_5():
    complex_0 = -842.1 + 2179j
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1 = module_0.Maybe(none_type_0, complex_0)
    var_0 = maybe_1.to_either()
    var_1 = maybe_1.bind(none_type_0)
    var_2 = maybe_1.to_lazy()
    bool_0 = maybe_1.__eq__(var_1)


def test_case_6():
    none_type_0 = None
    float_0 = -34.9
    bool_0 = False
    maybe_0 = module_0.Maybe(float_0, bool_0)
    maybe_0.bind(none_type_0)


def test_case_7():
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.ap(bool_0)


def test_case_8():
    generic_0 = module_1.Generic()
    bool_0 = True
    float_0 = -4074.6552
    maybe_0 = module_0.Maybe(bool_0, float_0)
    var_0 = maybe_0.filter(generic_0)
    var_1 = var_0.to_either()
    var_2 = var_1.to_validation()
    var_3 = var_2.to_box()


def test_case_9():
    bytes_0 = b"Yy'\x11V4\xe4\x03\xc38\x120}k\xb1\xaaG\x8b\xaf\xaf"
    set_0 = {bytes_0, bytes_0}
    list_0 = [set_0]
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    maybe_0.filter(list_0)


def test_case_10():
    bool_0 = True
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_1, bool_0)
    var_0 = maybe_0.bind(bool_1)
    none_type_0 = None
    var_1 = maybe_0.get_or_else(none_type_0)
    var_1.get_or_else(bool_1)


def test_case_11():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.map(bool_0)
    var_1 = var_0.ap(none_type_0)
    none_type_1 = None
    maybe_1 = module_0.Maybe(none_type_1, none_type_1)
    var_2 = maybe_1.to_box()
    var_3 = maybe_1.get_or_else(bool_0)
    var_4 = maybe_1.get_or_else(maybe_1)
    var_5 = var_0.to_try()
    var_6 = maybe_0.filter(var_4)
    maybe_1.filter(none_type_0)


def test_case_12():
    none_type_0 = None
    bytes_0 = b"[\xbau\x00x"
    bool_0 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.to_either()
    var_0.map(none_type_0)


def test_case_13():
    bytes_0 = b"q(\xbe\x81"
    bool_0 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.to_box()


def test_case_14():
    str_0 = "\n        :param semigroup: other semigroup to concat\n        :type semigroup: One[B]\n        :returns: new One with first truly value or last falsy\n        :rtype: One[A | B]\n        "
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_lazy()
    maybe_1 = module_0.Maybe(var_0, bool_0)
    var_1 = maybe_0.to_box()


def test_case_15():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_try()
    var_0.to_lazy()


def test_case_16():
    tuple_0 = ()
    int_0 = 222
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_0.bind(tuple_0)


def test_case_17():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_validation()


def test_case_18():
    int_0 = -4220
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.to_lazy()
    maybe_1 = module_0.Maybe(int_0, int_0)
    var_1 = maybe_1.filter(int_0)
    var_2 = var_1.to_box()
    var_3 = var_2.ap(var_0)
    var_3.to_box()


def test_case_19():
    str_0 = "\n        :param semigroup: other semigroup to concat\n        :type semigroup: One[B]\n        :returns: new One with first truly value or last falsy\n        :rtype: One[A | B]\n        "
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.to_lazy()
    maybe_1 = module_0.Maybe(maybe_0, str_0)
    var_2 = maybe_1.to_lazy()
    var_3 = maybe_1.to_lazy()
    var_4 = maybe_1.to_lazy()
    var_5 = var_4.bind(var_4)
    var_6 = var_4.to_box()
    var_7 = var_0.to_either()
    var_7.bind(var_6)


def test_case_20():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    list_0 = []
    object_0 = module_2.object(*list_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(object_0, bool_1)
    bool_2 = maybe_1.__eq__(maybe_0)


def test_case_21():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.filter(none_type_0)
    var_1 = var_0.ap(var_0)
    var_2 = var_0.to_box()
    bool_1 = False
    maybe_1 = module_0.Maybe(var_1, bool_1)
    bool_2 = var_0.__eq__(maybe_0)
    var_3 = var_1.ap(bool_0)
    var_4 = var_1.map(var_1)
    var_5 = var_2.to_lazy()
    var_6 = maybe_0.to_try()
    maybe_1.filter(var_6)
