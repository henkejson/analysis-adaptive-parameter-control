# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    list_0 = []
    maybe_0 = module_0.Maybe(list_0, list_0)


def test_case_2():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.filter(bool_0)
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    var_1 = maybe_1.to_lazy()
    var_2 = maybe_1.ap(maybe_1)
    var_3 = var_2.ap(bool_0)
    set_0 = set()
    maybe_2 = module_0.Maybe(maybe_1, set_0)
    bool_1 = var_0.__eq__(var_3)
    maybe_2.filter(bool_0)


def test_case_3():
    str_0 = "\n        Take mapper function and returns result of them called with Right value.\n\n        :param mapper: function to apply on Right value\n        :type mapper: Function(A) -> Either[B]\n        :returns: result of mapper\n        :rtype: Either[B]\n        "
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.ap(dict_0)
    var_1 = maybe_0.filter(bool_0)
    maybe_1 = module_0.Maybe(dict_0, bool_0)
    var_2 = maybe_0.map(var_0)
    var_3 = var_2.to_validation()
    var_4 = maybe_1.to_lazy()
    var_5 = maybe_1.ap(maybe_1)
    var_6 = maybe_0.get_or_else(none_type_0)
    bool_1 = maybe_1.__eq__(maybe_1)
    var_7 = var_4.map(var_5)
    var_8 = var_1.to_either()
    bool_2 = maybe_0.__eq__(dict_0)
    var_9 = maybe_1.filter(var_3)


def test_case_4():
    str_0 = "S"
    list_0 = []
    str_1 = "k\tz"
    bool_0 = True
    maybe_0 = module_0.Maybe(str_1, bool_0)
    var_0 = maybe_0.map(list_0)
    var_1 = var_0.bind(str_0)
    var_2 = var_1.to_try()


def test_case_5():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_either()
    bool_1 = maybe_0.__eq__(bool_0)
    maybe_0.ap(maybe_0)


def test_case_6():
    set_0 = set()
    dict_0 = {}
    maybe_0 = module_0.Maybe(dict_0, dict_0)
    maybe_0.bind(set_0)


def test_case_7():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.filter(bool_0)
    var_1 = maybe_0.ap(maybe_0)
    maybe_1 = module_0.Maybe(var_1, none_type_0)
    maybe_1.filter(bool_0)


def test_case_8():
    int_0 = -759
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    maybe_0.ap(int_0)


def test_case_9():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.filter(bool_0)


def test_case_10():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_0.filter(bool_0)


def test_case_11():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.filter(bool_0)
    var_1 = maybe_0.ap(maybe_0)
    var_2 = var_1.to_lazy()
    var_3 = var_1.ap(bool_0)
    var_4 = maybe_0.get_or_else(none_type_0)
    maybe_1 = module_0.Maybe(var_1, var_4)
    maybe_1.filter(bool_0)


def test_case_12():
    int_0 = 2418
    str_0 = 'nSL"w-UsK'
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.ap(int_0)
    var_2 = var_1.to_try()
    var_2.to_lazy()


def test_case_13():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.filter(bool_0)
    var_1 = maybe_0.to_lazy()
    var_2 = var_1.to_validation()
    set_0 = set()
    maybe_1 = module_0.Maybe(var_2, set_0)
    var_3 = maybe_1.to_either()
    maybe_1.filter(bool_0)


def test_case_14():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_try()
    var_2 = var_0.to_validation()
    var_0.to_box()


def test_case_15():
    int_0 = 4748
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.to_either()
    tuple_0 = ()
    var_1 = var_0.map(maybe_0)
    var_2 = maybe_0.map(var_0)
    maybe_1 = module_0.Maybe(tuple_0, tuple_0)
    tuple_1 = (int_0, int_0, tuple_0)
    maybe_2 = module_0.Maybe(tuple_1, tuple_1)
    maybe_3 = module_0.Maybe(int_0, tuple_1)
    var_3 = maybe_2.bind(maybe_0)
    bool_0 = False
    maybe_4 = module_0.Maybe(maybe_2, bool_0)
    var_4 = maybe_4.to_box()
    var_5 = maybe_2.to_box()


def test_case_16():
    list_0 = []
    maybe_0 = module_0.Maybe(list_0, list_0)
    var_0 = maybe_0.to_lazy()
    var_0.get_or_else(list_0)


def test_case_17():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.filter(bool_0)
    var_1 = var_0.to_try()
    maybe_1 = module_0.Maybe(var_1, none_type_0)
    maybe_1.filter(bool_0)


def test_case_18():
    int_0 = 2150
    bool_0 = False
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.to_try()
    var_0.to_either()


def test_case_19():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.filter(bool_0)
    var_1 = var_0.to_validation()


def test_case_20():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.to_validation()
    maybe_0.ap(var_1)


def test_case_21():
    generic_0 = module_1.Generic()
    maybe_0 = module_0.Maybe(generic_0, generic_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_either()
    float_0 = 3029.009
    none_type_0 = None
    var_2 = var_0.ap(generic_0)
    bool_0 = var_0.__eq__(var_1)
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_3 = maybe_1.to_either()
    var_4 = maybe_1.to_lazy()
    var_5 = var_4.to_either()
    var_5.filter(float_0)


def test_case_22():
    str_0 = "\n        Take mapper function and returns result of them called with Right value.\n\n        :param mapper: function to apply on Right value\n        :type mapper: Function(A) -> Either[B]\n        :returns: result of mapper\n        :rtype: Either[B]\n        "
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.ap(dict_0)
    var_1 = maybe_0.filter(bool_0)
    var_2 = maybe_0.filter(maybe_0)
    maybe_1 = module_0.Maybe(dict_0, bool_0)
    var_3 = maybe_0.map(var_0)
    var_4 = var_3.to_validation()
    var_5 = maybe_1.to_lazy()
    var_6 = maybe_1.ap(maybe_1)
    bool_1 = maybe_1.__eq__(maybe_1)
    var_7 = maybe_1.to_lazy()
    var_8 = var_6.to_validation()
    bool_2 = False
    var_9 = var_6.ap(var_7)
    set_0 = set()
    maybe_2 = module_0.Maybe(var_8, set_0)
    var_10 = maybe_2.to_either()
    bool_3 = var_10.__eq__(var_9)
    bool_4 = maybe_2.__eq__(var_6)
    maybe_2.filter(bool_2)


def test_case_23():
    str_0 = "\n        Take mapper function and returns result of them called with Right value.\n\n        :param mapper: function to apply on Right value\n        :type mapper: Function(A) -> Either[B]\n        :returns: result of mapper\n        :rtype: Either[B]\n        "
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.ap(dict_0)
    var_1 = maybe_0.filter(bool_0)
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_2 = maybe_0.to_lazy()
    var_3 = maybe_0.ap(var_0)
    var_4 = var_1.ap(none_type_0)
    bool_1 = maybe_1.__eq__(maybe_1)
    var_5 = maybe_1.to_lazy()
    var_6 = var_2.to_validation()
    var_7 = var_2.ap(dict_0)
    var_6.bind(bool_1)
