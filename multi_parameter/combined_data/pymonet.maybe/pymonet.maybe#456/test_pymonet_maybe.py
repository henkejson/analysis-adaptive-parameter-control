# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import builtins as module_1
import typing as module_2


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    list_0 = []
    maybe_0 = module_0.Maybe(list_0, list_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.to_try()


def test_case_3():
    none_type_0 = None
    bool_0 = True
    bytes_0 = b"\xfa"
    bool_1 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_1)
    var_0 = maybe_0.ap(bool_0)
    bytes_1 = b"\xf1u\x83\x1b\xc6\x1f\xdd2\xc9:\xc6\xdc&\xea\x10\n\x84\x02 \x9e"
    var_1 = maybe_0.filter(bytes_1)
    bool_2 = var_1.__eq__(none_type_0)
    var_2 = var_0.to_box()
    var_3 = var_2.ap(var_0)
    var_2.filter(var_3)


def test_case_4():
    object_0 = module_1.object()
    maybe_0 = module_0.Maybe(object_0, object_0)
    bool_0 = True
    none_type_0 = None
    maybe_1 = module_0.Maybe(object_0, none_type_0)
    var_0 = maybe_1.get_or_else(maybe_0)
    var_1 = maybe_0.ap(bool_0)
    var_2 = maybe_0.map(bool_0)
    maybe_2 = module_0.Maybe(bool_0, bool_0)
    var_3 = maybe_0.bind(object_0)
    var_4 = maybe_2.to_lazy()


def test_case_5():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.ap(maybe_0)


def test_case_6():
    str_0 = "i"
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    maybe_0.bind(str_0)


def test_case_7():
    str_0 = "\n        Transform Either to Try.\n\n        :returns: Lazy monad with function returning previous value\n        :rtype: Lazy[Function() -> A]\n        "
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.to_try()
    var_2 = maybe_0.filter(var_0)


def test_case_8():
    str_0 = "\n        Transform Either to Try.\n\n        :returns: Lazy monad with function returning previous value\n        :rtype: Lazy[Function() -> A]\n        "
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.to_try()
    maybe_0.filter(var_0)


def test_case_9():
    bool_0 = True
    int_0 = 1808
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.ap(bool_0)
    var_1 = var_0.get_or_else(int_0)
    var_1.to_box()


def test_case_10():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.get_or_else(bool_0)
    bool_1 = var_0.__eq__(maybe_0)
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    bool_2 = True
    maybe_2 = module_0.Maybe(bool_2, bool_2)
    var_1 = maybe_1.to_box()
    var_2 = maybe_1.to_try()
    var_3 = maybe_1.to_lazy()


def test_case_11():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_either()


def test_case_12():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_try()
    var_1 = var_0.get_or_else(maybe_0)
    var_2 = maybe_0.to_either()
    var_3 = var_2.to_validation()
    var_2.map(bool_0)


def test_case_13():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_either()


def test_case_14():
    float_0 = -399.418
    maybe_0 = module_0.Maybe(float_0, float_0)
    var_0 = maybe_0.to_validation()


def test_case_15():
    generic_0 = module_2.Generic()
    bool_0 = False
    maybe_0 = module_0.Maybe(generic_0, bool_0)
    var_0 = maybe_0.to_validation()


def test_case_16():
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_try()
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    var_1 = maybe_1.filter(bool_0)
    var_2 = maybe_1.to_either()
    var_3 = var_2.to_try()
    none_type_1 = None
    maybe_2 = module_0.Maybe(none_type_1, none_type_1)
    var_4 = maybe_2.to_lazy()
    var_5 = maybe_2.to_lazy()
    var_6 = var_4.ap(none_type_1)
    var_7 = var_2.bind(var_3)
    var_8 = var_0.get_or_else(var_0)
    var_9 = var_4.to_box()
    maybe_3 = module_0.Maybe(maybe_2, maybe_2)
    var_10 = var_2.bind(var_9)
    var_11 = maybe_3.ap(maybe_2)
    var_12 = var_4.to_box()
    var_13 = var_9.to_try()
    var_7.filter(var_5)


def test_case_17():
    str_0 = "&ioIk=G?\t"
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, str_0)
    var_0 = maybe_0.filter(none_type_0)
    maybe_1 = module_0.Maybe(str_0, none_type_0)
    bool_0 = maybe_1.__eq__(maybe_0)
    maybe_1.filter(maybe_1)
