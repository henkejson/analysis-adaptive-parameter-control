# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    complex_0 = 1399.3 + 1373.6527j
    maybe_0 = module_0.Maybe(complex_0, complex_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    str_0 = "0R4L\n6`Tep%h\x0b\x0cR"
    tuple_0 = ()
    maybe_0 = module_0.Maybe(tuple_0, tuple_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    list_0 = [tuple_0, maybe_0, tuple_0, tuple_0]
    bool_1 = True
    var_0 = maybe_0.to_try()
    maybe_1 = module_0.Maybe(tuple_0, bool_1)
    maybe_2 = module_0.Maybe(list_0, maybe_0)
    var_1 = maybe_2.get_or_else(str_0)
    var_1.to_box()


def test_case_3():
    str_0 = "Validation.fail[{}, {}]"
    bool_0 = False
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, str_0)
    maybe_1 = module_0.Maybe(str_0, bool_0)
    bool_1 = maybe_1.__eq__(str_0)
    var_0 = maybe_1.to_validation()
    var_1 = var_0.to_either()
    var_0.get_or_else(str_0)


def test_case_4():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.filter(maybe_0)
    var_1 = maybe_0.to_validation()
    var_2 = maybe_0.ap(bool_0)
    var_3 = var_2.map(bool_0)
    maybe_1 = module_0.Maybe(maybe_0, bool_0)
    var_4 = maybe_1.filter(var_2)


def test_case_5():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.ap(maybe_0)


def test_case_6():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.filter(maybe_0)
    var_1 = maybe_0.bind(bool_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(bool_0, bool_1)
    maybe_1.filter(var_1)


def test_case_7():
    int_0 = -956
    list_0 = [int_0, int_0, int_0, int_0]
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    maybe_0.bind(list_0)


def test_case_8():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.filter(maybe_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(bool_0, bool_1)
    maybe_1.filter(maybe_0)


def test_case_9():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.get_or_else(bool_0)
    var_1 = maybe_0.filter(maybe_0)
    var_2 = var_1.filter(maybe_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(var_0, bool_1)
    maybe_1.filter(var_1)


def test_case_10():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = False
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    var_1 = maybe_1.get_or_else(maybe_0)
    var_1.to_validation()


def test_case_11():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    none_type_1 = None
    var_0 = maybe_0.map(none_type_0)
    var_1 = var_0.filter(none_type_0)
    var_2 = var_1.to_either()
    var_3 = maybe_0.get_or_else(none_type_1)


def test_case_12():
    str_0 = ""
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.to_either()


def test_case_13():
    str_0 = "he/RF*Hx|$v8UCmd\rVI"
    set_0 = {str_0, str_0, str_0, str_0}
    str_1 = "jjl?"
    bytes_0 = b"I\xcb\xfbl\x85\xfe=qp\x86}\tev3\x14\x87,\xcd&"
    tuple_0 = (set_0, str_1, bytes_0)
    maybe_0 = module_0.Maybe(tuple_0, str_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_either()


def test_case_14():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_box()
    var_0.to_box()


def test_case_15():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.filter(bool_0)
    var_2 = maybe_0.get_or_else(bool_0)
    var_3 = maybe_0.ap(var_0)
    var_4 = var_3.ap(bool_0)
    var_5 = var_3.map(var_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(var_0, bool_1)
    maybe_1.filter(var_3)


def test_case_16():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    maybe_0.bind(maybe_0)


def test_case_17():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.filter(maybe_0)
    var_2 = maybe_0.map(var_0)
    var_3 = maybe_0.to_box()
    var_4 = var_2.to_try()
    bool_1 = False
    maybe_1 = module_0.Maybe(var_0, bool_1)
    maybe_1.filter(var_0)


def test_case_18():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.filter(maybe_0)
    var_1 = maybe_0.to_validation()
    var_2 = var_0.filter(var_1)
    bool_1 = False
    maybe_1 = module_0.Maybe(bool_0, bool_1)
    maybe_1.filter(var_1)


def test_case_19():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_validation()


def test_case_20():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_lazy()
    bool_1 = True
    bool_2 = True
    maybe_1 = module_0.Maybe(bool_1, bool_2)
    var_1 = var_0.to_box()
    var_2 = maybe_0.ap(maybe_0)
    var_3 = var_2.get_or_else(none_type_0)


def test_case_21():
    float_0 = -4561.0
    complex_0 = 1399.33 + 1373.6527j
    maybe_0 = module_0.Maybe(complex_0, complex_0)
    var_0 = maybe_0.get_or_else(complex_0)
    var_1 = maybe_0.ap(float_0)
    var_2 = var_1.to_try()
    var_3 = var_1.to_box()
    var_4 = maybe_0.map(var_2)
    var_5 = var_4.bind(float_0)
    var_6 = var_5.to_lazy()
    bool_0 = var_1.__eq__(var_1)
    var_7 = maybe_0.map(float_0)
    var_0.filter(var_1)


def test_case_22():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.get_or_else(bool_0)
    bool_1 = maybe_0.__eq__(bool_0)
    var_1 = maybe_0.filter(maybe_0)
    var_2 = maybe_0.to_validation()
    var_3 = maybe_0.ap(var_0)
    var_4 = var_3.map(bool_1)
    var_5 = maybe_0.to_box()
    bool_2 = False
    maybe_1 = module_0.Maybe(var_0, bool_2)
    var_6 = var_1.bind(var_0)
    bool_3 = var_3.__eq__(maybe_1)
    maybe_1.filter(var_3)


def test_case_23():
    str_0 = ">AylRw>cfmp^S"
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_try()
    var_1.to_validation()
