# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.ap(none_type_0)
    var_2 = maybe_0.filter(var_1)
    list_0 = []
    var_3 = maybe_0.to_lazy()
    var_4 = var_2.filter(var_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    var_5 = maybe_0.to_validation()
    maybe_1 = module_0.Maybe(list_0, list_0)
    var_6 = maybe_1.to_box()
    var_7 = var_2.to_either()
    var_8 = var_3.ap(none_type_0)
    var_9 = maybe_1.to_validation()


def test_case_3():
    int_0 = 164
    bool_0 = False
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_0, none_type_0)
    bool_1 = maybe_0.__eq__(int_0)


def test_case_4():
    int_0 = -1667
    float_0 = -268.54
    bool_0 = True
    maybe_0 = module_0.Maybe(float_0, bool_0)
    var_0 = maybe_0.get_or_else(bool_0)
    var_1 = maybe_0.map(var_0)
    var_2 = maybe_0.get_or_else(float_0)
    var_3 = maybe_0.to_validation()
    var_4 = maybe_0.map(float_0)
    var_3.map(int_0)


def test_case_5():
    bool_0 = False
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_1, bool_1)
    maybe_0.map(bool_0)


def test_case_6():
    none_type_0 = None
    str_0 = "WcD0\x0b0gfT\tg2`U="
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.get_or_else(var_0)
    var_2 = maybe_0.bind(var_1)
    var_3 = maybe_0.filter(none_type_0)
    var_4 = var_3.to_validation()
    var_5 = maybe_0.to_lazy()
    var_6 = var_4.to_either()


def test_case_7():
    float_0 = -690.4
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.to_try()
    maybe_1 = module_0.Maybe(float_0, float_0)
    maybe_2 = module_0.Maybe(maybe_1, maybe_1)
    none_type_1 = None
    bool_1 = False
    maybe_3 = module_0.Maybe(none_type_1, bool_1)
    bool_2 = maybe_3.__eq__(bool_1)
    maybe_3.bind(bool_1)


def test_case_8():
    complex_0 = 5168.4 + 3182.7j
    maybe_0 = module_0.Maybe(complex_0, complex_0)
    var_0 = maybe_0.to_lazy()
    maybe_1 = module_0.Maybe(complex_0, var_0)
    var_1 = maybe_1.ap(complex_0)
    var_2 = var_0.to_validation()


def test_case_9():
    int_0 = 46
    bool_0 = False
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.to_lazy()
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    maybe_1.ap(int_0)


def test_case_10():
    str_0 = "\n        If Maybe is empty return default_value, in other case.\n\n        :param default_value: value to return if Maybe is empty\n        :type default_value: Any\n        :returns: value of Maybe or default_value\n        :rtype: A\n        "
    bytes_0 = b"\xeaC\x11\xba&\x80\xc9\xda\xfc"
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.filter(str_0)
    var_1 = maybe_0.get_or_else(str_0)


def test_case_11():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.ap(none_type_0)
    maybe_0.filter(var_1)


def test_case_12():
    none_type_0 = None
    none_type_1 = None
    maybe_0 = module_0.Maybe(none_type_1, none_type_1)
    var_0 = maybe_0.get_or_else(none_type_0)
    var_0.to_box()


def test_case_13():
    bool_0 = True
    str_0 = ">HZV#6DlN'e0\rNv"
    none_type_0 = None
    list_0 = [none_type_0]
    maybe_0 = module_0.Maybe(none_type_0, list_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.bind(str_0)
    var_2 = var_1.map(bool_0)


def test_case_14():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_either()


def test_case_15():
    bytes_0 = b"\xeaC\x11\xba&\x80\xc9\xda\xfc"
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, bytes_0)
    var_0 = maybe_0.to_box()
    none_type_1 = None
    var_1 = maybe_0.filter(none_type_0)
    maybe_1 = module_0.Maybe(none_type_0, var_0)
    var_2 = var_1.ap(none_type_1)
    var_3 = maybe_1.to_validation()
    var_4 = var_1.ap(var_3)


def test_case_16():
    int_0 = 2038
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.to_try()
    var_0.to_either()


def test_case_17():
    complex_0 = 510 + 479.090459j
    bool_0 = False
    maybe_0 = module_0.Maybe(complex_0, bool_0)
    bytes_0 = b"\xcd\xfa\xaa\x00)\x83\xf3\xf8\xaa-\x12c\x0b"
    bool_1 = False
    maybe_1 = module_0.Maybe(bytes_0, bool_1)
    var_0 = maybe_1.to_try()
    maybe_1.filter(bytes_0)


def test_case_18():
    generic_0 = module_1.Generic()
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_0.to_validation()


def test_case_19():
    complex_0 = 5168.4 + 3182.7j
    bool_0 = False
    maybe_0 = module_0.Maybe(complex_0, bool_0)
    var_0 = maybe_0.to_either()
    maybe_1 = module_0.Maybe(complex_0, complex_0)
    var_1 = maybe_1.to_lazy()
    var_2 = maybe_1.map(var_0)
    var_3 = var_2.get_or_else(complex_0)
    bool_1 = True
    var_4 = var_2.filter(var_0)
    var_5 = var_4.to_validation()
    bool_2 = maybe_0.__eq__(maybe_1)
    maybe_2 = module_0.Maybe(complex_0, bool_1)
    maybe_3 = module_0.Maybe(bool_1, bool_2)
    var_0.filter(var_0)


def test_case_20():
    complex_0 = 5168.4 + 3183.823509593143j
    bool_0 = False
    maybe_0 = module_0.Maybe(complex_0, bool_0)
    var_0 = maybe_0.to_either()
    maybe_1 = module_0.Maybe(complex_0, complex_0)
    var_1 = maybe_1.to_lazy()
    var_2 = maybe_1.map(var_0)
    var_3 = var_2.get_or_else(complex_0)
    var_4 = var_2.filter(var_0)
    var_5 = var_4.to_validation()
    bool_1 = maybe_0.__eq__(maybe_1)
    maybe_2 = module_0.Maybe(complex_0, var_1)
    var_6 = maybe_2.ap(complex_0)
    var_7 = maybe_0.to_lazy()
    var_8 = var_6.to_validation()
    var_9 = var_0.to_validation()
    var_10 = maybe_1.bind(var_6)
    var_11 = var_1.to_validation()
    var_12 = var_7.to_validation()
    var_13 = var_1.to_either()
    var_14 = var_9.to_either()
    var_15 = var_10.to_try()
    maybe_0.filter(var_11)


def test_case_21():
    complex_0 = 5168.4 + 3183.038965954275j
    bool_0 = False
    maybe_0 = module_0.Maybe(complex_0, bool_0)
    maybe_1 = module_0.Maybe(complex_0, complex_0)
    var_0 = maybe_1.to_lazy()
    var_1 = maybe_1.map(maybe_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    var_2 = var_1.get_or_else(complex_0)
    var_3 = maybe_0.to_try()
    var_4 = var_1.filter(var_0)
    bool_2 = maybe_0.__eq__(maybe_1)
    maybe_2 = module_0.Maybe(complex_0, var_0)
    var_5 = maybe_2.ap(complex_0)
    var_6 = var_1.filter(var_5)
    var_7 = var_5.to_validation()
    var_8 = var_1.bind(var_7)
    var_9 = var_8.to_validation()
    var_10 = var_8.to_lazy()
    var_11 = var_4.bind(maybe_0)
    var_12 = maybe_2.to_try()
    maybe_0.filter(var_9)
