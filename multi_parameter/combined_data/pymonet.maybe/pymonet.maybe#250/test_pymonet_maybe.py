# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1
import builtins as module_2


def test_case_0():
    bytes_0 = b"\x84\x03"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    none_type_0 = None
    bool_0 = False
    bool_1 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_1)
    var_0 = maybe_0.map(none_type_0)
    bool_2 = maybe_0.__eq__(var_0)
    bool_3 = True
    maybe_1 = module_0.Maybe(bool_3, bool_3)
    none_type_1 = None
    var_1 = maybe_1.get_or_else(none_type_1)
    var_2 = maybe_1.get_or_else(maybe_1)
    var_3 = maybe_1.filter(var_2)
    var_4 = var_3.to_try()
    bool_4 = False
    maybe_2 = module_0.Maybe(bool_0, bool_4)
    var_5 = maybe_2.to_lazy()


def test_case_3():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = maybe_0.__eq__(bool_0)
    bool_2 = False
    maybe_1 = module_0.Maybe(maybe_0, bool_2)
    var_0 = maybe_0.filter(bool_2)
    var_1 = maybe_1.to_lazy()
    var_2 = var_1.to_either()
    maybe_1.filter(bool_1)


def test_case_4():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.map(none_type_0)
    bool_1 = var_0.__eq__(bool_0)
    var_1 = var_0.ap(none_type_0)
    bool_2 = False
    maybe_1 = module_0.Maybe(var_0, bool_2)
    var_2 = maybe_0.filter(bool_2)
    var_3 = maybe_1.to_lazy()
    maybe_1.filter(bool_1)


def test_case_5():
    bytes_0 = b"\x81\x89*5\x95Pi\xaf\xc4\x1d\x04\xedp\x10.\xf4E&\x88"
    bool_0 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(bytes_0, bool_1)
    maybe_0.ap(maybe_0)


def test_case_6():
    bool_0 = True
    float_0 = 149.310321
    bool_1 = True
    maybe_0 = module_0.Maybe(float_0, bool_1)
    var_0 = maybe_0.bind(maybe_0)
    bool_2 = maybe_0.__eq__(float_0)
    var_1 = maybe_0.to_lazy()
    var_1.filter(bool_0)


def test_case_7():
    generic_0 = module_1.Generic()
    tuple_0 = ()
    bool_0 = False
    maybe_0 = module_0.Maybe(tuple_0, bool_0)
    maybe_1 = module_0.Maybe(maybe_0, tuple_0)
    maybe_1.bind(generic_0)


def test_case_8():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.to_lazy()
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    bool_1 = dict_0.__eq__(bool_0)
    dict_1 = {}
    int_0 = 1626
    tuple_0 = (dict_1, dict_1, int_0, dict_1)
    maybe_1 = module_0.Maybe(tuple_0, int_0)
    var_2 = maybe_1.to_try()
    var_3 = maybe_1.ap(dict_1)
    var_4 = var_1.ap(bool_1)
    var_5 = maybe_1.filter(dict_0)


def test_case_9():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(maybe_0, bool_1)
    var_0 = maybe_0.filter(bool_1)
    maybe_1.filter(maybe_0)


def test_case_10():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    list_1 = [list_0]
    bool_1 = False
    maybe_0 = module_0.Maybe(list_1, bool_1)
    bool_2 = True
    maybe_1 = module_0.Maybe(bool_2, bool_2)
    var_0 = maybe_1.to_try()
    none_type_0 = None
    var_1 = maybe_1.get_or_else(none_type_0)
    var_2 = maybe_1.get_or_else(maybe_1)
    var_3 = maybe_1.filter(var_2)
    var_4 = var_3.to_try()
    var_5 = var_2.to_validation()


def test_case_11():
    str_0 = "=("
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.get_or_else(str_0)


def test_case_12():
    int_0 = 1
    bool_0 = False
    bool_1 = True
    maybe_0 = module_0.Maybe(int_0, bool_1)
    bool_2 = True
    maybe_1 = module_0.Maybe(bool_2, bool_2)
    var_0 = maybe_1.to_either()
    var_1 = var_0.map(maybe_1)
    var_2 = var_0.to_box()
    var_3 = var_2.to_try()
    var_3.ap(bool_0)


def test_case_13():
    none_type_0 = None
    set_0 = set()
    maybe_0 = module_0.Maybe(set_0, set_0)
    var_0 = maybe_0.to_either()
    var_0.get_or_else(none_type_0)


def test_case_14():
    none_type_0 = None
    float_0 = 2453.87
    bool_0 = True
    maybe_0 = module_0.Maybe(float_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_either()
    var_1.get_or_else(none_type_0)


def test_case_15():
    none_type_0 = None
    str_0 = "rANH.3U=J(@\r 6^9eY"
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_validation()
    var_1.get_or_else(none_type_0)


def test_case_16():
    float_0 = -1641.05
    maybe_0 = module_0.Maybe(float_0, float_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_try()
    var_1.to_either()


def test_case_17():
    bool_0 = True
    none_type_0 = None
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_1, bool_1)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.bind(none_type_0)
    var_1.filter(bool_0)


def test_case_18():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_validation()
    bool_1 = True
    maybe_1 = module_0.Maybe(none_type_0, bool_1)
    var_1 = maybe_1.map(none_type_0)
    bool_2 = var_1.__eq__(var_0)
    bool_3 = False
    list_0 = [bool_3, bool_3, bool_3]
    list_1 = [list_0]
    bool_4 = False
    maybe_2 = module_0.Maybe(list_1, bool_4)
    var_2 = maybe_0.to_try()
    bool_5 = True
    maybe_3 = module_0.Maybe(bool_5, bool_5)
    none_type_1 = None
    var_3 = maybe_3.get_or_else(none_type_1)
    var_4 = maybe_3.get_or_else(maybe_3)
    var_5 = maybe_3.filter(var_4)
    var_6 = var_5.to_try()
    var_2.ap(list_0)


def test_case_19():
    str_0 = ""
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_validation()


def test_case_20():
    set_0 = set()
    maybe_0 = module_0.Maybe(set_0, set_0)
    var_0 = maybe_0.to_validation()
    var_1 = var_0.to_try()
    var_1.bind(maybe_0)


def test_case_21():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(maybe_0, bool_1)
    var_0 = maybe_0.filter(bool_1)
    var_1 = maybe_1.to_lazy()
    var_2 = var_1.to_either()
    maybe_1.filter(var_2)


def test_case_22():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    dict_0 = {}
    var_0 = maybe_0.ap(bool_0)
    var_1 = maybe_0.to_either()
    var_2 = maybe_0.filter(var_0)
    object_0 = module_2.object(**dict_0)
    var_3 = var_1.to_try()
    var_4 = maybe_0.to_try()
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    var_5 = var_0.to_box()
    dict_1 = {object_0: dict_0}
    str_0 = "\n        If Maybe is empty or filterer returns False return default_value, in other case\n        return new instance of Maybe with the same value.\n\n        :param filterer:\n        :type filterer: Function(A) -> Boolean\n        :returns: copy of self when filterer returns True, in other case empty Maybe\n        :rtype: Maybe[A] | Maybe[None]\n        "
    var_6 = maybe_0.to_try()
    bool_1 = var_2.__eq__(str_0)
    bool_2 = False
    var_7 = var_2.filter(var_0)
    var_8 = maybe_1.bind(bool_2)
    var_9 = var_0.to_lazy()
    maybe_2 = module_0.Maybe(dict_1, bool_2)
    bool_3 = maybe_2.__eq__(maybe_2)
    var_10 = maybe_2.to_try()
    var_5.filter(var_7)


def test_case_23():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = True
    maybe_1 = module_0.Maybe(none_type_0, bool_1)
    var_0 = maybe_1.map(none_type_0)
    bool_2 = var_0.__eq__(maybe_0)
    var_1 = var_0.filter(bool_2)
    bool_3 = False
    maybe_2 = module_0.Maybe(bool_2, bool_3)
    bool_4 = False
    var_2 = var_0.ap(none_type_0)
    var_3 = var_0.ap(none_type_0)
    var_4 = var_0.to_either()
    bool_5 = False
    maybe_3 = module_0.Maybe(var_4, bool_5)
    var_5 = maybe_0.to_try()
    maybe_4 = module_0.Maybe(maybe_0, var_5)
    var_6 = maybe_3.to_box()
    bool_6 = False
    maybe_5 = module_0.Maybe(bool_5, bool_6)
    tuple_0 = ()
    var_7 = maybe_3.get_or_else(tuple_0)
    var_8 = var_3.get_or_else(bool_4)
    none_type_0.filter(none_type_0)
