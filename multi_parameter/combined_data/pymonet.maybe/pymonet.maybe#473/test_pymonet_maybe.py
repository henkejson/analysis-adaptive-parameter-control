# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    str_0 = "lpc:BhEo4t%@P3 "
    maybe_0 = module_0.Maybe(str_0, str_0)


def test_case_1():
    str_0 = ""
    maybe_0 = module_0.Maybe(str_0, str_0)


def test_case_2():
    str_0 = 'Y\\h4"!>Ti3[d2'
    maybe_0 = module_0.Maybe(str_0, str_0)
    none_type_0 = None
    bool_0 = False
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = maybe_1.__eq__(maybe_1)
    maybe_1.filter(bool_0)


def test_case_3():
    complex_0 = -1612 - 1813.949j
    maybe_0 = module_0.Maybe(complex_0, complex_0)
    var_0 = maybe_0.to_lazy()
    maybe_1 = module_0.Maybe(complex_0, complex_0)
    bytes_0 = b"X"
    bool_0 = False
    var_1 = maybe_1.ap(complex_0)
    maybe_2 = module_0.Maybe(bytes_0, bool_0)
    var_2 = maybe_1.to_try()
    var_3 = var_0.bind(var_1)
    bool_1 = maybe_2.__eq__(complex_0)
    var_4 = var_1.to_box()
    var_4.map(var_0)


def test_case_4():
    bool_0 = False
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    list_0 = []
    none_type_0 = None
    maybe_1 = module_0.Maybe(list_0, none_type_0)
    var_0 = maybe_1.to_either()
    var_1 = var_0.ap(maybe_0)
    var_2 = var_1.to_try()
    var_2.to_either()


def test_case_5():
    none_type_0 = None
    int_0 = 5639
    bool_0 = False
    maybe_0 = module_0.Maybe(int_0, bool_0)
    maybe_0.map(none_type_0)


def test_case_6():
    dict_0 = {}
    bool_0 = True
    maybe_0 = module_0.Maybe(dict_0, bool_0)
    var_0 = maybe_0.to_lazy()
    none_type_0 = None
    var_1 = maybe_0.get_or_else(none_type_0)
    var_2 = maybe_0.bind(none_type_0)
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    var_3 = maybe_0.to_either()
    var_4 = maybe_0.to_lazy()
    var_5 = maybe_0.get_or_else(var_4)
    var_5.to_lazy()


def test_case_7():
    int_0 = 1
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_lazy()
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1.bind(var_1)


def test_case_8():
    str_0 = 'Yht"!>Ti3[d2'
    maybe_0 = module_0.Maybe(str_0, str_0)
    bool_0 = maybe_0.get_or_else(str_0)
    var_0 = maybe_0.filter(maybe_0)
    var_1 = var_0.ap(str_0)
    var_2 = maybe_0.get_or_else(var_1)


def test_case_9():
    str_0 = "HPT%9l1L+Q[Ot7`/B\x0c\\"
    int_0 = 992
    bool_0 = False
    maybe_0 = module_0.Maybe(int_0, bool_0)
    maybe_0.ap(str_0)


def test_case_10():
    bool_0 = False
    bool_1 = True
    str_0 = "\n        Transform Either to Maybe.\n\n        :returns: Maybe with previous value\n        :rtype: Maybe[A]\n        "
    tuple_0 = (bool_0, bool_0, bool_1, str_0)
    bool_2 = False
    maybe_0 = module_0.Maybe(bool_0, bool_2)
    var_0 = maybe_0.get_or_else(bool_1)
    list_0 = [tuple_0, bool_0]
    maybe_1 = module_0.Maybe(bool_1, list_0)
    var_1 = maybe_1.get_or_else(list_0)
    var_1.get_or_else(bool_1)


def test_case_11():
    complex_0 = -353.0525 - 1194.41j
    maybe_0 = module_0.Maybe(complex_0, complex_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    var_1 = maybe_0.to_try()
    var_2 = maybe_0.filter(var_1)
    var_3 = maybe_0.to_box()
    float_0 = 950.772668
    var_4 = maybe_0.get_or_else(float_0)


def test_case_12():
    bytes_0 = b"U\x1be\xeb\xdb"
    none_type_0 = None
    maybe_0 = module_0.Maybe(bytes_0, none_type_0)
    var_0 = maybe_0.to_box()


def test_case_13():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_box()
    var_1.get_or_else(var_0)


def test_case_14():
    float_0 = -1303.45298
    int_0 = -1209
    bytes_0 = b"\xbeAE\xd9d\x87\xc7\x98\x98"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_try()
    var_1 = var_0.get_or_else(int_0)
    var_1.ap(float_0)


def test_case_15():
    bytes_0 = b"vB\xbd \xdb\x07g/\xddW\xd1\xb5G \x0b"
    bool_0 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.to_try()
    maybe_0.map(var_0)


def test_case_16():
    str_0 = "l8>;`m\x0cs>~8^=`yVWpp "
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.to_validation()
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, var_0)
    bool_0 = maybe_1.__eq__(maybe_1)
    var_1 = maybe_1.filter(var_0)
    var_2 = maybe_1.ap(str_0)


def test_case_17():
    complex_0 = -1612 - 1813.949j
    maybe_0 = module_0.Maybe(complex_0, complex_0)
    var_0 = maybe_0.to_lazy()
    maybe_1 = module_0.Maybe(complex_0, complex_0)
    bytes_0 = b"X"
    bool_0 = False
    var_1 = maybe_1.ap(complex_0)
    maybe_2 = module_0.Maybe(bytes_0, bool_0)
    var_2 = maybe_1.to_try()
    var_3 = var_0.bind(var_1)
    bool_1 = maybe_2.__eq__(complex_0)
    var_4 = var_1.to_box()
    var_5 = maybe_2.to_validation()
    var_2.ap(maybe_0)


def test_case_18():
    bytes_0 = b"\x17\xd2\xcf\x01\xc0B"
    str_0 = "f(\ngLwUdJ/>Z6q{el<|,"
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_either()
    maybe_1 = module_0.Maybe(str_0, bytes_0)
    var_1 = maybe_1.map(var_0)
    var_2 = var_1.to_lazy()
    var_3 = var_2.to_validation()
    var_4 = var_3.to_either()
    set_0 = {str_0, str_0, str_0}
    maybe_2 = module_0.Maybe(bytes_0, str_0)
    var_5 = maybe_2.to_try()
    bool_1 = False
    set_1 = {bool_1, bool_1}
    maybe_3 = module_0.Maybe(set_1, bool_1)
    var_6 = maybe_3.to_box()
    var_7 = maybe_2.ap(str_0)
    maybe_3.bind(set_0)


def test_case_19():
    bool_0 = True
    bool_1 = False
    float_0 = -1002.151
    none_type_0 = None
    dict_0 = {none_type_0: none_type_0}
    maybe_0 = module_0.Maybe(none_type_0, dict_0)
    var_0 = maybe_0.get_or_else(bool_1)
    var_1 = maybe_0.ap(float_0)
    var_2 = var_1.filter(bool_0)
    var_3 = var_1.to_either()
    bool_2 = maybe_0.__eq__(dict_0)
    var_4 = maybe_0.map(none_type_0)
    var_5 = var_4.to_try()
    bool_3 = var_1.__eq__(maybe_0)
    var_6 = var_4.to_box()
    maybe_1 = module_0.Maybe(bool_0, bool_2)
    var_0.to_lazy()
