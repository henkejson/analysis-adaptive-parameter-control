# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    bytes_0 = b"`+\x1b\xb3"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)


def test_case_3():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    dict_0 = {bool_0: none_type_0}
    bool_1 = maybe_0.__eq__(dict_0)
    var_0 = maybe_0.to_try()
    var_1 = var_0.filter(none_type_0)
    var_2 = maybe_0.to_try()
    var_0.to_try()


def test_case_4():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.filter(bool_1)
    var_1 = maybe_0.to_lazy()
    var_2 = maybe_1.to_validation()
    var_3 = maybe_0.map(var_2)
    var_4 = maybe_0.to_box()
    maybe_1.filter(var_0)


def test_case_5():
    str_0 = "=.K`*la0"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.to_validation()
    bool_0 = False
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    maybe_1.map(bool_0)


def test_case_6():
    bytes_0 = b"*\xce\xddA\x00\xfc\x16\xbb\x8c\x83\xf4f\x08x\x02\xcb"
    bytes_1 = b"\x045E8"
    str_0 = "*@M9  CO1"
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.bind(bytes_1)
    var_1 = var_0.ap(bytes_0)
    var_2 = var_0.to_try()
    var_3 = var_1.to_box()
    var_4 = var_0.to_either()
    var_5 = var_0.filter(var_4)


def test_case_7():
    bytes_0 = b"\xcc\x86\xa8\xe6\xbc\xe3-\x07\x17q\xbf\x1d2\xf4\xeay\x9d"
    int_0 = 1
    bool_0 = False
    maybe_0 = module_0.Maybe(int_0, bool_0)
    maybe_0.bind(bytes_0)


def test_case_8():
    none_type_0 = None
    none_type_1 = None
    maybe_0 = module_0.Maybe(none_type_1, none_type_1)
    maybe_0.ap(none_type_0)


def test_case_9():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.filter(bool_1)
    maybe_1.filter(var_0)


def test_case_10():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(bool_0, bool_1)
    bool_2 = maybe_1.__eq__(maybe_0)
    var_0 = maybe_0.filter(bool_1)
    var_1 = maybe_0.to_lazy()
    var_2 = maybe_1.to_validation()
    var_3 = maybe_0.map(var_2)
    var_4 = maybe_0.to_box()
    var_5 = var_3.get_or_else(var_3)
    maybe_1.filter(var_0)


def test_case_11():
    bool_0 = True
    str_0 = "\n        :param constructor_fn: function to call during fold method call\n        :type constructor_fn: Function() -> A\n        "
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.map(str_0)
    var_1 = var_0.to_either()
    bool_1 = False
    maybe_1 = module_0.Maybe(str_0, bool_1)
    var_2 = maybe_1.get_or_else(bool_0)
    maybe_1.filter(bool_1)


def test_case_12():
    list_0 = []
    bool_0 = False
    maybe_0 = module_0.Maybe(list_0, bool_0)
    var_0 = maybe_0.to_either()
    var_0.to_either()


def test_case_13():
    int_0 = -649
    int_1 = 1740
    int_2 = 1
    maybe_0 = module_0.Maybe(int_1, int_2)
    var_0 = maybe_0.to_box()
    var_0.bind(int_0)


def test_case_14():
    tuple_0 = ()
    tuple_1 = ()
    bool_0 = False
    maybe_0 = module_0.Maybe(tuple_1, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_validation()
    var_2 = var_1.to_try()
    var_2.map(tuple_0)


def test_case_15():
    bool_0 = True
    bytes_0 = b"\xf2 j"
    tuple_0 = (bytes_0,)
    maybe_0 = module_0.Maybe(tuple_0, tuple_0)
    var_0 = maybe_0.to_lazy()
    var_0.get_or_else(bool_0)


def test_case_16():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_either()
    bool_1 = False
    maybe_1 = module_0.Maybe(bool_0, bool_1)
    bool_2 = maybe_1.__eq__(maybe_0)
    var_1 = maybe_0.filter(bool_1)
    var_2 = maybe_1.to_validation()
    var_3 = maybe_0.map(var_2)
    var_4 = maybe_0.to_box()
    var_5 = var_1.bind(var_2)
    var_6 = maybe_0.bind(maybe_1)
    var_7 = maybe_1.to_lazy()
    var_8 = var_3.get_or_else(var_3)
    maybe_1.filter(bool_1)


def test_case_17():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1 = module_0.Maybe(maybe_0, maybe_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.to_validation()
    var_2 = maybe_0.to_try()
    var_2.to_validation()


def test_case_18():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_validation()


def test_case_19():
    bool_0 = False
    bool_0.filter(bool_0)


def test_case_20():
    bool_0 = True
    int_0 = -549
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.map(bool_0)
    var_1.to_either()


def test_case_21():
    bytes_0 = b"\x8d\xdd\xcc\n\xe6!H\x14V\xeda\x08\xc6\x11 \xf8\x91\xa7."
    bytes_1 = b"\xb9\x07\x94\xf0?\xea\xb1\x84"
    bool_0 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_either()
    var_1.get_or_else(bytes_1)


def test_case_22():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_either()
    bool_1 = False
    maybe_1 = module_0.Maybe(bool_0, bool_1)
    bool_2 = maybe_1.__eq__(maybe_0)
    var_1 = maybe_1.to_either()
    maybe_0.filter(bool_1)


def test_case_23():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(bool_0, bool_1)
    bool_2 = maybe_1.__eq__(maybe_0)
    var_0 = maybe_0.filter(bool_1)
    var_1 = maybe_0.to_lazy()
    var_2 = maybe_1.to_validation()
    var_3 = maybe_0.map(var_2)
    var_4 = maybe_0.to_box()
    maybe_1.filter(var_0)


def test_case_24():
    bool_0 = True
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_validation()
    maybe_0.filter(bool_1)
