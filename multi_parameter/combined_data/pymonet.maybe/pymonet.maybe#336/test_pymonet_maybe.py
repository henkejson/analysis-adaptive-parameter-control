# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    int_0 = 1762
    maybe_0 = module_0.Maybe(int_0, int_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)


def test_case_3():
    bytes_0 = b"\n}\x90\xcbu\x8c.\x9d\xd1\x11\x9b\x0c\xd3"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    bool_1 = maybe_0.__eq__(bytes_0)
    var_0 = maybe_0.to_box()
    var_0.bind(bytes_0)


def test_case_4():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    var_1 = maybe_0.ap(none_type_0)
    none_type_1 = None
    maybe_1 = module_0.Maybe(none_type_1, none_type_1)
    var_2 = maybe_1.to_box()
    var_3 = maybe_1.get_or_else(none_type_0)
    var_4 = var_0.map(var_0)
    var_2.filter(var_3)


def test_case_5():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.ap(maybe_0)


def test_case_6():
    bytes_0 = b"\n}\x90\xcbu\x8c.\x9d\xd1\x11\x9b\x0c\xd3"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.bind(bytes_0)
    bool_0.to_either()


def test_case_7():
    none_type_0 = None
    bool_0 = True
    bool_1 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_1)
    list_0 = [bool_0, bool_0, bool_0]
    bool_2 = False
    maybe_1 = module_0.Maybe(list_0, bool_2)
    var_0 = maybe_1.get_or_else(none_type_0)
    maybe_1.bind(var_0)


def test_case_8():
    str_0 = "Sum"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.filter(str_0)
    var_1 = var_0.ap(str_0)
    var_2 = maybe_0.filter(var_1)
    var_3 = var_2.to_either()
    var_3.to_either()


def test_case_9():
    bytes_0 = b"\xf0Ve\x14\xf7\x986;\xa6\xc9i="
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_try()
    int_0 = 1718
    dict_0 = {int_0: int_0}
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1.ap(dict_0)


def test_case_10():
    none_type_0 = None
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    maybe_0 = module_0.Maybe(dict_0, dict_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_validation()
    maybe_1 = module_0.Maybe(var_1, bool_0)
    var_2 = maybe_1.filter(none_type_0)
    var_3 = var_2.to_try()
    tuple_0 = ()
    maybe_2 = module_0.Maybe(tuple_0, tuple_0)
    maybe_2.filter(var_3)


def test_case_11():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = True
    tuple_0 = (bool_0, bool_1)
    maybe_1 = module_0.Maybe(bool_0, tuple_0)
    var_0 = maybe_1.to_either()
    var_1 = maybe_1.get_or_else(maybe_1)
    var_2 = maybe_1.bind(none_type_0)
    maybe_2 = module_0.Maybe(bool_1, var_2)
    var_3 = maybe_1.ap(none_type_0)
    var_4 = maybe_0.get_or_else(var_3)
    var_5 = var_3.to_validation()


def test_case_12():
    list_0 = []
    bytes_0 = b"\x93\xce"
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_0, none_type_0)
    var_0 = maybe_0.get_or_else(bytes_0)
    var_0.ap(list_0)


def test_case_13():
    bytes_0 = b"\n}\x90\xcbu\x8c.\x9d\xd1\x11\x9b\x0c\xd3"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    bool_1 = maybe_0.to_validation()
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_either()
    bool_2 = var_1.__eq__(bytes_0)
    var_2 = maybe_0.to_either()


def test_case_14():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_1.to_either()
    var_1 = var_0.to_lazy()
    bool_1 = maybe_1.__eq__(var_1)
    var_2 = maybe_0.to_lazy()
    bool_2 = maybe_0.__eq__(maybe_0)
    var_3 = var_2.to_validation()
    bool_3 = False
    maybe_2 = module_0.Maybe(bool_3, bool_3)
    var_4 = maybe_2.get_or_else(bool_3)
    maybe_2.filter(var_4)


def test_case_15():
    bytes_0 = b"\n}\x90\xcbu\x8c.\x9d\xd1\x11\x9b\x0c\xd3"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.to_box()
    bool_1 = var_1.__eq__(bytes_0)


def test_case_16():
    float_0 = 1139.409
    str_0 = "Sum"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.filter(str_0)
    var_1 = var_0.ap(str_0)
    var_2 = maybe_0.filter(var_1)
    var_3 = var_2.to_either()
    bool_0 = var_0.__eq__(var_3)
    var_4 = maybe_0.to_lazy()
    var_5 = maybe_0.to_either()
    bool_1 = var_5.__eq__(float_0)
    var_6 = var_2.ap(var_4)


def test_case_17():
    str_0 = "\n        Applies the function inside the Maybe[A] structure to another applicative type for notempty Maybe.\n        For empty returns copy of itself\n\n        :param applicative: applicative contains function\n        :type applicative: Maybe[B]\n        :returns: new Maybe with result of contains function\n        :rtype: Maybe[A(B) | None]\n        "
    none_type_0 = None
    maybe_0 = module_0.Maybe(str_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    bool_0 = False
    maybe_1 = module_0.Maybe(maybe_0, bool_0)


def test_case_18():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_validation()
    bool_0 = True
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    var_1 = maybe_0.to_try()
    var_0.ap(none_type_0)


def test_case_19():
    complex_0 = 506.51934 + 755.5827j
    maybe_0 = module_0.Maybe(complex_0, complex_0)
    str_0 = "Sum"
    maybe_1 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_1.filter(str_0)
    var_1 = var_0.ap(str_0)
    var_2 = maybe_1.filter(var_1)
    var_3 = var_1.to_lazy()
    var_4 = maybe_1.to_lazy()
    var_5 = maybe_1.to_either()
    bool_0 = maybe_1.__eq__(maybe_0)
    str_0.to_either()


def test_case_20():
    str_0 = "\n    Task are data-type for handle execution of functions (in lazy way)\n    transform results of this function and handle errors.\n    "
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = maybe_0.__eq__(bool_0)
    var_0 = maybe_0.ap(maybe_0)
    var_1 = maybe_0.ap(str_0)
    var_2 = maybe_0.to_either()
    bool_2 = maybe_0.__eq__(str_0)
    var_3 = maybe_0.filter(none_type_0)
    var_4 = maybe_0.to_try()
    var_5 = maybe_0.ap(str_0)
    var_6 = var_3.filter(var_5)
    var_7 = maybe_0.get_or_else(str_0)
    bool_3 = False
    maybe_1 = module_0.Maybe(var_6, bool_3)
    bool_4 = var_3.__eq__(maybe_1)
    var_8 = var_5.map(var_7)
    var_9 = var_8.to_either()
    var_10 = maybe_1.to_lazy()
    var_11 = var_5.get_or_else(var_10)
    var_12 = var_10.to_try()
    var_13 = var_10.bind(var_12)
    bytes_0 = b"o\xf1\xc7>:\xa8\xd0\xc6\x12\xfc6T#\x9b\xdb\xbcI9p\xbd"
    var_14 = var_5.map(bytes_0)
    var_15 = var_6.bind(var_8)
    var_16 = var_2.ap(bool_3)
    var_4.to_either()


def test_case_21():
    bool_0 = False
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    bool_1 = maybe_1.__eq__(maybe_1)
    none_type_1 = None
    bool_2 = True
    maybe_2 = module_0.Maybe(bool_0, maybe_0)
    var_0 = maybe_1.to_either()
    var_1 = maybe_2.to_either()
    bool_3 = True
    dict_0 = {
        bool_1: maybe_0,
        none_type_1: bool_3,
        bool_2: maybe_0,
        bool_2: none_type_0,
    }
    maybe_3 = module_0.Maybe(dict_0, var_1)
    maybe_4 = module_0.Maybe(dict_0, bool_3)
    var_2 = maybe_2.bind(bool_1)
    var_3 = maybe_3.ap(maybe_0)
    var_4 = maybe_3.filter(none_type_0)
    var_5 = var_4.filter(var_3)
    bool_4 = maybe_1.__eq__(dict_0)
    var_6 = var_5.to_try()
    var_7 = maybe_3.to_validation()
    maybe_0.filter(var_6)
