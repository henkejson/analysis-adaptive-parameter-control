# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    int_0 = 1
    maybe_0 = module_0.Maybe(int_0, int_0)


def test_case_1():
    list_0 = []
    maybe_0 = module_0.Maybe(list_0, list_0)


def test_case_2():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_1.to_try()
    bool_0 = maybe_0.__eq__(maybe_1)
    bool_1 = maybe_0.__eq__(none_type_0)
    var_1 = maybe_1.to_lazy()
    var_0.to_validation()


def test_case_3():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_try()
    bool_0 = maybe_0.__eq__(var_0)
    bool_1 = maybe_0.__eq__(none_type_0)
    bool_1.to_lazy()


def test_case_4():
    int_0 = -527
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    none_type_0 = None
    var_0 = maybe_0.ap(none_type_0)
    var_1 = maybe_0.bind(var_0)
    var_2 = maybe_0.to_box()
    int_1 = 1387
    maybe_1 = module_0.Maybe(int_1, int_1)
    var_3 = maybe_0.to_validation()
    var_4 = maybe_1.map(bool_0)
    var_5 = maybe_1.to_lazy()
    var_6 = var_5.ap(maybe_0)


def test_case_5():
    bool_0 = True
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    maybe_1 = module_0.Maybe(bool_1, bool_1)
    bool_2 = maybe_1.__eq__(maybe_0)
    maybe_1.map(bool_0)


def test_case_6():
    bool_0 = True
    bool_1 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.bind(bool_0)
    bool_2 = True
    maybe_1 = module_0.Maybe(bool_1, bool_2)
    var_1 = maybe_1.to_box()
    var_1.ap(bool_0)


def test_case_7():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_1.to_try()
    bool_0 = maybe_0.__eq__(maybe_1)
    bool_1 = maybe_0.__eq__(none_type_0)
    maybe_0.bind(var_0)


def test_case_8():
    float_0 = 1440.654646
    maybe_0 = module_0.Maybe(float_0, float_0)
    bool_0 = False
    none_type_0 = None
    var_0 = maybe_0.ap(none_type_0)
    var_1 = maybe_0.filter(var_0)
    maybe_1 = module_0.Maybe(maybe_0, bool_0)


def test_case_9():
    bytes_0 = b"\xbe40\xf6N\xb6~\x02\xda|\xb64\xdb\xa1\x96:\xa7\xbf\xcaL"
    bool_0 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    maybe_0.ap(bytes_0)


def test_case_10():
    none_type_0 = None
    bool_0 = False
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    maybe_0.filter(none_type_0)


def test_case_11():
    complex_0 = -1361 + 1567.7977j
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.get_or_else(complex_0)
    none_type_0 = None
    bool_1 = True
    bool_2 = True
    maybe_1 = module_0.Maybe(bool_1, bool_2)
    var_1 = maybe_1.ap(none_type_0)
    var_2 = var_1.get_or_else(var_0)


def test_case_12():
    str_0 = ""
    tuple_0 = (str_0, str_0)
    maybe_0 = module_0.Maybe(tuple_0, tuple_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.filter(var_0)
    var_2 = var_1.to_box()
    var_3 = var_1.filter(var_0)
    var_2.to_box()


def test_case_13():
    none_type_0 = None
    none_type_1 = None
    maybe_0 = module_0.Maybe(none_type_1, none_type_1)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.get_or_else(none_type_1)
    var_2 = maybe_0.get_or_else(none_type_0)
    var_2.filter(var_1)


def test_case_14():
    list_0 = []
    maybe_0 = module_0.Maybe(list_0, list_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_either()


def test_case_15():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_try()
    var_1.to_try()


def test_case_16():
    float_0 = 1207.524291
    set_0 = {float_0, float_0, float_0, float_0}
    bool_0 = False
    maybe_0 = module_0.Maybe(set_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_validation()
    var_1.to_validation()


def test_case_17():
    str_0 = "\n        If Maybe is empty return default_value, in other case.\n\n        :param default_value: value to return if Maybe is empty\n        :type default_value: Any\n        :returns: value of Maybe or default_value\n        :rtype: A\n        "
    bool_0 = True
    tuple_0 = (str_0, bool_0)
    maybe_0 = module_0.Maybe(tuple_0, tuple_0)
    var_0 = maybe_0.to_try()


def test_case_18():
    none_type_0 = None
    bool_0 = True
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_try()
    var_0.bind(none_type_0)


def test_case_19():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_0.to_validation()


def test_case_20():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    bool_1 = maybe_1.__eq__(maybe_0)
    var_0 = maybe_1.map(bool_0)
    var_1 = var_0.to_try()
    var_2 = var_0.to_either()
    var_3 = var_0.ap(var_0)
    var_4 = maybe_1.bind(var_0)
    var_5 = var_3.to_lazy()
    bool_2 = var_2.__eq__(var_0)
    var_6 = var_0.get_or_else(var_2)
    var_5.to_lazy()


def test_case_21():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = True
    maybe_1 = module_0.Maybe(bool_0, bool_1)
    bool_2 = maybe_1.__eq__(maybe_0)
    var_0 = maybe_1.map(bool_2)
    var_1 = maybe_1.to_try()
    var_2 = maybe_1.get_or_else(var_1)
    var_3 = maybe_1.to_either()
    var_4 = var_0.ap(var_3)
    var_5 = var_4.bind(maybe_0)
    var_6 = var_4.to_lazy()
    var_7 = var_0.get_or_else(var_1)
    bool_3 = var_0.__eq__(var_7)
    none_type_0 = None
    var_8 = var_4.get_or_else(none_type_0)
    var_9 = var_0.to_lazy()
    var_10 = var_5.to_either()
    var_11 = var_10.to_validation()
    var_12 = var_4.to_box()
    maybe_2 = module_0.Maybe(var_1, bool_3)
    var_13 = var_12.to_validation()
    tuple_0 = ()
    var_14 = var_6.map(tuple_0)
    var_15 = maybe_2.to_lazy()
    var_7.ap(var_11)
