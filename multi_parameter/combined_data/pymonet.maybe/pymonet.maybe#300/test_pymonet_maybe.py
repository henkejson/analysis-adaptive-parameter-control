# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1
import builtins as module_2


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = maybe_0.__eq__(none_type_0)


def test_case_3():
    complex_0 = 3.9301 + 1134.70738j
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    none_type_1 = None
    bool_1 = True
    maybe_1 = module_0.Maybe(none_type_1, bool_1)
    var_0 = maybe_1.map(complex_0)
    var_1 = var_0.to_box()
    var_2 = var_0.bind(none_type_0)
    var_3 = maybe_1.bind(complex_0)
    var_4 = var_2.filter(var_3)
    maybe_0.filter(var_1)


def test_case_4():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    none_type_1 = None
    bool_1 = True
    maybe_1 = module_0.Maybe(none_type_1, bool_1)
    var_0 = maybe_0.to_box()
    var_1 = maybe_1.bind(none_type_0)
    var_2 = var_1.filter(var_0)
    maybe_0.filter(var_0)


def test_case_5():
    str_0 = ""
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.to_validation()
    maybe_0.bind(var_0)


def test_case_6():
    list_0 = []
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.ap(none_type_0)
    var_1 = var_0.to_box()
    var_2 = maybe_0.filter(var_1)
    var_3 = maybe_0.get_or_else(list_0)
    var_3.to_box()


def test_case_7():
    bool_0 = True
    dict_0 = {}
    none_type_0 = None
    maybe_0 = module_0.Maybe(dict_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_validation()
    tuple_0 = (dict_0, dict_0, var_1, none_type_0)
    maybe_1 = module_0.Maybe(tuple_0, none_type_0)
    maybe_1.ap(bool_0)


def test_case_8():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    bytes_0 = b"\x0c\xeb;a\xfe\xc1\xa3g\x17\xed\x8c\xc1\x0bQ\x0b\x04\xac"
    bool_0 = False
    maybe_1 = module_0.Maybe(bytes_0, bool_0)
    var_1 = maybe_0.to_try()
    maybe_0.filter(var_0)


def test_case_9():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_box()
    var_1.ap(none_type_0)


def test_case_10():
    float_0 = -3015.76469
    bool_0 = False
    maybe_0 = module_0.Maybe(float_0, bool_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_try()


def test_case_11():
    generic_0 = module_1.Generic()
    bool_0 = True
    maybe_0 = module_0.Maybe(generic_0, bool_0)
    var_0 = maybe_0.to_box()


def test_case_12():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    none_type_1 = None
    var_0 = maybe_0.to_box()
    maybe_0.map(none_type_1)


def test_case_13():
    str_0 = '\t6"|wN[@ev"ddJ:TKe'
    maybe_0 = module_0.Maybe(str_0, str_0)
    none_type_0 = None
    var_0 = maybe_0.ap(none_type_0)
    var_1 = maybe_0.to_box()
    object_0 = module_2.object()
    var_2 = maybe_0.to_lazy()
    var_3 = var_0.map(var_2)
    var_4 = var_3.to_lazy()
    bool_0 = var_3.__eq__(var_1)
    var_5 = var_2.to_validation()
    var_6 = var_3.map(var_1)
    maybe_1 = module_0.Maybe(var_0, bool_0)
    var_7 = var_1.to_validation()
    var_8 = var_3.filter(var_2)


def test_case_14():
    str_0 = '\t6"|wN[@ev"ddJ:TKe'
    maybe_0 = module_0.Maybe(str_0, str_0)
    bool_0 = True
    maybe_1 = module_0.Maybe(str_0, bool_0)
    none_type_0 = None
    var_0 = maybe_1.ap(none_type_0)
    var_1 = maybe_1.to_box()
    object_0 = var_1.to_validation()
    var_2 = maybe_0.to_lazy()
    var_3 = var_0.map(var_2)
    var_4 = var_3.to_lazy()
    bool_1 = var_3.__eq__(var_1)
    var_5 = var_2.to_validation()
    var_6 = var_3.map(var_1)
    maybe_2 = module_0.Maybe(var_0, bool_1)
    var_7 = var_1.to_validation()
    var_8 = var_3.filter(maybe_1)
    var_9 = var_2.ap(var_2)
    var_10 = maybe_0.to_try()
    var_11 = var_8.to_validation()
    var_11.map(maybe_0)


def test_case_15():
    float_0 = 38.0
    bool_0 = False
    maybe_0 = module_0.Maybe(float_0, bool_0)
    bool_1 = True
    list_0 = [bool_1, bool_1, bool_1]
    none_type_0 = None
    bool_2 = True
    maybe_1 = module_0.Maybe(none_type_0, bool_2)
    var_0 = maybe_1.to_validation()
    var_0.bind(list_0)


def test_case_16():
    complex_0 = 3.9301 + 1134.70738j
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    none_type_1 = None
    bool_1 = True
    maybe_1 = module_0.Maybe(none_type_1, bool_1)
    var_0 = maybe_1.map(complex_0)
    var_1 = var_0.to_box()
    var_2 = var_0.bind(none_type_0)
    var_3 = var_0.to_lazy()
    var_4 = var_2.bind(var_3)
    var_5 = var_0.get_or_else(none_type_1)
    var_6 = var_2.filter(var_5)
    var_7 = var_0.to_either()
    var_8 = var_6.ap(bool_1)
    var_9 = var_7.to_validation()
    var_10 = var_8.to_lazy()
    maybe_2 = module_0.Maybe(var_8, var_10)
    bool_2 = maybe_2.__eq__(maybe_1)
    maybe_0.filter(bool_0)


def test_case_17():
    complex_0 = 3.9301 + 1134.70738j
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.map(complex_0)
    var_1 = var_0.to_box()
    var_2 = var_0.bind(none_type_0)
    var_3 = var_2.ap(none_type_0)
    maybe_1 = module_0.Maybe(complex_0, complex_0)
    var_4 = maybe_1.filter(var_3)
    var_5 = var_4.ap(bool_0)
    var_6 = maybe_0.to_lazy()
    bool_1 = False
    maybe_2 = module_0.Maybe(maybe_1, var_6)
    bool_2 = var_3.__eq__(var_5)
    var_7 = var_3.to_box()
    var_8 = var_0.to_either()
    var_9 = maybe_0.get_or_else(bool_2)
    var_10 = var_2.to_try()
    var_11 = maybe_0.ap(bool_2)
    maybe_3 = module_0.Maybe(bool_1, var_0)
    var_12 = var_5.to_box()
    var_12.to_box()


def test_case_18():
    tuple_0 = ()
    none_type_0 = None
    maybe_0 = module_0.Maybe(tuple_0, none_type_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_validation()
    bool_1 = False
    maybe_1 = module_0.Maybe(tuple_0, none_type_0)
    bool_2 = False
    maybe_2 = module_0.Maybe(bool_1, bool_2)
    maybe_3 = module_0.Maybe(none_type_0, bool_1)
    var_1 = maybe_0.to_lazy()
    var_2 = maybe_2.to_lazy()
    var_3 = maybe_3.to_lazy()
    var_4 = var_1.to_validation()
    maybe_0.map(none_type_0)
