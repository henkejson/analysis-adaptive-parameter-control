# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1
import builtins as module_2


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.to_either()
    var_2 = maybe_0.ap(bool_0)
    var_3 = maybe_0.filter(var_1)
    maybe_1 = module_0.Maybe(var_0, var_3)
    bool_1 = var_2.__eq__(var_3)
    bool_2 = maybe_0.__eq__(maybe_0)
    var_4 = var_2.bind(bool_1)
    bool_3 = False
    maybe_2 = module_0.Maybe(var_1, bool_3)
    maybe_2.filter(maybe_0)


def test_case_3():
    float_0 = -3114.7826
    bytes_0 = b"\x95\xa2\x8c"
    maybe_0 = module_0.Maybe(bytes_0, float_0)
    bool_0 = maybe_0.__eq__(float_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(float_0, bool_1)
    maybe_1.filter(maybe_0)


def test_case_4():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.map(bool_0)
    int_0 = -580
    var_1 = var_0.bind(int_0)
    var_2 = var_1.to_either()
    var_3 = maybe_0.get_or_else(bool_0)
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    var_4 = var_0.to_either()
    var_5 = maybe_0.to_box()
    var_6 = var_0.to_try()
    var_7 = maybe_0.to_try()
    var_8 = var_0.to_box()
    var_4.filter(var_3)


def test_case_5():
    list_0 = []
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_validation()
    maybe_0.map(list_0)


def test_case_6():
    bool_0 = False
    bool_1 = False
    str_0 = ";"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.bind(bool_1)
    var_1 = var_0.ap(bool_0)


def test_case_7():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.filter(none_type_0)
    var_1 = var_0.get_or_else(none_type_0)
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    none_type_1 = None
    var_2 = maybe_1.to_lazy()
    var_3 = maybe_0.get_or_else(none_type_1)
    bool_1 = var_3.__eq__(maybe_1)
    maybe_1.ap(none_type_1)


def test_case_8():
    none_type_0 = None
    int_0 = -4827
    bool_0 = True
    dict_0 = {int_0: int_0, int_0: bool_0, bool_0: int_0, int_0: int_0}
    maybe_0 = module_0.Maybe(dict_0, dict_0)
    var_0 = maybe_0.get_or_else(none_type_0)


def test_case_9():
    bytes_0 = b"\xf0\xc0\xc0\r\xfbn\x9b\x892\xfc\xd0|"
    bool_0 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.get_or_else(bytes_0)
    var_0.to_box()


def test_case_10():
    dict_0 = {}
    generic_0 = module_1.Generic(**dict_0)
    bool_0 = False
    maybe_0 = module_0.Maybe(generic_0, bool_0)
    bool_1 = True
    int_0 = -3147
    bool_2 = False
    maybe_1 = module_0.Maybe(int_0, bool_2)
    var_0 = maybe_1.to_either()
    var_0.ap(bool_1)


def test_case_11():
    str_0 = "DXkV["
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_box()
    var_0.bind(str_0)


def test_case_12():
    int_0 = 1
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_box()
    bool_0 = var_0.__eq__(int_0)


def test_case_13():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_1.ap(bool_0)
    var_1 = var_0.to_lazy()


def test_case_14():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_validation()
    bool_0 = True
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    var_2 = maybe_1.ap(var_1)


def test_case_15():
    str_0 = "\n        Method executes a reducer function\n        on each element of the array, resulting in a single output value.\n\n        :param fn: function to call with ImmutableList value\n        :type fn: Function(A, B) -> A\n        :returns: A\n        "
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    object_0 = module_2.object()
    set_0 = {object_0}
    maybe_0 = module_0.Maybe(set_0, object_0)
    var_0 = maybe_0.get_or_else(object_0)
    var_1 = maybe_0.to_try()
    var_0.bind(dict_0)


def test_case_16():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_try()
    var_0.to_either()


def test_case_17():
    tuple_0 = ()
    bool_0 = True
    maybe_0 = module_0.Maybe(tuple_0, bool_0)
    var_0 = maybe_0.to_validation()
    bytes_0 = b"\x9cU@\x98\xe8}\xb08\xc2\xfb\xbdB\x04'"
    bool_1 = False
    bool_2 = True
    maybe_1 = module_0.Maybe(bool_1, bool_2)
    var_1 = maybe_1.to_box()
    var_1.ap(bytes_0)


def test_case_18():
    bool_0 = True
    str_0 = "A|3"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.ap(bool_0)
    var_1 = maybe_0.bind(var_0)
    var_2 = var_1.to_lazy()
    maybe_1 = module_0.Maybe(var_0, maybe_0)
    var_3 = maybe_0.bind(bool_0)
    var_4 = maybe_0.ap(var_0)
    var_5 = var_4.bind(var_0)
    var_6 = var_3.to_try()
    var_7 = var_2.to_either()
    maybe_2 = module_0.Maybe(var_2, var_4)
    var_8 = maybe_2.to_box()
    var_8.to_box()


def test_case_19():
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_0, none_type_0)
    var_0 = maybe_0.to_either()
    maybe_0.bind(var_0)


def test_case_20():
    none_type_0 = None
    int_0 = -611
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.to_either()
    var_2 = maybe_0.map(var_1)
    var_3 = var_1.bind(int_0)
    var_4 = var_3.to_validation()
    var_5 = var_1.to_try()
    var_6 = maybe_0.filter(var_1)
    var_7 = var_6.filter(var_5)
    var_8 = maybe_0.to_box()
    var_9 = var_7.get_or_else(var_4)
    maybe_1 = module_0.Maybe(var_0, var_3)
    bool_1 = var_3.__eq__(var_8)
    bool_2 = var_9.__eq__(maybe_0)
    var_10 = maybe_0.filter(var_4)
    bool_3 = maybe_1.__eq__(var_7)
    var_11 = var_1.bind(var_9)
    var_12 = var_4.to_either()
    var_13 = var_12.bind(var_4)
    var_14 = var_6.to_try()
    bytes_0 = b"\xc4\x8crMx"
    var_15 = var_5.get_or_else(bytes_0)
    var_16 = maybe_0.ap(none_type_0)


def test_case_21():
    none_type_0 = None
    bytes_0 = b"u7\xe1\x15J"
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.ap(none_type_0)
    bool_1 = False
    bool_2 = False
    maybe_1 = module_0.Maybe(bool_1, bool_2)
    bool_3 = maybe_1.__eq__(maybe_1)
    var_1 = maybe_1.to_validation()
    var_2 = var_1.to_either()
    var_1.to_validation()
