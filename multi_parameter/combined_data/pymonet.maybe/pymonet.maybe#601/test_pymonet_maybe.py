# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    int_0 = 3181
    maybe_0 = module_0.Maybe(int_0, int_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)


def test_case_3():
    int_0 = 3781
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = maybe_0.__eq__(int_0)


def test_case_4():
    none_type_0 = None
    none_type_1 = None
    int_0 = 0
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.map(none_type_1)
    var_1 = var_0.to_lazy()
    var_2 = var_1.to_validation()
    var_2.filter(none_type_0)


def test_case_5():
    bool_0 = True
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_lazy()
    bool_2 = True
    maybe_1 = module_0.Maybe(var_0, bool_2)
    maybe_0.map(var_0)


def test_case_6():
    bool_0 = True
    bool_1 = False
    set_0 = {bool_1}
    list_0 = [bool_1, set_0, bool_1]
    maybe_0 = module_0.Maybe(list_0, list_0)
    var_0 = maybe_0.bind(bool_0)


def test_case_7():
    int_0 = -169
    bytes_0 = b"\xe1\x8e"
    none_type_0 = None
    maybe_0 = module_0.Maybe(bytes_0, none_type_0)
    bool_0 = maybe_0.__eq__(int_0)
    var_0 = maybe_0.to_try()
    var_1 = var_0.get_or_else(none_type_0)
    var_2 = maybe_0.to_box()
    var_3 = maybe_0.get_or_else(none_type_0)
    var_4 = var_2.to_either()
    set_0 = {int_0, bool_0}
    maybe_1 = module_0.Maybe(int_0, bool_0)
    maybe_1.bind(set_0)


def test_case_8():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_validation()
    str_0 = "ki*&yrDT4fRYC42\x0c\x0bkg>"
    bytes_0 = b"\xc5\x1c\x11\x06\xc0\x99"
    maybe_1 = module_0.Maybe(bytes_0, bytes_0)
    var_1 = maybe_1.to_lazy()
    var_2 = maybe_1.ap(str_0)
    var_3 = var_1.ap(str_0)


def test_case_9():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0}
    int_0 = 0
    bool_0 = False
    maybe_0 = module_0.Maybe(int_0, bool_0)
    maybe_0.ap(dict_0)


def test_case_10():
    bytes_0 = b"\xe8JG\x8e'\xb3\x9b\xef\x07"
    bool_0 = True
    bool_1 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_1)
    maybe_1 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_1.ap(bool_0)
    maybe_2 = module_0.Maybe(var_0, bytes_0)
    var_1 = maybe_1.filter(var_0)
    bytes_0.to_lazy()


def test_case_11():
    int_0 = 1837
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.filter(int_0)
    var_1 = var_0.to_either()
    bool_0 = False
    maybe_1 = module_0.Maybe(var_1, bool_0)
    maybe_1.filter(var_1)


def test_case_12():
    bytes_0 = b"\xe8JG\x8e'\xb3\x9b\xef\x07"
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    maybe_1 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_1.get_or_else(maybe_0)
    var_1 = var_0.ap(var_0)
    var_2 = maybe_0.ap(bytes_0)
    var_3 = maybe_1.filter(var_2)
    var_4 = maybe_0.to_validation()
    var_4.bind(var_4)


def test_case_13():
    str_0 = 'l?o"$TToE%h'
    dict_0 = {}
    none_type_0 = None
    maybe_0 = module_0.Maybe(dict_0, none_type_0)
    var_0 = maybe_0.get_or_else(str_0)


def test_case_14():
    complex_0 = -463.7 + 1593.2082j
    int_0 = 3826
    bool_0 = False
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.to_either()
    var_0.filter(complex_0)


def test_case_15():
    int_0 = -594
    list_0 = [int_0, int_0, int_0, int_0]
    str_0 = "jZ"
    str_1 = "8&\t<&$\\"
    bytes_0 = b"\xca\xa4\xd7\x92\xf7\xd9\x1f\xe8\x86\xf2\x90\x11\xcd\x08\x98"
    tuple_0 = (str_0, str_1, bytes_0)
    maybe_0 = module_0.Maybe(tuple_0, bytes_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_either()
    var_2 = var_1.to_box()
    var_2.get_or_else(list_0)


def test_case_16():
    int_0 = -385
    bool_0 = False
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.to_validation()
    maybe_0.ap(bool_0)


def test_case_17():
    float_0 = -235.0
    list_0 = [float_0, float_0]
    maybe_0 = module_0.Maybe(list_0, float_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_box()


def test_case_18():
    bytes_0 = b"R\x1d\x91h\xf8V\x13\x96,A\x8f\x02"
    bool_0 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.get_or_else(var_0)
    var_2 = maybe_0.to_lazy()
    var_0.filter(var_1)


def test_case_19():
    bytes_0 = b"\xc4\x03\xc0\xce\x12\xc7"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_try()


def test_case_20():
    int_0 = -169
    bytes_0 = b"\xe1\x8e"
    none_type_0 = None
    maybe_0 = module_0.Maybe(bytes_0, none_type_0)
    bool_0 = maybe_0.__eq__(int_0)
    var_0 = maybe_0.to_try()
    var_1 = var_0.get_or_else(none_type_0)
    var_2 = maybe_0.to_box()
    var_3 = maybe_0.get_or_else(none_type_0)
    var_4 = var_2.to_either()
    set_0 = {int_0, bool_0}
    var_3.filter(set_0)


def test_case_21():
    int_0 = 146
    bool_0 = False
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_either()
    maybe_0.map(int_0)


def test_case_22():
    int_0 = -348
    set_0 = {int_0}
    maybe_0 = module_0.Maybe(set_0, int_0)
    var_0 = maybe_0.ap(maybe_0)
    var_1 = var_0.to_try()
    none_type_0 = None
    bool_0 = maybe_0.__eq__(none_type_0)
    var_2 = var_0.ap(bool_0)
    var_3 = var_2.to_validation()
    bool_1 = False
    maybe_1 = module_0.Maybe(var_1, bool_1)
    var_4 = maybe_0.to_box()
    var_5 = maybe_0.ap(none_type_0)
    var_6 = maybe_0.filter(var_4)
    var_7 = var_0.to_box()
    var_8 = maybe_0.to_box()
    var_9 = var_4.to_lazy()
    bool_2 = maybe_0.__eq__(var_0)
    var_3.ap(var_4)


def test_case_23():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.to_either()
    bool_1 = var_1.__eq__(none_type_0)
    maybe_0.bind(var_1)
