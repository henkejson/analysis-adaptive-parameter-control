# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = maybe_0.__eq__(bool_0)
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    bool_2 = maybe_1.__eq__(none_type_0)


def test_case_3():
    bytes_0 = b"[\xf7\xc2\xeaJ5\xfa\xe3\xc5\xef\x86\xae\x14\xa3S."
    float_0 = -4484.2508
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    bool_0 = True
    maybe_0 = module_0.Maybe(dict_0, bool_0)
    list_0 = []
    tuple_0 = (dict_0, maybe_0, list_0)
    bool_1 = True
    maybe_1 = module_0.Maybe(tuple_0, bool_1)
    var_0 = maybe_1.map(bytes_0)
    var_1 = var_0.to_lazy()
    var_2 = var_1.to_either()


def test_case_4():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_validation()
    maybe_0.map(var_0)


def test_case_5():
    str_0 = "$~'\x0c'X|W0FF(5M-5"
    bool_0 = True
    none_type_0 = None
    none_type_1 = None
    bool_1 = True
    maybe_0 = module_0.Maybe(none_type_1, bool_1)
    var_0 = maybe_0.bind(none_type_0)
    maybe_1 = module_0.Maybe(str_0, bool_0)
    var_1 = maybe_1.to_validation()
    var_2 = var_1.to_lazy()
    var_3 = var_2.to_try()


def test_case_6():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = maybe_0.__eq__(bool_0)
    maybe_1 = module_0.Maybe(none_type_0, bool_1)
    maybe_2 = module_0.Maybe(bool_0, none_type_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    var_1 = maybe_2.to_try()
    var_2 = maybe_0.to_box()
    var_3 = var_0.ap(bool_1)
    var_4 = var_3.filter(var_1)
    maybe_3 = module_0.Maybe(var_0, var_1)
    maybe_2.filter(var_1)


def test_case_7():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.ap(none_type_0)


def test_case_8():
    complex_0 = -391 - 5447.8j
    bool_0 = False
    maybe_0 = module_0.Maybe(complex_0, bool_0)
    var_0 = maybe_0.to_lazy()
    tuple_0 = (complex_0,)
    maybe_1 = module_0.Maybe(tuple_0, complex_0)
    var_1 = maybe_1.to_validation()
    var_2 = maybe_1.filter(var_1)
    var_3 = maybe_1.to_either()


def test_case_9():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = maybe_0.__eq__(bool_0)
    maybe_1 = module_0.Maybe(bool_0, none_type_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    var_1 = maybe_1.to_try()
    var_2 = maybe_0.to_box()
    var_3 = maybe_0.to_either()
    var_3.ap(var_3)


def test_case_10():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_either()
    var_0.filter(var_0)


def test_case_11():
    bool_0 = True
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_box()
    complex_0 = 2305.235026 + 1141.87164j
    maybe_1 = module_0.Maybe(complex_0, complex_0)
    var_1 = maybe_1.to_try()
    var_1.to_validation()


def test_case_12():
    str_0 = "D{#F7Lf8@b"
    dict_0 = {}
    maybe_0 = module_0.Maybe(dict_0, dict_0)
    var_0 = maybe_0.to_try()
    var_0.map(str_0)


def test_case_13():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_0.to_validation()


def test_case_14():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = maybe_0.__eq__(bool_0)
    maybe_1 = module_0.Maybe(none_type_0, bool_1)
    maybe_2 = module_0.Maybe(bool_0, none_type_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    var_1 = maybe_2.to_try()
    var_2 = var_0.ap(bool_1)
    var_3 = var_2.filter(var_1)
    var_4 = var_3.to_lazy()
    var_5 = maybe_1.to_validation()
    maybe_3 = module_0.Maybe(var_0, var_1)
    maybe_2.filter(var_1)


def test_case_15():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = maybe_0.__eq__(bool_0)
    bool_2 = maybe_0.__eq__(maybe_0)
    maybe_1 = module_0.Maybe(none_type_0, bool_1)
    var_0 = maybe_0.get_or_else(maybe_0)
    var_1 = maybe_0.to_try()
    var_2 = maybe_0.to_box()
    var_3 = maybe_1.to_lazy()
    var_4 = maybe_0.to_either()
    var_5 = var_0.ap(bool_1)
    var_6 = var_5.filter(var_1)
    var_7 = var_6.to_lazy()
    var_8 = maybe_1.to_validation()
    maybe_2 = module_0.Maybe(var_0, var_1)
    maybe_1.filter(var_1)


def test_case_16():
    bool_0 = False
    none_type_0 = None
    generic_0 = module_1.Generic()
    maybe_0 = module_0.Maybe(generic_0, bool_0)
    bool_1 = maybe_0.__eq__(none_type_0)
    maybe_1 = module_0.Maybe(maybe_0, bool_1)
    maybe_1.bind(generic_0)


def test_case_17():
    str_0 = "{"
    set_0 = {str_0, str_0}
    bytes_0 = b"fO\xf1\xe8T\x0b\xf2K\xfbYUw$\xd2\x1f\x1e\xe8"
    none_type_0 = None
    none_type_1 = None
    tuple_0 = (set_0,)
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.ap(str_0)
    var_1 = var_0.bind(tuple_0)
    var_2 = var_1.ap(none_type_1)
    var_3 = var_2.filter(none_type_0)
    var_4 = var_3.filter(bytes_0)
    maybe_1 = module_0.Maybe(var_3, var_2)
    bool_1 = maybe_1.__eq__(var_1)
    maybe_2 = module_0.Maybe(maybe_0, bool_0)
    bool_2 = True
    int_0 = 3233
    tuple_1 = (var_0, bool_2, var_2, int_0)
    bool_3 = var_2.__eq__(tuple_1)


def test_case_18():
    bytes_0 = b"\x9e\xbd\xf6\xd8"
    bool_0 = False
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_lazy()
    maybe_1 = module_0.Maybe(bytes_0, bool_0)
    var_2 = maybe_1.to_try()
    maybe_2 = maybe_1.to_lazy()
    bool_2 = maybe_2.__eq__(bytes_0)
    var_3 = maybe_2.to_box()
    maybe_3 = module_0.Maybe(var_3, var_3)
    maybe_4 = var_3.to_lazy()
    var_4 = maybe_4.to_try()
    maybe_4.to_lazy()


def test_case_19():
    bytes_0 = b"\x9e\xbd\xf6\xd8"
    bool_0 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    maybe_1 = module_0.Maybe(maybe_0, maybe_0)
    bool_1 = maybe_1.__eq__(bytes_0)
    maybe_2 = module_0.Maybe(bool_1, bool_1)
    maybe_3 = module_0.Maybe(maybe_2, maybe_2)
    maybe_4 = module_0.Maybe(maybe_1, maybe_1)
    var_0 = maybe_4.to_lazy()
    var_1 = maybe_2.ap(var_0)
    bool_2 = maybe_1.__eq__(maybe_1)
    var_2 = maybe_1.filter(maybe_1)
    var_3 = var_2.to_box()
    var_4 = maybe_4.get_or_else(maybe_1)
