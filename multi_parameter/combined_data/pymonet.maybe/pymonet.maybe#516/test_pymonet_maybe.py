# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    set_0 = set()
    maybe_0 = module_0.Maybe(set_0, set_0)


def test_case_2():
    int_0 = -2531
    maybe_0 = module_0.Maybe(int_0, int_0)
    bytes_0 = b"\\]\xc4T\x95\xa2\x84\xed\xe7\xfc\x16\x13\xaa0\xdcg\x92>\xb1"
    tuple_0 = (bytes_0,)
    bool_0 = False
    maybe_1 = module_0.Maybe(tuple_0, bool_0)
    bool_1 = True
    maybe_2 = module_0.Maybe(maybe_1, bool_1)
    var_0 = maybe_0.to_either()
    bool_2 = maybe_1.__eq__(tuple_0)


def test_case_3():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.map(bool_0)
    maybe_1 = module_0.Maybe(bool_0, bool_0)


def test_case_4():
    bytes_0 = b"\x7f\xe6\x88\x12\xe0o"
    none_type_0 = None
    maybe_0 = module_0.Maybe(bytes_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    maybe_0.map(var_0)


def test_case_5():
    none_type_0 = None
    none_type_1 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_1, bool_0)
    var_0 = maybe_0.bind(none_type_0)


def test_case_6():
    none_type_0 = None
    set_0 = set()
    maybe_0 = module_0.Maybe(set_0, set_0)
    maybe_0.bind(none_type_0)


def test_case_7():
    generic_0 = module_1.Generic()
    set_0 = set()
    bytes_0 = b"\xee\x8cS1Ec\x08|\xbd"
    maybe_0 = module_0.Maybe(generic_0, bytes_0)
    var_0 = maybe_0.ap(set_0)
    bool_0 = True
    none_type_0 = None
    maybe_1 = module_0.Maybe(bool_0, none_type_0)
    var_1 = maybe_1.to_try()
    maybe_2 = module_0.Maybe(none_type_0, generic_0)
    maybe_1.bind(set_0)


def test_case_8():
    list_0 = []
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(list_0, none_type_0)
    maybe_0.ap(bool_0)


def test_case_9():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    none_type_0 = None
    var_0 = maybe_0.bind(none_type_0)
    var_1 = var_0.filter(bool_0)
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_2 = maybe_1.to_validation()
    maybe_1.filter(maybe_0)


def test_case_10():
    bytes_0 = b"\xa0\x89ZME\xfa\xeb"
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_0.filter(bytes_0)


def test_case_11():
    str_0 = "(f)M{1:\x0cV&2|u>{k:x"
    bool_0 = False
    set_0 = {str_0, str_0, bool_0}
    bytes_0 = b"\x98&>\xae\xef\x18\xd5\r\xc6\xc4\xad\xc1\x9e\xff\x95"
    bool_1 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_1)
    var_0 = maybe_0.get_or_else(set_0)
    var_0.to_validation()


def test_case_12():
    bytes_0 = b"mCZ;c\x13\xb9\xed\xd9\x06\x19Z\xeaR\x86W\x0e\xa9`\xe8"
    str_0 = "D\n pJU'nS*c!0}EBS-xC"
    set_0 = {str_0}
    bool_0 = False
    maybe_0 = module_0.Maybe(set_0, bool_0)
    var_0 = maybe_0.get_or_else(bytes_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(bool_1, bool_1)
    bool_2 = maybe_1.__eq__(var_0)
    dict_0 = {}
    maybe_2 = module_0.Maybe(dict_0, dict_0)
    var_1 = maybe_2.to_validation()
    var_2 = maybe_2.to_validation()
    none_type_0 = None
    maybe_3 = module_0.Maybe(none_type_0, none_type_0)
    var_3 = maybe_3.to_validation()
    int_0 = 971
    maybe_4 = module_0.Maybe(int_0, int_0)
    var_4 = maybe_4.get_or_else(none_type_0)


def test_case_13():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_either()
    bool_1 = True
    none_type_1 = None
    maybe_1 = module_0.Maybe(bool_1, none_type_1)
    var_1 = maybe_1.to_box()
    var_1.bind(var_0)


def test_case_14():
    bool_0 = True
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.to_lazy()


def test_case_15():
    complex_0 = -1089.7487 - 1101.7j
    maybe_0 = module_0.Maybe(complex_0, complex_0)
    var_0 = maybe_0.to_lazy()


def test_case_16():
    str_0 = "@J}F*=eI$Y1^DdX"
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_try()
    var_0.to_try()


def test_case_17():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    maybe_0 = module_0.Maybe(set_0, bool_0)
    var_0 = maybe_0.to_validation()
    float_0 = 174.87
    bool_1 = True
    maybe_1 = module_0.Maybe(bool_1, bool_1)
    var_1 = maybe_1.to_lazy()
    var_2 = var_1.to_validation()
    var_2.bind(float_0)


def test_case_18():
    float_0 = -1146.0
    bool_0 = False
    maybe_0 = module_0.Maybe(float_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_validation()
    none_type_0 = None
    bytes_0 = b"\xae\x02\x0f\xb4\xe7P\xa4\x8f\x02[b\xc4\xf3"
    maybe_1 = module_0.Maybe(none_type_0, bytes_0)
    var_2 = maybe_1.to_lazy()
    var_3 = var_2.to_box()
    var_4 = var_3.to_lazy()
    var_5 = var_4.to_either()


def test_case_19():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    none_type_1 = None
    maybe_1 = module_0.Maybe(none_type_1, none_type_1)
    var_0 = maybe_1.to_box()
    bool_1 = maybe_1.__eq__(maybe_1)
    var_1 = var_0.to_validation()
    var_2 = var_1.to_box()
    str_0 = "O"
    none_type_2 = None
    maybe_2 = module_0.Maybe(none_type_2, none_type_2)
    maybe_2.map(str_0)


def test_case_20():
    bytes_0 = b"mCZ;c\x13\xb9\xed\xd9\x06\x19Z\xeaR\x86W\x0e\xa9`\xe8"
    str_0 = "D\n pJU'nS*c!0}EBS-xC"
    set_0 = {str_0}
    bool_0 = False
    maybe_0 = module_0.Maybe(set_0, bool_0)
    var_0 = maybe_0.get_or_else(bytes_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(bool_1, bool_1)
    bool_2 = maybe_1.__eq__(var_0)
    dict_0 = {}
    maybe_2 = module_0.Maybe(dict_0, dict_0)
    var_1 = maybe_2.to_validation()
    var_2 = maybe_2.to_validation()
    none_type_0 = None
    maybe_3 = module_0.Maybe(none_type_0, none_type_0)
    var_3 = maybe_3.to_lazy()
    var_4 = maybe_0.get_or_else(maybe_2)
    var_5 = maybe_3.to_box()
    var_6 = var_5.to_try()
    var_7 = maybe_0.to_either()
    bool_3 = maybe_3.__eq__(maybe_0)


def test_case_21():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.bind(bool_0)
    var_1 = maybe_0.to_try()
    maybe_1 = module_0.Maybe(maybe_0, bool_0)
    bool_1 = var_0.__eq__(maybe_1)
    var_2 = var_0.to_either()
    maybe_2 = module_0.Maybe(var_1, bool_1)
    var_3 = maybe_2.to_lazy()
    var_4 = maybe_2.map(var_1)
    var_5 = maybe_2.to_lazy()
    var_5.get_or_else(maybe_0)
