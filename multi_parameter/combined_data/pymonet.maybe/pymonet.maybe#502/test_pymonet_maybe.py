# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    str_0 = "\tXQ>:1GSvm3fCp3.OXP"
    maybe_0 = module_0.Maybe(str_0, str_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_1.to_validation()
    var_1 = maybe_0.get_or_else(bool_0)
    bool_1 = maybe_1.__eq__(var_0)
    var_2 = var_0.to_try()
    list_0 = [bool_1, maybe_0, bool_1, bool_1]
    var_3 = maybe_0.to_either()
    var_4 = maybe_1.ap(list_0)
    var_5 = maybe_1.to_box()
    bool_2 = maybe_1.__eq__(maybe_1)
    var_2.to_lazy()


def test_case_3():
    bytes_0 = b"\x9c\xc6\xefl\xa1"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.filter(maybe_0)
    bool_0 = var_0.__eq__(bytes_0)
    maybe_1 = module_0.Maybe(maybe_0, bool_0)
    var_1 = var_0.to_box()
    maybe_1.filter(bool_0)


def test_case_4():
    bytes_0 = b""
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.map(bool_0)
    var_1 = maybe_0.filter(maybe_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, maybe_0)
    var_2 = maybe_0.to_validation()
    var_3 = var_0.to_box()
    var_4 = var_1.ap(var_2)
    var_5 = maybe_0.bind(maybe_0)
    var_6 = maybe_0.bind(var_3)
    var_3.ap(bytes_0)


def test_case_5():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_box()
    maybe_0.map(var_0)


def test_case_6():
    bytes_0 = b"\x9c\xc6\xefl\xa1"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.filter(maybe_0)
    var_1 = maybe_0.bind(maybe_0)
    bool_0 = var_0.__eq__(bytes_0)
    maybe_1 = module_0.Maybe(maybe_0, bool_0)
    var_2 = var_1.bind(var_1)
    var_3 = var_0.to_box()
    maybe_1.filter(var_1)


def test_case_7():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    maybe_0 = module_0.Maybe(set_0, bool_0)
    var_0 = maybe_0.to_lazy()
    bool_1 = maybe_0.__eq__(var_0)
    var_1 = var_0.to_either()
    maybe_0.bind(var_0)


def test_case_8():
    str_0 = "\r8oN)~b>mI(\x0cH"
    set_0 = {str_0, str_0, str_0}
    maybe_0 = module_0.Maybe(set_0, str_0)
    var_0 = maybe_0.ap(set_0)
    var_1 = var_0.filter(set_0)


def test_case_9():
    none_type_0 = None
    none_type_1 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_1, bool_0)
    maybe_0.ap(none_type_0)


def test_case_10():
    bytes_0 = b"\x15d\x0b\xc9\x81\xbfU\xa0\xe0U\x0e\tj?=\x94\xae\xa6\xf0O"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    maybe_0 = module_0.Maybe(set_0, set_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_either()
    int_0 = 71
    set_1 = {int_0}
    var_2 = maybe_0.get_or_else(set_1)
    maybe_1 = module_0.Maybe(set_1, set_1)
    var_3 = maybe_1.to_lazy()
    var_3.to_lazy()


def test_case_11():
    bytes_0 = b"\xa9\x18\x7f"
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.get_or_else(bytes_0)
    var_0.to_try()


def test_case_12():
    bytes_0 = b""
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.map(bool_0)
    var_1 = maybe_0.filter(maybe_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, maybe_0)
    var_2 = maybe_0.to_validation()
    var_3 = var_0.to_box()
    var_4 = var_1.ap(var_2)
    var_5 = maybe_0.bind(maybe_0)
    var_6 = var_4.to_validation()
    var_7 = var_2.to_box()
    var_8 = maybe_0.to_validation()
    var_9 = maybe_0.to_either()
    var_2.map(var_4)


def test_case_13():
    bool_0 = True
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_either()


def test_case_14():
    str_0 = "\r8oN)~bmI(\x0cH"
    set_0 = {str_0, str_0, str_0}
    maybe_0 = module_0.Maybe(set_0, str_0)
    var_0 = maybe_0.ap(set_0)
    var_1 = var_0.to_box()


def test_case_15():
    int_0 = -253
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_box()
    var_0.get_or_else(int_0)


def test_case_16():
    str_0 = "\tXQ>:1GSvm3fCp3.OXP"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.to_lazy()


def test_case_17():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_1 = module_0.Maybe(maybe_0, maybe_0)
    var_0 = maybe_1.to_try()
    var_1 = var_0.filter(var_0)
    var_2 = maybe_1.filter(var_0)


def test_case_18():
    bytes_0 = b'\x0c\xa5\xe5\x01? C%"j-I!\xe4\xd5\x1d'
    bool_0 = False
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    bool_1 = maybe_0.__eq__(bool_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.map(bool_1)
    var_1 = maybe_0.filter(bytes_0)
    maybe_2 = module_0.Maybe(bool_0, none_type_0)
    bool_2 = True
    maybe_3 = module_0.Maybe(maybe_2, bool_2)
    maybe_4 = module_0.Maybe(maybe_1, maybe_2)
    var_2 = maybe_2.to_lazy()
    var_3 = maybe_2.to_try()
    maybe_5 = module_0.Maybe(var_1, maybe_1)
    var_4 = maybe_0.to_try()
    var_5 = var_0.filter(var_3)
    var_6 = maybe_1.to_either()
    var_7 = maybe_3.to_either()
    maybe_6 = module_0.Maybe(var_0, none_type_0)
    var_8 = maybe_4.ap(maybe_6)
    maybe_7 = module_0.Maybe(var_8, maybe_0)
    var_2.filter(none_type_0)


def test_case_19():
    float_0 = 1256.71
    str_0 = "\n        Applies the function inside the Box[A] structure to another applicative type.\n\n        :param applicative: applicative contains function\n        :type applicative: Box[B]\n        :returns: new Box with result of contains function\n        :rtype: Box[A(B)]\n        "
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.to_validation()
    var_1 = var_0.to_either()
    var_2 = var_1.to_box()
    var_3 = var_2.to_validation()
    var_3.bind(float_0)


def test_case_20():
    bool_0 = False
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_validation()
    var_0.ap(bool_0)


def test_case_21():
    bytes_0 = b"\x9c\xc6\xefl\xa1"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.filter(maybe_0)
    var_1 = maybe_0.to_lazy()
    bool_0 = var_0.__eq__(var_1)
    maybe_1 = module_0.Maybe(maybe_0, bool_0)
    var_2 = var_1.bind(var_1)
    var_3 = var_0.to_box()
    maybe_2 = var_2.to_try()
    maybe_1.filter(var_1)


def test_case_22():
    bytes_0 = b"\x8a+\x92h\xcb\x92\x88\xf7\xde\x1e\xa1\xbd\xf8\xa5\x03"
    bool_0 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.to_validation()
    var_2 = var_0.to_validation()
    var_3 = var_0.map(maybe_0)
    var_4 = var_3.to_try()
    bool_1 = maybe_0.__eq__(maybe_0)
    maybe_0.map(var_0)


def test_case_23():
    bytes_0 = b""
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.map(bool_0)
    var_1 = maybe_0.filter(maybe_0)
    none_type_0 = None
    var_2 = maybe_0.filter(var_0)
    bool_1 = var_1.__eq__(none_type_0)
    maybe_1 = module_0.Maybe(none_type_0, maybe_0)
    var_3 = var_0.to_box()
    var_4 = var_1.ap(bool_0)
    var_5 = maybe_0.bind(maybe_0)
    var_6 = var_2.to_either()
    var_7 = var_1.to_try()
    var_8 = var_0.to_lazy()
    bool_2 = var_5.__eq__(maybe_1)
    var_9 = maybe_1.to_lazy()
    var_10 = var_8.to_validation()
    var_11 = maybe_0.to_validation()
    var_12 = var_8.to_box()
    var_3.map(var_3)
