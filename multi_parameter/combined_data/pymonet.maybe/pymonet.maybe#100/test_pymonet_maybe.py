# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import builtins as module_1
import typing as module_2


def test_case_0():
    bytes_0 = b"\xfb"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_validation()
    maybe_0.map(var_0)


def test_case_3():
    object_0 = module_1.object()
    bool_0 = False
    maybe_0 = module_0.Maybe(object_0, bool_0)
    str_0 = "zD,t1"
    var_0 = maybe_0.to_box()
    int_0 = 638
    maybe_1 = module_0.Maybe(int_0, int_0)
    var_1 = maybe_1.to_lazy()
    var_2 = maybe_1.to_validation()
    var_3 = maybe_0.to_validation()
    var_4 = maybe_1.to_box()
    bool_1 = maybe_1.__eq__(var_4)
    var_5 = var_1.to_validation()
    var_6 = var_5.to_lazy()
    var_7 = var_6.to_box()
    var_7.ap(str_0)


def test_case_4():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.filter(bool_0)
    var_1 = var_0.ap(maybe_0)
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    var_2 = maybe_1.to_either()
    var_3 = var_1.map(maybe_0)
    var_4 = maybe_1.to_box()
    var_5 = maybe_1.to_either()
    bool_1 = var_4.__eq__(maybe_1)
    bool_2 = maybe_0.__eq__(var_1)
    var_2.get_or_else(maybe_0)


def test_case_5():
    float_0 = 853.1233
    maybe_0 = module_0.Maybe(float_0, float_0)
    var_0 = maybe_0.bind(maybe_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(maybe_0, none_type_0)
    var_1 = var_0.filter(none_type_0)
    var_2 = var_0.to_try()
    var_2.to_box()


def test_case_6():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.bind(none_type_0)


def test_case_7():
    generic_0 = module_2.Generic()
    maybe_0 = module_0.Maybe(generic_0, generic_0)
    var_0 = maybe_0.ap(generic_0)
    var_1 = var_0.get_or_else(var_0)
    var_2 = var_1.filter(generic_0)
    bool_0 = False
    maybe_1 = module_0.Maybe(maybe_0, bool_0)
    maybe_1.filter(var_1)


def test_case_8():
    tuple_0 = ()
    maybe_0 = module_0.Maybe(tuple_0, tuple_0)
    var_0 = maybe_0.to_try()
    maybe_0.ap(maybe_0)


def test_case_9():
    generic_0 = module_2.Generic()
    maybe_0 = module_0.Maybe(generic_0, generic_0)
    var_0 = maybe_0.filter(generic_0)
    bool_0 = False
    maybe_1 = module_0.Maybe(generic_0, bool_0)
    maybe_1.filter(maybe_0)


def test_case_10():
    str_0 = "$\nc\t@rTR$3nJ,-6_"
    bytes_0 = b"6't\xf4\xba"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.bind(str_0)
    var_1 = var_0.to_lazy()
    maybe_1 = module_0.Maybe(var_1, maybe_0)
    bool_0 = True
    maybe_2 = module_0.Maybe(maybe_1, bool_0)
    var_2 = maybe_2.to_either()
    str_1 = "Y'[HD\nJ\r=h^4Yz\n45 t"
    list_0 = []
    maybe_3 = module_0.Maybe(list_0, list_0)
    var_3 = maybe_3.to_either()
    bool_1 = False
    maybe_4 = module_0.Maybe(str_1, bool_1)
    var_4 = maybe_3.get_or_else(str_1)


def test_case_11():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_either()
    bytes_0 = b"\x7f'\x80\x81\xef\x83\xce2\xfdw}+\xa2"
    maybe_1 = module_0.Maybe(bytes_0, bytes_0)
    var_1 = maybe_1.to_either()
    var_1.get_or_else(maybe_1)


def test_case_12():
    generic_0 = module_2.Generic()
    maybe_0 = module_0.Maybe(generic_0, generic_0)
    var_0 = maybe_0.ap(generic_0)
    var_1 = var_0.get_or_else(var_0)
    var_2 = var_0.to_validation()
    var_3 = var_1.filter(generic_0)
    bool_0 = False
    maybe_1 = module_0.Maybe(var_2, bool_0)
    var_4 = var_3.to_box()
    maybe_1.filter(var_1)


def test_case_13():
    int_0 = -1138
    float_0 = 2590.0
    bool_0 = False
    maybe_0 = module_0.Maybe(float_0, bool_0)
    var_0 = maybe_0.to_box()
    var_0.filter(int_0)


def test_case_14():
    generic_0 = module_2.Generic()
    maybe_0 = module_0.Maybe(generic_0, generic_0)
    var_0 = maybe_0.ap(generic_0)
    var_1 = var_0.get_or_else(var_0)
    var_2 = var_1.to_lazy()
    var_3 = var_1.filter(generic_0)
    bool_0 = False
    maybe_1 = module_0.Maybe(var_2, bool_0)
    maybe_1.filter(var_1)


def test_case_15():
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_0.to_lazy()


def test_case_16():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_try()
    var_0.to_lazy()


def test_case_17():
    generic_0 = module_2.Generic()
    maybe_0 = module_0.Maybe(generic_0, generic_0)
    var_0 = maybe_0.filter(maybe_0)
    var_1 = var_0.to_validation()
    var_2 = maybe_0.filter(generic_0)
    bool_0 = False
    maybe_1 = module_0.Maybe(var_1, bool_0)
    maybe_1.filter(var_1)


def test_case_18():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_try()
    var_1.to_try()


def test_case_19():
    float_0 = 853.1233
    maybe_0 = module_0.Maybe(float_0, float_0)
    var_0 = maybe_0.bind(maybe_0)
    bool_0 = var_0.__eq__(maybe_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(maybe_0, none_type_0)
    var_1 = maybe_0.to_either()
    maybe_1.map(none_type_0)


def test_case_20():
    generic_0 = module_2.Generic()
    bytes_0 = b"\xf6\xbd\xccoIC\xbe\xa7[6"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.ap(generic_0)
    var_1 = var_0.get_or_else(var_0)
    var_2 = var_0.to_lazy()
    bool_0 = var_0.__eq__(var_2)
    var_3 = var_1.ap(maybe_0)
    var_4 = maybe_0.ap(var_0)
    var_5 = maybe_0.to_either()
    var_6 = var_1.filter(var_2)
    var_7 = var_6.get_or_else(bool_0)
    var_8 = maybe_0.filter(var_2)
    bool_1 = False
    maybe_1 = module_0.Maybe(var_2, bool_1)
    var_9 = var_3.ap(bool_1)
    var_10 = var_4.to_box()
    var_11 = var_9.to_lazy()
    var_12 = var_0.ap(bytes_0)
    bool_2 = var_8.__eq__(var_12)
    maybe_1.filter(var_1)
