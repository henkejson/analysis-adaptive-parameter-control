# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    bool_0 = True
    int_0 = 4221
    bool_1 = True
    maybe_0 = module_0.Maybe(int_0, bool_1)
    var_0 = maybe_0.ap(bool_0)
    var_1 = maybe_0.bind(var_0)
    var_2 = var_0.map(maybe_0)
    maybe_1 = module_0.Maybe(var_0, bool_1)
    bool_2 = maybe_0.__eq__(var_1)
    var_3 = maybe_1.ap(int_0)


def test_case_3():
    int_0 = -2466
    list_0 = []
    maybe_0 = module_0.Maybe(list_0, list_0)
    bool_0 = maybe_0.__eq__(list_0)
    maybe_0.ap(int_0)


def test_case_4():
    bool_0 = True
    none_type_0 = None
    none_type_1 = None
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.ap(bool_0)
    var_1 = var_0.map(bool_0)
    var_2 = var_1.filter(none_type_1)
    var_3 = var_2.get_or_else(none_type_0)
    var_3.to_box()


def test_case_5():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.ap(maybe_0)


def test_case_6():
    bool_0 = True
    int_0 = 4221
    bool_1 = True
    maybe_0 = module_0.Maybe(int_0, bool_1)
    var_0 = maybe_0.ap(bool_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1.bind(var_0)


def test_case_7():
    bytes_0 = b"\x8f\xa0\xa7\xc5\xf7\x0c0\x13S\xd8\xa6\xae"
    none_type_0 = None
    maybe_0 = module_0.Maybe(bytes_0, none_type_0)
    var_0 = maybe_0.to_either()
    maybe_1 = module_0.Maybe(bytes_0, maybe_0)
    var_1 = maybe_1.filter(var_0)
    maybe_0.filter(var_0)


def test_case_8():
    str_0 = "\n        :param semigroup: other semigroup to concat\n        :type semigroup: First[B]\n        :returns: new First with first value\n        :rtype: First[A]\n        "
    none_type_0 = None
    maybe_0 = module_0.Maybe(str_0, none_type_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    maybe_0.bind(var_0)


def test_case_9():
    generic_0 = module_1.Generic()
    bool_0 = True
    maybe_0 = module_0.Maybe(generic_0, bool_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_validation()


def test_case_10():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_box()
    var_0.to_box()


def test_case_11():
    int_0 = 3028
    bytes_0 = b"\xb7\\\xa16I\x1b5\xa3\x7f3~\xfd"
    list_0 = [int_0, bytes_0, int_0, bytes_0]
    maybe_0 = module_0.Maybe(list_0, bytes_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(list_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_1.to_either()
    var_2 = var_0.to_validation()
    var_2.filter(var_2)


def test_case_12():
    str_0 = '"qo'
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.bind(str_0)
    var_1.to_box()


def test_case_13():
    complex_0 = -207.5 - 1334.676j
    bool_0 = True
    maybe_0 = module_0.Maybe(complex_0, bool_0)
    var_0 = maybe_0.to_validation()
    float_0 = 2546.1
    tuple_0 = ()
    bool_1 = True
    maybe_1 = module_0.Maybe(bool_1, bool_1)
    var_1 = maybe_1.ap(tuple_0)
    var_2 = var_1.to_try()
    var_2.ap(float_0)


def test_case_14():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    maybe_0 = module_0.Maybe(dict_0, bool_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.to_either()
    bytes_0 = b"\x8f\xa0\xa7\xc5\xf7\x0c0\x13\xf8S\xc9\xd8\xd8\xa6\x8d\xae"
    maybe_1 = module_0.Maybe(dict_0, bool_0)
    none_type_0 = None
    maybe_2 = module_0.Maybe(bytes_0, none_type_0)
    bool_1 = maybe_2.__eq__(var_0)
    var_2 = maybe_2.to_validation()
    var_3 = maybe_1.to_either()
    var_4 = maybe_1.to_validation()
    str_0 = ":1d7=D"
    maybe_3 = module_0.Maybe(str_0, var_0)
    var_5 = maybe_3.filter(var_3)
    generic_0 = module_1.Generic()
    bool_2 = var_5.__eq__(generic_0)
    var_3.map(bool_2)


def test_case_15():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_0.to_validation()


def test_case_16():
    bytes_0 = b"\x8f\xa0\xa7\xc5\xf7\x0c0\x13S\xd8\xa6\xae"
    none_type_0 = None
    maybe_0 = module_0.Maybe(bytes_0, none_type_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.to_either()
    maybe_1 = module_0.Maybe(var_0, maybe_0)
    var_2 = maybe_1.filter(var_1)
    maybe_0.filter(var_1)


def test_case_17():
    int_0 = 3028
    bytes_0 = b"\xb7\\\xa16I\x1bI5\xa3\x7f3~\xfd"
    list_0 = [int_0, bytes_0, int_0, bytes_0]
    maybe_0 = module_0.Maybe(list_0, bytes_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(list_0, none_type_0)
    var_0 = maybe_1.to_either()
    var_1 = var_0.to_validation()
    var_2 = maybe_0.filter(var_1)
    bool_0 = maybe_1.__eq__(var_2)
    var_3 = maybe_0.to_validation()
    var_4 = maybe_0.get_or_else(list_0)


def test_case_18():
    bool_0 = False
    bool_1 = True
    dict_0 = {bool_1: bool_1, bool_1: bool_1}
    maybe_0 = module_0.Maybe(dict_0, bool_1)
    var_0 = maybe_0.bind(bool_0)
    var_1 = maybe_0.to_try()
    var_2 = var_0.to_either()
    var_3 = maybe_0.get_or_else(var_2)
    maybe_1 = var_0.to_box()
    bool_2 = maybe_1.__eq__(bool_1)
    var_4 = maybe_1.to_validation()
    bool_3 = False
    maybe_1.map(bool_3)


def test_case_19():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_box()
    bool_1 = maybe_0.__eq__(maybe_0)
    maybe_0.filter(none_type_0)
