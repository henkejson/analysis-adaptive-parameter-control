# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import builtins as module_1
import typing as module_2


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_try()
    maybe_0.map(var_0)


def test_case_3():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = maybe_0.__eq__(none_type_0)
    var_0 = maybe_0.map(bool_0)
    var_1 = maybe_0.filter(maybe_0)
    var_2 = var_1.to_try()


def test_case_4():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.map(bool_0)
    var_1 = maybe_0.filter(maybe_0)


def test_case_5():
    bytes_0 = b"_V\x05\xc9\x83"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.bind(bytes_0)
    var_1 = var_0.to_either()
    var_2 = var_0.bind(var_1)


def test_case_6():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.bind(none_type_0)


def test_case_7():
    str_0 = " G9\t;n#rrsx\x0c|XU(:1QL"
    bool_0 = True
    none_type_0 = None
    bool_1 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_1)
    var_0 = maybe_0.filter(bool_0)
    var_1 = var_0.ap(str_0)


def test_case_8():
    bool_0 = False
    bool_1 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_1, none_type_0)
    maybe_0.ap(bool_0)


def test_case_9():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_0.filter(bool_0)


def test_case_10():
    int_0 = 3499
    bool_0 = True
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1]
    maybe_0 = module_0.Maybe(bool_1, list_0)
    var_0 = maybe_0.get_or_else(bool_0)
    var_0.bind(int_0)


def test_case_11():
    bytes_0 = b"\xae)t\xf8z%S\xeb<\xb1\xb4L-\x83\xe9"
    bool_0 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    maybe_1 = module_0.Maybe(maybe_0, bool_0)
    var_0 = maybe_1.to_try()
    var_1 = maybe_0.to_box()
    var_2 = maybe_0.get_or_else(bytes_0)
    var_3 = maybe_1.to_either()
    var_0.to_lazy()


def test_case_12():
    list_0 = []
    object_0 = module_1.object()
    maybe_0 = module_0.Maybe(object_0, object_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.to_either()
    var_2 = var_0.to_either()
    var_3 = var_0.to_lazy()
    var_1.filter(list_0)


def test_case_13():
    generic_0 = module_2.Generic()
    bool_0 = True
    maybe_0 = module_0.Maybe(generic_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_box()
    var_2 = var_1.to_try()
    var_2.to_lazy()


def test_case_14():
    none_type_0 = None
    none_type_1 = None
    maybe_0 = module_0.Maybe(none_type_1, none_type_1)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.map(none_type_0)
    var_1.to_validation()


def test_case_15():
    float_0 = 121.0
    list_0 = [float_0]
    maybe_0 = module_0.Maybe(list_0, float_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.to_validation()
    var_1.to_validation()


def test_case_16():
    list_0 = []
    object_0 = module_1.object(*list_0)
    bool_0 = False
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_validation()
    bool_1 = var_0.__eq__(var_0)
    none_type_1 = None
    maybe_1 = module_0.Maybe(none_type_1, none_type_1)
    var_0.bind(var_0)


def test_case_17():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.map(none_type_0)
    var_1 = var_0.filter(var_0)
    bool_2 = False
    maybe_1 = module_0.Maybe(bool_0, bool_2)
    maybe_1.filter(var_0)


def test_case_18():
    bool_0 = True
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    bool_2 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.map(maybe_0)
    var_1 = maybe_0.to_either()
    var_2 = maybe_0.filter(var_1)
    var_3 = module_0.Maybe(var_1, var_1)
    var_4 = var_3.ap(var_1)
    var_5 = maybe_0.to_box()
    bool_3 = var_0.__eq__(var_3)
    maybe_1 = module_0.Maybe(var_4, var_1)
    var_6 = maybe_0.to_try()
    var_7 = var_3.ap(bool_0)
    var_8 = var_0.ap(bool_2)
    var_9 = var_8.to_lazy()
    var_10 = maybe_0.to_lazy()
    var_11 = var_9.to_either()
    var_6.to_box()
