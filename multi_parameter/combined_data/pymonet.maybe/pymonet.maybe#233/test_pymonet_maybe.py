# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.map(none_type_0)
    var_2 = var_1.get_or_else(none_type_0)
    bool_1 = maybe_0.__eq__(var_0)
    var_3 = maybe_0.to_lazy()


def test_case_3():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.to_validation()
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_2 = maybe_1.to_try()
    maybe_1.map(maybe_0)


def test_case_4():
    bytes_0 = b"\xf9_p\xa0\x12\x8c\xa8\x7f\xba\xbf\x01\xc5A\xd5\t"
    bool_0 = True
    set_0 = {bool_0}
    maybe_0 = module_0.Maybe(set_0, set_0)
    var_0 = maybe_0.bind(bytes_0)
    var_1 = var_0.to_try()
    var_1.to_either()


def test_case_5():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0}
    tuple_1 = (tuple_0, set_0)
    none_type_0 = None
    maybe_0 = module_0.Maybe(tuple_1, none_type_0)
    var_0 = maybe_0.to_validation()
    maybe_0.bind(var_0)


def test_case_6():
    str_0 = "\n        Transform Box into not empty Maybe.\n\n        :returns: non empty Maybe monad with previous value\n        :rtype: Maybe[A]\n        "
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    bool_1 = True
    none_type_0 = None
    var_0 = maybe_0.ap(none_type_0)
    maybe_1 = module_0.Maybe(str_0, bool_1)
    var_1 = maybe_0.to_try()
    var_2 = maybe_1.to_try()
    var_2.to_try()


def test_case_7():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_validation()
    var_1 = var_0.to_box()
    int_0 = -1526
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    bool_0 = False
    maybe_1 = module_0.Maybe(dict_0, bool_0)
    maybe_1.ap(var_1)


def test_case_8():
    str_0 = "(Ax>?]"
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    bool_1 = maybe_0.__eq__(str_0)
    var_0 = maybe_0.filter(bool_0)
    maybe_1 = module_0.Maybe(str_0, bool_1)
    maybe_1.filter(var_0)


def test_case_9():
    tuple_0 = ()
    bytes_0 = b"\x16\x0b\x82"
    float_0 = 1006.6055
    maybe_0 = module_0.Maybe(bytes_0, float_0)
    var_0 = maybe_0.get_or_else(tuple_0)


def test_case_10():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.get_or_else(bool_0)
    var_0.to_either()


def test_case_11():
    bool_0 = False
    list_0 = [bool_0]
    maybe_0 = module_0.Maybe(list_0, list_0)
    var_0 = maybe_0.to_either()
    var_0.to_either()


def test_case_12():
    set_0 = set()
    maybe_0 = module_0.Maybe(set_0, set_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.to_either()
    var_2 = maybe_0.to_either()


def test_case_13():
    bool_0 = False
    bytes_0 = b"\xd4\xd5\xe0"
    bool_1 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_1)
    var_0 = maybe_0.ap(maybe_0)
    var_1 = var_0.to_box()
    var_2 = maybe_0.to_either()
    var_3 = maybe_0.to_try()
    var_4 = var_3.get_or_else(bool_0)
    var_5 = var_2.ap(bool_1)
    var_4.to_lazy()


def test_case_14():
    float_0 = -3579.95
    bool_0 = False
    maybe_0 = module_0.Maybe(float_0, bool_0)
    bytes_0 = b"\xc1\x12\x06\x14L\x10\xb6\x7f\t;\xa8H\xfeX\x8e\xba"
    bool_1 = False
    maybe_1 = module_0.Maybe(bytes_0, bool_1)
    var_0 = maybe_1.to_box()
    var_0.to_box()


def test_case_15():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_validation()
    var_2 = var_1.to_try()


def test_case_16():
    bool_0 = True
    none_type_0 = None
    int_0 = -2451
    maybe_0 = module_0.Maybe(int_0, none_type_0)
    var_0 = maybe_0.to_validation()
    bool_1 = True
    maybe_1 = module_0.Maybe(bool_1, bool_1)
    var_1 = maybe_1.filter(var_0)
    var_2 = var_1.bind(none_type_0)
    var_3 = var_2.bind(bool_0)
    var_4 = var_3.to_validation()
    var_5 = var_2.filter(maybe_1)


def test_case_17():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_lazy()
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    var_1 = maybe_1.to_validation()


def test_case_18():
    bytes_0 = b"|L\x02\x03\x10X\x0f\xbcF\x11\xea\x0fU\xc8E\x04"
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.ap(maybe_0)
    var_2 = var_0.to_either()
    var_3 = var_2.ap(var_0)
    maybe_1 = module_0.Maybe(var_1, var_2)
    var_4 = var_1.map(var_1)
    var_5 = maybe_0.to_box()
    var_4.to_either()


def test_case_19():
    bool_0 = False
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.filter(bool_0)
    var_1 = maybe_0.to_either()
    var_2 = maybe_0.ap(var_0)
    var_3 = var_2.bind(bool_1)
    bool_2 = False
    bool_3 = var_2.__eq__(bool_1)
    var_4 = var_3.to_try()
    var_5 = var_1.ap(var_2)
    bool_4 = False
    maybe_1 = module_0.Maybe(var_1, bool_4)
    var_6 = var_3.to_lazy()
    var_7 = var_2.get_or_else(maybe_1)
    bool_5 = var_3.__eq__(var_7)
    var_7.ap(bool_2)


def test_case_20():
    bool_0 = False
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.filter(bool_0)
    var_1 = maybe_0.to_either()
    var_2 = var_0.ap(var_0)
    var_3 = var_2.bind(bool_1)
    bool_2 = False
    var_4 = var_3.map(var_2)
    bool_3 = var_4.__eq__(bool_1)
    var_5 = var_4.to_try()
    var_6 = var_1.ap(var_2)
    bool_4 = False
    maybe_1 = module_0.Maybe(var_1, bool_4)
    var_7 = var_4.get_or_else(var_4)
    bool_5 = var_3.__eq__(var_7)
    var_8 = var_7.ap(bool_2)
    var_9 = var_7.to_box()
    var_5.to_either()
