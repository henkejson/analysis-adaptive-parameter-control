# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import builtins as module_1


def test_case_0():
    bytes_0 = b"K\x03\x85\x14\x9a\n3?\x11\xde\x1d\xd7\x0e\xac-\xa6\x90\xb4\xd7"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    str_0 = "\n        Call argument function with args in try-catch.\n        when function don't raise exception, not successfully when raise.\n\n        :params fn: function to call and store in monad\n        :type fn: Function(*args) -> A\n        :params *args:\n        :type fn: List\n        :retruns: Successfully monad Try when function don't raise exception, not successfully when raise\n        :rtype: Try[A]\n        "
    set_0 = {str_0}
    bool_0 = False
    maybe_0 = module_0.Maybe(set_0, bool_0)
    maybe_1 = module_0.Maybe(set_0, set_0)
    bool_1 = maybe_1.__eq__(str_0)


def test_case_3():
    none_type_0 = None
    str_0 = "P"
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.map(none_type_0)


def test_case_4():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.get_or_else(none_type_0)
    bool_0 = True
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    maybe_0.map(maybe_1)


def test_case_5():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    var_1 = maybe_0.filter(bool_0)
    bool_1 = var_0.__eq__(var_1)
    var_2 = var_0.map(bool_0)
    var_3 = var_2.bind(var_0)
    var_4 = var_0.to_box()


def test_case_6():
    str_0 = "}yIe"
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, str_0)
    var_0 = maybe_0.to_either()
    none_type_1 = None
    maybe_1 = module_0.Maybe(none_type_1, none_type_1)
    maybe_1.bind(str_0)


def test_case_7():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.filter(var_0)
    var_2 = var_0.ap(maybe_0)
    var_3 = var_1.to_try()
    var_4 = var_0.to_either()
    var_5 = maybe_0.ap(bool_0)
    var_6 = maybe_0.bind(var_4)
    var_7 = maybe_0.to_box()
    var_8 = maybe_0.to_try()
    object_0 = module_1.object()
    maybe_1 = module_0.Maybe(bool_0, var_7)
    var_4.get_or_else(maybe_0)


def test_case_8():
    str_0 = " ]@},*}$J"
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_0, str_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    var_1 = var_0.bind(var_0)
    bool_1 = True
    var_2 = var_0.map(var_0)
    var_3 = var_0.to_try()
    maybe_1 = module_0.Maybe(bool_0, bool_1)
    bool_2 = var_0.__eq__(var_0)
    maybe_2 = module_0.Maybe(var_1, none_type_0)
    var_4 = maybe_0.filter(bool_1)
    var_5 = maybe_0.to_try()
    var_6 = var_1.to_either()
    var_7 = maybe_2.get_or_else(maybe_1)
    var_8 = maybe_2.ap(var_2)
    var_9 = var_4.map(none_type_0)
    var_10 = maybe_1.to_box()
    maybe_2.filter(var_6)


def test_case_9():
    bytes_0 = b"\xfcq\xef"
    bool_0 = False
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    maybe_0.filter(bytes_0)


def test_case_10():
    str_0 = "\n        Call argument function with args in try-catch.\n        when function don't raise exception, not successfully when raise.\n\n        :params fn: function to call and store in monad\n        :type fn: Function(*args) -> A\n        :params *args:\n        :type fn: List\n        :retruns: Successfully monad Try when function don't raise exception, not successfully when raise\n        :rtype: Try[A]\n        "
    str_1 = "K{(w"
    set_0 = {str_1}
    bool_0 = False
    maybe_0 = module_0.Maybe(set_0, bool_0)
    var_0 = maybe_0.get_or_else(str_0)
    maybe_1 = module_0.Maybe(set_0, set_0)
    var_1 = maybe_1.get_or_else(str_0)
    bool_1 = maybe_1.__eq__(str_0)
    bool_2 = maybe_1.__eq__(var_1)


def test_case_11():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    var_1 = maybe_0.filter(bool_0)
    bool_1 = maybe_0.__eq__(var_1)
    var_2 = var_1.map(bool_0)
    var_3 = var_2.bind(var_1)
    var_4 = var_3.to_either()


def test_case_12():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    maybe_1 = module_0.Maybe(bool_0, maybe_0)
    bool_1 = maybe_1.__eq__(maybe_0)
    maybe_2 = module_0.Maybe(var_0, var_0)
    var_1 = maybe_1.filter(var_0)
    var_2 = maybe_2.to_either()
    var_3 = maybe_1.to_validation()
    maybe_3 = module_0.Maybe(var_2, var_2)
    maybe_2.filter(var_0)


def test_case_13():
    str_0 = "E|`-&rfWU\t8Lb[>%dmN"
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_box()
    var_0.to_box()


def test_case_14():
    str_0 = "Map[value={}]"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    none_type_0 = None
    maybe_0 = module_0.Maybe(dict_0, none_type_0)
    var_0 = maybe_0.to_validation()
    dict_1 = {}
    int_0 = -178
    maybe_1 = module_0.Maybe(int_0, int_0)
    var_1 = maybe_1.filter(dict_1)
    var_2 = var_1.to_lazy()
    var_3 = var_2.bind(var_0)
    var_3.to_lazy()


def test_case_15():
    int_0 = 2294
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_box()
    var_1.get_or_else(none_type_0)


def test_case_16():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.get_or_else(maybe_0)
    var_2 = maybe_0.filter(bool_0)
    var_3 = var_1.map(var_1)
    var_4 = var_2.bind(maybe_0)
    var_5 = var_4.to_either()


def test_case_17():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_try()
    complex_0 = 798.461 - 1132.3974j
    none_type_1 = None
    maybe_1 = module_0.Maybe(complex_0, none_type_1)
    var_1 = maybe_1.to_try()
    var_1.to_try()


def test_case_18():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    var_1 = maybe_0.filter(bool_0)
    bool_1 = var_1.to_validation()
    var_2 = var_0.map(bool_0)
    var_3 = var_2.bind(var_0)
    var_4 = maybe_0.to_box()


def test_case_19():
    int_0 = 873
    bool_0 = False
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.to_validation()


def test_case_20():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.filter(var_0)
    var_2 = maybe_0.to_lazy()
    var_3 = var_2.to_either()
    var_4 = var_2.ap(maybe_0)
    var_3.bind(var_4)


def test_case_21():
    float_0 = 1860.2
    bool_0 = True
    maybe_0 = module_0.Maybe(float_0, bool_0)
    var_0 = maybe_0.to_try()
    var_1 = var_0.map(var_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(var_0, bool_1)
    bool_2 = maybe_1.__eq__(maybe_1)
    maybe_2 = module_0.Maybe(maybe_1, var_0)
    var_2 = var_0.filter(var_0)
    var_2.to_validation()
