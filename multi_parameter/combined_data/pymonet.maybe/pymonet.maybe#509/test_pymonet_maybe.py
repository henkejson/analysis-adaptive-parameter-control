# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1


def test_case_0():
    float_0 = 2051.45
    maybe_0 = module_0.Maybe(float_0, float_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    str_0 = "\n        Call success_callback function with monad value when monad is successfully.\n\n        :params success_callback: function to apply with monad value.\n        :type success_callback: Function(A)\n        :returns: self\n        :rtype: Try[A]\n        "
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.to_try()
    bool_0 = maybe_0.__eq__(str_0)


def test_case_3():
    str_0 = "p"
    str_1 = "\n        Call success_callback function with monad value when monad is successfully.\n\n        :params success_callback: function to apply with monad value.\n        :type success_callback: Function(A)\n        :returns: self\n        :rtype: Try[A]\n        "
    maybe_0 = module_0.Maybe(str_1, str_1)
    var_0 = maybe_0.get_or_else(str_1)
    var_1 = maybe_0.map(var_0)
    var_2 = var_1.to_box()
    var_2.filter(str_0)


def test_case_4():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    maybe_0.map(none_type_0)


def test_case_5():
    float_0 = -933.4
    set_0 = {float_0, float_0, float_0, float_0}
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.bind(none_type_0)
    var_1 = var_0.to_lazy()
    var_2 = var_0.to_try()
    bool_1 = var_0.__eq__(set_0)


def test_case_6():
    bool_0 = False
    none_type_0 = None
    bytes_0 = b'\x7f"np\xbb\xc6P\x0f\x1f'
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.ap(none_type_0)
    var_1 = var_0.ap(bool_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(bool_1, bool_1)
    maybe_1.bind(var_1)


def test_case_7():
    float_0 = 1617.92
    bool_0 = True
    maybe_0 = module_0.Maybe(float_0, bool_0)
    var_0 = maybe_0.ap(float_0)
    var_1 = var_0.to_validation()
    var_2 = maybe_0.map(var_0)
    var_3 = maybe_0.to_validation()
    var_4 = var_2.to_validation()
    var_5 = var_2.to_either()
    maybe_1 = module_0.Maybe(var_2, var_4)
    var_3.bind(maybe_0)


def test_case_8():
    int_0 = 2834
    int_1 = -2830
    bool_0 = False
    maybe_0 = module_0.Maybe(int_1, bool_0)
    maybe_0.ap(int_0)


def test_case_9():
    bool_0 = False
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.to_try()
    var_2 = maybe_0.filter(bool_0)
    generic_0 = module_1.Generic()
    var_3 = var_2.get_or_else(generic_0)
    maybe_1 = module_0.Maybe(bool_0, var_3)
    bool_2 = var_2.__eq__(bool_1)
    var_4 = var_2.to_validation()


def test_case_10():
    str_0 = "~S6is;j8}J-"
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_validation()
    maybe_0.filter(var_0)


def test_case_11():
    str_0 = "p"
    str_1 = "\n        Call success_callback function with monad value when monad is successfully.\n\n        :params success_callback: function to apply with monad value.\n        :type success_callback: Function(A)\n        :returns: self\n        :rtype: Try[A]\n        "
    maybe_0 = module_0.Maybe(str_1, str_1)
    var_0 = maybe_0.get_or_else(str_1)
    var_1 = maybe_0.to_try()
    bool_0 = maybe_0.__eq__(str_0)


def test_case_12():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.to_try()
    bool_0 = False
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    var_2 = maybe_1.get_or_else(none_type_0)
    var_3 = maybe_0.to_validation()
    var_4 = maybe_1.to_validation()
    var_0.get_or_else(maybe_0)


def test_case_13():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_either()
    var_0.to_either()


def test_case_14():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_try()
    var_1.map(var_0)


def test_case_15():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_box()
    float_0 = 3969.09
    maybe_1 = module_0.Maybe(none_type_0, var_0)
    var_0.bind(float_0)


def test_case_16():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_either()
    var_2 = var_1.to_box()
    var_3 = var_2.to_either()
    var_3.map(none_type_0)


def test_case_17():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_try()


def test_case_18():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_validation()
    maybe_0.ap(var_0)


def test_case_19():
    float_0 = -1216.0
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.ap(none_type_0)
    none_type_1 = None
    var_1 = maybe_0.to_lazy()
    maybe_1 = module_0.Maybe(none_type_1, float_0)
    var_2 = maybe_1.to_try()
    maybe_2 = module_0.Maybe(float_0, float_0)
    var_3 = var_1.to_either()
    var_4 = var_0.to_lazy()
    var_5 = maybe_2.to_box()
    var_6 = maybe_1.to_try()
    var_7 = maybe_2.map(var_1)
    var_8 = var_5.to_either()
    var_5.filter(var_2)


def test_case_20():
    bytes_0 = b";\xf3s\x1eH\x89\x16\xdf"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_try()
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, bytes_0)
    var_1 = maybe_1.to_either()
    bool_0 = maybe_1.__eq__(maybe_1)
    var_2 = var_1.bind(bytes_0)
    var_3 = var_1.to_try()
    var_0.to_box()


def test_case_21():
    complex_0 = 1560.693 - 522.2703j
    bool_0 = False
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_0, none_type_0)
    var_0 = maybe_0.to_box()
    maybe_0.filter(complex_0)


def test_case_22():
    bytes_0 = b";\xf3s\x1eH\x89\x16\xdf"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.bind(maybe_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, bytes_0)
    var_1 = maybe_1.to_either()
    bool_0 = maybe_1.__eq__(bytes_0)
    var_2 = maybe_1.bind(var_1)
    var_3 = var_1.to_try()
    var_4 = var_0.filter(maybe_0)
    var_5 = var_3.bind(var_1)
    var_6 = var_4.bind(var_3)
    bool_1 = maybe_0.__eq__(var_2)
    maybe_2 = module_0.Maybe(var_3, bool_0)
    var_7 = var_6.to_validation()
    var_8 = maybe_1.to_box()
    var_9 = var_8.to_validation()
    var_10 = maybe_0.to_either()
    var_11 = var_2.to_lazy()
    var_12 = var_10.to_box()
    bool_2 = maybe_2.__eq__(var_12)
    var_13 = var_0.to_box()
    var_9.ap(var_13)


def test_case_23():
    bytes_0 = b"\xe0\xea;\xbe}\t\xa0\xc7u=\xd0^\x1e\xcb\xdd\xad\xd8"
    bool_0 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_try()
    var_1.ap(bool_1)
