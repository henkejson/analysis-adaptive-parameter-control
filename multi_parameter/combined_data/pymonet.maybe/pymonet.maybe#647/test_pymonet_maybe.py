# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    int_0 = 2418
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, int_0)
    bool_0 = True
    maybe_1 = module_0.Maybe(int_0, bool_0)
    bool_1 = False
    bool_2 = maybe_1.__eq__(maybe_1)
    maybe_2 = module_0.Maybe(bool_1, bool_1)
    var_0 = maybe_1.to_try()
    maybe_3 = maybe_2.to_lazy()


def test_case_3():
    str_0 = "nsKW\x0b\x0c"
    int_0 = -2347
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.ap(str_0)
    var_1 = maybe_0.bind(var_0)
    bytes_0 = b"\xfex~\x12\xe0\xd9\n\x98K\xa6\x19?\xa6\x03\xc3"
    bool_1 = maybe_0.__eq__(int_0)
    none_type_0 = None
    bool_2 = maybe_0.__eq__(none_type_0)
    var_2 = maybe_0.map(str_0)
    var_3 = var_0.to_either()
    maybe_1 = module_0.Maybe(none_type_0, var_3)
    tuple_0 = (bytes_0,)
    var_4 = var_3.to_try()
    var_5 = maybe_0.filter(str_0)
    var_6 = var_5.to_lazy()
    var_7 = maybe_0.filter(none_type_0)
    maybe_2 = module_0.Maybe(str_0, str_0)
    var_8 = var_4.get_or_else(tuple_0)


def test_case_4():
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_either()
    var_2 = var_1.to_box()
    var_3 = var_2.to_lazy()
    str_0 = '+PjS<cvhA8sk5g_"Rr.'
    var_4 = var_3.ap(str_0)
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    var_5 = maybe_1.map(var_3)
    var_6 = var_5.bind(bool_0)
    var_7 = var_6.to_either()
    maybe_2 = module_0.Maybe(bool_0, bool_0)


def test_case_5():
    none_type_0 = None
    int_0 = -3126
    bool_0 = False
    maybe_0 = module_0.Maybe(int_0, bool_0)
    maybe_0.map(none_type_0)


def test_case_6():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_1.to_lazy()
    maybe_0.bind(var_0)


def test_case_7():
    float_0 = 276.62
    bytes_0 = b";{\xb9%J\x95\xad\x0b\xeb-\x03G\xdaH\xe8"
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: bytes_0}
    bytes_1 = b"\xabq\x118R\x1d`"
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_1, bool_0)
    var_0 = maybe_0.ap(dict_0)


def test_case_8():
    none_type_0 = None
    none_type_1 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_1, bool_0)
    maybe_0.ap(none_type_0)


def test_case_9():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    maybe_0 = module_0.Maybe(set_0, set_0)
    var_0 = maybe_0.filter(set_0)
    var_1 = maybe_0.to_either()
    tuple_0 = ()
    maybe_1 = module_0.Maybe(var_1, tuple_0)
    maybe_1.filter(var_1)


def test_case_10():
    none_type_0 = None
    str_0 = "Rem\\y\tdLoqxR^AF\rRM("
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.get_or_else(none_type_0)
    var_0.to_lazy()


def test_case_11():
    str_0 = "F&qe%Tu?D7'x"
    bool_0 = True
    bool_1 = False
    maybe_0 = module_0.Maybe(str_0, bool_1)
    none_type_0 = None
    var_0 = maybe_0.get_or_else(none_type_0)
    var_1 = maybe_0.get_or_else(bool_0)
    var_1.map(var_1)


def test_case_12():
    tuple_0 = ()
    maybe_0 = module_0.Maybe(tuple_0, tuple_0)
    var_0 = maybe_0.to_try()
    none_type_0 = None
    bool_0 = True
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    var_1 = maybe_1.ap(tuple_0)
    var_2 = var_1.to_either()


def test_case_13():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_either()
    var_0.to_either()


def test_case_14():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_box()
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)


def test_case_15():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    maybe_0 = module_0.Maybe(set_0, set_0)
    var_0 = maybe_0.filter(set_0)
    var_1 = var_0.to_lazy()
    tuple_0 = ()
    maybe_1 = module_0.Maybe(var_1, tuple_0)
    maybe_1.filter(var_1)


def test_case_16():
    bytes_0 = b"\xc3\x89N"
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.to_validation()


def test_case_17():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_validation()
    var_0.to_validation()


def test_case_18():
    none_type_0 = None
    float_0 = -415.7256
    dict_0 = {float_0: float_0}
    maybe_0 = module_0.Maybe(dict_0, float_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_validation()
    var_1.bind(none_type_0)


def test_case_19():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_box()
    var_2 = var_1.to_try()
    var_2.bind(bool_0)


def test_case_20():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.map(maybe_0)
    str_0 = "\n        Transform Box into successfull Try.\n\n        :returns: successfull Try monad with previous value\n        :rtype: Try[A]\n        "
    var_2 = maybe_0.ap(str_0)
    maybe_1 = module_0.Maybe(maybe_0, bool_0)
    var_3 = maybe_1.ap(str_0)
    var_4 = var_3.filter(var_2)
    var_5 = maybe_0.to_validation()
    var_6 = var_5.to_lazy()
    var_7 = var_4.map(var_2)
    bool_1 = False
    maybe_2 = module_0.Maybe(var_6, bool_1)
    var_8 = maybe_0.bind(maybe_2)
    bool_2 = maybe_2.__eq__(maybe_2)
    maybe_2.filter(var_5)


def test_case_21():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    int_0 = 2418
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.to_either()
    var_2 = var_1.map(maybe_0)
    var_3 = maybe_0.ap(var_0)
    maybe_1 = module_0.Maybe(maybe_0, int_0)
    var_4 = maybe_1.ap(var_3)
    var_5 = var_4.filter(var_3)
    none_type_0 = None
    var_6 = maybe_0.to_try()
    var_7 = var_0.bind(var_1)
    var_8 = maybe_0.to_validation()
    var_9 = var_8.to_lazy()
    maybe_2 = module_0.Maybe(var_4, maybe_1)
    var_10 = var_5.map(maybe_2)
    maybe_3 = module_0.Maybe(none_type_0, int_0)
    bool_1 = False
    maybe_4 = module_0.Maybe(int_0, bool_1)
    var_11 = maybe_0.bind(var_6)
    bool_2 = maybe_4.__eq__(maybe_4)
    bool_3 = var_11.__eq__(maybe_2)
    maybe_4.filter(var_8)
