# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    int_0 = 660
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.ap(var_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    int_0 = 849
    set_0 = {int_0}
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(set_0, bool_0)
    var_0 = maybe_0.bind(none_type_0)
    maybe_1 = module_0.Maybe(none_type_0, int_0)
    var_1 = maybe_1.ap(none_type_0)
    maybe_2 = module_0.Maybe(var_0, var_1)
    var_2 = maybe_1.to_validation()
    bool_1 = var_2.__eq__(maybe_1)
    var_3 = maybe_2.to_either()
    bool_2 = var_1.__eq__(var_0)
    var_4 = var_0.to_try()
    var_5 = var_0.filter(var_0)
    var_6 = var_5.bind(var_1)
    var_2.ap(var_3)


def test_case_3():
    int_0 = 849
    set_0 = {int_0}
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(set_0, bool_0)
    var_0 = maybe_0.bind(none_type_0)
    maybe_1 = module_0.Maybe(none_type_0, int_0)
    var_1 = maybe_1.ap(none_type_0)
    maybe_2 = module_0.Maybe(var_0, var_1)
    var_2 = maybe_1.to_validation()
    bool_1 = var_2.__eq__(maybe_1)
    var_3 = maybe_2.to_either()
    bool_2 = var_1.__eq__(var_0)
    var_4 = var_2.to_box()
    bool_3 = var_1.__eq__(var_4)
    var_5 = var_4.to_either()
    var_6 = maybe_1.to_try()
    var_7 = var_5.to_lazy()
    var_3.filter(maybe_2)


def test_case_4():
    bool_0 = True
    bool_1 = True
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.map(list_0)
    var_1 = var_0.map(bool_0)
    maybe_1 = module_0.Maybe(var_1, var_1)
    var_2 = var_1.filter(var_1)
    var_3 = maybe_1.ap(list_0)
    var_4 = var_3.get_or_else(bool_0)


def test_case_5():
    complex_0 = -1981 + 9.67494j
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.map(complex_0)


def test_case_6():
    int_0 = 877
    set_0 = {int_0}
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(set_0, bool_0)
    var_0 = maybe_0.bind(none_type_0)
    var_1 = var_0.to_validation()
    var_1.filter(int_0)


def test_case_7():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_either()
    maybe_1 = module_0.Maybe(none_type_0, var_0)
    var_1 = maybe_0.get_or_else(none_type_0)
    maybe_0.bind(var_1)


def test_case_8():
    bool_0 = False
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_0.ap(none_type_0)


def test_case_9():
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_1 = module_0.Maybe(bool_0, none_type_0)
    var_0 = maybe_0.filter(bool_0)
    maybe_1.filter(var_0)


def test_case_10():
    bool_0 = False
    none_type_0 = None
    bool_1 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_1)
    maybe_0.filter(bool_0)


def test_case_11():
    bytes_0 = b"r\xa7\xd5k\xdf\xe7"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    var_1 = maybe_0.to_try()
    var_1.to_box()


def test_case_12():
    str_0 = "`yy_`PGn^hnq.{1BY"
    bytes_0 = b"\t_\xd2\x0c\x88"
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.get_or_else(bytes_0)
    var_0.ap(str_0)


def test_case_13():
    bool_0 = False
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_1, bool_1)
    var_0 = maybe_0.ap(bool_0)
    var_1 = var_0.to_either()
    var_2 = var_1.to_validation()
    var_3 = var_2.to_try()
    bool_2 = False
    none_type_0 = None
    bool_3 = False
    maybe_1 = module_0.Maybe(none_type_0, bool_3)
    maybe_1.filter(bool_2)


def test_case_14():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_lazy()


def test_case_15():
    str_0 = "\n        :param semigroup: other semigroup to concat\n        :type semigroup: First[B]\n        :returns: new First with first value\n        :rtype: First[A]\n        "
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_try()
    bool_1 = True
    maybe_1 = module_0.Maybe(str_0, str_0)
    var_1 = maybe_1.to_box()
    var_2 = var_1.to_validation()
    var_3 = var_2.to_try()
    maybe_2 = module_0.Maybe(str_0, bool_1)
    var_4 = maybe_2.to_either()
    var_5 = var_4.ap(bool_1)
    var_6 = var_4.map(var_4)
    maybe_3 = module_0.Maybe(str_0, str_0)
    bool_2 = maybe_2.__eq__(bool_1)
    var_2.to_validation()


def test_case_16():
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_1 = module_0.Maybe(bool_0, none_type_0)
    var_0 = maybe_1.to_lazy()
    var_1 = maybe_1.to_box()
    var_2 = maybe_0.filter(bool_0)
    maybe_1.filter(var_1)


def test_case_17():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = False
    str_0 = '>;R}Mi1"p_fpEDhzj2<'
    bool_2 = False
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_try()
    var_2 = maybe_0.bind(var_0)
    var_3 = maybe_0.filter(bool_1)
    var_4 = maybe_0.to_try()
    maybe_1 = module_0.Maybe(str_0, bool_2)
    bool_3 = var_2.__eq__(maybe_1)
    maybe_1.filter(bool_1)


def test_case_18():
    dict_0 = {}
    bool_0 = True
    maybe_0 = module_0.Maybe(dict_0, dict_0)
    var_0 = maybe_0.to_try()
    var_0.bind(bool_0)


def test_case_19():
    bytes_0 = b"[)$l\x85\xcc\xc5q\xb8\x93A*"
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.to_try()
    maybe_1 = module_0.Maybe(bytes_0, bytes_0)
    var_2 = maybe_1.to_validation()
    var_3 = maybe_1.get_or_else(maybe_1)
    maybe_2 = module_0.Maybe(bytes_0, bytes_0)
    var_2.filter(bytes_0)


def test_case_20():
    bool_0 = True
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.get_or_else(bool_0)
    none_type_0 = None
    bool_2 = True
    maybe_1 = module_0.Maybe(none_type_0, bool_2)
    bool_3 = maybe_1.__eq__(bool_2)
    var_1 = maybe_1.filter(bool_0)
    var_2 = var_1.to_try()
    bool_4 = var_2.__eq__(bool_3)
    var_3 = var_1.to_validation()
    var_4 = maybe_1.bind(var_3)
    var_5 = var_1.filter(var_0)
    none_type_1 = None
    bool_5 = False
    maybe_2 = module_0.Maybe(none_type_1, bool_5)
    var_6 = maybe_2.to_lazy()
    var_7 = var_1.to_lazy()
    var_8 = var_4.filter(var_6)
    var_9 = maybe_1.to_box()
    bool_6 = var_1.__eq__(bool_0)
    maybe_3 = module_0.Maybe(var_0, maybe_2)
    var_10 = var_5.to_box()
    bool_7 = True
    maybe_4 = module_0.Maybe(var_10, bool_7)
    var_11 = maybe_4.bind(var_0)
    var_12 = var_11.to_try()
    var_13 = var_6.to_try()


def test_case_21():
    bool_0 = False
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.bind(bool_0)
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    maybe_2 = module_0.Maybe(bool_1, maybe_1)
    var_1 = maybe_0.map(bool_1)
    var_2 = maybe_1.ap(var_0)
    var_3 = maybe_1.to_box()
    maybe_3 = module_0.Maybe(bool_0, bool_0)
    var_4 = maybe_0.get_or_else(maybe_1)
    bool_2 = maybe_3.__eq__(var_4)
    var_4.bind(var_4)
