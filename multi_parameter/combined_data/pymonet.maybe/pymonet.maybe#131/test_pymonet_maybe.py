# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1


def test_case_0():
    str_0 = '?JzD#{8b\\"'
    maybe_0 = module_0.Maybe(str_0, str_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    bool_2 = False
    maybe_1 = module_0.Maybe(bool_2, bool_2)
    var_0 = maybe_0.filter(bool_1)
    var_1 = var_0.to_box()
    var_2 = var_1.to_try()
    maybe_1.filter(var_1)


def test_case_3():
    bytes_0 = b"\xe2&\x928@\x9c\xb1\x08n\x9e?\xfd\xc4"
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    bool_1 = maybe_0.__eq__(bytes_0)
    var_0 = maybe_0.to_box()
    var_0.get_or_else(bool_1)


def test_case_4():
    bytes_0 = b"\x192vW\x02\\\xc6$\x19\x13\xbct;\xbf\x1e\xbf"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    var_1 = maybe_0.map(bytes_0)
    var_2 = maybe_0.get_or_else(bytes_0)
    var_3 = maybe_0.to_try()
    var_4 = maybe_0.to_lazy()
    var_5 = var_1.ap(bytes_0)
    var_6 = maybe_0.to_either()
    var_7 = maybe_0.to_lazy()
    var_8 = var_0.to_lazy()
    maybe_1 = module_0.Maybe(var_0, maybe_0)
    var_9 = var_0.get_or_else(var_8)
    var_10 = var_8.ap(var_7)


def test_case_5():
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_0, none_type_0)
    maybe_0.map(bool_0)


def test_case_6():
    str_0 = "z9?u/=\nCf"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.to_validation()
    var_2 = maybe_0.to_try()
    var_3 = maybe_0.bind(var_1)
    var_4 = maybe_0.to_either()


def test_case_7():
    tuple_0 = ()
    maybe_0 = module_0.Maybe(tuple_0, tuple_0)
    maybe_0.bind(maybe_0)


def test_case_8():
    bytes_0 = b"\x8e\xe3>\x92\x9a\xbc\x1fO?\xc4"
    bytes_1 = b"\x80\xa6d\x81\xc7\xea\xe5\xf7\xe9\xb39H\xc0\xa7\x9d\xea\xe7\x13"
    maybe_0 = module_0.Maybe(bytes_1, bytes_1)
    var_0 = maybe_0.ap(bytes_0)


def test_case_9():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.ap(none_type_0)


def test_case_10():
    bool_0 = False
    none_type_0 = None
    bool_1 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_1)
    var_0 = maybe_0.get_or_else(bool_0)
    var_1 = maybe_0.to_validation()
    var_0.to_box()


def test_case_11():
    none_type_0 = None
    float_0 = -1999.6936
    int_0 = 383
    bytes_0 = b"\xad"
    tuple_0 = (int_0, int_0, bytes_0, int_0)
    bool_0 = False
    maybe_0 = module_0.Maybe(tuple_0, bool_0)
    var_0 = maybe_0.get_or_else(float_0)
    var_0.bind(none_type_0)


def test_case_12():
    str_0 = "|>;a&@`p"
    bytes_0 = b"s\x08\xae+\x96P\x819\x8aN\x04jbW\x84GG"
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.bind(str_0)


def test_case_13():
    str_0 = "\n        Transform Validation to Maybe.\n\n        :returns: Maybe with Validation Value when Validation has no errors, in other case empty Maybe\n        :rtype: Maybe[A | None]\n        "
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_either()
    var_0.to_either()


def test_case_14():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_validation()
    var_2 = var_1.to_try()


def test_case_15():
    bool_0 = False
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.to_lazy()


def test_case_16():
    str_0 = '?JzD#{8b\\"'
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_try()


def test_case_17():
    complex_0 = -3422 + 1273.65j
    str_0 = "^v)L!hF&B+$pYY7uERDG"
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = var_0.to_try()
    var_2 = var_1.get_or_else(complex_0)
    var_2.to_either()


def test_case_18():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    bool_0 = maybe_0.__eq__(var_0)
    var_1 = var_0.to_either()
    maybe_0.ap(var_1)


def test_case_19():
    complex_0 = 894.3 + 3023.2j
    bool_0 = False
    maybe_0 = module_0.Maybe(complex_0, bool_0)
    var_0 = maybe_0.to_validation()
    bool_1 = maybe_0.__eq__(maybe_0)
    bool_2 = False
    bool_2.to_either()


def test_case_20():
    bytes_0 = b"\x192vW\x02\\\xc6$\x19\x13\xbct;\xbf\x1e\xbf"
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, bytes_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_try()
    maybe_1 = module_0.Maybe(bytes_0, bytes_0)
    var_2 = maybe_1.get_or_else(maybe_1)
    var_3 = maybe_1.map(bytes_0)
    var_4 = maybe_1.get_or_else(bytes_0)
    var_5 = maybe_1.to_lazy()
    var_6 = var_3.ap(bytes_0)
    var_7 = maybe_1.to_either()
    var_8 = maybe_1.to_lazy()
    var_9 = var_2.to_lazy()
    maybe_2 = module_0.Maybe(var_2, maybe_1)
    var_4.to_either()


def test_case_21():
    generic_0 = module_1.Generic()
    maybe_0 = module_0.Maybe(generic_0, generic_0)
    bool_0 = False
    maybe_1 = module_0.Maybe(generic_0, bool_0)
    var_0 = maybe_1.to_validation()
    bool_1 = maybe_1.__eq__(maybe_0)
    bool_2 = False
    maybe_2 = module_0.Maybe(var_0, bool_2)
    var_1 = var_0.to_either()
    maybe_1.ap(bool_1)
