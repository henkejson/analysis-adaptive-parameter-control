# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    bytes_0 = b"Y.fu\x84\xdf\x13\x95"
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)


def test_case_3():
    bytes_0 = b"Y.fu\x84\xdf\x13\x95"
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    bool_1 = maybe_0.__eq__(bytes_0)


def test_case_4():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.map(none_type_0)
    maybe_1 = module_0.Maybe(bool_0, none_type_0)
    var_1 = var_0.to_try()
    bool_1 = False
    maybe_2 = module_0.Maybe(bool_0, bool_1)
    var_2 = maybe_2.to_either()
    var_3 = maybe_2.get_or_else(none_type_0)


def test_case_5():
    bytes_0 = b"+\xc2p\xda\x83\xc8\xc6\xcf\xc9\xfc\xcd(k\xf7\x10\xf5"
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.map(bytes_0)


def test_case_6():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.bind(none_type_0)
    bool_1 = True
    maybe_1 = module_0.Maybe(none_type_0, bool_1)


def test_case_7():
    generic_0 = module_1.Generic()
    bool_0 = False
    maybe_0 = module_0.Maybe(generic_0, bool_0)
    var_0 = maybe_0.to_try()
    maybe_0.bind(generic_0)


def test_case_8():
    set_0 = set()
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.ap(set_0)
    var_1 = var_0.to_box()
    var_2 = var_0.to_lazy()
    var_3 = var_0.get_or_else(maybe_0)


def test_case_9():
    str_0 = "50/E{!\\zo)r/"
    none_type_0 = None
    maybe_0 = module_0.Maybe(str_0, none_type_0)
    maybe_0.ap(str_0)


def test_case_10():
    bytes_0 = b"Y.fu\x84\xdf\x13\x95"
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.filter(bool_0)
    var_1 = var_0.to_either()


def test_case_11():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.filter(maybe_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1.filter(maybe_1)


def test_case_12():
    dict_0 = {}
    bool_0 = False
    maybe_0 = module_0.Maybe(dict_0, bool_0)
    bool_1 = False
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.to_try()
    bool_2 = maybe_0.__eq__(maybe_0)
    maybe_1 = module_0.Maybe(bool_1, bool_1)


def test_case_13():
    bytes_0 = b"\x87\x1c\xdb\xc1\xc2\x1a\xea~\xe5\xc7"
    none_type_0 = None
    maybe_0 = module_0.Maybe(bytes_0, none_type_0)
    var_0 = maybe_0.to_lazy()


def test_case_14():
    int_0 = 1117
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.to_try()
    var_0.to_lazy()


def test_case_15():
    complex_0 = -3677.631 - 2438.0728j
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_try()
    var_0.ap(complex_0)


def test_case_16():
    str_0 = "\n        Returns Lazy with function returning argument.\n\n        :param value: value to return by Lazy constructor_fn\n        :type value: Any\n        :returns: Lazy with function returning argument\n        :rtype: Lazy[Function() -> A]\n        "
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.to_box()
    var_2 = maybe_0.to_try()
    var_3 = maybe_0.to_try()
    var_3.to_box()


def test_case_17():
    complex_0 = 1389.776 + 3612.908712j
    bytes_0 = b"99=[XG\x8cS\x88\x87\xbfe\xbc|"
    int_0 = -762
    bool_0 = False
    maybe_0 = module_0.Maybe(complex_0, bool_0)
    var_0 = maybe_0.to_validation()
    tuple_0 = (bytes_0, int_0)
    maybe_1 = module_0.Maybe(tuple_0, complex_0)
    bool_1 = False
    var_1 = var_0.to_box()
    var_2 = var_0.to_try()
    bool_2 = maybe_1.__eq__(bool_1)
    str_0 = "i\tw}RC*;jm!l'FQj="
    maybe_2 = module_0.Maybe(var_2, str_0)


def test_case_18():
    float_0 = -1135.1
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(float_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.bind(none_type_0)
    var_1.to_box()


def test_case_19():
    float_0 = 2653.535783
    bool_0 = True
    maybe_0 = module_0.Maybe(float_0, bool_0)
    var_0 = maybe_0.to_either()
    maybe_1 = module_0.Maybe(bool_0, var_0)
    var_1 = maybe_0.get_or_else(maybe_0)
    var_2 = var_1.map(bool_0)
    var_3 = maybe_0.bind(var_1)
    var_4 = maybe_0.to_either()
    maybe_2 = module_0.Maybe(var_3, var_4)
    bool_1 = maybe_2.__eq__(var_1)


def test_case_20():
    str_0 = "Ym/X"
    maybe_0 = module_0.Maybe(str_0, str_0)
    maybe_1 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.ap(str_0)
    var_1 = maybe_1.get_or_else(maybe_1)
    var_2 = var_1.to_lazy()
    var_3 = var_2.to_box()
    var_4 = var_1.to_lazy()
    var_5 = maybe_1.bind(var_3)
    bool_0 = var_2.__eq__(maybe_0)
    var_2.to_lazy()
