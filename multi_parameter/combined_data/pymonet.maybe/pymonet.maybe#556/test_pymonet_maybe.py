# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    float_0 = 3405.1091
    maybe_0 = module_0.Maybe(float_0, float_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.filter(maybe_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1.filter(maybe_0)


def test_case_3():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_1 = maybe_0.__eq__(bool_0)
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.get_or_else(maybe_0)
    maybe_1.filter(var_1)


def test_case_4():
    int_0 = 1525
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.to_validation()
    var_1 = var_0.to_try()
    var_2 = maybe_0.map(var_1)
    var_3 = var_2.filter(var_0)
    var_4 = maybe_0.to_try()
    maybe_1 = module_0.Maybe(var_0, int_0)
    var_5 = var_0.to_try()
    var_4.to_lazy()


def test_case_5():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.map(none_type_0)


def test_case_6():
    float_0 = 2370.0
    maybe_0 = module_0.Maybe(float_0, float_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.to_box()
    bool_0 = maybe_0.__eq__(var_1)
    var_2 = maybe_0.to_box()
    var_3 = var_0.to_try()
    var_4 = var_1.to_either()
    maybe_1 = module_0.Maybe(maybe_0, var_1)
    var_5 = maybe_0.filter(var_1)
    var_6 = var_5.to_box()
    var_7 = var_5.to_lazy()
    var_8 = maybe_0.bind(var_6)
    var_9 = var_7.to_box()
    var_3.to_either()


def test_case_7():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_try()
    maybe_0.bind(none_type_0)


def test_case_8():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.ap(bool_0)
    var_0.ap(var_1)


def test_case_9():
    int_0 = 0
    maybe_0 = module_0.Maybe(int_0, int_0)
    bool_0 = True
    maybe_1 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_1.to_either()
    bool_1 = var_0.__eq__(maybe_0)
    var_1 = maybe_0.ap(var_0)
    none_type_0 = None
    var_1.filter(none_type_0)


def test_case_10():
    float_0 = 3405.1091
    maybe_0 = module_0.Maybe(float_0, float_0)
    var_0 = maybe_0.filter(maybe_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1.filter(maybe_0)


def test_case_11():
    dict_0 = {}
    maybe_0 = module_0.Maybe(dict_0, dict_0)
    maybe_0.filter(dict_0)


def test_case_12():
    bool_0 = False
    bytes_0 = b"\xacg\xe1\xc9"
    list_0 = [bytes_0, bytes_0, bytes_0]
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_lazy()
    none_type_1 = None
    bool_1 = True
    maybe_1 = module_0.Maybe(none_type_1, bool_1)
    var_1 = maybe_1.to_either()
    var_2 = maybe_1.get_or_else(list_0)
    var_2.get_or_else(bool_0)


def test_case_13():
    str_0 = "\n    First is a Monoid that will always return the first, value when 2 First instances are combined.\n    "
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.get_or_else(str_0)
    var_0.to_box()


def test_case_14():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_either()
    maybe_0.filter(maybe_0)


def test_case_15():
    float_0 = 2370.0
    maybe_0 = module_0.Maybe(float_0, float_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.to_box()
    bool_0 = maybe_0.__eq__(var_1)
    var_2 = maybe_0.to_box()
    var_3 = var_0.to_try()
    maybe_1 = module_0.Maybe(maybe_0, var_1)
    var_4 = maybe_1.filter(var_1)
    var_5 = var_3.filter(var_4)
    var_2.get_or_else(var_3)


def test_case_16():
    str_0 = "\n        Transform Lazy into Box with constructor_fn result.\n\n        :returns: Box monad with constructor_fn result\n        :rtype: Box[A]\n        "
    none_type_0 = None
    maybe_0 = module_0.Maybe(str_0, none_type_0)
    var_0 = maybe_0.to_box()
    maybe_1 = module_0.Maybe(var_0, maybe_0)
    var_1 = maybe_1.to_lazy()
    var_1.to_lazy()


def test_case_17():
    list_0 = []
    maybe_0 = module_0.Maybe(list_0, list_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_either()
    var_2 = var_1.to_lazy()


def test_case_18():
    int_0 = 1525
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.to_validation()
    var_1 = var_0.to_try()
    var_2 = maybe_0.filter(var_0)
    var_3 = maybe_0.to_try()
    maybe_1 = module_0.Maybe(var_0, int_0)
    var_4 = var_0.to_try()
    var_3.to_lazy()


def test_case_19():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0}
    maybe_0 = module_0.Maybe(dict_0, tuple_0)
    var_0 = maybe_0.to_try()
    var_0.to_validation()


def test_case_20():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_validation()
    bytes_0 = b"\xb6\x17\xae\x92\xf9\x87\xad!\xb6"
    none_type_1 = None
    bool_1 = False
    maybe_1 = module_0.Maybe(none_type_1, bool_1)
    var_1 = maybe_1.to_validation()
    var_1.get_or_else(bytes_0)


def test_case_21():
    float_0 = 3405.1091
    maybe_0 = module_0.Maybe(float_0, float_0)
    var_0 = maybe_0.to_box()
    bool_0 = var_0.__eq__(maybe_0)
    var_1 = maybe_0.filter(var_0)
    var_2 = maybe_0.get_or_else(maybe_0)
    bool_1 = var_1.__eq__(var_2)
    none_type_0 = None
    maybe_1 = module_0.Maybe(var_2, none_type_0)
    maybe_1.filter(var_2)


def test_case_22():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_box()
    bool_0 = maybe_0.__eq__(maybe_0)
    maybe_0.bind(none_type_0)
