# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    str_0 = "\n        Transform Either to Maybe.\n\n        :returns: Empty Maybe\n        :rtype: Maybe[None]\n        "
    maybe_0 = module_0.Maybe(str_0, str_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    str_0 = "i+1Ez;@"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.filter(str_0)
    var_1 = maybe_0.to_either()
    bool_0 = maybe_0.__eq__(var_0)
    var_2 = maybe_0.get_or_else(bool_0)
    var_3 = var_1.to_try()
    maybe_1 = module_0.Maybe(bool_0, var_2)
    maybe_1.filter(maybe_0)


def test_case_3():
    bool_0 = True
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_lazy()
    bytes_0 = b"\x1e\xf0\x11\x0fl"
    maybe_1 = module_0.Maybe(bytes_0, bytes_0)
    var_2 = maybe_1.to_box()
    bool_2 = maybe_1.__eq__(var_0)
    var_3 = var_2.ap(maybe_1)
    var_4 = maybe_1.get_or_else(bytes_0)
    bool_3 = maybe_1.__eq__(var_2)


def test_case_4():
    int_0 = 0
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.to_either()
    maybe_0.map(int_0)


def test_case_5():
    str_0 = "i+1Ez;@"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.filter(str_0)
    var_1 = maybe_0.to_either()
    bool_0 = maybe_0.__eq__(var_0)
    var_2 = maybe_0.get_or_else(bool_0)
    maybe_1 = module_0.Maybe(str_0, var_1)
    var_3 = maybe_1.to_box()
    var_4 = var_0.bind(var_1)
    var_5 = maybe_1.to_try()
    var_6 = var_0.to_either()
    maybe_2 = module_0.Maybe(bool_0, var_2)
    maybe_2.filter(maybe_0)


def test_case_6():
    str_0 = "JX5S"
    maybe_0 = module_0.Maybe(str_0, str_0)
    str_1 = "\n        Take function Function(A) -> B and returns new Lazy with mapped result of Lazy constructor function.\n        Both mapper end constructor will be called only during calling fold method.\n\n        :param mapper: mapper function\n        :type mapper: Function(A) -> B\n        :returns: Lazy with mapped value\n        :rtype: Lazy[Function() -> B)]\n        "
    bool_0 = False
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    maybe_1.bind(str_1)


def test_case_7():
    str_0 = "i+1Ez;@"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.filter(str_0)
    var_1 = maybe_0.to_either()
    bool_0 = maybe_0.__eq__(var_0)
    var_2 = maybe_0.get_or_else(bool_0)
    maybe_1 = module_0.Maybe(str_0, var_1)
    var_3 = var_0.ap(bool_0)
    var_4 = var_3.map(maybe_0)
    var_5 = var_1.to_try()
    var_6 = var_0.bind(var_3)
    var_7 = maybe_1.to_try()
    maybe_2 = module_0.Maybe(bool_0, var_2)
    maybe_2.filter(maybe_0)


def test_case_8():
    int_0 = 1
    bool_0 = False
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.to_either()
    maybe_0.ap(var_0)


def test_case_9():
    bool_0 = True
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.filter(bool_0)
    var_1 = var_0.get_or_else(bool_1)
    var_1.to_validation()


def test_case_10():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.get_or_else(none_type_0)
    bool_0 = var_0.__eq__(none_type_0)


def test_case_11():
    str_0 = "i+1Ez;@"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.filter(str_0)
    var_1 = maybe_0.to_either()
    bool_0 = maybe_0.__eq__(var_0)
    var_2 = maybe_0.get_or_else(bool_0)
    maybe_1 = module_0.Maybe(str_0, var_1)
    var_3 = maybe_1.to_box()
    var_4 = maybe_1.to_try()
    maybe_2 = module_0.Maybe(bool_0, var_2)
    maybe_2.filter(maybe_0)


def test_case_12():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_validation()
    maybe_0.filter(var_0)


def test_case_13():
    none_type_0 = None
    str_0 = "i+1Ez;@"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.ap(maybe_0)
    var_1 = maybe_0.filter(str_0)
    var_2 = var_0.to_lazy()
    var_3 = var_2.to_either()
    var_4 = maybe_0.get_or_else(var_3)
    var_5 = maybe_0.to_try()
    var_6 = var_5.map(none_type_0)
    var_7 = var_2.bind(var_5)
    var_8 = maybe_0.filter(var_0)
    var_9 = var_0.to_box()
    var_10 = var_5.bind(none_type_0)
    var_5.to_try()


def test_case_14():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()


def test_case_15():
    str_0 = "i+1Ez;@"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.filter(str_0)
    var_1 = maybe_0.to_either()
    bool_0 = maybe_0.__eq__(var_0)
    var_2 = maybe_0.get_or_else(bool_0)
    maybe_1 = module_0.Maybe(str_0, var_1)
    var_3 = maybe_1.to_try()
    maybe_2 = module_0.Maybe(bool_0, var_2)
    maybe_2.filter(maybe_0)


def test_case_16():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_try()


def test_case_17():
    list_0 = []
    bytes_0 = b"\x8a\xbc\x94"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.filter(list_0)
    var_1 = maybe_0.ap(bytes_0)
    int_0 = 614
    var_2 = maybe_0.map(int_0)
    var_3 = maybe_0.to_validation()
    var_3.filter(int_0)


def test_case_18():
    none_type_0 = None
    int_0 = -3096
    bool_0 = False
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_0.bind(none_type_0)


def test_case_19():
    list_0 = []
    none_type_0 = None
    maybe_0 = module_0.Maybe(list_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_try()
    var_1.to_try()


def test_case_20():
    bool_0 = True
    str_0 = "j"
    bool_1 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    bool_2 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.to_validation()
    var_1.map(bool_1)


def test_case_21():
    str_0 = "DfTt 1\x0bvJ*\x0c>o7"
    set_0 = set()
    none_type_0 = None
    maybe_0 = module_0.Maybe(set_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    bool_0 = maybe_0.__eq__(maybe_0)
    maybe_0.map(str_0)
