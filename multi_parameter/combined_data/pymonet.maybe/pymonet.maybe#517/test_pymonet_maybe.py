# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import builtins as module_1


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    int_0 = 2176
    maybe_0 = module_0.Maybe(int_0, int_0)
    bool_0 = False
    bool_1 = maybe_0.__eq__(bool_0)
    maybe_1 = module_0.Maybe(maybe_0, bool_0)
    int_1 = 727
    var_0 = maybe_0.bind(bool_1)
    var_1 = var_0.filter(int_1)


def test_case_3():
    str_0 = "\n        Returns new ImmutableList with argument value on the begin of list\n        and other list elements after it\n\n        :param new_element: element to append on the begin of list\n        :type fn: A\n        :returns: ImmutableList[A]\n        "
    none_type_0 = None
    str_1 = "inf"
    maybe_0 = module_0.Maybe(str_1, str_1)
    bool_0 = True
    bytes_0 = b"\x8b#\xf2r@\x951"
    dict_0 = {bool_0: str_1, str_0: maybe_0}
    tuple_0 = (maybe_0, str_1, dict_0, bytes_0)
    tuple_1 = (bytes_0, tuple_0, none_type_0)
    tuple_2 = (bool_0, tuple_1)
    var_0 = maybe_0.map(tuple_2)
    var_1 = maybe_0.to_lazy()
    var_2 = var_1.to_box()
    var_3 = var_2.to_either()
    var_4 = var_3.to_box()
    bool_1 = False
    maybe_1 = module_0.Maybe(var_4, bool_1)
    maybe_1.filter(none_type_0)


def test_case_4():
    int_0 = -417
    str_0 = 'qf"/rP<QPR9QNk~'
    tuple_0 = (int_0, str_0)
    set_0 = set()
    bool_0 = False
    maybe_0 = module_0.Maybe(set_0, bool_0)
    maybe_0.map(tuple_0)


def test_case_5():
    none_type_0 = None
    int_0 = -807
    bool_0 = False
    maybe_0 = module_0.Maybe(int_0, bool_0)
    maybe_0.bind(none_type_0)


def test_case_6():
    object_0 = module_1.object()
    float_0 = -197.349545
    maybe_0 = module_0.Maybe(float_0, float_0)
    var_0 = maybe_0.ap(object_0)


def test_case_7():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    maybe_0.ap(none_type_0)


def test_case_8():
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_0, none_type_0)
    maybe_0.filter(none_type_0)


def test_case_9():
    none_type_0 = None
    complex_0 = 95 - 616.31j
    bytes_0 = b"9M\x15e\x1a\x97vg\x9d\x11\x16\x02m\x85\xdb"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.get_or_else(complex_0)
    var_0.filter(none_type_0)


def test_case_10():
    none_type_0 = None
    none_type_1 = None
    maybe_0 = module_0.Maybe(none_type_1, none_type_1)
    var_0 = maybe_0.get_or_else(none_type_0)


def test_case_11():
    none_type_0 = None
    str_0 = "9=$2Y1{=%}vO,U,GR`D"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.ap(none_type_0)
    var_1 = var_0.to_validation()
    var_2 = var_0.to_either()


def test_case_12():
    str_0 = 'O"`<=VXf6a-Kd'
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.to_either()
    bool_0 = var_0.__eq__(str_0)
    str_1 = 'zp&+4E~<"M9#<0v_F5\n'
    maybe_1 = module_0.Maybe(str_1, str_1)
    bool_1 = False
    bool_2 = False
    maybe_2 = module_0.Maybe(str_0, bool_2)
    var_1 = maybe_2.to_either()
    maybe_3 = module_0.Maybe(str_0, bool_1)
    var_2 = maybe_3.to_either()


def test_case_13():
    int_0 = 1
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    maybe_1 = module_0.Maybe(maybe_0, maybe_0)
    var_0 = maybe_1.to_box()
    var_1 = var_0.to_lazy()
    var_2 = var_1.to_try()


def test_case_14():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_lazy()
    var_2 = var_1.to_validation()
    var_3 = var_2.to_either()
    var_3.to_either()


def test_case_15():
    int_0 = 2579
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.to_lazy()
    var_0.get_or_else(int_0)


def test_case_16():
    float_0 = 2573.3814
    int_0 = 2176
    maybe_0 = module_0.Maybe(int_0, int_0)
    bool_0 = False
    bool_1 = maybe_0.__eq__(bool_0)
    maybe_1 = module_0.Maybe(maybe_0, bool_0)
    var_0 = maybe_1.to_lazy()
    str_0 = "\n    Perform right-to-left function composition.\n\n    :param value: argument of first applied function\n    :type value: Any\n    :param functions: list of functions to applied from right-to-left\n    :type functions: List[Function]\n    :returns: result of all functions\n    :rtype: Any\n    "
    var_1 = maybe_1.to_either()
    var_2 = var_1.to_box()
    bool_2 = var_2.__eq__(str_0)
    maybe_1.ap(float_0)


def test_case_17():
    float_0 = 2573.3814
    int_0 = 2176
    maybe_0 = module_0.Maybe(float_0, int_0)
    var_0 = maybe_0.filter(maybe_0)
    var_1 = maybe_0.map(int_0)
    var_2 = maybe_0.ap(maybe_0)
    var_3 = var_1.to_either()
    maybe_1 = module_0.Maybe(int_0, int_0)
    bool_0 = False
    var_4 = maybe_1.bind(var_1)
    bool_1 = maybe_1.__eq__(bool_0)
    var_5 = maybe_0.map(var_2)
    maybe_2 = module_0.Maybe(maybe_1, bool_0)
    var_6 = var_1.filter(var_3)
    var_7 = var_2.to_lazy()
    var_8 = var_5.to_either()
    var_9 = maybe_2.to_box()
    bool_2 = var_8.__eq__(var_1)
    var_10 = var_4.ap(var_4)
    var_11 = maybe_1.to_box()
    var_12 = var_4.to_try()


def test_case_18():
    int_0 = -1526
    maybe_0 = module_0.Maybe(int_0, int_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(int_0, none_type_0)
    var_0 = maybe_1.to_try()
    var_1 = maybe_1.to_either()
    var_1.bind(none_type_0)


def test_case_19():
    complex_0 = 1053.202 - 2041j
    none_type_0 = None
    maybe_0 = module_0.Maybe(complex_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    maybe_1 = module_0.Maybe(complex_0, none_type_0)
    var_1 = maybe_0.to_validation()
    maybe_1.ap(none_type_0)


def test_case_20():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.to_lazy()
    var_2 = var_1.to_validation()
    var_3 = maybe_0.to_box()
    var_4 = var_1.to_validation()
    var_1.get_or_else(var_0)


def test_case_21():
    float_0 = 2573.3814
    maybe_0 = module_0.Maybe(float_0, float_0)
    var_0 = maybe_0.filter(maybe_0)
    var_1 = maybe_0.ap(maybe_0)
    maybe_1 = module_0.Maybe(var_1, var_1)
    maybe_2 = module_0.Maybe(maybe_1, var_1)
    var_2 = var_1.get_or_else(var_1)
    bool_0 = maybe_0.__eq__(var_2)
    int_0 = 727
    var_3 = maybe_1.bind(var_2)
    var_4 = var_3.filter(int_0)
    bool_1 = var_2.__eq__(var_3)
    bool_2 = var_1.__eq__(var_1)
    var_5 = maybe_1.ap(bool_1)
    var_6 = var_2.to_validation()


def test_case_22():
    float_0 = 2573.3814
    int_0 = 2176
    maybe_0 = module_0.Maybe(float_0, int_0)
    var_0 = maybe_0.filter(maybe_0)
    var_1 = maybe_0.map(int_0)
    var_2 = maybe_0.ap(maybe_0)
    var_3 = var_1.to_either()
    maybe_1 = module_0.Maybe(int_0, int_0)
    bool_0 = False
    var_4 = maybe_1.bind(var_1)
    bool_1 = maybe_1.__eq__(bool_0)
    maybe_2 = module_0.Maybe(maybe_1, bool_0)
    var_5 = var_1.filter(var_3)
    var_6 = var_4.to_validation()
    var_7 = var_3.to_validation()
    var_8 = maybe_2.to_lazy()
    var_9 = var_4.ap(bool_0)
    var_10 = var_5.to_validation()
    str_0 = "\n    Perform right-to-left function composition.\n\n    :param value: argument of first applied function\n    :type value: Any\n    :param functions: list of functions to applied from right-to-left\n    :type functions: List[Function]\n    :returns: result of all functions\n    :rtype: Any\n    "
    var_11 = maybe_1.ap(str_0)
    var_12 = var_5.to_validation()
    var_13 = var_8.to_either()


def test_case_23():
    float_0 = -2380.7
    bool_0 = False
    maybe_0 = module_0.Maybe(float_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    bool_2 = maybe_0.__eq__(bool_0)
    var_0 = maybe_0.to_either()
    bool_3 = maybe_0.__eq__(var_0)
    var_0.filter(var_0)
