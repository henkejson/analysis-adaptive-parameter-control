# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)


def test_case_3():
    str_0 = "d\x0b!}PV1sgotu%\x0c8;l"
    dict_0 = {str_0: str_0}
    maybe_0 = module_0.Maybe(str_0, dict_0)
    var_0 = maybe_0.filter(dict_0)
    bool_0 = False
    var_1 = var_0.to_box()
    maybe_1 = module_0.Maybe(dict_0, bool_0)
    bool_1 = False
    maybe_2 = module_0.Maybe(bool_1, bool_1)
    bool_2 = maybe_2.__eq__(var_1)


def test_case_4():
    complex_0 = 2771.12794 - 1958.79j
    int_0 = 1
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.map(complex_0)
    var_1 = var_0.to_box()
    var_1.bind(int_0)


def test_case_5():
    str_0 = "d\x0b!}PV1sgotu%\x0c8;l"
    dict_0 = {str_0: str_0}
    maybe_0 = module_0.Maybe(str_0, dict_0)
    var_0 = maybe_0.filter(dict_0)
    bool_0 = False
    var_1 = var_0.to_box()
    var_2 = maybe_0.bind(var_1)
    maybe_1 = module_0.Maybe(dict_0, bool_0)
    var_3 = maybe_1.to_lazy()
    bool_1 = False
    maybe_2 = module_0.Maybe(bool_1, bool_1)
    none_type_0 = None
    maybe_2.map(none_type_0)


def test_case_6():
    str_0 = "\n        Returns new ImmutableList with each element mapped into\n        result of argument called with each element of ImmutableList\n\n        :param fn: function to call with ImmutableList value\n        :type fn: Function(A) -> B\n        :returns: ImmutableList[B]\n        "
    dict_0 = {str_0: str_0}
    maybe_0 = module_0.Maybe(str_0, dict_0)
    var_0 = maybe_0.filter(dict_0)
    bool_0 = False
    var_1 = maybe_0.bind(dict_0)
    maybe_1 = module_0.Maybe(dict_0, bool_0)
    maybe_1.filter(var_1)


def test_case_7():
    none_type_0 = None
    float_0 = 1484.356
    none_type_1 = None
    maybe_0 = module_0.Maybe(float_0, none_type_1)
    maybe_0.bind(none_type_0)


def test_case_8():
    int_0 = -2090
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.ap(maybe_0)
    var_2 = maybe_0.get_or_else(maybe_0)
    var_3 = maybe_0.to_lazy()
    var_4 = maybe_0.ap(maybe_0)


def test_case_9():
    float_0 = 1226.44
    dict_0 = {float_0: float_0, float_0: float_0}
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.ap(dict_0)


def test_case_10():
    str_0 = "\n        Returns new ImmutableList with each element mapped into\n        result of argument called with each element of ImmutableList\n\n        :param fn: function to call with ImmutableList value\n        :type fn: Function(A) -> B\n        :returns: ImmutableList[B]\n        "
    dict_0 = {str_0: str_0}
    maybe_0 = module_0.Maybe(str_0, dict_0)
    var_0 = maybe_0.filter(dict_0)
    bool_0 = False
    maybe_1 = module_0.Maybe(dict_0, bool_0)
    maybe_1.filter(var_0)


def test_case_11():
    float_0 = 4149.332666
    none_type_0 = None
    var_0 = module_0.Maybe(none_type_0, float_0)
    var_1 = var_0.to_either()
    var_2 = var_1.to_lazy()
    str_0 = ":\\~FJ/sMS"
    int_0 = -2327
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_3 = maybe_0.to_either()
    var_4 = maybe_0.filter(str_0)


def test_case_12():
    float_0 = -1886.7388
    bytes_0 = b""
    maybe_0 = module_0.Maybe(float_0, bytes_0)
    var_0 = maybe_0.to_either()
    var_0.to_either()


def test_case_13():
    int_0 = -1903
    set_0 = {int_0}
    maybe_0 = module_0.Maybe(set_0, int_0)
    var_0 = maybe_0.map(set_0)
    bool_0 = False
    maybe_1 = module_0.Maybe(set_0, bool_0)
    var_1 = maybe_0.to_lazy()
    maybe_2 = module_0.Maybe(maybe_1, bool_0)
    var_2 = maybe_2.to_box()


def test_case_14():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_try()


def test_case_15():
    str_0 = "d\x0b!}PV1sgotu%\x0c8;l"
    dict_0 = {str_0: str_0}
    maybe_0 = module_0.Maybe(str_0, dict_0)
    var_0 = maybe_0.filter(dict_0)
    var_1 = var_0.to_box()
    maybe_1 = module_0.Maybe(str_0, var_1)
    var_2 = var_0.to_lazy()
    var_3 = var_0.to_try()
    bool_0 = maybe_1.__eq__(var_3)


def test_case_16():
    int_0 = -127
    none_type_0 = None
    maybe_0 = module_0.Maybe(int_0, none_type_0)
    var_0 = maybe_0.to_try()
    var_0.map(maybe_0)


def test_case_17():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_validation()
    var_0.to_validation()


def test_case_18():
    bool_0 = True
    bool_0.to_either()


def test_case_19():
    none_type_0 = None
    none_type_1 = None
    float_0 = 3009.5
    maybe_0 = module_0.Maybe(float_0, float_0)
    var_0 = maybe_0.bind(none_type_1)
    var_1 = var_0.to_lazy()
    var_2 = var_1.to_try()
    var_2.map(none_type_0)


def test_case_20():
    str_0 = "d\x0b!}PV1sgotu%\x0c8;l"
    dict_0 = {str_0: str_0}
    maybe_0 = module_0.Maybe(str_0, dict_0)
    var_0 = maybe_0.filter(dict_0)
    bool_0 = False
    var_1 = var_0.to_box()
    maybe_1 = module_0.Maybe(dict_0, bool_0)
    var_2 = maybe_1.to_lazy()
    bool_1 = False
    maybe_2 = module_0.Maybe(bool_1, bool_1)
    var_3 = var_2.to_try()
    bool_2 = maybe_2.__eq__(var_0)


def test_case_21():
    float_0 = -3465.067189106176
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.get_or_else(float_0)
    maybe_0.filter(var_0)


def test_case_22():
    str_0 = "d\x0b!}PV1sgotu%\x0c8;l"
    dict_0 = {str_0: str_0}
    maybe_0 = module_0.Maybe(str_0, dict_0)
    var_0 = maybe_0.filter(dict_0)
    var_1 = var_0.to_box()
    var_2 = var_0.bind(var_1)
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, var_1)
    var_3 = maybe_1.to_lazy()
    maybe_2 = module_0.Maybe(var_3, str_0)
    bool_0 = maybe_1.__eq__(maybe_1)
