# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    str_0 = "\n        Transform Lazy into Either (Right) with constructor_fn result.\n\n        :returns: Right monad with constructor_fn result\n        :rtype: Right[A]\n        "
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.map(str_0)
    var_1 = var_0.to_validation()
    var_2 = module_0.Maybe(none_type_0, bool_0)
    var_3 = var_1.to_try()
    var_4 = var_2.bind(str_0)
    var_5 = var_1.to_lazy()
    maybe_1 = module_0.Maybe(var_5, var_1)
    var_6 = var_0.to_either()
    var_7 = var_5.ap(var_1)
    var_8 = var_2.get_or_else(maybe_1)
    bool_1 = maybe_1.__eq__(var_8)
    var_9 = maybe_0.to_try()
    var_9.to_try()


def test_case_3():
    generic_0 = module_1.Generic()
    set_0 = {generic_0}
    maybe_0 = module_0.Maybe(generic_0, set_0)
    var_0 = maybe_0.filter(generic_0)
    dict_0 = {}
    maybe_1 = module_0.Maybe(dict_0, generic_0)
    bool_0 = maybe_1.__eq__(generic_0)
    maybe_2 = module_0.Maybe(generic_0, bool_0)
    maybe_2.filter(maybe_0)


def test_case_4():
    str_0 = "\n        Transform Lazy into Either (Right) with constructor_fn result.\n\n        :returns: Right monad with constructor_fn result\n        :rtype: Right[A]\n        "
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.map(str_0)
    var_1 = var_0.to_validation()
    var_2 = var_0.ap(bool_0)
    var_3 = var_1.to_try()
    var_3.to_lazy()


def test_case_5():
    str_0 = "wllQLKh"
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_lazy()
    maybe_0.map(str_0)


def test_case_6():
    int_0 = -743
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, int_0)
    var_0 = maybe_0.filter(int_0)
    var_1 = var_0.bind(var_0)
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1.filter(int_0)


def test_case_7():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    int_0 = 1208
    tuple_0 = (set_0, bool_0, int_0)
    maybe_0 = module_0.Maybe(tuple_0, set_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_lazy()
    str_0 = "Lazy[T, W]"
    none_type_0 = None
    bool_1 = False
    maybe_1 = module_0.Maybe(none_type_0, bool_1)
    maybe_1.bind(str_0)


def test_case_8():
    generic_0 = module_1.Generic()
    set_0 = {generic_0}
    maybe_0 = module_0.Maybe(generic_0, set_0)
    var_0 = maybe_0.filter(generic_0)
    var_1 = var_0.ap(generic_0)
    var_2 = var_1.to_either()
    dict_0 = {}
    maybe_1 = module_0.Maybe(dict_0, generic_0)
    bool_0 = maybe_1.__eq__(generic_0)
    maybe_2 = module_0.Maybe(generic_0, bool_0)
    maybe_2.filter(var_2)


def test_case_9():
    generic_0 = module_1.Generic()
    dict_0 = {}
    int_0 = 2481
    bool_0 = False
    maybe_0 = module_0.Maybe(int_0, bool_0)
    maybe_0.ap(dict_0)


def test_case_10():
    int_0 = -743
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, int_0)
    var_0 = maybe_0.filter(int_0)
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1.filter(int_0)


def test_case_11():
    none_type_0 = None
    bool_0 = True
    none_type_1 = None
    maybe_0 = module_0.Maybe(bool_0, none_type_1)
    var_0 = maybe_0.get_or_else(none_type_0)
    var_0.to_box()


def test_case_12():
    int_0 = -743
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, int_0)
    var_0 = maybe_0.filter(int_0)
    var_1 = var_0.to_either()
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1.filter(int_0)


def test_case_13():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    var_1 = maybe_0.to_box()
    var_2 = maybe_0.to_either()
    var_3 = var_2.to_try()
    maybe_1 = module_0.Maybe(var_2, none_type_0)
    var_4 = maybe_1.get_or_else(var_3)
    var_3.filter(var_3)


def test_case_14():
    int_0 = 1909
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.filter(int_0)
    var_1 = var_0.to_lazy()
    var_2 = maybe_0.to_box()
    bool_1 = var_2.__eq__(int_0)
    bool_0.to_validation()


def test_case_15():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_either()
    var_2 = var_1.to_box()
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)


def test_case_16():
    bool_0 = True
    bool_1 = False
    set_0 = set()
    maybe_0 = module_0.Maybe(bool_1, set_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.to_try()
    var_1.bind(bool_0)


def test_case_17():
    int_0 = 1909
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.filter(int_0)
    var_1 = maybe_0.to_try()
    var_2 = var_1.map(var_1)
    bool_1 = var_2.__eq__(int_0)
    bool_0.to_validation()


def test_case_18():
    bool_0 = False
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_1, bool_1)
    var_0 = maybe_0.get_or_else(bool_0)
    maybe_1 = module_0.Maybe(bool_0, bool_1)
    var_1 = maybe_1.to_validation()
    var_2 = var_1.to_lazy()
    var_3 = var_2.to_either()
    none_type_0 = None
    bool_2 = True
    maybe_2 = module_0.Maybe(none_type_0, bool_2)


def test_case_19():
    str_0 = "\n        Transform Lazy into Either (Right) with constructor_fn result.\n\n        :returns: Right monad with constructor_fn result\n        :rtype: Right[A]\n        "
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.map(str_0)
    var_1 = var_0.to_validation()
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    var_2 = var_1.to_try()
    var_3 = maybe_1.bind(str_0)
    var_4 = var_1.to_lazy()
    maybe_2 = module_0.Maybe(var_4, var_1)
    var_5 = maybe_1.filter(str_0)
    var_6 = var_3.to_lazy()
    var_7 = var_5.to_lazy()
    var_8 = var_6.to_either()
    var_9 = var_6.to_validation()
    var_10 = var_3.bind(var_7)
    maybe_3 = module_0.Maybe(var_9, var_1)
    var_7.to_lazy()


def test_case_20():
    str_0 = "H-*6N"
    list_0 = [str_0]
    bool_0 = False
    maybe_0 = module_0.Maybe(list_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    bool_2 = False
    maybe_1 = module_0.Maybe(bool_1, bool_2)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.to_lazy()
    var_2 = var_1.bind(var_1)
    var_2.to_validation()


def test_case_21():
    str_0 = "H-*6N"
    list_0 = [str_0]
    bool_0 = False
    maybe_0 = module_0.Maybe(list_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    maybe_1 = module_0.Maybe(bool_1, bool_1)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.to_lazy()
    var_2 = maybe_0.ap(var_1)
    none_type_0 = None
    bool_2 = var_0.__eq__(none_type_0)
    var_3 = var_0.to_box()
    maybe_2 = module_0.Maybe(list_0, var_1)
    var_4 = maybe_2.to_try()
    maybe_3 = module_0.Maybe(var_1, maybe_0)
    bool_3 = False
    maybe_4 = module_0.Maybe(var_0, bool_3)
    var_5 = maybe_4.to_box()
    float_0 = 1741.132117
    tuple_0 = (float_0, var_4)
    var_6 = maybe_2.filter(tuple_0)
    var_7 = var_5.to_lazy()
    maybe_0.filter(var_1)


def test_case_22():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.to_lazy()
    maybe_1 = module_0.Maybe(var_1, var_1)
    maybe_2 = module_0.Maybe(maybe_1, var_0)
    var_2 = maybe_2.to_lazy()
    bool_1 = maybe_0.__eq__(maybe_1)
    var_3 = maybe_0.to_validation()
    maybe_3 = module_0.Maybe(var_0, var_0)
    var_4 = maybe_1.to_box()
    var_5 = maybe_3.to_box()
    maybe_4 = module_0.Maybe(var_1, maybe_3)
    var_6 = maybe_4.to_box()
    maybe_5 = module_0.Maybe(var_0, var_5)
    var_7 = maybe_5.ap(var_4)
    var_8 = maybe_2.get_or_else(maybe_5)
    var_9 = var_4.to_try()
    var_10 = var_6.to_lazy()
    var_9.to_validation()
