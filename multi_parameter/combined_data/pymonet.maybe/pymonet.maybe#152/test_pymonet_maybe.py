# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    str_0 = "G-U"
    maybe_0 = module_0.Maybe(str_0, str_0)


def test_case_1():
    str_0 = ""
    maybe_0 = module_0.Maybe(str_0, str_0)


def test_case_2():
    str_0 = "qn!~=So:32_<GRY5'{7Q"
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    maybe_1 = module_0.Maybe(none_type_0, str_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    bool_2 = maybe_1.__eq__(none_type_0)
    var_0 = maybe_1.to_try()
    var_1 = maybe_1.map(var_0)
    var_0.to_lazy()


def test_case_3():
    str_0 = "q!~=So:32_<GRY5'{7Q"
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1 = module_0.Maybe(none_type_0, str_0)
    var_0 = maybe_0.ap(maybe_1)
    var_1 = var_0.filter(str_0)
    maybe_0.filter(var_0)


def test_case_4():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_validation()
    var_2 = var_0.to_validation()
    maybe_0.map(bool_0)


def test_case_5():
    str_0 = "q!~=So:32_<GRY5'{7Q"
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    maybe_1 = module_0.Maybe(none_type_0, str_0)
    var_0 = maybe_0.ap(maybe_1)
    var_1 = var_0.filter(str_0)
    var_2 = var_1.bind(var_0)
    maybe_2 = var_0.to_lazy()
    maybe_0.filter(var_0)


def test_case_6():
    none_type_0 = None
    str_0 = ""
    maybe_0 = module_0.Maybe(str_0, str_0)
    maybe_0.bind(none_type_0)


def test_case_7():
    str_0 = "qn!~=So:32_<GRY5'{7Q"
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    maybe_1 = module_0.Maybe(maybe_0, none_type_0)
    var_0 = maybe_0.ap(none_type_0)
    var_1 = maybe_0.bind(none_type_0)
    var_2 = var_1.filter(str_0)
    maybe_2 = module_0.Maybe(maybe_1, var_1)
    maybe_1.filter(maybe_1)


def test_case_8():
    str_0 = "q!~=So:32_<GRY5'{7Q"
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1 = module_0.Maybe(none_type_0, str_0)
    var_0 = maybe_1.filter(str_0)
    maybe_0.filter(maybe_1)


def test_case_9():
    str_0 = "!dX1'?m_]Qz\r((\th@"
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.filter(str_0)


def test_case_10():
    str_0 = "q!~=So:32_<GRY5'{7Q"
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1 = module_0.Maybe(none_type_0, str_0)
    var_0 = maybe_1.filter(str_0)
    var_1 = maybe_1.get_or_else(none_type_0)
    maybe_0.filter(maybe_1)


def test_case_11():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    var_0.filter(var_0)


def test_case_12():
    str_0 = "q!~=So:32_<GRY5'{7Q"
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    maybe_1 = module_0.Maybe(none_type_0, str_0)
    var_0 = maybe_1.filter(str_0)
    var_1 = maybe_1.to_either()
    maybe_0.filter(maybe_0)


def test_case_13():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_either()
    maybe_0.filter(maybe_0)


def test_case_14():
    none_type_0 = None
    int_0 = 339
    bool_0 = False
    maybe_0 = module_0.Maybe(int_0, bool_0)
    str_0 = "\n        Take function and call constructor function passing returned value to fn function.\n\n        It's only way to call function store in Lazy\n        :param fn: Function(constructor_fn) -> B\n        :returns: result od folder function\n        :rtype: B\n        "
    tuple_0 = (int_0, maybe_0, str_0)
    maybe_1 = module_0.Maybe(tuple_0, tuple_0)
    var_0 = maybe_1.to_box()
    bool_1 = var_0.__eq__(none_type_0)


def test_case_15():
    str_0 = "q!~=So:32_<GRY5'{7Q"
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    maybe_1 = module_0.Maybe(none_type_0, str_0)
    var_0 = maybe_0.ap(maybe_1)
    var_1 = var_0.filter(str_0)
    var_2 = maybe_0.to_box()
    var_3 = var_0.to_lazy()
    maybe_0.filter(var_0)


def test_case_16():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    maybe_1 = module_0.Maybe(none_type_0, maybe_0)
    var_0 = maybe_0.ap(maybe_1)
    var_1 = var_0.filter(var_0)
    var_2 = var_0.to_lazy()
    maybe_0.filter(var_0)


def test_case_17():
    str_0 = "qn!~=So:32_<GRY5'{7Q"
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    maybe_1 = module_0.Maybe(maybe_0, none_type_0)
    bool_1 = maybe_1.__eq__(maybe_0)
    var_0 = maybe_0.ap(none_type_0)
    var_1 = maybe_0.bind(none_type_0)
    var_2 = var_1.filter(str_0)
    var_3 = var_1.bind(none_type_0)
    var_4 = maybe_1.to_lazy()
    maybe_2 = module_0.Maybe(maybe_1, var_1)
    maybe_1.filter(var_4)


def test_case_18():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.filter(none_type_0)
    var_1 = var_0.to_try()
    var_2 = var_1.bind(none_type_0)
    maybe_1 = module_0.Maybe(var_1, bool_0)
    var_3 = maybe_1.to_box()
    var_4 = var_3.to_try()
    var_4.to_validation()


def test_case_19():
    str_0 = "qn!~=So:32_<GRY5'{7Q"
    none_type_0 = None
    dict_0 = {none_type_0: none_type_0, none_type_0: none_type_0}
    tuple_0 = (none_type_0, str_0, dict_0)
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    maybe_1 = module_0.Maybe(none_type_0, str_0)
    var_0 = maybe_1.ap(tuple_0)
    var_1 = var_0.filter(str_0)
    var_2 = var_1.bind(str_0)
    var_3 = maybe_1.filter(var_0)
    bool_1 = False
    maybe_2 = module_0.Maybe(bool_1, var_0)
    var_4 = var_0.filter(maybe_0)
    bool_2 = maybe_2.__eq__(var_1)
    var_5 = var_3.to_lazy()
    var_6 = maybe_0.to_try()
    var_7 = maybe_0.to_either()


def test_case_20():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = var_0.to_try()
    var_1.to_either()


def test_case_21():
    none_type_0 = None
    bytes_0 = b""
    maybe_0 = module_0.Maybe(none_type_0, bytes_0)
    var_0 = maybe_0.to_validation()
    var_0.get_or_else(none_type_0)


def test_case_22():
    str_0 = "qn!~=So:32_<GRY5'{7Q"
    none_type_0 = None
    dict_0 = {none_type_0: none_type_0, none_type_0: none_type_0}
    tuple_0 = (none_type_0, str_0, dict_0)
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, str_0)
    var_0 = maybe_0.ap(tuple_0)
    var_1 = var_0.filter(str_0)
    var_2 = var_1.bind(str_0)
    var_3 = maybe_0.get_or_else(var_0)
    maybe_1 = module_0.Maybe(bool_0, var_3)
    complex_0 = -1853.57614 - 2719.3j
    maybe_2 = module_0.Maybe(complex_0, var_3)
    var_4 = var_1.to_try()
    var_5 = var_1.map(var_3)
    bool_1 = var_0.__eq__(var_5)
    var_6 = var_1.map(var_0)
    var_7 = var_1.to_lazy()
    var_8 = var_7.to_try()
    bool_2 = maybe_1.__eq__(var_5)
    var_9 = var_3.to_either()
    var_10 = maybe_2.to_box()


def test_case_23():
    none_type_0 = None
    none_type_1 = None
    complex_0 = -1695.37474 + 156j
    bool_0 = True
    maybe_0 = module_0.Maybe(complex_0, bool_0)
    var_0 = maybe_0.bind(none_type_1)
    var_1 = var_0.map(none_type_0)
    var_2 = var_1.to_lazy()
    bytes_0 = b">,\xf7\x8cuL"
    bool_1 = False
    maybe_1 = module_0.Maybe(bytes_0, bool_1)
    var_3 = maybe_1.to_lazy()
    var_4 = var_3.to_try()
    var_4.to_try()


def test_case_24():
    str_0 = "qn!~=So:32_<GRY5'{7Q"
    none_type_0 = None
    dict_0 = {none_type_0: none_type_0, none_type_0: none_type_0}
    tuple_0 = (none_type_0, str_0, dict_0)
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    maybe_1 = module_0.Maybe(none_type_0, str_0)
    var_0 = maybe_1.ap(tuple_0)
    var_1 = var_0.filter(str_0)
    bool_1 = False
    maybe_2 = module_0.Maybe(none_type_0, bool_1)
    var_2 = var_0.filter(maybe_2)
    bool_2 = var_2.__eq__(var_2)
    var_3 = maybe_2.to_either()


def test_case_25():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_1 = maybe_0.to_either()
    maybe_0.map(bool_0)
