# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    bool_0 = False
    bool_1 = True
    int_0 = -2228
    maybe_0 = module_0.Maybe(bool_1, int_0)
    maybe_1 = module_0.Maybe(maybe_0, bool_0)
    var_0 = maybe_0.to_validation()
    bool_2 = maybe_0.__eq__(maybe_0)
    var_1 = maybe_1.to_lazy()
    maybe_2 = module_0.Maybe(maybe_1, var_1)


def test_case_3():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_box()
    bool_1 = False
    maybe_1 = module_0.Maybe(bool_1, bool_1)
    bool_2 = maybe_1.__eq__(bool_0)


def test_case_4():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_box()
    maybe_1 = maybe_0.map(var_0)
    var_1 = maybe_0.get_or_else(maybe_0)
    bool_1 = var_0.__eq__(var_1)
    var_2 = maybe_0.filter(var_0)
    var_0.filter(var_1)


def test_case_5():
    bytes_0 = b"TR>\xf3L\x17\xabDy<\x94\x15"
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    float_0 = -3835.86511
    bytes_1 = b"\xcf\xd7z\xfa"
    bool_1 = False
    maybe_1 = module_0.Maybe(bytes_1, bool_1)
    maybe_1.map(float_0)


def test_case_6():
    bytes_0 = b""
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.to_lazy()
    maybe_1 = module_0.Maybe(maybe_0, bytes_0)
    var_1 = maybe_0.bind(var_0)
    var_2 = var_0.to_either()
    var_3 = maybe_0.to_validation()
    maybe_1.map(var_0)


def test_case_7():
    none_type_0 = None
    none_type_1 = None
    str_0 = "A2>MXX!\\-\t9J!>?V5F/"
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_1, bool_0)
    bool_1 = maybe_0.__eq__(str_0)
    maybe_0.bind(none_type_0)


def test_case_8():
    bool_0 = True
    tuple_0 = (bool_0, bool_0, bool_0)
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.map(tuple_0)
    var_1 = var_0.to_lazy()
    dict_0 = {}
    var_2 = var_0.filter(var_1)
    bool_1 = False
    maybe_1 = module_0.Maybe(dict_0, bool_1)
    bool_2 = False
    maybe_2 = module_0.Maybe(dict_0, bool_2)
    var_3 = maybe_0.ap(dict_0)
    var_4 = maybe_2.get_or_else(var_0)
    bool_3 = var_0.__eq__(maybe_2)
    var_5 = maybe_2.to_box()
    var_6 = var_5.to_lazy()
    var_7 = maybe_0.to_box()
    maybe_1.filter(var_7)


def test_case_9():
    none_type_0 = None
    str_0 = "'q6VR\n"
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    maybe_0.ap(none_type_0)


def test_case_10():
    none_type_0 = None
    none_type_1 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_1, bool_0)
    var_0 = maybe_0.filter(none_type_0)
    int_0 = -1701
    none_type_2 = None
    maybe_1 = module_0.Maybe(int_0, none_type_2)


def test_case_11():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.filter(bool_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(bool_1, bool_1)
    var_1 = maybe_0.get_or_else(var_0)
    var_2 = var_0.to_box()
    maybe_1.filter(var_2)


def test_case_12():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.filter(bool_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(bool_1, bool_1)
    maybe_2 = module_0.Maybe(bool_1, bool_1)
    var_1 = maybe_2.get_or_else(var_0)
    var_2 = maybe_2.to_box()
    int_0 = -1712
    maybe_1.filter(int_0)


def test_case_13():
    str_0 = "M\t3QHoE1@M4M"
    dict_0 = {str_0: str_0, str_0: str_0}
    bool_0 = True
    maybe_0 = module_0.Maybe(dict_0, bool_0)
    var_0 = maybe_0.to_either()


def test_case_14():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_either()
    bytes_0 = b"i\x1b\xf9AL\xda\x9e\x12"
    dict_0 = {bytes_0: bytes_0}
    list_0 = [dict_0, bytes_0]
    bytes_1 = b"3G\x1bQ"
    bool_1 = True
    maybe_1 = module_0.Maybe(bytes_1, bool_1)
    var_1 = maybe_1.to_box()
    var_1.get_or_else(list_0)


def test_case_15():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_box()
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    var_1 = maybe_1.to_lazy()


def test_case_16():
    complex_0 = 753.7 - 877.89j
    set_0 = set()
    tuple_0 = (set_0,)
    maybe_0 = module_0.Maybe(tuple_0, set_0)
    var_0 = maybe_0.to_box()
    var_0.ap(complex_0)


def test_case_17():
    dict_0 = {}
    maybe_0 = module_0.Maybe(dict_0, dict_0)
    var_0 = maybe_0.to_lazy()
    var_0.get_or_else(dict_0)


def test_case_18():
    bool_0 = True
    tuple_0 = (bool_0, bool_0, bool_0)
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.filter(var_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(var_0, bool_1)
    bool_2 = False
    maybe_2 = module_0.Maybe(var_0, bool_2)
    bool_3 = maybe_2.__eq__(maybe_2)
    var_2 = maybe_2.to_box()
    var_3 = var_2.to_lazy()
    maybe_1.filter(tuple_0)


def test_case_19():
    bool_0 = False
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_try()
    var_0.to_lazy()


def test_case_20():
    bool_0 = False
    bool_1 = True
    bool_2 = False
    maybe_0 = module_0.Maybe(bool_0, bool_2)
    int_0 = -2426
    maybe_1 = module_0.Maybe(int_0, bool_1)
    var_0 = maybe_0.to_validation()
    bool_3 = maybe_1.__eq__(bool_2)
    var_1 = var_0.to_lazy()
    maybe_2 = module_0.Maybe(bool_2, var_1)
    bool_4 = True
    maybe_3 = module_0.Maybe(bool_1, bool_4)
    var_2 = maybe_3.to_box()
    var_3 = maybe_1.to_box()
    var_4 = var_3.to_lazy()
    var_5 = maybe_1.to_validation()


def test_case_21():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.filter(var_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(var_0, bool_1)
    bool_2 = False
    maybe_2 = module_0.Maybe(var_0, bool_2)
    bool_3 = maybe_2.__eq__(maybe_2)
    var_2 = var_1.to_lazy()
    var_3 = maybe_0.to_box()
    maybe_1.filter(var_3)


def test_case_22():
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_box()
    var_2 = maybe_0.to_box()
    var_3 = var_0.to_either()
    var_2.filter(bool_0)
