# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_try()
    maybe_1 = module_0.Maybe(var_0, var_0)
    var_1 = maybe_1.bind(maybe_0)
    var_2 = maybe_0.to_lazy()
    var_0.to_box()


def test_case_3():
    bool_0 = False
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_1, bool_0)
    bool_2 = maybe_0.__eq__(bool_1)
    maybe_1 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_1.to_validation()


def test_case_4():
    int_0 = 1971
    none_type_0 = None
    bool_0 = True
    list_0 = [int_0, int_0]
    maybe_0 = module_0.Maybe(list_0, int_0)
    var_0 = maybe_0.filter(bool_0)
    var_1 = var_0.map(none_type_0)
    var_2 = var_0.to_box()
    var_2.get_or_else(int_0)


def test_case_5():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    maybe_0.map(none_type_0)


def test_case_6():
    str_0 = "\n        Transform Maybe into Validation.\n\n        :returns: successfull Validation monad with previous value or None when Maybe is empty\n        :rtype: Validation[A, []]\n        "
    list_0 = []
    str_1 = 'G8\tv(s\r"Pjb<eem'
    maybe_0 = module_0.Maybe(list_0, str_1)
    var_0 = maybe_0.bind(str_0)


def test_case_7():
    str_0 = "]l<E"
    int_0 = -2343
    bool_0 = False
    maybe_0 = module_0.Maybe(int_0, bool_0)
    maybe_0.bind(str_0)


def test_case_8():
    float_0 = 2104.4
    str_0 = ";t6"
    list_0 = [str_0]
    bool_0 = False
    float_1 = -3040.72327
    bool_1 = True
    maybe_0 = module_0.Maybe(float_1, bool_1)
    var_0 = maybe_0.ap(bool_0)
    var_1 = var_0.to_try()
    bool_2 = False
    maybe_1 = module_0.Maybe(var_1, bool_2)
    var_2 = maybe_1.get_or_else(list_0)
    var_3 = var_2.bind(float_0)


def test_case_9():
    int_0 = -1761
    bool_0 = False
    maybe_0 = module_0.Maybe(int_0, bool_0)
    none_type_0 = None
    maybe_0.ap(none_type_0)


def test_case_10():
    bytes_0 = b"\xaf\x0f2\x83r\x1d\x84|\x93\xa4\xfd\xc4h\x9ef\x8eL"
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.filter(var_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(bytes_0, bool_1)
    var_2 = maybe_0.bind(maybe_0)
    bool_2 = maybe_1.__eq__(bytes_0)
    maybe_1.filter(maybe_0)


def test_case_11():
    none_type_0 = None
    set_0 = set()
    maybe_0 = module_0.Maybe(set_0, set_0)
    maybe_0.filter(none_type_0)


def test_case_12():
    str_0 = "\n    Data type for storage any type of data\n    "
    none_type_0 = None
    none_type_1 = None
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.bind(none_type_1)
    var_1 = var_0.get_or_else(none_type_0)
    bool_0 = var_1.__eq__(str_0)
    set_0 = {str_0, str_0, str_0, str_0}
    maybe_1 = module_0.Maybe(set_0, str_0)
    var_2 = maybe_1.to_validation()


def test_case_13():
    set_0 = set()
    maybe_0 = module_0.Maybe(set_0, set_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_lazy()
    var_2 = maybe_0.to_validation()
    var_3 = var_2.to_either()
    set_0.filter(var_1)


def test_case_14():
    tuple_0 = ()
    bool_0 = True
    maybe_0 = module_0.Maybe(tuple_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_either()
    maybe_1 = module_0.Maybe(var_1, var_1)


def test_case_15():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_try()
    maybe_1 = module_0.Maybe(var_0, var_0)
    var_1 = maybe_0.to_box()
    var_2 = maybe_1.bind(var_1)
    bool_1 = maybe_0.__eq__(var_0)
    var_3 = maybe_0.to_lazy()
    var_0.to_box()


def test_case_16():
    bytes_0 = b"\xa4V=\xd6E\xeb\xeb\xe9\xf6\x05^\x9ej\xe8"
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    bool_1 = False
    var_0 = maybe_0.to_lazy()
    maybe_1 = module_0.Maybe(bytes_0, bool_1)
    var_1 = maybe_0.to_box()
    var_2 = maybe_0.bind(var_1)
    bool_2 = maybe_1.__eq__(bytes_0)
    maybe_1.filter(maybe_0)


def test_case_17():
    bool_0 = False
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_try()


def test_case_18():
    none_type_0 = None
    bool_0 = none_type_0.__eq__(none_type_0)


def test_case_19():
    int_0 = 1
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.filter(none_type_0)
    var_2 = var_1.to_lazy()
    var_3 = var_1.ap(int_0)
    bool_1 = True
    var_4 = maybe_0.to_either()
    var_5 = maybe_0.filter(var_4)
    var_6 = var_1.to_try()
    maybe_1 = module_0.Maybe(none_type_0, bool_1)
    var_7 = maybe_1.ap(maybe_1)
    var_8 = var_7.to_try()
    var_9 = maybe_1.to_lazy()
    var_10 = maybe_1.filter(maybe_1)
    var_11 = var_1.to_lazy()
    var_12 = var_9.map(var_9)
    var_13 = var_9.to_box()
    var_9.to_lazy()


def test_case_20():
    generic_0 = module_1.Generic()
    bool_0 = False
    maybe_0 = module_0.Maybe(generic_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_validation()
    none_type_0 = None
    list_0 = [bool_0, none_type_0, none_type_0]
    maybe_1 = module_0.Maybe(none_type_0, list_0)
    var_2 = maybe_1.to_either()
    var_3 = var_2.to_lazy()
    bool_1 = maybe_1.__eq__(none_type_0)
    var_4 = var_1.to_box()
    maybe_0.bind(var_1)


def test_case_21():
    str_0 = "\n    One is a Monoid that will combine 2 values of any type using logical disjunction OR on their coerced Boolean values.\n    "
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_lazy()
    var_2 = var_1.ap(none_type_0)
    maybe_1 = module_0.Maybe(str_0, bool_0)
    bool_1 = maybe_1.__eq__(maybe_1)
    var_3 = maybe_1.to_box()
    var_4 = maybe_1.ap(maybe_1)
    bool_1.bind(bool_1)


def test_case_22():
    bytes_0 = b"\xa4V=E\xeb\xeb\xe9\xf6\x05^\x9ej\xe8"
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(bytes_0, none_type_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.bind(var_0)
    bool_1 = maybe_1.__eq__(bytes_0)
    bool_2 = maybe_1.__eq__(maybe_0)
    var_0.to_box()
