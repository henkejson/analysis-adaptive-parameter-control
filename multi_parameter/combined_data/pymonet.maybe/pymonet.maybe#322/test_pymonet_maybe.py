# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_1 = module_0.Maybe(maybe_0, bool_0)
    list_0 = []
    maybe_2 = module_0.Maybe(list_0, list_0)
    bool_1 = maybe_2.__eq__(maybe_1)
    none_type_0 = None
    none_type_1 = None
    maybe_3 = module_0.Maybe(none_type_1, none_type_1)
    maybe_3.map(none_type_0)


def test_case_3():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_1 = maybe_0.to_lazy()
    list_0 = []
    maybe_2 = module_0.Maybe(list_0, list_0)
    bool_1 = maybe_2.__eq__(maybe_1)
    none_type_0 = None
    none_type_1 = None
    maybe_3 = module_0.Maybe(none_type_1, none_type_1)
    maybe_3.map(none_type_0)


def test_case_4():
    float_0 = -2497.0
    maybe_0 = module_0.Maybe(float_0, float_0)
    var_0 = maybe_0.map(maybe_0)
    none_type_0 = None
    var_1 = var_0.ap(none_type_0)
    var_2 = var_0.filter(var_1)
    var_3 = var_0.to_validation()
    var_4 = var_0.to_lazy()
    var_5 = var_1.ap(var_0)
    var_6 = var_2.filter(var_5)
    bool_0 = var_4.to_either()
    var_7 = var_0.to_try()


def test_case_5():
    int_0 = 0
    tuple_0 = (int_0,)
    set_0 = set()
    bool_0 = True
    bytes_0 = b"uo9\x90\xda\x8f\x10"
    tuple_1 = (bool_0, bool_0, bytes_0)
    tuple_2 = (tuple_0, tuple_0, set_0, tuple_1)
    bool_1 = True
    maybe_0 = module_0.Maybe(tuple_2, bool_1)
    bool_2 = False
    maybe_1 = module_0.Maybe(bool_2, bool_2)
    maybe_1.map(maybe_0)


def test_case_6():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.to_lazy()
    none_type_1 = None
    maybe_1 = module_0.Maybe(none_type_1, none_type_1)
    var_2 = maybe_1.get_or_else(maybe_1)
    var_3 = maybe_1.to_validation()
    maybe_1.bind(var_2)


def test_case_7():
    str_0 = "\n    Return the first element of the list which matches the keys, or None if no element matches.\n\n    :param collection: collection to search\n    :type collection: List[A]\n    :param key: function to decide witch element should be found\n    :type key: Function(A) -> Boolean\n    :returns: element of collection or None\n    :rtype: A | None\n    "
    bool_0 = False
    bool_1 = False
    maybe_0 = module_0.Maybe(str_0, bool_1)
    maybe_0.ap(bool_0)


def test_case_8():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.filter(maybe_0)
    var_1 = maybe_0.to_lazy()


def test_case_9():
    bool_0 = False
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    bool_2 = True
    maybe_1 = module_0.Maybe(maybe_0, bool_2)
    list_0 = []
    maybe_2 = module_0.Maybe(list_0, list_0)
    var_0 = maybe_2.to_validation()
    bool_3 = maybe_2.__eq__(maybe_1)
    maybe_2.filter(maybe_2)


def test_case_10():
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.get_or_else(none_type_0)
    var_0.to_try()


def test_case_11():
    bool_0 = True
    bool_1 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_1, none_type_0)
    var_0 = maybe_0.to_lazy()
    bytes_0 = b"\xb5o\xb50 (o\xf5\xfc"
    bool_2 = True
    maybe_1 = module_0.Maybe(bytes_0, bool_2)
    var_1 = maybe_1.map(var_0)
    var_2 = var_1.to_either()
    var_3 = var_2.ap(bool_0)
    none_type_1 = None
    maybe_2 = module_0.Maybe(none_type_1, none_type_1)
    maybe_2.map(var_3)


def test_case_12():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_1 = module_0.Maybe(maybe_0, bool_0)
    list_0 = []
    maybe_2 = module_0.Maybe(list_0, list_0)
    bool_1 = maybe_2.__eq__(maybe_1)
    var_0 = maybe_0.to_either()
    maybe_1.bind(var_0)


def test_case_13():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    int_0 = 1
    bool_1 = False
    maybe_0 = module_0.Maybe(int_0, bool_1)
    maybe_1 = module_0.Maybe(maybe_0, int_0)
    var_0 = maybe_1.to_box()
    var_0.get_or_else(dict_0)


def test_case_14():
    int_0 = 438
    bool_0 = False
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.to_box()
    maybe_0.bind(var_0)


def test_case_15():
    bytes_0 = b"RJ\xbb\xc6f\xe1\xe3u"
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_try()
    var_0.bind(bytes_0)


def test_case_16():
    int_0 = -80
    int_1 = 578
    set_0 = {int_1, int_1}
    maybe_0 = module_0.Maybe(set_0, set_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.ap(int_0)
    var_2 = maybe_0.to_validation()
    var_2.ap(int_0)


def test_case_17():
    bytes_0 = b"<\xbfI2\xaeoZJ\xc2B"
    none_type_0 = None
    maybe_0 = module_0.Maybe(bytes_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_try()
    var_1.to_try()


def test_case_18():
    bool_0 = False
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    bool_2 = True
    maybe_1 = module_0.Maybe(maybe_0, bool_2)
    list_0 = []
    maybe_2 = module_0.Maybe(list_0, list_0)
    bool_3 = maybe_2.__eq__(maybe_1)
    var_0 = maybe_1.get_or_else(bool_1)
    var_1 = maybe_2.to_validation()
    var_2 = maybe_0.ap(bool_2)
    var_3 = maybe_0.filter(var_2)
    var_4 = var_3.bind(var_1)
    maybe_3 = module_0.Maybe(var_0, var_2)
    var_5 = var_2.to_either()


def test_case_19():
    bool_0 = False
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    bool_2 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.get_or_else(bool_1)
    var_0.to_validation()


def test_case_20():
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_0, none_type_0)
    tuple_0 = (bool_0, maybe_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    maybe_1 = module_0.Maybe(tuple_0, var_0)
    none_type_1 = None
    maybe_2 = module_0.Maybe(none_type_1, none_type_1)
    bool_1 = maybe_2.__eq__(maybe_2)
    maybe_2.map(none_type_1)
