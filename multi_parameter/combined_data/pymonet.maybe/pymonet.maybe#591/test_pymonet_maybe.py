# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_box()
    bool_1 = maybe_0.__eq__(maybe_0)
    var_1 = maybe_0.filter(maybe_0)
    var_2 = maybe_0.ap(bool_1)
    bool_2 = False
    maybe_1 = module_0.Maybe(var_0, bool_2)
    var_3 = var_1.to_validation()
    var_4 = maybe_0.ap(bool_0)
    maybe_2 = module_0.Maybe(var_2, var_2)
    var_5 = var_4.to_try()
    maybe_1.filter(bool_1)


def test_case_3():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    str_0 = "kFX5"
    bool_1 = True
    maybe_0 = module_0.Maybe(str_0, bool_1)
    none_type_0 = None
    var_0 = maybe_0.bind(none_type_0)
    bool_2 = maybe_0.__eq__(none_type_0)
    var_1 = var_0.map(dict_0)
    var_2 = var_0.to_try()
    var_3 = var_1.map(var_2)
    var_4 = maybe_0.bind(dict_0)
    var_5 = var_4.to_either()
    var_6 = maybe_0.filter(var_5)
    var_7 = var_4.to_validation()


def test_case_4():
    str_0 = "\n        Take function (A) -> b and applied this function on current box value and returns new box with mapped value.\n\n        :param mapper: mapper function\n        :type mapper: Function(A) -> B\n        :returns: new box with mapped value\n        :rtype: Box[B]\n        "
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.get_or_else(none_type_0)
    var_1 = maybe_0.map(none_type_0)
    var_2 = var_1.to_box()
    var_3 = var_2.to_validation()
    maybe_1 = module_0.Maybe(str_0, bool_0)
    var_2.map(var_3)


def test_case_5():
    bytes_0 = b".\x8b\xba\xa2\xe6\x85\xdfU\xf2\xbc\x83c\xc3?\xbc\xd9"
    tuple_0 = (bytes_0,)
    maybe_0 = module_0.Maybe(tuple_0, tuple_0)
    var_0 = maybe_0.to_box()
    bool_0 = False
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    maybe_1.map(var_0)


def test_case_6():
    bytes_0 = b"\xa9b\x920\x85-\xd1\xf4\xdc\xd5\xf41r\x95\xd8"
    int_0 = -1205
    bool_0 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    maybe_0.bind(int_0)


def test_case_7():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.filter(maybe_0)
    var_2 = maybe_0.ap(var_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(var_0, bool_1)
    var_3 = var_1.to_validation()
    var_4 = maybe_0.ap(bool_0)
    maybe_1.filter(var_2)


def test_case_8():
    int_0 = 0
    set_0 = {int_0}
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.ap(set_0)


def test_case_9():
    bytes_0 = b"\xa5\xdfU}B,\x9cy`\x89\xd3C\xcc\xeb\xb6\xdc"
    bool_0 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.get_or_else(bytes_0)
    var_0.to_try()


def test_case_10():
    complex_0 = -1525.38948 + 5352.70974j
    maybe_0 = module_0.Maybe(complex_0, complex_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.to_either()
    var_0.bind(var_1)


def test_case_11():
    str_0 = "\n    Perform left-to-right function composition.\n\n    :param value: argument of first applied function\n    :type value: Any\n    :param functions: list of functions to applied from left-to-right\n    :type functions: List[Function]\n    :returns: result of all functions\n    :rtype: Any\n    "
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_box()
    var_1.to_box()


def test_case_12():
    dict_0 = {}
    str_0 = "\n    Return increased by 1 argument.\n\n    :param value:\n    :type value: Int\n    :returns:\n    :rtype: Int\n    "
    none_type_0 = None
    maybe_0 = module_0.Maybe(str_0, none_type_0)
    var_0 = maybe_0.to_box()
    var_0.map(dict_0)


def test_case_13():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    str_0 = "kFX5"
    bool_1 = True
    maybe_0 = module_0.Maybe(str_0, bool_1)
    none_type_0 = None
    var_0 = maybe_0.bind(none_type_0)
    bool_2 = maybe_0.__eq__(none_type_0)
    var_1 = var_0.map(dict_0)
    var_2 = var_0.to_try()
    var_3 = var_1.map(var_2)
    var_4 = maybe_0.bind(dict_0)
    var_5 = maybe_0.filter(bool_2)
    var_6 = var_1.to_lazy()
    var_7 = var_4.map(var_6)
    var_8 = var_4.to_validation()


def test_case_14():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.to_lazy()
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    var_2 = maybe_1.to_try()
    var_2.ap(none_type_0)


def test_case_15():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.filter(maybe_0)
    var_2 = maybe_0.ap(var_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(var_1, bool_1)
    var_3 = var_1.to_validation()
    var_4 = maybe_0.ap(bool_0)
    var_5 = var_4.to_try()
    maybe_1.filter(var_0)


def test_case_16():
    bytes_0 = b"\x02\x84sr\xee\x8a\x01\x8d\x10!R%r"
    bool_0 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.to_box()
    bool_1 = True
    bytes_1 = b"\xca\x11x;\x0e\x8f\x9e\xd6)\x96"
    bool_2 = False
    maybe_1 = module_0.Maybe(bytes_1, bool_2)
    bool_3 = False
    maybe_2 = module_0.Maybe(bool_1, bool_3)
    var_1 = maybe_2.to_either()
    bool_4 = maybe_2.__eq__(bytes_0)
    var_2 = maybe_2.to_box()
    maybe_3 = module_0.Maybe(bool_1, bool_3)
    bool_5 = maybe_3.__eq__(bytes_0)
    var_3 = maybe_3.to_try()


def test_case_17():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_validation()
    var_0.map(none_type_0)


def test_case_18():
    dict_0 = {}
    generic_0 = module_1.Generic(**dict_0)
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, generic_0)
    var_0 = maybe_0.ap(generic_0)
    var_1 = maybe_0.to_try()
    var_2 = maybe_0.to_either()
    var_3 = var_0.to_lazy()
    var_4 = var_3.to_either()
    var_5 = var_4.to_validation()
    var_6 = var_4.to_box()
    var_7 = var_6.to_lazy()
    var_8 = var_7.to_try()
    int_0 = 0
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    var_9 = maybe_1.to_either()
    var_10 = var_9.to_box()
    var_10.filter(int_0)


def test_case_19():
    bytes_0 = b"'J\x14\xfe\x96#\x95;\xaf\xac\xbc\xa5\xd8*l\xdf\xaba\xed"
    none_type_0 = None
    maybe_0 = module_0.Maybe(bytes_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_try()
    var_1.filter(maybe_0)


def test_case_20():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_either()
    none_type_1 = None
    bool_0 = maybe_0.__eq__(maybe_0)
    maybe_1 = module_0.Maybe(none_type_1, none_type_1)
    maybe_2 = module_0.Maybe(none_type_1, none_type_1)
    bool_1 = maybe_2.__eq__(none_type_1)
    maybe_3 = module_0.Maybe(bool_1, bool_1)
    maybe_3.ap(bool_1)


def test_case_21():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.map(maybe_0)
    var_1 = var_0.to_box()
    var_2 = var_0.ap(var_0)
    var_3 = maybe_0.map(var_2)
    bool_1 = maybe_0.__eq__(maybe_0)
    var_4 = var_2.to_box()
    maybe_1 = module_0.Maybe(var_3, var_4)
    bool_2 = True
    maybe_2 = module_0.Maybe(var_4, bool_2)
    var_5 = maybe_0.to_either()
    bool_3 = var_2.__eq__(var_5)
    var_6 = maybe_2.to_either()
    var_7 = var_6.to_box()
    bool_4 = True
    maybe_3 = module_0.Maybe(var_5, bool_4)
    bool_5 = var_3.__eq__(maybe_1)
    var_8 = maybe_2.to_try()
