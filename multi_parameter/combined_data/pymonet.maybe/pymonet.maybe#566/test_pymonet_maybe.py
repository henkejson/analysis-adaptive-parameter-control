# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import builtins as module_0
import pymonet.maybe as module_1


def test_case_0():
    object_0 = module_0.object()
    maybe_0 = module_1.Maybe(object_0, object_0)


def test_case_1():
    tuple_0 = ()
    maybe_0 = module_1.Maybe(tuple_0, tuple_0)


def test_case_2():
    complex_0 = 3121.907 - 2785.2j
    bool_0 = False
    maybe_0 = module_1.Maybe(complex_0, bool_0)
    none_type_0 = None
    var_0 = maybe_0.to_validation()
    bool_1 = maybe_0.__eq__(none_type_0)
    var_1 = maybe_0.to_lazy()
    var_2 = maybe_0.to_lazy()
    maybe_0.bind(var_2)


def test_case_3():
    bool_0 = False
    maybe_0 = module_1.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_box()
    bool_1 = True
    maybe_1 = module_1.Maybe(bool_0, bool_1)
    var_1 = maybe_1.ap(bool_0)
    var_2 = var_1.map(var_0)
    var_3 = var_2.to_validation()
    maybe_2 = module_1.Maybe(bool_0, bool_0)
    var_4 = maybe_2.to_lazy()


def test_case_4():
    bool_0 = False
    maybe_0 = module_1.Maybe(bool_0, bool_0)
    maybe_1 = module_1.Maybe(bool_0, bool_0)
    var_0 = maybe_1.to_lazy()
    var_1 = var_0.to_either()
    maybe_2 = module_1.Maybe(bool_0, bool_0)
    var_2 = maybe_2.to_validation()
    maybe_2.map(var_2)


def test_case_5():
    bool_0 = True
    bytes_0 = b"\x1b\x98\x95\x08\xae\xc4\xb6\xe26>\xed\x07\xac\xaa\x17\xf9\xfc"
    bool_1 = True
    maybe_0 = module_1.Maybe(bool_0, bytes_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_try()
    maybe_1 = module_1.Maybe(bytes_0, bool_1)
    bool_2 = maybe_1.__eq__(maybe_1)
    var_2 = maybe_1.to_either()
    var_3 = var_2.to_validation()
    var_4 = maybe_1.bind(bool_0)
    var_3.get_or_else(bool_0)


def test_case_6():
    complex_0 = 3121.907 - 2785.2j
    bool_0 = False
    maybe_0 = module_1.Maybe(complex_0, bool_0)
    none_type_0 = None
    var_0 = maybe_0.to_validation()
    bool_1 = maybe_0.__eq__(none_type_0)
    maybe_0.ap(complex_0)


def test_case_7():
    bool_0 = False
    maybe_0 = module_1.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_box()
    maybe_1 = module_1.Maybe(var_0, var_0)
    var_1 = maybe_1.filter(var_0)
    var_2 = var_1.ap(maybe_1)
    var_3 = var_1.map(var_0)
    var_4 = var_1.to_validation()
    maybe_2 = module_1.Maybe(maybe_1, bool_0)
    var_5 = maybe_2.to_either()
    var_6 = var_5.to_lazy()


def test_case_8():
    bool_0 = False
    maybe_0 = module_1.Maybe(bool_0, bool_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    maybe_0.filter(var_0)


def test_case_9():
    float_0 = -977.358
    none_type_0 = None
    maybe_0 = module_1.Maybe(float_0, float_0)
    var_0 = maybe_0.map(float_0)
    var_1 = var_0.get_or_else(none_type_0)
    var_1.ap(float_0)


def test_case_10():
    object_0 = module_0.object()
    maybe_0 = module_1.Maybe(object_0, object_0)
    var_0 = maybe_0.to_either()
    var_0.to_either()


def test_case_11():
    float_0 = -867.0
    maybe_0 = module_1.Maybe(float_0, float_0)
    var_0 = maybe_0.to_box()
    var_0.to_box()


def test_case_12():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_1.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_box()


def test_case_13():
    none_type_0 = None
    bytes_0 = b"g\x1f\x1f\xc3\xfa\x1c\xa4b"
    bool_0 = True
    maybe_0 = module_1.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_0.get_or_else(none_type_0)


def test_case_14():
    dict_0 = {}
    bool_0 = True
    maybe_0 = module_1.Maybe(dict_0, bool_0)
    var_0 = maybe_0.to_try()
    var_0.to_validation()


def test_case_15():
    bool_0 = True
    bool_1 = False
    maybe_0 = module_1.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_try()
    var_0.to_box()


def test_case_16():
    int_0 = -459
    maybe_0 = module_1.Maybe(int_0, int_0)
    var_0 = maybe_0.to_validation()


def test_case_17():
    none_type_0 = None
    bool_0 = False
    tuple_0 = (bool_0,)
    set_0 = {tuple_0, tuple_0}
    none_type_1 = None
    maybe_0 = module_1.Maybe(set_0, none_type_1)
    var_0 = maybe_0.to_validation()
    var_0.ap(none_type_0)


def test_case_18():
    bool_0 = False
    maybe_0 = module_1.Maybe(bool_0, bool_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    maybe_0.filter(var_0)


def test_case_19():
    bytes_0 = b"E\x01\xb1\xf4\\\xd2\xef"
    bool_0 = True
    maybe_0 = module_1.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.ap(bytes_0)
    var_1 = maybe_0.ap(bytes_0)
    var_2 = var_0.filter(bool_0)
    bool_1 = var_2.__eq__(var_1)
    var_3 = maybe_0.map(var_0)
    var_4 = var_2.to_lazy()
    var_5 = var_1.to_lazy()
    var_6 = var_4.bind(var_1)
    tuple_0 = (bool_0,)
    bool_2 = False
    maybe_1 = module_1.Maybe(tuple_0, bool_2)
    var_7 = var_0.get_or_else(var_1)
    none_type_0 = None
    maybe_2 = module_1.Maybe(none_type_0, var_0)
    var_8 = var_7.map(var_4)
    int_0 = -173
    var_9 = maybe_0.ap(int_0)
    var_10 = var_4.map(tuple_0)
    var_11 = var_4.map(var_9)
    bool_3 = True
    maybe_3 = module_1.Maybe(bool_2, bool_3)
    var_12 = maybe_3.ap(var_2)
    var_13 = maybe_3.to_either()
    var_14 = maybe_0.to_lazy()
    var_15 = maybe_0.get_or_else(var_12)
    bool_4 = var_0.__eq__(maybe_1)
