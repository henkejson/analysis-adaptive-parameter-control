# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    str_0 = "ryc@M}"
    maybe_0 = module_0.Maybe(str_0, str_0)


def test_case_1():
    str_0 = ""
    maybe_0 = module_0.Maybe(str_0, str_0)


def test_case_2():
    int_0 = 2837
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.to_either()
    maybe_1 = module_0.Maybe(int_0, int_0)
    var_1 = maybe_1.to_try()
    var_2 = maybe_0.to_either()
    bool_0 = maybe_0.__eq__(var_2)
    bool_1 = True
    maybe_2 = module_0.Maybe(var_1, bool_1)
    var_3 = var_1.bind(var_1)
    str_0 = "L|s=.eC1Y"
    var_4 = maybe_2.ap(bool_0)
    maybe_3 = module_0.Maybe(var_1, var_4)
    maybe_4 = module_0.Maybe(str_0, bool_1)
    var_5 = maybe_3.to_validation()
    var_6 = var_4.get_or_else(maybe_3)
    bool_2 = maybe_3.__eq__(maybe_4)
    var_7 = maybe_3.to_lazy()
    maybe_5 = module_0.Maybe(var_3, maybe_4)
    var_8 = var_0.to_lazy()


def test_case_3():
    none_type_0 = None
    str_0 = "0'a3]h"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.to_lazy()
    var_2 = maybe_0.map(var_1)
    var_3 = var_1.ap(none_type_0)
    var_4 = maybe_0.to_lazy()
    var_5 = var_3.to_try()
    var_6 = var_1.to_validation()
    var_7 = maybe_0.to_box()
    var_8 = var_4.map(var_6)
    var_3.to_validation()


def test_case_4():
    bytes_0 = b"\x07#\x05\x13\x86\x04\x90S\x9b\xb0\xe31X\xf5\x8fj\xbb"
    complex_0 = -1809.6928 - 1444j
    none_type_0 = None
    maybe_0 = module_0.Maybe(complex_0, none_type_0)
    maybe_0.map(bytes_0)


def test_case_5():
    int_0 = 2837
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.to_either()
    maybe_1 = module_0.Maybe(int_0, int_0)
    var_1 = maybe_1.to_try()
    var_2 = maybe_1.bind(var_1)
    var_3 = var_2.to_validation()
    var_4 = var_0.bind(var_1)
    var_5 = maybe_1.to_box()
    var_6 = var_5.to_lazy()


def test_case_6():
    float_0 = -2969.226
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    maybe_0 = module_0.Maybe(float_0, dict_0)
    bool_0 = False
    maybe_1 = module_0.Maybe(dict_0, bool_0)
    var_0 = maybe_1.to_lazy()
    maybe_1.bind(var_0)


def test_case_7():
    bool_0 = True
    bool_1 = True
    bool_2 = True
    none_type_0 = None
    int_0 = 705
    maybe_0 = module_0.Maybe(none_type_0, int_0)
    var_0 = maybe_0.ap(bool_0)
    maybe_1 = module_0.Maybe(bool_1, bool_1)
    var_1 = maybe_1.filter(var_0)
    var_2 = var_1.filter(bool_2)
    var_3 = var_2.to_either()


def test_case_8():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_0.ap(bool_0)


def test_case_9():
    bytes_0 = b"\x1d\\l8\xf9r\xda\x0e\xf7"
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.filter(bytes_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(bool_0, none_type_0)
    maybe_1.filter(none_type_0)


def test_case_10():
    int_0 = 1633
    int_1 = 1265
    bytes_0 = b"p\x82\xf8\xef\x95\xc4\xc4\xef\xc0\xfc\xeb&\x82\xf6J;\xfc(\xc8"
    dict_0 = {int_1: bytes_0}
    bool_0 = True
    maybe_0 = module_0.Maybe(dict_0, bool_0)
    var_0 = maybe_0.get_or_else(int_0)


def test_case_11():
    none_type_0 = None
    tuple_0 = ()
    maybe_0 = module_0.Maybe(tuple_0, tuple_0)
    var_0 = maybe_0.get_or_else(none_type_0)
    var_0.to_box()


def test_case_12():
    int_0 = -1243
    bool_0 = False
    set_0 = {bool_0}
    maybe_0 = module_0.Maybe(set_0, set_0)
    var_0 = maybe_0.to_either()
    var_0.filter(int_0)


def test_case_13():
    bool_0 = False
    str_0 = "\n        Returns new ImmutableList with argument value on the begin of list\n        and other list elements after it\n\n        :param new_element: element to append on the begin of list\n        :type fn: A\n        :returns: ImmutableList[A]\n        "
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.ap(bool_0)
    maybe_1 = module_0.Maybe(str_0, bool_0)
    bool_2 = maybe_1.__eq__(maybe_1)
    var_1 = maybe_1.to_box()
    var_2 = maybe_1.to_either()
    maybe_2 = module_0.Maybe(bool_0, bool_0)
    var_3 = maybe_1.to_box()
    maybe_2.ap(bool_0)


def test_case_14():
    bytes_0 = b'-\xb3\x12\xb8\xf7\xde\xf7\xe5"\xc2:i\x9f\x91'
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_either()


def test_case_15():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_either()
    var_1.to_either()


def test_case_16():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_either()
    var_2 = var_1.to_try()
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_3 = maybe_1.to_validation()
    maybe_1.map(var_3)


def test_case_17():
    int_0 = -879
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.to_try()


def test_case_18():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_try()
    var_0.to_try()


def test_case_19():
    int_0 = 1863
    int_1 = 1
    list_0 = [int_1, int_1]
    bool_0 = False
    maybe_0 = module_0.Maybe(list_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_0.bind(int_0)


def test_case_20():
    int_0 = 2837
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.to_either()
    maybe_1 = module_0.Maybe(int_0, int_0)
    var_1 = maybe_1.to_try()
    bool_0 = maybe_0.__eq__(maybe_0)
    bool_1 = True
    maybe_2 = module_0.Maybe(var_1, bool_1)
    var_2 = var_1.bind(var_1)
    str_0 = "L|s=.eC1Y"
    var_3 = maybe_2.ap(bool_0)
    maybe_3 = module_0.Maybe(var_1, var_3)
    maybe_4 = module_0.Maybe(str_0, bool_1)
    var_4 = maybe_3.to_validation()
    var_5 = var_3.get_or_else(maybe_3)
    var_1.to_validation()


def test_case_21():
    bytes_0 = b"\x1d\\l8\xf9r\xda\x0e\xf7"
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.filter(bytes_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(bool_0, none_type_0)
    bool_1 = maybe_0.__eq__(bytes_0)
    var_1 = maybe_1.to_try()
    maybe_1.filter(none_type_0)
