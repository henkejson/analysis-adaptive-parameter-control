# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    bytes_0 = b"\x08\x9eGw\xf7n"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    int_0 = -2835
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    maybe_2 = module_0.Maybe(none_type_0, none_type_0)
    bool_1 = maybe_1.__eq__(bool_0)
    maybe_2.ap(int_0)


def test_case_3():
    bool_0 = False
    str_0 = "h\nW*)|\t{]"
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    maybe_0.map(str_0)


def test_case_4():
    int_0 = 863
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, int_0)
    maybe_1 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_1.filter(maybe_1)
    var_1 = maybe_1.to_lazy()
    var_2 = var_0.bind(var_1)
    var_3 = maybe_1.get_or_else(maybe_1)
    var_4 = maybe_1.to_lazy()


def test_case_5():
    bool_0 = True
    bytes_0 = b"A\x15y\xed\xfbj6\xb7\x91\x82"
    int_0 = -592
    list_0 = [bool_0, bytes_0, int_0]
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_1, bool_1)
    maybe_0.bind(list_0)


def test_case_6():
    bytes_0 = b"5"
    none_type_0 = None
    bytes_1 = b"\xc0o\x1b\x1fI6\xea\xcb\xc0\x1e}\x8d\xbb\xdd\xfa"
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_1, bool_0)
    var_0 = maybe_0.ap(none_type_0)
    var_1 = var_0.to_box()
    var_2 = var_1.to_either()
    var_2.bind(bytes_0)


def test_case_7():
    float_0 = 183.79994
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_0.filter(float_0)


def test_case_8():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    var_0.map(var_0)


def test_case_9():
    tuple_0 = ()
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(tuple_0, bool_1)
    var_0 = maybe_1.to_either()
    bool_2 = False
    maybe_2 = module_0.Maybe(none_type_0, bool_2)
    bool_3 = var_0.__eq__(maybe_2)
    var_1 = maybe_0.to_either()
    var_2 = var_0.to_try()
    var_2.to_box()


def test_case_10():
    int_0 = 1
    none_type_0 = None
    maybe_0 = module_0.Maybe(int_0, none_type_0)
    var_0 = maybe_0.to_box()
    var_0.get_or_else(none_type_0)


def test_case_11():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_0.filter(var_0)


def test_case_12():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.ap(maybe_0)
    var_1 = maybe_0.to_try()
    var_2 = maybe_0.filter(var_1)
    var_3 = var_0.bind(var_0)
    var_4 = var_0.to_either()
    bool_1 = var_3.__eq__(var_1)
    var_5 = var_2.to_lazy()
    maybe_1 = module_0.Maybe(bool_0, bool_1)
    var_6 = var_5.bind(var_1)
    var_7 = maybe_0.map(maybe_0)
    var_8 = var_0.to_validation()
    var_9 = maybe_0.map(var_5)
    var_10 = var_9.to_box()
    maybe_1.filter(var_9)


def test_case_13():
    int_0 = 1596
    bytes_0 = b"\x16\t\xd7\x14=\x9cS]\x9e7)\xf8\x00\xa1\xa2\x02\x91\xce\xdf"
    bytes_1 = b"\xb9\xf9b\xeb\xb3\xd0pw4\x96zYK"
    bool_0 = False
    maybe_0 = module_0.Maybe(bytes_1, bool_0)
    var_0 = maybe_0.to_try()
    var_1 = var_0.get_or_else(bytes_0)
    var_1.filter(int_0)


def test_case_14():
    str_0 = "\n        Take mapper function and returns result of them called with Right value.\n\n        :param mapper: function to apply on Right value\n        :type mapper: Function(A) -> Either[B]\n        :returns: result of mapper\n        :rtype: Either[B]\n        "
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    none_type_0 = None
    bool_1 = True
    maybe_1 = module_0.Maybe(none_type_0, bool_1)
    var_0 = maybe_1.to_validation()
    var_1 = var_0.to_either()
    var_1.filter(var_0)


def test_case_15():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.bind(none_type_0)
    bool_0 = var_1.__eq__(none_type_0)
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_2 = maybe_1.to_either()
    var_3 = var_1.to_try()
    var_4 = maybe_0.to_validation()
    var_5 = maybe_1.to_box()
    var_6 = var_4.to_lazy()
    var_7 = var_0.to_try()
    var_2.map(var_0)


def test_case_16():
    bool_0 = True
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_try()
    maybe_1 = module_0.Maybe(bool_1, bool_1)
    var_2 = maybe_0.filter(var_1)
    var_3 = var_2.to_box()
    var_3.to_box()


def test_case_17():
    none_type_0 = None
    bytes_0 = b"\x08\x9eGw\xf7n"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.ap(none_type_0)
    var_1 = var_0.to_box()
    var_2 = var_1.to_try()
    bool_0 = maybe_0.__eq__(var_0)
    var_3 = var_0.to_lazy()
    int_0 = 0
    var_4 = var_2.get_or_else(int_0)
    var_3.filter(bool_0)


def test_case_18():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    list_0 = [none_type_0, maybe_0, none_type_0]
    var_0 = maybe_0.get_or_else(none_type_0)
    maybe_0.bind(list_0)


def test_case_19():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    set_0 = {bool_0}
    var_0 = maybe_0.ap(set_0)
    var_1 = maybe_0.ap(var_0)
    var_2 = var_1.bind(bool_0)
    var_3 = var_0.to_lazy()
    var_4 = var_2.get_or_else(var_1)
    var_5 = var_4.to_either()
    bytes_0 = b")+\x87S\x88\x97\xac\xcd\xab\xfaM"
    bool_1 = var_2.__eq__(var_5)
    var_6 = var_4.filter(var_1)
    bool_2 = var_0.__eq__(var_0)
    var_7 = var_5.bind(bool_2)
    var_8 = maybe_0.bind(var_5)
    var_9 = maybe_0.to_validation()
    var_10 = var_3.map(bool_2)
    var_11 = maybe_0.ap(var_3)
    var_12 = maybe_0.ap(var_10)
    maybe_1 = module_0.Maybe(var_11, bytes_0)
    var_13 = var_4.to_box()
    var_13.to_box()
