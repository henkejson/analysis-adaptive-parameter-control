# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    int_0 = 1
    maybe_0 = module_0.Maybe(int_0, int_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    str_0 = "GjoT-b(%L7<&Df"
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.ap(str_0)
    var_2 = var_1.ap(str_0)
    bool_0 = False
    none_type_1 = None
    maybe_1 = module_0.Maybe(bool_0, none_type_1)
    bool_1 = maybe_1.__eq__(none_type_1)
    bool_2 = maybe_1.__eq__(maybe_1)
    var_3 = maybe_1.to_box()
    maybe_2 = module_0.Maybe(var_3, maybe_1)
    var_2.to_either()


def test_case_3():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    bool_0 = maybe_0.__eq__(none_type_0)
    var_1 = maybe_0.to_either()
    maybe_0.ap(none_type_0)


def test_case_4():
    dict_0 = {}
    int_0 = 1
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.map(dict_0)
    var_1 = var_0.to_either()


def test_case_5():
    bytes_0 = b'\x8b\x14\x8d"Q\xd1'
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.bind(bytes_0)
    var_1 = maybe_0.to_box()
    var_2 = maybe_0.to_box()


def test_case_6():
    bool_0 = False
    list_0 = []
    maybe_0 = module_0.Maybe(list_0, list_0)
    maybe_0.bind(bool_0)


def test_case_7():
    bytes_0 = b"{\xf5\\\xca\xb2V"
    bool_0 = False
    tuple_0 = (bytes_0, bytes_0, bool_0)
    dict_0 = {tuple_0: bool_0}
    bool_1 = True
    maybe_0 = module_0.Maybe(dict_0, bool_1)
    var_0 = maybe_0.bind(bytes_0)
    var_1 = var_0.to_lazy()
    var_2 = var_0.filter(var_1)
    var_3 = var_0.map(dict_0)
    bool_2 = False
    maybe_1 = module_0.Maybe(bool_0, bool_2)
    var_4 = maybe_0.ap(maybe_0)
    var_5 = maybe_0.to_lazy()
    var_6 = var_4.to_lazy()
    var_7 = var_0.to_box()


def test_case_8():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    maybe_0.filter(none_type_0)


def test_case_9():
    dict_0 = {}
    int_0 = 1
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.map(dict_0)
    var_1 = var_0.to_validation()
    none_type_0 = None
    var_2 = maybe_0.get_or_else(none_type_0)
    var_2.ap(none_type_0)


def test_case_10():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_validation()
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    none_type_0 = None
    bool_1 = var_0.__eq__(bool_0)
    maybe_1 = module_0.Maybe(set_0, none_type_0)
    var_1 = maybe_1.get_or_else(maybe_1)
    var_2 = maybe_1.to_lazy()
    var_3 = maybe_1.to_validation()


def test_case_11():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_try()
    maybe_1 = module_0.Maybe(var_0, var_1)
    var_0.bind(var_1)


def test_case_12():
    str_0 = "MUv7)3C2c8V@"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_try()
    var_1 = var_0.filter(dict_0)
    var_2 = var_1.filter(str_0)
    var_2.to_either()


def test_case_13():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = False
    var_0 = maybe_0.to_try()
    maybe_1 = module_0.Maybe(maybe_0, bool_1)
    var_1 = maybe_0.to_either()
    var_0.map(maybe_0)


def test_case_14():
    str_0 = "8+gb\x0cnZ`s',P&}>o=:"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.to_validation()


def test_case_15():
    bytes_0 = b"\xe4\x14:\xc3\r\x06z\xaa\xba\xef\xef\x02\x8c\xf8\x0cg\xac\xce\xe6"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.ap(maybe_0)
    var_1 = maybe_0.to_box()
    var_2 = maybe_0.to_try()
    var_3 = maybe_0.map(var_2)
    bytes_1 = b"\x96\xdb"
    str_0 = "\n        Applies the function inside the Either[A] structure to another applicative type.\n\n        :param applicative: applicative contains function\n        :type applicative: Either[B]\n        :returns: new Either with result of contains function\n        :rtype: Either[A(B)]\n        "
    maybe_1 = module_0.Maybe(bytes_1, bytes_1)
    var_4 = maybe_1.ap(str_0)
    tuple_0 = (bytes_1, var_4, var_4, var_4)
    maybe_2 = module_0.Maybe(tuple_0, str_0)
    var_5 = maybe_2.to_lazy()
    bool_0 = True
    maybe_3 = module_0.Maybe(var_4, bool_0)
    var_6 = var_3.get_or_else(maybe_2)
    var_7 = maybe_3.to_lazy()
    var_8 = var_7.to_validation()


def test_case_16():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.map(none_type_0)


def test_case_17():
    none_type_0 = None
    none_type_1 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_1, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.get_or_else(var_0)
    tuple_0 = (var_0, var_0, maybe_0)
    var_2 = maybe_0.get_or_else(none_type_0)
    bool_1 = var_2.__eq__(maybe_0)
    maybe_1 = module_0.Maybe(tuple_0, var_0)
    var_3 = maybe_1.bind(none_type_0)
    var_4 = var_3.filter(var_0)
    var_5 = var_3.get_or_else(bool_0)
    float_0 = 1272.01
    bool_2 = var_4.__eq__(float_0)
    maybe_2 = module_0.Maybe(bool_2, var_0)
    var_6 = var_4.to_box()
    var_7 = maybe_1.bind(var_0)
    var_8 = maybe_1.to_box()
    var_9 = var_0.to_either()


def test_case_18():
    bytes_0 = b"{\xf5\\\xca\xb2V"
    bool_0 = False
    tuple_0 = (bytes_0, bytes_0, bool_0)
    dict_0 = {tuple_0: bool_0, tuple_0: bool_0}
    bool_1 = True
    maybe_0 = module_0.Maybe(dict_0, bool_1)
    var_0 = maybe_0.bind(bytes_0)
    var_1 = var_0.to_lazy()
    var_2 = var_0.filter(var_1)
    bool_2 = maybe_0.__eq__(var_0)
    maybe_1 = module_0.Maybe(dict_0, bool_1)
    var_3 = var_0.bind(var_1)
    var_4 = maybe_1.filter(var_1)
    bool_3 = maybe_0.__eq__(var_4)
    var_5 = var_4.get_or_else(bytes_0)
    var_6 = var_0.to_box()
    var_5.to_try()


def test_case_19():
    bytes_0 = b"{\xf5\\\xca\xb2V"
    bool_0 = False
    tuple_0 = (bytes_0, bytes_0, bool_0)
    dict_0 = {tuple_0: bool_0, tuple_0: bool_0}
    bool_1 = True
    bool_2 = True
    maybe_0 = module_0.Maybe(bytes_0, dict_0)
    var_0 = maybe_0.ap(bool_2)
    var_1 = maybe_0.filter(var_0)
    maybe_1 = module_0.Maybe(var_0, var_0)
    var_2 = maybe_0.to_try()
    var_3 = var_1.ap(bool_2)
    bool_3 = maybe_1.__eq__(var_1)
    maybe_2 = module_0.Maybe(var_2, bool_1)
    var_4 = var_2.filter(var_0)
    var_5 = var_3.map(tuple_0)
    bool_4 = maybe_2.__eq__(var_2)
    var_6 = maybe_1.bind(var_0)
    var_7 = var_1.filter(var_0)
    var_8 = var_7.map(var_0)
    bool_5 = maybe_0.__eq__(var_5)
    maybe_3 = module_0.Maybe(var_0, maybe_1)
    var_9 = maybe_2.to_box()
    var_10 = var_1.bind(var_9)
    var_11 = var_8.to_box()
    var_12 = var_7.to_box()
