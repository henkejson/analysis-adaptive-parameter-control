# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    bytes_0 = b"\xd7\xaf\xa1\xf6\x80\xcai\x8ckxK\xb0\x94\xe0yN\x0e\xa9"
    none_type_0 = None
    maybe_0 = module_0.Maybe(bytes_0, none_type_0)
    bool_0 = True
    maybe_1 = module_0.Maybe(maybe_0, bool_0)
    var_0 = maybe_1.map(bytes_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    maybe_0.ap(none_type_0)


def test_case_3():
    list_0 = []
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = True
    bool_1 = maybe_0.__eq__(bool_0)
    maybe_0.ap(list_0)


def test_case_4():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_0.ap(maybe_0)


def test_case_5():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = True
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_1.bind(bool_0)
    var_1 = maybe_1.filter(maybe_0)
    generic_0 = module_1.Generic()
    maybe_0.filter(var_0)


def test_case_6():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    generic_0 = module_1.Generic()
    maybe_0.bind(generic_0)


def test_case_7():
    str_0 = "AM\x0cD8_N"
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.ap(str_0)


def test_case_8():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = True
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_1.filter(maybe_0)
    maybe_0.filter(none_type_0)


def test_case_9():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = True
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_1.get_or_else(maybe_0)
    var_1 = maybe_1.filter(maybe_0)
    generic_0 = module_1.Generic()
    maybe_0.filter(var_0)


def test_case_10():
    complex_0 = -1895.762296 - 2784j
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(complex_0, bool_0)
    var_0 = maybe_0.get_or_else(complex_0)
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_1 = maybe_1.to_box()
    var_1.ap(none_type_0)


def test_case_11():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_either()
    maybe_1 = module_0.Maybe(var_0, var_0)
    var_1 = maybe_1.to_either()
    bool_1 = True
    maybe_2 = module_0.Maybe(var_1, bool_1)
    var_2 = maybe_2.to_either()
    var_1.to_either()


def test_case_12():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_either()
    str_0 = "N*0;yW.S.J {+t- 6'1"
    maybe_0.ap(str_0)


def test_case_13():
    bytes_0 = b"\xd7\xaf\xa1\xf6\x80\xcai\x8ckxK\xb0\x94\xe0yN\x0e\xa9"
    none_type_0 = None
    maybe_0 = module_0.Maybe(bytes_0, none_type_0)
    bool_0 = True
    maybe_1 = module_0.Maybe(maybe_0, bool_0)
    var_0 = maybe_1.map(bytes_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    var_1 = var_0.to_box()
    maybe_0.ap(none_type_0)


def test_case_14():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_box()


def test_case_15():
    list_0 = []
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(list_0, bool_0)
    bool_1 = maybe_0.__eq__(none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.bind(var_0)
    var_2 = var_0.to_box()


def test_case_16():
    bytes_0 = b"\xd7\xaf\xa1\xf6\x80\xcai\x8ckxK\xb0\x94\xe0yN\x0e\xa9"
    none_type_0 = None
    maybe_0 = module_0.Maybe(bytes_0, none_type_0)
    bool_0 = True
    maybe_1 = module_0.Maybe(maybe_0, bool_0)
    var_0 = maybe_1.map(bytes_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    var_1 = maybe_0.to_lazy()
    var_2 = maybe_1.bind(var_1)
    var_3 = var_0.to_box()
    maybe_0.ap(none_type_0)


def test_case_17():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_try()
    var_0.to_validation()


def test_case_18():
    bytes_0 = b"\xd7\xaf\xa1\xf6\x80\xcai\x8ckxK\xb0\x94\xe0yN\x0e\xa9"
    none_type_0 = None
    maybe_0 = module_0.Maybe(bytes_0, none_type_0)
    bool_0 = True
    maybe_1 = module_0.Maybe(maybe_0, bool_0)
    var_0 = maybe_1.map(bytes_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    var_1 = maybe_0.to_box()
    var_2 = var_1.to_validation()
    var_3 = maybe_1.filter(var_2)
    var_4 = maybe_0.to_try()
    var_5 = maybe_1.bind(var_4)
    var_6 = var_5.to_box()
    var_7 = var_0.ap(maybe_0)


def test_case_19():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_0.to_validation()


def test_case_20():
    none_type_0 = None
    none_type_1 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_validation()
    var_0.map(none_type_1)


def test_case_21():
    bytes_0 = b"\xd7\xaf\xa1\xf6\x80\xcai\x8ckxK\xb0\x94\xe0yN\x0e\xa9"
    none_type_0 = None
    maybe_0 = module_0.Maybe(bytes_0, none_type_0)
    bool_0 = True
    maybe_1 = module_0.Maybe(maybe_0, bool_0)
    var_0 = maybe_1.map(bytes_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    var_1 = maybe_0.to_lazy()
    var_2 = var_1.to_try()


def test_case_22():
    complex_0 = 811.1 - 1865.169183j
    maybe_0 = module_0.Maybe(complex_0, complex_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.to_validation()
    bool_1 = var_0.__eq__(var_0)
    var_2 = maybe_0.to_validation()
    var_3 = maybe_0.bind(bool_0)
    var_4 = maybe_0.bind(bool_1)
    var_5 = var_3.to_validation()
    var_0.to_try()


def test_case_23():
    bytes_0 = b"\xd7\xaf\xa1\xf6\x80\xcai\x8ckxK\xb0\x94\xe0yN\x0e\xa9"
    none_type_0 = None
    maybe_0 = module_0.Maybe(bytes_0, none_type_0)
    bool_0 = True
    maybe_1 = module_0.Maybe(maybe_0, bool_0)
    maybe_2 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_2.map(bytes_0)
    bool_1 = maybe_0.__eq__(maybe_1)
    var_1 = var_0.to_lazy()
    var_2 = var_1.bind(var_1)
    var_3 = maybe_0.to_box()
    var_4 = var_2.ap(var_1)
