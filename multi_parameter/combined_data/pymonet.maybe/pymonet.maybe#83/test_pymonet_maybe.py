# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    bytes_0 = b"\xd7F\x0f{\xc9\x1f\x03+\xdd<Fj"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)


def test_case_1():
    dict_0 = {}
    maybe_0 = module_0.Maybe(dict_0, dict_0)


def test_case_2():
    str_0 = "\\\n)fvs=pc3%kw"
    bytes_0 = b"2"
    bytes_1 = b"x\x10"
    set_0 = {bytes_0, bytes_0, bytes_1, bytes_0}
    maybe_0 = module_0.Maybe(set_0, bytes_1)
    var_0 = maybe_0.to_lazy()
    bool_0 = True
    bool_1 = maybe_0.__eq__(maybe_0)
    maybe_1 = module_0.Maybe(maybe_0, bool_0)
    var_1 = maybe_1.map(var_0)
    var_2 = maybe_0.to_validation()
    var_3 = var_2.to_lazy()
    var_4 = var_0.map(str_0)
    var_5 = var_3.to_try()
    var_5.to_lazy()


def test_case_3():
    int_0 = 3057
    maybe_0 = module_0.Maybe(int_0, int_0)
    bool_0 = maybe_0.__eq__(int_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.bind(var_0)
    var_2 = maybe_0.to_try()
    var_3 = maybe_0.filter(var_2)
    var_4 = maybe_0.to_validation()
    var_5 = maybe_0.to_validation()
    maybe_1 = module_0.Maybe(bool_0, var_4)
    var_0.ap(var_5)


def test_case_4():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.map(maybe_0)


def test_case_5():
    bytes_0 = b"\xa8\x7f"
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    tuple_0 = ()
    list_0 = [tuple_0]
    maybe_0 = module_0.Maybe(list_0, list_0)
    var_0 = maybe_0.bind(set_0)
    var_1 = var_0.get_or_else(bytes_0)
    var_1.to_try()


def test_case_6():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    maybe_0 = module_0.Maybe(tuple_0, bool_0)
    bool_1 = maybe_0.__eq__(bool_0)
    var_0 = maybe_0.to_try()
    bool_2 = maybe_0.__eq__(maybe_0)
    var_1 = maybe_0.get_or_else(var_0)
    maybe_0.bind(var_0)


def test_case_7():
    int_0 = 1881
    none_type_0 = None
    none_type_1 = None
    maybe_0 = module_0.Maybe(none_type_1, none_type_1)
    bool_0 = True
    str_0 = "\n    Maybe type is the most common way of representing nothingness (or the null type).\n    Maybe is effectively abstract and has two concrete subtypes: Box (also Some) and Nothing.\n    "
    maybe_1 = module_0.Maybe(bool_0, str_0)
    var_0 = maybe_1.ap(maybe_0)
    var_1 = var_0.ap(none_type_0)
    var_2 = var_1.to_either()
    var_2.get_or_else(int_0)


def test_case_8():
    list_0 = []
    maybe_0 = module_0.Maybe(list_0, list_0)
    maybe_0.ap(list_0)


def test_case_9():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.filter(var_0)


def test_case_10():
    bool_0 = False
    tuple_0 = (bool_0,)
    none_type_0 = None
    maybe_0 = module_0.Maybe(tuple_0, none_type_0)
    var_0 = maybe_0.to_either()
    maybe_0.filter(bool_0)


def test_case_11():
    bool_0 = False
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.get_or_else(bool_0)
    var_0.to_validation()


def test_case_12():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_either()


def test_case_13():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.filter(none_type_0)
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_1 = maybe_1.to_either()


def test_case_14():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.filter(var_0)
    var_2 = var_1.to_validation()
    maybe_1 = module_0.Maybe(bool_0, var_2)


def test_case_15():
    none_type_0 = None
    none_type_1 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_1, bool_0)
    var_0 = maybe_0.to_box()
    var_0.get_or_else(none_type_0)


def test_case_16():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_lazy()


def test_case_17():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_try()
    tuple_0 = (bool_0, var_0, bool_0, var_0)
    maybe_1 = module_0.Maybe(tuple_0, var_0)
    var_1 = maybe_1.to_validation()
    var_1.to_validation()


def test_case_18():
    str_0 = "0xk,UoWpnpc\x0c5j*h"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_try()
    bool_0 = True
    none_type_0 = None
    maybe_1 = module_0.Maybe(bool_0, none_type_0)
    var_2 = maybe_1.to_try()
    none_type_1 = None
    maybe_2 = module_0.Maybe(none_type_1, none_type_1)
    maybe_2.filter(var_2)


def test_case_19():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_validation()


def test_case_20():
    float_0 = -336.5
    none_type_0 = None
    int_0 = -477
    bool_0 = False
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_validation()
    maybe_1 = module_0.Maybe(float_0, none_type_0)
    var_2 = maybe_1.to_validation()
    var_3 = var_2.to_try()


def test_case_21():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.ap(bool_0)
    var_2 = var_0.to_validation()
    var_3 = maybe_0.to_box()
    var_3.to_box()


def test_case_22():
    bool_0 = False
    tuple_0 = (bool_0,)
    tuple_1 = (tuple_0, tuple_0)
    maybe_0 = module_0.Maybe(tuple_1, bool_0)
    bool_1 = maybe_0.__eq__(bool_0)
    bool_2 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.get_or_else(bool_0)
    maybe_0.filter(bool_1)


def test_case_23():
    bool_0 = False
    int_0 = 3057
    maybe_0 = module_0.Maybe(int_0, int_0)
    bool_1 = maybe_0.__eq__(int_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.ap(bool_0)
    var_2 = maybe_0.filter(var_1)
    var_3 = maybe_0.get_or_else(var_1)
    var_4 = maybe_0.filter(maybe_0)
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    var_5 = maybe_0.to_lazy()
    var_6 = maybe_1.ap(var_1)
    var_7 = var_1.to_box()
    var_8 = maybe_0.to_try()
    var_9 = maybe_0.bind(var_7)
    bool_2 = maybe_1.__eq__(var_9)
    var_10 = maybe_0.to_lazy()
    var_11 = maybe_1.to_try()
    var_12 = var_5.to_try()
    var_13 = var_4.get_or_else(var_5)
    var_14 = var_10.to_validation()
    var_15 = maybe_1.ap(var_10)
    var_16 = var_5.to_either()
    var_16.to_either()
