# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    int_0 = -1089
    maybe_0 = module_0.Maybe(int_0, int_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.ap(bool_0)
    var_2 = maybe_0.ap(maybe_0)
    var_3 = var_2.bind(bool_0)
    bool_1 = var_3.__eq__(maybe_0)
    var_4 = maybe_0.get_or_else(var_2)
    var_5 = var_1.filter(var_4)
    var_6 = var_5.to_try()
    bool_2 = False
    maybe_1 = module_0.Maybe(var_4, bool_2)
    var_7 = var_5.bind(var_2)
    maybe_1.filter(bool_2)


def test_case_3():
    bytes_0 = b"}jy_\xf1d\xbc%\x80S\x8a\x06\x19\xd1\xf8tT\xa7\x0e\xe4"
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.to_try()
    bool_1 = maybe_0.__eq__(var_0)
    maybe_1 = module_0.Maybe(bytes_0, bytes_0)


def test_case_4():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0}
    str_0 = ""
    none_type_0 = None
    str_1 = "[%\x0b"
    bool_0 = False
    maybe_0 = module_0.Maybe(str_1, bool_0)
    var_0 = maybe_0.get_or_else(none_type_0)
    none_type_1 = None
    bool_1 = True
    maybe_1 = module_0.Maybe(none_type_1, bool_1)
    var_1 = maybe_1.map(var_0)
    var_2 = var_1.ap(str_0)
    var_3 = var_2.get_or_else(set_0)


def test_case_5():
    none_type_0 = None
    none_type_1 = None
    maybe_0 = module_0.Maybe(none_type_1, none_type_1)
    maybe_0.map(none_type_0)


def test_case_6():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.ap(bool_0)
    var_1 = maybe_0.bind(bool_0)
    var_2 = var_0.filter(var_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(bool_1, bool_1)
    maybe_1.filter(bool_1)


def test_case_7():
    none_type_0 = None
    none_type_1 = None
    bytes_0 = b"\xab\xd0\xe2\x137\xd3"
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(bytes_0, bool_1)
    var_0 = maybe_1.get_or_else(bool_1)
    maybe_1.bind(none_type_1)


def test_case_8():
    bool_0 = True
    complex_0 = 596.65 + 2078j
    bool_1 = True
    maybe_0 = module_0.Maybe(complex_0, bool_1)
    var_0 = maybe_0.ap(bool_0)


def test_case_9():
    str_0 = "\n        Transform Validation to Either.\n\n        :returns: Right monad with previous value when Validation has no errors, in other case Left with errors list\n        :rtype: Right[A] | Left[E]\n        "
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_box()
    maybe_1 = module_0.Maybe(maybe_0, bool_0)
    bool_1 = maybe_1.__eq__(maybe_1)
    var_1 = maybe_1.to_lazy()
    bytes_0 = b"\x8a)\xb3Tu\xf9\x8d_\x0e{\x15\xdesz\xba{\xe0W\xb3"
    maybe_2 = module_0.Maybe(bytes_0, bytes_0)
    var_2 = maybe_2.to_lazy()
    none_type_0 = None
    bool_2 = False
    var_3 = var_1.to_try()
    maybe_3 = module_0.Maybe(none_type_0, bool_2)
    var_4 = maybe_3.ap(var_2)


def test_case_10():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.filter(maybe_0)
    var_1 = var_0.to_lazy()
    var_2 = maybe_0.to_validation()
    var_3 = var_2.to_box()
    var_4 = maybe_0.to_lazy()
    var_5 = var_0.to_validation()


def test_case_11():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.ap(bool_0)
    var_1 = maybe_0.bind(bool_0)
    var_2 = maybe_0.get_or_else(maybe_0)
    var_3 = var_0.filter(var_2)
    bool_1 = False
    maybe_1 = module_0.Maybe(var_2, bool_1)
    maybe_1.filter(bool_1)


def test_case_12():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, none_type_0)
    bool_1 = maybe_0.__eq__(none_type_0)
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_1.to_try()
    var_1 = maybe_1.get_or_else(none_type_0)
    var_0.to_box()


def test_case_13():
    none_type_0 = None
    dict_0 = {none_type_0: none_type_0, none_type_0: none_type_0}
    bool_0 = True
    maybe_0 = module_0.Maybe(dict_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.filter(var_0)
    var_2 = var_1.to_either()
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    bytes_0 = b"cI\xda\xe0\x00\xbf\xdai$_\\\xda\x0f"
    maybe_1.filter(bytes_0)


def test_case_14():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.ap(bool_0)
    var_1 = maybe_0.ap(maybe_0)
    var_2 = var_1.bind(bool_0)
    bool_1 = var_2.__eq__(maybe_0)
    var_3 = var_0.filter(var_1)
    var_4 = var_1.to_lazy()
    bool_2 = False
    maybe_1 = module_0.Maybe(maybe_0, bool_2)
    maybe_2 = module_0.Maybe(var_1, var_1)
    var_5 = maybe_2.to_validation()
    var_6 = maybe_2.bind(var_1)
    var_7 = maybe_1.to_either()
    maybe_1.filter(bool_2)


def test_case_15():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.ap(bool_0)
    var_2 = maybe_0.bind(bool_0)
    var_3 = maybe_0.get_or_else(var_0)
    var_4 = var_1.filter(var_3)
    var_5 = var_4.to_try()
    bool_1 = False
    maybe_1 = module_0.Maybe(var_3, bool_1)
    maybe_1.filter(bool_1)


def test_case_16():
    bytes_0 = b"}jy_\xf1d\xbc%\x80S\x8a\x06\x19\xd1\xf8tT\xa7\x0e\xe4"
    bool_0 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.to_box()
    maybe_0.filter(var_0)


def test_case_17():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_try()
    var_1.to_either()


def test_case_18():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_either()
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_2 = maybe_1.to_try()
    var_1.bind(var_0)


def test_case_19():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = var_0.to_try()


def test_case_20():
    tuple_0 = ()
    maybe_0 = module_0.Maybe(tuple_0, tuple_0)
    var_0 = maybe_0.to_box()
    bool_0 = maybe_0.__eq__(maybe_0)
    var_0.bind(var_0)


def test_case_21():
    bool_0 = False
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.ap(bool_1)
    var_1 = var_0.ap(bool_1)
    var_2 = module_0.Maybe(bool_0, var_1)
    var_3 = maybe_0.to_box()
    var_4 = maybe_0.ap(var_3)
    var_5 = var_4.bind(var_3)
    bool_2 = var_5.__eq__(var_2)
    maybe_1 = module_0.Maybe(bool_1, bool_2)
    var_6 = var_1.get_or_else(maybe_1)
    var_7 = var_2.filter(var_6)
    var_8 = var_4.to_lazy()
    var_8.filter(var_3)
