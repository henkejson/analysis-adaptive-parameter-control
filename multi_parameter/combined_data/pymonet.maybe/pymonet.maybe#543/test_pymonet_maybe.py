# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import builtins as module_1


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    object_0 = module_1.object()
    bool_0 = False
    maybe_0 = module_0.Maybe(object_0, bool_0)
    bool_1 = maybe_0.__eq__(bool_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.to_try()


def test_case_3():
    float_0 = 4168.679
    maybe_0 = module_0.Maybe(float_0, float_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.map(var_0)
    var_2 = var_1.get_or_else(var_0)
    var_0.to_validation()


def test_case_4():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    maybe_0.map(bool_1)


def test_case_5():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.bind(bool_0)
    var_2 = maybe_0.to_validation()
    var_3 = maybe_0.to_try()


def test_case_6():
    bool_0 = False
    none_type_0 = None
    bool_1 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_1)
    var_0 = maybe_0.ap(bool_0)
    var_1 = var_0.to_validation()
    var_2 = var_1.to_try()


def test_case_7():
    int_0 = 573
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.get_or_else(int_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1.ap(none_type_0)


def test_case_8():
    object_0 = module_1.object()
    bool_0 = True
    maybe_0 = module_0.Maybe(object_0, bool_0)
    bool_1 = maybe_0.__eq__(bool_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.to_try()
    var_2 = maybe_0.filter(object_0)


def test_case_9():
    float_0 = -1330.3
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.filter(float_0)


def test_case_10():
    int_0 = 1450
    int_1 = 0
    maybe_0 = module_0.Maybe(int_1, int_1)
    var_0 = maybe_0.get_or_else(int_0)
    var_0.to_validation()


def test_case_11():
    str_0 = "\n        Call argument function with args in try-catch.\n        when function don't raise exception, not successfully when raise.\n\n        :params fn: function to call and store in monad\n        :type fn: Function(*args) -> A\n        :params *args:\n        :type fn: List\n        :retruns: Successfully monad Try when function don't raise exception, not successfully when raise\n        :rtype: Try[A]\n        "
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.to_validation()
    var_2 = maybe_0.filter(var_1)
    var_3 = maybe_0.filter(var_1)
    var_4 = maybe_0.to_either()
    bool_1 = maybe_0.__eq__(var_2)
    var_5 = var_2.to_try()


def test_case_12():
    complex_0 = 1784.7 + 1482.24j
    bool_0 = False
    maybe_0 = module_0.Maybe(complex_0, bool_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_box()
    bool_1 = True
    maybe_1 = module_0.Maybe(bool_1, bool_1)
    var_2 = maybe_1.to_lazy()
    var_3 = var_2.to_try()
    var_3.bind(var_1)


def test_case_13():
    str_0 = "\n        Call argument function with args in try-catch.\n        when function don't raise exception, not successfully when raise.\n\n        :params fn: function to call and store in monad\n        :type fn: Function(*args) -> A\n        :params *args:\n        :type fn: List\n        :retruns: Successfully monad Try when function don't raise exception, not successfully when raise\n        :rtype: Try[A]\n        "
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.ap(str_0)
    var_2 = maybe_0.bind(var_1)
    var_3 = maybe_0.filter(var_1)
    var_4 = var_2.to_box()
    var_5 = var_3.get_or_else(var_1)
    var_6 = var_1.ap(str_0)
    bool_1 = var_1.__eq__(var_1)
    var_7 = var_6.bind(str_0)
    none_type_0 = None
    var_0.ap(none_type_0)


def test_case_14():
    str_0 = "G\\IGJ/R<Y*hD"
    none_type_0 = None
    maybe_0 = module_0.Maybe(str_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.to_box()
    maybe_0.filter(maybe_0)


def test_case_15():
    bytes_0 = b"^\xcc\x02\xdf\xed>"
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.to_lazy()


def test_case_16():
    int_0 = 1
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.to_try()


def test_case_17():
    object_0 = module_1.object()
    bool_0 = False
    maybe_0 = module_0.Maybe(object_0, bool_0)
    var_0 = maybe_0.to_validation()
    maybe_0.filter(var_0)


def test_case_18():
    bytes_0 = b"\xb3\x1d'X\x04\x9d\x81/\x86Y?:Z\xf2N@\xb8\xe5"
    list_0 = [bytes_0, bytes_0, bytes_0]
    bool_0 = True
    maybe_0 = module_0.Maybe(list_0, bool_0)
    none_type_0 = None
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_validation()
    var_2 = var_1.to_box()
    var_2.get_or_else(none_type_0)


def test_case_19():
    str_0 = "\n        Call argument function with args in try-catch.\n        when function don't raise exception, not successfully when raise.\n\n        :params fn: function to call and store in monad\n        :type fn: Function(*args) -> A\n        :params *args:\n        :type fn: List\n        :retruns: Successfully monad Try when function don't raise exception, not successfully when raise\n        :rtype: Try[A]\n        "
    bool_0 = False
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.filter(str_0)
    var_1 = var_0.to_validation()
    var_2 = maybe_0.bind(var_1)
    var_3 = maybe_0.get_or_else(bool_0)
    var_4 = var_0.bind(bool_1)
    var_5 = var_0.to_try()
    var_6 = var_0.to_either()
    str_1 = "G\\IGJ/R<Y*hD"
    maybe_1 = module_0.Maybe(str_0, bool_0)
    none_type_0 = None
    maybe_2 = module_0.Maybe(str_1, none_type_0)
    var_7 = maybe_2.to_lazy()
    var_8 = var_7.to_either()
    maybe_2.filter(maybe_2)


def test_case_20():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    maybe_0.bind(maybe_0)


def test_case_21():
    str_0 = "\n        Call argument function with args in try-catch.\n        when function don't raise exception, not successfully when raise.\n\n        :params fn: function to call and store in monad\n        :type fn: Function(*args) -> A\n        :params *args:\n        :type fn: List\n        :retruns: Successfully monad Try when function don't raise exception, not successfully when raise\n        :rtype: Try[A]\n        "
    bool_0 = True
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_try()
    bool_2 = False
    maybe_1 = module_0.Maybe(bool_2, str_0)
    maybe_2 = module_0.Maybe(bool_0, bool_2)
    var_1 = maybe_2.to_try()
    bool_3 = maybe_1.__eq__(bool_2)
    bool_4 = maybe_0.__eq__(maybe_1)
    var_1.to_box()
