# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1


def test_case_0():
    str_0 = "]"
    maybe_0 = module_0.Maybe(str_0, str_0)


def test_case_1():
    dict_0 = {}
    maybe_0 = module_0.Maybe(dict_0, dict_0)


def test_case_2():
    int_0 = 0
    none_type_0 = None
    int_1 = 1793
    bool_0 = True
    maybe_0 = module_0.Maybe(int_1, bool_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.to_try()
    bool_1 = True
    maybe_1 = module_0.Maybe(var_0, int_1)
    var_2 = var_1.get_or_else(bool_1)
    var_3 = var_0.filter(int_1)
    bytes_0 = b"\xd4\x90m\x83=G\x07\x91hL\xfa\x9b\xf6\xfcv\x9f\xee<"
    maybe_2 = module_0.Maybe(bytes_0, none_type_0)
    var_4 = maybe_1.filter(int_0)
    var_5 = maybe_1.ap(bool_1)
    var_6 = maybe_1.get_or_else(var_0)
    bool_2 = var_5.__eq__(var_5)
    var_7 = maybe_2.to_box()
    maybe_3 = module_0.Maybe(var_0, none_type_0)
    bool_3 = True
    maybe_4 = module_0.Maybe(var_5, bool_3)
    var_8 = maybe_2.to_box()
    var_9 = var_3.get_or_else(var_8)
    var_10 = maybe_3.to_lazy()
    bool_4 = var_0.__eq__(bool_0)
    maybe_2.filter(maybe_0)


def test_case_3():
    int_0 = 0
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_try()
    bool_1 = True
    maybe_1 = module_0.Maybe(var_0, bool_1)
    var_1 = var_0.filter(bool_0)
    var_2 = maybe_1.filter(none_type_0)
    bytes_0 = b"\xd4\x90m\x83=G\x07\x91hL\xfa\x9b\xf6\xfcv\x9f\xee<"
    maybe_2 = module_0.Maybe(bytes_0, none_type_0)
    var_3 = maybe_0.to_box()
    var_4 = maybe_0.to_lazy()
    var_5 = var_4.ap(int_0)
    bool_2 = maybe_1.__eq__(bytes_0)
    var_6 = var_2.to_validation()
    var_7 = maybe_0.to_validation()
    var_7.get_or_else(bool_1)


def test_case_4():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.to_validation()
    var_2 = maybe_0.map(var_1)
    var_3 = maybe_0.get_or_else(none_type_0)
    var_4 = var_0.get_or_else(bool_0)
    var_5 = maybe_0.filter(var_1)
    var_6 = var_5.get_or_else(bool_0)
    var_7 = maybe_0.to_lazy()
    var_8 = var_5.map(maybe_0)
    var_4.to_box()


def test_case_5():
    bytes_0 = b"X\xfa#\xa3\t\xbe\xa8\x9cx\x94J6\xee\xa9\xb7\xfc\xd0E"
    none_type_0 = None
    maybe_0 = module_0.Maybe(bytes_0, none_type_0)
    var_0 = maybe_0.to_try()
    maybe_0.map(var_0)


def test_case_6():
    str_0 = "\n        Take function and call constructor function passing returned value to fn function.\n\n        It's only way to call function store in Lazy\n        :param fn: Function(constructor_fn) -> B\n        :returns: result od folder function\n        :rtype: B\n        "
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.bind(str_0)
    int_0 = -2444
    bool_0 = False
    maybe_1 = module_0.Maybe(int_0, bool_0)


def test_case_7():
    list_0 = []
    bytes_0 = b"\xd4\xfepk\\@^\xfd\x8b"
    bool_0 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    maybe_0.bind(list_0)


def test_case_8():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_try()
    var_1 = var_0.get_or_else(bool_0)
    var_2 = var_0.get_or_else(bool_0)
    var_3 = maybe_0.filter(var_1)
    var_4 = var_3.get_or_else(bool_0)
    var_5 = maybe_0.to_lazy()
    var_6 = var_5.to_box()
    var_7 = maybe_0.ap(var_0)
    var_8 = var_3.map(maybe_0)
    var_9 = maybe_0.bind(var_4)
    var_2.to_box()


def test_case_9():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.ap(none_type_0)


def test_case_10():
    none_type_0 = None
    float_0 = -1505.335
    maybe_0 = module_0.Maybe(float_0, none_type_0)
    maybe_1 = module_0.Maybe(float_0, float_0)
    var_0 = maybe_1.filter(none_type_0)
    maybe_0.filter(none_type_0)


def test_case_11():
    int_0 = 0
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.get_or_else(int_0)
    var_0.bind(none_type_0)


def test_case_12():
    bool_0 = True
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.get_or_else(bool_0)
    var_0.to_either()


def test_case_13():
    int_0 = 5578
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_try()
    var_1.to_box()


def test_case_14():
    int_0 = 739
    bytes_0 = b"\x98\x03\x82o\x0c\x99i\xf1\xdc\xcb\xb7\x18'J\xf6E"
    dict_0 = {int_0: bytes_0}
    bool_0 = False
    bool_1 = False
    maybe_0 = module_0.Maybe(dict_0, bool_1)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_box()
    var_2 = var_0.to_box()
    maybe_1 = module_0.Maybe(dict_0, bool_0)
    var_3 = maybe_1.to_validation()
    var_3.to_validation()


def test_case_15():
    dict_0 = {}
    maybe_0 = module_0.Maybe(dict_0, dict_0)
    var_0 = maybe_0.to_validation()
    var_1 = var_0.to_box()
    bool_0 = True
    maybe_1 = module_0.Maybe(var_1, bool_0)
    var_2 = maybe_1.to_box()
    var_3 = var_2.to_lazy()
    bool_1 = False
    maybe_2 = module_0.Maybe(bool_1, bool_1)
    maybe_2.bind(var_3)


def test_case_16():
    none_type_0 = None
    float_0 = -1505.335
    maybe_0 = module_0.Maybe(float_0, none_type_0)
    var_0 = maybe_0.to_box()
    generic_0 = module_1.Generic()
    maybe_1 = module_0.Maybe(float_0, float_0)
    var_1 = maybe_1.filter(none_type_0)
    maybe_0.filter(none_type_0)


def test_case_17():
    int_0 = -921
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_try()
    bool_0 = var_0.__eq__(var_1)
    var_1.filter(var_1)


def test_case_18():
    bytes_0 = b"\xd2\x17\xbf\x9d\x10H\xe0ja\xa3\x0c\xf5\n"
    none_type_0 = None
    int_0 = 1815
    maybe_0 = module_0.Maybe(bytes_0, int_0)
    var_0 = maybe_0.to_try()
    bool_0 = True
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    var_1 = maybe_1.filter(none_type_0)
    var_2 = var_1.filter(var_0)
    maybe_2 = module_0.Maybe(bytes_0, none_type_0)
    var_3 = maybe_2.to_box()
    var_4 = maybe_2.to_lazy()
    var_5 = var_4.ap(none_type_0)
    bool_1 = var_3.__eq__(none_type_0)
    var_6 = maybe_2.to_validation()
    var_6.to_validation()


def test_case_19():
    none_type_0 = None
    float_0 = -1505.335
    maybe_0 = module_0.Maybe(float_0, none_type_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.to_box()
    var_2 = var_1.to_either()
    maybe_1 = module_0.Maybe(float_0, float_0)
    var_3 = maybe_1.filter(none_type_0)
    var_4 = var_3.to_try()
    maybe_0.filter(var_2)


def test_case_20():
    none_type_0 = None
    float_0 = -1505.335
    maybe_0 = module_0.Maybe(float_0, none_type_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.to_box()
    var_2 = var_1.to_either()
    generic_0 = module_1.Generic()
    maybe_1 = module_0.Maybe(float_0, float_0)
    var_3 = maybe_1.filter(none_type_0)
    maybe_0.filter(var_2)


def test_case_21():
    int_0 = 0
    maybe_0 = module_0.Maybe(int_0, int_0)
    none_type_0 = None
    var_0 = maybe_0.to_lazy()
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = maybe_1.__eq__(maybe_1)
    var_1 = maybe_1.to_box()
    maybe_1.bind(var_1)


def test_case_22():
    bytes_0 = b"\xd2\x17\xbf\x9d\x10H\xe0ja\xa3\x0c\xf5\n"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    none_type_0 = None
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.filter(none_type_0)
    maybe_1 = module_0.Maybe(var_1, var_0)
    bool_0 = maybe_1.__eq__(var_1)
    var_2 = maybe_0.to_box()
    var_3 = var_0.bind(maybe_0)
    var_4 = var_1.ap(maybe_0)
    var_3.to_box()


def test_case_23():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_validation()
    var_2 = var_1.to_either()
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_3 = maybe_1.to_box()
    var_3.ap(none_type_0)
