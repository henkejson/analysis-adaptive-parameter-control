# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import enum as module_0
import py_backwards.utils.helpers as module_1
import re as module_2
import builtins as module_3


def test_case_0():
    enum_dict_0 = module_0._EnumDict()
    none_type_0 = module_1.debug(enum_dict_0)


def test_case_1():
    variables_generator_0 = module_1.VariablesGenerator()


def test_case_2():
    tuple_0 = ()
    callable_0 = module_1.eager(tuple_0)
    none_type_0 = None
    none_type_1 = module_1.debug(none_type_0)
    module_2.compile(none_type_0, none_type_0)


def test_case_3():
    bytes_0 = b"\xc3z\x06X\xc0B\x16\xe4e"
    variables_generator_0 = module_1.VariablesGenerator()
    none_type_0 = module_1.warn(bytes_0)
    none_type_1 = module_1.debug(bytes_0)
    str_0 = "&b>l'SJvcVih.iFHMp$"
    none_type_2 = module_1.warn(str_0)
    module_1.get_source(bytes_0)


def test_case_4():
    bytes_0 = b"=\xb2\xc2tq\xb1\xee\xa1\xc3\xf9\x93"
    none_type_0 = module_1.warn(bytes_0)


def test_case_5():
    base_exception_0 = module_3.BaseException()
    variables_generator_0 = module_1.VariablesGenerator()
    callable_0 = module_1.eager(base_exception_0)
    callable_0.__call__(base_exception_0, base_exception_0, type=base_exception_0)
