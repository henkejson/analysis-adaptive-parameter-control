# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import py_backwards.utils.helpers as module_0
import re as module_1
import py_backwards.exceptions as module_2


def test_case_0():
    str_0 = "s/4ftB8xo/"
    none_type_0 = module_0.debug(str_0)


def test_case_1():
    variables_generator_0 = module_0.VariablesGenerator()


def test_case_2():
    str_0 = "s/4ftB8xo/"
    none_type_0 = module_1.finditer(str_0, str_0)
    none_type_1 = module_0.debug(none_type_0)
    callable_0 = module_0.eager(none_type_0)


def test_case_3():
    variables_generator_0 = module_0.VariablesGenerator()
    module_0.get_source(variables_generator_0)


def test_case_4():
    str_0 = "s/4ftB8xo/"
    none_type_0 = module_0.warn(str_0)


def test_case_5():
    none_type_0 = None
    callable_0 = module_0.eager(none_type_0)
    callable_1 = module_0.eager(none_type_0)
    str_0 = "HTTPErrorProcessor"
    none_type_1 = module_0.warn(str_0)
    callable_2 = module_0.eager(callable_0)
    callable_3 = module_0.eager(callable_1)
    callable_4 = module_0.eager(callable_0)
    bool_0 = False
    tuple_0 = (bool_0,)
    bool_1 = True
    transformation_error_0 = module_2.TransformationError(
        tuple_0, bool_1, bool_0, str_0
    )
    callable_1.__call__(transformation_error_0, none_type_0, start=callable_3)
