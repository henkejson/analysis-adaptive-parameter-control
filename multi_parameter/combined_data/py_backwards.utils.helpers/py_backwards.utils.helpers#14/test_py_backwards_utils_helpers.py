# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import py_backwards.utils.helpers as module_0
import re as module_1


def test_case_0():
    bytes_0 = b"M\x1a\x9d\x08\xe1\x97X@"
    none_type_0 = module_0.debug(bytes_0)


def test_case_1():
    variables_generator_0 = module_0.VariablesGenerator()


def test_case_2():
    variables_generator_0 = module_0.VariablesGenerator()
    callable_0 = module_0.eager(variables_generator_0)
    list_0 = []
    dict_0 = {}
    variables_generator_1 = module_0.VariablesGenerator(*list_0, **dict_0)


def test_case_3():
    complex_0 = -2839.781 - 1216.89176j
    set_0 = {complex_0, complex_0, complex_0, complex_0}
    module_0.get_source(set_0)


def test_case_4():
    str_0 = "Request"
    none_type_0 = module_0.warn(str_0)
    module_1.match(none_type_0, none_type_0)


def test_case_5():
    none_type_0 = None
    none_type_1 = module_0.debug(none_type_0)
    callable_0 = module_0.eager(none_type_1)
    str_0 = "83Qr'"
    none_type_2 = None
    regex_flag_0 = module_1.RegexFlag.VERBOSE
    none_type_3 = module_0.debug(regex_flag_0)
    none_type_4 = module_0.debug(callable_0)
    variables_generator_0 = module_0.VariablesGenerator()
    callable_1 = module_0.eager(none_type_2)
    callable_1.__call__(str_0, str_0)
