# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.helpers as module_0
import inspect as module_1


def test_case_0():
    str_0 = "^81"
    module_0.has_message_body(str_0)


def test_case_1():
    complex_0 = 532.3054 + 1759.99j
    set_0 = {complex_0, complex_0, complex_0, complex_0}
    module_0.remove_entity_headers(set_0, set_0)


def test_case_2():
    dict_0 = {}
    var_0 = module_0.remove_entity_headers(dict_0)
    module_0.has_message_body(var_0)


def test_case_3():
    bool_0 = module_0.is_atty()


def test_case_4():
    bool_0 = module_0.is_atty()
    dict_0 = {bool_0: bool_0}
    module_0.remove_entity_headers(dict_0)


def test_case_5():
    str_0 = "F\n+u`GNfc$>K*$="
    bool_0 = module_0.is_atty()
    var_0 = module_0.is_hop_by_hop_header(str_0)
    var_1 = var_0.__repr__()
    dict_0 = {}
    module_0.is_entity_header(dict_0)


def test_case_6():
    float_0 = -316.0
    default_0 = module_0.Default()
    str_0 = default_0.__str__()
    module_0.import_string(float_0)


def test_case_7():
    bool_0 = module_0.is_atty()
    dict_0 = {bool_0: bool_0}
    int_0 = 176
    var_0 = module_0.has_message_body(int_0)
    module_0.remove_entity_headers(dict_0)


def test_case_8():
    bool_0 = module_0.is_atty()
    var_0 = module_0.has_message_body(bool_0)
    default_0 = module_0.Default()


def test_case_9():
    bool_0 = module_0.is_atty()
    var_0 = module_0.has_message_body(bool_0)
    dict_0 = {}
    str_0 = var_0.__str__()
    int_0 = 204
    var_1 = module_0.has_message_body(int_0)
    var_2 = module_0.remove_entity_headers(dict_0)
    bool_1 = False
    str_1 = var_2.__str__()
    var_3 = module_0.has_message_body(bool_1)
    var_4 = module_0.has_message_body(var_1)
    str_2 = var_0.__str__()
    var_5 = module_1.ismodule(var_2)
    module_0.is_entity_header(int_0)


def test_case_10():
    str_0 = "Lfv{;,DBU 'b>"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.remove_entity_headers(dict_0, str_0)
