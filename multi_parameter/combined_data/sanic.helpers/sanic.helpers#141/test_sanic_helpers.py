# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.helpers as module_0
import inspect as module_1


def test_case_0():
    int_0 = -1115
    var_0 = module_0.has_message_body(int_0)


def test_case_1():
    bool_0 = False
    module_0.remove_entity_headers(bool_0)


def test_case_2():
    bool_0 = module_0.is_atty()


def test_case_3():
    default_0 = module_0.Default()


def test_case_4():
    bool_0 = module_0.is_atty()
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.remove_entity_headers(dict_0)


def test_case_5():
    int_0 = 207
    var_0 = module_0.has_message_body(int_0)
    module_0.is_hop_by_hop_header(var_0)


def test_case_6():
    default_0 = module_0.Default()
    str_0 = default_0.__str__()
    default_1 = module_0.Default()
    var_0 = default_0.__repr__()
    default_2 = module_0.Default()


def test_case_7():
    int_0 = 207
    var_0 = module_0.has_message_body(int_0)


def test_case_8():
    str_0 = "g}fn{:.iq,w|K.F3-"
    dict_0 = {str_0: str_0}
    var_0 = module_0.remove_entity_headers(dict_0)


def test_case_9():
    bool_0 = module_0.is_atty()
    bool_1 = module_0.is_atty()
    bytes_0 = b"\xaa\xa8\xc8\x7f\x11\xf7\xab\x05\xac\x80\x98\x070s\xab\xc9\xee\xfa\x1c:"
    dict_0 = {bytes_0: bytes_0}
    str_0 = dict_0.__str__()
    var_0 = module_0.remove_entity_headers(dict_0, dict_0)
    default_0 = module_0.Default()
    dict_1 = {}
    var_1 = module_1.ismodule(var_0)
    str_1 = var_1.__str__()
    var_2 = dict_0.__repr__()
    var_3 = var_1.__repr__()
    var_4 = module_0.has_message_body(var_1)
    var_5 = module_1.ismodule(str_1)
    var_6 = var_4.__repr__()
    var_7 = module_0.remove_entity_headers(dict_1)
    var_8 = module_0.remove_entity_headers(dict_1, dict_1)
    var_9 = var_6.__repr__()
    default_1 = module_0.Default()
    var_10 = default_1.__repr__()
    var_11 = var_0.__repr__()
    var_12 = module_0.remove_entity_headers(var_8)
    var_13 = module_1.ismodule(var_12)
    var_14 = module_1.ismodule(var_5)
    int_0 = 304
    var_15 = var_13.__repr__()
    var_16 = module_0.has_message_body(int_0)
    str_2 = default_1.__str__()
    module_0.is_entity_header(var_12)
