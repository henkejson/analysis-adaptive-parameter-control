# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.helpers as module_0


def test_case_0():
    bool_0 = module_0.is_atty()
    var_0 = module_0.has_message_body(bool_0)


def test_case_1():
    none_type_0 = None
    module_0.remove_entity_headers(none_type_0)


def test_case_2():
    bool_0 = module_0.is_atty()


def test_case_3():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.remove_entity_headers(dict_0)


def test_case_4():
    bool_0 = False
    str_0 = ".Dc%+\x0cEHab[ohK~`*&"
    bool_1 = False
    dict_0 = {str_0: bool_0, bool_0: bool_0, bool_1: bool_0}
    tuple_0 = (bool_0,)
    tuple_1 = (bool_0, str_0, dict_0, tuple_0)
    module_0.is_hop_by_hop_header(tuple_1)


def test_case_5():
    default_0 = module_0.Default()
    str_0 = default_0.__str__()
    var_0 = default_0.__repr__()
    var_1 = var_0.__repr__()
    bool_0 = module_0.is_atty()
    var_2 = default_0.__repr__()
    var_3 = default_0.__repr__()
    var_4 = module_0.is_entity_header(var_2)
    str_1 = bool_0.__str__()
    str_2 = default_0.__str__()
    str_3 = "\n        Gather the listeners to fire on server start.\n        Because we are using a third-party server and not Sanic server, we do\n        not have access to fire anything BEFORE the server starts.\n        Therefore, we fire before_server_start and after_server_start\n        in sequence since the ASGI lifespan protocol only supports a single\n        startup event.\n        "
    module_0.has_message_body(str_3)


def test_case_6():
    int_0 = 203
    var_0 = module_0.has_message_body(int_0)


def test_case_7():
    bytes_0 = b'";\\\x7f'
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    var_0 = module_0.remove_entity_headers(dict_0)


def test_case_8():
    bytes_0 = b"\xd5\xf0J\xb4\x96bY\x96$"
    var_0 = module_0.is_entity_header(bytes_0)
    var_1 = module_0.is_entity_header(bytes_0)
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    var_2 = module_0.remove_entity_headers(dict_0)
    bool_0 = True
    var_3 = module_0.has_message_body(bool_0)
    var_4 = module_0.has_message_body(var_3)
    int_0 = 204
    var_5 = module_0.has_message_body(int_0)
    bool_1 = module_0.is_atty()
    str_0 = var_0.__str__()
    var_6 = module_0.has_message_body(var_3)
    str_1 = var_6.__str__()
    str_2 = var_2.__str__()
    module_0.is_hop_by_hop_header(bool_0)
