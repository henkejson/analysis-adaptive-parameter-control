# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.helpers as module_0
import inspect as module_1


def test_case_0():
    int_0 = 754
    set_0 = {int_0, int_0}
    module_0.has_message_body(set_0)


def test_case_1():
    str_0 = "RB"
    dict_0 = {str_0: str_0}
    var_0 = module_0.remove_entity_headers(dict_0)


def test_case_2():
    bool_0 = module_0.is_atty()


def test_case_3():
    none_type_0 = None
    module_0.is_hop_by_hop_header(none_type_0)


def test_case_4():
    default_0 = module_0.Default()
    bool_0 = module_0.is_atty()
    module_0.remove_entity_headers(default_0, bool_0)


def test_case_5():
    str_0 = ""
    default_0 = module_0.Default(*str_0)
    str_1 = "logging.StreamHandler"
    var_0 = module_0.import_string(str_1, str_1)
    var_1 = default_0.__repr__()
    bool_0 = module_0.is_atty()


def test_case_6():
    str_0 = ""
    default_0 = module_0.Default(*str_0)
    str_1 = "logging.StreamHandler"
    str_2 = default_0.__str__()
    var_0 = module_0.import_string(str_1, str_1)
    bool_0 = module_0.is_atty()


def test_case_7():
    int_0 = 184
    var_0 = module_0.has_message_body(int_0)
    bool_0 = module_0.is_atty()
    var_1 = module_0.has_message_body(bool_0)
    str_0 = var_1.__str__()
    str_1 = var_1.__str__()
    str_2 = var_0.__str__()
    var_2 = var_1.__repr__()
    dict_0 = {str_1: bool_0, bool_0: var_2, var_1: bool_0, int_0: var_2, str_1: var_0}
    module_0.remove_entity_headers(dict_0)


def test_case_8():
    bool_0 = module_0.is_atty()
    var_0 = module_0.has_message_body(bool_0)
    dict_0 = {}
    module_0.is_hop_by_hop_header(dict_0)


def test_case_9():
    str_0 = "logging.StreamHandler"
    var_0 = module_0.import_string(str_0, str_0)


def test_case_10():
    int_0 = 204
    bool_0 = module_0.is_atty()
    var_0 = module_1.ismodule(int_0)
    var_1 = module_0.has_message_body(int_0)
    var_2 = module_0.has_message_body(var_1)
    default_0 = module_0.Default()
    bool_1 = module_0.is_atty()
    bool_2 = module_0.is_atty()
    module_0.import_string(default_0)
