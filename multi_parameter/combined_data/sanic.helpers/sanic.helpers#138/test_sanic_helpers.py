# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.helpers as module_0


def test_case_0():
    bool_0 = True
    var_0 = module_0.has_message_body(bool_0)


def test_case_1():
    bool_0 = False
    module_0.remove_entity_headers(bool_0)


def test_case_2():
    bool_0 = module_0.is_atty()


def test_case_3():
    default_0 = module_0.Default()


def test_case_4():
    str_0 = "\n        Close the connection if a request is not being sent or received\n\n        :return: boolean - True if closed, false if staying open\n        "
    var_0 = module_0.is_entity_header(str_0)


def test_case_5():
    bool_0 = module_0.is_atty()
    module_0.is_hop_by_hop_header(bool_0)


def test_case_6():
    int_0 = 100
    var_0 = module_0.has_message_body(int_0)
    default_0 = module_0.Default()
    str_0 = default_0.__str__()


def test_case_7():
    bool_0 = module_0.is_atty()
    var_0 = bool_0.__repr__()
    dict_0 = {
        var_0: var_0,
        var_0: bool_0,
        var_0: var_0,
        var_0: bool_0,
        var_0: var_0,
        var_0: var_0,
    }
    var_1 = module_0.remove_entity_headers(dict_0)


def test_case_8():
    int_0 = 236
    str_0 = module_0.has_message_body(int_0)


def test_case_9():
    int_0 = 304
    var_0 = module_0.has_message_body(int_0)
    str_0 = var_0.__str__()
    str_1 = var_0.__str__()
    bool_0 = module_0.is_atty()
    default_0 = module_0.Default()
    var_1 = module_0.has_message_body(bool_0)
    var_2 = default_0.__repr__()
    var_3 = module_0.has_message_body(var_1)
    dict_0 = {
        var_2: default_0,
        var_1: bool_0,
        var_1: var_2,
        var_3: bool_0,
        var_2: default_0,
        var_3: var_1,
    }
    str_2 = var_0.__str__()
    str_3 = default_0.__str__()
    dict_1 = {}
    module_0.remove_entity_headers(dict_0, dict_1)
