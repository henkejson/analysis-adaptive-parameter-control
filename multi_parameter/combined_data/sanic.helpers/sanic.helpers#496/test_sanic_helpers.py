# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.helpers as module_0
import builtins as module_1


def test_case_0():
    bool_0 = module_0.is_atty()
    var_0 = module_0.has_message_body(bool_0)


def test_case_1():
    default_0 = module_0.Default()
    module_0.remove_entity_headers(default_0)


def test_case_2():
    list_0 = []
    module_0.remove_entity_headers(list_0, list_0)


def test_case_3():
    bytes_0 = b"d\xaf,\x0fJ\xd7#\x88\x15z\xf5\xec\x95\xc0\xf1\x01>\xb5"
    dict_0 = {bytes_0: bytes_0}
    var_0 = module_0.remove_entity_headers(dict_0)


def test_case_4():
    bool_0 = module_0.is_atty()


def test_case_5():
    object_0 = module_1.object()
    module_0.is_hop_by_hop_header(object_0)


def test_case_6():
    default_0 = module_0.Default()
    var_0 = default_0.__repr__()


def test_case_7():
    default_0 = module_0.Default()
    str_0 = default_0.__str__()
    var_0 = default_0.__repr__()
    var_1 = default_0.__repr__()
    var_2 = default_0.__repr__()


def test_case_8():
    int_0 = 206
    var_0 = module_0.has_message_body(int_0)


def test_case_9():
    bool_0 = module_0.is_atty()
    str_0 = "content-type"
    dict_0 = {str_0: bool_0, str_0: bool_0}
    var_0 = module_0.remove_entity_headers(dict_0)
    bool_1 = module_0.is_atty()
    str_1 = var_0.__str__()
    bool_2 = module_0.is_atty()


def test_case_10():
    bool_0 = module_0.is_atty()
    str_0 = "Content-Length"
    int_0 = 304
    var_0 = module_0.has_message_body(int_0)
    var_1 = module_0.has_message_body(bool_0)
    dict_0 = {str_0: bool_0}
    var_2 = module_0.remove_entity_headers(dict_0)
    module_0.is_hop_by_hop_header(var_0)


def test_case_11():
    bool_0 = module_0.is_atty()
    bytes_0 = b"*t\xf6R\xe1\xf8"
    str_0 = "Content-Length"
    var_0 = module_0.has_message_body(bool_0)
    var_1 = module_0.has_message_body(bool_0)
    dict_0 = {str_0: bool_0}
    var_2 = module_0.remove_entity_headers(dict_0)
    var_3 = module_0.is_hop_by_hop_header(bytes_0)
    str_1 = module_0.remove_entity_headers(dict_0, dict_0)
    module_0.is_entity_header(bool_0)
