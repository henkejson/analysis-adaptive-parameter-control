# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.helpers as module_0


def test_case_0():
    none_type_0 = None
    module_0.has_message_body(none_type_0)


def test_case_1():
    bytes_0 = b"\xc7U1\x93TsG\xbet\xec\x10\x10\xf6\xc69\xa5G\x80 "
    dict_0 = {bytes_0: bytes_0}
    var_0 = module_0.remove_entity_headers(dict_0)


def test_case_2():
    bool_0 = module_0.is_atty()


def test_case_3():
    bytes_0 = b"xk*Z\xe3\xe3+\xcf\x8c"
    var_0 = module_0.is_entity_header(bytes_0)
    var_1 = var_0.__repr__()


def test_case_4():
    none_type_0 = None
    module_0.is_hop_by_hop_header(none_type_0)


def test_case_5():
    bool_0 = module_0.is_atty()
    default_0 = module_0.Default()
    int_0 = 12
    var_0 = default_0.__repr__()
    var_1 = module_0.has_message_body(int_0)


def test_case_6():
    bool_0 = True
    var_0 = module_0.has_message_body(bool_0)


def test_case_7():
    default_0 = module_0.Default()
    str_0 = default_0.__str__()
    dict_0 = {str_0: str_0}
    var_0 = module_0.remove_entity_headers(dict_0, dict_0)
    str_1 = var_0.__str__()


def test_case_8():
    bool_0 = module_0.is_atty()
    int_0 = 72
    default_0 = module_0.Default()
    var_0 = module_0.has_message_body(int_0)
    int_1 = 156
    var_1 = module_0.has_message_body(int_1)


def test_case_9():
    default_0 = module_0.Default()
    var_0 = default_0.__repr__()
    bool_0 = module_0.is_atty()
    str_0 = default_0.__str__()
    var_1 = default_0.__repr__()
    dict_0 = {str_0: str_0, var_1: default_0}
    var_2 = module_0.is_hop_by_hop_header(str_0)
    var_3 = module_0.remove_entity_headers(dict_0, dict_0)
    var_4 = var_0.__repr__()
    var_5 = var_3.__repr__()
    int_0 = 72
    var_6 = default_0.__repr__()
    var_7 = module_0.has_message_body(int_0)
    str_1 = bool_0.__str__()
    default_1 = module_0.Default()
    int_1 = 204
    var_8 = module_0.has_message_body(int_1)
    var_9 = module_0.is_hop_by_hop_header(var_5)
    module_0.is_hop_by_hop_header(var_2)
