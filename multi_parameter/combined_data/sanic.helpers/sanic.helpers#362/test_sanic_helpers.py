# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.helpers as module_0


def test_case_0():
    none_type_0 = None
    module_0.has_message_body(none_type_0)


def test_case_1():
    bool_0 = module_0.is_atty()
    none_type_0 = None
    module_0.remove_entity_headers(none_type_0)


def test_case_2():
    bool_0 = module_0.is_atty()


def test_case_3():
    float_0 = 214.608
    module_0.is_entity_header(float_0)


def test_case_4():
    float_0 = -1038.3242
    module_0.is_hop_by_hop_header(float_0)


def test_case_5():
    default_0 = module_0.Default()
    float_0 = 214.608
    str_0 = default_0.__str__()
    var_0 = module_0.has_message_body(float_0)


def test_case_6():
    bool_0 = module_0.is_atty()
    var_0 = module_0.has_message_body(bool_0)


def test_case_7():
    str_0 = "A helper to load application instances.\n\n    Generally used by the worker to load the application instance.\n\n    See [Dynamic Applications](/en/guide/deployment/app-loader) for information on when you may need to use this.\n\n    Args:\n        module_input (str): The module to load the application from.\n        as_factory (bool): Whether the application is a factory.\n        as_simple (bool): Whether the application is a simple server.\n        args (Any): Arguments to pass to the application factory.\n        factory (Callable[[], SanicApp]): A callable that returns a Sanic application instance.\n    "
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.remove_entity_headers(dict_0)


def test_case_8():
    float_0 = 214.608
    var_0 = module_0.has_message_body(float_0)


def test_case_9():
    bool_0 = module_0.is_atty()
    float_0 = 204.0
    var_0 = module_0.has_message_body(float_0)
    module_0.is_entity_header(var_0)
