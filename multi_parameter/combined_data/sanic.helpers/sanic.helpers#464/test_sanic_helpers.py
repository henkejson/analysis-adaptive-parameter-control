# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.helpers as module_0


def test_case_0():
    int_0 = 228
    var_0 = module_0.has_message_body(int_0)


def test_case_1():
    dict_0 = {}
    var_0 = module_0.remove_entity_headers(dict_0)


def test_case_2():
    bool_0 = module_0.is_atty()


def test_case_3():
    bool_0 = module_0.is_atty()
    module_0.is_entity_header(bool_0)


def test_case_4():
    none_type_0 = None
    module_0.is_hop_by_hop_header(none_type_0)


def test_case_5():
    default_0 = module_0.Default()
    var_0 = default_0.__repr__()
    str_0 = default_0.__str__()


def test_case_6():
    bool_0 = module_0.is_atty()
    bool_1 = module_0.is_atty()
    var_0 = module_0.has_message_body(bool_1)
    float_0 = 1.1
    module_0.is_hop_by_hop_header(float_0)


def test_case_7():
    str_0 = "TbTEppTM"
    dict_0 = {str_0: str_0}
    var_0 = module_0.remove_entity_headers(dict_0)


def test_case_8():
    str_0 = "Content-Type"
    dict_0 = {str_0: str_0, str_0: str_0}
    var_0 = module_0.remove_entity_headers(dict_0)


def test_case_9():
    str_0 = "+/i/]:05L{Gc "
    dict_0 = {str_0: str_0, str_0: str_0}
    default_0 = module_0.Default()
    str_1 = default_0.__str__()
    str_2 = default_0.__str__()
    var_0 = module_0.remove_entity_headers(dict_0)
    str_3 = 'A representation of a HTTP cookie, providing an interface to manipulate cookie attributes intended for a response.\n\n    This class is a simplified representation of a cookie, similar to the Morsel SimpleCookie in Python\'s standard library.\n    It allows the manipulation of various cookie attributes including path, domain, security settings, and others.\n\n    Several "smart defaults" are provided to make it easier to create cookies that are secure by default. These include:\n\n    - Setting the `secure` flag to `True` by default\n    - Setting the `samesite` flag to `Lax` by default\n\n    Args:\n        key (str): The key (name) of the cookie.\n        value (str): The value of the cookie.\n        path (str, optional): The path for the cookie. Defaults to "/".\n        domain (Optional[str], optional): The domain for the cookie.\n            Defaults to `None`.\n        secure (bool, optional): Whether the cookie is secure.\n            Defaults to `True`.\n        max_age (Optional[int], optional): The maximum age of the cookie\n            in seconds. Defaults to `None`.\n        expires (Optional[datetime], optional): The expiration date of the\n            cookie. Defaults to `None`.\n        httponly (bool, optional): HttpOnly flag for the cookie.\n            Defaults to `False`.\n        samesite (Optional[SameSite], optional): The SameSite attribute for\n            the cookie. Defaults to `"Lax"`.\n        partitioned (bool, optional): Whether the cookie is partitioned.\n            Defaults to `False`.\n        comment (Optional[str], optional): A comment for the cookie.\n            Defaults to `None`.\n        host_prefix (bool, optional): Whether to use the host prefix.\n            Defaults to `False`.\n        secure_prefix (bool, optional): Whether to use the secure prefix.\n            Defaults to `False`.\n    '
    var_1 = module_0.is_entity_header(str_3)
    var_2 = default_0.__repr__()
    dict_1 = {}
    var_3 = module_0.remove_entity_headers(dict_1)
    bool_0 = True
    str_4 = var_3.__str__()
    var_4 = module_0.has_message_body(bool_0)
    var_5 = var_0.__repr__()
    bool_1 = module_0.is_atty()
    var_6 = var_5.__repr__()
    var_7 = var_4.__repr__()
    int_0 = 204
    var_8 = module_0.has_message_body(int_0)
    module_0.is_hop_by_hop_header(var_4)


def test_case_10():
    bool_0 = module_0.is_atty()
    str_0 = "Content-Type"
    dict_0 = {str_0: str_0, str_0: str_0}
    default_0 = module_0.Default()
    var_0 = module_0.remove_entity_headers(dict_0)
    var_1 = module_0.is_entity_header(str_0)
    var_2 = default_0.__repr__()
    var_3 = module_0.remove_entity_headers(dict_0, dict_0)
    str_1 = default_0.__str__()
    str_2 = var_0.__str__()
    var_4 = module_0.has_message_body(var_1)
    var_5 = var_4.__repr__()
    module_0.has_message_body(var_5)


def test_case_11():
    str_0 = "logging.StreamHandler"
    var_0 = module_0.import_string(str_0)
    str_1 = var_0.__str__()
