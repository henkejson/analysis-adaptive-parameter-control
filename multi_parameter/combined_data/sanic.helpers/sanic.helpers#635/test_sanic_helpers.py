# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.helpers as module_0
import inspect as module_1


def test_case_0():
    int_0 = 164
    tuple_0 = (int_0,)
    module_0.has_message_body(tuple_0)


def test_case_1():
    bool_0 = True
    var_0 = module_0.has_message_body(bool_0)
    var_1 = var_0.__repr__()
    module_0.remove_entity_headers(var_1, var_1)


def test_case_2():
    bool_0 = module_0.is_atty()


def test_case_3():
    none_type_0 = None
    module_0.is_entity_header(none_type_0)


def test_case_4():
    int_0 = 793
    module_0.is_hop_by_hop_header(int_0)


def test_case_5():
    int_0 = -955
    module_0.remove_entity_headers(int_0, int_0)


def test_case_6():
    bool_0 = module_0.is_atty()
    default_0 = module_0.Default()
    str_0 = default_0.__str__()


def test_case_7():
    int_0 = 164
    tuple_0 = module_0.has_message_body(int_0)
    var_0 = module_0.has_message_body(tuple_0)
    str_0 = var_0.__str__()


def test_case_8():
    default_0 = module_0.Default()
    str_0 = "eB"
    dict_0 = {str_0: default_0}
    var_0 = module_0.remove_entity_headers(dict_0)


def test_case_9():
    default_0 = module_0.Default()
    str_0 = default_0.__str__()
    bool_0 = False
    var_0 = module_0.has_message_body(bool_0)
    var_1 = var_0.__repr__()
    var_2 = module_0.is_hop_by_hop_header(str_0)
    var_3 = default_0.__repr__()
    str_1 = var_0.__str__()
    bool_1 = module_0.is_atty()
    var_4 = var_1.__repr__()
    dict_0 = {str_1: str_1, str_1: bool_1, var_4: var_4}
    var_5 = module_0.remove_entity_headers(dict_0)
    str_2 = var_4.__str__()
    var_6 = module_1.ismodule(var_2)
    str_3 = var_6.__str__()
    var_7 = module_0.is_entity_header(var_3)
    int_0 = 198
    var_8 = module_0.has_message_body(int_0)
    var_9 = var_3.__repr__()
    int_1 = 304
    var_10 = module_0.has_message_body(int_1)
    default_1 = module_0.Default()
    str_4 = default_1.__str__()
    bool_2 = module_0.is_atty()
    module_0.import_string(var_6, var_0)
