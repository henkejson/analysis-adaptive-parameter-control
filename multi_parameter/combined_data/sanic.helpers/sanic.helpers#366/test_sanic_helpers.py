# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.helpers as module_0
import builtins as module_1
import inspect as module_2


def test_case_0():
    int_0 = 25
    var_0 = module_0.has_message_body(int_0)
    var_1 = var_0.__repr__()


def test_case_1():
    default_0 = module_0.Default()
    module_0.remove_entity_headers(default_0)


def test_case_2():
    bool_0 = module_0.is_atty()


def test_case_3():
    default_0 = module_0.Default()


def test_case_4():
    default_0 = module_0.Default()
    bytes_0 = b"I'm a teapot"
    var_0 = module_0.is_entity_header(bytes_0)


def test_case_5():
    object_0 = module_1.object()
    module_0.is_hop_by_hop_header(object_0)


def test_case_6():
    default_0 = module_0.Default()
    str_0 = default_0.__str__()


def test_case_7():
    bool_0 = module_0.is_atty()
    int_0 = 159
    var_0 = module_0.has_message_body(int_0)
    var_1 = var_0.__repr__()


def test_case_8():
    str_0 = "reuse_port"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.remove_entity_headers(dict_0)


def test_case_9():
    int_0 = 204
    var_0 = module_0.has_message_body(int_0)
    var_1 = module_2.ismodule(var_0)
    default_0 = module_0.Default()
    bool_0 = module_0.is_atty()
    bool_1 = True
    str_0 = default_0.__str__()
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    var_2 = module_0.has_message_body(bool_1)
    var_3 = var_2.__repr__()
    var_4 = module_0.is_entity_header(var_3)
    bool_2 = module_0.is_atty()
    var_5 = var_4.__repr__()
    var_6 = module_2.ismodule(list_0)
    var_7 = var_2.__repr__()
    var_8 = var_2.__repr__()
    str_1 = default_0.__str__()
    var_9 = var_2.__repr__()
    str_2 = var_0.__str__()
    dict_0 = {var_8: var_2, var_9: var_3, var_8: var_8}
    var_10 = module_0.remove_entity_headers(dict_0)
    var_11 = module_0.is_hop_by_hop_header(var_8)
    var_12 = module_0.is_hop_by_hop_header(str_2)
    bool_3 = False
    module_0.is_hop_by_hop_header(bool_3)
