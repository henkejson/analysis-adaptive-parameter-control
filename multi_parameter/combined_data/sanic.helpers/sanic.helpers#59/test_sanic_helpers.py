# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.helpers as module_0
import inspect as module_1


def test_case_0():
    none_type_0 = None
    module_0.has_message_body(none_type_0)


def test_case_1():
    str_0 = "Y?|FxK>K"
    dict_0 = {str_0: str_0}
    var_0 = module_0.remove_entity_headers(dict_0)


def test_case_2():
    bool_0 = module_0.is_atty()


def test_case_3():
    str_0 = "HTTP/"
    var_0 = module_0.is_entity_header(str_0)


def test_case_4():
    bytes_0 = b"\x0f-F"
    var_0 = module_0.is_hop_by_hop_header(bytes_0)
    var_1 = var_0.__repr__()
    bool_0 = module_0.is_atty()
    module_0.remove_entity_headers(var_0, bytes_0)


def test_case_5():
    int_0 = 418
    var_0 = module_0.has_message_body(int_0)
    var_1 = module_0.Default()
    var_2 = var_0.__repr__()
    var_3 = var_2.__repr__()
    str_0 = var_1.__str__()
    var_4 = var_2.__repr__()
    var_5 = int_0.__repr__()


def test_case_6():
    int_0 = 502
    var_0 = module_0.has_message_body(int_0)
    var_1 = module_1.ismodule(var_0)
    var_2 = var_1.__repr__()
    bool_0 = module_0.is_atty()


def test_case_7():
    bool_0 = module_0.is_atty()
    var_0 = module_0.has_message_body(bool_0)
    str_0 = var_0.__str__()
    bool_1 = module_0.is_atty()


def test_case_8():
    int_0 = 304
    var_0 = module_0.has_message_body(int_0)
    bytes_0 = b"\xae\x9f\xb1\xcc"
    var_1 = module_1.ismodule(bytes_0)
    var_2 = module_0.has_message_body(var_1)
    str_0 = "Cannot write to websocket interface after it is finished."
    var_3 = module_0.has_message_body(var_2)
    dict_0 = {str_0: str_0, str_0: bytes_0, str_0: str_0}
    var_4 = module_0.remove_entity_headers(dict_0, dict_0)
    bool_0 = module_0.is_atty()
    module_0.is_hop_by_hop_header(var_4)


def test_case_9():
    str_0 = "logging.StreamHandler"
    var_0 = module_0.import_string(str_0)


def test_case_10():
    int_0 = 303
    var_0 = module_0.has_message_body(int_0)
    bytes_0 = b"Expectation Failed"
    var_1 = module_1.ismodule(bytes_0)
    var_2 = module_0.has_message_body(var_1)
    str_0 = "extension-header"
    var_3 = module_0.has_message_body(var_2)
    dict_0 = {str_0: str_0, str_0: bytes_0, str_0: str_0}
    str_1 = var_0.__str__()
    var_4 = module_0.remove_entity_headers(dict_0, dict_0)
    module_0.Default(**dict_0)


def test_case_11():
    int_0 = 303
    var_0 = module_0.has_message_body(int_0)
    bytes_0 = b"Expectation Failed"
    var_1 = module_0.has_message_body(var_0)
    str_0 = "extension-header"
    var_2 = module_0.has_message_body(var_1)
    dict_0 = {str_0: str_0, str_0: bytes_0, str_0: str_0}
    str_1 = var_0.__str__()
    var_3 = module_0.remove_entity_headers(dict_0, str_1)
    bool_0 = module_0.is_atty()
    module_0.is_hop_by_hop_header(var_3)
