# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pypara.accounting.journaling as module_0
import pypara.commons.numbers as module_1


def test_case_0():
    module_0.ReadJournalEntries()


def test_case_1():
    direction_0 = module_0.Direction.INC
    journal_entry_0 = module_0.JournalEntry(direction_0, direction_0, direction_0)
    none_type_0 = journal_entry_0.validate()


def test_case_2():
    bytes_0 = b"\xd4\x1d\x7f7\x84\xd8\xf2N/\xec\x7f\xb4\xb5\x93\x03\x9a\xb0"
    var_0 = module_1.isum(bytes_0)
    journal_entry_0 = module_0.JournalEntry(bytes_0, var_0, bytes_0)
    journal_entry_1 = journal_entry_0.post(var_0, bytes_0, var_0)


def test_case_3():
    bytes_0 = b"\xd4\x1d\x7f7\x84\xd8\xf2N/\xec\x7f\xb4\xb5\x93\x03\x9a\xb0"
    var_0 = module_1.isum(bytes_0)
    journal_entry_0 = module_0.JournalEntry(bytes_0, var_0, bytes_0)
    journal_entry_1 = journal_entry_0.post(var_0, bytes_0, var_0)
    journal_entry_0.validate()


def test_case_4():
    bytes_0 = b""
    var_0 = module_1.isum(bytes_0)
    journal_entry_0 = module_0.JournalEntry(bytes_0, var_0, bytes_0)
    journal_entry_1 = module_0.JournalEntry(bytes_0, var_0, bytes_0)
    none_type_0 = journal_entry_1.validate()
    str_0 = "\n        Creates a :py:class:`DateRange` as per given ``pivot`` date in time to create date range since ``prev`` years\n        back and ``next`` years forward.\n\n        :param pivot: Pivot date in time.\n        :param n_prev: Numbers to go back in years.\n        :param n_next: Numbers to go forward in years.\n        :return: A :py:class:`DateRange` instance.\n\n        >>> DateRange.pivotal(Date(2019, 12, 31), NaturalNumber(0), NaturalNumber(0))\n        DateRange(since=datetime.date(2019, 12, 31), until=datetime.date(2019, 12, 31))\n        >>> DateRange.pivotal(Date(2019, 12, 31), NaturalNumber(0), NaturalNumber(1))\n        DateRange(since=datetime.date(2019, 12, 31), until=datetime.date(2020, 12, 31))\n        >>> DateRange.pivotal(Date(2019, 12, 31), NaturalNumber(1), NaturalNumber(0))\n        DateRange(since=datetime.date(2018, 12, 31), until=datetime.date(2019, 12, 31))\n        >>> DateRange.pivotal(Date(2019, 12, 31), NaturalNumber(1), NaturalNumber(1))\n        DateRange(since=datetime.date(2018, 12, 31), until=datetime.date(2020, 12, 31))\n        >>> DateRange.pivotal(Date(2020, 2, 29), NaturalNumber(0), NaturalNumber(0))\n        DateRange(since=datetime.date(2020, 2, 29), until=datetime.date(2020, 2, 29))\n        >>> DateRange.pivotal(Date(2020, 2, 29), NaturalNumber(0), NaturalNumber(1))\n        DateRange(since=datetime.date(2020, 2, 29), until=datetime.date(2021, 2, 28))\n        >>> DateRange.pivotal(Date(2020, 2, 29), NaturalNumber(1), NaturalNumber(0))\n        DateRange(since=datetime.date(2019, 2, 28), until=datetime.date(2020, 2, 29))\n        >>> DateRange.pivotal(Date(2020, 2, 29), NaturalNumber(1), NaturalNumber(1))\n        DateRange(since=datetime.date(2019, 2, 28), until=datetime.date(2021, 2, 28))\n        "
    journal_entry_2 = journal_entry_1.post(str_0, var_0, var_0)
    var_0.validate()
