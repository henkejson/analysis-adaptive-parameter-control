# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import codetiming._timer as module_0
import codetiming._timers as module_1
import dataclasses as module_2


def test_case_0():
    float_arg_0 = module_0.FloatArg()


def test_case_1():
    timer_error_0 = module_0.TimerError()
    none_type_0 = None
    timer_0 = module_0.Timer(none_type_0)
    none_type_1 = timer_0.start()
    timer_0.__enter__()


def test_case_2():
    timer_0 = module_0.Timer()
    timer_1 = timer_0.__enter__()
    none_type_0 = timer_0.__exit__()


def test_case_3():
    str_0 = "UYPe1cU$H$u;"
    none_type_0 = None
    timer_0 = module_0.Timer(initial_text=str_0, logger=none_type_0)
    timer_0.__exit__()


def test_case_4():
    str_0 = "UYPe1cU$H$u;"
    none_type_0 = None
    timer_0 = module_0.Timer(initial_text=str_0, logger=none_type_0)
    timer_1 = timer_0.__enter__()
    none_type_1 = timer_0.__exit__()


def test_case_5():
    bool_0 = True
    timer_0 = module_0.Timer(initial_text=bool_0)
    none_type_0 = timer_0.start()
    float_0 = timer_0.stop()
    str_0 = "k=63i"
    str_1 = "C=80VS"
    set_0 = {bool_0}
    dict_0 = {str_0: float_0, str_1: bool_0, str_1: set_0}
    module_1.Timers(**dict_0)


def test_case_6():
    set_0 = set()
    str_0 = "Elapsed time: {:0.4f} seconds"
    timer_0 = module_0.Timer(text=set_0, initial_text=str_0)
    timer_0.start()


def test_case_7():
    int_0 = 2143
    timer_0 = module_0.Timer(int_0)
    var_0 = timer_0.__eq__(int_0)
    none_type_0 = timer_0.start()
    none_type_1 = timer_0.__exit__()
    var_1 = timer_0.__eq__(int_0)
    var_1.copy()


def test_case_8():
    int_0 = 2143
    timer_0 = module_0.Timer(int_0)
    var_0 = module_2.field(default_factory=timer_0, repr=int_0)
    timer_1 = module_0.Timer(timer_0, initial_text=var_0, logger=var_0)
    timer_1.start()


def test_case_9():
    timer_0 = module_0.Timer()
    none_type_0 = None
    timer_1 = module_0.Timer(text=timer_0, initial_text=none_type_0)
    none_type_1 = timer_1.start()
    none_type_2 = timer_1.__exit__()
    timer_1.stop()
