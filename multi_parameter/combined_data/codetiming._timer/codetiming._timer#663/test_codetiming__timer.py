# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import codetiming._timer as module_0


def test_case_0():
    float_arg_0 = module_0.FloatArg()


def test_case_1():
    str_0 = "Timer is not running. Use .start() to start it"
    timer_0 = module_0.Timer(text=str_0)
    timer_1 = timer_0.__enter__()
    timer_0.__enter__()


def test_case_2():
    timer_0 = module_0.Timer()
    timer_1 = timer_0.__enter__()
    none_type_0 = timer_1.__exit__()


def test_case_3():
    timer_error_0 = module_0.TimerError()
    timer_0 = module_0.Timer()
    timer_1 = module_0.Timer()
    timer_1.__exit__()


def test_case_4():
    bool_0 = False
    timer_0 = module_0.Timer(text=bool_0, initial_text=bool_0, logger=bool_0)
    none_type_0 = timer_0.start()
    float_arg_0 = timer_0.__call__(bool_0)
    timer_1 = timer_0.__call__(bool_0)


def test_case_5():
    bool_0 = False
    timer_0 = module_0.Timer(text=bool_0, initial_text=bool_0, logger=bool_0)
    none_type_0 = None
    none_type_1 = timer_0.start()
    list_0 = [none_type_0, none_type_0]
    timer_error_0 = module_0.TimerError(*list_0)
    none_type_2 = timer_0.__exit__()
    none_type_3 = timer_0.start()
    timer_error_1 = module_0.TimerError()
    timer_1 = module_0.Timer(timer_0)
    timer_2 = timer_1.__enter__()
    timer_2.__exit__(*list_0)


def test_case_6():
    bool_0 = True
    timer_0 = module_0.Timer(text=bool_0, initial_text=bool_0, logger=bool_0)
    timer_0.start()


def test_case_7():
    str_0 = "Timer is not running. Use .start() to start it"
    timer_0 = module_0.Timer(text=str_0)
    timer_1 = timer_0.__enter__()
    none_type_0 = timer_0.__exit__()
    var_0 = timer_0.__call__(timer_0)
    var_1 = timer_0.__call__(none_type_0)
    none_type_1 = timer_0.start()
    float_0 = timer_0.stop()
    var_2 = var_0.__repr__()
    timer_error_0 = module_0.TimerError()
    timer_2 = module_0.Timer(initial_text=str_0, logger=var_2)
    timer_2.__enter__()


def test_case_8():
    str_0 = "Timer is not running. Use .start() to start it"
    timer_0 = module_0.Timer(text=str_0)
    timer_1 = timer_0.__enter__()
    none_type_0 = timer_0.__exit__()
    var_0 = timer_0.__call__(timer_0)
    none_type_1 = timer_0.start()
    float_0 = timer_0.stop()
    var_1 = var_0.__repr__()
    timer_2 = module_0.Timer(initial_text=var_0)
    timer_error_0 = module_0.TimerError()
    timer_error_1 = module_0.TimerError()
    timer_3 = module_0.Timer(var_1, var_0, timer_1)
    timer_4 = timer_3.__enter__()
    var_2 = var_1.__repr__()
    var_2.__exit__()


def test_case_9():
    str_0 = "Timer is not running. Use .start() to start it"
    timer_0 = module_0.Timer(text=str_0)
    timer_1 = timer_0.__enter__()
    none_type_0 = timer_0.__exit__()
    var_0 = timer_0.__call__(timer_0)
    none_type_1 = timer_0.start()
    float_0 = timer_0.stop()
    var_1 = var_0.__repr__()
    timer_2 = module_0.Timer(initial_text=var_0)
    timer_error_0 = module_0.TimerError()
    timer_error_1 = module_0.TimerError()
    timer_3 = module_0.Timer(initial_text=none_type_0)
    dict_0 = {float_0: var_0}
    timer_error_2 = module_0.TimerError(*dict_0)
    timer_4 = module_0.Timer(var_0, var_0)
    timer_5 = timer_4.__enter__()
    float_arg_0 = module_0.FloatArg()
    none_type_2 = timer_5.__exit__()
    bool_0 = True
    var_2 = timer_1.__eq__(bool_0)
    timer_4.__exit__(*timer_error_2)
