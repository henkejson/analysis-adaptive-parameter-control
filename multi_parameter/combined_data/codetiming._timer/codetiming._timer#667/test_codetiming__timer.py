# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import codetiming._timer as module_0
import builtins as module_1
import dataclasses as module_2


def test_case_0():
    timer_error_0 = module_0.TimerError()


def test_case_1():
    float_arg_0 = module_0.FloatArg()
    timer_0 = module_0.Timer(logger=float_arg_0)
    timer_1 = timer_0.__enter__()
    var_0 = timer_0.__eq__(float_arg_0)
    timer_1.__enter__()


def test_case_2():
    timer_0 = module_0.Timer()
    var_0 = timer_0.__call__(timer_0)
    var_1 = var_0.__call__(timer_0)


def test_case_3():
    str_0 = "F(nXRey)ue<1y/G7r p0"
    timer_0 = module_0.Timer(str_0)
    timer_0.stop()


def test_case_4():
    str_0 = "6'4w_S+%x\"`0!G"
    base_exception_0 = module_1.BaseException()
    timer_0 = module_0.Timer(str_0, initial_text=str_0)
    none_type_0 = timer_0.start()


def test_case_5():
    str_0 = "6'4w_S+%x\"`0!G"
    base_exception_0 = module_1.BaseException()
    timer_0 = module_0.Timer(str_0, initial_text=base_exception_0, logger=str_0)
    timer_0.start()


def test_case_6():
    float_arg_0 = module_0.FloatArg()
    list_0 = [float_arg_0, float_arg_0]
    timer_0 = module_0.Timer(initial_text=list_0)
    none_type_0 = timer_0.start()
    timer_error_0 = module_0.TimerError()
    float_arg_0.__getitem__(none_type_0)


def test_case_7():
    none_type_0 = None
    timer_0 = module_0.Timer(logger=none_type_0)
    timer_1 = module_0.Timer(none_type_0, logger=none_type_0)
    timer_2 = timer_1.__enter__()
    timer_2.start()


def test_case_8():
    none_type_0 = None
    timer_0 = module_0.Timer(logger=none_type_0)
    timer_1 = module_0.Timer(none_type_0, logger=none_type_0)
    timer_2 = timer_1.__enter__()
    list_0 = []
    none_type_1 = timer_1.__exit__(*list_0)
    none_type_2 = timer_2.start()
    timer_3 = module_0.Timer(none_type_0, logger=none_type_0)
    bool_0 = False
    var_0 = module_2.field(compare=bool_0, kw_only=bool_0)
    var_0.popitem()


def test_case_9():
    str_0 = "r@x"
    timer_0 = module_0.Timer(str_0)
    none_type_0 = None
    list_0 = [none_type_0]
    timer_1 = timer_0.__enter__()
    none_type_1 = timer_1.__exit__(*list_0)
    list_1 = [timer_0, timer_0, timer_0, timer_0]
    timer_0.__exit__(*list_1)
