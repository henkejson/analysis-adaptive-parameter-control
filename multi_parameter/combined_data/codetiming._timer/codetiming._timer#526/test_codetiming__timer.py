# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import codetiming._timer as module_0


def test_case_0():
    timer_error_0 = module_0.TimerError()


def test_case_1():
    bool_0 = True
    timer_0 = module_0.Timer(bool_0, initial_text=bool_0)
    timer_1 = timer_0.__enter__()
    timer_1.start()


def test_case_2():
    timer_error_0 = module_0.TimerError()
    timer_0 = module_0.Timer(text=timer_error_0)
    timer_1 = timer_0.__enter__()


def test_case_3():
    timer_0 = module_0.Timer()
    timer_0.stop()


def test_case_4():
    bool_0 = True
    timer_0 = module_0.Timer(bool_0, initial_text=bool_0)
    none_type_0 = timer_0.start()
    none_type_1 = timer_0.__exit__()


def test_case_5():
    bool_0 = True
    timer_0 = module_0.Timer(bool_0, initial_text=bool_0)
    none_type_0 = timer_0.start()


def test_case_6():
    bool_0 = False
    timer_0 = module_0.Timer(bool_0, initial_text=bool_0)
    none_type_0 = timer_0.start()
    none_type_1 = timer_0.__exit__()


def test_case_7():
    none_type_0 = None
    timer_0 = module_0.Timer(logger=none_type_0)
    none_type_1 = timer_0.start()


def test_case_8():
    bool_0 = True
    timer_0 = module_0.Timer(bool_0, initial_text=bool_0)
    none_type_0 = timer_0.start()
    none_type_1 = timer_0.__exit__()
    timer_1 = module_0.Timer(initial_text=bool_0)
    var_0 = timer_1.__repr__()
    timer_2 = timer_1.__enter__()
    var_0.start()


def test_case_9():
    bool_0 = False
    timer_0 = module_0.Timer(logger=bool_0)
    timer_1 = timer_0.__enter__()
    float_0 = timer_0.stop()
    var_0 = timer_0.__repr__()
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0]
    timer_2 = timer_0.__enter__()
    module_0.FloatArg(*list_0)


def test_case_10():
    str_0 = "09J"
    timer_0 = module_0.Timer(str_0, initial_text=str_0)
    str_1 = ":n:'>p>%B(]b"
    str_2 = "iQ/jK'!&'\\?\"P(."
    timer_1 = module_0.Timer(str_1, logger=str_2)
    timer_2 = module_0.Timer(initial_text=str_0)
    var_0 = timer_0.__repr__()
    timer_3 = timer_2.__enter__()
    list_0 = []
    none_type_0 = timer_3.__exit__(*list_0)
    var_1 = timer_3.__eq__(timer_3)
    var_2 = timer_1.__repr__()
    none_type_1 = timer_2.start()
    var_2.copy()
