# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import codetiming._timer as module_0
import dataclasses as module_1
import collections as module_2


def test_case_0():
    timer_0 = module_0.Timer()


def test_case_1():
    bool_0 = True
    timer_0 = module_0.Timer(bool_0)
    timer_1 = timer_0.__enter__()
    var_0 = timer_0.__eq__(bool_0)
    timer_0.__enter__()


def test_case_2():
    timer_0 = module_0.Timer()
    none_type_0 = timer_0.start()
    float_0 = timer_0.stop()


def test_case_3():
    timer_error_0 = module_0.TimerError()
    tuple_0 = ()
    timer_0 = module_0.Timer(logger=tuple_0)
    timer_0.__exit__()


def test_case_4():
    bool_0 = True
    float_arg_0 = module_0.FloatArg()
    timer_0 = module_0.Timer(text=bool_0)
    timer_1 = timer_0.__enter__()
    timer_0.stop()


def test_case_5():
    none_type_0 = None
    timer_0 = module_0.Timer(logger=none_type_0)
    str_0 = "(1jL^xqLK(gB@"
    var_0 = timer_0.__call__(timer_0)
    none_type_1 = timer_0.start()
    var_1 = timer_0.__eq__(str_0)
    var_1.__or__(str_0)


def test_case_6():
    float_arg_0 = module_0.FloatArg()
    timer_0 = module_0.Timer(float_arg_0, initial_text=float_arg_0)
    timer_1 = timer_0.__enter__()
    none_type_0 = timer_0.__exit__()
    none_type_1 = timer_0.start()
    var_0 = module_1.field(default_factory=timer_1, init=timer_1)


def test_case_7():
    int_0 = 32
    timer_0 = module_0.Timer(initial_text=int_0)
    none_type_0 = timer_0.start()
    timer_1 = module_0.Timer(logger=int_0)


def test_case_8():
    float_arg_0 = module_0.FloatArg()
    timer_0 = module_0.Timer(float_arg_0, initial_text=float_arg_0)
    timer_1 = timer_0.__enter__()
    float_arg_1 = module_0.FloatArg()
    timer_2 = module_0.Timer(text=float_arg_1, initial_text=timer_1)
    float_arg_2 = module_0.FloatArg()


def test_case_9():
    float_arg_0 = module_0.FloatArg()
    none_type_0 = None
    timer_0 = module_0.Timer(none_type_0, initial_text=float_arg_0, logger=none_type_0)
    timer_error_0 = module_0.TimerError()
    timer_1 = timer_0.__enter__()
    float_arg_1 = module_0.FloatArg()
    dict_0 = {}
    timer_2 = module_0.Timer(dict_0, initial_text=float_arg_1)
    user_dict_0 = module_2.UserDict()
    var_0 = timer_2.__eq__(float_arg_1)
    none_type_1 = timer_0.__exit__()
    var_1 = timer_2.__eq__(dict_0)
    none_type_2 = timer_1.start()
    none_type_3 = timer_0.__exit__()
    var_2 = user_dict_0.__len__()
    var_3 = timer_1.__repr__()
    var_2.stop()


def test_case_10():
    float_arg_0 = module_0.FloatArg()
    timer_0 = module_0.Timer(float_arg_0, initial_text=float_arg_0)
    timer_error_0 = module_0.TimerError()
    timer_1 = timer_0.__enter__()
    float_arg_1 = timer_1.__repr__()
    var_0 = timer_1.__call__(timer_error_0)
    timer_2 = module_0.Timer(var_0, initial_text=float_arg_1)
    timer_error_1 = module_0.TimerError()
    timer_2.__enter__()


def test_case_11():
    float_arg_0 = module_0.FloatArg()
    timer_0 = module_0.Timer(float_arg_0, initial_text=float_arg_0)
    timer_error_0 = module_0.TimerError()
    timer_1 = timer_0.__enter__()
    float_arg_1 = module_0.FloatArg()
    dict_0 = {}
    timer_2 = module_0.Timer(dict_0, initial_text=float_arg_1)
    float_arg_2 = module_0.FloatArg()
    user_dict_0 = module_2.UserDict()
    timer_3 = module_0.Timer(text=timer_1)
    timer_4 = timer_3.__enter__()
    str_0 = "rDgCAS"
    none_type_0 = None
    timer_5 = module_0.Timer(str_0, logger=none_type_0)
    list_0 = [timer_3, dict_0, timer_4]
    none_type_1 = timer_3.__exit__(*list_0)
    none_type_2 = timer_5.start()
    var_0 = module_1.field(default=timer_0, repr=none_type_1, compare=none_type_0)
