# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import codetiming._timer as module_0
import dataclasses as module_1
import collections as module_2


def test_case_0():
    float_arg_0 = module_0.FloatArg()


def test_case_1():
    timer_0 = module_0.Timer()
    timer_1 = timer_0.__enter__()
    var_0 = timer_0.__repr__()
    timer_0.__enter__()


def test_case_2():
    none_type_0 = None
    timer_0 = module_0.Timer(logger=none_type_0)
    none_type_1 = timer_0.start()
    float_0 = timer_0.stop()


def test_case_3():
    none_type_0 = None
    none_type_1 = None
    var_0 = module_1.field(init=none_type_1)
    var_1 = var_0.__eq__(none_type_0)
    bool_0 = False
    timer_0 = module_0.Timer(bool_0)
    timer_1 = module_0.Timer(logger=bool_0)
    var_2 = timer_0.__repr__()
    timer_1.__exit__()


def test_case_4():
    float_arg_0 = module_0.FloatArg()
    timer_0 = module_0.Timer()
    var_0 = timer_0.__call__(float_arg_0)
    timer_1 = timer_0.__enter__()
    var_0.__enter__()


def test_case_5():
    none_type_0 = None
    str_0 = ";(6,-"
    timer_0 = module_0.Timer(text=none_type_0, initial_text=none_type_0, logger=str_0)
    none_type_1 = timer_0.start()
    timer_0.stop()


def test_case_6():
    dict_0 = {}
    float_arg_0 = module_0.FloatArg(**dict_0)
    str_0 = "(6,"
    timer_0 = module_0.Timer(str_0, float_arg_0, float_arg_0)
    dict_1 = {}
    var_0 = dict_1.update()
    none_type_0 = timer_0.start()
    timer_error_0 = module_1.field(default_factory=none_type_0)
    var_0.__exit__()


def test_case_7():
    none_type_0 = None
    str_0 = "7~@Zr\n~nYfU.3'gE"
    timer_0 = module_0.Timer(none_type_0, initial_text=str_0, logger=str_0)
    user_dict_0 = module_2.UserDict()
    timer_0.start()


def test_case_8():
    none_type_0 = None
    dict_0 = {}
    float_arg_0 = module_0.FloatArg(**dict_0)
    timer_0 = module_0.Timer(dict_0, float_arg_0, float_arg_0)
    dict_1 = {}
    var_0 = timer_0.__call__(none_type_0)
    var_1 = dict_1.update()
    none_type_1 = timer_0.start()
    timer_0.stop()


def test_case_9():
    none_type_0 = None
    dict_0 = {}
    float_arg_0 = module_1.dataclass(
        none_type_0, frozen=dict_0, kw_only=dict_0, slots=dict_0
    )
    str_0 = "T"
    timer_0 = module_0.Timer(str_0, float_arg_0, float_arg_0)
    dict_1 = {}
    var_0 = timer_0.__call__(none_type_0)
    var_1 = dict_1.update()
    none_type_1 = timer_0.start()
    timer_0.stop()


def test_case_10():
    none_type_0 = None
    str_0 = "T"
    timer_0 = module_0.Timer(str_0, str_0, str_0)
    dict_0 = {}
    var_0 = timer_0.__call__(none_type_0)
    var_1 = dict_0.update()
    none_type_1 = timer_0.start()
    float_0 = timer_0.stop()
    var_0.items()
