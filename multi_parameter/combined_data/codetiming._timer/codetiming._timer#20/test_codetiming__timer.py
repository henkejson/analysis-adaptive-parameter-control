# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import codetiming._timer as module_0


def test_case_0():
    float_arg_0 = module_0.FloatArg()


def test_case_1():
    none_type_0 = None
    timer_0 = module_0.Timer(logger=none_type_0)
    none_type_1 = timer_0.start()
    timer_0.start()


def test_case_2():
    timer_0 = module_0.Timer()
    timer_1 = module_0.Timer(initial_text=timer_0)
    timer_2 = timer_1.__enter__()


def test_case_3():
    timer_0 = module_0.Timer()
    timer_error_0 = module_0.TimerError()
    list_0 = [timer_0, timer_0, timer_0]
    timer_1 = timer_0.__enter__()
    none_type_0 = timer_0.__exit__(*list_0)
    timer_1.__exit__()


def test_case_4():
    timer_0 = module_0.Timer()
    timer_1 = timer_0.__enter__()
    none_type_0 = timer_1.__exit__()


def test_case_5():
    none_type_0 = None
    timer_0 = module_0.Timer(logger=none_type_0)
    timer_1 = timer_0.__enter__()
    none_type_1 = timer_0.__exit__()


def test_case_6():
    str_0 = "c Z\rK bt*R\x0c4"
    timer_0 = module_0.Timer()
    timer_error_0 = module_0.TimerError()
    timer_1 = module_0.Timer(initial_text=str_0)
    timer_2 = timer_1.__enter__()
    timer_error_1 = module_0.TimerError()


def test_case_7():
    timer_0 = module_0.Timer()
    timer_error_0 = module_0.TimerError()
    str_0 = "@d>top\ruWQ@2w[1z+z}U"
    bytes_0 = b"^k"
    dict_0 = {str_0: str_0, str_0: bytes_0, str_0: str_0}
    var_0 = timer_0.__repr__()
    none_type_0 = None
    timer_1 = module_0.Timer(str_0, timer_0, none_type_0)
    list_0 = [timer_1, timer_1, timer_1]
    timer_2 = timer_1.__enter__()
    none_type_1 = timer_1.__exit__(*list_0)
    var_1 = timer_2.__call__(dict_0)
    timer_error_1 = module_0.TimerError()
    timer_1.__exit__()


def test_case_8():
    bool_0 = False
    timer_0 = module_0.Timer(text=bool_0)
    timer_1 = module_0.Timer()
    timer_error_0 = module_0.TimerError()
    timer_2 = timer_1.__enter__()
    str_0 = " does not support item assignment. Use '.add()' to update values."
    bytes_0 = b"^k"
    dict_0 = {str_0: str_0, str_0: bytes_0, str_0: str_0}
    timer_3 = module_0.Timer(dict_0, initial_text=timer_0)
    list_0 = [timer_3, timer_3, timer_3]
    timer_4 = timer_3.__enter__()
    timer_3.__exit__(*list_0)
