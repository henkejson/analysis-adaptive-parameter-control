# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import codetiming._timer as module_0
import dataclasses as module_1
import codetiming._timers as module_2


def test_case_0():
    timer_0 = module_0.Timer()


def test_case_1():
    int_0 = 60
    timer_0 = module_0.Timer(logger=int_0)
    var_0 = timer_0.__repr__()
    timer_1 = module_0.Timer()
    timer_2 = timer_0.__enter__()
    var_1 = timer_0.__eq__(timer_0)
    timer_3 = module_0.Timer()
    timer_4 = module_0.Timer(logger=timer_1)
    timer_0.__enter__()


def test_case_2():
    timer_0 = module_0.Timer()
    timer_1 = timer_0.__enter__()
    none_type_0 = timer_1.__exit__()


def test_case_3():
    str_0 = "/f(\\7]k+S1"
    timer_0 = module_0.Timer(initial_text=str_0, logger=str_0)
    timer_0.stop()


def test_case_4():
    none_type_0 = None
    timer_0 = module_0.Timer(logger=none_type_0)
    none_type_1 = timer_0.start()
    var_0 = timer_0.__eq__(timer_0)
    var_1 = timer_0.__repr__()
    timer_1 = module_0.Timer()
    timer_2 = module_0.Timer(logger=var_1)
    var_2 = var_0.__repr__()


def test_case_5():
    int_0 = 51
    timer_0 = module_0.Timer(text=int_0, initial_text=int_0)
    timer_1 = timer_0.__enter__()
    var_0 = timer_1.__call__(int_0)
    module_0.FloatArg(**int_0)


def test_case_6():
    none_type_0 = None
    timer_0 = module_0.Timer(logger=none_type_0)
    timer_1 = timer_0.__enter__()
    var_0 = timer_1.__call__(none_type_0)
    float_arg_0 = module_0.FloatArg()
    none_type_1 = timer_1.__exit__()


def test_case_7():
    str_0 = " does not support item assignment. Use '.add()' to update values."
    timer_0 = module_0.Timer(initial_text=str_0)
    timer_1 = timer_0.__enter__()
    none_type_0 = None
    var_0 = module_1.field(default=none_type_0)
    var_0.stop()


def test_case_8():
    int_0 = 60
    bool_0 = True
    timer_0 = module_0.Timer(int_0, initial_text=bool_0)
    timer_1 = timer_0.__enter__()
    var_0 = timer_0.__call__(timer_1)
    float_0 = timer_0.stop()
    timer_0.__exit__(*int_0)


def test_case_9():
    timer_0 = module_0.Timer()
    timer_1 = module_0.Timer(text=timer_0)
    timer_2 = timer_1.__enter__()
    var_0 = timer_2.__call__(timer_1)
    float_0 = timer_1.stop()
    timers_0 = module_2.Timers()
    timers_0.popitem()
