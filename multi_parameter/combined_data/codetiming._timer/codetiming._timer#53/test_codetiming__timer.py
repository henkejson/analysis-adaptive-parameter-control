# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import codetiming._timer as module_0


def test_case_0():
    float_arg_0 = module_0.FloatArg()


def test_case_1():
    str_0 = "+]bg^\x0c>MLh(z\x0bxvy55_4"
    timer_0 = module_0.Timer(str_0, str_0, str_0)
    float_arg_0 = module_0.FloatArg()
    timer_1 = timer_0.__enter__()
    timer_1.__enter__()


def test_case_2():
    str_0 = '|l 57I`+`GY/{<1Bz"'
    timer_0 = module_0.Timer(str_0, str_0)
    timer_1 = timer_0.__enter__()
    timer_0.stop()


def test_case_3():
    list_0 = []
    bool_0 = True
    timer_0 = module_0.Timer(list_0, initial_text=bool_0)
    none_type_0 = timer_0.start()
    timer_error_0 = module_0.TimerError(*list_0)


def test_case_4():
    none_type_0 = None
    float_arg_0 = module_0.FloatArg()
    float_arg_1 = module_0.FloatArg()
    float_arg_2 = module_0.FloatArg()
    str_0 = "2I(.KA6HvYY.JC)"
    timer_0 = module_0.Timer(text=none_type_0, initial_text=str_0)
    timer_1 = timer_0.__enter__()
    timer_error_0 = module_0.TimerError()


def test_case_5():
    timer_0 = module_0.Timer()
    timer_0.stop()


def test_case_6():
    str_0 = "X"
    timer_0 = module_0.Timer(str_0, str_0, str_0)
    timer_1 = timer_0.__enter__()
    list_0 = []
    none_type_0 = timer_0.__exit__(*list_0)
    complex_0 = -1532.3737937816054 - 851.18045j
    list_1 = [str_0, complex_0, complex_0]
    timer_2 = timer_1.__enter__()
    timer_error_0 = module_0.TimerError(*list_1)
    var_0 = timer_2.__call__(timer_1)
    timer_error_1 = module_0.TimerError()


def test_case_7():
    str_0 = "h1?ypO\t"
    timer_0 = module_0.Timer(str_0, str_0)
    timer_1 = timer_0.__enter__()
    float_0 = timer_0.stop()


def test_case_8():
    none_type_0 = None
    timer_error_0 = module_0.TimerError()
    float_arg_0 = module_0.FloatArg()
    timer_0 = module_0.Timer(logger=none_type_0)
    none_type_1 = timer_0.start()
    var_0 = timer_0.__eq__(timer_error_0)
    var_1 = timer_0.__repr__()
    module_0.FloatArg(**var_0)


def test_case_9():
    none_type_0 = None
    timer_0 = module_0.Timer(logger=none_type_0)
    var_0 = timer_0.__eq__(timer_0)
    none_type_1 = timer_0.start()
    float_0 = timer_0.stop()
    var_0.__getitem__(var_0)


def test_case_10():
    str_0 = "X"
    timer_0 = module_0.Timer(str_0, str_0, str_0)
    float_arg_0 = module_0.FloatArg()
    timer_1 = timer_0.__enter__()
    timer_2 = module_0.Timer(str_0, float_arg_0, float_arg_0, timer_1)
    list_0 = []
    none_type_0 = timer_0.__exit__(*list_0)
    none_type_1 = timer_2.start()
    complex_0 = -1532.3737937816054 - 851.18045j
    list_1 = [str_0, complex_0, complex_0]
    timer_3 = timer_1.__enter__()
    timer_error_0 = module_0.TimerError(*list_1)
    var_0 = timer_2.__repr__()
    timer_2.__copy__()
