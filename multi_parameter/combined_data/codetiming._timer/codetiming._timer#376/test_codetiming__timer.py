# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import codetiming._timer as module_0


def test_case_0():
    float_arg_0 = module_0.FloatArg()


def test_case_1():
    timer_0 = module_0.Timer()
    timer_0.stop()


def test_case_2():
    timer_0 = module_0.Timer()
    none_type_0 = timer_0.start()
    none_type_1 = timer_0.__exit__()


def test_case_3():
    timer_0 = module_0.Timer()
    timer_1 = timer_0.__enter__()
    none_type_0 = timer_0.__exit__()


def test_case_4():
    str_0 = "Definition of Timer.\n\nSee help(codetiming) for quick instructions, and\nhttps://pypi.org/project/codetiming/ for more details.\n"
    none_type_0 = None
    timer_0 = module_0.Timer(initial_text=str_0, logger=none_type_0)
    none_type_1 = timer_0.__repr__()
    int_0 = -727
    var_0 = timer_0.__call__(int_0)
    timer_1 = timer_0.__enter__()
    var_0.start()


def test_case_5():
    str_0 = "Elapsed time: {:0.4f} seconds"
    none_type_0 = None
    timer_0 = module_0.Timer(initial_text=str_0, logger=none_type_0)
    none_type_1 = timer_0.start()
    none_type_2 = timer_0.__exit__()
    int_0 = -727
    var_0 = timer_0.__call__(int_0)
    timer_1 = timer_0.__enter__()
    var_0.start()


def test_case_6():
    bytes_0 = b"\x04\x11"
    timer_0 = module_0.Timer(initial_text=bytes_0)
    none_type_0 = timer_0.start()


def test_case_7():
    bytes_0 = b"\xe3\x96\x11"
    timer_0 = module_0.Timer(initial_text=bytes_0)
    none_type_0 = timer_0.start()
    timer_0.start()


def test_case_8():
    bytes_0 = b"\xe3\x11"
    str_0 = "Definition of Timer.\n\nSe help(codetiming) for quick instructions, and\nhttps://pypi.org/project/codetiming/ for more details.\n"
    timer_0 = module_0.Timer(str_0)
    none_type_0 = timer_0.start()
    list_0 = [bytes_0]
    none_type_1 = timer_0.__exit__(*list_0)
    timer_1 = timer_0.__enter__()
    timer_0.start()


def test_case_9():
    str_0 = "Definition of Timer.\n\nSee help(codetiming) for quick instructions, and\nhttps://pypi.rg/project/c`detiming/ for more details.\n"
    timer_0 = module_0.Timer(text=str_0, initial_text=str_0)
    none_type_0 = timer_0.start()
    none_type_1 = timer_0.__exit__()
    timer_0.__exit__()


def test_case_10():
    bool_0 = True
    timer_0 = module_0.Timer(bool_0, initial_text=bool_0)
    timer_1 = timer_0.__enter__()
    none_type_0 = None
    var_0 = timer_0.__call__(none_type_0)
