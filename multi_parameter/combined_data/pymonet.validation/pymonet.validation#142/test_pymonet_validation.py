# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bytes_0 = b"7a\xa1\x0b\x06\xb8\x16\x1d\xfd\xa4"
    none_type_0 = None
    str_0 = "^uZ\\UfD6d"
    validation_0 = module_0.Validation(bytes_0, none_type_0)
    var_0 = validation_0.__eq__(str_0)
    var_0.map(none_type_0)


def test_case_1():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.__str__()
    var_0.map(var_0)


def test_case_2():
    str_0 = "C"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    validation_1 = module_0.Validation(str_0, str_0)
    var_1 = validation_1.is_fail()


def test_case_3():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = module_0.Validation(list_0, list_0)
    validation_1 = module_0.Validation(list_0, list_0)
    var_1 = validation_1.to_maybe()
    validation_1.map(var_1)


def test_case_4():
    bytes_0 = b"7a\xa1\x0b\x06\xb8\x16\x1d\xfd\xa4"
    bytes_0.to_maybe()


def test_case_5():
    bytes_0 = b"\xba\xe0P\x835\x83\x1a\xafg\x87\x14\xa2\x1d\x18\xefp\xf9\x15^I"
    var_0 = module_0.Validation(bytes_0, bytes_0)


def test_case_6():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.is_success()


def test_case_7():
    str_0 = "C"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    validation_0.map(var_0)


def test_case_8():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.bind(none_type_0)


def test_case_9():
    float_0 = 1866.54
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.ap(float_0)


def test_case_10():
    bool_0 = True
    none_type_0 = None
    validation_0 = module_0.Validation(bool_0, none_type_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.to_lazy()


def test_case_11():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()


def test_case_12():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_try()


def test_case_13():
    str_0 = "C"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    validation_1 = module_0.Validation(str_0, str_0)
    var_1 = validation_0.to_try()


def test_case_14():
    none_type_0 = None
    str_0 = "^uZ\\UfD6d"
    validation_0 = module_0.Validation(none_type_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.to_either()
    var_0.is_success()


def test_case_15():
    str_0 = "C"
    validation_0 = module_0.Validation(str_0, str_0)
    validation_1 = module_0.Validation(str_0, str_0)
    var_0 = validation_1.__eq__(validation_0)


def test_case_16():
    bytes_0 = b"7a\xa1\x0b\x06\xb8\x16\x1d\xfd\xa4"
    none_type_0 = None
    validation_0 = module_0.Validation(bytes_0, none_type_0)
    validation_1 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(validation_1)
    var_0.ap(bytes_0)


def test_case_17():
    bytes_0 = b"7a\xa1\x0b\x06\xb8\x16\x1d\xfd\xa4"
    none_type_0 = None
    bytes_1 = b"7a\xa1\x0b\x06\xb8\x16\x1d\xfd\xa4"
    dict_0 = {}
    list_0 = [bytes_0, bytes_1, bytes_1, dict_0]
    set_0 = set()
    validation_0 = module_0.Validation(list_0, set_0)
    var_0 = validation_0.__eq__(none_type_0)
    validation_1 = module_0.Validation(list_0, dict_0)
    var_1 = validation_1.to_maybe()
    var_2 = var_1.__str__()
    var_3 = validation_0.to_either()
    var_1.map(none_type_0)
