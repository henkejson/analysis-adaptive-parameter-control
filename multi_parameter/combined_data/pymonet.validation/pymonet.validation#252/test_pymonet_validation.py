# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    none_type_0 = None
    none_type_1 = None
    validation_0 = module_0.Validation(none_type_1, none_type_1)
    var_0 = validation_0.__eq__(none_type_0)
    validation_1 = module_0.Validation(none_type_0, var_0)
    validation_1.to_maybe()


def test_case_1():
    bytes_0 = b"\xd6\x9f\x19B\xc4\x9eT\xbb\x9dL\xc8\x9cP2E\xd6.\x10."
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    var_0.is_fail()


def test_case_2():
    str_0 = "\n        Applies the function inside the Either[A] structure to another applicative type.\n\n        :param applicative: applicative contains function\n        :type applicative: Either[B]\n        :returns: new Either with result of contains function\n        :rtype: Either[A(B)]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.__eq__(var_0)
    var_1.to_try()


def test_case_3():
    str_0 = "\n        Applies the function inside the Either[A] structure to another applicative type.\n\n    5   :param applicative: applicative contains function\n        :type applicative: Either[B]\n        :returns: new Either with result of contains function\n        :rtype: Either[A(B)]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.to_box()


def test_case_4():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_5():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.to_either()


def test_case_6():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.is_fail()


def test_case_7():
    str_0 = "\n        Applies the function inside the Either[A] structure to another applicative type.\n\n        :param applicative: applicative contains function\n        :type applicative: Either[B]\n        :returns: new Either with result of contains function\n        :rtype: Either[A(B)]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_box()
    var_2 = var_1.to_try()
    validation_0.map(var_1)


def test_case_8():
    str_0 = ";\x0b.d^hrbWd6*RRZpM4N"
    str_1 = "t`^\x0c"
    none_type_0 = None
    validation_0 = module_0.Validation(str_1, none_type_0)
    validation_0.bind(str_0)


def test_case_9():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.ap(bool_0)


def test_case_10():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_either()
    var_1.map(list_0)


def test_case_11():
    str_0 = "\n        Applies the function inside the Either[A] structure to another applicative type.\n\n        :param applicative: applicative contains function\n        :type applicative: Either[B]\n        :returns: new Either with result of contains function\n        :rtype: Either[A(B)]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_maybe()
    var_2 = validation_0.to_try()
    var_3 = validation_0.to_box()
    var_4 = validation_0.__eq__(validation_0)
    var_4.to_try()


def test_case_12():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.__str__()
    var_0.is_success()


def test_case_13():
    float_0 = 1575.85
    validation_0 = module_0.Validation(float_0, float_0)
    validation_1 = module_0.Validation(validation_0, validation_0)
    var_0 = validation_1.__eq__(validation_0)
    none_type_0 = None
    bool_0 = False
    validation_2 = module_0.Validation(none_type_0, bool_0)
    validation_1.to_either()


def test_case_14():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_either()
    var_1.bind(validation_0)


def test_case_15():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    none_type_1 = None
    list_0 = []
    validation_1 = module_0.Validation(none_type_1, list_0)
    var_0 = validation_1.to_either()
    var_0.map(validation_0)
