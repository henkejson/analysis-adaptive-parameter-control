# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0
import builtins as module_1


def test_case_0():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_either()
    var_0.is_success()


def test_case_1():
    str_0 = "Z'{XE)bH\x0bs?]uhe"
    list_0 = []
    validation_0 = module_0.Validation(list_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.__eq__(validation_0)


def test_case_2():
    str_0 = "S"
    str_0.to_lazy()


def test_case_3():
    bytes_0 = b"\x14\xa9\xd0\xc8&)'%\xb1f\x80"
    validation_0 = module_0.Validation(bytes_0, bytes_0)


def test_case_4():
    bytes_0 = b"\x14\xa9\xd0\xc8&)'%\xb1f\x80"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_try()


def test_case_5():
    bytes_0 = b"\x14\xa9\xd0\xc8&)'%\xb1f\x80"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.is_fail()


def test_case_6():
    complex_0 = -4396.670304 + 221j
    set_0 = {complex_0, complex_0}
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.map(set_0)


def test_case_7():
    none_type_0 = None
    bool_0 = True
    validation_0 = module_0.Validation(none_type_0, bool_0)
    validation_0.bind(none_type_0)


def test_case_8():
    bytes_0 = b"\x12~$4,\xbe\xcd\x04U\xb8\x81\x87\xee="
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    list_0 = [bytes_0, bytes_0]
    bytes_1 = b"'\xf2\x9buQ\x18O0\x82\xf6F\t\x95\x89\xe2\xbd"
    validation_1 = module_0.Validation(bytes_1, bytes_1)
    var_0 = validation_0.to_either()
    validation_1.ap(list_0)


def test_case_9():
    bool_0 = False
    none_type_0 = None
    bytes_0 = b"\xc0\xe0\xc9\x13\xa6\xda\xb0\xa2\x87\x0f\xd1\rk\xe6D5a5"
    validation_0 = module_0.Validation(none_type_0, bytes_0)
    var_0 = validation_0.to_box()
    var_0.map(bool_0)


def test_case_10():
    str_0 = "\n        Take filterer function, when monad is successfully call filterer with monad value.\n        When filterer returns True method returns copy of monad, othercase\n        not successfully Try with previous value.\n\n        :params filterer: function to apply on monad value\n        :type filterer: Function(A) -> Boolean\n        :returns: Try with previous value\n        :rtype: Try[A]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.__str__()
    var_2 = validation_0.__eq__(var_1)
    str_0.to_lazy()


def test_case_11():
    str_0 = "\n        Take filterer function, when monad is successfully call filterer with monad value.\n        When filterer returns True method returns copy of monad, othercase\n        not successfully Try with previous value.\n\n        :params filterer: function to apply on monad value\n        :type filterer: Function(A) -> Boolean\n        :returns: Try with previous value\n        :rtype: Try[A]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_either()
    none_type_0 = None
    validation_1 = module_0.Validation(str_0, none_type_0)
    validation_1.map(validation_1)


def test_case_12():
    str_0 = "Z'{XE)bH\x0bs?]uhe"
    list_0 = []
    validation_0 = module_0.Validation(list_0, str_0)
    var_0 = validation_0.__eq__(validation_0)


def test_case_13():
    bytes_0 = b"\x14\xa9\xd0\xc8&)'%\xb1f\x80"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_1 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_1.__eq__(bytes_0)
    var_0.to_lazy()


def test_case_14():
    str_0 = "Z'{XE)bH\x0bs?]uhe"
    list_0 = []
    validation_0 = module_0.Validation(list_0, str_0)
    var_0 = validation_0.__str__()
    module_1.object(*list_0, **var_0)


def test_case_15():
    bool_0 = True
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_maybe()
    var_0.map(bool_0)


def test_case_16():
    set_0 = set()
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.__str__()
    var_0.bind(set_0)


def test_case_17():
    str_0 = "\n        Take filterer function, when monad is successfully call filterer with monad value.\n        When filterer returns True method returns copy of monad, othercase\n        not successfully Try with previous value.\n\n        :params filterer: function to apply on monad value\n        :type filterer: Function(A) -> Boolean\n        :returns: Try with previous value\n        :rtype: Try[A]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(validation_0)
    none_type_0 = None
    validation_1 = module_0.Validation(str_0, none_type_0)
    var_1 = validation_0.__eq__(validation_1)
    var_2 = var_1.__eq__(var_0)
    validation_1.bind(validation_0)
