# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.__eq__(tuple_0)
    var_0.is_success()


def test_case_1():
    bytes_0 = b"@\xc7\xec|\xb1sa\xd9\xd6sGbe\x05"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()


def test_case_2():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.__eq__(tuple_0)
    var_0.is_success()


def test_case_3():
    list_0 = []
    list_0.to_maybe()


def test_case_4():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)


def test_case_5():
    set_0 = set()
    str_0 = "Z$;"
    validation_0 = module_0.Validation(set_0, str_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_maybe()
    validation_1 = module_0.Validation(set_0, str_0)
    var_2 = validation_1.is_fail()


def test_case_6():
    bytes_0 = b"@\xc7\xec|\xb1sa\xd9\xd6sGb\x05"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_0.map(bytes_0)


def test_case_7():
    list_0 = []
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.bind(list_0)


def test_case_8():
    bool_0 = True
    float_0 = -3092.0
    validation_0 = module_0.Validation(float_0, float_0)
    validation_0.ap(bool_0)


def test_case_9():
    int_0 = -555
    none_type_0 = None
    validation_0 = module_0.Validation(int_0, none_type_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.to_lazy()


def test_case_10():
    bytes_0 = b"@\xc7\xec|\xb1sa\xd9\xd6sGbe\x05"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.__str__()


def test_case_11():
    tuple_0 = ()
    var_0 = tuple_0.__str__()
    list_0 = [var_0, var_0, var_0]
    validation_0 = module_0.Validation(tuple_0, list_0)
    var_1 = validation_0.to_try()
    float_0 = -527.0
    var_2 = validation_0.__eq__(float_0)
    var_3 = var_0.__str__()
    var_0.to_lazy()


def test_case_12():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_maybe()
    var_2 = validation_0.to_lazy()
    var_3 = var_1.ap(var_2)
    var_4 = validation_0.__eq__(tuple_0)
    var_5 = var_2.to_box()
    validation_0.map(var_4)


def test_case_13():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_maybe()
    var_2 = validation_0.__eq__(tuple_0)
    validation_0.map(var_2)


def test_case_14():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_either()
    var_2 = validation_0.__eq__(validation_0)
    var_3 = var_1.to_box()
    var_4 = validation_0.to_lazy()
    var_0.ap(var_4)


def test_case_15():
    bytes_0 = b"e\xf2AU\xdb\xdfp\x14"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()


def test_case_16():
    bytes_0 = b"\xca\x15n\xff\xdc\xfcjr\xc6\xab>\xd6\xdb3k\xd3"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)


def test_case_17():
    tuple_0 = ()
    none_type_0 = None
    validation_0 = module_0.Validation(tuple_0, none_type_0)
    validation_1 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_1.to_either()
    var_1 = validation_1.__eq__(validation_1)
    var_2 = validation_1.to_maybe()
    var_3 = validation_1.to_lazy()
    var_4 = validation_1.__eq__(validation_0)
    var_5 = var_3.to_try()
    bytes_0 = b"\xaa\xb4\x99\xe7\xb0}"
    validation_2 = module_0.Validation(var_3, bytes_0)
    var_6 = var_2.ap(var_3)
    var_7 = validation_1.__eq__(tuple_0)
    var_8 = var_0.to_lazy()
    var_9 = var_2.to_lazy()
    var_10 = var_8.__str__()
    list_0 = [var_10, var_10, var_10]
    var_11 = var_6.ap(tuple_0)
    validation_3 = module_0.Validation(tuple_0, list_0)
    var_1.to_try()
