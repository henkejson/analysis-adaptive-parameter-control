# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    str_0 = "K|0"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(validation_0)


def test_case_1():
    none_type_0 = None
    float_0 = -993.7266
    validation_0 = module_0.Validation(float_0, float_0)
    var_0 = validation_0.__eq__(none_type_0)
    validation_0.__str__()


def test_case_2():
    bytes_0 = b"J.\xac\xa1r\xbb\xb2\xee\xac\xd2\x8c\xc6\xf6\x06\xbc(\xca"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.to_maybe()
    var_2 = validation_0.__str__()
    var_3 = var_1.__str__()
    var_4 = var_0.__eq__(var_1)
    var_3.to_lazy()


def test_case_3():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_either()
    validation_0.map(tuple_0)


def test_case_4():
    bytes_0 = b"\xc1\xc7\xeb"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    str_0 = "\x0b[@\ng+V..U\n},3Lo6"
    validation_0 = module_0.Validation(set_0, str_0)
    str_1 = "p?,M@X)"
    validation_1 = module_0.Validation(str_1, str_1)
    var_0 = validation_1.to_either()
    var_1 = var_0.to_maybe()
    var_2 = var_1.to_either()
    var_3 = var_2.to_maybe()
    var_3.is_fail()


def test_case_5():
    float_0 = 2286.51
    list_0 = []
    validation_0 = module_0.Validation(float_0, list_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.is_success()


def test_case_6():
    bytes_0 = b"J.\xac\xa1r\xbb\xb2\xee\xac\xd2\x8c\xc6\xf6\x06\xbc(\xca"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.to_maybe()
    var_0.ap(var_0)


def test_case_7():
    set_0 = set()
    set_0.bind(set_0)


def test_case_8():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)


def test_case_9():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.is_success()


def test_case_10():
    bytes_0 = b"\xee\x9e\xf6\xebh"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.is_fail()
    var_1 = var_0.__str__()
    var_1.to_box()


def test_case_11():
    set_0 = set()
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, set_0)
    validation_0.map(none_type_0)


def test_case_12():
    none_type_0 = None
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.ap(none_type_0)


def test_case_13():
    str_0 = "Cp%$}F"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    validation_0 = module_0.Validation(str_0, dict_0)
    validation_1 = module_0.Validation(validation_0, validation_0)
    var_0 = validation_1.to_lazy()
    none_type_0 = None
    bytes_0 = b"\x16"
    validation_2 = module_0.Validation(bytes_0, bytes_0)
    var_1 = validation_2.to_try()
    var_2 = var_1.bind(none_type_0)
    var_3 = var_2.map(var_0)
    var_3.is_fail()


def test_case_14():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    validation_0.bind(validation_0)


def test_case_15():
    bool_0 = True
    int_0 = 2183
    validation_0 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_either()
    var_2 = validation_0.to_lazy()
    var_3 = validation_0.to_lazy()
    var_4 = var_1.__str__()
    var_5 = var_2.map(bool_0)
    var_5.to_maybe()


def test_case_16():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.__str__()
    var_0.is_success()


def test_case_17():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_maybe()
    validation_1 = module_0.Validation(var_0, set_0)
    var_2 = validation_0.is_success()
    var_3 = var_2.__eq__(validation_1)
    var_4 = validation_1.to_box()
    validation_2 = module_0.Validation(var_2, var_3)
    var_5 = validation_2.__eq__(validation_0)
    var_6 = validation_2.__eq__(set_0)
    var_7 = validation_2.to_box()
    var_0.to_try()
