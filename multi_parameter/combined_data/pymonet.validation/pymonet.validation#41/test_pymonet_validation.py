# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_0.to_try()


def test_case_1():
    bytes_0 = b"\xd8\xdb:w\xb8\xdc\xf0"
    bytes_1 = b"=\xf9"
    validation_0 = module_0.Validation(bytes_1, bytes_1)
    var_0 = validation_0.is_success()
    var_1 = validation_0.to_either()
    var_2 = var_0.__eq__(bytes_0)
    var_3 = validation_0.is_fail()
    var_4 = validation_0.__eq__(bytes_0)
    validation_0.map(var_4)


def test_case_2():
    bytes_0 = b"\xd8\xdb:w\xb8\xdc\xf0"
    bytes_1 = b"=\xf9"
    validation_0 = module_0.Validation(bytes_1, bytes_0)
    var_0 = validation_0.__str__()
    var_0.is_fail()


def test_case_3():
    bytes_0 = b"\x82\xfb\x7f"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_either()
    var_2 = var_1.to_try()
    var_3 = var_2.__str__()


def test_case_4():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_5():
    complex_0 = -1118.165 - 210j
    validation_0 = module_0.Validation(complex_0, complex_0)
    validation_0.to_maybe()


def test_case_6():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.is_fail()


def test_case_7():
    int_0 = -1213
    str_0 = "0FPO$H`Eav:Z)5EuR<P"
    none_type_0 = None
    validation_0 = module_0.Validation(str_0, none_type_0)
    validation_0.map(int_0)


def test_case_8():
    none_type_0 = None
    complex_0 = -1118.165 - 210j
    validation_0 = module_0.Validation(complex_0, complex_0)
    validation_0.bind(none_type_0)


def test_case_9():
    str_0 = "Wo8$tj."
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.ap(str_0)


def test_case_10():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_box()
    validation_0.to_try()


def test_case_11():
    float_0 = 2321.325
    int_0 = -3030
    none_type_0 = None
    validation_0 = module_0.Validation(int_0, none_type_0)
    var_0 = validation_0.to_lazy()
    bool_0 = False
    float_1 = 2722.41972
    dict_0 = {bool_0: float_1, bool_0: bool_0}
    validation_1 = module_0.Validation(dict_0, dict_0)
    var_1 = validation_1.is_fail()
    var_2 = var_1.__eq__(var_0)
    var_2.bind(float_0)


def test_case_12():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.to_try()


def test_case_13():
    float_0 = 2321.325
    int_0 = -3030
    none_type_0 = None
    validation_0 = module_0.Validation(int_0, none_type_0)
    var_0 = validation_0.to_lazy()
    float_1 = 2722.41972
    var_1 = var_0.__eq__(float_1)
    validation_1 = module_0.Validation(float_0, float_0)
    var_2 = var_0.ap(none_type_0)
    var_3 = validation_1.__eq__(validation_0)
    validation_1.to_either()


def test_case_14():
    bytes_0 = b"=\xf9"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    none_type_0 = None
    var_0 = validation_0.__eq__(none_type_0)
    var_1 = validation_0.to_lazy()
    var_2 = var_1.to_try()
    var_3 = validation_0.to_try()
    var_3.is_fail()


def test_case_15():
    bytes_0 = b"\xd8\xdb:w\xb8\xdc\xf0"
    bytes_1 = b""
    validation_0 = module_0.Validation(bytes_1, bytes_1)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.to_either()
    var_2 = validation_0.to_lazy()
    validation_1 = module_0.Validation(bytes_1, bytes_0)
    var_3 = validation_1.__str__()
    var_4 = var_1.to_try()
    var_5 = var_0.__eq__(bytes_0)
    var_6 = validation_0.is_fail()
    var_7 = validation_0.__eq__(bytes_0)
    var_8 = validation_1.is_success()
    var_7.ap(var_2)


def test_case_16():
    bytes_0 = b"\xd8\xdb:w\xb8\xdc\xf0"
    bytes_1 = b""
    validation_0 = module_0.Validation(bytes_1, bytes_1)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.to_either()
    var_2 = validation_0.to_lazy()
    validation_1 = module_0.Validation(bytes_1, bytes_0)
    var_3 = validation_0.__str__()
    var_4 = validation_1.__str__()
    var_5 = var_1.to_try()
    var_6 = var_0.__eq__(bytes_0)
    var_7 = validation_0.is_fail()
    var_8 = validation_0.__eq__(bytes_0)
    var_9 = validation_1.is_success()
    var_8.ap(var_2)


def test_case_17():
    bytes_0 = b"\xd8\xdb:w\xb8\xdc\xf0"
    bytes_1 = b"\xf6@N\x11\xe3T!\x96\xbe\xd8\xdd\x15\xf97a\xc1\x99\xc6\x10N"
    validation_0 = module_0.Validation(bytes_1, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_try()
    var_2 = var_0.to_lazy()
    list_0 = []
    validation_1 = module_0.Validation(var_2, list_0)
    var_3 = validation_1.__str__()
    var_4 = validation_0.__str__()
    var_5 = validation_1.to_maybe()
    var_6 = var_5.__eq__(var_3)
    var_1.to_box()
