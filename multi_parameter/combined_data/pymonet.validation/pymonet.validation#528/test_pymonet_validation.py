# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0
import builtins as module_1


def test_case_0():
    int_0 = 873
    validation_0 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.__eq__(int_0)
    var_1 = validation_0.__eq__(validation_0)
    var_0.bind(var_0)


def test_case_1():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, dict_0)
    var_0 = validation_0.is_fail()
    var_1 = validation_0.__str__()
    none_type_1 = None
    validation_1 = module_0.Validation(none_type_1, none_type_1)
    var_2 = var_0.__eq__(none_type_0)
    validation_1.to_try()


def test_case_2():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    validation_0 = module_0.Validation(bool_0, dict_0)
    var_0 = validation_0.is_success()
    var_1 = validation_0.to_either()
    var_2 = validation_0.to_lazy()
    var_3 = var_2.__eq__(var_2)
    var_4 = var_2.to_try()
    var_5 = var_4.__str__()
    var_6 = var_1.to_lazy()
    var_7 = var_2.to_try()
    var_0.to_maybe()


def test_case_3():
    str_0 = "I$h<Ea 0*(jq^`qHDI5"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    var_0.to_maybe()


def test_case_4():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_5():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.to_either()


def test_case_6():
    str_0 = "\t=2AqEyttw"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.is_fail()
    var_1 = validation_0.is_fail()
    var_2 = validation_0.to_try()
    set_0 = {str_0, str_0, str_0}
    validation_0.ap(set_0)


def test_case_7():
    complex_0 = 978.497739 - 594.7j
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.map(complex_0)


def test_case_8():
    float_0 = -3129.0
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.bind(float_0)


def test_case_9():
    bool_0 = False
    complex_0 = 428 - 1459.07252j
    list_0 = [complex_0, complex_0, complex_0]
    list_1 = [complex_0, complex_0, list_0]
    validation_0 = module_0.Validation(list_1, list_0)
    validation_0.ap(bool_0)


def test_case_10():
    float_0 = -2168.95
    none_type_0 = None
    validation_0 = module_0.Validation(float_0, none_type_0)
    validation_1 = module_0.Validation(validation_0, none_type_0)
    var_0 = validation_1.to_box()
    var_0.is_success()


def test_case_11():
    bool_0 = False
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.map(bool_0)
    var_1.is_fail()


def test_case_12():
    str_0 = "I$h<Ea 0*(jq^`qHDI5"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    var_0.is_fail()


def test_case_13():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_box()
    var_1.is_fail()


def test_case_14():
    str_0 = ""
    validation_0 = module_0.Validation(str_0, str_0)
    bool_0 = True
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_either()
    var_2 = validation_0.__eq__(validation_0)
    var_3 = validation_0.to_either()
    complex_0 = -529.6 - 2191.69j
    bool_1 = False
    list_0 = [var_1, bool_1, complex_0]
    validation_1 = module_0.Validation(bool_0, list_0)
    var_3.map(list_0)


def test_case_15():
    str_0 = "I$h<Ea 0*(jq^`qHDI5"
    validation_0 = module_0.Validation(str_0, str_0)
    bool_0 = False
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.__eq__(validation_0)
    var_2 = validation_0.__eq__(validation_0)
    var_3 = validation_0.to_either()
    complex_0 = -529.6 - 2191.69j
    bool_1 = False
    validation_1 = module_0.Validation(var_1, var_0)
    var_4 = validation_1.__eq__(validation_0)
    list_0 = [var_1, bool_1, complex_0]
    validation_2 = module_0.Validation(bool_0, list_0)
    var_5 = var_3.map(list_0)
    var_6 = var_0.bind(var_1)
    var_7 = validation_0.__eq__(validation_0)
    var_1.to_box()
