# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0
import builtins as module_1


def test_case_0():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.to_lazy()
    var_2 = var_1.to_maybe()
    var_3 = var_0.to_either()
    var_4 = validation_0.__eq__(validation_0)


def test_case_1():
    str_0 = "\n        Transform Lazy into not empty Maybe with constructor_fn result.\n\n        :returns: not empty Maybe monad with constructor_fn result\n        :rtype: Maybe[A]\n        "
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(str_0)
    var_0.to_lazy()


def test_case_2():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    validation_0 = module_0.Validation(bool_0, dict_0)
    var_0 = validation_0.__str__()


def test_case_3():
    bytes_0 = b"8"
    none_type_0 = None
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_try()
    var_1 = var_0.map(none_type_0)
    validation_1 = module_0.Validation(bytes_0, bytes_0)
    var_2 = validation_1.to_either()
    validation_1.bind(validation_1)


def test_case_4():
    bytes_0 = b"\x95\xb2\xf9Rw\xbd\x875"
    none_type_0 = None
    bytes_1 = b""
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bytes_1}
    tuple_0 = (bytes_1, bool_0, dict_0, dict_0)
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_either()
    var_2 = var_1.map(tuple_0)
    var_3 = var_2.map(var_0)
    var_4 = var_3.bind(none_type_0)
    var_5 = var_4.to_maybe()
    var_6 = var_5.map(var_3)
    var_7 = var_0.__eq__(var_3)
    bool_1 = False
    validation_1 = module_0.Validation(var_2, bool_1)
    validation_2 = module_0.Validation(var_1, bytes_0)
    var_8 = validation_2.__eq__(var_5)
    validation_1.__str__()


def test_case_5():
    bytes_0 = b"n\x0f(fv\xc6?\xda[\xb9\xd4\xa5\xd9I\x1f\x10<;\xa7"
    validation_0 = module_0.Validation(bytes_0, bytes_0)


def test_case_6():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.to_try()


def test_case_7():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_try()
    var_2 = validation_0.is_fail()
    var_3 = var_0.to_maybe()
    var_4 = validation_0.__eq__(validation_0)


def test_case_8():
    object_0 = module_1.object()
    bytes_0 = b",\xa3\x989\xa6}"
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.map(bytes_0)


def test_case_9():
    none_type_0 = None
    int_0 = 1
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.ap(none_type_0)


def test_case_10():
    int_0 = 477
    dict_0 = {int_0: int_0, int_0: int_0}
    validation_0 = module_0.Validation(int_0, dict_0)
    var_0 = validation_0.to_box()
    dict_0.to_either()


def test_case_11():
    bool_0 = True
    bytes_0 = b""
    bool_1 = False
    dict_0 = {bool_1: bool_1, bool_0: bytes_0}
    tuple_0 = (bytes_0, bool_1, dict_0, dict_0)
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_either()
    var_1.map(tuple_0)


def test_case_12():
    bool_0 = False
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.to_lazy()
    var_2 = var_1.to_maybe()
    var_3 = var_0.to_either()
    var_4 = var_1.__eq__(bool_0)
    var_5 = var_0.ap(var_1)
    var_6 = validation_0.to_either()
    var_7 = var_0.ap(var_2)
    var_8 = var_5.__str__()


def test_case_13():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.to_lazy()
    var_2 = var_1.to_maybe()
    var_3 = var_0.to_either()
    var_4 = var_3.__eq__(var_1)
    var_5 = validation_0.__str__()
    var_3.is_fail()


def test_case_14():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_try()
    var_1 = validation_0.to_lazy()
    var_2 = validation_0.to_lazy()
    var_3 = var_2.to_maybe()
    var_4 = var_1.to_either()
    var_5 = validation_0.__eq__(validation_0)
    var_6 = validation_0.to_either()
    bool_0 = True
    validation_1 = module_0.Validation(var_1, bool_0)
    var_7 = validation_1.__eq__(validation_0)
    var_7.ap(var_1)
