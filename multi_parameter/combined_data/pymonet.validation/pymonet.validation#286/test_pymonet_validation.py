# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_try()
    var_1 = var_0.__eq__(dict_0)
    var_2 = validation_0.to_either()
    var_3 = var_2.to_maybe()
    var_4 = validation_0.__eq__(var_2)
    var_5 = var_3.to_try()
    var_6 = validation_0.to_either()
    var_7 = validation_0.is_fail()
    var_3.is_success()


def test_case_1():
    bytes_0 = b"\xa0\x0b\xfb\x10\xf8\x15$\x80\\"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    var_1 = var_0.__eq__(bytes_0)
    var_2 = var_1.__str__()
    var_2.to_try()


def test_case_2():
    bytes_0 = b"\xa0\x0b\xfb\x10\xf8\x15$\x80"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_maybe()
    var_0.map(bytes_0)


def test_case_3():
    int_0 = -3209
    int_0.map(int_0)


def test_case_4():
    int_0 = -3221
    var_0 = module_0.Validation(int_0, int_0)


def test_case_5():
    none_type_0 = None
    float_0 = -1423.5
    validation_0 = module_0.Validation(float_0, float_0)
    validation_0.map(none_type_0)


def test_case_6():
    none_type_0 = None
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.bind(none_type_0)


def test_case_7():
    float_0 = 1781.611121
    validation_0 = module_0.Validation(float_0, float_0)
    validation_0.ap(validation_0)


def test_case_8():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_box()
    var_0.is_fail()


def test_case_9():
    bytes_0 = b"\x9fmD\xf18"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.map(bytes_0)


def test_case_10():
    bytes_0 = b"\xa0\x0b\xfb\x10\xf8\x15$\x80\\"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_maybe()
    validation_1 = module_0.Validation(bytes_0, var_0)
    var_2 = validation_1.to_either()
    var_3 = validation_1.__eq__(validation_0)
    var_4 = var_1.__eq__(var_1)
    var_4.to_box()


def test_case_11():
    str_0 = "\n    Return the first element of the list which matches the keys, or None if no element matches.\n\n    :param collection: collection to search\n    :type collection: List[A]\n    :param key: function to decide witch element should be found\n    :type key: Function(A) -> Boolean\n    :returns: element of collection or None\n    :rtype: A | None\n    "
    validation_0 = module_0.Validation(str_0, str_0)
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, validation_0)
    var_0 = validation_0.__eq__(validation_0)
    var_0.is_fail()


def test_case_12():
    int_0 = -735
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, int_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_either()
    var_2 = var_1.to_lazy()
    var_3 = var_2.to_try()
    var_3.bind(int_0)


def test_case_13():
    none_type_0 = None
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    dict_0 = {}
    validation_1 = module_0.Validation(validation_0, dict_0)
    var_0 = validation_1.to_maybe()
    var_1 = var_0.__eq__(validation_1)
    var_0.ap(none_type_0)


def test_case_14():
    bytes_0 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_maybe()
    validation_1 = module_0.Validation(bytes_0, var_0)
    var_2 = var_1.__str__()
    validation_2 = module_0.Validation(validation_1, var_1)
    var_3 = validation_1.__eq__(var_2)
    var_4 = validation_2.to_box()
    var_5 = var_4.to_maybe()
    var_3.to_try()
