# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0
import builtins as module_1


def test_case_0():
    none_type_0 = None
    none_type_1 = None
    validation_0 = module_0.Validation(none_type_1, none_type_0)
    var_0 = validation_0.__eq__(none_type_0)
    var_0.ap(none_type_0)


def test_case_1():
    none_type_0 = None
    str_0 = "\n    The Try control gives us the ability write safe code\n    without focusing on try-catch blocks in the presence of exceptions.\n    "
    validation_0 = module_0.Validation(none_type_0, str_0)
    validation_1 = module_0.Validation(str_0, str_0)
    var_0 = validation_1.__str__()
    var_1 = validation_1.to_try()
    var_2 = validation_0.to_maybe()
    var_3 = validation_0.to_maybe()
    var_0.to_box()


def test_case_2():
    none_type_0 = None
    str_0 = "v_y hn$,,\n\x0bR:^$\\D:"
    validation_0 = module_0.Validation(none_type_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.__str__()
    var_2 = module_0.Validation(var_1, var_1)
    var_3 = validation_0.to_maybe()
    var_4 = var_3.ap(validation_0)
    var_4.to_maybe()


def test_case_3():
    str_0 = "\n    The Try control gives us the ability write safe code\n    without focusing on try-catch blocks in the presence of exceptions.\n    "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(str_0)
    var_1 = validation_0.to_maybe()


def test_case_4():
    int_0 = 1529
    int_0.to_lazy()


def test_case_5():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_6():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.to_try()
    var_1.is_fail()


def test_case_7():
    float_0 = 669.9
    validation_0 = module_0.Validation(float_0, float_0)
    validation_0.is_fail()


def test_case_8():
    float_0 = 813.7389
    list_0 = [float_0, float_0, float_0, float_0]
    list_1 = [list_0, float_0, list_0]
    str_0 = "{"
    validation_0 = module_0.Validation(str_0, str_0)
    validation_0.map(list_1)


def test_case_9():
    bytes_0 = b"\xf1\xa9PI\x93V\xea\xbd\x11\xa6A\x90\x0cZ"
    bytes_1 = b""
    validation_0 = module_0.Validation(bytes_1, bytes_1)
    validation_0.bind(bytes_0)


def test_case_10():
    bytes_0 = b'"\xa2q\xad?\x19\xc72\xaeb\x16\xc7\xb4\xde\xbb1\x03\xdejI'
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_try()
    none_type_0 = None
    validation_0.ap(none_type_0)


def test_case_11():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    none_type_1 = None
    validation_1 = module_0.Validation(none_type_1, validation_0)
    var_1 = validation_0.__eq__(validation_0)
    var_1.ap(var_1)


def test_case_12():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.__eq__(none_type_0)
    var_2 = var_0.to_try()
    float_0 = 3309.0
    validation_1 = module_0.Validation(var_1, float_0)
    var_3 = validation_1.__eq__(validation_0)
    var_0.is_fail()


def test_case_13():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)
    module_1.object(*var_0, **var_0)


def test_case_14():
    bytes_0 = b"U*o6,p(\xf7'\xcf\x84Ha"
    list_0 = []
    validation_0 = module_0.Validation(bytes_0, list_0)
    var_0 = validation_0.__str__()
    var_0.is_success()


def test_case_15():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_try()
    var_2 = var_1.__eq__(tuple_0)
    var_2.to_maybe()


def test_case_16():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_maybe()
    var_0.is_fail()
