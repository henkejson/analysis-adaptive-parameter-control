# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0
import builtins as module_1


def test_case_0():
    bytes_0 = b"\xda"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.__eq__(bytes_0)
    var_1.to_either()


def test_case_1():
    bytes_0 = b"\xda"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.__eq__(bytes_0)
    var_1.to_either()


def test_case_2():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_lazy()
    var_2 = var_1.ap(tuple_0)
    var_2.is_fail()


def test_case_3():
    none_type_0 = None
    str_0 = "\n        Returns first element of ImmutableList that passed\n        info argument returns True\n\n        :param fn: function to call with ImmutableList value\n        :type fn: Function(A) -> bool\n        :returns: A\n        "
    validation_0 = module_0.Validation(none_type_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_maybe()
    var_2 = validation_0.to_try()
    var_1.is_success()


def test_case_4():
    bytes_0 = b"\xda"
    validation_0 = module_0.Validation(bytes_0, bytes_0)


def test_case_5():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.__str__()


def test_case_6():
    object_0 = module_1.object()
    validation_0 = module_0.Validation(object_0, object_0)
    validation_0.is_fail()


def test_case_7():
    bytes_0 = b"\xd5\xeb\xfd`\xb9\xda"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_0.map(bytes_0)


def test_case_8():
    bytes_0 = b"2D\x9d\x14]\xe2\xe3\xd8\x19DKD\xb1%"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    str_0 = "yDH"
    validation_0 = module_0.Validation(str_0, str_0)
    validation_0.bind(dict_0)


def test_case_9():
    str_0 = "}Oe(mI\nWWHb"
    str_1 = "YQl(|x"
    bool_0 = True
    bool_1 = True
    bool_2 = False
    tuple_0 = (bool_0, bool_1, bool_2, str_1)
    validation_0 = module_0.Validation(tuple_0, bool_2)
    validation_0.ap(str_0)


def test_case_10():
    bytes_0 = b"\xda"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_box()


def test_case_11():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_box()
    validation_1 = module_0.Validation(validation_0, var_0)
    var_1 = validation_1.to_lazy()
    var_2 = var_0.__eq__(none_type_0)


def test_case_12():
    none_type_0 = None
    complex_0 = -260.16 - 289.537797j
    none_type_1 = None
    validation_0 = module_0.Validation(complex_0, none_type_1)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_maybe()
    var_1.map(none_type_0)


def test_case_13():
    bool_0 = False
    bytes_0 = b"o\xba\xaf\xeb`4Sn\x9d>\xf0_\t\xaap"
    str_0 = "YK>--5HZU\\"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_try()
    var_1 = var_0.map(bytes_0)
    var_2 = var_1.__eq__(bool_0)
    var_2.to_maybe()


def test_case_14():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.__str__()
    dict_0 = {}
    list_0 = [dict_0, dict_0]
    bytes_0 = b"\xc7h\x1d\xbe_\x8b)\xef\xb3A}\xb9"
    tuple_1 = (bytes_0,)
    validation_1 = module_0.Validation(list_0, tuple_1)
    var_2 = validation_1.is_fail()
    var_2.to_either()


def test_case_15():
    bytes_0 = b"\xda"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    var_0.to_lazy()


def test_case_16():
    bytes_0 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(bytes_0)
    var_1 = validation_0.to_either()
    var_0.to_lazy()


def test_case_17():
    bytes_0 = b"\xda"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)
    var_0.to_either()


def test_case_18():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.__str__()
    var_2 = validation_0.to_box()
    dict_0 = {}
    list_0 = [dict_0, dict_0]
    bytes_0 = b"\xc7h\x1d\xbe_\x8b)\xef\xb3A}\xb9"
    tuple_1 = (bytes_0,)
    validation_1 = module_0.Validation(list_0, tuple_1)
    var_3 = module_0.Validation(list_0, var_2)
    var_4 = validation_1.__eq__(validation_0)
    var_1.ap(var_3)
