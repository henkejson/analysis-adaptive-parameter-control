# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    none_type_0 = None
    str_0 = "\n        Returns successful Validation with value and empty errors list.\n\n        :params value: value to store in Validation\n        :type value: A\n        :returns: Successful Validation\n        :rtype: Validation[A, []]\n        "
    none_type_1 = None
    validation_0 = module_0.Validation(str_0, none_type_1)
    var_0 = validation_0.__eq__(none_type_0)
    var_1 = var_0.__str__()
    var_1.to_box()


def test_case_1():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_either()
    var_0.to_either()


def test_case_2():
    int_0 = -1609
    str_0 = "7\x0bWT,&\n"
    validation_0 = module_0.Validation(int_0, str_0)
    var_0 = validation_0.to_either()
    var_0.is_success()


def test_case_3():
    str_0 = ""
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(str_0)
    var_1 = validation_0.to_maybe()
    var_1.is_fail()


def test_case_4():
    bytes_0 = b"\x1f\x87\x1c\xe0\xf4\x9a\xedO\xda"
    set_0 = {bytes_0, bytes_0}
    bool_0 = True
    tuple_0 = (bytes_0, set_0, bool_0, bool_0)
    validation_0 = module_0.Validation(tuple_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_0.is_fail()


def test_case_5():
    str_0 = "U"
    str_0.is_success()


def test_case_6():
    int_0 = -3512
    validation_0 = module_0.Validation(int_0, int_0)


def test_case_7():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.to_maybe()


def test_case_8():
    int_0 = -3512
    str_0 = "U"
    validation_0 = module_0.Validation(int_0, str_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.__eq__(validation_0)
    var_2 = validation_0.is_fail()
    var_3 = var_0.__eq__(int_0)
    var_3.to_try()


def test_case_9():
    dict_0 = {}
    str_0 = "neRC"
    str_1 = "{!fO@x}p]VF"
    dict_1 = {str_1: str_0, str_0: str_1, str_0: str_0}
    validation_0 = module_0.Validation(str_0, dict_1)
    validation_0.bind(dict_0)


def test_case_10():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    str_0 = "Lq/Jf\t20?bFLV"
    list_0 = [str_0, str_0]
    none_type_0 = None
    validation_1 = module_0.Validation(list_0, none_type_0)
    validation_1.ap(validation_0)


def test_case_11():
    float_0 = 4738.0
    validation_0 = module_0.Validation(float_0, float_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.to_box()
    var_2 = var_1.__eq__(var_1)
    int_0 = -82
    dict_0 = {int_0: int_0}
    var_3 = var_0.to_try()
    validation_1 = module_0.Validation(dict_0, int_0)
    var_4 = validation_1.to_box()
    var_5 = validation_1.to_box()
    var_6 = var_4.__str__()
    var_6.is_success()


def test_case_12():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    validation_0.to_either()


def test_case_13():
    int_0 = 3312
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.to_try()


def test_case_14():
    str_0 = ""
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(str_0)
    int_0 = -2491
    validation_0.map(int_0)


def test_case_15():
    int_0 = -3516
    str_0 = ""
    validation_0 = module_0.Validation(int_0, str_0)
    var_0 = validation_0.is_success()
    var_1 = validation_0.__str__()
    int_0.map(int_0)


def test_case_16():
    int_0 = -3512
    str_0 = "="
    validation_0 = module_0.Validation(int_0, str_0)
    var_0 = validation_0.__str__()
    var_1 = module_0.Validation(var_0, var_0)
    var_2 = validation_0.__eq__(var_1)
    validation_0.bind(validation_0)
