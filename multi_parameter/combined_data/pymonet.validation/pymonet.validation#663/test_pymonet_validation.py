# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bool_0 = True
    str_0 = "\n        :param semigroup: other semigroup to concat\n        :type semigroup: All[B]\n        :returns: new All with last truly value or first falsy\n        :rtype: All[A | B]\n        "
    validation_0 = module_0.Validation(bool_0, str_0)
    validation_1 = validation_0.to_lazy()
    var_0 = validation_0.__eq__(validation_1)
    var_1 = validation_1.to_try()
    var_2 = validation_0.to_maybe()
    var_1.ap(bool_0)


def test_case_1():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.is_fail()
    var_1 = validation_0.__str__()
    var_2 = validation_0.is_success()
    var_2.to_maybe()


def test_case_2():
    bool_0 = False
    str_0 = "\n        :param semigroup: other semigroup to concat\n        :type semigroup: All[B]\n        :returns: new All with last truly value or first falsy\n        :rtype: All[A | B]\n        "
    validation_0 = module_0.Validation(bool_0, str_0)
    validation_1 = module_0.Validation(bool_0, str_0)
    var_0 = validation_0.__eq__(validation_1)
    var_1 = validation_1.to_try()
    var_2 = validation_0.__str__()
    var_1.ap(bool_0)


def test_case_3():
    bytes_0 = b"\x86[\xe9^p\x05l\xc1!O\xd3"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_lazy()
    var_2 = var_1.to_box()
    none_type_0 = None
    none_type_0.to_either()


def test_case_4():
    int_0 = -1915
    validation_0 = module_0.Validation(int_0, int_0)


def test_case_5():
    str_0 = "\n        :param semigroup: other semigroup to concat\n        :type semigroup: All[B]\n        :returns: new All with last truly value or first falsy\n        :rtype: All[A | B]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.is_success()


def test_case_6():
    str_0 = "Cc"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.is_fail()
    var_1.is_success()


def test_case_7():
    none_type_0 = None
    float_0 = 2474.12
    validation_0 = module_0.Validation(float_0, float_0)
    validation_0.map(none_type_0)


def test_case_8():
    none_type_0 = None
    str_0 = ""
    validation_0 = module_0.Validation(str_0, str_0)
    validation_0.bind(none_type_0)


def test_case_9():
    str_0 = "\n        If Maybe is empty return default_value, in other case.\n\n        :param default_value: value to return if Maybe is empty\n        :type default_value: Any\n        :returns: value of Maybe or default_value\n        :rtype: A\n        "
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.ap(str_0)


def test_case_10():
    str_0 = "\n    Last is a Monoid that will always return the lastest, value when 2 Last instances are combined.\n    "
    bytes_0 = b"i\x02\xcf"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_box()
    var_0.bind(str_0)


def test_case_11():
    bool_0 = True
    bytes_0 = b"\xbbl_Wi\xa6"
    none_type_0 = None
    validation_0 = module_0.Validation(bytes_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.__str__()
    var_1.map(bool_0)


def test_case_12():
    bool_0 = False
    str_0 = ""
    validation_0 = module_0.Validation(bool_0, str_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.to_either()
    var_2 = validation_0.__eq__(bool_0)
    var_3 = var_1.to_try()
    var_4 = validation_0.__str__()


def test_case_13():
    int_0 = -3484
    validation_0 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.__str__()
    bool_0 = False
    str_0 = "\n        :param semigroup: other semigroup to concat\n        :type semigroup: All[B]\n        :returns: new All with last truly value or first falsy\n        :rtype: All[A | B]\n        "
    validation_1 = module_0.Validation(bool_0, str_0)
    var_2 = validation_1.__eq__(validation_0)
    var_3 = validation_1.__str__()
    validation_0.to_either()


def test_case_14():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    none_type_0 = None
    var_0 = validation_0.__eq__(none_type_0)
    var_1 = dict_0.__str__()
    var_2 = validation_0.to_box()
    validation_1 = module_0.Validation(validation_0, dict_0)
    var_3 = validation_0.to_maybe()
    var_4 = validation_1.to_try()
    validation_0.ap(var_3)
