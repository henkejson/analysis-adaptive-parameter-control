# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bool_0 = True
    none_type_0 = None
    validation_0 = module_0.Validation(bool_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_0.is_fail()


def test_case_1():
    int_0 = -834
    bytes_0 = b"\xf8"
    validation_0 = module_0.Validation(bytes_0, int_0)
    var_0 = validation_0.__eq__(int_0)
    validation_1 = module_0.Validation(int_0, bytes_0)


def test_case_2():
    bytes_0 = b"X\xe6\xd1"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()


def test_case_3():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.__str__()
    var_2 = var_1.__str__()
    var_2.to_try()


def test_case_4():
    bytes_0 = b"\x19\xaa"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_0.is_success()


def test_case_5():
    str_0 = "[(v&Cf\r"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    var_0.is_fail()


def test_case_6():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)


def test_case_7():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.to_try()


def test_case_8():
    float_0 = 289.7131380795721
    validation_0 = module_0.Validation(float_0, float_0)
    validation_0.is_fail()


def test_case_9():
    int_0 = -3478
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.map(int_0)


def test_case_10():
    float_0 = -145.0
    str_0 = "d"
    validation_0 = module_0.Validation(str_0, str_0)
    validation_0.bind(float_0)


def test_case_11():
    bytes_0 = b"\xcf\xe4"
    none_type_0 = None
    validation_0 = module_0.Validation(bytes_0, none_type_0)
    int_0 = 3398
    validation_1 = module_0.Validation(int_0, int_0)
    validation_1.ap(bytes_0)


def test_case_12():
    int_0 = -834
    bytes_0 = b"\xf8"
    validation_0 = module_0.Validation(bytes_0, int_0)
    var_0 = validation_0.__eq__(int_0)
    validation_1 = module_0.Validation(int_0, bytes_0)
    var_1 = validation_0.to_box()


def test_case_13():
    int_0 = 3409
    validation_0 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.to_lazy()


def test_case_14():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_box()
    var_1.to_box()


def test_case_15():
    bytes_0 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.__str__()
    var_2 = validation_0.is_fail()
    bool_0 = True
    validation_1 = module_0.Validation(bool_0, var_1)
    validation_1.ap(bool_0)


def test_case_16():
    bytes_0 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_maybe()
    var_2 = validation_0.__str__()
    var_3 = validation_0.is_fail()
    bool_0 = True
    validation_1 = module_0.Validation(bool_0, var_1)
    validation_1.ap(var_1)


def test_case_17():
    bytes_0 = b"\x17\x01\xe9\x1e"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(validation_1)
    var_0.to_maybe()
