# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    none_type_0 = None
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.__eq__(none_type_0)


def test_case_1():
    bytes_0 = b"\xf1\x06\xfd\xb3"
    float_0 = 474.0
    list_0 = [bytes_0, float_0, bytes_0]
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.__str__()
    var_1 = var_0.__str__()
    var_1.to_try()


def test_case_2():
    set_0 = set()
    tuple_0 = (set_0,)
    str_0 = ".J"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, str_0, dict_0, str_0]
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.ap(tuple_0)


def test_case_3():
    none_type_0 = None
    str_0 = "\\aT{EHLlY\r0BdV?|KQ"
    validation_0 = module_0.Validation(none_type_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_try()
    var_1.to_maybe()


def test_case_4():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)


def test_case_5():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_either()


def test_case_6():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.is_fail()


def test_case_7():
    none_type_0 = None
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0}
    validation_0 = module_0.Validation(set_0, tuple_0)
    validation_0.map(none_type_0)


def test_case_8():
    none_type_0 = None
    none_type_1 = None
    validation_0 = module_0.Validation(none_type_1, none_type_1)
    validation_0.bind(none_type_0)


def test_case_9():
    str_0 = '(p"NBwcz\\j'
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.ap(str_0)


def test_case_10():
    str_0 = 'G-XSN-X"Z&ntuj^0'
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_box()
    var_2 = var_1.to_try()
    var_2.to_maybe()


def test_case_11():
    int_0 = -2098
    set_0 = set()
    none_type_0 = None
    validation_0 = module_0.Validation(set_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.bind(int_0)
    complex_0 = -292 + 434.15j
    validation_1 = module_0.Validation(complex_0, complex_0)
    validation_1.is_success()


def test_case_12():
    bytes_0 = b"g\xb7\x11\x0b\xf0\xb1\xa9\x83\x86\xb9\xa4z\x8dO="
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_try()
    var_1 = validation_0.__eq__(bytes_0)
    var_1.bind(bytes_0)


def test_case_13():
    str_0 = "g6O,*)<\t fF`2"
    none_type_0 = None
    str_1 = ""
    validation_0 = module_0.Validation(str_0, str_1)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_lazy()
    var_2 = var_0.__eq__(none_type_0)
    validation_1 = module_0.Validation(var_0, none_type_0)
    var_3 = validation_0.to_box()
    var_4 = validation_0.__str__()
    var_5 = var_3.to_lazy()
    validation_1.bind(str_0)


def test_case_14():
    bool_0 = True
    tuple_0 = (bool_0,)
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    str_0 = "zU6CEj"
    validation_1 = module_0.Validation(tuple_0, str_0)
    var_0 = validation_0.__eq__(validation_1)
    var_1 = validation_0.__str__()
    var_2 = validation_1.is_success()
    var_2.is_fail()


def test_case_15():
    bool_0 = True
    tuple_0 = (bool_0,)
    str_0 = "zU6CEj"
    validation_0 = module_0.Validation(tuple_0, str_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.__str__()
    var_0.to_box()


def test_case_16():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_box()
    var_2 = var_1.__eq__(bool_0)
    var_2.to_box()
