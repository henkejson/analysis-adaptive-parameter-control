# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    none_type_0 = None
    none_type_1 = None
    validation_0 = module_0.Validation(none_type_1, none_type_1)
    var_0 = validation_0.__eq__(none_type_0)
    var_0.to_maybe()


def test_case_1():
    bytes_0 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_try()
    var_0.to_box()


def test_case_2():
    str_0 = "\n        Transform Either to Box.\n\n        :returns: Box monad with previous value\n        :rtype: Box[A]\n        "
    bytes_0 = b"w\xf6:\x9d\x93y"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    validation_0.map(str_0)


def test_case_3():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.is_success()
    var_1 = validation_0.__str__()
    var_2 = validation_0.to_either()
    var_3 = var_2.__eq__(validation_0)
    var_4 = validation_0.to_lazy()
    var_5 = var_4.__eq__(var_3)
    var_6 = var_0.__str__()
    var_2.is_success()


def test_case_4():
    bytes_0 = b"^\rm\xf8\xf8p\x84\xa7"
    bool_0 = True
    set_0 = {bytes_0, bool_0, bytes_0, bool_0}
    int_0 = -287
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.ap(set_0)
    var_2 = var_1.map(int_0)
    var_3 = var_2.to_maybe()
    var_4 = var_3.to_lazy()
    var_5 = var_4.__str__()
    none_type_0 = None
    validation_1 = module_0.Validation(set_0, none_type_0)
    validation_1.__str__()


def test_case_5():
    str_0 = "g2124r/Bg}Qo9WvGm%|"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_box()
    var_2 = var_0.to_either()
    var_2.is_success()


def test_case_6():
    str_0 = "Lm(1\x0cKfdE"
    validation_0 = module_0.Validation(str_0, str_0)


def test_case_7():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.__str__()


def test_case_8():
    bool_0 = True
    str_0 = "\n        :param semigroup: other semigroup to concat\n        :type semigroup: One[B]\n        :returns: new One with first truly value or last falsy\n        :rtype: One[A | B]\n        "
    dict_0 = {str_0: str_0}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.is_fail()
    var_1 = var_0.__str__()
    var_1.bind(bool_0)


def test_case_9():
    none_type_0 = None
    none_type_1 = None
    validation_0 = module_0.Validation(none_type_1, none_type_1)
    validation_0.bind(none_type_0)


def test_case_10():
    bool_0 = True
    tuple_0 = (bool_0,)
    float_0 = -938.893987
    validation_0 = module_0.Validation(tuple_0, bool_0)
    validation_0.ap(float_0)


def test_case_11():
    bytes_0 = b"\x00\xa7\x89\t\xde\xaf\xb6\x16\xa6\x19\xce+{2\xcd\xf9\x9b\x0f\x0c"
    none_type_0 = None
    validation_0 = module_0.Validation(bytes_0, none_type_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.__eq__(var_0)


def test_case_12():
    list_0 = []
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, list_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.bind(list_0)
    var_1.is_success()


def test_case_13():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_try()
    var_0.to_either()


def test_case_14():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_lazy()
    var_2 = var_1.to_either()
    var_3 = var_0.__str__()
    var_4 = var_2.__eq__(var_2)
    var_5 = var_1.map(var_1)
    var_0.to_either()


def test_case_15():
    bool_0 = False
    bytes_0 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_lazy()
    var_2 = validation_0.is_fail()
    var_2.bind(bool_0)


def test_case_16():
    bytes_0 = b"\x9d\xc3\xf0\x0c\xd8C\xe2\x9a\x87\xe5\xd9=\xc3\x9fn\x88\x0c"
    none_type_0 = None
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = module_0.Validation(bytes_0, validation_0)
    var_2 = validation_0.__str__()
    var_3 = validation_0.__eq__(none_type_0)
    var_4 = validation_0.to_lazy()
    none_type_1 = None
    var_5 = validation_0.to_lazy()
    var_6 = var_1.__eq__(validation_0)
    validation_1 = module_0.Validation(none_type_1, bytes_0)
    validation_1.map(none_type_1)
