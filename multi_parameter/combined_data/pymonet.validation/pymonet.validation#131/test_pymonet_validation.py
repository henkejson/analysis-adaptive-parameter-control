# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bytes_0 = b"b\xaad\x9a\xc9\x81\xaaa$\x94"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    str_0 = "|\x0c;w3g9m"
    var_0 = validation_0.to_either()
    var_1 = validation_0.__eq__(bytes_0)
    validation_1 = module_0.Validation(var_0, str_0)
    var_2 = validation_1.__str__()
    var_3 = validation_1.to_maybe()
    var_4 = validation_1.is_success()
    var_1.to_maybe()


def test_case_1():
    bytes_0 = b"\x9f\xda#\xfb\x8f0\x88\x8f\x14\x16\xed\xf7\xc3$\x0f50\x86\xe0\x9e"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.__eq__(var_0)
    var_2 = validation_0.__str__()


def test_case_2():
    none_type_0 = None
    bytes_0 = b"\xfe\xa1\x9e>0"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_box()
    var_1.ap(none_type_0)


def test_case_3():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_4():
    bytes_0 = b"\x9f\xda#\xfb\x8f0\x88\x8f\x14\x16\xed\xf7\xc3$\x0f50\x86\xe0\x9e"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()


def test_case_5():
    bytes_0 = b"\xdc\xbd]\x94\x9e\xe0"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.is_fail()


def test_case_6():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.to_lazy()
    validation_0.map(var_1)


def test_case_7():
    bytes_0 = b"\xc4yWv\xbf\xf2'@"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.is_fail()
    validation_0.bind(validation_0)


def test_case_8():
    bool_0 = False
    bool_1 = False
    bool_2 = True
    validation_0 = module_0.Validation(bool_1, bool_2)
    validation_0.ap(bool_0)


def test_case_9():
    complex_0 = -88.826244 + 1810j
    validation_0 = module_0.Validation(complex_0, complex_0)
    var_0 = validation_0.to_box()


def test_case_10():
    bytes_0 = b"\x9f\xda#\xfb\x8f0\x88\x8f\x14\x16\xed\xf7\xc3$\x0f50\x86\xe0\x9e"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_lazy()


def test_case_11():
    bytes_0 = b"\xdc\xbd]\x94\x9e\xe0"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_try()


def test_case_12():
    bool_0 = False
    bool_1 = True
    validation_0 = module_0.Validation(bool_0, bool_1)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_lazy()


def test_case_13():
    bytes_0 = b"b\xaad\x9a\xc9\x81\xaaa$\x94"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    str_0 = "|\x0c;w3g9m"
    list_0 = [str_0, str_0, str_0]
    var_0 = validation_0.__eq__(bytes_0)
    validation_1 = module_0.Validation(list_0, str_0)
    var_1 = validation_1.to_lazy()
    var_2 = validation_1.__str__()
    validation_2 = module_0.Validation(validation_0, str_0)
    var_3 = validation_1.__eq__(validation_0)
    var_3.to_box()


def test_case_14():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.__str__()
    var_0.is_success()


def test_case_15():
    bytes_0 = b"b\xaad\x9a\xc9\x81\xaaa$\x94"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    str_0 = "|\x0c;w3g9m"
    var_0 = validation_0.to_either()
    var_1 = validation_0.__eq__(bytes_0)
    validation_1 = module_0.Validation(var_0, str_0)
    var_2 = validation_1.to_lazy()
    var_3 = validation_1.__str__()
    var_4 = validation_1.to_maybe()
    var_5 = var_4.to_try()
    var_6 = var_2.to_maybe()
    validation_2 = module_0.Validation(bytes_0, var_3)
    var_1.to_try()


def test_case_16():
    bytes_0 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    str_0 = "|\x0c;w3g9m"
    var_0 = validation_0.to_either()
    var_1 = validation_0.__eq__(bytes_0)
    validation_1 = module_0.Validation(var_0, str_0)
    var_2 = validation_1.to_lazy()
    var_3 = validation_1.__str__()
    var_4 = validation_1.to_lazy()
    var_5 = validation_0.to_either()
    validation_0.ap(var_1)


def test_case_17():
    bool_0 = False
    set_0 = set()
    validation_0 = module_0.Validation(bool_0, set_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_maybe()
    var_2 = validation_0.__str__()
    var_3 = var_1.to_box()
    validation_0.bind(bool_0)
