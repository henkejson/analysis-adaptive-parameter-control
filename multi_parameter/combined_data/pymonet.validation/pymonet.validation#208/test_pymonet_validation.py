# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    int_0 = 0
    dict_0 = {int_0: int_0}
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(dict_0)
    list_0 = []
    validation_1 = module_0.Validation(list_0, list_0)
    var_1 = validation_1.__str__()
    var_1.to_try()


def test_case_1():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.__str__()
    var_0.ap(validation_0)


def test_case_2():
    bytes_0 = b"~\x1a\xee\xa9\xb1\xaf\xacx\xde>&["
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_try()


def test_case_3():
    bytes_0 = b"m\xd9v\x8ad"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    int_0 = 0
    dict_0 = {int_0: int_0}
    var_1 = var_0.to_box()
    var_2 = validation_0.to_box()
    var_3 = var_1.__eq__(dict_0)
    list_0 = []
    validation_1 = module_0.Validation(list_0, list_0)
    var_4 = validation_1.to_box()
    var_5 = var_0.map(dict_0)
    var_6 = validation_0.to_maybe()
    validation_2 = module_0.Validation(list_0, var_0)
    var_7 = validation_0.__str__()
    validation_2.map(var_3)


def test_case_4():
    bytes_0 = b"oA\xfc\xc6Z8\xec"
    validation_0 = module_0.Validation(bytes_0, bytes_0)


def test_case_5():
    bytes_0 = b"~\x1a\xee\xa9\xb1\xaf\xacx\xde>&["
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_try()
    var_0.to_either()


def test_case_6():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.is_fail()


def test_case_7():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    validation_1.map(none_type_0)


def test_case_8():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    bytes_0 = b"f\x8b48#\xbe\xe2u\x08\xb4"
    validation_0.bind(bytes_0)


def test_case_9():
    int_0 = -2909
    bytes_0 = b"\xbe\x92^\xdf\xa8h\xef\x91\xcd\x1b\x06X"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_0.ap(int_0)


def test_case_10():
    set_0 = set()
    bool_0 = True
    validation_0 = module_0.Validation(set_0, bool_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.to_lazy()


def test_case_11():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.to_lazy()
    var_2 = var_1.to_box()
    var_3 = var_0.to_either()
    validation_1 = module_0.Validation(var_2, list_0)
    var_4 = validation_0.is_success()
    validation_2 = module_0.Validation(list_0, var_2)
    var_5 = var_1.ap(var_2)
    validation_2.is_success()


def test_case_12():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    list_0 = validation_0.__eq__(validation_0)
    validation_1 = module_0.Validation(list_0, list_0)
    validation_1.__str__()


def test_case_13():
    bytes_0 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.to_either()
    int_0 = 0
    dict_0 = {int_0: int_0}
    bool_0 = True
    validation_1 = module_0.Validation(bool_0, bool_0)
    var_2 = validation_1.__eq__(dict_0)
    validation_1.is_fail()


def test_case_14():
    bytes_0 = b"m\xd9v\x8ad"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = module_0.Validation(validation_0, bytes_0)
    var_2 = var_0.__str__()
    bool_0 = False
    validation_1 = module_0.Validation(bool_0, bool_0)
    var_3 = validation_1.__eq__(var_1)
    list_0 = []
    validation_2 = module_0.Validation(list_0, list_0)
    var_4 = validation_2.__str__()
    var_4.to_box()
