# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0
import builtins as module_1


def test_case_0():
    float_0 = -376.097
    validation_0 = module_0.Validation(float_0, float_0)
    var_0 = validation_0.__eq__(float_0)
    var_0.is_fail()


def test_case_1():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_box()
    var_2 = var_1.to_lazy()
    var_3 = var_1.to_maybe()
    var_4 = var_1.to_either()
    none_type_0 = None
    none_type_1 = None
    var_5 = var_2.bind(validation_0)
    var_6 = var_5.ap(var_2)
    validation_1 = module_0.Validation(none_type_0, tuple_0)
    var_7 = validation_1.__str__()
    var_8 = var_4.to_maybe()
    var_9 = var_8.__str__()
    validation_1.bind(none_type_1)


def test_case_2():
    str_0 = "B~\n7Y22d`a"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    str_1 = "\n    Return the first element of the list which matches the keys, or None if no element matches.\n\n    :param collection: collection to search\n    :type collection: List[A]\n    :param key: function to decide witch element should be found\n    :type key: Function(A) -> Boolean\n    :returns: element of collection or None\n    :rtype: A | None\n    "
    var_1 = var_0.bind(validation_0)
    validation_1 = module_0.Validation(str_1, str_1)
    var_2 = validation_1.to_try()
    var_2.to_box()


def test_case_3():
    bool_0 = True
    var_0 = module_0.Validation(bool_0, bool_0)


def test_case_4():
    int_0 = -1341
    list_0 = [int_0, int_0, int_0]
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_either()


def test_case_5():
    int_0 = -1341
    list_0 = [int_0, int_0, int_0]
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.to_either()
    var_2 = var_1.to_maybe()
    var_3 = validation_0.is_fail()
    var_3.to_maybe()


def test_case_6():
    str_0 = "C\\4[Ii;6:N/5fe"
    float_0 = -2234.7
    validation_0 = module_0.Validation(float_0, float_0)
    validation_0.map(str_0)


def test_case_7():
    int_0 = 0
    list_0 = [int_0]
    none_type_0 = None
    validation_0 = module_0.Validation(list_0, list_0)
    validation_0.bind(none_type_0)


def test_case_8():
    str_0 = "\n    Perform left-to-right function composition.\n\n    :param value: argument of first applied function\n    :type value: Any\n    :param functions: list of functions to applied from left-to-right\n    :type functions: List[Function]\n    :returns: result of all functions\n    :rtype: Any\n    "
    str_1 = "+W@H@,\x0b3|V/WpC'zE0kl"
    validation_0 = module_0.Validation(str_1, str_0)
    validation_0.ap(str_1)


def test_case_9():
    str_0 = "V,F\x0c1YfHXCb@"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.__eq__(validation_0)
    var_2 = validation_0.to_box()
    var_3 = var_2.to_maybe()
    var_4 = validation_0.to_box()
    var_5 = var_3.to_lazy()
    var_6 = var_3.to_either()
    var_7 = var_2.to_maybe()
    var_8 = var_2.__str__()
    var_9 = var_5.__str__()
    var_9.bind(validation_0)


def test_case_10():
    int_0 = -1341
    list_0 = [int_0, int_0, int_0]
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.to_either()


def test_case_11():
    bool_0 = False
    int_0 = -1357
    list_0 = [int_0, int_0, int_0]
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_box()
    var_2 = var_0.ap(bool_0)
    var_3 = validation_0.to_either()


def test_case_12():
    int_0 = -1341
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.to_try()


def test_case_13():
    complex_0 = -560.7326 - 2810.9j
    str_0 = "S`AE\t\tPkQDgqd"
    validation_0 = module_0.Validation(complex_0, str_0)
    var_0 = validation_0.__str__()
    var_1 = var_0.__str__()


def test_case_14():
    str_0 = "V,F\x0c1YfHX#^@"
    none_type_0 = None
    list_0 = []
    validation_0 = module_0.Validation(str_0, list_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_box()
    var_1.bind(none_type_0)


def test_case_15():
    str_0 = "V,F\x0c1YfHX#^@"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_either()
    var_2 = validation_0.__eq__(validation_0)
    var_3 = validation_0.to_maybe()
    var_4 = var_3.__eq__(str_0)
    var_5 = validation_0.to_either()
    var_6 = validation_0.to_box()
    var_7 = var_3.to_lazy()
    validation_1 = module_0.Validation(var_4, var_4)
    var_8 = validation_1.to_lazy()
    var_9 = var_3.to_either()
    var_10 = validation_1.__eq__(validation_0)
    module_1.object(*validation_1, **var_1)
