# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    str_0 = "j-E"
    str_1 = "T[& |KN9RTM8}z(Tm"
    validation_0 = module_0.Validation(str_1, str_1)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.is_success()
    var_2 = validation_0.to_try()
    var_3 = var_2.__eq__(str_1)
    validation_1 = module_0.Validation(str_0, str_1)
    var_4 = validation_1.__eq__(validation_1)
    var_4.ap(var_4)


def test_case_1():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(none_type_0)
    validation_0.to_maybe()


def test_case_2():
    str_0 = "WinX}?c'|]a"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.__eq__(str_0)
    var_1.is_fail()


def test_case_3():
    str_0 = "qZ\t{aE\t_R"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    var_0.to_either()


def test_case_4():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_lazy()
    var_1.is_fail()


def test_case_5():
    str_0 = "\n        Transform Maybe to Try.\n\n        :returns: Lazy monad with function returning previous value in other case Left with None\n        :rtype: Lazy[Function() -> (A | None)]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.is_success()
    var_1 = validation_0.to_maybe()
    var_1.is_fail()


def test_case_6():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_7():
    bytes_0 = b"\xa2ZV4"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.is_fail()
    var_0.is_success()


def test_case_8():
    bytes_0 = b"UL7\xeb\xdf\xd7\xb6\xfe)lt\x1b\xf5"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.__eq__(bytes_0)
    var_2 = validation_0.__eq__(validation_0)
    var_3 = validation_0.to_lazy()
    none_type_0 = None
    var_4 = module_0.Validation(var_3, var_1)
    validation_1 = module_0.Validation(var_0, var_2)
    var_5 = var_0.to_maybe()
    var_6 = var_5.bind(none_type_0)
    bool_0 = False
    validation_2 = module_0.Validation(bool_0, var_5)
    validation_0.map(validation_2)


def test_case_9():
    bytes_0 = b"UL7\xeb\xdf\xd7\xb6\xfe)lt\x1b\xf5"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    validation_0.bind(var_0)


def test_case_10():
    bool_0 = False
    bool_1 = True
    validation_0 = module_0.Validation(bool_1, bool_1)
    validation_0.ap(bool_0)


def test_case_11():
    str_0 = "j-E"
    str_1 = "T[& |KN9RTM8}z(Tm"
    validation_0 = module_0.Validation(str_1, str_1)
    var_0 = validation_0.to_box()
    var_1 = validation_0.is_success()
    var_2 = validation_0.to_try()
    var_3 = var_2.__eq__(str_1)
    validation_1 = module_0.Validation(str_0, str_1)
    var_4 = validation_1.__eq__(validation_1)
    var_4.ap(var_4)


def test_case_12():
    bool_0 = False
    str_0 = "a\x0cbT|aPNkU\x0b`.w:wbCS"
    float_0 = 1994.3641
    validation_0 = module_0.Validation(float_0, float_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.ap(str_0)
    var_2 = var_1.__eq__(bool_0)
    var_2.to_maybe()


def test_case_13():
    float_0 = -1192.3218
    validation_0 = module_0.Validation(float_0, float_0)
    validation_0.to_try()


def test_case_14():
    none_type_0 = None
    set_0 = set()
    validation_0 = module_0.Validation(none_type_0, set_0)
    var_0 = validation_0.__str__()
    var_0.to_maybe()


def test_case_15():
    bytes_0 = b"UL7\xeb\xdf\xd7\xb6\xfe)lt\x1b\xf5"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.__eq__(bytes_0)
    var_2 = validation_0.to_lazy()
    var_3 = var_2.to_box()
    var_4 = var_3.to_maybe()
    var_3.bind(var_4)


def test_case_16():
    bytes_0 = b"UL7\xeb\xdf\xd7\xb6\xfe)lt\x1b\xf5"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_1.__eq__(validation_0)
    validation_1.is_success()


def test_case_17():
    bytes_0 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.map(bytes_0)
    validation_1 = module_0.Validation(bytes_0, bytes_0)
    var_2 = validation_1.to_maybe()
    validation_2 = module_0.Validation(bytes_0, bytes_0)
    var_3 = validation_2.to_either()
    var_4 = validation_2.__eq__(bytes_0)
    var_4.to_either()
