# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    bool_0 = True
    validation_1 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_1.__eq__(validation_0)


def test_case_1():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_1 = module_0.Validation(none_type_0, validation_0)
    var_0 = validation_1.__eq__(none_type_0)


def test_case_2():
    str_0 = "X#)4btQp\n>3WA#.k`$["
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    str_0.to_maybe()


def test_case_3():
    bytes_0 = b"cWCU\xd3RwC\xa9\x82\x93?)\xa4\x10\xe0\x8b\x9c"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.is_fail()
    var_2 = validation_0.__eq__(validation_0)
    var_2.is_fail()


def test_case_4():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_5():
    bool_0 = True
    str_0 = 'S.BN" $vQu:\r5|i'
    dict_0 = {bool_0: bool_0, bool_0: str_0, bool_0: str_0}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.__str__()


def test_case_6():
    bytes_0 = b"cWCU\xd3RwC\xa9\x82\x93?)\xa4\x10\xe0\x9c"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_1 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_1.to_lazy()
    var_1 = validation_1.is_fail()
    int_0 = 1
    validation_2 = module_0.Validation(int_0, var_1)
    var_2 = validation_2.__eq__(var_1)
    var_3 = var_0.__str__()
    var_4 = validation_1.to_lazy()
    var_2.bind(bytes_0)


def test_case_7():
    none_type_0 = None
    none_type_1 = None
    validation_0 = module_0.Validation(none_type_1, none_type_1)
    validation_1 = module_0.Validation(none_type_1, validation_0)
    validation_1.map(none_type_0)


def test_case_8():
    bool_0 = True
    bool_1 = True
    tuple_0 = (bool_1,)
    validation_0 = module_0.Validation(tuple_0, bool_1)
    validation_0.bind(bool_0)


def test_case_9():
    complex_0 = -1745.4 + 1129j
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.ap(complex_0)


def test_case_10():
    int_0 = 455
    validation_0 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.to_box()
    var_0.to_box()


def test_case_11():
    str_0 = "$<l>O\tJyj2\x0ct(-X:iz:\x0c"
    none_type_0 = None
    validation_0 = module_0.Validation(str_0, none_type_0)
    var_0 = validation_0.to_lazy()


def test_case_12():
    bytes_0 = b"\x0cH\xac\xc97h\xc3\x83\xd5.8\xb1\xebc,"
    set_0 = {bytes_0, bytes_0}
    tuple_0 = (bytes_0, set_0)
    none_type_0 = None
    validation_0 = module_0.Validation(tuple_0, none_type_0)
    var_0 = validation_0.__eq__(none_type_0)
    var_1 = validation_0.to_lazy()
    var_2 = var_1.to_either()
    set_1 = set()
    validation_1 = module_0.Validation(set_1, var_2)


def test_case_13():
    tuple_0 = ()
    tuple_1 = (tuple_0, tuple_0)
    dict_0 = {tuple_0: tuple_1, tuple_0: tuple_1}
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, tuple_1)
    var_0 = validation_0.to_try()
    var_1 = var_0.bind(dict_0)
    validation_0.bind(none_type_0)


def test_case_14():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(validation_1)


def test_case_15():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.__str__()
    var_0.to_try()


def test_case_16():
    bool_0 = False
    set_0 = {bool_0}
    dict_0 = {}
    validation_0 = module_0.Validation(set_0, dict_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_box()
    var_2 = var_1.__str__()
    var_2.ap(bool_0)


def test_case_17():
    list_0 = []
    none_type_0 = None
    dict_0 = {}
    validation_0 = module_0.Validation(none_type_0, dict_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_try()
    var_1.ap(list_0)
