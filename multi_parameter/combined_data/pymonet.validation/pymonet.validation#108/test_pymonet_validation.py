# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(bool_0)
    var_0.to_try()


def test_case_1():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.__str__()
    validation_0.map(list_0)


def test_case_2():
    str_0 = "b^]4)FMd/UT)NaMY:"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.is_fail()
    var_1 = validation_0.to_lazy()
    var_2 = validation_0.__str__()
    var_0.to_lazy()


def test_case_3():
    none_type_0 = None
    str_0 = ")$FDc"
    validation_0 = module_0.Validation(none_type_0, str_0)
    validation_1 = module_0.Validation(none_type_0, str_0)
    var_0 = validation_0.is_success()
    var_1 = validation_1.to_either()
    var_2 = var_1.__eq__(var_0)


def test_case_4():
    bool_0 = True
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_maybe()
    bool_1 = True
    validation_1 = module_0.Validation(bool_1, bool_1)
    validation_1.map(bool_0)


def test_case_5():
    bytes_0 = b"\x91\xcb]\xb5\xed"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_try()
    var_2 = validation_0.is_success()
    var_1.is_fail()


def test_case_6():
    float_0 = -1332.0
    validation_0 = module_0.Validation(float_0, float_0)


def test_case_7():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_either()


def test_case_8():
    float_0 = -2442.596
    none_type_0 = None
    validation_0 = module_0.Validation(float_0, none_type_0)
    validation_0.is_fail()


def test_case_9():
    float_0 = -303.5
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.map(float_0)


def test_case_10():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    validation_0.bind(validation_0)


def test_case_11():
    float_0 = 564.55324
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.ap(float_0)


def test_case_12():
    bytes_0 = b"0y\xf0\xbc\xf7(\x17\xeb\xdb\xbby\xfc\xac\xdby\xb6"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_box()
    str_0 = "O@*w!*?pP]lY"
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    validation_1.bind(str_0)


def test_case_13():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.bind(validation_0)
    var_0.is_success()


def test_case_14():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_box()
    var_1.to_box()


def test_case_15():
    bytes_0 = b"\xd8(c\xd0\xb7\xf9\xd1\xbf"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_try()
    var_0.to_box()


def test_case_16():
    float_0 = -1332.0
    validation_0 = module_0.Validation(float_0, float_0)
    var_0 = validation_0.__eq__(validation_0)


def test_case_17():
    none_type_0 = None
    str_0 = ""
    validation_0 = module_0.Validation(str_0, str_0)
    bytes_0 = b"M\x12\xdb'I"
    validation_1 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_1.__eq__(validation_0)
    var_0.bind(none_type_0)
