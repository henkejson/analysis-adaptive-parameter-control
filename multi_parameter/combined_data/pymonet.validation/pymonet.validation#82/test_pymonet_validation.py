# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(none_type_0)
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    validation_0.to_maybe()


def test_case_1():
    str_0 = "6k"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.__str__()
    var_1.to_try()


def test_case_2():
    bytes_0 = b"+;\xe0\xd1\x01\xe1\xb4<\xaarb\n\x1b"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_either()
    var_2 = var_0.to_box()
    validation_1 = module_0.Validation(var_2, validation_0)
    var_3 = var_2.to_maybe()
    validation_0.map(validation_0)


def test_case_3():
    dict_0 = {}
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_maybe()
    var_0.map(dict_0)


def test_case_4():
    int_0 = 593
    none_type_0 = None
    validation_0 = module_0.Validation(int_0, none_type_0)
    var_0 = validation_0.to_box()
    bytes_0 = b"\xcc\xfe|Bt"
    bytes_1 = b'\x9f\xf4\xe4[\xb6p\xcc\x96y"+]\x07\xca\x0f'
    validation_1 = module_0.Validation(bytes_1, bytes_1)
    var_1 = validation_1.to_maybe()
    var_2 = var_1.to_either()
    var_3 = var_2.to_box()
    var_4 = var_3.__eq__(bytes_0)
    var_4.map(var_0)


def test_case_5():
    bytes_0 = b"\x1a"
    validation_0 = module_0.Validation(bytes_0, bytes_0)


def test_case_6():
    set_0 = set()
    bool_0 = False
    float_0 = 799.60509
    tuple_0 = (set_0, set_0, bool_0, float_0)
    none_type_0 = None
    validation_0 = module_0.Validation(tuple_0, none_type_0)
    validation_0.is_fail()


def test_case_7():
    str_0 = "0b_>"
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.map(str_0)


def test_case_8():
    bool_0 = False
    bool_1 = True
    none_type_0 = None
    validation_0 = module_0.Validation(bool_1, none_type_0)
    validation_0.bind(bool_0)


def test_case_9():
    none_type_0 = None
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    validation_0.ap(none_type_0)


def test_case_10():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.__eq__(validation_0)
    var_1.to_maybe()


def test_case_11():
    str_0 = "6k"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_try()
    var_1 = validation_0.__str__()
    var_1.to_try()


def test_case_12():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(none_type_0)
    var_1 = validation_0.__eq__(validation_0)
    validation_1 = module_0.Validation(validation_0, var_1)
    var_1.to_maybe()


def test_case_13():
    float_0 = -436.307273
    bytes_0 = b"\x06\xa1\x8f\xab\xd5\xff='LJ\xf5\xd5Y"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.to_lazy()
    var_2 = var_1.to_box()
    var_3 = var_2.to_either()
    var_3.ap(float_0)


def test_case_14():
    bytes_0 = b"+;\xe0\xd1\x01\xe1\xb4<\xaarb\n\x1b"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_either()
    var_2 = validation_0.to_maybe()
    var_3 = validation_0.__str__()
    validation_1 = module_0.Validation(var_3, var_0)
    validation_2 = module_0.Validation(var_0, var_2)
    var_4 = validation_0.__eq__(validation_2)
    var_4.is_success()


def test_case_15():
    dict_0 = {}
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.__str__()
    var_0.map(dict_0)


def test_case_16():
    bytes_0 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    var_1 = validation_1.to_box()
    validation_1.to_either()
