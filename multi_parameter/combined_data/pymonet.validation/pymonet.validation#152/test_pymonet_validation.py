# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    dict_0 = {}
    tuple_0 = (dict_0,)
    validation_0 = module_0.Validation(tuple_0, dict_0)
    var_0 = validation_0.__eq__(validation_0)
    var_0.is_success()


def test_case_1():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(none_type_0)
    var_0.is_success()


def test_case_2():
    int_0 = -1727
    none_type_0 = None
    validation_0 = module_0.Validation(int_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_box()
    tuple_0 = ()
    tuple_1 = (int_0, tuple_0, tuple_0)
    validation_1 = module_0.Validation(tuple_1, int_0)
    str_0 = "+"
    validation_2 = module_0.Validation(str_0, str_0)
    var_2 = validation_2.to_either()
    var_3 = validation_2.is_fail()
    var_4 = validation_2.__str__()
    var_4.is_success()


def test_case_3():
    dict_0 = {}
    tuple_0 = (dict_0,)
    validation_0 = module_0.Validation(tuple_0, dict_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_either()
    var_2 = validation_0.to_maybe()
    tuple_0.is_success()


def test_case_4():
    bool_0 = False
    str_0 = "All"
    validation_0 = module_0.Validation(str_0, bool_0)
    list_0 = [str_0, str_0, str_0, str_0]
    validation_1 = module_0.Validation(list_0, list_0)
    var_0 = validation_1.to_maybe()
    var_1 = var_0.to_box()
    var_2 = validation_1.to_either()
    var_3 = validation_1.is_fail()
    var_4 = var_3.__str__()
    var_5 = validation_0.to_lazy()
    var_3.to_lazy()


def test_case_5():
    dict_0 = {}
    tuple_0 = (dict_0,)
    validation_0 = module_0.Validation(tuple_0, dict_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_maybe()
    tuple_0.is_success()


def test_case_6():
    dict_0 = {}
    var_0 = module_0.Validation(dict_0, dict_0)


def test_case_7():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.to_try()


def test_case_8():
    complex_0 = 3417.007682 + 4271.579j
    none_type_0 = None
    validation_0 = module_0.Validation(complex_0, none_type_0)
    validation_0.is_fail()


def test_case_9():
    dict_0 = {}
    tuple_0 = (dict_0,)
    validation_0 = module_0.Validation(tuple_0, dict_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_maybe()
    var_2 = var_1.__eq__(validation_0)
    validation_0.map(dict_0)


def test_case_10():
    str_0 = "$tL){AQU0LXp:\x0bk f"
    validation_0 = module_0.Validation(str_0, str_0)
    validation_0.bind(str_0)


def test_case_11():
    int_0 = -498
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, int_0)
    validation_0.ap(int_0)


def test_case_12():
    dict_0 = {}
    tuple_0 = (dict_0,)
    validation_0 = module_0.Validation(tuple_0, dict_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_box()
    var_2 = validation_0.to_maybe()
    tuple_0.is_success()


def test_case_13():
    int_0 = -1857
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    validation_0 = module_0.Validation(int_0, dict_0)
    var_0 = validation_0.to_try()
    var_1 = validation_0.to_lazy()
    var_0.to_try()


def test_case_14():
    str_0 = "GW\x0cc-.~_"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_maybe()
    var_2 = var_1.to_try()
    var_2.to_try()


def test_case_15():
    tuple_0 = ()
    complex_0 = 330 + 197.0734j
    validation_0 = module_0.Validation(complex_0, tuple_0)
    var_0 = validation_0.__str__()
    var_0.to_either()


def test_case_16():
    dict_0 = {}
    tuple_0 = (dict_0,)
    validation_0 = module_0.Validation(tuple_0, dict_0)
    validation_1 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_1.__eq__(validation_0)
    var_1 = validation_0.to_maybe()
    var_2 = validation_1.is_success()
    var_1.map(var_0)
