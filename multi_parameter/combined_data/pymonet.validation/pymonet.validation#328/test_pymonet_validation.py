# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0
import builtins as module_1


def test_case_0():
    none_type_0 = None
    bytes_0 = b"\x13P[ue\xfb\xe3\xf5h\xe8\x94h\xe0^E"
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    validation_0 = module_0.Validation(set_0, bool_0)
    var_0 = validation_0.__eq__(bytes_0)
    var_0.ap(none_type_0)


def test_case_1():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.__str__()
    var_0.to_maybe()


def test_case_2():
    bytes_0 = b"tz\xa8\xbf$\x10\xc55\\v7"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    validation_1 = module_0.Validation(var_0, var_0)
    var_1 = validation_0.to_maybe()
    var_2 = validation_0.to_lazy()
    var_1.is_fail()


def test_case_3():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.is_fail()
    var_1 = validation_0.to_either()
    var_0.is_success()


def test_case_4():
    bytes_0 = b"tz\xa8\xbf$\x10\xc55\\v7"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, var_0)
    var_1 = validation_0.to_maybe()
    var_2 = validation_0.to_lazy()
    var_1.is_fail()


def test_case_5():
    bytes_0 = b"tz\xa8\xbf$\x10\\v7"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_maybe()
    var_2 = validation_0.is_fail()


def test_case_6():
    bool_0 = False
    bool_0.to_either()


def test_case_7():
    object_0 = module_1.object()
    validation_0 = module_0.Validation(object_0, object_0)


def test_case_8():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.to_either()


def test_case_9():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.is_fail()


def test_case_10():
    int_0 = 0
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.map(int_0)


def test_case_11():
    none_type_0 = None
    object_0 = module_1.object()
    validation_0 = module_0.Validation(object_0, object_0)
    validation_0.bind(none_type_0)


def test_case_12():
    object_0 = module_1.object()
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    str_0 = "<#Jv%~)E%K(v\\\r&~\t d\x0c"
    validation_0 = module_0.Validation(str_0, str_0)
    validation_0.ap(dict_0)


def test_case_13():
    str_0 = "\tmzd~t>{Ie,WYh%qYpmd"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_box()
    var_0.is_fail()


def test_case_14():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_try()
    bool_0 = True
    validation_1 = module_0.Validation(bool_0, bool_0)
    var_2 = validation_1.to_lazy()
    validation_1.is_fail()


def test_case_15():
    str_0 = "3_"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_try()
    var_0.is_fail()


def test_case_16():
    bytes_0 = b"tz\xa8\xbf$\x10\xc55\\v7"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_1 = module_0.Validation(bytes_0, var_0)
    var_1 = validation_0.__eq__(validation_1)
    var_2 = validation_1.to_box()
    validation_2 = module_0.Validation(validation_0, var_0)
    var_3 = validation_2.to_box()
    var_4 = var_3.to_maybe()
    var_1.to_lazy()


def test_case_17():
    str_0 = ""
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_maybe()
    var_0.map(str_0)
