# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    none_type_0 = None
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, none_type_0)
    var_0 = validation_0.__eq__(none_type_0)
    var_1 = validation_0.__eq__(validation_0)


def test_case_1():
    str_0 = "TQGqw("
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_lazy()
    var_2 = var_1.to_box()
    var_3 = var_2.to_maybe()


def test_case_2():
    str_0 = "T#%qwB"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.to_lazy()
    validation_1 = module_0.Validation(str_0, var_1)
    var_2 = validation_0.__str__()
    validation_1.to_either()


def test_case_3():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)


def test_case_4():
    str_0 = "\r,gEIR:epuonWK"
    set_0 = {str_0, str_0, str_0}
    tuple_0 = (set_0,)
    validation_0 = module_0.Validation(tuple_0, str_0)
    var_0 = validation_0.is_fail()
    var_0.to_try()


def test_case_5():
    str_0 = "\n    All is a Monoid that will combine 2 values of any type using logical conjunction on their coerced Boolean values.\n    "
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.map(str_0)


def test_case_6():
    str_0 = "TQGqw("
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(str_0)
    var_1 = validation_0.__str__()
    validation_1 = module_0.Validation(str_0, var_1)
    var_2 = var_0.__str__()
    dict_0 = {str_0: validation_0, var_1: str_0}
    validation_1.bind(dict_0)


def test_case_7():
    bool_0 = True
    float_0 = -537.69221
    validation_0 = module_0.Validation(float_0, float_0)
    validation_0.ap(bool_0)


def test_case_8():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.to_maybe()
    var_2 = var_1.to_lazy()
    var_2.is_success()


def test_case_9():
    str_0 = "TQGqw("
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_lazy()
    validation_1 = module_0.Validation(str_0, var_0)
    var_1 = validation_0.__str__()
    var_1.bind(var_1)


def test_case_10():
    str_0 = "TQGqw("
    validation_0 = module_0.Validation(str_0, str_0)
    int_0 = 1278
    validation_1 = module_0.Validation(int_0, int_0)
    var_0 = validation_1.__eq__(validation_0)
    var_1 = validation_1.to_lazy()
    validation_2 = module_0.Validation(var_0, var_1)
    var_2 = var_1.to_box()
    var_3 = var_2.__str__()
    var_4 = validation_2.__eq__(var_1)
    var_4.bind(validation_1)


def test_case_11():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    validation_0.to_try()


def test_case_12():
    str_0 = "TQGqw("
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.__str__()
    var_1.bind(validation_0)


def test_case_13():
    none_type_0 = None
    str_0 = "Maybe[U]"
    list_0 = []
    validation_0 = module_0.Validation(str_0, list_0)
    var_0 = validation_0.to_either()
    var_0.map(none_type_0)


def test_case_14():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_1 = module_0.Validation(validation_0, none_type_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.__str__()
    tuple_0 = ()
    validation_2 = module_0.Validation(tuple_0, tuple_0)
    var_2 = validation_2.to_maybe()
    var_3 = var_2.__eq__(tuple_0)
    var_3.bind(tuple_0)


def test_case_15():
    none_type_0 = None
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)


def test_case_16():
    bool_0 = False
    set_0 = set()
    validation_0 = module_0.Validation(bool_0, set_0)
    var_0 = validation_0.__str__()
