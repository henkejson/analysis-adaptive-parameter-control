# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    float_0 = -1714.211483600248
    none_type_0 = None
    validation_0 = module_0.Validation(float_0, float_0)
    var_0 = validation_0.__eq__(none_type_0)


def test_case_1():
    dict_0 = {}
    int_0 = 342
    validation_0 = module_0.Validation(int_0, dict_0)
    var_0 = validation_0.__str__()
    var_0.to_lazy()


def test_case_2():
    str_0 = "gA"
    list_0 = [str_0]
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_maybe()
    var_2 = validation_0.to_box()
    var_3 = validation_0.to_either()
    var_4 = var_3.to_box()
    var_5 = validation_0.__str__()


def test_case_3():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.__str__()
    var_1.is_fail()


def test_case_4():
    bytes_0 = b"\xaf"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.__str__()
    var_1.to_box()


def test_case_5():
    str_0 = "xkT& "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    var_0.is_success()


def test_case_6():
    str_0 = "\n    In mathematics and computer science, currying is the technique of translating the evaluation of a function.\n    It that takes multiple arguments (or a tuple of arguments) into evaluating a sequence of functions.\n    each with a single argument.\n    "
    validation_0 = module_0.Validation(str_0, str_0)


def test_case_7():
    float_0 = -1690.1431
    none_type_0 = None
    validation_0 = module_0.Validation(float_0, float_0)
    var_0 = validation_0.__eq__(none_type_0)
    validation_0.to_maybe()


def test_case_8():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.is_fail()


def test_case_9():
    bool_0 = True
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.map(bool_0)


def test_case_10():
    bool_0 = True
    str_0 = "xkT& "
    validation_0 = module_0.Validation(bool_0, str_0)
    var_0 = validation_0.to_maybe()
    none_type_0 = None
    validation_1 = module_0.Validation(str_0, var_0)
    var_1 = validation_0.to_try()
    var_2 = validation_1.__eq__(var_0)
    validation_0.bind(none_type_0)


def test_case_11():
    dict_0 = {}
    bool_0 = True
    tuple_0 = (bool_0,)
    none_type_0 = None
    validation_0 = module_0.Validation(tuple_0, none_type_0)
    validation_0.ap(dict_0)


def test_case_12():
    complex_0 = 2031.669418 + 2785.2j
    validation_0 = module_0.Validation(complex_0, complex_0)
    var_0 = validation_0.to_box()
    var_0.is_success()


def test_case_13():
    bool_0 = False
    str_0 = "xkT& "
    validation_0 = module_0.Validation(bool_0, str_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.__eq__(validation_0)
    validation_1 = module_0.Validation(str_0, var_0)
    var_2 = validation_1.__eq__(var_0)
    var_3 = validation_0.is_success()
    var_4 = var_2.__str__()


def test_case_14():
    float_0 = -2645.7
    dict_0 = {float_0: float_0}
    validation_0 = module_0.Validation(dict_0, float_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_maybe()
    var_1.to_maybe()


def test_case_15():
    bool_0 = True
    str_0 = "xkT& "
    validation_0 = module_0.Validation(bool_0, str_0)
    var_0 = validation_0.to_box()
    set_0 = set()
    validation_1 = module_0.Validation(set_0, str_0)
    var_1 = validation_0.__eq__(set_0)
    var_2 = validation_0.to_try()
    var_2.is_success()


def test_case_16():
    float_0 = -1690.1431
    validation_0 = module_0.Validation(float_0, float_0)
    var_0 = validation_0.__eq__(validation_0)
    var_0.to_maybe()


def test_case_17():
    str_0 = "gA"
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    validation_1 = module_0.Validation(str_0, list_0)
    var_0 = validation_0.__eq__(list_0)
    var_1 = validation_0.to_maybe()
    var_0.to_lazy()


def test_case_18():
    none_type_0 = None
    str_0 = "gA"
    list_0 = [str_0]
    validation_0 = module_0.Validation(list_0, list_0)
    none_type_1 = None
    validation_1 = module_0.Validation(none_type_0, none_type_1)
    var_0 = validation_0.to_try()
    var_1 = validation_1.__eq__(validation_0)
    validation_1.to_maybe()
