# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    float_0 = -4408.1336
    int_0 = -2434
    validation_0 = module_0.Validation(int_0, int_0)
    validation_1 = module_0.Validation(int_0, validation_0)
    var_0 = validation_1.__eq__(float_0)


def test_case_1():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.__str__()
    var_1 = var_0.__str__()
    var_2 = var_1.__eq__(dict_0)
    var_2.to_either()


def test_case_2():
    str_0 = "\n        Returns True when errors list are not empty.\n\n        :returns: True for empty errors not list\n        :rtype: Boolean\n        "
    int_0 = -4978
    set_0 = {str_0, int_0, int_0}
    validation_0 = module_0.Validation(str_0, set_0)
    var_0 = validation_0.to_either()


def test_case_3():
    int_0 = -548
    int_1 = -869
    dict_0 = {int_0: int_0, int_0: int_1}
    tuple_0 = (int_0, dict_0)
    validation_0 = module_0.Validation(tuple_0, dict_0)
    var_0 = validation_0.to_maybe()


def test_case_4():
    int_0 = -3100
    validation_0 = module_0.Validation(int_0, int_0)


def test_case_5():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    validation_0 = module_0.Validation(bool_0, set_0)
    var_0 = validation_0.is_fail()
    var_0.to_maybe()


def test_case_6():
    none_type_0 = None
    bytes_0 = b"\x0c\xad,\x84\xb2"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_0.map(none_type_0)


def test_case_7():
    str_0 = "+a"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    complex_0 = -1790 + 2869.4j
    validation_0 = module_0.Validation(complex_0, complex_0)
    validation_0.bind(dict_0)


def test_case_8():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.ap(bool_0)


def test_case_9():
    none_type_0 = None
    bytes_0 = b"T\x1f$"
    list_0 = [bytes_0]
    validation_0 = module_0.Validation(none_type_0, list_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.__str__()
    var_2 = var_1.__eq__(validation_0)


def test_case_10():
    bytes_0 = b"\xd7\xb6oP\xd8\xc5\xd3\xa32\x1b\xf2y\xa5\x88"
    str_0 = ",R,R"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_either()
    var_2 = validation_0.to_lazy()
    validation_1 = module_0.Validation(str_0, var_1)
    var_3 = validation_1.__eq__(var_1)


def test_case_11():
    bytes_0 = b"\xd7\xb6oP\xd8\xc5\xd3\xa32\x1b\xf2y\xa5\x88"
    bool_0 = False
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_maybe()
    var_2 = validation_0.to_either()
    bool_1 = True
    var_3 = var_1.map(bool_1)
    var_4 = validation_0.to_either()
    var_5 = validation_0.to_lazy()
    validation_1 = module_0.Validation(var_5, bool_0)
    var_6 = validation_0.to_try()
    var_7 = var_6.__eq__(var_2)


def test_case_12():
    str_0 = "\n        Call argument function with args in try-catch.\n        when function don't raise exception, not successfully when raise.\n\n        :params fn: function to call and store in monad\n        :type fn: Function(*args) -> A\n        :params *args:\n        :type fn: List\n        :retruns: Successfully monad Try when function don't raise exception, not successfully when raise\n        :rtype: Try[A]\n        "
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, str_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.is_success()
    var_2 = var_0.to_try()
    var_1.is_fail()


def test_case_13():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)


def test_case_14():
    bytes_0 = b""
    str_0 = ",R,R"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_maybe()
    var_2 = validation_0.to_either()
    var_3 = validation_0.to_either()
    var_4 = validation_0.to_lazy()
    validation_1 = module_0.Validation(str_0, var_3)
    var_5 = validation_1.__eq__(var_3)


def test_case_15():
    int_0 = -2434
    validation_0 = module_0.Validation(int_0, int_0)
    validation_1 = module_0.Validation(int_0, validation_0)
    var_0 = validation_0.__eq__(validation_1)


def test_case_16():
    bytes_0 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    str_0 = ",R,R"
    validation_1 = module_0.Validation(str_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = validation_1.__str__()
    var_0.bind(validation_0)
