# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(none_type_0)
    var_0.to_try()


def test_case_1():
    dict_0 = {}
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, dict_0)
    var_0 = validation_0.to_try()
    var_1 = validation_0.__str__()


def test_case_2():
    float_0 = 1275.894
    set_0 = {float_0}
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.__str__()


def test_case_3():
    none_type_0 = None
    bytes_0 = b"0\xe0\xf1\xb1\x80>\x1c-\x9c\xbb'\x1d\x08\xf3"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    validation_0.bind(none_type_0)


def test_case_4():
    str_0 = ""
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, str_0)
    var_0 = validation_0.to_maybe()
    var_0.ap(str_0)


def test_case_5():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_6():
    str_0 = ""
    none_type_0 = None
    validation_0 = module_0.Validation(str_0, none_type_0)
    validation_0.to_try()


def test_case_7():
    str_0 = ""
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, str_0)
    var_0 = validation_0.is_fail()
    var_1 = validation_0.to_maybe()
    var_1.ap(str_0)


def test_case_8():
    bool_0 = False
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.map(bool_0)


def test_case_9():
    complex_0 = 532.79527 - 2745j
    dict_0 = {
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
    }
    none_type_0 = None
    validation_0 = module_0.Validation(dict_0, none_type_0)
    none_type_1 = None
    validation_1 = module_0.Validation(none_type_1, none_type_1)
    validation_1.bind(validation_0)


def test_case_10():
    none_type_0 = None
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    validation_0 = module_0.Validation(list_0, list_0)
    validation_0.ap(none_type_0)


def test_case_11():
    int_0 = 1785
    str_0 = ""
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.to_box()
    var_0.ap(int_0)


def test_case_12():
    bool_0 = True
    bool_1 = True
    validation_0 = module_0.Validation(bool_0, bool_1)
    int_0 = 3510
    none_type_0 = None
    validation_1 = module_0.Validation(int_0, none_type_0)
    var_0 = validation_1.to_lazy()
    var_1 = var_0.to_try()


def test_case_13():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = var_0.__str__()
    var_2 = var_1.__str__()
    var_3 = var_2.__str__()
    var_2.to_either()


def test_case_14():
    str_0 = ""
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.to_either()
    validation_0.bind(validation_0)


def test_case_15():
    str_0 = "\n        Take function and call constructor function passing returned value to fn function.\n\n        It's only way to call function store in Lazy\n        :param fn: Function(constructor_fn) -> B\n        :returns: result od folder function\n        :rtype: B\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.is_success()
    var_1 = validation_0.to_maybe()
    validation_1 = module_0.Validation(var_1, validation_0)
    validation_2 = module_0.Validation(var_1, validation_0)
    var_2 = validation_0.to_box()
    var_0.ap(str_0)


def test_case_16():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(none_type_0)
    complex_0 = -1210.2 - 303.76280257621363j
    validation_1 = module_0.Validation(complex_0, validation_0)
    var_1 = validation_1.__eq__(validation_0)
    var_1.to_maybe()
