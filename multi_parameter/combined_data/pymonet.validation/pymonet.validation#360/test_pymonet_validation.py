# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bytes_0 = b'\x98\x0e\x82yD%"\x8d\x1d\x11/\xefy\x82a\x10'
    list_0 = []
    validation_0 = module_0.Validation(bytes_0, list_0)
    var_0 = validation_0.__eq__(bytes_0)


def test_case_1():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.__str__()
    var_0.is_fail()


def test_case_2():
    str_0 = "\r?'A{=? .{!&,a}i"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, str_0)
    var_0 = validation_0.__str__()
    var_0.bind(validation_0)


def test_case_3():
    bytes_0 = b'\x98\x0e\x82yD%"\x8d\x1d\x11/\xefy\x82a\x10'
    list_0 = []
    validation_0 = module_0.Validation(bytes_0, list_0)
    var_0 = validation_0.to_either()


def test_case_4():
    none_type_0 = None
    int_0 = 1796
    dict_0 = {int_0: int_0, int_0: int_0}
    validation_0 = module_0.Validation(int_0, dict_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.__str__()
    var_2 = var_1.__eq__(none_type_0)
    none_type_1 = None
    bool_0 = True
    validation_1 = module_0.Validation(bool_0, bool_0)
    validation_1.bind(none_type_1)


def test_case_5():
    list_0 = []
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, list_0)
    var_0 = validation_0.to_maybe()
    var_0.ap(list_0)


def test_case_6():
    none_type_0 = None
    none_type_1 = None
    str_0 = "lKhhso"
    validation_0 = module_0.Validation(str_0, none_type_1)
    validation_1 = module_0.Validation(str_0, str_0)
    var_0 = validation_1.to_lazy()
    var_1 = validation_1.to_maybe()
    validation_2 = module_0.Validation(none_type_0, var_0)
    var_2 = var_1.to_try()
    var_3 = validation_1.to_try()
    var_4 = var_1.__str__()
    var_5 = var_2.__str__()
    var_6 = var_2.bind(var_4)
    var_3.to_either()


def test_case_7():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_8():
    int_0 = 2692
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.is_success()


def test_case_9():
    none_type_0 = None
    bool_0 = True
    bytes_0 = b"\xca\x1a\x88\x81\xc4\xf1\x93J<\xdc\x0e\xc7\xa3"
    validation_0 = module_0.Validation(bool_0, bytes_0)
    var_0 = validation_0.is_fail()
    var_0.bind(none_type_0)


def test_case_10():
    list_0 = []
    bytes_0 = b"\xff\xf46Zf\x1f!\xff<\x9f\x08MY[\xdf\xa5\xa3"
    set_0 = {bytes_0, bytes_0}
    validation_0 = module_0.Validation(set_0, bytes_0)
    validation_0.map(list_0)


def test_case_11():
    bytes_0 = b"\xbd\xc9\xc5"
    none_type_0 = None
    validation_0 = module_0.Validation(bytes_0, none_type_0)
    validation_0.ap(bytes_0)


def test_case_12():
    bytes_0 = b"\x1c\xca\x16\xa2\xbcbI\x80\xe2O\xcf*\x9ad\xf2,\x0bs"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_box()


def test_case_13():
    complex_0 = -1940.68 + 2041.3697j
    validation_0 = module_0.Validation(complex_0, complex_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_try()
    var_1.to_lazy()


def test_case_14():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_box()
    validation_0.to_try()


def test_case_15():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_0.to_try()


def test_case_16():
    bool_0 = True
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = module_0.Validation(none_type_0, bool_0)
    var_1 = var_0.__eq__(validation_0)
    var_0.map(var_0)
