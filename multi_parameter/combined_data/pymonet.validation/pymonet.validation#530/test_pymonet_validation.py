# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    str_0 = "'}7\x0b/3o@c9\n<"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.is_success()
    var_1 = validation_0.is_fail()
    complex_0 = 524.114 + 1064j
    var_2 = validation_0.__eq__(complex_0)
    validation_1 = module_0.Validation(var_1, var_1)


def test_case_1():
    bytes_0 = b"\x02@{\xed\x1e\xa3\xc6w.\xdb+\xf3\xb54@M(\x1as"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.__eq__(validation_0)
    var_2 = validation_0.to_maybe()
    var_3 = var_2.bind(bytes_0)
    var_4 = var_3.to_either()
    var_5 = var_3.map(var_2)
    var_6 = var_2.to_box()
    var_7 = var_5.to_lazy()
    var_8 = var_4.map(var_1)
    var_9 = var_8.bind(var_3)
    var_8.is_fail()


def test_case_2():
    bool_0 = False
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_either()
    var_0.bind(bool_0)


def test_case_3():
    bytes_0 = b"&L\x8c:\xc7"
    bytes_1 = b"5<\xda\xa89\xe1m\x83Kc.\xd3B\xb9$\x81\x8d"
    validation_0 = module_0.Validation(bytes_1, bytes_1)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.bind(bytes_0)
    var_1.is_fail()


def test_case_4():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)


def test_case_5():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.is_success()


def test_case_6():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.is_fail()


def test_case_7():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    validation_0.map(list_0)


def test_case_8():
    bytes_0 = b"\x00k\xf6%0-\xe0J\xc4\x88\x9f"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0]
    bool_0 = True
    bool_1 = True
    validation_0 = module_0.Validation(bool_0, bool_1)
    validation_0.bind(list_0)


def test_case_9():
    str_0 = "'}7\x0b}3o@c9D<"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.is_success()
    var_1 = validation_0.is_fail()
    complex_0 = 524.114 + 1064j
    var_2 = validation_0.__eq__(complex_0)
    validation_0.ap(complex_0)


def test_case_10():
    none_type_0 = None
    complex_0 = 2649.148515 + 1721j
    validation_0 = module_0.Validation(complex_0, complex_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.__str__()
    var_2 = var_1.__eq__(none_type_0)


def test_case_11():
    none_type_0 = None
    none_type_1 = None
    set_0 = set()
    list_0 = [set_0, set_0, set_0, set_0]
    validation_0 = module_0.Validation(list_0, set_0)
    var_0 = validation_0.to_try()
    var_1 = var_0.__eq__(none_type_1)
    var_1.ap(none_type_0)


def test_case_12():
    float_0 = 2091.453
    validation_0 = module_0.Validation(float_0, float_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.__eq__(validation_0)
    var_1.to_box()


def test_case_13():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_box()
    var_2 = var_0.to_box()
    var_3 = var_2.to_either()
    int_0 = 381
    list_0 = [int_0, int_0, int_0, int_0]
    validation_1 = module_0.Validation(list_0, int_0)
    var_4 = validation_1.__eq__(list_0)
    validation_2 = module_0.Validation(list_0, list_0)
    var_5 = validation_2.to_maybe()
    str_0 = "a=q"
    var_6 = var_5.ap(str_0)
    var_7 = validation_2.to_either()
    list_1 = [validation_1]
    validation_2.map(list_1)


def test_case_14():
    bytes_0 = b"[%\x85\xd5\x9dz\x80\xf5d\xe7"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_maybe()
    var_2 = validation_0.to_box()
    validation_0.ap(var_1)


def test_case_15():
    float_0 = 128.0
    validation_0 = module_0.Validation(float_0, float_0)
    str_0 = "w\x0cC,Yuc\x0b"
    var_0 = validation_0.to_box()
    var_1 = validation_0.to_lazy()
    var_2 = var_1.__eq__(str_0)
    var_3 = var_1.to_maybe()
    var_4 = validation_0.__eq__(var_3)
    var_3.is_success()


def test_case_16():
    bytes_0 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.__eq__(validation_0)
    validation_0.bind(var_1)


def test_case_17():
    bytes_0 = b"\x02@{\xed\x1e\xa3\xc6w.\xdb+\xf3\xb54@M(\x1as"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = module_0.Validation(validation_0, validation_0)
    var_1 = var_0.__eq__(validation_0)
    var_2 = validation_0.to_either()
    validation_0.map(validation_0)
