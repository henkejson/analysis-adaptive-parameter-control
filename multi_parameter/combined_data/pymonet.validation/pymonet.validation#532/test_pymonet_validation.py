# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bool_0 = True
    bytes_0 = b""
    validation_0 = module_0.Validation(bool_0, bytes_0)
    var_0 = validation_0.__eq__(bool_0)
    validation_0.map(bool_0)


def test_case_1():
    str_0 = ""
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, str_0)
    validation_1 = module_0.Validation(str_0, none_type_0)
    var_0 = validation_1.to_box()
    var_1 = validation_0.__str__()
    validation_1.ap(str_0)


def test_case_2():
    bytes_0 = b"\x0c\xf1\x83\xf0[\xe5\xf3\x9e"
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, bytes_0)
    var_0 = validation_0.__str__()
    var_0.to_try()


def test_case_3():
    str_0 = ":dhxl.5^3n!-0$da+*h"
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_box()
    var_1.ap(str_0)


def test_case_4():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    list_0 = [dict_0, dict_0]
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_lazy()


def test_case_5():
    bytes_0 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_0)


def test_case_6():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.is_fail()


def test_case_7():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_lazy()
    var_2 = var_1.to_box()
    validation_0.bind(var_0)


def test_case_8():
    none_type_0 = None
    int_0 = 746
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.ap(none_type_0)


def test_case_9():
    none_type_0 = None
    none_type_1 = None
    validation_0 = module_0.Validation(none_type_1, none_type_1)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.__eq__(none_type_0)
    var_1.to_maybe()


def test_case_10():
    list_0 = []
    none_type_0 = None
    validation_0 = module_0.Validation(list_0, none_type_0)
    validation_0.to_try()


def test_case_11():
    bytes_0 = b"\x82-<\xfd\xce\xc5\x07/\xfd}{!\x86M\x00"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_0.to_maybe()


def test_case_12():
    bool_0 = True
    bytes_0 = b""
    validation_0 = module_0.Validation(bool_0, bytes_0)
    validation_1 = module_0.Validation(bytes_0, validation_0)
    var_0 = validation_0.__eq__(validation_1)
    validation_0.map(var_0)


def test_case_13():
    str_0 = "rN lTrF"
    bool_0 = True
    tuple_0 = (str_0, bool_0, bool_0, str_0)
    validation_0 = module_0.Validation(tuple_0, str_0)
    bool_1 = True
    var_0 = validation_0.__eq__(validation_0)
    bytes_0 = b""
    validation_1 = module_0.Validation(bool_1, bytes_0)
    var_1 = validation_1.__eq__(bool_1)
    validation_1.map(bool_1)


def test_case_14():
    bool_0 = True
    bytes_0 = b""
    validation_0 = module_0.Validation(bool_0, bytes_0)
    var_0 = validation_0.is_fail()
    var_1 = validation_0.to_try()
    var_2 = validation_0.to_maybe()
    validation_0.map(bool_0)
