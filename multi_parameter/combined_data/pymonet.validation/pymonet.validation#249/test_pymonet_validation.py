# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0
import builtins as module_1


def test_case_0():
    complex_0 = 1281.982 - 323.435135j
    validation_0 = module_0.Validation(complex_0, complex_0)
    var_0 = validation_0.__eq__(validation_0)
    module_1.object(**var_0)


def test_case_1():
    int_0 = -1026
    validation_0 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.__eq__(int_0)
    var_0.to_box()


def test_case_2():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    tuple_1 = ()
    validation_0 = module_0.Validation(tuple_1, tuple_1)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_try()
    var_2 = validation_0.to_either()
    var_1.ap(tuple_0)


def test_case_3():
    str_0 = "t;y!m<\rvF4\tCFI\x0ce"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()


def test_case_4():
    str_0 = ".[@vnl;c@z-,J"
    validation_0 = module_0.Validation(str_0, str_0)


def test_case_5():
    int_0 = 2469
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.is_fail()
    var_0.ap(int_0)


def test_case_6():
    str_0 = "w(_KH"
    set_0 = set()
    validation_0 = module_0.Validation(str_0, set_0)
    validation_0.map(str_0)


def test_case_7():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_try()
    validation_0.bind(tuple_0)


def test_case_8():
    bool_0 = False
    set_0 = {bool_0}
    int_0 = -1169
    none_type_0 = None
    validation_0 = module_0.Validation(int_0, none_type_0)
    validation_0.ap(set_0)


def test_case_9():
    bool_0 = False
    none_type_0 = None
    validation_0 = module_0.Validation(bool_0, none_type_0)
    var_0 = validation_0.to_box()
    var_0.to_box()


def test_case_10():
    complex_0 = 196.5 - 737.13j
    int_0 = -88
    none_type_0 = None
    validation_0 = module_0.Validation(int_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.ap(complex_0)


def test_case_11():
    bytes_0 = b"S\x0fV\xcfx\xef\xa7\xed\xc4\xf3@\xcf\x9d\xce\xcbk\x9a\x92"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, bytes_0]
    float_0 = 3181.52
    validation_0 = module_0.Validation(float_0, float_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_maybe()
    var_1.bind(list_0)


def test_case_12():
    bytes_0 = b"\x9c"
    tuple_0 = (bytes_0,)
    validation_0 = module_0.Validation(tuple_0, bytes_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_either()
    tuple_0.is_fail()


def test_case_13():
    complex_0 = 1281.982 - 323.435135j
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_box()
    validation_1 = module_0.Validation(complex_0, complex_0)
    var_1 = validation_0.__eq__(validation_1)
    var_1.to_box()


def test_case_14():
    bytes_0 = b"\x9c"
    tuple_0 = (bytes_0,)
    validation_0 = module_0.Validation(tuple_0, bytes_0)
    var_0 = validation_0.__str__()
    tuple_0.is_fail()


def test_case_15():
    bytes_0 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    list_0 = [bytes_0]
    int_0 = 2552
    validation_1 = module_0.Validation(int_0, bytes_0)
    var_1 = validation_1.__str__()
    var_2 = var_0.to_box()
    validation_2 = module_0.Validation(bytes_0, list_0)
    validation_2.bind(list_0)
