# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bytes_0 = b"\x90Kca\x00\xf3\xd6\xe9\xa3$<\x812g\x1e"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.__eq__(validation_0)


def test_case_1():
    none_type_0 = None
    bytes_0 = b"\x90Kca\x00\xf3\xd6\xe9\xa3$<\x812g\x1e"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.__eq__(none_type_0)


def test_case_2():
    complex_0 = -3906.74682 + 2375.678889j
    validation_0 = module_0.Validation(complex_0, complex_0)
    var_0 = validation_0.to_box()
    set_0 = set()
    validation_1 = module_0.Validation(set_0, set_0)
    var_1 = validation_1.to_try()
    var_2 = validation_1.to_maybe()
    var_3 = var_2.to_either()
    var_4 = var_2.to_try()
    var_5 = var_2.__str__()
    validation_1.map(var_4)


def test_case_3():
    bytes_0 = b"\x90Kca\x00\xd6\xe9\xa3v<\x812\x1e"
    validation_0 = module_0.Validation(bytes_0, bytes_0)


def test_case_4():
    str_0 = "\n    One is a Monoid that will combine 2 values of any type using logical disjunction OR on their coerced Boolean values.\n    "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    var_0.is_success()


def test_case_5():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.is_fail()


def test_case_6():
    bytes_0 = b"\x90Kca\x00\xf3\xd6\xe9\xa3$<\x812g\x1e"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.__eq__(validation_0)
    validation_0.map(var_1)


def test_case_7():
    tuple_0 = ()
    none_type_0 = None
    none_type_1 = None
    validation_0 = module_0.Validation(tuple_0, none_type_1)
    validation_0.bind(none_type_0)


def test_case_8():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.ap(none_type_0)


def test_case_9():
    bytes_0 = b"\x90Kca\x00\xf3\xd6\xe9\xa3$<\x812g\x1e"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.__eq__(validation_0)
    var_2 = validation_0.to_box()


def test_case_10():
    bytes_0 = b"\x90Kca\x00\xf3\xd6\xe9\xa3$<\x812g\x1e"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_lazy()
    validation_1 = module_0.Validation(bytes_0, bytes_0)
    var_1 = validation_0.__eq__(validation_1)
    var_1.to_maybe()


def test_case_11():
    bytes_0 = b"\x90Kca\x00\xf3\xd6\xe9\xa3$<\x812g\x1e"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.__eq__(var_0)
    var_2 = validation_0.to_try()


def test_case_12():
    complex_0 = -3906.74682 + 2375.678889j
    validation_0 = module_0.Validation(complex_0, complex_0)
    var_0 = validation_0.to_box()
    set_0 = set()
    var_1 = var_0.to_try()
    var_2 = validation_0.to_lazy()
    var_3 = module_0.Validation(set_0, var_2)
    var_4 = var_2.to_try()
    var_4.is_success()


def test_case_13():
    bytes_0 = b"\x90Kca\x00\xf3\xd6\xe9\xa3$<\x812g\x1e"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_either()


def test_case_14():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_box()
    validation_1 = module_0.Validation(none_type_0, var_0)
    validation_2 = module_0.Validation(var_0, validation_0)
    var_1 = validation_2.__eq__(validation_0)
    var_2 = var_0.to_try()
    var_3 = var_2.__eq__(none_type_0)
    var_4 = validation_2.to_lazy()
    var_3.is_success()


def test_case_15():
    bytes_0 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_either()
    var_2 = validation_0.__str__()
    var_3 = var_1.to_box()
    var_1.is_fail()
