# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    none_type_0 = None
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(none_type_0)
    var_0.is_success()


def test_case_1():
    set_0 = set()
    list_0 = [set_0]
    validation_0 = module_0.Validation(set_0, list_0)
    var_0 = validation_0.__str__()
    var_0.is_success()


def test_case_2():
    none_type_0 = None
    dict_0 = {none_type_0: none_type_0}
    validation_0 = module_0.Validation(none_type_0, dict_0)
    var_0 = validation_0.to_maybe()
    validation_0.ap(validation_0)


def test_case_3():
    bytes_0 = b'\xab\x98_"\x08\x11\xa50\xf6@\x04\x06?\xce'
    validation_0 = module_0.Validation(bytes_0, bytes_0)


def test_case_4():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.__str__()


def test_case_5():
    complex_0 = 66 + 1307.408j
    set_0 = {complex_0}
    validation_0 = module_0.Validation(set_0, complex_0)
    validation_0.is_fail()


def test_case_6():
    none_type_0 = None
    str_0 = "\n        :param semigroup: other semigroup to concat\n        :type semigroup: Sum[B]\n        :returns: new Sum with sum of concat semigroups values\n        :rtype: Sum[A]\n        "
    validation_0 = module_0.Validation(none_type_0, str_0)
    validation_0.map(none_type_0)


def test_case_7():
    none_type_0 = None
    complex_0 = -1374.1 + 932.874j
    validation_0 = module_0.Validation(complex_0, complex_0)
    validation_0.bind(none_type_0)


def test_case_8():
    none_type_0 = None
    dict_0 = {none_type_0: none_type_0}
    validation_0 = module_0.Validation(none_type_0, dict_0)
    validation_0.ap(validation_0)


def test_case_9():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_box()
    validation_1 = module_0.Validation(validation_0, none_type_0)
    validation_1.to_maybe()


def test_case_10():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_try()
    var_1 = var_0.__str__()
    var_2 = validation_0.to_box()
    var_3 = validation_0.to_try()
    var_4 = var_3.__str__()
    var_5 = validation_0.to_lazy()
    var_6 = var_5.bind(tuple_0)
    var_7 = var_5.to_either()
    var_5.is_fail()


def test_case_11():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.to_try()


def test_case_12():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.__str__()
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    validation_1.map(validation_1)


def test_case_13():
    set_0 = set()
    int_0 = 2303
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.__str__()
    bool_0 = True
    bool_1 = False
    validation_1 = module_0.Validation(bool_1, bool_1)
    var_2 = validation_1.__eq__(bool_0)
    var_3 = var_2.__eq__(int_0)
    var_3.bind(var_2)


def test_case_14():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)


def test_case_15():
    int_0 = -2135
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_1 = module_0.Validation(int_0, validation_0)
    var_0 = validation_0.__eq__(validation_1)
    validation_0.bind(none_type_0)


def test_case_16():
    set_0 = set()
    int_0 = 2303
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.to_either()
    var_2 = var_0.__str__()
    var_3 = var_0.to_box()
    bool_0 = False
    validation_1 = module_0.Validation(var_2, bool_0)
    var_4 = var_2.__eq__(int_0)
    var_5 = var_4.__eq__(bool_0)
    validation_0.bind(validation_1)


def test_case_17():
    bytes_0 = b"\xb1~C\x8e\xd5\xddM0\xc1\xe7"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.map(bytes_0)
    var_2 = var_1.__str__()
    var_3 = var_2.__eq__(bytes_0)
    var_3.map(none_type_0)
