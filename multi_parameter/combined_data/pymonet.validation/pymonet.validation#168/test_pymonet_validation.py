# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0
import builtins as module_1


def test_case_0():
    bool_0 = False
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, bool_0)
    validation_1 = module_0.Validation(bool_0, none_type_0)
    var_0 = validation_1.__eq__(validation_1)
    validation_1.is_success()


def test_case_1():
    none_type_0 = None
    bool_0 = False
    none_type_1 = None
    validation_0 = module_0.Validation(bool_0, none_type_1)
    var_0 = validation_0.__eq__(none_type_0)
    var_0.to_lazy()


def test_case_2():
    bytes_0 = b"\xc9\xf1\xc2\x16RPF\x04\xc66~\xd2\xd0&\xff\xfd\x1e"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    var_1 = var_0.__str__()
    var_2 = var_0.__eq__(var_1)
    var_2.to_lazy()


def test_case_3():
    bytes_0 = b"\xc3\xdaYY\xce\x1f\xfc\xda\x83"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.is_success()
    var_1 = validation_0.to_either()
    validation_0.bind(var_0)


def test_case_4():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_5():
    none_type_0 = None
    bool_0 = False
    none_type_1 = None
    validation_0 = module_0.Validation(bool_0, none_type_1)
    var_0 = validation_0.__eq__(none_type_0)
    validation_0.is_success()


def test_case_6():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.is_fail()


def test_case_7():
    bool_0 = False
    bytes_0 = b"9u<\x0cYH\xa6\xeb=\x16\xf2"
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.map(bytes_0)


def test_case_8():
    object_0 = module_1.object()
    validation_0 = module_0.Validation(object_0, object_0)
    validation_0.bind(object_0)


def test_case_9():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.ap(none_type_0)


def test_case_10():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_box()
    var_0.is_success()


def test_case_11():
    bool_0 = False
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, bool_0)
    validation_1 = module_0.Validation(bool_0, none_type_0)
    var_0 = validation_1.__eq__(validation_1)
    var_1 = validation_1.to_lazy()
    validation_0.__str__()


def test_case_12():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.to_try()


def test_case_13():
    str_0 = "Aw"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, dict_0]
    float_0 = 550.81438
    list_1 = [list_0, list_0, float_0, float_0]
    validation_0 = module_0.Validation(list_1, dict_0)
    var_0 = validation_0.to_maybe()
    var_0.to_maybe()


def test_case_14():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_lazy()
    none_type_0 = None
    var_1 = var_0.to_box()
    validation_1 = module_0.Validation(none_type_0, bool_0)
    var_2 = validation_1.__eq__(validation_1)
    validation_1.to_try()


def test_case_15():
    object_0 = module_1.object()
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.__str__()
    var_1 = var_0.__eq__(object_0)
    var_1.is_success()


def test_case_16():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_box()
    var_1.bind(set_0)


def test_case_17():
    bool_0 = True
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_either()
    validation_1 = module_0.Validation(validation_0, list_0)
    var_1 = validation_1.to_box()
    var_2 = validation_0.is_success()
    var_0.bind(bool_0)


def test_case_18():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, bool_0)
    validation_2 = module_0.Validation(none_type_0, validation_0)
    var_0 = validation_2.__eq__(validation_0)
    validation_1.to_try()
