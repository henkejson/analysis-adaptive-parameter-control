# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    str_0 = "V3v{jj[`"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(validation_0)


def test_case_1():
    str_0 = "V3v{jU[`"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(str_0)


def test_case_2():
    bool_0 = False
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    set_0 = set()
    validation_1 = module_0.Validation(set_0, set_0)
    var_0 = validation_1.is_fail()
    var_1 = validation_1.to_lazy()
    var_2 = validation_1.__str__()
    var_3 = validation_1.to_box()
    var_2.ap(bool_0)


def test_case_3():
    str_0 = "]-4Bxsy(L/01~"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()


def test_case_4():
    str_0 = "-4Bx+$s>y(L01~"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, str_0)
    var_0 = validation_0.to_maybe()


def test_case_5():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_6():
    str_0 = "V3v{jU[`"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()


def test_case_7():
    str_0 = "\t/+{A"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.is_fail()


def test_case_8():
    str_0 = "V3vjJ["
    validation_0 = module_0.Validation(str_0, str_0)
    validation_0.map(str_0)


def test_case_9():
    float_0 = 4491.0
    validation_0 = module_0.Validation(float_0, float_0)
    validation_0.bind(validation_0)


def test_case_10():
    int_0 = 534
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.ap(int_0)


def test_case_11():
    str_0 = "V3vjU[`S"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_box()


def test_case_12():
    str_0 = "\n        Transform Box into Lazy with returning value function.\n\n        :returns: not folded Lazy monad with function returning previous value\n  f     :rtype: Lazy[Function(() -> A)]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_lazy()


def test_case_13():
    int_0 = 2544
    validation_0 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_box()


def test_case_14():
    str_0 = "!}R\t"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_try()


def test_case_15():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.__eq__(tuple_0)
    var_1 = validation_0.is_success()
    var_2 = validation_0.to_maybe()
    var_3 = validation_0.to_either()
    var_4 = validation_0.__str__()
    var_4.is_success()


def test_case_16():
    str_0 = "\n        Transform Box into Lazy with returning value function.\n\n        :returns: not folded Lazy monad with function returning previous value\n        :rtype: Lazy[Function(() -> A)]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_try()
    validation_1 = module_0.Validation(var_0, var_0)
    var_1 = validation_0.__eq__(validation_1)
