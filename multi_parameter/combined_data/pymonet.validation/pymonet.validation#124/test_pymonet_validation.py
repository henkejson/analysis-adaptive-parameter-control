# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    list_1 = [list_0, list_0]
    validation_0 = module_0.Validation(list_1, list_0)
    var_0 = validation_0.__str__()
    str_0 = "J\x0b7#8OFfy;"
    none_type_0 = None
    validation_1 = module_0.Validation(str_0, none_type_0)
    var_1 = validation_1.to_lazy()
    var_2 = validation_1.__eq__(str_0)
    var_3 = validation_1.to_lazy()


def test_case_1():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    list_1 = [list_0, list_0]
    validation_0 = module_0.Validation(list_1, list_0)
    var_0 = validation_0.__str__()
    str_0 = "J\x0b7#8OFfy;"
    none_type_0 = None
    validation_1 = module_0.Validation(str_0, none_type_0)
    var_1 = validation_1.to_lazy()


def test_case_2():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_either()
    var_0.is_success()


def test_case_3():
    str_0 = "ZPy%"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    var_0.is_fail()


def test_case_4():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_5():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.to_try()


def test_case_6():
    float_0 = -3262.27785
    list_0 = [float_0]
    bool_0 = False
    list_1 = [float_0, float_0, list_0, bool_0]
    validation_0 = module_0.Validation(list_1, bool_0)
    validation_0.is_fail()


def test_case_7():
    bool_0 = True
    bool_1 = True
    str_0 = "(;@"
    tuple_0 = (bool_1, str_0, str_0)
    dict_0 = {tuple_0: tuple_0, str_0: tuple_0}
    none_type_0 = None
    validation_0 = module_0.Validation(dict_0, none_type_0)
    validation_0.map(bool_0)


def test_case_8():
    bool_0 = False
    float_0 = 3567.085332
    none_type_0 = None
    validation_0 = module_0.Validation(float_0, none_type_0)
    validation_0.bind(bool_0)


def test_case_9():
    int_0 = 2370
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.ap(int_0)


def test_case_10():
    set_0 = set()
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, set_0)
    var_0 = validation_0.to_box()
    var_0.is_fail()


def test_case_11():
    bool_0 = False
    bool_1 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_1: bool_1}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_lazy()


def test_case_12():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_maybe()
    var_2 = var_1.__str__()
    var_2.bind(var_1)


def test_case_13():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_maybe()
    var_0.is_success()


def test_case_14():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    list_1 = [list_0, list_0]
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, list_1)
    validation_1 = module_0.Validation(list_1, list_0)
    var_0 = validation_1.__str__()
    str_0 = "J\x0b7#8OFfy;"
    var_1 = validation_1.to_maybe()
    none_type_1 = None
    validation_2 = module_0.Validation(str_0, none_type_1)
    var_2 = validation_2.to_lazy()
    var_3 = validation_2.__eq__(str_0)
    var_3.to_try()


def test_case_15():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    list_1 = [list_0, list_0]
    validation_0 = module_0.Validation(list_1, list_0)
    var_0 = validation_0.__eq__(validation_0)
    str_0 = "J\x0b7#8OFfy;"
    none_type_0 = None
    validation_1 = module_0.Validation(str_0, none_type_0)
    var_0.to_either()


def test_case_16():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    list_1 = [list_0, list_0]
    validation_0 = module_0.Validation(list_1, list_0)
    var_0 = validation_0.__str__()
    none_type_0 = None
    str_0 = "'"
    validation_1 = module_0.Validation(var_0, list_1)
    validation_2 = module_0.Validation(validation_0, none_type_0)
    var_1 = validation_0.to_lazy()
    var_2 = validation_2.__eq__(validation_0)
    var_3 = validation_0.__eq__(str_0)
    var_4 = validation_1.is_success()
    var_4.to_try()


def test_case_17():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    list_1 = [list_0, list_0]
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, list_1)
    validation_1 = module_0.Validation(list_1, list_0)
    var_0 = validation_1.__str__()
    none_type_1 = None
    validation_2 = module_0.Validation(validation_1, none_type_1)
    list_2 = []
    validation_3 = module_0.Validation(validation_1, list_2)
    var_1 = validation_3.__str__()
    var_1.to_maybe()
