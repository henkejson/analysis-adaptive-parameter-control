# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    str_0 = "dH"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(str_0)


def test_case_1():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.is_success()
    var_0.ap(var_0)


def test_case_2():
    bool_0 = True
    none_type_0 = None
    bytes_0 = b"\xf4\x90\xe6\xa9A\xcbA7\\Qe\xc1I\xbc\x88"
    validation_0 = module_0.Validation(none_type_0, bytes_0)
    var_0 = validation_0.__str__()
    var_0.ap(bool_0)


def test_case_3():
    none_type_0 = None
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_maybe()
    var_0.ap(none_type_0)


def test_case_4():
    bytes_0 = b"_+xPg\xb3\xaa\xa7hYCH\x06A"
    bool_0 = False
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(bool_0)
    none_type_0 = None
    validation_1 = module_0.Validation(bool_0, bytes_0)
    var_1 = validation_1.to_either()
    var_2 = var_1.bind(bool_0)
    var_3 = var_2.ap(none_type_0)
    var_4 = var_3.to_try()
    var_4.is_success()


def test_case_5():
    str_0 = "\\fdvcg*yq.nqV{\n0.gn7"
    validation_0 = module_0.Validation(str_0, str_0)


def test_case_6():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.is_fail()


def test_case_7():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    bool_0 = True
    none_type_1 = None
    validation_1 = module_0.Validation(bool_0, bool_0)
    validation_1.map(none_type_1)


def test_case_8():
    none_type_0 = None
    bool_0 = False
    list_0 = [bool_0]
    none_type_1 = None
    validation_0 = module_0.Validation(list_0, none_type_1)
    validation_0.bind(none_type_0)


def test_case_9():
    str_0 = "\n        Take mapper function and returns result of them called with Right value.\n\n        :param mapper: function to apply on Right value\n        :type mapper: Function(A) -> Either[B]\n        :returns: result of mapper\n        :rtype: Either[B]\n        "
    bool_0 = False
    none_type_0 = None
    validation_0 = module_0.Validation(bool_0, none_type_0)
    validation_0.ap(str_0)


def test_case_10():
    str_0 = ",@1wA"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.__str__()
    validation_0.bind(str_0)


def test_case_11():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()


def test_case_12():
    str_0 = "dH"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(validation_0)


def test_case_13():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_lazy()
    validation_1 = module_0.Validation(bool_0, validation_0)
    var_1 = validation_1.__eq__(validation_0)


def test_case_14():
    bytes_0 = b"\x82\x1b\xfb\xabD\x05j\x87\xd7"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_0.is_success()


def test_case_15():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.__eq__(set_0)
    none_type_0 = None
    var_2 = var_0.map(none_type_0)
    var_3 = var_2.to_try()
    validation_1 = module_0.Validation(validation_0, set_0)
    var_4 = var_2.bind(bool_0)
    var_2.to_maybe()


def test_case_16():
    none_type_0 = None
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_try()
    var_1 = validation_0.to_maybe()
    var_0.ap(none_type_0)
