# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    complex_0 = 4599.62488 + 1122.540159j
    int_0 = -1699
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, complex_0)
    var_0 = validation_0.__eq__(int_0)
    var_0.is_success()


def test_case_1():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.__str__()
    var_0.is_success()


def test_case_2():
    str_0 = "\n        Return rejected Task with stored value argument.\n\n        :param value: value to store in Task\n        :type value: A\n        :returns: rejected Task\n        :rtype: Task[Function(reject, _) -> A]\n        "
    list_0 = [str_0, str_0]
    int_0 = -1699
    bool_0 = True
    validation_0 = module_0.Validation(int_0, int_0)
    validation_1 = module_0.Validation(bool_0, list_0)
    var_0 = validation_0.__eq__(validation_0)
    str_1 = "LAzYM5wwq3 %EaQ>b"
    var_1 = validation_1.__str__()
    validation_2 = module_0.Validation(str_1, validation_0)
    validation_3 = module_0.Validation(var_0, int_0)
    validation_2.is_success()


def test_case_3():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_either()
    var_0.is_success()


def test_case_4():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    validation_0 = module_0.Validation(bool_0, set_0)
    var_0 = validation_0.to_either()
    var_0.to_either()


def test_case_5():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.to_maybe()
    var_2 = validation_0.to_either()
    var_2.to_either()


def test_case_6():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)


def test_case_7():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    int_0 = -1699
    validation_1 = module_0.Validation(int_0, none_type_0)
    var_0 = validation_1.__eq__(none_type_0)
    validation_0.is_success()


def test_case_8():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.is_fail()


def test_case_9():
    int_0 = -297
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.map(int_0)


def test_case_10():
    bool_0 = True
    bool_1 = True
    validation_0 = module_0.Validation(bool_1, bool_1)
    validation_0.bind(bool_0)


def test_case_11():
    bool_0 = True
    none_type_0 = None
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_lazy()
    validation_0.ap(none_type_0)


def test_case_12():
    bytes_0 = b""
    set_0 = set()
    validation_0 = module_0.Validation(bytes_0, set_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.to_either()
    var_1.is_fail()


def test_case_13():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_box()
    none_type_0 = None
    none_type_1 = None
    validation_1 = module_0.Validation(none_type_1, none_type_1)
    var_1 = validation_1.to_lazy()
    var_2 = var_1.to_box()
    var_3 = var_2.__eq__(none_type_0)
    var_3.to_box()


def test_case_14():
    bytes_0 = b"Di0Nn2\xb7"
    none_type_0 = None
    validation_0 = module_0.Validation(bytes_0, none_type_0)
    validation_0.to_try()


def test_case_15():
    complex_0 = 4599.6 + 1122.540159j
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, complex_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_1 = module_0.Validation(var_0, validation_0)


def test_case_16():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    str_0 = "htIU}yV|"
    validation_1 = module_0.Validation(none_type_0, str_0)
    bool_0 = False
    validation_2 = module_0.Validation(bool_0, str_0)
    var_0 = validation_2.__eq__(validation_0)
    validation_0.to_maybe()


def test_case_17():
    str_0 = "A@ZNMqafPUXFABR*25Y&"
    int_0 = -1699
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, str_0)
    var_0 = validation_0.__eq__(int_0)
    var_1 = validation_0.to_maybe()
    var_2 = var_1.__str__()
    var_3 = var_1.ap(bool_0)
