# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bytes_0 = b"\x9a\xfc"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_1 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    validation_2 = module_0.Validation(bytes_0, var_0)
    var_1 = validation_0.__str__()
    var_2 = validation_1.__eq__(validation_2)
    var_2.map(validation_1)


def test_case_1():
    none_type_0 = None
    bytes_0 = b"\x9a\xfc"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(none_type_0)
    var_1 = validation_0.to_either()
    var_2 = var_1.ap(bytes_0)
    var_3 = var_2.to_maybe()
    validation_0.map(var_1)


def test_case_2():
    bytes_0 = b"\x9a\xfc"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    validation_0.bind(validation_0)


def test_case_3():
    none_type_0 = None
    bytes_0 = b"}:\xb6\t2g\x98=\xd2T^\xc1\x92\xd6\xda\x91"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.ap(none_type_0)


def test_case_4():
    str_0 = "\n        Take function, store it and call with Task value during calling fork function.\n        Return new Task with result of called.\n\n        :param fn: mapper function\n        :type fn: Function(value) -> B\n        :returns: new Task with mapped resolve attribute\n        :rtype: Task[Function(resolve, reject -> A | B]\n        "
    validation_0 = module_0.Validation(str_0, str_0)


def test_case_5():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.is_fail()


def test_case_6():
    bytes_0 = b"\x9a\xfc"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_maybe()
    validation_0.map(var_0)


def test_case_7():
    bytes_0 = b"\x9a\xfc"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    validation_1 = module_0.Validation(bytes_0, var_0)
    var_1 = validation_0.__str__()
    validation_0.ap(var_1)


def test_case_8():
    bytes_0 = b"\x83\x0ef\xe4"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_box()
    var_2 = var_1.to_try()
    var_2.ap(var_1)


def test_case_9():
    none_type_0 = None
    bytes_0 = b"\x9a\xfc"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    validation_1 = module_0.Validation(bytes_0, none_type_0)
    var_1 = validation_1.to_lazy()
    var_2 = var_1.bind(validation_1)
    var_3 = validation_0.to_maybe()


def test_case_10():
    bool_0 = True
    bool_1 = True
    bool_2 = False
    dict_0 = {bool_2: bool_2, bool_2: bool_2, bool_2: bool_2, bool_2: bool_2}
    none_type_0 = None
    validation_0 = module_0.Validation(dict_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.bind(bool_1)
    var_2 = var_1.map(bool_0)
    var_2.to_maybe()


def test_case_11():
    bytes_0 = b"\x9a\xfc"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_either()
    var_2 = validation_0.__str__()
    var_3 = validation_0.to_maybe()
    var_4 = validation_0.to_try()
    var_4.to_maybe()


def test_case_12():
    none_type_0 = None
    bytes_0 = b"\x9a\xfc"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_either()
    var_2 = var_1.ap(bytes_0)
    validation_1 = module_0.Validation(bytes_0, none_type_0)
    var_3 = validation_0.__eq__(none_type_0)
    var_3.map(var_2)


def test_case_13():
    bytes_0 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_0.to_either()


def test_case_14():
    bytes_0 = b"\x9a\xfc"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    validation_1 = module_0.Validation(bytes_0, var_0)
    var_1 = validation_1.__eq__(validation_1)
    list_0 = []
    validation_2 = module_0.Validation(validation_0, list_0)
    var_2 = validation_2.__str__()
    var_3 = validation_2.is_fail()
    var_4 = validation_1.__eq__(var_3)
    var_3.to_maybe()


def test_case_15():
    bytes_0 = b"\x9a\xfc"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    validation_1 = module_0.Validation(bytes_0, var_0)
    var_1 = validation_1.__eq__(validation_1)
    list_0 = []
    validation_2 = module_0.Validation(validation_0, list_0)
    var_2 = validation_2.__str__()
    var_3 = validation_2.is_fail()
    var_4 = validation_2.__eq__(var_1)
    var_5 = validation_2.to_maybe()
    var_6 = validation_0.to_lazy()
    var_7 = var_6.__str__()
    var_7.to_maybe()
