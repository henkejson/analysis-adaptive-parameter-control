# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    int_0 = 534
    validation_0 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.__eq__(int_0)
    validation_0.to_either()


def test_case_1():
    str_0 = "kncnw\x0bd"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    validation_0.map(validation_0)


def test_case_2():
    bytes_0 = b"\xd3\x18\x14\x9e\x0c{\xb5\x8e!"
    validation_0 = module_0.Validation(bytes_0, bytes_0)


def test_case_3():
    bytes_0 = b"\xf0%\x82\xa3\xbf\xe9\xe8u\xf1\xbf\xc7P\xc8\xa4)"
    bytes_1 = b"(\xd7r-n\xdc\xa5a+\x91\xf7"
    validation_0 = module_0.Validation(bytes_0, bytes_1)
    var_0 = validation_0.is_fail()
    var_0.to_lazy()


def test_case_4():
    bool_0 = True
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.map(bool_0)


def test_case_5():
    bool_0 = False
    none_type_0 = None
    validation_0 = module_0.Validation(bool_0, none_type_0)
    validation_0.bind(none_type_0)


def test_case_6():
    str_0 = "j*VM\t0':UIF,"
    validation_0 = module_0.Validation(str_0, str_0)
    validation_0.ap(str_0)


def test_case_7():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_box()
    validation_0.to_maybe()


def test_case_8():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.is_success()
    var_2 = var_0.to_either()
    var_3 = var_1.__str__()
    var_2.map(dict_0)


def test_case_9():
    int_0 = 534
    none_type_0 = None
    list_0 = []
    set_0 = {none_type_0}
    tuple_0 = (list_0, int_0, int_0, set_0)
    validation_0 = module_0.Validation(none_type_0, tuple_0)
    var_0 = validation_0.__str__()
    var_1 = var_0.__str__()
    var_2 = var_1.__eq__(int_0)
    validation_1 = module_0.Validation(int_0, int_0)
    validation_2 = module_0.Validation(validation_1, validation_1)
    var_3 = validation_1.__eq__(int_0)
    var_3.to_either()


def test_case_10():
    int_0 = 534
    none_type_0 = None
    list_0 = []
    set_0 = {none_type_0}
    tuple_0 = (list_0, int_0, int_0, set_0)
    validation_0 = module_0.Validation(none_type_0, tuple_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.__str__()
    var_2 = var_1.__eq__(int_0)
    validation_1 = module_0.Validation(int_0, int_0)
    validation_2 = module_0.Validation(var_0, var_1)
    var_3 = validation_2.to_either()


def test_case_11():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.to_maybe()
    var_0.is_fail()


def test_case_12():
    str_0 = "\n        Transform Validation to Try.\n\n        :returns: Lazy monad with function returning Validation value\n        :rtype: Lazy[Function() -> (A | None)]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    validation_1.to_try()


def test_case_13():
    int_0 = 534
    none_type_0 = None
    list_0 = []
    set_0 = {none_type_0}
    tuple_0 = (list_0, int_0, int_0, set_0)
    validation_0 = module_0.Validation(none_type_0, tuple_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.__eq__(int_0)
    validation_1 = module_0.Validation(int_0, int_0)
    validation_2 = module_0.Validation(var_0, list_0)
    var_2 = validation_1.__eq__(validation_1)
    var_3 = validation_2.to_either()


def test_case_14():
    int_0 = 534
    none_type_0 = None
    list_0 = []
    set_0 = {none_type_0}
    tuple_0 = (list_0, int_0, int_0, set_0)
    validation_0 = module_0.Validation(none_type_0, tuple_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.__eq__(none_type_0)
    var_2 = none_type_0.__eq__(int_0)
    validation_1 = module_0.Validation(int_0, int_0)
    var_3 = var_1.__str__()
    var_4 = var_1.__eq__(var_3)
    validation_2 = module_0.Validation(var_0, none_type_0)
    bytes_0 = b"\xb2?@\x84\xb3"
    var_5 = var_1.__eq__(bytes_0)
    validation_3 = module_0.Validation(var_5, bytes_0)
    var_6 = validation_0.__eq__(validation_2)
    var_3.to_either()


def test_case_15():
    int_0 = 534
    none_type_0 = None
    list_0 = []
    set_0 = {none_type_0}
    tuple_0 = (list_0, int_0, int_0, set_0)
    validation_0 = module_0.Validation(none_type_0, tuple_0)
    var_0 = none_type_0.__eq__(int_0)
    validation_1 = module_0.Validation(int_0, int_0)
    validation_2 = module_0.Validation(validation_1, list_0)
    validation_2.__str__()
