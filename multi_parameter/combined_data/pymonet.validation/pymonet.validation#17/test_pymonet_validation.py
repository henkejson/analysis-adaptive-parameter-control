# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bool_0 = False
    none_type_0 = None
    validation_0 = module_0.Validation(bool_0, none_type_0)
    var_0 = validation_0.__eq__(none_type_0)
    var_0.is_fail()


def test_case_1():
    bytes_0 = b"\xf3\xde\xacP\xaa{\xbf\x18R\x92{\xee\xbf5\xca\xfe\xfe]\xc3"
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0]
    validation_0 = module_0.Validation(list_0, tuple_0)
    var_0 = validation_0.__str__()
    var_0.ap(bytes_0)


def test_case_2():
    complex_0 = 2444.6 - 2515.064763j
    validation_0 = module_0.Validation(complex_0, complex_0)
    validation_1 = module_0.Validation(complex_0, complex_0)
    str_0 = ')^"A77O@'
    validation_2 = module_0.Validation(str_0, str_0)
    var_0 = validation_2.__str__()
    var_0.is_fail()


def test_case_3():
    str_0 = "uU#D!cGT.>"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    validation_1 = module_0.Validation(var_0, var_0)
    var_1 = validation_0.to_lazy()
    var_2 = var_1.to_box()
    var_2.is_fail()


def test_case_4():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_maybe()
    validation_1 = module_0.Validation(set_0, set_0)
    var_1 = validation_1.__eq__(validation_0)
    var_2 = var_0.to_either()
    var_3 = var_2.to_box()
    var_4 = var_3.to_maybe()
    var_5 = var_4.to_either()
    var_0.to_maybe()


def test_case_5():
    bytes_0 = b"D\xe6\xf2=\x17\xfeU\xeb\x93\xcb\x97<\xdb\xf3\x19\xee0T"
    list_0 = [bytes_0]
    validation_0 = module_0.Validation(list_0, list_0)
    validation_1 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_maybe()
    var_0.to_either()


def test_case_6():
    int_0 = 3719
    validation_0 = module_0.Validation(int_0, int_0)


def test_case_7():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.to_maybe()


def test_case_8():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.is_fail()


def test_case_9():
    none_type_0 = None
    float_0 = 2984.84335
    set_0 = {float_0, float_0}
    validation_0 = module_0.Validation(set_0, float_0)
    validation_0.map(none_type_0)


def test_case_10():
    str_0 = "\x0bh ;\\ZN"
    float_0 = 1174.23891
    validation_0 = module_0.Validation(float_0, float_0)
    validation_0.bind(str_0)


def test_case_11():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.ap(validation_0)


def test_case_12():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    bytes_0 = b"\xb4~\xe8\x87\xba\xc8\xf2\xfep\xf8c\xe8\x1f\x90\x8f"
    var_0 = validation_0.to_box()
    validation_1 = module_0.Validation(bytes_0, bytes_0)
    validation_0.to_either()


def test_case_13():
    bytes_0 = b"D\xe6\xf2=\x17\xfeU\xeb\x93\xcb\x97<\xdb\xf3\x19\xee0T"
    list_0 = [bytes_0]
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_try()
    var_0.to_box()


def test_case_14():
    complex_0 = 2444.6 - 2515.064763j
    validation_0 = module_0.Validation(complex_0, complex_0)
    bool_0 = True
    validation_1 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_1.__eq__(validation_0)
    validation_0.to_either()


def test_case_15():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    none_type_0 = None
    validation_1 = validation_0.to_try()
    var_0 = validation_0.to_either()
    var_1 = validation_1.__eq__(none_type_0)
    var_2 = validation_0.to_box()
    var_3 = var_0.__eq__(validation_0)
    var_1.to_lazy()
