# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bool_0 = True
    tuple_0 = ()
    dict_0 = {tuple_0: bool_0}
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(dict_0)
    var_0.to_lazy()


def test_case_1():
    none_type_0 = None
    tuple_0 = ()
    validation_0 = module_0.Validation(none_type_0, tuple_0)
    var_0 = validation_0.__str__()
    var_0.to_box()


def test_case_2():
    bytes_0 = b"\xe5\xbd\xf0\x03B\xb0o\x82\xcf\xd4\xf0\xd4\xf7\xa7\xc3\x9av="
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.__str__()
    var_1.is_success()


def test_case_3():
    float_0 = -831.5
    int_0 = 1327
    list_0 = [float_0, int_0, int_0]
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.__eq__(list_0)
    str_0 = "'\"U\x0ck"
    validation_1 = module_0.Validation(str_0, str_0)
    var_1 = validation_1.to_maybe()


def test_case_4():
    complex_0 = -665.0657 - 803.17391j
    validation_0 = module_0.Validation(complex_0, complex_0)


def test_case_5():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.__str__()


def test_case_6():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.is_fail()


def test_case_7():
    float_0 = -831.5
    int_0 = 1327
    list_0 = [float_0, int_0, int_0]
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.__eq__(list_0)
    validation_0.map(var_0)


def test_case_8():
    float_0 = -174.8
    validation_0 = module_0.Validation(float_0, float_0)
    validation_0.bind(float_0)


def test_case_9():
    complex_0 = -771.270611 - 1275.642263j
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    list_0 = [validation_0, none_type_0, none_type_0, validation_0]
    validation_1 = module_0.Validation(validation_0, list_0)
    validation_1.ap(complex_0)


def test_case_10():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.__eq__(none_type_0)
    var_1.is_fail()


def test_case_11():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.bind(none_type_0)
    var_1.is_fail()


def test_case_12():
    list_0 = []
    tuple_0 = (list_0,)
    bool_0 = False
    none_type_0 = None
    validation_0 = module_0.Validation(bool_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_maybe()
    var_2 = var_1.to_either()
    var_3 = var_2.__eq__(tuple_0)
    var_3.to_maybe()


def test_case_13():
    int_0 = -180
    bytes_0 = b"\xce\xdf\xdd\xde\xfa\\\x15"
    tuple_0 = (int_0, bytes_0)
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_try()
    str_0 = "~-"
    list_0 = [int_0]
    list_1 = [str_0, list_0, var_0, int_0]
    validation_1 = module_0.Validation(var_0, list_1)
    var_0.to_box()


def test_case_14():
    float_0 = -831.5
    int_0 = 1327
    list_0 = [float_0, int_0, int_0]
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.__eq__(list_0)
    str_0 = "'\"U\x0ck"
    validation_1 = module_0.Validation(str_0, str_0)
    var_1 = validation_0.__eq__(validation_0)
    var_2 = validation_1.to_lazy()
    var_0.to_either()


def test_case_15():
    none_type_0 = None
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_either()
    validation_1 = module_0.Validation(none_type_0, list_0)
    var_1.is_fail()


def test_case_16():
    list_0 = []
    none_type_0 = None
    complex_0 = -665.0657 - 803.17391j
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.__eq__(complex_0)
    validation_1 = module_0.Validation(list_0, none_type_0)
    var_1 = validation_0.__eq__(validation_1)
    var_2 = validation_0.to_maybe()
    bytes_0 = b'"\xe06\x85\xbc'
    validation_2 = module_0.Validation(var_0, bytes_0)
    var_3 = var_2.__str__()
    var_4 = var_1.__eq__(none_type_0)
    var_5 = var_2.__str__()
    var_6 = var_3.__str__()
    var_0.is_success()


def test_case_17():
    bool_0 = False
    bytes_0 = b"Y\ng\xb8)Tc\xac\x8d\x04"
    validation_0 = module_0.Validation(bool_0, bytes_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.__eq__(bytes_0)
    var_2 = var_0.__str__()
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    var_3 = validation_1.__eq__(none_type_0)
    var_4 = var_3.__str__()
    var_4.ap(none_type_0)


def test_case_18():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_either()
