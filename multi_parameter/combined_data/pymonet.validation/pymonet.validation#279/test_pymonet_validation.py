# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)


def test_case_1():
    str_0 = "\n        Transform Lazy into not empty Maybe with constructor_fn result.\n\n        :returns: not empty Maybe monad with constructor_fn result\n        :rtype: Maybe[A]\n        "
    float_0 = 3213.7615
    set_0 = {float_0, float_0, float_0}
    validation_0 = module_0.Validation(set_0, float_0)
    var_0 = validation_0.__eq__(str_0)
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    var_1 = validation_1.to_box()
    var_2 = validation_1.to_lazy()


def test_case_2():
    float_0 = 2686.02439
    list_0 = [float_0]
    bytes_0 = b"\x0f[i\xab"
    validation_0 = module_0.Validation(list_0, bytes_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_try()


def test_case_3():
    bool_0 = False
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_either()
    var_0.bind(bool_0)


def test_case_4():
    int_0 = 1390
    bytes_0 = b"\xd7\xe0\x9b\xdb\xb9G\xd8\xd7x}\xcb\xd5y\xfai\x99"
    tuple_0 = (bytes_0,)
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.map(int_0)


def test_case_5():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)


def test_case_6():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.to_try()


def test_case_7():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.is_fail()


def test_case_8():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.map(bool_0)


def test_case_9():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.bind(none_type_0)


def test_case_10():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    validation_0 = module_0.Validation(dict_0, bool_0)
    validation_0.ap(bool_0)


def test_case_11():
    none_type_0 = None
    float_0 = -316.323
    validation_0 = module_0.Validation(none_type_0, float_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_either()
    var_1.to_either()


def test_case_12():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.__str__()
    var_2 = var_1.__eq__(var_1)
    var_3 = validation_0.to_maybe()
    var_0.to_either()


def test_case_13():
    none_type_0 = None
    bool_0 = True
    list_0 = [bool_0, bool_0]
    validation_0 = module_0.Validation(bool_0, none_type_0)
    validation_1 = module_0.Validation(list_0, list_0)
    var_0 = validation_1.to_maybe()
    var_0.is_fail()


def test_case_14():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.__str__()
    var_0.is_fail()


def test_case_15():
    none_type_0 = None
    none_type_1 = None
    validation_0 = module_0.Validation(none_type_1, none_type_1)
    var_0 = validation_0.__eq__(none_type_0)
    var_1 = var_0.__eq__(var_0)
    var_2 = validation_0.__eq__(validation_0)
    bool_0 = False
    float_0 = -1804.8
    bool_1 = False
    bytes_0 = b"\x0f[i\xcb"
    tuple_0 = (bool_0, float_0, bool_1, bytes_0)
    validation_1 = module_0.Validation(none_type_0, tuple_0)
    var_3 = var_2.__str__()
    var_4 = validation_0.__eq__(validation_1)
    var_2.map(bool_1)
