# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0
import builtins as module_1


def test_case_0():
    int_0 = 1775
    bool_0 = True
    validation_0 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.__eq__(bool_0)


def test_case_1():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0, object_0]
    list_1 = []
    validation_0 = module_0.Validation(list_0, list_1)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_try()
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, none_type_0)


def test_case_2():
    str_0 = "4,fnA<^m?}rqR(of!s"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()


def test_case_3():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_4():
    complex_0 = -1078.655 + 1422.78531j
    validation_0 = module_0.Validation(complex_0, complex_0)
    validation_0.to_try()


def test_case_5():
    float_0 = 52.92502062884181
    validation_0 = module_0.Validation(float_0, float_0)
    validation_0.is_fail()


def test_case_6():
    int_0 = 3907
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.map(int_0)


def test_case_7():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.bind(none_type_0)


def test_case_8():
    int_0 = 1978
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.ap(validation_0)


def test_case_9():
    complex_0 = -1078.655 + 1422.78531j
    validation_0 = module_0.Validation(complex_0, complex_0)
    var_0 = validation_0.to_box()


def test_case_10():
    complex_0 = -1078.655 + 1424.000155914222j
    validation_0 = module_0.Validation(complex_0, complex_0)
    var_0 = validation_0.to_lazy()


def test_case_11():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_try()
    var_1.map(none_type_0)


def test_case_12():
    str_0 = "4,fnA<^m?}rqR(of!s"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()


def test_case_13():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    validation_0 = module_0.Validation(bool_0, dict_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.to_either()


def test_case_14():
    complex_0 = 456.9 - 591.438j
    validation_0 = module_0.Validation(complex_0, complex_0)
    var_0 = validation_0.__eq__(validation_0)


def test_case_15():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    validation_0 = module_0.Validation(bool_0, dict_0)
    var_0 = validation_0.__str__()
    validation_1 = module_0.Validation(validation_0, bool_0)
    var_1 = validation_0.__eq__(validation_1)
    bool_0.to_either()


def test_case_16():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_maybe()
    var_0.is_fail()


def test_case_17():
    bool_0 = False
    dict_0 = {}
    validation_0 = module_0.Validation(bool_0, dict_0)
    var_0 = validation_0.__str__()
    validation_1 = module_0.Validation(validation_0, bool_0)
    validation_2 = module_0.Validation(dict_0, var_0)
