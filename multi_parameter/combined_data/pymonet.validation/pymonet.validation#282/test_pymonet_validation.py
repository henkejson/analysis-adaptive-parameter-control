# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    str_0 = '@wMv- 4"B?x\r#CKai2'
    list_0 = [str_0, str_0]
    validation_0 = module_0.Validation(list_0, list_0)
    str_1 = "'Z5b`E%I&#[p39r*"
    set_0 = {str_1, str_1}
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_box()
    validation_1 = module_0.Validation(set_0, str_1)
    var_2 = validation_0.__eq__(str_1)
    var_3 = var_0.__eq__(validation_0)
    var_4 = validation_1.to_maybe()


def test_case_1():
    none_type_0 = None
    none_type_1 = None
    none_type_2 = None
    validation_0 = module_0.Validation(none_type_2, none_type_2)
    var_0 = validation_0.to_box()
    validation_1 = module_0.Validation(var_0, none_type_2)
    var_1 = validation_1.__eq__(none_type_1)
    var_2 = var_1.__eq__(none_type_0)
    var_2.to_maybe()


def test_case_2():
    str_0 = "6"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    var_0.to_maybe()


def test_case_3():
    none_type_0 = None
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.__eq__(none_type_0)


def test_case_4():
    str_0 = '@wMv- 4"B?x\r#CKai2'
    list_0 = [str_0, str_0]
    validation_0 = module_0.Validation(list_0, list_0)
    set_0 = {str_0, str_0}
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_maybe()
    var_2 = validation_0.to_either()
    validation_1 = module_0.Validation(set_0, var_2)
    validation_2 = module_0.Validation(str_0, var_1)
    var_3 = validation_0.is_fail()


def test_case_5():
    str_0 = "6"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_maybe()
    var_2 = validation_0.to_maybe()


def test_case_6():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_7():
    str_0 = '@wMv- 4"B?x\r#CKai2'
    list_0 = [str_0, str_0]
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.__str__()
    validation_0.map(str_0)


def test_case_8():
    str_0 = '@wMv- 4"B?x\r#CKai2'
    list_0 = [str_0, str_0]
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_1 = validation_0.to_maybe()
    validation_0.bind(var_0)


def test_case_9():
    str_0 = '@wMv- 4"B?x\r#CKai2'
    list_0 = [str_0, str_0]
    validation_0 = module_0.Validation(list_0, list_0)
    str_1 = "'Z5b`E%I&#[p39r*"
    set_0 = {str_1, str_1}
    validation_1 = module_0.Validation(set_0, set_0)
    var_0 = validation_1.__eq__(validation_0)
    validation_2 = module_0.Validation(var_0, var_0)
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    validation_3 = module_0.Validation(bool_0, dict_0)
    validation_4 = module_0.Validation(bool_0, dict_0)
    validation_4.ap(validation_4)


def test_case_10():
    bool_0 = True
    bytes_0 = b"#\x9bF"
    validation_0 = module_0.Validation(bool_0, bytes_0)
    var_0 = validation_0.to_box()
    var_0.is_success()


def test_case_11():
    bytes_0 = b"lz\x1c\x0f\x8e\x11\xec\xb4X"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_maybe()
    validation_1 = module_0.Validation(bytes_0, var_1)
    validation_1.to_either()


def test_case_12():
    float_0 = 719.763807
    validation_0 = module_0.Validation(float_0, float_0)
    validation_0.to_try()


def test_case_13():
    int_0 = -504
    validation_0 = module_0.Validation(int_0, int_0)
    str_0 = ""
    validation_1 = module_0.Validation(str_0, str_0)
    var_0 = validation_1.__eq__(validation_1)
    var_1 = validation_1.to_maybe()
    var_2 = validation_1.is_fail()
    var_1.is_fail()


def test_case_14():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    validation_1 = module_0.Validation(validation_0, list_0)
    var_0 = validation_1.__str__()
    var_0.to_maybe()
