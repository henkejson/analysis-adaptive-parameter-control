# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    list_0 = []
    none_type_0 = None
    validation_0 = module_0.Validation(list_0, none_type_0)
    var_0 = validation_0.__eq__(none_type_0)
    var_0.to_box()


def test_case_1():
    str_0 = "]5xX"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()


def test_case_2():
    str_0 = "0d2}\\b( 1kY?FY"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.to_either()
    var_2 = validation_0.__str__()
    var_3 = validation_0.to_try()
    var_4 = validation_0.to_either()


def test_case_3():
    str_0 = "0d2}\\b( 1kY?FY"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    validation_1 = module_0.Validation(str_0, str_0)
    var_1 = var_0.to_box()
    var_2 = validation_1.to_either()
    var_1.to_box()


def test_case_4():
    str_0 = "[:U=\\rM#$ 2 *@p@!^"
    validation_0 = module_0.Validation(str_0, str_0)


def test_case_5():
    str_0 = "]5xX"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_try()


def test_case_6():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    validation_0 = module_0.Validation(list_0, list_0)
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    validation_1.is_fail()


def test_case_7():
    float_0 = -884.74
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.map(float_0)


def test_case_8():
    complex_0 = 1191 - 751.8828j
    validation_0 = module_0.Validation(complex_0, complex_0)
    validation_0.bind(complex_0)


def test_case_9():
    none_type_0 = None
    int_0 = -2790
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.ap(none_type_0)


def test_case_10():
    str_0 = "0d2}\\b( 1kY?FY"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.to_maybe()
    validation_1 = module_0.Validation(str_0, str_0)
    var_2 = var_1.to_box()
    var_3 = var_0.to_either()


def test_case_11():
    dict_0 = {}
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, dict_0)
    var_0 = validation_0.to_either()
    int_0 = 3870
    validation_1 = module_0.Validation(dict_0, int_0)
    validation_1.ap(var_0)


def test_case_12():
    str_0 = "T4i%aR"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.__eq__(validation_0)
    var_2 = validation_0.__eq__(str_0)
    var_3 = validation_0.__str__()
    var_4 = validation_0.to_either()
    var_2.to_maybe()


def test_case_13():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.is_success()
    list_0.to_box()


def test_case_14():
    tuple_0 = ()
    none_type_0 = None
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.__str__()
    var_0.ap(none_type_0)


def test_case_15():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    str_0 = "T4i%aR"
    validation_1 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(validation_1)
    var_1 = validation_1.to_either()
    var_2 = validation_1.__eq__(validation_1)
    var_3 = validation_1.__str__()
    var_4 = validation_1.to_maybe()
    var_3.to_box()
