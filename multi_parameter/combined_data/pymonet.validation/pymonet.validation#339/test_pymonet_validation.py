# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bytes_0 = b"\x0b\x1c\xd5.\xf5"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(bytes_0)
    var_0.is_fail()


def test_case_1():
    str_0 = "hv:C)R[;P"
    bool_0 = False
    bytes_0 = b"\x85\xcd\xeex3`\xf4\xc0[\x8b\xdf"
    list_0 = [bool_0]
    tuple_0 = (str_0, bool_0, bytes_0, list_0)
    validation_0 = module_0.Validation(str_0, tuple_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_lazy()
    var_1.is_fail()


def test_case_2():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_either()
    bool_0 = True
    bool_1 = False
    var_2 = var_1.to_lazy()
    var_3 = var_0.__eq__(bool_1)
    validation_1 = module_0.Validation(bool_0, bool_0)
    validation_1.to_try()


def test_case_3():
    bytes_0 = b"\x0b\x1c\xd5.\xf5"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_either()
    var_2 = validation_0.to_maybe()
    var_3 = var_2.to_box()
    var_4 = var_2.ap(var_3)
    var_5 = var_4.__eq__(bytes_0)
    var_1.is_fail()


def test_case_4():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)


def test_case_5():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    validation_0 = module_0.Validation(set_0, bool_0)
    validation_0.is_success()


def test_case_6():
    bool_0 = True
    bytes_0 = b"\x0b\x1c\xd5.\xf5"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.is_fail()
    var_0.bind(bool_0)


def test_case_7():
    str_0 = "\n        Transform Validation to Try.\n\n        :returns: Lazy monad with function returning Validation value\n        :rtype: Lazy[Function() -> (A | None)]\n        "
    none_type_0 = None
    validation_0 = module_0.Validation(str_0, none_type_0)
    validation_0.map(none_type_0)


def test_case_8():
    complex_0 = -4991.4 - 2088j
    complex_1 = 2666.443809 + 539.78952j
    validation_0 = module_0.Validation(complex_1, complex_1)
    validation_0.bind(complex_0)


def test_case_9():
    int_0 = -1866
    dict_0 = {int_0: int_0, int_0: int_0}
    bytes_0 = b""
    bytes_1 = b"[\x19\xe3\xf1\x83\xe4\xc6\x1eFH\xd0\x9b\xc2_G\xe39\xd2"
    tuple_0 = (dict_0, dict_0, bytes_0, bytes_1)
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    validation_0 = module_0.Validation(list_0, bool_0)
    validation_0.ap(tuple_0)


def test_case_10():
    str_0 = "v:C)[;P"
    bool_0 = False
    bytes_0 = b"\x85\xcd\xeex3`\xf4\xc0[\x8b\xdf"
    list_0 = [bool_0, bool_0, bool_0, bytes_0, str_0]
    tuple_0 = (str_0, bool_0, bytes_0, list_0)
    validation_0 = module_0.Validation(str_0, tuple_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_lazy()
    var_2 = validation_0.to_box()


def test_case_11():
    bool_0 = True
    str_0 = "\nSyIYMlJE\\i"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(bool_0)
    var_1 = validation_0.to_lazy()
    var_2 = var_1.__str__()
    var_3 = var_0.__str__()
    var_2.is_fail()


def test_case_12():
    str_0 = "SP]5fGq>}37Y_r0\x0c"
    bytes_0 = b"n\x8f\x15\xea\x8a\x907J\x94\x95h\x06)`To\xa5~\xaf"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    int_0 = 1
    int_1 = 2377
    float_0 = 56.0
    none_type_0 = None
    validation_0 = module_0.Validation(float_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_box()
    var_2 = var_1.to_lazy()
    var_3 = var_2.map(int_1)
    var_4 = var_3.map(int_0)
    var_5 = var_4.bind(list_0)
    var_6 = var_5.map(str_0)
    var_7 = var_6.__str__()


def test_case_13():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.to_try()


def test_case_14():
    bool_0 = True
    bytes_0 = b"\x0b\x1c\xd5.\xf5"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)
    bytes_0.map(bool_0)


def test_case_15():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_either()
    var_2 = var_1.to_lazy()
    var_3 = validation_0.__str__()
    var_4 = var_1.__str__()
    var_0.is_fail()


def test_case_16():
    tuple_0 = ()
    bytes_0 = b":5B\xc2X\xcd\xb2"
    tuple_1 = (tuple_0, tuple_0, bytes_0, bytes_0)
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, tuple_1)
    var_0 = validation_0.to_box()
    none_type_0 = None
    var_1 = validation_0.__str__()
    validation_1 = module_0.Validation(tuple_1, none_type_0)
    validation_1.__str__()


def test_case_17():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_either()
    bool_0 = False
    var_1 = validation_0.to_lazy()
    bool_1 = False
    var_2 = validation_0.__eq__(bool_1)
    validation_1 = module_0.Validation(bool_0, bool_0)
    validation_1.to_try()


def test_case_18():
    bool_0 = True
    bytes_0 = b"\x0b\x1c\xd5.\xf5"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_1 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_1.__eq__(validation_0)
    var_1 = validation_0.to_either()
    var_0.to_try()
