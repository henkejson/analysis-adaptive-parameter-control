# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0
import builtins as module_1


def test_case_0():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.__str__()
    var_1 = var_0.__eq__(validation_0)
    validation_1 = module_0.Validation(var_1, var_1)
    var_2 = validation_0.to_try()
    var_3 = validation_1.__eq__(validation_0)
    validation_0.ap(var_0)


def test_case_1():
    str_0 = "3,6++Ig@(Q[A,"
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.is_fail()
    var_1 = validation_0.__eq__(str_0)
    var_2 = validation_0.__eq__(str_0)
    var_3 = validation_0.is_fail()
    tuple_0.to_box()


def test_case_2():
    str_0 = "i[h]L\rO'>"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.is_success()
    validation_0.bind(var_1)


def test_case_3():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_either()
    var_2 = validation_0.is_fail()
    var_3 = var_1.to_box()
    validation_1 = module_0.Validation(var_3, var_3)
    var_4 = validation_0.to_try()
    var_0.bind(tuple_0)


def test_case_4():
    bool_0 = False
    int_0 = 503
    list_0 = [bool_0, bool_0, int_0]
    validation_0 = module_0.Validation(bool_0, list_0)
    var_0 = validation_0.to_either()
    var_0.is_success()


def test_case_5():
    bool_0 = True
    int_0 = -1650
    dict_0 = {int_0: int_0}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.__str__()
    var_1.ap(bool_0)


def test_case_6():
    tuple_0 = ()
    tuple_0.to_try()


def test_case_7():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_8():
    float_0 = -426.37689
    validation_0 = module_0.Validation(float_0, float_0)
    validation_0.to_either()


def test_case_9():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.is_fail()


def test_case_10():
    none_type_0 = None
    none_type_1 = None
    validation_0 = module_0.Validation(none_type_1, none_type_1)
    validation_0.map(none_type_0)


def test_case_11():
    set_0 = set()
    float_0 = -671.9
    dict_0 = {float_0: float_0, float_0: float_0}
    validation_0 = module_0.Validation(dict_0, float_0)
    validation_1 = module_0.Validation(validation_0, dict_0)
    validation_1.bind(set_0)


def test_case_12():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.to_lazy()


def test_case_13():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.__eq__(validation_0)
    var_2 = validation_0.to_either()
    var_3 = validation_0.__eq__(var_1)
    var_4 = validation_0.is_fail()
    var_5 = var_2.to_try()
    validation_1 = module_0.Validation(var_2, var_5)
    var_6 = var_2.to_try()
    var_7 = var_3.__str__()
    var_5.to_lazy()


def test_case_14():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.map(list_0)
    var_1.to_either()


def test_case_15():
    int_0 = 2812
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    set_0 = {int_0, int_0}
    bytes_0 = b"#\xee\xda\xf4K\x95\xe5\x81\xc67R\xd4\xbf\xdb\xc4"
    tuple_0 = (dict_0, set_0, set_0, bytes_0)
    object_0 = module_1.object()
    validation_0 = module_0.Validation(tuple_0, object_0)
    validation_0.to_try()


def test_case_16():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.__eq__(var_0)
    var_2 = validation_0.is_fail()
    tuple_0.to_box()


def test_case_17():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_maybe()
    var_0.is_fail()
