# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    str_0 = "\n        Take function and call constructor function passing returned value to fn function.\n\n        It's only way to call function store in Lazy\n        :param fn: Function(constructor_fn) -> B\n        :returns: result od folder function\n        :rtype: B\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(str_0)
    var_0.to_maybe()


def test_case_1():
    float_0 = -1223.1815
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.is_fail()
    var_1 = validation_0.__str__()
    var_2 = validation_0.to_box()
    var_2.bind(float_0)


def test_case_2():
    str_0 = "\n        Take function and call constructor function passing returned value to fn function.\n\n        It's only way to call function store in Lazy\n        :param fn: Function(constructor_fn) -> B\n        :returns: result od folder function\n        :rtype: B\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()


def test_case_3():
    str_0 = "\n        Take function and call constructor function passing returned value to fn function.\n\n        It's only way to call function store in Lazy\n        :param fn: Function(constructor_fn) -> B\n        :returns: result od folder function\n        :rtype: B\n        "
    validation_0 = module_0.Validation(str_0, str_0)


def test_case_4():
    str_0 = "\n        Take function and call constructor function passing returned value to fn function.\n\n        It's only way to call function store in Lazy\n        :param fn: Function(constructor_fn) -> B\n        :returns: result od folder function\n        :rtype: B\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    validation_1 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.is_fail()
    var_1 = validation_1.__eq__(validation_1)
    var_2 = validation_0.to_maybe()


def test_case_5():
    dict_0 = {}
    str_0 = "Zh"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.is_success()
    validation_0.map(dict_0)


def test_case_6():
    none_type_0 = None
    none_type_1 = None
    str_0 = ""
    validation_0 = module_0.Validation(none_type_1, str_0)
    validation_0.bind(none_type_0)


def test_case_7():
    str_0 = "\n        Take function and call constructor function passing returned value to fn function.\n\n        It's only way to call function store in Lazy\n        :param fn: Function(constructor_fn) -> B\n        :returns: result od folder function\n        :rtype: B\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(str_0)
    var_1 = validation_0.to_either()
    validation_0.ap(var_0)


def test_case_8():
    str_0 = "\n        Take function and call constructor function passing returned value to fn function.\n\n        It's only way to call function store in Lazy\n        :param fn: Function(constructor_fn) -> B\n        :returns: result od folder function\n        :rtype: B\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.__eq__(var_0)
    var_2 = validation_0.__str__()
    var_3 = validation_0.to_box()
    var_4 = var_3.to_try()


def test_case_9():
    str_0 = "\n        Take function and call constructor function passing returned value to fn function.\n\n        It's only way to call function store in Lazy\n        :param fn: Function(constructor_fn) -> B\n        :returns: result od folder function\n        :rtype: B\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = module_0.Validation(str_0, str_0)
    var_1 = var_0.to_maybe()
    var_2 = validation_0.to_lazy()


def test_case_10():
    str_0 = "\n        Take function and call constructor function passing returned value to fn function.\n\n        It's only way to call function store in Lazy\n        :param fn: Function(constructor_fn) -> B\n        :returns: result od folder function\n        :rtype: B\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_try()


def test_case_11():
    str_0 = "\n        Take function and call constructor function passing returned value to fn function.\n\n        It's only way to call function store in Lazy\n        :param fn:Function(constructor_fn) -> B\n        :returns: result od folder function\n        :rtype: B\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    var_0.to_maybe()


def test_case_12():
    str_0 = "\n        Take function and call constructor function passing returned value to fn function.\n\n        It's only way to call function store in Lazy\n        :param fn: Function(constructor_fn) -> B\n        :returns: result od folder function\n        :rtype: B\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_maybe()


def test_case_13():
    str_0 = "B]-*H^]V^tz>"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_maybe()
    str_1 = "9<7Qvo<QAB\x0bG\\I"
    validation_1 = module_0.Validation(str_1, str_1)
    var_2 = validation_1.__eq__(str_1)
    validation_2 = validation_1.is_success()
    var_3 = validation_1.to_lazy()
    bool_0 = True
    validation_1.map(bool_0)


def test_case_14():
    bytes_0 = b"\x80"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    none_type_0 = None
    validation_1 = module_0.Validation(bytes_0, none_type_0)
    validation_2 = module_0.Validation(none_type_0, bytes_0)
    var_0 = validation_2.is_fail()
    var_1 = validation_1.__eq__(validation_2)
    var_2 = validation_0.to_maybe()


def test_case_15():
    str_0 = ""
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_either()
    validation_1 = var_1.__str__()
    var_2 = validation_0.to_maybe()
