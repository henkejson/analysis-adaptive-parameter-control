# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0
import builtins as module_1


def test_case_0():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.__eq__(var_0)


def test_case_1():
    str_0 = "E^$b@lnc\x0c@)'1T*"
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_either()
    var_0.bind(str_0)


def test_case_2():
    object_0 = module_1.object()
    list_0 = [object_0]
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_either()


def test_case_3():
    bool_0 = True
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_maybe()
    var_0.ap(bool_0)


def test_case_4():
    bool_0 = False
    bytes_0 = b"u\x9d\xd03\r\x12b\xb6\xf5>X3g\x91"
    validation_0 = module_0.Validation(bool_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_0.to_maybe()


def test_case_5():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)


def test_case_6():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.to_try()


def test_case_7():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.is_fail()


def test_case_8():
    none_type_0 = None
    none_type_1 = None
    validation_0 = module_0.Validation(none_type_1, none_type_1)
    validation_0.map(none_type_0)


def test_case_9():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    float_0 = -67.3269
    validation_0.bind(float_0)


def test_case_10():
    list_0 = []
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.ap(list_0)


def test_case_11():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_box()
    none_type_0 = None
    var_1 = validation_0.__eq__(none_type_0)
    var_2 = var_0.to_try()
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    validation_1.bind(validation_0)


def test_case_12():
    bool_0 = False
    str_0 = "\n        It takes as a parameter function returning another Validation.\n        Function is called with Validation value and returns new Validation with previous value\n        and concated new and old errors.\n\n        :param monad: monad contains function\n        :type monad: Function(A) -> Validation[Any, List[E]]\n        :returns: new validation with stored errors\n        :rtype: Validation[A, List[E]]\n        "
    bool_1 = False
    tuple_0 = (bool_0, bool_1)
    tuple_1 = (bool_0, str_0, tuple_0, bool_0)
    dict_0 = {tuple_1: bool_1}
    validation_0 = module_0.Validation(dict_0, bool_1)
    var_0 = validation_0.to_lazy()
    bool_2 = True
    validation_1 = module_0.Validation(bool_2, bool_2)
    var_1 = validation_1.__eq__(validation_0)
    var_1.to_try()


def test_case_13():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_lazy()
    validation_1 = module_0.Validation(var_1, validation_0)
    var_2 = var_1.to_try()
    var_3 = validation_0.to_box()
    var_4 = validation_1.__eq__(var_0)
    validation_2 = module_0.Validation(var_3, bool_0)
    validation_3 = module_0.Validation(var_3, var_2)
    validation_3.to_either()


def test_case_14():
    bool_0 = True
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.__str__()
    var_0.ap(bool_0)


def test_case_15():
    object_0 = module_1.object()
    list_0 = [object_0]
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.is_success()
    validation_1 = module_0.Validation(validation_0, list_0)
    var_1 = validation_1.__str__()
    var_2 = validation_0.is_success()
