# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    str_0 = "9P6X(Q+Mwjf@9$"
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, str_0)
    var_0 = validation_0.__eq__(validation_0)


def test_case_1():
    none_type_0 = None
    bool_0 = True
    none_type_1 = None
    validation_0 = module_0.Validation(bool_0, none_type_1)
    var_0 = validation_0.__eq__(none_type_0)


def test_case_2():
    str_0 = "9P6X(Q+Mwjf@9$"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, str_0)
    var_1 = validation_0.__eq__(none_type_0)
    var_2 = validation_1.__str__()
    var_3 = validation_0.to_box()
    var_2.to_try()


def test_case_3():
    str_0 = "9P6X(Q+Mwjf@9$"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    var_1 = validation_1.__eq__(var_0)
    bool_0 = True
    validation_2 = module_0.Validation(validation_0, bool_0)
    var_2 = var_0.__eq__(validation_2)
    var_0.to_either()


def test_case_4():
    set_0 = set()
    tuple_0 = ()
    validation_0 = module_0.Validation(set_0, tuple_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_lazy()
    var_2 = var_1.__str__()


def test_case_5():
    dict_0 = {}
    str_0 = "H@YJaX>,XZB=\x0c"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.map(dict_0)
    var_1.to_maybe()


def test_case_6():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)


def test_case_7():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.to_either()


def test_case_8():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.is_fail()


def test_case_9():
    none_type_0 = None
    none_type_1 = None
    validation_0 = module_0.Validation(none_type_1, none_type_0)
    dict_0 = {}
    validation_0.map(dict_0)


def test_case_10():
    str_0 = "9P6X(Q+Mwjf@9$"
    validation_0 = module_0.Validation(str_0, str_0)
    validation_0.bind(str_0)


def test_case_11():
    none_type_0 = None
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.ap(none_type_0)


def test_case_12():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_box()


def test_case_13():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_lazy()
    validation_1 = module_0.Validation(bool_0, var_0)
    var_1 = validation_0.__eq__(var_0)
    validation_1.to_maybe()


def test_case_14():
    bool_0 = True
    bytes_0 = b"\x7f\xba\xf4\x00%%\xdc\xca\xea\xb6\xb81"
    complex_0 = -2865.963 + 1985.3j
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.map(complex_0)
    var_2 = var_1.to_try()
    var_3 = var_2.bind(bytes_0)
    var_4 = var_3.map(bool_0)
    var_4.to_either()


def test_case_15():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    int_0 = 2660
    var_0 = validation_0.__eq__(int_0)
    validation_0.to_try()


def test_case_16():
    set_0 = set()
    tuple_0 = ()
    validation_0 = module_0.Validation(set_0, tuple_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_box()
    validation_0.ap(tuple_0)


def test_case_17():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.__str__()
    tuple_0 = ()
    none_type_0 = None
    validation_1 = module_0.Validation(tuple_0, none_type_0)
    validation_1.is_fail()


def test_case_18():
    str_0 = "9P6X(Q+Mwjf@9$"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_lazy()
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    var_1 = validation_0.__eq__(validation_1)
    var_2 = var_0.map(none_type_0)
    var_1.map(str_0)
