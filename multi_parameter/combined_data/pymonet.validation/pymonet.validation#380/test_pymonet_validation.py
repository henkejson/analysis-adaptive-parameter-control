# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    float_0 = 1616.8
    none_type_0 = None
    validation_0 = module_0.Validation(float_0, none_type_0)
    var_0 = validation_0.__eq__(none_type_0)
    validation_0.map(float_0)


def test_case_1():
    str_0 = "7C~dy#\x0cl!X]LaHFpG\x0b"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    validation_1 = module_0.Validation(var_0, str_0)
    var_1 = validation_0.to_lazy()
    var_2 = var_0.__eq__(validation_0)
    var_3 = var_0.map(var_1)
    var_0.is_success()


def test_case_2():
    str_0 = "7C~dy#\x0cl!X]LaHFpG\x0b"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    validation_1 = module_0.Validation(var_0, str_0)
    var_1 = validation_1.to_maybe()
    var_2 = var_1.to_lazy()
    var_3 = var_0.__eq__(validation_0)
    var_4 = var_0.map(var_2)
    var_0.is_success()


def test_case_3():
    bool_0 = True
    var_0 = bool_0.__str__()


def test_case_4():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)


def test_case_5():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.is_success()


def test_case_6():
    float_0 = -1046.0564
    set_0 = {float_0, float_0}
    str_0 = "\n        Returns new ImmutableList with elements from previous one\n        and argument value on the end of list\n\n        :param new_element: element to append on the end of list\n        :type fn: A\n        :returns: ImmutableList[A]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.is_fail()
    var_1 = var_0.__eq__(set_0)
    var_1.to_maybe()


def test_case_7():
    float_0 = 1300.60957
    bool_0 = False
    set_0 = {bool_0}
    bool_1 = True
    validation_0 = module_0.Validation(set_0, bool_1)
    validation_0.bind(float_0)


def test_case_8():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_0.ap(var_0)


def test_case_9():
    float_0 = 652.6
    validation_0 = module_0.Validation(float_0, float_0)
    validation_0.to_try()


def test_case_10():
    bytes_0 = b"\x8e} U)\x01'\xd8"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    bytes_0.to_try()


def test_case_11():
    float_0 = 1616.8
    none_type_0 = None
    validation_0 = module_0.Validation(float_0, none_type_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.__eq__(none_type_0)
    validation_0.map(float_0)


def test_case_12():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)
    var_0.to_maybe()


def test_case_13():
    bool_0 = True
    none_type_0 = None
    list_0 = []
    validation_0 = module_0.Validation(none_type_0, list_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_maybe()
    var_2 = var_1.to_either()
    var_2.ap(bool_0)


def test_case_14():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_maybe()


def test_case_15():
    bytes_0 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_maybe()
    var_0.is_fail()


def test_case_16():
    str_0 = "7C~dy#\x0cl!X]LaHFpG\x0b"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = module_0.Validation(validation_0, validation_0)
    validation_1 = validation_0.is_success()
    var_1 = validation_0.to_lazy()
    var_2 = var_0.__eq__(validation_0)
    var_0.map(var_1)
