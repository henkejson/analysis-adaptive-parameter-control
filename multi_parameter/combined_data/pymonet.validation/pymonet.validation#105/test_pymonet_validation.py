# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    none_type_0 = None
    var_0 = validation_0.__eq__(none_type_0)
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    validation_1.bind(validation_0)


def test_case_1():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_try()
    var_1 = validation_0.__str__()
    var_2 = validation_0.is_success()
    var_1.bind(validation_0)


def test_case_2():
    str_0 = "mA@DqT\t1=2\txx\x0cZv\rk8"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    var_0.to_lazy()


def test_case_3():
    bool_0 = True
    str_0 = "u0LI)oNt9>0VwP{z;"
    bytes_0 = b"\xb6vI\x14U[\xdf_\xc2\x82Zu\x95\xc7&B"
    tuple_0 = (str_0, bytes_0)
    validation_0 = module_0.Validation(bool_0, tuple_0)
    validation_1 = module_0.Validation(str_0, bool_0)
    var_0 = validation_0.to_either()
    validation_2 = module_0.Validation(var_0, str_0)
    var_1 = var_0.__eq__(str_0)
    var_2 = validation_2.is_success()
    var_2.map(validation_0)


def test_case_4():
    bool_0 = False
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_maybe()
    var_0.bind(bool_0)


def test_case_5():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)


def test_case_6():
    bytes_0 = b"4\xc1\xb8j\xd7\xa1\xbf\xbc\x12@\xa593\xda\x83"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_try()


def test_case_7():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.is_fail()
    var_0.to_try()


def test_case_8():
    int_0 = 3204
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.map(int_0)


def test_case_9():
    bytes_0 = b"\xcc\xffq\xcc=\xcb"
    bytes_1 = b'x?o/\x19v"J\xa7\x87\xa3"!w\xe9/\x84'
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.ap(bytes_1)
    var_2 = var_0.__eq__(bytes_1)
    var_3 = var_2.__eq__(bytes_0)
    validation_1 = module_0.Validation(bytes_0, bytes_0)
    var_4 = validation_1.to_try()
    var_5 = validation_1.is_success()
    var_6 = validation_1.to_maybe()
    validation_2 = module_0.Validation(var_4, bytes_0)
    var_7 = var_6.to_lazy()
    var_8 = var_0.to_lazy()
    validation_3 = module_0.Validation(var_3, bytes_0)
    var_9 = var_1.to_try()
    var_10 = var_8.to_try()
    validation_1.ap(none_type_0)


def test_case_10():
    bytes_0 = b"\xcc\xffq\xcc=\xcb"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.to_lazy()
    var_2 = validation_0.to_box()


def test_case_11():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_lazy()
    var_0.to_lazy()


def test_case_12():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_try()
    validation_0.is_fail()


def test_case_13():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = var_0.__str__()
    tuple_0.to_either()


def test_case_14():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.__str__()
    var_1.ap(validation_0)


def test_case_15():
    bool_0 = False
    str_0 = "u0LI)oNt9>0VwP{z;"
    bytes_0 = b"\x1a\xdbo\xd5\\\xd3\x1c\xaaH\xb6\xf0V\xde\xb9\x00\xeb1\xf5<"
    tuple_0 = (str_0, bytes_0)
    validation_0 = module_0.Validation(bool_0, tuple_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_either()
    validation_1 = module_0.Validation(str_0, var_0)
    var_2 = validation_1.__eq__(validation_0)
    var_2.to_try()
