# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bool_0 = True
    str_0 = "S\x0b;v\n"
    bool_1 = False
    validation_0 = module_0.Validation(bool_0, bool_1)
    str_1 = "c-\\"
    validation_1 = module_0.Validation(str_0, str_1)
    var_0 = validation_0.__eq__(validation_1)
    var_1 = validation_1.__eq__(var_0)


def test_case_1():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(none_type_0)


def test_case_2():
    bytes_0 = b"&\x9d\x05\x8a\xa6\xa5\x1f\xdb"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.is_fail()
    var_1.to_try()


def test_case_3():
    str_0 = "qr:R|\n7?t"
    validation_0 = module_0.Validation(str_0, str_0)


def test_case_4():
    float_0 = -1914.443
    validation_0 = module_0.Validation(float_0, float_0)
    validation_0.to_maybe()


def test_case_5():
    str_0 = "TKi=2<=ZM9O"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.is_fail()


def test_case_6():
    bool_0 = True
    str_0 = "S\x0b;v\n"
    bool_1 = False
    validation_0 = module_0.Validation(bool_0, bool_1)
    str_1 = "c-\\"
    validation_1 = module_0.Validation(str_0, str_1)
    var_0 = validation_1.is_success()
    var_1 = validation_1.to_either()
    var_2 = validation_1.is_success()
    validation_0.map(validation_0)


def test_case_7():
    int_0 = 0
    validation_0 = module_0.Validation(int_0, int_0)
    validation_1 = module_0.Validation(int_0, int_0)
    validation_1.bind(validation_0)


def test_case_8():
    str_0 = ";"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, str_0)
    validation_0.ap(str_0)


def test_case_9():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_box()


def test_case_10():
    complex_0 = -2388 - 179.129j
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_either()
    validation_1 = module_0.Validation(tuple_0, var_0)
    var_1 = validation_1.to_lazy()
    var_2 = var_1.__str__()
    var_2.bind(complex_0)


def test_case_11():
    str_0 = 'TO\x0ca]XIt&"HN3ST'
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, str_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_try()
    var_1.map(str_0)


def test_case_12():
    float_0 = -938.5
    validation_0 = module_0.Validation(float_0, float_0)
    validation_0.to_try()


def test_case_13():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    bytes_0 = b"%\xc8"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    bool_0 = True
    validation_1 = module_0.Validation(list_0, bool_0)
    var_0 = validation_1.__eq__(validation_1)
    validation_1.to_maybe()


def test_case_14():
    bytes_0 = b"%\xc8"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_maybe()
    var_2 = var_1.ap(var_1)
    var_3 = validation_0.__str__()
    var_4 = var_3.__str__()


def test_case_15():
    str_0 = "%.\x0c,G1iLrB@&7}K*"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.is_success()
    var_1 = validation_0.is_fail()
    var_2 = validation_0.__str__()
    var_3 = validation_0.to_box()
    var_3.is_success()


def test_case_16():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    bytes_0 = b""
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    validation_1 = module_0.Validation(bytes_0, bytes_0)
    validation_2 = module_0.Validation(list_0, validation_0)
    var_0 = validation_2.__eq__(bytes_0)
    var_1 = validation_1.to_either()
    var_2 = validation_0.__eq__(bytes_0)
    var_3 = validation_1.to_maybe()
    var_4 = validation_2.to_box()
    var_3.ap(var_3)


def test_case_17():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    set_0 = set()
    validation_1 = module_0.Validation(set_0, set_0)
    var_0 = validation_1.__str__()
    str_0 = ";"
    none_type_1 = None
    validation_2 = module_0.Validation(none_type_1, str_0)
    validation_2.ap(str_0)
