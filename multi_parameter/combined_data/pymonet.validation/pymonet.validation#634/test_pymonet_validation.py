# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    int_0 = -1833
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(int_0)
    var_0.is_success()


def test_case_1():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.__eq__(validation_0)
    validation_1 = module_0.Validation(var_0, validation_0)
    var_2 = validation_0.is_fail()
    var_2.to_either()


def test_case_2():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    validation_1 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.__eq__(list_0)
    var_1 = validation_0.__str__()
    var_2 = validation_1.__str__()
    var_3 = validation_1.to_either()
    var_4 = var_3.__eq__(var_3)
    validation_2 = module_0.Validation(list_0, list_0)
    var_5 = validation_2.to_either()
    var_6 = validation_2.to_maybe()
    var_2.is_success()


def test_case_3():
    none_type_0 = None
    float_0 = 1196.77
    bytes_0 = b"I;"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_try()
    var_2 = var_1.map(float_0)
    var_3 = var_2.__str__()
    var_3.ap(none_type_0)


def test_case_4():
    list_0 = []
    var_0 = list_0.__str__()


def test_case_5():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)


def test_case_6():
    str_0 = "Ut\\hA|G\nc}"
    validation_0 = module_0.Validation(str_0, str_0)
    tuple_0 = (validation_0,)
    validation_1 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_1.to_try()


def test_case_7():
    int_0 = 571
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    list_0 = [dict_0]
    str_0 = "*womED7.Q*bcWo"
    validation_0 = module_0.Validation(str_0, str_0)
    validation_0.map(list_0)


def test_case_8():
    str_0 = "z7[sm~b@BIr-q|"
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    validation_0 = module_0.Validation(list_0, list_0)
    validation_0.bind(str_0)


def test_case_9():
    none_type_0 = None
    float_0 = -3846.0
    validation_0 = module_0.Validation(float_0, float_0)
    validation_0.ap(none_type_0)


def test_case_10():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    bool_0 = True
    validation_1 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_1.to_box()
    var_0.bind(validation_0)


def test_case_11():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_0.to_lazy()


def test_case_12():
    bytes_0 = b"\xc5\xdf\x9a\x8a\xb1\xc7^\xa5\xb7\xb8\x89\xf7\x9c\xe1'\x98R"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_box()
    var_2 = var_1.to_either()
    var_3 = var_2.to_try()


def test_case_13():
    str_0 = ";W~"
    validation_0 = module_0.Validation(str_0, str_0)
    bytes_0 = b"\xe9\xdcf\x90\x95\xbe\x8aZ\xdc\xb2/E\xe5\xd2\x9f\xf4"
    validation_1 = module_0.Validation(str_0, bytes_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.is_fail()
    var_1.to_lazy()


def test_case_14():
    bytes_0 = b"O\xc4aH\xe5\x96\x90\x8a\xb9;"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.to_box()
    var_2 = validation_0.to_either()
    var_3 = validation_0.__str__()
    var_1.to_box()


def test_case_15():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)
    var_0.to_maybe()


def test_case_16():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    validation_1 = module_0.Validation(list_0, list_0)
    validation_2 = module_0.Validation(validation_0, validation_0)
    var_0 = validation_0.__eq__(validation_2)
    var_1 = validation_0.__str__()
    var_2 = validation_2.__eq__(validation_1)
    var_3 = validation_0.is_fail()
    var_3.to_either()
