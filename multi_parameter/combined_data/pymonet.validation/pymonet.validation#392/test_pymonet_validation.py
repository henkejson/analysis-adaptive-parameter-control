# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    int_0 = -268
    validation_0 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_0.to_either()


def test_case_1():
    bytes_0 = b"\x1c\x804\xbdu\x88\xc6p\x16\xc0>\xea_\x9f"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(bytes_0)


def test_case_2():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.__eq__(var_0)
    var_1.is_success()


def test_case_3():
    complex_0 = 1566.6 - 165.9016j
    int_0 = -545
    dict_0 = {complex_0: complex_0, int_0: complex_0, int_0: complex_0, int_0: int_0}
    validation_0 = module_0.Validation(int_0, dict_0)
    var_0 = validation_0.__str__()
    var_0.is_fail()


def test_case_4():
    bytes_0 = b"s\xa5RL&\x93r"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()


def test_case_5():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_maybe()
    validation_0.map(set_0)


def test_case_6():
    bytes_0 = b"\xee1XqH\xfcF\x8f\x04\r\xa5\xb8"
    list_0 = [bytes_0]
    str_0 = "$y.l bS0W3L@"
    bytes_1 = b"\xf6\x02\xb0\xdff\x89\xbd\xab\xc8-\x02\x18m"
    tuple_0 = (list_0, list_0, str_0, bytes_1)
    validation_0 = module_0.Validation(tuple_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_try()
    var_1.to_either()


def test_case_7():
    int_0 = 2938
    validation_0 = module_0.Validation(int_0, int_0)


def test_case_8():
    complex_0 = -944.5449206165297 - 203.8904119923487j
    validation_0 = module_0.Validation(complex_0, complex_0)
    validation_0.to_maybe()


def test_case_9():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.is_fail()


def test_case_10():
    int_0 = 2632
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.map(int_0)


def test_case_11():
    complex_0 = -1510.122242220371 - 1440.9717784547315j
    validation_0 = module_0.Validation(complex_0, complex_0)
    validation_0.bind(complex_0)


def test_case_12():
    int_0 = -1174
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.ap(int_0)


def test_case_13():
    int_0 = 2957
    validation_0 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.to_box()


def test_case_14():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_lazy()


def test_case_15():
    int_0 = -542
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.to_try()


def test_case_16():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.__eq__(var_0)
    var_0.ap(validation_0)


def test_case_17():
    int_0 = 401
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.is_fail()
    validation_1 = module_0.Validation(int_0, var_0)
    var_1 = validation_0.__str__()
    var_2 = validation_1.__eq__(validation_0)
    var_3 = var_2.__eq__(validation_0)
    validation_1.is_success()


def test_case_18():
    int_0 = 2938
    validation_0 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_try()
    var_1.is_fail()
