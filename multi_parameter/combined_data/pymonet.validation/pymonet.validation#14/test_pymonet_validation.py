# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    none_type_0 = None
    bytes_0 = b"Fz\xf39\xeb4I"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(none_type_0)
    var_0.to_either()


def test_case_1():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.__str__()
    var_2 = validation_0.__str__()
    var_0.to_either()


def test_case_2():
    bool_0 = False
    bool_1 = False
    str_0 = "8u_"
    list_0 = [str_0, str_0, str_0]
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.__str__()
    var_1 = var_0.__eq__(bool_1)
    var_1.bind(bool_0)


def test_case_3():
    str_0 = "ghJ4!xNiw-V{rE\tRV\r"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    var_0.is_success()


def test_case_4():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_5():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.to_either()


def test_case_6():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.is_fail()


def test_case_7():
    str_0 = "t r){}7`W{ZA\\"
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, str_0)
    validation_0.map(str_0)


def test_case_8():
    bytes_0 = b'3\x19R\x00"&##\xa1a'
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_0.bind(bytes_0)


def test_case_9():
    int_0 = 837
    int_1 = 518
    dict_0 = {int_1: int_1, int_1: int_1, int_1: int_1}
    validation_0 = module_0.Validation(dict_0, int_1)
    validation_0.ap(int_0)


def test_case_10():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_box()


def test_case_11():
    bytes_0 = b":\x0e}\xf1\xdb\x1e\xe4\xf4}\xbe\xf5\xf6W\x14\xa8"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.is_success()
    var_2 = validation_0.__eq__(validation_0)
    var_2.is_fail()


def test_case_12():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.to_lazy()
    var_2 = var_0.to_lazy()
    var_3 = var_1.to_maybe()
    var_4 = var_3.to_try()
    var_4.is_success()


def test_case_13():
    bytes_0 = b"F\x9b7\x17\xd4\xf4\xc2n+Q\xa4\x8c\x99s"
    none_type_0 = None
    validation_0 = module_0.Validation(bytes_0, none_type_0)
    validation_0.to_try()


def test_case_14():
    bytes_0 = b"\x03;]a\x1b$\xfb\x0e\xf8v\x875\xd2\xfb"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.is_success()
    var_1 = validation_0.__eq__(validation_0)
    var_1.is_fail()


def test_case_15():
    bytes_0 = b"\xa3\x19\xdb\xf7\xf0\xe2\xa4\x8b\xf2\x95\x9aM\xb8S\xce\x96\xd4"
    bytes_1 = b":\x0e}\xf1\xdb\x1e\xe4\xf4}\xbe\xf5\xf6W\x14\xa8"
    validation_0 = module_0.Validation(bytes_1, bytes_1)
    var_0 = validation_0.is_success()
    var_1 = validation_0.__eq__(validation_0)
    validation_1 = module_0.Validation(bytes_0, bytes_1)
    var_2 = validation_1.to_maybe()
    var_3 = validation_1.__eq__(bytes_1)
    var_4 = validation_0.is_fail()
    var_5 = var_3.__eq__(var_0)
    var_1.to_try()


def test_case_16():
    bytes_0 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.is_success()
    var_1 = validation_0.to_maybe()
    var_1.is_success()


def test_case_17():
    none_type_0 = None
    bytes_0 = b":\x0e}\xf1\xdb\x1e\xe4\xf4}\xbe\xf5\xf6W\x14\xa8"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(none_type_0)
    validation_1 = module_0.Validation(var_0, none_type_0)
    var_1 = validation_1.__eq__(validation_0)
    var_0.is_fail()
