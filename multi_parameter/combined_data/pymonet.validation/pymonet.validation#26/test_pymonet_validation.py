# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(none_type_0)
    var_0.to_maybe()


def test_case_1():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.__str__()
    var_1 = var_0.__str__()
    var_1.to_box()


def test_case_2():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0}
    float_0 = -641.7
    tuple_1 = (set_0, float_0, float_0, set_0)
    validation_0 = module_0.Validation(tuple_1, set_0)
    var_0 = validation_0.__str__()
    var_0.ap(tuple_0)


def test_case_3():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_try()
    var_1.to_lazy()


def test_case_4():
    bytes_0 = b"\xb5\xef\xcc"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.is_success()
    var_2 = var_1.__str__()
    var_3 = var_2.__eq__(var_2)
    var_0.is_fail()


def test_case_5():
    bytes_0 = b"\xc2\xca$\x98\xa6#\xc7\xef\x05>\xfa\xab\x83"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()


def test_case_6():
    bytes_0 = b"\xc2\xca$\x98\xa6#\xc7\xef\x05>\xfa\xab\x83"
    validation_0 = module_0.Validation(bytes_0, bytes_0)


def test_case_7():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_maybe()
    var_2 = var_0.to_try()
    var_3 = module_0.Validation(set_0, var_2)
    var_3.is_fail()


def test_case_8():
    set_0 = set()
    set_1 = set()
    none_type_0 = None
    validation_0 = module_0.Validation(set_1, none_type_0)
    validation_0.map(set_0)


def test_case_9():
    bool_0 = False
    none_type_0 = None
    validation_0 = module_0.Validation(bool_0, none_type_0)
    var_0 = validation_0.__eq__(bool_0)
    var_1 = validation_0.__eq__(bool_0)
    var_2 = module_0.Validation(var_1, var_1)
    var_3 = var_1.__str__()
    var_2.bind(validation_0)


def test_case_10():
    bool_0 = False
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, bool_0)
    validation_0.ap(bool_0)


def test_case_11():
    int_0 = -1325
    int_1 = -1678
    list_0 = []
    set_0 = {int_0, int_1}
    tuple_0 = (set_0,)
    tuple_1 = (int_0, int_1, list_0, tuple_0)
    list_1 = []
    validation_0 = module_0.Validation(list_1, list_1)
    var_0 = validation_0.to_box()
    var_1 = var_0.to_try()
    var_1.ap(tuple_1)


def test_case_12():
    int_0 = 0
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_try()
    var_2 = var_1.__str__()
    var_2.ap(int_0)


def test_case_13():
    str_0 = "ng(z#+"
    none_type_0 = None
    validation_0 = module_0.Validation(str_0, none_type_0)
    validation_0.to_try()


def test_case_14():
    bytes_0 = b"\xc2\xca$\x98\xa6#\xc7\xef\x05>\xfa\xab\x83"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)


def test_case_15():
    bytes_0 = b"\x93\xc4+\x1b\x0ez\x94]\x90\xfe\x86\xff^\xb9\x94 \x14"
    none_type_0 = None
    validation_0 = module_0.Validation(bytes_0, none_type_0)
    validation_1 = module_0.Validation(none_type_0, bytes_0)
    var_0 = validation_0.__eq__(validation_1)
