# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_0.is_success()


def test_case_1():
    bool_0 = True
    none_type_0 = None
    validation_0 = module_0.Validation(bool_0, none_type_0)
    var_0 = validation_0.__eq__(none_type_0)
    validation_0.to_either()


def test_case_2():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.__str__()
    var_1 = var_0.__eq__(dict_0)
    var_0.to_maybe()


def test_case_3():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_either()
    var_0.is_fail()


def test_case_4():
    bytes_0 = b"\x01f\xcf"
    bool_0 = True
    none_type_0 = None
    str_0 = "3J\x0bv\\"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.ap(none_type_0)
    var_2 = var_1.ap(bool_0)
    var_3 = var_2.to_maybe()
    var_4 = var_3.ap(bytes_0)


def test_case_5():
    bytes_0 = b"\x86<\xd9\xce=u\x84\x0b\xb6\xe7B\x1e\xd8v\x8ee\xb1"
    validation_0 = module_0.Validation(bytes_0, bytes_0)


def test_case_6():
    bytes_0 = b"\x82<\xd9\xce=u\x84\x0b\xb6\xe7B\x1e\xd8\xa7\x8ee\xb1"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()


def test_case_7():
    float_0 = -1827.92
    list_0 = [float_0, float_0]
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.is_fail()
    var_0.is_success()


def test_case_8():
    str_0 = "\n        If Maybe is empty return new empty Maybe, in other case\n        takes mapper function and returns new instance of Maybe\n        with result of mapper.\n\n        :param mapper: function to call with Maybe value\n        :type mapper: Function(A) -> B\n        :returns: Maybe[B | None]\n        "
    bool_0 = True
    tuple_0 = (str_0, bool_0, bool_0)
    set_0 = {tuple_0, tuple_0, tuple_0}
    validation_0 = module_0.Validation(set_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.to_maybe()
    validation_0.map(str_0)


def test_case_9():
    float_0 = -1410.77
    validation_0 = module_0.Validation(float_0, float_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_lazy()
    validation_0.bind(float_0)


def test_case_10():
    none_type_0 = None
    none_type_1 = None
    validation_0 = module_0.Validation(none_type_1, none_type_1)
    validation_0.ap(none_type_0)


def test_case_11():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_box()


def test_case_12():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.to_lazy()


def test_case_13():
    complex_0 = 13.735289 - 1191.103626j
    validation_0 = module_0.Validation(complex_0, complex_0)
    validation_0.to_try()


def test_case_14():
    bytes_0 = b"\x0fQew"
    set_0 = {bytes_0}
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(bytes_0)
    validation_1 = module_0.Validation(bytes_0, set_0)
    var_1 = validation_1.__str__()
    var_1.is_success()


def test_case_15():
    bytes_0 = b"\x86<\xd9\xce=u\x84\x0b\xb6\xe7B\x1e\xd8v\x8ee\xb1"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_try()


def test_case_16():
    float_0 = -1410.77
    validation_0 = module_0.Validation(float_0, float_0)
    var_0 = validation_0.to_box()
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, validation_0)
    var_1 = validation_0.__eq__(validation_1)
    var_1.ap(var_1)


def test_case_17():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.to_maybe()
    var_0.is_success()
