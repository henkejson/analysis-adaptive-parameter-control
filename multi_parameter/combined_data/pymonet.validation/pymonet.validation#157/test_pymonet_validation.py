# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.__eq__(validation_0)
    var_2 = validation_0.__eq__(bool_0)
    var_1.map(var_0)


def test_case_1():
    tuple_0 = ()
    dict_0 = {}
    bool_0 = False
    tuple_1 = (tuple_0, dict_0, bool_0)
    validation_0 = module_0.Validation(tuple_1, tuple_1)
    var_0 = validation_0.to_either()
    bool_1 = True
    bool_2 = True
    set_0 = {bool_2, bool_2}
    validation_1 = module_0.Validation(set_0, set_0)
    var_1 = validation_1.to_lazy()
    var_2 = var_1.to_maybe()
    var_2.bind(bool_1)


def test_case_2():
    str_0 = "zAm\nxtzch\x0bB"
    validation_0 = module_0.Validation(str_0, str_0)


def test_case_3():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.to_maybe()


def test_case_4():
    str_0 = "\n    In mathematics and computer science, currying is the technique of translating the evaluation of a function.\n    It that takes multiple arguments (or a tuple of arguments) into evaluating a sequence of functions.\n    each with a single argument.\n    "
    list_0 = [str_0, str_0]
    bool_0 = True
    list_1 = [bool_0, bool_0]
    validation_0 = module_0.Validation(list_1, list_1)
    var_0 = validation_0.is_fail()
    var_0.bind(list_0)


def test_case_5():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.map(none_type_0)


def test_case_6():
    int_0 = -47
    str_0 = "ys!9lU"
    validation_0 = module_0.Validation(str_0, str_0)
    validation_0.bind(int_0)


def test_case_7():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.ap(list_0)


def test_case_8():
    str_0 = "zAm\nxtzch\x0bB"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_box()


def test_case_9():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    none_type_0 = None
    validation_0 = module_0.Validation(set_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_0.to_lazy()


def test_case_10():
    str_0 = "?\nu5"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_try()
    var_1 = validation_0.to_maybe()
    var_2 = var_1.to_either()
    var_3 = var_2.bind(var_2)
    var_4 = var_2.__str__()
    var_0.to_lazy()


def test_case_11():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)


def test_case_12():
    bytes_0 = b"9\r\xfc,t\x14\xb2{K\xed"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()


def test_case_13():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    validation_1 = module_0.Validation(list_0, list_0)
    var_0 = validation_1.to_maybe()
    var_1 = validation_0.to_maybe()
    var_2 = validation_1.to_either()
    var_3 = validation_1.to_box()
    var_4 = var_0.to_box()
    var_0.to_maybe()


def test_case_14():
    bytes_0 = b"\xcc"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.__str__()
    var_1.is_fail()


def test_case_15():
    bytes_0 = b""
    none_type_0 = None
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_lazy()
    var_2 = validation_0.__str__()
    var_3 = var_1.map(validation_0)
    var_4 = var_3.map(none_type_0)
    var_4.is_success()


def test_case_16():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.__eq__(validation_0)
    validation_1 = module_0.Validation(bool_0, bool_0)
    var_2 = validation_1.__eq__(bool_0)
    validation_2 = module_0.Validation(var_2, validation_0)
    var_3 = validation_2.__eq__(validation_1)
    validation_1.__str__()
