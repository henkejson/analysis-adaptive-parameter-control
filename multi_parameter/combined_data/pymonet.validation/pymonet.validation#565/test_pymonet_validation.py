# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0
import builtins as module_1


def test_case_0():
    bytes_0 = b"\xfb\xd7\xe2@\xc5\xcc\xb7"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.is_fail()
    var_2 = validation_0.__eq__(validation_0)
    validation_0.map(validation_0)


def test_case_1():
    dict_0 = {}
    tuple_0 = (dict_0,)
    bool_0 = False
    set_0 = {bool_0, bool_0}
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.__eq__(tuple_0)
    var_0.to_try()


def test_case_2():
    bytes_0 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.to_box()
    var_2 = validation_0.is_success()
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    var_3 = validation_0.__str__()
    var_1.ap(var_3)


def test_case_3():
    str_0 = "(oY5Om3aB0~tM;HH^"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    var_1 = module_1.object()
    var_2 = validation_1.to_box()
    validation_1.is_success()


def test_case_4():
    str_0 = "t"
    validation_0 = module_0.Validation(str_0, str_0)


def test_case_5():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.to_maybe()


def test_case_6():
    str_0 = "LyiY)'O"
    int_0 = -1100
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.bind(str_0)


def test_case_7():
    bytes_0 = b"\xfb\xd7\xe2@\xc5\xcc\xb7"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.is_fail()
    var_2 = validation_0.__eq__(validation_0)
    validation_0.ap(var_2)


def test_case_8():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_box()
    var_0.to_either()


def test_case_9():
    bool_0 = True
    float_0 = -1310.568
    validation_0 = module_0.Validation(bool_0, bool_0)
    none_type_0 = None
    validation_1 = module_0.Validation(float_0, none_type_0)
    var_0 = validation_1.to_lazy()
    validation_0.to_try()


def test_case_10():
    list_0 = []
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.to_lazy()
    var_2 = var_1.map(list_0)
    var_3 = var_2.__eq__(none_type_0)
    var_2.to_either()


def test_case_11():
    int_0 = 0
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.to_try()


def test_case_12():
    bytes_0 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.to_box()
    var_2 = validation_0.to_either()
    var_3 = validation_0.is_success()
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    var_4 = validation_0.__str__()
    var_1.ap(var_4)


def test_case_13():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    dict_0 = {}
    validation_0 = module_0.Validation(list_0, dict_0)
    var_0 = validation_0.to_maybe()
    var_0.is_success()


def test_case_14():
    bytes_0 = b"\xdb\xe8\x1f"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()


def test_case_15():
    str_0 = "(oY5Om3aB0~tM;HH^"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    validation_2 = module_0.Validation(var_0, var_0)
    var_1 = validation_1.__eq__(validation_2)
    var_2 = validation_0.to_box()
    var_3 = validation_0.is_success()
    var_4 = validation_0.to_try()
    var_5 = var_0.to_either()
    var_6 = validation_0.to_try()
    var_7 = var_2.to_lazy()
    var_7.is_success()
