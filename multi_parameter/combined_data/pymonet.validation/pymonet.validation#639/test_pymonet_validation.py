# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bool_0 = False
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(bool_0)
    var_1 = var_0.__eq__(none_type_0)
    var_1.is_fail()


def test_case_1():
    bool_0 = True
    tuple_0 = (bool_0, bool_0, bool_0, bool_0)
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.__str__()
    var_1 = var_0.__str__()


def test_case_2():
    bytes_0 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_try()
    var_1 = validation_0.to_either()
    var_1.ap(var_1)


def test_case_3():
    str_0 = ")>pj"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    bool_0 = False
    bytes_0 = b"\xb4\x1e4U\x01%\xca\xb1\x10\xcd\x01\xaep\xcdy\xf6\xc6p\xd6{"
    validation_1 = module_0.Validation(bytes_0, bool_0)
    none_type_0 = None
    validation_2 = module_0.Validation(none_type_0, str_0)
    var_1 = validation_2.is_success()
    var_2 = validation_2.__str__()
    var_0.is_success()


def test_case_4():
    tuple_0 = ()
    bytes_0 = b'\x18\xa0\x80\xe2\x84@}Y\x1b\xb2"'
    validation_0 = module_0.Validation(tuple_0, bytes_0)
    var_0 = validation_0.to_maybe()
    float_0 = 502.149195
    validation_1 = module_0.Validation(var_0, float_0)
    var_1 = validation_0.to_maybe()
    validation_1.is_fail()


def test_case_5():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_6():
    float_0 = -620.3
    list_0 = [float_0, float_0, float_0, float_0]
    validation_0 = module_0.Validation(list_0, float_0)
    validation_0.to_try()


def test_case_7():
    bytes_0 = b"F\xb9\xfb\xd2\xce\x92\x85!L\xbb\x8e*"
    bytes_1 = b"\x99\x81t\r\x8cb)F\xb1\xfbd\xc2"
    validation_0 = module_0.Validation(bytes_1, bytes_1)
    var_0 = validation_0.is_fail()
    var_1 = validation_0.__eq__(bytes_0)
    var_1.is_success()


def test_case_8():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    int_0 = -185
    validation_0.map(int_0)


def test_case_9():
    complex_0 = -2792.857 + 784.934j
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.bind(complex_0)


def test_case_10():
    str_0 = ")>pj"
    bool_0 = False
    bytes_0 = b"\xb4\x1e4U\x01%\xca\xb1\x10\xcd\x01\xaep\xcdy\xf6\xc6p\xd6{"
    validation_0 = module_0.Validation(bytes_0, bool_0)
    bool_1 = True
    var_0 = validation_0.__eq__(bool_1)
    validation_1 = module_0.Validation(var_0, str_0)
    var_1 = validation_1.is_success()
    var_2 = validation_1.__str__()
    validation_0.ap(bytes_0)


def test_case_11():
    str_0 = "h+\tW#bB[f9\nUE,:l_F<"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.to_lazy()
    var_1.is_fail()


def test_case_12():
    bool_0 = False
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(bool_0)
    var_1 = validation_0.to_lazy()
    var_1.is_fail()


def test_case_13():
    bytes_0 = b"E\xfd\x0c\xa1xeb\x95\xa4\xf4\xc6P\x082V\x83\xd8\x9e"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.to_lazy()
    var_2 = var_1.to_either()
    var_3 = var_1.__str__()
    var_1.is_fail()


def test_case_14():
    bool_0 = False
    bytes_0 = b"\x81t\r\x8cb)F\xb1\xfbd\xc2"
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_1 = module_0.Validation(bytes_0, var_0)
    validation_0.is_success()


def test_case_15():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_either()
    var_2 = var_1.__str__()
    var_2.to_either()


def test_case_16():
    str_0 = ")>pj"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    bool_0 = False
    bytes_0 = b"\xb4\x1e4U\x01%\xca\xb1\x10\xcd\x01\xaep\xcdy\xf6\xc6p\xd6{"
    validation_1 = module_0.Validation(bytes_0, bool_0)
    var_1 = validation_1.__eq__(validation_0)
    validation_2 = module_0.Validation(var_0, validation_1)
    validation_2.is_success()


def test_case_17():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.__str__()
    var_1 = var_0.__str__()
    var_1.to_try()
