# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    str_0 = "G[<p=te$NN%m1"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(str_0)


def test_case_1():
    str_0 = "G[<p=te$NN%m1"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()


def test_case_2():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_either()
    var_0.is_success()


def test_case_3():
    str_0 = "G[<p=te$N8%m1"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()


def test_case_4():
    str_0 = "GC[<p=te$NN%m1"
    validation_0 = module_0.Validation(str_0, str_0)


def test_case_5():
    str_0 = "GC[<p=Le$N%m1"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.is_fail()


def test_case_6():
    str_0 = "8\r$JrX`Ya"
    validation_0 = module_0.Validation(str_0, str_0)
    validation_0.map(str_0)


def test_case_7():
    str_0 = "ha5"
    validation_0 = module_0.Validation(str_0, str_0)
    validation_0.bind(validation_0)


def test_case_8():
    str_0 = "ndvQw$}"
    validation_0 = module_0.Validation(str_0, str_0)
    validation_0.ap(validation_0)


def test_case_9():
    str_0 = "8P-\rJrX`ia"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_box()


def test_case_10():
    int_0 = -2772
    validation_0 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.to_lazy()


def test_case_11():
    int_0 = -264
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.to_try()


def test_case_12():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.__str__()
    var_0.to_maybe()


def test_case_13():
    str_0 = "G[<p=te$N8%m1"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(validation_0)


def test_case_14():
    str_0 = "G[<p=te$N8%m1"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()


def test_case_15():
    int_0 = -2769
    none_type_0 = None
    validation_0 = module_0.Validation(int_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_maybe()
    var_2 = var_1.to_try()
    var_2.to_either()


def test_case_16():
    str_0 = "uEC]p<Wu<k"
    set_0 = set()
    validation_0 = module_0.Validation(str_0, set_0)
    var_0 = validation_0.to_maybe()
    var_0.is_fail()


def test_case_17():
    bytes_0 = b"\xbdO\xf5?\x1e\xdfo\x14\xf0\x83"
    list_0 = [bytes_0, bytes_0, bytes_0]
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_box()
    validation_1 = module_0.Validation(list_0, var_0)
    bytes_1 = b"\x0f\xab5\x0f\x11lU\x17\xe9(\xc6^\xb6\xc0a}\x84\xb99"
    validation_2 = module_0.Validation(bytes_1, bytes_1)
    var_1 = validation_2.to_either()
    var_2 = validation_2.to_maybe()
    var_3 = var_2.to_box()
    tuple_0 = (var_2, var_1)
    var_4 = var_2.__eq__(tuple_0)
    var_5 = validation_2.__str__()
    var_6 = validation_2.__eq__(validation_1)
    var_5.to_lazy()
