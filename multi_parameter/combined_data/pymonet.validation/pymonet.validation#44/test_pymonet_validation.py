# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bytes_0 = b"\x83\xf3\x11p\xc1\xb9\x8e\x8e\xe0`j\xd1\x02\x8e _"
    bool_0 = True
    validation_0 = module_0.Validation(bytes_0, bool_0)
    var_0 = validation_0.__eq__(validation_0)
    none_type_0 = None
    var_1 = validation_0.__eq__(none_type_0)
    var_2 = validation_0.to_lazy()
    var_3 = var_2.to_either()


def test_case_1():
    list_0 = []
    none_type_0 = None
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.__eq__(none_type_0)
    var_0.to_box()


def test_case_2():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_maybe()
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    validation_1.ap(dict_0)


def test_case_3():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_box()
    var_2 = var_1.__eq__(var_1)
    var_3 = var_1.to_lazy()
    var_4 = validation_0.is_success()
    var_0.is_success()


def test_case_4():
    bytes_0 = b"\xf6\xc6"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_maybe()
    var_2 = var_1.map(bytes_0)
    var_3 = var_2.to_either()
    var_4 = var_3.to_box()
    var_5 = var_1.to_lazy()
    var_6 = var_1.map(var_2)
    var_7 = validation_0.to_lazy()
    var_8 = var_6.to_lazy()
    var_3.to_either()


def test_case_5():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_6():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.is_success()


def test_case_7():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.is_fail()


def test_case_8():
    bool_0 = True
    none_type_0 = None
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.map(none_type_0)


def test_case_9():
    int_0 = 254
    str_0 = "n.ek:"
    none_type_0 = None
    validation_0 = module_0.Validation(str_0, none_type_0)
    validation_0.bind(int_0)


def test_case_10():
    none_type_0 = None
    none_type_1 = None
    validation_0 = module_0.Validation(none_type_1, none_type_1)
    var_0 = validation_0.to_box()
    validation_0.ap(none_type_0)


def test_case_11():
    bytes_0 = b"B\xf4\xd5S\x19hy\xa6\x1f\x92]./)"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.__str__()
    var_1.is_fail()


def test_case_12():
    list_0 = []
    str_0 = "s[Vyu4rx!y.;:"
    validation_0 = module_0.Validation(list_0, str_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_try()
    var_2 = validation_0.to_try()
    var_2.to_try()


def test_case_13():
    str_0 = "] K:hLtH0\t|.e=fAjF"
    bool_0 = False
    tuple_0 = (str_0, bool_0)
    validation_0 = module_0.Validation(str_0, str_0)
    tuple_1 = (tuple_0, validation_0)
    validation_1 = module_0.Validation(tuple_1, tuple_1)
    var_0 = validation_1.__eq__(tuple_0)
    bytes_0 = b"-\xecS\xa8\xb9{\xd0\xa6\x98"
    var_1 = validation_0.__eq__(bytes_0)
    var_2 = validation_1.__str__()


def test_case_14():
    bytes_0 = b"\x83\xf3\x11p\xc1\xb9\x8e\x8e\xe0`j\xd1\x02\x8e _"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, bytes_0)
    var_0 = validation_0.__eq__(none_type_0)
    var_1 = validation_0.to_either()
    var_0.is_success()


def test_case_15():
    bytes_0 = b"\x83\xf3\x11p\xc1\xb9\x8e\x8e\xe0`j\xd1\x02\x8e _"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    validation_0 = module_0.Validation(set_0, set_0)
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, bytes_0)
    var_0 = validation_0.__eq__(validation_1)
    var_0.to_maybe()


def test_case_16():
    list_0 = []
    str_0 = 'C9DK"t'
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, list_0)
    var_0 = validation_0.__eq__(str_0)
    var_1 = validation_0.__str__()
    validation_1 = validation_0.to_lazy()
    var_2 = validation_1.bind(var_0)
    var_3 = var_2.to_try()
    var_4 = var_2.bind(var_1)
    var_4.to_lazy()
