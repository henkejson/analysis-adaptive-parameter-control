# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0
import builtins as module_1


def test_case_0():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_box()
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    var_1 = validation_1.__eq__(validation_1)
    validation_1.to_maybe()


def test_case_1():
    int_0 = 0
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(int_0)
    var_0.to_maybe()


def test_case_2():
    tuple_0 = ()
    float_0 = -62.83
    list_0 = [float_0]
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.__str__()
    var_0.ap(tuple_0)


def test_case_3():
    tuple_0 = ()
    bool_0 = False
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_lazy()
    validation_1 = module_0.Validation(bool_0, tuple_0)
    var_2 = validation_1.is_success()
    var_3 = var_0.to_maybe()
    var_4 = var_1.to_either()
    var_5 = validation_0.to_box()
    var_6 = var_5.to_either()
    var_7 = var_4.__str__()
    var_4.is_fail()


def test_case_4():
    str_0 = '1Jsdb"a%?!PFmH51b'
    validation_0 = module_0.Validation(str_0, str_0)


def test_case_5():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.to_try()


def test_case_6():
    str_0 = "3^5`WF"
    none_type_0 = None
    validation_0 = module_0.Validation(str_0, none_type_0)
    validation_0.is_fail()


def test_case_7():
    bytes_0 = b"\xbf\x03\x85"
    float_0 = 2153.157
    validation_0 = module_0.Validation(float_0, float_0)
    validation_0.map(bytes_0)


def test_case_8():
    dict_0 = {}
    int_0 = 3174
    none_type_0 = None
    validation_0 = module_0.Validation(int_0, none_type_0)
    validation_0.bind(dict_0)


def test_case_9():
    bytes_0 = b"32Yi\xaf3s\xda\x0e\x15\t\xedR\x85\xf3\xbe\x94\xea\xbf\xd7"
    bytes_1 = b"\x97\xc2[/\xd0\x18\x9b\x93"
    validation_0 = module_0.Validation(bytes_1, bytes_0)
    none_type_0 = None
    validation_0.ap(none_type_0)


def test_case_10():
    bytes_0 = b"\x95\xa6~\xbc\xb1\x93\xd7\xe3\x05\t"
    float_0 = -1934.16194
    validation_0 = module_0.Validation(float_0, float_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.to_either()
    var_2 = var_1.to_lazy()
    var_3 = var_2.ap(bytes_0)
    var_3.to_either()


def test_case_11():
    bytes_0 = b"\x18\xa8"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_box()
    var_1.bind(bytes_0)


def test_case_12():
    str_0 = "All"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.bind(str_0)
    var_2 = var_0.to_try()
    float_0 = -2545.881418562075
    validation_1 = module_0.Validation(str_0, float_0)
    float_0.to_try()


def test_case_13():
    str_0 = "All"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    validation_1.bind(none_type_0)


def test_case_14():
    str_0 = "All"
    validation_0 = module_0.Validation(str_0, str_0)
    none_type_0 = None
    validation_1 = module_0.Validation(str_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_maybe()
    var_2 = var_1.__eq__(validation_0)
    var_3 = var_2.__eq__(var_1)
    var_4 = validation_1.__eq__(validation_0)
    var_5 = validation_0.to_either()
    var_4.to_try()


def test_case_15():
    str_0 = ""
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_maybe()
    var_2 = var_1.__eq__(var_0)
    module_1.object(*var_0)


def test_case_16():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.__str__()
    str_0 = "WhGW|#S\th"
    int_0 = -1379
    validation_1 = module_0.Validation(int_0, int_0)
    validation_1.map(str_0)
