# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0
import builtins as module_1


def test_case_0():
    none_type_0 = None
    bytes_0 = b"[Q\x0b\xad\xed%\x00\xb9\xa9\xf5\xf6\x81\x9d\xee+\xa0"
    str_0 = "'{XE*pOcu<|"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(bytes_0)
    var_1 = var_0.__str__()
    var_2 = var_1.__str__()
    var_2.map(none_type_0)


def test_case_1():
    str_0 = ',i"^\r:a %{w_uLp84_'
    list_0 = [str_0, str_0, str_0, str_0]
    validation_0 = module_0.Validation(list_0, str_0)
    var_0 = validation_0.__str__()
    var_0.to_maybe()


def test_case_2():
    bytes_0 = b"\xf1\xcf+\x87\xfd\t"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_lazy()
    var_2 = var_1.__str__()
    var_2.is_success()


def test_case_3():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_either()
    var_2 = var_1.__eq__(set_0)
    validation_0.ap(var_1)


def test_case_4():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_5():
    object_0 = module_1.object()
    validation_0 = module_0.Validation(object_0, object_0)
    validation_0.__str__()


def test_case_6():
    bool_0 = True
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, bool_0)
    var_0 = validation_0.__eq__(none_type_0)
    validation_0.is_fail()


def test_case_7():
    bool_0 = False
    float_0 = -1863.609
    none_type_0 = None
    validation_0 = module_0.Validation(float_0, none_type_0)
    validation_0.map(bool_0)


def test_case_8():
    bool_0 = False
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.bind(bool_0)


def test_case_9():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.ap(validation_0)


def test_case_10():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.to_either()
    var_1.is_success()


def test_case_11():
    bytes_0 = b""
    none_type_0 = None
    int_0 = -3789
    validation_0 = module_0.Validation(none_type_0, int_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.ap(bytes_0)
    var_2 = var_1.to_try()


def test_case_12():
    bytes_0 = b"OL\xfe! \x97\xc3\xb5jk\xd7\xab\xb8\xb0\x13"
    none_type_0 = None
    validation_0 = module_0.Validation(bytes_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_try()
    var_1.is_success()


def test_case_13():
    float_0 = 1966.6
    validation_0 = module_0.Validation(float_0, float_0)
    validation_0.to_try()


def test_case_14():
    str_0 = "\n        Take function and applied this function on current box value and returns mapped value.\n\n        :param mapper: mapper function\n        :type mapper: Function(A) -> B\n        :returns: new box with mapped value\n        :rtype: B\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.is_fail()
    var_1 = validation_0.__eq__(validation_0)
    str_1 = "H\nzmg7W;BLmi[g"
    bytes_0 = b"\x14.M\x1en\xe0ji\xac"
    validation_1 = module_0.Validation(bytes_0, str_1)
    var_2 = validation_0.to_either()
    var_1.ap(bytes_0)


def test_case_15():
    float_0 = 839.6038
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.__eq__(float_0)
    var_1 = validation_0.__str__()
    var_2 = validation_0.__str__()
    var_0.to_either()


def test_case_16():
    complex_0 = -1839 - 156.069295j
    tuple_0 = ()
    validation_0 = module_0.Validation(complex_0, tuple_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.__str__()
    var_1.to_try()


def test_case_17():
    str_0 = "TYhCH&87%"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.to_either()
    var_1.is_success()


def test_case_18():
    str_0 = "\n        Take function and applied this function on current box value and returns mapped value.\n\n        :param mapper: mapper function\n        :type mapper: Function(A) -> B\n        :returns: new box with mapped value\n        :rtype: B\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.is_fail()
    var_2 = validation_0.__eq__(validation_0)
    var_3 = validation_0.to_either()
    var_4 = validation_0.is_fail()
    validation_1 = module_0.Validation(var_1, var_2)
    var_5 = validation_1.__eq__(validation_0)
    var_6 = var_3.ap(validation_1)
    var_7 = var_6.to_try()
    var_8 = var_6.map(var_5)
    var_5.to_maybe()
