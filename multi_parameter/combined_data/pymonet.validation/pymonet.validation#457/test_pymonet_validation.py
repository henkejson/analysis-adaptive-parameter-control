# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    str_0 = "&&7:w"
    validation_0 = module_0.Validation(str_0, str_0)
    validation_1 = module_0.Validation(validation_0, str_0)
    str_1 = "XYKA "
    validation_2 = module_0.Validation(str_1, str_1)
    var_0 = validation_2.to_either()
    var_1 = validation_1.__eq__(validation_0)
    validation_2.map(validation_2)


def test_case_1():
    bytes_0 = b"\x9dEV"
    bytes_1 = b"@\x13d\x01\x16\xb0\xd8\xda\x9f\x0b\xbay\x05:m#\xd4"
    validation_0 = module_0.Validation(bytes_0, bytes_1)
    var_0 = validation_0.__str__()
    var_0.to_box()


def test_case_2():
    dict_0 = {}
    tuple_0 = ()
    tuple_1 = (dict_0, tuple_0, dict_0)
    validation_0 = module_0.Validation(tuple_1, tuple_0)
    var_0 = validation_0.to_either()


def test_case_3():
    set_0 = set()
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, set_0)
    var_0 = validation_0.is_fail()
    list_0 = []
    var_1 = validation_0.to_maybe()
    validation_1 = module_0.Validation(list_0, var_0)
    validation_1.bind(set_0)


def test_case_4():
    float_0 = 91.9
    validation_0 = module_0.Validation(float_0, float_0)


def test_case_5():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0}
    list_0 = [dict_0, dict_0, tuple_0, dict_0]
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.is_fail()


def test_case_6():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_lazy()
    validation_0.bind(bool_0)


def test_case_7():
    int_0 = -3311
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, int_0)
    validation_0.ap(int_0)


def test_case_8():
    str_0 = "&&7:w"
    bytes_0 = b"\xb0\xcb\x8c=\xe1A\xe3\x85\xbaaTl\x8a"
    validation_0 = module_0.Validation(str_0, str_0)
    validation_1 = validation_0.to_box()
    var_0 = validation_0.to_either()
    str_1 = "`oc hruYQjm2J5PW;\\"
    validation_2 = module_0.Validation(str_1, var_0)
    var_1 = validation_2.__eq__(bytes_0)
    var_2 = validation_0.__str__()


def test_case_9():
    dict_0 = {}
    tuple_0 = ()
    tuple_1 = (dict_0, tuple_0, dict_0)
    validation_0 = module_0.Validation(tuple_1, tuple_0)
    var_0 = validation_0.to_lazy()


def test_case_10():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.to_try()


def test_case_11():
    str_0 = "&&7:w"
    validation_0 = module_0.Validation(str_0, str_0)
    validation_1 = validation_0.__str__()
    str_1 = "XYKA "
    validation_2 = module_0.Validation(str_1, str_1)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.to_lazy()
    var_2 = var_0.__eq__(str_0)
    var_3 = validation_2.to_box()
    var_4 = validation_0.is_fail()
    var_5 = var_3.to_try()
    var_6 = var_1.to_maybe()
    validation_3 = module_0.Validation(validation_1, validation_2)
    var_7 = var_3.to_maybe()


def test_case_12():
    bytes_0 = b"\xb0\xcb\x8c=\xe1A\xe3\x85\xbaaTle\x8a"
    bytes_1 = b"\xb0\xcb\x8c=\xe1A\xe3\x85\xbaaTl\x8a"
    validation_0 = module_0.Validation(bytes_0, bytes_1)
    validation_1 = module_0.Validation(validation_0, bytes_1)
    var_0 = validation_1.to_either()
    validation_2 = module_0.Validation(validation_0, bytes_0)
    var_1 = validation_2.__eq__(validation_0)
    var_2 = validation_1.__str__()


def test_case_13():
    str_0 = "&&7:w"
    bytes_0 = b"\xb0\xcb\x8c=\xe1A\xe3\x85\xbaaTl\x8a"
    validation_0 = module_0.Validation(str_0, str_0)
    validation_1 = module_0.Validation(str_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.to_either()
    str_1 = "`oc hruYQjm2J5PW;\\"
    validation_2 = module_0.Validation(str_1, var_1)
    var_2 = validation_2.__eq__(bytes_0)
    var_3 = validation_0.__str__()
    var_0.to_maybe()


def test_case_14():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.__str__()
    var_1 = var_0.__str__()
    bytes_0 = b"\xb0\xcb\x8c=\xe1A\xe3\x85\xbaaTle\x8a"
    validation_1 = module_0.Validation(bytes_0, bytes_0)
    none_type_0 = None
    validation_2 = module_0.Validation(none_type_0, none_type_0)
    validation_2.is_fail()
