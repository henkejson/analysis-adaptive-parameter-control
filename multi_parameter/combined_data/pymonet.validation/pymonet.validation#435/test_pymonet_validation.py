# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bytes_0 = b"\x0c\x87\x99m,\xb7z-\xaf\xc85\nr\xf5\x11"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(bytes_0)


def test_case_1():
    bytes_0 = b"\xcd\x860T\xa3\xbb\xf3\x80\xc3]6\x04vb\x98"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.to_either()
    var_2 = validation_0.to_lazy()
    var_3 = var_2.to_maybe()
    var_2.is_success()


def test_case_2():
    bytes_0 = b")J"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()


def test_case_3():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_4():
    bytes_0 = b"\xcd\x860T\xa3\xbb\xf3\x80\xc3]\xb0]\x04vb\x98"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_try()


def test_case_5():
    int_0 = -2496
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.is_fail()


def test_case_6():
    bytes_0 = b"\x0c\x87\x99m,\xb7z-\xaf\xc85\nr\xf5\x11"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_0.map(bytes_0)


def test_case_7():
    str_0 = "\n        Take function and applied this function with monad value and returns new monad with mapped value.\n\n        :params mapper: function to apply on monad value\n        :type mapper: Function(A) -> B\n        :returns: for successfully new Try with mapped value, othercase copy of self\n        :rtype: Try[B]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    validation_0.bind(str_0)


def test_case_8():
    int_0 = -2496
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.ap(validation_0)


def test_case_9():
    int_0 = -2486
    validation_0 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.to_box()


def test_case_10():
    bytes_0 = b"\x0c\x87\x99m,\xb7z-\xaf\xc85\nr\xf5\x11"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_1 = validation_0.to_lazy()


def test_case_11():
    bytes_0 = b"\x860T\xa3\xd0\xf3\xe1\x80\xc3\xf5%\x04vb\x98"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)


def test_case_12():
    bytes_0 = b"\x0c\x87\x99m,\xb7z-\xaf\xc85\nr\xf5\x11"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()


def test_case_13():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_maybe()


def test_case_14():
    list_0 = []
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, list_0)
    var_0 = validation_0.__str__()


def test_case_15():
    list_0 = []
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, list_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_maybe()


def test_case_16():
    bytes_0 = b"\xcd\x860T\xa3\xbb\xf3\x80\xc3]6\x04vb\x98"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.to_either()
    var_2 = validation_0.to_lazy()
    float_0 = -247.88
    validation_1 = module_0.Validation(float_0, var_2)
    var_3 = validation_0.to_box()
    var_4 = validation_0.to_either()
    var_5 = validation_1.to_lazy()
    var_6 = validation_1.__eq__(validation_0)
    var_7 = var_5.to_maybe()
    var_8 = var_0.__str__()
    var_0.map(var_2)
