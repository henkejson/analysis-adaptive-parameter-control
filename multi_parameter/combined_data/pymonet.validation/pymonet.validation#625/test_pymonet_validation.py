# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(bool_0)
    validation_0.is_success()


def test_case_1():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.__str__()
    validation_0.map(var_1)


def test_case_2():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    validation_0 = module_0.Validation(list_0, list_0)
    validation_1 = module_0.Validation(validation_0, bool_0)
    bool_1 = True
    var_0 = validation_0.to_either()
    validation_2 = module_0.Validation(bool_1, bool_1)
    validation_2.to_either()


def test_case_3():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.to_maybe()
    none_type_0 = None
    validation_0.ap(none_type_0)


def test_case_4():
    none_type_0 = None
    int_0 = 945
    set_0 = set()
    bytes_0 = b"\x9b\x81\xa2\xbd(\xf1\xa2\xb1\xdc|]\xbf\xb7\xc1"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.map(set_0)
    var_2 = var_1.ap(int_0)
    var_3 = var_2.to_box()
    var_3.ap(none_type_0)


def test_case_5():
    bytes_0 = b'"\x1dk\xe3\xbc\xe5'
    validation_0 = module_0.Validation(bytes_0, bytes_0)


def test_case_6():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.is_fail()
    var_0.to_box()


def test_case_7():
    set_0 = set()
    float_0 = -154.357
    set_1 = {float_0, float_0}
    validation_0 = module_0.Validation(set_1, float_0)
    validation_0.map(set_0)


def test_case_8():
    bool_0 = False
    bool_1 = False
    validation_0 = module_0.Validation(bool_1, bool_1)
    validation_0.bind(bool_0)


def test_case_9():
    int_0 = -1954
    list_0 = [int_0, int_0]
    int_1 = -1706
    validation_0 = module_0.Validation(int_1, int_1)
    validation_0.ap(list_0)


def test_case_10():
    str_0 = "F[e7\x0c9C9XE<&J"
    set_0 = {str_0, str_0, str_0, str_0}
    validation_0 = module_0.Validation(set_0, str_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.to_try()
    var_1.to_lazy()


def test_case_11():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_0.is_fail()


def test_case_12():
    none_type_0 = None
    float_0 = -1075.60021
    list_0 = [float_0, float_0, float_0, float_0]
    none_type_1 = None
    validation_0 = module_0.Validation(list_0, none_type_1)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_either()
    var_1.ap(none_type_0)


def test_case_13():
    str_0 = ""
    tuple_0 = (str_0,)
    validation_0 = module_0.Validation(tuple_0, str_0)
    var_0 = validation_0.to_try()
    var_0.to_maybe()


def test_case_14():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_either()
    var_0.is_fail()


def test_case_15():
    set_0 = set()
    none_type_0 = None
    validation_0 = module_0.Validation(set_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)


def test_case_16():
    str_0 = "\n    Maybe type is the most common way of represeating nothingness (os the null type).\n    Maybe is effectively abstract and has two concrete subtypes: Box (also Some) and Nothing.\n    "
    str_1 = ""
    validation_0 = module_0.Validation(str_0, str_1)
    var_0 = validation_0.to_try()
    var_1 = validation_0.__eq__(validation_0)
    var_2 = validation_0.__str__()
    var_0.to_box()


def test_case_17():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    validation_0 = module_0.Validation(list_0, list_0)
    validation_1 = module_0.Validation(validation_0, bool_0)
    var_0 = validation_1.__eq__(validation_0)
    validation_1.is_fail()
