# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    none_type_0 = None
    var_0 = validation_0.__eq__(none_type_0)
    var_0.to_box()


def test_case_1():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.is_success()
    var_1 = validation_0.__str__()
    var_2 = var_0.__eq__(var_0)
    validation_0.map(var_0)


def test_case_2():
    str_0 = "\n    Create a new function that, when invoked,\n    caches the result of calling fn for a given argument set and returns the result.\n    Subsequent calls to the memoized fn with the same argument set will not result in an additional call to fn;\n    instead, the cached result for that set of arguments will be returned.\n\n    :param fn: function to invoke\n    :type fn: Function(A) -> B\n    :param key: function to decide if result should be taken from cache\n    :type key: Function(A, A) -> Boolean\n    :returns: new function invoking old one\n    :rtype: Function(A) -> B\n    "
    bytes_0 = b"~"
    tuple_0 = ()
    validation_0 = module_0.Validation(bytes_0, tuple_0)
    var_0 = validation_0.to_either()
    var_0.map(str_0)


def test_case_3():
    bytes_0 = b"\xb6; \x17\xbf\xd9\xd8\xa7"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_lazy()
    var_2 = var_1.to_maybe()
    var_2.is_fail()


def test_case_4():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)


def test_case_5():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.to_try()


def test_case_6():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.is_fail()


def test_case_7():
    float_0 = 1611.3071
    int_0 = -1064
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.bind(float_0)


def test_case_8():
    bool_0 = False
    str_0 = "[jAA{{l\r"
    validation_0 = module_0.Validation(str_0, str_0)
    validation_0.ap(bool_0)


def test_case_9():
    str_0 = "\\qv"
    validation_0 = module_0.Validation(str_0, str_0)
    int_0 = -2921
    none_type_0 = None
    validation_1 = module_0.Validation(int_0, none_type_0)
    var_0 = validation_1.to_box()
    var_0.is_fail()


def test_case_10():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_lazy()


def test_case_11():
    str_0 = "*-n?K$2zP]i08\\SbY\r"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_box()
    var_1.map(str_0)


def test_case_12():
    int_0 = 0
    validation_0 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.__eq__(validation_0)


def test_case_13():
    bytes_0 = b"\xf9&\xa3\x80\x80u\x84\xb4\xfe\xa0"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_maybe()
    var_2 = var_1.map(var_1)
    var_3 = var_2.to_box()
    var_4 = var_3.to_lazy()
    var_4.to_lazy()


def test_case_14():
    bytes_0 = b"\xf9&\xa3\x80\x80u\x84\xb4\xfe\xa0"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.map(var_0)
    var_2 = var_1.to_box()
    var_3 = var_2.to_lazy()
    var_3.to_lazy()


def test_case_15():
    int_0 = 0
    validation_0 = module_0.Validation(int_0, int_0)
    none_type_0 = None
    none_type_1 = None
    validation_1 = module_0.Validation(int_0, none_type_1)
    var_0 = validation_1.__eq__(validation_0)
    var_1 = var_0.__eq__(none_type_0)
    tuple_0 = (var_1,)
    validation_2 = module_0.Validation(tuple_0, int_0)
    validation_1.is_fail()


def test_case_16():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.__eq__(set_0)
    var_1 = validation_0.to_maybe()
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    var_2 = validation_1.__eq__(validation_1)
    var_3 = validation_1.to_box()
    var_4 = validation_1.__eq__(none_type_0)
    var_5 = var_4.__eq__(var_4)
    bool_0 = True
    validation_2 = module_0.Validation(bool_0, none_type_0)
    validation_1.is_success()
