# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bytes_0 = b"u\xb6\x8dp\xdcZ"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_0.ap(var_0)


def test_case_1():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    bool_0 = True
    var_0 = validation_0.__eq__(bool_0)
    validation_0.map(none_type_0)


def test_case_2():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.__str__()
    var_0.bind(validation_0)


def test_case_3():
    str_0 = "\n    One is a Monoid that will combine 2 values of any type using logical disjunction OR on their coerced Boolean values.\n    "
    list_0 = [str_0]
    bool_0 = False
    tuple_0 = (list_0, bool_0, bool_0)
    validation_0 = module_0.Validation(str_0, tuple_0)
    var_0 = validation_0.__str__()
    var_0.is_success()


def test_case_4():
    float_0 = -3554.94286
    dict_0 = {float_0: float_0, float_0: float_0}
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_either()
    var_0.bind(dict_0)


def test_case_5():
    bytes_0 = b"#P\xc5\xf6g\xfcq\xcfv"
    str_0 = "\n        Returns Lazy with function returning argument.\n\n        :param value: value to return by Lazy constructor_fn\n        :type value: Any\n        :returns: Lazy with function returning argument\n        :rtype: Lazy[Function() -> A]\n        "
    validation_0 = module_0.Validation(bytes_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_maybe()
    var_2 = var_1.to_lazy()
    var_3 = var_2.to_try()
    var_4 = var_3.__str__()
    var_4.to_try()


def test_case_6():
    bytes_0 = b"u\xb6\x8dp\xdcZ"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_maybe()


def test_case_7():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)


def test_case_8():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    none_type_0 = None
    validation_0 = module_0.Validation(list_0, none_type_0)
    validation_0.is_fail()


def test_case_9():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.__str__()
    var_2 = validation_0.to_lazy()
    var_3 = var_2.to_try()
    none_type_0 = None
    validation_0.map(none_type_0)


def test_case_10():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.__str__()
    var_2 = validation_0.to_lazy()
    var_3 = var_2.to_try()
    var_4 = var_3.__str__()
    var_5 = validation_0.to_box()
    var_5.is_fail()


def test_case_11():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_lazy()
    var_2 = var_1.to_try()
    none_type_0 = None
    validation_1 = var_1.bind(tuple_0)
    var_3 = validation_1.map(none_type_0)


def test_case_12():
    int_0 = -3139
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.to_try()


def test_case_13():
    bytes_0 = b"#P\xc5\xf6g\xfcq\xcfv"
    str_0 = "\n        Returns Lazy with function returning argument.\n\n        :param value: value to return by Lazy constructor_fn\n        :type value: Any\n        :returns: Lazy with function returning argument\n        :rtype: Lazy[Function() -> A]\n        "
    list_0 = [bytes_0, str_0, bytes_0]
    validation_0 = module_0.Validation(bytes_0, list_0)
    validation_0.bind(str_0)


def test_case_14():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.to_lazy()
    var_0.is_success()


def test_case_15():
    bytes_0 = b"u\xb6\x8dp\xdcZ"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    str_0 = "\n        Returns Lazy with function returning argument.\n\n        :param value: value to return by Lazy constructor_fn\n        :type value: Any\n        :returns: Lazy with function returning argument\n        :rtype: Lazy[Function() -> A]\n        "
    validation_1 = module_0.Validation(str_0, str_0)
    validation_2 = module_0.Validation(validation_1, validation_0)
    var_0 = validation_1.to_either()
    var_1 = validation_1.__str__()
    var_2 = validation_0.to_maybe()
    var_3 = var_2.to_lazy()
    var_4 = var_2.__eq__(str_0)
    var_5 = var_0.to_try()
    var_6 = var_2.__str__()
    validation_3 = module_0.Validation(validation_2, validation_0)
    var_7 = validation_3.__eq__(validation_1)
    var_0.is_success()
