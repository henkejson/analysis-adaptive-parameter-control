# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0
import builtins as module_1


def test_case_0():
    bool_0 = True
    str_0 = "\n        Transform Box into Validation.\n\n        :returns: failed Validation monad with previous value as error\n        :rtype: Validation[None, [A]]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    bool_1 = False
    var_0 = validation_0.__eq__(bool_1)
    var_1 = validation_0.is_success()
    var_2 = validation_0.to_maybe()
    var_3 = str_0.__eq__(bool_0)


def test_case_1():
    str_0 = "\n        Transform Box into Validation.\n\n        :returns: failed Validation monad with previous value as error\n        :rtype: Validation[None, [A]]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.__eq__(validation_0)
    var_2 = validation_0.to_try()
    var_3 = var_0.to_box()
    var_4 = var_3.__eq__(var_2)
    var_4.is_success()


def test_case_2():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_3():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.to_maybe()


def test_case_4():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.is_fail()
    var_0.is_fail()


def test_case_5():
    int_0 = 1939
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    bytes_0 = b"\xff~n\x13,s.\x17\x08\xc5\xd0x\x01\xbdwD\x9e\tT\xbc"
    none_type_0 = None
    validation_0 = module_0.Validation(bytes_0, none_type_0)
    validation_0.map(dict_0)


def test_case_6():
    bool_0 = False
    set_0 = set()
    float_0 = -2444.9967
    tuple_0 = (bool_0, set_0, float_0, bool_0)
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_maybe()
    validation_0.bind(var_0)


def test_case_7():
    bool_0 = True
    str_0 = "\x0cYS%7~#K"
    tuple_0 = (str_0,)
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    validation_0.ap(bool_0)


def test_case_8():
    list_0 = []
    object_0 = module_1.object(*list_0)
    none_type_0 = None
    validation_0 = module_0.Validation(list_0, object_0)
    var_0 = validation_0.to_box()
    var_0.map(none_type_0)


def test_case_9():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_box()
    validation_1 = module_0.Validation(bool_0, bool_0)
    var_2 = var_1.to_try()
    validation_1.to_maybe()


def test_case_10():
    none_type_0 = None
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_either()
    var_2 = var_1.to_lazy()
    validation_1 = module_0.Validation(var_0, var_2)
    var_3 = validation_0.__eq__(validation_1)
    var_4 = var_2.ap(none_type_0)
    var_4.is_success()


def test_case_11():
    str_0 = "\n        Transform Box into Validation.\n\n        :returns: failed Validation monad with previous value as error\n        :rtype: Validation[None, [A]]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_box()
    var_0.to_box()


def test_case_12():
    bool_0 = True
    str_0 = "\n        Transform Box into Validation.\n\n        :returns: failed Validation monad with previous value as error\n        :rtype: Validation[None, [A]]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.__str__()
    bool_0.to_maybe()


def test_case_13():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_either()
    bool_0 = False
    var_1 = var_0.__eq__(bool_0)
    var_2 = validation_0.__eq__(var_0)
    var_2.to_try()


def test_case_14():
    float_0 = 3151.063
    none_type_0 = None
    validation_0 = module_0.Validation(float_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_maybe()
    tuple_0 = ()
    float_1 = -3076.42
    str_0 = "\\A(=cgjjTyd1zMl+"
    validation_1 = module_0.Validation(float_1, str_0)
    var_2 = validation_1.__str__()
    validation_2 = module_0.Validation(str_0, tuple_0)
    var_3 = validation_2.__str__()
    var_4 = validation_1.__str__()
    none_type_1 = None
    bytes_0 = b"\x82"
    validation_3 = module_0.Validation(bytes_0, tuple_0)
    var_5 = validation_3.is_fail()
    var_6 = validation_3.to_try()
    validation_4 = module_0.Validation(none_type_1, validation_3)
    var_7 = validation_3.__str__()
    var_6.to_try()
