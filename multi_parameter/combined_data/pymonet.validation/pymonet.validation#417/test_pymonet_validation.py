# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)
    var_0.map(none_type_0)


def test_case_1():
    set_0 = set()
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, set_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.__eq__(set_0)
    set_0.to_either()


def test_case_2():
    str_0 = "ImmutableList[U]"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    var_0.is_fail()


def test_case_3():
    bool_0 = True
    list_0 = []
    validation_0 = module_0.Validation(bool_0, list_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_try()
    var_1.to_box()


def test_case_4():
    tuple_0 = ()
    set_0 = {tuple_0}
    list_0 = []
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.ap(list_0)


def test_case_5():
    none_type_0 = None
    none_type_0.map(none_type_0)


def test_case_6():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_7():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.__str__()


def test_case_8():
    int_0 = 1
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.is_fail()


def test_case_9():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = var_0.__eq__(var_0)
    var_2 = module_0.Validation(none_type_0, var_1)
    var_2.map(none_type_0)


def test_case_10():
    bool_0 = True
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.bind(bool_0)


def test_case_11():
    bytes_0 = b"\xedS\x99\x11\xb9\xa3{D\x7f"
    bytes_1 = b"\x902!bO\xa2\x18\xf1\x08\t\x97"
    validation_0 = module_0.Validation(bytes_1, bytes_1)
    validation_0.ap(bytes_0)


def test_case_12():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_box()
    validation_0.to_try()


def test_case_13():
    int_0 = 0
    validation_0 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_box()
    var_1.to_box()


def test_case_14():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(none_type_0)


def test_case_15():
    bool_0 = False
    none_type_0 = None
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_box()
    var_2 = var_1.__eq__(none_type_0)
    var_2.ap(bool_0)


def test_case_16():
    str_0 = "@;uy"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.__eq__(var_0)
    var_1.to_lazy()


def test_case_17():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_box()
    validation_1 = module_0.Validation(var_0, var_0)
    var_1 = validation_1.__eq__(validation_0)
    validation_0.map(none_type_0)
