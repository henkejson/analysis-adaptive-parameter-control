# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.__str__()
    validation_0.ap(dict_0)


def test_case_1():
    bytes_0 = b"\x92\x91\xfef\x0b\xba"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.__eq__(validation_0)
    var_1.ap(var_1)


def test_case_2():
    set_0 = set()
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, set_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_try()
    var_1.map(set_0)


def test_case_3():
    bytes_0 = b"\x92\x91\xfef\x0b\xba"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_maybe()
    var_2 = validation_0.to_lazy()
    var_3 = var_2.to_box()
    var_4 = validation_0.__eq__(validation_0)
    var_4.ap(var_4)


def test_case_4():
    bytes_0 = b"\x92\x91\xfef\x0b\xba"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.__eq__(validation_0)
    var_1.ap(var_1)


def test_case_5():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)


def test_case_6():
    complex_0 = -98.388702 + 70.88j
    str_0 = "W"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_try()
    var_1 = var_0.__str__()
    var_1.bind(complex_0)


def test_case_7():
    str_0 = '$0<Kt"'
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.is_fail()
    var_0.is_success()


def test_case_8():
    none_type_0 = None
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    validation_0 = module_0.Validation(bool_0, list_0)
    validation_0.map(none_type_0)


def test_case_9():
    bool_0 = False
    none_type_0 = None
    validation_0 = module_0.Validation(bool_0, none_type_0)
    str_0 = "kBp/' 6'<1w\x0c?"
    validation_1 = module_0.Validation(str_0, str_0)
    validation_1.bind(validation_0)


def test_case_10():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.ap(bool_0)


def test_case_11():
    bytes_0 = b""
    float_0 = -163.47325
    tuple_0 = (bytes_0, float_0)
    str_0 = ";?J)9@XCp7"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.to_maybe()
    var_2 = var_1.__eq__(tuple_0)
    var_2.is_fail()


def test_case_12():
    bytes_0 = b"\xd0$"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_lazy()
    var_0.is_success()


def test_case_13():
    bytes_0 = b"\x92\x91\xfef\x0b\xba"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.to_lazy()
    var_2 = var_1.to_box()
    var_3 = validation_0.__eq__(validation_0)
    var_3.ap(var_3)


def test_case_14():
    bytes_0 = b"\x92\x91\xfef\x0b\xba"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.to_lazy()
    var_2 = var_1.to_box()
    var_3 = validation_0.__eq__(validation_0)
    var_4 = validation_0.__eq__(var_2)
    var_3.to_maybe()


def test_case_15():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.__eq__(validation_0)


def test_case_16():
    set_0 = set()
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, set_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_maybe()
    var_2 = var_0.to_try()
    var_2.bind(var_1)


def test_case_17():
    bytes_0 = b"\x92\x91\xfef\x0b\xba"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_lazy()
    var_2 = var_1.to_box()
    var_3 = validation_0.__str__()
    validation_1 = module_0.Validation(validation_0, var_0)
    var_4 = validation_1.__eq__(validation_0)
    var_4.map(var_2)
