# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    int_0 = 2786
    int_1 = -1944
    bool_0 = False
    bytes_0 = b"\xac\xfdB\xc9\xe2\xd8\xb1\xca\x92<\xda\x9f67\xff\xb2QJ\xf9\x92"
    tuple_0 = (int_0, int_1, bool_0, bytes_0)
    bytes_1 = b"\xa254p\xe4\xe2\xbb\x8e\x86\x84"
    validation_0 = module_0.Validation(bytes_1, bytes_1)
    var_0 = validation_0.__eq__(tuple_0)
    var_1 = var_0.__str__()


def test_case_1():
    str_0 = "W"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_maybe()
    var_2 = var_1.to_box()


def test_case_2():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_3():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.to_try()


def test_case_4():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.is_fail()


def test_case_5():
    int_0 = 2786
    int_1 = -1944
    bool_0 = False
    bytes_0 = b"\xac\xfdB\xc9\xe2\xd8\xb1\xca\x92<\xda\x9f67\xff\xb2QJ\xf9\x92"
    tuple_0 = (int_0, int_1, bool_0, bytes_0)
    bytes_1 = b"\xa254p\xe4\xe2\xbb\x8e\x86I\x01\x84"
    validation_0 = module_0.Validation(bytes_1, bytes_1)
    var_0 = validation_0.__eq__(tuple_0)
    var_1 = validation_0.to_either()
    validation_1 = module_0.Validation(var_1, bytes_1)
    var_2 = validation_0.to_maybe()
    var_3 = var_2.to_try()
    validation_0.map(validation_1)


def test_case_6():
    bytes_0 = b"\xd1\xc2NoY\x89"
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.bind(bytes_0)


def test_case_7():
    tuple_0 = ()
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.ap(tuple_0)


def test_case_8():
    str_0 = "q%`v[r:-h{"
    list_0 = [str_0, str_0, str_0, str_0]
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_box()
    var_0.is_fail()


def test_case_9():
    bytes_0 = b"\xa254p\xe4\xe2\xbb\x8e\x86I\x01\x84"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    validation_1 = module_0.Validation(var_0, var_0)
    var_1 = validation_0.to_maybe()
    var_2 = validation_0.to_lazy()
    var_2.is_success()


def test_case_10():
    str_0 = "++P"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_maybe()
    var_1.is_success()


def test_case_11():
    bytes_0 = b"\xa254p\xe4\xe2\xbb\x8e\x86\x84"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()


def test_case_12():
    none_type_0 = None
    str_0 = "W"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.__eq__(none_type_0)
    var_1.to_box()


def test_case_13():
    bytes_0 = b"\xa254p\xe4\xe2\xbb\x8e\x86I\x01\x84"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_either()
    var_2 = validation_0.__str__()
    var_3 = var_1.to_try()
    var_0.map(var_3)


def test_case_14():
    bytes_0 = b"\xac\xfdB\xc9\xe2\xd8\xb1\xca\x92<\xda\x9f67\xff\xb2QJ\xf9\x92"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.to_either()
    validation_1 = module_0.Validation(bytes_0, var_0)
    var_2 = validation_0.__eq__(validation_1)
    var_1.is_fail()


def test_case_15():
    int_0 = 2786
    bytes_0 = b"\xac\xfdB\xc9\xe2\xd8\xb1\xca\x92<\xda\x9f67\xff\xb2QJ\xf9\x92"
    tuple_0 = ()
    validation_0 = module_0.Validation(int_0, tuple_0)
    var_0 = validation_0.__eq__(bytes_0)
    var_1 = validation_0.to_either()
    validation_1 = module_0.Validation(validation_0, validation_0)
    var_2 = var_1.to_maybe()
    validation_1.to_try()


def test_case_16():
    int_0 = -1944
    bytes_0 = b"\xac\xfdB\xc9\xe2\xd8\xb1\xca\x92<\xda\x9f67\xff\xb2QJ\xf9\x92"
    bytes_1 = b"\xa254p\xe4\xe2\xbb\x8e\x86I\x01\x84"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.__eq__(int_0)
    validation_1 = module_0.Validation(bytes_1, bytes_1)
    var_2 = validation_1.__eq__(validation_1)
    var_3 = validation_1.to_either()
    set_0 = set()
    validation_2 = module_0.Validation(bytes_1, set_0)
    var_4 = validation_2.to_maybe()
    var_5 = validation_0.to_lazy()
    var_6 = var_5.__str__()
    var_6.to_try()


def test_case_17():
    bytes_0 = b"\xac\xfdB\xc9\xe2\xd8\xb1\xca\x92<\xda\x9f67\xff\xb2QJ\xf9\x92"
    bytes_1 = b"\xa254p\xe4\xe2\xbb\x8e\x86I\x01\x84"
    validation_0 = module_0.Validation(bytes_0, bytes_1)
    bool_0 = True
    str_0 = "k\t\x0b"
    list_0 = [str_0, bool_0]
    tuple_0 = (validation_0, bool_0, str_0, list_0)
    var_0 = validation_0.__eq__(tuple_0)
    var_1 = validation_0.to_either()
    none_type_0 = None
    list_1 = []
    validation_1 = module_0.Validation(var_1, list_1)
    var_2 = var_1.to_box()
    var_3 = var_2.to_maybe()
    var_4 = validation_1.__str__()
    var_5 = var_1.to_maybe()
    validation_2 = module_0.Validation(var_5, var_3)
    var_6 = var_1.map(none_type_0)
    var_0.to_lazy()
