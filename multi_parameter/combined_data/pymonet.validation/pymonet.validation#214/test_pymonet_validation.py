# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bool_0 = False
    bool_1 = False
    validation_0 = module_0.Validation(bool_1, bool_1)
    var_0 = validation_0.__eq__(bool_0)


def test_case_1():
    int_0 = -1094
    bool_0 = False
    dict_0 = {int_0: bool_0}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.__str__()
    var_0.to_try()


def test_case_2():
    str_0 = "BKSrO]iQXP"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.__str__()


def test_case_3():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_maybe()
    var_0.map(dict_0)


def test_case_4():
    bool_0 = True
    tuple_0 = (bool_0,)
    validation_0 = module_0.Validation(bool_0, tuple_0)
    var_0 = validation_0.__eq__(bool_0)
    var_1 = validation_0.to_either()
    var_2 = var_1.to_try()
    var_3 = var_1.bind(validation_0)
    var_4 = var_1.to_try()
    var_5 = validation_0.to_maybe()
    var_4.to_either()


def test_case_5():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)


def test_case_6():
    str_0 = "BKSrO]iQXP"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = var_0.__str__()
    var_2 = validation_0.to_lazy()
    var_3 = validation_0.is_fail()
    var_3.is_fail()


def test_case_7():
    bool_0 = False
    bool_1 = False
    validation_0 = module_0.Validation(bool_0, bool_1)
    var_0 = validation_0.__eq__(validation_0)
    validation_0.map(bool_1)


def test_case_8():
    float_0 = 324.36
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.bind(float_0)


def test_case_9():
    set_0 = set()
    list_0 = [set_0, set_0]
    complex_0 = -1606.5 - 1060j
    list_1 = [complex_0]
    validation_0 = module_0.Validation(list_1, list_1)
    validation_0.ap(list_0)


def test_case_10():
    str_0 = "BKSrO]iQXP"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.to_either()
    var_2 = validation_0.to_box()
    var_1.is_fail()


def test_case_11():
    str_0 = "BKSrO]iQXP"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_box()
    var_1.is_fail()


def test_case_12():
    int_0 = -1921
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.to_try()


def test_case_13():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_lazy()


def test_case_14():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.__str__()
    var_0.to_try()


def test_case_15():
    bool_0 = True
    tuple_0 = (bool_0,)
    validation_0 = module_0.Validation(bool_0, tuple_0)
    var_0 = validation_0.__eq__(bool_0)
    var_1 = validation_0.to_either()
    var_2 = var_1.to_try()
    var_3 = var_1.bind(validation_0)
    var_4 = var_1.to_try()
    var_5 = validation_0.to_maybe()
    validation_1 = module_0.Validation(var_2, var_1)
    var_6 = validation_0.__str__()
    var_7 = var_6.__str__()
    validation_2 = module_0.Validation(var_2, var_7)
    var_8 = validation_1.__eq__(validation_0)
    var_7.bind(validation_2)


def test_case_16():
    tuple_0 = ()
    none_type_0 = None
    bytes_0 = b":[\xc9&Q\xc2\xc7\xeaz\xefm\x9e"
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.to_either()
    var_2 = var_1.to_try()
    var_3 = var_2.__eq__(bytes_0)
    var_3.ap(none_type_0)
