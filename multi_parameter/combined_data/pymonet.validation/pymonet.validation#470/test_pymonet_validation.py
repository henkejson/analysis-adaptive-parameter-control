# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(bool_0)


def test_case_1():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    tuple_0 = (bool_0, bool_0, list_0)
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, bool_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.bind(tuple_0)
    validation_1 = module_0.Validation(bool_0, tuple_0)
    var_2 = validation_1.__str__()
    validation_1.bind(var_2)


def test_case_2():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    bytes_0 = b"w\t\xbf\xd6\xfe\x8e"
    list_0 = [bytes_0]
    bytes_1 = b".\xd2\xa1\x9bG"
    var_0 = validation_0.to_either()
    validation_1 = module_0.Validation(list_0, bytes_1)


def test_case_3():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    list_0 = [bool_0, validation_0, validation_0, bool_0]
    validation_1 = module_0.Validation(list_0, list_0)
    var_0 = validation_1.to_either()
    var_0.to_either()


def test_case_4():
    bool_0 = True
    int_0 = 1382
    set_0 = {bool_0, bool_0, bool_0, int_0}
    dict_0 = {bool_0: bool_0, bool_0: bool_0, int_0: set_0}
    float_0 = 1039.0
    bytes_0 = b"\xb9\xe6\x94g\x80\xab%\xf9\xdc\x90]\xe4\xef\xe8\xec\xb8"
    tuple_0 = (bool_0, dict_0, float_0, bytes_0)
    list_0 = [bool_0, bool_0]
    tuple_1 = (tuple_0, list_0)
    tuple_2 = ()
    validation_0 = module_0.Validation(tuple_2, tuple_2)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.__eq__(tuple_1)
    var_1.to_lazy()


def test_case_5():
    bytes_0 = b"9\xc6\xcd"
    bool_0 = True
    tuple_0 = (bytes_0, bool_0)
    none_type_0 = None
    validation_0 = module_0.Validation(tuple_0, none_type_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.to_either()
    var_2 = var_1.to_box()
    var_3 = var_2.to_maybe()
    str_0 = "mdIaFy"
    validation_1 = module_0.Validation(str_0, str_0)
    var_4 = validation_1.to_maybe()


def test_case_6():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_7():
    bytes_0 = b"E\xe5\xd28\xc0X6\x0e"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.is_success()


def test_case_8():
    int_0 = 1
    dict_0 = {int_0: int_0, int_0: int_0}
    validation_0 = module_0.Validation(dict_0, int_0)
    validation_0.is_fail()


def test_case_9():
    str_0 = "?qm/8\t%kM\t\x0cwyB)]_`t"
    bytes_0 = b"\x1dD5?\x16+\x92\xde!)*\xdf"
    list_0 = [bytes_0, bytes_0]
    validation_0 = module_0.Validation(bytes_0, list_0)
    validation_0.map(str_0)


def test_case_10():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.bind(validation_0)


def test_case_11():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_0.ap(none_type_0)


def test_case_12():
    int_0 = 1794
    str_0 = ""
    none_type_0 = None
    validation_0 = module_0.Validation(str_0, none_type_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.__str__()
    var_1.map(int_0)


def test_case_13():
    bytes_0 = b"\xa6\x9d\xa8\xf1\xa8\xb4\x84\x80b\xfc1\xc8@0\x91!\xf5t"
    list_0 = [bytes_0, bytes_0, bytes_0]
    tuple_0 = (list_0,)
    bytes_1 = b'"\xac)\xbe\x12$'
    validation_0 = module_0.Validation(tuple_0, bytes_1)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.is_fail()
    var_2 = var_0.to_maybe()


def test_case_14():
    str_0 = ""
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_try()
    var_2 = var_1.__str__()
    var_2.map(str_0)


def test_case_15():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.__eq__(validation_0)
    bool_0 = True
    validation_1 = module_0.Validation(none_type_0, bool_0)
    var_2 = var_0.__str__()
    var_3 = validation_0.__eq__(validation_1)
    var_2.ap(bool_0)
