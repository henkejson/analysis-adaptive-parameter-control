# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0
import builtins as module_1


def test_case_0():
    str_0 = "d\x0cG]zS"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(str_0)
    validation_0.is_success()


def test_case_1():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_maybe()
    validation_1 = module_0.Validation(var_1, var_1)
    var_1.is_success()


def test_case_2():
    bytes_0 = b"\xe1&=\x84D\n\x8c\xd9n\xdd=\x94b,\xa2"
    none_type_0 = None
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_either()
    var_2 = var_1.bind(dict_0)
    var_3 = var_2.__eq__(bytes_0)
    var_3.bind(none_type_0)


def test_case_3():
    tuple_0 = ()
    tuple_0.to_try()


def test_case_4():
    tuple_0 = ()
    var_0 = module_0.Validation(tuple_0, tuple_0)


def test_case_5():
    str_0 = "%/Ll=)HX}ON"
    validation_0 = module_0.Validation(str_0, str_0)
    validation_1 = module_0.Validation(validation_0, validation_0)
    validation_1.to_either()


def test_case_6():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.__eq__(list_0)
    var_1 = var_0.__eq__(list_0)
    var_2 = validation_0.is_fail()
    var_0.to_lazy()


def test_case_7():
    bytes_0 = b"\xa8\x10xf\xbe"
    bool_0 = False
    none_type_0 = None
    validation_0 = module_0.Validation(bool_0, none_type_0)
    validation_0.map(bytes_0)


def test_case_8():
    int_0 = -1521
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    list_0 = [dict_0, dict_0]
    bytes_0 = b"\x98\xd4\xea\xff`\x8b\x19\xd8\xcd\xa4\xd6\xaf\x8e\xe6\x02\xbdx"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    validation_0 = module_0.Validation(set_0, bytes_0)
    validation_0.bind(list_0)


def test_case_9():
    object_0 = module_1.object()
    str_0 = "\n        Transform Maybe to Box.\n\n        :returns: Box monad with previous value when Maybe is not empty, in other case Box with None\n        :rtype: Box[A | None]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    validation_0.ap(object_0)


def test_case_10():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_box()
    validation_0.__str__()


def test_case_11():
    int_0 = -843
    list_0 = [int_0, int_0, int_0, int_0]
    none_type_0 = None
    validation_0 = module_0.Validation(list_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_either()
    var_1.is_fail()


def test_case_12():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_try()
    var_0.is_success()


def test_case_13():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.__eq__(validation_0)
    var_0.to_try()


def test_case_14():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_maybe()
    validation_1 = module_0.Validation(var_1, var_1)
    validation_1.to_try()


def test_case_15():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_try()
    var_1 = validation_0.to_box()
    var_2 = validation_0.to_either()
    var_3 = var_2.to_box()
    var_2.map(validation_0)


def test_case_16():
    bool_0 = True
    none_type_0 = None
    str_0 = '1j,?;<I"q!['
    validation_0 = module_0.Validation(none_type_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.ap(bool_0)
    var_1.is_fail()


def test_case_17():
    bytes_0 = b"\x03\x18\\\xe6\xba\x16\x07\x90/D\x00\xd7\xf2F\xf4"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.__eq__(bytes_0)
    var_2 = validation_0.__str__()
    var_1.to_lazy()


def test_case_18():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.is_fail()
    var_1 = validation_0.to_maybe()
    var_2 = var_1.to_lazy()
    var_3 = var_2.to_box()
    validation_1 = module_0.Validation(var_2, var_0)
    var_4 = validation_1.__eq__(validation_0)
    var_5 = var_3.to_lazy()
    var_1.map(var_4)
