# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(none_type_0)


def test_case_1():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.__str__()
    var_0.to_either()


def test_case_2():
    str_0 = "or)T.^rne0?)o2"
    bytes_0 = b"\x93\xd8\x1d\x8a\xf49g.\x94\xa3?\x91&\x9cw;{cd"
    set_0 = {str_0, bytes_0, bytes_0, str_0}
    tuple_0 = (str_0, bytes_0, set_0)
    validation_0 = module_0.Validation(set_0, str_0)
    validation_1 = module_0.Validation(tuple_0, set_0)
    var_0 = validation_1.to_either()
    var_1 = validation_1.to_lazy()
    var_2 = validation_1.__str__()
    var_3 = var_1.to_box()
    var_3.is_success()


def test_case_3():
    str_0 = "or)T.^rne0?)o2"
    bytes_0 = b"\x93\xd8\x1d\x8a\xf49g.\x94\xa3?\x91&\x9cw;{cd"
    set_0 = {str_0, bytes_0, bytes_0, str_0}
    validation_0 = module_0.Validation(set_0, str_0)
    var_0 = validation_0.to_either()


def test_case_4():
    str_0 = "Mg7|jJaYy8B\t"
    bool_0 = True
    var_0 = module_0.Validation(str_0, bool_0)
    str_1 = "f\\__{RyRb"
    validation_0 = module_0.Validation(str_1, str_1)
    var_1 = validation_0.to_maybe()
    bytes_0 = b"qhh"
    validation_0.bind(bytes_0)


def test_case_5():
    int_0 = -2211
    validation_0 = module_0.Validation(int_0, int_0)


def test_case_6():
    int_0 = 1
    none_type_0 = None
    validation_0 = module_0.Validation(int_0, none_type_0)
    validation_0.to_try()


def test_case_7():
    complex_0 = -5198 + 3594.2382j
    validation_0 = module_0.Validation(complex_0, complex_0)
    validation_0.is_fail()


def test_case_8():
    bool_0 = False
    bool_1 = False
    validation_0 = module_0.Validation(bool_1, bool_1)
    validation_0.map(bool_0)


def test_case_9():
    int_0 = -2692
    none_type_0 = None
    validation_0 = module_0.Validation(int_0, none_type_0)
    validation_0.ap(int_0)


def test_case_10():
    bytes_0 = b"*\xbe!\x19\xe2>\xdf"
    none_type_0 = None
    validation_0 = module_0.Validation(bytes_0, none_type_0)
    var_0 = validation_0.to_box()
    none_type_1 = None
    bool_0 = False
    validation_1 = module_0.Validation(none_type_1, none_type_1)
    validation_2 = module_0.Validation(bool_0, bool_0)
    var_1 = validation_2.to_lazy()
    validation_2.map(none_type_1)


def test_case_11():
    str_0 = "or)T.^rne0?)o2"
    bytes_0 = b"\x93\xd8\x1d\x8a\xf49g.\x94\xa3?\x91&\x9cw;{cd"
    set_0 = {str_0, bytes_0, bytes_0, str_0}
    tuple_0 = (str_0, bytes_0, set_0)
    validation_0 = module_0.Validation(set_0, str_0)
    validation_1 = module_0.Validation(tuple_0, set_0)
    var_0 = validation_1.to_either()
    var_1 = validation_1.to_lazy()
    var_2 = validation_1.__eq__(var_1)
    var_3 = var_1.to_box()
    var_3.is_success()


def test_case_12():
    str_0 = "orKT.^rn0?)2"
    bytes_0 = b"\x93\xd8\x1d\x8a\xf49g.\x94\xa3?\x91&\x9cw;{cd"
    set_0 = {str_0, bytes_0, bytes_0, str_0}
    tuple_0 = (str_0, bytes_0, set_0)
    validation_0 = module_0.Validation(set_0, str_0)
    validation_1 = module_0.Validation(tuple_0, set_0)
    var_0 = validation_1.to_either()
    var_1 = validation_1.__eq__(validation_0)
    str_0.to_box()


def test_case_13():
    int_0 = 3401
    bytes_0 = b"\xd7\xd6\xd9\xdb\xcd"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, int_0)
    var_0 = validation_0.__eq__(validation_0)
    var_0.bind(bytes_0)


def test_case_14():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_either()
    var_2 = var_1.to_box()
    var_3 = var_2.__str__()
    var_3.to_maybe()


def test_case_15():
    none_type_0 = None
    list_0 = []
    validation_0 = module_0.Validation(none_type_0, list_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.__eq__(none_type_0)
    var_2 = var_0.__eq__(list_0)
    var_2.to_try()
