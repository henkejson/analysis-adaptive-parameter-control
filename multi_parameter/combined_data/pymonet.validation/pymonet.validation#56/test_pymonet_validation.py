# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.__eq__(bool_0)


def test_case_1():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    none_type_0 = None
    bool_1 = False
    tuple_0 = ()
    validation_1 = module_0.Validation(bool_1, tuple_0)
    var_0 = validation_1.to_either()
    var_1 = validation_1.__str__()
    var_2 = validation_1.to_maybe()
    validation_2 = module_0.Validation(none_type_0, var_2)
    var_0.map(validation_2)


def test_case_2():
    str_0 = "6=@|\nSh]l}Vldl"
    validation_0 = module_0.Validation(str_0, str_0)
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, validation_0)
    var_0 = validation_0.__str__()
    var_0.to_try()


def test_case_3():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_either()
    var_0.is_fail()


def test_case_4():
    bool_0 = True
    none_type_0 = None
    dict_0 = {none_type_0: bool_0}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.is_fail()
    var_1.map(var_0)


def test_case_5():
    complex_0 = 1259.8929 + 2592.62002j
    validation_0 = module_0.Validation(complex_0, complex_0)


def test_case_6():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.to_maybe()


def test_case_7():
    str_0 = "\n        Transform Either to Box.\n\n        :returns: Box monad with previous value\n        :rtype: Box[A]\n        "
    set_0 = {str_0}
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.map(set_0)


def test_case_8():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    bool_1 = True
    validation_1 = module_0.Validation(bool_1, bool_1)
    validation_1.bind(validation_1)


def test_case_9():
    str_0 = "3)\x0c,GTR"
    validation_0 = module_0.Validation(str_0, str_0)
    float_0 = 2434.0
    set_0 = {float_0, float_0, float_0}
    validation_0.ap(set_0)


def test_case_10():
    str_0 = "<!UI[u8(1U@"
    tuple_0 = (str_0,)
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_box()
    var_0.is_fail()


def test_case_11():
    str_0 = "6=@|\nSh]l}Vldl"
    validation_0 = module_0.Validation(str_0, str_0)
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, validation_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_maybe()
    var_2 = validation_1.to_lazy()


def test_case_12():
    bytes_0 = b"\xf4\xe6ll\x02?\xf8\x0f"
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_try()
    var_1.map(bytes_0)


def test_case_13():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_0.to_try()


def test_case_14():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(validation_0)


def test_case_15():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    none_type_0 = None
    none_type_1 = None
    validation_1 = module_0.Validation(bool_0, none_type_1)
    var_0 = validation_1.to_box()
    var_1 = validation_0.__eq__(validation_1)
    validation_1.bind(none_type_0)
