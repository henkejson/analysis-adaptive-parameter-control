# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    complex_0 = 1409.1 - 1349j
    validation_0 = module_0.Validation(complex_0, complex_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_0.__str__()


def test_case_1():
    float_0 = 3056.522
    set_0 = {float_0}
    list_0 = [set_0]
    bool_0 = False
    list_1 = [bool_0, bool_0, bool_0, bool_0]
    validation_0 = module_0.Validation(list_1, bool_0)
    var_0 = validation_0.__eq__(list_0)
    var_1 = var_0.__str__()
    var_1.to_maybe()


def test_case_2():
    bytes_0 = b"\xecBc\xda\xc3"
    str_0 = "9NJ^=~*"
    validation_0 = module_0.Validation(str_0, bytes_0)
    var_0 = validation_0.__str__()


def test_case_3():
    bytes_0 = b"\xecBc\xda\xc3"
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bytes_0)
    validation_1 = module_0.Validation(bool_0, validation_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.__eq__(bytes_0)
    var_1.is_success()


def test_case_4():
    bytes_0 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_either()
    var_0.is_fail()


def test_case_5():
    bytes_0 = b"\xecBc\xda\xc3"
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.__eq__(bytes_0)
    str_0 = "9NJ^=~*"
    validation_1 = module_0.Validation(str_0, str_0)
    var_2 = validation_1.to_maybe()
    validation_0.bind(var_1)


def test_case_6():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)


def test_case_7():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.to_try()


def test_case_8():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.is_fail()


def test_case_9():
    none_type_0 = None
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.map(none_type_0)


def test_case_10():
    str_0 = "ImmutableList{}"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.bind(str_0)


def test_case_11():
    bool_0 = True
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, bool_0)
    validation_0.ap(bool_0)


def test_case_12():
    none_type_0 = None
    bool_0 = False
    validation_0 = module_0.Validation(none_type_0, bool_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.to_try()
    none_type_1 = None
    validation_1 = module_0.Validation(none_type_1, none_type_1)
    validation_1.is_fail()


def test_case_13():
    bool_0 = False
    bool_1 = False
    validation_0 = module_0.Validation(bool_1, bool_1)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.bind(bool_0)
    var_2 = var_1.__str__()


def test_case_14():
    str_0 = "[` !03HFn"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(str_0)
    var_1 = validation_0.to_lazy()
    var_2 = var_1.to_box()
    var_3 = var_2.__str__()
    var_2.map(str_0)


def test_case_15():
    bytes_0 = b"\xecBc\xda\xc3"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_1 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_1.to_either()
    var_1 = validation_0.__eq__(validation_1)
    var_2 = validation_1.is_fail()
    var_2.is_success()


def test_case_16():
    bytes_0 = b"\xecBc\xda\xc3"
    set_0 = set()
    validation_0 = module_0.Validation(bytes_0, set_0)
    var_0 = validation_0.to_either()
    var_0.bind(bytes_0)


def test_case_17():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.__str__()
    var_0.is_fail()
