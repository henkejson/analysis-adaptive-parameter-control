# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_0.__str__()


def test_case_1():
    str_0 = "\n        It takes as a parameter function returning another Validation.\n        Function is called with Validation value and returns new Validation with previous value\n        and concated new and old errors.\n\n        :param monad: monad contains function\n        :type monad: Function(A) -> Validation[Any, List[E]]\n        :returns: new validation with stored errors\n        :rtype: Validation[A, List[E]]\n        "
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, str_0)
    var_0 = validation_0.__eq__(none_type_0)
    var_1 = validation_0.__str__()
    var_2 = validation_0.to_lazy()
    var_3 = validation_0.to_either()
    var_2.to_lazy()


def test_case_2():
    str_0 = "\n        It takes as a parameter function returning another Validation.\n        Function is called with Validation value and returns new Validation with previous value\n        and concated new and old errors.\n\n        :param monad: monad contains function\n        :type monad: Function(A) -> Validation[Any, List[E]]\n        :returns: new validation with stored errors\n        :rtype: Validation[A, List[E]]\n        "
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_maybe()


def test_case_3():
    bytes_0 = b"\x90$C\x99d\xc2&\xcb\x1dK\x102O\x81="
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    validation_0.ap(var_0)


def test_case_4():
    bytes_0 = b"\r\xc2\x07\x1f\x8f\xcbk\xaeB"
    bytes_0.to_box()


def test_case_5():
    bytes_0 = b"C\x12"
    validation_0 = module_0.Validation(bytes_0, bytes_0)


def test_case_6():
    bool_0 = True
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.is_fail()
    var_0.map(bool_0)


def test_case_7():
    str_0 = "\n        It takes as a parameter function returning another Validation.\n        Function is called with Validation value and returns new Validation with previous value\n        and concated new and old errors.\n\n        :param monad: monad contains function\n        :type monad: Function(A) -> Validation[Any, List[E]]\n        :returns: new validation with stored errors\n        :rtype: Validation[A, List[E]]\n        "
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, str_0)
    var_0 = validation_0.__eq__(none_type_0)
    var_1 = validation_0.__str__()
    var_2 = validation_0.to_lazy()
    var_3 = var_2.__str__()
    var_4 = var_0.__eq__(var_1)
    validation_0.map(none_type_0)


def test_case_8():
    int_0 = 1
    set_0 = {int_0, int_0, int_0}
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_either()
    str_0 = "reI(jlf?J`O*$+."
    var_1 = var_0.map(str_0)
    validation_1 = module_0.Validation(str_0, str_0)
    validation_2 = module_0.Validation(var_0, int_0)
    validation_0.bind(validation_0)


def test_case_9():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.ap(none_type_0)


def test_case_10():
    str_0 = "\n        It takes as a parameter function returning another Validation.\n        Function is called with Validation value and returns new Validation with previous value\n        and concated new and old errors.\n\n        :param monad: monad contains function\n        :type monad: Function(A) -> Validation[Any, List[E]]\n        :returns: new validation with stored errors\n        :rtype: Validation[A, List[E]]\n        "
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.__eq__(none_type_0)
    var_2 = validation_0.__str__()
    var_3 = validation_0.to_box()
    var_4 = var_1.__str__()
    var_2.to_try()


def test_case_11():
    str_0 = "\n        It takes as a parameter function returning another Validation.\n        Function is called with Validation value and returns new Validation with previous value\n        and concated new and old errors.\n\n        :param monad: monad contains function\n        :type monad: Function(A) -> Validation[Any, List[E]]\n        :returns: new validation with stored errors\n        :rtype: Validation[A, List[E]]\n        "
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, str_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_lazy()
    var_2 = validation_0.to_either()
    var_1.to_lazy()


def test_case_12():
    str_0 = "\n        It takes as a parameter function returning another Validation.\n        Function is called with Validation value and returns new Validation with previous value\n        and concated new and old errors.\n\n        :param monad: monad contains function\n        :type monad: Function(A) -> Validation[Any, List[E]]\n        :returns: new validation with stored errors\n        :rtype: Validation[A, List[E]]\n        "
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.__eq__(none_type_0)
    var_2 = validation_0.to_lazy()
    var_3 = validation_0.to_either()
    var_4 = validation_0.to_try()
    var_5 = var_2.to_maybe()


def test_case_13():
    float_0 = -1404.1968
    validation_0 = module_0.Validation(float_0, float_0)
    validation_0.to_try()


def test_case_14():
    str_0 = ""
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.__eq__(none_type_0)
    var_2 = validation_0.__str__()
    var_3 = validation_0.to_lazy()
    var_4 = validation_0.to_either()
    var_5 = validation_0.to_try()
    var_6 = var_4.to_maybe()


def test_case_15():
    str_0 = "\n        It takes as a parameter function returning another Validation.\n        Function is called with Validation value and returns new Validation with previous value\n        and concated new and old errors.\n\n        :param monad: monad contains function\n        :type monad: Function(A) -> Validation[Any, List[E]]\n        :returns: new validation with stored errors\n        :rtype: Validation[A, List[E]]\n        "
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, str_0)
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_1.__eq__(validation_0)
    var_1 = var_0.__str__()
    var_0.to_lazy()
