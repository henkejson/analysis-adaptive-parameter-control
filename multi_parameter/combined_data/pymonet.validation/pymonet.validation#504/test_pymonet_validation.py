# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    int_0 = -2276
    validation_0 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_box()


def test_case_1():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(none_type_0)
    var_0.to_try()


def test_case_2():
    str_0 = "6B'Ld~6{BIFz"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.__str__()
    var_1.to_lazy()


def test_case_3():
    none_type_0 = None
    none_type_0.is_success()


def test_case_4():
    int_0 = 0
    validation_0 = module_0.Validation(int_0, int_0)


def test_case_5():
    bool_0 = False
    bytes_0 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(bool_0)
    validation_1 = module_0.Validation(var_0, var_0)
    validation_1.to_try()


def test_case_6():
    bool_0 = False
    int_0 = -362
    list_0 = []
    dict_0 = {int_0: bool_0, bool_0: int_0, bool_0: list_0}
    validation_0 = module_0.Validation(int_0, dict_0)
    var_0 = validation_0.is_fail()
    var_1 = var_0.__eq__(int_0)
    var_1.ap(bool_0)


def test_case_7():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.map(none_type_0)


def test_case_8():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_lazy()
    validation_0.bind(var_0)


def test_case_9():
    bytes_0 = b""
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    validation_0.ap(dict_0)


def test_case_10():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(none_type_0)
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    var_1 = validation_0.to_lazy()
    var_2 = var_1.to_box()


def test_case_11():
    bytes_0 = b""
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    tuple_0 = ()
    validation_0 = module_0.Validation(dict_0, tuple_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.to_try()
    var_1.to_box()


def test_case_12():
    bytes_0 = b"a\x0c&\xe2\xeaN\x925\xc3\xb5\xfa\x7f\x9d\x8e\xb8\xece"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.to_maybe()
    var_2 = validation_0.is_success()
    var_3 = validation_0.__eq__(var_0)
    validation_0.map(bytes_0)


def test_case_13():
    str_0 = "\n        Take function, store it and call with Task value during calling fork function.\n        Return result of called.\n\n        :param fn: mapper function\n        :type fn: Function(value) -> Task[reject, mapped_value]\n        :returns:  new Task with mapper resolve attribute\n        :rtype: Task[reject, mapped_value]\n        "
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_either()
    var_0.bind(str_0)


def test_case_14():
    int_0 = -4587
    dict_0 = {}
    dict_1 = {}
    validation_0 = module_0.Validation(dict_1, dict_1)
    var_0 = validation_0.__str__()
    var_1 = var_0.__eq__(dict_0)
    var_1.bind(int_0)


def test_case_15():
    str_0 = "6B'Ld~6{BIFz"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_box()
    var_2 = validation_0.__eq__(validation_0)
    var_3 = validation_0.to_maybe()
    var_4 = var_3.to_lazy()
    var_5 = var_4.to_box()
    var_6 = var_3.to_box()
    var_7 = var_4.to_maybe()
    var_8 = var_7.to_lazy()
    int_0 = 3535
    var_9 = var_3.map(int_0)
    var_7.map(int_0)


def test_case_16():
    str_0 = "6B'Ld~6{BIFz"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_lazy()
    validation_1 = module_0.Validation(var_0, var_0)
    var_1 = var_0.to_box()
    var_2 = validation_0.__eq__(validation_0)
    var_3 = validation_1.__eq__(validation_0)
    var_4 = validation_0.__str__()
    var_4.to_lazy()
