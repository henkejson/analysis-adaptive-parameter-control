# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0
import builtins as module_1


def test_case_0():
    str_0 = "\r^'`o=K>>1w@\"2H^g2J+"
    none_type_0 = None
    validation_0 = module_0.Validation(str_0, none_type_0)
    var_0 = validation_0.__eq__(none_type_0)
    var_1 = validation_0.to_lazy()
    var_2 = var_1.ap(var_1)


def test_case_1():
    str_0 = '+6\\MJ&3|*FdbfYJd" k'
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    var_0.to_try()


def test_case_2():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_try()
    var_1 = validation_0.to_either()
    var_2 = var_1.to_try()
    var_3 = var_1.to_maybe()
    var_1.bind(var_2)


def test_case_3():
    str_0 = "??hJ,c5R"
    list_0 = [str_0]
    none_type_0 = None
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_either()
    var_2 = var_1.to_maybe()
    var_0.bind(none_type_0)


def test_case_4():
    bytes_0 = b"\x02\xbf\xca\xf1\xd6MX^h\x83Kg\xb5i\xf4\xd7j"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_0.is_success()


def test_case_5():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)


def test_case_6():
    int_0 = -317
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.to_maybe()


def test_case_7():
    float_0 = -2782.958013
    bytes_0 = b"c\x16{\xe2c\x9c$7\x88\x19"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.is_fail()
    var_0.ap(float_0)


def test_case_8():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    none_type_0 = None
    validation_0 = module_0.Validation(tuple_0, bool_0)
    validation_0.map(none_type_0)


def test_case_9():
    str_0 = "(lPW0\x0b*\n{|6R"
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.bind(str_0)


def test_case_10():
    object_0 = module_1.object()
    str_0 = "All"
    validation_0 = module_0.Validation(str_0, str_0)
    validation_0.ap(object_0)


def test_case_11():
    bytes_0 = b"\x8b\xa0\xf9\x84\xdbUCa!\x07+\x13\x8c\xddV\xb3[\xcd\x05\xd3"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_box()
    var_0.is_fail()


def test_case_12():
    none_type_0 = None
    str_0 = "\r^'`o=K>>1w@\"2H^g2J+"
    none_type_1 = None
    validation_0 = module_0.Validation(str_0, none_type_1)
    var_0 = validation_0.__eq__(none_type_0)
    var_1 = validation_0.to_lazy()
    var_2 = var_1.to_maybe()
    var_3 = var_1.ap(none_type_0)


def test_case_13():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.to_try()


def test_case_14():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(validation_0)


def test_case_15():
    bytes_0 = b"\xa5\x87v\xd8/Z\x9d\x08\xb5'\xc5J\xb5qS^B\xd7"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.__str__()
    var_2 = validation_0.__eq__(validation_0)
    var_3 = validation_0.to_lazy()
    validation_1 = module_0.Validation(var_0, var_3)
    tuple_0 = ()
    var_4 = var_2.__str__()
    list_0 = [bytes_0, bytes_0, bytes_0, tuple_0]
    none_type_0 = None
    validation_2 = module_0.Validation(list_0, none_type_0)
    var_5 = validation_2.__eq__(validation_0)
    var_5.map(bytes_0)


def test_case_16():
    complex_0 = 2086.25307 + 3584.4j
    str_0 = ""
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    var_0.bind(complex_0)


def test_case_17():
    bytes_0 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.__str__()
    var_2 = validation_0.__eq__(validation_0)
    var_3 = validation_0.to_lazy()
    var_0.is_success()
