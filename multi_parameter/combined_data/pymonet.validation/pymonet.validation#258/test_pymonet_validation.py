# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(validation_0)


def test_case_1():
    int_0 = 3886
    none_type_0 = None
    validation_0 = module_0.Validation(int_0, int_0)
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_1.__eq__(int_0)
    validation_1.__str__()


def test_case_2():
    bytes_0 = b"\xc7\xe1\xe1\xed\xb7a\xb9oJ\x157\x1a:"
    list_0 = [bytes_0, bytes_0, bytes_0]
    str_0 = ""
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    var_0.map(list_0)


def test_case_3():
    bytes_0 = b"\x90\x89\x1a\xc4*\xe8\x15\xd4_\x87"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.is_fail()
    var_2 = validation_0.to_maybe()
    validation_0.map(bytes_0)


def test_case_4():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_5():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.is_success()


def test_case_6():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.is_fail()


def test_case_7():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    validation_0 = module_0.Validation(dict_0, none_type_0)
    none_type_1 = None
    validation_1 = module_0.Validation(none_type_1, none_type_1)
    validation_1.map(validation_0)


def test_case_8():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    validation_0.bind(set_0)


def test_case_9():
    int_0 = -1620
    bool_0 = False
    set_0 = {int_0, int_0, bool_0}
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_either()
    validation_0.ap(var_0)


def test_case_10():
    bytes_0 = b"\xae)\xb0(\x89iJ\xdd"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_1.to_box()
    var_0.is_fail()


def test_case_11():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()


def test_case_12():
    none_type_0 = None
    bool_0 = True
    none_type_1 = None
    validation_0 = module_0.Validation(bool_0, none_type_1)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_either()
    var_2 = var_1.__eq__(none_type_0)
    var_2.is_fail()


def test_case_13():
    int_0 = -1620
    bool_0 = False
    validation_0 = module_0.Validation(int_0, bool_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_0.to_try()


def test_case_14():
    str_0 = "\n        Transform Maybe to Box.\n\n        :returns: Box monad with previous value when Maybe is not empty, in other case Box with None\n        :rtype: Box[A | None]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_either()
    var_0.to_either()


def test_case_15():
    bytes_0 = b"TA"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_try()
    bool_0 = False
    set_0 = {bytes_0, bytes_0, bool_0}
    validation_1 = module_0.Validation(set_0, set_0)
    var_1 = validation_1.to_either()
    var_1.is_success()


def test_case_16():
    bool_0 = True
    list_0 = []
    validation_0 = module_0.Validation(bool_0, list_0)
    var_0 = validation_0.to_either()
    list_0.to_box()


def test_case_17():
    bytes_0 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.is_fail()
    var_2 = validation_0.to_maybe()
    var_1.to_try()


def test_case_18():
    bool_0 = False
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, bool_0)
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(validation_1)
    validation_1.to_try()
