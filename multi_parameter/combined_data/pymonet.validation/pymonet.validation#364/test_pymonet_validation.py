# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0
import builtins as module_1


def test_case_0():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)
    var_0.map(var_0)


def test_case_1():
    str_0 = "\n    Last is a Monoid that will always return the lastest, value when 2 Last instances are combined.\n    "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(str_0)
    int_0 = 2659
    validation_1 = module_0.Validation(int_0, int_0)
    validation_1.is_success()


def test_case_2():
    bytes_0 = b"\xd4\x90u\xb24\xef;7\x90\xf0\\\xea\x9c \xe3\xfc\xf4"
    list_0 = [bytes_0, bytes_0]
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, list_0)
    var_0 = validation_0.to_try()
    var_1 = validation_0.__str__()
    var_2 = validation_0.__eq__(var_1)
    var_3 = validation_0.is_success()
    var_3.to_maybe()


def test_case_3():
    str_0 = "\n    Last is a Monoid that will always return the lastest, value when 2 Last instances are combined.\n    "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.is_success()
    var_1 = validation_0.to_either()
    var_2 = var_0.__eq__(var_0)
    var_3 = var_0.__eq__(validation_0)
    var_3.bind(validation_0)


def test_case_4():
    str_0 = "\n        Transform Box into Validation.\n\n        :returns: failed Validation monad with previous value as error\n        :rtype: Validation[None, [A]]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    validation_1 = module_0.Validation(var_0, str_0)
    validation_0.ap(var_0)


def test_case_5():
    float_0 = 1562.1302326666064
    object_0 = module_0.Validation(float_0, float_0)


def test_case_6():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_lazy()


def test_case_7():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.is_fail()


def test_case_8():
    object_0 = module_1.object()
    str_0 = "uuwN)\n]$"
    validation_0 = module_0.Validation(str_0, str_0)
    validation_0.map(object_0)


def test_case_9():
    int_0 = 1
    list_0 = [int_0]
    validation_0 = module_0.Validation(list_0, int_0)
    validation_0.bind(int_0)


def test_case_10():
    str_0 = "\n        Returns new ImmutableList with only this elements that passed\n        info argument returns True\n\n        :param fn: function to call with ImmutableList value\n        :type fn: Function(A) -> bool\n        :returns: ImmutableList[A]\n        "
    bytes_0 = b"\xa3/\xd3sG\t\x92\xef\x9f$\x0e\x97"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_0.ap(str_0)


def test_case_11():
    str_0 = "\n        Transform Box into Validation.\n\n        :returns: failed Validation monad with previous value as error\n        :rtype: Validation[None, [A]]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    validation_1 = module_0.Validation(var_0, str_0)
    none_type_0 = None
    validation_2 = module_0.Validation(validation_0, none_type_0)
    var_1 = validation_1.to_box()
    var_2 = validation_0.__str__()
    var_3 = validation_0.__eq__(validation_1)
    none_type_0.is_success()


def test_case_12():
    str_0 = ""
    validation_0 = module_0.Validation(str_0, str_0)
    validation_1 = module_0.Validation(validation_0, str_0)
    var_0 = validation_1.to_lazy()
    var_1 = var_0.__str__()
    bool_0 = False
    none_type_0 = None
    validation_2 = module_0.Validation(bool_0, none_type_0)
    validation_2.is_success()


def test_case_13():
    bytes_0 = b"\xd8\xb6\x96\xdb\xaa\x14C io\xa9\xcf\xac\xdbK\xc9\x05"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_lazy()
    validation_1 = module_0.Validation(bytes_0, bytes_0)
    var_1 = validation_1.is_fail()
    var_2 = validation_1.to_lazy()
    var_3 = validation_1.to_maybe()
    var_4 = var_2.to_box()
    var_5 = var_4.to_either()
    validation_2 = module_0.Validation(validation_0, validation_0)
    var_0.is_fail()


def test_case_14():
    object_0 = module_1.object()
    int_0 = 2710
    validation_0 = module_0.Validation(int_0, int_0)
    float_0 = -3077.811
    validation_1 = module_0.Validation(float_0, float_0)
    var_0 = validation_1.__eq__(validation_0)
    list_0 = [var_0]
    validation_2 = module_0.Validation(list_0, validation_0)
    var_1 = validation_2.__eq__(object_0)
    var_1.to_lazy()


def test_case_15():
    dict_0 = {}
    tuple_0 = ()
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_try()
    var_1.bind(tuple_0)


def test_case_16():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.__str__()
    var_0.to_lazy()
