# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_lazy()


def test_case_1():
    str_0 = "BJ`K"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_try()
    none_type_0 = None
    var_1 = validation_0.__eq__(none_type_0)
    var_2 = validation_0.to_either()
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    var_3 = validation_1.__eq__(validation_1)
    var_4 = validation_0.to_maybe()
    var_5 = validation_0.__str__()
    var_5.to_lazy()


def test_case_2():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.__str__()
    validation_0.bind(set_0)


def test_case_3():
    str_0 = ""
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    validation_1 = module_0.Validation(var_0, var_0)
    var_1 = validation_1.__eq__(validation_1)
    var_2 = validation_0.to_maybe()
    var_1.is_fail()


def test_case_4():
    int_0 = -1115
    validation_0 = module_0.Validation(int_0, int_0)


def test_case_5():
    int_0 = -1113
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, int_0)
    validation_0.to_either()


def test_case_6():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0]
    tuple_1 = (tuple_0, list_0)
    none_type_0 = None
    validation_0 = module_0.Validation(tuple_1, none_type_0)
    validation_0.is_fail()


def test_case_7():
    list_0 = []
    complex_0 = 745.593627 - 803.06561j
    validation_0 = module_0.Validation(complex_0, complex_0)
    validation_0.map(list_0)


def test_case_8():
    str_0 = "@ 0`%!\n#3U*`5R<"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_try()
    var_1 = var_0.__str__()
    validation_1 = module_0.Validation(validation_0, var_0)
    str_1 = "\n    The Try control gives us the ability write safe code\n    without focusing on try-catch blocks in the presence of exceptions.\n    "
    var_2 = validation_0.__str__()
    validation_2 = module_0.Validation(str_1, str_1)
    validation_2.bind(str_1)


def test_case_9():
    complex_0 = -791.80952 - 1668.3j
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, complex_0)
    validation_0.ap(complex_0)


def test_case_10():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_box()


def test_case_11():
    str_0 = "BJ`K"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.to_maybe()
    var_2 = var_0.to_try()
    var_3 = validation_0.__str__()
    var_3.to_try()


def test_case_12():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_0.to_try()


def test_case_13():
    str_0 = "BJ`K"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_try()
    validation_1 = module_0.Validation(var_0, var_0)
    var_1 = validation_0.__eq__(validation_1)
    var_2 = validation_1.__eq__(validation_1)
    var_3 = validation_0.to_maybe()
    var_4 = validation_0.__str__()
    var_4.to_try()


def test_case_14():
    str_0 = ""
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.__eq__(validation_0)
    var_2 = validation_0.to_maybe()
    var_1.is_fail()
