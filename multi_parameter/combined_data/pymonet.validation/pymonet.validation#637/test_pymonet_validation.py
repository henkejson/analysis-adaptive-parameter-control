# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0
import builtins as module_1


def test_case_0():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(validation_0)


def test_case_1():
    none_type_0 = None
    str_0 = "Min[value={}]"
    none_type_1 = None
    validation_0 = module_0.Validation(str_0, none_type_1)
    var_0 = validation_0.__eq__(none_type_0)
    var_0.to_box()


def test_case_2():
    bytes_0 = b""
    set_0 = {bytes_0}
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.__str__()
    var_1 = var_0.__str__()
    var_0.map(bytes_0)


def test_case_3():
    int_0 = -449
    validation_0 = module_0.Validation(int_0, int_0)


def test_case_4():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_0.is_fail()


def test_case_5():
    none_type_0 = None
    float_0 = -650.4
    none_type_1 = None
    validation_0 = module_0.Validation(float_0, none_type_1)
    validation_0.map(none_type_0)


def test_case_6():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.bind(bool_0)


def test_case_7():
    str_0 = '4\tid4%rX\r@@:)")S'
    none_type_0 = None
    object_0 = module_1.object()
    validation_0 = module_0.Validation(none_type_0, object_0)
    validation_0.ap(str_0)


def test_case_8():
    complex_0 = 488.1 - 3488.14968j
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_box()
    var_0.bind(complex_0)


def test_case_9():
    float_0 = -1838.49
    tuple_0 = (float_0,)
    validation_0 = module_0.Validation(tuple_0, float_0)
    var_0 = validation_0.to_lazy()


def test_case_10():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(none_type_0)
    var_1 = validation_0.to_lazy()
    var_2 = var_1.__str__()
    var_3 = var_1.ap(var_1)
    var_4 = var_1.to_maybe()
    var_5 = var_4.__eq__(none_type_0)
    var_5.to_box()


def test_case_11():
    str_0 = "\r\x0bI4UE`c"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.to_try()
    var_1.to_either()


def test_case_12():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_try()
    var_1 = validation_0.to_lazy()
    var_2 = validation_0.to_maybe()
    var_3 = var_2.__eq__(var_0)
    var_0.to_either()


def test_case_13():
    list_0 = []
    set_0 = set()
    validation_0 = module_0.Validation(list_0, set_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_box()
    var_2 = var_1.to_lazy()
    var_3 = var_2.to_box()
    var_3.is_success()


def test_case_14():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.__str__()
    str_0 = "&S}{%A9p([3jE#$f3"
    str_1 = "4>.[W=sz%%2'_-s'"
    tuple_1 = (str_0, str_1)
    set_0 = {tuple_1, tuple_1, tuple_1, tuple_1}
    validation_1 = module_0.Validation(set_0, str_0)
    var_1 = validation_1.to_lazy()
    var_2 = var_1.to_either()
    var_3 = var_2.to_lazy()
    var_4 = var_3.to_either()
    var_4.is_fail()


def test_case_15():
    object_0 = module_1.object()
    bytes_0 = b"\xca"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_0.is_success()


def test_case_16():
    bool_0 = True
    none_type_0 = None
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_1 = module_0.Validation(bool_0, none_type_0)
    var_0 = validation_1.__eq__(validation_0)
    validation_0.__str__()
