# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    str_0 = "g7g]~O=l6K/\\LM"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.__eq__(str_0)
    validation_1 = module_0.Validation(validation_0, str_0)
    var_2 = validation_0.to_maybe()
    var_3 = validation_1.__str__()
    var_4 = validation_0.to_box()
    var_5 = var_2.to_box()
    var_6 = validation_0.to_maybe()
    validation_2 = module_0.Validation(var_6, var_6)
    var_3.ap(validation_1)


def test_case_1():
    str_0 = ""
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_either()
    var_2 = validation_0.to_box()
    var_0.map(validation_0)


def test_case_2():
    list_0 = []
    str_0 = "k3\\b&+rVy:"
    list_1 = [list_0, str_0, str_0]
    validation_0 = module_0.Validation(list_1, list_1)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_either()
    var_2 = var_1.bind(validation_0)
    var_2.is_success()


def test_case_3():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_4():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.to_either()


def test_case_5():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.is_fail()


def test_case_6():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    validation_0.map(validation_0)


def test_case_7():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.bind(none_type_0)


def test_case_8():
    none_type_0 = None
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    tuple_0 = (bool_0, bool_0, list_0)
    validation_0 = module_0.Validation(tuple_0, bool_0)
    validation_0.ap(none_type_0)


def test_case_9():
    int_0 = 1542
    validation_0 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.to_box()
    var_0.is_success()


def test_case_10():
    str_0 = "g7g]~O=l6K/\\LM"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_try()
    validation_1 = module_0.Validation(validation_0, str_0)
    var_1 = validation_0.to_maybe()
    var_2 = validation_1.to_box()
    var_3 = validation_1.__eq__(str_0)
    var_4 = validation_0.__str__()
    var_0.to_try()


def test_case_11():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    none_type_0 = None
    validation_0 = module_0.Validation(tuple_1, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_try()
    var_1.to_try()


def test_case_12():
    str_0 = "g7g]~O=l6K/\\LM"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_try()
    validation_1 = module_0.Validation(validation_0, str_0)
    var_2 = validation_1.to_maybe()
    var_3 = var_0.to_box()
    var_4 = validation_0.__eq__(validation_0)
    var_5 = validation_0.__str__()
    var_6 = validation_0.to_box()
    var_7 = validation_1.is_fail()
    var_5.is_success()


def test_case_13():
    none_type_0 = None
    list_0 = [none_type_0]
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_maybe()
    var_2 = var_0.to_box()
    var_3 = var_2.to_either()
    var_4 = var_2.to_maybe()
    validation_1 = module_0.Validation(var_2, var_1)
    var_5 = validation_0.__eq__(validation_1)
    var_1.is_success()


def test_case_14():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_lazy()
    validation_1 = module_0.Validation(var_0, validation_0)
    var_1 = var_0.to_either()
    var_2 = validation_0.__str__()
    var_2.is_fail()


def test_case_15():
    str_0 = ""
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_either()
    var_2 = validation_0.to_maybe()
    var_2.ap(validation_0)
