# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bool_0 = True
    tuple_0 = ()
    str_0 = "\n        Returns first element of ImmutableList that passed\n        info argument returns True\n\n        :param fn: function to call with ImmutableList value\n        :type fn: Function(A) -> bool\n        :returns: A\n        "
    str_1 = "th\n4uzs\tV}W@U"
    tuple_1 = (tuple_0, str_0, str_1)
    tuple_2 = (bool_0, bool_0, tuple_1)
    validation_0 = module_0.Validation(tuple_2, tuple_0)
    var_0 = validation_0.__str__()
    var_0.to_maybe()


def test_case_1():
    bytes_0 = b"\x94\x81\x96\xea\x94\x03\x87"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.is_fail()
    var_1 = validation_0.is_fail()
    var_2 = validation_0.__str__()
    var_2.to_maybe()


def test_case_2():
    str_0 = "gF-NCfj_`H\x0b=XtO8"
    list_0 = [str_0, str_0]
    validation_0 = module_0.Validation(list_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.__str__()
    var_1.to_lazy()


def test_case_3():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    list_0 = [dict_0, bool_0]
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.__eq__(var_0)


def test_case_4():
    int_0 = 1284
    validation_0 = module_0.Validation(int_0, int_0)


def test_case_5():
    int_0 = 2243
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.to_try()


def test_case_6():
    float_0 = -5976.849338
    validation_0 = module_0.Validation(float_0, float_0)
    var_0 = validation_0.to_lazy()
    validation_0.is_fail()


def test_case_7():
    bool_0 = True
    bytes_0 = b"\xb1\xee4\xde\x02"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_0.map(bool_0)


def test_case_8():
    bool_0 = False
    none_type_0 = None
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.bind(none_type_0)


def test_case_9():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    list_0 = [dict_0, dict_0, bool_0]
    validation_0 = module_0.Validation(list_0, list_0)
    validation_1 = module_0.Validation(dict_0, bool_0)
    var_0 = validation_0.to_maybe()
    validation_0.ap(dict_0)


def test_case_10():
    float_0 = 1247.087769
    validation_0 = module_0.Validation(float_0, float_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.to_try()
    bool_0 = False
    list_0 = [var_1, bool_0]
    validation_1 = module_0.Validation(list_0, list_0)
    var_2 = validation_1.to_maybe()
    var_3 = var_2.__eq__(var_2)


def test_case_11():
    str_0 = "gF-NCfj_`H\x0b=XtO8"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(str_0)
    var_0.to_box()


def test_case_12():
    bool_0 = True
    tuple_0 = ()
    str_0 = "\n        Returns first element of ImmutableList that passed\n        info argument returns True\n\n        :param fn: function to call with ImmutableList value\n        :type fn: Function(A) -> bool\n        :returns: A\n        "
    str_1 = "th\n4uzs\tV}W@U"
    tuple_1 = (tuple_0, str_0, str_1)
    tuple_2 = (bool_0, bool_0, tuple_1)
    validation_0 = module_0.Validation(tuple_2, tuple_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.__str__()
    var_1.to_maybe()


def test_case_13():
    float_0 = -110.0
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, float_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_maybe()
    var_1.map(float_0)


def test_case_14():
    set_0 = set()
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, set_0)
    var_0 = validation_0.to_maybe()
    bytes_0 = b"\xeb\xf3'm\xa8\xe2\x01\x10\xf9"
    tuple_0 = (bytes_0,)
    validation_1 = module_0.Validation(bool_0, tuple_0)
    validation_2 = module_0.Validation(set_0, bool_0)
    validation_2.ap(set_0)


def test_case_15():
    set_0 = set()
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    list_0 = [dict_0, dict_0, bool_0]
    validation_0 = module_0.Validation(set_0, bool_0)
    var_0 = validation_0.__eq__(validation_0)
    list_0.to_either()


def test_case_16():
    set_0 = set()
    bool_0 = True
    bytes_0 = b"\xeb\xf3'm\xa8\xe2\x01\x10\xf9"
    tuple_0 = (bytes_0,)
    validation_0 = module_0.Validation(bool_0, tuple_0)
    validation_1 = module_0.Validation(set_0, bool_0)
    var_0 = validation_0.__eq__(validation_1)
    var_0.to_either()
