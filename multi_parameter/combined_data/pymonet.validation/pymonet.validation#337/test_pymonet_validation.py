# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0
import builtins as module_1


def test_case_0():
    list_0 = []
    none_type_0 = None
    validation_0 = module_0.Validation(list_0, none_type_0)
    var_0 = validation_0.__eq__(none_type_0)
    set_0 = {none_type_0, none_type_0}
    validation_1 = module_0.Validation(none_type_0, set_0)


def test_case_1():
    object_0 = module_1.object()
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_either()


def test_case_2():
    str_0 = "w|_QfA\x0b<'j^|ml"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_maybe()
    var_2 = var_1.ap(var_1)
    var_1.is_success()


def test_case_3():
    str_0 = "\n        Returns new ImmutableList with elements from previous one\n        and argument value on the end of list\n\n        :param new_element: element to append on the end of list\n        :type fn: A\n        :returns: ImmutableList[A]\n        "
    var_0 = module_0.Validation(str_0, str_0)


def test_case_4():
    str_0 = "\n        Take function (A) -> b and applied this function on current box value and returns new box with mapped value.\n\n        :param mapper: mapper function\n        :type mapper: Function(A) -> B\n        :returns: new box with mapped value\n        :rtype: Box[B]\n        "
    list_0 = [str_0, str_0]
    none_type_0 = None
    set_0 = {none_type_0, none_type_0}
    validation_0 = module_0.Validation(none_type_0, set_0)
    var_0 = validation_0.is_fail()
    validation_1 = module_0.Validation(str_0, var_0)
    var_1 = validation_0.__eq__(list_0)
    var_1.to_try()


def test_case_5():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.to_try()
    validation_0.map(tuple_0)


def test_case_6():
    str_0 = ""
    bool_0 = False
    str_1 = "S8_/29e(|Mm+|"
    validation_0 = module_0.Validation(str_1, str_1)
    var_0 = validation_0.to_try()
    var_1 = var_0.__eq__(bool_0)
    validation_1 = module_0.Validation(var_1, bool_0)
    validation_1.bind(str_0)


def test_case_7():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.ap(bool_0)


def test_case_8():
    bytes_0 = b"2\xc8\xcc\x16\x88 h\x9c\xc1^\xf8f\xc4]\xf7+R"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_box()
    list_0 = []
    none_type_0 = None
    validation_1 = module_0.Validation(list_0, none_type_0)
    var_1 = validation_1.__eq__(none_type_0)
    set_0 = {none_type_0, none_type_0}
    validation_2 = module_0.Validation(none_type_0, set_0)


def test_case_9():
    object_0 = module_1.object()
    set_0 = set()
    validation_0 = module_0.Validation(object_0, set_0)
    var_0 = validation_0.is_success()
    var_1 = validation_0.to_lazy()
    var_0.is_fail()


def test_case_10():
    str_0 = "\n        Returns new ImmutableList with elements from previous one\n        and argument value on the end of list\n\n        :param new_element: element to append on the end of list\n        :type fn: A\n        :returns: ImmutableList[A]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.__eq__(validation_0)
    var_0.to_maybe()


def test_case_11():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_maybe()
    var_2 = var_0.__str__()
    var_3 = validation_0.is_success()
    var_2.ap(var_2)


def test_case_12():
    none_type_0 = None
    str_0 = "98"
    dict_0 = {str_0: str_0}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.__eq__(none_type_0)
    var_1.to_try()


def test_case_13():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.__str__()
    validation_1 = module_0.Validation(var_0, var_0)
    var_1.to_either()


def test_case_14():
    none_type_0 = None
    str_0 = "\n        Returns new ImmutableList with elements from previous one\n        and argument value on the end of list\n\n        :param new_element: element to append on the end of list\n        :type fn: A\n        :returns: ImmutableList[A]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.__str__()
    validation_1 = module_0.Validation(var_0, var_0)
    validation_2 = module_0.Validation(str_0, none_type_0)
    var_2 = validation_1.__eq__(validation_1)
    var_3 = validation_2.__eq__(none_type_0)
    var_4 = validation_0.__eq__(validation_2)
    validation_2.to_either()
