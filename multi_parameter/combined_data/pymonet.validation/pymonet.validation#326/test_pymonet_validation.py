# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    complex_0 = 10.3 - 392.4j
    set_0 = {complex_0, complex_0}
    validation_0 = module_0.Validation(set_0, complex_0)
    var_0 = validation_0.__eq__(validation_0)


def test_case_1():
    str_0 = "F?)M2-+=GBk\t0\x0b"
    float_0 = -465.9495
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(str_0)
    var_0.map(float_0)


def test_case_2():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.is_fail()
    var_1 = validation_0.__eq__(validation_0)
    var_2 = var_1.__eq__(validation_0)
    var_3 = validation_0.is_success()
    var_4 = validation_0.__str__()
    validation_0.bind(var_4)


def test_case_3():
    float_0 = 995.734
    bool_0 = False
    str_0 = "XZM`v{"
    tuple_0 = (float_0, bool_0, str_0)
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.__str__()
    var_0.is_success()


def test_case_4():
    bytes_0 = b""
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, bytes_0)
    var_0 = validation_0.to_either()
    var_0.map(none_type_0)


def test_case_5():
    str_0 = 'w%GQGD?"Aac=\rr'
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.is_success()
    var_1 = validation_0.to_try()
    var_2 = validation_0.to_maybe()
    var_0.is_success()


def test_case_6():
    int_0 = 0
    validation_0 = module_0.Validation(int_0, int_0)


def test_case_7():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.is_fail()


def test_case_8():
    str_0 = 'w%GQGD?"Aac=\rr'
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.is_success()
    var_1 = validation_0.to_try()
    var_2 = validation_0.to_maybe()
    validation_0.map(validation_0)


def test_case_9():
    complex_0 = -483.146 + 3880.1613j
    dict_0 = {complex_0: complex_0, complex_0: complex_0}
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.bind(dict_0)


def test_case_10():
    str_0 = "vT"
    bytes_0 = b"\xf5\xabd\xe4+\x7fV\xd3R\x04 Jj\xf8\x06\xd4F\xcc\x0c"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_0.ap(str_0)


def test_case_11():
    str_0 = 'w%GQGD?"Aac=\rr'
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.is_success()
    var_1 = validation_0.to_try()
    var_2 = validation_0.to_box()
    var_3 = validation_0.to_maybe()
    validation_0.map(var_2)


def test_case_12():
    int_0 = -706
    complex_0 = 768.6 + 1985j
    bytes_0 = b"\r5\xc5\xc3\x17\xc5\xe8\xd7B \x92"
    tuple_0 = (int_0, complex_0, bytes_0)
    validation_0 = module_0.Validation(tuple_0, int_0)
    var_0 = validation_0.to_lazy()
    var_0.to_lazy()


def test_case_13():
    none_type_0 = None
    bool_0 = True
    validation_0 = module_0.Validation(none_type_0, bool_0)
    validation_0.to_try()


def test_case_14():
    none_type_0 = None
    set_0 = {none_type_0}
    validation_0 = module_0.Validation(set_0, none_type_0)
    validation_1 = module_0.Validation(none_type_0, set_0)
    var_0 = validation_1.to_either()
    var_1 = var_0.__eq__(none_type_0)
    var_1.is_success()


def test_case_15():
    str_0 = "\x0b`C"
    list_0 = [str_0, str_0]
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_try()
    var_2 = var_1.__eq__(list_0)
    var_3 = var_1.__eq__(none_type_0)
    var_2.is_fail()


def test_case_16():
    complex_0 = 10.3 - 392.4j
    set_0 = {complex_0, complex_0}
    validation_0 = module_0.Validation(set_0, complex_0)
    dict_0 = {}
    validation_1 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_1.is_fail()
    var_1 = validation_1.to_maybe()
    var_0.bind(validation_1)


def test_case_17():
    complex_0 = 10.3 - 392.4j
    set_0 = {complex_0, complex_0}
    validation_0 = module_0.Validation(set_0, complex_0)
    dict_0 = {}
    validation_1 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_1.is_fail()
    var_1 = validation_1.__eq__(validation_0)
    var_2 = validation_1.is_success()
    var_3 = validation_1.__str__()
    var_4 = var_2.__eq__(var_3)
    var_4.ap(var_3)
