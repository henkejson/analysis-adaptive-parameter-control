# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    dict_0 = {}
    none_type_0 = None
    validation_0 = module_0.Validation(dict_0, none_type_0)
    var_0 = validation_0.__eq__(none_type_0)
    var_0.to_either()


def test_case_1():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_either()
    var_0.ap(var_0)


def test_case_2():
    bytes_0 = b"\xb5\xe0\xecS\xe9"
    validation_0 = module_0.Validation(bytes_0, bytes_0)


def test_case_3():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.to_try()


def test_case_4():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.is_fail()
    var_1.to_box()


def test_case_5():
    bool_0 = True
    bool_1 = False
    validation_0 = module_0.Validation(bool_1, bool_1)
    validation_0.map(bool_0)


def test_case_6():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    none_type_0 = None
    validation_0.bind(none_type_0)


def test_case_7():
    bool_0 = True
    str_0 = "j?"
    set_0 = {str_0, str_0, str_0, str_0}
    set_1 = {bool_0, bool_0, bool_0, bool_0}
    validation_0 = module_0.Validation(set_1, set_1)
    var_0 = validation_0.to_maybe()
    validation_0.ap(set_0)


def test_case_8():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_box()


def test_case_9():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_lazy()
    validation_0.is_success()


def test_case_10():
    bytes_0 = b"?\xa1v\xb3\xaf\x82\x8aE\xa5T\x8817'\x02"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_try()
    var_1.to_either()


def test_case_11():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(validation_0)
    var_0.is_fail()


def test_case_12():
    bytes_0 = b"\xf7d\x0b\xa7\xb4q\xabr\xa3\xb9"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    var_0.is_fail()


def test_case_13():
    bool_0 = True
    bool_1 = True
    list_0 = [bool_1, bool_0]
    validation_0 = module_0.Validation(bool_1, list_0)
    var_0 = validation_0.to_maybe()
    validation_1 = module_0.Validation(bool_0, bool_0)
    var_1 = validation_1.__eq__(bool_0)
    var_1.is_fail()


def test_case_14():
    complex_0 = -2792.056918872845 + 4256.4591j
    validation_0 = module_0.Validation(complex_0, complex_0)
    var_0 = module_0.Validation(validation_0, validation_0)
    var_1 = validation_0.__eq__(var_0)
    var_2 = var_0.to_lazy()
    var_1.is_success()


def test_case_15():
    bool_0 = True
    str_0 = "j?"
    set_0 = {str_0, str_0, str_0, str_0}
    bool_1 = False
    set_1 = {bool_1, bool_1, bool_1, bool_1}
    validation_0 = module_0.Validation(set_1, set_1)
    var_0 = validation_0.to_either()
    var_1 = var_0.__eq__(set_0)
    var_2 = var_1.__eq__(bool_0)
    var_2.to_box()


def test_case_16():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.to_maybe()
    var_1.is_success()


def test_case_17():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.__str__()
    var_1.ap(var_1)
