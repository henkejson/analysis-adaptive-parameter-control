# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bytes_0 = b"\xfa\xbf\xe9\xe2\xf7BO\xe5"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(bytes_0)


def test_case_1():
    str_0 = ""
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, str_0)
    var_0 = validation_0.__str__()
    var_0.ap(str_0)


def test_case_2():
    bytes_0 = b"K\xd7\xab\x14\x19\xa1\xd3"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()


def test_case_3():
    bytes_0 = b"^\xcb~\x89\x0c,\xc8\x08\x8a\xdd\x83\x84\xd3\x8f"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()


def test_case_4():
    bytes_0 = b"\xe2#\xa3/>MBx\xb9\x8a\xb0\x9a\x19\x87\xfa\xad\xf0\x7f\x96"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.__eq__(var_0)
    var_2 = var_1.__str__()
    var_3 = validation_0.is_fail()
    var_4 = var_0.bind(var_0)


def test_case_5():
    bytes_0 = b"\xe3Q9\xa6U\xea4}"
    validation_0 = module_0.Validation(bytes_0, bytes_0)


def test_case_6():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.to_maybe()


def test_case_7():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.is_fail()


def test_case_8():
    bytes_0 = b"\xe3Q9\xb44}"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_0.map(bytes_0)


def test_case_9():
    bytes_0 = b"^\xcb~\x89\x0c,\xc8\x08\x8a\xdd\x83\x84\xd3\x8f"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_0.bind(bytes_0)


def test_case_10():
    bytes_0 = b"\xb2\xc8@;\xc2\xfc\x8e\xa94\x7f\xf5duN"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_0.ap(bytes_0)


def test_case_11():
    bytes_0 = b"\xe3Q\xa6U4}"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_box()


def test_case_12():
    bytes_0 = b"\xe3(\x15_\xab4P}"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_lazy()


def test_case_13():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.to_try()


def test_case_14():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_either()
    validation_0.ap(var_0)


def test_case_15():
    bytes_0 = b"\xca\xb5Q\x90\xa6Uc\x8c_,}"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)


def test_case_16():
    bool_0 = False
    set_0 = set()
    validation_0 = module_0.Validation(bool_0, set_0)
    var_0 = validation_0.to_maybe()


def test_case_17():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_try()
    var_1.to_box()


def test_case_18():
    bytes_0 = b"\xe2#\xa3/>MBx\xb9\x8a\xb0\n\x19\x87\xfa\xad\xf0\x7f\x96"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    validation_1 = module_0.Validation(var_0, validation_0)
    var_1 = validation_1.__eq__(validation_0)
    var_2 = validation_0.to_box()
    var_2.is_success()
