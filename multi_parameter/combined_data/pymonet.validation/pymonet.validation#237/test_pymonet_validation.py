# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.__eq__(validation_0)
    var_0.to_either()


def test_case_1():
    bool_0 = False
    bool_1 = True
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_try()
    var_1 = validation_0.__eq__(bool_1)
    var_2 = var_1.__str__()
    var_2.bind(bool_0)


def test_case_2():
    bytes_0 = b"\xbf\xd7\x93"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_box()
    var_2 = var_1.to_try()
    var_3 = validation_0.__str__()
    var_4 = var_0.to_lazy()
    var_5 = validation_0.to_either()
    var_6 = var_2.__str__()
    var_4.to_lazy()


def test_case_3():
    str_0 = "\n        Transform Maybe to Box.\n\n        :returns: Box monad with previous value when Maybe is not empty, in other case Box with None\n        :rtype: Box[A | None]\n        "
    list_0 = [str_0]
    bytes_0 = b"\xbf\xd7\x93"
    validation_0 = module_0.Validation(bytes_0, list_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.to_try()
    var_2 = validation_0.to_either()


def test_case_4():
    bytes_0 = b"\xee`\x05"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.__str__()
    var_1.to_maybe()


def test_case_5():
    none_type_0 = None
    none_type_0.ap(none_type_0)


def test_case_6():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_7():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.is_success()


def test_case_8():
    bytes_0 = b"9\x025 "
    list_0 = [bytes_0, bytes_0]
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.is_fail()
    var_0.to_maybe()


def test_case_9():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.map(none_type_0)


def test_case_10():
    complex_0 = 942.75418 - 4629.78j
    bool_0 = False
    list_0 = [bool_0, bool_0]
    bytes_0 = b"\x1b\x11\xe8\xf9Y\x86\xc5n\x1b5\x8e\xdcI\x9a^"
    tuple_0 = (complex_0, bool_0, list_0, bytes_0)
    str_0 = "wl\x0c+\npr#,zT"
    validation_0 = module_0.Validation(str_0, str_0)
    validation_0.bind(tuple_0)


def test_case_11():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_0.ap(none_type_0)


def test_case_12():
    bytes_0 = b"\x8c\x7f"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_box()
    validation_1 = module_0.Validation(var_0, validation_0)
    validation_1.to_try()


def test_case_13():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    var_1 = validation_0.to_lazy()
    var_1.is_success()


def test_case_14():
    bytes_0 = b"\xa1&\x00\xeb\xec\xf0\xaf\x13\xb5\xbe\xcd\x18"
    bool_0 = False
    tuple_0 = (bool_0,)
    none_type_0 = None
    validation_0 = module_0.Validation(bytes_0, tuple_0)
    validation_1 = module_0.Validation(tuple_0, none_type_0)
    var_0 = validation_1.to_lazy()
    var_1 = var_0.ap(bytes_0)
    var_2 = var_1.map(none_type_0)
    var_3 = var_0.to_box()
    var_1.to_either()


def test_case_15():
    bool_0 = False
    list_0 = []
    validation_0 = module_0.Validation(bool_0, list_0)
    var_0 = validation_0.__str__()
    var_1 = var_0.__str__()
    var_1.bind(var_1)


def test_case_16():
    str_0 = "\n        Transform Maybe to Box.\n\n        :returns: Box monad with previous value when Maybe is not empty, in other case Box with None\n        :rtype: Box[A | None]\n        "
    tuple_0 = (str_0,)
    bool_0 = False
    dict_0 = {}
    tuple_1 = (tuple_0, bool_0, str_0, dict_0)
    list_0 = [str_0]
    validation_0 = module_0.Validation(list_0, dict_0)
    var_0 = validation_0.to_either()
    validation_1 = module_0.Validation(dict_0, tuple_1)
    var_1 = var_0.to_maybe()
    var_2 = var_1.to_box()
    var_3 = var_1.to_box()
    var_4 = var_0.to_try()
    var_5 = var_4.__str__()
    var_6 = validation_1.__str__()
    var_6.to_lazy()


def test_case_17():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_either()
    var_0.is_fail()


def test_case_18():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_1 = module_0.Validation(none_type_0, validation_0)
    var_0 = validation_1.__eq__(validation_0)
    var_1 = var_0.__eq__(none_type_0)
    var_1.to_try()
