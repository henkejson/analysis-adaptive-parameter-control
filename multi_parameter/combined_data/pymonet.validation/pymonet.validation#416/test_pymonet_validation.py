# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    str_0 = "c+8+5"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(str_0)


def test_case_1():
    str_0 = "rgl.JQy*]1[9 f@dv1:1"
    validation_0 = module_0.Validation(str_0, str_0)
    validation_1 = validation_0.__str__()


def test_case_2():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_either()
    none_type_0 = None
    var_1 = validation_0.is_fail()
    validation_1 = module_0.Validation(var_0, set_0)
    var_2 = validation_1.to_try()
    validation_0.bind(none_type_0)


def test_case_3():
    str_0 = "QeN`V%"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()


def test_case_4():
    str_0 = "L3~Jm*Ku7$.Wq'"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()


def test_case_5():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)


def test_case_6():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.__str__()


def test_case_7():
    str_0 = "Bpx"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.is_fail()


def test_case_8():
    str_0 = "gNICs4I9]>/Kh.\x0bs^B"
    validation_0 = module_0.Validation(str_0, str_0)
    validation_0.map(str_0)


def test_case_9():
    str_0 = "3~Jm8KuT$.Wq'"
    validation_0 = module_0.Validation(str_0, str_0)
    validation_0.bind(validation_0)


def test_case_10():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.ap(validation_0)


def test_case_11():
    str_0 = "c+8+5"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_box()
    validation_1 = module_0.Validation(validation_0, var_0)


def test_case_12():
    str_0 = "3~Jm8KuT$.Wq'"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_lazy()


def test_case_13():
    str_0 = "ldFT"
    list_0 = [str_0, str_0, str_0]
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_box()
    var_2 = var_1.to_maybe()
    var_3 = var_2.to_either()
    var_4 = var_3.to_maybe()


def test_case_14():
    str_0 = "\n        Take mapper function and return new instance of Right with mapped value.\n\n        :param mapper: function to apply on Right value\n        :type mapper: Function(A) -> B\n        :returns: new Right with result of mapper\n        :rtype: Right[B]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_try()


def test_case_15():
    str_0 = "ldFT"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, str_0)
    int_0 = 0
    dict_0 = {}
    validation_1 = module_0.Validation(none_type_0, dict_0)
    var_0 = validation_1.__str__()
    var_1 = validation_1.__eq__(validation_0)
    str_1 = "|ps/n1@c2NX"
    validation_2 = module_0.Validation(var_1, str_1)
    var_2 = validation_0.is_fail()
    var_3 = var_2.__eq__(var_1)
    var_4 = validation_1.to_maybe()
    var_5 = var_3.__eq__(int_0)
    var_5.to_box()


def test_case_16():
    str_0 = '.(.4"'
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(validation_0)


def test_case_17():
    str_0 = "ldFT"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, str_0)
    dict_0 = {}
    validation_1 = module_0.Validation(none_type_0, dict_0)
    var_0 = validation_1.__str__()
    var_1 = validation_1.__eq__(validation_0)
    str_1 = "|ps/n1@c2NX"
    validation_2 = module_0.Validation(str_1, var_0)
