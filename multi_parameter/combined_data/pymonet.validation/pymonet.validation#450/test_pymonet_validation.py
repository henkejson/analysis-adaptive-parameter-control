# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bytes_0 = b"\x00=\x15\xdd\xa3\x15bX\x93y\x88\x8f\xac\\\xbc\x9f\xf7\x12"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)


def test_case_1():
    bytes_0 = b"\x00=\x15\xdd\xa3\x15bX\x93y\x88\x8f\xac\\\xbc\x9f\xf7\x12"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(bytes_0)


def test_case_2():
    bytes_0 = b"\x87\xb9\x0f/di\xf7\xde\x13\xdd\xd2*\xb6\xfb\xba\xda~/~\xf1"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()


def test_case_3():
    str_0 = "&qoV=S}GwLsCF"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()


def test_case_4():
    none_type_0 = None
    set_0 = set()
    validation_0 = module_0.Validation(none_type_0, set_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.__str__()
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    validation_1.__str__()


def test_case_5():
    bytes_0 = b".Z\x87\x96\xabw\x9621\xa2\xce\xd30)\x0b\xdb\x1f^\xaf"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_1 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_1.to_maybe()


def test_case_6():
    bytes_0 = b"\x04\xd1,\x87Ru\x80p"
    validation_0 = module_0.Validation(bytes_0, bytes_0)


def test_case_7():
    complex_0 = 5321.54 + 1560.16j
    validation_0 = module_0.Validation(complex_0, complex_0)
    validation_0.__str__()


def test_case_8():
    bytes_0 = b",R\x80J"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.is_fail()
    var_0.to_maybe()


def test_case_9():
    bytes_0 = b"\x00=\x15\xdd\xa3\x15bX\x93y\x88\x8f\xac\\\xbc\x9f\xf7\x12"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_0.map(validation_0)


def test_case_10():
    bytes_0 = b"\xe7\xeb\xa9V\x1a\x03\xb7\x0f\r\xca\x92xN\xfd\xd8\x1b"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_0.bind(bytes_0)


def test_case_11():
    bytes_0 = b"\xb0\x99\x91"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_0.ap(validation_0)


def test_case_12():
    bytes_0 = b"P\x00zltB\xeb\x9c0h2\xd2"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_box()


def test_case_13():
    bytes_0 = b"\x04\xd1,-Ru\x80p"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_lazy()


def test_case_14():
    complex_0 = -790.6 + 1084.311609j
    validation_0 = module_0.Validation(complex_0, complex_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_maybe()
    var_2 = var_1.to_either()
    validation_1 = module_0.Validation(var_2, var_1)
    var_3 = validation_1.to_box()
    var_4 = var_3.__str__()


def test_case_15():
    bytes_0 = b"\x06KT\x03b;\x0fYp"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_try()


def test_case_16():
    bytes_0 = b'X\xe0\xd1*\xa2o\x89\xc2\xd5Wn"\xdc/\xef'
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_1 = module_0.Validation(validation_0, var_0)
    var_1 = validation_1.__eq__(validation_0)
    var_2 = validation_0.to_either()


def test_case_17():
    set_0 = set()
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, set_0)
    var_0 = validation_0.__str__()
    var_0.to_lazy()


def test_case_18():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_either()
    var_0.is_fail()
