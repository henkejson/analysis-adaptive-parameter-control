# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    str_0 = "crM"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(str_0)


def test_case_1():
    dict_0 = {}
    none_type_0 = None
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.__eq__(none_type_0)
    var_1 = validation_0.__str__()
    var_1.to_either()


def test_case_2():
    bool_0 = True
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.is_success()
    var_1 = validation_0.__eq__(bool_0)
    var_2 = validation_0.__str__()
    var_3 = validation_0.to_either()


def test_case_3():
    str_0 = "!ak"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()


def test_case_4():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)


def test_case_5():
    str_0 = "D@LTlggNaWI1Wirr)]9"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_try()


def test_case_6():
    str_0 = "7FczZpXDQ9O0K#>\x0b|"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.is_fail()


def test_case_7():
    str_0 = "PSEl(tr+U>_%a"
    validation_0 = module_0.Validation(str_0, str_0)
    validation_0.map(validation_0)


def test_case_8():
    str_0 = "<Q[h} "
    validation_0 = module_0.Validation(str_0, str_0)
    validation_0.bind(validation_0)


def test_case_9():
    str_0 = 'XA$f@*D<d^z"mb'
    validation_0 = module_0.Validation(str_0, str_0)
    validation_0.ap(validation_0)


def test_case_10():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()


def test_case_11():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_try()
    bytes_0 = b"kq\x93=\xad\n\xe5\x85j"
    validation_1 = module_0.Validation(bytes_0, bytes_0)


def test_case_12():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.is_success()
    var_2 = validation_0.__eq__(list_0)
    var_2.to_either()


def test_case_13():
    str_0 = "TSElv&tr+UE6 /s"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    var_0.bind(str_0)


def test_case_14():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_box()


def test_case_15():
    str_0 = "\n        Take mapper function and return new instance of Right with mapped value.\n\n        :param mappr: function to apply on Right value\n        :type mapper: Function(A) -> B\n        :returns new Right with result of mapper\n        :rtype: Right[B]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()


def test_case_16():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_box()
    var_2 = validation_0.to_maybe()
    var_0.is_success()


def test_case_17():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_box()
    var_2 = var_0.__str__()
    validation_1 = module_0.Validation(var_1, validation_0)
    var_3 = validation_0.is_success()
    var_4 = validation_0.__eq__(validation_1)
    var_4.is_success()
