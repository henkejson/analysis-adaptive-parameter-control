# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    str_0 = "g6E\x0bO^4?`r]?"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.__eq__(var_0)
    var_1.to_maybe()


def test_case_1():
    str_0 = "bR7$tZ#Du4\x0bt>'H\x0c"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    var_1 = var_0.__eq__(str_0)
    var_1.to_try()


def test_case_2():
    none_type_0 = None
    str_0 = "\n        Transform Maybe to Try.\n\n        :returns: Lazy monad with function returning previous value in other case Left with None\n        :rtype: Lazy[Function() -> (A | None)]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.__str__()
    var_1.map(none_type_0)


def test_case_3():
    str_0 = "vRWKMnZIIwA4T]\ny]s)\t"
    str_1 = "g6E\x0bO^4?`r]?"
    validation_0 = module_0.Validation(str_1, str_1)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.bind(str_0)
    var_2 = var_1.to_try()
    var_2.to_lazy()


def test_case_4():
    str_0 = "vRWKMnZIIwA4T]\ny]s)\t"
    str_0.to_maybe()


def test_case_5():
    float_0 = -5060.11174
    validation_0 = module_0.Validation(float_0, float_0)


def test_case_6():
    float_0 = -5060.11174
    validation_0 = module_0.Validation(float_0, float_0)
    validation_0.to_maybe()


def test_case_7():
    none_type_0 = None
    int_0 = -2993
    tuple_0 = (none_type_0, int_0, int_0)
    validation_0 = module_0.Validation(none_type_0, tuple_0)
    var_0 = validation_0.is_fail()
    var_0.is_fail()


def test_case_8():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    int_0 = 151
    validation_0 = module_0.Validation(int_0, list_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.__str__()
    validation_0.map(var_1)


def test_case_9():
    bool_0 = False
    tuple_0 = (bool_0,)
    bytes_0 = b"\xbc\x11\x02\x92\xf5\xd4H\x0fv\xb4_\xf8\x1c\xb0\xaf\xb8\xe8"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_0.bind(tuple_0)


def test_case_10():
    bool_0 = False
    none_type_0 = None
    bytes_0 = b"\x8b\x01\xdb\xc0\xa6\xa5"
    validation_0 = module_0.Validation(bool_0, bytes_0)
    validation_0.ap(none_type_0)


def test_case_11():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    none_type_0 = None
    var_0 = validation_0.to_box()
    var_1 = validation_0.__eq__(none_type_0)
    var_1.to_either()


def test_case_12():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    bytes_0 = b"[\xd6\xec"
    none_type_0 = None
    var_0 = validation_0.__eq__(none_type_0)
    validation_1 = module_0.Validation(bytes_0, bytes_0)
    var_1 = validation_1.to_lazy()
    validation_1.map(bool_0)


def test_case_13():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_maybe()
    var_1.to_maybe()


def test_case_14():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.to_try()


def test_case_15():
    str_0 = "g6E\x0bO^4?`r]?"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(validation_0)
    var_0.bind(var_0)


def test_case_16():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.__str__()
    var_0.to_either()


def test_case_17():
    int_0 = 263
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(int_0)
    dict_0 = {}
    validation_1 = module_0.Validation(dict_0, dict_0)
    var_1 = var_0.__eq__(bool_0)
    float_0 = -1012.1176
    validation_2 = module_0.Validation(float_0, var_1)
    var_2 = validation_0.__eq__(validation_1)
    validation_2.bind(var_2)


def test_case_18():
    list_0 = []
    none_type_0 = None
    validation_0 = module_0.Validation(list_0, list_0)
    validation_1 = module_0.Validation(none_type_0, list_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_1.to_either()
    tuple_0 = (var_0, var_1, var_0)
    var_1.map(tuple_0)


def test_case_19():
    bytes_0 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.to_lazy()
    bytes_0.is_success()
