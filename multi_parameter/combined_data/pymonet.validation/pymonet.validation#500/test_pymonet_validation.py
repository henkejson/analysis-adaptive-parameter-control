# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    str_0 = "k;O\\ThGk"
    bool_0 = True
    complex_0 = -2109.23374 + 4661.084j
    tuple_0 = (bool_0, bool_0, complex_0, complex_0)
    none_type_0 = None
    validation_0 = module_0.Validation(tuple_0, none_type_0)
    var_0 = validation_0.__eq__(str_0)


def test_case_1():
    int_0 = 434
    int_1 = -855
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_1}
    dict_1 = {}
    validation_0 = module_0.Validation(int_0, dict_1)
    var_0 = validation_0.__str__()
    var_0.ap(dict_0)


def test_case_2():
    bytes_0 = b"n\xf5\xe0\x13\xc3\xe1\xd5U|:\x0e\xc3k\x80\xe7"
    complex_0 = 140.148 - 1574.3615j
    str_0 = "\n        Take function and applied this function on current box value and returns mapped value.\n\n        :param mapper: mapper function\n        :type mapper: Function(A) -> B\n        :returns: new box with mapped value\n        :rtype: B\n        "
    set_0 = {complex_0, complex_0, str_0}
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.__str__()
    var_1 = var_0.__eq__(bytes_0)
    var_1.to_either()


def test_case_3():
    float_0 = -426.0
    bool_0 = False
    set_0 = set()
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, set_0)
    var_0 = validation_0.is_fail()
    list_0 = [bool_0, set_0, bool_0, bool_0]
    validation_1 = module_0.Validation(list_0, set_0)
    validation_2 = module_0.Validation(validation_1, float_0)
    var_1 = validation_1.to_lazy()
    var_2 = validation_1.to_either()
    validation_1.map(validation_1)


def test_case_4():
    bytes_0 = b"\xcc\xa0J"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, bytes_0)
    list_0 = []
    var_0 = validation_0.__eq__(list_0)
    validation_1 = module_0.Validation(bytes_0, bytes_0)
    var_1 = validation_0.to_either()
    var_2 = var_1.to_try()
    var_3 = validation_1.is_success()


def test_case_5():
    str_0 = "\tD\trl*]"
    str_1 = "R"
    validation_0 = module_0.Validation(str_1, str_0)
    var_0 = validation_0.to_maybe()


def test_case_6():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)


def test_case_7():
    bytes_0 = b"\xcc\xa0J"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, bytes_0)
    list_0 = []
    var_0 = validation_0.__eq__(list_0)
    validation_1 = module_0.Validation(bytes_0, bytes_0)
    var_1 = validation_0.to_either()
    var_2 = validation_1.to_either()
    var_3 = validation_0.is_fail()
    var_4 = var_2.ap(var_2)
    var_3.map(var_3)


def test_case_8():
    bytes_0 = b"\xcc\xa0J"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, bytes_0)
    var_0 = validation_0.to_maybe()
    validation_0.map(validation_0)


def test_case_9():
    bool_0 = False
    str_0 = " B9Vz8,^COc\r'"
    validation_0 = module_0.Validation(str_0, str_0)
    validation_0.bind(bool_0)


def test_case_10():
    set_0 = set()
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, set_0)
    validation_0.ap(set_0)


def test_case_11():
    int_0 = 1
    set_0 = {int_0, int_0, int_0}
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_box()
    var_0.ap(set_0)


def test_case_12():
    str_0 = "R"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_either()
    var_2 = validation_0.to_lazy()
    var_3 = var_2.to_maybe()
    var_4 = var_3.to_lazy()


def test_case_13():
    bytes_0 = b"\xacsb\xf6\x8c\x0bS"
    complex_0 = 624.7602 - 875.22j
    validation_0 = module_0.Validation(bytes_0, complex_0)
    validation_0.to_try()


def test_case_14():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)
    var_0.to_maybe()


def test_case_15():
    str_0 = "\tD\trl*]"
    str_1 = "R"
    validation_0 = module_0.Validation(str_1, str_0)
    var_0 = validation_0.to_maybe()
    validation_1 = module_0.Validation(var_0, validation_0)
    var_1 = validation_1.__eq__(validation_0)
    var_0.is_success()


def test_case_16():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.to_maybe()
    list_0 = []
    var_0.map(list_0)
