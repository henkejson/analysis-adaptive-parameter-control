# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0
import builtins as module_1


def test_case_0():
    none_type_0 = None
    none_type_1 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(none_type_1)


def test_case_1():
    bytes_0 = b"\x80\xf9\x1b\x18[+"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_maybe()
    var_2 = validation_0.is_success()
    var_3 = validation_0.to_either()
    var_4 = validation_0.__str__()


def test_case_2():
    int_0 = -1786
    validation_0 = module_0.Validation(int_0, int_0)


def test_case_3():
    none_type_0 = None
    none_type_1 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(none_type_1)
    validation_0.to_either()


def test_case_4():
    none_type_0 = None
    bool_0 = False
    validation_0 = module_0.Validation(none_type_0, bool_0)
    validation_0.is_fail()


def test_case_5():
    complex_0 = -1502.490649 - 3713.906314j
    none_type_0 = None
    validation_0 = module_0.Validation(complex_0, none_type_0)
    tuple_0 = (complex_0, validation_0, complex_0)
    float_0 = -4055.306
    validation_1 = module_0.Validation(float_0, float_0)
    validation_1.map(tuple_0)


def test_case_6():
    float_0 = -90.7
    validation_0 = module_0.Validation(float_0, float_0)
    validation_0.bind(float_0)


def test_case_7():
    none_type_0 = None
    none_type_1 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(none_type_1)
    validation_0.ap(none_type_1)


def test_case_8():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, object_0)
    var_0 = validation_0.to_box()
    var_0.is_success()


def test_case_9():
    bool_0 = False
    bytes_0 = b"\x14\xd0\xe0\x7frX\x8cx=[^A\xd0\x81\xb2\xc0\xae7"
    validation_0 = module_0.Validation(bytes_0, bool_0)
    var_0 = validation_0.to_lazy()
    var_0.is_fail()


def test_case_10():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    str_0 = "\n    Return first argument.\n\n    :param value:\n    :type value: Any\n    :returns:\n    :rtype: Any\n    "
    validation_1 = module_0.Validation(str_0, str_0)
    var_0 = validation_1.to_lazy()
    var_1 = var_0.to_either()
    var_1.to_either()


def test_case_11():
    bytes_0 = b"\x80\xf9\x1b\x18[+"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    bool_0 = False
    validation_1 = module_0.Validation(bool_0, bytes_0)
    var_0 = validation_0.to_try()
    var_1 = validation_1.is_fail()
    var_2 = var_1.__str__()
    var_3 = validation_1.__eq__(bytes_0)
    var_4 = var_0.__str__()
    module_1.object(*bytes_0, **var_4)


def test_case_12():
    bytes_0 = b"\x80\xf9\x1b\x18[+"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_1 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_1.__str__()
    var_1 = validation_0.is_success()
    var_2 = validation_0.to_either()
    var_3 = validation_1.__eq__(validation_1)
    var_3.to_lazy()


def test_case_13():
    int_0 = 102
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_maybe()
    var_0.bind(int_0)


def test_case_14():
    bytes_0 = b"\x80\xf9\x1b\x18[+"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    bool_0 = False
    validation_1 = module_0.Validation(bool_0, bytes_0)
    validation_2 = module_0.Validation(validation_1, validation_1)
    var_0 = validation_1.__eq__(validation_2)
    var_1 = validation_1.__str__()
    var_2 = validation_0.to_box()
    bool_0.is_success()


def test_case_15():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    validation_1 = module_0.Validation(set_0, set_0)
    var_0 = validation_1.is_success()
    validation_2 = module_0.Validation(validation_1, set_0)
    var_1 = validation_2.__str__()
    var_1.to_try()


def test_case_16():
    bytes_0 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    bool_0 = False
    validation_1 = module_0.Validation(bool_0, bytes_0)
    var_0 = validation_1.to_try()
    validation_2 = module_0.Validation(bytes_0, bytes_0)
    var_1 = validation_2.__str__()
    var_2 = validation_1.__eq__(bytes_0)
    var_3 = var_0.__str__()
    var_4 = validation_1.to_box()
    var_5 = validation_0.to_maybe()
    var_6 = validation_0.is_success()
    var_7 = validation_0.to_either()
    var_0.is_success()
