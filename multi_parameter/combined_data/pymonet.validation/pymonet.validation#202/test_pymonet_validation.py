# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0
import builtins as module_1


def test_case_0():
    float_0 = 950.0
    validation_0 = module_0.Validation(float_0, float_0)
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_1.__eq__(float_0)
    validation_1.to_maybe()


def test_case_1():
    dict_0 = {}
    none_type_0 = None
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.is_fail()
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    var_1 = validation_0.__str__()
    var_2 = var_1.__eq__(dict_0)
    var_1.map(none_type_0)


def test_case_2():
    bool_0 = True
    tuple_0 = (bool_0,)
    bool_1 = True
    bytes_0 = b"\xb3\xedh\x9f\x81\xb4\xb7\xe1j\xf5\x05v\x93\x01\xc6\xf9"
    dict_0 = {bool_1: bool_1, bool_1: bool_1, bytes_0: bytes_0, bool_1: bytes_0}
    list_0 = [dict_0, dict_0, bool_1]
    validation_0 = module_0.Validation(list_0, dict_0)
    var_0 = validation_0.__str__()
    validation_0.bind(tuple_0)


def test_case_3():
    bytes_0 = b"\xe9"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_0.to_either()


def test_case_4():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_maybe()
    var_0.to_maybe()


def test_case_5():
    str_0 = "#e@D.}\x0bq{@ DHO@,]oa"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    var_0.is_success()


def test_case_6():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_7():
    bytes_0 = b"p\xda4lF"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_try()
    var_1 = var_0.map(validation_0)


def test_case_8():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.is_fail()


def test_case_9():
    none_type_0 = None
    bytes_0 = b"::Y\x03QK\xf4\x9b"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_0.map(none_type_0)


def test_case_10():
    none_type_0 = None
    int_0 = 3076
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.bind(none_type_0)


def test_case_11():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.ap(bool_0)


def test_case_12():
    int_0 = -4311
    none_type_0 = None
    validation_0 = module_0.Validation(int_0, none_type_0)
    var_0 = validation_0.to_box()
    validation_0.to_maybe()


def test_case_13():
    bytes_0 = b"\xe9p"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.is_fail()
    var_1 = validation_0.__eq__(validation_0)
    var_2 = var_1.__str__()
    var_2.is_success()


def test_case_14():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()


def test_case_15():
    dict_0 = {}
    none_type_0 = None
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.is_fail()
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    var_1 = validation_0.__eq__(validation_1)
    var_2 = var_1.__eq__(dict_0)
    var_1.map(none_type_0)


def test_case_16():
    bytes_0 = b""
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.__eq__(bytes_0)
    var_2 = validation_0.to_either()
    var_3 = validation_0.__eq__(bytes_0)
    var_4 = var_2.to_try()
    var_5 = validation_0.__str__()
    var_4.bind(list_0)


def test_case_17():
    bytes_0 = b"?\xe9p"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.__eq__(validation_0)
    var_2 = module_1.object()
    var_3 = validation_0.__eq__(var_1)
    var_4 = validation_0.__eq__(var_0)
    var_5 = var_0.to_either()
    var_1.to_lazy()
