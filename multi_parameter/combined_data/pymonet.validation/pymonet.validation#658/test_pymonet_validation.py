# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    int_0 = 1038
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, int_0)
    var_0 = validation_0.__eq__(validation_0)
    var_0.is_fail()


def test_case_1():
    none_type_0 = None
    bytes_0 = b"\xc3\x06\xca\xb0\x1d\xbc\x9e\xbe\xactx$0\xaf"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    none_type_1 = None
    validation_0 = module_0.Validation(dict_0, none_type_1)
    var_0 = validation_0.__eq__(none_type_0)
    var_0.to_lazy()


def test_case_2():
    bytes_0 = b"1\xcfr\xa8\xaa\xad}\x89\xb3\xe5{\xd0E:\xca\x85\x8d2\xcb"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    var_0.to_maybe()


def test_case_3():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_box()
    validation_1 = module_0.Validation(dict_0, dict_0)
    var_2 = validation_1.to_maybe()
    var_3 = var_2.__eq__(dict_0)
    var_3.to_box()


def test_case_4():
    list_0 = []
    str_0 = "3l$sYNguVOPD"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_lazy()
    validation_0.map(list_0)


def test_case_5():
    bytes_0 = b"\x086@G\xd2"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.to_maybe()
    var_2 = var_1.to_either()
    validation_0.map(var_1)


def test_case_6():
    str_0 = "Qe8e&^j<~E"
    validation_0 = module_0.Validation(str_0, str_0)


def test_case_7():
    float_0 = -2837.0
    validation_0 = module_0.Validation(float_0, float_0)
    validation_0.to_try()


def test_case_8():
    none_type_0 = None
    str_0 = "/Dm\x0c#<9m+"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.is_fail()
    var_1 = var_0.__eq__(none_type_0)
    var_1.is_success()


def test_case_9():
    float_0 = -3087.78
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    validation_0 = module_0.Validation(bool_0, dict_0)
    validation_0.bind(float_0)


def test_case_10():
    none_type_0 = None
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.ap(none_type_0)


def test_case_11():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_0.is_fail()


def test_case_12():
    bytes_0 = b"\xf2\x12X\xb1<\x8e\x817\x8ai\xcf*"
    none_type_0 = None
    bytes_1 = b"\xc3\x06\xca\xb0\x1d\xbc\x9e\xbe\xactx$0\xaf"
    dict_0 = {bytes_1: bytes_1, bytes_1: bytes_1}
    bool_0 = True
    validation_0 = module_0.Validation(dict_0, bool_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_try()
    var_2 = var_0.bind(bytes_0)
    var_1.bind(none_type_0)


def test_case_13():
    int_0 = 1038
    none_type_0 = None
    validation_0 = module_0.Validation(int_0, none_type_0)
    none_type_1 = None
    validation_1 = module_0.Validation(none_type_1, int_0)
    var_0 = validation_1.__eq__(validation_1)
    var_1 = validation_1.__eq__(int_0)
    var_2 = validation_1.__eq__(none_type_1)
    validation_2 = module_0.Validation(validation_1, var_2)
    var_3 = validation_1.__eq__(validation_2)
    var_1.to_maybe()


def test_case_14():
    dict_0 = {}
    int_0 = 1
    validation_0 = module_0.Validation(int_0, int_0)
    validation_1 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_1.__str__()
