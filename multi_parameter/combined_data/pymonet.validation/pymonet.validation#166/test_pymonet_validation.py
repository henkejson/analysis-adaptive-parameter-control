# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    float_0 = 1582.3871364819013
    bytes_0 = b'\x15)\x91\x80H\xa1"\x9f'
    none_type_0 = None
    validation_0 = module_0.Validation(float_0, bytes_0)
    var_0 = validation_0.__eq__(none_type_0)
    var_0.bind(bytes_0)


def test_case_1():
    dict_0 = {}
    none_type_0 = None
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.__str__()
    var_0.ap(none_type_0)


def test_case_2():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.__str__()
    var_0.to_either()


def test_case_3():
    bool_0 = False
    bool_1 = True
    dict_0 = {bool_1: bool_1, bool_1: bool_1, bool_1: bool_1, bool_1: bool_1}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.__eq__(bool_0)
    var_1.to_try()


def test_case_4():
    str_0 = ""
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.to_either()
    var_2 = var_0.__str__()


def test_case_5():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)


def test_case_6():
    bytes_0 = b"\xbf\xe1\xee\x86\xd9&3\x8c"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_box()
    var_2 = var_0.map(none_type_0)
    none_type_1 = None
    var_3 = var_1.to_maybe()
    validation_1 = module_0.Validation(none_type_1, none_type_1)
    validation_2 = module_0.Validation(bytes_0, bytes_0)
    var_4 = var_1.to_either()
    var_5 = validation_2.__eq__(bytes_0)
    validation_0.is_fail()


def test_case_7():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_0.map(var_0)


def test_case_8():
    bool_0 = True
    bool_1 = True
    validation_0 = module_0.Validation(bool_1, bool_1)
    var_0 = validation_0.__eq__(bool_0)
    validation_0.bind(bool_0)


def test_case_9():
    bytes_0 = b"\xf7wsC+="
    int_0 = 1
    list_0 = []
    dict_0 = {int_0: list_0}
    validation_0 = module_0.Validation(dict_0, list_0)
    validation_0.ap(bytes_0)


def test_case_10():
    bytes_0 = b"\xbf\xe1\xee\x86\xd9&3\x8c"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_box()
    var_2 = var_1.to_lazy()
    none_type_1 = None
    validation_1 = module_0.Validation(none_type_1, none_type_1)
    validation_2 = module_0.Validation(bytes_0, bytes_0)
    var_3 = validation_2.__eq__(bytes_0)
    var_4 = validation_2.is_success()
    var_5 = var_4.__str__()
    var_6 = validation_2.to_box()


def test_case_11():
    float_0 = 118.5299
    none_type_0 = None
    validation_0 = module_0.Validation(float_0, none_type_0)
    validation_0.to_try()


def test_case_12():
    bytes_0 = b"\xbf\xe1\xee\x86\xd9&3\x8c"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_box()
    var_2 = var_1.to_lazy()
    none_type_1 = None
    validation_1 = module_0.Validation(none_type_1, none_type_1)
    validation_2 = module_0.Validation(bytes_0, bytes_0)
    var_3 = validation_2.to_maybe()
    var_4 = var_3.__eq__(var_1)
    validation_1.is_success()


def test_case_13():
    bytes_0 = b"\xbf\xe1\xee\x86\xd9&3\x8c"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_box()
    var_2 = var_1.to_lazy()
    bool_0 = True
    validation_1 = module_0.Validation(bool_0, bytes_0)
    validation_2 = module_0.Validation(bytes_0, var_1)
    var_3 = validation_0.__eq__(validation_2)
    var_4 = validation_2.__eq__(var_3)
    var_5 = var_1.to_lazy()
    var_5.is_success()
