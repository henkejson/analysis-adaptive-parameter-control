# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(tuple_0)
    var_0.to_lazy()


def test_case_1():
    str_0 = "\n    The Try control gives us the ability write safe code\n    without focusing on try-catch blocks in the presence of exceptions.\n    "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.__eq__(validation_0)
    var_0.is_success()


def test_case_2():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_either()
    var_0.is_fail()


def test_case_3():
    str_0 = "\n    The Try control gives us the ability write safe code\n    without focusing on try-catch blocks in the presence of exceptions.\n    "
    set_0 = set()
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    validation_1 = module_0.Validation(set_0, set_0)
    var_1 = validation_0.is_fail()
    var_2 = var_1.__eq__(validation_0)
    var_3 = validation_0.to_either()
    var_0.to_lazy()


def test_case_4():
    str_0 = ':sSGG/LkTAV%Yj\x0bwy"'
    list_0 = [str_0, str_0, str_0, str_0]
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_maybe()


def test_case_5():
    str_0 = "\n    The Try control gives us the ability write safe code\n    without focusing on try-catch blocks in the presence of exceptions.\n    "
    validation_0 = module_0.Validation(str_0, str_0)


def test_case_6():
    str_0 = "\n    The Try control gives us the ability write safe code\n    without focusing on try-catch blocks in the presence of exceptions.\n    "
    set_0 = set()
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    validation_1 = module_0.Validation(str_0, set_0)
    var_1 = validation_1.__eq__(validation_0)
    var_2 = validation_0.is_fail()


def test_case_7():
    str_0 = "\n    The Try control gives us the ability write safe code\n    without focusing on try-catch blocks in the presence of exceptions.\n    "
    set_0 = set()
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    validation_1 = module_0.Validation(str_0, set_0)
    validation_1.map(validation_0)


def test_case_8():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    none_type_0 = None
    var_0 = validation_0.__eq__(none_type_0)
    validation_0.bind(validation_0)


def test_case_9():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.ap(none_type_0)


def test_case_10():
    tuple_0 = ()
    none_type_0 = None
    validation_0 = module_0.Validation(tuple_0, none_type_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.__eq__(validation_0)
    var_1.to_box()


def test_case_11():
    str_0 = "\n    The Try control gives us the ability write safe code\n    without focusing on try-catch blocks in the presence of exceptions.\n    "
    set_0 = set()
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(set_0)
    var_1 = validation_0.__str__()
    var_2 = validation_0.to_lazy()
    var_3 = validation_0.__str__()
    var_4 = var_3.__eq__(var_0)


def test_case_12():
    float_0 = -1614.344764
    bytes_0 = b"l\x99\xe6m7\xf4\xa2\x1f\xf0\x0b\xca\xc2\xeeW:p"
    none_type_0 = None
    validation_0 = module_0.Validation(bytes_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_box()
    var_2 = var_1.to_either()
    var_2.bind(float_0)


def test_case_13():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.to_try()


def test_case_14():
    str_0 = "\n    The Try control gives us the ability write safe code\n    without focusing on try-catch blocks in the presence of exceptions.\n    "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = var_0.__str__()
    validation_1 = module_0.Validation(var_0, var_1)
    var_2 = validation_0.to_maybe()


def test_case_15():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    none_type_0 = None
    var_0 = validation_0.to_maybe()
    str_0 = "\n        Take function and applied this function on current Validation value and returns folder result.\n\n        :param mapper: mapper function\n        :type mapper: Function(A) -> Validation[B, E]\n        :returns: new Validation with mapped value\n        :rtype: Validation[B, E]\n        "
    validation_1 = module_0.Validation(str_0, str_0)
    var_1 = validation_0.to_try()
    var_2 = validation_0.is_fail()
    var_3 = validation_1.to_either()
    validation_2 = module_0.Validation(none_type_0, none_type_0)
    validation_2.__str__()


def test_case_16():
    str_0 = "\n    The Try control gives us the ability write safe code\n    without focusing on try-catch blocks in the presence of exceptions.\n    "
    set_0 = set()
    validation_0 = module_0.Validation(str_0, set_0)
    var_0 = validation_0.__str__()
    validation_1 = module_0.Validation(var_0, var_0)
    var_1 = var_0.__eq__(str_0)
    var_2 = validation_1.to_maybe()
    var_2.to_maybe()
