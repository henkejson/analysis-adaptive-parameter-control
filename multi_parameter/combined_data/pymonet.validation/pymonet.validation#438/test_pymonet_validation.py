# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_try()
    var_1.map(validation_0)


def test_case_1():
    bool_0 = False
    bool_1 = True
    validation_0 = module_0.Validation(bool_1, bool_1)
    var_0 = validation_0.__eq__(bool_0)
    var_0.is_success()


def test_case_2():
    bytes_0 = b"\xda\x82\xd3\x19i\xc5?\x17\xaa\x91"
    none_type_0 = None
    bool_0 = False
    validation_0 = module_0.Validation(none_type_0, bytes_0)
    var_0 = validation_0.__str__()
    var_1 = var_0.__eq__(bytes_0)
    var_1.map(bool_0)


def test_case_3():
    bytes_0 = b"\xe6\x92\xa5d\xa0\x12\xd3\x96\xd0\xf3|E2\xeaF"
    bytes_1 = b"\x85%\xf5M\x97\xb2\x1f\xf2J\x11\x8c\x1e\xb0\x06\xd3\xb6\xb5"
    dict_0 = {bytes_1: bytes_1, bytes_1: bytes_1}
    validation_0 = module_0.Validation(bytes_0, dict_0)
    var_0 = validation_0.to_maybe()
    validation_1 = module_0.Validation(validation_0, validation_0)
    var_1 = validation_0.to_either()
    none_type_0 = None
    validation_2 = module_0.Validation(none_type_0, none_type_0)
    validation_2.to_try()


def test_case_4():
    bytes_0 = b"\xfa\xcb\xd0\xf0`\xa5\xe1\xe6\xd7\x99\x9c\xbb"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    validation_0.bind(var_0)


def test_case_5():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_6():
    bytes_0 = b"\xff\x18\xea[\x81{\x8c"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.is_success()


def test_case_7():
    int_0 = 164
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.is_fail()


def test_case_8():
    bytes_0 = b"zS"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_0.map(bytes_0)


def test_case_9():
    str_0 = ":O|d6#Z:GJhm\n"
    validation_0 = module_0.Validation(str_0, str_0)
    validation_0.bind(validation_0)


def test_case_10():
    bytes_0 = b"\xff\x18\xea[\x81O{\x8c"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    none_type_0 = None
    validation_0.ap(none_type_0)


def test_case_11():
    int_0 = 891
    none_type_0 = None
    validation_0 = module_0.Validation(int_0, none_type_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.to_lazy()
    var_2 = var_1.to_try()


def test_case_12():
    bytes_0 = b"\xe2Zu\xc4G"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.is_fail()
    var_1 = validation_0.to_lazy()


def test_case_13():
    int_0 = 0
    validation_0 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_box()
    var_2 = var_1.to_either()
    var_2.is_success()


def test_case_14():
    str_0 = "|d6#Z:GJhm\n"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_try()
    validation_0.map(validation_0)


def test_case_15():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_either()
    validation_1 = module_0.Validation(tuple_0, tuple_0)


def test_case_16():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_maybe()
    validation_0.ap(dict_0)


def test_case_17():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.__str__()
    var_0.is_success()


def test_case_18():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    validation_1 = module_0.Validation(dict_0, validation_0)
    var_0 = validation_1.__eq__(validation_0)
    validation_1.to_try()
