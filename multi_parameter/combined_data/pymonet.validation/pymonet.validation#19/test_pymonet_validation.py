# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0
import builtins as module_1


def test_case_0():
    float_0 = 2109.0
    none_type_0 = None
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(none_type_0)
    var_0.ap(float_0)


def test_case_1():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0]
    validation_0 = module_0.Validation(list_0, dict_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_try()
    var_2 = validation_0.__eq__(dict_0)
    validation_0.bind(dict_0)


def test_case_2():
    dict_0 = {}
    dict_0.to_try()


def test_case_3():
    dict_0 = {}
    var_0 = module_0.Validation(dict_0, dict_0)


def test_case_4():
    complex_0 = -2661.457 - 3359.783657j
    validation_0 = module_0.Validation(complex_0, complex_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.to_maybe()
    var_2 = var_1.to_lazy()
    validation_0.to_maybe()


def test_case_5():
    str_0 = "zp-il<a"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.is_fail()
    var_0.to_try()


def test_case_6():
    bytes_0 = b"n{\x87\xcf\x10'qC\x0e"
    bytes_1 = b'&\xff\x96w\x08"\x85\xa8k\x03\xe3\xdf\xd7)\t'
    list_0 = [bytes_0, bytes_1, bytes_0, bytes_1]
    tuple_0 = (bytes_0, bytes_1, list_0)
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_either()
    none_type_0 = None
    validation_0.map(none_type_0)


def test_case_7():
    bytes_0 = b">k\xb7\x87a\xafz\xa0\xe6\x9f~\xeb\xb1D>Fl"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    none_type_0 = None
    validation_0.bind(none_type_0)


def test_case_8():
    int_0 = -3426
    list_0 = [int_0]
    complex_0 = -1136.344 - 1375.9j
    none_type_0 = None
    validation_0 = module_0.Validation(complex_0, none_type_0)
    validation_0.ap(list_0)


def test_case_9():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_lazy()
    var_0.to_lazy()


def test_case_10():
    float_0 = 240.945753
    validation_0 = module_0.Validation(float_0, float_0)
    validation_0.to_try()


def test_case_11():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0]
    validation_0 = module_0.Validation(dict_0, list_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.to_either()
    var_2 = var_0.to_try()
    var_3 = validation_0.__eq__(dict_0)
    var_4 = var_2.__eq__(var_0)
    var_2.ap(var_4)


def test_case_12():
    bool_0 = True
    str_0 = "P"
    validation_0 = module_0.Validation(bool_0, str_0)
    var_0 = validation_0.to_maybe()
    str_0.ap(bool_0)


def test_case_13():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0]
    validation_0 = module_0.Validation(list_0, dict_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_either()
    object_0 = module_1.object()
    var_2 = validation_0.__eq__(dict_0)
    var_3 = var_2.__str__()
    object_0.ap(var_3)


def test_case_14():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.__str__()
    var_1 = var_0.__eq__(dict_0)
    list_0 = [dict_0, dict_0, dict_0]
    validation_1 = module_0.Validation(list_0, dict_0)
    var_2 = validation_1.to_maybe()
    var_3 = validation_1.to_box()
    var_4 = var_2.to_try()
    var_5 = validation_1.__eq__(dict_0)
    validation_1.bind(dict_0)


def test_case_15():
    str_0 = "Tay`XR*"
    validation_0 = module_0.Validation(str_0, str_0)
    int_0 = 0
    none_type_0 = None
    validation_1 = module_0.Validation(int_0, none_type_0)
    var_0 = validation_1.__eq__(validation_0)
    var_0.is_fail()


def test_case_16():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0]
    validation_0 = module_0.Validation(list_0, dict_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_box()
    var_2 = validation_0.to_either()
    var_3 = var_1.to_try()
    var_4 = validation_0.__eq__(dict_0)
    validation_0.bind(dict_0)


def test_case_17():
    bytes_0 = b"n{\xcf\x10'qC\x80"
    bytes_1 = b'&\xff\x96w\x08"\x85\xa8k\x03\xe3\xdf\xd7)\t'
    list_0 = [bytes_0, bytes_1, bytes_0, bytes_1]
    tuple_0 = (bytes_0, bytes_1, list_0)
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.__str__()
    var_0.to_either()
