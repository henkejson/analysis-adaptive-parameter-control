# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bytes_0 = b"\x9e\x11\x83\x14\x19"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(bytes_0)


def test_case_1():
    bytes_0 = b"\x16\x02{2\xdf\x9b\xb9"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.is_fail()
    var_1.to_box()


def test_case_2():
    bytes_0 = b"\x16\x02{2\xdf\x9b\xb9"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_0.to_either()


def test_case_3():
    bytes_0 = b"\x16\x02{2\xdf\x9b\xb9"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.to_either()
    var_1.to_either()


def test_case_4():
    bytes_0 = b"!}$\x8d\xdc<\xce\xb2"
    validation_0 = module_0.Validation(bytes_0, bytes_0)


def test_case_5():
    complex_0 = -67.8319 + 412.588j
    validation_0 = module_0.Validation(complex_0, complex_0)
    validation_0.to_either()


def test_case_6():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.is_fail()
    var_2 = var_1.__str__()
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    validation_1.bind(var_2)


def test_case_7():
    str_0 = "\n        Transform Box into Validation.\n\n        :returns: successfull Validation monad with previous value\n        :rtype: Validation[A, []]\n        "
    none_type_0 = None
    bool_0 = True
    validation_0 = module_0.Validation(none_type_0, bool_0)
    validation_0.map(str_0)


def test_case_8():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.ap(none_type_0)


def test_case_9():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_box()


def test_case_10():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()


def test_case_11():
    int_0 = -1000
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, int_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_either()
    none_type_1 = None
    validation_1 = module_0.Validation(int_0, none_type_1)
    validation_1.to_try()


def test_case_12():
    bytes_0 = b"(\x93o8y\xd5\xa2\xc7\xe1-\xf0\xc1\x12\x8f\n\xf6\x8d1?"
    float_0 = 2166.78249
    validation_0 = module_0.Validation(bytes_0, float_0)
    validation_0.to_try()


def test_case_13():
    bytes_0 = b"]=z\xc0\x81Lx>A\xb3\xd8\xc2\xee5\xd8\xb0"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_try()
    var_2 = validation_0.__eq__(validation_0)
    var_3 = var_1.__eq__(bytes_0)
    var_3.to_try()


def test_case_14():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_either()


def test_case_15():
    bytes_0 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.is_fail()
    var_1.to_box()


def test_case_16():
    bytes_0 = b"]=z\xc0\x81Lx>A\xb3\xd8\xc2\xee5x\xd8\xb0"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = module_0.Validation(bytes_0, validation_0)
    var_1 = validation_0.__eq__(validation_0)
    var_2 = validation_0.__eq__(var_0)
    var_3 = validation_0.__str__()
    var_4 = var_0.to_box()
    var_3.map(var_4)
