# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bool_0 = False
    tuple_0 = (bool_0,)
    bytes_0 = b"\xca\xbe\xcb\x8c&\xac\xf0U%\xd4\x03\xe7"
    int_0 = -2630
    set_0 = {tuple_0, bool_0, bytes_0, int_0}
    str_0 = "~Y[O`"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(set_0)
    var_0.to_maybe()


def test_case_1():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.__str__()
    var_0.is_success()


def test_case_2():
    str_0 = "Min[value={}]"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_try()
    var_1 = var_0.__eq__(var_0)
    var_2 = validation_0.__str__()
    var_3 = validation_0.is_success()
    var_4 = validation_0.to_maybe()
    var_5 = var_4.__eq__(var_4)
    validation_0.bind(str_0)


def test_case_3():
    bool_0 = False
    dict_0 = {}
    str_0 = "`rp'[G`Y`}"
    validation_0 = module_0.Validation(str_0, dict_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.__eq__(str_0)
    var_1.bind(bool_0)


def test_case_4():
    none_type_0 = None
    str_0 = "\n        Take 2 functions call only one of then with either value and return her result.\n\n        :params error: function to call when Either is Left\n        :type error: Function(A) -> B\n        :params success: function to call when Either is Right\n        :type success: Function(A) -> B\n        :returns: result of success handler when Eihter is Right, result of error handler when Eihter is Left\n        :rtpye: B\n        "
    validation_0 = module_0.Validation(none_type_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_try()
    var_2 = var_1.bind(none_type_0)
    var_2.to_try()


def test_case_5():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.to_maybe()
    var_2 = validation_0.__eq__(dict_0)
    var_1.is_fail()


def test_case_6():
    none_type_0 = None
    none_type_0.ap(none_type_0)


def test_case_7():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_8():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.to_either()


def test_case_9():
    int_0 = 619
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.is_fail()


def test_case_10():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.map(none_type_0)


def test_case_11():
    str_0 = "1\x0b8|@TV\x0bC"
    none_type_0 = None
    validation_0 = module_0.Validation(str_0, none_type_0)
    var_0 = validation_0.__eq__(str_0)
    validation_0.bind(validation_0)


def test_case_12():
    int_0 = 2096
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.ap(int_0)


def test_case_13():
    int_0 = 619
    validation_0 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.__eq__(var_0)
    var_2 = validation_0.to_lazy()
    validation_0.__str__()


def test_case_14():
    int_0 = -1199
    validation_0 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.to_lazy()
    validation_0.to_try()


def test_case_15():
    none_type_0 = None
    none_type_1 = None
    validation_0 = module_0.Validation(none_type_1, none_type_1)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_try()
    var_1.bind(none_type_0)


def test_case_16():
    int_0 = -1199
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.to_try()


def test_case_17():
    int_0 = 619
    validation_0 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_lazy()
    var_2 = var_1.to_maybe()
    validation_0.__str__()


def test_case_18():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    complex_0 = -1053.7935322469843 + 37j
    validation_1 = module_0.Validation(complex_0, complex_0)
    var_0 = validation_0.__eq__(validation_1)
    var_1 = validation_0.__str__()
    var_1.to_maybe()
