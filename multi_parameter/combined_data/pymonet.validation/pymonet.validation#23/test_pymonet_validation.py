# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(none_type_0)


def test_case_1():
    bytes_0 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    var_0.to_box()


def test_case_2():
    bytes_0 = b"\xf6\xf7\xa6\x19}\x1d\xc7A\x8fc\x16\xf2\x19\xfc\xdd\xc7\xc5"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.__str__()
    var_1.ap(var_1)


def test_case_3():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)


def test_case_4():
    str_0 = "hGA0u\x0bez|`"
    bytes_0 = b"\x8cE\x9a3\xab"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_try()
    var_1 = var_0.__str__()
    var_2 = var_1.__eq__(str_0)
    var_2.is_fail()


def test_case_5():
    bool_0 = True
    none_type_0 = None
    bool_1 = False
    dict_0 = {
        bool_1: bool_1,
        bool_1: bool_1,
        bool_1: bool_0,
        bool_1: none_type_0,
        none_type_0: none_type_0,
    }
    validation_0 = module_0.Validation(none_type_0, dict_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_lazy()
    var_2 = var_1.bind(dict_0)
    var_3 = var_1.bind(bool_1)
    var_4 = var_2.ap(bool_1)
    var_5 = validation_0.is_fail()
    var_5.to_lazy()


def test_case_6():
    int_0 = 4979
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, int_0)
    validation_0.map(int_0)


def test_case_7():
    float_0 = 2450.424
    validation_0 = module_0.Validation(float_0, float_0)
    validation_0.bind(validation_0)


def test_case_8():
    float_0 = 772.30376
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.ap(float_0)


def test_case_9():
    bool_0 = True
    none_type_0 = None
    validation_0 = module_0.Validation(bool_0, none_type_0)
    var_0 = validation_0.to_box()


def test_case_10():
    bool_0 = True
    none_type_0 = None
    bool_1 = False
    dict_0 = {
        bool_1: bool_1,
        bool_1: bool_1,
        bool_1: bool_0,
        bool_1: none_type_0,
        none_type_0: none_type_0,
    }
    validation_0 = module_0.Validation(none_type_0, dict_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_lazy()
    none_type_0.to_lazy()


def test_case_11():
    tuple_0 = ()
    bool_0 = True
    tuple_1 = (tuple_0, bool_0)
    bytes_0 = b"\xba\xab\xb02\xaeT\x06\xd1\xd5N\xd6"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    none_type_0 = None
    validation_0 = module_0.Validation(dict_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_maybe()
    var_1.map(tuple_1)


def test_case_12():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_lazy()
    set_0 = set()
    validation_1 = module_0.Validation(dict_0, set_0)
    var_1 = validation_1.is_success()
    var_2 = validation_0.to_either()
    var_3 = var_2.ap(none_type_0)
    var_4 = var_2.__eq__(var_1)
    var_5 = validation_1.to_either()
    var_0.is_success()


def test_case_13():
    bytes_0 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_box()
    var_2 = var_1.to_either()
    var_3 = var_2.to_lazy()
    var_4 = var_3.__str__()
    var_4.to_lazy()


def test_case_14():
    bytes_0 = b"8\xe7\xcbj*b"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    validation_0 = module_0.Validation(bytes_0, dict_0)
    var_0 = validation_0.is_fail()
    var_1 = var_0.__str__()
    var_2 = validation_0.to_maybe()
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, var_2)
    var_3 = validation_1.__eq__(validation_1)
    var_4 = validation_0.__eq__(validation_1)
    var_4.is_fail()
