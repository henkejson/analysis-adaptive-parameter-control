# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    tuple_0 = ()
    str_0 = "\n        Take function and applied this function with monad value and eturns function result.\n\n        :params binder: function to apply on monad value\n        :type binder: Function(A) -> Try[B]        :returns: for successfully result of binder, oBhercase copy of self\n        :rtype: Try[B]\n        "
    none_type_0 = None
    validation_0 = module_0.Validation(str_0, none_type_0)
    var_0 = validation_0.__eq__(tuple_0)
    var_0.ap(var_0)


def test_case_1():
    bool_0 = False
    list_0 = [bool_0]
    validation_0 = module_0.Validation(bool_0, list_0)
    validation_1 = validation_0.to_lazy()
    var_0 = validation_0.__str__()
    var_0.map(validation_0)


def test_case_2():
    int_0 = 1578
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_either()
    int_0.to_maybe()


def test_case_3():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)


def test_case_4():
    bytes_0 = b"\x92\x0f{\x10{"
    none_type_0 = None
    validation_0 = module_0.Validation(bytes_0, none_type_0)
    validation_0.to_try()


def test_case_5():
    bool_0 = False
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.__str__()
    var_1 = module_0.Validation(tuple_0, bool_0)
    var_1.is_fail()


def test_case_6():
    none_type_0 = None
    int_0 = -1175
    none_type_1 = None
    validation_0 = module_0.Validation(int_0, none_type_1)
    validation_0.map(none_type_0)


def test_case_7():
    bool_0 = True
    none_type_0 = None
    validation_0 = module_0.Validation(bool_0, none_type_0)
    validation_0.bind(bool_0)


def test_case_8():
    list_0 = []
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    bool_0 = True
    tuple_0 = ()
    tuple_1 = (bool_0, tuple_0)
    validation_1 = module_0.Validation(list_0, tuple_1)
    validation_0.ap(list_0)


def test_case_9():
    int_0 = 1024
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.is_success()
    var_1.is_fail()


def test_case_10():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_0.to_lazy()


def test_case_11():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_either()
    var_1.is_fail()


def test_case_12():
    bool_0 = True
    str_0 = "fQK"
    tuple_0 = (str_0,)
    validation_0 = module_0.Validation(tuple_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_box()
    var_1.ap(bool_0)


def test_case_13():
    none_type_0 = None
    tuple_0 = ()
    tuple_1 = (tuple_0, tuple_0)
    none_type_1 = None
    validation_0 = module_0.Validation(none_type_1, tuple_1)
    validation_1 = module_0.Validation(validation_0, none_type_0)
    var_0 = validation_1.__eq__(validation_0)
    var_1 = validation_1.to_lazy()
    var_2 = validation_0.to_maybe()
    var_0.to_maybe()


def test_case_14():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)


def test_case_15():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.to_maybe()
    var_1.is_fail()
