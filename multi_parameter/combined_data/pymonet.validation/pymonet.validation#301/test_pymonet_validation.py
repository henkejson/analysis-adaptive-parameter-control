# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    str_0 = "{9b)t.~)/@PB0"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(str_0)
    validation_1 = module_0.Validation(str_0, str_0)


def test_case_1():
    none_type_0 = None
    set_0 = set()
    validation_0 = module_0.Validation(none_type_0, set_0)
    var_0 = validation_0.__str__()
    var_0.is_fail()


def test_case_2():
    bytes_0 = b"\x83\x8b\x104"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()


def test_case_3():
    bytes_0 = b"\xc7"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()


def test_case_4():
    str_0 = 'j{;[49"U{D6{9\t1'
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, str_0)
    var_0 = validation_0.to_maybe()


def test_case_5():
    str_0 = "\n    Function for return function depended on first function argument\n    cond get list of two-item tuples,\n    first is condition_function, second is execute_function.\n    Returns this execute_function witch first condition_function return truly value.\n\n    :param condition_list: list of two-item tuples (condition_function, execute_function)\n    :type condition_list: List[(Function, Function)]\n    :returns: Returns this execute_function witch first condition_function return truly value\n    :rtype: Function\n    "
    validation_0 = module_0.Validation(str_0, str_0)


def test_case_6():
    str_0 = "RA{"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_try()


def test_case_7():
    bytes_0 = b"-\x8bY4"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.is_fail()


def test_case_8():
    bytes_0 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_0.map(validation_0)


def test_case_9():
    int_0 = 49
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.bind(int_0)


def test_case_10():
    str_0 = "x;u$]\nHx3I;Df3"
    validation_0 = module_0.Validation(str_0, str_0)
    validation_0.ap(str_0)


def test_case_11():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_box()


def test_case_12():
    str_0 = "\n    Function for return function depended on first function argument\n    cond get list of two-item tuples,\n    first is condition_function, second is execute_function.\n    Returns thisgexecute_function witch first condition_function return truly value.\n\n    :param condit\non_list: list of two-item tuples (condition_function, execute_function)\n    :type condition_list: List[(Function, Function)]\n    :returns: Returns this execute_function witch first condition_function return truly value\n    :rtype: Function\n    "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_lazy()


def test_case_13():
    int_0 = -726
    list_0 = [int_0, int_0, int_0]
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_either()
    var_2 = var_1.to_lazy()


def test_case_14():
    str_0 = "`EbpiHNxK[G~(7"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(validation_0)


def test_case_15():
    dict_0 = {}
    none_type_0 = None
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.__eq__(none_type_0)
    var_1 = var_0.__eq__(none_type_0)
    var_2 = validation_0.to_maybe()
    validation_0.map(var_1)


def test_case_16():
    dict_0 = {}
    none_type_0 = None
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_either()
    validation_0.ap(none_type_0)


def test_case_17():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.to_box()
    bool_0 = True
    validation_1 = module_0.Validation(var_0, bool_0)
    var_2 = validation_0.__eq__(validation_1)
    validation_1.to_try()
