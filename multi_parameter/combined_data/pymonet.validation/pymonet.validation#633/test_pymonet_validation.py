# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0
import builtins as module_1


def test_case_0():
    bytes_0 = b"\x9eA\xed\xd3\xb0\xbe\x9f\xc1\xd6\xf2"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.__eq__(var_0)
    var_1.to_box()


def test_case_1():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_try()
    var_1 = validation_0.__str__()
    validation_1 = module_0.Validation(var_0, var_0)
    validation_1.is_success()


def test_case_2():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_3():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.to_maybe()


def test_case_4():
    complex_0 = -4309.3 + 272.8j
    none_type_0 = None
    validation_0 = module_0.Validation(complex_0, none_type_0)
    validation_0.is_fail()


def test_case_5():
    dict_0 = {}
    bool_0 = True
    none_type_0 = None
    validation_0 = module_0.Validation(bool_0, none_type_0)
    validation_0.map(dict_0)


def test_case_6():
    str_0 = 'Ah~kc30qG"'
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    validation_0 = module_0.Validation(list_0, bool_0)
    validation_0.bind(str_0)


def test_case_7():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.ap(validation_0)


def test_case_8():
    bool_0 = True
    int_0 = -3174
    validation_0 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.to_either()
    var_1.bind(bool_0)


def test_case_9():
    float_0 = -2039.15224
    bytes_0 = b"nN"
    list_0 = [bytes_0]
    tuple_0 = (float_0, bytes_0, list_0, list_0)
    object_0 = module_1.object()
    none_type_0 = None
    validation_0 = module_0.Validation(object_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_try()
    var_2 = var_1.__str__()
    var_2.map(tuple_0)


def test_case_10():
    list_0 = []
    none_type_0 = None
    validation_0 = module_0.Validation(list_0, none_type_0)
    validation_1 = module_0.Validation(validation_0, list_0)
    var_0 = validation_1.to_try()


def test_case_11():
    tuple_0 = ()
    str_0 = "eC0Te;)K8d<?&Gk\\\nx:"
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_try()
    var_1 = validation_0.__str__()
    var_2 = validation_0.to_either()
    validation_1 = module_0.Validation(str_0, str_0)
    var_3 = validation_1.is_success()
    var_3.is_fail()


def test_case_12():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.__eq__(var_0)
    var_2 = validation_0.to_box()
    var_2.map(var_1)


def test_case_13():
    bytes_0 = b"A\xed\xd3\xb0\xbe\x9f\xc1\xd6"
    none_type_0 = None
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.to_either()
    var_2 = validation_0.__eq__(var_1)
    var_3 = var_1.bind(none_type_0)
    var_2.is_success()


def test_case_14():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = module_0.Validation(bool_0, validation_0)
    var_1 = var_0.__eq__(validation_0)
    var_2 = validation_0.__eq__(var_0)
    var_3 = validation_0.to_box()
    var_1.to_box()


def test_case_15():
    str_0 = "N.(xV~DHyeV%"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_box()
    var_2 = var_1.__str__()
    var_2.to_maybe()


def test_case_16():
    bytes_0 = b"\x9eA\xed\xb2\xb0\xb0\x9f<\xd6\xf2"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_1 = module_0.Validation(bytes_0, validation_0)
    var_0 = validation_1.__eq__(validation_1)
    var_1 = validation_1.to_lazy()
    var_2 = validation_0.__str__()
    var_3 = validation_0.to_either()
    var_4 = validation_0.to_lazy()
    var_2.to_either()


def test_case_17():
    bytes_0 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.is_fail()
    bool_0 = False
    var_2 = validation_0.__eq__(bool_0)
    var_1.to_maybe()
