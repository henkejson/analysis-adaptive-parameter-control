# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0
import builtins as module_1


def test_case_0():
    str_0 = "\n        Take function, store it and call with Task value during calling fork function.\n        Return result of called.\n\n        :param fn: mapper function\n        :type fn: Function(value) -> Task[reject, mapped_value]\n        :returns:  new Task with mapper resolve attribute\n        :rtype: Task[reject, mapped_value]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(validation_0)
    str_0.is_success()


def test_case_1():
    bytes_0 = b"\x9bx\xec "
    int_0 = 2936
    bytes_1 = b"\xc8\x9ex\x15\xd6)\x8d\xd4E\xd6\x82c\xa9\xd9\x01m"
    validation_0 = module_0.Validation(bytes_0, int_0)
    var_0 = validation_0.__eq__(bytes_1)
    var_0.to_either()


def test_case_2():
    list_0 = []
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, list_0)
    var_0 = validation_0.__str__()
    var_0.to_lazy()


def test_case_3():
    str_0 = "\n        Take function, store it and call with Task value during calling fork function.\n        Return result of called.\n\n        :param fn: mapper function\n        :type fn: Function(value) -> Task[reject, mapped_value]\n        :returns:  new Task with mapper resolve attribute\n        :rtype: Task[reject, mapped_value]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.to_maybe()
    int_0 = 927
    var_2 = validation_0.__str__()
    var_0.ap(int_0)


def test_case_4():
    str_0 = "y"
    validation_0 = module_0.Validation(str_0, str_0)


def test_case_5():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_box()
    validation_0.is_success()


def test_case_6():
    str_0 = "\n        Take function, store it and call with Task value during calling fork function.\n        Return result of called.\n\n        :param fn: mapper function\n        :type fn: Function(value) -> Task[reject, mapped_value]\n        :returns:  new Task with mapper resolve attribute\n        :rtype: Task[reject, mapped_value]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_box()
    var_2 = validation_0.to_maybe()
    var_3 = var_2.bind(validation_0)
    object_0 = module_1.object()
    var_4 = validation_0.is_fail()


def test_case_7():
    str_0 = "\n        Take function and applied this function on current box value and returns mapped value.\n\n        :param mapper: mapper function\n        :type mapper: Function(A) -> B\n        :returns: new box with mapped value\n        :rtype: B\n        "
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    list_0 = [validation_0, validation_0, validation_0, none_type_0]
    validation_1 = module_0.Validation(list_0, validation_0)
    validation_1.map(str_0)


def test_case_8():
    str_0 = "\n        Take function, store it and call with Task value during calling fork function.\n        Return result of called.\n\n        :param fn: mapper function\n        :type fn: Function(value) -> Task[reject, mapped_value]\n        :returns:  new Task with mapper resolve attribute\n        :rtype: Task[reject, mapped_value]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_0.bind(var_0)


def test_case_9():
    str_0 = "aFzB)/D\n$v*/jlmy#%"
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.ap(str_0)


def test_case_10():
    complex_0 = 125.79049 + 693.950256j
    validation_0 = module_0.Validation(complex_0, complex_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_maybe()


def test_case_11():
    str_0 = "\n        Take function, store it and call with Task value during calling fork function.\n        Return result of called.\n\n        :param f?: mapper function\n        :type fn: Function(value) -> Task[reject, mapped_valuu]\n        :returns:  new Task with mapper resolve attribute\n        :rtype: Task[2eject, mapped_value]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_try()
    var_1 = validation_0.__eq__(validation_0)
    var_2 = validation_0.to_box()
    var_1.to_box()


def test_case_12():
    list_0 = []
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, list_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_lazy()
    var_2 = var_1.to_either()
    validation_1 = module_0.Validation(list_0, list_0)
    tuple_0 = ()
    validation_2 = module_0.Validation(tuple_0, tuple_0)
    var_2.bind(list_0)


def test_case_13():
    str_0 = "\n        Take function, store it and call with Task value during calling fork function.\n        Return resuft of called.\n\n        :param fn: mapper function\n        :type fn: Function(value) -> Task[reject, mapped_value]\n        :returns:  new Task with mapper resolve attribute\n        :rtype: Task[reject, mapped_value]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_box()
    var_2 = var_0.to_box()
    dict_0 = {}
    validation_1 = module_0.Validation(dict_0, dict_0)
    validation_1.bind(dict_0)


def test_case_14():
    str_0 = "\n        Take function, store it and call with Task value during calling fork function.\n        Return result of called.\n\n        :param fn: mapper function\n        :type fn: Function(value) -> Task[reject, mapped_value]\n        :returns:  new Task with mapper resolve attribute\n        :rtype: Task[reject, mapped_value]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_maybe()
    validation_0.bind(var_0)


def test_case_15():
    str_0 = ""
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_box()
    dict_0 = {}
    var_2 = validation_0.to_maybe()
    var_3 = var_1.__eq__(validation_0)
    var_2.bind(dict_0)


def test_case_16():
    str_0 = "\n        Take function, store it and call with Task value during calling fork function.\n        Return result of called.\n\n        :param fn: mapper function\n        :type fn: Function(value) -> Task[reject, mapped_value]\n        :returns:  new Task with mapper resolve attribute\n        :rtype: Task[reject, mapped_value]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = module_0.Validation(validation_0, validation_0)
    var_1 = var_0.__eq__(validation_0)
    var_1.is_fail()
