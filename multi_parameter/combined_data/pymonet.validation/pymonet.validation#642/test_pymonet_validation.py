# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.__eq__(validation_0)
    validation_1 = module_0.Validation(var_1, var_1)
    var_2 = var_1.__eq__(validation_0)
    validation_0.to_maybe()


def test_case_1():
    none_type_0 = None
    none_type_1 = None
    validation_0 = module_0.Validation(none_type_1, none_type_1)
    var_0 = validation_0.__eq__(none_type_0)
    var_0.is_fail()


def test_case_2():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.__str__()
    var_0.is_success()


def test_case_3():
    bytes_0 = b"_x8\x17V\xf2\xa2.\x00"
    float_0 = -105.050338
    str_0 = "U;b\\qDPvFhn"
    tuple_0 = (bytes_0, float_0, str_0)
    validation_0 = module_0.Validation(tuple_0, bytes_0)
    var_0 = validation_0.__str__()
    var_0.to_try()


def test_case_4():
    bytes_0 = b"=\xbfX"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()


def test_case_5():
    float_0 = 1803.4
    validation_0 = module_0.Validation(float_0, float_0)


def test_case_6():
    bool_0 = False
    none_type_0 = None
    validation_0 = module_0.Validation(bool_0, none_type_0)
    validation_0.is_fail()


def test_case_7():
    none_type_0 = None
    none_type_1 = None
    validation_0 = module_0.Validation(none_type_1, none_type_1)
    validation_0.map(none_type_0)


def test_case_8():
    bool_0 = True
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    validation_0.bind(bool_0)


def test_case_9():
    bytes_0 = b"d\x9b]\xe7\x9d"
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.ap(bytes_0)


def test_case_10():
    bool_0 = True
    int_0 = 941
    validation_0 = module_0.Validation(bool_0, int_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.to_maybe()
    var_2 = var_1.__str__()
    var_3 = var_2.__str__()


def test_case_11():
    none_type_0 = None
    bool_0 = True
    bool_1 = True
    validation_0 = module_0.Validation(bool_1, bool_1)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.ap(bool_0)
    var_2 = var_1.ap(none_type_0)


def test_case_12():
    bool_0 = False
    complex_0 = -2116.46604 + 2732.032969j
    validation_0 = module_0.Validation(complex_0, bool_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_box()
    var_2 = var_1.__str__()
    var_2.bind(complex_0)


def test_case_13():
    none_type_0 = None
    none_type_1 = None
    validation_0 = module_0.Validation(none_type_1, none_type_1)
    var_0 = validation_0.__eq__(none_type_0)
    validation_0.to_try()


def test_case_14():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.is_fail()
    var_1 = validation_0.is_fail()
    var_2 = validation_0.to_maybe()
    var_3 = validation_0.to_maybe()
    var_4 = var_2.to_try()
    var_2.is_fail()


def test_case_15():
    none_type_0 = None
    bytes_0 = b" \xbcT\xf7\x91"
    validation_0 = module_0.Validation(none_type_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_lazy()
    validation_1 = module_0.Validation(validation_0, var_1)
    var_2 = var_1.ap(none_type_0)
    var_3 = var_2.to_try()
    var_3.is_success()


def test_case_16():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_either()
    var_0.is_success()


def test_case_17():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    float_0 = -3623.664193
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_1.to_box()
    validation_2 = module_0.Validation(float_0, float_0)
    var_2 = validation_1.__eq__(validation_1)
    var_3 = validation_2.__eq__(validation_1)
    validation_2.bind(float_0)
