# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_1 = module_0.Validation(none_type_0, var_0)
    validation_1.is_fail()


def test_case_1():
    bytes_0 = b"*\xb6\xbe\x01Z\x94\xec\xa3\xe9;?v\xc9+\r\xc9YK"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(bytes_0)
    var_1 = validation_0.is_fail()
    var_1.bind(validation_0)


def test_case_2():
    str_0 = "\n    Perform right-to-left function composition.\n\n    :param value: argument of first applied function\n    :type value: Any\n    :param functions: list of functions to applied from right-to-left\n    :type functions: List[Function]\n    :returns: result of all functions\n    :rtype: Any\n    "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.to_maybe()
    var_2 = validation_0.to_either()
    var_3 = var_0.map(str_0)
    var_0.is_success()


def test_case_3():
    list_0 = []
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, list_0)
    var_0 = validation_0.to_maybe()
    var_0.is_fail()


def test_case_4():
    bytes_0 = b"*\xb6\xbe\x01Z\x94\xec\xa3\xe9;?v\xc9+\r\xc9YK"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.__str__()
    var_2 = validation_0.__eq__(bytes_0)
    var_3 = validation_0.is_fail()
    var_3.bind(validation_0)


def test_case_5():
    int_0 = 711
    int_0.is_fail()


def test_case_6():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_7():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.__str__()


def test_case_8():
    bool_0 = False
    bool_1 = True
    list_0 = [bool_1]
    validation_0 = module_0.Validation(list_0, list_0)
    validation_0.map(bool_0)


def test_case_9():
    bool_0 = False
    bytes_0 = b"\xa8\xfb"
    set_0 = {bytes_0, bytes_0}
    validation_0 = module_0.Validation(set_0, bytes_0)
    var_0 = validation_0.to_box()
    validation_1 = module_0.Validation(var_0, var_0)
    validation_1.bind(bool_0)


def test_case_10():
    complex_0 = 94.232 - 696.9j
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    validation_0.ap(complex_0)


def test_case_11():
    bool_0 = True
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, bool_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.to_maybe()
    var_2 = var_1.__eq__(bool_0)
    validation_1 = module_0.Validation(bool_0, bool_0)
    validation_1.is_fail()


def test_case_12():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    validation_0 = module_0.Validation(none_type_0, list_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_maybe()
    var_2 = var_1.to_box()
    var_2.ap(none_type_0)


def test_case_13():
    bytes_0 = b"*\xb6\xbe\x01Z\x94\xec\xa3\xe9;?v\xc9+\r\xc9YK"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_try()
    var_2 = validation_0.is_fail()
    var_2.bind(validation_0)


def test_case_14():
    bytes_0 = b"*\xb6\xbe\x01Z\x94\xec\xa3\xe9;?v\xc9+\r\xc9YK"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.__eq__(bytes_0)
    var_2 = validation_0.is_fail()
    var_2.bind(validation_0)


def test_case_15():
    bool_0 = False
    dict_0 = {}
    validation_0 = module_0.Validation(bool_0, dict_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.is_fail()
    var_1.is_fail()


def test_case_16():
    tuple_0 = ()
    none_type_0 = None
    none_type_1 = None
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.__eq__(none_type_1)
    var_2 = var_1.__eq__(none_type_0)
    var_2.to_try()


def test_case_17():
    complex_0 = 419.705 + 1527.2341j
    validation_0 = module_0.Validation(complex_0, complex_0)
    none_type_0 = None
    validation_1 = module_0.Validation(complex_0, none_type_0)
    var_0 = validation_1.__eq__(validation_0)
    var_1 = validation_1.to_box()
    var_0.map(validation_0)
