# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bytes_0 = b"\x03\x1e\x7f\xd44\xb1\xbd\x93\x1c0/\xde\xb5M\xd6\xe2"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(bytes_0)
    var_0.ap(var_0)


def test_case_1():
    bytes_0 = b"\x03\x1e\x7f\xd44\xb1\xbd\x93\x1c0/\xde\xb5M\xd6\xe2"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.is_success()
    var_1 = validation_0.to_maybe()
    var_2 = validation_0.to_lazy()
    var_3 = validation_0.to_either()
    var_4 = var_2.to_maybe()
    var_3.is_success()


def test_case_2():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)


def test_case_3():
    str_0 = "\n        Call argument function with args in try-catch.\n        when function don't raise exception, not successfully when raise.\n\n        :params fn: function to call and store in monad\n        :type fn: Function(*args) -> A\n        :params *args:\n        :type fn: List\n        :retruns: Successfully monad Try when function don't raise exception, not successfully when raise\n        :rtype: Try[A]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_try()


def test_case_4():
    str_0 = "}9\x0cO'[\r"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.is_fail()
    var_0.to_try()


def test_case_5():
    bytes_0 = b"\x03\x1e\x7f\xd44\xb1\xbd\x93\x1c0/\xde\xb5M\xd6\xe2"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.to_lazy()
    var_2 = validation_0.to_either()
    validation_0.map(var_0)


def test_case_6():
    bool_0 = False
    int_0 = 1578
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.bind(bool_0)


def test_case_7():
    int_0 = 2202
    bytes_0 = b"\x94!\x14\x11\xad\x89)\xe7\x82\x17"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_0.ap(int_0)


def test_case_8():
    str_0 = "|?J\t*dQFN?}T"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.is_fail()
    var_2 = validation_0.to_lazy()
    var_3 = validation_0.to_try()
    var_4 = validation_0.__str__()
    var_5 = var_1.__str__()
    var_6 = var_5.__str__()
    var_7 = validation_0.to_maybe()


def test_case_9():
    bytes_0 = b"\x98N\x0c\xfcP\x1dy\xad\xf4"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.ap(bytes_0)
    var_1.to_maybe()


def test_case_10():
    str_0 = "\n        Call argument function with args in try-catch.\n        when function don't raise exception, not successfully when raise.\n\n        :params fn: function to call and store in monad\n        :type fn: Function(*args) -> A\n        :params *args:\n        :type fn: List\n        :retruns: Successfully monad Try when function don't raise exception, not successfully when raise\n        :rtype: Try[A]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(validation_0)


def test_case_11():
    bytes_0 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_try()
    var_1 = validation_0.__eq__(validation_0)
    var_2 = validation_0.__str__()
    var_3 = validation_0.to_either()
    var_4 = module_0.Validation(var_2, var_1)
    var_5 = var_3.to_try()
    var_6 = validation_0.__str__()
    var_7 = validation_0.__eq__(var_4)
    var_5.to_lazy()


def test_case_12():
    bytes_0 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(bytes_0)
    var_1 = validation_0.to_either()
    var_0.ap(var_0)


def test_case_13():
    bytes_0 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_try()
    var_1 = validation_0.__eq__(validation_0)
    var_2 = validation_0.__str__()
    var_3 = validation_0.to_either()
    var_4 = validation_0.to_maybe()
    var_5 = var_3.to_try()
    var_6 = validation_0.to_box()
    var_7 = validation_0.__str__()
    var_8 = var_2.__str__()
    dict_0 = {}
    var_5.ap(dict_0)
