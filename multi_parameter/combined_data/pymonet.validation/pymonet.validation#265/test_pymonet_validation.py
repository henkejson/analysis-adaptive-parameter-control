# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    none_type_0 = None
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    bytes_0 = b"\xf8\xa2\xc5\xa5!\x94"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(dict_0)
    var_1 = var_0.__str__()
    bool_0.ap(none_type_0)


def test_case_1():
    bytes_0 = b"\n\xbc\xb8\x18\xb8\xc9\xbb\xca\x92"
    set_0 = {bytes_0, bytes_0, bytes_0}
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.__str__()


def test_case_2():
    bytes_0 = b"\xb4\xf7\x07\xdf\xc9\xb8\\"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_try()
    var_1 = validation_0.to_either()


def test_case_3():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_4():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.__str__()
    var_1 = var_0.__str__()


def test_case_5():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.is_fail()


def test_case_6():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_box()
    validation_0.map(var_0)


def test_case_7():
    float_0 = 1007.838
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    validation_0 = module_0.Validation(list_0, bool_0)
    validation_0.bind(float_0)


def test_case_8():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    none_type_1 = None
    validation_1 = module_0.Validation(none_type_1, none_type_1)
    validation_1.ap(validation_1)


def test_case_9():
    float_0 = -992.678397
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_box()
    var_0.bind(float_0)


def test_case_10():
    bytes_0 = b"\x02\x90\x86yF[\x037\xa62"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_box()
    var_1.is_fail()


def test_case_11():
    int_0 = 901
    none_type_0 = None
    validation_0 = module_0.Validation(int_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)
    int_0.to_maybe()


def test_case_12():
    bytes_0 = b"\n\xbc\xb8\x18\xb8\xc9\xbb\xca\x92"
    set_0 = {bytes_0, bytes_0, bytes_0}
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_try()


def test_case_13():
    bytes_0 = b"\xb4\xf7\x07\xdf\xc9\xb8\\"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    none_type_0 = None
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_maybe()
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    var_2 = validation_1.__eq__(validation_0)
    var_3 = validation_0.to_try()
    var_0.bind(validation_1)


def test_case_14():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_either()
    validation_0.map(var_0)


def test_case_15():
    str_0 = ""
    validation_0 = module_0.Validation(str_0, str_0)
    validation_1 = module_0.Validation(validation_0, str_0)
    var_0 = validation_1.to_maybe()
    var_1 = validation_1.is_success()
    var_2 = validation_1.is_success()
    bool_0 = True
    validation_2 = module_0.Validation(bool_0, bool_0)
    validation_2.is_fail()
