# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    tuple_0 = ()
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(tuple_0)
    var_0.map(tuple_0)


def test_case_1():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_box()
    list_0 = []
    validation_1 = module_0.Validation(list_0, list_0)
    var_1 = validation_1.__str__()
    list_0.to_maybe()


def test_case_2():
    float_0 = 139.0
    str_0 = "\n        Create empty maybe.\n\n        :returns: Maybe[None]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(float_0)
    var_1 = validation_0.__str__()
    var_1.to_lazy()


def test_case_3():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.__eq__(var_0)
    var_2 = var_0.to_try()
    var_2.to_lazy()


def test_case_4():
    str_0 = "jikk9(N1"
    str_1 = ")Lr\r:}JG)OwL=lo\x0ch(4R"
    validation_0 = module_0.Validation(str_1, str_1)
    var_0 = validation_0.to_either()
    var_1 = var_0.ap(str_0)
    bool_0 = False
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    validation_1.bind(bool_0)


def test_case_5():
    int_0 = 257
    validation_0 = module_0.Validation(int_0, int_0)


def test_case_6():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.is_success()


def test_case_7():
    bool_0 = True
    none_type_0 = None
    validation_0 = module_0.Validation(bool_0, none_type_0)
    validation_0.is_fail()


def test_case_8():
    none_type_0 = None
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    validation_0.map(none_type_0)


def test_case_9():
    str_0 = "\n        :param fork: function to call during fork\n        :type fork: Function(reject, resolve) -> Any\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    validation_0.bind(validation_0)


def test_case_10():
    str_0 = "gZ~|{zAe,bqNz"
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.ap(str_0)


def test_case_11():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.to_lazy()
    var_2 = var_1.to_try()
    var_2.to_box()


def test_case_12():
    none_type_0 = None
    tuple_0 = ()
    validation_0 = module_0.Validation(none_type_0, tuple_0)
    var_0 = validation_0.to_lazy()


def test_case_13():
    bytes_0 = b"`"
    none_type_0 = None
    validation_0 = module_0.Validation(bytes_0, none_type_0)
    validation_0.to_try()


def test_case_14():
    str_0 = "jikk9(N1"
    str_1 = ")Lr\r:}JG)OwL=lo\x0ch(4R"
    validation_0 = module_0.Validation(str_1, str_1)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.ap(str_0)
    bool_0 = False
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    validation_1.bind(bool_0)


def test_case_15():
    float_0 = -503.119373
    none_type_0 = None
    validation_0 = module_0.Validation(float_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)
    var_0.to_maybe()


def test_case_16():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.to_maybe()
    var_1.bind(var_1)


def test_case_17():
    str_0 = "\n        :param fork: function to call during fork\n        :type fork: Function(reject, resolve) -> Any\n        "
    none_type_0 = None
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = module_0.Validation(str_0, none_type_0)
    var_1 = var_0.__eq__(validation_0)
    var_2 = validation_0.to_maybe()
    var_0.bind(none_type_0)
