# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    str_0 = "=i,e\x0b>4L<)zXG\t"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(str_0)
    var_1 = str_0.__eq__(str_0)


def test_case_1():
    str_0 = "\n        Take function (A) -> b and applied this function on current box value and returns new box with mapped value.\n\n        :param mapper: mapper function\n        :type mapper: Function(A) -> B\n        :returns: new box with mapped value\n        :rtype: Box[B]\n        "
    set_0 = {str_0, str_0, str_0}
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.is_success()
    var_2 = validation_0.to_box()


def test_case_2():
    none_type_0 = None
    set_0 = set()
    validation_0 = module_0.Validation(none_type_0, set_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.is_success()
    var_1.to_try()


def test_case_3():
    int_0 = -1922
    bool_0 = True
    str_0 = "\n        Applies the function inside the Maybe[A] structure to another applicative type for notempty Maybe.\n        For empty returns copy of itself\n\n        :param applicative: applicative contains function\n        :type applicative: Maybe[B]\n        :returns: new Maybe with result of contains function\n        :rtype: Maybe[A(B) | None]\n        "
    validation_0 = module_0.Validation(bool_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = module_0.Validation(var_0, int_0)
    var_2 = var_1.__eq__(int_0)
    var_2.to_maybe()


def test_case_4():
    float_0 = -672.0
    validation_0 = module_0.Validation(float_0, float_0)


def test_case_5():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.__str__()


def test_case_6():
    int_0 = 1509
    none_type_0 = None
    validation_0 = module_0.Validation(int_0, none_type_0)
    validation_0.is_fail()


def test_case_7():
    str_0 = "iNPNa"
    validation_0 = module_0.Validation(str_0, str_0)
    none_type_0 = None
    validation_0.map(none_type_0)


def test_case_8():
    int_0 = 4132
    set_0 = {int_0, int_0}
    validation_0 = module_0.Validation(set_0, set_0)
    none_type_0 = None
    var_0 = validation_0.__eq__(none_type_0)
    complex_0 = -774.5393 - 3933j
    validation_0.bind(complex_0)


def test_case_9():
    int_0 = 586
    set_0 = set()
    none_type_0 = None
    none_type_1 = None
    validation_0 = module_0.Validation(none_type_1, none_type_1)
    var_0 = validation_0.__eq__(none_type_0)
    validation_1 = module_0.Validation(set_0, set_0)
    validation_1.ap(int_0)


def test_case_10():
    none_type_0 = None
    none_type_1 = None
    validation_0 = module_0.Validation(none_type_1, none_type_1)
    var_0 = validation_0.__eq__(none_type_0)
    validation_1 = module_0.Validation(var_0, var_0)
    var_1 = validation_0.to_lazy()
    var_2 = validation_0.to_box()
    var_0.is_success()


def test_case_11():
    int_0 = 1453
    set_0 = {int_0, int_0}
    validation_0 = module_0.Validation(set_0, set_0)
    none_type_0 = None
    var_0 = validation_0.__eq__(none_type_0)
    var_1 = validation_0.to_lazy()
    var_2 = var_1.to_try()
    var_3 = validation_0.__eq__(var_0)
    var_4 = validation_0.to_lazy()
    var_5 = validation_0.to_either()
    validation_0.bind(var_3)


def test_case_12():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    validation_0 = module_0.Validation(set_0, bool_0)
    validation_0.to_try()


def test_case_13():
    str_0 = "\n        Take function (A) -> b and applied this function on current box value and returns new box with mapped value.\n\n        :param mapper: mapper function\n        :type mapper: Function(A) -> B\n        :returns: new box with mapped value\n        :rtype: Box[B]\n        "
    set_0 = {str_0, str_0, str_0}
    validation_0 = module_0.Validation(str_0, set_0)
    var_0 = validation_0.__str__()
    set_0.to_either()


def test_case_14():
    int_0 = 4132
    set_0 = {int_0, int_0}
    validation_0 = module_0.Validation(set_0, set_0)
    validation_1 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_2 = module_0.Validation(int_0, var_0)
    validation_0.bind(validation_2)


def test_case_15():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    none_type_0 = None
    var_0 = validation_0.__eq__(none_type_0)
    var_1 = var_0.__str__()
    var_2 = var_0.__str__()
    var_3 = validation_0.to_box()
    var_4 = validation_0.to_either()
    var_4.bind(validation_0)


def test_case_16():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.__str__()
    var_1 = var_0.__str__()
    var_2 = validation_0.is_fail()
    validation_1 = module_0.Validation(validation_0, validation_0)
    tuple_1 = (var_0, var_2)
    validation_2 = module_0.Validation(var_2, tuple_1)
    validation_3 = module_0.Validation(var_2, validation_1)
    validation_3.to_try()


def test_case_17():
    str_0 = "4z/G.aq@~do!w]4\x0b ."
    str_1 = "\n        Transform Lazy into Box with constructor_fn result.\n\n        :returns: Box monad with constructor_fn result\n        :rtype: Box[A]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = module_0.Validation(validation_0, str_1)
    validation_1 = validation_0.__eq__(var_1)
    var_2 = validation_1.__eq__(validation_1)
    var_3 = validation_1.__str__()
    var_2.ap(var_2)
