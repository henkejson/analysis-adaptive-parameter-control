# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    list_0 = []
    bytes_0 = b"|sg{\x89\x081:p\x9d4\xb8\xf5\x1f\x1dCT\xb9"
    float_0 = 3088.0
    validation_0 = module_0.Validation(bytes_0, float_0)
    var_0 = validation_0.__eq__(list_0)
    var_0.is_fail()


def test_case_1():
    bytes_0 = b"[\xe6\xae\xa7\xa1\x0f0\x16A2\x1c\xeeQ\xa7\x81\x87M"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, bytes_0)
    var_0 = validation_0.__str__()
    var_0.map(none_type_0)


def test_case_2():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_either()
    var_0.map(validation_0)


def test_case_3():
    str_0 = ".F3mGpvN-LWu9iJE"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_maybe()
    validation_1 = module_0.Validation(var_1, str_0)
    var_2 = var_1.__eq__(var_1)
    var_3 = var_1.to_box()
    var_3.is_success()


def test_case_4():
    str_0 = "VaomNWc^^"
    validation_0 = module_0.Validation(str_0, str_0)


def test_case_5():
    bytes_0 = b"[\xe6\xae\xa7\xa1\x0f0\x16A2\x1c\xeeQ\xa7\x81\x87M"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()


def test_case_6():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.is_fail()
    var_0.is_success()


def test_case_7():
    bytes_0 = b"\xad\xbe\x82\x91\xe3G\xa8"
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.map(bytes_0)


def test_case_8():
    int_0 = 2371
    bool_0 = True
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, bool_0)
    validation_0.bind(int_0)


def test_case_9():
    none_type_0 = None
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.ap(none_type_0)


def test_case_10():
    str_0 = '0OpF^kPSLZ)\nb"xr'
    complex_0 = 47.864 - 2648j
    none_type_0 = None
    validation_0 = module_0.Validation(complex_0, none_type_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.__str__()
    var_1.bind(str_0)


def test_case_11():
    str_0 = "VaomNPc^^"
    var_0 = module_0.Validation(str_0, str_0)
    var_1 = var_0.to_lazy()


def test_case_12():
    str_0 = "VamNWc^^"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.bind(str_0)
    var_1.to_either()


def test_case_13():
    bytes_0 = b"@wC\x0e=\xbd\xdd\x99f1"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    bool_0 = True
    validation_1 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_try()
    var_1 = validation_0.to_lazy()
    validation_1.to_either()


def test_case_14():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.to_box()
    var_2 = var_1.to_either()
    validation_1 = module_0.Validation(var_0, var_2)
    var_3 = validation_0.__eq__(validation_1)
    var_3.is_fail()


def test_case_15():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.is_success()
    float_0 = 1801.52819
    list_1 = [float_0, float_0]
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, list_1)
    var_2 = validation_0.is_success()
    var_3 = validation_1.to_box()
    validation_2 = module_0.Validation(none_type_0, none_type_0)
    var_2.map(var_3)


def test_case_16():
    none_type_0 = None
    str_0 = "VamNWc^^"
    validation_0 = module_0.Validation(none_type_0, str_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.__str__()
    var_1.to_box()


def test_case_17():
    none_type_0 = None
    list_0 = []
    validation_0 = module_0.Validation(none_type_0, list_0)
    var_0 = validation_0.__str__()
    var_0.is_success()
