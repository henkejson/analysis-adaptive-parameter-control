# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bool_0 = False
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(bool_0)


def test_case_1():
    bytes_0 = b"\xca\x89\xda\x1cx^sF\x88&\x95\xdd\xd8\xb9"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    var_0.is_fail()


def test_case_2():
    str_0 = "%VV']=}]~\t}98\tq"
    str_1 = "Z@mnUp\n_\nQ\n_99z"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0}
    validation_0 = module_0.Validation(dict_0, str_1)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_lazy()
    validation_1 = module_0.Validation(var_1, var_1)
    var_2 = validation_1.to_box()
    var_2.to_box()


def test_case_3():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_4():
    none_type_0 = None
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(none_type_0)
    var_1 = validation_0.to_box()
    validation_0.is_success()


def test_case_5():
    bool_0 = True
    none_type_0 = None
    validation_0 = module_0.Validation(bool_0, none_type_0)
    validation_0.is_fail()


def test_case_6():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.__eq__(list_0)
    validation_0.map(var_0)


def test_case_7():
    int_0 = -3132
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.bind(int_0)


def test_case_8():
    bytes_0 = b"N\xd8@g\x08\xc3\x00G,6_i\xae\xb6\xf4Z\x19"
    none_type_0 = None
    none_type_1 = None
    validation_0 = module_0.Validation(bytes_0, none_type_1)
    var_0 = validation_0.to_box()
    validation_0.ap(none_type_0)


def test_case_9():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.__eq__(list_0)
    var_1 = validation_0.to_lazy()
    var_1.is_fail()


def test_case_10():
    none_type_0 = None
    float_0 = -2474.05674
    none_type_1 = None
    validation_0 = module_0.Validation(float_0, none_type_1)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_try()
    var_1.ap(none_type_0)


def test_case_11():
    str_0 = "Sum"
    bool_0 = False
    none_type_0 = None
    validation_0 = module_0.Validation(bool_0, str_0)
    var_0 = validation_0.to_try()
    var_1 = validation_0.to_maybe()
    var_2 = var_1.to_box()
    var_3 = validation_0.__eq__(none_type_0)
    var_3.to_box()


def test_case_12():
    str_0 = "Sum"
    bool_0 = False
    none_type_0 = None
    validation_0 = module_0.Validation(bool_0, str_0)
    var_0 = validation_0.to_try()
    var_1 = validation_0.to_maybe()
    validation_1 = validation_0.to_either()
    var_2 = validation_0.__str__()
    var_3 = validation_0.__eq__(none_type_0)
    var_2.to_lazy()


def test_case_13():
    str_0 = " eV\x0c!FAr7?Zw(nV*+."
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(validation_0)
    var_0.bind(str_0)


def test_case_14():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_try()
    var_1.bind(list_0)


def test_case_15():
    str_0 = "\t"
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, str_0)
    var_0 = validation_0.to_try()
    var_1 = validation_0.to_maybe()
    validation_1 = module_0.Validation(var_0, var_0)
    var_2 = validation_0.__str__()
    var_3 = validation_0.__eq__(validation_1)
    var_4 = validation_0.is_fail()
    var_3.to_box()


def test_case_16():
    str_0 = ""
    bool_0 = False
    none_type_0 = None
    validation_0 = module_0.Validation(bool_0, str_0)
    var_0 = module_0.Validation(none_type_0, validation_0)
    var_1 = validation_0.to_maybe()
    validation_1 = module_0.Validation(var_0, var_0)
    var_2 = validation_0.is_fail()
    var_3 = validation_0.__str__()
    var_4 = validation_0.__eq__(validation_1)
    var_5 = validation_0.is_fail()
    var_4.to_box()
