# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    none_type_0 = None
    bytes_0 = b"\xc84b(\xc6\xb9m\xfd\xe0+lx"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(none_type_0)
    var_1 = validation_0.is_fail()
    var_2 = validation_0.to_maybe()
    var_1.is_success()


def test_case_1():
    bytes_0 = b"D\x19\xf1\x06\x1e\x8a\x8b?\x81\x11\x9a\xa4\x87W\xfa~\x08"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.is_fail()
    var_1 = validation_0.to_maybe()
    var_2 = validation_0.to_maybe()
    var_3 = validation_0.__str__()


def test_case_2():
    bytes_0 = b"\xab\xbb]\x9a\xf6\xca\xe5/ps\xf6Q(\xder\x87\xf3\xe5"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_box()


def test_case_3():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_4():
    int_0 = 0
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.is_fail()


def test_case_5():
    bytes_0 = b""
    str_0 = "\n        Applies the function inside the Maybe[A] structure to another applicative type for notempty Maybe.\n        For empty returns copy of itself\n\n        :param applicative: applicative contains function\n        :type applicative: Maybe[B]\n        :returns: new Maybe with result of contains function\n        :rtype: Maybe[A(B) | None]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    validation_0.map(bytes_0)


def test_case_6():
    bytes_0 = b"\xf3\xd0\xc7q\x84\x03\x05\x82\\j\x98"
    float_0 = 230.11869
    bool_0 = False
    dict_0 = {float_0: bool_0}
    validation_0 = module_0.Validation(bytes_0, dict_0)
    validation_0.bind(bytes_0)


def test_case_7():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    validation_1.ap(validation_0)


def test_case_8():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_box()
    validation_1 = module_0.Validation(bool_0, bool_0)
    validation_1.to_try()


def test_case_9():
    str_0 = "\n        It takes as a parameter function returning another Validation.\n        Function is called with Validation value and returns new Validation with previous value\n        and concated new and old errors.\n\n        :param monad: monad contains function\n        :type monad: Function(A) -> Validation[Any, List[E]]\n        :returns: new validation with stored errors\n        :rtype: Validation[A, List[E]]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_lazy()
    var_2 = var_0.__eq__(var_0)
    var_3 = validation_0.to_box()
    var_4 = validation_0.to_either()
    var_5 = var_4.ap(str_0)
    var_6 = var_4.to_box()
    var_3.bind(var_4)


def test_case_10():
    float_0 = 2730.340189
    none_type_0 = None
    validation_0 = module_0.Validation(float_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_maybe()
    var_1.is_fail()


def test_case_11():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.is_fail()
    validation_0.bind(list_0)


def test_case_12():
    none_type_0 = None
    bytes_0 = b"\xc84b(\xc6\xb9m\xfd\xe0+lx"
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.to_either()
    bytes_1 = b"D\x19\xf1\x06\x1e\x8a\x8b?\x81\x07\x11\x9a\xa4B\x87W\xfa~\x08"
    var_2 = validation_0.__eq__(validation_0)
    validation_1 = module_0.Validation(bytes_1, bytes_0)
    var_3 = validation_1.is_fail()
    var_1.to_either()


def test_case_13():
    none_type_0 = None
    bytes_0 = b"\xc84b(\xc6\xb9m\xfd\xe0+lx"
    bool_0 = True
    bytes_1 = b""
    validation_0 = module_0.Validation(bool_0, bytes_1)
    var_0 = validation_0.__eq__(bytes_1)
    var_1 = validation_0.__str__()
    var_2 = validation_0.to_either()
    var_3 = var_0.__eq__(bytes_0)
    validation_1 = module_0.Validation(none_type_0, validation_0)
    var_4 = var_2.__eq__(none_type_0)
    var_5 = validation_0.is_fail()
    var_0.to_maybe()


def test_case_14():
    bytes_0 = b"\xc84b(\xc6\xb9m\xfd\xe0+lx"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = var_0.__str__()
    var_2 = validation_0.to_either()
    str_0 = "\n        Take function Function(A) -> B and returns new Lazy with mapped result of Lazy constructor function.\n        Both mapper end constructor will be called only during calling fold method.\n\n        :param mapper: mapper function\n        :type mapper: Function(A) -> B\n        :returns: Lazy with mapped value\n        :rtype: Lazy[Function() -> B)]\n        "
    var_3 = var_1.__eq__(str_0)
    validation_1 = module_0.Validation(str_0, var_1)
    var_4 = validation_0.__eq__(validation_1)
    var_5 = validation_1.is_fail()
    var_0.to_maybe()
