# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0
import builtins as module_1


def test_case_0():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(none_type_0)
    var_1 = validation_0.to_box()
    var_1.is_fail()


def test_case_1():
    str_0 = "\n        Take function and call constructor function passing returned value to fn function.\n\n        It's only way to call function store in Lazy\n        :param fn: Function(constructor_fn) -> B\n        :returns: result od folder function\n        :rtype: B\n        "
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.__str__()
    validation_1 = module_0.Validation(str_0, validation_0)
    var_0.to_maybe()


def test_case_2():
    str_0 = "\n        Take function, store it and call with Task value during calling fork function.\n        Return new Task with result of called.\n\n        :param fn: mapper function\n        :type fn: Function(value) -> B\n        :returns: new Task with mapped resolve attribute\n        :rtype: Task[Function(resolve, reject -> A | B]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    validation_1 = module_0.Validation(validation_0, validation_0)
    var_0 = validation_1.to_box()
    var_1 = var_0.__str__()
    var_1.is_fail()


def test_case_3():
    object_0 = module_1.object()
    bytes_0 = b"\xf3\xc7\xf4\xc6\x165N\n(\xe2\x8d\xa2YE\xb2"
    set_0 = {bytes_0, bytes_0}
    validation_0 = module_0.Validation(set_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.map(object_0)


def test_case_4():
    str_0 = "\n    Map is a Semigroup that will always return contated all values inside Map value\n    "
    str_0.is_success()


def test_case_5():
    int_0 = 2785
    validation_0 = module_0.Validation(int_0, int_0)


def test_case_6():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.is_success()


def test_case_7():
    object_0 = module_1.object()
    bytes_0 = b"\xf3\xc7\xf4\xc6\x165N\n(\xe2\x8d\xa2YE\xb2"
    set_0 = {bytes_0, bytes_0}
    validation_0 = module_0.Validation(set_0, bytes_0)
    var_0 = validation_0.is_fail()
    var_1 = validation_0.to_maybe()
    var_2 = var_1.map(object_0)


def test_case_8():
    float_0 = -217.639
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    list_0 = [validation_0, validation_0]
    list_1 = [list_0, validation_0]
    validation_1 = module_0.Validation(list_1, list_1)
    var_0 = validation_1.to_maybe()
    var_1 = var_0.ap(float_0)
    var_2 = var_1.to_try()
    none_type_0 = None
    validation_2 = module_0.Validation(none_type_0, none_type_0)
    validation_2.map(var_2)


def test_case_9():
    int_0 = -331
    list_0 = [int_0, int_0]
    int_1 = 1
    validation_0 = module_0.Validation(int_1, int_1)
    validation_0.bind(list_0)


def test_case_10():
    complex_0 = 550.85039 + 686.56j
    str_0 = "\n    Data type for storage any type of data\n    "
    validation_0 = module_0.Validation(complex_0, str_0)
    validation_0.ap(complex_0)


def test_case_11():
    bytes_0 = b"{&\x85\x8d\xafF/\xde\x0btk|\xba\x19\xd1\xa8\nZ}\x94"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    int_0 = 1771
    validation_0 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.bind(dict_0)


def test_case_12():
    str_0 = "\n        Method executes a reducer function\n        on each element of the array, resulting in a single output value.\n\n        :param fn: function to call with ImmutableList value\n        :type fn: Function(A, B) -> A\n        :returns: A\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_try()
    var_0.is_success()


def test_case_13():
    str_0 = "\n        Take function, store it and call with Task value during calling fork function.\n        Return new Task with result of called.\n\n        :param fn: mapper function\n        :type fn: Function(value) -> B\n        :returns: new Task with mapped resolve attribute\n        :rtype: Task[Function(resolve, reject -> A | B]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    validation_1 = module_0.Validation(validation_0, validation_0)
    var_0 = validation_1.to_box()
    var_1 = validation_0.to_maybe()
    var_2 = var_0.__str__()
    var_3 = validation_0.to_either()
    var_2.is_fail()


def test_case_14():
    str_0 = "\n        Take?function, store it and call with Task value during calling fork function.\n        Return new Task with result of called.\n\n        :param fn: mapper function\n        :type fn: Function(value) -> B\n        :returns: new Task with mapped resolve attribute\n        :rtype: Task[Function(resolve, reject -> A | B]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    validation_1 = module_0.Validation(validation_0, validation_0)
    var_0 = validation_0.__eq__(validation_1)
    var_1 = var_0.__str__()
    validation_1.is_success()


def test_case_15():
    str_0 = "\n   Map is a Semigroup that will always returncontated all values inside Map value\n    "
    list_0 = [str_0, str_0, str_0, str_0]
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.__eq__(list_0)
    var_2 = var_1.__str__()


def test_case_16():
    str_0 = "\n        Take function, store it and call with Task value during calling fork function.\n        Return new Task with result of called.\n\n        :param fn: mapper function\n        :type fn: Function(value) -> B\n        :returns: new Task with mapped resolve attribute\n        :rtype: Task[Function(resolve, reject -> A | B]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.__eq__(var_0)
    var_2 = var_1.__str__()
    var_3 = var_0.to_maybe()
    var_2.is_success()


def test_case_17():
    str_0 = "\n        Take function, store it and call with Task value during calling fork function.\n        Return new Task with result of called.\n\n        :param fn: mapper function\n        :type fn: Function(value) -> B\n        :returns: new Task with mapped resolve attribute\n        :rtype: Task[Function(resolve, reject -> A | B]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    tuple_0 = ()
    validation_1 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_1.to_box()
    var_1 = validation_1.to_maybe()
    var_2 = validation_0.__str__()
    var_1.is_fail()


def test_case_18():
    str_0 = ""
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_box()
    validation_1 = module_0.Validation(validation_0, validation_0)
    var_1 = validation_1.to_box()
    var_2 = validation_0.to_maybe()
    var_3 = var_1.__str__()
    var_4 = validation_0.to_either()
    var_3.is_fail()
