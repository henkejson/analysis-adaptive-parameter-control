# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    str_0 = "H<dA\\rrLA"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(str_0)
    var_1 = var_0.__str__()
    var_1.to_maybe()


def test_case_1():
    str_0 = "t|@2ZBPtz(uk\tK2]\n12"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.to_either()
    var_2 = validation_0.to_box()
    var_2.bind(str_0)


def test_case_2():
    str_0 = "\n        Transform Either to Try.\n\n        :returns: Lazy monad with function returning previous value\n        :rtype: Lazy[Function() -> A]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_lazy()
    str_1 = "\\ZE\r@nzA6mg"
    validation_1 = module_0.Validation(str_1, var_0)
    var_1 = validation_0.to_maybe()
    var_2 = var_0.bind(str_1)


def test_case_3():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_4():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.to_try()


def test_case_5():
    int_0 = 1374
    tuple_0 = (int_0,)
    validation_0 = module_0.Validation(tuple_0, int_0)
    validation_0.is_fail()


def test_case_6():
    str_0 = "@r|"
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_lazy()
    validation_1 = module_0.Validation(str_0, bool_0)
    dict_0 = {str_0: bool_0}
    tuple_0 = (str_0, bool_0, dict_0)
    validation_2 = module_0.Validation(tuple_0, tuple_0)
    var_1 = validation_2.is_fail()
    validation_2.map(validation_2)


def test_case_7():
    str_0 = "\n        Transform Either to Try.\n\n        :returns: Lazy monad with function returning previous value\n        :rtype: Lazy[Function() -> A]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_lazy()
    none_type_0 = None
    str_1 = "\\ZE\r@nzA6mg"
    validation_1 = module_0.Validation(str_1, var_0)
    var_1 = validation_1.__eq__(none_type_0)
    var_2 = validation_0.to_maybe()
    validation_0.bind(var_0)


def test_case_8():
    none_type_0 = None
    bytes_0 = b">\xeb\x15\x94\x99\xfa"
    list_0 = [bytes_0, bytes_0]
    str_0 = "e(4O,0C\rK(GlBk`S$\t"
    set_0 = {str_0}
    tuple_0 = ()
    tuple_1 = (list_0, str_0, set_0, tuple_0)
    validation_0 = module_0.Validation(bytes_0, tuple_1)
    validation_0.ap(none_type_0)


def test_case_9():
    bool_0 = False
    bool_1 = True
    int_0 = -1334
    set_0 = set()
    list_0 = [set_0, bool_0]
    none_type_0 = None
    validation_0 = module_0.Validation(int_0, list_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_lazy()
    var_2 = validation_0.to_either()
    var_3 = var_2.__eq__(none_type_0)
    var_4 = validation_0.to_maybe()
    var_5 = var_1.to_box()
    var_6 = var_2.to_maybe()
    var_7 = var_2.map(none_type_0)
    var_8 = var_4.ap(bool_1)
    var_0.to_box()


def test_case_10():
    str_0 = "H~nzm@P2<\x0c)Z0D^G+[z"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()


def test_case_11():
    str_0 = "\n        Transform Either to Try.\n\n        :returns: Lazy monad with function returning previous value\n        :rtype: Lazy[Function() -> A]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, validation_0)
    var_0 = validation_1.__eq__(validation_0)
    var_1 = validation_0.__str__()
    validation_1.to_maybe()


def test_case_12():
    str_0 = "\n        Transform Either to Try.\n\n        :returns: Lazy 2onad with function Keturning previous value\n        :rtype: Lazy[Function() -> A]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    str_1 = "\\ZE\r@nzu,Amg"
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.__str__()
    var_2 = validation_0.to_maybe()
    var_0.bind(str_1)


def test_case_13():
    int_0 = -1334
    list_0 = []
    none_type_0 = None
    validation_0 = module_0.Validation(int_0, list_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.__eq__(validation_0)
    var_2 = validation_0.to_either()
    var_3 = var_2.__eq__(none_type_0)
    var_4 = validation_0.to_maybe()
    var_1.to_box()
