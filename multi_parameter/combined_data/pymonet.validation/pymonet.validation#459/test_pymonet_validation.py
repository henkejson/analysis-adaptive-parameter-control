# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bool_0 = False
    int_0 = -1066
    str_0 = "\rI|\n"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_maybe()
    validation_1 = module_0.Validation(var_0, bool_0)
    validation_2 = module_0.Validation(bool_0, bool_0)
    var_2 = int_0.__str__()
    var_3 = validation_1.__eq__(var_0)
    validation_3 = module_0.Validation(var_2, validation_1)


def test_case_1():
    bool_0 = True
    list_0 = []
    bool_1 = True
    validation_0 = module_0.Validation(bool_0, list_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_lazy()
    var_2 = var_1.__eq__(bool_1)
    var_2.to_try()


def test_case_2():
    str_0 = "3L^:5U2up:Ex"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    var_0.to_either()


def test_case_3():
    int_0 = 0
    validation_0 = module_0.Validation(int_0, int_0)


def test_case_4():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.is_success()


def test_case_5():
    str_0 = "\n        Return monad value when is successfully.\n        Othercase return default_value argument.\n\n        :params default_value: value to return when monad is not successfully.\n        :type default_value: B\n        :returns: monad value\n        :rtype: A | B\n        "
    none_type_0 = None
    validation_0 = module_0.Validation(str_0, none_type_0)
    validation_0.is_fail()


def test_case_6():
    int_0 = 1
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.map(int_0)


def test_case_7():
    bool_0 = False
    int_0 = 0
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.bind(bool_0)


def test_case_8():
    bool_0 = True
    bool_1 = True
    validation_0 = module_0.Validation(bool_1, bool_1)
    validation_0.ap(bool_0)


def test_case_9():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_box()
    validation_0.to_maybe()


def test_case_10():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.__str__()
    var_2 = var_1.__str__()
    var_2.to_try()


def test_case_11():
    none_type_0 = None
    bool_0 = True
    set_0 = set()
    validation_0 = module_0.Validation(set_0, bool_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_try()
    var_1.bind(none_type_0)


def test_case_12():
    bool_0 = True
    bool_1 = False
    validation_0 = module_0.Validation(bool_0, bool_1)
    validation_0.to_try()


def test_case_13():
    bool_0 = False
    str_0 = "\rI|\n"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    validation_1 = module_0.Validation(var_0, bool_0)
    validation_2 = module_0.Validation(bool_0, bool_0)
    validation_3 = module_0.Validation(validation_1, var_0)
    var_1 = validation_0.to_box()
    var_2 = validation_1.to_box()
    var_3 = validation_0.__eq__(validation_2)
    var_1.bind(var_0)


def test_case_14():
    str_0 = "\x0ct\rB-I]Ji"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    bool_0 = False
    validation_1 = module_0.Validation(bool_0, bool_0)


def test_case_15():
    bool_0 = False
    int_0 = -1066
    str_0 = "\rI|\n"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_maybe()
    var_2 = var_1.to_either()
    validation_1 = module_0.Validation(var_0, bool_0)
    validation_2 = module_0.Validation(str_0, int_0)
    var_3 = var_2.to_box()
    var_4 = var_2.__str__()
    var_5 = validation_1.__eq__(validation_1)
    var_6 = var_5.__eq__(var_0)
    var_4.to_box()


def test_case_16():
    bool_0 = False
    str_0 = ""
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_maybe()
    var_2 = var_1.to_either()
    validation_1 = module_0.Validation(var_0, bool_0)
    validation_2 = module_0.Validation(bool_0, bool_0)
    var_3 = validation_2.to_box()
    var_4 = validation_1.to_box()
    var_5 = var_0.__eq__(var_1)
    var_6 = var_3.__eq__(var_4)
    var_1.bind(bool_0)
