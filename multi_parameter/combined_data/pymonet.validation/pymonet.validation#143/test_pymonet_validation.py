# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0
import builtins as module_1


def test_case_0():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(validation_0)


def test_case_1():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(bool_0)
    var_0.is_success()


def test_case_2():
    str_0 = ""
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_either()
    var_1.bind(var_0)


def test_case_3():
    str_0 = "K"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.is_success()
    var_1 = validation_0.to_either()
    var_2 = validation_0.to_maybe()
    str_1 = "{yW"
    var_3 = var_1.map(str_1)
    var_4 = validation_0.is_success()
    var_5 = var_1.__str__()
    var_6 = var_3.bind(str_0)


def test_case_4():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)


def test_case_5():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    validation_0.__str__()


def test_case_6():
    bool_0 = False
    bytes_0 = b"\xaa\xd2\xe65\x9d\xf3\xb9UEb\x04^\xde\x9dp\r\xf1"
    bool_1 = False
    tuple_0 = (bool_0, bytes_0, bool_1)
    validation_0 = module_0.Validation(tuple_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.is_fail()
    var_1.ap(bool_1)


def test_case_7():
    none_type_0 = None
    str_0 = "3[F"
    bool_0 = False
    set_0 = {str_0, bool_0, str_0}
    none_type_1 = None
    validation_0 = module_0.Validation(set_0, none_type_1)
    validation_0.map(none_type_0)


def test_case_8():
    str_0 = "K"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_either()
    complex_0 = -198.145569 - 465.903j
    none_type_0 = None
    validation_1 = module_0.Validation(complex_0, none_type_0)
    validation_1.bind(var_0)


def test_case_9():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_box()
    validation_0.to_either()


def test_case_10():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_either()
    var_1.to_either()


def test_case_11():
    set_0 = set()
    bytes_0 = b"\xa16\x9d\x8b\xfe\x93"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.__eq__(set_0)
    var_2 = var_0.to_lazy()
    var_3 = var_0.to_lazy()
    var_4 = validation_0.to_try()
    validation_1 = module_0.Validation(bytes_0, var_1)
    var_1.is_success()


def test_case_12():
    str_0 = "K"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_either()
    var_2 = var_0.__eq__(var_1)
    var_0.ap(var_2)


def test_case_13():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.ap(none_type_0)


def test_case_14():
    none_type_0 = None
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.is_success()
    var_1 = validation_0.__eq__(set_0)
    var_2 = validation_0.to_lazy()
    var_3 = validation_0.__str__()
    var_4 = validation_0.to_maybe()
    module_1.object(*var_3, **none_type_0)


def test_case_15():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_1 = module_0.Validation(validation_0, validation_0)
    var_0 = validation_0.__eq__(validation_1)
    var_0.to_box()
