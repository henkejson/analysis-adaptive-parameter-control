# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0
import builtins as module_1


def test_case_0():
    str_0 = "\n    Data type for storage any type of function.\n    This function (and all his mappers) will be called only during calling fold method\n    "
    bytes_0 = b"\xb2?\xc4\xbe*\x9787\xa9,\x97\x1b^\xf6g)\xbd"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    list_0 = [bytes_0, bytes_0]
    validation_1 = module_0.Validation(list_0, list_0)
    var_0 = validation_1.__eq__(validation_0)
    var_1 = validation_1.__str__()
    var_2 = validation_1.to_either()
    var_3 = validation_0.is_success()
    var_4 = validation_1.to_lazy()
    var_3.bind(str_0)


def test_case_1():
    str_0 = "K`BU'/YKBfD]'?@\x0b,"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_try()
    none_type_0 = None
    var_1 = validation_0.__eq__(none_type_0)
    var_0.is_success()


def test_case_2():
    int_0 = -695
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    dict_1 = {bool_0: bool_0, bool_0: dict_0}
    validation_0 = module_0.Validation(dict_1, dict_1)
    var_0 = validation_0.to_either()
    var_1 = var_0.__eq__(int_0)
    var_1.is_success()


def test_case_3():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)


def test_case_4():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_maybe()


def test_case_5():
    int_0 = 390
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.is_fail()


def test_case_6():
    str_0 = "K`BU'/YKBfD]'?@\x0b,"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_try()
    none_type_0 = None
    var_1 = validation_0.__eq__(none_type_0)
    validation_0.map(none_type_0)


def test_case_7():
    str_0 = "\n    Function for return function depended on first function argument\n    cond get list of two-item tuples,\n    first is condition_function, second is execute_function.\n    Returns this execute_function witch first condition_function return truly value.\n\n    :param condition_list: list of two-item tuples (condition_function, execute_function)\n    :type condition_list: List[(Function, Function)]\n    :returns: Returns this execute_function witch first condition_function return truly value\n    :rtype: Function\n    "
    set_0 = {str_0, str_0}
    list_0 = [str_0, set_0]
    list_1 = [list_0]
    validation_0 = module_0.Validation(list_1, list_0)
    validation_0.bind(list_0)


def test_case_8():
    int_0 = 1266
    bytes_0 = b"Y\x103MW\x9f\xdb\x12\x1fS\xc9\xdc\x18<\xa7\x98\xff\x88\xa73"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_0.ap(int_0)


def test_case_9():
    float_0 = 1464.18668
    none_type_0 = None
    validation_0 = module_0.Validation(float_0, none_type_0)
    var_0 = validation_0.to_box()
    var_0.is_fail()


def test_case_10():
    object_0 = module_1.object()
    none_type_0 = None
    validation_0 = module_0.Validation(object_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_0.is_fail()


def test_case_11():
    bytes_0 = b"I\xc7\xd9.\xb6"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    validation_0 = module_0.Validation(dict_0, bytes_0)
    var_0 = validation_0.is_fail()
    var_1 = validation_0.__eq__(validation_0)
    var_2 = validation_0.is_success()
    var_3 = validation_0.to_either()
    var_1.to_either()


def test_case_12():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_either()
    var_1 = list_0.__str__()
    var_1.to_box()


def test_case_13():
    bytes_0 = b"MM\x03S\x1e\xc7\xeaI\xe97`\xf6\xed\xa2\xebg\xb1$\xbfO"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    var_0.is_fail()


def test_case_14():
    bytes_0 = b"<\x00\x1c\xa4\xa0\xcf'\xf7\x88\xf6"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_try()
    var_1 = validation_0.is_fail()
    var_2 = validation_0.to_maybe()
    var_0.to_maybe()


def test_case_15():
    bool_0 = False
    int_0 = -1578
    int_1 = -3147
    validation_0 = module_0.Validation(int_1, bool_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.map(int_0)
    var_1.to_box()


def test_case_16():
    bytes_0 = b"I\xc7\xd9.\xb6"
    dict_0 = {}
    validation_0 = module_0.Validation(bytes_0, dict_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_maybe()
    var_2 = validation_0.__str__()
    var_2.to_box()
