# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    int_0 = 0
    str_0 = "7p.s>ItHRS_"
    validation_0 = module_0.Validation(int_0, str_0)
    var_0 = validation_0.__eq__(str_0)
    var_1 = validation_0.to_either()
    var_2 = var_0.__str__()


def test_case_1():
    str_0 = "k@:"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_maybe()
    var_2 = var_1.to_try()
    validation_0.bind(var_2)


def test_case_2():
    bytes_0 = b"\x9fUf"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()


def test_case_3():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_4():
    bytes_0 = b"\xad\xd1\xd3"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_try()


def test_case_5():
    bytes_0 = b"My\xb9G\xa4n\xb0)\xe1\x90!\xa0iu"
    none_type_0 = None
    validation_0 = module_0.Validation(bytes_0, none_type_0)
    var_0 = validation_0.to_box()
    validation_0.is_fail()


def test_case_6():
    str_0 = "ppnH'XE6T_/-"
    validation_0 = module_0.Validation(str_0, str_0)
    none_type_0 = None
    validation_0.map(none_type_0)


def test_case_7():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.bind(bool_0)


def test_case_8():
    bytes_0 = b"\xd1\x19{\x99\xc0z?"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_box()
    bytes_1 = b"\x9fUf"
    validation_1 = module_0.Validation(bytes_1, bytes_1)
    var_2 = validation_1.to_maybe()
    validation_0.ap(var_1)


def test_case_9():
    str_0 = "3sio_n\x0cs"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_lazy()


def test_case_10():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_try()
    var_1.is_fail()


def test_case_11():
    int_0 = 0
    str_0 = "!P"
    validation_0 = module_0.Validation(int_0, str_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_box()
    var_2 = validation_0.to_either()
    var_3 = var_0.__str__()
    var_3.to_either()


def test_case_12():
    int_0 = 0
    tuple_0 = ()
    bool_0 = False
    bytes_0 = b"\x91\xe1\xfcr\x02[\xdd\x7f7[T"
    complex_0 = 2136 - 2838.9057j
    tuple_1 = (tuple_0, bool_0, bytes_0, complex_0)
    validation_0 = module_0.Validation(tuple_1, tuple_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_box()
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    validation_1 = module_0.Validation(dict_0, dict_0)
    validation_1.ap(dict_0)


def test_case_13():
    int_0 = 0
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    bytes_0 = b".\x9d<R\xaf\x84"
    tuple_0 = (dict_0, dict_0, bytes_0, int_0)
    validation_0 = module_0.Validation(dict_0, tuple_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.map(int_0)
    var_2 = var_1.to_try()
    var_3 = var_2.__str__()
    validation_1 = module_0.Validation(var_1, validation_0)
    var_4 = validation_1.__eq__(validation_0)
    var_4.to_box()


def test_case_14():
    str_0 = ""
    bool_0 = False
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, str_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.__str__()
    var_2 = validation_0.to_either()
    bool_0.is_success()
