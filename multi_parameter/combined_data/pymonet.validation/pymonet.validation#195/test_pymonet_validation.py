# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    int_0 = -17
    validation_0 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.__eq__(int_0)
    var_0.to_try()


def test_case_1():
    str_0 = "{:en\\p0N,=sZ51>PXZ"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    var_0.to_box()


def test_case_2():
    bytes_0 = b"&\xbc\xf0\x06\xec\xbd\xf1\xfd\xcf)\x97\xd7"
    dict_0 = {}
    list_0 = [dict_0, dict_0]
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_either()
    var_2 = var_1.map(bytes_0)
    var_3 = var_2.to_box()
    var_4 = var_3.to_either()
    var_5 = var_4.to_maybe()
    var_6 = var_5.to_box()


def test_case_3():
    str_0 = "vhi}k`R9D\x0b-1N"
    validation_0 = module_0.Validation(str_0, str_0)


def test_case_4():
    float_0 = -183.655
    validation_0 = module_0.Validation(float_0, float_0)
    validation_0.is_success()


def test_case_5():
    bytes_0 = b"\x94\xe5\x93\xb0\x8a\xe6\n\xb0\xce\xb0\xfd\xa9&_"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.is_fail()
    var_1 = var_0.__str__()


def test_case_6():
    int_0 = -17
    validation_0 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.__eq__(int_0)
    bool_0 = True
    validation_1 = module_0.Validation(int_0, int_0)
    validation_1.map(bool_0)


def test_case_7():
    none_type_0 = None
    none_type_1 = None
    validation_0 = module_0.Validation(none_type_1, none_type_1)
    validation_0.bind(none_type_0)


def test_case_8():
    str_0 = "{:en\\p0N,=sZ51>PXZ"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, str_0)
    var_1 = validation_0.__eq__(validation_0)
    var_2 = validation_1.is_success()
    validation_0.ap(none_type_0)


def test_case_9():
    str_0 = "{:en\\p0N,=sZ51>PXZ"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_box()


def test_case_10():
    str_0 = 'MST-|,NRweu0d"/E'
    complex_0 = -209.395455 + 4448.386107j
    int_0 = 0
    set_0 = {int_0, int_0}
    none_type_0 = None
    validation_0 = module_0.Validation(set_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.ap(complex_0)
    var_2 = var_1.ap(str_0)
    var_2.is_fail()


def test_case_11():
    none_type_0 = None
    bool_0 = True
    list_0 = [bool_0]
    none_type_1 = None
    validation_0 = module_0.Validation(list_0, none_type_1)
    validation_1 = module_0.Validation(none_type_0, list_0)
    var_0 = validation_1.to_lazy()
    var_1 = var_0.bind(none_type_0)
    var_1.to_box()


def test_case_12():
    str_0 = "{:en\\p0N,=sZ51>PXZ"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_try()
    var_1 = var_0.map(var_0)
    var_2 = validation_0.__str__()
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, str_0)
    var_3 = validation_0.__eq__(validation_0)
    var_0.to_either()


def test_case_13():
    str_0 = "{:en\\p0N,=sZ51>PXZ"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    validation_1 = module_0.Validation(var_0, str_0)
    var_1 = validation_0.__eq__(validation_0)
    var_2 = validation_1.is_success()


def test_case_14():
    str_0 = "{:en\\p0N,=sZ51>PXZ"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, str_0)
    var_0 = validation_0.is_success()
    var_1 = validation_0.to_either()


def test_case_15():
    str_0 = "I=g"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.__str__()
    var_2 = var_0.__str__()
    complex_0 = 2197.774 + 3222.4j
    validation_1 = module_0.Validation(var_1, complex_0)
    var_3 = validation_0.is_success()
    validation_2 = module_0.Validation(none_type_0, var_1)
    var_4 = validation_0.__eq__(validation_1)
    var_0.is_success()


def test_case_16():
    str_0 = "I=g"
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.__eq__(str_0)
    validation_1 = validation_0.__str__()
    validation_1.to_maybe()


def test_case_17():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.to_lazy()
    var_0.is_success()


def test_case_18():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_either()
    int_0 = -315
    float_0 = -368.63
    list_0 = [float_0]
    var_1 = validation_0.__str__()
    bytes_0 = b"\x9a0\xce\xe8\r\xb2gC\xb7\xd8_\xbd\xae)p\x0f|\xfb\xe0\x9f"
    validation_1 = module_0.Validation(bytes_0, bytes_0)
    var_2 = validation_1.to_maybe()
    validation_2 = module_0.Validation(var_2, int_0)
    var_3 = var_2.__eq__(list_0)
    var_3.to_either()
