# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    str_0 = "5\"w/}p'b*QhJx!\tS'"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.__str__()
    var_2 = validation_0.to_either()
    var_3 = validation_0.__eq__(validation_0)


def test_case_1():
    bytes_0 = b"\xbaA\xac\xa2\x8f\x96\x1d\x12\xbf\xb6AO\xaa\x8ey\xa2\xc7,"
    set_0 = {bytes_0}
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(set_0)
    var_0.to_box()


def test_case_2():
    float_0 = 933.0
    none_type_0 = None
    tuple_0 = ()
    validation_0 = module_0.Validation(none_type_0, tuple_0)
    var_0 = validation_0.__str__()
    var_0.bind(float_0)


def test_case_3():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    str_0 = "!u_"
    validation_1 = module_0.Validation(bool_0, bool_0)
    str_1 = "Sum"
    validation_2 = module_0.Validation(str_1, str_1)
    var_0 = validation_1.to_lazy()
    var_1 = validation_2.is_success()
    var_2 = var_0.map(str_0)
    list_0 = [str_0, str_0, str_0]
    validation_3 = module_0.Validation(list_0, list_0)
    var_3 = validation_3.__str__()
    var_4 = var_3.__str__()
    var_5 = var_3.__eq__(var_4)
    var_5.to_maybe()


def test_case_4():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    list_0 = []
    validation_1 = module_0.Validation(list_0, list_0)
    var_0 = validation_1.to_either()
    var_1 = validation_1.is_fail()
    var_2 = var_0.to_maybe()
    var_1.to_box()


def test_case_5():
    float_0 = -1512.535
    str_0 = "5\"w/}p'b*QhJx!\tS'"
    validation_0 = module_0.Validation(float_0, str_0)
    var_0 = validation_0.to_maybe()
    var_0.is_fail()


def test_case_6():
    str_0 = "q ifM :EL'C3\ni`a\n6"
    validation_0 = module_0.Validation(str_0, str_0)


def test_case_7():
    int_0 = 1
    set_0 = {int_0, int_0, int_0, int_0}
    validation_0 = module_0.Validation(set_0, int_0)
    validation_0.is_success()


def test_case_8():
    int_0 = 4924
    tuple_0 = ()
    bool_0 = False
    list_0 = [bool_0, tuple_0, bool_0]
    tuple_1 = (int_0, tuple_0, list_0, tuple_0)
    validation_0 = module_0.Validation(tuple_1, int_0)
    validation_0.is_fail()


def test_case_9():
    bytes_0 = b"L\x97\xc6\xe0\x96$\xbd\xa6\xfa\x07\x8f\xf3\xa8\xac"
    str_0 = "9VAF\x0c~-$`"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.is_fail()
    validation_1 = module_0.Validation(str_0, var_0)
    validation_1.map(bytes_0)


def test_case_10():
    bool_0 = False
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.bind(bool_0)


def test_case_11():
    int_0 = 1648
    float_0 = 2749.110653
    validation_0 = module_0.Validation(float_0, float_0)
    var_0 = validation_0.__eq__(int_0)
    dict_0 = {}
    bool_0 = False
    validation_1 = module_0.Validation(bool_0, bool_0)
    validation_1.ap(dict_0)


def test_case_12():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.to_maybe()


def test_case_13():
    int_0 = 3285
    validation_0 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.to_lazy()


def test_case_14():
    complex_0 = 1284.9 + 1998.8j
    bool_0 = True
    tuple_0 = (complex_0, bool_0, bool_0)
    none_type_0 = None
    validation_0 = module_0.Validation(tuple_0, none_type_0)
    validation_0.to_try()


def test_case_15():
    bytes_0 = b"\xbaA\xac\xa2\x8f\x96\x1d\x12\xbf\xb6AO\xaa\x8ey\xa2\xc7,"
    set_0 = {bytes_0}
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(set_0)
    var_1 = validation_0.to_lazy()
    var_2 = var_1.to_box()
    var_3 = var_2.to_lazy()
    var_3.to_lazy()


def test_case_16():
    str_0 = ""
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.to_either()
    var_2 = validation_0.__eq__(validation_0)
    var_3 = validation_0.__eq__(str_0)
    var_4 = validation_0.__eq__(validation_0)
    var_5 = var_4.__eq__(var_0)
    var_1.map(var_5)


def test_case_17():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    float_0 = 4711.7622
    none_type_0 = None
    validation_1 = module_0.Validation(float_0, none_type_0)
    var_0 = validation_1.__eq__(validation_0)
    validation_1.to_maybe()
