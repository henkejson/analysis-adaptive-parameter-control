# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    complex_0 = 1368.483 - 831.56021j
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(complex_0)


def test_case_1():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_either()
    var_0.bind(list_0)


def test_case_2():
    bytes_0 = b"\xa6X\x85\x7f{X\x81\xe7\x13\xc2\xf0\xc9T\x08\x1be\xbb\xc4"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.to_either()
    validation_0.bind(bytes_0)


def test_case_3():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_maybe()
    validation_0.ap(tuple_0)


def test_case_4():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_5():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.__str__()


def test_case_6():
    bool_0 = True
    none_type_0 = None
    validation_0 = module_0.Validation(bool_0, none_type_0)
    validation_0.is_fail()


def test_case_7():
    bytes_0 = b"T\xc5\xa9\x80"
    set_0 = {bytes_0, bytes_0}
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.map(set_0)


def test_case_8():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(none_type_0)
    validation_0.bind(none_type_0)


def test_case_9():
    str_0 = "\n        If Maybe is empty or filterer returns False return default_value, in other case\n        return new instance of Maybe with the same value.\n\n        :param filterer:\n        :type filterer: Function(A) -> Boolean\n        :returns: copy of self when filterer returns True, in other case empty Maybe\n        :rtype: Maybe[A] | Maybe[None]\n        "
    list_0 = [str_0, str_0, str_0, str_0]
    bytes_0 = b"\xbc>-}b.\xe0\x85\xb4\xf5\xbd"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_0.ap(list_0)


def test_case_10():
    int_0 = 0
    str_0 = "1:"
    bytes_0 = b"?`@F\xf2\x99\xdf%U\xc2\xe6V\x95\xb6"
    validation_0 = module_0.Validation(str_0, bytes_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.to_try()
    var_1.map(int_0)


def test_case_11():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_1.to_lazy()
    var_1 = var_0.map(none_type_0)


def test_case_12():
    none_type_0 = None
    complex_0 = 2516.726 + 3059j
    validation_0 = module_0.Validation(none_type_0, complex_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_either()
    var_2 = var_1.to_box()
    var_3 = var_2.to_try()
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    var_4 = validation_1.to_lazy()
    var_4.to_lazy()


def test_case_13():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(validation_0)


def test_case_14():
    none_type_0 = None
    none_type_1 = None
    validation_0 = module_0.Validation(none_type_1, none_type_0)
    validation_0.to_try()


def test_case_15():
    bytes_0 = b"\xfe>-$F\xf4B\xbf"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_0.to_maybe()


def test_case_16():
    bool_0 = False
    none_type_0 = None
    bool_1 = False
    validation_0 = module_0.Validation(bool_1, bool_0)
    validation_1 = module_0.Validation(bool_1, none_type_0)
    var_0 = validation_1.__eq__(validation_0)
    var_0.ap(var_0)


def test_case_17():
    none_type_0 = None
    str_0 = "/Pn[f.4j}0O4>"
    validation_0 = module_0.Validation(str_0, none_type_0)
    validation_1 = module_0.Validation(none_type_0, str_0)
    var_0 = validation_1.__str__()
    var_0.to_lazy()


def test_case_18():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.__str__()
    var_0.to_box()
