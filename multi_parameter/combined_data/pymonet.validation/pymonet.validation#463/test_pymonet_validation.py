# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0
import builtins as module_1


def test_case_0():
    str_0 = 'D"PU'
    none_type_0 = None
    validation_0 = module_0.Validation(str_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_0.__str__()


def test_case_1():
    float_0 = 2429.93023
    float_1 = 1369.218
    set_0 = {float_1, float_1}
    validation_0 = module_0.Validation(set_0, float_1)
    var_0 = validation_0.__eq__(float_0)
    var_1 = var_0.__eq__(set_0)
    var_0.to_try()


def test_case_2():
    bytes_0 = b"W"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    str_0 = "V(_~%9*nx7eT<"
    validation_0.map(str_0)


def test_case_3():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_try()
    var_2 = var_0.to_box()


def test_case_4():
    bytes_0 = b"\x1b\xed4\x04\xb6\xea|\xd8\xe6\xc7Q\xf1~:\xe2\xcf\x01="
    bytes_1 = b"*~\xa8(\xef\xb5\x9eM\xcc"
    validation_0 = module_0.Validation(bytes_1, bytes_1)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_try()
    var_2 = validation_0.to_either()
    var_3 = var_2.ap(bytes_0)
    var_3.is_success()


def test_case_5():
    str_0 = '"Ag<e$<)/bzhP'
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()


def test_case_6():
    int_0 = 1534
    validation_0 = module_0.Validation(int_0, int_0)


def test_case_7():
    str_0 = '"Ag<e$<)/bzhP'
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.is_fail()


def test_case_8():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0, object_0]
    int_0 = 937
    complex_0 = 1542.12676 - 1331.121j
    validation_0 = module_0.Validation(int_0, complex_0)
    validation_0.bind(list_0)


def test_case_9():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.ap(bool_0)


def test_case_10():
    str_0 = '"Ag<e$<)/bzhP'
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_box()


def test_case_11():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.to_try()
    var_1.to_lazy()


def test_case_12():
    tuple_0 = ()
    none_type_0 = None
    none_type_1 = None
    validation_0 = module_0.Validation(tuple_0, none_type_1)
    var_0 = validation_0.to_box()
    var_1 = var_0.to_lazy()
    var_2 = var_1.map(tuple_0)
    var_3 = var_2.__eq__(none_type_0)
    validation_1 = module_0.Validation(tuple_0, tuple_0)
    var_4 = validation_1.to_lazy()
    var_5 = var_4.to_either()


def test_case_13():
    bytes_0 = b"4\x1c\xc5\x0e\xadV6\xbaM\x86}\xb6\x9f\xdbv\\\xc4"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_1 = module_0.Validation(bytes_0, validation_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.__eq__(validation_1)
    validation_2 = module_0.Validation(bytes_0, var_0)
    validation_0.to_maybe()


def test_case_14():
    bool_0 = False
    bytes_0 = b""
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.__eq__(bool_0)
    validation_1 = module_0.Validation(bytes_0, bytes_0)
    var_2 = validation_1.to_maybe()
    var_3 = var_2.to_lazy()
    var_4 = var_2.to_try()
    bytes_1 = b"W"
    validation_2 = module_0.Validation(bytes_1, bytes_1)
    var_5 = validation_1.is_fail()
    var_6 = validation_1.__eq__(bytes_1)
    var_7 = validation_2.__str__()
    var_7.is_fail()


def test_case_15():
    bool_0 = False
    bytes_0 = b"4\x1c\xc5\x0e\xadV6\xbaM\x86}\xb6\x9f\xdbv\\\xc4"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.__eq__(bool_0)
    validation_1 = module_0.Validation(bytes_0, bytes_0)
    var_2 = validation_1.to_maybe()
    var_3 = var_2.to_lazy()
    bytes_1 = b""
    validation_2 = module_0.Validation(bytes_1, bytes_1)
    var_4 = validation_1.is_fail()
    var_5 = validation_2.__str__()
    var_6 = var_3.map(validation_1)
    var_7 = validation_1.__eq__(bool_0)
    var_6.is_fail()
