# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    int_0 = -380
    list_0 = [int_0, int_0, int_0]
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.__eq__(int_0)
    var_0.to_try()


def test_case_1():
    bool_0 = False
    bytes_0 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    var_0.map(bool_0)


def test_case_2():
    int_0 = -380
    list_0 = [int_0, int_0, int_0]
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.__str__()
    var_0.to_try()


def test_case_3():
    bytes_0 = b"%\x9e\\\xc5\x9b\xd0\x84\x0f\x87\xe3\x97\xdcN\xa6\xd7"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_either()


def test_case_4():
    bool_0 = False
    list_0 = [bool_0]
    bytes_0 = b"_"
    validation_0 = module_0.Validation(list_0, bytes_0)
    var_0 = validation_0.to_maybe()
    validation_0.ap(var_0)


def test_case_5():
    int_0 = -1268
    validation_0 = module_0.Validation(int_0, int_0)


def test_case_6():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.is_fail()


def test_case_7():
    bool_0 = False
    str_0 = "\n        Transform Validation to Try.\n\n        :returns: Lazy monad with function returning Validation value\n        :rtype: Lazy[Function() -> (A | None)]\n        "
    none_type_0 = None
    validation_0 = module_0.Validation(str_0, none_type_0)
    validation_0.map(bool_0)


def test_case_8():
    str_0 = "oM."
    str_1 = "\n    Perform right-to-left function composition.\n\n    :param value: argument of first applied function\n    :type value: Any\n    :param functions: list of functions to applied from right-to-left\n    :type functions: List[Function]\n    :returns: result of all functions\n    :rtype: Any\n    "
    validation_0 = module_0.Validation(str_0, str_1)
    var_0 = validation_0.to_either()
    var_1 = var_0.__str__()
    validation_1 = module_0.Validation(str_0, str_0)
    var_2 = validation_1.to_lazy()
    var_3 = validation_1.to_try()
    var_4 = var_3.bind(str_0)
    validation_1.bind(validation_1)


def test_case_9():
    bool_0 = False
    list_0 = [bool_0]
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.ap(list_0)


def test_case_10():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_box()
    validation_0.is_success()


def test_case_11():
    float_0 = 901.9
    none_type_0 = None
    validation_0 = module_0.Validation(float_0, float_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.map(none_type_0)
    list_0 = []
    validation_1 = module_0.Validation(list_0, list_0)
    var_2 = validation_1.to_lazy()
    var_3 = var_2.__eq__(var_2)
    var_4 = var_2.to_box()
    var_5 = validation_1.is_fail()
    var_6 = var_4.to_lazy()
    var_7 = var_6.map(float_0)


def test_case_12():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_maybe()
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, var_0)
    var_2 = var_1.to_try()
    var_2.to_either()


def test_case_13():
    float_0 = 901.9
    none_type_0 = None
    validation_0 = module_0.Validation(float_0, float_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.map(none_type_0)
    list_0 = []
    validation_1 = module_0.Validation(list_0, list_0)
    var_2 = validation_1.to_lazy()
    var_3 = validation_1.to_either()
    var_4 = var_2.__eq__(var_2)
    var_5 = var_2.to_box()
    var_6 = validation_1.is_fail()
    var_7 = var_5.to_lazy()
    var_8 = var_7.map(float_0)


def test_case_14():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.is_success()
    var_2 = validation_0.__eq__(validation_0)
    var_3 = module_0.Validation(set_0, var_0)
    var_4 = var_3.__eq__(validation_0)
    var_5 = validation_0.to_maybe()
    var_5.is_success()
