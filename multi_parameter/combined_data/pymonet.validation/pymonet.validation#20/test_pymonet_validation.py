# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    none_type_0 = None
    validation_0 = module_0.Validation(dict_0, none_type_0)
    var_0 = validation_0.__eq__(bool_0)
    var_1 = var_0.__str__()
    var_1.to_lazy()


def test_case_1():
    float_0 = -636.8
    bytes_0 = b'\xdc\xa1\xb6XL%,Jc\xc3"\xfe\x9e\xe1\\'
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(float_0)
    none_type_0 = None
    none_type_1 = None
    var_1 = validation_0.__str__()
    validation_1 = module_0.Validation(none_type_1, none_type_1)
    validation_1.map(none_type_0)


def test_case_2():
    float_0 = -636.8
    bytes_0 = b'\xdc\xca\xa1\xb6XL%,Jc\xc3"\xfe\x9e\xe1\\'
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(float_0)
    none_type_0 = None
    validation_1 = validation_0.to_either()
    var_1 = validation_1.map(none_type_0)
    var_1.to_either()


def test_case_3():
    float_0 = -636.8
    bytes_0 = b'\xdc\xa1\xb6XL%,Jc\xc3"\xfe\x9e\xe1\\'
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(float_0)
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    var_1 = validation_0.to_maybe()
    validation_1.to_either()


def test_case_4():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)


def test_case_5():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.is_success()


def test_case_6():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.is_fail()
    var_0.to_maybe()


def test_case_7():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.map(bool_0)


def test_case_8():
    complex_0 = -3820 - 1816j
    bool_0 = True
    validation_0 = module_0.Validation(complex_0, bool_0)
    validation_0.bind(bool_0)


def test_case_9():
    bytes_0 = b"4%\x05l\xe6?\x17\x82k\xee3\xa4nH"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.ap(bytes_0)


def test_case_10():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_box()


def test_case_11():
    bytes_0 = b"i\xbfV\x06"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_lazy()


def test_case_12():
    str_0 = "7C+y\x0cBsK\\my-E-?\r:sL"
    none_type_0 = None
    validation_0 = module_0.Validation(str_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_either()
    var_1.is_fail()


def test_case_13():
    float_0 = 1712.11
    str_0 = "\n        Take function and applied this function with monad value and returns new monad with mapped value.\n\n        :params mapper: function to apply on monad value\n        :type mapper: Function(A) -> B\n        :returns: for successfully new Try with mapped value, othercase copy of self\n        :rtype: Try[B]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_try()
    var_0.ap(float_0)


def test_case_14():
    bool_0 = False
    bytes_0 = b'\xa2"'
    validation_0 = module_0.Validation(bool_0, bytes_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.__str__()
    list_0 = []
    validation_1 = module_0.Validation(list_0, list_0)
    var_2 = var_1.__str__()
    var_3 = validation_0.is_fail()
    var_4 = validation_1.to_either()
    var_5 = validation_1.to_box()
    var_6 = var_5.__str__()
    var_5.to_box()


def test_case_15():
    bool_0 = False
    bytes_0 = b'\xa2"'
    validation_0 = module_0.Validation(bool_0, bytes_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.__str__()
    list_0 = []
    validation_1 = module_0.Validation(list_0, list_0)
    var_2 = var_0.to_either()
    var_3 = validation_1.to_maybe()
    var_4 = validation_1.__eq__(var_0)
    var_4.to_try()


def test_case_16():
    bool_0 = False
    bytes_0 = b'\xa2"'
    validation_0 = module_0.Validation(bool_0, bytes_0)
    var_0 = validation_0.to_box()
    list_0 = []
    validation_1 = module_0.Validation(list_0, list_0)
    var_1 = validation_1.is_fail()
    var_2 = validation_1.__str__()
    var_3 = validation_1.__eq__(bool_0)
    var_4 = var_0.__str__()
    var_5 = validation_1.to_box()
    var_6 = var_5.__str__()
    var_5.to_box()


def test_case_17():
    bool_0 = False
    bytes_0 = b'\xa2"'
    validation_0 = module_0.Validation(bool_0, bytes_0)
    var_0 = validation_0.to_box()
    list_0 = []
    validation_1 = module_0.Validation(list_0, var_0)
    var_1 = validation_0.is_fail()
    var_2 = validation_0.__eq__(validation_1)
    var_3 = var_0.__str__()
    bool_0.to_box()


def test_case_18():
    bool_0 = False
    bytes_0 = b'\xa2"'
    validation_0 = module_0.Validation(bool_0, bytes_0)
    var_0 = validation_0.__str__()
    list_0 = []
    validation_1 = module_0.Validation(list_0, bytes_0)
    var_1 = validation_0.is_success()
    var_2 = validation_1.to_either()
    var_3 = var_2.__str__()
    var_4 = validation_0.__eq__(validation_1)
    var_5 = var_4.__str__()
    var_3.to_box()
