# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    none_type_0 = None
    str_0 = "$cVVgb"
    bytes_0 = b"\x94\xb3i\xbd\xf9\x9a\xfc"
    validation_0 = module_0.Validation(none_type_0, str_0)
    var_0 = validation_0.__eq__(bytes_0)
    validation_0.bind(str_0)


def test_case_1():
    str_0 = "np "
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, str_0)
    var_0 = validation_0.__str__()
    var_0.bind(str_0)


def test_case_2():
    bytes_0 = b"\x94\xb3i\xbd\xf9\x9a\xfc"
    str_0 = "RX\\>\rxVq0l-~a~J"
    validation_0 = module_0.Validation(str_0, bytes_0)
    var_0 = validation_0.to_either()


def test_case_3():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_maybe()
    none_type_0 = None
    var_2 = validation_0.to_maybe()
    var_3 = var_2.to_try()
    validation_1 = module_0.Validation(set_0, none_type_0)
    var_4 = validation_1.to_box()
    var_3.to_lazy()


def test_case_4():
    bytes_0 = b"\x83'i\xf9Z\xfc"
    str_0 = "RX\\>\rxVq0l-~a~J"
    validation_0 = module_0.Validation(str_0, bytes_0)
    var_0 = validation_0.to_maybe()


def test_case_5():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_6():
    bool_0 = True
    none_type_0 = None
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.map(none_type_0)


def test_case_7():
    none_type_0 = None
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    validation_0.ap(none_type_0)


def test_case_8():
    int_0 = -1247
    validation_0 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.to_box()
    var_0.map(var_0)


def test_case_9():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_try()
    var_1.to_either()


def test_case_10():
    none_type_0 = None
    str_0 = "$cVVfb"
    validation_0 = module_0.Validation(none_type_0, str_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.is_success()
    var_2 = var_0.__str__()
    var_3 = validation_0.to_try()


def test_case_11():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.is_fail()


def test_case_12():
    none_type_0 = None
    str_0 = "$cVVgb"
    validation_0 = module_0.Validation(none_type_0, str_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_maybe()
    var_0.to_maybe()


def test_case_13():
    str_0 = ""
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_lazy()
    dict_0 = {}
    var_1 = validation_0.__str__()
    str_1 = "$cVVgb"
    bytes_0 = b"\x94\xb3i\xbd\xf9\x9a\xfc"
    bool_0 = False
    dict_1 = {bool_0: str_1, bytes_0: dict_0}
    validation_1 = module_0.Validation(dict_1, str_1)
    bytes_1 = b""
    var_2 = validation_0.__eq__(bytes_1)
    dict_2 = {}
    validation_1.bind(dict_2)


def test_case_14():
    bytes_0 = b"\x17\xb4\x87\x18Q\x9ez\x8e\x84\xc6\x8b\xd2w@\xcd\x88k\x82K"
    str_0 = "\n        Returns Lazy with function returning argument.\n\n        :param value: value to return by Lazy constructor_fn\n        :type value: Any\n        :returns: Lazy with function returning argument\n        :rtype: Lazy[Function() -> A]\n        "
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, str_0: str_0}
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    none_type_0 = None
    validation_1 = module_0.Validation(bytes_0, dict_0)
    validation_2 = module_0.Validation(none_type_0, validation_1)
    var_0 = validation_2.__eq__(validation_1)
    var_1 = validation_1.to_either()
    var_2 = var_1.bind(bytes_0)
    var_3 = var_1.to_maybe()
    var_4 = var_0.__str__()
