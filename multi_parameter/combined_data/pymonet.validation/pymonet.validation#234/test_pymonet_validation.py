# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0
import builtins as module_1


def test_case_0():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_0.ap(var_0)


def test_case_1():
    int_0 = 0
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, int_0)
    none_type_1 = None
    none_type_2 = None
    validation_1 = module_0.Validation(int_0, none_type_2)
    var_0 = validation_1.__eq__(none_type_1)
    var_0.to_either()


def test_case_2():
    bytes_0 = b"\x17~\t\xa2!!6\xb1$\xcd'G\"\n\xde\xd4"
    str_0 = "dmF79<_n>8O]7 )u.+;+"
    str_1 = "#4n=)l"
    str_2 = "mP)\x0cbpw1]HL7D'{"
    dict_0 = {str_0: str_0, str_1: str_0, str_2: str_2}
    validation_0 = module_0.Validation(dict_0, bytes_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.__str__()
    str_3 = "D|OUxA{1W"
    validation_1 = module_0.Validation(var_1, var_0)
    var_2 = validation_0.to_lazy()
    validation_1.bind(str_3)


def test_case_3():
    set_0 = set()
    set_0.to_try()


def test_case_4():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)


def test_case_5():
    int_0 = 1
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.to_either()


def test_case_6():
    int_0 = -1047
    float_0 = 550.35149
    validation_0 = module_0.Validation(int_0, float_0)
    validation_0.is_fail()


def test_case_7():
    bytes_0 = b"\x83.%=\xfd44."
    float_0 = -708.0
    validation_0 = module_0.Validation(float_0, float_0)
    validation_0.map(bytes_0)


def test_case_8():
    none_type_0 = None
    int_0 = 3163
    validation_0 = module_0.Validation(none_type_0, int_0)
    validation_0.bind(none_type_0)


def test_case_9():
    bool_0 = True
    bool_1 = True
    validation_0 = module_0.Validation(bool_1, bool_1)
    validation_0.ap(bool_0)


def test_case_10():
    int_0 = 589
    validation_0 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.__str__()
    var_1.to_try()


def test_case_11():
    int_0 = 0
    validation_0 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.to_lazy()
    validation_0.to_either()


def test_case_12():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.to_try()


def test_case_13():
    object_0 = module_1.object()
    str_0 = "\\Z7QfpJ@r`"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_box()
    var_1.ap(object_0)


def test_case_14():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_box()
    var_2 = validation_0.__eq__(var_0)
    bool_0 = True
    validation_1 = module_0.Validation(none_type_0, bool_0)
    var_3 = var_0.bind(var_1)
    validation_0.to_try()


def test_case_15():
    tuple_0 = ()
    str_0 = "\\'3~{u8rR9jnwAoG"
    validation_0 = module_0.Validation(tuple_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_try()
    var_1.is_success()


def test_case_16():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.__eq__(validation_0)
    bool_0 = True
    validation_1 = module_0.Validation(bool_0, bool_0)
    var_2 = module_0.Validation(validation_0, var_0)
    var_3 = var_2.__eq__(validation_1)
    validation_0.to_try()


def test_case_17():
    none_type_0 = None
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.__str__()
    var_0.ap(none_type_0)


def test_case_18():
    str_0 = "QV\r_~eB#"
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_maybe()
    var_0.bind(str_0)


def test_case_19():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_maybe()
    var_2 = var_1.to_lazy()
    var_0.is_success()
