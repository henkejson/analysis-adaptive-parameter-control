# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(bool_0)


def test_case_1():
    dict_0 = {}
    dict_1 = {}
    validation_0 = module_0.Validation(dict_0, dict_1)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_try()
    var_1.to_try()


def test_case_2():
    str_0 = "WHv9H8+A)"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_box()
    int_0 = -676
    var_1 = validation_0.to_maybe()
    var_2 = validation_0.is_success()
    validation_1 = module_0.Validation(int_0, var_2)
    var_3 = validation_1.__eq__(validation_0)
    var_4 = var_2.__str__()
    var_0.ap(var_0)


def test_case_3():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)


def test_case_4():
    str_0 = "WHv9H8+A)"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_either()
    var_1.is_success()


def test_case_5():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.is_fail()


def test_case_6():
    tuple_0 = ()
    int_0 = -569
    tuple_1 = (tuple_0, int_0)
    validation_0 = module_0.Validation(tuple_1, tuple_0)
    validation_0.map(int_0)


def test_case_7():
    int_0 = -864
    tuple_0 = ()
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, int_0)
    validation_1 = module_0.Validation(tuple_0, tuple_0)
    validation_1.bind(tuple_0)


def test_case_8():
    none_type_0 = None
    bool_0 = True
    validation_0 = module_0.Validation(none_type_0, bool_0)
    validation_0.ap(none_type_0)


def test_case_9():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(none_type_0)
    var_1 = validation_0.to_box()
    var_2 = var_1.__eq__(var_0)
    var_3 = validation_0.to_box()
    var_4 = var_3.to_either()
    var_2.is_fail()


def test_case_10():
    bytes_0 = b"\xc0^^,\x113U\xa1\xe4\xe2\xb0i*U"
    bytes_1 = b"O"
    dict_0 = {bytes_0: bytes_1, bytes_0: bytes_1}
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_box()
    var_1.ap(dict_0)


def test_case_11():
    str_0 = "WHv9H8+A)"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.to_try()
    validation_1 = module_0.Validation(str_0, var_0)
    var_2 = validation_1.__eq__(str_0)
    var_2.map(str_0)


def test_case_12():
    bytes_0 = b"\xf9\xd1U\x93\xb4\x82\xceH"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)
    var_0.to_box()


def test_case_13():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_either()
    var_0.to_either()


def test_case_14():
    str_0 = "WHv9H8+A)"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_box()
    validation_1 = module_0.Validation(str_0, var_0)
    validation_2 = module_0.Validation(validation_1, validation_1)
    var_1 = validation_2.__eq__(validation_0)
    validation_1.map(validation_2)


def test_case_15():
    str_0 = "WHv9H8+A)"
    tuple_0 = ()
    validation_0 = module_0.Validation(str_0, tuple_0)
    var_0 = validation_0.to_box()
    validation_1 = module_0.Validation(var_0, tuple_0)
    var_1 = var_0.__eq__(tuple_0)
    var_2 = validation_0.__str__()
    validation_0.ap(var_1)
