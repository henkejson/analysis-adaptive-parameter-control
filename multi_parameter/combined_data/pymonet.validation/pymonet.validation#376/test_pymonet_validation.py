# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0
import builtins as module_1


def test_case_0():
    bytes_0 = b"\\\xdcc\xcfx-\xfe\x00\x9d\xef"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.__str__()
    var_2 = var_0.to_try()
    validation_0.ap(var_1)


def test_case_1():
    bytes_0 = b"H\xe3E9c\xdc(i\x81s_b\xdc\xf0\x86\xd0\x08\xc7w\xd1"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_try()


def test_case_2():
    none_type_0 = None
    none_type_0.is_success()


def test_case_3():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_4():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.is_success()


def test_case_5():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.is_fail()
    var_1 = validation_0.to_box()
    var_2 = validation_0.to_box()
    var_3 = validation_0.to_box()


def test_case_6():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.map(none_type_0)


def test_case_7():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.bind(bool_0)


def test_case_8():
    str_0 = "7B<4AC\\)J73O5@5p"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_try()
    var_0.is_success()


def test_case_9():
    str_0 = "\n        Take function and call constructor fnction passing returned value to fn functon.\n\n        It's only way to call function store in Lazy\n        :param fn: Function(constructor_fn) -> B\n        :returns: result od folder function\n        :rtype: B\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_try()
    var_1 = validation_0.to_maybe()
    var_2 = var_1.to_lazy()
    var_3 = validation_0.__str__()
    var_4 = validation_0.is_fail()
    var_5 = validation_0.to_lazy()
    var_6 = validation_0.__eq__(validation_0)
    var_7 = var_6.__eq__(var_4)
    var_8 = var_1.bind(var_5)
    var_6.is_fail()


def test_case_10():
    str_0 = "\n        Take function and call constructor function passing returned value to fn function.\n\n        It's only way to call function store in Lazy\n        :param fn: Function(constructor_fn) -> B\n        :returns: result od folder function\n        :rtype: B\n        "
    dict_0 = {str_0: str_0}
    str_1 = "TO'1HPCaV0>YJU&"
    validation_0 = module_0.Validation(str_0, str_1)
    var_0 = validation_0.__eq__(dict_0)


def test_case_11():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_either()
    var_1 = dict_0.__eq__(var_0)
    var_2 = validation_0.to_try()
    var_1.to_lazy()


def test_case_12():
    str_0 = "\n        Take function and call constructor function passing returned value to fn function.\n\n        It's only way to call function store in Lazy\n        :param fn: Function(constructor_fn) -> B\n        :returns: result od folder function\n        :rtype: B\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_try()
    var_2 = validation_0.is_success()
    var_3 = validation_0.is_fail()
    var_4 = validation_0.to_lazy()
    var_5 = validation_0.__eq__(validation_0)
    var_6 = validation_0.to_try()
    var_7 = validation_0.to_try()
    var_6.ap(var_3)


def test_case_13():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.to_maybe()
    var_2 = validation_0.to_box()
    var_3 = validation_0.to_box()
    var_3.bind(var_3)


def test_case_14():
    str_0 = "Y0.?\nm8( m!;OE"
    validation_0 = module_0.Validation(str_0, str_0)
    bytes_0 = b"\xad\x0cAP\\\x85K\xb0"
    validation_1 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_1.__eq__(validation_0)
    validation_0.bind(var_0)


def test_case_15():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_maybe()
    var_2 = validation_0.is_fail()
    var_3 = validation_0.to_box()
    var_4 = module_1.object()
