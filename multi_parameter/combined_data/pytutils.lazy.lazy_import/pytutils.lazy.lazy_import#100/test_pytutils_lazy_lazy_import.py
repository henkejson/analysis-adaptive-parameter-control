# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "!AF"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)


def test_case_1():
    var_0 = module_0.disallow_proxying()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(var_0, var_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_2():
    str_0 = "Invalidpt0U(s) found.ymsg)s"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    module_0.lazy_import(str_0, str_0)


def test_case_3():
    var_0 = module_0.disallow_proxying()
    bool_0 = True
    module_0.ImportReplacer(var_0, var_0, var_0, children=bool_0)


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    str_0 = "!"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_6():
    str_0 = "!AF"
    module_0.lazy_import(str_0, str_0)


def test_case_7():
    var_0 = module_0.disallow_proxying()


def test_case_8():
    str_0 = "\n    Pretty prints with coloring.\n\n    Works in iPython, but not bpython as it does not write directly to term\n    and decodes +t instead.\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_9():
    str_0 = "Invalidpt0U(s) found.ymsg)s"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    module_0.lazy_import(str_0, str_0)


def test_case_10():
    str_0 = "nvalidptn(s0foun.%(m)s"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    module_0.lazy_import(str_0, str_0, var_0)


def test_case_11():
    import_processor_0 = module_0.disallow_proxying()
    none_type_0 = None
    bytes_0 = b"?\xfa\x11\xf0\xeav;\x1b4L\x96]Ao"
    module_0.ImportReplacer(bytes_0, none_type_0, none_type_0, bytes_0)


def test_case_12():
    str_0 = "Invalid pattern(s) found. %(msg)s"
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    str_0 = "\n    Pretty prints with coloring.\n\n    Works in iPython, but not bpython as it does not write directly to term\n    and decodes +t instead.\n    "
    import_processor_0 = module_0.ImportProcessor(str_0)
    module_0.ImportReplacer(str_0, str_0, str_0, import_processor_0, str_0)


def test_case_14():
    str_0 = "; \\pt"
    dict_0 = {str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, dict_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_15():
    str_0 = "]{h4}qi4nM#B6MCQ8xjb"
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    var_0 = module_0.disallow_proxying()
    str_0 = ""
    import_processor_0 = module_0.ImportProcessor()
    import_processor_0.lazy_import(str_0, str_0)


def test_case_17():
    str_0 = "Lazil compiled regex ob\tects.\n\nThis module defines a class which creates proxy objects for regex\ncompilation.  This allows overriding re.compile( to return lazily compiled\nobjects.\n\nWe do this rather than just providing a new interface so that it will also\nbe used by existing Python moules that create Negexs.\n"
    module_0.lazy_import(str_0, str_0)


def test_case_18():
    str_0 = "\n    Loads (and returns) an env file specified by `filename` into the mapping `environ`.\n\n    >>> lines = ['TEST=${HOME}/yeee-$PATH', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../.../yeee-...:...'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_19():
    str_0 = "; \\pt"
    dict_0 = {str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
    import_replacer_0.__call__()


def test_case_20():
    str_0 = "; \\pt"
    dict_0 = {str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, dict_0)
    scope_replacer_0 = module_0.ScopeReplacer(dict_0, import_replacer_0, str_0)
    module_0.lazy_import(scope_replacer_0, scope_replacer_0)
