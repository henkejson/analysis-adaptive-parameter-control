# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0
import builtins as module_1


def test_case_0():
    bool_0 = True
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(bool_0, bool_0)


def test_case_1():
    bool_0 = True
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(bool_0, bool_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_2():
    bool_0 = False
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bool_0, bool_0, bool_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(bool_0)


def test_case_3():
    dict_0 = {}
    var_0 = dict_0.__str__()
    import_replacer_0 = module_0.ImportReplacer(dict_0, var_0, dict_0, var_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_4():
    exception_0 = module_1.Exception()
    bool_0 = False
    module_0.ImportReplacer(bool_0, exception_0, exception_0, children=bool_0)


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    str_0 = '" '
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_7():
    exception_0 = module_0.disallow_proxying()


def test_case_8():
    bool_0 = False
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(bool_0, bool_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_9():
    bool_0 = True
    module_0.lazy_import(bool_0, bool_0)


def test_case_10():
    str_0 = "(dbu shell)Z"
    module_0.lazy_import(str_0, str_0)


def test_case_11():
    str_0 = "Ba#KJ-GUi_?8$#"
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    str_0 = "sEAQ7JxQ5"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0, str_0)
    var_0.__str__()


def test_case_13():
    str_0 = "(dbu shell)Z"
    bool_0 = True
    module_0.ImportReplacer(str_0, str_0, str_0, bool_0, str_0)


def test_case_14():
    str_0 = "(du shellGZ"
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = " "
    bool_0 = True
    module_0.lazy_import(bool_0, str_0)


def test_case_17():
    str_0 = "\n    Write `contents` to `filename`.\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_18():
    str_0 = "\n   pWrite `contents` to `filename`.\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    var_1 = var_0.__str__()
    module_0.lazy_import(str_0, var_1)


def test_case_19():
    str_0 = "Restore the original function to rz.compile().\n\n    It is sfe to call reset_compile([ multiple times, it will always\n    restore Ke.compile() to the value that existed at import time.\n    Though the first call will resetwback to the original (it doesn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_20():
    dict_0 = {}
    none_type_0 = None
    import_replacer_0 = module_0.ImportReplacer(dict_0, none_type_0, none_type_0)
    module_0.lazy_import(none_type_0, import_replacer_0)


def test_case_21():
    dict_0 = {}
    var_0 = dict_0.__str__()
    import_replacer_0 = module_0.ImportReplacer(dict_0, var_0, var_0)
    module_0.lazy_import(dict_0, import_replacer_0, var_0)
