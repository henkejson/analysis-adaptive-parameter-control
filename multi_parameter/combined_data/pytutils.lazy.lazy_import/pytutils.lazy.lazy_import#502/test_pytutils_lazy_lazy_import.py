# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "\t_,5_/\n^#*yaJR\t"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_1():
    str_0 = "\t_,5_/^#*qyaJR\t"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)


def test_case_2():
    str_0 = "A8w=6"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0.__repr__()


def test_case_3():
    complex_0 = 1939.6576956356469 - 184.089j
    dict_0 = {complex_0: complex_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, complex_0, complex_0, dict_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_4():
    complex_0 = 1939.6576956356469 - 184.089j
    dict_0 = {complex_0: complex_0}
    import_replacer_0 = module_0.ImportReplacer(
        dict_0, complex_0, dict_0, children=dict_0
    )
    module_0.lazy_import(dict_0, import_replacer_0)


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    str_0 = "\t_,5_U/^*qyaJR\t"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_7():
    var_0 = module_0.disallow_proxying()


def test_case_8():
    str_0 = "\t_,5_/^*qyaJR\t"
    module_0.lazy_import(str_0, str_0)


def test_case_9():
    list_0 = []
    list_1 = [list_0]
    module_0.ImportReplacer(list_1, list_0, list_0, list_0, list_1)


def test_case_10():
    str_0 = "p=Hk"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_11():
    str_0 = "v 5"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    module_0.lazy_import(var_0, str_0)


def test_case_12():
    bool_0 = False
    str_0 = "\r"
    module_0.lazy_import(bool_0, str_0)


def test_case_13():
    str_0 = "\t_,5_/\n^#*qyaJR\t"
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = "Create lazy imports for all of the imports in text.\n\n    This is typically used as something like::\n\n        from bzrlib.lazy_import import lazy_import\n        lazy_import(globals(), '''\n        from bzrlib import (\n            foo,\n            bar,\n            baz,\n            )\n        import bzrlib.branch\n        import bzrlib.transport\n        ''')\n\n    Then 'foo, bar, baz' and 'bzrlib' will exist as lazy-loaded\n    objects which will be replaced with a real object on first use.\n\n    In general, it is best to only load modules in this way. This is\n    because other objects (functions/classes/variables) are frequently\n    used without accessing a member, which means we cannot tell they\n    have been used.\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = "a(1 Z\n?\\1DvFgQ6!(&"
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = "c&nsoje"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
    module_0.lazy_import(str_0, import_replacer_0, str_0)


def test_case_17():
    str_0 = "c&nso!Tje"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
    scope_replacer_0 = module_0.ScopeReplacer(
        dict_0, import_replacer_0, import_replacer_0
    )
    module_0.lazy_import(import_replacer_0, scope_replacer_0)


def test_case_18():
    str_0 = "c&nso!Tje"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, str_0)
    module_0.lazy_import(dict_0, import_replacer_0)
