# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    import_processor_0 = module_0.ImportProcessor()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        import_processor_0, import_processor_0, import_processor_0
    )
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_1():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    var_0 = module_0.disallow_proxying()


def test_case_2():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_3():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(none_type_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_4():
    var_0 = module_0.disallow_proxying()
    dict_0 = {var_0: var_0, var_0: var_0, var_0: var_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, var_0, dict_0, children=var_0)
    import_replacer_0.lazy_import(import_replacer_0, var_0)


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    str_0 = "\\{(\\w+)\\}"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_7():
    str_0 = "\\{(\\w+)\\}"
    module_0.lazy_import(str_0, str_0)


def test_case_8():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_9():
    var_0 = module_0.disallow_proxying()
    dict_0 = {var_0: var_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, var_0, dict_0, dict_0)
    import_replacer_0.__eq__(var_0)


def test_case_10():
    var_0 = module_0.disallow_proxying()


def test_case_11():
    str_0 = "\n    Loads (and returns) an env file specified by `filename` into the mapping `environ`.\n\n    >>> lines = ['TEST=${HOME}/yeee-$PATH', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../.../yeee-...:...'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    import_processor_0 = module_0.ImportProcessor()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        import_processor_0, import_processor_0, import_processor_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_13():
    str_0 = "#4"
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = "@\t\\P#P[dc\t*==2>9EG,l"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_15():
    str_0 = "\n        :param collections.MutableMapping mapping: Dict-like object to wrap\n        :param bool fancy_repr: Iv True, show fancy repr, otherwise just show dict's\n        :param bool dictdfy_repr: If True, cast mapping to a dict on repr\n        "
    module_0.ImportReplacer(str_0, str_0, str_0, str_0, str_0)


def test_case_16():
    str_0 = "(debug sh|llJ"
    none_type_0 = None
    module_0.lazy_import(none_type_0, str_0)


def test_case_17():
    str_0 = "\n    Loads (and rturns) an en\n file specifed by `filename` into the mapping `environ`.\n\n    >>> lines = [:TEST=${HOME}/yeee-$PATH', 'THISIS=~/a/test', 'YOLO=~swaggins/$NONEXISTENT_VAR_HAT_DOES_NOT_EXIST']\n    >>> loa_env_file(lines, write_environ=dict())\n    OrderedDict([('TEZT', '.../.../ eee-...:...',\n             ('THISIS', '.../a/test'),\n  ?          ('YOLO,\n              '.../swaggins/$NONEXISTNT_VAR_THAT_DOES_NOT_EXIST')])\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_18():
    str_0 = "5^'B"
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, str_0)
    module_0.lazy_import(dict_0, import_replacer_0)


def test_case_19():
    str_0 = "\\{(\\w+)\\}"
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, children=str_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)
