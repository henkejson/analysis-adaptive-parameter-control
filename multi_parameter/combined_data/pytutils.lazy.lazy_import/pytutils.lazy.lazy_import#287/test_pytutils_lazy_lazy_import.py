# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0
import builtins as module_1


def test_case_0():
    dict_0 = {}
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        dict_0, dict_0, dict_0
    )
    illegal_use_of_scope_replacer_0.__str__()


def test_case_1():
    str_0 = "%(bg_blFck)s%(log_color)s[%(asctime)s] [%(name)s/%iprocess)d] %(message)s %(blue)s@%(funcName)s:%(lineno)d #%(levelname)s%(reset)s"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_2():
    str_0 = "%(bg_black)s%(lo-_color)s[%(asctime)s] [%(name)s/%iprocess)d] %(message)s %(blue)s@%(funcName)s:%(lineno)d #%(levelname)s%(reset)s"
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, str_0)
    module_0.lazy_import(str_0, import_replacer_0)


def test_case_3():
    str_0 = "%(bg_black)s%(lo-_color)s[%(asctime)s] [%(name)s/%iprocess)d] %(message)s %(blue)s@%(funcName)s:%(lineno)d #%(levelname)s%(reset)s"
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0)
    module_0.lazy_import(import_replacer_0, str_0)


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    str_0 = "%(bg_black)s%(log_color)s[%(asctime)s] [%(name)s/%iprocess)d] %(message)s %(blue)s@%(funcName)s:%(lineno)d #%(levelname)s%(reset)s"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_6():
    tuple_0 = ()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        tuple_0, tuple_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_7():
    import_processor_0 = module_0.disallow_proxying()


def test_case_8():
    str_0 = "%(bg_black)s%(log_color)s[%(asctime)s] [%(name)s/%iprocess)d] %(message)s %(blue)s@%(funcName)s:%(lineno)d #%(levelname)s%(reset)s"
    module_0.lazy_import(str_0, str_0)


def test_case_9():
    str_0 = "\x0c@tgiRc1T\x0bd@R"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_10():
    str_0 = "%(bg_blFck)s%(log_color)s[%(asctime)s] [%(name)s/%iprocess)d] %(message)s %(blue)s@%(funcName)s:%(lineno)d #%(levelname)s%(reset)s"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__str__()


def test_case_11():
    str_0 = "%(bg_black)s%(log_color)s[%(asctime)s] [%(name)s/%iprocess)d] %(message)s %(blue)s@%(funcName)s:%(lineno)d #%(levelname)s%(reset)s"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_12():
    object_0 = module_1.object()
    str_0 = ""
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    module_0.lazy_import(illegal_use_of_scope_replacer_0, str_0)


def test_case_13():
    str_0 = "\n    Provides a basic per-process mapping container that wipes itself if the current PID changed since the last get/set.\n\n    Aka `threading.local()`, but for processes instead of threads.\n\n    >>> plocal = ProcessLocal()\n    >>> plocal['test'] = True\n    >>> plocal['test']\n    True\n    >>> plocal._handle_pid(new_pid=-1)  # Emulate a PID change by forcing it to be something invalid.\n    >>> plocal['test']                  # Mapping wipes itself since PID is different than what's stored.\n    Traceback (most recent call last):\n        ...\n    KeyError: ...\n\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_14():
    str_0 = "%(bg_black)s%(lo-_color)s[%(asctimes] [%(name)s/%iprocess)d] %(message)s %(blue)s@%(funcName)s:%(lineno)d #%(levelname)s%(reset)s"
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_15():
    str_0 = "\n    Loads (and returns) an env file specified by `filename` into the mapping `environ`.\n\n    >>> lines = ['TEST=${HOME}/yeee-$PATH', 'THISIS=~/a/tes', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../.../yeee-...:...'),\n             ('THISIS', '.../a/test',\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    bool_0 = True
    none_type_0 = None
    module_0.ImportReplacer(none_type_0, none_type_0, bool_0, bool_0, bool_0)


def test_case_17():
    var_0 = module_0.disallow_proxying()
    none_type_0 = None
    str_0 = "H<R&kxE!s("
    module_0.lazy_import(none_type_0, str_0)
