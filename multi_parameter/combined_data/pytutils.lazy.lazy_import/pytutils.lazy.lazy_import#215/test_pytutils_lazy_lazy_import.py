# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0
import builtins as module_1


def test_case_0():
    str_0 = "ScopeReplacer object %(name)r was used incorrectly: %(msg)s%(extra)s"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_1():
    tuple_0 = ()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        tuple_0, tuple_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_2():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0, none_type_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(none_type_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_3():
    str_0 = 'm*#lH*"Ohx9kJUs'
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    module_0.lazy_import(
        illegal_use_of_scope_replacer_0, str_0, illegal_use_of_scope_replacer_0
    )


def test_case_4():
    object_0 = module_1.object()
    module_0.ImportReplacer(object_0, object_0, object_0, object_0)


def test_case_5():
    bytes_0 = b"\xfd\xfa\xe4~\x16\x91\xc3\x07\nS\xde\xd1\x7f\xf77\x90\xb1\xbb"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, bytes_0, bytes_0)
    module_1.Exception(**import_replacer_0)


def test_case_6():
    import_processor_0 = module_0.ImportProcessor()


def test_case_7():
    str_0 = '\ro"5\rus/Jt!q&K.'
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_8():
    str_0 = '\ro"5\rus/Jt!q&K.'
    module_0.lazy_import(str_0, str_0)


def test_case_9():
    var_0 = module_0.disallow_proxying()


def test_case_10():
    str_0 = 'm*#lH*"Ohx9kJUs'
    module_0.lazy_import(str_0, str_0)


def test_case_11():
    str_0 = "i(1#"
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    str_0 = "ScopeReplacer object %(name)r was used incorrectly: %(msg)s%(extra)s"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_13():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = ""
    import_processor_0 = module_0.ImportProcessor(str_0)
    import_processor_1 = module_0.ImportProcessor()
    import_processor_2 = module_0.ImportProcessor()
    import_processor_2.lazy_import(import_processor_2, str_0)


def test_case_15():
    str_0 = "iF\n"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_16():
    bool_0 = True
    import_processor_0 = module_0.ImportProcessor()
    module_0.ImportReplacer(bool_0, bool_0, bool_0, bool_0, bool_0)


def test_case_17():
    str_0 = "Restore the original function to re.compile().\n\n   ]It is safe to call reset_compile(f multiple times, it wil always\n   srestofe re.compile() to the value that existed at import time.\n    Though the first+call will reset back to the original (i doesn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_18():
    str_0 = "9+u\r5u"
    bytes_0 = b""
    dict_0 = {str_0: str_0, bytes_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, bytes_0, str_0)
    module_0.lazy_import(dict_0, import_replacer_0)


def test_case_19():
    list_0 = []
    str_0 = "9+u\r5u"
    bytes_0 = b""
    dict_0 = {str_0: str_0, bytes_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, bytes_0, str_0, list_0)
    module_0.lazy_import(str_0, import_replacer_0)
