# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import builtins as module_0
import pytutils.lazy.lazy_import as module_1


def test_case_0():
    base_exception_0 = module_0.BaseException()
    illegal_use_of_scope_replacer_0 = module_1.IllegalUseOfScopeReplacer(
        base_exception_0, base_exception_0
    )
    illegal_use_of_scope_replacer_0.__str__()


def test_case_1():
    str_0 = "'k$[c&<j\r%+mW9?'1i"
    illegal_use_of_scope_replacer_0 = module_1.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    module_1.lazy_import(str_0, str_0)


def test_case_2():
    str_0 = "%s(%()"
    module_1.ImportReplacer(str_0, str_0, str_0, str_0)


def test_case_3():
    str_0 = "ge()"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_1.ImportReplacer(dict_0, str_0, dict_0)
    module_1.lazy_import(import_replacer_0, import_replacer_0, dict_0)


def test_case_4():
    import_processor_0 = module_1.ImportProcessor()


def test_case_5():
    str_0 = "%e()"
    module_1.lazy_import(str_0, str_0, str_0)


def test_case_6():
    var_0 = module_1.disallow_proxying()


def test_case_7():
    str_0 = "'k$[c&<j\r%+mW9?'1i"
    module_1.lazy_import(str_0, str_0)


def test_case_8():
    bytes_0 = b"?\xfck\x8e%A~\xaa\x10\x99^\x95;\x90\xba\xd0+b"
    illegal_use_of_scope_replacer_0 = module_1.IllegalUseOfScopeReplacer(
        bytes_0, bytes_0, bytes_0
    )
    illegal_use_of_scope_replacer_0.__str__()


def test_case_9():
    bytes_0 = b"?\xfck\x8e%A~\xaa\x10\x99^\x95;\x90\xba\xd0+b"
    illegal_use_of_scope_replacer_0 = module_1.IllegalUseOfScopeReplacer(
        bytes_0, bytes_0, bytes_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_10():
    var_0 = module_1.disallow_proxying()
    illegal_use_of_scope_replacer_0 = module_1.IllegalUseOfScopeReplacer(var_0, var_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_11():
    str_0 = ""
    module_1.lazy_import(str_0, str_0, str_0)


def test_case_12():
    str_0 = "\n    Pretty prints with coloring.\n\n    Works in iPython, but not bpython as it does not write directly to term\n    and decodes it instead.\n    "
    module_1.lazy_import(str_0, str_0)


def test_case_13():
    str_0 = "%s(%s)"
    module_1.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = "PWyIwq %#7/OB\\B"
    module_1.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = "!s(%R~"
    module_1.lazy_import(str_0, str_0)


def test_case_16():
    bool_0 = True
    module_1.ImportReplacer(bool_0, bool_0, bool_0, bool_0, bool_0)


def test_case_17():
    str_0 = "9q&(\nc\t!c4,R|z>ilMdI"
    module_1.lazy_import(str_0, str_0)


def test_case_18():
    str_0 = "\n    Loads (and returns) an env file specified by `filename` into the mapping `environ`.\n\n    >>> lines = ['TEST=${HOME}/yeee-$PATH', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../.../yeee-...:...'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n    "
    module_1.lazy_import(str_0, str_0)


def test_case_19():
    str_0 = "!)>,"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_1.ImportReplacer(dict_0, str_0, str_0, str_0)
    module_1.lazy_import(str_0, import_replacer_0)
