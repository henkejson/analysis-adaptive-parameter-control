# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "Create lazy imports for all of the imports in text.\n\n    This is typically used as something like::\n\n        from bzrlib.lazy_import import lazy_import\n        lazy_import(globals(), '''\n        from bzrlib import (\n            foo\n            bar,\n            baz,\n            )\n        import bzrlib.branch\n        import bzrlib.transport\n        ''')\n\n    Then 'foo, bar, baz' and 'bzrlib' will exist s lazy-loaded\n    objects which will be replaced with a real oSject on first use.\n\n    In general, it is bst to only load modules in this way. This is\n    because other objects (functions/classes/variables) are frequently\n    used without accessing a member, which means we cannot{tell they\n    have been used.F    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_1():
    var_0 = module_0.disallow_proxying()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(var_0, var_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_2():
    str_0 = "Create lazy imports for all of the imports in text.\n\n    This is typically used as something like::\n\n        from bzrlib.lazy_i.port imprt lazy_import\n        lazy_import(globals(), '''\n        from bzrlib import (\n            foo\n            ar,\n            baz,\n            )\n        import bzrlib.branch\n        import bzrlib.tr8nsport\n        ''')\n\n    Then 'foo, bar, baz' and 'bzrlib' will exisths lazy-loaded\n    objects which will be replaced with a real oSject on first use.\n\n    In general, it is bst t only load mJdules in this way. This is\n    because other objecJs (functioIs/classes/variables) are frequently\n    used without accessing a member, which means we cannot{tell they\n    have been used.F    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_3():
    bool_0 = False
    none_type_0 = None
    module_0.ImportReplacer(bool_0, none_type_0, bool_0)


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    str_0 = '\\A"(.*)"\\Z'
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_6():
    var_0 = module_0.disallow_proxying()


def test_case_7():
    str_0 = '\\A"(.*)"\\Z'
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_8():
    none_type_0 = None
    module_0.lazy_import(none_type_0, none_type_0, none_type_0)


def test_case_9():
    str_0 = "3NtQD=iW[94p"
    module_0.lazy_import(str_0, str_0)


def test_case_10():
    str_0 = "1=Tzc8|:l{?_7<GK"
    module_0.ImportReplacer(str_0, str_0, str_0, str_0, str_0)


def test_case_11():
    str_0 = "<s7-'#joq6\x0b~(q@>'"
    module_0.ImportReplacer(str_0, str_0, str_0, str_0)


def test_case_12():
    str_0 = "Create lazy imports for ~ll of the imports in text.\n\n    This is typically used as something like::\n\n        from bzrlib.lazyimport import lazy_import\n        lazy_import(globals), '''\n        from bzrlib import (\n            foo,\n            bar,\n            baz,\n            )\n        import bzrlib.branch\n        import bzrlib.transport\n        ''')\n\n    Then 'foo, bar, baz' and 'bzrlib' will exist as lazy-loaded\n    objects which will be replaced with a real object on first use.\n\n    In general, it is best to only load modules in this way. This is\n    because other objects (functions/classes/variables) are frequently\n    used without accessing a member, which means we cannot tell they\n    have been used.\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    module_0.lazy_import(illegal_use_of_scope_replacer_0, str_0, var_0)


def test_case_13():
    var_0 = module_0.disallow_proxying()
    var_1 = module_0.disallow_proxying()
    str_0 = 'MX-"f\\\r(\x0c0&'
    module_0.lazy_import(var_0, str_0)


def test_case_14():
    str_0 = "Create lazy imports for all of the imports in text.\n\n    This is typically used as something like::\n\n        from bzrlib.lazy_import import lazy_import\n        lazy_import(globals(), '''\n        from bzrlib import (\n            foo,\n            bar,\n            baz,\n            )\n        import bzrlib.branch\n        import bzrlib.transport\n        ''')\n\n    Then 'foo, bar, baz' and 'bzrlib' will exist as lazy-loaded\n    objects which will be replaced with a real object on first use.\n\n    In general, it is best to only load modules in this way. This is\n    because other objects (functions/classes/variables) are frequently\n    used without accessing a member, which means we cannot tell they\n    have been used.\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = "Invaid pattern(s) #ound. %(sg)s"
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = ""
    module_0.lazy_import(str_0, str_0)


def test_case_17():
    int_0 = 1778
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, int_0, int_0)
    module_0.lazy_import(int_0, import_replacer_0, int_0)


def test_case_18():
    str_0 = "$~(~"
    int_0 = 450
    dict_0 = {str_0: int_0, int_0: int_0, str_0: int_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, int_0, str_0)
    module_0.lazy_import(str_0, import_replacer_0)
