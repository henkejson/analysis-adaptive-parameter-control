# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    bool_0 = False
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(bool_0, bool_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_1():
    str_0 = ">s"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_2():
    str_0 = "j1/Fp9\njni^$Kq\t%"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_3():
    bytes_0 = b"\x12\x88\xde\x84x"
    str_0 = "\r!Z{GCp<tJ \x0c!#1VAG"
    module_0.ImportReplacer(bytes_0, str_0, str_0, children=bytes_0)


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    str_0 = "j1/Fp9\njni^$Kq\t%"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_6():
    str_0 = ""
    set_0 = {str_0}
    module_0.lazy_import(set_0, str_0)


def test_case_7():
    var_0 = module_0.disallow_proxying()


def test_case_8():
    str_0 = "CbHja#\r52m6"
    module_0.lazy_import(str_0, str_0)


def test_case_9():
    str_0 = " Convert one queue into several. Kind of like a teeing queue.\n\n    >>> in_q = Queue()\n    >>> q1, q2, q3 = multiplex(in_q, count=3)\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_10():
    str_0 = "j1/Fp9\njni^$Kq\t%"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0, str_0)
    var_0.__str__()


def test_case_11():
    bool_0 = False
    module_0.ImportReplacer(bool_0, bool_0, bool_0, bool_0, bool_0)


def test_case_12():
    str_0 = "31Vh-lq?O(DTc\nfu"
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    str_0 = "^?"
    dict_0 = {str_0: str_0, str_0: str_0}
    bool_0 = True
    none_type_0 = None
    module_0.ImportReplacer(str_0, none_type_0, bool_0, str_0, dict_0)


def test_case_14():
    str_0 = "1*j2Q2"
    dict_0 = {str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, children=dict_0)
    module_0.lazy_import(dict_0, import_replacer_0, str_0)


def test_case_15():
    str_0 = "\n    Turn a function to a bound method on an instance\n\n    >>> class Foo(object):\n    ...     def __init__(self, x, y):\n    ...         self.x = x\n    ...         self.y = y\n    >>> foo = Foo(2, 3)\n    >>> my_unbound_method = lambda self: self.x * self.y\n    >>> bind(foo, my_unbound_method, 'multiply')\n    >>> foo.multiply()  # noinspection PyUnresolvedReferences\n    6\n\n    :param object instance: some object\n    :param callable func: unbound method (i.e. a function that takes `self` argument, that you now\n        want to be bound to this class as a method)\n    :param str as_name: name of the method to create on the object\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = "g\\k!y"
    none_type_0 = None
    dict_0 = {none_type_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, dict_0)
    import_replacer_0.__getattribute__(dict_0)
