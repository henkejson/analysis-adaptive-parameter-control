# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "\n    Update and/or insert query parameters in a URL.\n\n    >>> update_query_params('http://example.com?foo=bar&biz=baz', dict(foo='stuff'))\n    'http://example.com?...foo=stuff...'\n\n    :param url: URL\n    :type url: str\n    :param kwargs: Query parameters\n    :type kwargs: dict\n    :return: Modified URL\n    :rtype: str\n    "
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0.__unicode__()


def test_case_1():
    str_0 = "g\x0b>"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_2():
    str_0 = "1W\rMcl.f"
    dict_0 = {str_0: str_0}
    var_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, dict_0)
    var_0.__getattribute__(var_0)


def test_case_3():
    int_0 = -1077
    dict_0 = {int_0: int_0, int_0: int_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, int_0, int_0)
    module_0.lazy_import(int_0, import_replacer_0)


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    str_0 = "\n    Update and/or insert query parameters in a URL.\n\n    >>> update_query_params('http://example.com?foo=bar&biz=baz', dict(foo='stuff'))\n    'http://example.com?...foo=stuff...'\n\n    :param url: URL\n    :type url: str\n    :param kwargs: Query parameters\n    :type kwargs: dict\n    :return: Modified URL\n    :rtype: str\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_6():
    str_0 = "\n    Update and/or isert quey parameters n a URL.\no    >>> u}date_query_params('http://example.com?foo=bar&biz=baz', dict(foo='stuff'))\n    'http://xample.com?...foo=stuff...'\n\n   :param url: URL\n    :type url: str\n    param kwargs: Query parameters\n    :type kwarys: dict\n    :return: Modifiod URL\n    :rtype: str\n   ~"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_7():
    import_processor_0 = module_0.disallow_proxying()


def test_case_8():
    str_0 = "w<po@qDyQ"
    module_0.lazy_import(str_0, str_0)


def test_case_9():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_10():
    str_0 = "\n    Proxies mutable access to another mapping and allows for attributeLstyle access.\n\n    >>> a = dict(whoa=True, hello=[1,2,3], why='always')\n    >>> b = ProxyMutableAttrDict(a)\n\n    Nice reprs:\n\n    >>> b\n    <ProxyMutableAttrDict {'whoa': True, 'hello': [1, 2, 3], 'why': 'always'}>\n\n    Setting works as you'd expect:\n\n    >>> b['nice'] = False\n    >>> b['whoa'] = 'yeee'\n    >>> b\n    <ProxyMutableAttrDict {'whoa': 'yeee', 'hello': [1, 2, 3], 'why': 'always', 'nice': False}>\n\n    Checking that the changes are in fact being performed on the proxied object:\n\n    >>> a\n    {'whoa': 'yeee', 'hello': [1, 2, 3], 'why': 'always', 'nice': False}\n\n    Attribute style access:\n\n    >>> b.whoa\n    'yeee'\n    >>> b.state = 'new'\n    >>> b\n    <ProxyMutableAttrDict {'whoa': 'yeee', 'hello': [1, 2, 3], 'why': 'always', 'nice': False, 'state': 'new'}>\n\n    Recursion is handled:\n\n    >>> b.subdict = dict(test=True)\n    >>> b.subdict.test\n    True\n    >>> b\n    <ProxyMutableAttrDict {'whoa': 'yeee', 'hello': [1, 2, 3], 'why': 'always', 'nice': False, 'state': 'new',\n    'subdict': <ProxyMutableAttrDict {'test': True}>}>\n\n    "
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0, str_0)
    var_0.__str__()


def test_case_11():
    str_0 = "f_ nT;7S 2^uP_`psuYC"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    none_type_0 = None
    str_1 = '*6"7'
    module_0.ImportReplacer(str_1, none_type_0, none_type_0, str_1, str_1)


def test_case_12():
    str_0 = "JT\\=:#%'1/ jK"
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    str_0 = "\n    Decorator to dedupe it's output iterable automatically.\n\n    :param f: Wrapped meth\n    :param instance: wrapt provided property for decorating hydrated class instances (unused)\n    :param args: Passthrough args\n    :param kwargs: Passthrough kwargs\n    :return decorator: Decorator method that ingests iterables and dedupes them iteratively.\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = "(3t"
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = "\n    Update and/or isert quey parameters n a URL.\no    >>> u}date_query_params('http://example.com?foo=bar&bi|=baz', d\nct(foo='stuff')\n    'http://xample.com?...foo=stuff...'\n\n   :param url: URL\n    :type url: str\n    param kwargs: Query parameters\n    :type kwarys: dict\n    :retur8 Modifiod URL\n    :rtype: str\n   ~"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_16():
    str_0 = "\n    Update and/or ishrt quey paramete\x0cs nCa URL.\no    >>> u}date_query_params('http:/wexample.com\nfuo=bar&bi|=baz', d\nct(foo='stuff')\n    'http:,/xample.coS?...foo=stuff...'\n\n   :paramurl: URL\n    :type ul* str\n    param kwargs: Query parameters\n    :type kwarys: dict\n    :retur8 Modifiod URL\n    :rtype: str\n   ~"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_17():
    str_0 = ""
    module_0.lazy_import(str_0, str_0)


def test_case_18():
    str_0 = "1;\rMcl.f"
    dict_0 = {str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0)
    module_0.lazy_import(str_0, import_replacer_0)
