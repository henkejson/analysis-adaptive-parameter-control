# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "\\"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_1():
    dict_0 = {}
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        dict_0, none_type_0
    )


def test_case_2():
    int_0 = 645
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(int_0, int_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_3():
    int_0 = 645
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(int_0, int_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(int_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_4():
    str_0 = "{I!.AT1V"
    dict_0 = {str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, str_0)
    module_0.lazy_import(dict_0, import_replacer_0)


def test_case_5():
    str_0 = "{I!.AT1V"
    dict_0 = {str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, children=str_0)
    import_replacer_0.__getattribute__(str_0)


def test_case_6():
    import_processor_0 = module_0.ImportProcessor()


def test_case_7():
    str_0 = "<$~"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_8():
    str_0 = ".!U2;uN?HN"
    dict_0 = {}
    scope_replacer_0 = module_0.ScopeReplacer(dict_0, str_0, str_0)
    module_0.lazy_import(str_0, str_0)


def test_case_9():
    var_0 = module_0.disallow_proxying()


def test_case_10():
    str_0 = ".!U2;uN?HN"
    dict_0 = {}
    scope_replacer_0 = module_0.ScopeReplacer(dict_0, str_0, str_0)
    scope_replacer_0.__setattr__(str_0, scope_replacer_0)


def test_case_11():
    str_0 = "AbLT(}$&e"
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    str_0 = "\n    >>> log = get_logger(~\n    >>> log.info('test'*\n\n    >>> log = get_logger!'testS')\n  L C>4 lo4.info('test2')\n   "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    import_replacer_0 = illegal_use_of_scope_replacer_0.__eq__(
        illegal_use_of_scope_replacer_0
    )
    module_0.lazy_import(import_replacer_0, str_0, str_0)


def test_case_13():
    str_0 = ""
    var_0 = module_0.disallow_proxying()
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = "\n    Update and/or insert query parameters in a URL.\n\n    >>> update_query_params('http://example.com?foo=bar&biz=baz', dict(foo='stuff'))\n    'http://example.com?...foo=stuff...'\n\n    :param url: URL\n    :type url: str\n    :param kwargs: Query parameters\n    :type kwargs: dict\n    :return: Modified URL\n    :rtype: str\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_15():
    str_0 = "{I!.AT1V"
    dict_0 = {str_0: str_0, str_0: str_0}
    none_type_0 = None
    bool_0 = True
    module_0.ImportReplacer(dict_0, dict_0, none_type_0, dict_0, bool_0)


def test_case_16():
    str_0 = "K4~#+D(\tPT2t:u"
    module_0.lazy_import(str_0, str_0)


def test_case_17():
    str_0 = " rr;X1(2Lx>M|)y k"
    module_0.lazy_import(str_0, str_0)


def test_case_18():
    str_0 = "\n    >>> log = get_logger(~\n    >>> log.info('test'*\n\n    >x> log = get_logger!'testS')\n  L C>> lo4.info('test2')\n   "
    module_0.lazy_import(str_0, str_0)


def test_case_19():
    str_0 = "{I!.AT1V"
    dict_0 = {str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, str_0)
    var_0 = module_0.ScopeReplacer(dict_0, import_replacer_0, str_0)
    var_0.__getattribute__(str_0)
