# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0
import builtins as module_1


def test_case_0():
    int_0 = 2935
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        int_0, int_0, int_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_1():
    str_0 = "\n    Lazy/Cached class property.\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    module_0.lazy_import(str_0, str_0)


def test_case_2():
    str_0 = "\n    Parses env file content.\n\n    From honcho.\n\n    >>> lines = ['TEST=${HOME}/yeee', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../yeee'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    module_0.lazy_import(str_0, str_0)


def test_case_3():
    str_0 = "7>7`ml\x0b\n#*"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, str_0)
    import_replacer_0.__getattribute__(dict_0)


def test_case_4():
    str_0 = "7>7`ml\n#p"
    dict_0 = {str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, children=str_0)
    module_0.lazy_import(dict_0, import_replacer_0)


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    str_0 = "atefmt"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_7():
    bytes_0 = b"\xfd@\xfa\x12\xab\x97\x90\xfa\xd6S'\xe2\xa1\x1f\x0f"
    module_0.ScopeReplacer(bytes_0, bytes_0, bytes_0)


def test_case_8():
    import_processor_0 = module_0.disallow_proxying()


def test_case_9():
    str_0 = "G r?x{dBS\t3-:@TO"
    module_0.lazy_import(str_0, str_0)


def test_case_10():
    base_exception_0 = module_1.BaseException()
    bool_0 = False
    bool_1 = True
    var_0 = base_exception_0.__eq__(base_exception_0)
    module_0.ImportReplacer(bool_0, bool_1, var_0, bool_0, base_exception_0)


def test_case_11():
    int_0 = 2927
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        int_0, int_0, int_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_12():
    str_0 = "Create a proxy object*which will compi(e thY regex on demand.\n\n    :retugn: a LazuRegex proxy object.\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_13():
    str_0 = "9Px5#G%iP/d(wh"
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = "Create a proxy object which will compile the regex on demand.\n\n    :return: a LazyRegex proxy object.\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = " "
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = "\n    Parses env file content.\n\n    From honcho.\n\n    >>> lines = ['TEST=${HOME}/yeee', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../yeee'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n\n    "
    module_0.lazy_import(str_0, str_0)
