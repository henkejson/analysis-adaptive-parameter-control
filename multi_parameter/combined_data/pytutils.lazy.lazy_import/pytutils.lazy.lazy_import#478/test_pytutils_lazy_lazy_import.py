# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import builtins as module_0
import pytutils.lazy.lazy_import as module_1


def test_case_0():
    exception_0 = module_0.Exception()
    illegal_use_of_scope_replacer_0 = module_1.IllegalUseOfScopeReplacer(
        exception_0, exception_0, exception_0
    )
    illegal_use_of_scope_replacer_0.__str__()


def test_case_1():
    var_0 = module_1.disallow_proxying()
    var_1 = module_1.IllegalUseOfScopeReplacer(var_0, var_0)
    var_1.__str__()


def test_case_2():
    str_0 = '+D5?P?M\rb79J"clc\\\\\n'
    illegal_use_of_scope_replacer_0 = module_1.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_3():
    var_0 = module_1.disallow_proxying()
    dict_0 = {var_0: var_0, var_0: var_0, var_0: var_0}
    import_replacer_0 = module_1.ImportReplacer(dict_0, var_0, var_0, dict_0, var_0)
    module_1.lazy_import(var_0, import_replacer_0)


def test_case_4():
    var_0 = module_1.disallow_proxying()
    module_1.ImportReplacer(var_0, var_0, var_0)


def test_case_5():
    import_processor_0 = module_1.ImportProcessor()


def test_case_6():
    str_0 = '\x0cs<Nu$"N)$Cgwk\rIi*r'
    module_1.lazy_import(str_0, str_0, str_0)


def test_case_7():
    str_0 = '\x0cs<Nu$"N)$Cgwk\rIi*r'
    module_1.lazy_import(str_0, str_0)


def test_case_8():
    var_0 = module_1.disallow_proxying()


def test_case_9():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_1.ImportReplacer(bool_0, dict_0, bool_0, dict_0, dict_0)


def test_case_10():
    str_0 = "5KyLB`"
    illegal_use_of_scope_replacer_0 = module_1.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_11():
    str_0 = "3+K|mC]>M"
    illegal_use_of_scope_replacer_0 = module_1.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_12():
    str_0 = "Format each string value of dictionary using values contained within\n    itself, keeping track of dependencies as required.\n\n    Also converts any formatted values according to conversions dict.\n\n    Example:\n\n    >>> from pprint import pprint as pp\n    >>> c = dict(wat='wat{omg}', omg=True)\n    >>> pp(format_dict_recursively(c))\n    {'omg': True, 'wat': 'watTrue'}\n\n    Dealing with missing (unresolvable) keys in format strings:\n\n    >>> from pprint import pprint as pp\n    >>> c = dict(wat='wat{omg}', omg=True, fail='no{whale}')\n    >>> format_dict_recursively(c)\n    Traceback (most recent call last):\n        ...\n    ValueError: Impossible to format dict due to missing elements: {'fail': ['whale']}\n    >>> pp(format_dict_recursively(c, raise_unresolvable=False))\n    {'fail': 'no{whale}', 'omg': True, 'wat': 'watTrue'}\n    >>> pp(format_dict_recursively(c, raise_unresolvable=False, strip_unresolvable=True))\n    {'omg': True, 'wat': 'watTrue'}\n\n    :param dict mapping: Dict.\n    :param bool raise_unresolvable: Upon True, raises ValueError upon an unresolvable key.\n    :param bool strip_unresolvable: Upon True, strips unresolvable keys.\n    :param dict conversions: Mapping of {from: to}.\n    "
    module_1.lazy_import(str_0, str_0, str_0)


def test_case_13():
    str_0 = ""
    module_1.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = "(F"
    module_1.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = "Format each string vale of dictionary using values contained within\n    itself, keeping track of dependencies as required.\n\n    Also converts any formatted values according to conversions dict.\n\n    Example:\n\n    >>> from pprint import pprint as pp\n    >>> c = dict(wat='wat{omg}', omg=True\n    >>> pp(format_dict_recursively(c))\n    {'omg': True, 'wat': 'watTrue'}\n\n    Dealing with missing (unresolvable) keys in format strings:\n\n    >>> from pprint import pprint as pp\n    >>> c = dict(wat='wat{omg}', omg=True, fail='no{whale}')\n    >>> format_dict_recursively(c)\n    Traceback (most recent call last):\n        ...\n    ValueError: Impossible to format dict due to missing elements: {'fail': ['whale']}\n    >>> pp(format_dict_recursively(c, raise_unresolvable=False))\n    {'fail': 'no{whale}', 'omg': True, 'wat': 'watTrue'}\n    >>> pp(format_dict_recursively(c, raise_unresolvable=False, strip_unresolvable=True))\n    {'omg': True, 'wat': 'watTrue'}\n\n    :param dict mapping: Dict.\n    :param bool raise_unresolvable: Upon True, raises ValueError upon an unresolvable key.\n    :param bool strip_unresolvable: Upon True, strips unresolvable keys.\n    :param dict conversions: Mapping of {from: to}.\n    "
    module_1.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = " Merge mu8tipl( queues together\n\n    >>> q1, q2, }3 = [Queue() for_ in rnnge(3)]\n    >>> out_q = merge(q1,@q2, q3)\n    "
    module_1.lazy_import(str_0, str_0)


def test_case_17():
    str_0 = "R#8:X0>M}BFM"
    module_1.lazy_import(str_0, str_0, str_0)


def test_case_18():
    var_0 = module_1.disallow_proxying()
    dict_0 = {var_0: var_0, var_0: var_0, var_0: var_0}
    import_replacer_0 = module_1.ImportReplacer(dict_0, var_0, var_0, var_0, var_0)
    module_1.lazy_import(var_0, import_replacer_0)


def test_case_19():
    str_0 = 'D"N"J'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_1.ImportReplacer(dict_0, str_0, str_0)
    module_1.lazy_import(import_replacer_0, import_replacer_0, dict_0)


def test_case_20():
    str_0 = "_lege_ars"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_1.ImportReplacer(dict_0, str_0, str_0, str_0)
    import_replacer_0.__call__()
