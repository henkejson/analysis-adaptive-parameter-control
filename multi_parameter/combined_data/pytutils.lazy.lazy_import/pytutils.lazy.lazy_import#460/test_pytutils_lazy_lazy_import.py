# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "v|=?V7x"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_1():
    var_0 = module_0.disallow_proxying()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        var_0, var_0, var_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_2():
    str_0 = "y    Loads (and returns) an env file specified by `filename6 into the mapping `environ`.\n\n    >>> lines = ['TEST=${HOME}/yeee-$PATH', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lies, write_environ=dict())\n    OrderedDict([('TEST', '.../.../yeee-...:...'),\n             ('TH%SIS', '.../atest',\n             ('YOLO',\n             '.../swaggins/$NONEXISTENT_VAR_THAT_DOS+NOT_cXIST')])\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_3():
    int_0 = 911
    none_type_0 = None
    set_0 = {int_0, int_0}
    module_0.ImportReplacer(int_0, none_type_0, none_type_0, set_0)


def test_case_4():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    import_replacer_0 = module_0.ImportReplacer(list_0, bool_0, bool_0)
    import_replacer_0.__call__()


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    str_0 = "v|=?V7x"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_7():
    int_0 = -1862
    import_processor_0 = module_0.ImportProcessor(int_0)
    none_type_0 = None
    str_0 = ""
    import_processor_0.lazy_import(none_type_0, str_0)


def test_case_8():
    str_0 = "!v'Ob=?n&Vx7x"
    module_0.lazy_import(str_0, str_0)


def test_case_9():
    var_0 = module_0.disallow_proxying()


def test_case_10():
    str_0 = "\n    Loads (and returns) an env file specified by `filename` into the mapping `environ`.\n\n    >>> lines = ['TEST=${HOME}/yeee-$PATH', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../.../yeee-...:...'),\n             ('THISIS', '...a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_11():
    str_0 = "VXT6k\n(\x0bj>"
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    var_0 = module_0.disallow_proxying()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        var_0, var_0, var_0
    )
    var_1 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_13():
    str_0 = "FF"
    module_0.ImportReplacer(str_0, str_0, str_0, str_0, str_0)


def test_case_14():
    str_0 = "2S ^CxD#`8g:"
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = '1b!"E\\\r0B$ylI);CO1('
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_16():
    str_0 = "y    Loads (and returns) an env file specified by `filename` into the mapping `environ`.\n\n    >>> lines = ['TEST=${HOME}/yeee-$PATH', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lies, write_environ=dict())\n    OrderedDict([('TEST', '.../.../yeee-...:...'),\n             ('THISIS', '.../a/test',\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_17():
    dict_0 = {}
    none_type_0 = None
    var_0 = none_type_0.__repr__()
    import_replacer_0 = module_0.ImportReplacer(dict_0, none_type_0, var_0, none_type_0)
    import_replacer_0.__call__()


def test_case_18():
    dict_0 = {}
    var_0 = dict_0.__repr__()
    import_replacer_0 = module_0.ImportReplacer(dict_0, var_0, var_0, dict_0)
    import_replacer_0.__getattribute__(var_0)


def test_case_19():
    dict_0 = {}
    var_0 = module_0.disallow_proxying()
    import_replacer_0 = module_0.ImportReplacer(dict_0, var_0, var_0, dict_0)
    var_1 = module_0.ScopeReplacer(dict_0, import_replacer_0, import_replacer_0)
    var_1.lazy_import(import_replacer_0, import_replacer_0)
