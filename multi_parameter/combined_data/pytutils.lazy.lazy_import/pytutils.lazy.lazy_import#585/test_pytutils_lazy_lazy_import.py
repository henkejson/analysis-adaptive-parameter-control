# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0
import builtins as module_1


def test_case_0():
    var_0 = module_0.disallow_proxying()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        var_0, var_0, var_0
    )


def test_case_1():
    exception_0 = module_1.Exception()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        exception_0, exception_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_2():
    str_0 = "2%"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)


def test_case_3():
    str_0 = "^%"
    module_0.ImportReplacer(str_0, str_0, str_0, str_0)


def test_case_4():
    var_0 = module_0.disallow_proxying()
    module_0.ImportReplacer(var_0, var_0, var_0, children=var_0)


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    str_0 = "L?W9"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_7():
    var_0 = module_0.disallow_proxying()


def test_case_8():
    int_0 = 486
    dict_0 = {int_0: int_0}
    scope_replacer_0 = module_0.ScopeReplacer(dict_0, int_0, int_0)
    scope_replacer_0.__setattr__(int_0, int_0)


def test_case_9():
    str_0 = ")6v"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_10():
    str_0 = ""
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_11():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_12():
    str_0 = 'q(}`P(It."!GB\nw0'
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    str_0 = "N_ ^.#p7T>u\r"
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    bytes_0 = b"\xdfZ\xd7\x8c`\xa9P\xb2c\xe7\xc9qyK"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bytes_0, bytes_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_15():
    str_0 = "4$LAhhJc$}|"
    module_0.ImportReplacer(str_0, str_0, str_0, str_0, str_0)


def test_case_16():
    str_0 = "$zYtEf"
    dict_0 = {str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0)
    import_replacer_0.__getattribute__(str_0)


def test_case_17():
    str_0 = "$zYYytErfq"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, str_0)
    module_0.lazy_import(dict_0, import_replacer_0)


def test_case_18():
    str_0 = "FD]]?22K(0Qh$J"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, str_0)
    var_0 = module_0.ScopeReplacer(dict_0, import_replacer_0, str_0)
    var_0.__str__()
