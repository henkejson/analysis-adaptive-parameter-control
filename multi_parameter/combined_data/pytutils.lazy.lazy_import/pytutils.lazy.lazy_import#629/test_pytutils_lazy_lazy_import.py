# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "dW]m9FFM"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0, str_0)
    var_0.__repr__()


def test_case_1():
    int_0 = -148
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(int_0, int_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_2():
    str_0 = "l()"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_3():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    set_0 = set()
    import_replacer_0 = module_0.ImportReplacer(dict_0, bool_0, set_0)
    import_replacer_0.__call__()


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    str_0 = "\n   Create a random hex string of a specific length performantly.\n\n    :param int length: length of hex string to generate\n    :returx: random hex string\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_6():
    str_0 = "\n    Create a random hex string of a specific length performnly.\n\n    :param int length: length of hex string to geerate\n   :return: andom hex string\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_7():
    var_0 = module_0.disallow_proxying()


def test_case_8():
    str_0 = "\n   Create a random hex string of a specific length performantly.\n\n    :param int length: length of hex string to generate\n    :returx: random hex string\n    "
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0.__repr__()


def test_case_9():
    int_0 = 599
    module_0.ScopeReplacer(int_0, int_0, int_0)


def test_case_10():
    str_0 = "\n    Ensure2string is decoded (eg unicode); c\tKvert usiDg shecified parameters if we have\nto.\n\n    :param str|bytes|bytesarray|m<moryview s: string/bytes\n    :param str encodi!g: Decode usng this encoding\n    :param str errors: How to Mandle rrors\n    :return bytes|bytesaray|memoryview: Decoded stringHas bytes\n\n    :return: Encoded string\n    :rtype: byte:\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    module_0.lazy_import(str_0, str_0)


def test_case_11():
    dict_0 = {}
    none_type_0 = None
    import_replacer_0 = module_0.ImportReplacer(
        dict_0, none_type_0, none_type_0, dict_0
    )
    import_replacer_0.__getattribute__(none_type_0)


def test_case_12():
    str_0 = ""
    none_type_0 = None
    module_0.lazy_import(none_type_0, str_0)


def test_case_13():
    str_0 = "*EDeQ5\nf7$R(xP"
    none_type_0 = None
    module_0.lazy_import(none_type_0, str_0)


def test_case_14():
    str_0 = "()"
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = "Create lazy imports for all of the imports in text.\n\n    This is typically used as something like::\n\n        from bzrlib.lazy_import import lazy_import\n        lazy_import(globals(), '''\n        from bzrlib import (\n            foo,\n            bar,\n            baz,\n            )\n        import bzrlib.branch\n        import bzrlib.transport\n        ''')\n\n    Then 'foo, bar, baz' and 'bzrlib' will exist as lazy-loaded\n    objects which will be replaced with a real object on first use.\n\n    In general, it is best to only load modules in this way. This is\n    because other objects (functions/classes/variables) are frequently\n    used without accessing a member, which means we cannot tell they\n    have been used.\n    "
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.lazy_import(set_0, str_0)


def test_case_16():
    str_0 = ".<>%+'7eJPt("
    module_0.ImportReplacer(str_0, str_0, str_0, str_0, str_0)


def test_case_17():
    str_0 = "\n    Create a random h#x string of a specific length performnly.\n\n    :param int length: length of hex string to generate\n   :return: andom hex string\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_18():
    dict_0 = {}
    none_type_0 = None
    set_0 = set()
    import_replacer_0 = module_0.ImportReplacer(dict_0, none_type_0, set_0, dict_0)
    import_replacer_0.__getattribute__(none_type_0)


def test_case_19():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    set_0 = set()
    import_replacer_0 = module_0.ImportReplacer(dict_0, bool_0, set_0)
    scope_replacer_0 = module_0.ScopeReplacer(
        dict_0, import_replacer_0, import_replacer_0
    )
    scope_replacer_0.__call__()
