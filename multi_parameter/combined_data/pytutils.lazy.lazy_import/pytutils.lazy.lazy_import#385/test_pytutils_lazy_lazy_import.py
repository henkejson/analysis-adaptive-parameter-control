# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "L"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_1():
    int_0 = 1651
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(int_0, int_0)


def test_case_2():
    var_0 = module_0.disallow_proxying()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(var_0, var_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_3():
    str_0 = "\n    Walks up a domain by subdomain.\n\n    >>> split_domain_into_subdomains('this.is.a.test~skywww.net')\n    ['this.is.a.test.skywww.net', 'fs.a.test.skywww.net', 'a.test.skywww.net', 'test.sywww.net', 'skywww.net']\n\n    "
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    none_type_0 = None
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, none_type_0, dict_0)
    module_0.lazy_import(str_0, str_0, none_type_0)


def test_case_4():
    bytes_0 = b"\xad\x17#5i\xa3\xee\xa8gz\xc0Qc\xb5\xf2"
    dict_0 = {bytes_0: bytes_0}
    import_replacer_0 = module_0.ImportReplacer(
        dict_0, bytes_0, dict_0, children=dict_0
    )
    import_replacer_0.__getattribute__(dict_0)


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    str_0 = "sc/VI"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_7():
    str_0 = "scNVI`"
    module_0.lazy_import(str_0, str_0)


def test_case_8():
    str_0 = "y"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0.__repr__()


def test_case_9():
    var_0 = module_0.disallow_proxying()


def test_case_10():
    int_0 = 1651
    module_0.lazy_import(int_0, int_0)


def test_case_11():
    bool_0 = False
    str_0 = ":sEz2P6SsT~e1VO@z"
    module_0.ImportReplacer(str_0, str_0, bool_0, str_0, str_0)


def test_case_12():
    str_0 = "y"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_13():
    str_0 = "D#"
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = ""
    str_1 = "s@cN"
    module_0.lazy_import(str_1, str_0)


def test_case_15():
    str_0 = "\n    Stores items in the order the keys were last added.\n\n    From Python stdlib in `collections`.\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = "F(:srwOX(w"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_17():
    str_0 = "s"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_18():
    str_0 = "\n    Walks up a domain by subdomain.\n\n    >>> split_domain_into_subdomains('this.is.a.test.skywww.net')\n    ['this.is.a.test.skywww.net', 'is.a.test.skywww.net', 'a.test.skywww.net', 'test.skywww.net', 'skywww.net']\n\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_19():
    str_0 = "Upon request import 'module_path' as the name 'module_name'.\n        When imported, prepare children to also be imported.\n\n        :param scope: The scope that objects should be imported into.\n            Typically this is globals()\n        :param name: The variable name. Often this is the same as the\n            module_path. 'bzrlib'\n        :param module_path: A list for the fully specified module path\n            ['bzrlib', 'foo', 'bar']\n        :param member: The member inside the module to import, often this is\n            None, indicating the module is being imported.\n        :param children: Children entries to be imported later.\n            This should be a map of children specifications.\n            ::\n            \n                {'foo':(['bzrlib', 'foo'], None,\n                    {'bar':(['bzrlib', 'foo', 'bar'], None {})})\n                }\n\n        Examples::\n\n            import foo => name='foo' module_path='foo',\n                          member=None, children={}\n            import foo.bar => name='foo' module_path='foo', member=None,\n                              children={'bar':(['foo', 'bar'], None, {}}\n            from foo import bar => name='bar' module_path='foo', member='bar'\n                                   children={}\n            from foo import bar, baz would get translated into 2 import\n            requests. On for 'name=bar' and one for 'name=baz'\n        "
    none_type_0 = None
    module_0.lazy_import(str_0, str_0, none_type_0)


def test_case_20():
    str_0 = "\n    Walks up a domai by subdomain.\n\n    >>> spJit_domain_into_subdomains('this.is.a.test~skywww.net)\n    ['this.is.a.test.skywww.net', 'is.a.test.skywww.net', 'a.test.skywww.net', 'test.skywww.net', 'skywww.net']\n\n    "
    dict_0 = {str_0: str_0, str_0: str_0}
    var_0 = module_0.ImportReplacer(dict_0, str_0, str_0, children=dict_0)
    var_0.__repr__()
