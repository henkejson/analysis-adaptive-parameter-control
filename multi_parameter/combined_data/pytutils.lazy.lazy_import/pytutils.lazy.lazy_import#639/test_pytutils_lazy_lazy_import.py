# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    bytes_0 = b"\x81\x9ePJ\xd5Gu\x94Q\xb6\xd3%+\x17\xbd\xba"
    var_0 = module_0.IllegalUseOfScopeReplacer(bytes_0, bytes_0)


def test_case_1():
    int_0 = -1
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(int_0, int_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_2():
    str_0 = "\n    Efficiently advanc an iterator n-steps ahead. If n is none, consume entirely.\n    Consumes at C level (and therefore speed) in cpython.\n    "
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_1 = var_0.__eq__(str_0)
    var_0.__unicode__()


def test_case_3():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    none_type_0 = None
    module_0.ImportReplacer(dict_0, dict_0, none_type_0, dict_0, dict_0)


def test_case_4():
    bytes_0 = b'*!"\xb8]e>thRh'
    none_type_0 = None
    module_0.ImportReplacer(bytes_0, none_type_0, none_type_0, none_type_0)


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    str_0 = "]S_\nWK\x0c3%-^*E``e{/"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_7():
    str_0 = "]S_\nWK\x0c3%-^*E``e{/"
    module_0.lazy_import(str_0, str_0)


def test_case_8():
    str_0 = "\n            Overr6de the __mro__ to f(ol `isinstance`.\n    2       "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_9():
    var_0 = module_0.disallow_proxying()


def test_case_10():
    bytes_0 = b""
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bytes_0, bytes_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_11():
    str_0 = "\n    Efficiently advance an iterator n-steps ahead. If n is none, consume entirely.\n    Consumes at C level (and therefore speed) in cpython.\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    str_0 = "\\m"
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, dict_0)
    module_0.lazy_import(str_0, import_replacer_0)


def test_case_13():
    str_0 = "s~%\\o+}Ch!\rq%\r:v"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0, str_0)
    var_0.__unicode__()


def test_case_14():
    str_0 = "BF<aofCO%#pI`\x0c}fIFE"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_15():
    str_0 = ""
    bool_0 = True
    module_0.lazy_import(str_0, str_0, bool_0)


def test_case_16():
    float_0 = 2043.9410461228988
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, float_0, float_0)
    module_0.lazy_import(float_0, import_replacer_0, dict_0)


def test_case_17():
    int_0 = -1
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(int_0, int_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_18():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_19():
    str_0 = "\\m"
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
    module_0.lazy_import(dict_0, import_replacer_0)


def test_case_20():
    str_0 = "n"
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
    var_0 = module_0.ScopeReplacer(dict_0, import_replacer_0, str_0)
    module_0.lazy_import(str_0, var_0)
