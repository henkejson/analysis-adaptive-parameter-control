# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "c\n \t7s!O-={k"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    module_0.IllegalUseOfScopeReplacer(str_0, var_0, var_0)


def test_case_1():
    bytes_0 = b"\x86\x10\xb4\xd8\xa9\xe9"
    module_0.ImportReplacer(bytes_0, bytes_0, bytes_0, bytes_0)


def test_case_2():
    bytes_0 = b"\x86\x10\xb4\xd8\xa9\xe9"
    module_0.ImportReplacer(bytes_0, bytes_0, bytes_0, children=bytes_0)


def test_case_3():
    import_processor_0 = module_0.ImportProcessor()


def test_case_4():
    str_0 = "A5"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_5():
    str_0 = "&"
    module_0.lazy_import(str_0, str_0)


def test_case_6():
    var_0 = module_0.disallow_proxying()


def test_case_7():
    str_0 = "5"
    dict_0 = {str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_8():
    str_0 = "sId*L_\n_R6="
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_9():
    str_0 = ""
    module_0.lazy_import(str_0, str_0)


def test_case_10():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_11():
    import_processor_0 = module_0.ImportProcessor()
    str_0 = "t@vm 4T&NEb-"
    int_0 = -385
    module_0.ImportReplacer(str_0, import_processor_0, str_0, int_0, int_0)


def test_case_12():
    str_0 = "sId*L_\n_R6="
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_13():
    str_0 = "(yIkM\n\r="
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = "%(asctime)s| %(name)s/%(processName)s[%(process)d]-%(threadName)s[%(thread)d]: %(message)s @%(funcName)s:%(lineno)d #%(levelname)s"
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = "%(asctime)s| %(name)s/%(processName)s[%(process)d]-%(threadName)s[%(thread)d]: %(message)s @%(funcName)s:%(lineno)d #%(levelname)s"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_16():
    str_0 = "Di#yjj)bUa D<A4JSbO"
    module_0.lazy_import(str_0, str_0)


def test_case_17():
    str_0 = "Restore the original function o re.compile(.\n\n    It is safe to call reset_compile() multiple times, t will=always\n    restore re.compilk() to the $alue that existed at import time.\n    Thoug the first call will reset back to the original (it doesn't\n   t:ack nestin0level)\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_18():
    str_0 = "]"
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, dict_0, dict_0)
    import_replacer_0.__setattr__(dict_0, import_replacer_0)
