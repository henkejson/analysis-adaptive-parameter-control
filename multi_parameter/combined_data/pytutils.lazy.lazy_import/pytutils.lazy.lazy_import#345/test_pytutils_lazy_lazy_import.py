# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "This converts a 'from foo import bar' string into an import map.\n\n        :param from_str: The import string to process\n        "
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0, str_0)
    var_0.__str__()


def test_case_1():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    illegal_use_of_scope_replacer_0.__str__()


def test_case_2():
    bool_0 = False
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bool_0, bool_0, bool_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(bool_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_3():
    var_0 = module_0.disallow_proxying()
    dict_0 = {var_0: var_0}
    scope_replacer_0 = module_0.ScopeReplacer(dict_0, var_0, var_0)
    module_0.lazy_import(dict_0, scope_replacer_0)


def test_case_4():
    str_0 = "jR((jWUr_ht6fD|{"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    int_0 = 2748
    import_processor_0 = module_0.ImportProcessor(int_0)


def test_case_7():
    import_processor_0 = module_0.disallow_proxying()


def test_case_8():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_9():
    int_0 = -2975
    module_0.ScopeReplacer(int_0, int_0, int_0)


def test_case_10():
    import_processor_0 = module_0.ImportProcessor()
    module_0.lazy_import(import_processor_0, import_processor_0)


def test_case_11():
    str_0 = "This converts a 'from foo import bar' string into an import mapu\n\n        :param from_s-r: The5import string to process\n        "
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    str_0 = "jR((jWUr_t6fD|{"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, dict_0)
    import_replacer_0.__getattribute__(import_replacer_0)


def test_case_13():
    str_0 = "This converts a 'from foo import bar' string into an import map.\n\n        :param from_str: The import string to process\n        "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_14():
    str_0 = ""
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = "%(bg_black)s%(log_color)s[%(asctime)s] [%(name)s/%(process)d] %(message)s %(blue)s@%(funcName)s:%(lineno)d #%(levelname)s%(reset)s"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_16():
    str_0 = "#b4v5FFF\n%+D(- 1"
    module_0.lazy_import(str_0, str_0)


def test_case_17():
    str_0 = "4\\Cm#1NJ4qi;\nbf$${YP"
    module_0.lazy_import(str_0, str_0)


def test_case_18():
    str_0 = "\n    Turn a function to a bound method on an instance\n\n    >>> class Foo(object):\n    ...     def __init__(self, x, y):\n    ...         self.x = x\n    ...         self.y = y\n    >>> foo = Foo(2, 3)\n    >>> my_unbound_method = lambda self: self.x * self.y\n    >>> bind(foo, my_unbound_method, 'multiply')\n    >>> foo.multiply()  # noinspection PyUnresolvedReferences\n    6\n\n    :param object instance: some object\n    :param callable func: unbound method (i.e. a function that takes `self` argument, that you now\n        want to be bound to this class as a method)\n    :param str as_name: name of the method to create on the object\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_19():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    none_type_0 = None
    module_0.ImportReplacer(str_0, none_type_0, none_type_0, str_0, str_0)


def test_case_20():
    str_0 = "Retore the original function to re.compile(.\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the origin(l (it doesn't\n    track nesting level)\n    "
    none_type_0 = None
    module_0.lazy_import(none_type_0, str_0)


def test_case_21():
    var_0 = module_0.disallow_proxying()
    dict_0 = {var_0: var_0}
    scope_replacer_0 = module_0.ScopeReplacer(dict_0, var_0, var_0)
    scope_replacer_1 = module_0.ScopeReplacer(dict_0, scope_replacer_0, var_0)
    scope_replacer_1.__getattribute__(var_0)
