# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "dg&H"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0, str_0)
    var_0.__str__()


def test_case_1():
    complex_0 = -2403.82 + 5231.3413j
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        complex_0, complex_0
    )
    illegal_use_of_scope_replacer_0.__str__()


def test_case_2():
    str_0 = "s(%8)"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_3():
    bytes_0 = b""
    dict_0 = {
        bytes_0: bytes_0,
        bytes_0: bytes_0,
        bytes_0: bytes_0,
        bytes_0: bytes_0,
        bytes_0: bytes_0,
        bytes_0: bytes_0,
    }
    import_replacer_0 = module_0.ImportReplacer(dict_0, bytes_0, dict_0)
    module_0.lazy_import(bytes_0, import_replacer_0)


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    str_0 = "dgRH"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_6():
    str_0 = "U747gH!=}L&l<"
    module_0.lazy_import(str_0, str_0)


def test_case_7():
    import_processor_0 = module_0.ImportProcessor()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        import_processor_0, import_processor_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_8():
    bytes_0 = b",\x1d"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, bytes_0, dict_0, bytes_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_9():
    var_0 = module_0.disallow_proxying()


def test_case_10():
    str_0 = "\x0c(<z}eS,>|IBbG\t\\;+S"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_11():
    str_0 = "%s(%s)"
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    str_0 = "\n    >>> log = get_logger()E    >>> log.info('test')\n\n    >>> log = get_logger('test2'\n    >>> log.info('test2')\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    str_0 = '"\n    Deduplicates an iterator iteratively using hashed values in a set.\n    Not exactly memory efficient because of that of course.\n    If you have a large dataset with high cardinality look at HyperLogLog instead.\n\n    :return generator: Iterator of deduplicated results.\n    '
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_14():
    float_0 = 199.09
    module_0.ImportReplacer(float_0, float_0, float_0, float_0, float_0)


def test_case_15():
    complex_0 = -2403.82 + 5231.3413j
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        complex_0, complex_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_16():
    str_0 = "d#gH"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_17():
    str_0 = "\n"
    import_processor_0 = module_0.ImportProcessor()
    import_processor_0.lazy_import(str_0, str_0)


def test_case_18():
    bool_0 = True
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(bool_0, bool_0)
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_comple() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)?    "
    import_processor_0 = module_0.ImportProcessor(illegal_use_of_scope_replacer_0)
    import_processor_0.lazy_import(str_0, str_0)


def test_case_19():
    bytes_0 = b""
    dict_0 = {
        bytes_0: bytes_0,
        bytes_0: bytes_0,
        bytes_0: bytes_0,
        bytes_0: bytes_0,
        bytes_0: bytes_0,
    }
    import_replacer_0 = module_0.ImportReplacer(dict_0, bytes_0, bytes_0, bytes_0)
    module_0.lazy_import(bytes_0, import_replacer_0)


def test_case_20():
    bytes_0 = b""
    dict_0 = {
        bytes_0: bytes_0,
        bytes_0: bytes_0,
        bytes_0: bytes_0,
        bytes_0: bytes_0,
        bytes_0: bytes_0,
    }
    none_type_0 = None
    import_replacer_0 = module_0.ImportReplacer(dict_0, bytes_0, bytes_0, none_type_0)
    module_0.lazy_import(bytes_0, import_replacer_0)
