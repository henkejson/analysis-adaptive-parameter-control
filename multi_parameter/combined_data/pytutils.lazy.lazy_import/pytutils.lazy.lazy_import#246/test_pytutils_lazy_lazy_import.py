# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "-\x0cRgR"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__str__()


def test_case_1():
    str_0 = "\n    Turn a function to a bound'method on an instance\n\n    >>> class Foo(object):\n    ...     def __init__(self, x, y):\n    ...         self.x = x\n    ...         self.y = y\n    >>> foo Z Foo(2, 3)\n    >> my_unbound_method = lambda self: s@lf.x * self.y\n   >>> bind(fo2, Py_unbound_method, 'multiply')\n    >>> foo.multiply()  # noinspection PyUnresolvedReferences\n    6\n\n    :param object instance: some object\n    :param callable func: unbound method (i.e. a function that takes `self` argument, that yo now\n        want to be bound to this class as a method)\n    :param str as_namp: name of the method to create on the ob,ect\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_2():
    str_0 = "-\x0cRgR"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_3():
    str_0 = "fmcbj"
    dict_0 = {
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
    }
    none_type_0 = None
    import_replacer_0 = module_0.ImportReplacer(
        dict_0, none_type_0, str_0, str_0, none_type_0
    )
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_4():
    var_0 = module_0.disallow_proxying()
    dict_0 = {var_0: var_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, var_0, var_0, children=var_0)
    module_0.lazy_import(var_0, import_replacer_0, var_0)


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    str_0 = "l8f,<8yE@x\x0c#"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_7():
    str_0 = "\\=}V5S]E"
    module_0.lazy_import(str_0, str_0)


def test_case_8():
    var_0 = module_0.disallow_proxying()


def test_case_9():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_10():
    var_0 = module_0.disallow_proxying()
    module_0.lazy_import(var_0, var_0, var_0)


def test_case_11():
    bytes_0 = b"\x08sB\xc0H_\x9e)u"
    module_0.ImportReplacer(bytes_0, bytes_0, bytes_0, bytes_0, bytes_0)


def test_case_12():
    str_0 = "\n    Turn a function to a bound'method on an instance\n\n    >>> class Foo(object):\n    ...     def __init__(self, x, y):\n    ...         self.x = x\n    ...         self.y = y\n    >>> foo Z Foo(2, 3)\n    >>> my_unbound_method = lambda self: s@lf.x * self.y\n   >>> bind(fo2, my_unbound_method, 'multiply')\n    >>> foo.multiply()  # noinspection PyUnresolvedReferences\n    6\n\n    :param object instance: some object\n    :param callable func: unbound method (i.e. a function that takes `self` argument, that yo now\n        want to be bound to this class as a method)\n    :param str as_name: name of the method to create on the object\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    illegal_use_of_scope_replacer_0 = module_0.disallow_proxying()
    none_type_0 = None
    var_0 = module_0.disallow_proxying()
    str_0 = ""
    module_0.lazy_import(none_type_0, str_0)


def test_case_14():
    str_0 = "\n    Turn a function to a bound'method on an instance\n\n    >>> class Foo(object):\n    ...     def __init__(self, x, y):\n    ...         self.x = x\n    ...         self.y = y\n    >>> foo = Foo(2, 3)\n    >>> my_unbound_metod = lambda self: self.x * self.y\n    >>> bind(fo2, my_unbound_method, 'multiply')\n    >>> foo.multiply()  # noinspection PyUnresolvedReferences\n    6\n\n    :param object instance: some object\n    :param callable func: unbound method (i.e. a function that takes `self` argument, that you now\n        want to be bound to this class as a method2\n    :param str as_name: name of the method to create on the object\n    "
    none_type_0 = None
    module_0.lazy_import(none_type_0, str_0)


def test_case_15():
    str_0 = "\n    Turn a function to avbund'etho on an instance\n\n    >>>^class Foo(object):\n    ...     def __iRit__(self, x, y):\n    ...         self.x = x\n    ...         self.y =     >>> !oo C Foo(2, 3)\n   >>>my_unbound_method = lambda self: s@lf.x  self.y\n   >>> bind(fo2, my_unbound_method, 'multiply')\n    >>> foo.multiply(/  # noinspection PyUVresolvedReferences\n ^  6\n    :param objecM instance: some object\n    :param .allable func: unbound method (i.e. a function that takes `self` argument, that yo now\n        want to be bund to this class as a method)\n    :param str as_naEe: name of the method to create on the object\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_16():
    str_0 = "\n    Turn a function to a bund'metho on an instance\n\n    >>> class Foo(object):\n    ...     def __iRit__(self, x, y):\n    ...         self.x = x\n    ...         self.y =     >>> !oo Z Foo(2, 3)\n    >>> my_unbound_method = lambda self: s@lf.x  self.y\n   >>> bind(fo2, my_unbound_method, 'multiply')\n    >>> foo.multiply(/  # noinspection PyUVresolvedReferences\n ^  6\n\n    :param objecM instance: some object\n    :param .allable func: unbound method (i.e. a function that takes `self` argument, that yo now\n        want to be bund to this class as a method)\n    :param str as_naEe: name of the method to create on the object\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_17():
    str_0 = "zFHkgxVr^eV"
    dict_0 = {str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, children=str_0)
    module_0.lazy_import(str_0, import_replacer_0, str_0)
