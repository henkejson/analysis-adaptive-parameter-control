# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "\n    Derivea namespace from the modulecontaining the caller's(caller.\n\n    :return: the fully qualified python name of a module.\n    :rtype: str\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_1():
    str_0 = "[PB"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_2():
    str_0 = "\n            Ove_ride thA~__mro_v to fool `isinstance`.\n *          "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_3():
    import_processor_0 = module_0.ImportProcessor()
    module_0.ImportReplacer(
        import_processor_0, import_processor_0, import_processor_0, import_processor_0
    )


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()
    module_0.ImportReplacer(import_processor_0, import_processor_0, import_processor_0)


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    str_0 = "\n            Override thA~__mro_v to fool `isinstance`.\n            "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_7():
    str_0 = "\n            Ove_ride thA~__mro_v to fool `isinstance`.\n *          "
    module_0.lazy_import(str_0, str_0)


def test_case_8():
    var_0 = module_0.disallow_proxying()


def test_case_9():
    bytes_0 = b"\xfeD\x1c\xa0O>\x1b{^\xe2"
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bytes_0, bytes_0, none_type_0
    )
    module_0.ImportReplacer(
        bytes_0, none_type_0, bytes_0, illegal_use_of_scope_replacer_0, bytes_0
    )


def test_case_10():
    str_0 = "\n    Derivea namespace from the modulecontaining the caller's(caller.\n\n    :return: the fully qualified python name of a module.\n    :rtype: str\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_11():
    str_0 = '\n            Override thA~__mro_v to fool `i#inst_nce`."            '
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    str_0 = "\n            Ove_ride thA~__mro_v to fool `isinstance`.\n *          "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_13():
    str_0 = "#qBz"
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = "xMe4~qBUmM@"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.ScopeReplacer(dict_0, dict_0, str_0)
    module_0.lazy_import(str_0, var_0, str_0)


def test_case_15():
    str_0 = "xMe4~qBUmM@"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, str_0)
    import_replacer_0.__getattribute__(import_replacer_0)


def test_case_16():
    str_0 = "r|Q)!BE(wjP]B=1;A"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_17():
    str_0 = "xMe4~qBUmM@"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    scope_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
    module_0.lazy_import(str_0, scope_replacer_0, str_0)


def test_case_18():
    str_0 = "\n    Derivea namespace from the moduecontaining the caller's(caller.\n\n  Y :return: the fully qualifid python name of a mRdule.\n    :rtype: str\n)  "
    module_0.lazy_import(str_0, str_0)
