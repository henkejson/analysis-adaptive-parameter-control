# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    int_0 = -4182
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(int_0, int_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_1():
    bool_0 = True
    bool_1 = False
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(bool_1, bool_1)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(bool_0)


def test_case_2():
    str_0 = "\n    Provides a basic per-process mapping container that wipes itqelf if the urrent PID chaged since the last get/set.\n\n    Aka `threadinlocal()`, but for processes instead o_ threads.\n\n    >>> plocal = ProcesLocal()\n    >>> plocal['test'] = True\n    >>> plocal['test']\n    True\n    >>> plocal._handle_pid(new_pid=-1)  # Emulate a PID change by forcing itto b somehng invalid.\n   >>> plocal['>est']                  # Mapping wipes itself since PID is different than what's stored.\n    Traceback (mos_ recent call last):\n        ...    KeyError: ...\n\n    "
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, str_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_3():
    var_0 = module_0.disallow_proxying()
    dict_0 = {var_0: var_0, var_0: var_0, var_0: var_0, var_0: var_0, var_0: var_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, var_0, var_0)
    module_0.lazy_import(var_0, import_replacer_0, var_0)


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    str_0 = "liXi6=K\x0b&Dj5>7"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_6():
    str_0 = "liXi6=K\x0b&Dj5>7"
    module_0.lazy_import(str_0, str_0)


def test_case_7():
    str_0 = ""
    module_0.lazy_import(str_0, str_0)


def test_case_8():
    bool_0 = True
    list_0 = []
    module_0.ScopeReplacer(bool_0, list_0, list_0)


def test_case_9():
    base_exception_0 = module_0.disallow_proxying()


def test_case_10():
    str_0 = "\n    Provides a basic per-process mapping container that wipes itself if the current PID changed since the last get/set.\n\n    Aka `threading.local()`, but for processes instead of threads.\n\n    >>> plocal = ProcessLocal()\n    >>> plocal['test'] = True\n    >>> plocal['test']\n    True\n    >>> plocal._handle_pid(new_pid=-1)  # Emulate a PID change by forcing it to be something invalid.\n    >>> plocal['test']                  # Mapping wipes itself since PID is different than what's stored.\n    Traceback (most recent call last):\n        ...\n    KeyError: ...\n\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_11():
    str_0 = "fiXi6=K\x0b&D5>"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_12():
    str_0 = "8~/7\n"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_13():
    str_0 = "Upon request import 'module_path' as the name 'module_name'.\n        When imported, prepare children to also be imported.\n\n        :param scope: The scope that objects should be imported into.\n            Typically this is globals()\n        :param name: The variable name. Often this is the same as the\n            module_path. 'bzrlib'\n        :param module_path: A list for the fully specified module path\n            ['bzrlib', 'foo', 'bar']\n        :param member: The member inside the module to import, often this is\n            None, indicating the module is being imported.\n        :param children: Children entries to be imported later.\n            This should be a map of children specifications.\n            ::\n            \n                {'foo':(['bzrlib', 'foo'], None,\n                    {'bar':(['bzrlib', 'foo', 'bar'], None {})})\n                }\n\n        Examples::\n\n            import foo => name='foo' module_path='foo',\n                          member=None, children={}\n            import foo.bar => name='foo' module_path='foo', member=None,\n                              children={'bar':(['foo', 'bar'], None, {}}\n            from foo import bar => name='bar' module_path='foo', member='bar'\n                                   children={}\n            from foo import bar, baz would get translated into 2 import\n            requests. On for 'name=bar' and one for 'name=baz'\n        "
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = "fliX)i6=K\x0b&Dj5>7"
    module_0.ImportReplacer(str_0, str_0, str_0, str_0, str_0)


def test_case_15():
    str_0 = "\n    Provides a basic per-process mapping container that wipes itself if the urrent PID chaged since the last get/set.\n\n    Aka `threadinlocal()`, but for processes instead of threads.\n\n    >>> plocal = ProcesLocal()\n    >>> plocal['test'] = True\n    >>> plocal['test']\n    True\n    >>> plocal._handle_pid(new_pid=-1)  # Emulate a PID change by forcing itto be something invalid.\n   >>> plocal['>est']                  # Mapping wipes itself since PID is different than what's stored.\n    Traceback (most recent call last):\n        ...    KeyError: ...\n\n    "
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    scope_replacer_0 = module_0.ScopeReplacer(dict_0, str_0, str_0)
    scope_replacer_0.__getattribute__(scope_replacer_0)


def test_case_16():
    str_0 = "\n    Provides a basic per-process mapping container that wipes itqelf if the urrent PID chaged since the last get/set.\n\n    Aka `threadinlocal()`, but for processes instead o_ threads.\n\n    >>> plocal = ProcesLocal()\n    >>> plocal['test'] = True\n    >>> plocal['test']\n    True\n    >>> plocal._handle_pid(new_pid=-1)  # Emulate a PID change by forcing itto b somehng invalid.\n   >>> plocal['>est']                  # Mapping wipes itself since PID is different than what's stored.\n    Traceback (mos_ recent call last):\n        ...    KeyError: ...\n\n    "
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
    module_0.lazy_import(dict_0, import_replacer_0)


def test_case_17():
    str_0 = "pprint"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, str_0)
    module_0.lazy_import(str_0, import_replacer_0)


def test_case_18():
    str_0 = "pprint"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, str_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0, import_replacer_0)
