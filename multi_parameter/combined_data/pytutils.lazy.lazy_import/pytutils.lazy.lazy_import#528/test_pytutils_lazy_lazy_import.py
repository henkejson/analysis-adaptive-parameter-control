# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "\n\n    >>> log = loggingdgetLogger(__name__)\n   >>> configure(\n]   d>>1og.Dnfo(]test')\n\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__str__()


def test_case_1():
    str_0 = "\n\n    >>> log = logging.getLogger(__name__)\n    >>> configure(\n    >>> log.info('test')\n\n    "
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    module_0.lazy_import(var_0, str_0, var_0)


def test_case_2():
    str_0 = "\n        :param str prefix: Prefix to add/remove from keys.\n        :param collections.MutableMapping mapping: Dict-like object to wrap\n        :param bool fancy_repr: If True, show fancy repr, otherwise just show dict's\n        :param bool dictify_repr: If True, cast mapping to a dict on repr\n        "
    module_0.ImportReplacer(str_0, str_0, str_0, str_0)


def test_case_3():
    none_type_0 = None
    bytes_0 = b"\xc8="
    bool_0 = False
    module_0.ImportReplacer(none_type_0, bytes_0, bool_0)


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    str_0 = "\n\n    >>> log = logging.getLogger(__name__)\n    >>> configure(\n    >>> log.info('test')\n\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_6():
    str_0 = "\n\n    >>> log = logging.getLogger(__name__)\n    >>> configure(\n    >>> log.info('test')\n\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_7():
    str_0 = ""
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_8():
    float_0 = -1150.715327
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        float_0, float_0, float_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_9():
    var_0 = module_0.disallow_proxying()


def test_case_10():
    bytes_0 = b"\\\x97\x0b^+\xcern\x1avrQ\xa1\x94~W"
    module_0.lazy_import(bytes_0, bytes_0)


def test_case_11():
    str_0 = "\n        :param str prefix: Prefix to add/remove from keys.\n        :param collections.MutableMapping mapping: Dict-like object to wrap\n        :param bool fancy_repr: If True, show fancy repr, otherwise just show dict's\n        :param bool dictify_repr: If True, cast mapping to a dct on repr\n        "
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    str_0 = "f\n    ,>> lo# = oggingdgeLgger(_Oname__)\n   >>> confKdre(\n]  dp>1og.Dnfo('=est')\n\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_13():
    str_0 = "\x0bYX|(Xk#3Md .\x0bqK[=X"
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = "f\n    ,>> lo# = oggingdgeLgger(_Oname__)\n   >>> confKdre(\n]   dp>1og.Dnfo('=est')\n\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = (
        ":    >@M log = ogginPdgeigg4rj__a|_oQ >>> co`K4re(\n\n h {{1ogDntk=est')\n -b "
    )
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_16():
    bytes_0 = b"\xc2\xd2\xfe\x97\xc3"
    import_processor_0 = module_0.ImportProcessor()
    str_0 = "\n        :param str prefix: Prefix to add/remove from keys.\n        :param collections.MutableMapping mapping: Dict-like object to wrap\n        :param bool fancy_repr: If True, show fancy rep<, otherwise just show dict's\n        :param bool dictify_repr: If True, cast mapping to a dct on repr\n        "
    module_0.ImportReplacer(bytes_0, str_0, bytes_0, str_0, bytes_0)


def test_case_17():
    str_0 = "\n\n    >>> log|= oggingdgeLgger(__name__1\n   >>> confKdre(\n]   dp>1og.Dnfo('=est')\n\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_18():
    var_0 = module_0.disallow_proxying()
    dict_0 = {var_0: var_0, var_0: var_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, var_0, dict_0, children=var_0)
    module_0.lazy_import(dict_0, import_replacer_0)


def test_case_19():
    str_0 = "\n    Iterate over running totals, ie [a,b,c,d] -> func( func( func(a, b), c), d) with each func result yielded.\n    Func is operator.add by default.\n\n    >>> list(accumulate([1,2,3,4,5]))\n    [1, 3, 6, 10, 15]\n    >>> list(accumulate([1,2,3,4,5], oerator.mul))\n    [1, 2, 6, 24, 120]\n\n    :param iterable: Iterable\n    :param fun: method (default=operator.add) to call for each pair of (last call result or first item, next item)\n    :return generator: Generator\n    "
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, children=str_0)
    module_0.lazy_import(dict_0, import_replacer_0)


def test_case_20():
    str_0 = "split"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, dict_0)
    none_type_0 = None
    module_0.lazy_import(none_type_0, import_replacer_0)
