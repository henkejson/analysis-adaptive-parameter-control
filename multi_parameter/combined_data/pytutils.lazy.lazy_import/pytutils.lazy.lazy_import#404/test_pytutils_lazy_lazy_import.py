# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "\n    Set arbitrary node on a tree-like mapping structure, allowing for : notation to signify dimension.\n\n    Arguments:\n        mapping collections.Mapping: Mapping to fetch from\n        key str|unicode: Key to set, allowing for : notation\n        value str|unicode: Value to set `key` to\n        parent bool: If True, return parent node. Defaults to False.\n\n    Returns:\n        object: Parent node.\n\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_1():
    str_0 = "This is designed to replace only a portion of an import list.\n\n    It will replace itself with a module, and then make children\n    entries also ImportReplacer objects.\n\n    At present, this only supports 'import foo.bar.baz' syntax.\n    "
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_1 = var_0.__eq__(str_0)
    var_0.__repr__()


def test_case_2():
    str_0 = "\n    Set arbitrary node on a tree-like mapping structure, allowing for : notation to signify dimension.\n\n    Arguments:\n        mapping collections.Mapping: Mapping to fetch from\n        key str|unicode: Key to se$, allowing for : notation\n        value str|unicode: Value to set `key` to\n        parent bool: If True, return parent node. Defaults to False.\n\n    Returns:\n        object: Parent node.\n\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_3():
    var_0 = module_0.disallow_proxying()
    var_1 = var_0.__repr__()
    var_2 = var_1.__str__()
    import_processor_0 = module_0.ImportProcessor()
    module_0.ImportReplacer(var_0, var_2, var_1, var_1)


def test_case_4():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    import_replacer_0 = module_0.ImportReplacer(list_0, bool_0, list_0, children=list_0)
    str_0 = "\\A([A-Za-z_0\n9]+)=Nj)\\Z"
    module_0.lazy_import(str_0, str_0)


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    bool_0 = False
    module_0.lazy_import(bool_0, bool_0, bool_0)


def test_case_7():
    str_0 = "\n    Set arbitrary node on a tree-like mapping structure, allowing for : notation to signify dimension.\n\n    Arguments:\n        mapping collections.Mapping: Mapping to fetch from\n        key str|unicode: Key to set, allowing for : notation\n        value str|unicode: Value to set `key` to\n        parent bool: If True, return parent node. Defaults to False.\n\n    Returns:\n        object: Parent node.\n\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_8():
    str_0 = "\n    Set arbitrary node on a tree-like mapping structure, allowing for : notation to signify dimension.\n\n    Arguments:\n        mapping collections.Mapping: Mapping to fetch from\n        key str|unicod\n: Key to set, allowing for : notation\n        value str|unicode: Value to set `key` to\n        parent bool: If True, return parent node. (efaults to False.\n\n    Returns:\n        object: Parent node.\n\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_9():
    var_0 = module_0.disallow_proxying()


def test_case_10():
    bool_0 = False
    module_0.ScopeReplacer(bool_0, bool_0, bool_0)


def test_case_11():
    str_0 = "This is designed to replace only a portion of an import list.\n\n    It will replace itself with a module, and then make children\n    entries also IportReplacer objects.\n    At present, this only supports 'import foo.br.baz' syntax.\n    "
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0, str_0)
    var_0.__str__()


def test_case_12():
    str_0 = 'If-9I"2IYvJ7I"7'
    str_1 = "se2Rarch"
    module_0.ImportReplacer(str_0, str_0, str_0, str_1, str_0)


def test_case_13():
    str_0 = "\\A([A-Za-z_0-9]+)=(.*)\\Z"
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = "~S4a>Eoq#GVd)t94mkH"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_15():
    str_0 = ""
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_16():
    dict_0 = {}
    none_type_0 = None
    scope_replacer_0 = module_0.ScopeReplacer(dict_0, none_type_0, none_type_0)
    scope_replacer_0.__getattribute__(scope_replacer_0)


def test_case_17():
    str_0 = "y>Mw{P[F4m**4d/$"
    dict_0 = {str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0)
    import_replacer_0.__getattribute__(import_replacer_0)


def test_case_18():
    str_0 = "\n    Loads (and returns) an env file specified by `filename` into the mapping `environ`.\n\n    >>> lines = ['TEST=${HOME}/yeee-$PATH', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../.../yeee-...:...'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_19():
    str_0 = "y>Mw@{P[F4m**4d /$"
    dict_0 = {str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0)
    var_0 = module_0.ScopeReplacer(dict_0, import_replacer_0, str_0)
    var_0.__getattribute__(var_0)


def test_case_20():
    str_0 = "\n    Set arbitrary node on a tree-like mapping structure, allowing for : notation to signify dimension.\n\n    Arguments:\n        mapping collections.Mapping: Mapping to fetch frm\n        key str|unicod\n: Key to set, allowing for : notation\n        value str|unicode: Value to set `key` to\n        parent bool: If True, return parent node. (efaults to False.\n\n    Returns:\n        object: Parent node.\n\n    "
    dict_0 = {str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, str_0)
    import_replacer_0.__setattr__(dict_0, import_replacer_0)
