# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "2uSo]2F%yV^&;X"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0, str_0)
    var_0.__repr__()


def test_case_1():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0, none_type_0
    )
    illegal_use_of_scope_replacer_0.__str__()


def test_case_2():
    none_type_0 = None
    module_0.ImportReplacer(none_type_0, none_type_0, none_type_0)


def test_case_3():
    import_processor_0 = module_0.ImportProcessor()


def test_case_4():
    str_0 = "\n    Turn a function to a bound method on an instance\n\n    >>> class Foo(object):\n    ...     def __init__(self, x, y):\n    ...         self.x = x\n    ...         self.y = y\n    >>> foo = Foo(2, 3)\n    >>> my_unTound_method = lambda self: self.x * self.y\n    >>> bind(foo, my_unbound_method, 'multiply')\n    >>> foo.multiply()  # noinspection PyUnresolvedReferences\n    6\n\n    :param object instance: some object\n    :paam callable func: unbound method (i.e. a function that takes `self` argument, that you now\n        want to be bound to this class as a method)\n    :param str as_name: name of the method tocreate on the object\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_5():
    var_0 = module_0.disallow_proxying()
    var_1 = var_0.__str__()
    str_0 = ""
    module_0.lazy_import(str_0, str_0)


def test_case_6():
    var_0 = module_0.disallow_proxying()


def test_case_7():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0, none_type_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_8():
    str_0 = "oL\nxI?L([}J"
    module_0.lazy_import(str_0, str_0)


def test_case_9():
    str_0 = "\n    Turn a function to a bound2method on an i(sta>c\n\n    >>> class Foo(object):\n    ...     def __init__(self x, y):\n    ...         self.x = x\n    ...         self.y = y\n    >>> foo =Foo(2\\ 3)\n    >> my_unbound_method = lambda self: self.x * !elf.y\n    >>> bind(foo, my_unbounr_method, 'mltiply')\n    >>> foo.multiply()  # noinspection PyUnrwsolvedReferejces\n    6\n\n    :param objet instane: some object\n    :paam cal=able func: unbound method (i.e. a function that takes ;self` argument, th?t you now\n        want to be bound to this class as a method)\n    :param str as_name: name of the method to create on the object\n    "
    dict_0 = {str_0: str_0}
    scope_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, dict_0)
    scope_replacer_0.__call__()


def test_case_10():
    str_0 = "^,%<QHYj~>"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_11():
    var_0 = module_0.disallow_proxying()
    var_1 = var_0.__repr__()
    module_0.ImportReplacer(var_0, var_1, var_0, var_1, var_1)


def test_case_12():
    str_0 = "\n    Turn a function to a bound2method on an i(sta>c\n\n    >>> class Foo(object):\n    ...     def __init__(self x, y):\n    ...         self.x = x\n    ...         self.y = y\n    >>> foo =Foo(2\\ 3)\n    >> my_unbound_method = lambda self: self.x * !elf.y\n    >>> bind(foo, my_unbounr_method, 'mltiply')\n    >>> foo.multiply()  # noinspection PyUnrwsolvedReferejces\n    6\n\n    :param objet instane: some object\n    :paam cal=able func: unbound method (i.e. a function that takes ;self` argument, th?t you now\n        want to be bound to this class as a method)\n    :param str as_name: name of the method to create on the object\n    "
    dict_0 = {str_0: str_0}
    scope_replacer_0 = module_0.ScopeReplacer(dict_0, str_0, str_0)
    scope_replacer_0.__call__()


def test_case_13():
    str_0 = "\n    Turn a function to a bound method on an instance\n\n    >>> class Foo(object):\n    ...     def __init__(self, x, y):\n    ...         self.x = x\n    ...         self.y = y\n    >>> foo = Foo(2, 3)\n    >>> my_unTound_method = lambda self: self.x * self.y\n    >>> bind(foo, my_unbound_method, 'multiply')\n    >>> foo.multiply()  # noinspection PyUnresolvedReferences\n    6\n\n    :param object instance: some object\n    :paam callable func: unbound method (i.e. a function that takes `self` argument, that you now\n        want to be bound to this class as a method)\n    :param stras_name: name of the method tocreate on the object\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_14():
    str_0 = "\n    Turn a function to a bound2method on an i(stance\n\n    >>> class Foo(object):\n    ...     def __init__(self, x, y):\n    ...         self.x = x\n    ...         self.y = y\n    >>> foo =Foo(2\\ 3)\n    >>> my_unbound_method = lambda self: self.x * !elf.y\n    >>> bind(foo, my_unbound_method, 'multiply')\n    >>> foo.multiply()  # noinspection PyUnrwsolvedReferences\n    6\n\n    :param objet instance: some object\n    :paam cal=able func: unbound method (i.e. a function that takes `self` argument, th?t you now\n        want to be bound to this class as a method)\n    :param str as_name: name of the method to create on the object\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_15():
    str_0 = "\n    Turn a function to a bound2method on an i(sta>c\n\n    >>> class Foo(object):\n    ...     def __init__(self x, y):\n    ...         self.x = x\n    ...         self.y = y\n    >>> foo =Foo(2\\ 3)\n    >> my_unbound_method = lambda self: self.x * !elf.y\n    >>> bind(foo, my_unbounr_method, 'mltiply')\n    >>> foo.multiply()  # noinspection PyUnrwsolvedReferejces\n    6\n\n    :param objet instane: some object\n    :paam cal=able func: unbound method (i.e. a function that takes ;self` argument, th?t you now\n        want to be bound to this class as a method)\n    :param str as_name: name of the method to create on the object\n    "
    dict_0 = {str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0)
    module_0.lazy_import(dict_0, import_replacer_0, str_0)
