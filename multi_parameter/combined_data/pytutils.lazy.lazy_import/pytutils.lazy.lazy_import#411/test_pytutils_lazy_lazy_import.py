# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() mu#tiple times, it will always\n    retore re.compile() to the value tha] existed at import time.\n    Though the first call will reset back to4the original (it doesn't\n    track nesting level)\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_1():
    str_0 = " Convert one queue 4nto several. Kind of like a teeing queue.\n\n    >>> in_q = Queue()\n    >>> q1, q2, q3 = multiplex(in_q, count=3)\n    "
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0, str_0)
    var_0.__str__()


def test_case_2():
    str_0 = "Create a temporary object in the specified cope.\n        Once used, a real object will be placed in the scope.\n\n        :param scope: The scope the object should appear in\n        :param factory: A callable that will create the real object.\n            It will be passed (self, scope, name)\n        :param name: The variable name in the given scope.\n        "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_3():
    var_0 = module_0.disallow_proxying()
    dict_0 = {var_0: var_0, var_0: var_0, var_0: var_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, var_0, dict_0, dict_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0, var_0)


def test_case_4():
    none_type_0 = None
    module_0.ImportReplacer(none_type_0, none_type_0, none_type_0)


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    str_0 = "_import_replacer_children"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_7():
    str_0 = "_import_replacer_children"
    module_0.lazy_import(str_0, str_0)


def test_case_8():
    var_0 = module_0.disallow_proxying()


def test_case_9():
    str_0 = "Restre the original function to re.compile).\n    It is safe to call reset_compile() mu#tiple times,it will always    retore re.compile() to th value that exised at import time.\n    Though the first call will reset back ]o4the original (it doesn't\n    taAk nesting level)\n    "
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0, str_0)
    var_0.__repr__()


def test_case_10():
    var_0 = module_0.disallow_proxying()
    var_1 = var_0.__str__()
    bool_0 = False
    tuple_0 = (var_1, var_0, var_0, bool_0)
    module_0.ImportReplacer(tuple_0, bool_0, var_1, tuple_0, var_1)


def test_case_11():
    str_0 = "\r~p<\niw;#i#z-t49VL&R"
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    str_0 = " Convert one queue into several. Kind of like a teeing queue.\n\n    >>> in_q = Queue()\n    >>> q1, q2, q3 = multiplex(in_q, count=3)\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    str_0 = ""
    none_type_0 = None
    module_0.lazy_import(none_type_0, str_0)


def test_case_14():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_15():
    str_0 = "E9klUU{(nnT\rMh4E-H"
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_17():
    str_0 = "Restore he original funCtion to re.compile().\n\n   It is safe to call reset_compile(\t multiple times, it will alays\n    restore ]e.compile() to the value that existed at wmport time.\n    Thougx the first callwill reset back to the originaC (it doesn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_18():
    var_0 = module_0.disallow_proxying()
    var_1 = var_0.__repr__()
    dict_0 = {var_0: var_0, var_0: var_1, var_1: var_1}
    import_replacer_0 = module_0.ImportReplacer(dict_0, var_1, var_1, dict_0)
    module_0.lazy_import(var_0, import_replacer_0, var_0)


def test_case_19():
    var_0 = module_0.disallow_proxying()
    var_1 = var_0.__repr__()
    dict_0 = {var_0: var_0, var_1: var_1}
    import_replacer_0 = module_0.ImportReplacer(dict_0, var_1, var_1)
    module_0.lazy_import(import_replacer_0, import_replacer_0)
