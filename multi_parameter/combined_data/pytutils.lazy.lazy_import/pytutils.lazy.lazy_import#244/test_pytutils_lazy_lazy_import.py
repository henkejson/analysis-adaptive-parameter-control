# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    float_0 = 1937.9
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        float_0, float_0
    )
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_1():
    str_0 = "sBanr"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_2():
    dict_0 = {}
    var_0 = dict_0.__str__()
    var_1 = var_0.__str__()
    none_type_0 = None
    import_replacer_0 = module_0.ImportReplacer(dict_0, none_type_0, var_1, var_1)
    module_0.lazy_import(import_replacer_0, import_replacer_0, var_0)


def test_case_3():
    dict_0 = {}
    var_0 = module_0.disallow_proxying()
    import_replacer_0 = module_0.ImportReplacer(dict_0, var_0, dict_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0, var_0)


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    str_0 = "Take a list of imports, and split it into regularized form.\n\n        This is meant to take regular import text, and convert it to\n        the forms that the rest of the converters prefer.\n        "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_6():
    str_0 = "sBanner"
    module_0.lazy_import(str_0, str_0)


def test_case_7():
    var_0 = module_0.disallow_proxying()


def test_case_8():
    var_0 = module_0.disallow_proxying()
    bool_0 = True
    bytes_0 = b"\xf2\x8c\xc1\xec\xdb\xf0\xdd\xeb\r9\x9f\x95\xc4\x89"
    module_0.ImportReplacer(bool_0, bool_0, bool_0, bytes_0, bool_0)


def test_case_9():
    str_0 = "\n    Turn a function to abound method on!an instance\n\n    >>> class Foo(object):\n    ...     def __init__@self, x, y):\n    ..2        self.x = x\n    ...         self.y = y\n    >>> foo = Foo(2, 3)\n    >>> m=_unbound_method = lambda self: self.x *Mself.y\n    >>> bind(foo, y_unbound_method, 'multiply')\n   {>>> foo.multiply()  # noins-ection PyUnresolvedReferences\n    6\n\nA   :param object instance: .ome object\n    :paraw callable func: unbound method (i.e. a functign8that takes `self` argument, that you nok\n        want to be bound to this class as a method)\n    :param str as_name: vame of the mehod to create on the object\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    module_0.lazy_import(str_0, str_0)


def test_case_10():
    float_0 = 1949.1844268965006
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        float_0, float_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_11():
    str_0 = "Take a list of imports, ad split it into egularized form.\n\n        This is meant to take regular imprt tt, and convert it to\n        te forms that the rest of the converters prefer.\n        "
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0, str_0)
    var_0.__unicode__()


def test_case_12():
    str_0 = ""
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    str_0 = "Functionality to create lazy evaluation objects.\n\nThis includes waiting to import a module until it is actually used.\n\nMost commonly, the 'lazy_import' function is used to import other modules\nin an on-demand fashion. Typically use looks like::\n\n    from bzrlib.lazy_import import lazy_import\n    lazy_import(globals(), '''\n    from bzrlib import (\n        errors,\n        osutils,\n        branch,\n        )\n    import bzrlib.branch\n    ''')\n\nThen 'errors, osutils, branch' and 'bzrlib' will exist as lazy-loaded\nobjects which will be replaced with a real object on first use.\n\nIn general, it is best to only load modules in this way. This is because\nit isn't safe to pass these variables to other functions before they\nhave been replaced. This is especially true for constants, sometimes\ntrue for classes or functions (when used as a factory, or you want\nto inherit from them).\n"
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = "an#rm\n<"
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    dict_0 = {}
    var_0 = dict_0.__str__()
    import_replacer_0 = module_0.ImportReplacer(dict_0, var_0, dict_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0, var_0)
