# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "%0{}x"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__str__()


def test_case_1():
    bool_0 = False
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(bool_0, bool_0)


def test_case_2():
    complex_0 = -1187.059098 + 1945.842548j
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        complex_0, complex_0
    )
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_3():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    module_0.lazy_import(str_0, str_0)


def test_case_4():
    var_0 = module_0.disallow_proxying()
    var_1 = var_0.__str__()
    str_0 = "\nMj7q+\n{"
    module_0.ImportReplacer(str_0, str_0, str_0, str_0)


def test_case_5():
    bool_0 = True
    dict_0 = {
        bool_0: bool_0,
        bool_0: bool_0,
        bool_0: bool_0,
        bool_0: bool_0,
        bool_0: bool_0,
    }
    import_replacer_0 = module_0.ImportReplacer(dict_0, bool_0, bool_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_6():
    import_processor_0 = module_0.ImportProcessor()


def test_case_7():
    str_0 = "&@E"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_8():
    dict_0 = module_0.disallow_proxying()


def test_case_9():
    str_0 = "_%s_lazy_%s"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_10():
    str_0 = "&f6"
    module_0.lazy_import(str_0, str_0)


def test_case_11():
    str_0 = "&f6"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_12():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    str_0 = "oW[\nFu`I{%(?^u8\r"
    tuple_0 = (str_0,)
    module_0.lazy_import(tuple_0, str_0)


def test_case_14():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, bool_0, bool_0, dict_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_15():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    var_0 = bool_0.__str__()
    import_replacer_0 = module_0.ImportReplacer(dict_0, var_0, var_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_16():
    str_0 = ""
    var_0 = module_0.disallow_proxying()
    module_0.lazy_import(var_0, str_0)


def test_case_17():
    str_0 = "*cL<?V\x0c#tH"
    module_0.lazy_import(str_0, str_0)


def test_case_18():
    str_0 = "\nN/`L"
    module_0.lazy_import(str_0, str_0)


def test_case_19():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    var_0 = bool_0.__str__()
    import_replacer_0 = module_0.ImportReplacer(dict_0, var_0, var_0, dict_0)
    import_replacer_0.__call__(**var_0)


def test_case_20():
    import_processor_0 = module_0.ImportProcessor()
    var_0 = module_0.ImportProcessor()
    module_0.ImportReplacer(
        var_0, import_processor_0, import_processor_0, import_processor_0, var_0
    )


def test_case_21():
    str_0 = "Restore te original functon to re.compile(W.\n\n    It is safe to c\"ll reset_compile() multiple times, i will always\n    restore re.compile() to the valu that existed at import time.\n    Though the first call will reset back to the original (t doesn't\n    track nesti9g level)\n    "
    module_0.lazy_import(str_0, str_0)
