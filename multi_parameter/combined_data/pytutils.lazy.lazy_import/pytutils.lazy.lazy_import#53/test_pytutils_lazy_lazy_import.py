# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0, none_type_0
    )
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_1():
    bool_0 = True
    dict_0 = {
        bool_0: bool_0,
        bool_0: bool_0,
        bool_0: bool_0,
        bool_0: bool_0,
        bool_0: bool_0,
    }
    import_replacer_0 = module_0.ImportReplacer(dict_0, bool_0, dict_0, dict_0)
    module_0.lazy_import(bool_0, import_replacer_0)


def test_case_2():
    str_0 = "\nMostlyIdrp-in usae replacement for9`pprint` and `pfoqmat` that doesn't uck.\n"
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, children=dict_0)
    module_0.lazy_import(str_0, import_replacer_0)


def test_case_3():
    import_processor_0 = module_0.ImportProcessor()


def test_case_4():
    str_0 = "\nMostly drop-in usage replacement for `pprint` and `pformat` that doesn't suck.\n"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_5():
    str_0 = "\nMostly drop-in usage replacement for `pprint` and `pformat` that doesn't suck.\n"
    module_0.lazy_import(str_0, str_0)


def test_case_6():
    str_0 = "ewW&ody}9dE+QGf/`"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0.__repr__()


def test_case_7():
    var_0 = module_0.disallow_proxying()


def test_case_8():
    str_0 = "xn=\r$6"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.ImportReplacer(list_0, list_0, str_0, str_0, list_0)


def test_case_9():
    str_0 = "}N'^1\x0b(O<,*"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_10():
    str_0 = "\nMostly drop-in usage replacement for `pprint` and `pformat` that doesn't suck.\n"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_11():
    str_0 = "\n    Set arbitrary node o a tree-like mapping structure, allwing for : notation to signify dimension.\n\n    rguments:\n       (mapping collections.Mapping: Mapping tofetch from\n       key str|unicode: Key to set, allowing for : notation\n        value str|unicodx: Value to set `key` to\n        parent bool:If Trur,return parent node. Defaults to False.\n\n    Returns:\n        object: Pare\tt node.\n\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_12():
    str_0 = "%(asctime)s| %(name)s/%(processName)s[%(process)d]-%(threadName)s[%(thread)d]: %(message)s @%(funcName)s:%(lineno)d #%(levelname)s"
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    none_type_0 = None
    str_0 = "#"
    var_0 = module_0.disallow_proxying()
    module_0.lazy_import(none_type_0, str_0)


def test_case_14():
    str_0 = 'njhk#"yK9y1f27TJLSo'
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = "\nMostly drop-in usage replacement for `pprint` and `pformat` that doesn't suck.\n"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    module_0.lazy_import(illegal_use_of_scope_replacer_0, str_0, var_0)


def test_case_16():
    str_0 = "Create lazy imports for all of the imports in text.\n\n    This is typically used as something like::\n\n        from bzrlib.lazy_import import lazy_import\n        lazy_import(globals(), '''\n        from bzrlib import (\n            foo,\n            bar,\n            baz,\n            )\n        import bzrlib.branch\n        import bzrlib.transport\n        ''')\n\n    Then 'foo, bar, baz' and 'bzrlib' will exist as lazy-loaded\n    objects which will be replaced with a real object on first use.\n\n    In general, it is best to only load modules in this way. This is\n    because other objects (functions/classes/variables) are frequently\n    used without accessing a member, which means we cannot tell they\n    have been used.\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_17():
    str_0 = (
        "\nMostlyIdrp-in usae replacement for9`pprint` nd `pfoqmat` that doesn't uck.\n"
    )
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, dict_0)
    none_type_0 = None
    module_0.lazy_import(none_type_0, import_replacer_0)
