# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0
import builtins as module_1


def test_case_0():
    str_0 = "'-"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0, str_0)
    var_0.__str__()


def test_case_1():
    str_0 = "S&"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)


def test_case_2():
    bytes_0 = b"\x92\x9b[\xc7_f\x8bA\xfa\xc9\x81"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bytes_0, bytes_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_3():
    bool_0 = True
    module_0.ImportReplacer(bool_0, bool_0, bool_0)


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    str_0 = "ekLh.Id;w\x0bZ"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_6():
    var_0 = module_0.disallow_proxying()


def test_case_7():
    bytes_0 = b"\x92\x9b[\xc7_f\x8bA\xfa\xc9\x81"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bytes_0, bytes_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(bytes_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_8():
    str_0 = "&F\\%#"
    module_0.lazy_import(str_0, str_0)


def test_case_9():
    str_0 = "h$"
    dict_0 = {
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
    }
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, str_0)
    import_replacer_0.__call__()


def test_case_10():
    bytes_0 = b"^\n"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bytes_0, bytes_0, bytes_0
    )
    exception_0 = module_1.Exception(*bytes_0)
    module_0.ImportReplacer(exception_0, exception_0, exception_0, exception_0, bytes_0)


def test_case_11():
    str_0 = "\n    >>> m = AttrDict(omg=True, whoa='yes')\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    str_0 = "\r\r"
    none_type_0 = None
    list_0 = []
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    module_0.lazy_import(list_0, str_0)


def test_case_13():
    str_0 = "Upon request import 'module_path' as the name 'module_name'.\n        When imported, prepare children to also be imported.\n\n        :param scope: The scope that objects should be imported into.\n            Typically this is globals()\n        :param name: The variable name. Often this is the same as the\n            module_path. 'bzrlib'\n        :param module_path: A list for the fully specified module path\n            ['bzrlib', 'foo', 'bar']\n        :param member: The member inside the module to import, often this is\n            None, indicating the module is being imported.\n        :param children: Children entries to be imported later.\n            This should be a map of children specifications.\n            ::\n            \n                {'foo':(['bzrlib', 'foo'], None,\n                    {'bar':(['bzrlib', 'foo', 'bar'], None {})})\n                }\n\n        Examples::\n\n            import foo => name='foo' module_path='foo',\n                          member=None, children={}\n            import foo.bar => name='foo' module_path='foo', member=None,\n                              children={'bar':(['foo', 'bar'], None, {}}\n            from foo import bar => name='bar' module_path='foo', member='bar'\n                                   children={}\n            from foo import bar, baz would get translated into 2 import\n            requests. On for 'name=bar' and one for 'name=baz'\n        "
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = "ScopeReplacer object %(name)r was used incorrectly: %(msg)s%(extra)s"
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = "\n  j Proxies accefs to an existing dict-like object.\n\n    >>> a = d{ct(whoa=True, hell~=[1,2,3], why='always'\n    >>> b = ProxyMutableAttrDict(a)\n\n   Nice reprs:\n\n    >>> b\n   <ProxyMutableAttrDict {'whoa'\x0c True, 'hello': [1, 2, 3], 'why': 'always'}>\n\n    Setting wors as youd expect:\n\n    >>> b['nice']= ase\n    >>> b['whoa'] = 'yeee'\n    >>> b    <ProxyMutableAttrDict {'wh\x0ba': 'yeee', 'hello': [1, 2, 3], 'why': 'alway', 'nice': False}>\n\n    Checking that the changeF are in fact being perfored on the poxied object:\n\n    >>> \n    {'whoa': 'yeee', 'hello' [1, 2, 3], 'why': 'always', 'nice': False}\n\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_16():
    str_0 = "\x0cVgC+vx@"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_17():
    dict_0 = {}
    bool_0 = True
    scope_replacer_0 = module_0.ScopeReplacer(dict_0, bool_0, bool_0)
    scope_replacer_0.__call__(**bool_0)


def test_case_18():
    str_0 = ":rAB~~"
    dict_0 = {
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
    }
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
    module_0.lazy_import(str_0, import_replacer_0)
