# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0
import builtins as module_1


def test_case_0():
    var_0 = module_0.disallow_proxying()
    var_1 = module_0.IllegalUseOfScopeReplacer(var_0, var_0)
    module_0.IllegalUseOfScopeReplacer(var_0, var_1, var_1)


def test_case_1():
    bytes_0 = b"\x90"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bytes_0, bytes_0
    )


def test_case_2():
    bytes_0 = b"\x90"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bytes_0, bytes_0
    )
    illegal_use_of_scope_replacer_0.__str__()


def test_case_3():
    var_0 = module_0.disallow_proxying()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(var_0, var_0)
    var_1 = illegal_use_of_scope_replacer_0.__eq__(var_0)
    module_0.IllegalUseOfScopeReplacer(
        var_0, illegal_use_of_scope_replacer_0, illegal_use_of_scope_replacer_0
    )


def test_case_4():
    float_0 = 1441.407527
    module_0.ImportReplacer(float_0, float_0, float_0, children=float_0)


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    bool_0 = False
    module_0.lazy_import(bool_0, bool_0, bool_0)


def test_case_7():
    str_0 = "[?y&h'f:\x0cF)W-(;"
    module_0.lazy_import(str_0, str_0)


def test_case_8():
    str_0 = "[?y&hfR:\x0cFW-(;"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_9():
    var_0 = module_0.disallow_proxying()


def test_case_10():
    str_0 = "2]G2@!9jm@\n:+I4"
    module_0.lazy_import(str_0, str_0)


def test_case_11():
    bool_0 = False
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bool_0, bool_0, bool_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_12():
    str_0 = "[?yhc+:\x0cF)W-(;"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    str_0 = "\n    Turn a function to a bound method on an instance\n\n    >>> class Foo(object):\n    ...     def __init__(self, x, y):\n    ...         self.x = x\n    ...         self.y = y\n    >>> foo = Foo(2, 3)\n    >>> my_unbound_method = lambda self: self.x * self.y\n    >>> bind(foo, my_unbound_method, 'multiply')\n    >>> foo.multiply()  # noinspection PyUnresolvedReferences\n    6\n\n    :param object instance: some object\n    :param calable func: unbound method (i.e. a function that takes `self` argument, that you now\n        want to be bound to this class as a method)\n    :param str as_name: name of the method to create on the object\n    "
    dict_0 = {str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, dict_0)
    import_replacer_0.__setattr__(dict_0, import_replacer_0)


def test_case_14():
    base_exception_0 = module_1.BaseException()
    set_0 = {base_exception_0, base_exception_0, base_exception_0, base_exception_0}
    module_0.ImportReplacer(set_0, base_exception_0, set_0, set_0, base_exception_0)


def test_case_15():
    str_0 = ""
    import_processor_0 = module_0.ImportProcessor(str_0)
    module_0.lazy_import(import_processor_0, str_0)


def test_case_16():
    str_0 = "\ntr=, Dp$2"
    module_0.lazy_import(str_0, str_0)


def test_case_17():
    str_0 = "9n/.(\n.|7lCLV3#"
    module_0.lazy_import(str_0, str_0)


def test_case_18():
    str_0 = "[?y&h'fR:\x0cF)W-(;"
    dict_0 = {str_0: str_0}
    var_0 = module_0.ScopeReplacer(dict_0, str_0, str_0)
    module_0.lazy_import(dict_0, dict_0, var_0)


def test_case_19():
    str_0 = "9n].(\n.|lCLV36"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_20():
    str_0 = "\n    Turn a function to a bound method on an instance\n\n    >>> class Foo(object):\n    ...     def __init__(self, x, y):\n    ...         self.x = x\n    ...         self.y = y\n    >>> foo = Foo(2, 3)\n    >>> my_unbound_method = lambda self: self.x * self.y\n    >>> bind(foo, my_unbound_method, 'multiply')\n    >>> foo.multiply()  # noinspection PyUnresolvedReferences\n    6\n\n    :param object instance: some object\n    :param calable func: unbound method (i.e. a function that takes `self` argument, that you now\n        want to be bound to this class as a method)\n    :param str as_name: name of the method to create on the object\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_21():
    str_0 = "GFUz<pQL^dECntMXW"
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
    import_replacer_0.__setattr__(str_0, import_replacer_0)
