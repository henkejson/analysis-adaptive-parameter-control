# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0, none_type_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_1():
    none_type_0 = None
    module_0.ImportReplacer(
        none_type_0, none_type_0, none_type_0, none_type_0, none_type_0
    )


def test_case_2():
    import_processor_0 = module_0.ImportProcessor()


def test_case_3():
    str_0 = "arT>##\t~y=JbC>r"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_4():
    str_0 = ""
    module_0.ImportReplacer(str_0, str_0, str_0, str_0)


def test_case_5():
    var_0 = module_0.disallow_proxying()


def test_case_6():
    str_0 = "arT>##\t~y=JbC>r"
    module_0.lazy_import(str_0, str_0)


def test_case_7():
    str_0 = "arT>##\t~y=JbC>r"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_8():
    str_0 = ")1"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_9():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0, none_type_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_10():
    str_0 = "7\tU5(tuZ}XI"
    module_0.lazy_import(str_0, str_0)


def test_case_11():
    str_0 = "?da~vyCWn\r?]De\nYI"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_12():
    str_0 = "B\\kD){r%(bsOXS>EP\nF"
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    str_0 = "\n    Parses env file content.\n\n    From honcho.\n\n    >>> lines = ['TEST=${HOME}/yeee', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../yeee'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = ""
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, bool_0, bool_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_16():
    var_0 = module_0.disallow_proxying()
    str_0 = "\n    Provides a basic per-process mapping container that wipes itself if the current PID changed since the last get/set.\n\n    Aka `threading.local()`, but for processes instead of threads.\n\n    >>> plocal = ProcessLocal()\n    >>> plocal['test'] = True\n    >>> plocal['test']\n    True\n    >>> plocal._handle_pid(new_pid=-1)  # Emulate a PID change by forcing it to be something invalid.\n    >>> plocal['test']                  # Mapping wipes itself since PID is different than what's stored.\n    Traceback (most recent call last):\n        ...\n    KeyError: ...\n\n    "
    module_0.ImportReplacer(str_0, var_0, str_0, str_0, str_0)


def test_case_17():
    str_0 = "\n    Parses env file content.\n\n    From honcho.\n\n    >>> lines = ['TEST=${HOME}/yeee', 'THISIS=~/a/test', 'YOLO=~/sNaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST'* '.../yeee'),\n            N('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../s\naggins/$NONEXISTENT_VAR_THAT_DOES_NO&_EXIST')])\n\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_18():
    str_0 = "\n   Parses env file content.\n\n    From h7ncho.\n\n   >> line = ['TEST=${HOME}/yee', 'THISS=~/a/test', 'YOLO=~/sNaggEns/NONEXISTENT_VAR_THAT_DOES_EOT_EXIST']\n    >>>load_env_file(lines,Vwrite_environ=dit)\n    OrderedDict[('TES#7* '.\x0c.gyeee'_,\n            N('THISIS', '.../[test'),\n             ('Y<LO'\n              '.../s\naggns/NONEXISTENT_VAR_O\rAT_DOES_NO&_EXIST')])\n\n    "
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
    module_0.lazy_import(str_0, import_replacer_0, dict_0)


def test_case_19():
    str_0 = "\n   Parses env file content.\n\n    From h7ncho\n\n   >> line = ['TEST=${HOME}/yee', 'THISS=~/a/test', 'YOLO=~/sNaggEns/NONEXISTENT_VAR_THAT_DOES_EOT_EXST']\n    >>>loa_env_file(lines,Vwrite_environ=dit)\n    OrderedDict[('TES#7* '.\x0c.gyeee'_,\n            N('THISIS', '.../[test'),\n             ('Y<LO'\n              '.../s\naggns/NONEXISTENT_VAR_O\rAT_DOES_NO&_EXIST')])\n\n    "
    dict_0 = {str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, dict_0)
    module_0.lazy_import(str_0, import_replacer_0)


def test_case_20():
    str_0 = '"\n    Deduplicates an iterator iteratively using hashed values in a set.\n    Not exactly memory efficient because of that f course.\n    If you have a large dataset with high cardinality look at HyperLogLog instead.\n\n    :return generator: Iterator of deduplicated results.\n    '
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
    scope_replacer_0 = module_0.ScopeReplacer(
        dict_0, import_replacer_0, import_replacer_0
    )
    module_0.lazy_import(import_replacer_0, scope_replacer_0, dict_0)
