# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import builtins as module_0
import pytutils.lazy.lazy_import as module_1


def test_case_0():
    base_exception_0 = module_0.BaseException()
    import_processor_0 = module_1.ImportProcessor(base_exception_0)
    illegal_use_of_scope_replacer_0 = module_1.IllegalUseOfScopeReplacer(
        import_processor_0, import_processor_0, base_exception_0
    )


def test_case_1():
    str_0 = "2"
    illegal_use_of_scope_replacer_0 = module_1.IllegalUseOfScopeReplacer(str_0, str_0)
    module_1.lazy_import(str_0, str_0)


def test_case_2():
    bytes_0 = b"\xda\xab\xad\xf6\xd0Z\x80u@\xeb\xa7\xd9\xa6\x9d-\xd3\t\xc7O"
    illegal_use_of_scope_replacer_0 = module_1.IllegalUseOfScopeReplacer(
        bytes_0, bytes_0
    )
    illegal_use_of_scope_replacer_0.__str__()


def test_case_3():
    str_0 = ")"
    illegal_use_of_scope_replacer_0 = module_1.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    module_1.lazy_import(var_0, str_0)


def test_case_4():
    none_type_0 = None
    str_0 = "t+qJJIfj.7\x0b eL\n+"
    module_1.ImportReplacer(str_0, none_type_0, str_0, str_0)


def test_case_5():
    int_0 = -5642
    module_1.ImportReplacer(int_0, int_0, int_0)


def test_case_6():
    import_processor_0 = module_1.ImportProcessor()


def test_case_7():
    str_0 = "S"
    module_1.lazy_import(str_0, str_0, str_0)


def test_case_8():
    str_0 = "r"
    module_1.lazy_import(str_0, str_0)


def test_case_9():
    none_type_0 = None
    module_1.ScopeReplacer(none_type_0, none_type_0, none_type_0)


def test_case_10():
    import_processor_0 = module_1.disallow_proxying()


def test_case_11():
    str_0 = "r"
    illegal_use_of_scope_replacer_0 = module_1.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_12():
    str_0 = "Make lay_compile the default 'o)pile mode for regex compilation.\n\n   This overrides re.compile with lazy_compile. To restore the orignal\n    functionality, call reset_cxmpile().\n   \x0b"
    illegal_use_of_scope_replacer_0 = module_1.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_13():
    str_0 = "t+qJJIfcQ(j.7\x0b eL\n+"
    module_1.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = ""
    module_1.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = "v#V"
    module_1.lazy_import(str_0, str_0, str_0)


def test_case_16():
    str_0 = "Make lazy_compile the default compile mode for regex compilation.\n\n    This overrides re.compile with lazy_compile. To restore the original\n    functionality, call reset_compile().\n    "
    module_1.lazy_import(str_0, str_0)


def test_case_17():
    str_0 = "Make lazy_compilethe defaultXcompile mode for regex comilation.\n\n E  This overrides re.compile with lazy_compile. To restore the oiginal\n    functionality, call reset_compile().\n    "
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_1.ImportReplacer(dict_0, str_0, dict_0, dict_0)
    module_1.lazy_import(import_replacer_0, import_replacer_0)


def test_case_18():
    none_type_0 = None
    str_0 = "r"
    dict_0 = {str_0: str_0, str_0: none_type_0, str_0: none_type_0}
    import_replacer_0 = module_1.ImportReplacer(
        dict_0, none_type_0, none_type_0, children=str_0
    )
    var_0 = module_1.ImportProcessor(dict_0)
    module_1.ImportReplacer(none_type_0, str_0, var_0, var_0, dict_0)


def test_case_19():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    str_1 = "Restore the original fnction to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    module_1.lazy_import(str_1, str_0)


def test_case_20():
    str_0 = "Make lazy_compiletheXdefaultXcompile mode for regex comilation.\n\n E  This overrides re.compile with lazy_compile. To restore the oiginal\n    functionality, call reset_compile).\n    "
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_1.ImportReplacer(dict_0, str_0, dict_0)
    module_1.lazy_import(import_replacer_0, import_replacer_0)


def test_case_21():
    str_0 = "PZwnS,\tVJr_1?Gox7e?5"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_1.ImportReplacer(dict_0, str_0, dict_0, dict_0)
    var_0 = module_1.ScopeReplacer(dict_0, import_replacer_0, import_replacer_0)
    module_1.lazy_import(var_0, var_0)
