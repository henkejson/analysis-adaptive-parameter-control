# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import builtins as module_0
import pytutils.lazy.lazy_import as module_1


def test_case_0():
    object_0 = module_0.object()
    illegal_use_of_scope_replacer_0 = module_1.IllegalUseOfScopeReplacer(
        object_0, object_0, object_0
    )
    illegal_use_of_scope_replacer_0.__str__()


def test_case_1():
    bool_0 = False
    illegal_use_of_scope_replacer_0 = module_1.IllegalUseOfScopeReplacer(bool_0, bool_0)


def test_case_2():
    var_0 = module_1.disallow_proxying()
    dict_0 = {var_0: var_0}
    import_replacer_0 = module_1.ImportReplacer(dict_0, var_0, var_0, var_0)
    module_1.lazy_import(var_0, import_replacer_0)


def test_case_3():
    import_processor_0 = module_1.ImportProcessor()


def test_case_4():
    str_0 = "Lazily compiled regex objects.\n\nThis module defines a class which creates proxy objects for regex\ncompilation.  This allows overriding re.compile() to return lazily compiled\nobjects.\n\nWe do this rater than just providing a new interface so that it will also\nbe used by existing Python modules that create regexs.\n"
    module_1.lazy_import(str_0, str_0, str_0)


def test_case_5():
    str_0 = "Lazily compiled regex objects.\n\nThis module defines a class which creates proxy objects for regex\ncompilation.  This allows overriding re.compile() to return lazily compiled\nobjects.\n\nWe do this rater than just providing a new interface so that it will also\nbe used by existing Python modules that create regexs.\n"
    module_1.lazy_import(str_0, str_0)


def test_case_6():
    str_0 = "\t"
    module_1.lazy_import(str_0, str_0)


def test_case_7():
    import_processor_0 = module_1.disallow_proxying()


def test_case_8():
    str_0 = "Lazily compiled regex objects.\n\nThis module defines a class which creates proxy objects for regex\ncompilation.  This allows overriding re.compile() to return lazily compiled\nobjects.\n\nWe do this rater than just providing a new interface so that it will also\nbe used by existing Python modules that create regexs.\n"
    illegal_use_of_scope_replacer_0 = module_1.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_9():
    none_type_0 = None
    module_1.ScopeReplacer(none_type_0, none_type_0, none_type_0)


def test_case_10():
    object_0 = module_0.object()
    illegal_use_of_scope_replacer_0 = module_1.IllegalUseOfScopeReplacer(
        object_0, object_0, object_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(object_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_11():
    bytes_0 = b'\x80\xb5\x86\xe0"w\xc1\x81Ut'
    dict_0 = {bytes_0: bytes_0}
    import_replacer_0 = module_1.ImportReplacer(dict_0, bytes_0, bytes_0, bytes_0)
    import_replacer_0.__getattribute__(bytes_0)


def test_case_12():
    var_0 = module_1.disallow_proxying()
    illegal_use_of_scope_replacer_0 = module_1.IllegalUseOfScopeReplacer(
        var_0, var_0, var_0
    )
    int_0 = -1
    var_1 = var_0.__eq__(var_0)
    var_2 = var_0.__str__()
    module_1.ImportReplacer(
        int_0,
        illegal_use_of_scope_replacer_0,
        int_0,
        int_0,
        illegal_use_of_scope_replacer_0,
    )


def test_case_13():
    str_0 = "\n    Parses env file content.\n\n    From honcho.\n\n    >>> lines = ['TEST=${HOME}/yeee', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../yeee'),\n             ('THISIS', '.../a/test',\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n\n    "
    bool_0 = True
    illegal_use_of_scope_replacer_0 = module_1.IllegalUseOfScopeReplacer(
        str_0, str_0, bool_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_14():
    str_0 = "(A$KVu\t^Wp*[~i%["
    module_1.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = "\n    Parses env file content.\n\n    From honcho.\n\n    >>> lines = ['TEST=${HOME}/yeee', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../yeee'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n\n    "
    module_1.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = "\n    Parses env file content.\n\n    From honcho.\n\n    >>> lines = ['TEST=${HOME}/yeee', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../yeee'),\n             ('THISIS', '.../a/test',\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n\n    "
    module_1.lazy_import(str_0, str_0, str_0)


def test_case_17():
    str_0 = "n#kb&/="
    module_1.lazy_import(str_0, str_0)


def test_case_18():
    str_0 = "\n    Parses env file content.\n\n    From honcho.\n\n    >>> lines = ['TERT=${HOME}/yeee', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOESaNOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../yeee'),\n             ('THISIS', '.../a/test',\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n\n    "
    dict_0 = {str_0: str_0, str_0: str_0}
    bytes_0 = b""
    import_replacer_0 = module_1.ImportReplacer(dict_0, bytes_0, bytes_0)
    module_1.lazy_import(str_0, import_replacer_0, str_0)


def test_case_19():
    str_0 = "\n    Parses env file content.\n\n    From honcho.\n\n    >>> lines = ['TERT=${HOME}/yeee', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOESaNOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../yeeeP),\n             ('THISIS', '.../a/test',\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n\n    "
    dict_0 = {str_0: str_0}
    bytes_0 = b"\x93"
    import_replacer_0 = module_1.ImportReplacer(dict_0, bytes_0, str_0, str_0)
    module_1.lazy_import(str_0, import_replacer_0)


def test_case_20():
    str_0 = "\n    Parses env file content.\n\n    From honcho.\n\n    >>> lines = ['TERT=${HOME}/yeee', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOESaNOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../yeee'),\n             ('THISIS', '.../a/test',\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n\n    "
    dict_0 = {str_0: str_0, str_0: str_0}
    bytes_0 = b""
    import_replacer_0 = module_1.ImportReplacer(dict_0, bytes_0, bytes_0)
    scope_replacer_0 = module_1.ScopeReplacer(dict_0, import_replacer_0, bytes_0)
    scope_replacer_1 = module_1.ScopeReplacer(dict_0, bytes_0, bytes_0)
    module_1.lazy_import(dict_0, bytes_0, scope_replacer_0)
