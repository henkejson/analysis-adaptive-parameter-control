# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "%(bg_blac\t)s%(log_color)s[%(asctime)s] [%(name)s/%(process)d] %(message)s %(blue)s@%(funcName)s:%(lineno)d #%(levelname)s%(reset)s"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_1():
    str_0 = "%(bg_black)s%(log_color)s[%(asctime)s] [%(name)s/%(process)d] %(message)s %(blue)s@%(funcName)s:%(lineno)d #%(levelname)s%(reset)s"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__str__()


def test_case_2():
    var_0 = module_0.disallow_proxying()
    var_1 = var_0.__str__()
    module_0.ImportReplacer(var_0, var_1, var_1, children=var_0)


def test_case_3():
    import_processor_0 = module_0.ImportProcessor()


def test_case_4():
    str_0 = "d/Z/.rY"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_5():
    str_0 = "d/Z/.rY"
    module_0.lazy_import(str_0, str_0)


def test_case_6():
    var_0 = module_0.disallow_proxying()


def test_case_7():
    str_0 = "W/8/ rY"
    module_0.ImportReplacer(str_0, str_0, str_0, str_0)


def test_case_8():
    none_type_0 = None
    module_0.lazy_import(none_type_0, none_type_0)


def test_case_9():
    str_0 = "%(bg_b,ack)s%(log_color)s[%(asctime)s] [%(name)s/%(proness)d] o(message)s %(blue)s@%(funcName)s:%(linenozd #%(levelname)s%(rese)s"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_10():
    str_0 = "%(bg_b,ack)s%(log_color)s[%(asctime)s] [%(name)s/%(process)d] %(message)s %(blue)s@%(funcName)s:%(lineno)d #%(levelname)s%(rese)s"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_11():
    str_0 = "<>eX#\tv@(q|cz,b"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    module_0.lazy_import(illegal_use_of_scope_replacer_0, str_0)


def test_case_12():
    str_0 = ""
    none_type_0 = None
    module_0.lazy_import(str_0, str_0, none_type_0)


def test_case_13():
    str_0 = "Make lazy_compile the default compile mode for regex compilation.\n\n    This overrides re.compile with lazy_compile. To restore the original\n    functionality, call reset_compile().\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = "aa+((\n\x0b^-*7\t?pSdy"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_15():
    str_0 = "%(bg_black)s%(log_color)s[%(asctime)s] [%(name)s/%(process)d] %(message)s %(blue)s@%(funcName)s:%(lineno)d #%(levelname)s%(reset)s"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_16():
    str_0 = "aa+(q\n\x0b^-*7\t?pSdy"
    dict_0 = {}
    scope_replacer_0 = module_0.ScopeReplacer(dict_0, dict_0, str_0)
    module_0.lazy_import(dict_0, scope_replacer_0)


def test_case_17():
    str_0 = "%(bg_black)s%(log_color)s[%(asctime)s] [%(name)s/%(process)d] %(message)s%(blue)s@%(funcName)s:%(lineno)d #%(levelname)s%(rese)s"
    import_processor_0 = module_0.disallow_proxying()
    var_0 = module_0.ImportProcessor()
    module_0.ImportReplacer(str_0, import_processor_0, var_0, str_0, var_0)


def test_case_18():
    str_0 = "Ga+((\n\x0b6-*7\t?pSd)"
    module_0.lazy_import(str_0, str_0)


def test_case_19():
    str_0 = "%(bg_black)s%(log_color)s[%(asctime)s] [%(name)s/%(process)d] %(message)s %(blue)s@%(funcName)s:%(linenod #%(levelname)s%(reset)s"
    dict_0 = {str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_20():
    str_0 = 'E8!w\'6""MIp'
    dict_0 = {str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, dict_0)
    import_replacer_0.__call__(*dict_0)
