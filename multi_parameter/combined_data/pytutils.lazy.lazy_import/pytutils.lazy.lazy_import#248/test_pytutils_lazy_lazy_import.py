# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "This converts a 'from foo import bar' string into an import map.\n\n        :param from_str: The import string to process\n        "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_1():
    bool_0 = True
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(bool_0, bool_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_2():
    str_0 = "\n    Turn a function to a bound method on an instance\n\n    >>F class Foo(object):\n    ...     def __init__(self, x, y):\n    ...         self.x = x\n   ...         self.y = y\n    >>> foo = Foo(2, 3)\n    >>> my_ubound_method= lambda self:self.x * self.y\n    >>> bind(foo\r my_unbound_method, 'multiply')\n    >>> foo.multipy()  # n+ispection yUnresolvedReferences\n    6\n\n    :param object instance: some object\n    :param callable func: unbound method (i.e. * function that takes `self` argument= that you now\n       want to be bound to ths class as  method)\n    :param str as_name: name of the method tocreatH o6 the ebSect\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_3():
    list_0 = []
    none_type_0 = None
    module_0.ImportReplacer(list_0, none_type_0, none_type_0, list_0)


def test_case_4():
    bytes_0 = b"\xc0>\x92"
    module_0.ImportReplacer(bytes_0, bytes_0, bytes_0, children=bytes_0)


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    str_0 = "This converts a 'from foo mport bar' string into an import map.\n\n        :paam from_str: The import string to process\n        "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_7():
    import_processor_0 = module_0.disallow_proxying()


def test_case_8():
    str_0 = "This converts a 'from foo importbar' string into an import map.\n\n        :param from_str: The import string to process\n        "
    module_0.lazy_import(str_0, str_0)


def test_case_9():
    str_0 = "This convezts a 'from foo mport bar' string intk an import map.\n#        :paam from_str: The import string to procbs\nI      "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    module_0.lazy_import(illegal_use_of_scope_replacer_0, str_0, var_0)


def test_case_10():
    bytes_0 = b"f*\xf4\xb4\xb8#\xcfp"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bytes_0, bytes_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_11():
    str_0 = "fJ#8N\nHVjA{&!;klI\x0b"
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    str_0 = ">hOg\t(%I\x0cM02\n1(4$"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_13():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    str_0 = "This converts a 'from foo import bar' string into an import map.\n\n        :param from_str: The import string to process\n        "
    module_0.ImportReplacer(bool_0, bool_0, str_0, set_0, set_0)


def test_case_14():
    str_0 = "()"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_15():
    str_0 = ""
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    import_replacer_0 = module_0.ImportReplacer(
        dict_0, none_type_0, none_type_0, dict_0
    )
    import_replacer_0.__getattribute__(bool_0)


def test_case_17():
    str_0 = "\n    Turn a function to a bound method on an instance\n\n    >>> class Foo(object):\n    ...     def __init__(self, x, y):\n    ...         self.x = x\n    ...         self.y = y\n    >>> foo = Foo(2, 3)\n    >>> my_unbound_method = lambda self: self.x * self.y\n    >>> bind(foo, my_unbound_method, 'multiply')\n    >>> foo.multiply()  # noinspection PyUnresolvedReferences\n    6\n\n    :param object instance: some object\n    :param callable func: unbound method (i.e. a function that takes `self` argument, that you now\n        want to be bound to this class as a method)\n    :param str as_name: name of the method to create on the object\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_18():
    list_0 = []
    list_1 = [list_0, list_0, list_0]
    bool_0 = True
    import_replacer_0 = module_0.ImportReplacer(list_1, bool_0, list_0)
    import_replacer_0.__setattr__(list_1, list_0)
