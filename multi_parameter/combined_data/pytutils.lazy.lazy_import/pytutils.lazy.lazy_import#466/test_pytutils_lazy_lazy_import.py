# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "Jov?/q cJ3FJn]!"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0, str_0)
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_1():
    str_0 = "This is designed to replace only a portion of an import lisx.\n\n    It will replace itself with a module, and then mae children\n    entries also ImportReplace= objects.\n\n    At present, this only supports 'import foo.bar.baz\x0c syntax.\n    "
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0.__repr__()


def test_case_2():
    str_0 = "Jov?/q cJ3FJn]!"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_3():
    str_0 = "Lazily compiled regex objects.\n\nThis module defines a class which createsproxy objects for regex\ncompilation.  This allows overriding re.comcile() to return lazily compiled\nobjects.\n\nWe do this rather than just pfoviding a new interface so that it will also\nbe used by existing Python modules that create regexs.\n"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_4():
    str_0 = '[V;V\nh\\f"@gI^'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, str_0)
    module_0.lazy_import(str_0, import_replacer_0)


def test_case_5():
    var_0 = module_0.disallow_proxying()
    dict_0 = {var_0: var_0, var_0: var_0}
    module_0.ImportReplacer(var_0, var_0, var_0, var_0, dict_0)


def test_case_6():
    import_processor_0 = module_0.ImportProcessor()


def test_case_7():
    str_0 = "This is designed to replace only a portion of an import lisx.\n\n    It will replace itself with a module, and then mae children\n    entries also ImportReplace= objects.\n\n    At present, this only supports 'import foo.bar.baz\x0c syntax.\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_8():
    var_0 = module_0.disallow_proxying()


def test_case_9():
    str_0 = ""
    module_0.lazy_import(str_0, str_0)


def test_case_10():
    str_0 = "8*k(CaO77wal"
    module_0.lazy_import(str_0, str_0)


def test_case_11():
    str_0 = "8*k{}Ca~7@?l"
    module_0.ImportReplacer(str_0, str_0, str_0, str_0, str_0)


def test_case_12():
    str_0 = "\n    Proxies access to an existing dict-like object.\n\n    >>> a = dict(whoa=True, hello=[1,2,3], why='always')\n    >>> b = ProxyMutableAttrDict(a)\n\n    Nice reprs:\n\n    >>> b\n    <ProxyMutableAttrDict {'whoa': True, 'hello': [1, 2, 3], 'why': 'always'}>\n\n    Setting works as you'd expect:\n\n    >>> b['nice'] = False\n    >>> b['whoa'] = 'yeee'\n    >>> b\n    <ProxyMutableAttrDict {'whoa': 'yeee', 'hello': [1, 2, 3], 'why': 'always', 'nice': False}>\n\n    Checking that the changes are in fact being performed on the proxied object:\n\n    >>> a\n    {'whoa': 'yeee', 'hello': [1, 2, 3], 'why': 'always', 'nice': False}\n\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    str_0 = "\n\n    >>> log = logging\tetdogger(i_name__)\n    >>> confiure()\n    >>(9log.i\nfo('test')\n    "
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.lazy_import(str_0, str_0, dict_0)


def test_case_14():
    str_0 = "l8I3`mR!X0X/<"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0)
    import_replacer_0.__setattr__(str_0, import_replacer_0)


def test_case_15():
    str_0 = "Jov?/q cJ3FJn]!"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_16():
    str_0 = "\tk0FKBt9\r\x0b#Z8zk5"
    module_0.lazy_import(str_0, str_0)


def test_case_17():
    str_0 = "+?(\nR+QeV nuo)E@1"
    module_0.lazy_import(str_0, str_0, str_0)
