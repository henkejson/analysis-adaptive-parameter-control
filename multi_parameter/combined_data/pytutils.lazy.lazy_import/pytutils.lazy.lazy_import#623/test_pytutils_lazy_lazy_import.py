# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_1():
    bytes_0 = b"J1\x05a6\x889\x1c"
    dict_0 = {bytes_0: bytes_0}
    import_replacer_0 = module_0.ImportReplacer(
        dict_0, bytes_0, bytes_0, children=bytes_0
    )
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_2():
    str_0 = "\n    Loads (and returns) an env file specified by `filename` into the mapping `environ`.\n\n    >>> lines = ['TEST=${HOME}/yeee-$PATH', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '....../yeee-...:...'),\n             ('THISIS', '.../a/test'),\n             ('YOO',\n             '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n    "
    dict_0 = {str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, dict_0)
    module_0.lazy_import(dict_0, str_0)


def test_case_3():
    import_processor_0 = module_0.ImportProcessor()


def test_case_4():
    str_0 = "\n    Read [expanded] `filename` and yield each (line | chunk).\n\n    :param str filename: File path\n    :param str mode: Use this mode to open `filename`, ala `r` for text (default), `rb` for binary, etc.\n    :param int iter_by: Iterate by this many bytes at a time. Default is by line.\n    :param bool allow_stdin: If Truthy and filename is `-`, read from `sys.stdin`.\n    :param bool expnduser: If Truthy, expand `~` in `filename`\n    :param bool expandvars: If Truthy, expand env vars in `filename`\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_5():
    var_0 = module_0.disallow_proxying()


def test_case_6():
    list_0 = []
    none_type_0 = None
    module_0.ScopeReplacer(list_0, list_0, none_type_0)


def test_case_7():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0, none_type_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(none_type_0)
    module_0.IllegalUseOfScopeReplacer(
        illegal_use_of_scope_replacer_0, var_0, illegal_use_of_scope_replacer_0
    )


def test_case_8():
    str_0 = "j'Q"
    module_0.ImportReplacer(str_0, str_0, str_0, str_0, str_0)


def test_case_9():
    int_0 = 3785
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        int_0, int_0, int_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_10():
    str_0 = 'F"DHp7tZC.Vf'
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_11():
    str_0 = "-x(3K`0G;y\\0&d#I\r|DU"
    str_1 = "\n    Read [expanded] `filename` and yield each (line | chunk).\n\n    :param str filename: File path\n    :param str mode: Use this mode to open `filename`, ala `r` for text (default), `rb` for binary, etc.\n    :param int iter_by: Iterate by this many bytes at a time. Default is by line.\n    :param bool allow_stdin: If Truthy and filename is `-`, read from `sys.stdin`.\n    :param bool expnduser: If Truthy, expand `~` in `filename`\n    :param bool expandvars: If Truthy, expand env vars in `filename`\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_1, str_0, str_0
    )
    module_0.lazy_import(str_1, str_0)


def test_case_12():
    str_0 = ";>s[`K3e=y#e"
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    str_0 = "\n    Loads (and returns) an env file specified by `filename` into the mapping `environ`.\n\n    >>> lines = ['TEST=${HOME}/yeee-$PATH', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../.../yeee-...:...'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = "#6LU?]c:|IG^ 8][_<+?"
    none_type_0 = None
    module_0.lazy_import(none_type_0, str_0)


def test_case_15():
    str_0 = "\n    Loads (and returnsO an env file specified by `filename` into the mapping `environ`.\n\n    >>> lines = ['TESTa${HOME}/yeee-$PATH', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_{OT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '....../yeee-...:...'),\n             ('THISIS', '.../a/test'),\n             ('YOO',\n             '.../swaggins/$NONEXISTENT_VAR_TyAT_DOES_NOT_EXIST')])\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_16():
    str_0 = "7Tep?\r%JK\rA}Igyp.4cg"
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, children=str_0)
    module_0.lazy_import(dict_0, import_replacer_0, str_0)


def test_case_17():
    str_0 = "\n    Loads (and returns) an env file specified by `filename` into the mapping `environ`.\n\n    >>> lines = ['TEST=${HOME}/yeee-$PATH', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '....../yeee-...:...'),\n             ('THISIS', '.../a/test'),\n             ('YOO',\n             '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n    "
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, dict_0)
    module_0.lazy_import(dict_0, import_replacer_0)


def test_case_18():
    str_0 = "\n    Loads (and returns) an env file specified by `filename` into the mapping `environ`.\n\n    >>> lines = ['TEST=${HOME}/yeee-$PATH', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '....../yeee-...:...'),\n             ('THISIS', '.../a/test'),\n        Y  / ('YOO',\n             '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n    "
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, dict_0)
    scope_replacer_0 = module_0.ScopeReplacer(dict_0, import_replacer_0, str_0)
    module_0.lazy_import(import_replacer_0, scope_replacer_0)
