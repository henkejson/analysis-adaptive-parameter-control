# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    var_0 = module_0.disallow_proxying()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(var_0, var_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_1():
    bytes_0 = b"\x0b\x82S\x8f\x03\\\x07\x99y\xfc\x7f\x96\xd4\xc3\xe8\x1f\x9ft\xd7"
    var_0 = module_0.IllegalUseOfScopeReplacer(bytes_0, bytes_0, bytes_0)
    var_0.__unicode__()


def test_case_2():
    bytes_0 = b"\xd2a\x01i\x0eG\x1e`\x85.\xd6n\x12i/\x16\xa5"
    import_processor_0 = module_0.ImportProcessor()
    list_0 = [import_processor_0, import_processor_0, bytes_0, bytes_0]
    tuple_0 = (bytes_0, import_processor_0, list_0, bytes_0)
    none_type_0 = None
    var_0 = module_0.disallow_proxying()
    var_1 = var_0.__eq__(none_type_0)
    module_0.ImportReplacer(var_1, var_1, var_1, tuple_0)


def test_case_3():
    var_0 = module_0.disallow_proxying()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        var_0, var_0, var_0
    )
    str_0 = "eB+yaym k r} k/"
    module_0.ImportReplacer(illegal_use_of_scope_replacer_0, var_0, var_0, var_0, str_0)


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    str_0 = "scanner"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_6():
    str_0 = "Z|S0D\rV"
    module_0.lazy_import(str_0, str_0)


def test_case_7():
    var_0 = module_0.disallow_proxying()


def test_case_8():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_9():
    str_0 = "\n    Decorator to dedupe it's output iterable automatically.\n\n    :param f: Wrapped meth\n    :pzram instance: wrapt provided property for decorating hydrated class instances (un.sed)\n    :par&m args: Passyhrough args\n    :param kwargs: Passthrough kwargs\n    :ret}rn decorator: Decorator method that ingests iturables and dedupesthem iteratively#\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_10():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, bool_0, dict_0)
    module_0.lazy_import(bool_0, import_replacer_0, bool_0)


def test_case_11():
    str_0 = "f6"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_12():
    str_0 = "L![WYG#"
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    str_0 = "\n    A marker to indicate a LazyModule type.\n    Allows us to check module's with `isinstance(mod, _LazyModuleMarker)`\n    to know if the module is lazy.\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = ""
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_15():
    str_0 = "!\\"
    module_0.ImportReplacer(str_0, str_0, str_0, str_0, str_0)


def test_case_16():
    str_0 = "Create lazy imports for all of the imports in text.\n\n    This is typically used as something like::\n\n        from bzrlib.lazy_import import lazy_import\n        lazy_import(globals(), '''\n        from bzrlib import (\n            foo,\n            bar,\n            baz,\n            )\n        import bzrlib.branch\n        import bzrlib.transport\n        ''')\n\n    Then 'foo, bar, baz' and 'bzrlib' will exist as lazy-loaded\n    objects which will be replaced with a real object on first use.\n\n    In general, it is best to only load modules in this way. This is\n    because other objects (functions/classes/variables) are frequently\n    used without accessing a member, which means we cannot tell they\n    have been used.\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_17():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting l-vel)B    "
    import_processor_0 = module_0.ImportProcessor()
    var_0 = str_0.__str__()
    import_processor_0.lazy_import(var_0, var_0)
