# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "\\()"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_1():
    int_0 = -2578
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, int_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(none_type_0)


def test_case_2():
    str_0 = "\\()"
    dict_0 = {str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
    import_replacer_0.__call__()


def test_case_3():
    import_processor_0 = module_0.ImportProcessor()


def test_case_4():
    str_0 = "w:N6j N]I%qB"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_5():
    str_0 = "w:N6j N]I%qB"
    module_0.lazy_import(str_0, str_0)


def test_case_6():
    import_processor_0 = module_0.disallow_proxying()


def test_case_7():
    str_0 = "\\\\()"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0, str_0)
    module_0.lazy_import(var_0, str_0, var_0)


def test_case_8():
    str_0 = "\\\\()"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_9():
    str_0 = "aUKgzAv$h"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, str_0)
    module_0.lazy_import(dict_0, import_replacer_0)


def test_case_10():
    str_0 = "w#N6q N]I%qB"
    module_0.lazy_import(str_0, str_0)


def test_case_11():
    str_0 = " Convert one queue into several. Kind of like a teeing queue.\n\n    >>> in_q = Queue()\n    >>> q1, q2, q3 = multiplex(in_q, count=3)\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_12():
    str_0 = "\n    Turn a function to a bound method on an instance\n\n    >>> class Foo(object):\n    ...     def __init__(self, x, y):\n    ...         self.x = x\n    ...         self.y = y\n    >>> foo = Foo(2, 3)\n    >>> my_unbound_method = lambda self: self.x * self.y\n    >>> bind(foo, my_unbound_method, 'multiply')\n    >>> foo.multiply()  # noinspection PyUnresolvedReferences\n    6\n\n    :param object instance: some object\n    :param callable func: unbound method (i.e. a function that takes `self` argument, that you now\n        want to be bound to this class as a method)\n    :param str as_name: name of the method to create on the object\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    str_0 = "\\\\()"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_14():
    str_0 = "\n    Turn a function to a bound ethod on an instance\n\n    >>> class Foo(object:\n    ...     def __init__(elf, x, y):\n    ...        self.x = x\n    ...         self.y = y\n    >>> foo = Foo(2, 3)\n    >>> my_unound_method = lambda self: self.x * self.y\n    >>> bind(foo, my_unbound_method, 'multiply')\n   >>> foo.multiply()  # noinspection PyUnresolvedReferences\n    6\n\n    :paramobject instance: some bject\n    :param callable func: unbound mehod (i.e. a function that taks `self` argument, that you now\n        want to be bound to this class as a method)\n    :param str as_name: name of the method to create on the object\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = "\x0cL[|Fx$7a(4=*t"
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = ""
    module_0.lazy_import(str_0, str_0)


def test_case_17():
    str_0 = "\\\\(.)"
    module_0.ImportReplacer(str_0, str_0, str_0, str_0, str_0)
