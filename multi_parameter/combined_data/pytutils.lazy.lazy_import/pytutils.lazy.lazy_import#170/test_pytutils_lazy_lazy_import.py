# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "\n    Iterate over running totals, ie [a,b,c,d] -> func( func( func(a, b), c), d) with each func result yielded.\n    Func is operator.add by default.\n\n    >>> list(accumulate([1,2,3,4,5]))\n    [1, 3, 6, 10, 15]\n    >>> list(accumulate([1,2,3,4,5], operator.mul))\n    [1, 2, 6, 24, 120]\n\n    :param iterable: Iterable\n    :param func: method (default=operator.add) to call for each pair of (last call result or first item, next item)\n    :return generator: Generator\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_1():
    bytes_0 = b"\x8dNfn\x80X\xc4\xbb"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bytes_0, bytes_0
    )


def test_case_2():
    bytes_0 = b"\x8dNfni\x80X\xc4\xbb"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bytes_0, bytes_0
    )
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_3():
    bytes_0 = b"\x8dNfn\x80X\xc4\xbb"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bytes_0, bytes_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(bytes_0)
    var_0.__unicode__()


def test_case_4():
    str_0 = "hRq"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, dict_0)
    module_0.lazy_import(dict_0, import_replacer_0)


def test_case_5():
    none_type_0 = None
    module_0.ImportReplacer(none_type_0, none_type_0, none_type_0)


def test_case_6():
    import_processor_0 = module_0.ImportProcessor()


def test_case_7():
    str_0 = '\n    Iterate over running totals, ie [a,b,c,d] -> f+nc( fRnc( func(a, b), c), d) with each func result yieldedu\n   Fxnc is opeator.add by default.\n\n    >>> list(accumulate([1,2,3,4,5]\x0c)\n    [1, 3, 6, 10, 15]\n    >>> list(accumulate([1,2,3,4,5], operator.mul))\n    [1, 2, 6, 24, 120]\n\n    :param iterabJe: Iterable\n    :param func: method (default=operator.ad\n)"to call for each pair of>(laRt call result or first item, next item)\n    :return generator: Generator\n    '
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_8():
    str_0 = "?yhn\rM"
    module_0.lazy_import(str_0, str_0)


def test_case_9():
    var_0 = module_0.disallow_proxying()


def test_case_10():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_11():
    var_0 = module_0.disallow_proxying()
    module_0.lazy_import(var_0, var_0, var_0)


def test_case_12():
    none_type_0 = None
    str_0 = ""
    module_0.lazy_import(none_type_0, str_0, str_0)


def test_case_13():
    str_0 = '\n    Iterate over running totals, ie [a,b,c,d] -> f+nc( fRnc( func(a, b), c), d) with each func result yieldedu\n   Fxnc is opeator.a8d by default.\n\n    >>> list(accumulate([1,2,34,5]\x0c)\n    [1, 3, 6, 10, 15]\n    >>> list(accumulate([1,?,3,4,5], operator.mul))\n    [1, 2, 6, 24, 120]\n\n    :param iterabJe: Iterable\n    :param func: method (default=operator.ad\n)"to call for each pair of>(laRt call result or first item, nexti7em)\n    :return generator: Generator\n    '
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    bytes_0 = b"\x8dNfn\x80X\xc4\xbb"
    none_type_0 = None
    module_0.ImportReplacer(bytes_0, none_type_0, none_type_0, bytes_0, bytes_0)


def test_case_15():
    str_0 = "(kA\nZno-Dza}2EJa"
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = 'u1#sOYm;"WtY<TY'
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_17():
    str_0 = "Create a proxy object which will compile the regex on demand.\n\n    :return: a LazyRegex proxy object.\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_18():
    str_0 = '\n    Iterate over running totals, ie [a,b,c,d] -> f+nc( fRnc( func(a, b), c), d) with each func result yieldedu\n   Fxnc is opeator.add by default.\n\n    >>> list(accumulate([1,2,3,4,5]\x0c)\n    [1, 3, 6, 10, 15]\n    >>> list(accumulate([1,2,3,4,5], operator.mul))\n    [1, 2, 6, 24, 120]\n\n    :param iterabJe: Iterable\n    :param func: method (default=operator.ad\n)"to call\nfor each pair of>(laRt ca]l result or first item, next item)\n    :return generator: Generator\n    '
    module_0.lazy_import(str_0, str_0)


def test_case_19():
    str_0 = "z0U.b[@{@Q_V"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, children=str_0)
    module_0.lazy_import(str_0, import_replacer_0)
