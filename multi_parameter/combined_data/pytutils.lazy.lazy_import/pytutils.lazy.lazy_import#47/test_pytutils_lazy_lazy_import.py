# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0
import builtins as module_1


def test_case_0():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0, none_type_0
    )
    illegal_use_of_scope_replacer_0.__str__()


def test_case_1():
    str_0 = "N ggf\ng\\,K/\nU#s\r"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0, str_0)
    var_0.__unicode__()


def test_case_2():
    bool_0 = True
    bool_1 = True
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(bool_1, bool_1)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(bool_0)


def test_case_3():
    str_0 = "u~%FYX1U"
    none_type_0 = None
    module_0.ImportReplacer(str_0, str_0, none_type_0, str_0)


def test_case_4():
    str_0 = "#o\nK|rz s[SqJBi"
    dict_0 = {str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, children=dict_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0, dict_0)


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    str_0 = 'vOcgx&HIW^"'
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_7():
    exception_0 = module_1.Exception()
    str_0 = "\n"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_8():
    var_0 = module_0.disallow_proxying()


def test_case_9():
    str_0 = 'vOcgx&HIW^"'
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_10():
    str_0 = "\n    Loads (and returns) an env file specified by `filename` into the mapping `environ`.\n\n    >>> lines = ['TEST=${HOME}/yeee-$PATH', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../.../yeee-...:...'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NOEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_11():
    str_0 = "N ggf\ng\\,K/\nU#s\r"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_12():
    str_0 = "xo\tW?ek2^0*(-"
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    str_0 = "\n    An ordered dictionary can be combined with the Counter class so that the counter remembers the order elements are\n    first encountered.\n\n    From Python stdlib in `collections`.\n    "
    var_0 = module_1.object()
    str_1 = "lmZjnh"
    module_0.ImportReplacer(str_0, var_0, str_0, str_0, str_1)


def test_case_14():
    str_0 = "p4WS8!1/U}#o"
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    dict_0 = {}
    var_0 = module_0.disallow_proxying()
    scope_replacer_0 = module_0.ScopeReplacer(dict_0, dict_0, var_0)
    module_0.lazy_import(var_0, scope_replacer_0)


def test_case_16():
    str_0 = "\n    Loads (and returns) an env file specified by `filename` into the mapping `environ`.\n\n    >>> lines = ['TEST=${HOME}/yIee-$PATH', 'THISIS=~/a/test', 'YOLO=/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../.../yeee-...:...'),\n             ('TISIS', '.../a/test',\n             ('YOLO',\n              '.../swaggis/$NOEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_17():
    str_0 = "dsZP"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, str_0)
    module_0.lazy_import(dict_0, import_replacer_0)
