# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "I"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0, str_0)
    var_0.__str__()


def test_case_1():
    str_0 = "u<}~9IFD?QjJ"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0.__unicode__()


def test_case_2():
    bool_0 = False
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bool_0, bool_0, bool_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(bool_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_3():
    bool_0 = False
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bool_0, bool_0, bool_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_4():
    str_0 = "U "
    module_0.ImportReplacer(str_0, str_0, str_0, str_0, str_0)


def test_case_5():
    bool_0 = True
    import_processor_0 = module_0.ImportProcessor(bool_0)
    none_type_0 = None
    module_0.ImportReplacer(none_type_0, none_type_0, none_type_0)


def test_case_6():
    import_processor_0 = module_0.ImportProcessor()


def test_case_7():
    bool_0 = True
    import_processor_0 = module_0.ImportProcessor(bool_0)


def test_case_8():
    var_0 = module_0.disallow_proxying()


def test_case_9():
    bool_0 = False
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bool_0, bool_0, bool_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_10():
    none_type_0 = None
    module_0.lazy_import(none_type_0, none_type_0, none_type_0)


def test_case_11():
    str_0 = ""
    dict_0 = {str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, str_0)
    import_replacer_0.__getattribute__(dict_0)


def test_case_12():
    str_0 = '" '
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    str_0 = "acGX\t~k1!E# ZqtaSr"
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = ""
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = "-\t=8Tr(Dp!O11S"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_16():
    str_0 = "'N"
    dict_0 = {str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
    import_replacer_0.__call__()


def test_case_17():
    str_0 = "Make lazy_compile the default compile mode for regex compilation.\n\n    This overrides re.compile with lazy_compile. To restore the original\n    functionality, call reset_compile().\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_18():
    str_0 = "nK(2\nKwFp60X73G~T"
    module_0.lazy_import(str_0, str_0)


def test_case_19():
    str_0 = "\n    Parses env file content.\n\n    From honcho.\n\n    >>> lines = ['TEST=${HOME}/yeee', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../yeee'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n\n    "
    module_0.lazy_import(str_0, str_0, str_0)
