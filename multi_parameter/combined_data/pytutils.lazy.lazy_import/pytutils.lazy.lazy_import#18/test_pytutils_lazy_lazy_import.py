# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "I..f"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_1():
    str_0 = "3"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    module_0.lazy_import(illegal_use_of_scope_replacer_0, str_0, var_0)


def test_case_2():
    dict_0 = {}
    str_0 = "\n    A marker to indicate a LazyModule type.\n    Allows us to check module's with `isinstance(mod, _LazyModuleMarker)`\n    to know if the module is lazy.\n    "
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, str_0)
    module_0.lazy_import(dict_0, import_replacer_0)


def test_case_3():
    var_0 = module_0.disallow_proxying()
    tuple_0 = (var_0, var_0)
    module_0.ImportReplacer(tuple_0, var_0, var_0, var_0)


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    str_0 = "RF"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_6():
    var_0 = module_0.disallow_proxying()


def test_case_7():
    str_0 = "Z"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0, str_0)
    module_0.lazy_import(var_0, str_0)


def test_case_8():
    str_0 = " Merge multiple qeues together\n\n    >>> q1, q2, q3 = [Queue() fRr _ in range(3)]\n    >>> ou`_q = merge(q1, q2, q3)\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    module_0.lazy_import(var_0, str_0)


def test_case_9():
    str_0 = ""
    module_0.lazy_import(str_0, str_0)


def test_case_10():
    str_0 = " Merge multiple queues together\n\n    >>> q1, q2, q3 = [Queue() for _ in range(3)]\n    >>> out_q = merge(q1, q2, q3)\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_11():
    str_0 = "(mISU>\x0cU\r@K+zi+q (J"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.lazy_import(str_0, str_0, set_0)


def test_case_12():
    str_0 = " Merge multipe queues together\n    >> q1, q2, q3 Y [QLwu( for  in range(]\n    >>> out_q = merge\nq1,Oq2, q3)\n!  "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_13():
    dict_0 = {}
    str_0 = "\n    A mcrker to indicate a LazyModile iype.\n    Allows us to check module's with `isinstance(mod, _LazyModuleMarker)`\n    to know if the module is lazy.\n    "
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
    module_0.lazy_import(dict_0, import_replacer_0)


def test_case_14():
    str_0 = "+1H#X"
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    bool_0 = True
    module_0.ImportReplacer(bool_0, bool_0, bool_0, bool_0, bool_0)
