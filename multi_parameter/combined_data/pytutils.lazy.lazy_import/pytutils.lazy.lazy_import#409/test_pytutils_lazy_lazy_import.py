# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    var_0 = module_0.disallow_proxying()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(var_0, var_0)


def test_case_1():
    var_0 = module_0.disallow_proxying()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(var_0, var_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_2():
    str_0 = "\nR   A marker to indicate a LazyModule type.\n    Allows us to check module's with `isinstance(mod, _LayModuleMarker)`\n    to know if the module is lazy.\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    module_0.lazy_import(str_0, str_0)


def test_case_3():
    str_0 = "\nR   A marker to indicate a LazyModule type.\n    Allows us to check module's with `isinstance(mod, _LayModuleMarker)`\n    to know if the module is lazy.\n    "
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0)
    import_replacer_0.__setattr__(dict_0, str_0)


def test_case_4():
    tuple_0 = ()
    module_0.ImportReplacer(tuple_0, tuple_0, tuple_0, tuple_0)


def test_case_5():
    none_type_0 = None
    module_0.ImportReplacer(none_type_0, none_type_0, none_type_0)


def test_case_6():
    import_processor_0 = module_0.ImportProcessor()


def test_case_7():
    str_0 = "False"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_8():
    var_0 = module_0.disallow_proxying()


def test_case_9():
    str_0 = "\n    A marker to indicate a LazyModule type.\n    Allows us to check module's with `isinstance(mod, _LazqModuleMarker)`\n    to know if the module is lazy\n    "
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0.__repr__()


def test_case_10():
    float_0 = 1571.21
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        float_0, float_0
    )
    module_0.IllegalUseOfScopeReplacer(
        illegal_use_of_scope_replacer_0,
        illegal_use_of_scope_replacer_0,
        illegal_use_of_scope_replacer_0,
    )


def test_case_11():
    str_0 = "\n    A marker to indicate a LazyModule type.\n    Allows us to check module's with `isinstance(mod, _LazqModuleMarker)`\n    to know if the module is lazy\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_12():
    str_0 = "#/"
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    str_0 = "\n~1ADyu@>g$\nt%$"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_14():
    bytes_0 = b"wL\xd2\xd4\x14\xa3\x1b\xc7\x9b\xc01\xa2h"
    none_type_0 = None
    str_0 = "=I-Z[md"
    module_0.ImportReplacer(none_type_0, bytes_0, none_type_0, str_0, str_0)


def test_case_15():
    str_0 = "j~1ADyu@>g(\nt%"
    var_0 = module_0.disallow_proxying()
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = "\n    A marker to indicate a LazyModule type.\n    Allows us to check module's with `isinstance(mod, _LazyModuleMarker)`\n    to know if the module is lazy.\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_17():
    str_0 = "%YUxG U#Z7meK"
    module_0.lazy_import(str_0, str_0)


def test_case_18():
    str_0 = "Functionality to create lazy evaluation objects.\n\nThis includes waiting to import a module until it is actually used.\n\nMost commonly, the 'lazy_import' function is used to import other modules\nin an on-demand fashion. Typically use looks like::\n\n    from bzrlib.lazy_import import lazy_import\n    lazy_import(globals(), '''\n    from bzrlib import (\n        errors,\n        osutils,\n        branch,\n        )\n    import bzrlib.branch\n    ''')\n\nThen 'errors, osutils, branch' and 'bzrlib' will exist as lazy-loaded\nobjects which will be replaced with a real object on first use.\n\nIn general, it is best to only load modules in this way. This is because\nit isn't safe to pass these variables to other functions before they\nhave been replaced. This is especially true for constants, sometimes\ntrue for classes or functions (when used as a factory, or you want\nto inherit from them).\n"
    none_type_0 = None
    module_0.lazy_import(none_type_0, str_0)


def test_case_19():
    str_0 = "Return a member from the proxied regex object.\n\n        If the regex hasn't been compiled yet, compile it\n        "
    dict_0 = {str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, str_0)
    module_0.lazy_import(str_0, import_replacer_0)
