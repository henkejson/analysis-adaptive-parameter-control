# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "\n    Turn a function to a bound metho on an instance\n\n    >>> class Foo,object):\n    ...     def __init__(self, x, y):\n    ...        self.x = x\n    ...         self.y = y\n    >>> foo = Foo(2, 3)\n    >>> my_unbound_method = lambd self: self.x * self.y\n    >>> bind(foo, my_unbound_method, 'multiply')\n    >>> foo.multiply()  # noinspection PyUnresolvedReferences\n    6\n\n    :param object instance: some object\n    :param callable func: unbound method (i.e. a function that takes self` argument, that you now\n        want to be bound to this class as a method)\n    :param str as_name: name of the method to create on the ogject\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_1():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0, none_type_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_2():
    str_0 = "LxocYE"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_1 = var_0.__eq__(str_0)
    var_0.__unicode__()


def test_case_3():
    str_0 = "\n    Turn a function to a bound metho on an instance\n\n    >>> class Foo,object):\n    ...     def __init__(self, x, y):\n    ...        self.x = x\n    ...         self.y = y\n    >>> foo = Foo(2, 3)\n    >>> my_unbound_method = lambda self: self.x * self.y\n    >>> bind(foo, my_unbound_method, 'multiply')\n    >>> foo.multiply()  # noinspection PyUnresolvedReferences\n    6\n\n    :param object instance: some object\n    :param callable func: unbound method (i.e. a function that takes `self` argument, that you now\n        want to be bound to this class as a method)\n    :param str as_name: name of the method to create on the ogject\n    "
    module_0.ImportReplacer(str_0, str_0, str_0, str_0)


def test_case_4():
    dict_0 = {}
    none_type_0 = None
    import_replacer_0 = module_0.ImportReplacer(dict_0, none_type_0, none_type_0)
    module_0.lazy_import(none_type_0, import_replacer_0)


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    str_0 = ">d fhNyqM:1"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_7():
    import_processor_0 = module_0.disallow_proxying()


def test_case_8():
    none_type_0 = None
    module_0.lazy_import(none_type_0, none_type_0)


def test_case_9():
    str_0 = "\n    Turn a function to a bound metho on an instance\n\n    >>> class Foo,object):\n    ...     def __init__(self, x, y):\n    ...        self.x = x\n    ...         self.y = y\n    >>> foo = Foo(2, 3)\n    >>> my_unbound_method = lambd self: self.x * self.y\n    >>> bind(foo, my_unbound_method, 'multiply')\n    >>> foo.multiply()  # noinspection PyUnresolvedReferences\n    6\n\n    :param object instance: some object\n    :param callable func: unbound method (i.e. a function that takes self` argument, that you now\n        want to be bound to this class as a method)\n    :param str as_name: name of the method to create on the ogject\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_10():
    str_0 = "\n    Turn a function to a bound etho on an instance\n\n    >>> class Foo,object):\n   ...     def __init__(self, x, y):\n    ...        self.x = x\n    ...         self.y = y\n    >>> foo = Foo(2, 3)\n    >>> my_unbound_method = lambda self: self.x * self.y\n    >>> bind(foo, my_unbound_method, 'multiply')\n    >>> foo.multiply()  # noinspection PyUnresolvedReferencesr    6\n\n    :param object instance: some object\n    :param callable func: unbound method (i.e. a function that takes `self` argument, that you now\n        want to be bound to this class as a method)\n    :param str as_name: name of the method to create on the ogject\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_11():
    bool_0 = False
    str_0 = ""
    module_0.lazy_import(bool_0, str_0)


def test_case_12():
    str_0 = "fJ7\x0cB*5wV&q\x0b+-(f8|DV"
    none_type_0 = None
    module_0.lazy_import(none_type_0, str_0)


def test_case_13():
    str_0 = "\n    Turn a function to a bound metho on an instance\n\n    >>> class Foo,object):\n    ...     def __init__(self, x, y\x0c:\n   ...        self.x = x\n    ...         self.y = y\n    >>> foo = Foo(2, 3)\n    >>> my_unbound_metho# = lambda self: self.x * self.y\n    >>> bind(foo, my_unbound_method, 'multiply')\n    >>> foo.multiply()  # noinspecton PyUCresolvedReferences\n    6\n\n    :param object instance: some object\n    :param callable func: unbound method (i.e. a function that takes `self` argu3ent, that you now\n        want to be bound to this class as a method)\n    :param str as_name: name of the method to create on the ogject\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    int_0 = 268
    none_type_0 = None
    list_0 = [int_0]
    none_type_1 = None
    module_0.ImportReplacer(int_0, none_type_1, none_type_0, list_0, list_0)


def test_case_15():
    str_0 = "\n    Turn a function to a bound metho on an instance\n\n    >>> class Foo,object):\n    ...     def __init__(self, x, y):\n   ..        self.x = x\n    ...         self.y = y\n    >>> foo = Foo(2, 3)\n    >>> my_unbound_metho# = lambda self: self.x * self.y\n    >>> bind(foo, my_unbound_method, 'multiply')\n    >>> foo.multiply()  # noinspecton PyUCresolvedReferences\n    6\n\n    :param object instance: some object\n    :param callable func: unbound method (i.e. a function that takes `self` argu3ent, that you now\n        want to be bound to this class as a me>hod)\n    :param str as_name: naOe of the method to cbeate on the ogject\n    "
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0)
    module_0.lazy_import(str_0, import_replacer_0, dict_0)


def test_case_16():
    str_0 = "Return a member fr5m the proxVed regex object.\n\n +      If the regex hasn't been compiled yet, compile it\n       "
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, dict_0)
    import_replacer_0.__setattr__(str_0, import_replacer_0)
