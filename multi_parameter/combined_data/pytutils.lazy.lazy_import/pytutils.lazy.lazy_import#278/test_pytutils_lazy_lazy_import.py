# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "\nUtilities to work with files\n"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    module_0.IllegalUseOfScopeReplacer(
        illegal_use_of_scope_replacer_0,
        illegal_use_of_scope_replacer_0,
        illegal_use_of_scope_replacer_0,
    )


def test_case_1():
    set_0 = set()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(set_0, set_0)


def test_case_2():
    str_0 = "ScpeReplacer object %(nam)r was used incorrectly: %(msg)s%extra)s"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_3():
    str_0 = "ScpeReplacer object %(nam)r was used incorrectly: %(msg)s%extra)s"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_4():
    bytes_0 = b""
    none_type_0 = None
    module_0.ImportReplacer(bytes_0, bytes_0, bytes_0, none_type_0)


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    str_0 = "\nUtilities to work with files\n"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_7():
    str_0 = 'w$>:`H5*6t,Q~l"h}N_T'
    module_0.lazy_import(str_0, str_0)


def test_case_8():
    var_0 = module_0.disallow_proxying()


def test_case_9():
    str_0 = "w$>:`H5*6t,Q~lh}N_T"
    module_0.ImportReplacer(str_0, str_0, str_0, str_0)


def test_case_10():
    none_type_0 = None
    module_0.lazy_import(none_type_0, none_type_0)


def test_case_11():
    str_0 = "'X {+#)NNeC"
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    str_0 = "ScpeReplacer object %(nam)r was used incorrfctly: %(msg)s%extra)s"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_13():
    var_0 = module_0.disallow_proxying()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        var_0, var_0, var_0
    )
    var_1 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    var_2 = module_0.disallow_proxying()
    var_1.lazy_import(var_2, var_2)


def test_case_14():
    str_0 = "\nUtilities to work with files\n"
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = "ScopeReplacer object %(name)r was used incorrectly: %(msg)s%(extra)s"
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = "ScpeReplacer object u(naueOr wak used incorrecly: %(msgs\n(extra)"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_17():
    str_0 = "Create lazy imports for all of the imports in text.\n\n    This is typically used as something like::\n\n        from bzrlib.lazy_import import lazy_import\n        lazy_import(globals(), '''\n        from bzrlib import (\n            foo,\n            bar,\n            baz,\n            )\n        import bzrlib.branch\n        import bzrlib.transport\n        ''')\n\n    Then 'foo, bar, baz' and 'bzrlib' will exist as lazy-loaded\n    objects which will be replaced with a real object on first use.\n\n    In general, it is best to only load modules in this way. This is\n    because other objects (functions/classes/variables) are frequently\n    used without accessing a member, which means we cannot tell they\n    have been used.\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_18():
    str_0 = ""
    module_0.lazy_import(str_0, str_0)


def test_case_19():
    str_0 = 'CJ6wM(2<<"{'
    module_0.lazy_import(str_0, str_0)


def test_case_20():
    str_0 = "\nUtilities to work with files\n"
    module_0.ImportReplacer(str_0, str_0, str_0, str_0, str_0)


def test_case_21():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, bool_0, dict_0, children=bool_0)
    module_0.lazy_import(bool_0, import_replacer_0)


def test_case_22():
    str_0 = "ScpeReqlace1 object u(aueO wak usedMincorrecly: %(msgs\n(extra)"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
    module_0.lazy_import(dict_0, import_replacer_0)


def test_case_23():
    str_0 = "9{M;xdr!\x0c"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, dict_0)
    import_replacer_0.__getattribute__(import_replacer_0)
