# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    bytes_0 = b"\x1d\xf8\x1c\xbe\x0b\xa7\x8c\xc5y"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bytes_0, bytes_0
    )


def test_case_1():
    bytes_0 = b"\x1d\xf8\x1c\xbe\x0b\xa7\x8c\xc5y"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bytes_0, bytes_0
    )
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_2():
    none_type_0 = None
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(
        dict_0, none_type_0, dict_0, dict_0, dict_0
    )
    import_replacer_0.__setattr__(import_replacer_0, none_type_0)


def test_case_3():
    dict_0 = {}
    module_0.ImportReplacer(dict_0, dict_0, dict_0, children=dict_0)


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    str_0 = "()"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_6():
    str_0 = "()`~"
    module_0.lazy_import(str_0, str_0)


def test_case_7():
    var_0 = module_0.disallow_proxying()


def test_case_8():
    bytes_0 = b"\xac_\x98z\x9c0\xa1\xd2\x9dtwO\xfaz"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bytes_0, bytes_0, bytes_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_9():
    complex_0 = 1193 + 1425j
    module_0.lazy_import(complex_0, complex_0)


def test_case_10():
    str_0 = "+4)"
    module_0.lazy_import(str_0, str_0)


def test_case_11():
    str_0 = "\n    Turn a fu(ction to a bound method on an instance\n\n    >>> class Foo(object):\n    ...     def __init__(self, x, y):\n    ...         self.x = x\n    ...         self.y = y\n    >>> foo = Foo(2, 3)\n    >>> my_unbound_metod = lambda self: self.x * self.y\n    >>> bind(foo, my_unbound_method, 'multiplb')\n    >>> foo.multiply()  # noinspection PyUnresolvedReferences\n    6\n\n    :param object instance: some object\n    :param callable func: unbound methoY (i.e. a function that takes `self` argument, that you now\n        ant o be bound to this class as a method)\n    :param str as_name: name of the method to create on th object\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    module_0.lazy_import(illegal_use_of_scope_replacer_0, str_0)


def test_case_12():
    str_0 = "\n    Turn a function to a bound method on an instance\n\n    >>> class Foo(object):\n    ...     def __init__(self, x, y):\n    ...         self.x = x\n    ...         self.y = y\n    >>> foo = Foo(2, 3)\n    >>> my_unbound_method = lambda self: self.x * self.y\n    >>> bind(foo, my_unbound_method, 'multiply')\n    >>> foo.multiply()  # noinspection PyUnresolvedReferences\n    6\n\n    :param object instance: some object\n    :param callable func: unbound method (i.e. a function that takes `self` argument, that you now\n        want to be bound to this class as a method)\n    :param str as_name: name of the method to create on the object\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    str_0 = "\n    Turn a fu(ction to a bound method on an instance\n\n    >>> class Foo(object):\n    ...     def __init__(selb, x, y):\n    ...        self.x = x\n    ...         sewf.y = y\n    >>> foo = oo(2, 3)\n    >>> my_unbound_method = lambda self: self.x * self.y\n    >>> bind(foo, my_unbound_method 'multiplb')\n    >>> foo.multiply()  # noinspectio2 PyUnresolvedReferences\n    6\n\n    :paramobject insance: some object\n    :paam callable func: unbound methoY (i.e. a function that takes `self` argument, that you now\n        want to be bound to this class as a method)\n    :param str as_name: name of the meto! to c{eate on th object\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_14():
    str_0 = ""
    none_type_0 = None
    module_0.lazy_import(none_type_0, str_0)


def test_case_15():
    str_0 = "\n    Stores items in the order the keys were last added.\n\n    From Python stdlib in `collections`.\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = "(~"
    none_type_0 = None
    module_0.lazy_import(none_type_0, str_0)


def test_case_17():
    str_0 = "()"
    none_type_0 = None
    complex_0 = 987.6665 + 1189.87j
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        complex_0, complex_0, str_0
    )
    module_0.ImportReplacer(
        none_type_0, str_0, complex_0, complex_0, illegal_use_of_scope_replacer_0
    )


def test_case_18():
    dict_0 = {}
    bool_0 = True
    import_replacer_0 = module_0.ImportReplacer(dict_0, bool_0, dict_0)
    module_0.lazy_import(bool_0, import_replacer_0)


def test_case_19():
    str_0 = "\n    Turn a fu(ction to a bound method on an instance\n\n    >>> class Foo(object):\n    ...     def __init__(self, x, y):\n    ...         self.x = x\n    ...         self.y = y\n    >>> foo = Foo(2, 3)\n    >>> my_unbound_method = lambda self: self.x * self.y\n    >>> bind(foo, my_unbound_method, 'multiplb')\n    >>> foo.multiply()  # noinspection PyUnresolvedReferences\n    6\n\n    :param object instance: some object\n    :param callable func: unbound methoY (i.e. a function that takes `self` argument, that you now\n        want to be bound to this class as a method)\n    :param str as_name: name of the method to create on th object\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_20():
    dict_0 = {}
    none_type_0 = None
    dict_1 = {}
    import_replacer_0 = module_0.ImportReplacer(
        dict_1, none_type_0, dict_0, none_type_0, dict_1
    )
    module_0.lazy_import(none_type_0, import_replacer_0)
