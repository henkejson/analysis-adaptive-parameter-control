# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0
import builtins as module_1


def test_case_0():
    int_0 = -2
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        int_0, none_type_0
    )


def test_case_1():
    str_0 = "?[uVS?MZ2KvynE'\""
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_2():
    str_0 = "l"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_3():
    bool_0 = True
    none_type_0 = None
    list_0 = [bool_0, none_type_0, none_type_0, none_type_0]
    module_0.ImportReplacer(none_type_0, none_type_0, bool_0, list_0)


def test_case_4():
    int_0 = 219
    module_0.ImportReplacer(int_0, int_0, int_0)


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    str_0 = "?suSMZ2K{ynE'"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_7():
    str_0 = "?sS8MZ2K{yn'\""
    module_0.lazy_import(str_0, str_0)


def test_case_8():
    var_0 = module_0.disallow_proxying()


def test_case_9():
    str_0 = "\n    Set arbitrary node on a tree-like mapping structure, allowing for : notation to signify dimension.\n\n    Arguments:\n        mapping collections.Mapping: Mapping to fetch from\n        key str|unicode: Key to set, allowing for : notation\n        value str|unicode: Value to set `key` to\n        parent bool: If True, return parent node. Defaults to False.\n\n    Returns:\n        object: Parent node.\n\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_10():
    str_0 = "F()f"
    module_0.lazy_import(str_0, str_0)


def test_case_11():
    str_0 = "?sS8M2K{n'\""
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_12():
    str_0 = "@=>#$OS.PqX|\x0bo"
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    bool_0 = True
    bytes_0 = b"\xa10\xc5!\xdd\x00\xef\xbfF\x7f\xf8\x89\x88\xd4\xf52"
    module_0.ImportReplacer(bool_0, bool_0, bool_0, bytes_0, bool_0)


def test_case_14():
    bool_0 = True
    var_0 = module_0.disallow_proxying()
    str_0 = 'a>0PY\n\t($WJSu;>"IQ8;'
    module_0.lazy_import(bool_0, str_0, bool_0)


def test_case_15():
    str_0 = "\n    Parses env file content.\n\n    From honcho.\n\n    >>> lines = ['TEST=${HOME}/yeee', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../yeee'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    bool_0 = False
    var_0 = module_0.disallow_proxying()
    str_0 = "\n"
    module_0.lazy_import(bool_0, str_0, bool_0)


def test_case_17():
    str_0 = "Wwp5P"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_18():
    str_0 = "\n    Parses env file content.\n\n    From honcho.\n\n    >>> lines = ['TEST=${HOME}/yeee', 'THISIS=~a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../yeee',\n             ('THISIS', '.../a/test'),\n            ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_19():
    dict_0 = {}
    exception_0 = module_1.Exception(**dict_0)
    scope_replacer_0 = module_0.ScopeReplacer(dict_0, dict_0, exception_0)
    module_0.lazy_import(dict_0, scope_replacer_0)


def test_case_20():
    str_0 = "Object alredy rZplaced,  id you assign }t toanother variable?"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, children=dict_0)
    import_replacer_0.__call__()
