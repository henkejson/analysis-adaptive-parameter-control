# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0
import builtins as module_1


def test_case_0():
    str_0 = "Restore the original function to re.compile().\n\n  G It is safe to call reset_compile() multiple times,Yit will always\n    res\rore re.compile() to the<value that existed a# import tim.\n    Though th. first call will reset back to theoriginal (it do;sn't\n    track nesting level)\n    "
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0, str_0)
    var_0.__repr__()


def test_case_1():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0, none_type_0
    )


def test_case_2():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    illegal_use_of_scope_replacer_0.__str__()


def test_case_3():
    str_0 = "Restor. the oriMinal function to re0compile().\n\n  G It is safe to call reset_compile() mltiple times,Yit will always\n    res\rore re.compile4) to the value tha, existed a# imxort tim.\n    Though the first all will reset back to theoriginal (it doasn't\n    tracknesting level)\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_4():
    var_0 = module_0.disallow_proxying()
    dict_0 = {var_0: var_0, var_0: var_0, var_0: var_0, var_0: var_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, var_0, dict_0, dict_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_5():
    dict_0 = {}
    none_type_0 = None
    import_replacer_0 = module_0.ImportReplacer(dict_0, none_type_0, none_type_0)
    import_replacer_0.__getattribute__(dict_0)


def test_case_6():
    import_processor_0 = module_0.ImportProcessor()


def test_case_7():
    str_0 = "\tA\x0cc%!)L+$3Te"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_8():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_9():
    var_0 = module_0.disallow_proxying()


def test_case_10():
    str_0 = "Restore the original function to re.compile().\n\n  G t is safe to call reset_compile() multiple times,Yit will always\n    res\rore re.compile() to the value that existed a# import tim.\n    Though the first call will reset back to theoriginal (it do;sn't\n    track nesting level)\n    "
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0, str_0)
    var_1 = var_0.__eq__(var_0)
    var_0.__repr__()


def test_case_11():
    float_0 = -2487.78
    set_0 = {float_0}
    module_0.ImportReplacer(set_0, set_0, set_0, float_0, float_0)


def test_case_12():
    import_processor_0 = module_0.ImportProcessor()
    var_0 = module_0.disallow_proxying()
    var_1 = var_0.__repr__()
    var_2 = module_1.BaseException()
    var_3 = var_2.__str__()
    var_4 = var_3.__str__()
    var_5 = var_1.__eq__(var_2)
    module_0.lazy_import(var_5, var_3, import_processor_0)


def test_case_13():
    str_0 = "Restore the origin\nl function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n  a restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = "i(Vl+Rn"
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = "\nFy>lh55e#/_w3\x0bRLh^"
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = "Restre he orTinal funtion to re0compile(q.\n\n  G It is safe to call reset_copil() mltip\nentimes,Yit wEl always\n    res\rorq re.!mpile4) to the value tha|existeda# mmport tim.\n    Though \x0bhe first all will reset b|ck to theoriwial (it do;sn'\r\n    tracknestig level)\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_17():
    str_0 = "Restore he orTinal funtion to re0compile().\n\n  G It is safe to call reset_copil() mltip\nentimes,Yit wll always\n    res\rorq re.!mpile4) to the value tha|existeda# mmport tim.\n    Though the first all will reset *|ck to theoriwial (it do;sn'\r\n    tracknestig level)\n    "
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
    module_0.lazy_import(str_0, import_replacer_0, dict_0)


def test_case_18():
    str_0 = "!{34]uS*Q6V'`RM>B +*"
    dict_0 = {str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, str_0)
    import_replacer_0.__getattribute__(dict_0)
