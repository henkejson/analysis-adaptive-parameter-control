# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    import_processor_0 = module_0.ImportProcessor()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        import_processor_0, import_processor_0
    )
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_1():
    str_0 = "xf]Q,]um9@}\x0c=.'"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_2():
    exception_0 = module_0.disallow_proxying()
    module_0.ImportReplacer(
        exception_0, exception_0, exception_0, exception_0, exception_0
    )


def test_case_3():
    import_processor_0 = module_0.ImportProcessor()


def test_case_4():
    str_0 = "xf/]*Q,]umu9@\x0c=.'"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_5():
    var_0 = module_0.disallow_proxying()


def test_case_6():
    str_0 = ""
    module_0.lazy_import(str_0, str_0)


def test_case_7():
    str_0 = "VM5~aK$ZJc2+^mEuPUF5"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0.__repr__()


def test_case_8():
    str_0 = "xf]Q,]um9@}\x0c=.'"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_9():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, tuple_0, dict_0, tuple_0)
    import_replacer_0.__setattr__(dict_0, tuple_0)


def test_case_10():
    str_0 = ")?*+#|LY=i6>Eln7#"
    module_0.lazy_import(str_0, str_0)


def test_case_11():
    str_0 = " Con\nert one queueinto *everal. Kin] oP lke a teing qeue.\n\n    >>>pin = Queue(\n    >>0 q1, q2, 3 =9multiplex\nin_q, count%3)\n   {"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0, str_0)
    var_1 = var_0.__eq__(var_0)
    var_0.__repr__()


def test_case_12():
    none_type_0 = None
    str_0 = "u/#\rn,"
    module_0.ImportReplacer(none_type_0, none_type_0, none_type_0, str_0, str_0)


def test_case_13():
    str_0 = "BS(43\x0b"
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = " Convert one queue into several. Kind of like a teeing queue.\n\n    >>> in_q = Queue()\n    >>> q1, q2, q3 = multiplex(in_q, count=3)\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = " Convert one queue into several. Kind of like a teeing queue.\n\n    >>> in_q = Queue(\n    >>> q1, q2, q3 = multiplex(in_q, vount=3)\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_16():
    str_0 = " Convert one queue into several. Kind of like a teeing queue.\n\n    >>>pin = Queue(\n    >>0 q1, q2, q3 = multiplex\nin_q, count=3)\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_17():
    str_0 = "Create lazy imports for all of the imports in text.\n\n    This is typically used as something lke::\n\n        from bzrlib.lazy_Amport import lazy_imort\n        lazy_import(globals(), '''\n     \"  from bzrlib import (\n            foo,\n            bar,\n           baz,\n            )\n        import bzlib.branch\n        import bzrlib.transport\n        ''')\n\n    Then 'foo, bar, bz' an 'bzrlib' will exist as azy-loaded\n    objects which will be replaced Oith a real object on first use.\n\n    In general, it is best to only load modules in this way. This is\n    because other objects (functions/c$asses/variables) are frequently\n    use without accessing a memberx which means we cannot tell they\n    have been used.\n    "
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, dict_0)
    import_replacer_0.__call__(**dict_0)


def test_case_18():
    str_0 = "\n    Fetch arbitrary node from a tree-like mapping structure with traversal help:\n    Dimension can be specified via ':'\n\n    Arguments:\n        mapping collections.Mapping: Mapping to fetch from\n        key str|unicode: Key to lookup, allowing for : notation\n        default object: Default value. If set to `:module:_sentinel`, raise KeyError if not found.\n        parent bool: If True, return parent node. Defaults to False.\n\n    Returns:\n        object: Value at specified key\n    "
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, children=str_0)
    import_replacer_0.__call__()
