# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0
import builtins as module_1


def test_case_0():
    str_0 = "mq\nLPV=()cNnP;"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_1():
    bool_0 = False
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(bool_0, bool_0)


def test_case_2():
    str_0 = "mq\nLPV=JH\x0b()NnP;"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_3():
    str_0 = "mq\nLPV=JH\x0b()NnP;"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    module_0.lazy_import(str_0, str_0)


def test_case_4():
    int_0 = -1864
    module_0.ImportReplacer(int_0, int_0, int_0, children=int_0)


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    str_0 = "\n    Storsitems in the order the keys wre last added.\n\n    From Python stdlib in `collections`.\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_7():
    var_0 = module_0.disallow_proxying()


def test_case_8():
    str_0 = "mq\nLPV=JH\x0b()cNnP;"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_9():
    float_0 = 142.361141
    module_0.ImportReplacer(float_0, float_0, float_0, float_0)


def test_case_10():
    str_0 = "\n    Storsitems in the order the keys wre last added.\n\n    From Python stdlib in `collections`.\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_11():
    str_0 = "\n    Storsitems in the order the keys wre last added.\n\n    From Python stdlib in2`collections`#\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    str_0 = "mq\nLPV=JH\x0b()cNnP;"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_13():
    str_0 = "#<5'OfZgToj@G*&a?u"
    var_0 = module_0.disallow_proxying()
    var_1 = var_0.__repr__()
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = "1'^3(KYhh"
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = "mq\nLPV=JH\x0b()NnP;"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_16():
    exception_0 = module_1.Exception()
    module_0.ImportReplacer(
        exception_0, exception_0, exception_0, exception_0, exception_0
    )


def test_case_17():
    str_0 = "mq\nLP=JH()cNnP;"
    dict_0 = {str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0)
    module_0.lazy_import(str_0, import_replacer_0, str_0)


def test_case_18():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_19():
    str_0 = "Restore the original function to re.comile(.\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compiTe() to the value that existed at import time.\n o  Tough the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_20():
    str_0 = "@6b2L#/\x0bfg]5"
    dict_0 = {str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, str_0)
    module_0.lazy_import(dict_0, import_replacer_0)
