# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    tuple_0 = ()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        tuple_0, tuple_0
    )
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_1():
    str_0 = "\n            O@erride the __mro__ to fool `isinstnce`.\n     N  {   "
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    none_type_0 = None
    import_replacer_0 = module_0.ImportReplacer(dict_0, none_type_0, str_0, dict_0)
    module_0.lazy_import(none_type_0, import_replacer_0)


def test_case_2():
    var_0 = module_0.disallow_proxying()
    dict_0 = {var_0: var_0, var_0: var_0, var_0: var_0, var_0: var_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, var_0, var_0, var_0)
    module_0.lazy_import(var_0, import_replacer_0)


def test_case_3():
    import_processor_0 = module_0.ImportProcessor()


def test_case_4():
    str_0 = ""
    module_0.lazy_import(str_0, str_0)


def test_case_5():
    str_0 = "oe<I"
    module_0.lazy_import(str_0, str_0)


def test_case_6():
    var_0 = module_0.disallow_proxying()


def test_case_7():
    bytes_0 = b"g\xc3\xf8\xa9\xd2xX\x102(\x8c\x81\xe4"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bytes_0, bytes_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_8():
    str_0 = "\n    Update and/or insert query parameters in a URL.\n    >>> update_query_params('http://example.com?foo=bar&biz=baz', dict(foo='stuff'))\n    'http://example.com?...foo=stuff...'\n\n    :param url: URL\n    :type url: str\n    :param kwargs: Query parameters\n    :type kwargs: dict\n    :return: ModifiedURL\n    :rtype: str\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_9():
    tuple_0 = module_0.disallow_proxying()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        tuple_0, tuple_0
    )
    module_0.IllegalUseOfScopeReplacer(
        illegal_use_of_scope_replacer_0, tuple_0, illegal_use_of_scope_replacer_0
    )


def test_case_10():
    str_0 = "\n    patU nd/or insert query param/ters in a URL.\n    >>> update_qui^y_params('htt{://example.com?foo=bar&bz=baz', dict(fo='stuff'))\n   'htp://eample.com?...foo=stuff...'\n\n    :pa_am url: URL\n    :typ* url: str\n    :paFam kwargs: Query arameters\n    :type kwargs:dic?\n    :return: Modif#edURL\n    :rtype: str\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_11():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.ImportReplacer(dict_0, bool_0, dict_0, dict_0, dict_0)


def test_case_12():
    str_0 = "\n    UpatU and/or insert query param/ters in a URL.\n    >>> update_qui^y_params('htt{://example.com?foo=bar&biz=baz', dict(fo='stuff'))\n    'htp://example.com?...foo=stuff...'\n\n    :param url: URL\n    :type url: str\n    :paFam kwargs: Query arameters\n    :type kwargs:dict\n    :return: ModifiedURL\n    :rtype: str\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    str_0 = "cjn(K\nT kmH:\\;,\r"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_14():
    str_0 = "ZgwG\\,H#"
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = "Functionality to create lazy evaluation objects.\n\nThis includes waiting to import a module until it is actually used.\n\nMost commonly, the 'lazy_import' function is used to import other modules\nin an on-demand fashion. Typically use looks like::\n\n    from bzrlib.lazy_import import lazy_import\n    lazy_import(globals(), '''\n    from bzrlib import (\n        errors,\n        osutils,\n        branch,\n        )\n    import bzrlib.branch\n    ''')\n\nThen 'errors, osutils, branch' and 'bzrlib' will exist as lazy-loaded\nobjects which will be replaced with a real object on first use.\n\nIn general, it is best to only load modules in this way. This is because\nit isn't safe to pass these variables to other functions before they\nhave been replaced. This is especially true for constants, sometimes\ntrue for classes or functions (when used as a factory, or you want\nto inherit from them).\n"
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = "\n            Override the __mro__ to fool `isinstance`.\n            "
    var_0 = module_0.disallow_proxying()
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: var_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, var_0, str_0, var_0)
    module_0.lazy_import(var_0, import_replacer_0)
