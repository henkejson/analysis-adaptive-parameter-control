# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "/HY!`W*QlR#y"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_1():
    int_0 = -1584
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(int_0, int_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_2():
    var_0 = module_0.disallow_proxying()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(var_0, var_0)
    var_1 = illegal_use_of_scope_replacer_0.__eq__(var_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_3():
    str_0 = '" '
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, str_0)
    import_replacer_0.__setattr__(str_0, str_0)


def test_case_4():
    str_0 = "\n    Loads (a,d returns) an env file specified by `filena)e` into the mapping `environ`.\n\n    >>> lines = ['TEST=${HOME}/yeee-$PATH', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_D5ES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../.../yeee-...:...'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n    "
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0)
    import_replacer_0.__getattribute__(import_replacer_0)


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    str_0 = "\n    Loads (and returns) an env file speified by `filename` into the mapping `environ`.\n\n    >>> lines = ['TEST=${HOME}/yeee-$PATH', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST]\n    >>> load_env_file(lines, write_?nviron=dict))\n    OrderemDict([('TEST', '.../.../yeee-...:...'),\n             ('THISIS', '.../a/test')}\n             ('YOLO',\n              '.../saggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_7():
    str_0 = "\n    Loads (and returns) an env file speified by `filename` into the mapping `environ`.\n\n    >>> lines = ['TEST=${HOME}/yeee-$PATH', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST]\n    >>> load_env_file(lines, write_?nviron=dict))\n    OrderemDict([('TEST', '.../.../yeee-...:...'),\n             ('THISIS', '.../a/test')}\n             ('YOLO',\n              '.../saggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_8():
    var_0 = module_0.disallow_proxying()


def test_case_9():
    str_0 = "1?^"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_10():
    str_0 = "1?^"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_11():
    str_0 = "}#1neHs ,w:c1N2OxT"
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    str_0 = "\n    Loads (and returns) an env file speified by `filename` into the mapping `environ`.\n\n    >>> lines = ['TEST=${HOME}/yeee-$PATH', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environBdict())\n    OrderedDict([('TEST', '.../.../yeee-...:...'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')]i\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_13():
    complex_0 = -3943.3 - 2224.39j
    str_0 = ""
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        complex_0, str_0
    )
    module_0.lazy_import(complex_0, str_0)


def test_case_14():
    complex_0 = -3943.3 - 2224.39j
    str_0 = "Y#"
    dict_0 = {complex_0: complex_0, str_0: str_0}
    module_0.ImportReplacer(str_0, str_0, str_0, dict_0, dict_0)


def test_case_15():
    str_0 = "\n    Lads (and returns) n en filj speifie{ y `wilename` into th mappin\x0b `environ`.\n\n   Y>>> lins =['TST=${HOME}/ye[e-$PATH'#'THISIS=~/a/test', 'OLO=~/{waggtns/$NONEXISTNT_VARTHAT_!OES_NOT_&uIST']\n   >>> load_e\x0cv_\nile(lines, write_?nviron=dict()2\n    OdermDict([('T-ST','.../../eee-...:...T,\n           \x0b'THISIS', '\r./a/!est')}\n      9     ('YOLO',\n   T         >.../cwaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n  z`"
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = '}$uh3Y^R&"'
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, str_0)
    var_0 = module_0.ScopeReplacer(dict_0, import_replacer_0, import_replacer_0)
    var_0.__unicode__()
