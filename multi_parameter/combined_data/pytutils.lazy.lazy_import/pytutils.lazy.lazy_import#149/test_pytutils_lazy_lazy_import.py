# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "b~"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_1():
    str_0 = "b~"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_2():
    str_0 = "s,Ue\n?\\"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, dict_0)
    import_replacer_0.__getattribute__(str_0)


def test_case_3():
    set_0 = set()
    module_0.ImportReplacer(set_0, set_0, set_0)


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    str_0 = "b~"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_6():
    str_0 = "b~"
    module_0.lazy_import(str_0, str_0)


def test_case_7():
    var_0 = module_0.disallow_proxying()


def test_case_8():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_9():
    var_0 = module_0.disallow_proxying()
    module_0.lazy_import(var_0, var_0)


def test_case_10():
    str_0 = "\rk,/(G\n4_"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0, str_0)
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_11():
    str_0 = "t=k,/(G\n4y}_"
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    str_0 = ""
    int_0 = 1024
    module_0.lazy_import(int_0, str_0)


def test_case_13():
    str_0 = "\n    Efficiently advance an iterator n-steps ahead. If n is none, consume entirely.\n    Consumes at C level (and therefore speed) in cpython.\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = "7P \"6#t'wc{BChi\rV"
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    set_0 = set()
    int_0 = -2582
    none_type_0 = None
    bytes_0 = b"9\xe6"
    module_0.ImportReplacer(none_type_0, set_0, none_type_0, bytes_0, int_0)


def test_case_16():
    str_0 = "b~"
    int_0 = 1024
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        int_0, str_0, int_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_17():
    var_0 = module_0.disallow_proxying()
    dict_0 = {var_0: var_0, var_0: var_0, var_0: var_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, var_0, var_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_18():
    str_0 = "Functionality to create lazy evaluation objects.\n\nThis includes waiting to import a module until it is actually used.\n\nMost commonly, the 'lazy_import' function is used to import other modules\nin an on-demand fashion. Typically use looks like::\n\n    from bzrlib.lazy_import import lazy_import\n    lazy_import(globals(), '''\n    from bzrlib import (\n        errors,\n        osutils,\n        branch,\n        )\n    import bzrlib.branch\n    ''')\n\nThen 'errors, osutils, branch' and 'bzrlib' will exist as lazy-loaded\nobjects which will be replaced with a real object on first use.\n\nIn general, it is best to only load modules in this way. This is because\nit isn't safe to pass these variables to other functions before they\nhave been replaced. This is especially true for constants, sometimes\ntrue for classes or functions (when used as a factory, or you want\nto inherit from them).\n"
    module_0.lazy_import(str_0, str_0)


def test_case_19():
    str_0 = "s,Ue\n?\\"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_20():
    str_0 = "\x0b=@rEH3Ay[E-[kXCR/\n"
    dict_0 = {
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
    }
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, dict_0)
    none_type_0 = None
    scope_replacer_0 = module_0.ScopeReplacer(dict_0, import_replacer_0, none_type_0)
    scope_replacer_0.__getattribute__(str_0)
