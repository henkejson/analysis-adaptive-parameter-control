# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "\n    Read [expanded] `filename` and yield each (line | chunk).\n\n    :param str filename: File path\n    :param str mode: Use this mbde to open `filename`, ala `r` for text (default), `rb` for binary, etc.\n    :param int iter_by: Iterate by this many bytes at a time. Default is by line.\n    :param bool allow_stdin: If Truthy and filename is `-`, read from `sys.stdin`.\n    :param bool expanduser: If Truthy, expand `~` in `filename`\n    :param bool expandvars: If Truthy, expand env vars in `filename`\n    "
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0, str_0)
    var_0.__unicode__()


def test_case_1():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_2():
    import_processor_0 = module_0.ImportProcessor()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        import_processor_0, import_processor_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(import_processor_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_3():
    dict_0 = {}
    str_0 = "\n\\(w'h!9\x0cj; "
    var_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, str_0)
    module_0.lazy_import(var_0, var_0)


def test_case_4():
    str_0 = "vB\r"
    float_0 = -2722.846
    module_0.ImportReplacer(str_0, float_0, str_0)


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    str_0 = "I/3"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_7():
    set_0 = module_0.disallow_proxying()


def test_case_8():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_9():
    str_0 = "\n    >>> log = get_logger()\n    >>> log.info('test')\n\n    >>> log = get_logger('test2')\n    >>> log.info('test2')\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_10():
    none_type_0 = None
    var_0 = module_0.IllegalUseOfScopeReplacer(none_type_0, none_type_0, none_type_0)
    bytes_0 = b"\x95\x9a\xb9>!'\xea"
    module_0.ImportReplacer(bytes_0, bytes_0, var_0, bytes_0, var_0)


def test_case_11():
    str_0 = ""
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    str_0 = 'BH"f\t(3#?d\nZL/@\n[='
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    str_0 = "Bf\t(31d\nZDL/@\n[="
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = "\n    >>> log = get_logger()\n    >>> log.info('test')\n\n    >>> log = get_logger('test2')\n    >>> log.info('test2')    "
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0)
    import_replacer_0.__setattr__(str_0, str_0)


def test_case_15():
    str_0 = "    >>> log = get_logger()\n    >>> log.info('test'\n\n    >>> log = get_logger('test2')\n    >>> log.info('test')\n    "
    module_0.lazy_import(str_0, str_0)
