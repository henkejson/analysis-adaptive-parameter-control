# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    module_0.lazy_import(str_0, str_0, illegal_use_of_scope_replacer_0)


def test_case_1():
    str_0 = "y=p}P0-"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_2():
    str_0 = "Restore the orignal function to re.compile().\n\n    It is safe to ca reset_compile() multiple times, it will alwFys\n    restore r-.compile%) to the value that existed at import time.\n    Though the first call will reset ba{k to he original (it doesn't\n    trac/nesting level)\n    "
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, str_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_3():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to ca reset_compile() multiple times, it will alwFys\n    restore r-.compile%) to the value that existed at import time.\n    Though the first call will reset ba{k to he original (it doesn't\n    trac/nesting level)\n    "
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
    module_0.lazy_import(str_0, import_replacer_0, str_0)


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    str_0 = "y=P}P@0t"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_6():
    var_0 = module_0.disallow_proxying()


def test_case_7():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting evel)\n    "
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0.__repr__()


def test_case_8():
    str_0 = "j5~X@k I4\tT=+jM.p3!"
    module_0.lazy_import(str_0, str_0)


def test_case_9():
    str_0 = "Uww\x0c.xw "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    module_0.lazy_import(var_0, str_0)


def test_case_10():
    str_0 = "+eU\\&=G|vb}\x0c#}"
    module_0.lazy_import(str_0, str_0)


def test_case_11():
    str_0 = "y=p}P0-"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_12():
    str_0 = ""
    str_1 = "=\tk;HF_6YA*W"
    module_0.lazy_import(str_1, str_0)


def test_case_13():
    str_0 = "WQYZMycuT\x0c\tze`Ys%\n"
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    bool_0 = True
    bytes_0 = b"9V\x89^\xa2\xa6\r\x8a$\xe22J\x9eZ"
    module_0.ImportReplacer(bool_0, bytes_0, bool_0, bytes_0, bytes_0)


def test_case_15():
    str_0 = "jg(\x0b"
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    trac nesting level)\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_17():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile( multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    hough the first call will reset back to the original (it doesn't\n    trac nesting level)\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_18():
    str_0 = "A lazy object that will replace itself in the ppproriate {cope.\nw    This object sits, ready to create the real object the $irst time it is\n    needed6\n    "
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
    scope_replacer_0 = module_0.ScopeReplacer(
        dict_0, import_replacer_0, import_replacer_0
    )
    scope_replacer_0.__eq__(import_replacer_0)
