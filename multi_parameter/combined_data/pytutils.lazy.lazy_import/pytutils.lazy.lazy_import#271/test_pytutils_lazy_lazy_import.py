# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    import_processor_0 = module_0.ImportProcessor()
    none_type_0 = None
    var_0 = module_0.IllegalUseOfScopeReplacer(none_type_0, none_type_0, none_type_0)


def test_case_1():
    str_0 = "vvL"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_2():
    str_0 = "vL"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_3():
    int_0 = 16
    module_0.ImportReplacer(int_0, int_0, int_0, int_0)


def test_case_4():
    bool_0 = True
    module_0.ImportReplacer(bool_0, bool_0, bool_0)


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_7():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_8():
    import_processor_0 = module_0.disallow_proxying()


def test_case_9():
    str_0 = "vvL"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_10():
    str_0 = "tx0"
    module_0.lazy_import(str_0, str_0)


def test_case_11():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting levelj\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_12():
    str_0 = "V"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0, str_0)
    var_0.__repr__()


def test_case_13():
    str_0 = "wx,M/@\x0bLW"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0, str_0)
    var_1 = var_0.__eq__(var_0)
    var_0.__call__()


def test_case_14():
    str_0 = ""
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_15():
    str_0 = "Restore the original function to re.compile().\nx    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    module_0.ImportReplacer(str_0, str_0, str_0, str_0, str_0)


def test_case_16():
    str_0 = '|TISA#mY:1\nZz,"\t\\'
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_17():
    str_0 = 'Restore the originaunction to re.compie().\n\n"   It is safe to call r=set_!ompile(* multiple times, it will alwas\n    restore re.compile() to the value that existed at import time.\n    Though the first cll will reset back to the original (it doesnt\n    track nesting level)\n    '
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_18():
    dict_0 = {}
    none_type_0 = None
    import_replacer_0 = module_0.ImportReplacer(
        dict_0, none_type_0, none_type_0, children=none_type_0
    )
    module_0.lazy_import(none_type_0, import_replacer_0)


def test_case_19():
    str_0 = ')"p\x0b+:\x0c%pJ4\r*'
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, children=str_0)
    import_replacer_0.__setattr__(import_replacer_0, str_0)


def test_case_20():
    str_0 = "\\$d07~\x0b!2"
    dict_0 = {str_0: str_0}
    none_type_0 = None
    import_replacer_0 = module_0.ImportReplacer(
        dict_0, str_0, str_0, dict_0, none_type_0
    )
    module_0.lazy_import(str_0, import_replacer_0)
