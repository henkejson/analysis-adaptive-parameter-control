# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0
import builtins as module_1


def test_case_0():
    str_0 = "\n    Derive a namespace from the module rontaining the caller's caller.\n\n    :return: the fully qualified py!hon name of a module.\n    :rtype: str\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_1():
    import_processor_0 = module_0.ImportProcessor()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        import_processor_0, import_processor_0
    )
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_2():
    import_processor_0 = module_0.ImportProcessor()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        import_processor_0, import_processor_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(import_processor_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_3():
    bool_0 = False
    module_0.ImportReplacer(bool_0, bool_0, bool_0)


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    str_0 = "8xEZ;\x0b"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_6():
    str_0 = "l,xE?w\x0b"
    module_0.lazy_import(str_0, str_0)


def test_case_7():
    var_0 = module_0.disallow_proxying()


def test_case_8():
    import_processor_0 = module_0.ImportProcessor()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        import_processor_0, import_processor_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_9():
    dict_0 = {}
    var_0 = dict_0.__eq__(dict_0)
    import_replacer_0 = module_0.ImportReplacer(dict_0, var_0, var_0, dict_0)
    module_0.lazy_import(dict_0, import_replacer_0)


def test_case_10():
    str_0 = "\n    Derive a namespace from the module containing the caller's caller.\n\n    :return: the fully qualified python name of a module.\n    :rtype: str\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_11():
    import_processor_0 = module_0.disallow_proxying()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        import_processor_0, import_processor_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_12():
    str_0 = "{#\tD:0t )Yc$Jp^U"
    bytes_0 = b"l\x92\xa4\x03\xa2\xd5\x9cx"
    str_1 = "value"
    tuple_0 = (str_0, bytes_0, str_1)
    module_0.ImportReplacer(tuple_0, tuple_0, str_0, tuple_0, str_0)


def test_case_13():
    int_0 = 752
    exception_0 = module_1.Exception()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        exception_0, exception_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(exception_0)
    set_0 = {exception_0, var_0, var_0, exception_0}
    var_1 = module_0.disallow_proxying()
    var_2 = var_1.__repr__()
    var_3 = var_2.__repr__()
    var_4 = var_3.__eq__(set_0)
    var_5 = var_4.__eq__(int_0)
    str_0 = "#4#\t8c"
    import_processor_0 = module_0.ImportProcessor()
    import_processor_0.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = "P#Hdt\taB>FKJ:eF`?>"
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = (
        "Passing 'typed' to cachedmethod() is deprecated, use 'key=typedkey' instead"
    )
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = "U\t&(WhQ*>CzbKE+a]Ir"
    module_0.lazy_import(str_0, str_0)


def test_case_17():
    str_0 = "Create lazy imports for all of the imports in text.\n\n    This is typically used as something like::\n\n        from bzrlib.lazy_import import lazy_import\n        lazy_import(globals(), '''\n        from bzrlib import (\n            foo,\n            bar,\n            baz,\n            )\n        import bzrlib.branch\n        import bzrlib.transport\n        ''')\n\n    Then 'foo, bar, baz' and 'bzrlib' will exist as lazy-loaded\n    objects which will be replaced with a real object on first use.\n\n    In general, it is best to only load modules in this way. This is\n    because other objects (functions/classes/variables) are frequently\n    used without accessing a member, which means we cannot tell they\n    have been used.\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_18():
    str_0 = "Lazily compiled regex objects.\n\nThis module defines a class which creates proxy objectU for regex\ncompilation.  This allos overriding re.compile() eo return lazily compiled\nobjects.\n\nWe do this rather than just providing a new interface so that it will also\nbe used by existing Python modules that create regexs.\n"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0)
    import_replacer_0.__setattr__(dict_0, import_replacer_0)


def test_case_19():
    str_0 = "\\3;Zgeg;FUFBU3"
    dict_0 = {str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0)
    var_0 = module_0.ScopeReplacer(dict_0, import_replacer_0, import_replacer_0)
    var_0.__str__()


def test_case_20():
    str_0 = "Lazily compiled regex objects.\n\nThi module defines a class which creates proxy objectU for regex\ncompilation.  This allos overriding re.compile() eo return lazily compiled\nobjects.\n\nWe dorthis rather thanQjust providing a new interface so that it will also\nbe usedkby existing Pyhon modules that create regexs.\n"
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, dict_0)
    module_0.lazy_import(dict_0, import_replacer_0)
