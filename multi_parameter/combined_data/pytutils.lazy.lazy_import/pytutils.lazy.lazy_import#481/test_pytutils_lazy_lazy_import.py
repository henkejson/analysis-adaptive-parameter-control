# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "MEnf(qip^#\n?H"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    module_0.lazy_import(str_0, str_0)


def test_case_1():
    str_0 = "MEnf(qip^#\n?H"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_2():
    str_0 = "\\\\(.)"
    dict_0 = {str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, dict_0)
    module_0.lazy_import(str_0, import_replacer_0)


def test_case_3():
    str_0 = "\\\\(.)"
    dict_0 = {str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0)
    import_replacer_0.__getattribute__(import_replacer_0)


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    str_0 = "MEnfA[ip^#\n?H"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_6():
    str_0 = "MEnfA[ip^#\n?H"
    module_0.lazy_import(str_0, str_0)


def test_case_7():
    str_0 = "MEnf(qip^#\n?H"
    module_0.lazy_import(str_0, str_0)


def test_case_8():
    var_0 = module_0.disallow_proxying()


def test_case_9():
    int_0 = -2218
    module_0.lazy_import(int_0, int_0)


def test_case_10():
    int_0 = 1982
    bool_0 = True
    module_0.ImportReplacer(int_0, int_0, int_0, bool_0, int_0)


def test_case_11():
    int_0 = -3988
    var_0 = module_0.IllegalUseOfScopeReplacer(int_0, int_0)
    var_1 = var_0.__eq__(int_0)
    var_1.__getattribute__(var_0)


def test_case_12():
    str_0 = "_preformatted_string"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    module_0.lazy_import(illegal_use_of_scope_replacer_0, str_0, str_0)


def test_case_13():
    illegal_use_of_scope_replacer_0 = module_0.disallow_proxying()
    str_0 = ""
    illegal_use_of_scope_replacer_1 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = "@2\n#x$*Wo1Vr#;m8"
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = "MEnf(qip^#\n?H"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_16():
    str_0 = "Lazily compiled regex objects.\n\nThis module defines a class which creates proxy objects for regex\ncompilation.  This allows overriding re.compile() to return lazily compiled\nobjects.\n\nWe do this rather than just providing a new interface so that it will also\nbe used by existing Python modules that create regexs.\n"
    module_0.lazy_import(str_0, str_0)


def test_case_17():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_18():
    str_0 = "\n    Decorator to dedupe it's output iterable automatically.\n\n    :param f: Wrapped meth\n    :param instance: wrapt provided property for decorating hydrated class instances (unused)\n    :param args: Passthrough args\n    :param kwargs: Passthrough kwargs\n    :return decorator: Decorator method that ingests iterables and dedupes them iteratively.\n    "
    dict_0 = {str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0)
    scope_replacer_0 = module_0.ScopeReplacer(
        dict_0, import_replacer_0, import_replacer_0
    )
    module_0.lazy_import(dict_0, scope_replacer_0)
