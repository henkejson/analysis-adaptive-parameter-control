# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "This converts a 'from foo import bar' string into an import map.\n\n        :param from_str: The import string to process\n        "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )


def test_case_1():
    list_0 = []
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(list_0, list_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(list_0)


def test_case_2():
    list_0 = []
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(list_0, list_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_3():
    int_0 = 276
    module_0.ImportReplacer(int_0, int_0, int_0)


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    str_0 = "_name"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_6():
    str_0 = "%s(%s)"
    module_0.lazy_import(str_0, str_0)


def test_case_7():
    var_0 = module_0.disallow_proxying()


def test_case_8():
    str_0 = "\n    >>> log = get_logger()\n    >>> log.info('test')\n\n    >>> log = get_logger('test2')\n    >>> log.info('test2')\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_9():
    str_0 = "%s(%s)"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_10():
    str_0 = "\n    Ensure string is encoded as byteslike; convert using specified parameters if we have to.\n\n    :param str|bytes|bytesarray|memoryview s: string/byteslike\n    :param str encoding: Decode using this encoding\n    :param str errors: How to handle errors\n    :return bytes|bytesarray|memoryview: Encoded string as str\n    "
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, dict_0, dict_0)
    import_replacer_0.__setattr__(dict_0, str_0)


def test_case_11():
    str_0 = "#`lVn*2L%("
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_12():
    str_0 = "%(asctime)s| %(name)s/%(processName)s[%(process)d]-%(threadName)s[%(thread)d]: %(message)s @%(funcName)s:%(lineno)d #%(levelname)s"
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    str_0 = "\n    Ensure string is encoded as byteslike; convert using specified parameters if we have to.\n\n    :param str|bytes|bytesarray|memoryvew s: string/byteslike\n    :param str encoding: Decode usingthis encoding\n    :param str errors: How to handle errors\n    :return bytes|bytesarray|memoryview: Encoded string as str\n    "
    module_0.ImportReplacer(str_0, str_0, str_0, str_0, str_0)


def test_case_14():
    str_0 = "(7q8/&f<"
    import_processor_0 = module_0.ImportProcessor()
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = "\n    >>> log = get_logger()\n  b >>> log.info('test'\n\n    >>> log = get_logger('test2')\n    >>\n log.info('\\est2')\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = "\n    >>>xlog = get_loger()\n 1 >>> log'info('test'\n\n    K>> lg = get_logger(5t\tst2')    >>\n Yg.info('\\es;vy)\n  x "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_17():
    str_0 = "\n    Ensure string is encoded as byteslike; convert using specified parameters if we have to.\n\n    :para str|bytes|bytesarray|memoryview : string/byteslike\n    :param str encoding: Decode using this encoding\n    :param str errors: How to handle errors\n    :return bytes|bytesarray|memoryview: Encoded string as str\n    "
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0)
    import_replacer_0.__getattribute__(import_replacer_0)


def test_case_18():
    str_0 = "\n    >>> log = get_loger()\n b >>> log.info('test'\n\n    K>> lg = get_logger('test2')    >>\n lg.info('\\es;2')\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_19():
    str_0 = "\n0l%NcTdL\\M"
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, dict_0, dict_0)
    scope_replacer_0 = module_0.ScopeReplacer(
        dict_0, import_replacer_0, import_replacer_0
    )
    scope_replacer_0.__getattribute__(dict_0)
