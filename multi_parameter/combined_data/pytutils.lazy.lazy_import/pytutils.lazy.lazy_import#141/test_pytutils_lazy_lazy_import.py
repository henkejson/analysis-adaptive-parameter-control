# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    bool_0 = True
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(bool_0, bool_0)


def test_case_1():
    str_0 = "{\nC!} [pfr\\(RT"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_2():
    str_0 = "{)j! [\\pf\\("
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_1 = var_0.__eq__(str_0)
    var_0.__repr__()


def test_case_3():
    var_0 = module_0.disallow_proxying()
    dict_0 = {var_0: var_0, var_0: var_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, var_0, var_0, dict_0)
    module_0.lazy_import(dict_0, import_replacer_0)


def test_case_4():
    var_0 = module_0.disallow_proxying()
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, var_0, dict_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    str_0 = "{\n)z! [\\pfr\\(RT"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_7():
    import_processor_0 = module_0.disallow_proxying()


def test_case_8():
    bool_0 = True
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bool_0, bool_0, bool_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_9():
    int_0 = 89
    module_0.lazy_import(int_0, int_0)


def test_case_10():
    str_0 = "q~M|B;V>X4~z}>6AQs"
    module_0.ImportReplacer(str_0, str_0, str_0, str_0, str_0)


def test_case_11():
    str_0 = "]a`F#lPs8p$V\r\\0u8U"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_12():
    str_0 = "{\n)z! [\\pfr\\(RT"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_1 = var_0.__eq__(var_0)
    var_0.__repr__()


def test_case_13():
    str_0 = "{\n! [\\pfr\\(RT"
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = "\n    Create a random hex string of a specific length performantly.\n\n    :param int length: length of hex string to generate\n    :return: random hex string\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = ""
    none_type_0 = None
    module_0.lazy_import(none_type_0, str_0)


def test_case_16():
    str_0 = "G(D7W\n)22;dab=P\nSpZf"
    module_0.lazy_import(str_0, str_0)


def test_case_17():
    str_0 = "\n    Loads (and returns) an env file specified by `filename` into the mapping `environ`.\n\n    >>> lines = ['TEST=${HOME}/yeee-$PATH', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../.../yeee-...:...'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_18():
    var_0 = module_0.disallow_proxying()
    var_1 = var_0.__str__()
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, var_1, dict_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_19():
    var_0 = module_0.disallow_proxying()
    var_1 = var_0.__str__()
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, var_1, var_1, dict_0)
    module_0.lazy_import(var_1, import_replacer_0)
