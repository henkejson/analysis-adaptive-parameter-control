# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0
import builtins as module_1


def test_case_0():
    bool_0 = False
    tuple_0 = module_0.disallow_proxying()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        tuple_0, bool_0
    )


def test_case_1():
    str_0 = "xU,GRtGQ\rag0K$TG\r"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_2():
    var_0 = module_0.disallow_proxying()
    var_1 = var_0.__str__()
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, var_1, var_1, var_1)
    import_replacer_0.__call__()


def test_case_3():
    var_0 = module_0.disallow_proxying()
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, var_0, var_0, var_0)
    import_replacer_0.__repr__()


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    str_0 = "xU,GtGQ\rag0K$TG\r"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_6():
    var_0 = module_0.disallow_proxying()


def test_case_7():
    exception_0 = module_1.Exception()
    str_0 = "seCJL%;u\tB)l}AP"
    bytes_0 = b"\xab\xc7\\\xde_\x08{\x15\xaa\x01\x9d\xd1\xd2\t\x9a"
    module_0.ImportReplacer(bytes_0, str_0, bytes_0, exception_0, exception_0)


def test_case_8():
    str_0 = "*1/;VlX|Vijft#al9OK"
    module_0.lazy_import(str_0, str_0)


def test_case_9():
    str_0 = "-"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    module_0.lazy_import(var_0, str_0)


def test_case_10():
    str_0 = ""
    illegal_use_of_scope_replacer_0 = module_0.disallow_proxying()
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_11():
    str_0 = "\n    Proxies access to an existing dict-like object.\n\n    >>> a = dict(whoa=True, hello=[1,2,3], why='always')\n    >>> b = ProxyMutableAttrDict(a)\n\n    Nice reprs:\n\n    >>> b\n    <ProxyMutableAttrDict {'whoa': True, 'hello': [1, 2, 3], 'why': 'always'}>\n\n    Setting works as you'd expect:\n\n    >>> b['nice'] = False\n    >>> b['whoa'] = 'yeee'\n    >>> b\n    <ProxyMutableAttrDict {'whoa': 'yeee', 'hello': [1, 2, 3], 'why': 'always', 'nice': False}>\n\n    Checking that the changes are in fact being performed on the proxied object:\n\n    >>> a\n    {'whoa': 'yeee', 'hello': [1, 2, 3], 'why': 'always', 'nice': False}\n\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    str_0 = "xU,GtGQw\ra0K$TG\r"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_13():
    str_0 = "xU,GRtGQ\rag0K$TG\r"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_14():
    str_0 = "{cls_name}({name})"
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = "\\A'(P:\n.,)'0Z"
    var_0 = module_0.ImportProcessor()
    var_1 = module_0.disallow_proxying()
    module_0.lazy_import(var_0, str_0, str_0)


def test_case_16():
    str_0 = "._,A(EmQ+{\nYxy)"
    module_0.lazy_import(str_0, str_0)


def test_case_17():
    str_0 = "\\'(.*)'XZ"
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0)
    module_0.lazy_import(dict_0, import_replacer_0)
