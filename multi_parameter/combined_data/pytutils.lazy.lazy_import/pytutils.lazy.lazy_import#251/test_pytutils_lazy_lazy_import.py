# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    bool_0 = True
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(bool_0, bool_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_1():
    none_type_0 = None
    module_0.ImportReplacer(none_type_0, none_type_0, none_type_0)


def test_case_2():
    import_processor_0 = module_0.ImportProcessor()


def test_case_3():
    str_0 = "Passing 'typed' to cachedmethod() is precaed, use 'key=tpedkey instea"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_4():
    str_0 = "PZssing 'typed' to cachedmethod() isdprecated, use 'key~tpedkey' Ostead"
    module_0.lazy_import(str_0, str_0)


def test_case_5():
    str_0 = '(3!\nanRZJ`EX5")208'
    module_0.lazy_import(str_0, str_0)


def test_case_6():
    str_0 = "+)v?(FUg^3y|"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_7():
    var_0 = module_0.disallow_proxying()


def test_case_8():
    str_0 = "S)"
    module_0.lazy_import(str_0, str_0)


def test_case_9():
    str_0 = "#o"
    module_0.lazy_import(str_0, str_0)


def test_case_10():
    str_0 = "<B\\M\x0cAuAFp#6F2j"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_11():
    str_0 = "Lazily compiled regex objects.\n\nThis module defines a class which creates proxy objects for regex\ncompilation.  This allows overriding re.compile() to return lazily compiled\nobjects.\n\nWe do this rather than just providing a new interface so that it will also\nbe used by existing Python modules that create regexs.\n"
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(none_type_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_13():
    str_0 = '(3!\nanRZJ`EX5")208'
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_14():
    bytes_0 = b""
    dict_0 = {bytes_0: bytes_0}
    import_replacer_0 = module_0.ImportReplacer(
        dict_0, bytes_0, bytes_0, dict_0, bytes_0
    )
    module_0.lazy_import(dict_0, import_replacer_0)


def test_case_15():
    str_0 = "Pssing &typed' to c>chedmethod() is precaed, use 'key=ypediey instea"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_16():
    str_0 = "J{e\x0cR#9I$mv"
    module_0.ImportReplacer(str_0, str_0, str_0, str_0, str_0)


def test_case_17():
    bytes_0 = b""
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, bytes_0, bytes_0)
    module_0.lazy_import(dict_0, import_replacer_0, bytes_0)


def test_case_18():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0, str_0)
