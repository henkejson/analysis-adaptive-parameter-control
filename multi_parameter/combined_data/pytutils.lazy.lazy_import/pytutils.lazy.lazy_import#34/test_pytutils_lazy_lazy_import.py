# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "_ng__"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    module_0.lazy_import(str_0, str_0)


def test_case_1():
    int_0 = -1806
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        int_0, int_0, int_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_2():
    str_0 = ""
    dict_0 = {
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
    }
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, str_0, str_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_3():
    float_0 = -957.08415
    none_type_0 = None
    module_0.ImportReplacer(float_0, float_0, float_0, children=none_type_0)


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    str_0 = "\n    Ensure string is decoded (eg unicode); convert using specified parameters if we have to.\n\n    :param str|bytes|bytesarray|memoryview s: string/bytes\n    :param str encoding: Decode using this encoding\n    :param str errors: How to handle errors\n    :return bytes|bytesarray|memoryview: Decoded string as bytes\n\n    :return: Encoded string\n    :rtype: bytes\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_6():
    var_0 = module_0.disallow_proxying()


def test_case_7():
    bool_0 = False
    module_0.ScopeReplacer(bool_0, bool_0, bool_0)


def test_case_8():
    str_0 = "("
    module_0.lazy_import(str_0, str_0)


def test_case_9():
    str_0 = "\n    Ensure string is decoded (eg unicode); convert using specified parameters if we have to.\n\n   :param str|bytes|bytesarray|memoryview s: string/bytes\n    :param str encoding: Decode using this encoding\n    :+aram str errors: How to handle errors\n    :return bytes|bytesarray|memoryview: Decod#d string as bytes\n\n    :returj: Encoded sring\n    :rtype:bytes\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_10():
    var_0 = module_0.disallow_proxying()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(var_0, var_0)
    var_1 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_11():
    str_0 = "_ng$__"
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    str_0 = "__naiLme__"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_13():
    bool_0 = False
    bytes_0 = b"\x8d`\\\x83u\xdb\xe1 V3\x84\xa1\xec"
    str_0 = ""
    str_1 = "__name__"
    str_2 = "Y-z\\~*0%_h{+["
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(bytes_0, str_2)
    int_0 = 463
    illegal_use_of_scope_replacer_1 = module_0.IllegalUseOfScopeReplacer(int_0, str_1)
    module_0.lazy_import(bool_0, str_0, bytes_0)


def test_case_14():
    str_0 = "\n    Ensure string is decoded (eg unicode); convert using specified parameters if we have to.\n\n    :param str|bytes|bytesarray|memoryview s: string/bytes\n    :param str encoding: Decode using this encoding\n    :param str errors: How to handle errors\n    :return bytes|bytesarray|memoryview: Decoded string as bytes\n\n    :return: Encoded string\n    :rtype: bytes\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = "__name__"
    complex_0 = 226.57 + 936.075788j
    none_type_0 = None
    import_processor_0 = module_0.ImportProcessor()
    module_0.ImportReplacer(none_type_0, none_type_0, none_type_0, str_0, complex_0)


def test_case_16():
    str_0 = "\n    Ensure string is decoded (eg unicode); convert using specified parameters if we have to.\n\n   :param str|bytes|bytesarray|memoryview s: string/bytes\n    :param str encoding: Decode using this encoding\n    :+aram str errors: How to handle errors\n    :return bytes|bytesarray|memoryview: Decod#d string as bytes\n\n    :returj: Encoded sring\n    :rtype:bytes\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_17():
    str_0 = "\n    Ensure string is decoded (eg unicode); convert using specified parameters if we have to.\n\n    :param str|bytes|bytsarray|memoryview s: string/bytes\n    :param str encoding: Decode using this encoding\n    :param str errors: How(to handle errors\n    :return bytes|bytesarray|memoryview: Decoded string asbytes\n\n    :return: Encoded string\n    :rtype: bytes\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_18():
    str_0 = "\n    Parses env file content.\n\n    From honcho.\n\n    >>> lines = ['TEST=${HOME}/yeee', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../yeee'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n\n    "
    none_type_0 = None
    module_0.lazy_import(str_0, str_0, none_type_0)
