# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    bool_0 = False
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(bool_0, bool_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_1():
    str_0 = "\n    C|ntext manager that times it's zxecution.\n    "
    dict_0 = {str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0)
    module_0.lazy_import(dict_0, import_replacer_0)


def test_case_2():
    import_processor_0 = module_0.ImportProcessor()


def test_case_3():
    str_0 = "'"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_4():
    bytes_0 = b"\xc8\x1e*\xd2\xce0\x1fT\xa0"
    module_0.ScopeReplacer(bytes_0, bytes_0, bytes_0)


def test_case_5():
    var_0 = module_0.disallow_proxying()


def test_case_6():
    str_0 = "\n    Context manager that times it's execution.\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_7():
    str_0 = "s\\~FBxY+()dhDd"
    module_0.lazy_import(str_0, str_0)


def test_case_8():
    str_0 = "\n    Context manager that ti[es it's execution.\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_9():
    str_0 = "\n    Context mavager that times it's execution.\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_10():
    bool_0 = True
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(bool_0, bool_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_11():
    str_0 = "o3R#p,vh/ltVi"
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    str_0 = "ScopeReplacer object %(name)r was used incorrectly: %(msg)s%(extra)s"
    dict_0 = {str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, dict_0)
    import_replacer_0.__setattr__(str_0, import_replacer_0)


def test_case_13():
    str_0 = "Functionality to create lazy evaluation objects.\n\nThis includes waiting to import a module until it is actually used.\n\nMost commonly, the 'lazy_import' function is used to import other modules\nin an on-demand fashion. Typically use looks like::\n\n    from bzrlib.lazy_import import lazy_import\n    lazy_import(globals(), '''\n    from bzrlib import (\n        errors,\n        osutils,\n        branch,\n        )\n    import bzrlib.branch\n    ''')\n\nThen 'errors, osutils, branch' and 'bzrlib' will exist as lazy-loaded\nobjects which will be replaced with a real object on first use.\n\nIn general, it is best to only load modules in this way. This is because\nit isn't safe to pass these variables to other functions before they\nhave been replaced. This is especially true for constants, sometimes\ntrue for classes or functions (when used as a factory, or you want\nto inherit from them).\n"
    import_processor_0 = module_0.ImportProcessor()
    import_processor_0.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = "Make lazy_compile the default compile mode for regex compilation.\n\n    This overrides re.compile with lazy_coMpile. To restore the original\n    fnctionality, call reset_compile().\n    "
    module_0.ImportReplacer(str_0, str_0, str_0, str_0, str_0)


def test_case_15():
    str_0 = ""
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = "\n   Hvtext manager hat times iR'skzxecution.\n    "
    dict_0 = {str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0)
    none_type_0 = None
    var_0 = module_0.ScopeReplacer(dict_0, import_replacer_0, none_type_0)
    var_0.__eq__(str_0)
