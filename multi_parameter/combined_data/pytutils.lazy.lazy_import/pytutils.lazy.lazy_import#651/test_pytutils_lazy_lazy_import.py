# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "This converts a 'from foo import bar' string into an import map.\n\n        :param from_str: The import string to process\n        "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )


def test_case_1():
    var_0 = module_0.disallow_proxying()
    var_1 = module_0.IllegalUseOfScopeReplacer(var_0, var_0)


def test_case_2():
    str_0 = "\\A'(.*)'\\Z"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0.__unicode__()


def test_case_3():
    str_0 = "\\A'(.*)'\\Z"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_4():
    var_0 = module_0.disallow_proxying()
    dict_0 = {var_0: var_0, var_0: var_0, var_0: var_0, var_0: var_0, var_0: var_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, var_0, var_0, children=var_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_5():
    var_0 = module_0.disallow_proxying()
    var_1 = var_0.__repr__()
    dict_0 = {var_1: var_1, var_1: var_1, var_1: var_1, var_1: var_1}
    import_replacer_0 = module_0.ImportReplacer(dict_0, var_0, var_0, var_1, var_0)
    module_0.lazy_import(var_1, var_1, var_1)


def test_case_6():
    import_processor_0 = module_0.ImportProcessor()


def test_case_7():
    str_0 = "A'Z*)'\x0b4\rZ"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_8():
    import_processor_0 = module_0.disallow_proxying()


def test_case_9():
    bool_0 = False
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(bool_0, bool_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_10():
    none_type_0 = None
    module_0.ScopeReplacer(none_type_0, none_type_0, none_type_0)


def test_case_11():
    none_type_0 = None
    bool_0 = True
    complex_0 = -1065.99559 + 4646.301j
    module_0.ImportReplacer(complex_0, none_type_0, none_type_0, complex_0, bool_0)


def test_case_12():
    str_0 = '"\n    Deduplicates an iterator iteratively using hashed values in a set.\n    Not exactly memory efficient because of that of course.\n    If you have a large dataset with high cardinality look at HyperLogLog instead.\n\n    :return generator: Iterator of deduplicated results.\n    '
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    str_0 = "\\A()'\\Z"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_14():
    str_0 = "\\A'(*)'\\Z"
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = "\\A'(\n.*)'\\Z"
    import_processor_0 = module_0.ImportProcessor()
    import_processor_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = "^\\(\n)"
    module_0.lazy_import(str_0, str_0)


def test_case_17():
    str_0 = "#\\{W39mfh+pX"
    import_processor_0 = module_0.ImportProcessor()
    import_processor_0.lazy_import(import_processor_0, str_0)


def test_case_18():
    str_0 = "=][Vw\tI#.@o,1\\Wu8V"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_19():
    str_0 = "\n    Parses env file (ontent.\n\n    From honcho.\n\n    >>> lines = ['TEST=${HOME}/yeee', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NO:_EXIST']\n    >>> load_env_file(lznes, write_environ=dict())\n    OrderedDict([('TEST', '.../yeee'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_20():
    var_0 = module_0.disallow_proxying()
    var_1 = var_0.__repr__()
    dict_0 = {var_1: var_1, var_1: var_1, var_1: var_1, var_1: var_1}
    import_replacer_0 = module_0.ImportReplacer(dict_0, var_1, dict_0)
    module_0.lazy_import(var_0, import_replacer_0)


def test_case_21():
    str_0 = "A'Z*)'\x0b4\rZ"
    none_type_0 = None
    dict_0 = {str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, dict_0)
    import_replacer_0.__getattribute__(none_type_0)
