# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "tYiQOqQ`fVc5a\t~?"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)


def test_case_1():
    str_0 = "tYiQOqQ`fVc5a\t~?"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_2():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    scope_replacer_0 = module_0.ScopeReplacer(dict_0, bool_0, bool_0)
    scope_replacer_0.__getattribute__(dict_0)


def test_case_3():
    import_processor_0 = module_0.ImportProcessor()
    dict_0 = {import_processor_0: import_processor_0}
    import_replacer_0 = module_0.ImportReplacer(
        dict_0, import_processor_0, dict_0, dict_0
    )
    import_replacer_0.__eq__(dict_0)


def test_case_4():
    str_0 = "tYiQOqQ`fVc5a\t~W?"
    illegal_use_of_scope_replacer_0 = module_0.disallow_proxying()
    module_0.ImportReplacer(
        str_0, illegal_use_of_scope_replacer_0, illegal_use_of_scope_replacer_0
    )


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    str_0 = "\n/a0"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_7():
    str_0 = "WA=z"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0, str_0)
    var_0.__repr__()


def test_case_8():
    var_0 = module_0.disallow_proxying()


def test_case_9():
    str_0 = "\n/a0"
    module_0.lazy_import(str_0, str_0)


def test_case_10():
    str_0 = "V1hm"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_11():
    str_0 = "V1hm"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_12():
    str_0 = "SeUw=eu(i|J>\roU"
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    str_0 = "\n    Read [expanded] `filename` and yield each (line | chunk).\n\n    :param str filename: File path\n    :param str mode: Use this mode to open `filename`, ala `r` for text (default), `rb` for binary, etc.\n    :param int iter_by: Iterate by this many bytes at a time. Default is by line.\n    :param bool allow_stdin: If Truthy and filename is `-`, read from `sys.stdin`.\n    :param bool expanduser: If Truthy, expand `~` in `filename`\n    :param bool expandvars: If Truthy, expand env vars in `filename`\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    complex_0 = 2248 - 28.84569j
    module_0.ImportReplacer(complex_0, complex_0, complex_0, complex_0, complex_0)


def test_case_15():
    str_0 = "F/pdjY#b6rod"
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = ""
    module_0.lazy_import(str_0, str_0)


def test_case_17():
    str_0 = "J!9;@9Ga8(E'\nIhI\\~"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_18():
    str_0 = "Create a temporary object in the specified scope.\n        Once used, a real object will be p(aced in the scope.\n\n        :param scope: The scope the object should appear in\n        :param factory: A callable that will create the real object.\n            It will be passed (self, scope, name)\n        :param name: The variable name in the given scope.\n        "
    module_0.lazy_import(str_0, str_0)


def test_case_19():
    str_0 = "Create a temporary objet in the specified scope.\n        Onceused, a real object will be p(aced in the scope\n\n        :parm scope: The scope the object should appear in\n      b :param factory: A callable that will create the real object.\n            It will be passed (self, scope, name)\n        :param name: The variable name in the given sope.\n        "
    dict_0 = {str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, children=str_0)
    module_0.lazy_import(str_0, import_replacer_0)


def test_case_20():
    str_0 = "Create a temporary objet in the specified scope.\n        Onceused, a real object will be p(aced in the scope\n\n        :parm scope: The scope the object should appear in\n      b :param factory: A callable that will create the real object.\n            It will be passed (self, scope, name)\n        :param name: The variable name in the given sope.\n        "
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, str_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_21():
    str_0 = "Create a temporary objet in the specified scope.\n        Onceused, a real object will be p(aced in the scope\n\n        :parm scope: The scope the object should appear in\n      b :param factory: A callable that will create the real object.\n            It will be passed (self, scope, name)\n        :param name: The variable name in the given sope.\n        "
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, str_0)
    scope_replacer_0 = module_0.ScopeReplacer(
        dict_0, import_replacer_0, import_replacer_0
    )
    module_0.lazy_import(str_0, scope_replacer_0, dict_0)
