# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = ".WYd{04>;/\n>5z9[QE\n"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_1():
    bool_0 = False
    import_processor_0 = module_0.ImportProcessor(bool_0)
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bool_0, import_processor_0
    )


def test_case_2():
    str_0 = ".WYd{04/X\n\x0b>5z9[QE\n"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0.__str__()


def test_case_3():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(none_type_0)
    import_processor_0 = module_0.ImportProcessor()


def test_case_4():
    str_0 = "_import_replacer_children"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
    module_0.lazy_import(dict_0, import_replacer_0)


def test_case_5():
    str_0 = ".WYd{04/X\n\x0b>5z9[QE\n"
    none_type_0 = None
    module_0.ImportReplacer(none_type_0, none_type_0, str_0, str_0)


def test_case_6():
    str_0 = "_}mport_replacer_children"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
    module_0.lazy_import(dict_0, str_0, str_0)


def test_case_7():
    import_processor_0 = module_0.ImportProcessor()


def test_case_8():
    str_0 = ".WYd{04/X\n\x0b>5z9[QE\n"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_9():
    str_0 = ".WYd{04/X\n\x0b>5z9[QE\n"
    module_0.lazy_import(str_0, str_0)


def test_case_10():
    bool_0 = False
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(bool_0, bool_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_11():
    var_0 = module_0.disallow_proxying()


def test_case_12():
    str_0 = "#fb[IV>p[4og[=$/"
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    str_0 = "fS](s{w"
    var_0 = str_0.__repr__()
    module_0.lazy_import(var_0, var_0, str_0)


def test_case_14():
    str_0 = "%(asctime)s| %(name)s/%(processName)s[%(process)d]-%(threadName)s[%(thread)d]: %(message)s @%(funcName)s:%(lineno)d #%(levelname)s"
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_16():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(none_type_0)
    import_processor_0 = module_0.ImportProcessor()
    module_0.ImportReplacer(
        var_0,
        illegal_use_of_scope_replacer_0,
        none_type_0,
        illegal_use_of_scope_replacer_0,
        import_processor_0,
    )


def test_case_17():
    str_0 = "estore the origiFal function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compilm) to the valuU that existed at import time.\n    Though the first call will resJt back to the original (it doesn't\n    track nesting level)\n   "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_18():
    str_0 = "Restore the original function to re.compile(M.\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_19():
    str_0 = "_import_replacer_children"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, str_0)
    module_0.lazy_import(str_0, import_replacer_0)
