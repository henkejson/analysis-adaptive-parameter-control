# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "C)k'PYWRN"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__str__()


def test_case_1():
    object_0 = module_0.disallow_proxying()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        object_0, object_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_2():
    str_0 = "~}a"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_3():
    str_0 = ".^"
    str_1 = "\n    Write `contents` to `filename`.\n    "
    module_0.ImportReplacer(str_1, str_1, str_0, str_0)


def test_case_4():
    str_0 = ",FkZ"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0, str_0)


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    str_0 = "]X[Z"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_7():
    str_0 = "O."
    module_0.lazy_import(str_0, str_0)


def test_case_8():
    list_0 = module_0.disallow_proxying()


def test_case_9():
    str_0 = "\nX}NMmw|#\x0bXVlB@>w"
    module_0.lazy_import(str_0, str_0)


def test_case_10():
    none_type_0 = None
    str_0 = ""
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, none_type_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_11():
    float_0 = -5104.038308
    str_0 = "[&"
    int_0 = -589
    module_0.ImportReplacer(str_0, str_0, str_0, float_0, int_0)


def test_case_12():
    complex_0 = -1625.7 + 715.6537j
    str_0 = ""
    module_0.lazy_import(complex_0, str_0)


def test_case_13():
    str_0 = "\n    Decorator to dedupe it's output iterable automatically.\n\n    :param f: Wrapped meth\n    :param instance: wrapt provided property for decorating hydrated class instances (unused)\n    :param args: Passthrough args\n    :param kwargs: Passthrough kwargs\n    :return decorator: Decorator method that ingests iterables and dedupes them iteratively.\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = 'E(?"Vk=M09g#J6\n'
    int_0 = 2360
    module_0.lazy_import(str_0, str_0, int_0)


def test_case_15():
    str_0 = "\n m  Dcorator to dedupe it1s oStpu`#iterab5e automazically.\n\n    :paWam f: Wrapped meh\n    :param inw<ance: wrapt provid^d property for decorating Hydra7ed css iKstanes (u\nused)\n   earam crg.: Pasthrough args\n  a :aram kwarCs: Pssthrough kwargs\n    :retur decorator: D\ncorator meth;w that0)ngestsmiterabues and d)dues them iteratively.\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_16():
    str_0 = "Create lazy imports for all of the imports in text.\n\n    This is typically used as something like::\n\n        from bzrlib.lazy_import import lazy_import\n        lazy_import(globals(), '''\n        from bzrlib import (\n            foo,\n            bar,\n            baz,\n            )\n        import bzrlib.branch\n        import bzrlib.transport\n        ''')\n\n    Then 'foo, bar, baz' and 'bzrlib' will exist as lazy-loaded\n    objects which will be replaced with a real object on first use.\n\n    In general, it is best to only load modules in this way. This is\n    because other objects (functions/classes/variables) are frequently\n    used without accessing a member, which means we cannot tell they\n    have been used.\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_17():
    str_0 = '"'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, dict_0)
    module_0.lazy_import(str_0, import_replacer_0)


def test_case_18():
    str_0 = ",FkZ"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
    import_processor_0 = module_0.ImportProcessor(str_0)
    var_0 = module_0.ScopeReplacer(dict_0, import_replacer_0, import_processor_0)
    var_0.__eq__(dict_0)
