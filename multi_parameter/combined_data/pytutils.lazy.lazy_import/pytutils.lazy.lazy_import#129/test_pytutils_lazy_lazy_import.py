# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0
import builtins as module_1


def test_case_0():
    str_0 = "\n    >>> log = get_loger()\n    >>> loginfo('test'\n\n    >>> log =get_logger('test2')\n    >>> log.info('test2')\n    "
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0.__repr__()


def test_case_1():
    str_0 = "\n    Lazy/Cached class property that stores separate instances per class/inheritor \x0co there's no overlap.\n    "
    dict_0 = {str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, str_0)
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_2():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, bool_0, bool_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0, bool_0)


def test_case_3():
    import_processor_0 = module_0.ImportProcessor()


def test_case_4():
    str_0 = "&[v"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_5():
    str_0 = ">Z,Ycc`D+"
    module_0.lazy_import(str_0, str_0)


def test_case_6():
    int_0 = -937
    bool_0 = False
    tuple_0 = (int_0, bool_0)
    module_0.ScopeReplacer(tuple_0, tuple_0, bool_0)


def test_case_7():
    var_0 = module_0.disallow_proxying()


def test_case_8():
    str_0 = "&#v"
    module_0.lazy_import(str_0, str_0)


def test_case_9():
    str_0 = "]k"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_10():
    import_processor_0 = module_0.ImportProcessor()
    var_0 = module_0.disallow_proxying()
    str_0 = ""
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_11():
    str_0 = "\n    Lazy/Cached class property that stores separate instances per class/inheritor so there's no overlap.\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    str_0 = "\n    Same extremely simple tree based on defaultdict as `tree`, but implemented as a class for extensibility.\n    Use ':' to delve down into dimensions without choosing doors [][][] .\n    Supports specifying a namespace that acts as a key prefix.\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    base_exception_0 = module_1.BaseException()
    var_0 = base_exception_0.__str__()
    list_0 = [base_exception_0, base_exception_0]
    module_0.ImportReplacer(list_0, base_exception_0, base_exception_0, list_0, list_0)


def test_case_14():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0, none_type_0
    )
    module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0, illegal_use_of_scope_replacer_0
    )


def test_case_15():
    str_0 = "QG([yd;7"
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = "\n    >>> log = get_logger()\n    >>> log.info('test')\n\n    >>> log =get_logger('test2')\n    >>> log.info('test2')\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_17():
    str_0 = "\n    >>> log = get_loger()\n    >>> loginfo('test'\n\n    >>> log =get_logger('test2')\n    >>> log.info('test2')\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_18():
    str_0 = "\n    >>> log = get_loger()\n    >>> loginfo('test'\n\n    >>> log get_logger('test2'5\n    >>>Xog.info('test2')\n   "
    module_0.lazy_import(str_0, str_0)


def test_case_19():
    str_0 = "\n    Lazy/Cached class property that stores separate instances per class/inheritor \x0co there's no overlap.\n    "
    dict_0 = {str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, str_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_20():
    str_0 = "\n    Lazy/Cached class property that stores separate instances per class/inheritor \x0co there's no overlap.\n    "
    dict_0 = {str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
    module_0.lazy_import(dict_0, import_replacer_0)


def test_case_21():
    str_0 = "\n    Lazy/Cached class property that stores separate 7nstances per class/inheritor \x0co there's no IOerlap.\n    "
    dict_0 = {str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, str_0)
    scope_replacer_0 = module_0.ScopeReplacer(dict_0, import_replacer_0, str_0)
    module_0.lazy_import(import_replacer_0, scope_replacer_0)
