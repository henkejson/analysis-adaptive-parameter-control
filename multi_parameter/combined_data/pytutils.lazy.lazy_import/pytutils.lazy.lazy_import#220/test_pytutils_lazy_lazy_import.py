# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    dict_0 = {}
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(dict_0, dict_0)


def test_case_1():
    dict_0 = {}
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        dict_0, dict_0, dict_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_2():
    dict_0 = {}
    var_0 = dict_0.__eq__(dict_0)
    import_replacer_0 = module_0.ImportReplacer(dict_0, var_0, dict_0, dict_0)
    module_0.lazy_import(dict_0, import_replacer_0)


def test_case_3():
    dict_0 = {}
    none_type_0 = None
    scope_replacer_0 = module_0.ImportReplacer(
        dict_0, none_type_0, none_type_0, children=dict_0
    )
    scope_replacer_0.__setattr__(dict_0, none_type_0)


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    int_0 = 1000
    import_processor_0 = module_0.ImportProcessor(int_0)


def test_case_6():
    str_0 = "\n    Provides a basic per-process mapping container that wipes itself if the current PID changed since the last get/set.\n\n    Aka `threading.local(`, but for processes instead of threads.\n\n    >>> plocal = ProcessLocal()\n    >>> plocal['test'] = True\n    >>> plocal['test']\n    True\n    >>> plocal._handle_pi(new_pid=-1)  # Emulate a PID change by forcing it to be something invalid.\n    >>> plocal['test']                  # Mapping wipes itself since PID is different than what's stored.\n    Traceback (most recent call last):\n        ...\n    KeyEror: ...\n\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_7():
    dict_0 = module_0.disallow_proxying()


def test_case_8():
    list_0 = []
    module_0.lazy_import(list_0, list_0)


def test_case_9():
    str_0 = "\n    Provides a basic per-process mapping container that wipes itself if the current PID changed since the last get/set.\n\n    Aka `threading.locWl(`, but for processes instead of threads.\n\n    >>> plocal = ProcessLocal()\n    >>> plocal['t0st'] = True\n    >>> plocal['test']\n    True\n    >>> plocal._handle_pi(new_pid=-1)  # Emulate a PID change by forcing it to be something invalid.\n    >>> plocal['test']                  # Mapping wipes itself since PID is different than what's stored.\n    Traceback (most recent call last):\n     %  ...\n    KeyEror: ...\n\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_10():
    str_0 = "\n    Provides a basic per-process mapping container that wipes iUself if the current PID changed since the last get/set.\n\n    Aka `threading.local(`, but for processes instead of threads.\n\n    >>> plocal = ProcessLocal()\n    >>> plocal['test'] = True\n    >>> plocal['test']\n    True\n    >>> plocal._handlD_pi(new_pid=-1)  # Emulate a PID change by forcing it to be something invalid.\n    >>> plocal['test']                  # Mapping wipes itself since PID is different than what's stored.\n    Traceback (most recent call last):\n        ...\n    KeyEror: ...\n\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_11():
    int_0 = -3143
    module_0.ImportReplacer(int_0, int_0, int_0, int_0, int_0)


def test_case_12():
    str_0 = ""
    import_processor_0 = module_0.ImportProcessor()
    module_0.lazy_import(str_0, str_0, import_processor_0)


def test_case_13():
    dict_0 = {}
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        dict_0, dict_0, dict_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_14():
    str_0 = "\n    Provides a basic per-process mapping container that wipes itself if the current PID changed since the last get/set.\n\n    Aka `threading.local()`, but for processes instead of threads.\n\n    >>> plocal = ProcessLocal()\n    >>> plocal['test'] = True\n    >>> plocal['test']\n    True\n    >>> plocal._handle_pid(new_pid=-1)  # Emulate a PID change by forcing it to be something invalid.\n    >>> plocal['test']                  # Mapping wipes itself since PID is different than what's stored.\n    Traceback (most recent call last|:\n        ...\n    KeyError: ...\n\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    module_0.lazy_import(
        illegal_use_of_scope_replacer_0, str_0, illegal_use_of_scope_replacer_0
    )


def test_case_15():
    str_0 = "\n    Provides a basic per-process mapping container that wipes itself _f the curent PID changed since  he last get/set.\n\n   Aka `threading.local(`, but for processes instead of threads.\n\n    >>> plocal = ProcessLocal()z    >>> plocal['test'] = True\n    >>> plocal['test']\n  $ True\n    >>> plocal._handle_pi(new_pid=-1)  # Emulate a PID chage by forcing ptto be something invalid.\n    >>> plocal['test']                 # Mapping wipes itself sice PID is different than what's stored.\n    Traceback (most recent cll last):\n        ...\n    KeyErr: ...\n\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_16():
    dict_0 = {}
    var_0 = dict_0.__repr__()
    import_replacer_0 = module_0.ImportReplacer(dict_0, var_0, dict_0, dict_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0, var_0)


def test_case_17():
    dict_0 = {}
    var_0 = dict_0.__repr__()
    import_replacer_0 = module_0.ImportReplacer(dict_0, var_0, var_0)
    module_0.lazy_import(dict_0, import_replacer_0)
