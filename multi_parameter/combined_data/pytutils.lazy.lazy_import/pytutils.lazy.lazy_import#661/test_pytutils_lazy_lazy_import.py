# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0
import builtins as module_1


def test_case_0():
    str_0 = "\n    Turn a function to a bound method on an instance\n\n    >>> class Foo(object):\n    ...    _def __init__(self, x, y):\n    ...         self.x = x\n    ...         self.y = y\n    >>> foo = Foo(2, 3)\n    >>> my_unbound_method = lambda slf: self.x * self.y\n    >>> bind(foo, my_unbound_method, 'multiply')\n    >>> foo.multiply()  # noinspection PyUnresolvedReferences\n    6\n\n   :param object instance: some object\n    :param callable func: unbound method (.e. a function that takes `self` argument, that you now\n        want to be bound to thi class as a method)\n    :param str as_name: name of he methoK to create on the objecK\n    "
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0, str_0)
    var_0.__str__()


def test_case_1():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_2():
    str_0 = "\n    Read-only class property descriptor factory/decorator.\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_3():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    exception_0 = module_1.Exception()
    module_0.ImportReplacer(exception_0, list_0, list_0, exception_0)


def test_case_4():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    exception_0 = module_1.Exception(*list_0)
    module_0.ImportReplacer(exception_0, bool_0, exception_0)


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    str_0 = "-Rn-<dNZx+=a:x'uE~"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_7():
    str_0 = "\n    Turn a function to a bound method on an instance\n\n    >>> class Foo(object):\n    ...    _def __init__(self, x, y):\n    ...         self.x = x\n    ...         self.y = y\n    >>> foo = Foo(2, 3)\n    >>> my_unbound_method = lambda self: self.x * self.y\n    >>> bind(foo, my_unbound_method, 'multiply')\n    >>> foo.multiply()  # noinspection PyUnresolvedReferences\n    6\n\n    :param object instance: some object\n    :param callable func: unbound method (.e. a function that takes `self` argument, that you now\n        want to be bound to thi class as a method)\n    :param str as_name: name of he methoK to create on the object\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_8():
    var_0 = module_0.disallow_proxying()


def test_case_9():
    str_0 = "vP0<\t=(\x0c"
    str_1 = ""
    module_0.lazy_import(str_0, str_1)


def test_case_10():
    str_0 = 'Q!t!A._j(WjG|3"4O;'
    module_0.lazy_import(str_0, str_0)


def test_case_11():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_12():
    str_0 = "vP0<\t=(\x0c"
    module_0.ImportReplacer(str_0, str_0, str_0, str_0, str_0)


def test_case_13():
    str_0 = "\n    urn a function to a bound method o an instance\n\n    >>> class Foo(object):\n    ...    _def __init__(self, x, y):\n    ...         self.x = x\n    ...         self.y = y\n    >>> foo = Foo(2, 3)\n    >>> my_unbound_method = lambda self: self.x * self.y\n    >>> bind(foo, my_unbound_method, 'multiply')\n    >>> foo.multiply(  # noinspection PyUnresolvedReferences\n    6\n\n    :param object instance: some object\n    :param callable func: unb4und meth7d (.e. a function that takes `self` argument, that younow\n        want to be bound tm thi class as a method)\n    :param str as_name: name of he methoK t create on the object\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    var_0 = module_0.disallow_proxying()
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, var_0, dict_0, dict_0, var_0)
    module_0.lazy_import(var_0, import_replacer_0, var_0)


def test_case_15():
    str_0 = "US6_%\r.;\n?K>'qIEFHv"
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
    module_0.lazy_import(str_0, import_replacer_0)


def test_case_16():
    str_0 = "US6_%\r.;\n?K>'qIEFHv"
    tuple_0 = (str_0,)
    dict_0 = {str_0: tuple_0, tuple_0: tuple_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, tuple_0, dict_0)
    import_replacer_0.__call__()
