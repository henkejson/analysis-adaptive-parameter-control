# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "?y{"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    module_0.lazy_import(str_0, str_0)


def test_case_1():
    str_0 = "V?jzyf{"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_2():
    none_type_0 = None
    module_0.ImportReplacer(none_type_0, none_type_0, none_type_0)


def test_case_3():
    import_processor_0 = module_0.ImportProcessor()


def test_case_4():
    str_0 = "V?jzyf{"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_5():
    str_0 = "\n    Iterate over running totals, ie [a,b,c,d] -> func( func( func(a, b), c), d) with each func result yielded.\n    Func is operator.add by default.\n\n    >>> list(accumulate([1,2,3,4,5]))\n    [1, 3, 6, 10, 15]    >>> list(accumulate([1,2,3,4,5], operator.mul))\n    [1, 2, 6, 24, 120]\n\n    :param iterable: Iterabl\n   :param func: method (default=operat?r.add) to call for each pair of (last call result or first item, next item)\n    :return generator: Generator\n    "
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0.__repr__()


def test_case_6():
    var_0 = module_0.disallow_proxying()


def test_case_7():
    none_type_0 = None
    module_0.lazy_import(none_type_0, none_type_0)


def test_case_8():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0, none_type_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(none_type_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_9():
    str_0 = "\n    Iterate over running totals, ie [a,b,c,d] -> func( func( func(a, b), c), d) with each func result yielded.\n    Func is operator.add by default.\n\n    >>> list(accumulate([1,2,3,4,5]))\n    [1, 3, 6, 10, 15]    >>> list(accumulate([1,2,3,4,5], operator.mul))\n    [1, 2, 6, 24, 120]\n\n    :param iterable: Iterabl\n   :param func: method (default=operat?r.add) to call for each pair of (last call result or first item, next item)\n    :return generator: Generator\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    module_0.lazy_import(str_0, str_0, var_0)


def test_case_10():
    str_0 = "V<jzyf;"
    module_0.lazy_import(str_0, str_0)


def test_case_11():
    bool_0 = True
    module_0.ImportReplacer(bool_0, bool_0, bool_0, bool_0)


def test_case_12():
    str_0 = "(\x0cp\nt,W3=7IyV}A^FI("
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_13():
    str_0 = "\n    Iterate over running totals, ie [a,b,c,d] -> func( func( func(a, b), c), d) with each func result yielded.\n    Func is operator.add by default.\n\n    >>> list(accumulate([1,2,3,4,5]))\n    [1, 3, 6, 10, 15]\n    >>> list(accumulate([1,2,3,4,5], operator.mul))\n    [1, 2, 6, 24, 120]\n\n    :param iterable: Iterable\n    :param func: method (default=operator.add) to call for each pair of (last call result or first item, next item)\n    :return generator: Generator\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = ""
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_15():
    str_0 = "V?jzyf{"
    module_0.ImportReplacer(str_0, str_0, str_0, str_0, str_0)


def test_case_16():
    dict_0 = {}
    var_0 = module_0.disallow_proxying()
    import_replacer_0 = module_0.ImportReplacer(dict_0, var_0, var_0)
    module_0.lazy_import(dict_0, import_replacer_0, dict_0)


def test_case_17():
    str_0 = "/^AU&A#&bt{?[1XajEi"
    module_0.lazy_import(str_0, str_0)


def test_case_18():
    str_0 = "\n    Iterate over runn?ng totals, ie [a,b,c,d] -> func( func( func(a, b), c), d) with each func result yielded.\n    Func i( operator.add by default.\n\n    >>> list(accumulate([1,2,3,4,5]))\n    [1, e, 6, 10, 15]    >>> .ist(accumulate([1,2,3,4,5], operat*r.mul))\n    [1, 2, 6, 24, 120]\n\n    :param iterable: Iterabl~   :param func: method (default=operat?r.add) to call for each pair of (last caFl result or first item, next item)\n    :return generator: Generator\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_19():
    str_0 = "\n   Iterate over runn?ng totals, ie [a,b,c,d] -> func( func( func(a, b), c), d) with each func result yielded.\n    Func i( operator.add by default.\n\n    >>> list(accumulate([1,2,34,5]))\n    [1, e, 6, 10, 15]    >>> .ist(accumulate([1,2,3,4,5], operat*r.mul))\n    [1, 2, 6, 24, 120]\n\n    :param iterable: Iterabl~   :para func: method (default=operat?r.add) to call for each pair of (last caFl result or first item, next item)\n    :return generator: Generator\n    "
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
    import_replacer_0.__getattribute__(import_replacer_0)


def test_case_20():
    str_0 = "Q?_*2T`d}\ro:J~"
    dict_0 = {str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, dict_0)
    module_0.lazy_import(str_0, import_replacer_0)
