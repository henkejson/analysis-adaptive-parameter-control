# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    import_processor_0 = module_0.ImportProcessor()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        import_processor_0, import_processor_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_1():
    str_0 = "WutLfhtv"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_2():
    str_0 = "\n   Parses env filecontent.\n\n    From honcho.\n\n    >>> lines = ['TEST=${HOME}/yeee', 'THISIS=~/a/test', 'YOLO~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_fil,(lines, write_environ=diwt())\n   OrdeiedDict([('TEST', '.../yeee'),\n             ('THISIS',N'.../a/test'),\n             ('YOLO',\n             '...swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_3():
    bool_0 = False
    module_0.ImportReplacer(bool_0, bool_0, bool_0, children=bool_0)


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    str_0 = "__class__"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_6():
    str_0 = "Unmatched parenthesis"
    module_0.lazy_import(str_0, str_0)


def test_case_7():
    var_0 = module_0.disallow_proxying()


def test_case_8():
    str_0 = "Restore the original function o re.compile().\n\n    It is safe to cll reset_compile() multiple times, it ill always\n   restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_9():
    str_0 = ";T\n#.sWo=\\d<"
    module_0.lazy_import(str_0, str_0)


def test_case_10():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (itdoesn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_11():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, bool_0, dict_0, dict_0)
    import_replacer_0.__repr__()


def test_case_12():
    str_0 = "?u1f3a};8:Q>#0)Fj`"
    none_type_0 = None
    str_1 = "$`-*92=\x0cE2Q0"
    module_0.ImportReplacer(none_type_0, str_0, none_type_0, str_0, str_1)


def test_case_13():
    str_0 = "Z"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_14():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call resnt_Iompile( multiple times, it will always\n    retore re.compile()  o the value that existed t iport time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_15():
    str_0 = ""
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    bool_0 = True
    str_0 = "DN\x0c\raI9@rXBfP,"
    dict_0 = {bool_0: bool_0, str_0: str_0, str_0: bool_0, bool_0: bool_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, bool_0, str_0, bool_0)
    module_0.lazy_import(dict_0, import_replacer_0)


def test_case_17():
    str_0 = "DN\x0ca9@rXBf(4,"
    dict_0 = {str_0: str_0, str_0: str_0}
    none_type_0 = None
    import_replacer_0 = module_0.ImportReplacer(dict_0, none_type_0, str_0, none_type_0)
    module_0.lazy_import(str_0, import_replacer_0)
