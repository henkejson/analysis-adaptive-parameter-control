# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_1():
    str_0 = "\\\\(.)"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_2():
    str_0 = '1tUYx"2mz?GI'
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_3():
    str_0 = "doesn't start with 'import ' or 'from '"
    module_0.ImportReplacer(str_0, str_0, str_0)


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    str_0 = "\\\\(.)"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_6():
    var_0 = module_0.disallow_proxying()


def test_case_7():
    str_0 = "Vq}GkdLE+,"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_8():
    str_0 = '1tUYx"2mz?GI'
    module_0.lazy_import(str_0, str_0)


def test_case_9():
    str_0 = "*X,"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    module_0.lazy_import(
        illegal_use_of_scope_replacer_0, str_0, illegal_use_of_scope_replacer_0
    )


def test_case_10():
    str_0 = "0O+q$.\\\x0cQMw7Rg\x0c\x0b6R"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.ImportReplacer(dict_0, str_0, str_0, str_0)
    var_0.lazy_import(dict_0, var_0)


def test_case_11():
    bool_0 = True
    none_type_0 = None
    none_type_1 = None
    import_processor_0 = module_0.ImportProcessor()
    module_0.ImportReplacer(
        none_type_0, none_type_0, none_type_1, bool_0, import_processor_0
    )


def test_case_12():
    var_0 = module_0.disallow_proxying()
    var_1 = var_0.__eq__(var_0)
    none_type_0 = None
    str_0 = ""
    module_0.lazy_import(none_type_0, str_0)


def test_case_13():
    str_0 = "\n    Parses env file content.\n\n    From honcho.\n\n    >>> lines = ['TEST=${HOME}/yeee', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../yeee'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = "DQq(.tzj'oeG{"
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = "Zs\x0boVYGD#f"
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = "Create lazy imports for all of the imports in text.\n\n    This is typically used as something like::\n\n        from bzrlib.lazy_import import lazy_import\n        lazy_import(globals(), '''\n        from bzrlib import (\n            foo,\n            bar,\n            baz,\n            )\n        import bzrlib.branch\n        import bzrlib.transport\n        ''')\n\n    Then 'foo, bar, baz' and 'bzrlib' will exist as lazy-loaded\n    objects which will be replaced with a real object on first use.\n\n    In general, it is best to only load modules in this way. This is\n    because other objects (functions/classes/variables) are frequently\n    used without accessing a member, which means we cannot tell they\n    have been used.\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_17():
    str_0 = "Create lazy imports for all of the imports in text.\n\n    This is typically used as something like::\n\n        from bzrlib.lazy_import import lazy_import\n        lazy_import(globals(), '''\n        from bzrlib import (\n            foo,\n            bar,\n            baz,\n            )\n        import bzrlib.branch\n        impora bzrlib.transport\n        ''')\n\n    Then 'foo, bar, baz' and 'bzrlib' will exist as lazy-loaded\n    objects which will be replaced with a real object on first use.\n\n    In general, it is best to only load modules in this way. This is\n    becaue other objects (functions/classes/variabls) are frequently\n    used without accessing a member, which means we cannot tell they\n    have been used.\n    "
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, children=str_0)
    module_0.lazy_import(dict_0, import_replacer_0)
