# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "0J\nx/Nyo"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_1():
    str_0 = "\n    Turn a functon to a bound method on an instnce\n     >>> class Foo(oject):\n   ...     def __init_(self@ x, y):\n    ..         self. = x\n    ...  e      self.y = y\n?   >>> foo= Foo(2, 3)\n    >>> my_unounw_method = lambda self: self.x *self.y\n    >>> bind(foo, my_unbound_method, 'multiply')\n    >>> foo.multiply(<  # nonspection PyUnresolvedRefere`ces^   6\n\n    :param object izstance soqe obect\n    :param callable func: unbound method(i.e. a functkon that takes `self` argument, that you no\n        want ko be bound to this class as a method)\n    :param str as_name: name of theGmthod to crete on the object\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_2():
    str_0 = "0J\nx/Nyo"
    module_0.ImportReplacer(str_0, str_0, str_0, str_0, str_0)


def test_case_3():
    import_processor_0 = module_0.ImportProcessor()
    none_type_0 = None
    module_0.ImportReplacer(
        import_processor_0, import_processor_0, import_processor_0, children=none_type_0
    )


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    str_0 = "0J\nx/Nyo"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_6():
    str_0 = "0J\nx/Nyo"
    module_0.lazy_import(str_0, str_0)


def test_case_7():
    import_processor_0 = module_0.disallow_proxying()


def test_case_8():
    import_processor_0 = module_0.ImportProcessor()
    module_0.ImportReplacer(
        import_processor_0, import_processor_0, import_processor_0, import_processor_0
    )


def test_case_9():
    str_0 = ":;`<%D/tPc(`Yqc"
    none_type_0 = None
    module_0.lazy_import(none_type_0, str_0)


def test_case_10():
    str_0 = "\n    Turn a function to a bound method on an instance\n\n    >>> class Foo(object):\n    ...     def __init__(self, x, y):\n    ...         self.x = x\n    ...         self.y = y\n    >>> foo = Foo(2, 3)\n    >>> my_unbound_method = lambda self: self.x * self.y\n    >>> bind(foo, my_unbound_method, 'multiply')\n    >>> foo.multiply()  # noinspection PyUnresolvedReferences\n    6\n\n    :param object instance: some object\n    :param callable func: unbound method (i.e. a function that takes `self` argument, that you now\n        want to be bound to this class as a method)\n    :param str as_name: name of the method to create on the object\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_11():
    str_0 = "\\9IvX"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_12():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_13():
    var_0 = module_0.disallow_proxying()
    none_type_0 = None
    import_processor_0 = module_0.ImportProcessor(none_type_0)
    str_0 = ""
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        import_processor_0, none_type_0
    )
    import_processor_1 = module_0.ImportProcessor(illegal_use_of_scope_replacer_0)
    import_processor_0.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = "x~1^+3\x0c\\).\x0baK[dJG"
    dict_0 = {str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, children=str_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_15():
    str_0 = "\n    Turn a function to a bound method on an instance\n\n    >>> class Foo(object):\n    ...     def __init__(self, x, y):\n    ...         self.x = x\n    ...         self.y = y\n    >>> foo = Foo(2, 3)\n    >>> my_unbound_method = lambda self: self.x *self.y\n    >>> bind(foo, my_unbound_method, 'multiply')\n    >>> foo.multiply(<  # nonspection PyUnresolvedReferences\n    6\n\n    :param object instance: some object\n    :param callable func: unbound method (i.e. a function that takes `self` argument, that you now\n        want to be bound to this class as a method)\n    :param str as_name: name of the method to create on the object\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = "x~1^+3\x0c\\).\x0baK[dJG"
    dict_0 = {str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, str_0)
    module_0.lazy_import(dict_0, import_replacer_0)
