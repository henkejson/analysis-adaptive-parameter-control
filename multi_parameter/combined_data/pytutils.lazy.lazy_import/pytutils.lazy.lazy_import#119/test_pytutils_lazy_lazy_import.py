# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "\\3lct"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    module_0.lazy_import(illegal_use_of_scope_replacer_0, str_0)


def test_case_1():
    str_0 = "/'iLr"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__str__()


def test_case_2():
    var_0 = module_0.disallow_proxying()
    dict_0 = {var_0: var_0, var_0: var_0, var_0: var_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, var_0, dict_0)
    module_0.lazy_import(var_0, import_replacer_0)


def test_case_3():
    import_processor_0 = module_0.ImportProcessor()


def test_case_4():
    str_0 = "\\3lct"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_5():
    str_0 = "sli"
    module_0.lazy_import(str_0, str_0)


def test_case_6():
    var_0 = module_0.disallow_proxying()


def test_case_7():
    dict_0 = {}
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(dict_0, dict_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_8():
    str_0 = "estore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value tat existe= aw import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(none_type_0)
    module_0.lazy_import(str_0, str_0)


def test_case_9():
    str_0 = "\n    Proxies mutable access to another mapping and allows for attribute-style access.\n\n    >>> a = dict(whoa=True, hello=[1,2,3], why='always')\n    >>> b = ProxyMutableAttrDict(a)\n\n    Nice reprs:\n\n    >>> b\n    <ProxyMutableAttrDict {'whoa': True, 'hello': [1, 2, 3], 'why': 'always'}>\n\n    Setting works as you'd expect:\n\n    >>> b['nice'] = False\n    >>> b['whoa'] = 'yeee'\n    >>> b\n    <ProxyMutableAttrDict {'whoa': 'yeee', 'hello': [1, 2, 3], 'why': 'always', 'nice': False}>\n\n    Checking that the changes are in fact being performed on the proxied object:\n\n    >>> a\n    {'whoa': 'yeee', 'hello': [1, 2, 3], 'why': 'always', 'nice': False}\n\n    Attribute style access:\n\n    >>> b.whoa\n    'yeee'\n    >>> b.state = 'new'\n    >>> b\n    <ProxyMutableAttrDict {'whoa': 'yeee', 'hello': [1, 2, 3], 'why': 'always', 'nice': False, 'state': 'new'}>\n\n    Recursion is handled:\n\n    >>> b.subdict = dict(test=True)\n    >>> b.subdict.test\n    True\n    >>> b\n    <ProxyMutableAttrDict {'whoa': 'yeee', 'hello': [1, 2, 3], 'why': 'always', 'nice': False, 'state': 'new',\n    'subdict': <ProxyMutableAttrDict {'test': True}>}>\n\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_10():
    var_0 = module_0.disallow_proxying()
    dict_0 = {var_0: var_0, var_0: var_0, var_0: var_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, var_0, dict_0, dict_0)
    module_0.lazy_import(dict_0, import_replacer_0)


def test_case_11():
    str_0 = "split"
    set_0 = {str_0, str_0, str_0}
    var_0 = module_0.disallow_proxying()
    tuple_0 = (set_0, var_0, var_0)
    module_0.ImportReplacer(str_0, str_0, tuple_0, str_0, tuple_0)


def test_case_12():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it willalways\n    restore re.compile() to the value that existed at import tie.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_13():
    str_0 = ""
    var_0 = module_0.disallow_proxying()
    var_1 = var_0.__repr__()
    module_0.lazy_import(var_0, str_0)


def test_case_14():
    str_0 = "kI}w#F"
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = "di9c}/2EIaWPdg6-\nKli"
    str_1 = 'e Y~bK<(W"p@'
    module_0.lazy_import(str_0, str_1)


def test_case_16():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_17():
    var_0 = module_0.disallow_proxying()
    var_1 = var_0.__repr__()
    dict_0 = {var_1: var_0, var_1: var_1, var_1: var_1}
    import_replacer_0 = module_0.ImportReplacer(dict_0, var_0, var_1)
    module_0.lazy_import(var_1, import_replacer_0)


def test_case_18():
    str_0 = "Restore the original function to re.compile(.\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.cmpile() to the value that existed at import ime.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_19():
    var_0 = module_0.disallow_proxying()
    var_1 = var_0.__repr__()
    dict_0 = {var_1: var_1, var_1: var_1, var_1: var_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, var_0, var_1, var_1)
    module_0.lazy_import(var_1, import_replacer_0)
