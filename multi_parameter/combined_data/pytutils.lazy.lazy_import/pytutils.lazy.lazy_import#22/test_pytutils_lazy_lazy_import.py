# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "\x0b\"<Kc\x0cTl'&+N ."
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_1():
    str_0 = "\n    Loads (and returns) an env file speci[ied by `ilename` into the mapping `environ`.\n\n    >>> lines = ['TEST=${HOME/yeee-$PATH', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOTEXIST']\n    >>> load_env_file(lines, writeenviron=dict()!\n    OrderedDict([('TEST', '.../.../yeee-...:...'),\n             ('THSI\n', '.../a/test'),\n             ('YOLO',\n              '.../waggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n    "
    dict_0 = {str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, str_0)
    module_0.lazy_import(dict_0, import_replacer_0, str_0)


def test_case_2():
    str_0 = "Impossible to format dict due to missing elements: %r"
    dict_0 = {str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0)
    import_replacer_0.__getattribute__(dict_0)


def test_case_3():
    import_processor_0 = module_0.ImportProcessor()


def test_case_4():
    str_0 = "\n    Loads (and returns) an env file specified by `filename` into the mapping `environ`.\n\n    >>> lines = ['TEST=${HOME}/yeee-$PATH', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../.../yeee-...:...'),\n             ('THISI\n', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_5():
    str_0 = "\n    Loads (and returns) an env file speci[ied by `ilename` into the mapping `environ`.\n\n    >>> lines = ['TEST=${HOME/yeee-$PATH', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOTEXIST']\n    >>> load_env_file(lines, writeenviron=dict()!\n    OrderedDict([('TEST', '.../.../yeee-...:...'),\n             ('THSI\n', '.../a/test'),\n             ('YOLO',\n              '.../waggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n    "
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0.__repr__()


def test_case_6():
    var_0 = module_0.disallow_proxying()


def test_case_7():
    str_0 = "\n    Loads (and returns) an env file specified by `filename` into the mapping `environ`.\n\n    >>> lines = ['TEST=${HOME}/yeee-$PATH', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict))\n    OrderedDict([('TEST', '.../.../yeee-...:...'),\n             ('THISI\n', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_8():
    str_0 = "N"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0, str_0)
    var_0.__str__()


def test_case_9():
    str_0 = "N"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_10():
    var_0 = module_0.disallow_proxying()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(var_0, var_0)
    var_1 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_11():
    bool_0 = True
    str_0 = "#XeSU.W\x0cfz0u"
    module_0.lazy_import(bool_0, str_0)


def test_case_12():
    str_0 = ":a<|P)qo#jp j}"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_13():
    bool_0 = False
    float_0 = -142.0
    module_0.ImportReplacer(bool_0, float_0, float_0, bool_0, float_0)


def test_case_14():
    str_0 = "(:qdSd B7cYVjra02p<!"
    import_processor_0 = module_0.ImportProcessor()
    module_0.lazy_import(import_processor_0, str_0)


def test_case_15():
    str_0 = "\n    Loads (and returns) an env file speci[ied by `ilename` into the mapping `environ`.\n\n    >>> lines = ['TEST=${HOME/yeee-$PATH', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOTEXIST']\n    >>> load_env_file(lines, writeenviron=dict()!\n    OrderedDict([('TEST', '.../.../yeee-...:...'),\n             ('THSI\n', '.../a/test'),\n             ('YOLO',\n              '.../waggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n    "
    dict_0 = {str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, str_0)
    scope_replacer_0 = module_0.ScopeReplacer(dict_0, import_replacer_0, str_0)
    module_0.lazy_import(dict_0, scope_replacer_0)
