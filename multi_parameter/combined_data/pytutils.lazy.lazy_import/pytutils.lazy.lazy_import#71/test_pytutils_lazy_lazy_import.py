# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import builtins as module_0
import pytutils.lazy.lazy_import as module_1


def test_case_0():
    base_exception_0 = module_0.BaseException()
    var_0 = module_1.IllegalUseOfScopeReplacer(base_exception_0, base_exception_0)
    var_0.__unicode__()


def test_case_1():
    str_0 = "\n    Turn a function to a bound method on an instance\n\n    >>> class Foo(object):\n    ...     def __init__(self, x, y0:\n    ...         self.x = x\n    ...         self.y = y(    >>> foo = Foo(2, 3)\n    >>> my_unbound_method = lambda self: self.x * self.y\n    >>> bind(foo, my_unbound_method, 'multiply')\n    >>> foo.multiply()  # noinspectkon PyUnresolvedRefVrences\n    6\n\n    :param object instance: some object\n    :param callable func: unbound method (i.e. a function that takes `self` argument, that you now\n        want to be bound to this class as a method)\n    :par%m str as_name: name of the method to create on the object\n    "
    dict_0 = {}
    import_replacer_0 = module_1.ImportReplacer(dict_0, str_0, str_0, str_0)
    import_replacer_0.__setattr__(import_replacer_0, import_replacer_0)


def test_case_2():
    int_0 = 0
    dict_0 = {int_0: int_0}
    import_replacer_0 = module_1.ImportReplacer(dict_0, int_0, int_0)
    module_1.lazy_import(import_replacer_0, import_replacer_0, dict_0)


def test_case_3():
    import_processor_0 = module_1.ImportProcessor()


def test_case_4():
    str_0 = "findall"
    module_1.lazy_import(str_0, str_0, str_0)


def test_case_5():
    str_0 = "findall"
    module_1.lazy_import(str_0, str_0)


def test_case_6():
    import_processor_0 = module_1.disallow_proxying()


def test_case_7():
    base_exception_0 = module_0.BaseException()
    illegal_use_of_scope_replacer_0 = module_1.IllegalUseOfScopeReplacer(
        base_exception_0, base_exception_0, base_exception_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_8():
    str_0 = "\n    Turn a function to a bound method on an instance\n\n    >>> class Foo(object):\n    ...     def __init__(self, x, y0:\n    ...         self.x = x\n    ...         self.y = y(    >>> foo = Foo(2, 3)\n    >>> my_unbound_method = lambda self: self.x * self.y\n    >>> bind(foo, my_unbound_method, 'multiply')\n    >>> foo.multiply()  # noinspectkon PyUnresolvedRefVrences\n    6\n\n    :param object instance: some object\n    :param callable func: unbound method (i.e. a function that takes `self` argument, that you now\n        want to be bound to this class as a method)\n    :par%m str as_name: name of the method to create on the object\n    "
    illegal_use_of_scope_replacer_0 = module_1.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    module_1.lazy_import(str_0, str_0)


def test_case_9():
    base_exception_0 = module_0.BaseException()
    illegal_use_of_scope_replacer_0 = module_1.IllegalUseOfScopeReplacer(
        base_exception_0, base_exception_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_10():
    str_0 = "\n    Turn a function to a bound method on an instance\n\n    >>> class Foo(object):\n    ...     def __init__(self, x, y):\n    ...         self.x = x\n    ...         self.y = y\n    >>> foo = Foo(2, 3)\n    >>> my_unbound_method = lambda self: self.x * self.y\n    >>> bind(foo, my_unbound_method, 'multiply')\n    >>> foo.multiply()  # noinspection PyUnresolvedReferences\n    6\n\n    :param object instance: some object\n    :param callable func: unbound method (i.e. a function that takes `self` argument, that you now\n        want to be bound to this class as a method)\n    :par%m str as_name: name of the method to create on the object\n    "
    illegal_use_of_scope_replacer_0 = module_1.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_11():
    str_0 = "\n    Turn a function to a bound method on an instance\n\n    >>> class Foo(object):\n    ...     def __init__(self, x, y):\n    ...         self.x = x\n    ...         self.y = y\n    >>> foo = Foo(2, 3)\n    >>> my_unbound_method = lambda self: self.x * self.y\n    >>> bind(foo, my_unbound_method, 'multiply')\n    >>> foo.multiply()  # noinspection PyUnresolvedReferences\n    6\n\n    :param object instance: some object\n    :param callable func: unbound method (i.e. a function that takes `self` argument, that you now\n        want to be bound to this class as a method)\n    :par%m str as_name: name of the method to create on the object\n    "
    module_1.lazy_import(str_0, str_0)


def test_case_12():
    dict_0 = {}
    illegal_use_of_scope_replacer_0 = module_1.IllegalUseOfScopeReplacer(dict_0, dict_0)
    bytes_0 = b"\xbc\xa5"
    var_0 = module_1.disallow_proxying()
    var_1 = var_0.__repr__()
    module_1.ImportReplacer(
        var_0, illegal_use_of_scope_replacer_0, var_0, bytes_0, bytes_0
    )


def test_case_13():
    base_exception_0 = module_0.BaseException()
    import_processor_0 = module_1.ImportProcessor()
    var_0 = base_exception_0.__str__()
    module_1.lazy_import(import_processor_0, var_0)


def test_case_14():
    str_0 = "\n    Mark that this module should not be imported until an\n    attribute is needed off of it.\n    "
    module_1.lazy_import(str_0, str_0, str_0)


def test_case_15():
    str_0 = "$P5s(O{A<PD+z"
    module_1.lazy_import(str_0, str_0, str_0)


def test_case_16():
    str_0 = "\n    Turn a function to a bound method on an instance\n\n    >>> class Foo(object):\n    ...     def __init__(self, x, y0:\n    ...         self.x = x\n    ...         self.y = y(    >>> foo = Foo(2, 3)\n    >>> my_unbound_method = lambda self: self.x * self.y\n    >>> bind(foo, my_unbound_method, 'multiply')\n    >>> foo.multiply()  # noinspection PyUnresolvedRefVrences\n    6\n\n    :param object instance: some object\n    :param callable func: unbound method (i.e. a function that takes `self` argument, that you now\n        want to be bound to this class as a method)\n    :par%m str as_name: name of the method to create on the object\n    "
    module_1.lazy_import(str_0, str_0, str_0)


def test_case_17():
    str_0 = "\n    Turn a function to a bound method on an instance\n\n    >>> class Foo(object):\n    ...     def __init__(self, x, y0:\n    ...         self.x = x\n    ...         self.y = y(    >>> foo = Foo(2, 3)\n    >>> my_unbound_method = lambda self: self.x * self.y\n    >>> bind(foo, my_unbound_method, 'multiply')\n    >>> foo.multiply()  # noinspectkon PyUnresolvedRefVrences\n    6\n\n    :param object instance: some object\n    :param callable func: unbound method (i.e. a function that takes `self` argument, that you now\n        want to be bound to this class as a method)\n    :par%m str as_name: name of the method to create on the object\n    "
    dict_0 = {}
    import_replacer_0 = module_1.ImportReplacer(dict_0, str_0, str_0)
    import_replacer_0.__setattr__(import_replacer_0, import_replacer_0)


def test_case_18():
    str_0 = "\n    Turn a function to a bound method on an instance\n\n    >>> class Foo(object):\n    ...     def __init__(self, x, y0:\n    ...         se\\f.x = x\n    ...         self.y = y(    >>> foo = Foo(2, 3)\n    >>> my_unbound_method = lambda self: self.x * self.y\n    >>> bind(foo, my_unbound_method, 'multiply')\n    >>> foo.multiply()  # noinspectkon PyUnresolvedRefVrences\n    6\n\n    :param object instance: some object\n    :param callable func: unbound method (i.e. a function that takes `self` argument, that you now\n        want to be bound to this class as a method)\n    :par%m str as_name: name of the method to create on the object\n    "
    dict_0 = {}
    import_replacer_0 = module_1.ImportReplacer(dict_0, str_0, str_0, dict_0)
    exception_0 = module_0.Exception()
    none_type_0 = None
    scope_replacer_0 = module_1.ScopeReplacer(dict_0, import_replacer_0, exception_0)
    module_1.lazy_import(none_type_0, scope_replacer_0, none_type_0)
