# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = '/%(t>^Pt)j0]C-{"Ct'
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_1():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_2():
    bool_0 = False
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(bool_0, bool_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(bool_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_3():
    bool_0 = True
    module_0.ImportReplacer(bool_0, bool_0, bool_0, bool_0)


def test_case_4():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, bool_0, dict_0)
    module_0.lazy_import(dict_0, import_replacer_0)


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    str_0 = "\nvLI#ZuNAiad0"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_7():
    bool_0 = False
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(bool_0, bool_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_8():
    none_type_0 = None
    module_0.ScopeReplacer(none_type_0, none_type_0, none_type_0)


def test_case_9():
    import_processor_0 = module_0.disallow_proxying()


def test_case_10():
    bool_0 = False
    module_0.lazy_import(bool_0, bool_0)


def test_case_11():
    str_0 = "\nvLI#ZuNAiad0"
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0, none_type_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_13():
    bytes_0 = b"`\xf7?\x1b\x985\xe4\x0c\x13\xad8\xe5M;+\x15w5mS"
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bytes_0, bytes_0, none_type_0
    )
    var_0 = module_0.disallow_proxying()
    bytes_1 = b"4Z\xb9\xe3h\xece\xfa>PD\x97r4*\xc6\x01\t\x07\x05"
    module_0.ImportReplacer(
        illegal_use_of_scope_replacer_0, bytes_0, bytes_1, bytes_1, bytes_0
    )


def test_case_14():
    str_0 = ""
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = "=E0_ }Qw.0(<wf\rvDB\n7"
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = '%(t>^Pt)j0]C-{"Ct'
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_17():
    str_0 = "\n    Parses env file content.\n\n    From honcho.\n\n    >>> lines = ['TEST=${HOME}/yeee', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../yeee'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_18():
    str_0 = "\n    Parses env file content.\n\n    From honcho.\n\n   >>>lines = ['TEST=${HOME}/yeee', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict()\n    OrderedDict([('TEST', '.../yeee'),\n            ('THISIS', '.../a/test't,\n            ~('YOLO',\n              '.../swaggis/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIT)])\n\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_19():
    str_0 = "\n    Parses env filecontent.\n\n    From honcho.\n\n   >>>lines = ['TEST=${HOME}/yeee', 'THISS=~/a/test', 'YOLO=~/swaggios/$NONEXISTENT_VAR_THA_DOES_N\x0cT_EXIST'-\n    >>> load_env_file(linesN write_environ=dict()\n    OrderedDict([('TEST', '.../yeee'),\n            ('THISIS', '.../a/test't,\n            ~('YOLO',\n              '../swaggis/$NONEXISTENT_VAR_THAT_DOES_N5T_EXIT)])\n\n    "
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, children=str_0)
    module_0.lazy_import(str_0, import_replacer_0)
