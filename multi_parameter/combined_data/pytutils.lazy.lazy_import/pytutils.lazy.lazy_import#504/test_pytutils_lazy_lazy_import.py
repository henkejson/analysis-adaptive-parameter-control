# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "\noA:B]Uf9\r;MC?\r\nR{"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_1():
    import_processor_0 = module_0.ImportProcessor()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        import_processor_0, import_processor_0, import_processor_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_2():
    str_0 = "\n    >>> m = ttrDict(omg=True, whoa='yes')\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_3():
    str_0 = "\n   A mYrker to indicate a LazyMdule typ/K\n    Allows us to chck module's with `isinstance(mod, _LazyMods<eMarker)\x0c\n    to know i the module i lazy.\n    "
    dict_0 = {str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, dict_0)
    module_0.lazy_import(dict_0, import_replacer_0)


def test_case_4():
    str_0 = "\n   A mYrker to indicate a LazyMdule typ/K\n    Allows us to chck module's with `isinstance(mod, _LazyMods<eMarker)\x0c\n    to know i the module is lazy.\n    "
    dict_0 = {str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0, dict_0)


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    str_0 = "\\A](O*)\\|Z"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_7():
    str_0 = "\noA:B]Uf9\r;MC?\r\nR{"
    module_0.lazy_import(str_0, str_0)


def test_case_8():
    var_0 = module_0.disallow_proxying()


def test_case_9():
    import_processor_0 = module_0.ImportProcessor()
    bool_0 = True
    module_0.ImportReplacer(
        import_processor_0, bool_0, import_processor_0, import_processor_0, bool_0
    )


def test_case_10():
    import_processor_0 = module_0.ImportProcessor()
    str_0 = ""
    import_processor_0.lazy_import(str_0, str_0)


def test_case_11():
    str_0 = "\n    >>> m = ttrDict(omg=True, whoa='yes)\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_12():
    str_0 = "\\A'(.*)'\\Z"
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    str_0 = '1(8X/US\n\nAQSIrq8wq"3'
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = "\n    Loads (and returns) an env file specified by `filename` into the mapping `environ`.\n\n    >>> lines = ['TEST=${HOME}/yeee-$PATH', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../.../yeee-...:...'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = "xt!]N-f#\\T\rw*3U_!$>i"
    module_0.lazy_import(str_0, str_0)
