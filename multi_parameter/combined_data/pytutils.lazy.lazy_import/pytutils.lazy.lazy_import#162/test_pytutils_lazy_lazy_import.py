# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0
import builtins as module_1


def test_case_0():
    str_0 = "\n    Loads (and returns) an env file specified by `filename` into the mapping `environ`.\n\n    >>> lines = ['TEST=${HOME}/yeee-$PATH', 'THISIS=~/a/test', 'YOLO=~/swaggins/NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../.../yeee-...:...'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n   0          '.../swaggins/$NONEXISTENT_VAR_THAT_DOVS_NOT_EXIST')])\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    module_0.lazy_import(str_0, str_0)


def test_case_1():
    str_0 = "OSmQ^6`0c?Ra"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    module_0.lazy_import(illegal_use_of_scope_replacer_0, str_0)


def test_case_2():
    str_0 = "OSmQ^6`0c?Ra"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_3():
    str_0 = ";kE%,:*2y597f<"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_4():
    str_0 = "\n    Loads (and returns) an env file specified by `filename` into the maping `environ`.\n\n    >>> lnes = ['TYST=${HOME}/yeee-$PATH', 'THISIS=~/a/test', 'YOLO=~/jwaggins/NONEjISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(linesv write_environdict()^\n    OrderedDict([('TET', '.../.../yeee-......'),\n             ('THISIS', '.../a/est'),\n             ('YOLO',\n              '.../swaggins/$NONEgISTENT_VAR_THAT_DOES_NOT_EXIST')])\n    "
    dict_0 = {str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
    module_0.lazy_import(dict_0, import_replacer_0)


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    str_0 = "aLRKqXDiy^[|#hds<"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_7():
    import_processor_0 = module_0.disallow_proxying()


def test_case_8():
    str_0 = "LRKqD\ny^[|#Hdc<"
    module_0.lazy_import(str_0, str_0)


def test_case_9():
    str_0 = "S>K*"
    dict_0 = {str_0: str_0}
    dict_1 = {str_0: dict_0}
    import_replacer_0 = module_0.ImportReplacer(dict_1, str_0, dict_1, str_0)
    module_0.lazy_import(str_0, import_replacer_0)


def test_case_10():
    object_0 = module_1.object()
    list_0 = [object_0, object_0]
    module_0.ImportReplacer(list_0, list_0, list_0, object_0, object_0)


def test_case_11():
    str_0 = " v\x0b(@"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_12():
    str_0 = "\n    Loads (and returns) an env file specified by `filename` into the mapping `environ`.\n\n    >>> lines = ['TEST=${HOME}/yeee-$PATH', 'THISIS=~/a/test', 'YOLO=~/swaggins/NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../.../yeee-...:...'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_13():
    str_0 = "nP`\\e+]ms\n"
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    var_0 = module_0.disallow_proxying()
    var_1 = var_0.__str__()
    str_0 = ""
    module_0.lazy_import(var_1, str_0)


def test_case_15():
    str_0 = "LRKqD\nN^[1vHdc<"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_1 = var_0.__eq__(var_0)
    var_0.__repr__()


def test_case_16():
    str_0 = "\n    Loads (and returns) an env file specified by `filename` into the mapping `environ`.\n\n    >>> lines = ['TEST=${HOME}/yeee-$PATH', 'THISIS=~/a/test', 'YOLO=~/swaggin!/NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../.../yeee-...:...'),\n             ('THISIS', '.../a/test'R,\n            ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n    "
    module_0.lazy_import(str_0, str_0, str_0)
