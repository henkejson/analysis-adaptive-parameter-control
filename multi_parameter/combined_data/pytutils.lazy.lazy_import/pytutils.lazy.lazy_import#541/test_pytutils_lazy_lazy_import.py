# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0
import builtins as module_1


def test_case_0():
    str_0 = '\\A"(.*Y)"\\Z'
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__str__()


def test_case_1():
    exception_0 = module_0.disallow_proxying()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        exception_0, exception_0
    )
    module_0.ImportReplacer(
        exception_0,
        exception_0,
        illegal_use_of_scope_replacer_0,
        illegal_use_of_scope_replacer_0,
    )


def test_case_2():
    var_0 = module_0.disallow_proxying()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(var_0, var_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_3():
    str_0 = "Dw\tbr3x"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_4():
    str_0 = "Unprintable exception %s: dict=%r, fmt=%r, error=%r"
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, none_type_0
    )
    module_0.ImportReplacer(none_type_0, illegal_use_of_scope_replacer_0, str_0)


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    str_0 = "Unprintable exceptin %s: dict=%r, fmt=r, error=%r"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_7():
    exception_0 = module_0.disallow_proxying()


def test_case_8():
    str_0 = "t&CP)f *(o1"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0.__repr__()


def test_case_9():
    exception_0 = module_1.Exception()
    module_0.ImportReplacer(exception_0, exception_0, exception_0, exception_0)


def test_case_10():
    str_0 = "Unprintable exception %s: dict=%r, fmt=%r, error=%r"
    module_0.lazy_import(str_0, str_0)


def test_case_11():
    str_0 = ""
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    str_0 = "A lazy object that will replace itself in the appropriate scope.\n\n    This object sits, ready to create the real object the first time it is\n    needed.\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    str_0 = "Dw\tbr3x"
    module_0.ImportReplacer(str_0, str_0, str_0, str_0, str_0)


def test_case_14():
    str_0 = '.T">t,-Y:Tmp('
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_15():
    str_0 = '.T">t,-Y:OQmv#'
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_16():
    str_0 = "t&CP)f *(o1"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_17():
    str_0 = "t&zP)f *(o1"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_18():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_19():
    str_0 = "A lazy object ta will replace itself in the appropriae scop.\n\n    This o(ject sits, ready to create the real object the first time it is\n    needed.\n    "
    import_processor_0 = module_0.ImportProcessor()
    module_0.lazy_import(str_0, str_0)


def test_case_20():
    none_type_0 = None
    dict_0 = {
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        none_type_0: none_type_0,
    }
    import_replacer_0 = module_0.ImportReplacer(
        dict_0, none_type_0, none_type_0, children=dict_0
    )
    module_0.lazy_import(import_replacer_0, import_replacer_0, none_type_0)


def test_case_21():
    bool_0 = False
    var_0 = bool_0.__repr__()
    list_0 = [var_0, bool_0, var_0]
    import_replacer_0 = module_0.ImportReplacer(list_0, bool_0, var_0)
    module_0.lazy_import(var_0, import_replacer_0, bool_0)
