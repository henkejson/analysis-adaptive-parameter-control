# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "btI'$.M1"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_1():
    str_0 = "l\n1"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    module_0.lazy_import(str_0, str_0)


def test_case_2():
    str_0 = "K_D.BvyQ,^%|Jt3 I"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_3():
    str_0 = "!"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_4():
    bool_0 = False
    module_0.ImportReplacer(bool_0, bool_0, bool_0)


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    str_0 = "K_D.BvyQ,^%|Jt3 I"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_7():
    str_0 = "K_D.BvyQ,^%|Jt3 I"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_8():
    var_0 = module_0.disallow_proxying()


def test_case_9():
    str_0 = "K_D.BvyQ,^%|Jt I"
    module_0.lazy_import(str_0, str_0)


def test_case_10():
    str_0 = "\n5~K"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_11():
    bool_0 = False
    list_0 = [bool_0]
    import_replacer_0 = module_0.ImportReplacer(list_0, bool_0, bool_0, list_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0, list_0)


def test_case_12():
    bool_0 = False
    import_processor_0 = module_0.ImportProcessor()
    none_type_0 = None
    module_0.ImportReplacer(
        bool_0, none_type_0, none_type_0, import_processor_0, import_processor_0
    )


def test_case_13():
    str_0 = "BE.@3(]"
    var_0 = module_0.ImportProcessor()
    var_0.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_15():
    str_0 = "7?8#m3OJdB>JIk"
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = "\n-CX"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_17():
    bool_0 = False
    import_processor_0 = module_0.ImportProcessor()
    list_0 = [import_processor_0, import_processor_0]
    none_type_0 = None
    import_replacer_0 = module_0.ImportReplacer(
        list_0, bool_0, bool_0, import_processor_0
    )
    str_0 = ""
    module_0.lazy_import(none_type_0, str_0, list_0)


def test_case_18():
    str_0 = "Restore the original function to e.compile(f.\n\n    It is safe to call reset_compile() multipletimes, it will always\n    restore re.compile() to the value ]hat existe~ at import time.\n    Though the first call will reset back to he original (it doesn'T\n    track nesting leel)\n   P"
    module_0.lazy_import(str_0, str_0)


def test_case_19():
    str_0 = "K_.BvyQ,^%|Jt I"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
    import_replacer_0.__getattribute__(dict_0)


def test_case_20():
    str_0 = "K_D.BvyQ,^%|Jt I"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, dict_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_21():
    str_0 = "K_D.BvyQ,^%|Jt I"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, str_0)
    scope_replacer_0 = module_0.ScopeReplacer(dict_0, import_replacer_0, str_0)
    scope_replacer_0.__getattribute__(import_replacer_0)
