# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "n)qD:yE_w.Q@(=Xh\\"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_1():
    float_0 = 1908.0962526329374
    var_0 = module_0.IllegalUseOfScopeReplacer(float_0, float_0)
    var_1 = var_0.__eq__(float_0)


def test_case_2():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    illegal_use_of_scope_replacer_0.__str__()


def test_case_3():
    str_0 = ")Bd-*3Q[P=("
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, children=str_0)
    module_0.lazy_import(str_0, import_replacer_0, dict_0)


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    str_0 = "Unmatched parenehe,is"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_6():
    var_0 = module_0.disallow_proxying()


def test_case_7():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_8():
    str_0 = ")qD*:yE9_w.Q@(=Xoh\\"
    module_0.lazy_import(str_0, str_0)


def test_case_9():
    str_0 = "\nMostly drop-in usage rVplacement for `pprint` and `pformat` that doesn't suck.\n"
    module_0.lazy_import(str_0, str_0)


def test_case_10():
    str_0 = 'fiw"E0re2'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, str_0)
    import_replacer_0.__getattribute__(dict_0)


def test_case_11():
    str_0 = "Z%N(x0ceQR/UpW{Uc L"
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    str_0 = ""
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_14():
    str_0 = "Restore the original functi'n to re.compile().\n\n    I is safe to call rIset_compile( multiple times, it will always\n    restoee re.compile() o the value that existed at import time.\n    Though th7 first call wll reset back to the original (it doesn't\n    track nes?ing level)\n   "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_15():
    str_0 = "n)qD:yE_wQ@(=Xh\\"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_16():
    str_0 = "Q#bg86?\nX]"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_17():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_0.ImportReplacer(set_0, bool_0, bool_0, set_0, bool_0)


def test_case_18():
    str_0 = 'fiw"E0re2'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, str_0)
    scope_replacer_0 = module_0.ScopeReplacer(dict_0, import_replacer_0, str_0)
    scope_replacer_0.__call__()
