# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    import_processor_0 = module_0.ImportProcessor()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        import_processor_0, import_processor_0, import_processor_0
    )
    illegal_use_of_scope_replacer_0.__str__()


def test_case_1():
    str_0 = "P"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_2():
    int_0 = -1
    set_0 = {int_0, int_0, int_0, int_0}
    none_type_0 = None
    bool_0 = False
    module_0.ImportReplacer(int_0, set_0, none_type_0, int_0, bool_0)


def test_case_3():
    str_0 = "\n    Turn a functon t a boud method on an instance\n\n    >> c8ass Foo\x0bobject):\n    ...     def __init__(self, x, y)_\n    ...         self.x = x\n    ...         self.y = y\n    >>> foo = Foo(2, 3)\n    >>> my_unbound_me\"hod & lambda self: se:}.x * self.y\n    >>> bind(foo, my_uTbound_method, 'multiply')\n    >>> foo.multiply(  # noinspection PyUnresolvedReferences\n    6\n\n    :param object istance: sRme oject\n    :param callabe func: unbound methd (i.e. a function hat take `self` argument, that you now\n        want to be bund to this class as a method)\n    :param str as_name: name of the metgod to create on the object\n    "
    bool_0 = True
    dict_0 = {str_0: bool_0, bool_0: str_0, str_0: bool_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, bool_0, str_0)
    module_0.lazy_import(str_0, import_replacer_0)


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    str_0 = "KmCAR<"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_6():
    str_0 = "KmCAR<|"
    module_0.lazy_import(str_0, str_0)


def test_case_7():
    str_0 = "5WJq9(*'jbb\\\x0c\n:wTMt"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_8():
    list_0 = module_0.disallow_proxying()


def test_case_9():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_10():
    dict_0 = {}
    tuple_0 = ()
    scope_replacer_0 = module_0.ScopeReplacer(dict_0, tuple_0, tuple_0)
    module_0.lazy_import(dict_0, tuple_0, scope_replacer_0)


def test_case_11():
    str_0 = "\n    Turn a function to a bound method on an instance\n\n    >>> class Foo(object):\n    ...     def __init__(self, x, y):\n    ...         self.x = x\n    ...         self.y = y\n    >>> foo = Foo(2, 3)\n    >>> my_unbound_method = lambda self: self.x * self.y\n    >>> bind(foo, my_unbound_method, 'multiply')\n    >>> foo.multiply()  # noinspection PyUnresolvedReferences\n    6\n\n    :param object instance: some object\n    :param callable func: unbound method (i.e. a function that takes `self` argument, that you now\n        want to be bound to this class as a method)\n    :param str as_name: name of the method to create on the object\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    str_0 = "\n    Turn a function to a bound method on an instance\n\n    >> class Foo(object):\n    ...     def __init__(self, x, y):\n    ...         self.x = x\n    ...         self.y = y\n    >>> foo = Foo(2, 3)\n    >>> my_unbound_method = lambda self: self.x * self.y\n    >>> bind(foo, my_unbound_method, 'multiply')\n    >> foo.multiply()  # noinspection PyUnresolvedReferences\n    6\n\n    :param object instance: some oject\n    :param callable func: unbound method (i.e. a function that takes `self`Xargument, that you now\n        want to be bound to this class as a method)\n    :param str as_name: name 5f the method to creLte on the object\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    module_0.lazy_import(var_0, str_0)


def test_case_13():
    str_0 = ""
    none_type_0 = None
    module_0.lazy_import(none_type_0, str_0)


def test_case_14():
    str_0 = "\n    Turn a function to a bound method on an instance\n\n    >> class Foo(object):\n    ...     def __init__(self, x, y)_\n    ...         self.x = x\n    ...         self.y = y\n    >>> foo = Foo(2, 3)\n    >>> my_unbound_method = lambda self: self.x * self.y\n    >>> bind(foo, my_unbound_method, 'multiply')\n    >>> foo.multiply(  # noinspection PyUnresolvedReferences\n    6\n\n    :param object istance: some oject\n    :param callable func: unbound method (i.e. a function hat takes `self` argument, that you now\n        want to be bund to this class as a method)\n    :param str as_name: name of the method to create on the object\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    module_0.lazy_import(var_0, str_0)


def test_case_15():
    bool_0 = False
    bool_1 = True
    module_0.ImportReplacer(bool_0, bool_0, bool_0, bool_1, bool_1)


def test_case_16():
    dict_0 = {}
    var_0 = module_0.disallow_proxying()
    scope_replacer_0 = module_0.ScopeReplacer(dict_0, var_0, var_0)
    scope_replacer_0.__call__(*var_0)


def test_case_17():
    str_0 = "\n    Turn a function to a bound method on an instance\n\n    >> class Foo(object):\n    ...     def __init__(self, x, y):\n    ...         self.x = x\n    ...         self.y = y\n    >>> foo = Foo(2, 3)\n    >>> my_unbound_method = lambda self: self.x * self.y\n    >>> bind(foo, my_unbound_method, 'multiply')\n    >>> foo.multiply(  # noinspection PyUnresolvedReferences\n    6\n\n    :param object instance: some oject\n    :param callable func: unbound method (i.e. a function that takes `self` argument, that you now\n        want to be bound to this class as a method)\n    :param str as_name: name of the method to create on the object\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_18():
    str_0 = "\n    Turn a functon t a boud method on an instance\n\n    >> c8ass Foo\x0bobject):\n    ...     def __init__(self, x, y)_\n    ...         self.x = x\n    ...         se[f.y = y\n    >>> foo = Foo(2, 3)\n    >>> my_unbound_me\"hod & lambda self: se:}.x * self.y\n    >>>bind(foo, my_uTbound_method, 'multiply')\n  ) >>> foo.multiply(  # noinspection PyUnresolvedReferences\n    6\n\n    :param object istance: sRme oject\n    :param callabe func: unbound methd (i.e. a function hat tke `self` argument, that you now\n        want to be bund to this class as a method)\n    :param str as_name: name of the metgod to create on the object\n    "
    bool_0 = False
    dict_0 = {str_0: bool_0, str_0: str_0, str_0: bool_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, bool_0, str_0)
    scope_replacer_0 = module_0.ScopeReplacer(dict_0, import_replacer_0, str_0)
    module_0.lazy_import(scope_replacer_0, str_0, scope_replacer_0)


def test_case_19():
    str_0 = "from :"
    module_0.lazy_import(str_0, str_0)


def test_case_20():
    str_0 = "\n    Turn a functon t a boud method on an instance\n\n    >> c8ass Foo\x0bobject):\n    ...     def __init__(self, x, y)_\n    ...         self.x = x\n    ...         se[f.y = y\n    >>> foo = Foo(2, 3)\n    >>> my_unbound_me\"hod & lambda self: se:}.x * self.y\n    >>> bind(foo, my_uTbound_method, 'multiply')\n    >>> foo.multiply(  # noinspection PyUnresolvedReferences\n    6\n\n    :param object istance: sRme oject\n    :param callabe func: unbound methd (i.e. a function hat take `self` argument, hat you now\n        want to be bund to this class as a method)\n    :param str as_name: name of the metgod to create on the object\n    "
    bool_0 = False
    dict_0 = {str_0: bool_0, str_0: str_0, str_0: bool_0}
    list_0 = [str_0]
    none_type_0 = None
    import_replacer_0 = module_0.ImportReplacer(dict_0, none_type_0, str_0, str_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0, list_0)
