# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    import_processor_0 = module_0.ImportProcessor()
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, import_processor_0
    )


def test_case_1():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_2():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(none_type_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_3():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    var_0 = module_0.disallow_proxying()
    import_replacer_0 = module_0.ImportReplacer(dict_0, var_0, bool_0, bool_0)


def test_case_4():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, bool_0, dict_0)
    module_0.lazy_import(bool_0, import_replacer_0)


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    str_0 = "jDLLD<3=\t.\x0boJ[Z$;"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_7():
    str_0 = "\\q!K)Af}{"
    module_0.lazy_import(str_0, str_0)


def test_case_8():
    str_0 = '("\x0b\x0ch*E'
    module_0.lazy_import(str_0, str_0)


def test_case_9():
    import_processor_0 = module_0.disallow_proxying()


def test_case_10():
    str_0 = "q!AKf{"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    module_0.lazy_import(str_0, str_0)


def test_case_11():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_12():
    str_0 = "`+nwpUci#:S'S"
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    str_0 = "\n    Parses env file content.\n\n    From honcho.\n\n    >>> lines = ['TEST=${HOME}/yeee', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../yeee'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    none_type_0 = None
    str_0 = "\n    Ensure string is decoded (eg unicode); convert using specified parameters if we have to.\n\n    :param str|bytes|bytesarray|memoryview s: string/bytes\n    :param str encoding: Decode using this encoding\n    :param str errors: How to handle errors\n    :return bytes|bytesarray|memoryview: Decoded string as bytes\n\n    :return: Encoded string\n    :rtype: bytes\n    "
    module_0.ImportReplacer(none_type_0, str_0, none_type_0, str_0, str_0)


def test_case_15():
    str_0 = "R{\"1ge7^0 -@\x0c'Art\n"
    var_0 = module_0.disallow_proxying()
    var_1 = var_0.__eq__(str_0)
    str_1 = ""
    module_0.lazy_import(str_1, str_1, str_1)


def test_case_16():
    str_0 = "\n    Parses en( fie content.\n\n    From honcho.\n\n    >>> lines = ['TEST=${HOME}/yeee', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dic())\n   OrderedDict([('TEST', '.../yeee'),\n             ('THISIS', '.../a/testR),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_17():
    dict_0 = {}
    str_0 = "_lazy_import_class"
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, children=dict_0)
    module_0.lazy_import(dict_0, import_replacer_0)


def test_case_18():
    dict_0 = {}
    str_0 = "S_azy_importq_clss"
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, str_0)
    module_0.lazy_import(str_0, import_replacer_0)


def test_case_19():
    dict_0 = {}
    str_0 = "_lazy_import_class"
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, children=dict_0)
    var_0 = module_0.ScopeReplacer(dict_0, import_replacer_0, import_replacer_0)
    var_0.__call__()
