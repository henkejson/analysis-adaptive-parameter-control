# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0, none_type_0
    )
    illegal_use_of_scope_replacer_0.__str__()


def test_case_1():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0, none_type_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_2():
    str_0 = "fro!0m "
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, dict_0)
    import_replacer_0.__getattribute__(import_replacer_0)


def test_case_3():
    dict_0 = {}
    none_type_0 = None
    import_replacer_0 = module_0.ImportReplacer(
        dict_0, none_type_0, dict_0, children=none_type_0
    )
    str_0 = "6_K9'I!;4l@"
    module_0.lazy_import(str_0, str_0)


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    str_0 = "6_K'I!;4@"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_6():
    var_0 = module_0.disallow_proxying()


def test_case_7():
    bool_0 = False
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bool_0, bool_0, bool_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_8():
    bool_0 = False
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bool_0, bool_0, bool_0
    )
    var_0 = module_0.ImportProcessor()
    module_0.ScopeReplacer(bool_0, bool_0, var_0)


def test_case_9():
    str_0 = "6_K'I!;4@"
    module_0.lazy_import(str_0, str_0)


def test_case_10():
    var_0 = module_0.disallow_proxying()
    str_0 = "?\ri\rg*a}\r_p0\\f&."
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    tuple_0 = ()
    module_0.ImportReplacer(dict_0, str_0, tuple_0, tuple_0, dict_0)


def test_case_11():
    str_0 = "6_K9'I!;4l@"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    module_0.lazy_import(illegal_use_of_scope_replacer_0, str_0)


def test_case_12():
    bool_0 = True
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bool_0, bool_0, bool_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_13():
    str_0 = "6_#rI!;4"
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = ""
    var_0 = module_0.disallow_proxying()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    import_processor_0 = module_0.ImportProcessor()
    import_processor_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = "Create lazy imports for all of the imports in text.\n\n    This is typically used as something like::\n\n        from bzrlib.lazy_import import lazy_import\n        lazy_import(globals(), '''\n        from bzrlib import (\n            foo,\n            bar,\n            baz,\n            )\n        import bzrlib.branch\n        import bzrlib.transport\n        ''')\n\n    Then 'foo, bar, baz' and 'bzrlib' will exist as lazy-loaded\n    objects which will be replaced with a real object on first use.\n\n    In general, it is best to only load modules in this way. This is\n    because other objects (functions/classes/variables) are frequently\n    used without accessing a member, which means we cannot tell they\n    have been used.\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    dict_0 = {}
    none_type_0 = None
    scope_replacer_0 = module_0.ScopeReplacer(dict_0, none_type_0, none_type_0)
    scope_replacer_0.__call__(**dict_0)


def test_case_17():
    str_0 = "Qy;]_(.\x0b"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    import_processor_0 = module_0.ImportProcessor()
    import_processor_0.lazy_import(illegal_use_of_scope_replacer_0, str_0)


def test_case_18():
    str_0 = "^]X-}jHC@[_>Icn"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    none_type_0 = None
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, none_type_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0, dict_0)
