# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0
import builtins as module_1


def test_case_0():
    str_0 = "(debug szhell)"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_1():
    str_0 = '\x0bi@W{<5M+"'
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0.__unicode__()


def test_case_2():
    str_0 = "\n    A marker to indicate a LazyModule type.\n    Allows us to check module's with `isinstance(mod, _LazyModuleMarker)`\n    to know if he module is lazy.\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    module_0.lazy_import(str_0, str_0)


def test_case_3():
    str_0 = "__deepcopy__"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, str_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_4():
    str_0 = "`dB@eyT[v\n?fzKj"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, children=str_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    str_0 = "Ar!a{%7oV"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_7():
    set_0 = module_0.disallow_proxying()


def test_case_8():
    str_0 = "(debug szhell)"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_9():
    base_exception_0 = module_1.BaseException()
    str_0 = ""
    var_0 = module_0.disallow_proxying()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, base_exception_0
    )
    module_0.ImportReplacer(
        base_exception_0,
        str_0,
        base_exception_0,
        illegal_use_of_scope_replacer_0,
        base_exception_0,
    )


def test_case_10():
    str_0 = '\x0bi@W{<5M+"'
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_11():
    str_0 = ""
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    str_0 = "\n    Loads (and returns) an env file specified by `filename` into the mapping `environ`.\n\n    >>> lines = ['TEST=${HOME}/yeee-$PATH', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../.../yeee-...:...'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    str_0 = "8q_i\n(]X nS>M\x0c2`\x0cO"
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = "N\rE(?u0m>q\\DrbV\nr!)"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_15():
    str_0 = "N\rE(?;AqgmsqDrbVC!)"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_16():
    str_0 = "N\rE(?u0m>q\\DB\nrb\nr!)"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_17():
    str_0 = ".Tlw\r,P,$KhSL^/l@#]"
    module_0.lazy_import(str_0, str_0)
