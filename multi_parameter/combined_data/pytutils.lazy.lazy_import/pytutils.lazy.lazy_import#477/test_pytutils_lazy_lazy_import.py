# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = ":t)P\x0cd-,S,eibE(E"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0, str_0)
    module_0.lazy_import(str_0, str_0)


def test_case_1():
    str_0 = ":t)P\x0cd-,S,eibE("
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_2():
    str_0 = "+P\t#CZ)O_"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_3():
    var_0 = module_0.disallow_proxying()
    module_0.ImportReplacer(var_0, var_0, var_0)


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    str_0 = "P.\x0bZ"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_6():
    var_0 = module_0.disallow_proxying()


def test_case_7():
    complex_0 = 237.4 + 232.3294j
    module_0.ScopeReplacer(complex_0, complex_0, complex_0)


def test_case_8():
    str_0 = ":t)P\x0cd-,S,eibE(E"
    module_0.lazy_import(str_0, str_0)


def test_case_9():
    bytes_0 = b""
    tuple_0 = ()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bytes_0, tuple_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)


def test_case_10():
    none_type_0 = None
    dict_0 = {}
    scope_replacer_0 = module_0.ScopeReplacer(dict_0, dict_0, none_type_0)
    scope_replacer_0.__setattr__(scope_replacer_0, scope_replacer_0)


def test_case_11():
    str_0 = "(<=0x:AX"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, str_0)
    module_0.lazy_import(str_0, import_replacer_0)


def test_case_12():
    int_0 = -1474
    module_0.ImportReplacer(int_0, int_0, int_0, int_0, int_0)


def test_case_13():
    str_0 = "+P\t#CZ)O_"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_14():
    str_0 = "P.\x0bZ"
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = ""
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = "\n    Loads (and returns) an env file specified by `filename` into the mapping `environ`.\n\n    >>> lines = ['TEST=${HOME}/yeee-$PATH', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../.../yeee-...:...'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_17():
    str_0 = ":t)P\x0cd-,S,e;ibE("
    str_1 = "\n    Loads (and returns) an enb file specified by `filename` into\tthe mapping `environ`.\n\n    >>> lines = ['TEST=${HOME}/yeee-$PATH', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../.../yeee-...:...'),\n             ('THISIS', '.../a/test'),\n            (YOLO',\n              '.../swaggins/$NONE\x0cISTENT_VAR_THAT_DOES_NOT_EXIST')])F    "
    module_0.lazy_import(str_0, str_1, str_1)


def test_case_18():
    str_0 = "\n    Loads (and returns) an env fie specified by `filename` into the mapping `environ`.\n\n    >>> lines = ['TEST=${HOME}/yeee-$PATH', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISENT_VAR_THAT_DOES_NO_EXIST']\n    >>> load_env_file(lines, rite_environ=dict())\n    OrderedDict([('TEST', '.../.../yeee-...:...'),\n             ('THISIS', '.../a/tet'),\n             ('YOLO',\n              '.../saggins/$NONEXISTE\nT_VAR_THAT_DOES_NOT_EXIST')])\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_19():
    str_0 = "\n    Loads (and returns) an env fie specified by `filename` into the mapping `environ`.\n\n    >>> lines = ['TEST=${HOME}/yee-$PATH', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISENT_VAR_THAT_DOES_NO_EXIST']\n   >>> load_env_file(lines, wrie_environ=dict())\n    OderedDict([('TEST', '.../.../yeee-...:...'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../saggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n    "
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
    import_replacer_0.__setattr__(import_replacer_0, str_0)
