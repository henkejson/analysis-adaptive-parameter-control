# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0, none_type_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_1():
    str_0 = 'n\ngz";\tGSvFoQ'
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    module_0.lazy_import(illegal_use_of_scope_replacer_0, str_0)


def test_case_2():
    str_0 = '\n"!;GS|# '
    dict_0 = {str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, children=dict_0)
    module_0.lazy_import(str_0, import_replacer_0)


def test_case_3():
    import_processor_0 = module_0.ImportProcessor()


def test_case_4():
    str_0 = 'n\ngz";\tGSvoQ'
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_5():
    str_0 = 'n\ngz";P\tGSQ'
    module_0.lazy_import(str_0, str_0)


def test_case_6():
    var_0 = module_0.disallow_proxying()


def test_case_7():
    str_0 = '\x0bj\ngz";PSGQ'
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    module_0.lazy_import(illegal_use_of_scope_replacer_0, str_0)


def test_case_8():
    str_0 = 'ngz";P\tSv'
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_9():
    str_0 = "+UT's%bri%y"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, str_0)
    module_0.lazy_import(dict_0, import_replacer_0)


def test_case_10():
    str_0 = "\n    Iterate over running totals, ie [a,b,c,d] -> func( func( func(a, b), c), d) with each func result yielded.\n    Func is operator.add by default.\n\n    >>> list(accumulate([1,2,3,4,5]))\n    [1, 3, 6, 10, 15]\n    >>> list(accumulate([1,2,3,4,5], operator.mul))\n    [1, 2, 6, 24, 120]\n\n    :param iterable: Iterable\n    :param func: method (default=operator.add) to call for each pair of (last call result or first item, next item)\n    :return generator: Generator\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_11():
    str_0 = ""
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    str_0 = "Invalid attern(s) found. %(msg)s"
    module_0.ImportReplacer(str_0, str_0, str_0, str_0, str_0)


def test_case_13():
    str_0 = "zp;MGSo#tL"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_14():
    str_0 = "[B(vK$,?`h&R.9p-0"
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = "Restore the original function to re.compile().\n\n    It is afe to6call reset_compile() multiple timesk it will always\n    restore re.compile(Q to the value Yhat existed at import time.\n    Though the first call will reset backto th original (it doesn't\n    1rack nesting level)\nk   "
    module_0.lazy_import(str_0, str_0)


def test_case_17():
    str_0 = "+UT's%bri%y"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, str_0)
    scope_replacer_0 = module_0.ScopeReplacer(dict_0, import_replacer_0, str_0)
    module_0.lazy_import(scope_replacer_0, scope_replacer_0)
