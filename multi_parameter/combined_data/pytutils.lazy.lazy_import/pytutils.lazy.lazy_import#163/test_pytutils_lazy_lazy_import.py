# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_co#pile() multiple times, it will alwayQ\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it&doesn't\n    track nesting level)\n    "
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0, str_0)
    var_0.__str__()


def test_case_1():
    bool_0 = False
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bool_0, bool_0, bool_0
    )
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_2():
    bool_0 = False
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bool_0, bool_0, bool_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(bool_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_3():
    complex_0 = 257.446597 + 517.04j
    module_0.ImportReplacer(complex_0, complex_0, complex_0, complex_0)


def test_case_4():
    bool_0 = True
    module_0.ImportReplacer(bool_0, bool_0, bool_0)


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    str_0 = "^"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_7():
    str_0 = "b"
    module_0.lazy_import(str_0, str_0)


def test_case_8():
    str_0 = "("
    module_0.lazy_import(str_0, str_0)


def test_case_9():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_10():
    var_0 = module_0.disallow_proxying()


def test_case_11():
    complex_0 = 256.51251904166793 + 517.04j
    module_0.lazy_import(complex_0, complex_0)


def test_case_12():
    bool_0 = True
    str_0 = ""
    module_0.lazy_import(bool_0, str_0)


def test_case_13():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_14():
    str_0 = ""
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_15():
    bool_0 = True
    str_0 = "b"
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, bool_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(none_type_0)
    var_1 = var_0.__repr__()
    module_0.ImportReplacer(
        bool_0,
        none_type_0,
        illegal_use_of_scope_replacer_0,
        var_0,
        illegal_use_of_scope_replacer_0,
    )


def test_case_16():
    bytes_0 = b"\x9d\r\x94\xe31\x98\xbd\xb2\xbd\xf9\x0cr"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, bytes_0, dict_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0, dict_0)


def test_case_17():
    str_0 = "]k#Nq"
    module_0.lazy_import(str_0, str_0)


def test_case_18():
    str_0 = "Restore the =riginal function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.comple(; to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0)
