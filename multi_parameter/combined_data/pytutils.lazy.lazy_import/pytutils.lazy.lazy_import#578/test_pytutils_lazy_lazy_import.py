# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "\r2Y#2R"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_1():
    bool_0 = False
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(bool_0, bool_0)


def test_case_2():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_3():
    str_0 = "/cop__"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    module_0.lazy_import(str_0, str_0)


def test_case_4():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_5():
    none_type_0 = None
    module_0.ImportReplacer(none_type_0, none_type_0, none_type_0)


def test_case_6():
    import_processor_0 = module_0.ImportProcessor()


def test_case_7():
    str_0 = "\r2Y2R"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_8():
    var_0 = module_0.disallow_proxying()


def test_case_9():
    none_type_0 = None
    module_0.lazy_import(none_type_0, none_type_0)


def test_case_10():
    str_0 = "\r2Y2R"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_11():
    str_0 = "XMJ2);\\N^:?2B829*& "
    dict_0 = {str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_12():
    str_0 = "XM2);\\^:2B829*& "
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, dict_0)
    module_0.lazy_import(import_replacer_0, str_0)


def test_case_13():
    str_0 = "XMJ2);\\N^:?2B8Q9*& "
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    bytes_0 = b"\x1b{%}$\xd5\x95\x87gF\xc3\x88x"
    module_0.ImportReplacer(bytes_0, bytes_0, bytes_0, bytes_0, bytes_0)


def test_case_15():
    str_0 = ""
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_16():
    str_0 = "t*8\rj\x0cV\\2{_|}u9n/)\n"
    module_0.lazy_import(str_0, str_0)


def test_case_17():
    str_0 = "\r2Y#2R"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_18():
    str_0 = "Q*K(vB"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_19():
    str_0 = "VOz+3 P)(tPWB'|6"
    module_0.lazy_import(str_0, str_0)


def test_case_20():
    str_0 = "Restore the original function to re.compile().\n\n    It is safeto call reset_compile() multiple times, it will always\n    retore re.compile() to the value that existed at import time.\n    Though the first call will reset back tothe original (it doesn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_21():
    str_0 = "\n    Loads (and returns an env file specified by `filename` into the mapping `environ`.\n\n    >>> lines = ['TEST=${HOME}/yeee-$PATH', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../.../yeee-...:...'),\n             ('THISIS', '.../a/test'),\n             'YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n    "
    none_type_0 = None
    var_0 = module_0.ImportProcessor(str_0)
    var_0.lazy_import(none_type_0, str_0)


def test_case_22():
    str_0 = "XMJ2);\\N^~:?2B829*& "
    dict_0 = {str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0)
    none_type_0 = None
    scope_replacer_0 = module_0.ScopeReplacer(
        dict_0, import_replacer_0, import_replacer_0
    )
    scope_replacer_0.__getattribute__(none_type_0)


def test_case_23():
    str_0 = "XM2);\\^:2B829*& "
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, dict_0)
    import_replacer_0.__getattribute__(import_replacer_0)
