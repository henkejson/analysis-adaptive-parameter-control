# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    float_0 = 2246.9258
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        float_0, float_0, float_0
    )
    illegal_use_of_scope_replacer_0.__str__()


def test_case_1():
    bytes_0 = b'"\xab\x02i\xbf\x83\x0b\xda\x05\x92\xdcm'
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bytes_0, bytes_0
    )
    illegal_use_of_scope_replacer_0.__str__()


def test_case_2():
    none_type_0 = None
    bool_0 = False
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(bool_0, bool_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(none_type_0)


def test_case_3():
    import_processor_0 = module_0.ImportProcessor()
    none_type_0 = None
    module_0.ImportReplacer(
        import_processor_0, none_type_0, import_processor_0, import_processor_0
    )


def test_case_4():
    bytes_0 = b'"\xab\x02i\xbf\x83\x0b\xda\x05\x92\xdcm'
    none_type_0 = None
    module_0.ImportReplacer(bytes_0, bytes_0, none_type_0, children=bytes_0)


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    str_0 = "\n    Read [expanded] `filename` and yield each (line | chunk).\n\n    :param str filename: File path\n    :param str mode: Use this mode to open `filename`, ala `r` for text (default), `rb` for binary, etc.\n    :param int iter_by: Iterate by this many bytes at a time. Default is by line.\n    :param bool allow_stdin: If Truthy and filename is `-`, read from `sys.stdin`.\n    :param bool expanduser: If Truthy, expand `~` in `filename`\n    :param bool expandvars: If Truthy, expand env vars in `filename`\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_7():
    str_0 = "Decorator to wrap a class or instance method with a memoizing\n    callable that saves results in a cache.\n\n    You can also specify a cached exception to cache and re-throw as well.\n\n    Originally from cachetools, but modified to support caching certain exceptions.\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_8():
    str_0 = "2\tu!(:Ja@^cqQwpg"
    module_0.lazy_import(str_0, str_0)


def test_case_9():
    bool_0 = True
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(bool_0, bool_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_10():
    import_processor_0 = module_0.disallow_proxying()


def test_case_11():
    none_type_0 = None
    bytes_0 = b"*\x19\xd3~\x189\xd3\xba\x12Q("
    module_0.ImportReplacer(none_type_0, bytes_0, bytes_0, bytes_0, bytes_0)


def test_case_12():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    str_0 = "Mn7L&-&%{?}#v"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_14():
    bool_0 = True
    str_0 = ""
    module_0.lazy_import(str_0, str_0, bool_0)


def test_case_15():
    str_0 = "Restore the original function to re.compile().\n\n    It is safeto call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import tie.\n    Though the first call will reset back to the or'ginal (it dVesn't\n    track nesting level)\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    module_0.lazy_import(illegal_use_of_scope_replacer_0, str_0)


def test_case_16():
    str_0 = "-gs~~QJof"
    str_1 = "Functionality to create lazy evaluation objects.\n\nThis includes waiting to import a module until it is actually used.\n\nMost commonly, the 'lazy_import' function is used to import other modules\nin an on-demand fashion. Typically use looks like::\n\n    from bzrlib.lazy_import import lazy_import\n    lazy_import(globals(), '''\n    from bzrlib import (\n        errors,\n        osutils,\n        branch,\n        )\n    import bzrlib.branch\n    ''')\n\nThen 'errors, osutils, branch' and 'bzrlib' will exist as lazy-loaded\nobjects which will be replaced with a real object on first use.\n\nIn general, it is best to only load modules in this way. This is because\nit isn't safe to pass these variables to other functions before they\nhave been replaced. This is especially true for constants, sometimes\ntrue for classes or functions (when used as a factory, or you want\nto inherit from them).\n"
    module_0.lazy_import(str_0, str_1, str_1)


def test_case_17():
    float_0 = -1942.7071862679263
    dict_0 = {float_0: float_0, float_0: float_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, float_0, dict_0)
    module_0.lazy_import(dict_0, import_replacer_0)


def test_case_18():
    float_0 = -1942.148007940978
    dict_0 = {float_0: float_0, float_0: float_0}
    tuple_0 = ()
    import_replacer_0 = module_0.ImportReplacer(dict_0, tuple_0, tuple_0)
    module_0.lazy_import(dict_0, import_replacer_0)
