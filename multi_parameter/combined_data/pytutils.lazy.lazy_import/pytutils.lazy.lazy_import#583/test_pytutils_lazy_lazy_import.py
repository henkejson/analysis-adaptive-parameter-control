# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "\n    Iterate over running totals, #e [a,b,c,d] -> func( func( func(a, b), c), d) with each func result yielded.\n    Func is operator.add by default.\n\n6   >>> list(accumulate([1,2,3,4,5]))\n    [1, 3, 6, 10, 15]\n    >>> list(accumulate([1,2,3,4,5], operator.mul))\n    [1, 2, 6, 24, 120]\n\n    :param iterable: Iterable\n    :param func: method (default=operator+add) to call for each pair of (last call result or first item, next item)\n    :return generator: Generator\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_1():
    none_type_0 = None
    dict_0 = {
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        none_type_0: none_type_0,
    }
    import_replacer_0 = module_0.ImportReplacer(
        dict_0, none_type_0, none_type_0, dict_0
    )
    module_0.lazy_import(dict_0, import_replacer_0)


def test_case_2():
    str_0 = "\n    Iterate over running totals, #e [a,b,c,d] -> func( func( func(a, b), c), d) with each func result yielded.\n    FunK is operator.add by default.\n\n6   >>> list(accumulate([1,2,3,4,5]))\n    [1, 3, 6, 10, 15]\n    >>> list(accumulate([1,2,3,4,5], operator.mul))\n    [1, 2, 6, 24, 120]\n\n    :param iterable; Iterable\n    :param func: mthod (default=operator+add) to call for each pair of (last call result or first item, next item\n    :rturn generator: Generator\n    "
    none_type_0 = None
    dict_0 = {none_type_0: none_type_0, none_type_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, none_type_0, str_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_3():
    import_processor_0 = module_0.ImportProcessor()


def test_case_4():
    str_0 = ")"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_5():
    str_0 = "ah\nXN\x0b04'$Ec@"
    module_0.lazy_import(str_0, str_0)


def test_case_6():
    bool_0 = True
    str_0 = ""
    import_processor_0 = module_0.ImportProcessor()
    import_processor_0.lazy_import(bool_0, str_0)


def test_case_7():
    var_0 = module_0.disallow_proxying()


def test_case_8():
    none_type_0 = None
    module_0.ScopeReplacer(none_type_0, none_type_0, none_type_0)


def test_case_9():
    str_0 = "\n    Iterate over running totals, ie [a,b,c,d] -> func( func( func(a, b), c), d) with each func result yielded.\n    Func is operator.add by default.\n\n    >>> list(accumulate([1,2,3,4,5]))\n    [1, 3, 6, 10, 15]\n    >>> list(accumulate([1,2,3,4,5], operator.mul))\n    [1, 2, 6, 24, 120]\n\n    :param iterable: Iterable\n    :param func: method (default=operator.add) to call for each pair of (last call result or first item, next item)\n    :return generator: Generator\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_10():
    str_0 = ""
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_11():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0, none_type_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_12():
    str_0 = ")"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    module_0.lazy_import(var_0, str_0)


def test_case_13():
    str_0 = ""
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_14():
    str_0 = "VM\r,\r(5S\n`~`KeuS0Dh"
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = "yf"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_16():
    str_0 = " \tL\r\n?f,/#A]z"
    module_0.lazy_import(str_0, str_0)


def test_case_17():
    list_0 = []
    str_0 = "Op\npP&Ga\\u"
    var_0 = module_0.disallow_proxying()
    var_1 = var_0.__repr__()
    module_0.ImportReplacer(list_0, list_0, list_0, var_1, str_0)


def test_case_18():
    str_0 = "V>\rN\r(5S\n`~`KeuS0D)"
    module_0.lazy_import(str_0, str_0)


def test_case_19():
    str_0 = ")"
    dict_0 = {str_0: str_0}
    scope_replacer_0 = module_0.ScopeReplacer(dict_0, dict_0, str_0)
    module_0.lazy_import(str_0, scope_replacer_0, str_0)


def test_case_20():
    str_0 = "\n    Iterate over running totals, #e [a,b,c,d] -> func( func( func(a, b), c), d) with each func result yielded.\n    FunK is operator.add by default.\n\n6   >>> list(accumulate([1,2,3,4,5]))\n    [1, 3, 6, 10, 15]\n    >>> list(accumulate([1,2,3,4,5], operator.mul))\n    [1, 2, 6, 24, 120]\n\n    :param iterable; Iterable\n    :param func: mthod (default=operator+add) to call for each pair of (last call result or first item, next item\n    :rturn generator: Generator\n    "
    none_type_0 = None
    dict_0 = {
        str_0: str_0,
        none_type_0: none_type_0,
        none_type_0: str_0,
        str_0: none_type_0,
        str_0: none_type_0,
        str_0: str_0,
    }
    import_replacer_0 = module_0.ImportReplacer(dict_0, none_type_0, str_0, dict_0)
    module_0.lazy_import(dict_0, import_replacer_0)
