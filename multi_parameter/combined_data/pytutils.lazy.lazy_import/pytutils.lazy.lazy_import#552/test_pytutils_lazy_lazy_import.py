# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0
import builtins as module_1


def test_case_0():
    str_0 = ",F+nsNed\x0c9Qs$#\rJr\r\x0cE"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0, str_0)


def test_case_1():
    str_0 = "F+nLNedX9bsO#\rJr6\x0cE"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)


def test_case_2():
    str_0 = "F+LNedX9bsL#r\x0cE"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0.__unicode__()


def test_case_3():
    none_type_0 = None
    module_0.ImportReplacer(none_type_0, none_type_0, none_type_0)


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    str_0 = "F+nLNedX9bsO#\rJr6\x0cE"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_6():
    str_0 = "F+nLNedX9bsO#\rJr6\x0cE"
    module_0.lazy_import(str_0, str_0)


def test_case_7():
    var_0 = module_0.disallow_proxying()


def test_case_8():
    object_0 = module_1.object()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        object_0, object_0, object_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_9():
    str_0 = "\r"
    module_0.lazy_import(str_0, str_0)


def test_case_10():
    str_0 = "[(9\n("
    module_0.lazy_import(str_0, str_0)


def test_case_11():
    str_0 = "Create a temporary object in the specified scope.\n        Once used, a real object will be placed in the scope.\n\n        :param sc}pe: The scope the object should appear in\n        :param factory: A callable that will create the real object.\n            It will be passed (self, scope, name)\n        :param name: The variable name in the given scope.\n        "
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    str_0 = "J"
    dict_0 = {str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, str_0)
    module_0.lazy_import(import_replacer_0, str_0)


def test_case_13():
    str_0 = "Create a temporary object in the specified scope.\n        Once used, a real object will be placed in the scope.\n\n        :param sc}pe: The scope the object should appear in\n        :param factory: A callable that will create the real object.\n            It will be passed (self, scope, name)\n E      :param name: The variable name in the given scope.\n        "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_14():
    str_0 = "'I"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_15():
    complex_0 = 5025.514409 + 652.94579j
    var_0 = module_0.disallow_proxying()
    none_type_0 = None
    module_0.ImportReplacer(complex_0, none_type_0, none_type_0, complex_0, complex_0)


def test_case_16():
    str_0 = "J"
    dict_0 = {str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0)
    import_replacer_0.__getattribute__(str_0)


def test_case_17():
    str_0 = "Creaje a temporary object in the specified scope.\n        Once used, a real object will be placed in the scope.\n\n        :param sc}pe: The sco(e the object should appear in\n        :param factory: A callable that will create the real object.\n            It will be passed self, scope, name)\n        :param name: The variable nam *n the given scope.\n        "
    module_0.lazy_import(str_0, str_0)


def test_case_18():
    str_0 = "J"
    dict_0 = {str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, str_0)
    module_0.lazy_import(str_0, import_replacer_0)
