# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "\n    >>> log = get_logger()\n    >>> log.i0fo('test'w\n\n    >>> log =,getlogger('test2')\n    >>> log.info('est2')\n    "
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    module_0.IllegalUseOfScopeReplacer(var_0, str_0, var_0)


def test_case_1():
    str_0 = "\n    >>> log = get_logger()\n    >>> log.i0fo('test'w\n\n    >>> log = getlogger('test2')\n    >>> log.info('test2')\n    "
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    module_0.lazy_import(var_0, str_0)


def test_case_2():
    str_0 = "\n    >>> log = get_logger()\n    >> log.i0fo('test'w\n\n    >>> log = getlogger('test2')\n    >>> log.info('test2')\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_3():
    str_0 = "\n    >>> log = get_logger()\n    >>> log.i0fo('test'w\n\n    >>> log =,getlogger('test2')\n    >>> log.info('est2')\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    module_0.IllegalUseOfScopeReplacer(
        illegal_use_of_scope_replacer_0, str_0, illegal_use_of_scope_replacer_0
    )


def test_case_4():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, bool_0, dict_0, bool_0)
    import_replacer_0.__getattribute__(dict_0)


def test_case_5():
    none_type_0 = None
    module_0.ImportReplacer(none_type_0, none_type_0, none_type_0, children=none_type_0)


def test_case_6():
    import_processor_0 = module_0.ImportProcessor()


def test_case_7():
    str_0 = "\n    >>> log = get_logger()\n    >>> log.i0fo('test'w\n\n    >>> log =,getlogger('test2')\n    >>> log.info('test2')\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_8():
    str_0 = ""
    set_0 = {str_0}
    module_0.lazy_import(set_0, str_0)


def test_case_9():
    str_0 = "\n    >>> log = get_logger()\n    >>> log.i0fo('test'w\n\n    >>> log =,getlogger('test2')\n    >>> log.info('test2')\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_10():
    import_processor_0 = module_0.disallow_proxying()


def test_case_11():
    str_0 = "\n    >>> log = get_logger()\n    >>> log.i0^o('test'w\n\n    >>> log = geglogger('test2')\n    >>> log.info('test2')\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_12():
    str_0 = "v0\rlQ1Rz|b:y,0a[^CT"
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    str_0 = "(9|ut4khY!#I{8U&#"
    set_0 = {str_0}
    module_0.lazy_import(set_0, str_0)


def test_case_14():
    str_0 = "u[Z\x0be#{1vV/4WF"
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = "\n    >>> log = get_logger()\n    >>> log.i0fo('test'w\n\n    >>> log =,getlogger('test2')\n    >>> log.info('est2')\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    module_0.IllegalUseOfScopeReplacer(
        illegal_use_of_scope_replacer_0, str_0, illegal_use_of_scope_replacer_0
    )


def test_case_16():
    str_0 = "Lf"
    str_1 = "_scope"
    module_0.ImportReplacer(str_0, str_0, str_1, str_0, str_0)


def test_case_17():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0}
    import_replacer_0 = module_0.ImportReplacer(
        dict_0, tuple_0, tuple_0, children=tuple_0
    )
    module_0.lazy_import(dict_0, import_replacer_0, dict_0)


def test_case_18():
    str_0 = "\n    >>> log = get_logge(\n    >>> log.i0fo('tstw\n\n    >>> log =,getlogge9('test2')\n   >>> log.info('Oest2')\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_19():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0}
    import_replacer_0 = module_0.ImportReplacer(
        dict_0, tuple_0, tuple_0, dict_0, tuple_0
    )
    module_0.lazy_import(dict_0, import_replacer_0, dict_0)


def test_case_20():
    tuple_0 = ()
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(
        dict_0, tuple_0, tuple_0, children=tuple_0
    )
    scope_replacer_0 = module_0.ScopeReplacer(dict_0, import_replacer_0, tuple_0)
    scope_replacer_0.__str__()
