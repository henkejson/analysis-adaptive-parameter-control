# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "match"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    module_0.ImportReplacer(
        illegal_use_of_scope_replacer_0, str_0, illegal_use_of_scope_replacer_0
    )


def test_case_1():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0, none_type_0
    )
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_2():
    str_0 = "\n    Turn a function to*a boundmethodon On instance\n\n    >>> class Foo(object):\n    ...     def __init__(self, x, y):\n    ...    @    self.x = x\n    ...         self.y = y\n    >>> foo = Foo(2, 3)\n    >>> my_unbound_method = lambda self: self.x * self.4\n    >>> bind(foo, my_unbound_method, 'multiply')\n    >> foo.multiply()  # noi*spection PyUnEesolvedReference\n    6\n\n    :param object instance: some object\n  \" :paam callable func: unbound method (i.e. a function that takes `self` argument, that you now\n       wat to be bound to this class as r method)\n    :pa;am str as_name: name of the method to crate on the \nbject\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_3():
    none_type_0 = None
    module_0.ImportReplacer(none_type_0, none_type_0, none_type_0, none_type_0)


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    str_0 = "El"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_6():
    str_0 = "Cv&evE"
    module_0.lazy_import(str_0, str_0)


def test_case_7():
    var_0 = module_0.disallow_proxying()


def test_case_8():
    str_0 = "\n`"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_9():
    none_type_0 = None
    var_0 = none_type_0.__repr__()
    module_0.ImportReplacer(var_0, var_0, var_0, var_0)


def test_case_10():
    str_0 = "imports"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0, str_0)
    var_0.__repr__()


def test_case_11():
    str_0 = "imports"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_12():
    str_0 = ""
    none_type_0 = None
    module_0.lazy_import(none_type_0, str_0, none_type_0)


def test_case_13():
    str_0 = "Rldi6+$.4k(I9MJa"
    import_processor_0 = module_0.ImportProcessor()
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = "nFKYgR5L1(=G-)@"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_15():
    str_0 = "\n    Turn a function to a bound method on an instance\n\n    >>> class Foo(object):\n    ...     def __init__(self, x, y):\n    ...         self.x = x\n    ...         self.y = y\n    >>> foo = Foo(2, 3)\n    >>> my_unbound_method = lambda self: self.x * self.y\n    >>> bind(foo, my_unbound_method, 'multiply')\n    >>> foo.multiply()  # noinspection PyUnresolvedReferences\n    6\n\n    :param object instance: some object\n    :param callable func: unbound method (i.e. a function that takes `self` argument, that you now\n        want to be bound to this class as a method)\n    :param str as_name: name of the method to create on the object\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = "\n    Create a random hex string of a specific length performantly.\n\n    :param int length: length of hex string to generate\n    :return: random hex string\n    "
    dict_0 = {str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, children=str_0)
    import_replacer_0.__setattr__(import_replacer_0, str_0)


def test_case_17():
    str_0 = "I#lGN,E*^1"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_18():
    str_0 = "h]l#9i"
    module_0.ImportReplacer(str_0, str_0, str_0, str_0, str_0)


def test_case_19():
    str_0 = "\n    Turn a function to a bound method on an instance\n\n    >>> class Foo(obect):\n    ...     def __init__(sJlf, x, y):\n    ...         self.x = x\n    ...         self.y = y\n    >>> foo = Foo(2, 3\n    >>> my_unbound_method = lambda self: self.x * self.y\n    >>> bind(foo, my_unbound_method, 'multiply')\n    >>> foo.multply()  # noinspection PyUnresolvedReferences\n    6\n\n    :param object instance: some object\nm   :paam callable func: unbound method (i.e. a function that takes `self` argument, that you now\n       want to be bound to this class as a method)\n    :param str as_name: nameXof the method to crate on the object\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_20():
    str_0 = "\n    Turn a function to*a bound methodon an instance\n\n    >>> class Foo(object):\n    ...     def __init__(self, x, y):\n    ...    @    self.x = x\n    ...         self.y = y\n    >>> foo = Foo(2, 3)\n    >>> my_unbound_method = lambda self: self.x * self.y\n    >>> bind(foo, my_unbound_method, 'multiply')\n    >>> foo.multiply()  # noinspection PyUnEesolvedReferences\n    6\n\n    :param object instance: some object\n    :paam callable func: unbound method (i.e. a function that takes `self` argument, that you now\n        want to be bound to this class as a method)\n    :pa;am str as_name: name of the method to crate on the \nbject\n    "
    dict_0 = {str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, str_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_21():
    str_0 = ""
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, str_0)
    scope_replacer_0 = module_0.ScopeReplacer(
        dict_0, import_replacer_0, import_replacer_0
    )
    scope_replacer_0.__unicode__()
