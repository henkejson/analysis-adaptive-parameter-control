# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "HEyBTi9Nj/]IR"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    module_0.lazy_import(str_0, str_0)


def test_case_1():
    str_0 = ""
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)


def test_case_2():
    str_0 = "vyBTi9Nj/]m"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_3():
    str_0 = ""
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_4():
    none_type_0 = None
    int_0 = 283
    module_0.ImportReplacer(none_type_0, none_type_0, int_0, children=none_type_0)


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    str_0 = "HEyBTi9Nj/]mR"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_7():
    var_0 = module_0.disallow_proxying()


def test_case_8():
    complex_0 = -2804.47 + 372.14544j
    module_0.lazy_import(complex_0, complex_0)


def test_case_9():
    str_0 = ";Jk+ (d!O"
    none_type_0 = None
    list_0 = [none_type_0]
    module_0.lazy_import(list_0, str_0)


def test_case_10():
    str_0 = "%s(%s)"
    module_0.lazy_import(str_0, str_0)


def test_case_11():
    str_0 = "\n    Loads (and returns) an env file specified by `filename` into the mapping `environ`.\n\n    >>> lines = ['TEST=${HOME}/yeee-$PATH', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../.../yeee-...:...'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    str_0 = "%s(%s)"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_1 = var_0.__eq__(var_0)
    var_0.__repr__()


def test_case_13():
    bytes_0 = b"\xcc\x10u_\x98\xae\x05"
    set_0 = {bytes_0, bytes_0}
    module_0.ImportReplacer(set_0, set_0, set_0, bytes_0)


def test_case_14():
    str_0 = "LyQcVmF;7(r"
    module_0.ImportReplacer(str_0, str_0, str_0, str_0, str_0)


def test_case_15():
    str_0 = " import ]"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_16():
    str_0 = '$"#l@"8a"5 gMYX~sm'
    module_0.lazy_import(str_0, str_0)


def test_case_17():
    str_0 = "_real_obj"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
    module_0.lazy_import(dict_0, import_replacer_0)


def test_case_18():
    str_0 = "Create lazy imports for all of the imports in text.\n\n    This is typically used as something like::\n\n        from bzrlib.lazy_import import lazy_import\n        lazy_import(globals(), '''\n        from bzrlib import (\n            foo,\n            bar,\n            baz,\n            )\n        import bzrlib.branch\n        import bzrlib.transport\n        ''')\n\n    Then 'foo, bar, baz' and 'bzrlib' will exist as lazy-loaded\n    objects which will be replaced with a real object on first use.\n\n    In general, it is best to only load modules in this way. This is\n    because other objects (functions/classes/variables) are frequently\n    used without accessing a member, which means we cannot tell they\n    have been used.\n    "
    var_0 = str_0.__repr__()
    module_0.lazy_import(var_0, str_0)


def test_case_19():
    str_0 = "\n"
    dict_0 = {str_0: str_0, str_0: str_0}
    int_0 = -611
    import_replacer_0 = module_0.ImportReplacer(dict_0, int_0, str_0, dict_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_20():
    str_0 = " import ]>."
    module_0.lazy_import(str_0, str_0)
