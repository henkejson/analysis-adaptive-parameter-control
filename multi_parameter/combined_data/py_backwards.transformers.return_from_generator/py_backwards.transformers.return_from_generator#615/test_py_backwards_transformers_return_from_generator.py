# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import py_backwards.transformers.return_from_generator as module_0
import typed_ast._ast3 as module_1
import typed_ast.ast3 as module_2


def test_case_0():
    none_type_0 = None
    return_from_generator_transformer_0 = module_0.ReturnFromGeneratorTransformer(
        none_type_0
    )


def test_case_1():
    bool_0 = True
    return_from_generator_transformer_0 = module_0.ReturnFromGeneratorTransformer(
        bool_0
    )
    str_0 = '"y}'
    function_def_0 = module_1.FunctionDef(*str_0)
    function_def_1 = return_from_generator_transformer_0.visit_FunctionDef(
        function_def_0
    )


def test_case_2():
    bool_0 = True
    return_from_generator_transformer_0 = module_0.ReturnFromGeneratorTransformer(
        bool_0
    )
    str_0 = ""
    list_0 = [str_0, str_0, str_0, return_from_generator_transformer_0]
    dict_0 = {str_0: list_0, str_0: list_0}
    function_def_0 = module_1.FunctionDef(*list_0, **dict_0)
    function_def_1 = return_from_generator_transformer_0.visit_FunctionDef(
        function_def_0
    )


def test_case_3():
    bool_0 = False
    return_from_generator_transformer_0 = module_0.ReturnFromGeneratorTransformer(
        bool_0
    )
    str_0 = "uixPyn}<"
    list_0 = [str_0, str_0, str_0, return_from_generator_transformer_0]
    function_def_0 = module_1.FunctionDef(*list_0)
    function_def_1 = return_from_generator_transformer_0.visit_FunctionDef(
        function_def_0
    )


def test_case_4():
    str_0 = "\nflf\teW*|;QL(yU<v"
    none_type_0 = None
    str_1 = "HTTPError"
    dict_0 = {str_0: none_type_0, str_0: none_type_0, str_1: none_type_0}
    generator_exp_0 = module_1.GeneratorExp(**dict_0)
    var_0 = module_2.dump(generator_exp_0)
    var_1 = module_2.parse(var_0)
    float_0 = -508.11
    return_from_generator_transformer_0 = module_0.ReturnFromGeneratorTransformer(
        float_0
    )
    function_def_0 = return_from_generator_transformer_0.visit_FunctionDef(var_1)
    var_1.visit(var_1)
