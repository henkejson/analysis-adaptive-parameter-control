# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import typed_ast._ast3 as module_0
import py_backwards.transformers.return_from_generator as module_1
import typed_ast.ast3 as module_2


def test_case_0():
    div_0 = module_0.Div()
    return_from_generator_transformer_0 = module_1.ReturnFromGeneratorTransformer(div_0)


def test_case_1():
    list_comp_0 = module_0.ListComp()
    return_from_generator_transformer_0 = module_1.ReturnFromGeneratorTransformer(
        list_comp_0
    )
    var_0 = module_2.walk(list_comp_0)
    list_0 = [
        return_from_generator_transformer_0,
        return_from_generator_transformer_0,
        var_0,
        var_0,
    ]
    function_def_0 = module_0.FunctionDef(*list_0)
    function_def_1 = return_from_generator_transformer_0.visit_FunctionDef(
        function_def_0
    )


def test_case_2():
    lambda_0 = module_0.Lambda()
    list_comp_0 = module_0.ListComp()
    return_from_generator_transformer_0 = module_1.ReturnFromGeneratorTransformer(
        list_comp_0
    )
    var_0 = module_2.walk(lambda_0)
    list_0 = [
        return_from_generator_transformer_0,
        return_from_generator_transformer_0,
        var_0,
        lambda_0,
    ]
    function_def_0 = module_0.FunctionDef(*list_0)
    function_def_1 = return_from_generator_transformer_0.visit_FunctionDef(
        function_def_0
    )
    function_def_2 = return_from_generator_transformer_0.visit_FunctionDef(
        function_def_1
    )


def test_case_3():
    list_comp_0 = module_0.ListComp()
    return_from_generator_transformer_0 = module_1.ReturnFromGeneratorTransformer(
        list_comp_0
    )
    var_0 = module_2.dump(list_comp_0, list_comp_0)
    list_0 = [
        return_from_generator_transformer_0,
        return_from_generator_transformer_0,
        var_0,
        var_0,
    ]
    function_def_0 = module_0.FunctionDef(*list_0)
    function_def_1 = return_from_generator_transformer_0.visit_FunctionDef(
        function_def_0
    )
