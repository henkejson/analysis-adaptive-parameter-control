# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import typed_ast._ast3 as module_0
import py_backwards.transformers.return_from_generator as module_1


def test_case_0():
    not_eq_0 = module_0.NotEq()
    return_from_generator_transformer_0 = module_1.ReturnFromGeneratorTransformer(
        not_eq_0
    )


def test_case_1():
    str_0 = "O=\rUkOa/}ez\tMbf5"
    none_type_0 = None
    dict_0 = {str_0: none_type_0, str_0: none_type_0, str_0: none_type_0}
    bit_or_0 = module_0.BitOr(**dict_0)
    return_from_generator_transformer_0 = module_1.ReturnFromGeneratorTransformer(
        bit_or_0
    )
    list_0 = [str_0, none_type_0, dict_0, dict_0]
    function_def_0 = module_0.FunctionDef(*list_0)
    function_def_1 = return_from_generator_transformer_0.visit_FunctionDef(
        function_def_0
    )


def test_case_2():
    str_0 = "O=\rUkOa/}ez\tMbf5"
    none_type_0 = None
    dict_0 = {str_0: none_type_0, str_0: none_type_0, str_0: none_type_0}
    bit_or_0 = module_0.BitOr(**dict_0)
    return_from_generator_transformer_0 = module_1.ReturnFromGeneratorTransformer(
        bit_or_0
    )
    list_0 = [str_0, none_type_0, str_0, dict_0, dict_0]
    function_def_0 = module_0.FunctionDef(*list_0)
    return_from_generator_transformer_1 = module_1.ReturnFromGeneratorTransformer(
        return_from_generator_transformer_0
    )
    function_def_1 = return_from_generator_transformer_0.visit_FunctionDef(
        function_def_0
    )
    return_from_generator_transformer_2 = module_1.ReturnFromGeneratorTransformer(
        dict_0
    )
