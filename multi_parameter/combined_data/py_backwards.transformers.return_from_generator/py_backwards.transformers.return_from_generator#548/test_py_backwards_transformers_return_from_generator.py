# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import typed_ast.ast3 as module_0
import py_backwards.transformers.return_from_generator as module_1
import typed_ast._ast3 as module_2


def test_case_0():
    none_type_0 = None
    module_0.fix_missing_locations(none_type_0)


def test_case_1():
    str_0 = ">5]%jVSV&"
    return_from_generator_transformer_0 = module_1.ReturnFromGeneratorTransformer(str_0)
    list_0 = [str_0, str_0, str_0, str_0]
    function_def_0 = module_2.FunctionDef(*list_0)
    function_def_1 = return_from_generator_transformer_0.visit_FunctionDef(
        function_def_0
    )


def test_case_2():
    str_0 = ""
    return_from_generator_transformer_0 = module_1.ReturnFromGeneratorTransformer(str_0)
    list_0 = [str_0, str_0, str_0]
    function_def_0 = module_2.FunctionDef(*list_0)
    none_type_0 = None
    return_from_generator_transformer_1 = module_1.ReturnFromGeneratorTransformer(
        none_type_0
    )
    function_def_1 = return_from_generator_transformer_1.visit_FunctionDef(
        function_def_0
    )
    none_type_1 = None
    dict_0 = {
        str_0: none_type_0,
        str_0: none_type_1,
        str_0: none_type_1,
        str_0: none_type_1,
        str_0: none_type_1,
    }
    excepthandler_0 = module_2.excepthandler(**dict_0)
    excepthandler_1 = module_2.excepthandler()
    module_2.Attribute(**excepthandler_1)


def test_case_3():
    str_0 = "Aq"
    var_0 = module_0.parse(str_0)
    return_from_generator_transformer_0 = module_1.ReturnFromGeneratorTransformer(str_0)
    function_def_0 = return_from_generator_transformer_0.visit_FunctionDef(var_0)
    return_from_generator_transformer_1 = module_1.ReturnFromGeneratorTransformer(str_0)
    list_0 = [str_0, str_0, str_0, str_0]
    function_def_1 = module_2.FunctionDef(*list_0)
    none_type_0 = None
    function_def_2 = return_from_generator_transformer_1.visit_FunctionDef(
        function_def_1
    )
    none_type_1 = None
    dict_0 = {
        str_0: none_type_0,
        str_0: none_type_1,
        str_0: none_type_1,
        str_0: none_type_1,
        str_0: none_type_1,
    }
    excepthandler_0 = module_2.excepthandler(**dict_0)
    excepthandler_1 = module_2.excepthandler()
    module_2.Attribute(**excepthandler_1)
