# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import typed_ast._ast3 as module_0
import py_backwards.transformers.return_from_generator as module_1
import typed_ast.ast3 as module_2


def test_case_0():
    not_0 = module_0.Not()
    return_from_generator_transformer_0 = module_1.ReturnFromGeneratorTransformer(not_0)


def test_case_1():
    str_0 = " }\tg,$"
    return_from_generator_transformer_0 = module_1.ReturnFromGeneratorTransformer(str_0)
    function_def_0 = module_0.FunctionDef(*str_0)
    function_def_1 = return_from_generator_transformer_0.visit_FunctionDef(
        function_def_0
    )


def test_case_2():
    assert_0 = module_0.Assert()
    list_0 = [assert_0, assert_0]
    str_0 = "F\tKe9}^ggCt"
    dict_0 = {}
    arg_0 = module_0.arg(*list_0, **dict_0)
    return_from_generator_transformer_0 = module_1.ReturnFromGeneratorTransformer(str_0)
    list_1 = [assert_0, list_0, dict_0]
    function_def_0 = module_0.FunctionDef(*list_1)
    function_def_1 = return_from_generator_transformer_0.visit_FunctionDef(
        function_def_0
    )
    module_2.increment_lineno(assert_0, list_1)


def test_case_3():
    str_0 = "\t}\t^g,$t"
    return_from_generator_transformer_0 = module_1.ReturnFromGeneratorTransformer(str_0)
    list_0 = [str_0, return_from_generator_transformer_0, str_0]
    function_def_0 = module_0.FunctionDef(*list_0)
    var_0 = return_from_generator_transformer_0.visit(function_def_0)


def test_case_4():
    str_0 = "httplib"
    generator_exp_0 = module_0.GeneratorExp()
    return_from_generator_transformer_0 = module_1.ReturnFromGeneratorTransformer(
        generator_exp_0
    )
    var_0 = module_2.parse(str_0)
    function_def_0 = return_from_generator_transformer_0.visit_FunctionDef(var_0)
    return_from_generator_transformer_1 = module_1.ReturnFromGeneratorTransformer(str_0)
    var_0.visit_FunctionDef(return_from_generator_transformer_0)
