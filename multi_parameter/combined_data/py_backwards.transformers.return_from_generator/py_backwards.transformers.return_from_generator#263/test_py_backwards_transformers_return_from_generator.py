# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import typed_ast._ast3 as module_0
import py_backwards.transformers.return_from_generator as module_1
import typed_ast.ast3 as module_2


def test_case_0():
    boolop_0 = module_0.boolop()
    return_from_generator_transformer_0 = module_1.ReturnFromGeneratorTransformer(
        boolop_0
    )


def test_case_1():
    dict_0 = {}
    return_from_generator_transformer_0 = module_1.ReturnFromGeneratorTransformer(
        dict_0
    )
    list_0 = [
        return_from_generator_transformer_0,
        return_from_generator_transformer_0,
        dict_0,
    ]
    function_def_0 = module_0.FunctionDef(*list_0)
    function_def_1 = return_from_generator_transformer_0.visit_FunctionDef(
        function_def_0
    )


def test_case_2():
    none_type_0 = None
    return_from_generator_transformer_0 = module_1.ReturnFromGeneratorTransformer(
        none_type_0
    )
    dict_0 = {return_from_generator_transformer_0: none_type_0}
    list_0 = [
        return_from_generator_transformer_0,
        return_from_generator_transformer_0,
        dict_0,
    ]
    function_def_0 = module_0.FunctionDef(*list_0)
    function_def_1 = return_from_generator_transformer_0.visit_FunctionDef(
        function_def_0
    )


def test_case_3():
    none_type_0 = None
    return_from_generator_transformer_0 = module_1.ReturnFromGeneratorTransformer(
        none_type_0
    )
    dict_0 = {
        none_type_0: none_type_0,
        return_from_generator_transformer_0: none_type_0,
        none_type_0: none_type_0,
        none_type_0: none_type_0,
    }
    list_0 = [
        return_from_generator_transformer_0,
        return_from_generator_transformer_0,
        dict_0,
    ]
    function_def_0 = module_0.FunctionDef(*list_0)
    function_def_1 = return_from_generator_transformer_0.visit_FunctionDef(
        function_def_0
    )


def test_case_4():
    str_0 = "pickle"
    var_0 = module_2.parse(str_0)
    return_from_generator_transformer_0 = module_1.ReturnFromGeneratorTransformer(var_0)
    function_def_0 = return_from_generator_transformer_0.visit_FunctionDef(var_0)
    function_def_1 = return_from_generator_transformer_0.visit_FunctionDef(var_0)
    tuple_0 = (var_0, var_0)
    var_0.visit_FunctionDef(tuple_0)
