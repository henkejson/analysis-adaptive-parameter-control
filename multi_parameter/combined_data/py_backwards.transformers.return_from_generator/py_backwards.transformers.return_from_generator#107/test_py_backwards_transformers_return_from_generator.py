# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import py_backwards.transformers.return_from_generator as module_0
import typed_ast._ast3 as module_1
import typed_ast.ast3 as module_2


def test_case_0():
    none_type_0 = None
    return_from_generator_transformer_0 = module_0.ReturnFromGeneratorTransformer(
        none_type_0
    )


def test_case_1():
    bytes_0 = b"\x02\x98\x92_p"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    function_def_0 = module_1.FunctionDef(*list_0)
    return_from_generator_transformer_0 = module_0.ReturnFromGeneratorTransformer(
        function_def_0
    )
    function_def_1 = return_from_generator_transformer_0.visit_FunctionDef(
        function_def_0
    )


def test_case_2():
    bytes_0 = b""
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0, bytes_0]
    function_def_0 = module_1.FunctionDef(*list_0)
    return_from_generator_transformer_0 = module_0.ReturnFromGeneratorTransformer(
        list_0
    )
    function_def_1 = return_from_generator_transformer_0.visit_FunctionDef(
        function_def_0
    )


def test_case_3():
    bytes_0 = b"pb"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    str_0 = ""
    str_1 = "!,s13"
    var_0 = module_2.parse(bytes_0)
    dict_0 = {str_0: str_0, str_1: var_0}
    function_def_0 = module_1.FunctionDef(*list_0, **dict_0)
    return_from_generator_transformer_0 = module_0.ReturnFromGeneratorTransformer(var_0)
    function_def_1 = return_from_generator_transformer_0.visit_FunctionDef(var_0)
