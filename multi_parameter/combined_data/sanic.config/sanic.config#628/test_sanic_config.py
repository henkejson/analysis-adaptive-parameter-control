# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    config_0 = module_0.Config()
    module_0.Config(env_prefix=config_0, keep_alive=config_0)


def test_case_2():
    config_0 = module_0.Config()
    module_0.Config(config_0, config_0, config_0)


def test_case_3():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_4():
    config_0 = module_0.Config()
    none_type_0 = None
    config_0.update_config(none_type_0)


def test_case_5():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)
    config_1 = module_0.Config(config_0, converters=config_0)
    none_type_0 = config_0.register_type(var_0)
    var_0.init_for_request()


def test_case_6():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)
    none_type_0 = None
    config_0.__setitem__(config_0, none_type_0)


def test_case_7():
    config_0 = module_0.Config()
    var_0 = config_0.load_environment_vars()
    none_type_0 = None
    config_1 = module_0.Config(env_prefix=none_type_0)
    config_0.update_config(none_type_0)


def test_case_8():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)
    none_type_0 = None
    config_0.__getattr__(none_type_0)


def test_case_9():
    config_0 = module_0.Config()
    config_0.__getattr__(config_0)


def test_case_10():
    int_0 = -2183
    module_0.Config(converters=int_0)


def test_case_11():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)
    none_type_0 = config_0.register_type(var_0)
    config_1 = module_0.Config(config_0, converters=config_0)
    config_0.register_type(var_0)


def test_case_12():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)
    config_1 = module_0.Config(config_0, converters=config_0)
    var_1 = var_0.__bool__()
    var_2 = var_1.__repr__()
    config_1.update_config(var_2)
