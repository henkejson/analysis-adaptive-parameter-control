# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import inspect as module_1


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    bytes_0 = b"\xa5\x88m\x83\xf1\x96"
    config_0 = module_0.Config(keep_alive=bytes_0)


def test_case_2():
    str_0 = "S"
    config_0 = module_0.Config()
    module_0.Config(config_0, str_0, converters=str_0)


def test_case_3():
    str_0 = "[%s]+"
    config_0 = module_0.Config()
    var_0 = config_0.load_environment_vars()
    config_1 = module_0.Config(env_prefix=var_0)
    var_1 = config_0.load_environment_vars()
    var_2 = var_1.__repr__()
    var_3 = module_1.isclass(str_0)
    config_2 = module_0.Config(config_0, keep_alive=str_0)
    config_2.__getattr__(var_3)


def test_case_4():
    config_0 = module_0.Config()
    str_0 = "-"
    none_type_0 = config_0.__setitem__(str_0, str_0)
    var_0 = config_0.load_environment_vars()
    var_1 = config_0.update_config(config_0)
    config_0.__setattr__(config_0, config_0)


def test_case_5():
    str_0 = "[%s]+"
    config_0 = module_0.Config()
    var_0 = config_0.load_environment_vars()
    config_1 = module_0.Config(env_prefix=var_0)
    var_1 = config_0.load_environment_vars()
    var_2 = var_1.__repr__()
    config_2 = module_0.Config(config_0, keep_alive=str_0)
    var_3 = config_2.update_config(config_1)


def test_case_6():
    bytes_0 = b"\xa5\x88m\x83\xf1\x96"
    config_0 = module_0.Config(keep_alive=bytes_0)
    none_type_0 = config_0.register_type(bytes_0)
    config_0.__getattr__(config_0)


def test_case_7():
    none_type_0 = None
    config_0 = module_0.Config(converters=none_type_0)
    config_0.update_config(none_type_0)


def test_case_8():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_9():
    config_0 = module_0.Config()
    var_0 = config_0.load_environment_vars()
    var_1 = var_0.__repr__()
    config_0.update_config(var_1)


def test_case_10():
    config_0 = module_0.Config()
    none_type_0 = None
    none_type_1 = config_0.register_type(none_type_0)
    config_0.register_type(none_type_0)


def test_case_11():
    str_0 = "S"
    bool_0 = False
    config_0 = module_0.Config(env_prefix=str_0, keep_alive=bool_0, converters=bool_0)
    none_type_0 = config_0.register_type(bool_0)
    var_0 = config_0.update_config(config_0)
    var_0.update_config(bool_0)
