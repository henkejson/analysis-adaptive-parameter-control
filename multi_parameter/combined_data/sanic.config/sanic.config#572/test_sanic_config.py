# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import inspect as module_1


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    bool_0 = True
    module_0.Config(keep_alive=bool_0, converters=bool_0)


def test_case_2():
    bytes_0 = b"\n\x1e\x946\xa0\xe8\xa3"
    config_0 = module_0.Config(keep_alive=bytes_0, converters=bytes_0)


def test_case_3():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0, converters=none_type_0)


def test_case_4():
    int_0 = -2437
    config_0 = module_0.Config(keep_alive=int_0)
    config_0.update_config(int_0)


def test_case_5():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_6():
    bytes_0 = b"\n\x1e\x946\xa0\xe8\xa3"
    config_0 = module_0.Config(keep_alive=bytes_0, converters=bytes_0)
    config_0.update_config(bytes_0)


def test_case_7():
    bytes_0 = b"\n\x1e\x946\xa0\xe8\xa3"
    config_0 = module_0.Config(keep_alive=bytes_0, converters=bytes_0)
    bool_0 = True
    none_type_0 = config_0.register_type(bool_0)
    config_0.register_type(bool_0)


def test_case_8():
    bytes_0 = b"\n\xa9\x946\xa0\xa5\xe8\xa3"
    config_0 = module_0.Config(keep_alive=bytes_0, converters=bytes_0)
    var_0 = config_0.update_config(config_0)
    config_0.__getattr__(var_0)


def test_case_9():
    none_type_0 = None
    config_0 = module_0.Config(
        env_prefix=none_type_0, keep_alive=none_type_0, converters=none_type_0
    )
    str_0 = "S"
    var_0 = config_0.load_environment_vars(str_0)


def test_case_10():
    none_type_0 = None
    config_0 = module_0.Config(none_type_0)
    config_0.__getattr__(config_0)


def test_case_11():
    none_type_0 = None
    str_0 = "S"
    config_0 = module_0.Config(none_type_0, str_0)
    config_0.update_config(none_type_0)


def test_case_12():
    bytes_0 = b"\n\x1e\x946\xa0\xe8\xa3"
    config_0 = module_0.Config(keep_alive=bytes_0, converters=bytes_0)
    var_0 = config_0.update_config(config_0)
    config_1 = module_0.Config(config_0)
    config_0.update_config(var_0)


def test_case_13():
    bytes_0 = b"\n\x1e\x946\xa0\xe8\xa3"
    config_0 = module_0.Config(keep_alive=bytes_0, converters=bytes_0)
    str_0 = "LOCAL_CERT_CREATOR"
    config_0.__setitem__(str_0, config_0)


def test_case_14():
    bytes_0 = b"\n\x1e\x946\xa0\xe8\xa3"
    config_0 = module_0.Config(keep_alive=bytes_0, converters=bytes_0)
    str_0 = "S"
    config_0.load_environment_vars(str_0)


def test_case_15():
    none_type_0 = None
    var_0 = module_1.isdatadescriptor(none_type_0)
    str_0 = "_FALLBACK_ERROR_FORMAT"
    str_1 = "REAL_IP_HEADER"
    dict_0 = {str_0: str_0, str_1: str_1}
    module_0.Config(dict_0)


def test_case_16():
    none_type_0 = None
    none_type_1 = None
    config_0 = module_0.Config(
        env_prefix=none_type_0, keep_alive=none_type_1, converters=none_type_1
    )
    str_0 = "_"
    var_0 = config_0.load_environment_vars(str_0)
    var_0.load_environment_vars()
