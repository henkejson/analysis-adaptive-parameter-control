# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import inspect as module_1


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    str_0 = "5hIuo3zPx#K"
    config_0 = module_0.Config(env_prefix=str_0, keep_alive=str_0, converters=str_0)


def test_case_2():
    str_0 = ""
    bool_0 = True
    config_0 = module_0.Config(env_prefix=str_0, keep_alive=bool_0)


def test_case_3():
    int_0 = 1459
    str_0 = "3A)8&EdSag9:"
    dict_0 = {str_0: str_0, str_0: str_0}
    config_0 = module_0.Config(dict_0)
    config_0.__setitem__(int_0, int_0)


def test_case_4():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_5():
    config_0 = module_0.Config()
    set_0 = set()
    config_0.update_config(set_0)


def test_case_6():
    str_0 = ""
    bool_0 = True
    config_0 = module_0.Config(env_prefix=str_0, keep_alive=bool_0)
    none_type_0 = config_0.register_type(config_0)


def test_case_7():
    str_0 = "S"
    bool_0 = False
    config_0 = module_0.Config(env_prefix=str_0, keep_alive=bool_0)


def test_case_8():
    config_0 = module_0.Config()
    set_0 = module_1.getmembers(config_0)
    config_0.update_config(set_0)


def test_case_9():
    config_0 = module_0.Config()
    set_0 = config_0.update_config(config_0)
    config_0.__getattr__(config_0)


def test_case_10():
    str_0 = "\n~4wg~!"
    str_1 = "5hIuo3zPx#K"
    config_0 = module_0.Config(env_prefix=str_1, keep_alive=str_1, converters=str_1)
    module_0.Config(env_prefix=str_1, converters=str_0)


def test_case_11():
    str_0 = "S"
    bool_0 = False
    config_0 = module_0.Config(env_prefix=str_0, keep_alive=bool_0)
    config_0.update_config(str_0)


def test_case_12():
    str_0 = ""
    config_0 = module_0.Config(env_prefix=str_0, keep_alive=str_0)
    config_0.load_environment_vars(str_0)


def test_case_13():
    str_0 = "w?]n\t2.0f2"
    config_0 = module_0.Config(env_prefix=str_0)
    str_1 = "_"
    bool_0 = False
    config_1 = module_0.Config(env_prefix=str_1, keep_alive=bool_0)
    var_0 = config_1.update_config(config_1)
    config_1.update_config(bool_0)
