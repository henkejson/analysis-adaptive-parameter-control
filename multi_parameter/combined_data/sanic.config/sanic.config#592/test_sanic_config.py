# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import sanic.http.http1 as module_1
import inspect as module_2


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    complex_0 = 403.7 + 685.785j
    module_0.Config(converters=complex_0)


def test_case_2():
    bool_0 = True
    config_0 = module_0.Config(keep_alive=bool_0)


def test_case_3():
    none_type_0 = None
    bytes_0 = b"Request Entity Too Large"
    dict_0 = {bytes_0: bytes_0}
    str_0 = "Used to register named middleqare (middleware typically on blueprints)\n\n        Args:\n            middleware (Callable): A callable that takes in a request.\n            route_names (Iterable[str]): The route names to attach the\n                middleware to.\n            attach_to (str): Whether to attach to request or response.\n                Defaults to `'request'`.\n            priority (int): The priority level of the middleware.\n                Lower numbers are executed first. Defaults to `0`.\n\n        Returns:\n            Union[Callable, Callable[[Callable], Callable]]: The decorated\n                middleware function or a partial function depending on how\n                the method was called.\n        "
    config_0 = module_0.Config(keep_alive=str_0, converters=dict_0)
    none_type_1 = config_0.__setitem__(str_0, none_type_0)
    module_0.Config(bytes_0)


def test_case_4():
    str_0 = "P"
    config_0 = module_0.Config(env_prefix=str_0)
    module_1.Http(config_0)


def test_case_5():
    str_0 = "P>e{-:"
    bool_0 = True
    config_0 = module_0.Config(keep_alive=bool_0)
    none_type_0 = config_0.register_type(str_0)


def test_case_6():
    str_0 = "P"
    config_0 = module_0.Config(env_prefix=str_0)
    str_0.update_config(str_0)


def test_case_7():
    str_0 = "P>e{-1"
    bool_0 = True
    module_0.Config(env_prefix=bool_0, converters=str_0)


def test_case_8():
    none_type_0 = None
    bool_0 = False
    config_0 = module_0.Config(keep_alive=bool_0)
    config_0.update_config(none_type_0)


def test_case_9():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_10():
    str_0 = "upgrade"
    config_0 = module_0.Config(env_prefix=str_0)


def test_case_11():
    dict_0 = {}
    config_0 = module_0.Config(env_prefix=dict_0)


def test_case_12():
    str_0 = " \t))lJxM<"
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=str_0, converters=none_type_0)
    str_1 = "qYdz%CBn"
    config_0.update_config(str_1)


def test_case_13():
    config_0 = module_0.Config()
    config_0.__getattr__(config_0)


def test_case_14():
    none_type_0 = None
    config_0 = module_0.Config(none_type_0, keep_alive=none_type_0)
    none_type_1 = config_0.register_type(config_0)
    var_0 = config_0.update_config(config_0)
    config_1 = module_0.Config(env_prefix=var_0)
    config_0.register_type(config_0)


def test_case_15():
    str_0 = "_"
    config_0 = module_0.Config(env_prefix=str_0)
    var_0 = config_0.update_config(config_0)
    config_0.__getattr__(var_0)


def test_case_16():
    str_0 = "P"
    dict_0 = {}
    var_0 = module_2.getmembers(dict_0)
    module_0.Config(dict_0, str_0, converters=var_0)
