# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0, keep_alive=none_type_0)


def test_case_2():
    none_type_0 = None
    config_0 = module_0.Config(none_type_0, keep_alive=none_type_0)
    config_1 = module_0.Config(config_0, none_type_0)
    var_0 = config_1.update_config(config_1)


def test_case_3():
    str_0 = "M"
    none_type_0 = None
    config_0 = module_0.Config(converters=none_type_0)
    config_0.update_config(str_0)


def test_case_4():
    config_0 = module_0.Config()
    config_1 = module_0.Config(converters=config_0)


def test_case_5():
    str_0 = "J"
    config_0 = module_0.Config(converters=str_0)
    config_1 = module_0.Config(env_prefix=str_0, keep_alive=config_0)
    set_0 = {str_0}
    config_0.update_config(set_0)


def test_case_6():
    str_0 = ""
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    config_0 = module_0.Config(dict_0, str_0)
    none_type_0 = config_0.__setitem__(str_0, config_0)
    config_0.load_environment_vars(str_0)


def test_case_7():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_8():
    str_0 = "Setup Sanic Extensions.\n\n    Requires Sanic Extensions to be installed.\n\n    Args:\n        app (Sanic): Sanic application.\n        fail (bool, optional): Raise an error if Sanic Extensions is not\n            installed. Defaults to `False`.\n        **kwargs: Keyword arguments to pass to `sanic_ext.Extend`.\n\n    Returns:\n        sanic_ext.Extend: Sanic Extensions instance.\n    "
    module_0.Config(converters=str_0)


def test_case_9():
    none_type_0 = None
    config_0 = module_0.Config(keep_alive=none_type_0)
    bool_0 = False
    config_0.__getattr__(bool_0)


def test_case_10():
    none_type_0 = None
    config_0 = module_0.Config(none_type_0, keep_alive=none_type_0)
    config_1 = module_0.Config(keep_alive=config_0)
    var_0 = config_1.update_config(config_1)


def test_case_11():
    str_0 = "Q}15Z"
    none_type_0 = None
    config_0 = module_0.Config(
        env_prefix=str_0, keep_alive=none_type_0, converters=none_type_0
    )
    config_0.__getattr__(config_0)


def test_case_12():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0)
    config_0.update_config(none_type_0)


def test_case_13():
    str_0 = ""
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    config_0 = module_0.Config(dict_0, str_0)
    config_0.load_environment_vars(str_0)


def test_case_14():
    none_type_0 = None
    config_0 = module_0.Config(none_type_0, keep_alive=none_type_0)
    config_1 = module_0.Config(keep_alive=config_0)
    str_0 = "_FALLBACK_ERROR_FORMAT"
    str_1 = "--debug"
    none_type_1 = config_1.__setitem__(str_0, str_1)
    module_0.Config(config_1, converters=none_type_0)
