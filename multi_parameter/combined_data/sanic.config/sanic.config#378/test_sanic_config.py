# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    str_0 = ""
    bool_0 = True
    config_0 = module_0.Config(keep_alive=bool_0)
    config_1 = module_0.Config(env_prefix=str_0, keep_alive=str_0)
    config_2 = module_0.Config()
    config_1.update_config(bool_0)


def test_case_2():
    str_0 = "L"
    config_0 = module_0.Config(env_prefix=str_0)


def test_case_3():
    bytes_0 = b")k'\xda\xabt\xe0\xccr"
    none_type_0 = None
    module_0.Config(bytes_0, converters=none_type_0)


def test_case_4():
    bool_0 = False
    config_0 = module_0.Config(keep_alive=bool_0)
    bool_1 = False
    config_1 = module_0.Config(bool_1)
    bytes_0 = b"\\\xb1XM\x9d\xedB \t\x19/U\xd1"
    none_type_0 = config_0.register_type(config_1)
    var_0 = config_1.update_config(config_1)
    config_1.__getattr__(bytes_0)


def test_case_5():
    bytes_0 = b"B\x11\n]d\xd2j\xe7\xaf*\x13\xa9\xe8\x8a\x15\xa4\xccQ"
    config_0 = module_0.Config(converters=bytes_0)
    str_0 = "L"
    config_1 = module_0.Config(env_prefix=str_0, keep_alive=str_0)
    config_2 = module_0.Config()
    config_1.update_config(str_0)


def test_case_6():
    bytes_0 = b"\\\xb1XM\x9d\xedB \t\x19/U\xd1"
    config_0 = module_0.Config(converters=bytes_0)


def test_case_7():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_8():
    bytes_0 = b"\\\xb1XM\x9d\xedB \t\x19/U\xd1"
    config_0 = module_0.Config(converters=bytes_0)
    none_type_0 = None
    config_0.update_config(none_type_0)


def test_case_9():
    config_0 = module_0.Config()
    config_0.__getattr__(config_0)


def test_case_10():
    str_0 = ""
    bool_0 = True
    config_0 = module_0.Config(keep_alive=bool_0)
    config_1 = module_0.Config(env_prefix=str_0, keep_alive=str_0)
    none_type_0 = config_1.register_type(config_1)
    config_1.register_type(config_1)


def test_case_11():
    str_0 = "L"
    bool_0 = True
    config_0 = module_0.Config()
    config_1 = module_0.Config(keep_alive=bool_0)
    module_0.Config(env_prefix=str_0, keep_alive=str_0, converters=config_0)


def test_case_12():
    str_0 = "_"
    bool_0 = True
    config_0 = module_0.Config(keep_alive=bool_0)
    config_1 = module_0.Config(env_prefix=str_0, keep_alive=str_0)
    var_0 = config_1.load_environment_vars()
    var_0.respond(bool_0)


def test_case_13():
    str_0 = "L"
    bool_0 = True
    config_0 = module_0.Config()
    config_1 = module_0.Config(keep_alive=bool_0)
    config_2 = module_0.Config(env_prefix=str_0, keep_alive=str_0)
    var_0 = config_2.load_environment_vars()
    none_type_0 = None
    none_type_1 = config_2.register_type(none_type_0)
    str_1 = "LOCAL_CERT_CREATOR"
    config_2.__setitem__(str_1, none_type_1)
