# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import inspect as module_1
import sanic.http.http1 as module_2
import abc as module_3


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    str_0 = "Retrieve the current request object\n\n        This implements [Context Variables](https://docs.python.org/3/library/contextvars.html)\n        to allow for accessing the current request from anywhere.\n\n        A typical usecase is when you want to access the current request\n        from a function that is not a handler, such as a logging function:\n\n        ```python\n        import logging\n\n        class LoggingFormater(logging.Formatter):\n            def format(self, record):\n                request = Request.get_current()\n                record.url = request.url\n                record.ip = request.ip\n                return super().format(record)\n        ```\n\n        Returns:\n            Request: The current request object\n\n        Raises:\n            sanic.exceptions.ServerError: If it is outside of a request\n                lifecycle.\n        "
    config_0 = module_0.Config(env_prefix=str_0)
    var_0 = module_1.isclass(str_0)
    module_2.Http(var_0)


def test_case_2():
    str_0 = '"r}c63rl/5xO6'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    none_type_0 = None
    config_0 = module_0.Config(dict_0, keep_alive=none_type_0, converters=dict_0)


def test_case_3():
    config_0 = module_0.Config()
    module_2.Http(config_0)


def test_case_4():
    config_0 = module_0.Config()
    var_0 = config_0.load_environment_vars()
    none_type_0 = None
    config_1 = module_0.Config(keep_alive=config_0, converters=none_type_0)
    str_0 = "q7\x0bL"
    none_type_1 = config_0.__setitem__(str_0, config_1)
    none_type_2 = None
    config_1.update_config(none_type_2)


def test_case_5():
    config_0 = module_0.Config()
    str_0 = ""
    config_0.update_config(str_0)


def test_case_6():
    bool_0 = False
    config_0 = module_0.Config(env_prefix=bool_0)
    config_1 = module_0.Config()
    bytes_0 = b"\x0f\x1e\x1f\x18\x9d2\x8d#\xab\xdbl\xea\xf0\xdf\xe1B\xec\xe6NX"
    config_1.update(*bytes_0)


def test_case_7():
    config_0 = module_0.Config()
    none_type_0 = None
    config_0.update_config(none_type_0)


def test_case_8():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_9():
    bool_0 = True
    config_0 = module_0.Config(keep_alive=bool_0)


def test_case_10():
    config_0 = module_0.Config()
    config_1 = module_0.Config()
    config_0.__getattr__(config_1)


def test_case_11():
    config_0 = module_0.Config()
    none_type_0 = config_0.update(**config_0)


def test_case_12():
    str_0 = "OR-){f?"
    config_0 = module_0.Config(env_prefix=str_0)
    str_1 = "LOCAL_CERT_CREATOR"
    config_0.__setattr__(str_1, str_1)


def test_case_13():
    none_type_0 = None
    config_0 = module_0.Config(keep_alive=none_type_0)
    none_type_1 = config_0.register_type(none_type_0)
    config_0.register_type(none_type_0)


def test_case_14():
    none_type_0 = None
    none_type_1 = None
    config_0 = module_0.Config(none_type_0, keep_alive=none_type_1)
    str_0 = ""
    config_0.load_environment_vars(str_0)


def test_case_15():
    none_type_0 = None
    config_0 = module_0.Config(keep_alive=none_type_0)
    str_0 = "G"
    var_0 = config_0.load_environment_vars(str_0)
    module_3.ABCMeta()


def test_case_16():
    none_type_0 = None
    config_0 = module_0.Config(keep_alive=none_type_0)
    str_0 = "G"
    none_type_1 = None
    none_type_2 = config_0.register_type(none_type_1)
    config_0.load_environment_vars(str_0)
