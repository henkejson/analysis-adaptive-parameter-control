# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import inspect as module_1


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    str_0 = "(\x0cTk]a`*qY"
    bytes_0 = b"\xe3\xf2\x88"
    list_0 = [bytes_0]
    config_0 = module_0.Config(keep_alive=list_0, converters=list_0)
    config_0.__getattr__(str_0)


def test_case_2():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0)
    int_0 = -2790
    none_type_1 = config_0.register_type(int_0)
    config_0.__getattr__(none_type_1)


def test_case_3():
    str_0 = 'Q"=-'
    float_0 = 89.384814
    str_1 = "\x0b&nXl\x0b//s\\(~LT"
    dict_0 = {str_1: float_0, str_1: str_0}
    config_0 = module_0.Config(dict_0)
    none_type_0 = None
    var_0 = module_1.isclass(none_type_0)
    none_type_1 = None
    config_0.__getattr__(none_type_1)


def test_case_4():
    str_0 = "Return all regex routes in the router.\n\n        _Regex routes are routes that contain path parameters with regex\n        expressions, or otherwise need regex to resolve._\n\n        Returns:\n            Dict[Tuple[str, ...], Route]: a dictionary of routes\n        "
    none_type_0 = None
    config_0 = module_0.Config()
    none_type_1 = config_0.__setitem__(str_0, none_type_0)


def test_case_5():
    str_0 = "(\x0cTk]a`*qY"
    config_0 = module_0.Config(env_prefix=str_0)
    bytes_0 = b"\xe3\xf2\x88"
    list_0 = [bytes_0]
    config_1 = module_0.Config(keep_alive=list_0, converters=list_0)
    config_1.__getattr__(str_0)


def test_case_6():
    config_0 = module_0.Config()
    none_type_0 = config_0.update(**config_0)


def test_case_7():
    none_type_0 = None
    config_0 = module_0.Config(
        none_type_0, keep_alive=none_type_0, converters=none_type_0
    )
    none_type_1 = config_0.update_config(config_0)


def test_case_8():
    none_type_0 = None
    config_0 = module_0.Config(
        none_type_0, keep_alive=none_type_0, converters=none_type_0
    )
    config_0.update_config(none_type_0)


def test_case_9():
    none_type_0 = None
    config_0 = module_0.Config(
        none_type_0, keep_alive=none_type_0, converters=none_type_0
    )
    config_0.__getattr__(config_0)


def test_case_10():
    str_0 = 'Q"=-'
    config_0 = module_0.Config(converters=str_0)
    config_0.update_config(str_0)


def test_case_11():
    str_0 = "}q<nP}L?"
    module_0.Config(converters=str_0)


def test_case_12():
    str_0 = "S"
    config_0 = module_0.Config(env_prefix=str_0, keep_alive=str_0)
    none_type_0 = None
    str_1 = "You are requesting to run Sanic using uvloop, but the install-time 'SANIC_NO_UVLOOP' environment variable (used to opt-out of installing uvloop with Sanic) is set to true. If you want to prevent Sanic from overriding the event loop policy during runtime, set the 'USE_UVLOOP' configuration value to false."
    var_0 = module_1.isdatadescriptor(str_1)
    str_2 = "(oU6 R@!F|OCT"
    none_type_0.respond(str_2)


def test_case_13():
    str_0 = "S"
    module_0.Config(env_prefix=str_0, converters=str_0)
