# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    str_0 = 'u"-1}b\r}1gt3J'
    module_0.Config(converters=str_0)


def test_case_2():
    float_0 = 1229.3
    config_0 = module_0.Config(keep_alive=float_0)
    config_0.update_config(float_0)


def test_case_3():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0, converters=none_type_0)
    none_type_1 = config_0.update(**config_0)


def test_case_4():
    int_0 = 1404
    module_0.Config(int_0)


def test_case_5():
    none_type_0 = None
    config_0 = module_0.Config(keep_alive=none_type_0, converters=none_type_0)
    config_0.__getattr__(none_type_0)


def test_case_6():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_7():
    none_type_0 = None
    config_0 = module_0.Config(none_type_0)
    var_0 = config_0.update_config(config_0)
    config_0.__setitem__(none_type_0, none_type_0)


def test_case_8():
    str_0 = "ikbI<e+"
    dict_0 = {str_0: str_0}
    config_0 = module_0.Config(dict_0, converters=str_0)
    config_1 = module_0.Config()
    config_1.load_environment_vars(config_1)


def test_case_9():
    str_0 = "v<k*8='RIv"
    config_0 = module_0.Config(env_prefix=str_0)
    none_type_0 = config_0.__setitem__(str_0, config_0)
    float_0 = 1229.3
    config_1 = module_0.Config(keep_alive=float_0)
    config_1.update_config(float_0)


def test_case_10():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)
    config_0.__getattr__(config_0)


def test_case_11():
    none_type_0 = None
    str_0 = "\n\nTo start running a Sanic application, provide a path to the module, where\napp is a Sanic() instance in the global scope:\n\n    $ sanic path.to.server:app\n\nIf the Sanic instance variable is called 'app', you can leave off the last\npart, and only provide a path to the module where the instance is:\n\n    $ sanic path.to.server\n\nOr, a path to a callable that returns a Sanic() instance:\n\n    $ sanic path.to.factory:create_app\n\nOr, a path to a directory to run as a simple HTTP server:\n\n    $ sanic ./path/to/static\n"
    config_0 = module_0.Config(none_type_0, str_0, str_0, converters=none_type_0)
    config_0.update_config(str_0)


def test_case_12():
    config_0 = module_0.Config()
    list_0 = [config_0, config_0, config_0]
    config_0.update_config(list_0)


def test_case_13():
    float_0 = 1229.3
    none_type_0 = None
    config_0 = module_0.Config(none_type_0)
    config_1 = module_0.Config(keep_alive=none_type_0)
    config_2 = module_0.Config(env_prefix=none_type_0)
    dict_0 = {float_0: config_1}
    none_type_1 = config_0.register_type(dict_0)
    config_3 = module_0.Config(
        env_prefix=none_type_1, keep_alive=none_type_1, converters=none_type_0
    )
    str_0 = "LOCAL_CERT_CREATOR"
    config_3.__setattr__(str_0, config_3)
