# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import inspect as module_1


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    none_type_0 = None
    var_0 = module_1.isdatadescriptor(none_type_0)
    config_0 = module_0.Config(keep_alive=var_0, converters=var_0)
    var_0.respond(none_type_0)


def test_case_2():
    str_0 = "G"
    none_type_0 = None
    module_0.Config(env_prefix=str_0, keep_alive=none_type_0, converters=str_0)


def test_case_3():
    list_0 = []
    config_0 = module_0.Config(env_prefix=list_0)
    config_1 = module_0.Config()
    none_type_0 = None
    config_1.respond(none_type_0)


def test_case_4():
    list_0 = []
    config_0 = module_0.Config(env_prefix=list_0)
    config_0.__getattr__(list_0)


def test_case_5():
    config_0 = module_0.Config()
    none_type_0 = None
    config_0.update_config(none_type_0)


def test_case_6():
    list_0 = []
    config_0 = module_0.Config(env_prefix=list_0)
    none_type_0 = config_0.register_type(list_0)
    config_1 = module_0.Config()
    bytes_0 = b"\xa8\xcao\xfb\x0c>\xa8\x8d\xde\\[3\xf5 \xe5\xb1\xcc"
    config_0.update_config(bytes_0)


def test_case_7():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_8():
    str_0 = "ZI"
    dict_0 = {str_0: str_0}
    config_0 = module_0.Config(dict_0, keep_alive=dict_0)
    str_1 = "YS:F&"
    none_type_0 = None
    config_1 = module_0.Config(keep_alive=str_1, converters=str_1)
    config_1.__getattr__(none_type_0)


def test_case_9():
    str_0 = "YS:F&"
    none_type_0 = None
    config_0 = module_0.Config(keep_alive=str_0, converters=str_0)
    str_1 = "w8"
    none_type_1 = config_0.__setitem__(str_1, str_1)
    config_0.__getattr__(none_type_0)


def test_case_10():
    str_0 = "se0H4w,,qgl(HXJy"
    module_0.Config(keep_alive=str_0, converters=str_0)


def test_case_11():
    str_0 = "YS:F&"
    config_0 = module_0.Config(keep_alive=str_0, converters=str_0)
    bool_0 = True
    str_1 = "LOCAL_CERT_CREATOR"
    set_0 = {bool_0, bool_0}
    config_0.__setitem__(str_1, set_0)
