# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import sanic.http.stream as module_1
import inspect as module_2
import sanic.http.http1 as module_3


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    stream_0 = module_1.Stream()
    var_0 = module_2.isdatadescriptor(stream_0)
    config_0 = module_0.Config(keep_alive=var_0, converters=var_0)
    config_0.update_config(var_0)


def test_case_2():
    str_0 = "EC\n=Q[\t"
    none_type_0 = None
    module_0.Config(str_0, none_type_0)


def test_case_3():
    str_0 = "J\nMKXg"
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=str_0, converters=none_type_0)
    float_0 = 787.521
    none_type_1 = None
    config_1 = module_0.Config(keep_alive=none_type_0, converters=none_type_1)
    config_0.__getattr__(float_0)


def test_case_4():
    str_0 = "Sorry, you cannot currently use trustme as a local certificate generator for an HTTP/3 server. This is not yet supported. You should be able to use mkcert instead. For more information, see: https://github.com/aiortc/aioquic/issues/295."
    str_1 = "C;8$OR0j\t"
    none_type_0 = None
    config_0 = module_0.Config(keep_alive=str_1, converters=none_type_0)
    config_0.update_config(str_0)


def test_case_5():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_6():
    stream_0 = module_1.Stream()
    var_0 = module_2.getmembers(stream_0)
    config_0 = module_0.Config(keep_alive=var_0, converters=var_0)
    config_0.update_config(var_0)


def test_case_7():
    config_0 = module_0.Config()
    config_1 = module_0.Config()
    var_0 = config_1.update_config(config_1)
    none_type_0 = None
    config_1.__setitem__(var_0, none_type_0)


def test_case_8():
    config_0 = module_0.Config()
    str_0 = "C;8$OR0j\t"
    config_1 = module_0.Config(env_prefix=str_0, keep_alive=str_0)
    str_1 = "fts$ZS\n7=n@rX{v\rm{"
    module_3.Http(str_1)


def test_case_9():
    config_0 = module_0.Config()
    none_type_0 = None
    config_0.update_config(none_type_0)


def test_case_10():
    str_0 = "J\nMKXg"
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=str_0, converters=none_type_0)
    config_0.__getattr__(config_0)


def test_case_11():
    str_0 = "C;8$OR0l\t"
    none_type_0 = None
    config_0 = module_0.Config(keep_alive=str_0, converters=none_type_0)
    config_1 = module_0.Config(env_prefix=str_0, keep_alive=str_0)
    str_1 = "fts$ZS\n.=C@rX{v\rm{"
    module_0.Config(config_0, converters=str_1)


def test_case_12():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0, converters=none_type_0)
    str_0 = "C;8$OR0j\t"
    none_type_1 = None
    config_1 = module_0.Config(keep_alive=str_0, converters=none_type_1)
    config_1.update_config(str_0)


def test_case_13():
    config_0 = module_0.Config()
    str_0 = "LOCAL_CERT_CREATOR"
    config_0.__setattr__(str_0, str_0)
