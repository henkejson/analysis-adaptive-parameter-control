# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import inspect as module_1


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    bool_0 = True
    module_0.Config(env_prefix=bool_0)


def test_case_2():
    str_0 = "FORWARDED_FOR_HEADER"
    str_1 = "05EIU>"
    str_2 = "_CONVERTERS"
    dict_0 = {str_0: str_0, str_1: str_0, str_2: str_0}
    config_0 = module_0.Config(dict_0)


def test_case_3():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_4():
    int_0 = 53
    config_0 = module_0.Config()
    config_0.update_config(int_0)


def test_case_5():
    str_0 = "S"
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=str_0, keep_alive=none_type_0)


def test_case_6():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)
    config_0.__getattr__(var_0)


def test_case_7():
    bytes_0 = b"\x87\xce\x1d@\xac\x8b\xd9\x85\n\x00"
    bytes_1 = b"K\x10\xce\xd6d\xb1\xba\xe0@\xfa\xb4"
    config_0 = module_0.Config(converters=bytes_1)
    config_0.update_config(bytes_0)


def test_case_8():
    str_0 = "fwbscket_ma_siz"
    var_0 = module_1.isclass(str_0)
    module_0.Config(keep_alive=var_0, converters=str_0)


def test_case_9():
    config_0 = module_0.Config()
    config_0.__getattr__(config_0)


def test_case_10():
    str_0 = "S"
    config_0 = module_0.Config(env_prefix=str_0, keep_alive=str_0)


def test_case_11():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)
    config_1 = module_0.Config(env_prefix=var_0, keep_alive=var_0)
    config_0.__getattr__(config_0)


def test_case_12():
    config_0 = module_0.Config()
    str_0 = "_FALLBACK_ERROR_FORMAT"
    none_type_0 = config_0.__setitem__(str_0, config_0)
    list_0 = [config_0, config_0]
    none_type_1 = config_0.update(*list_0, **config_0)
    module_0.Config(config_0)


def test_case_13():
    str_0 = "S"
    module_0.Config(env_prefix=str_0, keep_alive=str_0, converters=str_0)


def test_case_14():
    str_0 = "_"
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=str_0, keep_alive=none_type_0)
    var_0 = config_0.update_config(config_0)
    var_0.register(var_0, config_0)
