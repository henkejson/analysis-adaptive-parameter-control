# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import inspect as module_1


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    str_0 = "websocket_max_size"
    module_0.Config(converters=str_0)


def test_case_2():
    str_0 = 'Decorate a function handler to create a route definition using the **OPTIONS** HTTP method.\n\n        Args:\n            uri (str): URL to be tagged to OPTIONS method of HTTP.\n            host (Optional[Union[str, List[str]]]): Host IP or FQDN for\n                the service to use.\n            strict_slashes (Optional[bool]): Instruct Sanic to check if the\n                request URLs need to terminate with a `/`.\n            version (Optional[Union[int, str, float]]): API Version.\n            name (Optional[str]): Unique name that can be used to identify\n                the route.\n            ignore_body (bool): Whether the handler should ignore request\n                body. This means the body of the request, if sent, will not\n                be consumed. In that instance, you will see a warning in\n                the logs. Defaults to `True`, meaning do not consume the body.\n            version_prefix (str): URL path that should be before the version\n                value. Defaults to `"/v"`.\n            error_format (Optional[str]): Custom error format string.\n            **ctx_kwargs (Any): Keyword arguments that begin with a\n                `ctx_*` prefix will be appended to the route\n                context (`route.ctx`).\n\n        Returns:\n            RouteHandler: Object decorated with route method.\n        '
    config_0 = module_0.Config(env_prefix=str_0, keep_alive=str_0)
    str_1 = "sanic_type"
    none_type_0 = None
    config_1 = module_0.Config(none_type_0, converters=none_type_0)
    none_type_1 = None
    none_type_2 = config_1.__setitem__(str_1, config_1)
    str_2 = "#E8'&7rR{]bvT&IqoHq"
    none_type_3 = config_1.__setitem__(str_2, str_0)
    var_0 = config_1.load_environment_vars()
    config_1.__getattr__(none_type_1)


def test_case_3():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0)


def test_case_4():
    str_0 = 'Decorate a function handler to create a route definition using the **OPTIONS** HTTP method.\n\n        Args:\n            uri (str): URL to be tagged to OPTIONS method of HTTP.\n            host (Optional[Union[str, List[str]]]): Host IP or FQDN for\n                the service to use.\n            strict_slashes (Optional[bool]): Instruct Sanic to check if the\n                request URLs need to terminate with a `/`.\n            version (Optional[Union[int, str, float]]): API Version.\n            name (Optional[str]): Unique name that can be used to identify\n                the route.\n            ignore_body (bool): Whether the handler should ignore request\n                body. This means the body of the request, if sent, will not\n                be consumed. In that instance, you will see a warning in\n                the logs. Defaults to `True`, meaning do not consume the body.\n            version_prefix (str): URL path that should be before the version\n                value. Defaults to `"/v"`.\n            error_format (Optional[str]): Custom error format string.\n            **ctx_kwargs (Any): Keyword arguments that begin with a\n                `ctx_*` prefix will be appended to the route\n                context (`route.ctx`).\n\n        Returns:\n            RouteHandler: Object decorated with route method.\n        '
    config_0 = module_0.Config(env_prefix=str_0, keep_alive=str_0)
    str_1 = "sanic_type"
    module_0.Config(str_1)


def test_case_5():
    bool_0 = True
    config_0 = module_0.Config()
    config_0.__getattr__(bool_0)


def test_case_6():
    config_0 = module_0.Config()
    bytes_0 = b"\x15\x0c\x87\x04\xb7\n\xb8\xfd53\xe5\xb2\x19\xab\xb0\x9c"
    var_0 = module_1.isdatadescriptor(bytes_0)
    config_0.__getattr__(config_0)


def test_case_7():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_8():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)
    str_0 = "Ignorning invalid If-Modified-Since header received: '%s'"
    none_type_0 = config_0.__setitem__(str_0, config_0)
    module_0.DescriptorMeta(config_0)


def test_case_9():
    str_0 = "Ignorning invalid If-Modified-Since header received: '%s'"
    none_type_0 = None
    config_0 = module_0.Config(none_type_0, str_0, none_type_0, converters=none_type_0)
    var_0 = config_0.update_config(config_0)


def test_case_10():
    str_0 = ">I"
    bytes_0 = b"\xd1\x8c\x16L\xcbR\xa1\xe5\xa2"
    config_0 = module_0.Config(converters=str_0)
    config_0.update_config(bytes_0)


def test_case_11():
    none_type_0 = None
    config_0 = module_0.Config()
    config_0.update_config(none_type_0)
