# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import inspect as module_1


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    str_0 = "6Vv\nVh{I7Lf{8"
    module_0.Config(env_prefix=str_0, converters=str_0)


def test_case_2():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)
    config_1 = module_0.Config(env_prefix=var_0, converters=var_0)
    config_0.__getattr__(config_0)


def test_case_3():
    str_0 = "kh\nzq/!*z"
    dict_0 = {str_0: str_0}
    var_0 = module_1.isclass(str_0)
    bool_0 = False
    config_0 = module_0.Config(dict_0, converters=bool_0)
    var_1 = module_1.isclass(var_0)
    var_0.__subclasscheck__(var_1, str_0)


def test_case_4():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)
    var_1 = module_1.isdatadescriptor(config_0)
    none_type_0 = config_0.update()
    config_1 = module_0.Config()
    config_2 = module_0.Config(env_prefix=var_1, converters=var_0)
    config_2.__getattr__(var_0)


def test_case_5():
    none_type_0 = None
    config_0 = module_0.Config(converters=none_type_0)
    config_1 = module_0.Config(env_prefix=none_type_0, converters=config_0)
    module_0.Config(env_prefix=config_0)


def test_case_6():
    str_0 = "Send any pending response headers and the given data as body.\n\n        Args:\n            data (Optional[AnyStr], optional): str or bytes to be written. Defaults to `None`.\n            end_stream (Optional[bool], optional): whether to close the stream after this block. Defaults to `None`.\n        "
    config_0 = module_0.Config(keep_alive=str_0)
    config_0.__getattr__(config_0)


def test_case_7():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)
    config_0.__getattr__(config_0)


def test_case_8():
    config_0 = module_0.Config()
    str_0 = "9Oc{h0o"
    none_type_0 = config_0.__setitem__(str_0, config_0)
    config_0.update_config(none_type_0)


def test_case_9():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_10():
    config_0 = module_0.Config()
    var_0 = module_1.isclass(config_0)
    config_0.update_config(var_0)


def test_case_11():
    str_0 = "backslashreplace"
    str_1 = "c\t*(JXP"
    config_0 = module_0.Config(env_prefix=str_0)
    config_0.update_config(str_1)


def test_case_12():
    config_0 = module_0.Config()
    var_0 = module_1.getmembers(config_0)
    list_0 = [var_0]
    none_type_0 = config_0.update(*list_0)
    config_0.init_for_request()


def test_case_13():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)
    var_1 = module_1.getmembers(config_0)
    list_0 = [var_1]
    none_type_0 = config_0.update(*list_0)
    none_type_1 = config_0.register_type(var_1)
    module_1.getmembers(config_0, var_1)


def test_case_14():
    config_0 = module_0.Config()
    var_0 = module_1.getmembers(config_0)
    list_0 = [var_0]
    none_type_0 = config_0.update(*list_0)
    none_type_1 = config_0.register_type(var_0)
    none_type_2 = config_0.update(*list_0)
    config_0.__new__(var_0, var_0, config_0, config_0)


def test_case_15():
    str_0 = "LOCAL_CERT_CREATOR"
    str_1 = "__str__"
    config_0 = module_0.Config(env_prefix=str_1)
    config_0.__setitem__(str_0, str_1)
