# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import inspect as module_1
import sanic.constants as module_2
import sanic.utils as module_3


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    bool_0 = False
    config_0 = module_0.Config(keep_alive=bool_0, converters=bool_0)


def test_case_2():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0, keep_alive=none_type_0)


def test_case_3():
    config_0 = module_0.Config()
    var_0 = config_0.load_environment_vars()
    config_1 = module_0.Config(config_0)


def test_case_4():
    config_0 = module_0.Config()
    config_1 = module_0.Config()
    str_0 = "Issue extra data"
    none_type_0 = config_1.__setitem__(str_0, str_0)
    var_0 = module_1.isclass(config_0)
    var_1 = var_0.__repr__()
    config_0.__getattr__(var_1)


def test_case_5():
    config_0 = module_0.Config()
    none_type_0 = None
    str_0 = "ldyn^3[\rHOD:+Q,y"
    none_type_1 = config_0.__setitem__(str_0, str_0)
    config_0.update_config(none_type_0)


def test_case_6():
    str_0 = "One of your worker processes terminated before startup was completed. Please solve any errors experienced during startup. If you do not see an exception traceback in your error logs, try running Sanic in in a single process using --single-process or single_process=True. Once you are confident that the server is able to start without errors you can switch back to multiprocess mode."
    config_0 = module_0.Config(env_prefix=str_0)
    float_0 = 4658.112
    module_0.DescriptorMeta(float_0)


def test_case_7():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0, keep_alive=none_type_0)
    config_0.update_config(none_type_0)


def test_case_8():
    str_0 = "One of your worker processes terminated before startup was completed. Please solve any errors experienced during startup. If you do not see an exception traceback in your error logs, try running Sanic in in a single process using --single-process or single_process=True. Once you are confident that the server is able to start without errors you can switch back to multiprocess mode."
    config_0 = module_0.Config(env_prefix=str_0)
    config_0.update_config(str_0)


def test_case_9():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_10():
    config_0 = module_0.Config()
    config_1 = module_0.Config()
    str_0 = "Issue extra data"
    none_type_0 = None
    config_2 = module_0.Config(none_type_0, str_0, none_type_0)
    var_0 = module_2.LocalCertCreator.AUTO
    var_1 = module_1.isclass(none_type_0)
    none_type_1 = config_2.register_type(var_1)
    module_3.load_module_from_file_location(var_0, *var_0)


def test_case_11():
    config_0 = module_0.Config()
    config_0.__getattr__(config_0)


def test_case_12():
    config_0 = module_0.Config()
    config_1 = module_0.Config(converters=config_0)
    var_0 = config_0.update_config(config_0)
    var_0.update_config(var_0)


def test_case_13():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)
    none_type_0 = config_0.register_type(var_0)
    config_0.register_type(var_0)
