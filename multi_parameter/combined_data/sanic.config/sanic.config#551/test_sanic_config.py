# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import sanic.constants as module_1
import inspect as module_2
import sanic.http.http1 as module_3


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    str_0 = ",<<p|@[W\\)]S"
    str_1 = "LOCAL_CERT_CREATOR"
    float_0 = -339.91
    str_2 = "C.8hOo6/;J"
    dict_0 = {str_1: float_0, str_1: float_0, str_2: str_2}
    none_type_0 = None
    config_0 = module_0.Config(dict_0, keep_alive=none_type_0, converters=dict_0)
    none_type_1 = config_0.__setattr__(str_0, str_0)
    config_0.__setattr__(str_1, none_type_0)


def test_case_2():
    none_type_0 = None
    local_cert_creator_0 = module_1.LocalCertCreator.TRUSTME
    config_0 = module_0.Config(env_prefix=none_type_0, keep_alive=local_cert_creator_0)
    none_type_1 = None
    var_0 = module_2.getmembers(none_type_1)
    var_0.update_config(none_type_1)


def test_case_3():
    none_type_0 = None
    config_0 = module_0.Config(none_type_0)
    config_1 = module_0.Config(env_prefix=none_type_0)
    var_0 = module_2.isclass(config_1)
    var_0.respond(none_type_0)


def test_case_4():
    config_0 = module_0.Config()
    none_type_0 = None
    config_0.update_config(none_type_0)


def test_case_5():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_6():
    bytes_0 = b"Upgrade Required"
    module_0.Config(converters=bytes_0)


def test_case_7():
    config_0 = module_0.Config()
    module_3.Http(config_0)


def test_case_8():
    dict_0 = {}
    str_0 = ":A\\+IT}IB=}{"
    config_0 = module_0.Config(dict_0, keep_alive=str_0)
    config_1 = module_0.Config(env_prefix=dict_0)
    config_1.update_config(str_0)


def test_case_9():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)
    config_0.__getattr__(config_0)


def test_case_10():
    dict_0 = {}
    str_0 = ":A\\+IT}IB=}{"
    config_0 = module_0.Config(dict_0, keep_alive=str_0)
    config_1 = module_0.Config(env_prefix=dict_0)
    none_type_0 = config_1.register_type(config_0)
    var_0 = config_1.load_environment_vars()
    config_1.__setitem__(dict_0, config_1)


def test_case_11():
    str_0 = '\x0c#n.m"'
    bytes_0 = b"\t\x96\xe0\x0c\xd0q\x88"
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=str_0)
    config_1 = module_0.Config(converters=none_type_0)
    var_0 = module_2.isdatadescriptor(bytes_0)
    var_1 = module_2.getmembers(var_0)
    var_2 = var_0.__bool__()
    var_0.update()
