# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import inspect as module_1
import sanic.http.stream as module_2


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    str_0 = "The primary application "
    str_1 = "(sl([20ld"
    dict_0 = {str_0: str_0, str_1: str_1}
    none_type_0 = None
    config_0 = module_0.Config(dict_0, keep_alive=none_type_0, converters=dict_0)


def test_case_2():
    str_0 = "=!HDI"
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=str_0, converters=none_type_0)
    config_0.__getattr__(str_0)


def test_case_3():
    config_0 = module_0.Config()
    none_type_0 = None
    config_1 = module_0.Config(config_0, keep_alive=none_type_0)
    config_0.__setattr__(config_0, config_0)


def test_case_4():
    config_0 = module_0.Config()
    none_type_0 = config_0.update(**config_0)
    config_0.__subclasscheck__(config_0, config_0)


def test_case_5():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_6():
    bytes_0 = b")\x82\x00\xc1Wi\x89\xc6\xa9;-No\x01\x9a\xe9\xfc~"
    str_0 = "Instruct Sanic to manage a custom process.\n\n        Args:\n            ident (str): A name for the worker process\n            func (Callable[..., Any]): The function to call in the background process\n            kwargs (Dict[str, Any]): Arguments to pass to the function\n            transient (bool, optional): Whether to mark the process as transient. If `True`\n                then the Worker Manager will restart the process along\n                with any global restart (ex: auto-reload), defaults to `False`\n            restartable (Optional[bool], optional): Whether to mark the process as restartable. If\n                `True` then the Worker Manager will be able to restart the process\n                if prompted. If `transient=True`, this property will be implied\n                to be `True`, defaults to `None`\n            tracked (bool, optional): Whether to track the process after completion,\n                defaults to `True`\n            auto_start (bool, optional): Whether to start the process immediately, defaults to `True`\n            workers (int, optional): The number of worker processes to run. Defaults to `1`.\n\n\n        Returns:\n            Worker: The Worker instance\n        "
    str_1 = ""
    str_2 = "FT#PR(/BW/46 p"
    dict_0 = {str_1: str_1, str_0: str_1, str_2: str_2}
    config_0 = module_0.Config(dict_0)
    config_0.update_config(bytes_0)


def test_case_7():
    config_0 = module_0.Config()
    str_0 = "Convenience property for accessing Sanic Extensions.\n\n        This property is available if the `sanic-ext` package is installed.\n\n        See [Sanic Extensions](/en/plugins/sanic-ext/getting-started)\n            for details.\n\n        Returns:\n            Extend: The Sanic Extensions instance.\n\n        Examples:\n            A typical use case might be for registering a dependency injection.\n            ```python\n            app.ext.dependency(SomeObject())\n            ```\n        "
    none_type_0 = None
    none_type_1 = config_0.__setitem__(str_0, none_type_0)


def test_case_8():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0, keep_alive=none_type_0)
    config_1 = module_0.Config()
    var_0 = module_1.isdatadescriptor(config_1)
    var_0.__getattr__(config_0)


def test_case_9():
    str_0 = "_FALLBACK_ERROR_FORMAT"
    str_1 = "(sl([20ld"
    dict_0 = {str_0: str_0, str_1: str_1}
    module_0.Config(dict_0, keep_alive=str_1)


def test_case_10():
    none_type_0 = None
    config_0 = module_0.Config(none_type_0, converters=none_type_0)
    config_0.__getattr__(config_0)


def test_case_11():
    str_0 = "'B"
    str_1 = "LOCAL_CERT_CREATOR"
    config_0 = module_0.Config(converters=str_0)
    config_0.__setitem__(str_1, str_0)


def test_case_12():
    config_0 = module_0.Config()
    none_type_0 = None
    config_0.update_config(none_type_0)


def test_case_13():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)
    none_type_0 = config_0.register_type(var_0)
    config_0.register_type(var_0)


def test_case_14():
    stream_0 = module_2.Stream()
    bytes_0 = b"\x96\xeauo\xb8:\x93\xac\x0c\x89\xf9F\xa2\xa9"
    str_0 = "G"
    config_0 = module_0.Config(env_prefix=str_0)
    config_0.update_config(bytes_0)
