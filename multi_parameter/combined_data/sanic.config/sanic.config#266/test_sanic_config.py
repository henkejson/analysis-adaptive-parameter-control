# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import inspect as module_1
import sanic.constants as module_2


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    config_0 = module_0.Config()
    config_1 = module_0.Config(keep_alive=config_0, converters=config_0)
    str_0 = "LOCAL_CERT_CREATOR"
    config_0.__setattr__(str_0, config_0)


def test_case_2():
    bool_0 = True
    config_0 = module_0.Config()
    config_0.__getattr__(bool_0)


def test_case_3():
    bool_0 = False
    config_0 = module_0.Config()
    config_1 = module_0.Config(config_0, keep_alive=bool_0)
    config_1.__getattr__(config_1)


def test_case_4():
    config_0 = module_0.Config()
    none_type_0 = config_0.register_type(config_0)
    config_0.update_config(none_type_0)


def test_case_5():
    str_0 = "debug"
    none_type_0 = None
    config_0 = module_0.Config()
    var_0 = module_1.isdatadescriptor(config_0)
    none_type_1 = config_0.register_type(var_0)
    none_type_2 = config_0.__setitem__(str_0, config_0)
    var_1 = config_0.update_config(config_0)
    config_0.update_config(none_type_0)


def test_case_6():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_7():
    config_0 = module_0.Config()
    local_cert_creator_0 = module_2.LocalCertCreator.TRUSTME
    str_0 = local_cert_creator_0.__str__()
    module_0.Config(converters=local_cert_creator_0)


def test_case_8():
    str_0 = "debug"
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)
    config_1 = module_0.Config(env_prefix=str_0, converters=config_0)


def test_case_9():
    config_0 = module_0.Config()
    tuple_0 = (config_0, config_0)
    config_0.update_config(tuple_0)


def test_case_10():
    bool_0 = False
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=bool_0, keep_alive=none_type_0)
    config_0.__getattr__(none_type_0)


def test_case_11():
    str_0 = "debug"
    config_0 = module_0.Config()
    config_0.update_config(str_0)
