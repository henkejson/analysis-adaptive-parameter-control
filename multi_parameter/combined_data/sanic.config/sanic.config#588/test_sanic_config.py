# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import inspect as module_1
import sanic.http.http1 as module_2


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    none_type_0 = None
    config_0 = module_0.Config(none_type_0, none_type_0, none_type_0)
    config_0.update_config(none_type_0)


def test_case_2():
    int_0 = -5545
    set_0 = {int_0}
    module_0.Config(set_0)


def test_case_3():
    bool_0 = False
    str_0 = "G"
    config_0 = module_0.Config(env_prefix=str_0, keep_alive=bool_0, converters=bool_0)
    none_type_0 = module_1.getmembers(config_0)
    var_0 = config_0.update_config(config_0)
    var_0.respond(var_0)


def test_case_4():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_5():
    bool_0 = False
    str_0 = "G"
    config_0 = module_0.Config(env_prefix=str_0, keep_alive=bool_0, converters=bool_0)
    var_0 = config_0.update_config(config_0)
    module_2.Http(var_0)


def test_case_6():
    none_type_0 = None
    var_0 = module_1.isclass(none_type_0)
    str_0 = "Auf Wiedersehen"
    config_0 = module_0.Config(env_prefix=str_0)
    config_0.update_config(var_0)


def test_case_7():
    str_0 = "G"
    module_0.Config(env_prefix=str_0, keep_alive=str_0, converters=str_0)


def test_case_8():
    str_0 = "__unnamed__"
    module_0.Config(converters=str_0)


def test_case_9():
    config_0 = module_0.Config()
    none_type_0 = config_0.update()
    str_0 = "  - "
    none_type_1 = config_0.__setitem__(str_0, none_type_0)
    config_0.__getattr__(config_0)


def test_case_10():
    config_0 = module_0.Config()
    list_0 = []
    none_type_0 = config_0.update(*list_0, **config_0)
    bytes_0 = b"Multiple Choices"
    config_0.update_config(bytes_0)


def test_case_11():
    config_0 = module_0.Config()
    none_type_0 = None
    str_0 = "LOCAL_CERT_CREATOR"
    config_0.__setattr__(str_0, none_type_0)


def test_case_12():
    bool_0 = False
    str_0 = "_"
    config_0 = module_0.Config(env_prefix=str_0, keep_alive=bool_0, converters=bool_0)
    config_0.update_config(bool_0)
