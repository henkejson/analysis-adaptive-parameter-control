# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import inspect as module_1


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    bool_0 = False
    config_0 = module_0.Config(bool_0, bool_0)
    str_0 = "cr"
    config_1 = module_0.Config(keep_alive=config_0, converters=config_0)
    config_1.update_config(str_0)


def test_case_2():
    str_0 = "L"
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=str_0)
    var_0 = module_1.isclass(none_type_0)
    config_1 = module_0.Config(env_prefix=str_0, keep_alive=var_0)
    config_0.update_config(var_0)


def test_case_3():
    str_0 = "L"
    config_0 = module_0.Config(env_prefix=str_0)


def test_case_4():
    bool_0 = True
    module_0.Config(bool_0, bool_0)


def test_case_5():
    bool_0 = False
    var_0 = module_1.isdatadescriptor(bool_0)
    list_0 = [var_0, bool_0]
    config_0 = module_0.Config()
    config_0.__getattr__(list_0)


def test_case_6():
    str_0 = "L"
    config_0 = module_0.Config(env_prefix=str_0)
    config_0.update_config(str_0)


def test_case_7():
    bytes_0 = b"Expectation Failed"
    module_0.Config(converters=bytes_0)


def test_case_8():
    bool_0 = True
    config_0 = module_0.Config()
    none_type_0 = config_0.register_type(bool_0)


def test_case_9():
    bool_0 = False
    config_0 = module_0.Config(bool_0, bool_0)
    config_0.update_config(bool_0)


def test_case_10():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_11():
    none_type_0 = None
    config_0 = module_0.Config(keep_alive=none_type_0, converters=none_type_0)
    config_0.__getattr__(none_type_0)


def test_case_12():
    config_0 = module_0.Config()
    str_0 = "LOCAL_CERT_CREATOR"
    none_type_0 = None
    config_0.__setattr__(str_0, none_type_0)


def test_case_13():
    str_0 = "L"
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=str_0)
    bytes_0 = b"gs _\x92\xa9"
    module_0.Config(none_type_0, str_0, str_0, converters=bytes_0)
