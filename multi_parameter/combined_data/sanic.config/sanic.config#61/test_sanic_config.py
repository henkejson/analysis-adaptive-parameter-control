# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    bool_0 = True
    none_type_0 = None
    config_0 = module_0.Config(keep_alive=bool_0, converters=none_type_0)
    config_1 = module_0.Config(keep_alive=bool_0, converters=config_0)
    config_0.update_config(bool_0)


def test_case_2():
    bool_0 = True
    config_0 = module_0.Config(keep_alive=bool_0)


def test_case_3():
    bool_0 = True
    str_0 = "6Sdz{"
    str_1 = "M:"
    dict_0 = {str_0: bool_0, str_0: bool_0, str_1: str_1, str_0: str_1}
    config_0 = module_0.Config(dict_0, converters=str_1)
    var_0 = config_0.update_config(dict_0)


def test_case_4():
    bool_0 = True
    config_0 = module_0.Config(keep_alive=bool_0)
    config_0.__getattr__(bool_0)


def test_case_5():
    bool_0 = True
    config_0 = module_0.Config(keep_alive=bool_0)
    config_0.update_config(bool_0)


def test_case_6():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_7():
    bool_0 = True
    config_0 = module_0.Config(keep_alive=bool_0)
    none_type_0 = config_0.register_type(config_0)
    config_0.update_config(none_type_0)


def test_case_8():
    bool_0 = True
    config_0 = module_0.Config(keep_alive=bool_0)
    none_type_0 = None
    config_1 = module_0.Config(keep_alive=bool_0, converters=none_type_0)
    str_0 = "?"
    none_type_1 = config_0.register_type(str_0)
    config_2 = module_0.Config(none_type_0)
    str_1 = "websocket_ping_timeout"
    none_type_2 = config_2.__setitem__(str_1, bool_0)
    var_0 = config_1.update_config(config_0)


def test_case_9():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0)
    var_0 = config_0.update_config(config_0)


def test_case_10():
    none_type_0 = None
    str_0 = "B9IST=GtDXpix="
    config_0 = module_0.Config(
        env_prefix=str_0, keep_alive=none_type_0, converters=none_type_0
    )
    var_0 = config_0.update_config(config_0)


def test_case_11():
    bool_0 = True
    config_0 = module_0.Config(keep_alive=bool_0)
    config_0.__getattr__(config_0)


def test_case_12():
    bool_0 = True
    config_0 = module_0.Config(keep_alive=bool_0)
    str_0 = 'c^"3]jzj?p!N.'
    float_0 = -1227.2714
    none_type_0 = config_0.__setattr__(str_0, float_0)
    var_0 = config_0.load_environment_vars()
    var_1 = config_0.update_config(config_0)
    none_type_1 = config_0.register_type(var_0)
    config_0.update_config(str_0)


def test_case_13():
    bool_0 = True
    config_0 = module_0.Config(keep_alive=bool_0)
    none_type_0 = config_0.register_type(config_0)
    config_0.register_type(config_0)


def test_case_14():
    bool_0 = True
    str_0 = "_FALLBACK_ERROR_FORMAT"
    str_1 = ">\x0b)Jp6~(_Z?{"
    dict_0 = {str_0: str_0, str_1: bool_0}
    module_0.Config(dict_0, keep_alive=dict_0)


def test_case_15():
    bool_0 = True
    config_0 = module_0.Config(keep_alive=bool_0)
    config_1 = module_0.Config()
    var_0 = config_0.load_environment_vars()
    str_0 = "LOCAL_CERT_CREATOR"
    config_0.__setattr__(str_0, str_0)


def test_case_16():
    bool_0 = True
    config_0 = module_0.Config(keep_alive=bool_0)
    str_0 = ""
    config_0.load_environment_vars(str_0)
