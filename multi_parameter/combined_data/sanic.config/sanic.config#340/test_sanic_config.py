# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import sanic.constants as module_1
import inspect as module_2


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    local_cert_creator_0 = module_1.LocalCertCreator.AUTO
    config_0 = module_0.Config(converters=local_cert_creator_0)


def test_case_2():
    local_cert_creator_0 = module_1.LocalCertCreator.TRUSTME
    config_0 = module_0.Config(env_prefix=local_cert_creator_0)


def test_case_3():
    local_cert_creator_0 = module_1.LocalCertCreator.AUTO
    config_0 = module_0.Config(converters=local_cert_creator_0)
    none_type_0 = None
    none_type_1 = config_0.__setitem__(local_cert_creator_0, none_type_0)
    var_0 = config_0.update_config(config_0)
    config_0.__getattr__(config_0)


def test_case_4():
    str_0 = "G"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    config_0 = module_0.Config(dict_0, str_0)


def test_case_5():
    int_0 = 282
    config_0 = module_0.Config(keep_alive=int_0)


def test_case_6():
    local_cert_creator_0 = module_1.LocalCertCreator.AUTO
    config_0 = module_0.Config(env_prefix=local_cert_creator_0)
    var_0 = config_0.update_config(config_0)


def test_case_7():
    local_cert_creator_0 = module_1.LocalCertCreator.TRUSTME
    config_0 = module_0.Config(env_prefix=local_cert_creator_0)
    var_0 = config_0.update_config(config_0)
    config_0.update_config(var_0)


def test_case_8():
    local_cert_creator_0 = module_1.LocalCertCreator.MKCERT
    config_0 = module_0.Config(env_prefix=local_cert_creator_0)
    none_type_0 = config_0.__setitem__(local_cert_creator_0, local_cert_creator_0)
    var_0 = config_0.update_config(config_0)
    config_0.__getattr__(var_0)


def test_case_9():
    local_cert_creator_0 = module_1.LocalCertCreator.MKCERT
    config_0 = module_0.Config(
        keep_alive=local_cert_creator_0, converters=local_cert_creator_0
    )
    config_0.update_config(local_cert_creator_0)


def test_case_10():
    local_cert_creator_0 = module_1.LocalCertCreator.TRUSTME
    module_0.Config(converters=local_cert_creator_0)


def test_case_11():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0, converters=none_type_0)


def test_case_12():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0, keep_alive=none_type_0)
    none_type_1 = None
    str_0 = "LOCAL_CERT_CREATOR"
    config_0.__setitem__(str_0, none_type_1)


def test_case_13():
    str_0 = "G"
    str_1 = ')G9D&/"(K5%F'
    dict_0 = {str_0: str_0, str_1: str_1, str_1: str_0}
    bool_0 = False
    module_0.Config(env_prefix=str_0, keep_alive=bool_0, converters=dict_0)


def test_case_14():
    str_0 = "_"
    str_1 = ')G9D&/"(K5%F'
    dict_0 = {str_0: str_0, str_1: str_1, str_1: str_0}
    config_0 = module_0.Config(dict_0, str_0)
    local_cert_creator_0 = module_1.LocalCertCreator.AUTO
    config_1 = module_0.Config(env_prefix=local_cert_creator_0)
    list_0 = [config_1]
    none_type_0 = module_2.getmembers(config_0)
    config_1.update_config(list_0)


def test_case_15():
    str_0 = "_FALLBACK_ERROR_FORMAT"
    str_1 = ')G9D&/"(K5%F'
    dict_0 = {str_0: str_0, str_1: str_0, str_1: str_1, str_1: str_0}
    module_0.Config(dict_0, str_0)


def test_case_16():
    config_0 = module_0.Config()
    var_0 = module_2.getmembers(config_0)
    list_0 = [var_0]
    none_type_0 = config_0.update(*list_0, **config_0)
    none_type_0.update_config(list_0)
