# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import inspect as module_1


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    int_0 = -2341
    list_0 = [int_0]
    tuple_0 = (int_0,)
    config_0 = module_0.Config(keep_alive=tuple_0)
    config_0.load_environment_vars(list_0)


def test_case_2():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0)
    config_0.update_config(none_type_0)


def test_case_3():
    bool_0 = True
    bool_1 = True
    int_0 = -3337
    tuple_0 = (bool_0, bool_1, int_0)
    module_0.Config(tuple_0, tuple_0, bool_1)


def test_case_4():
    none_type_0 = None
    config_0 = module_0.Config(none_type_0)
    config_0.__getattr__(none_type_0)


def test_case_5():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_6():
    str_0 = "\\a_m$W9x"
    none_type_0 = None
    config_0 = module_0.Config(converters=none_type_0)
    none_type_1 = config_0.__setitem__(str_0, str_0)
    var_0 = module_1.isdatadescriptor(str_0)
    var_0.__getattr__(str_0)


def test_case_7():
    complex_0 = 620.078719 - 153.1017j
    dict_0 = {}
    str_0 = "nuq?\x0b+U2FZ4?"
    config_0 = module_0.Config(dict_0, str_0)
    config_0.__setattr__(complex_0, complex_0)


def test_case_8():
    bytes_0 = b"\xa6\xf5\xe6\x02b\x02\xde\xe7\x14\x936\xaa\xa5"
    none_type_0 = None
    module_0.Config(keep_alive=none_type_0, converters=bytes_0)


def test_case_9():
    config_0 = module_0.Config()
    config_0.__getattr__(config_0)


def test_case_10():
    config_0 = module_0.Config()
    config_1 = module_0.Config()
    var_0 = config_1.update_config(config_1)
    var_1 = var_0.__repr__()
    config_1.update_config(var_1)


def test_case_11():
    config_0 = module_0.Config()
    none_type_0 = config_0.register_type(config_0)
    str_0 = config_0.__str__()
    module_0.Config(env_prefix=config_0, converters=config_0)


def test_case_12():
    config_0 = module_0.Config()
    str_0 = "LOCAL_CERT_CREATOR"
    config_0.__setitem__(str_0, config_0)
