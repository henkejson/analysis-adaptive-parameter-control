# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import sanic.http.http1 as module_1
import inspect as module_2


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    none_type_0 = None
    config_0 = module_0.Config(none_type_0)
    config_1 = module_0.Config(env_prefix=none_type_0, keep_alive=config_0)


def test_case_2():
    str_0 = "L"
    config_0 = module_0.Config(env_prefix=str_0)


def test_case_3():
    none_type_0 = None
    none_type_1 = None
    config_0 = module_0.Config(none_type_1, none_type_1, none_type_1)
    config_0.__getattr__(none_type_0)


def test_case_4():
    none_type_0 = None
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)
    config_1 = module_0.Config(keep_alive=none_type_0, converters=config_0)


def test_case_5():
    config_0 = module_0.Config()
    tuple_0 = config_0.update_config(config_0)


def test_case_6():
    config_0 = module_0.Config()
    config_0.__getattr__(config_0)


def test_case_7():
    config_0 = module_0.Config()
    bool_0 = True
    module_0.Config(bool_0)


def test_case_8():
    none_type_0 = None
    config_0 = module_0.Config(none_type_0)
    config_0.update_config(none_type_0)


def test_case_9():
    str_0 = "Create TCP server socket.\n    :param host: IPv4, IPv6 or hostname may be specified\n    :param port: TCP port number\n    :param backlog: Maximum number of connections to queue\n    :return: socket.socket object\n    "
    config_0 = module_0.Config(env_prefix=str_0)
    config_0.update_config(str_0)


def test_case_10():
    str_0 = "vB,m^XP 2h`t|_pnSBM!"
    module_0.Config(converters=str_0)


def test_case_11():
    str_0 = "vB,m^XP 2h`t|_pnSBM!"
    str_1 = "(\x0cF-~)\rCS"
    str_2 = "_FALLBACK_ERROR_FORMAT"
    dict_0 = {str_1: str_0, str_2: str_0, str_1: str_2}
    module_0.Config(dict_0)


def test_case_12():
    str_0 = "L"
    config_0 = module_0.Config(env_prefix=str_0)
    none_type_0 = config_0.register_type(config_0)
    config_0.load_environment_vars(str_0)


def test_case_13():
    str_0 = "_"
    config_0 = module_0.Config(env_prefix=str_0)
    var_0 = config_0.update_config(config_0)
    config_1 = module_0.Config()
    var_1 = config_0.load_environment_vars()
    var_2 = var_0.__repr__()
    module_1.Http(config_0)


def test_case_14():
    none_type_0 = None
    none_type_1 = None
    config_0 = module_0.Config(none_type_1, none_type_1, converters=none_type_1)
    var_0 = module_2.getmembers(none_type_0)
    str_0 = "LOCAL_CERT_CREATOR"
    config_0.__setitem__(str_0, none_type_0)
