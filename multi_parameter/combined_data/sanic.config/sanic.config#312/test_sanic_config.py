# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import sanic.helpers as module_1


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    bool_0 = False
    config_0 = module_0.Config(keep_alive=bool_0)
    list_0 = [config_0, bool_0]
    config_0.__setattr__(list_0, bool_0)


def test_case_2():
    str_0 = "5~C[k3"
    config_0 = module_0.Config(env_prefix=str_0, converters=str_0)


def test_case_3():
    config_0 = module_0.Config()
    config_0.__getattr__(config_0)


def test_case_4():
    str_0 = "H7r0MLH3"
    module_0.Config(env_prefix=str_0, converters=str_0)


def test_case_5():
    none_type_0 = None
    config_0 = module_0.Config()
    str_0 = "Static route must be a valid path, not "
    none_type_1 = config_0.__setitem__(str_0, none_type_0)
    none_type_2 = None
    default_0 = module_1.Default()
    var_0 = default_0.__repr__()
    var_1 = default_0.__repr__()
    var_0.__subclasscheck__(none_type_2, none_type_2)


def test_case_6():
    bool_0 = False
    config_0 = module_0.Config(bool_0)
    none_type_0 = None
    config_1 = module_0.Config(config_0, none_type_0, config_0)
    config_0.load_environment_vars(none_type_0)


def test_case_7():
    none_type_0 = None
    config_0 = module_0.Config(converters=none_type_0)
    none_type_1 = config_0.load_environment_vars()
    str_0 = config_0.__str__()
    config_0.update_config(str_0)


def test_case_8():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)
    config_0.__bool__()


def test_case_9():
    config_0 = module_0.Config()
    int_0 = 1508
    config_0.update_config(int_0)


def test_case_10():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_11():
    config_0 = module_0.Config()
    none_type_0 = config_0.update(**config_0)


def test_case_12():
    str_0 = ""
    none_type_0 = None
    config_0 = module_0.Config(none_type_0, keep_alive=none_type_0)
    config_0.load_environment_vars(str_0)


def test_case_13():
    str_0 = "a"
    str_1 = "X85=;]5~H2t@"
    str_2 = "_FALLBACK_ERROR_FORMAT"
    int_0 = -135
    dict_0 = {str_0: str_0, str_1: str_0, str_2: int_0}
    none_type_0 = None
    module_0.Config(dict_0, keep_alive=none_type_0)
