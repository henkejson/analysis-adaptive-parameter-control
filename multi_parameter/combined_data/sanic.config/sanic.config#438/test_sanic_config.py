# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import inspect as module_1


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    str_0 = "[respond]:"
    config_0 = module_0.Config(env_prefix=str_0, keep_alive=str_0)


def test_case_2():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0)


def test_case_3():
    str_0 = "G"
    config_0 = module_0.Config(env_prefix=str_0)
    module_0.Config(config_0, str_0, str_0, converters=config_0)


def test_case_4():
    int_0 = 403
    config_0 = module_0.Config(keep_alive=int_0)
    config_0.update_config(int_0)


def test_case_5():
    str_0 = "G"
    config_0 = module_0.Config()
    config_1 = module_0.Config(env_prefix=str_0, keep_alive=str_0)
    int_0 = 403
    config_2 = module_0.Config(keep_alive=int_0)
    none_type_0 = config_2.update(**config_2)
    config_1.update_config(str_0)


def test_case_6():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_7():
    config_0 = module_0.Config()
    none_type_0 = config_0.update(**config_0)


def test_case_8():
    str_0 = "[respond]:"
    config_0 = module_0.Config(env_prefix=str_0, keep_alive=str_0)
    var_0 = config_0.update_config(config_0)
    none_type_0 = config_0.register_type(var_0)


def test_case_9():
    int_0 = 971
    var_0 = module_1.getmembers(int_0)
    bytes_0 = b"\x1f\x14K\x9b"
    var_1 = module_1.getmembers(bytes_0)
    config_0 = module_0.Config(keep_alive=var_1)
    config_1 = module_0.Config(keep_alive=int_0, converters=config_0)


def test_case_10():
    str_0 = "[respond]:"
    config_0 = module_0.Config(env_prefix=str_0, keep_alive=str_0)
    var_0 = config_0.update_config(config_0)
    config_0.init_for_request()


def test_case_11():
    config_0 = module_0.Config()
    int_0 = 2447
    config_1 = module_0.Config()
    none_type_0 = config_1.register_type(int_0)
    var_0 = config_1.load_environment_vars()
    config_1.register_type(int_0)


def test_case_12():
    str_0 = "G"
    config_0 = module_0.Config(env_prefix=str_0, keep_alive=str_0)


def test_case_13():
    config_0 = module_0.Config()
    config_0.__getattr__(config_0)


def test_case_14():
    str_0 = "_"
    config_0 = module_0.Config()
    config_1 = module_0.Config(env_prefix=str_0, keep_alive=str_0)
    int_0 = 403
    config_2 = module_0.Config(keep_alive=int_0)
    list_0 = [int_0]
    none_type_0 = config_2.update(**config_2)
    config_2.update_config(list_0)
