# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import inspect as module_1


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    bool_0 = False
    config_0 = module_0.Config(keep_alive=bool_0)
    config_0.update_config(bool_0)


def test_case_2():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0, keep_alive=none_type_0)


def test_case_3():
    str_0 = "SANIC_WORKER_PROCESS"
    module_0.Config(str_0, str_0)


def test_case_4():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0)
    none_type_1 = config_0.register_type(config_0)
    none_type_2 = module_1.isdatadescriptor(none_type_1)
    config_0.respond(config_0)


def test_case_5():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_6():
    none_type_0 = None
    config_0 = module_0.Config(none_type_0)
    config_0.update_config(none_type_0)


def test_case_7():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0)
    none_type_1 = config_0.register_type(config_0)
    complex_0 = -1489.9 - 1499.9j
    config_0.__setitem__(none_type_0, complex_0)


def test_case_8():
    str_0 = 'W>&qr:F=]{{\x0bqo"a\x0c]E]'
    config_0 = module_0.Config(env_prefix=str_0)
    bytes_0 = b",3\x84i\x98\xf2\xd8\x1b>\xfa_\x9f\x99\x16"
    config_1 = module_0.Config(keep_alive=bytes_0)
    config_1.__setattr__(config_1, config_0)


def test_case_9():
    bool_0 = True
    module_0.Config(keep_alive=bool_0, converters=bool_0)


def test_case_10():
    bool_0 = False
    config_0 = module_0.Config(keep_alive=bool_0, converters=bool_0)
    config_0.__getattr__(config_0)


def test_case_11():
    str_0 = "1\naQ{Fp0,gyY%oV<x"
    config_0 = module_0.Config(env_prefix=str_0)
    str_1 = "oNEPKSVq"
    str_2 = ""
    config_1 = module_0.Config(env_prefix=str_1, converters=str_1)
    none_type_0 = config_0.__setattr__(str_2, str_2)
    config_0.__setattr__(none_type_0, config_0)


def test_case_12():
    bool_0 = False
    config_0 = module_0.Config(keep_alive=bool_0, converters=bool_0)
    none_type_0 = config_0.register_type(bool_0)
    var_0 = config_0.update_config(config_0)
    var_1 = config_0.load_environment_vars()
    config_0.register_type(bool_0)


def test_case_13():
    str_0 = "k6#1rek~5,R"
    bool_0 = True
    config_0 = module_0.Config(env_prefix=str_0, keep_alive=bool_0)
    config_0.update_config(str_0)
