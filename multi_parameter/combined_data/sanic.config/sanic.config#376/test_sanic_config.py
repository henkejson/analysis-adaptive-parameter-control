# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import inspect as module_1
import sanic.http.http1 as module_2


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    bool_0 = False
    str_0 = "Invalid response type "
    str_1 = "9W`lmz4IP{M."
    str_2 = ">w\t\n"
    dict_0 = {str_0: str_0, str_1: str_0, str_2: str_1, str_2: str_2}
    config_0 = module_0.Config(dict_0)
    var_0 = module_1.isdatadescriptor(bool_0)
    var_0.__setitem__(bool_0, bool_0)


def test_case_2():
    config_0 = module_0.Config()
    module_2.Http(config_0)


def test_case_3():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)
    config_0.__getattr__(config_0)


def test_case_4():
    bool_0 = False
    config_0 = module_0.Config(bool_0)
    bytes_0 = b"%x\r\n%b\r\n0\r\n\r\n"
    config_0.update_config(bytes_0)


def test_case_5():
    config_0 = module_0.Config()
    bool_0 = True
    none_type_0 = None
    none_type_1 = module_1.isdatadescriptor(bool_0)
    config_1 = module_0.Config(env_prefix=none_type_0, converters=config_0)


def test_case_6():
    dict_0 = {}
    int_0 = 26
    none_type_0 = None
    str_0 = '"'
    config_0 = module_0.Config(keep_alive=none_type_0, converters=none_type_0)
    none_type_1 = config_0.__setitem__(str_0, int_0)
    config_1 = module_0.Config()
    var_0 = module_1.isdatadescriptor(dict_0)
    var_0.__getattr__(none_type_0)


def test_case_7():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_8():
    config_0 = module_0.Config()
    none_type_0 = None
    config_0.update_config(none_type_0)


def test_case_9():
    config_0 = module_0.Config()
    config_1 = module_0.Config(keep_alive=config_0)
    var_0 = config_1.update_config(config_0)


def test_case_10():
    config_0 = module_0.Config()
    none_type_0 = config_0.register_type(config_0)
    config_0.register_type(config_0)


def test_case_11():
    bool_0 = True
    module_0.Config(env_prefix=bool_0)
