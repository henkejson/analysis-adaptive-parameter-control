# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import inspect as module_1
import sanic.http.http1 as module_2


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    bool_0 = False
    config_0 = module_0.Config(keep_alive=bool_0)


def test_case_2():
    none_type_0 = None
    config_0 = module_0.Config(
        env_prefix=none_type_0, keep_alive=none_type_0, converters=none_type_0
    )


def test_case_3():
    bytes_0 = b"!\x8d,\x96k\x84\xe6\x88,\xden\xed\x8d\xe2\xde\xdb\xea#"
    module_0.Config(bytes_0)


def test_case_4():
    str_0 = "v\x0b\ncd#OH,"
    float_0 = 1105.4978774785877
    str_1 = "Tb"
    none_type_0 = None
    dict_0 = {str_0: float_0, str_1: none_type_0}
    config_0 = module_0.Config(dict_0, converters=none_type_0)
    config_0.__getattr__(config_0)


def test_case_5():
    none_type_0 = None
    config_0 = module_0.Config(
        env_prefix=none_type_0, keep_alive=none_type_0, converters=none_type_0
    )
    config_0.update_config(none_type_0)


def test_case_6():
    none_type_0 = None
    config_0 = module_0.Config(none_type_0)
    config_1 = module_0.Config(converters=none_type_0)
    str_0 = "Decorate a function to be registered as a handler for exceptions\n\n        :param exceptions: exceptions\n        :return: decorated function\n        "
    var_0 = config_1.update_config(config_0)
    config_1.update_config(str_0)


def test_case_7():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_8():
    config_0 = module_0.Config()
    none_type_0 = config_0.register_type(config_0)
    config_0.register(config_0, config_0)


def test_case_9():
    none_type_0 = None
    config_0 = module_0.Config(converters=none_type_0)
    none_type_1 = None
    config_1 = module_0.Config(
        env_prefix=none_type_1, keep_alive=none_type_1, converters=none_type_1
    )
    config_1.__setitem__(none_type_1, config_1)


def test_case_10():
    bytes_0 = b"Early Hints"
    str_0 = "\r(9s"
    config_0 = module_0.Config(env_prefix=str_0)
    var_0 = module_1.isclass(bytes_0)
    config_0.update_config(var_0)


def test_case_11():
    none_type_0 = None
    config_0 = module_0.Config(none_type_0)
    str_0 = "FALLBACK_ERROR_FORMAT"
    none_type_1 = config_0.__setattr__(str_0, none_type_0)
    module_2.Http(config_0)


def test_case_12():
    none_type_0 = None
    config_0 = module_0.Config(none_type_0)
    config_1 = module_0.Config(converters=none_type_0)
    float_0 = 148.79
    none_type_1 = config_1.register_type(float_0)
    var_0 = config_1.update_config(config_0)
    var_1 = module_1.isdatadescriptor(var_0)
    config_1.register_type(float_0)


def test_case_13():
    config_0 = module_0.Config()
    none_type_0 = config_0.register_type(config_0)
    var_0 = module_1.isclass(none_type_0)
    config_1 = module_0.Config(none_type_0, none_type_0, converters=config_0)
    config_0.respond(config_0)


def test_case_14():
    none_type_0 = None
    config_0 = module_0.Config(none_type_0)
    str_0 = "FALLBACK_ERROR_FORMAT"
    none_type_1 = config_0.__setattr__(str_0, none_type_0)


def test_case_15():
    none_type_0 = None
    config_0 = module_0.Config(none_type_0)
    str_0 = "FALLBACK_ERROR_FORMAT"
    config_0.__setattr__(str_0, config_0)


def test_case_16():
    none_type_0 = None
    config_0 = module_0.Config(none_type_0)
    str_0 = "LOCAL_CERT_CREATOR"
    config_0.__setattr__(str_0, config_0)


def test_case_17():
    none_type_0 = None
    config_0 = module_0.Config(none_type_0)
    str_0 = "FALLBACK_ERROR_FORMAT"
    none_type_1 = config_0.__setattr__(str_0, none_type_0)
    module_0.Config(config_0, keep_alive=config_0)
