# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    str_0 = "S"
    config_0 = module_0.Config(env_prefix=str_0)


def test_case_2():
    config_0 = module_0.Config()
    none_type_0 = config_0.update(**config_0)


def test_case_3():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_4():
    config_0 = module_0.Config()
    none_type_0 = config_0.update()
    config_0.update_config(none_type_0)


def test_case_5():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)
    config_0.__getattr__(var_0)


def test_case_6():
    str_0 = "'\rws>Cv@\n\x0cMhrE"
    config_0 = module_0.Config(converters=str_0)
    config_0.update_config(str_0)


def test_case_7():
    str_0 = "'\rws>Cv@\n\x0cMhrE"
    str_1 = "7Ke/VjI}Y/ZuT"
    config_0 = module_0.Config(env_prefix=str_1, keep_alive=str_0, converters=str_0)
    config_0.update_config(str_0)


def test_case_8():
    str_0 = "'\rws>Cv@\n\x0cMhrE"
    module_0.Config(str_0)


def test_case_9():
    config_0 = module_0.Config()
    config_0.__getattr__(config_0)


def test_case_10():
    str_0 = "'\rws>Cv@\n\x0cMhrE"
    config_0 = module_0.Config()
    config_0.update_config(str_0)


def test_case_11():
    none_type_0 = None
    str_0 = "'\rws>Cv@\n\x0cMhrE"
    config_0 = module_0.Config(none_type_0, none_type_0, converters=str_0)
    config_0.update_config(none_type_0)


def test_case_12():
    none_type_0 = None
    str_0 = "'\rws>Cv@\n\x0chrE"
    config_0 = module_0.Config(none_type_0, str_0)
    none_type_1 = config_0.register_type(none_type_0)
    var_0 = config_0.update_config(config_0)
    config_0.register_type(var_0)


def test_case_13():
    none_type_0 = None
    str_0 = "'\rws>Cv@\n\x0chrE"
    config_0 = module_0.Config(none_type_0, str_0)
    var_0 = config_0.update_config(config_0)
    config_1 = module_0.Config()
    str_1 = "_FALLBACK_ERROR_FORMAT"
    dict_0 = {str_1: none_type_0}
    module_0.Config(dict_0, none_type_0)


def test_case_14():
    str_0 = "S"
    module_0.Config(env_prefix=str_0, converters=str_0)


def test_case_15():
    none_type_0 = None
    str_0 = "_"
    config_0 = module_0.Config(none_type_0, str_0)
    var_0 = config_0.update_config(config_0)
    none_type_1 = config_0.register_type(none_type_0)
    config_1 = module_0.Config(config_0, keep_alive=var_0, converters=none_type_0)
    config_2 = module_0.Config(env_prefix=var_0)
    config_0.update_config(var_0)
