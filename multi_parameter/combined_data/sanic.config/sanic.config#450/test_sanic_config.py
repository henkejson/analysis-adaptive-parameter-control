# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import sanic.utils as module_1
import inspect as module_2


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    bool_0 = False
    config_0 = module_0.Config(keep_alive=bool_0)
    config_0.init_for_request()


def test_case_2():
    int_0 = 457
    list_0 = [int_0, int_0, int_0]
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0)
    config_0.update_config(list_0)


def test_case_3():
    str_0 = "^a<*Xya7$q!\\oL"
    float_0 = -3900.97
    dict_0 = {str_0: str_0, str_0: float_0}
    str_1 = "Accessing CookieJar.items() has been deprecated and will be removed in v24.3. To learn more, please see: https://sanic.dev/en/guide/release-notes/v23.3.html#response-cookies"
    config_0 = module_0.Config(dict_0, str_1)
    str_2 = "Sanic could not find package to create a TLS certificate. You must have either mkcert or trustme installed. See https://sanic.dev/en/guide/deployment/development.html#automatic-tls-certificate for more details."
    module_1.load_module_from_file_location(config_0, *str_2)


def test_case_4():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_5():
    tuple_0 = ()
    config_0 = module_0.Config(converters=tuple_0)
    str_0 = "Hl,#%_"
    config_0.update_config(str_0)


def test_case_6():
    config_0 = module_0.Config()
    none_type_0 = None
    none_type_1 = config_0.register_type(none_type_0)
    var_0 = module_2.getmembers(none_type_1)


def test_case_7():
    str_0 = "^a<*Xya7$q!\\oL"
    float_0 = -3900.97
    dict_0 = {str_0: str_0, str_0: float_0}
    str_1 = "Accessing CookieJar.items() has been deprecated and will be removed in v24.3. To learn more, please see: https://sanic.dev/en/guide/release-notes/v23.3.html#response-cookies"
    config_0 = module_0.Config(dict_0, str_1)
    var_0 = config_0.__getattr__(str_0)
    module_0.Config(env_prefix=var_0, converters=config_0)


def test_case_8():
    none_type_0 = None
    config_0 = module_0.Config(converters=none_type_0)
    config_1 = module_0.Config()
    config_0.__getattr__(config_0)


def test_case_9():
    none_type_0 = None
    config_0 = module_0.Config(converters=none_type_0)
    str_0 = "S"
    var_0 = config_0.load_environment_vars(str_0)
    var_0.respond(config_0)


def test_case_10():
    none_type_0 = None
    config_0 = module_0.Config(converters=none_type_0)
    config_1 = module_0.Config()
    none_type_1 = config_1.register_type(none_type_0)
    str_0 = "L^\t"
    none_type_2 = config_1.__setitem__(str_0, config_1)
    config_1.register_type(none_type_1)


def test_case_11():
    none_type_0 = None
    config_0 = module_0.Config(converters=none_type_0)
    config_1 = module_0.Config()
    none_type_1 = config_1.register_type(none_type_0)
    none_type_2 = config_0.update_config(config_0)
    none_type_3 = config_0.update()
    str_0 = "LOCAL_CERT_CREATOR"
    config_1.__setitem__(str_0, none_type_1)


def test_case_12():
    none_type_0 = None
    config_0 = module_0.Config(converters=none_type_0)
    str_0 = ""
    config_0.load_environment_vars(str_0)


def test_case_13():
    none_type_0 = None
    config_0 = module_0.Config(converters=none_type_0)
    none_type_1 = config_0.register_type(none_type_0)
    str_0 = "S"
    config_0.load_environment_vars(str_0)
