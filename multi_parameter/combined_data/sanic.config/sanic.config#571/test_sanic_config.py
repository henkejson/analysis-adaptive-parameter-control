# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0)


def test_case_2():
    none_type_0 = None
    config_0 = module_0.Config(none_type_0)
    var_0 = config_0.update_config(config_0)
    config_1 = module_0.Config(config_0, none_type_0, converters=config_0)


def test_case_3():
    none_type_0 = None
    config_0 = module_0.Config(none_type_0)
    config_1 = module_0.Config(converters=config_0)


def test_case_4():
    bool_0 = False
    config_0 = module_0.Config(keep_alive=bool_0)


def test_case_5():
    config_0 = module_0.Config()
    str_0 = "LOCAL_CERT_CREATOR"
    config_1 = module_0.Config()
    config_1.__setattr__(str_0, config_0)


def test_case_6():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0)
    config_0.__getattr__(config_0)


def test_case_7():
    config_0 = module_0.Config()
    config_1 = module_0.Config(keep_alive=config_0, converters=config_0)
    var_0 = config_1.update_config(config_0)
    str_0 = "l@cO4>meqj"
    config_1.update_config(str_0)


def test_case_8():
    str_0 = "_"
    config_0 = module_0.Config(env_prefix=str_0)


def test_case_9():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_10():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0)
    config_0.update_config(none_type_0)


def test_case_11():
    config_0 = module_0.Config()
    str_0 = "spawn"
    none_type_0 = config_0.__setitem__(str_0, str_0)


def test_case_12():
    config_0 = module_0.Config()
    list_0 = [config_0, config_0, config_0]
    module_0.Config(keep_alive=config_0, converters=list_0)


def test_case_13():
    str_0 = "H"
    config_0 = module_0.Config(env_prefix=str_0)
    var_0 = config_0.load_environment_vars()
    var_0.update_config(var_0)


def test_case_14():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0)
    str_0 = "_"
    config_1 = module_0.Config(env_prefix=str_0)
    none_type_1 = None
    config_2 = module_0.Config(keep_alive=none_type_0)
    var_0 = config_2.load_environment_vars()
    str_1 = "_FALLBACK_ERROR_FORMAT"
    dict_0 = {str_1: var_0, str_0: none_type_1, var_0: str_0}
    module_0.Config(dict_0, keep_alive=config_0)
