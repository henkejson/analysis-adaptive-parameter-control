# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import inspect as module_1
import sanic.utils as module_2


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    float_0 = 1686.7
    config_0 = module_0.Config(keep_alive=float_0)
    var_0 = module_1.isdatadescriptor(config_0)
    none_type_0 = None
    int_0 = 411
    var_1 = module_1.getmembers(int_0)
    var_1.respond(none_type_0)


def test_case_2():
    int_0 = -56
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0)
    config_0.update_config(int_0)


def test_case_3():
    dict_0 = {}
    var_0 = module_1.isclass(dict_0)
    var_1 = var_0.__repr__()
    str_0 = "mA^;>y?1-:'"
    dict_1 = {str_0: str_0}
    config_0 = module_0.Config(dict_1, keep_alive=dict_1, converters=dict_0)
    var_0.load_environment_vars()


def test_case_4():
    none_type_0 = None
    config_0 = module_0.Config()
    config_0.__getattr__(none_type_0)


def test_case_5():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)
    config_0.update_config(var_0)


def test_case_6():
    config_0 = module_0.Config()
    str_0 = "\x0bl.WI#Nw5]vn\nE'"
    var_0 = config_0.load_environment_vars()
    config_1 = module_0.Config(env_prefix=str_0, converters=str_0)
    config_1.update_config(str_0)


def test_case_7():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_8():
    config_0 = module_0.Config()
    str_0 = "\x0bl.WI#Nw5]vn\nE'"
    config_1 = module_0.Config(env_prefix=str_0, converters=str_0)
    module_2.load_module_from_file_location(str_0, str_0)


def test_case_9():
    config_0 = module_0.Config()
    str_0 = "\x0bl.WI#Nw5]vn\nE'"
    config_1 = module_0.Config(env_prefix=str_0, converters=str_0)
    str_1 = "ekFM(Hx.j"
    none_type_0 = config_0.__setitem__(str_1, config_0)
    module_2.load_module_from_file_location(str_0, str_0)


def test_case_10():
    none_type_0 = None
    config_0 = module_0.Config(keep_alive=none_type_0)
    none_type_1 = config_0.register_type(config_0)
    config_0.register_type(config_0)


def test_case_11():
    float_0 = -800.9987932598591
    config_0 = module_0.Config(keep_alive=float_0)
    config_0.__getattr__(config_0)


def test_case_12():
    int_0 = 1593
    dict_0 = {}
    str_0 = "P"
    config_0 = module_0.Config(dict_0, str_0, int_0)
    str_0.respond(dict_0)
