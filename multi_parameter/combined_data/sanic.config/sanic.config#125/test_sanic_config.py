# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import sanic.constants as module_1


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    config_0 = module_0.Config()
    str_0 = "\x1b[34m"
    config_1 = module_0.Config(converters=str_0)


def test_case_2():
    none_type_0 = None
    config_0 = module_0.Config(none_type_0, keep_alive=none_type_0)
    module_0.Config(env_prefix=config_0)


def test_case_3():
    str_0 = "=GXJY&<GAt~#M]>G"
    str_1 = ""
    str_2 = "]7M],?O*E"
    dict_0 = {str_0: str_1, str_2: str_2, str_1: str_0}
    none_type_0 = None
    module_0.Config(dict_0, str_1, none_type_0, converters=str_2)


def test_case_4():
    config_0 = module_0.Config()
    none_type_0 = config_0.register_type(config_0)
    config_0.update_config(none_type_0)


def test_case_5():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_6():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0)
    var_0 = config_0.update_config(config_0)
    var_0.init_for_request()


def test_case_7():
    none_type_0 = None
    config_0 = module_0.Config(
        env_prefix=none_type_0, keep_alive=none_type_0, converters=none_type_0
    )
    bool_0 = False
    config_1 = module_0.Config(keep_alive=bool_0)
    list_0 = [none_type_0, config_0]
    config_1.update(*list_0)


def test_case_8():
    config_0 = module_0.Config()
    config_0.__getattr__(config_0)


def test_case_9():
    none_type_0 = None
    config_0 = module_0.Config(none_type_0, keep_alive=none_type_0)
    config_0.__getattr__(none_type_0)


def test_case_10():
    none_type_0 = None
    config_0 = module_0.Config(none_type_0, keep_alive=none_type_0)
    str_0 = "Y'Sc=F35&;KMCM=g+EP"
    none_type_1 = config_0.__setitem__(str_0, config_0)
    module_0.Config(env_prefix=config_0)


def test_case_11():
    config_0 = module_0.Config()
    var_0 = module_1.LocalCertCreator.TRUSTME
    config_0.update_config(var_0)
