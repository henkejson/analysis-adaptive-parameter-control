# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    bytes_0 = b"t]\xde\x8d6"
    config_0 = module_0.Config(converters=bytes_0)


def test_case_2():
    none_type_0 = None
    config_0 = module_0.Config(none_type_0, none_type_0)
    config_0.update_config(none_type_0)


def test_case_3():
    none_type_0 = None
    config_0 = module_0.Config(keep_alive=none_type_0, converters=none_type_0)
    var_0 = config_0.update_config(config_0)
    config_1 = module_0.Config()
    bytes_0 = b""
    config_1.update_config(bytes_0)


def test_case_4():
    none_type_0 = None
    config_0 = module_0.Config(keep_alive=none_type_0, converters=none_type_0)
    str_0 = "UX7]iCj{"
    none_type_1 = config_0.__setitem__(str_0, none_type_0)
    str_0.log_response()


def test_case_5():
    config_0 = module_0.Config()
    str_0 = "@QL;eMWq:72"
    list_0 = [config_0]
    config_1 = module_0.Config(env_prefix=str_0, converters=list_0)


def test_case_6():
    bytes_0 = b"t]\xde\x8d6"
    config_0 = module_0.Config(converters=bytes_0)
    none_type_0 = None
    config_0.__getattr__(none_type_0)


def test_case_7():
    none_type_0 = None
    config_0 = module_0.Config(keep_alive=none_type_0, converters=none_type_0)
    config_0.__getattr__(config_0)


def test_case_8():
    bytes_0 = b"t]\xde\x8d6"
    module_0.Config(env_prefix=bytes_0, keep_alive=bytes_0)


def test_case_9():
    config_0 = module_0.Config()
    none_type_0 = config_0.update(**config_0)


def test_case_10():
    config_0 = module_0.Config()
    none_type_0 = config_0.update_config(config_0)


def test_case_11():
    config_0 = module_0.Config()
    complex_0 = -257.7 - 839j
    module_0.Config(config_0, complex_0, converters=config_0)


def test_case_12():
    str_0 = "/L?gzG}9d@6<K4},G1$"
    str_1 = "Finalize the routing configuration for the Sanic application.\n\n        This method completes the routing setup by calling the router's\n        finalize method, and it also finalizes any middleware that has been\n        added to the application. If the application is not in test mode,\n        any finalization errors will be raised.\n\n        Finalization consists of identifying defined routes and optimizing\n        Sanic's performance to meet the application's specific needs. If\n        you are manually adding routes, after Sanic has started, you will\n        typically want to use the  `amend` context manager rather than\n        calling this method directly.\n\n        .. note::\n            This method is usually called internally during the server setup\n            process and does not typically need to be invoked manually.\n\n        Raises:\n            FinalizationError: If there is an error during the finalization\n                process, and the application is not in test mode.\n\n        Example:\n            ```python\n            app.finalize()\n            ```\n        "
    str_2 = "N[B"
    str_3 = "tls_cert_password"
    dict_0 = {str_0: str_0, str_1: str_0, str_2: str_2, str_3: str_3}
    config_0 = module_0.Config(dict_0, str_3)
    module_0.Config(config_0, keep_alive=str_3, converters=str_1)


def test_case_13():
    none_type_0 = None
    config_0 = module_0.Config(keep_alive=none_type_0, converters=none_type_0)
    var_0 = config_0.update_config(config_0)
    str_0 = "UX7]iCj{"
    str_1 = "LOCAL_CERT_CREATOR"
    config_0.__setattr__(str_1, str_0)


def test_case_14():
    str_0 = "L>YCp"
    str_1 = "_FALLBACK_ERROR_FORMAT"
    dict_0 = {str_0: str_0, str_1: str_1}
    bool_0 = True
    module_0.Config(dict_0, str_0, bool_0)
