# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import sanic.helpers as module_1
import sanic.constants as module_2


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    default_0 = module_1.Default()
    var_0 = default_0.__repr__()
    config_0 = module_0.Config(converters=var_0)
    config_0.__getattr__(default_0)


def test_case_2():
    str_0 = "P"
    config_0 = module_0.Config(env_prefix=str_0)


def test_case_3():
    str_0 = ".pyc"
    str_1 = "QD^=+8'kNHCPYW=b4"
    dict_0 = {str_0: str_0, str_1: str_0}
    none_type_0 = None
    config_0 = module_0.Config(dict_0, converters=none_type_0)
    none_type_1 = config_0.register_type(str_1)


def test_case_4():
    default_0 = module_1.Default()
    var_0 = default_0.__repr__()
    config_0 = module_0.Config(converters=var_0)
    none_type_0 = None
    config_1 = module_0.Config(env_prefix=none_type_0)


def test_case_5():
    str_0 = "X/?-ix>IXf"
    local_cert_creator_0 = module_2.LocalCertCreator.MKCERT
    config_0 = module_0.Config(env_prefix=str_0, keep_alive=local_cert_creator_0)
    config_0.__getattr__(local_cert_creator_0)


def test_case_6():
    str_0 = "P"
    str_1 = "fi`\t|A8\\\r\\h))"
    config_0 = module_0.Config(env_prefix=str_0)
    config_0.update_config(str_1)


def test_case_7():
    str_0 = "P"
    config_0 = module_0.Config(env_prefix=str_0)
    config_0.__getattr__(config_0)


def test_case_8():
    config_0 = module_0.Config()
    int_0 = 100000000
    none_type_0 = config_0.register_type(int_0)
    config_0.register_type(int_0)


def test_case_9():
    str_0 = "@:k[o\x0b\x0b*ST"
    config_0 = module_0.Config(env_prefix=str_0)
    var_0 = config_0.update_config(config_0)
    config_0.update_config(var_0)


def test_case_10():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_11():
    str_0 = "P"
    config_0 = module_0.Config(converters=str_0)
    var_0 = config_0.load_environment_vars()
    config_0.load_environment_vars(str_0)


def test_case_12():
    str_0 = "_"
    config_0 = module_0.Config(env_prefix=str_0)
    var_0 = config_0.load_environment_vars()
    var_0.update_config(config_0)
