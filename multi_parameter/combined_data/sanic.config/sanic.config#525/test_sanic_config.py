# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    str_0 = "MiHfjlUi`mGQ?c^G"
    module_0.Config(str_0)


def test_case_2():
    bool_0 = False
    config_0 = module_0.Config(keep_alive=bool_0)
    config_0.update_config(bool_0)


def test_case_3():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_4():
    bool_0 = True
    config_0 = module_0.Config(keep_alive=bool_0)
    var_0 = config_0.update_config(config_0)


def test_case_5():
    str_0 = "G"
    config_0 = module_0.Config(env_prefix=str_0)


def test_case_6():
    str_0 = ":;W"
    none_type_0 = None
    config_0 = module_0.Config(keep_alive=none_type_0, converters=str_0)
    bool_0 = True
    config_1 = module_0.Config(keep_alive=bool_0)
    config_1.update_config(bool_0)


def test_case_7():
    bytes_0 = b"Request Entity Too Large"
    bool_0 = False
    config_0 = module_0.Config(env_prefix=bool_0)
    config_0.load_environment_vars(bytes_0)


def test_case_8():
    bool_0 = False
    config_0 = module_0.Config(keep_alive=bool_0)
    str_0 = "Ce"
    config_0.update_config(str_0)


def test_case_9():
    bool_0 = False
    config_0 = module_0.Config(env_prefix=bool_0)
    none_type_0 = None
    config_0.__getattr__(none_type_0)


def test_case_10():
    str_0 = "G"
    bool_0 = False
    config_0 = module_0.Config(keep_alive=bool_0)
    config_1 = module_0.Config(env_prefix=str_0)
    none_type_0 = config_0.update(**config_1)
    var_0 = config_0.update_config(config_1)
    config_1.__getattr__(config_1)


def test_case_11():
    str_0 = "*2Pzqe|$Q{cmegz\t"
    config_0 = module_0.Config()
    module_0.Config(converters=str_0)


def test_case_12():
    str_0 = "G"
    bool_0 = False
    config_0 = module_0.Config(keep_alive=bool_0)
    none_type_0 = config_0.register_type(bool_0)
    config_0.load_environment_vars(str_0)


def test_case_13():
    str_0 = "U#yAn{x\\<V!Q4ao`r"
    str_1 = "_FALLBACK_ERROR_FORMAT"
    str_2 = "0qBp@4Q8x.L3/yD"
    dict_0 = {str_0: str_0, str_1: str_1, str_2: str_0}
    module_0.Config(dict_0)


def test_case_14():
    str_0 = "G"
    bool_0 = False
    config_0 = module_0.Config(keep_alive=bool_0)
    config_1 = module_0.Config(env_prefix=str_0)
    none_type_0 = config_0.update(**config_1)
    str_1 = "LOCAL_CERT_CREATOR"
    config_0.__setattr__(str_1, none_type_0)
