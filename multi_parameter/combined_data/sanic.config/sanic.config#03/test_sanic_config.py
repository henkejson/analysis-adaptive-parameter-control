# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import inspect as module_1
import sanic.constants as module_2


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    str_0 = "\\b%2<\x0c"
    config_0 = module_0.Config(env_prefix=str_0, keep_alive=str_0)


def test_case_2():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0)


def test_case_3():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0)
    config_1 = module_0.Config(config_0, converters=none_type_0)
    var_0 = config_1.update_config(config_0)


def test_case_4():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0)
    str_0 = "P"
    config_1 = module_0.Config()
    set_0 = module_1.getmembers(config_0)
    var_0 = config_0.load_environment_vars(str_0)
    none_type_1 = config_0.register_type(str_0)
    none_type_2 = config_0.__setitem__(str_0, none_type_0)
    config_2 = module_0.Config(converters=none_type_0)
    local_cert_creator_0 = module_2.LocalCertCreator.AUTO
    none_type_3 = config_2.register_type(set_0)
    var_1 = config_2.update_config(config_2)
    none_type_4 = config_0.register_type(local_cert_creator_0)
    config_2.update_config(none_type_0)


def test_case_5():
    int_0 = -25
    list_0 = []
    config_0 = module_0.Config(keep_alive=int_0)
    config_0.__getattr__(list_0)


def test_case_6():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0)
    var_0 = config_0.update_config(config_0)


def test_case_7():
    str_0 = "P"
    config_0 = module_0.Config(converters=str_0)


def test_case_8():
    str_0 = "P"
    config_0 = module_0.Config(env_prefix=str_0)


def test_case_9():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0)
    config_0.update_config(none_type_0)


def test_case_10():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0)
    str_0 = "P"
    set_0 = set()
    var_0 = config_0.load_environment_vars(str_0)
    list_0 = [set_0, set_0, none_type_0]
    none_type_1 = config_0.register_type(list_0)
    none_type_2 = config_0.__setitem__(str_0, none_type_0)
    config_1 = module_0.Config(converters=none_type_0)
    local_cert_creator_0 = module_2.LocalCertCreator.AUTO
    var_1 = config_1.update_config(config_1)
    none_type_3 = config_0.register_type(local_cert_creator_0)
    bytes_0 = b"R\xeb\x8e\xf1\xac\xe9U?\xe6\x81\xf3"
    config_0.update_config(bytes_0)


def test_case_11():
    int_0 = 581
    module_0.Config(env_prefix=int_0)


def test_case_12():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0)
    none_type_1 = config_0.update(**config_0)
    config_1 = module_0.Config(config_0, converters=none_type_0)
    var_0 = config_0.load_environment_vars()
    none_type_2 = config_1.register_type(var_0)
    var_1 = config_1.update_config(config_0)
    config_1.register_type(var_1)


def test_case_13():
    str_0 = "P"
    var_0 = module_1.getmembers(str_0)
    module_0.Config(env_prefix=str_0, converters=var_0)


def test_case_14():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0)
    str_0 = "P"
    set_0 = set()
    var_0 = config_0.load_environment_vars(str_0)
    list_0 = [set_0, set_0, none_type_0]
    config_1 = module_0.Config()
    none_type_1 = config_0.register_type(list_0)
    none_type_2 = config_0.__setitem__(str_0, none_type_0)
    config_2 = module_0.Config(converters=none_type_0)
    str_1 = "rLn|tgRWRR?"
    str_2 = "_FALLBACK_ERROR_FORMAT"
    dict_0 = {str_1: str_1, str_2: str_0}
    module_0.Config(dict_0, keep_alive=list_0)
