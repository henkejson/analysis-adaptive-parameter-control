# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import inspect as module_1


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.Config(env_prefix=dict_0)


def test_case_2():
    int_0 = 2484
    module_0.Config(int_0, converters=int_0)


def test_case_3():
    bool_0 = True
    config_0 = module_0.Config()
    config_0.__getattr__(bool_0)


def test_case_4():
    config_0 = module_0.Config()
    str_0 = "rM"
    none_type_0 = config_0.__setitem__(str_0, config_0)
    none_type_1 = config_0.update(**config_0)


def test_case_5():
    str_0 = "d6{V?2s~h "
    config_0 = module_0.Config()
    none_type_0 = config_0.register_type(config_0)
    none_type_1 = config_0.__setitem__(str_0, str_0)
    var_0 = config_0.update_config(config_0)
    none_type_2 = config_0.register_type(none_type_1)
    config_1 = module_0.Config(env_prefix=var_0, keep_alive=none_type_2)
    config_1.update_config(none_type_2)


def test_case_6():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_7():
    str_0 = "A6a-/S'a{p`+ZP"
    config_0 = module_0.Config()
    none_type_0 = config_0.__setitem__(str_0, str_0)
    str_1 = '\\pfrn(@<T""uGd\tf]Q4J'
    var_0 = config_0.update_config(config_0)
    none_type_1 = config_0.register_type(str_1)
    config_0.update_config(str_1)


def test_case_8():
    config_0 = module_0.Config()
    none_type_0 = config_0.register_type(config_0)


def test_case_9():
    config_0 = module_0.Config()
    none_type_0 = None
    config_0.update_config(none_type_0)


def test_case_10():
    str_0 = "A6a-/S'a{p`+ZP"
    config_0 = module_0.Config()
    none_type_0 = config_0.__setitem__(str_0, str_0)
    str_1 = '\\pfrn(@<T""uGd\tf]Q4J'
    var_0 = config_0.update_config(config_0)
    none_type_1 = None
    none_type_2 = config_0.register_type(config_0)
    var_1 = module_1.isdatadescriptor(none_type_1)
    var_2 = var_1.__bool__()
    config_1 = module_0.Config(keep_alive=str_1)
    var_1.__setattr__(str_1, none_type_0)


def test_case_11():
    config_0 = module_0.Config()
    config_0.__getattr__(config_0)


def test_case_12():
    str_0 = "d6{V?2s~h "
    config_0 = module_0.Config()
    none_type_0 = config_0.register_type(config_0)
    none_type_1 = module_1.isclass(none_type_0)
    var_0 = config_0.update_config(config_0)
    none_type_2 = None
    config_1 = module_0.Config(converters=str_0)
    config_2 = module_0.Config()
    config_1.update_config(none_type_2)


def test_case_13():
    str_0 = "A6a-/S'a{p`+ZP"
    module_0.Config(keep_alive=str_0, converters=str_0)


def test_case_14():
    str_0 = "l@j\t"
    config_0 = module_0.Config()
    none_type_0 = config_0.__setitem__(str_0, str_0)
    str_1 = "LOCAL_CERT_CREATOR"
    config_0.__setitem__(str_1, none_type_0)


def test_case_15():
    str_0 = "enabled"
    str_1 = "_FALLBACK_ERROR_FORMAT"
    str_2 = "0P|.XGnX1`>"
    str_3 = "c$q<|WL#5llu8$tGjDjY"
    dict_0 = {str_0: str_0, str_1: str_1, str_2: str_0, str_3: str_2}
    module_0.Config(dict_0)
