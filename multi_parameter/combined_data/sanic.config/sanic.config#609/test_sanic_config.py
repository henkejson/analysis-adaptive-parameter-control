# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import sanic.http.http1 as module_1
import inspect as module_2


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    str_0 = "Ca"
    dict_0 = {str_0: str_0}
    none_type_0 = None
    module_0.Config(dict_0, dict_0, str_0, converters=none_type_0)


def test_case_2():
    config_0 = module_0.Config()
    module_1.Http(config_0)


def test_case_3():
    config_0 = module_0.Config()
    config_0.__getattr__(config_0)


def test_case_4():
    none_type_0 = None
    dict_0 = {}
    config_0 = module_0.Config(none_type_0, dict_0)
    var_0 = module_2.isclass(dict_0)
    var_0.respond(none_type_0)


def test_case_5():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_6():
    none_type_0 = None
    config_0 = module_0.Config(none_type_0)
    config_1 = module_0.Config()
    str_0 = "Cannot run Sanic server without first running await server.startup()"
    config_2 = module_0.Config(none_type_0, str_0, converters=none_type_0)
    none_type_1 = config_2.__setitem__(str_0, none_type_0)
    config_2.update_config(str_0)


def test_case_7():
    none_type_0 = None
    config_0 = module_0.Config(none_type_0)
    var_0 = config_0.load_environment_vars()
    config_1 = module_0.Config()
    var_1 = config_0.update_config(config_0)
    var_2 = module_0.Config(converters=config_0)
    var_0.update(**var_1)


def test_case_8():
    none_type_0 = None
    config_0 = module_0.Config(none_type_0)
    config_1 = module_0.Config()
    var_0 = config_0.update_config(config_0)
    str_0 = "Cannot run Sanic server without first running await server.startup()"
    config_2 = module_0.Config(none_type_0, str_0, converters=none_type_0)
    module_0.Config(env_prefix=str_0, converters=str_0)


def test_case_9():
    none_type_0 = None
    config_0 = module_0.Config(none_type_0)
    none_type_1 = config_0.update(**config_0)
    none_type_2 = config_0.register_type(none_type_1)


def test_case_10():
    none_type_0 = None
    config_0 = module_0.Config(none_type_0)
    config_0.update_config(none_type_0)


def test_case_11():
    none_type_0 = None
    config_0 = module_0.Config(none_type_0)
    none_type_1 = config_0.update(**config_0)
    str_0 = "LOCAL_CERT_CREATOR"
    config_0.__setitem__(str_0, none_type_1)
