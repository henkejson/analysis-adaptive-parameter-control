# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import inspect as module_1


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    bool_0 = False
    none_type_0 = None
    config_0 = module_0.Config(
        env_prefix=bool_0, keep_alive=bool_0, converters=none_type_0
    )


def test_case_2():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0)


def test_case_3():
    str_0 = "j,4*."
    dict_0 = {str_0: str_0}
    bool_0 = True
    config_0 = module_0.Config(dict_0, keep_alive=bool_0)
    none_type_0 = config_0.update()


def test_case_4():
    config_0 = module_0.Config()
    var_0 = module_1.getmembers(config_0)
    config_0.update_config(var_0)


def test_case_5():
    config_0 = module_0.Config()
    config_0.__getattr__(config_0)


def test_case_6():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_7():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)
    config_0.__setitem__(var_0, var_0)


def test_case_8():
    str_0 = "6N\n*7*<cm#9"
    str_1 = "H<WmtpWdW;{C\x0c"
    str_2 = "_FALLBACK_ERROR_FORMAT"
    dict_0 = {str_0: str_0, str_1: str_0, str_2: str_0, str_0: str_1}
    module_0.Config(dict_0, str_2)


def test_case_9():
    config_0 = module_0.Config()
    str_0 = "2]li1|@$(!J@*jgq{["
    none_type_0 = config_0.register_type(str_0)


def test_case_10():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)
    config_0.update_config(var_0)


def test_case_11():
    config_0 = module_0.Config()
    config_1 = module_0.Config(converters=config_0)
    config_0.__getattr__(config_0)


def test_case_12():
    config_0 = module_0.Config()
    str_0 = "2]li1|@$(!J@*jgq{["
    none_type_0 = config_0.register_type(str_0)
    none_type_1 = config_0.update()
    none_type_2 = config_0.register_type(config_0)
    config_0.register_type(str_0)


def test_case_13():
    config_0 = module_0.Config()
    str_0 = '<x&hj.N^&/"-kBpSKv+'
    var_0 = config_0.update_config(config_0)
    config_0.update_config(str_0)


def test_case_14():
    config_0 = module_0.Config()
    bool_0 = False
    none_type_0 = config_0.register_type(bool_0)
    str_0 = "LOCAL_CERT_CREATOR"
    config_0.__setattr__(str_0, config_0)
