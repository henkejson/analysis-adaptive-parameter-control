# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import inspect as module_1


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    str_0 = "\n4`-x;(xcF\r"
    str_1 = ""
    bool_0 = True
    dict_0 = {str_0: str_0, str_1: bool_0}
    config_0 = module_0.Config(converters=dict_0)
    none_type_0 = None
    config_1 = module_0.Config(dict_0, converters=none_type_0)
    var_0 = config_1.__getattr__(str_0)


def test_case_2():
    str_0 = "yjj#}"
    bool_0 = False
    config_0 = module_0.Config(env_prefix=str_0, keep_alive=bool_0)
    var_0 = config_0.update_config(config_0)


def test_case_3():
    str_0 = "S"
    config_0 = module_0.Config(env_prefix=str_0)


def test_case_4():
    str_0 = "yjj#}"
    bool_0 = False
    config_0 = module_0.Config(env_prefix=str_0, keep_alive=bool_0)
    none_type_0 = config_0.update()
    config_1 = module_0.Config(config_0)
    none_type_1 = config_0.register_type(none_type_0)
    config_1.update_config(none_type_1)


def test_case_5():
    config_0 = module_0.Config()
    float_0 = 643.0
    config_0.__getattr__(float_0)


def test_case_6():
    str_0 = "\n4`-x;(xcF\r"
    str_1 = ""
    bool_0 = True
    dict_0 = {str_0: str_0, str_1: bool_0}
    config_0 = module_0.Config(converters=dict_0)
    module_0.Config(dict_0, converters=str_0)


def test_case_7():
    str_0 = "yjj#}"
    bool_0 = False
    config_0 = module_0.Config(env_prefix=str_0, keep_alive=bool_0)
    none_type_0 = None
    none_type_1 = config_0.__setattr__(str_0, none_type_0)
    none_type_2 = config_0.register_type(none_type_0)
    config_0.update_config(none_type_2)


def test_case_8():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0)
    config_0.update_config(none_type_0)


def test_case_9():
    bool_0 = True
    config_0 = module_0.Config()
    config_0.update_config(bool_0)


def test_case_10():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_11():
    str_0 = "\n4`-x;SxcF\r"
    bool_0 = True
    str_1 = "S"
    config_0 = module_0.Config(env_prefix=str_1)
    str_2 = "m!f'0!w,zw(C\r{]u"
    none_type_0 = config_0.__setattr__(str_2, bool_0)
    config_1 = module_0.Config(converters=none_type_0)
    var_0 = config_1.update_config(config_0)
    var_1 = module_1.getmembers(str_0, none_type_0)
    set_0 = set()
    none_type_1 = config_1.register_type(set_0)
    config_1.__getattr__(var_1)


def test_case_12():
    str_0 = "S"
    config_0 = module_0.Config(env_prefix=str_0)
    config_0.update_config(str_0)


def test_case_13():
    str_0 = "\n4`-x;(xcF\r"
    str_1 = ""
    bool_0 = False
    dict_0 = {str_0: str_0, str_1: bool_0}
    config_0 = module_0.Config(converters=dict_0)
    str_2 = "LOCAL_CERT_CREATOR"
    config_0.__setattr__(str_2, bool_0)


def test_case_14():
    str_0 = "\n4`-x;SxcF\r"
    bool_0 = False
    str_1 = "S"
    config_0 = module_0.Config(env_prefix=str_1)
    str_2 = "m!f'0!w,zw(C\r{]u"
    none_type_0 = config_0.__setattr__(str_2, bool_0)
    config_1 = module_0.Config(converters=none_type_0)
    var_0 = config_1.update_config(config_0)
    var_1 = module_1.getmembers(str_0, none_type_0)
    set_0 = set()
    none_type_1 = config_1.register_type(set_0)
    config_1.load_environment_vars(str_1)
