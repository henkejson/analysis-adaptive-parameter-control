# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import sanic.utils as module_1
import inspect as module_2
import sanic.helpers as module_3
import sanic.constants as module_4


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    str_0 = 'Y}"$I\t@d8jB*<#\r/Ur'
    config_0 = module_0.Config(env_prefix=str_0)
    none_type_0 = None
    str_1 = "\nLogger used by Sanic for server relat messages\n"
    str_1.__setitem__(str_0, none_type_0)


def test_case_2():
    config_0 = module_0.Config()
    none_type_0 = config_0.register_type(config_0)
    config_0.update_config(none_type_0)


def test_case_3():
    str_0 = "5\\(Z1"
    config_0 = module_0.Config()
    none_type_0 = config_0.__setitem__(str_0, str_0)
    str_1 = "\nLogger used by Sanic for server related messages\n"
    str_2 = "7zHh1,"
    dict_0 = {str_2: str_2, str_1: str_1}
    module_1.load_module_from_file_location(str_1, str_1, **dict_0)


def test_case_4():
    str_0 = '"e(n'
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0, converters=none_type_0)
    var_0 = module_2.isdatadescriptor(config_0)
    var_0.__setitem__(str_0, str_0)


def test_case_5():
    bool_0 = False
    config_0 = module_0.Config(converters=bool_0)
    none_type_0 = None
    default_0 = module_3.Default()
    config_1 = module_0.Config(config_0, converters=bool_0)
    module_1.load_module_from_file_location(default_0, none_type_0, *none_type_0)


def test_case_6():
    config_0 = module_0.Config()
    config_0.__getattr__(config_0)


def test_case_7():
    bool_0 = True
    module_0.Config(converters=bool_0)


def test_case_8():
    config_0 = module_0.Config()
    none_type_0 = None
    config_0.__getattr__(none_type_0)


def test_case_9():
    config_0 = module_0.Config()
    none_type_0 = None
    config_0.update_config(none_type_0)


def test_case_10():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_11():
    bool_0 = False
    config_0 = module_0.Config()
    str_0 = "Not all workers acknowledged a successful startup. Shutting down.\n\n"
    config_1 = module_0.Config(config_0, str_0, bool_0)
    none_type_0 = config_0.__setitem__(str_0, config_0)
    var_0 = config_0.load_environment_vars()
    module_0.DescriptorMeta(var_0, *var_0)


def test_case_12():
    config_0 = module_0.Config()
    var_0 = module_4.LocalCertCreator.AUTO
    var_1 = module_2.isdatadescriptor(var_0)
    config_0.update_config(var_0)


def test_case_13():
    config_0 = module_0.Config()
    none_type_0 = None
    none_type_1 = config_0.register_type(none_type_0)
    var_0 = module_2.isdatadescriptor(config_0)
    config_0.register_type(none_type_0)


def test_case_14():
    config_0 = module_0.Config()
    none_type_0 = None
    config_1 = module_0.Config(env_prefix=none_type_0)
    var_0 = config_0.update_config(config_0)
    config_2 = module_0.Config(
        env_prefix=none_type_0, keep_alive=config_1, converters=none_type_0
    )
    none_type_1 = None
    var_1 = module_0.Config(config_0, var_0, converters=config_1)
    none_type_2 = config_1.register_type(var_1)
    var_2 = config_2.update_config(var_1)
    config_1.__setitem__(none_type_1, var_1)


def test_case_15():
    config_0 = module_0.Config()
    none_type_0 = None
    config_1 = module_0.Config(env_prefix=none_type_0)
    str_0 = "LOCAL_CERT_CREATOR"
    config_0.__setitem__(str_0, config_1)
