# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import sanic.errorpages as module_1


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    bytes_0 = b"\x8cNJ\xdcI\xee\xfa_\xb1"
    config_0 = module_0.Config(converters=bytes_0)


def test_case_2():
    bytes_0 = b"\xdeNJ\xdcI\xee\xfa\xc7\xb1"
    none_type_0 = None
    config_0 = module_0.Config(keep_alive=bytes_0)
    none_type_1 = config_0.register_type(none_type_0)
    str_0 = "N+l+U"
    module_1.check_error_format(str_0)


def test_case_3():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0)


def test_case_4():
    str_0 = 'X}"nc :GK)\x0c_'
    str_1 = 'o-"k1BY'
    dict_0 = {str_0: str_0, str_1: str_0}
    none_type_0 = None
    config_0 = module_0.Config(dict_0, str_1, converters=none_type_0)


def test_case_5():
    config_0 = module_0.Config()
    bytes_0 = b"\xe0\xfe\xde3\x1f"
    none_type_0 = None
    config_1 = module_0.Config(env_prefix=none_type_0, converters=bytes_0)
    var_0 = config_1.update_config(config_0)
    config_0.__getattr__(none_type_0)


def test_case_6():
    bytes_0 = b"=\x1b\xef[\x87\xbfV3\xf3\x84|\xda^e\xa1\x03\x7f\xee\xa9\xaf"
    config_0 = module_0.Config()
    config_0.update_config(bytes_0)


def test_case_7():
    config_0 = module_0.Config()
    bytes_0 = b"\xe0\xfe\xde3\x1f"
    none_type_0 = None
    config_1 = module_0.Config(env_prefix=none_type_0, converters=bytes_0)
    config_1.__getattr__(config_0)


def test_case_8():
    config_0 = module_0.Config()
    list_0 = [config_0]
    none_type_0 = config_0.update(*list_0, **config_0)
    str_0 = 'F\te*$"4\\,:oonF,aw$'
    none_type_1 = config_0.__setitem__(str_0, config_0)
    config_1 = module_0.Config(converters=config_0)
    config_0.update_config(none_type_0)


def test_case_9():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_10():
    config_0 = module_0.Config()
    none_type_0 = None
    config_0.update_config(none_type_0)


def test_case_11():
    config_0 = module_0.Config()
    bytes_0 = b"}\"y'2Gjy\x9d-B\xbb"
    none_type_0 = None
    module_0.Config(env_prefix=none_type_0, converters=bytes_0)
