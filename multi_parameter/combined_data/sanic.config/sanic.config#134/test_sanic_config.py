# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import sanic.helpers as module_1
import inspect as module_2


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    dict_0 = {}
    default_0 = module_1.Default(**dict_0)
    module_0.Config(keep_alive=default_0, converters=default_0)


def test_case_2():
    bool_0 = False
    config_0 = module_0.Config(keep_alive=bool_0)


def test_case_3():
    bool_0 = False
    config_0 = module_0.Config(env_prefix=bool_0)


def test_case_4():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)
    bool_0 = True
    module_0.Config(bool_0)


def test_case_5():
    config_0 = module_0.Config()
    bool_0 = True
    str_0 = "_FALLBACK_ERROR_FORMAT"
    none_type_0 = config_0.__setattr__(str_0, config_0)
    config_0.__getattr__(bool_0)


def test_case_6():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_7():
    default_0 = module_1.Default()
    bytes_0 = b"Unavailable For Legal Reasons"
    module_0.Config(converters=bytes_0)


def test_case_8():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)
    var_1 = module_2.isdatadescriptor(var_0)
    config_0.__setitem__(var_1, config_0)


def test_case_9():
    config_0 = module_0.Config()
    tuple_0 = ()
    config_0.update_config(tuple_0)


def test_case_10():
    config_0 = module_0.Config()
    bool_0 = True
    config_1 = module_0.Config(keep_alive=bool_0, converters=config_0)
    var_0 = config_0.load_environment_vars()


def test_case_11():
    config_0 = module_0.Config()
    none_type_0 = None
    str_0 = "cert"
    config_1 = module_0.Config(env_prefix=str_0)
    config_1.__setattr__(config_0, none_type_0)


def test_case_12():
    config_0 = module_0.Config()
    config_0.__getattr__(config_0)


def test_case_13():
    config_0 = module_0.Config()
    str_0 = "w\n=M<~v~[Q|<w(z"
    config_1 = module_0.Config(env_prefix=str_0)
    config_0.update_config(str_0)


def test_case_14():
    config_0 = module_0.Config()
    str_0 = "LOCAL_CERT_CREATOR"
    config_0.__setattr__(str_0, config_0)
