# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import inspect as module_1


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    bool_0 = True
    module_0.Config(env_prefix=bool_0, converters=bool_0)


def test_case_2():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0)


def test_case_3():
    config_0 = module_0.Config()
    str_0 = "ziaSdq\nQ\n|,G3630$`"
    none_type_0 = config_0.__setattr__(str_0, str_0)
    var_0 = module_1.getmembers(config_0)
    config_0.update_config(none_type_0)


def test_case_4():
    config_0 = module_0.Config()
    none_type_0 = config_0.update(**config_0)


def test_case_5():
    config_0 = module_0.Config()
    none_type_0 = config_0.update_config(config_0)


def test_case_6():
    bytes_0 = b"\xfa\x1c#\x8d\xbf\xb1\xb8\x04\xad\xdc__\xe5\x9b\x0c\x0b\xbb"
    module_0.Config(env_prefix=bytes_0, converters=bytes_0)


def test_case_7():
    str_0 = "L"
    config_0 = module_0.Config(env_prefix=str_0)
    str_0.respond(str_0)


def test_case_8():
    str_0 = "L"
    config_0 = module_0.Config(env_prefix=str_0)
    str_1 = "/j()_y\\$m.~F"
    none_type_0 = config_0.__setattr__(str_1, str_0)
    module_0.Config(config_0, str_0, str_0, converters=str_0)


def test_case_9():
    str_0 = ">&[L7$l{&3AySr/{d)\x0b"
    config_0 = module_0.Config(env_prefix=str_0)


def test_case_10():
    config_0 = module_0.Config()
    none_type_0 = config_0.load_environment_vars()
    config_0.__getattr__(config_0)


def test_case_11():
    config_0 = module_0.Config()
    str_0 = '"[z'
    config_1 = module_0.Config(keep_alive=str_0)
    config_0.__getattr__(config_0)


def test_case_12():
    config_0 = module_0.Config()
    none_type_0 = None
    config_0.update_config(none_type_0)


def test_case_13():
    config_0 = module_0.Config()
    str_0 = "&Bohgf77Q"
    none_type_0 = None
    none_type_1 = config_0.__setattr__(str_0, none_type_0)
    none_type_2 = config_0.update(**config_0)
    var_0 = config_0.update_config(config_0)
    bytes_0 = b"\xca\xb3\xae\xb2\xf0\x97\x82\xcd\xe2\x86"
    config_0.update_config(bytes_0)


def test_case_14():
    str_0 = "_"
    config_0 = module_0.Config(env_prefix=str_0)
    none_type_0 = module_1.isdatadescriptor(str_0)
    list_0 = []
    none_type_1 = config_0.update(*list_0, **config_0)
    var_0 = config_0.__repr__()
    config_0.update_config(none_type_0)
