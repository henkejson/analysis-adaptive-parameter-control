# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import inspect as module_1
import sanic.constants as module_2
import sanic.helpers as module_3
import builtins as module_4


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    bool_0 = True
    tuple_0 = (bool_0,)
    none_type_0 = None
    config_0 = module_0.Config(none_type_0, converters=tuple_0)
    str_0 = "p/LId@"
    none_type_1 = None
    var_0 = module_1.getmembers(none_type_1)
    var_0.respond(str_0)


def test_case_2():
    local_cert_creator_0 = module_2.LocalCertCreator.MKCERT
    config_0 = module_0.Config(env_prefix=local_cert_creator_0)


def test_case_3():
    default_0 = module_3.Default()
    str_0 = "\n    This is for ASGI Connections.\n    It provides an interface similar to WebsocketProtocol, but\n    sends/receives over an ASGI connection.\n    "
    module_0.Config(default_0, str_0)


def test_case_4():
    bool_0 = True
    tuple_0 = (bool_0,)
    list_0 = []
    object_0 = module_4.object(*list_0)
    none_type_0 = None
    config_0 = module_0.Config(none_type_0, converters=tuple_0)
    var_0 = module_1.isclass(object_0)
    config_0.__getattr__(bool_0)


def test_case_5():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_6():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0, keep_alive=none_type_0)


def test_case_7():
    config_0 = module_0.Config()
    config_0.__getattr__(config_0)


def test_case_8():
    config_0 = module_0.Config()
    config_0.__setitem__(config_0, config_0)


def test_case_9():
    bytes_0 = b""
    config_0 = module_0.Config(keep_alive=bytes_0)


def test_case_10():
    config_0 = module_0.Config()
    none_type_0 = None
    config_0.update_config(none_type_0)


def test_case_11():
    config_0 = module_0.Config()
    none_type_0 = None
    none_type_1 = config_0.register_type(none_type_0)
    var_0 = config_0.update_config(config_0)
    config_0.register_type(var_0)


def test_case_12():
    config_0 = module_0.Config()
    str_0 = "\x0c2wLeb>Myc"
    config_0.update_config(str_0)


def test_case_13():
    str_0 = ""
    config_0 = module_0.Config(env_prefix=str_0)
    config_0.load_environment_vars(str_0)
