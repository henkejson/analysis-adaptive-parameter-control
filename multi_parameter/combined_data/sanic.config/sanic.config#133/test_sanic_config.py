# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import inspect as module_1
import sanic.constants as module_2


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    bool_0 = True
    module_0.Config(converters=bool_0)


def test_case_2():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0)


def test_case_3():
    config_0 = module_0.Config()
    config_1 = module_0.Config(config_0)


def test_case_4():
    config_0 = module_0.Config()
    none_type_0 = config_0.update(**config_0)
    var_0 = module_1.getmembers(config_0)
    var_1 = config_0.update_config(config_0)
    none_type_1 = config_0.update()
    none_type_2 = config_0.register_type(var_1)
    var_2 = module_1.getmembers(none_type_0)
    config_0.update_config(none_type_1)


def test_case_5():
    config_0 = module_0.Config()
    config_1 = config_0.update_config(config_0)


def test_case_6():
    config_0 = module_0.Config()
    none_type_0 = None
    config_0.update_config(none_type_0)


def test_case_7():
    var_0 = module_2.LocalCertCreator.AUTO
    tuple_0 = ()
    config_0 = module_0.Config(tuple_0, tuple_0)
    config_0.update_config(var_0)


def test_case_8():
    bool_0 = True
    var_0 = module_1.isdatadescriptor(bool_0)
    tuple_0 = ()
    config_0 = module_0.Config(tuple_0, tuple_0)
    str_0 = 'a"dD}x$a[_4'
    config_1 = module_0.Config(env_prefix=str_0)
    var_0.__subclasscheck__(config_0, config_1)


def test_case_9():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0)
    bytes_0 = b"\x1eCp\x89\xea\x01\xb6RM\x11\x10\x0fU9IR\xcf"
    none_type_1 = config_0.register_type(bytes_0)


def test_case_10():
    str_0 = "a@W"
    str_1 = " to run with "
    str_2 = "(>MW)!A\x0co'\ra5F"
    str_3 = ")H2w/"
    dict_0 = {str_0: str_0, str_1: str_0, str_2: str_0, str_3: str_2}
    config_0 = module_0.Config(dict_0, str_0)
    local_cert_creator_0 = module_2.LocalCertCreator.MKCERT
    var_0 = module_1.getmembers(local_cert_creator_0)
    config_0.__getattr__(var_0)


def test_case_11():
    config_0 = module_0.Config()
    none_type_0 = config_0.update(**config_0)
    var_0 = config_0.update_config(config_0)
    config_1 = module_0.Config(keep_alive=config_0, converters=config_0)
    var_1 = module_1.getmembers(none_type_0)
    config_0.update_config(none_type_0)


def test_case_12():
    config_0 = module_0.Config()
    str_0 = "I>"
    none_type_0 = config_0.__setitem__(str_0, str_0)
    var_0 = config_0.update_config(config_0)
    var_1 = config_0.update_config(config_0)
    none_type_1 = config_0.update()
    none_type_2 = config_0.register_type(var_1)
    config_0.update_config(none_type_1)


def test_case_13():
    bool_0 = False
    bytes_0 = b"\xee\n\x85\x83@J\xd0Jis\xef\x1a\xbe\x03\xa1F\xb5\xbf"
    module_0.Config(keep_alive=bool_0, converters=bytes_0)


def test_case_14():
    config_0 = module_0.Config()
    str_0 = "_FALLBACK_ERROR_FORMAT"
    none_type_0 = config_0.__setitem__(str_0, str_0)
    none_type_1 = config_0.update(**config_0)
    var_0 = module_1.getmembers(config_0)
    var_1 = config_0.update_config(config_0)
    var_0.__getattr__(config_0)
