# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import sanic.constants as module_1
import inspect as module_2


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    bool_0 = False
    config_0 = module_0.Config(keep_alive=bool_0, converters=bool_0)


def test_case_2():
    str_0 = "H"
    config_0 = module_0.Config(env_prefix=str_0)


def test_case_3():
    bool_0 = False
    config_0 = module_0.Config(keep_alive=bool_0)
    var_0 = config_0.update_config(config_0)
    config_1 = module_0.Config(converters=config_0)
    config_2 = module_0.Config(config_1, converters=bool_0)


def test_case_4():
    config_0 = module_0.Config()
    none_type_0 = None
    config_0.__getattr__(none_type_0)


def test_case_5():
    bool_0 = False
    config_0 = module_0.Config(keep_alive=bool_0)
    config_0.update_config(bool_0)


def test_case_6():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_7():
    bool_0 = False
    config_0 = module_0.Config(keep_alive=bool_0)
    var_0 = config_0.update_config(config_0)
    config_1 = module_0.Config(var_0, converters=config_0)
    var_1 = config_1.update_config(config_1)


def test_case_8():
    none_type_0 = None
    config_0 = module_0.Config(
        none_type_0, none_type_0, none_type_0, converters=none_type_0
    )
    config_0.__setitem__(config_0, config_0)


def test_case_9():
    var_0 = module_1.LocalCertCreator.TRUSTME
    none_type_0 = None
    config_0 = module_0.Config(converters=none_type_0)
    config_0.update_config(var_0)


def test_case_10():
    none_type_0 = None
    var_0 = module_2.getmembers(none_type_0)
    config_0 = module_0.Config(converters=var_0)
    config_0.__getattr__(var_0)


def test_case_11():
    str_0 = "g<QwQOhK>eyExOzQ"
    module_0.Config(env_prefix=str_0, converters=str_0)


def test_case_12():
    bool_0 = False
    config_0 = module_0.Config(keep_alive=bool_0)
    none_type_0 = config_0.update(**config_0)
    none_type_1 = config_0.register_type(none_type_0)
    var_0 = config_0.load_environment_vars()
    str_0 = "H"
    module_0.Config(env_prefix=str_0, keep_alive=str_0, converters=str_0)
