# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import abc as module_1
import sanic.constants as module_2
import inspect as module_3


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    str_0 = "\x0ce\x0c 3V"
    module_0.Config(converters=str_0)


def test_case_2():
    bool_0 = True
    none_type_0 = None
    config_0 = module_0.Config(none_type_0, keep_alive=bool_0)
    module_1.ABCMeta()


def test_case_3():
    str_0 = "9WY.1$~6_/"
    config_0 = module_0.Config(env_prefix=str_0, keep_alive=str_0)
    config_0.__setitem__(config_0, str_0)


def test_case_4():
    dict_0 = {}
    config_0 = module_0.Config(converters=dict_0)
    local_cert_creator_0 = module_2.LocalCertCreator.TRUSTME
    config_0.__getattr__(local_cert_creator_0)


def test_case_5():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0, converters=none_type_0)
    config_0.__getattr__(config_0)


def test_case_6():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)
    config_0.update_config(var_0)


def test_case_7():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_8():
    config_0 = module_0.Config()
    none_type_0 = config_0.register_type(config_0)
    none_type_1 = None
    var_0 = config_0.update_config(config_0)
    var_1 = config_0.update_config(config_0)
    str_0 = var_0.__str__()
    config_0.update_config(none_type_1)


def test_case_9():
    bytes_0 = b"\xe1\x86\x13\x98t|\x81>Q\x94|"
    module_0.Config(bytes_0)


def test_case_10():
    config_0 = module_0.Config()
    none_type_0 = config_0.update(**config_0)


def test_case_11():
    config_0 = module_0.Config()
    var_0 = module_2.LocalCertCreator.AUTO
    config_0.update_config(var_0)


def test_case_12():
    config_0 = module_0.Config()
    var_0 = config_0.load_environment_vars()
    var_1 = module_3.isdatadescriptor(var_0)
    var_2 = module_0.Config(keep_alive=var_1, converters=config_0)
    config_0.__getattr__(config_0)
