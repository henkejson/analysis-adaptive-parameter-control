# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import sanic.utils as module_1
import inspect as module_2


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    int_0 = -1157
    module_0.Config(converters=int_0)


def test_case_2():
    str_0 = "w\x0bR,vqyhQ<F+5u1yY6WR"
    str_1 = "'\x0bKJ}1y\r"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_1}
    none_type_0 = None
    config_0 = module_0.Config(
        env_prefix=str_1, keep_alive=dict_0, converters=none_type_0
    )
    module_0.DescriptorMeta(str_0)


def test_case_3():
    dict_0 = {}
    config_0 = module_0.Config(env_prefix=dict_0)


def test_case_4():
    config_0 = module_0.Config()
    module_1.load_module_from_file_location(config_0)


def test_case_5():
    config_0 = module_0.Config()
    none_type_0 = config_0.register_type(config_0)
    config_0.update_config(none_type_0)


def test_case_6():
    config_0 = module_0.Config()
    none_type_0 = config_0.update_config(config_0)


def test_case_7():
    config_0 = module_0.Config()
    none_type_0 = config_0.register_type(config_0)


def test_case_8():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0]
    module_0.Config(env_prefix=list_0)


def test_case_9():
    config_0 = module_0.Config()
    none_type_0 = config_0.register_type(config_0)
    config_0.__setitem__(none_type_0, none_type_0)


def test_case_10():
    config_0 = module_0.Config()
    none_type_0 = config_0.register_type(config_0)
    config_0.register_type(config_0)


def test_case_11():
    config_0 = module_0.Config()
    var_0 = module_0.Config(config_0, converters=config_0)
    var_1 = module_2.getmembers(config_0)
    list_0 = [config_0, var_1, var_1, config_0]
    none_type_0 = config_0.update(*list_0)
    config_0.__getattr__(var_0)


def test_case_12():
    config_0 = module_0.Config()
    none_type_0 = None
    config_1 = module_0.Config(config_0, converters=none_type_0)
    var_0 = config_0.update_config(config_0)
    config_0.__setattr__(var_0, config_0)


def test_case_13():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)
    var_1 = var_0.__repr__()
    str_0 = var_1.__str__()
    var_2 = module_2.getmembers(config_0)
    config_0.update_config(var_1)


def test_case_14():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)
    str_0 = var_0.__str__()
    config_1 = module_0.Config(env_prefix=var_0, converters=str_0)
    var_1 = module_2.getmembers(config_0)
    config_0.update_config(var_0)


def test_case_15():
    str_0 = "_FALLBACK_ERROR_FORMAT"
    str_1 = "{H"
    str_2 = "A matching result of a MIME string against a header.\n\n    This class is a representation of a matching result of a MIME string\n    against a header. It encapsulates the MIME string, the header, and\n    provides methods for matching against other MIME strings.\n\n    Args:\n        mime (str): The MIME string to match.\n        header (MediaType): The header to match against, if any.\n    "
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0, str_2: str_1}
    module_0.Config(dict_0)


def test_case_16():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)
    var_1 = module_2.getmembers(config_0)
    list_0 = [config_0, var_1, var_1, config_0]
    none_type_0 = config_0.update(*list_0)
    var_1.register_type(var_1)
