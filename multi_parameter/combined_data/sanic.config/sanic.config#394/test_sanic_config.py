# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import sanic.helpers as module_1
import inspect as module_2


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0)
    config_1 = module_0.Config(env_prefix=none_type_0, converters=config_0)
    var_0 = config_0.update_config(config_0)
    config_0.update_config(none_type_0)


def test_case_2():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0)
    config_1 = module_0.Config(converters=none_type_0)


def test_case_3():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0)
    config_1 = module_0.Config(config_0)
    config_0.__setattr__(none_type_0, none_type_0)


def test_case_4():
    config_0 = module_0.Config()
    none_type_0 = None
    config_0.update_config(none_type_0)


def test_case_5():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0)
    config_1 = module_0.Config()
    str_0 = ""
    str_1 = "Gg*2ij1kr#i:_z'W;D,\r"
    none_type_1 = config_0.register_type(str_1)
    none_type_2 = config_0.__setitem__(str_0, str_0)
    var_0 = config_1.update_config(config_0)
    str_2 = var_0.__str__()
    default_0 = module_1.Default()
    var_1 = config_0.update_config(default_0)
    dict_0 = {}
    default_1 = module_1.Default(**dict_0)
    config_1.update_config(str_0)


def test_case_6():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_7():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0)
    config_1 = module_0.Config()
    none_type_1 = config_0.register_type(config_0)


def test_case_8():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0)
    config_0.__getattr__(none_type_0)


def test_case_9():
    none_type_0 = None
    config_0 = module_0.Config()
    bool_0 = True
    config_1 = module_0.Config(
        env_prefix=none_type_0, keep_alive=bool_0, converters=none_type_0
    )
    str_0 = "Wm4h:11?"
    none_type_1 = config_1.register_type(str_0)
    config_0.update_config(none_type_0)


def test_case_10():
    none_type_0 = None
    config_0 = module_0.Config(keep_alive=none_type_0, converters=none_type_0)
    config_0.__getattr__(config_0)


def test_case_11():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0)
    config_1 = module_0.Config(converters=none_type_0)
    str_0 = "ACCESS_LOG"
    none_type_1 = config_0.__setitem__(str_0, str_0)


def test_case_12():
    complex_0 = 672.6757 + 802.8103j
    dict_0 = {complex_0: complex_0}
    config_0 = module_0.Config(converters=dict_0)
    none_type_0 = config_0.update(**config_0)
    str_0 = "$"
    none_type_1 = config_0.__setattr__(str_0, str_0)
    config_1 = module_0.Config(env_prefix=str_0)
    var_0 = config_0.update_config(config_0)
    module_2.getmembers(var_0, str_0)


def test_case_13():
    bytes_0 = b"Switching Protocols"
    module_0.Config(converters=bytes_0)


def test_case_14():
    config_0 = module_0.Config()
    str_0 = ""
    default_0 = module_1.Default()
    config_0.load_environment_vars(str_0)


def test_case_15():
    str_0 = "9*c#R>zy qy,CL.;0&>&"
    config_0 = module_0.Config(env_prefix=str_0)
    str_1 = "_FALLBACK_ERROR_FORMAT"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0}
    module_0.Config(dict_0)


def test_case_16():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0)
    var_0 = config_0.load_environment_vars()
    config_1 = module_0.Config()
    str_0 = ""
    str_1 = "Gg*nij1kr#i:_z'W;D,\r"
    none_type_1 = config_1.register_type(config_0)
    none_type_2 = config_0.register_type(str_1)
    none_type_3 = config_0.__setitem__(str_0, str_0)
    str_2 = "LOCAL_CERT_CREATOR"
    none_type_4 = config_1.register_type(none_type_0)
    config_1.__setattr__(str_2, none_type_0)
