# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import inspect as module_1
import sanic.helpers as module_2
import abc as module_3


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    bytes_0 = b"\x92\xc9\x8e\x98\xd9\x0b\n\xe0Q\x15\x92z\xfc\x06\xd6\x02\xc6\xdfS"
    module_0.Config(converters=bytes_0)


def test_case_2():
    str_0 = "<7\\?Uc`qOHV;(^U5f9w"
    config_0 = module_0.Config(keep_alive=str_0)


def test_case_3():
    str_0 = "Direct encoding of a Cookie object has been deprecated and will be removed in v24.3."
    dict_0 = {str_0: str_0}
    bool_0 = True
    module_0.Config(dict_0, dict_0, bool_0)


def test_case_4():
    none_type_0 = None
    config_0 = module_0.Config(keep_alive=none_type_0)
    config_0.__getattr__(none_type_0)


def test_case_5():
    int_0 = 409
    config_0 = module_0.Config()
    config_0.update_config(int_0)


def test_case_6():
    str_0 = ""
    config_0 = module_0.Config()
    config_0.update_config(str_0)


def test_case_7():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_8():
    str_0 = "Direct encoding of a Cookie object has been deprecated and will be removed in v24.3."
    dict_0 = module_1.isclass(str_0)
    bool_0 = True
    config_0 = module_0.Config(dict_0, dict_0, bool_0)
    bytes_0 = b"\x92\xc9\x8e\x98\xd9\x0b\n\xe0Q\x15\x92z\xfc\x06\xd6\x02\xc6\xdfS"
    module_0.Config(converters=bytes_0)


def test_case_9():
    bool_0 = True
    str_0 = "}SQR_$2UHsP"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: bool_0}
    none_type_0 = None
    config_0 = module_0.Config(dict_0, converters=none_type_0)
    none_type_1 = config_0.__setitem__(str_0, str_0)
    none_type_2 = config_0.register_type(none_type_0)
    dict_1 = {}
    default_0 = module_2.Default()
    module_3.ABCMeta(**dict_1)


def test_case_10():
    bool_0 = True
    str_0 = "}SQR_$2UHsP"
    none_type_0 = None
    config_0 = module_0.Config(none_type_0, converters=str_0)
    config_0.update_config(bool_0)


def test_case_11():
    config_0 = module_0.Config()
    config_0.__getattr__(config_0)


def test_case_12():
    bool_0 = True
    str_0 = "LOCAL_CERT_CREATOR"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: bool_0}
    none_type_0 = None
    config_0 = module_0.Config(dict_0, converters=none_type_0)
    none_type_1 = config_0.register_type(none_type_0)
    config_0.update_config(config_0)
