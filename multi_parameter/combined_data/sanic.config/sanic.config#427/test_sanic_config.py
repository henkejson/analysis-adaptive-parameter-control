# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import inspect as module_1


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    bool_0 = True
    module_0.Config(converters=bool_0)


def test_case_2():
    bool_0 = False
    config_0 = module_0.Config(keep_alive=bool_0)
    var_0 = config_0.update_config(config_0)
    str_0 = "LOCAL_TLS_CERT"
    none_type_0 = config_0.__setitem__(str_0, str_0)
    var_1 = config_0.load_environment_vars()
    none_type_1 = config_0.register_type(config_0)
    config_0.update_config(bool_0)


def test_case_3():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0)
    none_type_1 = config_0.update(**config_0)
    config_0.__setitem__(none_type_0, config_0)


def test_case_4():
    config_0 = module_0.Config()
    var_0 = module_1.getmembers(config_0)
    config_0.update_config(var_0)


def test_case_5():
    str_0 = "_task"
    list_0 = []
    bytes_0 = b"\xbb\x11jv\xc8}\xbe\x1a\xc1\xf6/\xef\xe8\xcd\xb4"
    config_0 = module_0.Config(env_prefix=list_0, converters=bytes_0)
    config_0.update_config(str_0)


def test_case_6():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_7():
    str_0 = "B\"lF` 'Etp"
    dict_0 = {str_0: str_0, str_0: str_0}
    config_0 = module_0.Config(dict_0, converters=dict_0)
    set_0 = set()
    str_1 = 'ki(Z\x0bp2"(\x0cRG`.g~f:T'
    none_type_0 = None
    config_1 = module_0.Config(env_prefix=none_type_0, converters=none_type_0)
    none_type_1 = config_1.__setattr__(str_1, set_0)
    module_0.DescriptorMeta(set_0)


def test_case_8():
    bool_0 = False
    str_0 = "iQuB&d\x0b^"
    str_1 = "Dn%eo?}':L\"2f"
    dict_0 = {str_0: bool_0, str_1: str_0}
    config_0 = module_0.Config(dict_0, str_1)
    config_1 = module_0.Config(keep_alive=bool_0)
    var_0 = config_1.update_config(config_1)
    str_2 = "LOCAL_TLS_CERT"
    none_type_0 = config_1.__setitem__(str_2, str_2)
    var_1 = config_1.load_environment_vars()
    none_type_1 = config_1.register_type(config_1)
    config_1.update_config(bool_0)


def test_case_9():
    bool_0 = False
    config_0 = module_0.Config(env_prefix=bool_0)
    config_1 = module_0.Config()
    list_0 = [bool_0]
    none_type_0 = config_0.load_environment_vars()
    config_0.__getattr__(list_0)


def test_case_10():
    bool_0 = False
    config_0 = module_0.Config(keep_alive=bool_0)
    none_type_0 = config_0.register_type(config_0)
    config_0.register_type(config_0)
