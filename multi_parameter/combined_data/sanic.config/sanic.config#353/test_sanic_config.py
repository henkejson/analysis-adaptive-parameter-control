# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import sanic.constants as module_1


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    dict_0 = {}
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0, converters=none_type_0)
    config_0.__getattr__(dict_0)


def test_case_2():
    config_0 = module_0.Config()
    config_1 = module_0.Config(config_0, converters=config_0)
    none_type_0 = config_0.update()
    var_0 = config_0.update_config(config_0)
    none_type_1 = None
    config_1.update_config(none_type_1)


def test_case_3():
    config_0 = module_0.Config()
    none_type_0 = config_0.update(**config_0)


def test_case_4():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_5():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)
    config_0.__getattr__(var_0)


def test_case_6():
    config_0 = module_0.Config()
    none_type_0 = None
    config_1 = module_0.Config(none_type_0, converters=config_0)
    var_0 = config_1.load_environment_vars()


def test_case_7():
    bool_0 = True
    module_0.Config(env_prefix=bool_0)


def test_case_8():
    config_0 = module_0.Config()
    none_type_0 = None
    config_1 = module_0.Config(none_type_0, converters=config_0)
    var_0 = config_0.update_config(config_0)
    str_0 = "Match this media type against another media type.\n\n        Check if this media type matches the given mime type/subtype.\n        Wildcards are supported both ways on both type and subtype.\n        If mime contains a semicolon, optionally followed by parameters,\n        the parameters of the two media types must match exactly.\n\n        .. note::\n            Use the `==` operator instead to check for literal matches\n            without expanding wildcards.\n\n\n        Args:\n            media_type (str): A type/subtype string to match.\n\n        Returns:\n            MediaType: Returns `self` if the media types are compatible.\n            None: Returns `None` if the media types are not compatible.\n        "
    str_1 = '"eN-'
    none_type_1 = config_1.__setitem__(str_1, str_0)


def test_case_9():
    config_0 = module_0.Config()
    module_0.Config(config_0, config_0, config_0)


def test_case_10():
    config_0 = module_0.Config()
    none_type_0 = None
    config_0.update_config(none_type_0)


def test_case_11():
    config_0 = module_0.Config()
    var_0 = module_1.LocalCertCreator.MKCERT
    config_1 = module_0.Config()
    config_0.update_config(var_0)


def test_case_12():
    config_0 = module_0.Config()
    none_type_0 = None
    config_1 = module_0.Config(none_type_0, converters=config_0)
    dict_0 = {}
    list_0 = [dict_0, dict_0, none_type_0, config_0]
    module_0.Config(env_prefix=none_type_0, converters=list_0)
