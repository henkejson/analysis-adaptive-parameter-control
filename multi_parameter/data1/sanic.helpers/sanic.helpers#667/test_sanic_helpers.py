# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.helpers as module_0


def test_case_0():
    none_type_0 = None
    module_0.has_message_body(none_type_0)


def test_case_1():
    int_0 = -2901
    module_0.remove_entity_headers(int_0)


def test_case_2():
    bool_0 = module_0.is_atty()


def test_case_3():
    int_0 = 3375
    module_0.is_entity_header(int_0)


def test_case_4():
    bool_0 = True
    module_0.is_hop_by_hop_header(bool_0)


def test_case_5():
    bool_0 = True
    default_0 = module_0.Default()
    bool_1 = default_0.__repr__()
    var_0 = module_0.has_message_body(bool_0)
    tuple_0 = (var_0, var_0, bool_0)
    str_0 = var_0.__str__()
    set_0 = {tuple_0, var_0, tuple_0}
    str_1 = default_0.__str__()
    str_2 = var_0.__str__()
    module_0.has_message_body(set_0)


def test_case_6():
    float_0 = 111.074353
    var_0 = module_0.has_message_body(float_0)
    var_1 = var_0.__repr__()
    str_0 = var_1.__str__()
    var_2 = module_0.is_hop_by_hop_header(var_1)


def test_case_7():
    bool_0 = module_0.is_atty()
    var_0 = module_0.has_message_body(bool_0)
    str_0 = var_0.__str__()
    str_1 = var_0.__str__()
    var_1 = module_0.is_entity_header(str_1)


def test_case_8():
    bytes_0 = b"\x9b\n\xebA\x8d\xc4\xf0\xc0\x7f\xe6\x84x\xea\xa5\x8c\xf6\xddL="
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    var_0 = module_0.remove_entity_headers(dict_0)


def test_case_9():
    int_0 = 304
    var_0 = module_0.has_message_body(int_0)
    var_1 = var_0.__repr__()
    dict_0 = {}
    bool_0 = module_0.is_atty()
    default_0 = module_0.Default(**dict_0)
    str_0 = var_1.__str__()
    var_2 = default_0.__repr__()
    str_1 = default_0.__str__()
    str_2 = str_1.__str__()
    var_3 = module_0.has_message_body(var_0)
    var_4 = default_0.__repr__()
    var_5 = module_0.has_message_body(var_0)
    str_3 = var_4.__str__()
    str_4 = var_4.__str__()
    dict_1 = {str_1: str_2, var_4: str_1}
    var_6 = module_0.remove_entity_headers(dict_1)
    str_5 = var_6.__str__()
    module_0.remove_entity_headers(str_1)
