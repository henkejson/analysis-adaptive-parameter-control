# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.helpers as module_0
import inspect as module_1


def test_case_0():
    bool_0 = True
    var_0 = module_0.has_message_body(bool_0)


def test_case_1():
    bytes_0 = b"Requested Range Not Satisfiable"
    dict_0 = {bytes_0: bytes_0}
    var_0 = module_0.remove_entity_headers(dict_0)


def test_case_2():
    bool_0 = module_0.is_atty()


def test_case_3():
    bool_0 = module_0.is_atty()
    module_0.is_hop_by_hop_header(bool_0)


def test_case_4():
    int_0 = 159
    default_0 = module_0.Default()
    var_0 = default_0.__repr__()
    var_1 = module_0.has_message_body(int_0)
    var_2 = module_1.ismodule(int_0)
    var_3 = module_0.has_message_body(var_1)
    module_0.import_string(var_1, var_2)


def test_case_5():
    int_0 = 182
    var_0 = module_0.has_message_body(int_0)
    bool_0 = module_0.is_atty()
    var_1 = var_0.__repr__()
    default_0 = module_0.Default()
    str_0 = var_0.__str__()
    str_1 = var_0.__str__()
    var_2 = module_0.has_message_body(var_0)
    var_3 = var_2.__repr__()
    var_4 = var_2.__repr__()
    str_2 = var_0.__str__()
    str_3 = default_0.__str__()
    var_5 = var_2.__repr__()
    var_6 = module_0.has_message_body(var_0)
    var_7 = var_6.__repr__()
    var_8 = module_0.has_message_body(var_0)
    dict_0 = {str_2: var_6}
    var_9 = module_0.remove_entity_headers(dict_0)
    var_10 = module_0.is_hop_by_hop_header(str_2)


def test_case_6():
    int_0 = 159
    var_0 = module_0.has_message_body(int_0)
    var_1 = module_0.has_message_body(var_0)
    module_0.is_hop_by_hop_header(var_1)


def test_case_7():
    int_0 = 204
    var_0 = module_0.has_message_body(int_0)
    bool_0 = module_0.is_atty()
    str_0 = var_0.__str__()
    var_1 = var_0.__repr__()
    var_2 = module_0.has_message_body(var_0)
    str_1 = var_0.__str__()
    var_3 = module_0.is_entity_header(str_0)
    var_4 = module_0.has_message_body(var_2)
    dict_0 = {var_1: bool_0}
    var_5 = module_0.remove_entity_headers(dict_0)
