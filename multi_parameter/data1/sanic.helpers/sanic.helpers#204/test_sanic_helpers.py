# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.helpers as module_0


def test_case_0():
    bool_0 = True
    var_0 = module_0.has_message_body(bool_0)


def test_case_1():
    str_0 = 'Provide a default behavior for the objects of ErrorHandler.\n\n        If a developer chooses to extend the ErrorHandler, they can\n        provide a custom implementation for this method to behave in a way\n        they see fit.\n\n        Args:\n            request (sanic.request.Request): Incoming request.\n            exception (sanic.exceptions.SanicException or Exception): Exception object.\n\n        Returns:\n            HTTPResponse: The response object.\n\n        Examples:\n            ```python\n            class CustomErrorHandler(ErrorHandler):\n                def default(self, request: Request, exception: Exception) -> HTTPResponse:\n                    # Custom logic for handling the exception and creating a response\n                    custom_response = my_custom_logic(request, exception)\n                    return custom_response\n\n            app = Sanic("MyApp", error_handler=CustomErrorHandler())\n            ```\n        '
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.remove_entity_headers(dict_0)


def test_case_2():
    bool_0 = module_0.is_atty()


def test_case_3():
    bool_0 = True
    module_0.is_hop_by_hop_header(bool_0)


def test_case_4():
    default_0 = module_0.Default()
    str_0 = default_0.__str__()
    var_0 = default_0.__repr__()


def test_case_5():
    int_0 = 192
    var_0 = module_0.has_message_body(int_0)
    set_0 = {int_0, int_0}
    var_1 = set_0.__repr__()
    var_2 = module_0.is_hop_by_hop_header(var_1)
    var_3 = var_2.__repr__()
    var_4 = var_0.__repr__()


def test_case_6():
    str_0 = "2}]9\rU7RA_"
    default_0 = module_0.Default()
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    bool_0 = module_0.is_atty()
    var_0 = module_0.remove_entity_headers(dict_0)
    var_1 = module_0.is_hop_by_hop_header(str_0)
    dict_1 = {}
    str_1 = var_0.__str__()
    default_1 = module_0.Default(**dict_1)
    str_2 = var_1.__str__()
    str_3 = var_1.__str__()
    str_4 = var_1.__str__()
    var_2 = module_0.is_entity_header(str_4)
    float_0 = 304.0
    var_3 = module_0.has_message_body(float_0)
    var_4 = module_0.has_message_body(bool_0)
    str_5 = var_3.__str__()
    var_5 = var_2.__repr__()
    str_6 = default_1.__str__()
    var_6 = module_0.has_message_body(var_2)
    module_0.has_message_body(str_6)


def test_case_7():
    str_0 = "content-language"
    dict_0 = {str_0: str_0}
    var_0 = module_0.remove_entity_headers(dict_0)


def test_case_8():
    str_0 = "content-language"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    bool_0 = module_0.is_atty()
    var_0 = module_0.remove_entity_headers(dict_0)
    bool_1 = module_0.is_atty()
    var_1 = module_0.is_hop_by_hop_header(str_0)
    var_2 = module_0.remove_entity_headers(dict_0, dict_0)
    module_0.Default(**var_1)
