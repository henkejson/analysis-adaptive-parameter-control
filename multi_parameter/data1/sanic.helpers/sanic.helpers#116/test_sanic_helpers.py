# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.helpers as module_0


def test_case_0():
    bytes_0 = b"a\x9a\xc7\xf3\x8e\x89\xd3\x0c.\xf3)\xe9\xf2\xc9\x89\xf3"
    module_0.has_message_body(bytes_0)


def test_case_1():
    int_0 = 318
    var_0 = module_0.has_message_body(int_0)
    module_0.remove_entity_headers(var_0)


def test_case_2():
    bool_0 = module_0.is_atty()


def test_case_3():
    str_0 = "Y&wCb"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.remove_entity_headers(dict_0)


def test_case_4():
    bool_0 = False
    module_0.is_hop_by_hop_header(bool_0)


def test_case_5():
    int_0 = -1889
    var_0 = module_0.has_message_body(int_0)
    str_0 = "Y&wCub"
    str_1 = "Register a middleware to be called after a response is created.\n\n        This is the same as *@app.middleware('response')*.\n\n        Args:\n            middleware (Callable, optional): A callable that takes in a\n                request and response. Defaults to `None`.\n\n        Returns:\n            Callable: The decorated middleware function or a partial function\n                depending on how the method was called.\n\n        Examples:\n            ```python\n            @app.on_response\n            async def custom_middleware(request, response):\n                response.headers['X-Server'] = 'Sanic'\n            ```\n        "
    dict_0 = {str_0: var_0, str_0: int_0, str_1: str_0, str_0: str_0}
    var_1 = module_0.is_entity_header(str_1)
    var_2 = module_0.remove_entity_headers(dict_0)
    var_3 = var_2.__repr__()
    default_0 = module_0.Default()
    var_4 = default_0.__repr__()
    module_0.is_entity_header(dict_0)


def test_case_6():
    int_0 = -1889
    var_0 = module_0.has_message_body(int_0)
    str_0 = "Y&wCub"
    str_1 = "Registr a middleware to be called after a response is created.\n\n        Tis is the same as *@app.middleware('response')*.\n\n        Args:\n            middleware (Callable, optional): A callable that takes in a\n                request and response. Defaults to `None`.\n\n        Returns:\n            Callable: The decorated middleware function or a partial function\n                depending on how the method was called.\n\n        Examples:\n            ```python\n            @app.on_response\n            async def custom_middleware(request, response):\n                response.headers['X-Server'] = 'Sanic'\n            ```\n        "
    dict_0 = {str_0: var_0, str_0: int_0, str_1: str_0, str_0: str_0}
    var_1 = module_0.is_entity_header(str_1)
    var_2 = module_0.remove_entity_headers(dict_0)
    var_3 = var_2.__repr__()
    default_0 = module_0.Default()
    str_2 = default_0.__str__()
    module_0.has_message_body(default_0)


def test_case_7():
    float_0 = -1442.9
    var_0 = module_0.has_message_body(float_0)
    bytes_0 = b"%"
    var_1 = module_0.is_entity_header(bytes_0)


def test_case_8():
    int_0 = 204
    var_0 = module_0.has_message_body(int_0)
    str_0 = "Register a middleware to be#called after a response is created.\n\n        This is the same as *@app.middleware('response')*.\n\n        Args:\n            middleware (Callable, optional): A callable that takes in a\n                request and response. Defaults to `None`.\n\n        Returns:\n            Callable: The decorated middleware function or a partial function\n                depending on how the method was called.\n\n        Examples:\n            ```python\n            @app.on_response\n            async def custom_middleware(request, response):\n                response.headers['X-Server'] = 'Sanic'\n            ```\n        "
    var_1 = var_0.__repr__()
    dict_0 = {str_0: var_0, str_0: int_0, str_0: str_0, str_0: str_0, str_0: str_0}
    var_2 = module_0.is_hop_by_hop_header(str_0)
    var_3 = int_0.__repr__()
    str_1 = var_3.__str__()
    var_4 = module_0.remove_entity_headers(dict_0)
    str_2 = module_0.is_hop_by_hop_header(str_1)
    var_5 = var_1.__repr__()
    var_6 = module_0.has_message_body(str_2)
    complex_0 = -1265 - 214.2202j
    module_0.remove_entity_headers(complex_0)
