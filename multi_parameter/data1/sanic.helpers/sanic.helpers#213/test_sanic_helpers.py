# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.helpers as module_0
import inspect as module_1


def test_case_0():
    str_0 = "AA!m4\x0bX!',+\rK]R`lFyS"
    module_0.has_message_body(str_0)


def test_case_1():
    int_0 = 1428
    module_0.remove_entity_headers(int_0)


def test_case_2():
    bool_0 = module_0.is_atty()


def test_case_3():
    bool_0 = module_0.is_atty()
    module_0.is_entity_header(bool_0)


def test_case_4():
    tuple_0 = ()
    module_0.is_hop_by_hop_header(tuple_0)


def test_case_5():
    default_0 = module_0.Default()
    str_0 = default_0.__str__()
    module_0.has_message_body(default_0)


def test_case_6():
    float_0 = 2185.0
    var_0 = module_0.has_message_body(float_0)
    str_0 = var_0.__repr__()


def test_case_7():
    bool_0 = module_0.is_atty()
    var_0 = module_0.has_message_body(bool_0)


def test_case_8():
    str_0 = "Configuraion value converter '"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.remove_entity_headers(dict_0)


def test_case_9():
    str_0 = "sanic.Sanic"
    module_0.import_string(str_0)


def test_case_10():
    bool_0 = True
    var_0 = module_0.has_message_body(bool_0)
    str_0 = "L'[fl#O Fg*="
    var_1 = var_0.__repr__()
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    default_0 = module_0.Default()
    str_1 = default_0.__str__()
    var_2 = var_0.__repr__()
    var_3 = module_0.remove_entity_headers(dict_0)
    bool_1 = module_0.is_atty()
    var_4 = module_0.is_hop_by_hop_header(var_2)
    var_5 = module_0.is_hop_by_hop_header(str_0)
    float_0 = 304.0
    var_6 = module_0.has_message_body(float_0)
    var_7 = var_1.__repr__()
    var_8 = var_3.__repr__()
    module_0.has_message_body(str_1)


def test_case_11():
    str_0 = "extension-header"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    default_0 = module_0.Default()
    str_1 = default_0.__str__()
    default_1 = module_0.Default()
    var_0 = default_0.__repr__()
    var_1 = module_0.remove_entity_headers(dict_0)
    var_2 = str_0.__repr__()
    bool_0 = module_0.is_atty()
    var_3 = module_0.is_hop_by_hop_header(str_0)
    module_0.has_message_body(str_1)


def test_case_12():
    str_0 = "extension-header"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    default_0 = module_0.remove_entity_headers(dict_0, dict_0)
    str_1 = default_0.__str__()
    var_0 = module_1.ismodule(str_0)
    var_1 = module_0.remove_entity_headers(dict_0)
    var_2 = module_0.Default(*var_1)
    bool_0 = module_0.is_atty()
    var_3 = module_0.is_hop_by_hop_header(str_0)
    var_4 = module_0.has_message_body(bool_0)
    module_0.has_message_body(str_1)
