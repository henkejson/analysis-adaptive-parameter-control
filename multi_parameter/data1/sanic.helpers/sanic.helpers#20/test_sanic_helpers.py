# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.helpers as module_0
import inspect as module_1
import builtins as module_2


def test_case_0():
    bool_0 = False
    var_0 = module_0.has_message_body(bool_0)


def test_case_1():
    bytes_0 = b"No Content"
    module_0.remove_entity_headers(bytes_0)


def test_case_2():
    bytes_0 = b"Vw2\xd8\x0f\xa4\xc9]|+\xfeN"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    var_0 = module_0.remove_entity_headers(dict_0)


def test_case_3():
    bool_0 = module_0.is_atty()


def test_case_4():
    bytes_0 = b'"\x94['
    set_0 = {bytes_0}
    module_0.is_entity_header(set_0)


def test_case_5():
    int_0 = 565
    module_0.is_hop_by_hop_header(int_0)


def test_case_6():
    int_0 = 211
    default_0 = module_0.Default()
    var_0 = module_0.has_message_body(int_0)
    str_0 = default_0.__str__()
    str_1 = var_0.__str__()


def test_case_7():
    int_0 = 605
    var_0 = module_0.has_message_body(int_0)


def test_case_8():
    str_0 = ".~zJt>6L"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.remove_entity_headers(dict_0)
    var_1 = var_0.__repr__()
    bool_0 = module_0.is_atty()
    var_2 = module_0.has_message_body(bool_0)
    int_0 = 204
    var_3 = var_1.__repr__()
    var_4 = module_1.ismodule(dict_0)
    var_5 = var_2.__repr__()
    var_6 = module_1.ismodule(var_0)
    object_0 = module_2.object()
    default_0 = module_0.Default()
    var_7 = var_4.__repr__()
    str_1 = var_2.__str__()
    var_8 = module_0.has_message_body(int_0)
    str_2 = var_7.__str__()
    var_9 = module_0.is_entity_header(var_7)
    module_0.is_hop_by_hop_header(var_0)


def test_case_9():
    str_0 = "content-encoding"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.remove_entity_headers(dict_0)
    var_1 = var_0.__repr__()
    var_2 = module_1.ismodule(dict_0)
    default_0 = module_0.Default()
    module_0.remove_entity_headers(default_0, var_1)


def test_case_10():
    str_0 = "content-encoding"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.remove_entity_headers(dict_0)
    bool_0 = module_0.is_atty()
    var_1 = var_0.__repr__()
    bool_1 = module_0.remove_entity_headers(dict_0, dict_0)
    module_0.has_message_body(bool_1)
