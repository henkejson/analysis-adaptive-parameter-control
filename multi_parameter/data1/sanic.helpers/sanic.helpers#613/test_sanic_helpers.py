# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.helpers as module_0


def test_case_0():
    int_0 = 1692
    var_0 = module_0.has_message_body(int_0)


def test_case_1():
    none_type_0 = None
    module_0.remove_entity_headers(none_type_0)


def test_case_2():
    bytes_0 = b"\xb9R}\xe3\xc5\x95\xb9\xce\xfd\x8e"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    var_0 = module_0.remove_entity_headers(dict_0)


def test_case_3():
    bool_0 = module_0.is_atty()


def test_case_4():
    default_0 = module_0.Default()


def test_case_5():
    none_type_0 = None
    module_0.is_entity_header(none_type_0)


def test_case_6():
    none_type_0 = None
    module_0.is_hop_by_hop_header(none_type_0)


def test_case_7():
    default_0 = module_0.Default()
    var_0 = default_0.__repr__()
    module_0.has_message_body(var_0)


def test_case_8():
    default_0 = module_0.Default()
    float_0 = 203.37053797628428
    str_0 = default_0.__str__()
    default_1 = module_0.Default()
    str_1 = default_1.__str__()
    bool_0 = module_0.is_atty()
    var_0 = module_0.has_message_body(float_0)
    str_2 = var_0.__str__()
    bytes_0 = b"\x03\x02r\xcc\x9a^\xe2\x10\x80\xfd\xd0\xd3"
    dict_0 = {str_2: str_2, bytes_0: bool_0}
    var_1 = module_0.remove_entity_headers(dict_0)
    module_0.is_hop_by_hop_header(dict_0)


def test_case_9():
    bool_0 = module_0.is_atty()
    var_0 = module_0.has_message_body(bool_0)


def test_case_10():
    bool_0 = module_0.is_atty()
    default_0 = module_0.Default()
    float_0 = 204.0
    var_0 = default_0.__repr__()
    str_0 = default_0.__str__()
    str_1 = default_0.__str__()
    bool_1 = module_0.is_atty()
    str_2 = module_0.is_entity_header(str_1)
    bool_2 = module_0.is_atty()
    var_1 = module_0.has_message_body(float_0)
    str_3 = var_1.__str__()
    bytes_0 = b"\x03\x02r\xcc^\x10\x80\xfd\xd0\xd3"
    str_4 = var_1.__str__()
    dict_0 = {str_4: str_4, bytes_0: bool_2}
    var_2 = module_0.remove_entity_headers(dict_0)
    var_3 = module_0.is_hop_by_hop_header(str_3)
    module_0.remove_entity_headers(str_2)
