# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import py_backwards.transformers.return_from_generator as module_0
import typed_ast._ast3 as module_1
import typed_ast.ast3 as module_2


def test_case_0():
    none_type_0 = None
    return_from_generator_transformer_0 = module_0.ReturnFromGeneratorTransformer(
        none_type_0
    )


def test_case_1():
    str_0 = "AY^"
    return_from_generator_transformer_0 = module_0.ReturnFromGeneratorTransformer(str_0)
    function_def_0 = module_1.FunctionDef(*str_0)
    var_0 = return_from_generator_transformer_0.visit(function_def_0)


def test_case_2():
    str_0 = "d6~[{5@r@<-cq12~"
    return_from_generator_transformer_0 = module_0.ReturnFromGeneratorTransformer(str_0)
    list_0 = [str_0, str_0, str_0]
    function_def_0 = module_1.FunctionDef(*list_0)
    function_def_1 = return_from_generator_transformer_0.visit_FunctionDef(
        function_def_0
    )


def test_case_3():
    str_0 = ""
    return_from_generator_transformer_0 = module_0.ReturnFromGeneratorTransformer(str_0)
    list_0 = [str_0, str_0, str_0]
    function_def_0 = module_1.FunctionDef(*list_0)
    function_def_1 = return_from_generator_transformer_0.visit_FunctionDef(
        function_def_0
    )


def test_case_4():
    str_0 = "pathlib2"
    var_0 = module_2.parse(str_0)
    var_1 = module_2.fix_missing_locations(var_0)
    return_from_generator_transformer_0 = module_0.ReturnFromGeneratorTransformer(str_0)
    function_def_0 = return_from_generator_transformer_0.visit_FunctionDef(var_1)
    return_from_generator_transformer_1 = module_0.ReturnFromGeneratorTransformer(str_0)
