# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import typed_ast._ast3 as module_0
import py_backwards.transformers.return_from_generator as module_1
import typed_ast.ast3 as module_2


def test_case_0():
    yield_0 = module_0.Yield()
    return_from_generator_transformer_0 = module_1.ReturnFromGeneratorTransformer(
        yield_0
    )


def test_case_1():
    str_0 = "AE$K<?$[ ^'"
    return_from_generator_transformer_0 = module_1.ReturnFromGeneratorTransformer(str_0)
    list_0 = [str_0, return_from_generator_transformer_0, str_0]
    function_def_0 = module_0.FunctionDef(*list_0)
    function_def_1 = return_from_generator_transformer_0.visit_FunctionDef(
        function_def_0
    )


def test_case_2():
    starred_0 = module_0.Starred()
    var_0 = module_2.iter_fields(starred_0)
    return_from_generator_transformer_0 = module_1.ReturnFromGeneratorTransformer(var_0)
    list_0 = [var_0, return_from_generator_transformer_0, var_0]
    return_from_generator_transformer_1 = module_1.ReturnFromGeneratorTransformer(
        list_0
    )
    return_from_generator_transformer_2 = module_1.ReturnFromGeneratorTransformer(var_0)
    function_def_0 = module_0.FunctionDef(*list_0)
    function_def_1 = return_from_generator_transformer_0.visit_FunctionDef(
        function_def_0
    )
    dict_0 = {}
    function_def_2 = module_0.FunctionDef(**dict_0)
    return_from_generator_transformer_3 = module_1.ReturnFromGeneratorTransformer(
        function_def_0
    )
    floor_div_0 = module_0.FloorDiv()
    function_def_2.visit(return_from_generator_transformer_0)


def test_case_3():
    str_0 = "N\\"
    starred_0 = module_0.Starred()
    var_0 = module_2.parse(str_0)
    return_from_generator_transformer_0 = module_1.ReturnFromGeneratorTransformer(
        starred_0
    )
    function_def_0 = return_from_generator_transformer_0.visit_FunctionDef(var_0)
    return_from_generator_transformer_1 = module_1.ReturnFromGeneratorTransformer(
        starred_0
    )
    return_from_generator_transformer_2 = module_1.ReturnFromGeneratorTransformer(
        starred_0
    )
    list_0 = [str_0, return_from_generator_transformer_2, str_0]
    return_from_generator_transformer_3 = module_1.ReturnFromGeneratorTransformer(
        return_from_generator_transformer_1
    )
    function_def_1 = module_0.FunctionDef(*list_0)
    var_1 = module_2.walk(starred_0)
    module_2.literal_eval(starred_0)
