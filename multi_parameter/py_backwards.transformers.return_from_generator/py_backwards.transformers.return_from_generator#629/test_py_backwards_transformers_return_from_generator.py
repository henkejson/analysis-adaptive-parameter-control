# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import typed_ast._ast3 as module_0
import typed_ast.ast3 as module_1
import py_backwards.transformers.return_from_generator as module_2


def test_case_0():
    none_type_0 = None
    none_type_0.visit_FunctionDef(none_type_0)


def test_case_1():
    for_0 = module_0.For()
    var_0 = module_1.dump(for_0, for_0)
    return_from_generator_transformer_0 = module_2.ReturnFromGeneratorTransformer(var_0)
    function_def_0 = module_0.FunctionDef(*var_0)
    function_def_1 = return_from_generator_transformer_0.visit_FunctionDef(
        function_def_0
    )


def test_case_2():
    for_0 = module_0.For()
    var_0 = module_1.walk(for_0)
    return_from_generator_transformer_0 = module_2.ReturnFromGeneratorTransformer(var_0)
    list_0 = [var_0, for_0, var_0]
    function_def_0 = module_0.FunctionDef(*list_0)
    function_def_1 = return_from_generator_transformer_0.visit_FunctionDef(
        function_def_0
    )
    function_def_2 = return_from_generator_transformer_0.visit_FunctionDef(
        function_def_1
    )
    return_from_generator_transformer_1 = module_2.ReturnFromGeneratorTransformer(
        list_0
    )


def test_case_3():
    for_0 = module_0.For()
    var_0 = module_1.dump(for_0, for_0)
    return_from_generator_transformer_0 = module_2.ReturnFromGeneratorTransformer(var_0)
    list_0 = [var_0, for_0, var_0]
    function_def_0 = module_0.FunctionDef(*list_0)
    function_def_1 = return_from_generator_transformer_0.visit_FunctionDef(
        function_def_0
    )
    return_from_generator_transformer_0.generic_visit(list_0)
