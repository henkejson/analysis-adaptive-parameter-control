# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import py_backwards.utils.helpers as module_0


def test_case_0():
    bytes_0 = b"Xh\x06\xbfj\x8c\xd9\xf7\x12q\xbb"
    none_type_0 = module_0.debug(bytes_0)


def test_case_1():
    variables_generator_0 = module_0.VariablesGenerator()


def test_case_2():
    str_0 = "splituser"
    none_type_0 = module_0.warn(str_0)
    none_type_1 = None
    none_type_2 = module_0.debug(none_type_1)
    none_type_3 = module_0.warn(none_type_1)
    none_type_4 = module_0.debug(none_type_2)
    callable_0 = module_0.eager(none_type_1)
    module_0.get_source(callable_0)


def test_case_3():
    variables_generator_0 = module_0.VariablesGenerator()
    bool_0 = False
    none_type_0 = module_0.debug(bool_0)
    none_type_1 = module_0.warn(variables_generator_0)
    module_0.get_source(none_type_0)


def test_case_4():
    str_0 = "gdbm"
    none_type_0 = module_0.warn(str_0)
    variables_generator_0 = module_0.VariablesGenerator()


def test_case_5():
    none_type_0 = None
    none_type_1 = module_0.debug(none_type_0)
    none_type_2 = module_0.debug(none_type_0)
    callable_0 = module_0.eager(none_type_0)
    str_0 = '\r>!"09'
    variables_generator_0 = module_0.VariablesGenerator()
    none_type_3 = module_0.warn(str_0)
    callable_0.__call__(none_type_0, none_type_0, variables_generator_0)
