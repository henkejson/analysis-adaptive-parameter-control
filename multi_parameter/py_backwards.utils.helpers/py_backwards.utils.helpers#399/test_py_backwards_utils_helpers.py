# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import enum as module_0
import py_backwards.utils.helpers as module_1
import builtins as module_2


def test_case_0():
    var_0 = module_0._EnumDict()
    none_type_0 = module_1.debug(var_0)


def test_case_1():
    variables_generator_0 = module_1.VariablesGenerator()


def test_case_2():
    bool_0 = True
    callable_0 = module_1.eager(bool_0)
    none_type_0 = module_1.debug(callable_0)
    module_1.get_source(callable_0)


def test_case_3():
    variables_generator_0 = module_1.VariablesGenerator()
    module_1.get_source(variables_generator_0)


def test_case_4():
    str_0 = "U2a\t"
    str_1 = "[B;HP<{1["
    none_type_0 = module_1.warn(str_1)
    none_type_1 = None
    none_type_2 = module_1.debug(none_type_1)
    module_1.get_source(str_0)


def test_case_5():
    str_0 = "zy|H.KiF(^F"
    dict_0 = {str_0: str_0, str_0: str_0}
    str_1 = '"]?Phd\x0bcD`@SI^B0l'
    none_type_0 = module_1.warn(str_1)
    none_type_1 = None
    none_type_2 = module_1.debug(dict_0)
    int_0 = 193
    callable_0 = module_1.eager(int_0)
    base_exception_0 = module_2.BaseException()
    none_type_3 = module_1.warn(callable_0)
    callable_0.__call__(none_type_1, base_exception_0, int_0, start=callable_0)
