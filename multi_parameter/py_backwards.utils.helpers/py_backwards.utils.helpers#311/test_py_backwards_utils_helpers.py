# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import py_backwards.utils.helpers as module_0


def test_case_0():
    str_0 = "{io+^"
    none_type_0 = module_0.debug(str_0)


def test_case_1():
    variables_generator_0 = module_0.VariablesGenerator()


def test_case_2():
    bytes_0 = b"\x16l5\xcc<\xa4mo\x18\xd4P\xabt\xbeA\xf0\xe9"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    str_0 = "\n"
    callable_0 = module_0.eager(dict_0)
    tuple_0 = (bytes_0, dict_0, str_0)
    tuple_1 = (tuple_0,)
    callable_1 = module_0.eager(tuple_1)


def test_case_3():
    bool_0 = False
    module_0.get_source(bool_0)


def test_case_4():
    str_0 = "{io+^"
    none_type_0 = module_0.debug(str_0)
    none_type_1 = module_0.warn(str_0)


def test_case_5():
    none_type_0 = None
    none_type_1 = module_0.debug(none_type_0)
    none_type_2 = module_0.warn(none_type_1)
    str_0 = "list"
    none_type_3 = module_0.warn(none_type_1)
    none_type_4 = module_0.warn(str_0)
    callable_0 = module_0.eager(none_type_0)
    variables_generator_0 = module_0.VariablesGenerator()
    callable_0.__call__(
        none_type_3,
        none_type_3,
        none_type_2,
        module=none_type_1,
        type=variables_generator_0,
    )
