# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.helpers as module_0
import inspect as module_1


def test_case_0():
    str_0 = '%[q&T$"P_J,L|'
    module_0.has_message_body(str_0)


def test_case_1():
    str_0 = 'n_TGr"TPHV]1zWz6h?'
    dict_0 = {str_0: str_0, str_0: str_0}
    var_0 = module_0.remove_entity_headers(dict_0)


def test_case_2():
    bool_0 = module_0.is_atty()


def test_case_3():
    bool_0 = True
    module_0.is_hop_by_hop_header(bool_0)


def test_case_4():
    default_0 = module_0.Default()
    default_1 = module_0.Default()
    var_0 = default_0.__repr__()
    default_2 = module_0.Default()


def test_case_5():
    default_0 = module_0.Default()
    default_1 = module_0.Default()
    var_0 = default_0.__repr__()
    str_0 = default_1.__str__()
    bool_0 = module_0.is_atty()


def test_case_6():
    bool_0 = True
    var_0 = module_0.has_message_body(bool_0)
    bool_1 = True
    module_0.import_string(bool_1)


def test_case_7():
    int_0 = 1875
    var_0 = module_0.has_message_body(int_0)
    var_1 = module_0.has_message_body(var_0)
    module_0.is_entity_header(var_1)


def test_case_8():
    bool_0 = module_0.is_atty()
    none_type_0 = None
    bool_1 = module_0.is_atty()
    var_0 = module_1.ismodule(none_type_0)
    default_0 = module_0.Default()
    str_0 = default_0.__str__()
    str_1 = none_type_0.__str__()
    str_2 = var_0.__str__()
    var_1 = var_0.__repr__()
    var_2 = module_0.is_entity_header(str_2)
    var_3 = module_0.is_hop_by_hop_header(str_2)
    var_4 = module_0.is_entity_header(str_1)
    var_5 = var_1.__repr__()
    float_0 = 204.0
    var_6 = module_0.has_message_body(float_0)
    var_7 = float_0.__repr__()
    bool_2 = module_0.is_atty()
    var_8 = var_4.__repr__()
    var_9 = module_0.has_message_body(var_4)
    var_10 = module_0.is_entity_header(str_2)
    var_11 = var_0.__repr__()
    var_12 = module_0.is_hop_by_hop_header(var_1)
    str_3 = var_4.__str__()
    dict_0 = {var_1: var_11, var_11: var_11, var_11: var_11}
    var_13 = module_0.remove_entity_headers(dict_0)
    list_0 = [dict_0]
    module_0.remove_entity_headers(list_0)
