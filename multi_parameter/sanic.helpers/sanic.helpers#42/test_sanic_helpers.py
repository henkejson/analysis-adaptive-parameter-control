# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.helpers as module_0
import inspect as module_1


def test_case_0():
    int_0 = 302
    var_0 = module_0.has_message_body(int_0)


def test_case_1():
    str_0 = "\tx[\x0cO68oX O\\\x0c"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.remove_entity_headers(dict_0)


def test_case_2():
    bool_0 = module_0.is_atty()


def test_case_3():
    default_0 = module_0.Default()


def test_case_4():
    bool_0 = False
    module_0.is_entity_header(bool_0)


def test_case_5():
    bool_0 = module_0.is_atty()
    int_0 = 233
    var_0 = module_0.has_message_body(int_0)
    module_0.is_hop_by_hop_header(bool_0)


def test_case_6():
    int_0 = 4
    module_0.remove_entity_headers(int_0, int_0)


def test_case_7():
    str_0 = "\tx[\x0cO68oX O\\\x0c"
    bool_0 = module_0.is_atty()
    var_0 = module_0.is_entity_header(str_0)
    str_1 = var_0.__str__()
    dict_0 = {}
    var_1 = module_0.remove_entity_headers(dict_0)
    bool_1 = module_0.is_atty()
    var_2 = var_0.__repr__()
    var_3 = module_0.is_hop_by_hop_header(str_0)
    var_4 = var_3.__repr__()
    str_2 = var_1.__str__()
    default_0 = module_0.Default()
    str_3 = default_0.__str__()


def test_case_8():
    bool_0 = module_0.is_atty()
    bool_1 = True
    list_0 = [bool_1, bool_1, bool_1]
    bool_2 = module_0.is_atty()
    var_0 = module_1.ismodule(list_0)
    var_1 = module_0.has_message_body(bool_1)
    module_0.import_string(var_0, bool_1)


def test_case_9():
    bool_0 = module_0.is_atty()
    var_0 = module_0.has_message_body(bool_0)
    str_0 = "&Z\nvG]8q^p#ZwK^izg"
    var_1 = module_0.has_message_body(var_0)
    var_2 = module_0.has_message_body(var_0)
    var_3 = var_2.__repr__()
    str_1 = var_1.__str__()
    dict_0 = {var_3: var_3, str_0: var_2}
    var_4 = module_0.remove_entity_headers(dict_0)
    var_5 = module_0.has_message_body(var_1)
    int_0 = 304
    var_6 = module_0.has_message_body(int_0)
    module_0.is_hop_by_hop_header(var_6)
