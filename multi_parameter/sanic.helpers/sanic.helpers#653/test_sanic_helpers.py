# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.helpers as module_0
import builtins as module_1
import inspect as module_2


def test_case_0():
    float_0 = 352.4318926224718
    var_0 = module_0.has_message_body(float_0)


def test_case_1():
    bool_0 = True
    module_0.remove_entity_headers(bool_0)


def test_case_2():
    bool_0 = module_0.is_atty()


def test_case_3():
    default_0 = module_0.Default()


def test_case_4():
    none_type_0 = None
    module_0.is_entity_header(none_type_0)


def test_case_5():
    none_type_0 = None
    module_0.is_hop_by_hop_header(none_type_0)


def test_case_6():
    float_0 = 330.4109275883304
    object_0 = module_1.object()
    default_0 = module_0.Default()
    var_0 = default_0.__repr__()
    var_1 = module_0.has_message_body(float_0)
    str_0 = var_1.__str__()


def test_case_7():
    default_0 = module_0.Default()
    str_0 = default_0.__str__()
    bool_0 = module_0.is_atty()
    var_0 = default_0.__repr__()
    str_1 = var_0.__str__()
    var_1 = default_0.__repr__()
    module_0.has_message_body(str_1)


def test_case_8():
    int_0 = 57
    var_0 = module_0.has_message_body(int_0)


def test_case_9():
    str_0 = "Lookup the existing instanc1 of `ErrorHandler` and fetch the registered handler for a specific type of exception.\n\n        This method leverages a dict lookup to peedup the retrieval process.\n\n        Args:\n            exception (sanic.exceptions.SanicException or Exception): Type\n                of exeption.\n\n        Returns:\n            Registered function i found, ``None`` otherwise.\n\n        "
    dict_0 = {str_0: str_0}
    var_0 = module_0.remove_entity_headers(dict_0)


def test_case_10():
    bool_0 = module_0.is_atty()
    float_0 = 304.0
    default_0 = module_0.Default()
    var_0 = module_2.ismodule(default_0)
    str_0 = default_0.__str__()
    var_1 = default_0.__repr__()
    str_1 = var_1.__str__()
    var_2 = module_0.is_hop_by_hop_header(var_1)
    object_0 = module_1.object()
    var_3 = var_1.__repr__()
    var_4 = module_0.has_message_body(float_0)
    dict_0 = {var_3: var_3}
    var_5 = module_0.remove_entity_headers(dict_0)
    var_6 = module_0.has_message_body(var_2)
    var_7 = module_0.is_hop_by_hop_header(str_0)
    module_0.import_string(var_2)
