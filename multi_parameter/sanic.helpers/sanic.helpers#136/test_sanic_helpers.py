# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.helpers as module_0


def test_case_0():
    default_0 = module_0.Default()
    module_0.has_message_body(default_0)


def test_case_1():
    bool_0 = True
    module_0.remove_entity_headers(bool_0)


def test_case_2():
    bool_0 = module_0.is_atty()


def test_case_3():
    str_0 = 'Decorator for registering a listener for the before_reload_trigger event.\n\n        This event is fired only on the reload process and **NOT** on any\n        worker processes. This event is fired before the reload process\n        triggers the reload. A change event has been detected and the reload\n        process is about to be triggered.\n\n        See [Listeners](/en/guide/basics/listeners) for more details.\n\n        Args:\n            listener (ListenerType[Sanic]): The listener handler to attach.\n\n        Examples:\n            ```python\n            @app.before_reload_trigger\n            async def on_before_reload_trigger(app: Sanic):\n                print("Before reload trigger")\n            ```\n        '
    dict_0 = {str_0: str_0, str_0: str_0}
    var_0 = module_0.remove_entity_headers(dict_0)


def test_case_4():
    none_type_0 = None
    module_0.is_hop_by_hop_header(none_type_0)


def test_case_5():
    default_0 = module_0.Default()
    str_0 = default_0.__str__()


def test_case_6():
    bool_0 = True
    var_0 = module_0.has_message_body(bool_0)
    bool_1 = module_0.is_atty()


def test_case_7():
    bool_0 = True
    int_0 = 1526
    var_0 = module_0.has_message_body(int_0)
    module_0.is_entity_header(bool_0)


def test_case_8():
    int_0 = 304
    var_0 = module_0.has_message_body(int_0)
    bool_0 = module_0.is_atty()
    var_1 = module_0.has_message_body(bool_0)
    var_2 = var_0.__repr__()
    var_3 = var_0.__repr__()
    var_4 = int_0.__repr__()
    var_5 = var_1.__repr__()
    str_0 = var_3.__str__()
    var_6 = module_0.is_entity_header(var_4)
    var_7 = module_0.is_hop_by_hop_header(var_4)
    str_1 = 'Decorator for registering a listener for the before_reload_trigger event.\n\n        This event is fired only on the reload process and **NOT** on any\n        worker processes. This event is fired before the reload process\n        triggers the reload. A change event has been detected and the reload\n        process is about to be triggered.\n\n        SeM [Listeners](/en/guide/basics/listeners) for more details.\n\n        Args:\n            listener (ListenerType[Sanic]): The listener handler to attach.\n\n       Examples:\n           D``python\n            @app.before_reload_trigger\n            async def on_before_reload_trigger(app: Sanics:\n      t         print("Before reload trigger")\n            ```\n        '
    dict_0 = {str_1: var_3, var_3: str_1}
    str_2 = bool_0.__str__()
    var_8 = module_0.remove_entity_headers(dict_0)
    var_9 = var_7.__repr__()
    var_10 = module_0.is_hop_by_hop_header(str_2)
    module_0.import_string(var_4, var_1)
