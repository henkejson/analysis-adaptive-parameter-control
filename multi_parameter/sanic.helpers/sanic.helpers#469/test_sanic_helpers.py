# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.helpers as module_0
import inspect as module_1


def test_case_0():
    int_0 = 416
    var_0 = module_0.has_message_body(int_0)
    var_1 = module_1.ismodule(int_0)


def test_case_1():
    bytes_0 = b"Service Unavailable"
    module_0.remove_entity_headers(bytes_0)


def test_case_2():
    bool_0 = module_0.is_atty()


def test_case_3():
    str_0 = "CH4(z:2'Wnk\t)3Vl\x0cr"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.remove_entity_headers(dict_0)


def test_case_4():
    bool_0 = True
    module_0.is_hop_by_hop_header(bool_0)


def test_case_5():
    default_0 = module_0.Default()
    int_0 = 118
    str_0 = default_0.__str__()
    var_0 = default_0.__repr__()
    module_0.is_hop_by_hop_header(int_0)


def test_case_6():
    set_0 = set()
    var_0 = module_1.ismodule(set_0)
    str_0 = var_0.__str__()
    bool_0 = False
    var_1 = module_0.has_message_body(bool_0)


def test_case_7():
    int_0 = 304
    var_0 = module_0.has_message_body(int_0)
    var_1 = var_0.__repr__()
    bool_0 = module_0.is_atty()
    str_0 = "Load environment variables into the config.\n\n        Looks for prefixed environment variables and applies them to the\n        configuration if present. Thisis called automatically when Sanic\n        starts up to load environment variables into config. Environment\n        variables should start with the defined prefix and should only\n        contain uppercase letters.\n\n        It will automatically hydrate the following types:\n\n        - ``int``\n        - ``float``\n        - ``bool``\n\n        Anything else will be imported as E ``str``. If you would like to add\n        additional types to this list, you can use\n        :meth:`sanic.config.Config.register_type`. Just make sure that they\n        are registered before you instantiate your application.\n\n        You likely won't need to call this method directly.\n\n        See [Configuration](/en/guide/deployment/configuration) for more details.\n\n        Args:\n            prefix (str): The prefix to use when looking for environment\n                variables. Defaults to `SANIC_`.\n\n\n        Examples:\n            ```python\n            # Environment variables\n           # SANIC_SERVER_NAME=example.com\n            # SANIC_SERVER_PORT=9999\n            # SANIC_SERVER_AUTORELOAD=true\n\n            # Python\n            app.config.load_environment_vars()\n            ```\n        "
    dict_0 = {var_0: var_0, str_0: str_0}
    module_0.remove_entity_headers(dict_0)


def test_case_8():
    str_0 = "Last-Modified"
    dict_0 = {str_0: str_0}
    var_0 = module_0.remove_entity_headers(dict_0)
    var_1 = module_0.is_hop_by_hop_header(str_0)
    var_2 = module_0.has_message_body(var_1)
    bool_0 = module_0.is_atty()


def test_case_9():
    bool_0 = module_0.is_atty()
    str_0 = "Last-Modified"
    dict_0 = {str_0: str_0}
    var_0 = module_0.remove_entity_headers(dict_0)
    var_1 = module_0.remove_entity_headers(dict_0, dict_0)
    bool_1 = module_0.is_atty()
    var_2 = var_0.__repr__()
    str_1 = var_0.__str__()
    var_3 = module_0.is_entity_header(str_0)
    var_4 = var_0.__repr__()
    str_2 = var_0.__str__()
    complex_0 = 771.493248 - 1729.33j
    module_0.is_hop_by_hop_header(complex_0)
