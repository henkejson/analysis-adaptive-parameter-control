# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.helpers as module_0
import inspect as module_1


def test_case_0():
    bool_0 = True
    var_0 = module_0.has_message_body(bool_0)


def test_case_1():
    str_0 = 'Returns response object without encoding the body.\n\n    Args:\n        body (Optional[AnyStr]): Response data.\n        status (int, optional): HTTP response code. Defaults to `200`.\n        headers (Dict[str, str], optional): Custom HTTP headers. Defaults to `None`.\n        content_type (str, optional): The content type (string) of the response. Defaults to `"application/octet-stream"`.\n\n    Returns:\n        HTTPResponse: A response object without encoding the body.\n    '
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.remove_entity_headers(dict_0)


def test_case_2():
    bool_0 = module_0.is_atty()


def test_case_3():
    default_0 = module_0.Default()


def test_case_4():
    none_type_0 = None
    module_0.is_entity_header(none_type_0)


def test_case_5():
    bool_0 = False
    module_0.is_hop_by_hop_header(bool_0)


def test_case_6():
    bool_0 = module_0.is_atty()
    module_0.remove_entity_headers(bool_0, bool_0)


def test_case_7():
    default_0 = module_0.Default()
    var_0 = default_0.__repr__()
    str_0 = var_0.__str__()
    str_1 = var_0.__str__()


def test_case_8():
    int_0 = 305
    default_0 = module_0.Default()
    str_0 = default_0.__str__()
    var_0 = default_0.__repr__()
    var_1 = module_0.has_message_body(int_0)
    bool_0 = module_0.is_atty()
    module_0.is_entity_header(var_1)


def test_case_9():
    int_0 = 305
    var_0 = module_0.has_message_body(int_0)


def test_case_10():
    dict_0 = {}
    var_0 = module_1.ismodule(dict_0)
    var_1 = module_0.has_message_body(var_0)
    int_0 = 304
    str_0 = var_0.__str__()
    var_2 = var_1.__repr__()
    default_0 = module_0.Default()
    var_3 = module_0.has_message_body(int_0)
    bool_0 = module_0.is_atty()
    var_4 = default_0.__repr__()
    str_1 = var_4.__str__()
    var_5 = module_0.is_hop_by_hop_header(var_4)
    bool_1 = False
    dict_1 = {
        var_3: dict_0,
        var_4: var_4,
        bool_0: str_1,
        bool_1: int_0,
        var_5: int_0,
        bool_0: var_4,
        str_0: bool_0,
        bool_0: int_0,
    }
    module_0.remove_entity_headers(dict_1)
