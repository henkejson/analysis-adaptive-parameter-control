# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.helpers as module_0
import inspect as module_1


def test_case_0():
    float_0 = 39.07555856435039
    var_0 = module_0.has_message_body(float_0)


def test_case_1():
    bytes_0 = b"/\xe3b"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    var_0 = module_0.remove_entity_headers(dict_0, dict_0)


def test_case_2():
    bool_0 = module_0.is_atty()


def test_case_3():
    list_0 = []
    module_0.is_entity_header(list_0)


def test_case_4():
    list_0 = []
    module_0.is_hop_by_hop_header(list_0)


def test_case_5():
    bool_0 = module_0.is_atty()
    module_0.remove_entity_headers(bool_0, bool_0)


def test_case_6():
    int_0 = 2838
    var_0 = module_0.has_message_body(int_0)
    var_1 = var_0.__repr__()
    var_2 = module_1.ismodule(int_0)
    var_3 = module_0.has_message_body(var_2)


def test_case_7():
    float_0 = 304.1201788497936
    bool_0 = module_0.is_atty()
    var_0 = module_1.ismodule(bool_0)
    var_1 = module_0.has_message_body(float_0)
    default_0 = module_0.Default()
    var_2 = default_0.__repr__()


def test_case_8():
    default_0 = module_0.Default()
    str_0 = default_0.__str__()
    bool_0 = module_0.is_atty()
    set_0 = set()
    module_0.is_hop_by_hop_header(set_0)


def test_case_9():
    bool_0 = True
    var_0 = module_0.has_message_body(bool_0)
    var_1 = var_0.__repr__()
    str_0 = var_0.__str__()
    float_0 = 304.0
    var_2 = module_0.is_entity_header(str_0)
    bool_1 = module_0.is_atty()
    var_3 = module_0.is_hop_by_hop_header(var_1)
    bool_2 = module_0.is_atty()
    var_4 = var_3.__repr__()
    var_5 = var_0.__repr__()
    str_1 = var_5.__str__()
    str_2 = "samesite"
    dict_0 = {var_5: str_2}
    default_0 = module_0.Default()
    var_6 = module_0.remove_entity_headers(dict_0, str_1)
    var_7 = var_5.__repr__()
    var_8 = module_0.has_message_body(float_0)
    var_9 = var_0.__repr__()
    var_10 = var_1.__repr__()
    default_1 = module_0.Default()
    var_11 = default_1.__repr__()
    bool_3 = module_0.is_atty()
    var_12 = var_11.__repr__()
    module_0.import_string(bool_0, str_0)
