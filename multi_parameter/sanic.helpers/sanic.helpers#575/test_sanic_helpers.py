# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.helpers as module_0
import inspect as module_1


def test_case_0():
    bool_0 = module_0.is_atty()
    default_0 = module_0.has_message_body(bool_0)


def test_case_1():
    bool_0 = module_0.is_atty()
    module_0.remove_entity_headers(bool_0)


def test_case_2():
    bool_0 = module_0.is_atty()


def test_case_3():
    default_0 = module_0.Default()


def test_case_4():
    int_0 = 3090
    module_0.is_entity_header(int_0)


def test_case_5():
    tuple_0 = ()
    module_0.is_hop_by_hop_header(tuple_0)


def test_case_6():
    default_0 = module_0.Default()
    var_0 = default_0.__repr__()
    var_1 = var_0.__repr__()
    var_2 = module_1.ismodule(var_1)
    var_3 = var_2.__repr__()


def test_case_7():
    dict_0 = {}
    var_0 = module_0.remove_entity_headers(dict_0)


def test_case_8():
    float_0 = 881.6
    var_0 = module_0.has_message_body(float_0)
    bytes_0 = b"\x11a]\xd7\xdd\xfd\x80X#\xce"
    module_0.remove_entity_headers(bytes_0)


def test_case_9():
    default_0 = module_0.Default()
    str_0 = default_0.__str__()
    bool_0 = module_0.is_atty()
    var_0 = module_0.is_entity_header(str_0)
    bool_1 = module_0.is_atty()


def test_case_10():
    bytes_0 = b"\x15\x939\xf8\n]\xeb\xa0\xf7\xcb\xcc>\xa37An"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    var_0 = module_0.remove_entity_headers(dict_0)


def test_case_11():
    bytes_0 = b"Found"
    default_0 = module_0.Default()
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    var_0 = module_0.remove_entity_headers(dict_0)
    bytes_1 = b"Z>O~>\xc0~P&\xd2"
    var_1 = module_0.is_hop_by_hop_header(bytes_1)
    bool_0 = module_0.is_atty()
    var_2 = module_0.has_message_body(bool_0)
    str_0 = default_0.__str__()
    str_1 = var_0.__str__()
    str_2 = var_1.__str__()
    int_0 = 304
    var_3 = module_0.remove_entity_headers(var_0)
    var_4 = module_0.has_message_body(int_0)
    var_5 = var_1.__repr__()
    module_0.is_entity_header(var_3)
