# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.helpers as module_0
import inspect as module_1


def test_case_0():
    int_0 = 120
    bool_0 = module_0.has_message_body(int_0)


def test_case_1():
    bytes_0 = b"\x06W"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    var_0 = module_0.remove_entity_headers(dict_0)


def test_case_2():
    bool_0 = module_0.is_atty()


def test_case_3():
    bool_0 = module_0.is_atty()
    module_0.is_entity_header(bool_0)


def test_case_4():
    none_type_0 = None
    module_0.is_hop_by_hop_header(none_type_0)


def test_case_5():
    bool_0 = module_0.is_atty()
    bool_1 = module_0.is_atty()
    bool_2 = module_0.is_atty()
    var_0 = module_0.has_message_body(bool_1)
    default_0 = module_0.Default()
    var_1 = default_0.__repr__()


def test_case_6():
    list_0 = []
    default_0 = module_0.Default(*list_0)
    str_0 = default_0.__str__()
    none_type_0 = None
    module_0.remove_entity_headers(none_type_0)


def test_case_7():
    bool_0 = module_0.is_atty()
    var_0 = module_0.has_message_body(bool_0)
    bool_1 = module_0.is_atty()


def test_case_8():
    bool_0 = False
    str_0 = bool_0.__str__()
    var_0 = module_0.is_hop_by_hop_header(str_0)
    bool_1 = module_0.is_atty()
    str_1 = str_0.__str__()
    var_1 = module_1.ismodule(var_0)
    str_2 = var_0.__str__()
    var_2 = module_0.has_message_body(bool_1)
    var_3 = bool_1.__repr__()
    default_0 = module_0.Default()
    var_4 = var_3.__repr__()
    var_5 = module_1.ismodule(str_0)
    str_3 = var_4.__str__()
    var_6 = var_2.__repr__()
    str_4 = default_0.__str__()
    dict_0 = {str_3: default_0, str_3: var_2}
    bool_2 = module_0.is_atty()
    bool_3 = module_0.is_atty()
    var_7 = module_0.remove_entity_headers(dict_0, var_3)
    var_8 = module_0.has_message_body(bool_1)
    var_9 = module_0.is_entity_header(var_6)
    var_10 = var_6.__repr__()
    bool_4 = module_0.is_atty()
    str_5 = var_8.__str__()
    int_0 = 204
    var_11 = module_0.has_message_body(int_0)
    str_6 = var_5.__str__()
