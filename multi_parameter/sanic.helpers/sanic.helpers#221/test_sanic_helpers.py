# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.helpers as module_0


def test_case_0():
    bool_0 = module_0.is_atty()
    var_0 = module_0.has_message_body(bool_0)


def test_case_1():
    dict_0 = {}
    var_0 = module_0.remove_entity_headers(dict_0)


def test_case_2():
    bool_0 = module_0.is_atty()


def test_case_3():
    int_0 = 132
    module_0.is_entity_header(int_0)


def test_case_4():
    float_0 = 1262.311
    bool_0 = module_0.is_atty()
    default_0 = module_0.Default()
    module_0.is_hop_by_hop_header(float_0)


def test_case_5():
    str_0 = "^3t&'"
    var_0 = module_0.is_hop_by_hop_header(str_0)
    dict_0 = {}
    bool_0 = module_0.is_atty()
    default_0 = module_0.Default()
    var_1 = default_0.__repr__()
    var_2 = module_0.remove_entity_headers(dict_0)
    var_3 = module_0.has_message_body(bool_0)
    var_4 = module_0.has_message_body(var_3)
    var_5 = module_0.remove_entity_headers(var_2, var_2)


def test_case_6():
    int_0 = 306
    bool_0 = module_0.is_atty()
    str_0 = 'Register an exception handler for logging or processing.\n\n        This method allows the registration of a custom exception handler to\n        catch and process exceptions that occur in the application. Unlike a\n        typical exception handler that might modify the response to the client,\n        this is intended to capture exceptions for logging or other internal\n        processing, such as sending them to an error reporting utility.\n\n        Args:\n            handler (Callable): A coroutine function that takes the application\n                instance and the exception as arguments. It will be called when\n                an exception occurs within the application\'s lifecycle.\n\n        Example:\n            ```python\n            app = Sanic("TestApp")\n\n            @app.catch_exception\n            async def report_exception(app: Sanic, exception: Exception):\n                logging.error(f"An exception occurred: {exception}")\n\n                # Send to an error reporting service\n                await error_service.report(exception)\n\n            # Any unhandled exceptions within the application will now be\n            # logged and reported to the error service.\n            ```\n        '
    default_0 = module_0.Default()
    var_0 = default_0.__repr__()
    var_1 = module_0.has_message_body(int_0)
    var_2 = module_0.has_message_body(var_1)
    dict_0 = {
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
    }
    var_3 = module_0.has_message_body(var_2)
    var_4 = module_0.remove_entity_headers(dict_0)
    str_1 = default_0.__str__()
    module_0.is_hop_by_hop_header(var_4)


def test_case_7():
    bool_0 = True
    var_0 = module_0.has_message_body(bool_0)
    int_0 = 3610
    var_1 = module_0.has_message_body(int_0)


def test_case_8():
    str_0 = "^3tc&'"
    dict_0 = {
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
    }
    bool_0 = module_0.remove_entity_headers(dict_0, dict_0)


def test_case_9():
    int_0 = 204
    var_0 = module_0.has_message_body(int_0)
    module_0.is_hop_by_hop_header(int_0)
