# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.helpers as module_0
import inspect as module_1
import builtins as module_2


def test_case_0():
    bool_0 = module_0.is_atty()
    int_0 = 208
    var_0 = module_0.has_message_body(int_0)


def test_case_1():
    bool_0 = module_0.is_atty()
    none_type_0 = None
    module_0.remove_entity_headers(none_type_0)


def test_case_2():
    bool_0 = module_0.is_atty()


def test_case_3():
    tuple_0 = ()
    module_0.is_entity_header(tuple_0)


def test_case_4():
    bool_0 = False
    set_0 = {bool_0}
    module_0.is_hop_by_hop_header(set_0)


def test_case_5():
    bool_0 = False
    var_0 = module_0.has_message_body(bool_0)
    var_1 = module_1.ismodule(var_0)
    var_2 = var_1.__repr__()
    bool_1 = module_0.is_atty()
    default_0 = module_0.Default()
    var_3 = default_0.__repr__()


def test_case_6():
    bytes_0 = b'^sQ>\xfa"\xb3\xef'
    var_0 = module_0.is_entity_header(bytes_0)
    dict_0 = {bytes_0: bytes_0}
    var_1 = module_0.remove_entity_headers(dict_0)
    var_2 = module_0.remove_entity_headers(var_1, dict_0)
    var_3 = module_1.ismodule(bytes_0)
    var_4 = module_1.ismodule(var_3)
    bool_0 = module_0.is_atty()
    default_0 = module_0.Default()
    default_1 = module_0.Default()
    str_0 = default_1.__str__()
    var_5 = module_0.has_message_body(var_3)
    module_0.remove_entity_headers(bool_0)


def test_case_7():
    bool_0 = False
    var_0 = module_0.has_message_body(bool_0)
    var_1 = module_1.ismodule(var_0)
    module_0.remove_entity_headers(var_1)


def test_case_8():
    str_0 = "lY3['xkL^&0(+\t58`f7&"
    var_0 = module_0.is_hop_by_hop_header(str_0)
    bool_0 = module_0.is_atty()
    bytes_0 = b'^sQ>\xfa"\xb3\xef'
    var_1 = module_0.is_entity_header(bytes_0)
    int_0 = 204
    var_2 = module_0.has_message_body(int_0)
    bool_1 = module_0.is_atty()
    var_3 = module_2.object()
    str_1 = var_1.__str__()
    var_4 = module_0.has_message_body(var_1)
    module_0.remove_entity_headers(var_4)


def test_case_9():
    bytes_0 = b'^sQ>\xfa"\xb3\xef'
    dict_0 = {bytes_0: bytes_0}
    var_0 = module_0.remove_entity_headers(dict_0)
