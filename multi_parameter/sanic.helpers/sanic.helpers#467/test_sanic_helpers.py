# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import inspect as module_0
import sanic.helpers as module_1


def test_case_0():
    none_type_0 = None
    var_0 = module_0.ismodule(none_type_0)
    bool_0 = module_1.is_atty()
    var_1 = module_1.has_message_body(var_0)


def test_case_1():
    str_0 = 'f%Y/Dh\x0b]&pa>e;"wFxq'
    dict_0 = {str_0: str_0, str_0: str_0}
    var_0 = module_1.remove_entity_headers(dict_0)


def test_case_2():
    bool_0 = module_1.is_atty()


def test_case_3():
    none_type_0 = None
    module_1.is_hop_by_hop_header(none_type_0)


def test_case_4():
    bool_0 = True
    default_0 = module_1.Default()
    module_1.remove_entity_headers(bool_0, bool_0)


def test_case_5():
    default_0 = module_1.Default()
    var_0 = default_0.__repr__()
    module_1.is_entity_header(default_0)


def test_case_6():
    int_0 = 179
    var_0 = module_1.has_message_body(int_0)
    var_1 = module_1.has_message_body(var_0)
    str_0 = var_0.__str__()
    module_1.is_hop_by_hop_header(var_0)


def test_case_7():
    default_0 = module_1.Default()
    str_0 = default_0.__str__()
    bool_0 = module_1.is_atty()
    module_1.import_string(default_0)


def test_case_8():
    int_0 = 304
    var_0 = module_1.has_message_body(int_0)
    int_1 = 179
    var_1 = module_1.has_message_body(int_1)
    bool_0 = True
    var_2 = module_1.has_message_body(var_0)
    var_3 = var_1.__repr__()
    str_0 = var_1.__str__()
    str_1 = 'f%Y/Dh\x0b]&pa>e;"wFxq'
    dict_0 = {str_1: str_1, str_1: str_1}
    var_4 = module_1.remove_entity_headers(dict_0)
    var_5 = module_1.has_message_body(bool_0)
    var_6 = var_4.__repr__()
    var_7 = module_1.has_message_body(var_5)
    var_8 = module_1.is_hop_by_hop_header(str_1)
    var_9 = var_7.__repr__()
    var_10 = var_8.__repr__()
    var_11 = module_0.ismodule(var_7)
    var_12 = var_8.__repr__()
    default_0 = module_1.Default()
    var_13 = default_0.__repr__()
    bool_1 = module_1.is_atty()
    str_2 = var_10.__str__()
    module_1.import_string(var_5)
