# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.helpers as module_0


def test_case_0():
    int_0 = -1250
    var_0 = module_0.has_message_body(int_0)


def test_case_1():
    float_0 = -916.674
    module_0.remove_entity_headers(float_0)


def test_case_2():
    bool_0 = module_0.is_atty()


def test_case_3():
    default_0 = module_0.Default()


def test_case_4():
    str_0 = "<M?I^hEU\rS"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.remove_entity_headers(dict_0)


def test_case_5():
    str_0 = "4s(x\x0bG 0J3_$A,"
    var_0 = module_0.is_hop_by_hop_header(str_0)
    str_1 = var_0.__str__()
    var_1 = var_0.__repr__()


def test_case_6():
    bool_0 = True
    var_0 = module_0.has_message_body(bool_0)
    bool_1 = module_0.is_atty()
    var_1 = var_0.__repr__()
    default_0 = module_0.Default()
    var_2 = default_0.__repr__()


def test_case_7():
    str_0 = "~1'Rkg"
    var_0 = module_0.is_hop_by_hop_header(str_0)
    dict_0 = {}
    default_0 = module_0.Default(**dict_0)
    var_1 = default_0.__repr__()
    str_1 = default_0.__str__()
    str_2 = var_0.__str__()
    list_0 = [var_1, var_1]
    module_0.is_entity_header(list_0)


def test_case_8():
    float_0 = 1467.182292
    var_0 = module_0.has_message_body(float_0)
    str_0 = var_0.__str__()
    module_0.is_entity_header(var_0)


def test_case_9():
    str_0 = "<?I^%EuS"
    str_1 = str_0.__str__()
    bool_0 = module_0.is_atty()
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.remove_entity_headers(dict_0)
    var_1 = dict_0.__repr__()
    var_2 = dict_0.__repr__()
    var_3 = module_0.is_entity_header(var_1)
    bool_1 = True
    var_4 = module_0.has_message_body(bool_1)
    var_5 = module_0.is_hop_by_hop_header(var_1)
    float_0 = 304.0
    var_6 = module_0.has_message_body(float_0)
    var_7 = module_0.is_entity_header(var_2)
    var_8 = var_5.__repr__()
    bool_2 = False
    var_9 = var_0.__repr__()
    var_10 = module_0.is_entity_header(str_0)
    module_0.import_string(bool_2, var_0)
