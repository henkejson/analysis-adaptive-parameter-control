# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.helpers as module_0
import builtins as module_1
import inspect as module_2


def test_case_0():
    bool_0 = False
    var_0 = module_0.has_message_body(bool_0)


def test_case_1():
    str_0 = "4r89Iag"
    dict_0 = {str_0: str_0}
    var_0 = module_0.remove_entity_headers(dict_0, str_0)


def test_case_2():
    bool_0 = module_0.is_atty()


def test_case_3():
    bool_0 = False
    module_0.is_entity_header(bool_0)


def test_case_4():
    default_0 = module_0.Default()
    bool_0 = False
    var_0 = module_0.has_message_body(bool_0)
    module_0.is_hop_by_hop_header(default_0)


def test_case_5():
    default_0 = module_0.Default()
    var_0 = default_0.__repr__()
    bool_0 = False
    var_1 = module_0.has_message_body(bool_0)


def test_case_6():
    default_0 = module_0.Default()
    bool_0 = True
    str_0 = default_0.__str__()
    var_0 = module_0.has_message_body(bool_0)
    var_1 = default_0.__repr__()


def test_case_7():
    float_0 = 315.01
    var_0 = module_0.has_message_body(float_0)
    var_1 = module_0.has_message_body(var_0)
    var_2 = var_1.__repr__()


def test_case_8():
    default_0 = module_0.Default()
    float_0 = 204.0
    var_0 = module_0.has_message_body(float_0)
    str_0 = default_0.__str__()
    var_1 = default_0.__repr__()
    str_1 = "vzyUb]/APVAjw[V>"
    var_2 = default_0.__repr__()
    object_0 = module_1.object()
    bool_0 = module_0.is_atty()
    object_1 = var_1.__repr__()
    var_3 = var_0.__repr__()
    var_4 = var_1.__repr__()
    var_5 = var_0.__repr__()
    default_1 = module_0.Default()
    str_2 = var_0.__str__()
    var_6 = module_0.is_hop_by_hop_header(str_1)
    var_7 = module_2.ismodule(var_3)
    var_8 = default_1.__repr__()
    dict_0 = {str_1: str_1, var_2: bool_0}
    var_9 = module_0.has_message_body(bool_0)
    bool_1 = module_0.is_atty()
    str_3 = var_0.__str__()
    str_4 = var_6.__str__()
    var_10 = var_7.__repr__()
    var_11 = module_0.remove_entity_headers(dict_0, str_1)
    module_0.is_hop_by_hop_header(default_0)
