# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.immutable_list as module_0
import builtins as module_1


def test_case_0():
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(bool_0, is_empty=bool_0)
    bool_1 = immutable_list_0.__eq__(immutable_list_0)
    immutable_list_0.find(immutable_list_0)


def test_case_1():
    bytes_0 = b"\x97|\xaci_\xa5@"
    immutable_list_0 = module_0.ImmutableList(tail=bytes_0)
    immutable_list_1 = immutable_list_0.unshift(bytes_0)
    immutable_list_1.find(immutable_list_0)


def test_case_2():
    object_0 = module_1.object()
    list_0 = []
    int_0 = 894
    immutable_list_0 = module_0.ImmutableList(is_empty=int_0)
    immutable_list_0.__add__(list_0)


def test_case_3():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.__len__()


def test_case_4():
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(bool_0, is_empty=bool_0)
    var_0 = immutable_list_0.__len__()


def test_case_5():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(tail=none_type_0, is_empty=none_type_0)
    var_0 = immutable_list_0.to_list()
    immutable_list_0.filter(var_0)


def test_case_6():
    bool_0 = True
    list_0 = [bool_0]
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(bool_0, none_type_0)
    immutable_list_1 = immutable_list_0.unshift(list_0)
    var_0 = immutable_list_1.to_list()
    immutable_list_0.find(none_type_0)


def test_case_7():
    bool_0 = True
    str_0 = "\n        Transform Either to Box.\n\n        :returns: Box monad with previous value\n        :rtype: Box[A]\n        "
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    immutable_list_0 = module_0.ImmutableList(is_empty=dict_0)
    immutable_list_0.map(bool_0)


def test_case_8():
    bytes_0 = b"\xdb"
    immutable_list_0 = module_0.ImmutableList(tail=bytes_0)
    immutable_list_0.map(immutable_list_0)


def test_case_9():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_0.filter(immutable_list_0)


def test_case_10():
    set_0 = set()
    immutable_list_0 = module_0.ImmutableList(tail=set_0)
    immutable_list_0.filter(immutable_list_0)


def test_case_11():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.find(none_type_0)
    var_1 = immutable_list_0.find(var_0)
    immutable_list_1 = module_0.ImmutableList()
    var_2 = immutable_list_1.find(none_type_0)


def test_case_12():
    bytes_0 = b""
    immutable_list_0 = module_0.ImmutableList(tail=bytes_0)
    bool_0 = immutable_list_0.reduce(immutable_list_0, immutable_list_0)
    immutable_list_1 = immutable_list_0.unshift(bytes_0)
    immutable_list_1.find(immutable_list_0)


def test_case_13():
    int_0 = 1334
    bytes_0 = b"\x9c\xeb\xd6J\xf5\x84\xd3\x82\r\x14=\xbdRP1\xa1nN"
    immutable_list_0 = module_0.ImmutableList(bytes_0)
    immutable_list_0.reduce(int_0, int_0)


def test_case_14():
    immutable_list_0 = module_0.ImmutableList()


def test_case_15():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.find(immutable_list_0)
    var_1 = immutable_list_0.find(var_0)
    var_2 = immutable_list_0.reduce(var_1, immutable_list_0)
    str_0 = immutable_list_0.__str__()
    immutable_list_0.filter(var_2)


def test_case_16():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.append(immutable_list_0)
    immutable_list_2 = immutable_list_0.__len__()


def test_case_17():
    bytes_0 = b"\x97\xd5A\x89C\x07\xb5\xea"
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.__add__(immutable_list_0)
    immutable_list_2 = immutable_list_1.__add__(immutable_list_0)
    immutable_list_3 = module_0.ImmutableList(bytes_0)
    immutable_list_3.find(immutable_list_3)


def test_case_18():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.find(none_type_0)
    var_1 = immutable_list_0.find(var_0)
    immutable_list_1 = module_0.ImmutableList()
    bool_0 = immutable_list_0.__eq__(var_0)
    var_2 = immutable_list_1.find(none_type_0)


def test_case_19():
    str_0 = "=p\\30jk#"
    none_type_0 = None
    tuple_0 = ()
    immutable_list_0 = module_0.ImmutableList(tuple_0)
    immutable_list_1 = immutable_list_0.append(none_type_0)
    immutable_list_1.reduce(str_0, tuple_0)


def test_case_20():
    bytes_0 = b"l\xbe[\x1e\x9e\xa8\xfb{\xff\x81\x809"
    immutable_list_0 = module_0.ImmutableList(tail=bytes_0)
    immutable_list_1 = immutable_list_0.unshift(bytes_0)
    var_0 = immutable_list_1.__len__()
    immutable_list_1.find(immutable_list_0)


def test_case_21():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.unshift(immutable_list_0)
    var_1 = immutable_list_0.find(var_0)
    immutable_list_1 = module_0.ImmutableList()
    bool_0 = immutable_list_0.__eq__(var_0)
    var_2 = immutable_list_1.find(none_type_0)


def test_case_22():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.find(immutable_list_0)
    var_1 = immutable_list_0.reduce(var_0, immutable_list_0)
    var_2 = var_1.to_list()
    str_0 = immutable_list_0.__str__()
    immutable_list_1 = immutable_list_0.append(var_2)
    immutable_list_2 = module_0.ImmutableList(var_0, is_empty=var_1)
    bool_0 = immutable_list_1.__eq__(var_1)
    immutable_list_2.filter(var_0)


def test_case_23():
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(bool_0, is_empty=bool_0)
    immutable_list_0.find(immutable_list_0)
