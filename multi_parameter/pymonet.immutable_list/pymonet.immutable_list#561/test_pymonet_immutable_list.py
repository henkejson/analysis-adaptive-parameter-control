# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.immutable_list as module_0


def test_case_0():
    immutable_list_0 = module_0.ImmutableList()
    bool_0 = immutable_list_0.__eq__(immutable_list_0)
    immutable_list_1 = module_0.ImmutableList(
        immutable_list_0, is_empty=immutable_list_0
    )
    immutable_list_1.find(immutable_list_0)


def test_case_1():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = module_0.ImmutableList(immutable_list_0, immutable_list_0)
    bool_0 = immutable_list_0.__eq__(immutable_list_1)
    immutable_list_1.find(immutable_list_0)


def test_case_2():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.__add__(immutable_list_0)
    immutable_list_0.filter(immutable_list_0)


def test_case_3():
    str_0 = "\n        Return monad value when is successfully.\n        Othercase return default_value argument.\n\n        :params default_value: value to return when monad is not successfully.\n        :type default_value: B\n        :returns: monad value\n        :rtype: A | B\n        "
    list_0 = []
    immutable_list_0 = module_0.ImmutableList(is_empty=list_0)
    immutable_list_0.__add__(str_0)


def test_case_4():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(none_type_0, is_empty=none_type_0)
    var_0 = immutable_list_0.__len__()


def test_case_5():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    var_0 = immutable_list_1.__len__()
    immutable_list_1.find(immutable_list_0)


def test_case_6():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.to_list()
    immutable_list_0.filter(immutable_list_0)


def test_case_7():
    none_type_0 = None
    bool_0 = True
    none_type_1 = None
    immutable_list_0 = module_0.ImmutableList(tail=none_type_1)
    immutable_list_1 = immutable_list_0.unshift(bool_0)
    var_0 = immutable_list_1.to_list()
    immutable_list_2 = var_0.append(none_type_0)


def test_case_8():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.find(none_type_0)
    none_type_1 = None
    immutable_list_1 = module_0.ImmutableList(tail=none_type_1)
    immutable_list_1.map(var_0)


def test_case_9():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_0.filter(immutable_list_0)


def test_case_10():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.find(immutable_list_0)
    immutable_list_1 = immutable_list_0.append(var_0)
    immutable_list_1.filter(immutable_list_0)


def test_case_11():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.find(immutable_list_0)
    immutable_list_1 = module_0.ImmutableList(
        immutable_list_0, is_empty=immutable_list_0
    )
    immutable_list_1.find(immutable_list_0)


def test_case_12():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.to_list()
    var_1 = immutable_list_0.reduce(var_0, immutable_list_0)
    immutable_list_1 = module_0.ImmutableList()


def test_case_13():
    bool_0 = True
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(is_empty=none_type_0)
    immutable_list_1 = immutable_list_0.append(none_type_0)
    immutable_list_2 = immutable_list_0.unshift(bool_0)
    immutable_list_2.reduce(immutable_list_0, bool_0)


def test_case_14():
    immutable_list_0 = module_0.ImmutableList()


def test_case_15():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = module_0.ImmutableList(
        immutable_list_0, is_empty=immutable_list_0
    )
    str_0 = immutable_list_0.__str__()
    immutable_list_1.find(immutable_list_0)


def test_case_16():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.append(immutable_list_0)
    immutable_list_0.filter(immutable_list_0)


def test_case_17():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_1.find(immutable_list_0)


def test_case_18():
    float_0 = 2535.725177
    immutable_list_0 = module_0.ImmutableList(float_0)
    var_0 = immutable_list_0.__len__()
    immutable_list_0.find(var_0)


def test_case_19():
    bytes_0 = b"p\xd1y1~"
    immutable_list_0 = module_0.ImmutableList(is_empty=bytes_0)
    immutable_list_1 = module_0.ImmutableList()
    var_0 = immutable_list_1.find(immutable_list_1)
    immutable_list_2 = immutable_list_1.__add__(immutable_list_1)
    immutable_list_3 = immutable_list_1.append(immutable_list_0)
    bool_0 = immutable_list_3.__eq__(immutable_list_2)
    immutable_list_4 = immutable_list_2.unshift(immutable_list_0)
    immutable_list_5 = module_0.ImmutableList(tail=immutable_list_0)
    str_0 = immutable_list_5.__str__()
    var_1 = immutable_list_5.reduce(str_0, immutable_list_3)
    var_2 = immutable_list_5.__len__()
    var_3 = var_1.reduce(str_0, var_1)
    immutable_list_1.filter(var_1)


def test_case_20():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    none_type_0 = None
    bool_0 = immutable_list_1.__eq__(none_type_0)
    str_0 = immutable_list_1.__str__()
    immutable_list_2 = immutable_list_0.unshift(none_type_0)
    str_1 = immutable_list_1.__str__()
    immutable_list_3 = module_0.ImmutableList(bool_0)
    immutable_list_4 = immutable_list_1.unshift(str_1)
    var_0 = immutable_list_0.to_list()
    immutable_list_5 = immutable_list_1.unshift(none_type_0)
    immutable_list_6 = module_0.ImmutableList(tail=var_0, is_empty=immutable_list_5)
    immutable_list_6.map(var_0)


def test_case_21():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = module_0.ImmutableList(
        immutable_list_0, is_empty=immutable_list_0
    )
    immutable_list_1.find(immutable_list_0)


def test_case_22():
    bytes_0 = b"p\xd1y1~"
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.find(immutable_list_0)
    immutable_list_1 = module_0.ImmutableList(tail=immutable_list_0)
    immutable_list_2 = immutable_list_1.append(bytes_0)
    immutable_list_0.filter(var_0)


def test_case_23():
    bytes_0 = b"p\xd1y1~"
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(bytes_0, is_empty=none_type_0)
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    var_0 = immutable_list_0.to_list()
    immutable_list_0.reduce(immutable_list_1, var_0)
