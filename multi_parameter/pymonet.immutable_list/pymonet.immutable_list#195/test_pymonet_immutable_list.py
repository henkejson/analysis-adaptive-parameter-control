# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.immutable_list as module_0


def test_case_0():
    immutable_list_0 = module_0.ImmutableList()
    bool_0 = immutable_list_0.__eq__(immutable_list_0)


def test_case_1():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    bool_0 = immutable_list_1.__eq__(immutable_list_0)
    immutable_list_1.find(immutable_list_1)


def test_case_2():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_1.find(immutable_list_1)


def test_case_3():
    str_0 = "Ikk\n\rxn$Q7@XBO,6"
    bool_0 = True
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(tail=none_type_0)
    immutable_list_1 = immutable_list_0.append(str_0)
    immutable_list_1.__add__(bool_0)


def test_case_4():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.__len__()
    immutable_list_1 = module_0.ImmutableList(var_0)
    immutable_list_1.find(immutable_list_1)


def test_case_5():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    var_0 = immutable_list_1.__len__()
    immutable_list_2 = module_0.ImmutableList(immutable_list_1)
    immutable_list_2.find(immutable_list_2)


def test_case_6():
    bytes_0 = b"*\x9f\x13WnV\xc0\xc6\x14\x8d\xf8c\xa9\xf8s"
    dict_0 = {bytes_0: bytes_0}
    immutable_list_0 = module_0.ImmutableList(dict_0)
    str_0 = immutable_list_0.__str__()


def test_case_7():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.find(immutable_list_0)
    immutable_list_1 = immutable_list_0.append(immutable_list_0)
    var_1 = immutable_list_1.to_list()
    immutable_list_1.filter(immutable_list_1)


def test_case_8():
    bool_0 = True
    bool_1 = True
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(bool_1)
    immutable_list_2 = immutable_list_1.append(bool_0)
    bytes_0 = b"\xb2\xf0\x9ekd\xf6"
    bool_2 = True
    immutable_list_3 = module_0.ImmutableList(is_empty=bool_2)
    immutable_list_3.map(bytes_0)


def test_case_9():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.append(immutable_list_0)
    var_0 = immutable_list_1.__len__()
    var_1 = immutable_list_0.find(var_0)
    var_2 = immutable_list_0.find(var_1)
    immutable_list_1.map(var_2)


def test_case_10():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_0.filter(immutable_list_0)


def test_case_11():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.find(immutable_list_0)
    immutable_list_1 = immutable_list_0.append(immutable_list_0)
    immutable_list_1.filter(immutable_list_1)


def test_case_12():
    immutable_list_0 = module_0.ImmutableList()
    none_type_0 = None
    var_0 = immutable_list_0.reduce(none_type_0, immutable_list_0)
    var_0.filter(none_type_0)


def test_case_13():
    bool_0 = False
    str_0 = "\n    Perform left-to-right function composition.\n\n    :param value: argument of first applied function\n    :type value: Any\n    :param functions: list of functions to applied from left-to-right\n    :type functions: List[Function]\n    :returns: result of all functions\n    :rtype: Any\n    "
    immutable_list_0 = module_0.ImmutableList(str_0)
    immutable_list_1 = module_0.ImmutableList()
    var_0 = immutable_list_1.reduce(immutable_list_1, immutable_list_0)
    var_0.reduce(bool_0, immutable_list_0)


def test_case_14():
    immutable_list_0 = module_0.ImmutableList()


def test_case_15():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_2 = immutable_list_1.append(immutable_list_0)
    immutable_list_2.find(immutable_list_2)


def test_case_16():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = module_0.ImmutableList(
        immutable_list_0, is_empty=immutable_list_0
    )
    var_0 = immutable_list_1.__len__()
    immutable_list_2 = immutable_list_1.unshift(var_0)
    var_1 = immutable_list_0.find(var_0)
    immutable_list_2.find(var_0)


def test_case_17():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.find(immutable_list_0)
    immutable_list_1 = immutable_list_0.append(immutable_list_0)
    bool_0 = immutable_list_0.__eq__(immutable_list_1)
    immutable_list_1.filter(immutable_list_1)


def test_case_18():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = module_0.ImmutableList(immutable_list_0)
    immutable_list_1.find(immutable_list_1)


def test_case_19():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(tail=none_type_0)
    immutable_list_1 = immutable_list_0.append(immutable_list_0)
    bool_0 = immutable_list_1.__eq__(immutable_list_1)
    none_type_1 = None
    var_0 = immutable_list_1.reduce(none_type_1, immutable_list_1)
    var_1 = immutable_list_1.reduce(var_0, immutable_list_1)
    var_2 = var_0.__len__()
    var_3 = immutable_list_1.find(bool_0)
    immutable_list_2 = var_1.unshift(var_2)
    immutable_list_3 = var_1.unshift(immutable_list_2)
    immutable_list_2.reduce(var_3, immutable_list_1)
