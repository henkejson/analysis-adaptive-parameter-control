# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.immutable_list as module_0


def test_case_0():
    float_0 = 146.449
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(none_type_0)
    bool_0 = immutable_list_0.__eq__(float_0)
    immutable_list_1 = module_0.ImmutableList(float_0)
    bool_1 = immutable_list_0.__eq__(immutable_list_0)
    var_0 = immutable_list_1.__len__()
    immutable_list_1.find(immutable_list_1)


def test_case_1():
    float_0 = 146.449
    immutable_list_0 = module_0.ImmutableList(float_0)
    var_0 = immutable_list_0.__len__()
    bool_0 = immutable_list_0.__eq__(float_0)
    immutable_list_0.find(immutable_list_0)


def test_case_2():
    float_0 = 146.449
    immutable_list_0 = module_0.ImmutableList(float_0)
    var_0 = immutable_list_0.append(float_0)
    immutable_list_0.find(immutable_list_0)


def test_case_3():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(tail=none_type_0)
    immutable_list_0.__add__(none_type_0)


def test_case_4():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.__len__()
    var_1 = immutable_list_0.__len__()
    var_1.filter(var_0)


def test_case_5():
    float_0 = 146.449
    immutable_list_0 = module_0.ImmutableList(float_0)
    var_0 = immutable_list_0.__len__()
    immutable_list_0.find(immutable_list_0)


def test_case_6():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = module_0.ImmutableList()
    var_0 = immutable_list_1.to_list()
    immutable_list_1.filter(var_0)


def test_case_7():
    none_type_0 = None
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(bool_0)
    var_0 = immutable_list_1.to_list()
    immutable_list_2 = var_0.append(none_type_0)


def test_case_8():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_0.map(immutable_list_0)


def test_case_9():
    str_0 = "5w4<hCmNjhKg"
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.append(none_type_0)
    immutable_list_1.map(str_0)


def test_case_10():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_0.filter(immutable_list_0)


def test_case_11():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(tail=none_type_0)
    immutable_list_1 = immutable_list_0.unshift(none_type_0)
    str_0 = "\n        Take function (A) -> b and applied this function on current box value and returns new box with mapped value.\n\n        :param mapper: mapper function\n        :type mapper: Function(A) -> B\n        :returns: new box with mapped value\n        :rtype: Box[B]\n        "
    var_0 = immutable_list_0.reduce(str_0, none_type_0)
    immutable_list_1.filter(var_0)


def test_case_12():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(none_type_0)
    var_0 = immutable_list_0.reduce(immutable_list_0, immutable_list_0)
    var_1 = var_0.find(var_0)
    var_2 = immutable_list_0.__len__()


def test_case_13():
    float_0 = 146.449
    immutable_list_0 = module_0.ImmutableList(float_0)
    immutable_list_0.find(immutable_list_0)


def test_case_14():
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(bool_0)
    immutable_list_0.reduce(bool_0, bool_0)


def test_case_15():
    immutable_list_0 = module_0.ImmutableList()


def test_case_16():
    float_0 = 146.449
    immutable_list_0 = module_0.ImmutableList(float_0)
    str_0 = immutable_list_0.__str__()
    immutable_list_0.find(immutable_list_0)


def test_case_17():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(none_type_0)
    var_0 = immutable_list_0.unshift(immutable_list_0)
    var_0.find(var_0)


def test_case_18():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(none_type_0)
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_2 = immutable_list_1.__add__(immutable_list_1)
    immutable_list_1.find(immutable_list_1)


def test_case_19():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(none_type_0)
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    var_0 = immutable_list_1.__len__()
    str_0 = immutable_list_0.__str__()
    immutable_list_1.find(immutable_list_1)


def test_case_20():
    str_0 = "mmAXfG("
    immutable_list_0 = module_0.ImmutableList(is_empty=str_0)
    immutable_list_1 = immutable_list_0.append(str_0)
    immutable_list_2 = module_0.ImmutableList()
    immutable_list_3 = immutable_list_2.unshift(str_0)
    none_type_0 = None
    immutable_list_3.reduce(none_type_0, immutable_list_2)


def test_case_21():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_2 = module_0.ImmutableList(none_type_0)
    var_0 = immutable_list_0.to_list()
    var_1 = immutable_list_2.reduce(immutable_list_2, immutable_list_2)
    var_2 = immutable_list_1.unshift(immutable_list_1)
    immutable_list_3 = module_0.ImmutableList(tail=none_type_0)
    bool_0 = immutable_list_2.__eq__(var_2)
    var_1.filter(var_1)


def test_case_22():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(none_type_0)
    var_0 = immutable_list_0.append(immutable_list_0)
    var_1 = var_0.find(var_0)
    bool_0 = var_0.__eq__(immutable_list_0)
    immutable_list_0.filter(var_1)
