# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.immutable_list as module_0


def test_case_0():
    immutable_list_0 = module_0.ImmutableList()
    bool_0 = immutable_list_0.__eq__(immutable_list_0)
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_1.find(immutable_list_1)


def test_case_1():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    bool_0 = immutable_list_0.__eq__(immutable_list_1)
    immutable_list_1.find(immutable_list_1)


def test_case_2():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_1.find(immutable_list_1)


def test_case_3():
    tuple_0 = ()
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_0.__add__(tuple_0)


def test_case_4():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    var_0 = immutable_list_1.__len__()
    immutable_list_1.find(immutable_list_1)


def test_case_5():
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(bool_0, is_empty=bool_0)
    var_0 = immutable_list_0.__len__()
    immutable_list_0.find(var_0)


def test_case_6():
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(bool_0, is_empty=bool_0)
    var_0 = immutable_list_0.to_list()
    immutable_list_0.find(immutable_list_0)


def test_case_7():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    str_0 = immutable_list_1.__str__()
    immutable_list_1.find(immutable_list_1)


def test_case_8():
    float_0 = 461.56
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_0.map(float_0)


def test_case_9():
    str_0 = "\n    All is a Monoid that will combine 2 values of any type using logical conjunction on their coerced Boolean values.\n    "
    set_0 = {str_0, str_0, str_0, str_0}
    str_1 = "\n        Transform Lazy into Try with constructor_fn result.\n        Try will be successful only when constructor_fn not raise anything.\n\n        :returns: Try with constructor_fn result\n        :rtype: Try[A] | Try[Error]\n        "
    bool_0 = True
    bool_1 = False
    immutable_list_0 = module_0.ImmutableList(tail=bool_0, is_empty=bool_1)
    immutable_list_1 = immutable_list_0.unshift(str_1)
    immutable_list_2 = module_0.ImmutableList(tail=immutable_list_1)
    immutable_list_2.map(set_0)


def test_case_10():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_0.filter(immutable_list_0)


def test_case_11():
    bool_0 = True
    var_0 = module_0.ImmutableList(bool_0, bool_0)
    var_0.filter(bool_0)


def test_case_12():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.find(immutable_list_0)
    var_1 = immutable_list_0.reduce(var_0, var_0)
    immutable_list_0.filter(var_1)


def test_case_13():
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(bool_0, is_empty=bool_0)
    immutable_list_0.find(immutable_list_0)


def test_case_14():
    immutable_list_0 = module_0.ImmutableList()


def test_case_15():
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(bool_0, is_empty=bool_0)
    immutable_list_1 = immutable_list_0.append(immutable_list_0)
    immutable_list_0.find(immutable_list_0)


def test_case_16():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_2 = immutable_list_1.__add__(immutable_list_0)
    var_0 = immutable_list_0.to_list()
    immutable_list_1.find(immutable_list_1)


def test_case_17():
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(bool_0, bool_0, bool_0)
    immutable_list_0.find(immutable_list_0)


def test_case_18():
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(bool_0, is_empty=bool_0)
    immutable_list_1 = immutable_list_0.append(immutable_list_0)
    bool_1 = immutable_list_1.__eq__(immutable_list_0)
    immutable_list_1.find(immutable_list_0)


def test_case_19():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.unshift(immutable_list_0)
    str_0 = var_0.__str__()
    bool_0 = var_0.__eq__(immutable_list_0)
    var_1 = immutable_list_0.find(immutable_list_0)
    bool_1 = immutable_list_0.__eq__(var_1)
    var_0.reduce(var_1, immutable_list_0)


def test_case_20():
    none_type_0 = None
    bytes_0 = b"\xb55i1\xc9th\xf7\xc7\xdc"
    bool_0 = False
    tuple_0 = (bytes_0, bytes_0, bytes_0, bool_0)
    immutable_list_0 = module_0.ImmutableList(tuple_0)
    var_0 = immutable_list_0.__len__()
    immutable_list_0.reduce(none_type_0, none_type_0)
