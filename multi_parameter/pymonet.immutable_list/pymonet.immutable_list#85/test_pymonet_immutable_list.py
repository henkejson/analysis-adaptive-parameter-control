# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.immutable_list as module_0


def test_case_0():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(none_type_0, none_type_0)
    immutable_list_1 = immutable_list_0.append(none_type_0)
    var_0 = immutable_list_0.__len__()
    bool_0 = immutable_list_1.__eq__(immutable_list_0)


def test_case_1():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_1.find(immutable_list_1)


def test_case_2():
    none_type_0 = None
    bool_0 = False
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    immutable_list_0 = module_0.ImmutableList(tail=list_0)
    immutable_list_0.__add__(bool_0)


def test_case_3():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.__len__()
    var_1 = immutable_list_0.reduce(var_0, immutable_list_0)


def test_case_4():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    var_0 = immutable_list_1.__len__()
    immutable_list_1.find(immutable_list_1)


def test_case_5():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.to_list()


def test_case_6():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    var_0 = immutable_list_1.to_list()
    var_1 = immutable_list_1.__len__()
    immutable_list_1.find(immutable_list_1)


def test_case_7():
    immutable_list_0 = module_0.ImmutableList()
    str_0 = immutable_list_0.__str__()
    var_0 = immutable_list_0.find(str_0)
    immutable_list_0.map(var_0)


def test_case_8():
    str_0 = "\n        If Maybe is empty return new empty Maybe, in other case\n        takes mapper function and returns new instance of Maybe\n        with result of mapper.\n\n        :param mapper: function to call with Maybe value\n        :type mapper: Function(A) -> B\n        :returns: Maybe[B | None]\n        "
    str_1 = "nzx6l;av^5fN025"
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(none_type_0, none_type_0)
    immutable_list_1 = immutable_list_0.append(str_1)
    immutable_list_1.map(str_0)


def test_case_9():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_0.filter(immutable_list_0)


def test_case_10():
    int_0 = 1964
    int_1 = 4859
    immutable_list_0 = module_0.ImmutableList(tail=int_1, is_empty=int_1)
    immutable_list_1 = immutable_list_0.__add__(immutable_list_0)
    immutable_list_2 = module_0.ImmutableList()
    immutable_list_3 = module_0.ImmutableList()
    immutable_list_4 = immutable_list_0.append(int_0)
    var_0 = immutable_list_3.find(int_0)
    bool_0 = immutable_list_4.__eq__(int_0)
    var_1 = immutable_list_0.__len__()
    immutable_list_1.filter(var_1)


def test_case_11():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.append(immutable_list_0)
    var_0 = immutable_list_0.find(immutable_list_0)
    var_1 = immutable_list_0.reduce(var_0, immutable_list_1)
    immutable_list_0.filter(var_0)


def test_case_12():
    immutable_list_0 = module_0.ImmutableList()


def test_case_13():
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(is_empty=bool_0)
    str_0 = immutable_list_0.__str__()


def test_case_14():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    bool_0 = immutable_list_0.__eq__(immutable_list_1)
    immutable_list_1.find(immutable_list_1)


def test_case_15():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(none_type_0, none_type_0)
    immutable_list_1 = immutable_list_0.unshift(none_type_0)
    immutable_list_2 = immutable_list_1.append(none_type_0)
    immutable_list_3 = module_0.ImmutableList(none_type_0)
    var_0 = immutable_list_3.__len__()
    bool_0 = immutable_list_2.__eq__(immutable_list_0)


def test_case_16():
    str_0 = "Fn"
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(str_0, is_empty=bool_0)
    var_0 = immutable_list_0.__len__()
    immutable_list_0.find(var_0)


def test_case_17():
    str_0 = "+Ddc/\x0b"
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(str_0, is_empty=bool_0)
    immutable_list_0.find(str_0)


def test_case_18():
    immutable_list_0 = module_0.ImmutableList()
    bool_0 = immutable_list_0.__eq__(immutable_list_0)
    immutable_list_1 = immutable_list_0.__add__(immutable_list_0)
    immutable_list_0.filter(immutable_list_0)


def test_case_19():
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(is_empty=bool_0)
    immutable_list_1 = module_0.ImmutableList(immutable_list_0, immutable_list_0)
    bool_1 = immutable_list_0.__eq__(immutable_list_1)
    var_0 = immutable_list_0.__len__()
    int_0 = 1
    immutable_list_2 = immutable_list_0.unshift(var_0)
    var_1 = immutable_list_0.find(immutable_list_0)
    var_2 = immutable_list_0.reduce(int_0, bool_0)
    immutable_list_3 = immutable_list_0.unshift(int_0)
    immutable_list_3.reduce(immutable_list_3, immutable_list_0)


def test_case_20():
    list_0 = []
    immutable_list_0 = module_0.ImmutableList(list_0, is_empty=list_0)
    var_0 = immutable_list_0.__len__()
    immutable_list_1 = immutable_list_0.__add__(immutable_list_0)
    bool_0 = True
    immutable_list_0.reduce(bool_0, bool_0)
