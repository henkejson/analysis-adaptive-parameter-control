# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.immutable_list as module_0


def test_case_0():
    str_0 = ""
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(str_0)
    bool_0 = immutable_list_1.__eq__(immutable_list_1)
    var_0 = immutable_list_0.__len__()
    immutable_list_1.find(var_0)


def test_case_1():
    str_0 = "\n        Take function, store it and call with Task value during calling fork function.\n        Return new Task with result of called.\n\n        :param fn: mapper function\n        :type fn: Function(value) -> B\n        :returns: new Task with mapped resolve attribute\n        :rtype: Task[Function(resolve, reject -> A | B]\n        "
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(tail=none_type_0)
    bool_0 = immutable_list_0.__eq__(none_type_0)
    immutable_list_1 = immutable_list_0.append(str_0)
    var_0 = immutable_list_0.find(none_type_0)
    var_1 = immutable_list_0.find(str_0)


def test_case_2():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.append(immutable_list_0)


def test_case_3():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    str_0 = "t$q"
    bool_1 = False
    immutable_list_0 = module_0.ImmutableList(str_0, is_empty=bool_1)
    immutable_list_0.__add__(dict_0)


def test_case_4():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(none_type_0, none_type_0)
    var_0 = immutable_list_0.__len__()
    tuple_0 = (var_0,)
    immutable_list_1 = module_0.ImmutableList()
    immutable_list_2 = immutable_list_1.unshift(tuple_0)


def test_case_5():
    str_0 = "qi'$O"
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(is_empty=bool_0)
    immutable_list_1 = immutable_list_0.unshift(str_0)
    var_0 = immutable_list_1.__len__()
    immutable_list_1.find(str_0)


def test_case_6():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.to_list()


def test_case_7():
    bool_0 = True
    bytes_0 = b"\x0f3>]\xee\xa7\xa5("
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(bytes_0)
    str_0 = immutable_list_1.__str__()
    immutable_list_1.find(bool_0)


def test_case_8():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.to_list()
    var_1 = immutable_list_0.reduce(var_0, none_type_0)
    immutable_list_0.map(var_1)


def test_case_9():
    str_0 = "z&W|"
    immutable_list_0 = module_0.ImmutableList(tail=str_0)
    str_1 = ")v"
    immutable_list_1 = module_0.ImmutableList(tail=str_1, is_empty=str_1)
    none_type_0 = None
    immutable_list_1.map(none_type_0)


def test_case_10():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_0.filter(immutable_list_0)


def test_case_11():
    bool_0 = True
    bytes_0 = b"\x0f3>]\xee\xa7\xa5("
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(bytes_0)
    immutable_list_1.find(bool_0)


def test_case_12():
    list_0 = []
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.reduce(bool_0, bool_0)
    var_0.append(list_0)


def test_case_13():
    immutable_list_0 = module_0.ImmutableList()
    str_0 = immutable_list_0.__str__()
    var_0 = immutable_list_0.find(immutable_list_0)
    str_1 = "B+^`}u+WE=\\\rx"
    immutable_list_1 = module_0.ImmutableList(tail=str_1)
    none_type_0 = None
    immutable_list_2 = immutable_list_0.unshift(none_type_0)
    immutable_list_3 = module_0.ImmutableList()
    none_type_1 = None
    bool_0 = immutable_list_2.__eq__(immutable_list_3)
    str_2 = immutable_list_3.__str__()
    immutable_list_4 = immutable_list_0.append(none_type_1)
    bool_1 = var_0.__eq__(immutable_list_4)
    var_1 = immutable_list_3.to_list()
    bool_2 = False
    var_2 = immutable_list_4.__len__()
    immutable_list_5 = module_0.ImmutableList(immutable_list_3, is_empty=bool_2)
    immutable_list_5.reduce(var_1, var_1)


def test_case_14():
    immutable_list_0 = module_0.ImmutableList()


def test_case_15():
    immutable_list_0 = module_0.ImmutableList()
    str_0 = immutable_list_0.__str__()
    immutable_list_0.filter(str_0)


def test_case_16():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)


def test_case_17():
    bytes_0 = b"X\xed]\x91\xf9Ke\xb3\xf5\x0e\xf5a\xec"
    list_0 = [bytes_0, bytes_0, bytes_0]
    immutable_list_0 = module_0.ImmutableList(list_0)
    var_0 = immutable_list_0.__len__()
    immutable_list_0.find(immutable_list_0)


def test_case_18():
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(bool_0)
    immutable_list_0.find(bool_0)


def test_case_19():
    immutable_list_0 = module_0.ImmutableList()
    str_0 = immutable_list_0.__str__()
    var_0 = immutable_list_0.find(immutable_list_0)
    str_1 = "B+^`}u+WE=\\\rx"
    immutable_list_1 = module_0.ImmutableList(tail=str_1)
    none_type_0 = None
    immutable_list_2 = immutable_list_0.unshift(none_type_0)
    immutable_list_3 = module_0.ImmutableList()
    none_type_1 = None
    bool_0 = immutable_list_2.__eq__(immutable_list_3)
    str_2 = immutable_list_3.__str__()
    bool_1 = var_0.__eq__(var_0)
    var_0.append(none_type_1)


def test_case_20():
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(is_empty=bool_0)
    none_type_0 = None
    var_0 = immutable_list_0.find(none_type_0)
    complex_0 = 4368.9678 - 2871.8j
    immutable_list_1 = immutable_list_0.unshift(complex_0)
    immutable_list_1.filter(var_0)


def test_case_21():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_2 = immutable_list_1.__add__(immutable_list_1)
    immutable_list_1.find(immutable_list_2)


def test_case_22():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(none_type_0)
    var_0 = immutable_list_0.reduce(none_type_0, none_type_0)
    bool_0 = True
    immutable_list_1 = immutable_list_0.unshift(bool_0)
    var_1 = immutable_list_0.find(none_type_0)
    immutable_list_2 = module_0.ImmutableList(is_empty=bool_0)
    immutable_list_3 = immutable_list_2.unshift(none_type_0)
    immutable_list_1.reduce(immutable_list_1, none_type_0)


def test_case_23():
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(is_empty=bool_0)
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    bool_1 = immutable_list_0.__eq__(immutable_list_1)
    immutable_list_1.find(immutable_list_1)
