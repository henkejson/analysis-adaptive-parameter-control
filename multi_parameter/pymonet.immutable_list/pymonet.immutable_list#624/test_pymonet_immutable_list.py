# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.immutable_list as module_0


def test_case_0():
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(bool_0, is_empty=bool_0)
    bool_1 = immutable_list_0.__eq__(immutable_list_0)
    immutable_list_0.find(immutable_list_0)


def test_case_1():
    str_0 = "O}-MRv~pk>*l``zwKt"
    immutable_list_0 = module_0.ImmutableList(str_0)
    bool_0 = immutable_list_0.__eq__(str_0)
    immutable_list_0.find(immutable_list_0)


def test_case_2():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_1.find(immutable_list_0)


def test_case_3():
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(is_empty=bool_0)
    var_0 = immutable_list_0.to_list()
    immutable_list_0.__add__(var_0)


def test_case_4():
    str_0 = "L\n1+DT0;\x0cpoSon"
    immutable_list_0 = module_0.ImmutableList(tail=str_0)
    var_0 = immutable_list_0.__len__()
    immutable_list_0.filter(immutable_list_0)


def test_case_5():
    str_0 = "O-MRvpk>*l``zwKt"
    immutable_list_0 = module_0.ImmutableList(str_0)
    var_0 = immutable_list_0.__len__()
    immutable_list_0.find(var_0)


def test_case_6():
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(bool_0, is_empty=bool_0)
    var_0 = immutable_list_0.to_list()
    immutable_list_0.find(var_0)


def test_case_7():
    str_0 = "O}-MRv~pk>*l``zwKt"
    immutable_list_0 = module_0.ImmutableList(str_0)
    none_type_0 = None
    immutable_list_1 = immutable_list_0.append(none_type_0)
    var_0 = immutable_list_1.to_list()
    immutable_list_1.find(var_0)


def test_case_8():
    none_type_0 = None
    none_type_1 = None
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(tail=none_type_1, is_empty=bool_0)
    immutable_list_0.map(none_type_0)


def test_case_9():
    none_type_0 = None
    tuple_0 = ()
    immutable_list_0 = module_0.ImmutableList(tail=tuple_0)
    immutable_list_0.map(none_type_0)


def test_case_10():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_0.filter(immutable_list_0)


def test_case_11():
    str_0 = "L\n1+DT0;\x0cpoSon"
    immutable_list_0 = module_0.ImmutableList(tail=str_0)
    var_0 = immutable_list_0.find(str_0)
    immutable_list_0.filter(var_0)


def test_case_12():
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(bool_0, is_empty=bool_0)
    immutable_list_0.find(immutable_list_0)


def test_case_13():
    str_0 = "\n        Transform Lazy into not empty Maybe with constructor_fn result.\n\n        :returns: not empty Maybe monad with constructor_fn result\n        :rtype: Maybe[A]\n        "
    immutable_list_0 = module_0.ImmutableList(tail=str_0)
    var_0 = immutable_list_0.__len__()
    var_1 = immutable_list_0.find(var_0)
    none_type_0 = None
    var_2 = immutable_list_0.reduce(var_1, none_type_0)
    bool_0 = immutable_list_0.__eq__(str_0)
    immutable_list_0.to_list()


def test_case_14():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    immutable_list_0 = module_0.ImmutableList(tuple_0, is_empty=bool_0)
    immutable_list_1 = immutable_list_0.unshift(tuple_0)
    bool_1 = immutable_list_1.__eq__(bool_0)
    immutable_list_1.reduce(bool_1, tuple_0)


def test_case_15():
    immutable_list_0 = module_0.ImmutableList()


def test_case_16():
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(bool_0, is_empty=bool_0)
    str_0 = immutable_list_0.__str__()
    immutable_list_0.find(immutable_list_0)


def test_case_17():
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(bool_0, is_empty=bool_0)
    var_0 = immutable_list_0.append(immutable_list_0)
    immutable_list_0.find(var_0)


def test_case_18():
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(bool_0, bool_0, bool_0)
    immutable_list_1 = immutable_list_0.append(bool_0)
    immutable_list_0.find(bool_0)


def test_case_19():
    str_0 = "L\n1+DT0;\x0c3oSon"
    immutable_list_0 = module_0.ImmutableList(str_0, str_0)
    var_0 = immutable_list_0.__len__()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_0.find(immutable_list_0)


def test_case_20():
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(bool_0, bool_0, bool_0)
    immutable_list_0.find(bool_0)


def test_case_21():
    str_0 = "L\n1+DT0;\x0cpoSon"
    immutable_list_0 = module_0.ImmutableList(tail=str_0)
    immutable_list_0.filter(immutable_list_0)


def test_case_22():
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(bool_0, is_empty=bool_0)
    var_0 = immutable_list_0.to_list()
    immutable_list_1 = immutable_list_0.unshift(var_0)
    immutable_list_0.reduce(var_0, var_0)


def test_case_23():
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(bool_0, is_empty=bool_0)
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_2 = immutable_list_1.append(immutable_list_1)
    bool_1 = immutable_list_1.__eq__(immutable_list_2)
    immutable_list_0.find(immutable_list_1)


def test_case_24():
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(bool_0, is_empty=bool_0)
    immutable_list_1 = immutable_list_0.unshift(bool_0)
    immutable_list_2 = immutable_list_0.append(immutable_list_1)
    bool_1 = immutable_list_2.__eq__(immutable_list_1)
    immutable_list_2.find(immutable_list_0)
