# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.immutable_list as module_0


def test_case_0():
    str_0 = "\n        Transform Box into successfull Try.\n\n        :returns: successfull Try monad with previous value\n        :rtype: Try[A]\n        "
    immutable_list_0 = module_0.ImmutableList(str_0)
    bool_0 = immutable_list_0.__eq__(immutable_list_0)
    immutable_list_0.find(str_0)


def test_case_1():
    str_0 = "\n        Transform Box into successfull Try.\n\n        :returns: successfull Try monad with previous value\n        :rtype: Try[A]\n        "
    immutable_list_0 = module_0.ImmutableList(str_0)
    bool_0 = immutable_list_0.__eq__(str_0)
    immutable_list_0.find(str_0)


def test_case_2():
    str_0 = "`2fW"
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.append(str_0)


def test_case_3():
    bytes_0 = b"+K\xad\x0e\x02\xa3\xa9\x02\x8c\xb5>\\\xb8\x03"
    immutable_list_0 = module_0.ImmutableList(bytes_0, is_empty=bytes_0)
    none_type_0 = None
    immutable_list_1 = immutable_list_0.append(none_type_0)
    var_0 = immutable_list_0.__len__()
    immutable_list_0.__add__(var_0)


def test_case_4():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.__len__()


def test_case_5():
    str_0 = "\n        Transform Box into successfull Try.\n\n        :returns: successfull Try monad with previous value\n        :rtype: Try[A]\n        "
    immutable_list_0 = module_0.ImmutableList(str_0)
    var_0 = immutable_list_0.__len__()
    immutable_list_0.find(str_0)


def test_case_6():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.to_list()
    immutable_list_2 = immutable_list_0.unshift(immutable_list_1)


def test_case_7():
    str_0 = "\n        Transform Box into successfull Try.\n\n        :returns: successfull Try monad with previous value\n        :rtype: Try[A]\n        "
    immutable_list_0 = module_0.ImmutableList(str_0)
    immutable_list_1 = immutable_list_0.unshift(str_0)
    var_0 = immutable_list_1.to_list()
    immutable_list_0.find(str_0)


def test_case_8():
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(is_empty=bool_0)
    var_0 = immutable_list_0.to_list()
    bool_1 = immutable_list_0.__eq__(var_0)
    immutable_list_0.map(immutable_list_0)


def test_case_9():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(tail=none_type_0, is_empty=none_type_0)
    immutable_list_1 = immutable_list_0.append(none_type_0)
    immutable_list_1.map(none_type_0)


def test_case_10():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_0.filter(immutable_list_0)


def test_case_11():
    immutable_list_0 = module_0.ImmutableList()
    none_type_0 = None
    var_0 = immutable_list_0.find(none_type_0)
    immutable_list_0.filter(var_0)


def test_case_12():
    bytes_0 = b"\xb6\xc8\xac\x164]\\\x13@\xdc4\x15\xda\x9aW\x95\x1d\x03)"
    immutable_list_0 = module_0.ImmutableList(bytes_0, bytes_0)
    immutable_list_0.find(immutable_list_0)


def test_case_13():
    immutable_list_0 = module_0.ImmutableList()
    bytes_0 = b"\xb6\xc8\xac\x164\xdd\x13@\xdc4\x15\xda\x9a\x86\x95\x1d\x03"
    var_0 = immutable_list_0.find(bytes_0)
    var_1 = immutable_list_0.reduce(var_0, bytes_0)
    immutable_list_0.filter(var_1)


def test_case_14():
    complex_0 = -483.108 - 283.89043j
    immutable_list_0 = module_0.ImmutableList()
    none_type_0 = None
    var_0 = immutable_list_0.__len__()
    immutable_list_1 = immutable_list_0.append(complex_0)
    bool_0 = immutable_list_0.__eq__(none_type_0)
    immutable_list_2 = module_0.ImmutableList(immutable_list_1)
    var_1 = immutable_list_0.to_list()
    immutable_list_2.reduce(var_1, var_1)


def test_case_15():
    immutable_list_0 = module_0.ImmutableList()


def test_case_16():
    str_0 = "\n        Transform Box into successfull Try.\n\n        :returns: successfull Try monad with previous value\n        :rtype: Try[A]\n        "
    immutable_list_0 = module_0.ImmutableList(str_0)
    str_1 = immutable_list_0.__str__()
    immutable_list_0.find(str_0)


def test_case_17():
    str_0 = "\n        Transform Box into successfull Try.\n\n        :returns: successfull Try monad with previous value\n        :rtype: Try[A]\n        "
    immutable_list_0 = module_0.ImmutableList(str_0)
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    bool_0 = immutable_list_0.__eq__(immutable_list_1)
    immutable_list_0.find(str_0)


def test_case_18():
    str_0 = "\n        Transform Box into successfull Try.\n\n        :returns: successfull Try monad with previous value\n        :rtype: Try[A]\n        "
    immutable_list_0 = module_0.ImmutableList(str_0)
    immutable_list_1 = immutable_list_0.unshift(str_0)
    immutable_list_2 = immutable_list_1.append(immutable_list_1)
    immutable_list_2.find(str_0)


def test_case_19():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = module_0.ImmutableList()
    var_0 = immutable_list_1.find(immutable_list_0)
    str_0 = immutable_list_1.__str__()
    immutable_list_2 = immutable_list_0.append(immutable_list_0)
    immutable_list_3 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_3.filter(var_0)


def test_case_20():
    str_0 = "\n        Transform Box into successfull Try.\n\n        :returns: successfull Try monad with previous value\n        :rtype: Try[A]\n        "
    immutable_list_0 = module_0.ImmutableList(str_0)
    immutable_list_0.find(str_0)


def test_case_21():
    int_0 = 230
    complex_0 = -466.52841 - 2298.893152j
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(bool_0)
    immutable_list_1 = immutable_list_0.append(complex_0)
    immutable_list_2 = immutable_list_1.unshift(int_0)
    immutable_list_3 = module_0.ImmutableList()
    immutable_list_2.reduce(complex_0, immutable_list_1)


def test_case_22():
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(tail=bool_0)
    immutable_list_1 = module_0.ImmutableList(bool_0, immutable_list_0, bool_0)
    var_0 = immutable_list_1.__len__()
    immutable_list_1.find(var_0)


def test_case_23():
    str_0 = "\n        Transform Box into successfull Try.\n\n        :returns: successfull Try monad with previous value\n        :rtype: Try[A]\n        "
    immutable_list_0 = module_0.ImmutableList(str_0)
    immutable_list_1 = immutable_list_0.append(immutable_list_0)
    bool_0 = immutable_list_1.__eq__(immutable_list_0)
    immutable_list_1.find(str_0)
