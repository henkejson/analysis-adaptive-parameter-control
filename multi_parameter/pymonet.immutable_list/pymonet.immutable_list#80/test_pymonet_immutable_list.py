# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.immutable_list as module_0


def test_case_0():
    bytes_0 = b"K^g"
    immutable_list_0 = module_0.ImmutableList(bytes_0)
    bool_0 = immutable_list_0.__eq__(immutable_list_0)
    immutable_list_0.find(bytes_0)


def test_case_1():
    bytes_0 = b"K^\xfa\x1e"
    immutable_list_0 = module_0.ImmutableList(bytes_0)
    bool_0 = immutable_list_0.__eq__(bytes_0)
    immutable_list_0.find(bytes_0)


def test_case_2():
    int_0 = 1
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = module_0.ImmutableList(int_0)
    immutable_list_2 = immutable_list_1.__add__(immutable_list_1)


def test_case_3():
    str_0 = "\n        If Maybe is empty or filterer returns False return default_value, in other case\n        return new instance of Maybe with the same value.\n\n        :param filterer:\n        :type filterer: Function(A) -> Boolean\n        :returns: copy of self when filterer returns True, in other case empty Maybe\n        :rtype: Maybe[A] | Maybe[None]\n        "
    immutable_list_0 = module_0.ImmutableList(is_empty=str_0)
    var_0 = immutable_list_0.__len__()
    immutable_list_1 = immutable_list_0.append(var_0)
    immutable_list_1.__add__(str_0)


def test_case_4():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.__len__()
    immutable_list_0.filter(var_0)


def test_case_5():
    bytes_0 = b"K^\xfag"
    immutable_list_0 = module_0.ImmutableList(bytes_0)
    var_0 = immutable_list_0.__len__()
    immutable_list_0.find(bytes_0)


def test_case_6():
    bytes_0 = b"K^\xfa\x1e"
    immutable_list_0 = module_0.ImmutableList(bytes_0)
    str_0 = immutable_list_0.__str__()
    immutable_list_0.find(bytes_0)


def test_case_7():
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(bool_0)
    immutable_list_1 = immutable_list_0.__add__(immutable_list_0)
    str_0 = immutable_list_1.__str__()
    immutable_list_1.find(immutable_list_0)


def test_case_8():
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_0.map(bool_0)


def test_case_9():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.append(none_type_0)
    bool_0 = immutable_list_0.__eq__(immutable_list_0)
    immutable_list_1.map(none_type_0)


def test_case_10():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_0.filter(immutable_list_0)


def test_case_11():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.find(immutable_list_0)
    immutable_list_0.filter(var_0)


def test_case_12():
    bytes_0 = b"K\xf4^\xfag"
    immutable_list_0 = module_0.ImmutableList(bytes_0)
    immutable_list_0.find(bytes_0)


def test_case_13():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.to_list()
    var_1 = immutable_list_0.reduce(var_0, var_0)
    var_2 = var_1.__len__()
    var_3 = immutable_list_0.find(immutable_list_0)
    immutable_list_0.filter(var_3)


def test_case_14():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.to_list()
    immutable_list_1 = module_0.ImmutableList(list_0, none_type_0, none_type_0)
    immutable_list_1.reduce(list_0, list_0)


def test_case_15():
    immutable_list_0 = module_0.ImmutableList()


def test_case_16():
    bytes_0 = b"K^g"
    immutable_list_0 = module_0.ImmutableList(bytes_0)
    immutable_list_1 = immutable_list_0.append(immutable_list_0)
    immutable_list_0.find(bytes_0)


def test_case_17():
    bytes_0 = b"K^\xfag"
    immutable_list_0 = module_0.ImmutableList(bytes_0)
    var_0 = immutable_list_0.unshift(bytes_0)
    immutable_list_0.find(bytes_0)


def test_case_18():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = module_0.ImmutableList(immutable_list_0, immutable_list_0)
    bool_0 = immutable_list_1.__eq__(immutable_list_0)
    immutable_list_1.find(immutable_list_0)


def test_case_19():
    bytes_0 = b"K^g"
    immutable_list_0 = module_0.ImmutableList(bytes_0)
    immutable_list_1 = immutable_list_0.append(immutable_list_0)
    immutable_list_2 = immutable_list_1.append(immutable_list_1)
    immutable_list_0.find(bytes_0)


def test_case_20():
    bytes_0 = b"K^\xfag"
    immutable_list_0 = module_0.ImmutableList(bytes_0)
    immutable_list_1 = immutable_list_0.__add__(immutable_list_0)
    immutable_list_1.find(bytes_0)


def test_case_21():
    bytes_0 = b"%\x1c\xf9v\x94\xd5F\x12`\xf6\xc1\xf1\x97\xcb"
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    var_0 = immutable_list_0.reduce(immutable_list_1, bytes_0)
    var_1 = immutable_list_0.reduce(var_0, var_0)
    var_2 = immutable_list_0.find(var_1)
    immutable_list_1.reduce(var_1, immutable_list_0)


def test_case_22():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.append(immutable_list_0)
    immutable_list_2 = module_0.ImmutableList(immutable_list_0, immutable_list_0)
    bool_0 = immutable_list_1.__eq__(immutable_list_0)
    immutable_list_2.find(immutable_list_0)


def test_case_23():
    bytes_0 = b"K\xfa&"
    immutable_list_0 = module_0.ImmutableList(bytes_0)
    var_0 = immutable_list_0.__len__()
    immutable_list_1 = immutable_list_0.__add__(immutable_list_0)
    var_1 = immutable_list_1.__len__()
    immutable_list_1.find(bytes_0)


def test_case_24():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.__len__()
    immutable_list_1 = module_0.ImmutableList(var_0, var_0)
    var_1 = immutable_list_0.find(var_0)
    immutable_list_1.filter(var_1)
