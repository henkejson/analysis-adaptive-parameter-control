# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import codetiming._timer as module_0


def test_case_0():
    timer_error_0 = module_0.TimerError()


def test_case_1():
    timer_0 = module_0.Timer()
    timer_1 = timer_0.__enter__()
    timer_1.start()


def test_case_2():
    str_0 = "Timer"
    timer_0 = module_0.Timer(text=str_0, logger=str_0)
    timer_0.__exit__()


def test_case_3():
    timer_0 = module_0.Timer()
    none_type_0 = timer_0.start()
    none_type_1 = timer_0.__exit__()


def test_case_4():
    str_0 = "M]usCj<-F^2Q_oNw@"
    timer_0 = module_0.Timer(str_0, str_0, str_0)
    timer_1 = timer_0.__enter__()
    float_0 = timer_1.stop()
    timer_2 = module_0.Timer()
    timer_3 = timer_2.__enter__()
    var_0 = timer_2.__repr__()
    float_1 = timer_2.stop()
    timer_4 = module_0.Timer(var_0, str_0, timer_3, var_0)
    var_1 = timer_3.__repr__()
    timer_4.__enter__()


def test_case_5():
    list_0 = []
    none_type_0 = None
    timer_0 = module_0.Timer(logger=list_0)
    var_0 = timer_0.__call__(list_0)
    var_0.__call__(none_type_0)


def test_case_6():
    str_0 = "M]usCj<-F^2Q_oNw@"
    timer_0 = module_0.Timer(str_0, str_0, str_0)
    timer_1 = timer_0.__enter__()
    timer_2 = module_0.Timer()
    timer_3 = timer_2.__enter__()
    var_0 = timer_2.__repr__()
    float_0 = timer_2.stop()
    timer_4 = module_0.Timer(var_0, str_0, timer_3, var_0)
    var_1 = timer_3.__repr__()


def test_case_7():
    str_0 = "M]usCj<-F^2Q_oNw@"
    timer_0 = module_0.Timer(str_0, str_0, str_0)
    timer_1 = timer_0.__enter__()
    timer_2 = module_0.Timer()
    timer_3 = timer_2.__enter__()
    var_0 = timer_2.__repr__()
    float_0 = timer_2.stop()
    timer_4 = module_0.Timer(var_0, str_0, timer_3, var_0)
    var_1 = timer_3.__repr__()
    timer_4.__enter__()


def test_case_8():
    timer_0 = module_0.Timer()
    float_arg_0 = module_0.FloatArg()
    timer_1 = module_0.Timer(
        text=float_arg_0, initial_text=float_arg_0, logger=float_arg_0
    )
    timer_1.start()
