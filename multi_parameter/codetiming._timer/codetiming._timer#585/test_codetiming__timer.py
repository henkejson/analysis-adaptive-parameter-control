# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import codetiming._timer as module_0


def test_case_0():
    timer_error_0 = module_0.TimerError()


def test_case_1():
    bool_0 = True
    timer_0 = module_0.Timer(initial_text=bool_0)
    none_type_0 = timer_0.start()
    none_type_1 = timer_0.__exit__()


def test_case_2():
    bool_0 = False
    timer_0 = module_0.Timer(initial_text=bool_0)
    none_type_0 = timer_0.start()
    none_type_1 = timer_0.__exit__()


def test_case_3():
    bool_0 = True
    timer_0 = module_0.Timer(initial_text=bool_0)
    none_type_0 = timer_0.start()
    float_0 = timer_0.__call__(timer_0)
    timer_0.__enter__()


def test_case_4():
    str_0 = "q\x0c"
    none_type_0 = None
    timer_0 = module_0.Timer(initial_text=str_0, logger=none_type_0)
    var_0 = timer_0.__eq__(none_type_0)
    timer_0.__exit__()


def test_case_5():
    bool_0 = True
    none_type_0 = None
    timer_0 = module_0.Timer(initial_text=bool_0, logger=none_type_0)
    timer_1 = timer_0.__enter__()
    var_0 = timer_0.__eq__(none_type_0)
    float_0 = timer_0.stop()
    timer_1.stop()


def test_case_6():
    list_0 = []
    timer_0 = module_0.Timer(initial_text=list_0)
    str_0 = 'x&pPda[Fie3I4i"VzjW'
    timer_1 = module_0.Timer(str_0, initial_text=str_0)
    none_type_0 = timer_1.start()
    var_0 = timer_1.__eq__(str_0)
    str_1 = ""
    timer_2 = module_0.Timer(str_1, logger=var_0)
    var_1 = timer_2.__repr__()
    var_0.__delitem__(var_0)


def test_case_7():
    bool_0 = True
    timer_0 = module_0.Timer(bool_0, initial_text=bool_0)
    none_type_0 = timer_0.start()
    float_0 = timer_0.stop()
    timer_1 = module_0.Timer(timer_0, logger=none_type_0)
    timer_2 = timer_0.__enter__()


def test_case_8():
    bool_0 = True
    timer_0 = module_0.Timer(initial_text=bool_0)
    timer_1 = timer_0.__enter__()
    timer_2 = module_0.Timer(text=timer_1)
    none_type_0 = timer_2.start()
    float_0 = timer_2.stop()
    timer_3 = module_0.Timer()
    timer_0.__enter__()
