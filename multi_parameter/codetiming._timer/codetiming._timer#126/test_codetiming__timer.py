# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import codetiming._timer as module_0
import codetiming._timers as module_1
import dataclasses as module_2


def test_case_0():
    timer_error_0 = module_0.TimerError()


def test_case_1():
    timer_error_0 = module_0.TimerError()
    timers_0 = module_1.Timers()
    timer_0 = module_0.Timer()
    timer_0.__exit__()


def test_case_2():
    timer_0 = module_0.Timer()
    none_type_0 = timer_0.start()
    none_type_1 = timer_0.__exit__()


def test_case_3():
    timer_0 = module_0.Timer()
    none_type_0 = timer_0.start()


def test_case_4():
    timer_error_0 = module_0.TimerError()
    timers_0 = module_1.Timers()
    timer_0 = module_0.Timer()
    timer_1 = timer_0.__enter__()
    timer_0.start()


def test_case_5():
    str_0 = "Timer {name} started"
    bytes_0 = b"$m}\x88\xb5(\xdeop>\xf7B\xc3\x1c\xe5d$"
    timer_0 = module_0.Timer(str_0, logger=bytes_0)
    timer_1 = timer_0.__enter__()
    timer_0.stop()


def test_case_6():
    timer_0 = module_0.Timer()
    none_type_0 = None
    timer_1 = module_0.Timer(text=none_type_0, logger=none_type_0)
    var_0 = module_2.field(default=timer_0, compare=timer_0, kw_only=timer_0)
    var_1 = timer_0.__call__(timer_0)
    none_type_1 = timer_0.start()
    var_2 = timer_0.__repr__()
    timer_2 = module_0.Timer(initial_text=var_0)
    timer_3 = timer_1.__enter__()
    var_3 = timer_1.__eq__(timer_1)
    timer_4 = module_0.Timer(timer_3, initial_text=var_1)
    var_3.__len__()


def test_case_7():
    timer_0 = module_0.Timer()
    timer_1 = timer_0.__enter__()
    float_0 = timer_0.stop()
    timer_2 = timer_0.__enter__()
    timer_3 = module_0.Timer(initial_text=timer_0, logger=float_0)
    timer_3.__enter__()


def test_case_8():
    str_0 = "Timer {name} started"
    timer_0 = module_0.Timer(str_0, str_0)
    none_type_0 = None
    timer_1 = timer_0.__enter__()
    float_0 = timer_0.stop()
    timer_2 = timer_0.__enter__()
    timer_3 = module_0.Timer()
    var_0 = module_2.field(hash=none_type_0)
    var_0.popitem()


def test_case_9():
    str_0 = "Timer {name} starte"
    timer_0 = module_0.Timer(initial_text=str_0)
    none_type_0 = None
    var_0 = timer_0.__call__(none_type_0)
    var_1 = timer_0.__eq__(str_0)
    var_0.__call__(none_type_0)


def test_case_10():
    bytes_0 = b"$m}\x88\xb5(\xdeop>\xf7B\xc3\x1c\xe5d$"
    timer_0 = module_0.Timer()
    bool_0 = True
    timer_1 = timer_0.__enter__()
    float_0 = timer_1.stop()
    var_0 = timer_1.__call__(bool_0)
    var_1 = var_0.__eq__(timer_0)
    timer_2 = module_0.Timer(var_0, initial_text=bool_0, logger=var_1)
    bool_1 = False
    timer_3 = module_0.Timer(bytes_0, var_1, bool_1, bool_0)
    timer_2.__enter__()


def test_case_11():
    str_0 = "Timer {name} starte"
    none_type_0 = None
    timer_0 = module_0.Timer(logger=none_type_0)
    none_type_1 = None
    timer_1 = timer_0.__enter__()
    float_0 = timer_1.stop()
    timer_2 = timer_1.__enter__()
    var_0 = timer_2.__call__(timer_2)
    timer_3 = module_0.Timer(initial_text=str_0)
    timer_4 = module_0.Timer(none_type_1, var_0)
    timer_5 = timer_4.__enter__()
    var_1 = timer_2.__call__(str_0)
    timer_1.__enter__()


def test_case_12():
    timer_0 = module_0.Timer()
    timer_1 = module_0.Timer(text=timer_0)
    timer_2 = timer_1.__enter__()
    float_0 = timer_1.stop()
    timer_3 = timer_0.__enter__()
    var_0 = timer_0.__call__(timer_1)
    var_0.__iter__()
