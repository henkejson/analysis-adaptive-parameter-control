# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    bytes_0 = b"d\x94T\xdb\xe3&5\xcb\xe2\xf8\xf6)\xdf\x0f\xe8\xf0<\xa3\xc5\x1f"
    config_0 = module_0.Config(converters=bytes_0)
    none_type_0 = config_0.update(**config_0)


def test_case_2():
    list_0 = []
    none_type_0 = None
    config_0 = module_0.Config(
        env_prefix=none_type_0, keep_alive=list_0, converters=list_0
    )


def test_case_3():
    bytes_0 = b"z\xae6"
    config_0 = module_0.Config(converters=bytes_0)
    str_0 = "8\tyuq&05>Uaf*PPc>"
    none_type_0 = config_0.__setattr__(str_0, str_0)
    none_type_1 = config_0.register_type(bytes_0)
    config_0.__getattr__(bytes_0)


def test_case_4():
    bytes_0 = b"\x98\xdc`\xa5;3\xd9\x8c0-,\x04"
    none_type_0 = None
    config_0 = module_0.Config(keep_alive=none_type_0)
    config_0.update_config(bytes_0)


def test_case_5():
    config_0 = module_0.Config()
    none_type_0 = config_0.register_type(config_0)


def test_case_6():
    str_0 = "y"
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=str_0, keep_alive=none_type_0)


def test_case_7():
    str_0 = ".i$do\\dqrC f3h^r?]"
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0, keep_alive=none_type_0)
    config_1 = module_0.Config(config_0)
    none_type_1 = config_0.register_type(str_0)


def test_case_8():
    config_0 = module_0.Config()
    none_type_0 = config_0.update_config(config_0)


def test_case_9():
    config_0 = module_0.Config()
    str_0 = "\r@!:LOi1~qs\x0b"
    none_type_0 = config_0.__setitem__(str_0, str_0)


def test_case_10():
    none_type_0 = None
    config_0 = module_0.Config()
    config_0.update_config(none_type_0)


def test_case_11():
    bytes_0 = b"z\xae6"
    config_0 = module_0.Config(converters=bytes_0)
    config_0.__getattr__(config_0)


def test_case_12():
    bytes_0 = b"zz\x89\xae6"
    module_0.Config(converters=bytes_0)


def test_case_13():
    str_0 = "LOCAL_CERT_CREATOR"
    dict_0 = {str_0: str_0}
    str_1 = " "
    config_0 = module_0.Config(env_prefix=str_1)
    config_0.update(**dict_0)


def test_case_14():
    str_0 = ""
    config_0 = module_0.Config(env_prefix=str_0)
    config_0.load_environment_vars(str_0)
