# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import inspect as module_1


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    float_0 = -539.0
    module_0.Config(converters=float_0)


def test_case_2():
    set_0 = set()
    config_0 = module_0.Config(keep_alive=set_0)


def test_case_3():
    str_0 = "l"
    config_0 = module_0.Config(env_prefix=str_0)


def test_case_4():
    config_0 = module_0.Config()
    str_0 = "H"
    config_1 = module_0.Config(config_0, str_0, str_0)


def test_case_5():
    config_0 = module_0.Config()
    bool_0 = False
    var_0 = config_0.update_config(config_0)
    none_type_0 = config_0.register_type(bool_0)


def test_case_6():
    set_0 = set()
    tuple_0 = (set_0,)
    config_0 = module_0.Config(converters=tuple_0)
    var_0 = config_0.load_environment_vars()
    config_0.update(*config_0)


def test_case_7():
    str_0 = ""
    config_0 = module_0.Config(env_prefix=str_0)
    none_type_0 = config_0.update_config(config_0)
    config_0.update_config(none_type_0)


def test_case_8():
    set_0 = set()
    tuple_0 = (set_0,)
    config_0 = module_0.Config(converters=tuple_0)
    none_type_0 = None
    config_0.__getattr__(none_type_0)


def test_case_9():
    set_0 = set()
    tuple_0 = module_1.isdatadescriptor(set_0)
    bool_0 = True
    none_type_0 = None
    config_0 = module_0.Config(keep_alive=bool_0, converters=none_type_0)
    config_1 = module_0.Config(converters=tuple_0)
    var_0 = config_1.update_config(config_1)
    config_0.__getattr__(config_0)


def test_case_10():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_11():
    config_0 = module_0.Config()
    config_0.__setitem__(config_0, config_0)


def test_case_12():
    str_0 = "l"
    config_0 = module_0.Config(env_prefix=str_0)
    none_type_0 = config_0.__setitem__(str_0, str_0)
    config_0.update_config(none_type_0)


def test_case_13():
    config_0 = module_0.Config()
    str_0 = "Au revoir"
    none_type_0 = config_0.__setattr__(str_0, str_0)
    config_0.update_config(str_0)


def test_case_14():
    set_0 = set()
    tuple_0 = (set_0,)
    config_0 = module_0.Config(converters=tuple_0)
    config_1 = module_0.Config()
    none_type_0 = None
    config_2 = module_0.Config(converters=none_type_0)
    none_type_1 = config_2.update()
    str_0 = "qf*vsnQ88u$r,Y&^"
    module_0.Config(converters=str_0)


def test_case_15():
    set_0 = set()
    tuple_0 = (set_0,)
    config_0 = module_0.Config(converters=tuple_0)
    str_0 = "FALLBACK_ERROR_FORMAT"
    config_0.__setattr__(str_0, tuple_0)


def test_case_16():
    set_0 = set()
    tuple_0 = (set_0,)
    config_0 = module_0.Config(converters=tuple_0)
    config_1 = module_0.Config()
    str_0 = "H"
    list_0 = [config_0]
    none_type_0 = config_0.update(*list_0, **config_0)
    module_0.Config(env_prefix=str_0, converters=config_0)


def test_case_17():
    set_0 = set()
    tuple_0 = (set_0,)
    str_0 = "_"
    config_0 = module_0.Config(set_0, str_0)
    var_0 = config_0.load_environment_vars()
    config_1 = module_0.Config(converters=tuple_0)
    config_2 = module_0.Config()
    str_1 = "H"
    list_0 = [config_1]
    none_type_0 = config_1.update(*list_0, **config_1)
    none_type_1 = config_2.update(**config_1)
    str_2 = "qf*vsnQ88u$r,Y&^"
    dict_0 = {str_1: str_1, str_2: str_2, str_2: str_1}
    config_3 = module_0.Config(dict_0, str_1, str_1)
    config_2.update_config(tuple_0)
