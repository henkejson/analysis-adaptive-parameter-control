# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import sanic.errorpages as module_1
import inspect as module_2
import sanic.http.http1 as module_3


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    str_0 = "go$:N%Fdn&vE"
    dict_0 = {str_0: str_0}
    config_0 = module_0.Config(dict_0, converters=dict_0)
    int_0 = 2469
    module_1.check_error_format(int_0)


def test_case_2():
    bool_0 = False
    config_0 = module_0.Config(keep_alive=bool_0)


def test_case_3():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0, converters=none_type_0)
    var_0 = module_2.isdatadescriptor(none_type_0)
    var_0.__instancecheck__(config_0, none_type_0)


def test_case_4():
    none_type_0 = None
    config_0 = module_0.Config()
    config_0.__getattr__(none_type_0)


def test_case_5():
    list_0 = []
    config_0 = module_0.Config()
    config_0.update_config(list_0)


def test_case_6():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_7():
    none_type_0 = None
    dict_0 = {}
    config_0 = module_0.Config(dict_0)
    config_0.__setitem__(none_type_0, none_type_0)


def test_case_8():
    config_0 = module_0.Config()
    var_0 = config_0.load_environment_vars()
    config_0.__getattr__(config_0)


def test_case_9():
    config_0 = module_0.Config()
    bool_0 = False
    str_0 = config_0.__str__()
    str_1 = "413 Payload Too Large\n\n    This is an internal exception thrown by Sanic and should not be used\n    directly.\n\n    Args:\n        message (Optional[Union[str, bytes]], optional): The message to be sent to the client. If `None`\n            then the HTTP status 'Bad request' will be sent. Defaults to `None`.\n        quiet (Optional[bool], optional): When `True`, the error tr4ceback will be suppressed\n            from the logs. Defaults to `None`.\n        context (Optional[Dict[str, Any]], optional): Additional mapping of key/value data that will be\n            sent to the client upon exception. Defaults to `None`.\n        extra (Optional[Dict[str, Any]], optional): Additional mapping of key/value data that will NOT be\n            sent to the client when in PRODUCTION mode. Defaults to `None`.\n        headers (Optional[Dict[str, Any]], optional): Additional headers that should be sent with the HTTP\n            response. Defaults to `None`.\n    "
    none_type_0 = config_0.__setitem__(str_1, bool_0)
    str_2 = "o-x"
    float_0 = 1400.0
    str_3 = "LUl4:@RQe}S"
    str_4 = "qEJ@w`N:a6P\x0bg0sk~"
    dict_0 = {str_2: float_0, str_1: bool_0, str_3: str_4}
    config_1 = module_0.Config(dict_0, converters=none_type_0)


def test_case_10():
    str_0 = ""
    config_0 = module_0.Config(keep_alive=str_0)
    str_1 = "\x0c1/M"
    none_type_0 = config_0.register_type(str_1)
    str_2 = "P?_nd"
    none_type_1 = config_0.__setitem__(str_2, config_0)
    module_3.Http(config_0)


def test_case_11():
    int_0 = -1773
    var_0 = module_2.isclass(int_0)
    config_0 = module_0.Config()
    module_0.Config(var_0, config_0)


def test_case_12():
    config_0 = module_0.Config()
    str_0 = "WEBSOCKET_PING_TIMEOUT"
    config_0.update_config(str_0)


def test_case_13():
    str_0 = "#>y[H/a?HXh:u~QwP#"
    module_0.Config(env_prefix=str_0, converters=str_0)


def test_case_14():
    config_0 = module_0.Config()
    str_0 = "LOCAL_CERT_CREATOR"
    config_0.__setitem__(str_0, str_0)
