# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import inspect as module_1


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    str_0 = "S"
    config_0 = module_0.Config(env_prefix=str_0, keep_alive=str_0)


def test_case_2():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0)


def test_case_3():
    config_0 = module_0.Config()
    none_type_0 = config_0.update_config(config_0)


def test_case_4():
    str_0 = "S"
    config_0 = module_0.Config(env_prefix=str_0, keep_alive=str_0)
    var_0 = config_0.update_config(config_0)
    config_0.update_config(var_0)


def test_case_5():
    str_0 = "S"
    module_0.Config(env_prefix=str_0, keep_alive=str_0, converters=str_0)


def test_case_6():
    none_type_0 = None
    config_0 = module_1.getmembers(none_type_0)
    module_0.Config(config_0)


def test_case_7():
    str_0 = "Y*w|g|BB$`y<khU"
    config_0 = module_0.Config(env_prefix=str_0, keep_alive=str_0)
    var_0 = config_0.update_config(config_0)
    var_1 = module_1.isclass(str_0)
    var_2 = var_0.__bool__()
    complex_0 = 2818.91 + 1076.9279j
    config_0.__getattr__(complex_0)


def test_case_8():
    str_0 = "S"
    config_0 = module_0.Config(env_prefix=str_0, keep_alive=str_0)
    config_0.update_config(str_0)


def test_case_9():
    str_0 = "SD"
    config_0 = module_0.Config(env_prefix=str_0, keep_alive=str_0)
    config_0.__getattr__(config_0)


def test_case_10():
    str_0 = "NOISY_EXCEPTIONS"
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=str_0, keep_alive=none_type_0)
    module_0.Config(keep_alive=none_type_0, converters=str_0)


def test_case_11():
    str_0 = "_"
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=str_0, keep_alive=none_type_0)
    var_0 = module_1.isclass(config_0)
    var_0.update_config(str_0)


def test_case_12():
    str_0 = "S"
    config_0 = module_0.Config(env_prefix=str_0, keep_alive=str_0)
    config_1 = module_0.Config()
    str_1 = ""
    str_2 = "LOCAL_CERT_CREATOR"
    dict_0 = {str_1: str_0, str_2: str_1}
    config_1.update(**dict_0)
