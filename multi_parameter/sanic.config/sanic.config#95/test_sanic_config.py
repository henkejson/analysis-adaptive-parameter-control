# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import sanic.utils as module_1


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    int_0 = -1455
    config_0 = module_0.Config(keep_alive=int_0)


def test_case_2():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0)
    config_0.update_config(none_type_0)


def test_case_3():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)
    config_0.__getattr__(var_0)


def test_case_4():
    config_0 = module_0.Config()
    none_type_0 = None
    config_0.update_config(none_type_0)


def test_case_5():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_6():
    str_0 = "b8"
    config_0 = module_0.Config(keep_alive=str_0, converters=str_0)


def test_case_7():
    bool_0 = False
    str_0 = "rZv>Era;=z:6'2eu)"
    config_0 = module_0.Config(keep_alive=bool_0)
    none_type_0 = None
    config_1 = module_0.Config(none_type_0, converters=none_type_0)
    none_type_1 = config_1.update(**config_1)
    none_type_2 = config_0.__setattr__(str_0, none_type_0)
    module_0.Config(env_prefix=config_0)


def test_case_8():
    str_0 = "Set-Cookie"
    config_0 = module_0.Config(keep_alive=str_0)
    config_0.update_config(str_0)


def test_case_9():
    str_0 = "LOCAL_CERT_CREATOR"
    bytes_0 = b"MI\x0e\xc9\xd0y\x15\x8f\x11"
    config_0 = module_0.Config()
    config_0.__setitem__(str_0, bytes_0)


def test_case_10():
    str_0 = "_converters"
    str_1 = "Idf)sZ RiL\\~U/~WtL"
    dict_0 = {str_0: str_0, str_0: str_1, str_1: str_0}
    config_0 = module_0.Config(dict_0)
    str_2 = "KEEP_ALIVE"
    module_1.load_module_from_file_location(str_2, str_2)


def test_case_11():
    config_0 = module_0.Config()
    set_0 = set()
    config_0.__getattr__(set_0)


def test_case_12():
    str_0 = "rZv>Vra;=@z:6\n\t2eu)"
    none_type_0 = None
    config_0 = module_0.Config(none_type_0, converters=none_type_0)
    module_0.Config(converters=str_0)


def test_case_13():
    str_0 = ""
    config_0 = module_0.Config(str_0, str_0, str_0, converters=str_0)
    config_0.load_environment_vars(str_0)
