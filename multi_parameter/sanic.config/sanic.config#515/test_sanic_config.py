# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import inspect as module_1


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    str_0 = "=+\x0cW u[Q.F7VHqt_"
    config_0 = module_0.Config(converters=str_0)


def test_case_2():
    str_0 = "%:$s`A6\r^L ]$i8j)*"
    float_0 = 6393.0
    var_0 = module_1.isclass(str_0)
    var_1 = module_1.isclass(float_0)
    config_0 = module_0.Config(env_prefix=str_0)


def test_case_3():
    none_type_0 = None
    str_0 = ""
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    none_type_1 = None
    config_0 = module_0.Config(dict_0, str_0, none_type_1)
    var_0 = module_1.getmembers(config_0)
    var_0.update_config(none_type_0)


def test_case_4():
    config_0 = module_0.Config()
    config_0.__getattr__(config_0)


def test_case_5():
    config_0 = module_0.Config()
    none_type_0 = None
    config_0.update_config(none_type_0)


def test_case_6():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_7():
    bytes_0 = b"Network Authentication Required"
    module_0.Config(bytes_0)


def test_case_8():
    config_0 = module_0.Config()
    config_0.__setitem__(config_0, config_0)


def test_case_9():
    dict_0 = {}
    config_0 = module_0.Config(keep_alive=dict_0)
    var_0 = config_0.load_environment_vars()
    none_type_0 = None
    var_1 = module_1.getmembers(none_type_0)
    var_1.__bool__()


def test_case_10():
    config_0 = module_0.Config()
    none_type_0 = config_0.register_type(config_0)
    str_0 = "*EH"
    config_0.update_config(str_0)


def test_case_11():
    config_0 = module_0.Config()
    none_type_0 = config_0.register_type(config_0)
    config_0.register_type(config_0)


def test_case_12():
    bool_0 = True
    config_0 = module_0.Config()
    none_type_0 = config_0.register_type(config_0)
    var_0 = config_0.update_config(config_0)
    str_0 = " B{_5\r1"
    str_1 = "_FALLBACK_ERROR_FORMAT"
    int_0 = 221
    dict_0 = {str_0: none_type_0, var_0: none_type_0, str_1: bool_0, var_0: int_0}
    module_0.Config(dict_0, converters=none_type_0)
