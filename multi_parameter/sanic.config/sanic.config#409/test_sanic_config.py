# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import inspect as module_1


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    set_0 = set()
    none_type_0 = None
    var_0 = module_1.getmembers(none_type_0, none_type_0)
    config_0 = module_0.Config(keep_alive=var_0, converters=var_0)
    config_0.update_config(set_0)


def test_case_2():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0)


def test_case_3():
    str_0 = 'AlAu:"'
    str_1 = "ng>pXWR\x0b"
    dict_0 = {str_1: str_1}
    none_type_0 = None
    config_0 = module_0.Config(dict_0, keep_alive=none_type_0)
    none_type_1 = config_0.register_type(str_0)


def test_case_4():
    bytes_0 = b"\x98u\t\xb5}?]O\x00\xc1\x81\xa5\x85"
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0)
    config_0.__getattr__(bytes_0)


def test_case_5():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0)
    config_0.update_config(none_type_0)


def test_case_6():
    str_0 = "59}tT&\\V"
    config_0 = module_0.Config(keep_alive=str_0)
    var_0 = config_0.load_environment_vars()
    str_1 = "'>\tY#a-lRi&VJ\t"
    config_0.update_config(str_1)


def test_case_7():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_8():
    str_0 = '"h'
    config_0 = module_0.Config(env_prefix=str_0, converters=str_0)
    var_0 = config_0.update_config(config_0)


def test_case_9():
    str_0 = "P"
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=str_0, keep_alive=none_type_0)
    config_0.update_config(none_type_0)


def test_case_10():
    dict_0 = {}
    config_0 = module_0.Config(dict_0)
    var_0 = module_1.isclass(dict_0)
    var_1 = config_0.update_config(config_0)
    none_type_0 = config_0.register_type(var_0)
    config_0.__getattr__(config_0)


def test_case_11():
    dict_0 = {}
    config_0 = module_0.Config(dict_0)
    var_0 = config_0.update_config(config_0)
    none_type_0 = config_0.register_type(var_0)
    str_0 = '"h'
    none_type_1 = config_0.__setattr__(str_0, config_0)
    config_1 = module_0.Config(env_prefix=str_0, converters=str_0)
    none_type_2 = config_0.update()
    none_type_3 = None
    config_0.register_type(none_type_3)


def test_case_12():
    str_0 = "P"
    module_0.Config(env_prefix=str_0, converters=str_0)


def test_case_13():
    dict_0 = {}
    config_0 = module_0.Config(dict_0)
    str_0 = "LOCAL_CERT_CREATOR"
    dict_1 = {}
    config_0.__setattr__(str_0, dict_1)


def test_case_14():
    dict_0 = {}
    config_0 = module_0.Config(dict_0)
    var_0 = config_0.update_config(config_0)
    config_1 = module_0.Config(keep_alive=dict_0)
    config_2 = module_0.Config(dict_0, var_0)
    str_0 = "_"
    config_3 = module_0.Config(env_prefix=str_0, converters=var_0)
    none_type_0 = config_0.update()
    none_type_1 = None
    none_type_2 = config_0.register_type(none_type_1)
    str_1 = "Dhyn"
    none_type_3 = config_0.__setattr__(str_1, none_type_1)
    config_0.update_config(none_type_0)
