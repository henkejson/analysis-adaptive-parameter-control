# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import inspect as module_1
import sanic.http.http1 as module_2


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    config_0 = module_0.Config()
    config_1 = module_0.Config(config_0, keep_alive=config_0, converters=config_0)
    none_type_0 = config_0.update()
    str_0 = "request_body"
    none_type_1 = config_0.__setattr__(str_0, none_type_0)
    var_0 = module_1.isdatadescriptor(config_1)
    module_2.Http(config_0)


def test_case_2():
    none_type_0 = None
    config_0 = module_0.Config(none_type_0, none_type_0, none_type_0)


def test_case_3():
    config_0 = module_0.Config()
    none_type_0 = config_0.update()
    config_0.__getattr__(config_0)


def test_case_4():
    none_type_0 = None
    config_0 = module_0.Config(keep_alive=none_type_0)
    config_0.update_config(none_type_0)


def test_case_5():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_6():
    str_0 = 'Attaches the view to a Sanic app or Blueprint at the specified URI.\n\n        Args:\n            cls: The class that this method is part of.\n            to (Union[Sanic, Blueprint]): The Sanic application or Blueprint to attach to.\n            uri (str): The URI to bind the view to.\n            methods (Iterable[str], optional): A collection of HTTP methods that the view should respond to. Defaults to `frozenset({"GET"})`.\n            host (Optional[str], optional): A specific host or hosts to bind the view to. Defaults to `None`.\n            strict_slashes (Optional[bool], optional): Enforce or not the trailing slash. Defaults to `None`.\n            version (Optional[int], optional): Version of the API if versioning is used. Defaults to `None`.\n            name (Optional[str], optional): Unique name for the route. Defaults to `None`.\n            stream (bool, optional): Enable or disable streaming for the view. Defaults to `False`.\n            version_prefix (str, optional): The prefix for the version, if versioning is used. Defaults to `"/v"`.\n        '
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=str_0, converters=none_type_0)
    none_type_1 = config_0.update(**config_0)


def test_case_7():
    none_type_0 = None
    config_0 = module_0.Config()
    config_0.__getattr__(none_type_0)


def test_case_8():
    str_0 = "request_body"
    module_0.Config(str_0, keep_alive=str_0)


def test_case_9():
    config_0 = module_0.Config()
    list_0 = [config_0]
    none_type_0 = config_0.update(*list_0, **config_0)
    str_0 = "ef\x0cpPaYJ<C[3W"
    none_type_1 = config_0.__setitem__(str_0, none_type_0)
    var_0 = config_0.update_config(config_0)
    config_0.update_config(list_0)


def test_case_10():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)
    none_type_0 = None
    config_1 = module_0.Config(config_0, keep_alive=config_0, converters=none_type_0)
    none_type_1 = config_0.register_type(var_0)
    config_0.register_type(none_type_0)


def test_case_11():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)
    none_type_0 = None
    config_1 = module_0.Config(config_0, keep_alive=config_0, converters=none_type_0)
    none_type_1 = config_0.register_type(none_type_0)
    bytes_0 = b"\xab9-\x96#\xb0"
    config_0.update_config(bytes_0)


def test_case_12():
    config_0 = module_0.Config()
    str_0 = ""
    config_0.load_environment_vars(str_0)
