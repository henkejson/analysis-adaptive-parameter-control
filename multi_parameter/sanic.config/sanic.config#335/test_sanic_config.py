# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import inspect as module_1


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    str_0 = "k"
    var_0 = module_1.isclass(str_0)
    dict_0 = {var_0: str_0, str_0: var_0}
    config_0 = module_0.Config(converters=dict_0)
    config_1 = module_0.Config()
    none_type_0 = config_0.__setitem__(str_0, config_1)
    float_0 = 0.0
    none_type_1 = config_1.__setattr__(str_0, float_0)
    config_0.update_config(none_type_1)


def test_case_2():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0, converters=none_type_0)
    bytes_0 = b"\x1f^r\xfd\x86\x96\x12'Ie\xa3\xfc\\\xfd\xa7\xb1s\x1a\xea"
    module_0.DescriptorMeta(bytes_0)


def test_case_3():
    config_0 = module_0.Config()
    none_type_0 = None
    config_0.__getattr__(none_type_0)


def test_case_4():
    config_0 = module_0.Config()
    none_type_0 = None
    none_type_1 = config_0.register_type(none_type_0)
    var_0 = config_0.update_config(config_0)


def test_case_5():
    config_0 = module_0.Config()
    str_0 = "Invalid signal event: %s"
    none_type_0 = config_0.__setitem__(str_0, config_0)
    none_type_1 = config_0.register_type(none_type_0)
    var_0 = config_0.update_config(config_0)
    var_0.register(config_0, var_0)


def test_case_6():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_7():
    str_0 = "k"
    tuple_0 = (str_0,)
    dict_0 = {tuple_0: str_0, str_0: tuple_0, str_0: str_0}
    config_0 = module_0.Config(converters=dict_0)
    none_type_0 = config_0.__setattr__(str_0, dict_0)
    var_0 = config_0.load_environment_vars()
    config_1 = module_0.Config(config_0, str_0, converters=var_0)
    var_1 = config_0.update_config(config_0)
    config_2 = module_0.Config()
    float_0 = 1288.196618
    none_type_1 = config_2.__setattr__(str_0, float_0)


def test_case_8():
    config_0 = module_0.Config()
    none_type_0 = None
    config_0.update_config(none_type_0)


def test_case_9():
    str_0 = "&W\x0cG^E1|XlY$0\nu1j@\t!"
    none_type_0 = None
    module_0.Config(none_type_0, keep_alive=none_type_0, converters=str_0)


def test_case_10():
    str_0 = "k"
    tuple_0 = (str_0,)
    dict_0 = {tuple_0: str_0, str_0: tuple_0, str_0: str_0}
    config_0 = module_0.Config(converters=dict_0)
    none_type_0 = config_0.__setattr__(str_0, dict_0)
    var_0 = config_0.update_config(config_0)
    config_1 = module_0.Config()
    config_1.__getattr__(config_0)


def test_case_11():
    str_0 = "k"
    tuple_0 = (str_0,)
    dict_0 = {tuple_0: str_0, str_0: tuple_0}
    config_0 = module_0.Config(converters=dict_0)
    config_1 = module_0.Config()
    config_1.update_config(str_0)


def test_case_12():
    str_0 = "k"
    var_0 = module_1.isclass(str_0)
    dict_0 = {var_0: str_0, str_0: var_0}
    config_0 = module_0.Config(converters=dict_0)
    config_1 = module_0.Config()
    none_type_0 = config_0.__setitem__(str_0, config_1)
    config_2 = module_0.Config(var_0, keep_alive=var_0)
    none_type_1 = config_1.__setattr__(str_0, none_type_0)
    config_0.update_config(none_type_1)


def test_case_13():
    str_0 = "G"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.Config(dict_0, str_0, converters=dict_0)


def test_case_14():
    str_0 = "_"
    tuple_0 = (str_0,)
    dict_0 = {tuple_0: str_0, str_0: tuple_0, str_0: str_0}
    config_0 = module_0.Config(converters=dict_0)
    var_0 = config_0.load_environment_vars()
    config_1 = module_0.Config(config_0, str_0, converters=var_0)
    var_1 = config_0.update_config(config_0)
    config_1.update_config(var_0)


def test_case_15():
    str_0 = "G"
    tuple_0 = (str_0,)
    dict_0 = {tuple_0: str_0, str_0: tuple_0, str_0: tuple_0, str_0: str_0}
    config_0 = module_0.Config(converters=dict_0)
    var_0 = config_0.load_environment_vars()
    config_1 = module_0.Config(config_0, str_0, converters=var_0)
    config_2 = module_0.Config()
    config_0.__getattr__(var_0)


def test_case_16():
    str_0 = "LOCAL_CERT_CREATOR"
    tuple_0 = (str_0,)
    dict_0 = {str_0: tuple_0, str_0: str_0}
    config_0 = module_0.Config(converters=dict_0)
    config_0.__setattr__(str_0, dict_0)
