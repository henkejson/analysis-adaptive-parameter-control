# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import inspect as module_1
import sanic.constants as module_2


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    str_0 = "bd}Qltiz/"
    config_0 = module_0.Config(env_prefix=str_0, converters=str_0)


def test_case_2():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0)


def test_case_3():
    str_0 = "The client accepts "
    bool_0 = False
    bool_1 = False
    dict_0 = {str_0: str_0, str_0: bool_0, str_0: bool_1}
    config_0 = module_0.Config(dict_0)


def test_case_4():
    str_0 = "bd}Qltiz/"
    config_0 = module_0.Config(env_prefix=str_0, converters=str_0)
    list_0 = module_1.isclass(str_0)
    config_0.__getattr__(list_0)


def test_case_5():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_6():
    str_0 = "tNJy+"
    config_0 = module_0.Config(env_prefix=str_0)


def test_case_7():
    str_0 = "bd}Qltiz/"
    config_0 = module_0.Config(env_prefix=str_0, converters=str_0)
    list_0 = []
    none_type_0 = config_0.update(*list_0)
    config_0.__getattr__(list_0)


def test_case_8():
    none_type_0 = None
    config_0 = module_0.Config(keep_alive=none_type_0)
    config_0.update_config(none_type_0)


def test_case_9():
    bool_0 = False
    config_0 = module_0.Config(keep_alive=bool_0)


def test_case_10():
    none_type_0 = None
    config_0 = module_0.Config(keep_alive=none_type_0)
    str_0 = "x#"
    none_type_1 = config_0.__setitem__(str_0, str_0)
    config_0.update_config(none_type_0)


def test_case_11():
    config_0 = module_0.Config()
    var_0 = module_2.LocalCertCreator.MKCERT
    config_0.update_config(var_0)


def test_case_12():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)
    none_type_0 = config_0.register_type(var_0)
    config_0.register_type(none_type_0)


def test_case_13():
    str_0 = "_"
    config_0 = module_0.Config(env_prefix=str_0)
    config_0.__getattr__(config_0)
