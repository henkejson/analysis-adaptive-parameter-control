# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import inspect as module_1
import sanic.http.http1 as module_2


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    str_0 = "\n?pkrZZ0faY"
    var_0 = module_1.isdatadescriptor(str_0)
    config_0 = module_0.Config(keep_alive=var_0)


def test_case_2():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0)
    config_0.load_environment_vars(none_type_0)


def test_case_3():
    int_0 = 1458
    dict_0 = {}
    config_0 = module_0.Config(dict_0)
    config_1 = module_0.Config()
    config_1.__getattr__(int_0)


def test_case_4():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)
    config_0.update_config(var_0)


def test_case_5():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_6():
    config_0 = module_0.Config()
    str_0 = '\n    **Status**: 401 Unauthorized\n\n    When present, additional keyword arguments may be used to complete\n    the WWW-Authentication header.\n\n    Args:\n        message (Optional[Union[str, bytes]], optional): The message to be sent to the client. If `None`\n            then the HTTP status \'Bad Request\' will be sent. Defaults to `None`.\n        scheme (Optional[str], optional): Name of the authentication scheme to be used. Defaults to `None`.\n        quiet (Optional[bool], optional): When `True`, the error traceback will be suppressed\n            from the logs. Defaults to `None`.\n        context (Optional[Dict[str, Any]], optional): Additional mapping of key/value data that will be\n            sent to the client upon exception. Defaults to `None`.\n        extra (Optional[Dict[str, Any]], optional): Additional mapping of key/value data that will NOT be\n            sent to the client when in PRODUCTION mode. Defaults to `None`.\n        headers (Optional[Dict[str, Any]], optional): Additional headers that should be sent with the HTTP\n            response. Defaults to `None`.\n        **challenges (Dict[str, Any]): Additional keyword arguments that will be used to complete the\n            WWW-Authentication header. Defaults to `None`.\n\n    Examples:\n        With a Basic auth-scheme, realm MUST be present:\n        ```python\n        raise Unauthorized(\n            "Auth required.",\n            scheme="Basic",\n            realm="Restricted Area"\n        )\n        ```\n\n        With a Digest auth-scheme, things are a bit more complicated:\n        ```python\n        raise Unauthorized(\n            "Auth required.",\n            scheme="Digest",\n            realm="Restricted Area",\n            qop="auth, auth-int",\n            algorithm="MD5",\n            nonce="abcdef",\n            opaque="zyxwvu"\n        )\n        ```\n\n        With a Bearer auth-scheme, realm is optional so you can write:\n        ```python\n        raise Unauthorized("Auth required.", scheme="Bearer")\n        ```\n\n        or, if you want to specify the realm:\n        ```python\n        raise Unauthorized(\n            "Auth required.",\n            scheme="Bearer",\n            realm="Restricted Area"\n        )\n        ```\n    '
    none_type_0 = config_0.__setitem__(str_0, str_0)
    var_0 = config_0.update_config(config_0)
    none_type_1 = config_0.register_type(config_0)
    config_0.update_config(none_type_1)


def test_case_7():
    int_0 = 1753
    module_0.Config(env_prefix=int_0)


def test_case_8():
    str_0 = ";[x\x0c"
    none_type_0 = None
    config_0 = module_0.Config(keep_alive=none_type_0, converters=str_0)
    module_2.Http(none_type_0)


def test_case_9():
    config_0 = module_0.Config()
    none_type_0 = config_0.register_type(config_0)
    config_0.update_config(none_type_0)


def test_case_10():
    int_0 = 1458
    dict_0 = module_1.isclass(int_0)
    config_0 = module_0.Config(dict_0)
    config_1 = module_0.Config()
    config_1.__getattr__(config_0)


def test_case_11():
    str_0 = "_FALLBACK_ERROR_FORMAT"
    str_1 = "c\x0c"
    str_2 = "6 "
    dict_0 = {str_0: str_0, str_1: str_0, str_2: str_0}
    module_0.Config(dict_0)


def test_case_12():
    config_0 = module_0.Config()
    none_type_0 = config_0.register_type(config_0)
    list_0 = []
    none_type_1 = config_0.update(*list_0, **config_0)
    config_0.register_type(config_0)


def test_case_13():
    config_0 = module_0.Config()
    str_0 = 'Cancel a named task.\n\n        This method is used to cancel a task by its name. Optionally, you can\n        provide a message that describes why the task was canceled, and control\n        whether an exception should be raised if the task is not found.\n\n        Args:\n            name (str): The name of the task to be canceled.\n            msg (Optional[str]): Optional message describing why the task was canceled. Defaults to None.\n            raise_exception (bool): If True, an exception will be raised if the task is not found. Defaults to True.\n\n        Example:\n            ```python\n            async def my_task():\n                try:\n                    await asyncio.sleep(10)\n                except asyncio.CancelledError as e:\n                    current_task = asyncio.current_task()\n                    print(f"Task {current_task.get_name()} was cancelled. {e}")\n                    # Task sleepy_task was cancelled. No more sleeping!\n\n\n            @app.before_server_start\n            async def before_start(app):\n                app.add_task(my_task, name="sleepy_task")\n                await asyncio.sleep(1)\n                await app.cancel_task("sleepy_task", msg="No more sleeping!")\n            ```\n        '
    config_0.update_config(str_0)


def test_case_14():
    config_0 = module_0.Config()
    str_0 = "LOCAL_CERT_CREATOR"
    config_0.__setitem__(str_0, config_0)
