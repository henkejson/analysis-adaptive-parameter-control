# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import inspect as module_1
import abc as module_2


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    str_0 = "SS^C\x0cb+Td!3Bo')"
    var_0 = module_1.isdatadescriptor(str_0)
    float_0 = 1.0
    module_0.Config(env_prefix=float_0, keep_alive=float_0)


def test_case_2():
    str_0 = ""
    config_0 = module_0.Config(env_prefix=str_0)


def test_case_3():
    str_0 = "WbQ5p ?[0OHO"
    str_1 = "_FALLBACK_ERROR_FORMAT"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_1: str_0}
    module_0.Config(dict_0, str_0)


def test_case_4():
    none_type_0 = None
    str_0 = ""
    config_0 = module_0.Config(env_prefix=str_0)
    config_0.__getattr__(none_type_0)


def test_case_5():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)
    config_0.update_config(var_0)


def test_case_6():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_7():
    config_0 = module_0.Config()
    str_0 = "J"
    none_type_0 = config_0.__setitem__(str_0, str_0)
    config_1 = module_0.Config()
    none_type_1 = config_1.__setitem__(str_0, none_type_0)
    none_type_2 = config_1.__setattr__(str_0, config_1)
    module_2.ABCMeta()


def test_case_8():
    str_0 = "\x0cW\x0b's.y ).4"
    config_0 = module_0.Config(env_prefix=str_0)


def test_case_9():
    none_type_0 = None
    config_0 = module_0.Config(keep_alive=none_type_0, converters=none_type_0)
    var_0 = config_0.load_environment_vars()
    config_0.__getattr__(config_0)


def test_case_10():
    none_type_0 = None
    str_0 = ""
    config_0 = module_0.Config(env_prefix=str_0)
    none_type_1 = config_0.register_type(str_0)
    config_0.__getattr__(none_type_0)


def test_case_11():
    none_type_0 = None
    config_0 = module_0.Config(keep_alive=none_type_0, converters=none_type_0)
    none_type_1 = config_0.register_type(none_type_0)
    str_0 = "websocket_ping_interval"
    config_0.update_config(str_0)


def test_case_12():
    none_type_0 = None
    config_0 = module_0.Config(keep_alive=none_type_0)
    var_0 = config_0.update_config(config_0)
    none_type_1 = config_0.register_type(var_0)
    config_0.register_type(none_type_1)


def test_case_13():
    none_type_0 = None
    config_0 = module_0.Config(keep_alive=none_type_0, converters=none_type_0)
    var_0 = config_0.update_config(config_0)
    config_1 = module_0.Config(converters=config_0)
    config_0.update_config(var_0)
