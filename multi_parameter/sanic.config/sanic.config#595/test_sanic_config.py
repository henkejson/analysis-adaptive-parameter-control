# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import sanic.helpers as module_1
import inspect as module_2


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    str_0 = "^cM_v\\/?P}k z^"
    module_0.Config(converters=str_0)


def test_case_2():
    bool_0 = True
    config_0 = module_0.Config(keep_alive=bool_0)


def test_case_3():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0)


def test_case_4():
    bool_0 = True
    module_0.Config(bool_0)


def test_case_5():
    bool_0 = False
    config_0 = module_0.Config(bool_0)
    none_type_0 = config_0.update(**config_0)
    none_type_1 = config_0.register_type(bool_0)


def test_case_6():
    bool_0 = False
    config_0 = module_0.Config(converters=bool_0)
    str_0 = "P"
    var_0 = config_0.load_environment_vars(str_0)


def test_case_7():
    none_type_0 = None
    default_0 = module_1.Default()
    module_0.Config(none_type_0, default_0)


def test_case_8():
    config_0 = module_0.Config()
    none_type_0 = config_0.update(**config_0)


def test_case_9():
    bool_0 = False
    config_0 = module_0.Config(bool_0)
    str_0 = "_converters"
    config_0.update_config(str_0)


def test_case_10():
    str_0 = "_]n\t\nA`\x0c*"
    none_type_0 = None
    config_0 = module_0.Config(keep_alive=str_0)
    str_1 = "LOCAL_CERT_CREATOR"
    config_0.__setattr__(str_1, none_type_0)


def test_case_11():
    dict_0 = {}
    config_0 = module_0.Config(dict_0, dict_0, dict_0)
    config_1 = module_0.Config(dict_0, keep_alive=config_0)
    str_0 = "\x0bS_"
    none_type_0 = config_1.__setattr__(str_0, str_0)
    config_0.__getattr__(config_1)


def test_case_12():
    bool_0 = False
    config_0 = module_0.Config(converters=bool_0)
    str_0 = "P"
    var_0 = config_0.load_environment_vars(str_0)
    config_0.init_for_request()


def test_case_13():
    bool_0 = True
    config_0 = module_0.Config(keep_alive=bool_0)
    config_0.update_config(bool_0)


def test_case_14():
    config_0 = module_0.Config()
    none_type_0 = config_0.update_config(config_0)


def test_case_15():
    bool_0 = False
    str_0 = "INSPECTOR_TLS_CERT"
    str_1 = 'Decorator for registering a listener for the reload_process_start event.\n\n        This event is fired only on the reload process and **NOT** on any\n        worker processes. This is similar to the main_process_start event,\n        except that it is fired only when the reload process is started.\n\n        See [Listeners](/en/guide/basics/listeners) for more details.\n\n        Args:\n            listener (ListenerType[Sanic]): The listener handler to attach.\n\n        Examples:\n            ```python\n            @app.reload_process_start\n            async def on_reload_process_start(app: Sanic):\n                print("Reload process started")\n            ```\n        '
    dict_0 = {str_0: bool_0, str_0: str_0, str_1: str_1}
    config_0 = module_0.Config(dict_0, converters=dict_0)
    var_0 = config_0.update_config(dict_0)
    var_0.load_environment_vars()


def test_case_16():
    str_0 = "MOTD_DISPLAY"
    config_0 = module_0.Config(env_prefix=str_0, keep_alive=str_0)
    bool_0 = False
    config_1 = module_0.Config(converters=bool_0)
    str_1 = 'U%=5B!;*126"'
    none_type_0 = config_1.register_type(str_1)
    var_0 = module_2.isclass(bool_0)
    str_2 = "P"
    config_1.load_environment_vars(str_2)


def test_case_17():
    bool_0 = False
    config_0 = module_0.Config(converters=bool_0)
    var_0 = config_0.update_config(config_0)
    str_0 = "_"
    str_1 = "NOISY_E%CEPTIONS"
    none_type_0 = config_0.register_type(str_1)
    var_1 = config_0.load_environment_vars(str_0)
    config_0.update_config(bool_0)
