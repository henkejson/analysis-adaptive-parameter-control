# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import inspect as module_1


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    none_type_0 = None
    var_0 = module_1.getmembers(none_type_0)
    config_0 = module_0.Config(converters=var_0)
    bool_0 = False
    var_1 = module_1.isclass(bool_0)
    var_1.__new__(bool_0, bool_0, bool_0, bool_0)


def test_case_2():
    str_0 = ""
    str_1 = "_FALLBACK_ERROR_FORMAT"
    dict_0 = {str_0: str_0, str_1: str_1}
    bool_0 = False
    module_0.Config(dict_0, keep_alive=bool_0)


def test_case_3():
    str_0 = "{"
    config_0 = module_0.Config(env_prefix=str_0)


def test_case_4():
    config_0 = module_0.Config()
    str_0 = "S"
    config_1 = module_0.Config(config_0, str_0)


def test_case_5():
    str_0 = " :Q\r$Zml"
    str_1 = "vL"
    none_type_0 = None
    str_2 = "8vRa<"
    dict_0 = {str_1: none_type_0, str_2: str_2, str_2: none_type_0, str_2: none_type_0}
    config_0 = module_0.Config(dict_0, none_type_0, none_type_0)
    config_0.__getattr__(str_0)


def test_case_6():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_7():
    dict_0 = {}
    str_0 = "(,2pf-?I4Z]bFxuB "
    config_0 = module_0.Config()
    none_type_0 = config_0.__setattr__(str_0, dict_0)
    config_1 = module_0.Config(converters=dict_0)
    config_2 = module_0.Config()
    var_0 = config_1.load_environment_vars()
    var_1 = config_1.load_environment_vars()
    none_type_1 = config_1.register_type(var_1)


def test_case_8():
    config_0 = module_0.Config()
    str_0 = "V}}R"
    none_type_0 = None
    none_type_1 = config_0.__setitem__(str_0, none_type_0)
    config_1 = module_0.Config(env_prefix=str_0)
    config_2 = module_0.Config(none_type_0, none_type_0)
    config_2.update_config(none_type_1)


def test_case_9():
    dict_0 = {}
    str_0 = "(,2pf-?I4Z]bFxuB "
    config_0 = module_0.Config()
    none_type_0 = config_0.__setattr__(str_0, dict_0)
    config_1 = module_0.Config(converters=dict_0)
    config_1.__getattr__(dict_0)


def test_case_10():
    config_0 = module_0.Config()
    bool_0 = True
    config_0.update_config(bool_0)


def test_case_11():
    str_0 = "s>w&b]O{U2.}&UZ/"
    config_0 = module_0.Config()
    none_type_0 = config_0.__setattr__(str_0, str_0)
    module_0.Config(env_prefix=str_0, converters=str_0)


def test_case_12():
    config_0 = module_0.Config()
    str_0 = "S"
    config_1 = module_0.Config(config_0, str_0)
    config_1.update_config(str_0)


def test_case_13():
    config_0 = module_0.Config()
    none_type_0 = None
    str_0 = "LOCAL_CERT_CREATOR"
    config_0.__setitem__(str_0, none_type_0)


def test_case_14():
    str_0 = "dTe9m*"
    bool_0 = True
    dict_0 = {str_0: str_0, str_0: str_0, str_0: bool_0}
    bool_1 = False
    config_0 = module_0.Config(dict_0, str_0, converters=bool_1)
    config_1 = module_0.Config()
    str_1 = "V_"
    none_type_0 = None
    list_0 = [config_1]
    none_type_1 = config_1.update(*list_0)
    none_type_2 = config_1.__setitem__(str_1, none_type_0)
    config_2 = module_0.Config()
    var_0 = config_1.update_config(config_2)
    str_2 = "S"
    none_type_3 = config_2.__setattr__(str_2, str_2)
    none_type_4 = config_2.register_type(var_0)
    config_2.load_environment_vars(str_2)
