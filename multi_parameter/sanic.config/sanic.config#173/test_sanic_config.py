# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import sanic.constants as module_1
import inspect as module_2


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    bool_0 = False
    config_0 = module_0.Config(env_prefix=bool_0, keep_alive=bool_0)
    none_type_0 = None
    config_1 = module_0.Config(keep_alive=none_type_0, converters=none_type_0)
    none_type_1 = config_1.register_type(bool_0)
    config_1.__getattr__(bool_0)


def test_case_2():
    bool_0 = False
    config_0 = module_0.Config(env_prefix=bool_0)


def test_case_3():
    config_0 = module_0.Config()
    config_1 = module_0.Config()
    none_type_0 = None
    config_2 = module_0.Config(
        env_prefix=none_type_0, keep_alive=none_type_0, converters=none_type_0
    )
    none_type_1 = None
    local_cert_creator_0 = module_1.LocalCertCreator.MKCERT
    config_3 = module_0.Config(config_0, local_cert_creator_0, none_type_1)
    none_type_2 = config_3.register_type(none_type_1)
    config_0.__getattr__(local_cert_creator_0)


def test_case_4():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0)
    config_1 = module_0.Config(keep_alive=none_type_0)
    none_type_1 = config_0.register_type(none_type_0)
    config_1.__getattr__(config_0)


def test_case_5():
    none_type_0 = None
    config_0 = module_0.Config(keep_alive=none_type_0, converters=none_type_0)
    config_0.update_config(none_type_0)


def test_case_6():
    dict_0 = {}
    config_0 = module_0.Config()
    var_0 = config_0.update_config(dict_0)


def test_case_7():
    bool_0 = False
    none_type_0 = None
    config_0 = module_0.Config(keep_alive=none_type_0, converters=none_type_0)
    none_type_1 = config_0.register_type(bool_0)


def test_case_8():
    config_0 = module_0.Config()
    str_0 = "9b'Q<!"
    none_type_0 = config_0.__setitem__(str_0, config_0)
    none_type_1 = config_0.update()
    var_0 = config_0.update_config(config_0)


def test_case_9():
    bool_0 = False
    none_type_0 = None
    config_0 = module_0.Config(keep_alive=none_type_0, converters=none_type_0)
    none_type_1 = config_0.register_type(bool_0)
    config_0.__getattr__(bool_0)


def test_case_10():
    config_0 = module_0.Config()
    none_type_0 = config_0.update(**config_0)


def test_case_11():
    bool_0 = False
    config_0 = module_0.Config(env_prefix=bool_0)
    var_0 = config_0.update_config(config_0)


def test_case_12():
    bool_0 = False
    str_0 = "AUTO_RELOAD"
    config_0 = module_0.Config(bool_0, str_0)
    var_0 = config_0.load_environment_vars()
    var_1 = var_0.__repr__()
    var_0.__setitem__(var_1, var_0)


def test_case_13():
    bool_0 = False
    config_0 = module_0.Config(env_prefix=bool_0, keep_alive=bool_0)
    config_1 = module_0.Config(keep_alive=config_0, converters=config_0)
    none_type_0 = config_1.register_type(bool_0)
    config_2 = module_0.Config()
    none_type_0.update()


def test_case_14():
    bool_0 = False
    none_type_0 = None
    config_0 = module_0.Config(keep_alive=none_type_0, converters=none_type_0)
    none_type_1 = config_0.register_type(bool_0)
    str_0 = "WEBSOCKET_PING_INTERVAL"
    none_type_2 = config_0.register_type(none_type_0)
    config_0.update_config(str_0)


def test_case_15():
    bytes_0 = b"Already Reported"
    var_0 = module_2.isclass(bytes_0)
    module_0.Config(var_0, keep_alive=var_0, converters=bytes_0)


def test_case_16():
    str_0 = "P"
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=str_0, converters=none_type_0)


def test_case_17():
    bool_0 = False
    str_0 = "FORWARDED_FOR_HEADER"
    str_1 = "LOCAL_CERT_CREATOR"
    dict_0 = {str_0: bool_0, str_0: str_0, str_1: str_1, str_0: str_0}
    dict_1 = {}
    none_type_0 = None
    config_0 = module_0.Config(dict_1, converters=none_type_0)
    config_0.update(**dict_0)


def test_case_18():
    bool_0 = False
    config_0 = module_0.Config(keep_alive=bool_0)
    config_1 = module_0.Config(config_0, bool_0)
    config_2 = module_0.Config(env_prefix=bool_0, converters=config_1)
    bytes_0 = b"\xfb\xa9#H\x0c\xd6z\xb4\x15W\xb6\xe1\xc0\x18\xc5\xceX\xe5"
    none_type_0 = config_0.register_type(bytes_0)
    var_0 = config_1.update_config(config_1)
    str_0 = "_FALLBACK_ERROR_FORMAT"
    int_0 = 357
    dict_0 = {var_0: var_0, str_0: int_0}
    module_0.Config(dict_0, converters=none_type_0)


def test_case_19():
    str_0 = "P"
    module_0.Config(env_prefix=str_0, keep_alive=str_0, converters=str_0)
