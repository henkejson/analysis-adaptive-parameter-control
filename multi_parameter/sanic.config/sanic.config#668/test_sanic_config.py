# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import inspect as module_1


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    bool_0 = False
    config_0 = module_0.Config(keep_alive=bool_0)
    var_0 = config_0.update_config(config_0)
    config_0.update_config(var_0)


def test_case_2():
    none_type_0 = None
    config_0 = module_0.Config(none_type_0, none_type_0)


def test_case_3():
    none_type_0 = None
    config_0 = module_0.Config(
        none_type_0, keep_alive=none_type_0, converters=none_type_0
    )
    config_0.__getattr__(none_type_0)


def test_case_4():
    config_0 = module_0.Config()
    none_type_0 = None
    var_0 = module_1.isclass(none_type_0)
    none_type_1 = config_0.register_type(var_0)
    var_1 = module_1.isclass(none_type_1)
    config_0.update_config(var_1)


def test_case_5():
    config_0 = module_0.Config()
    none_type_0 = config_0.update(**config_0)


def test_case_6():
    none_type_0 = None
    bool_0 = False
    config_0 = module_0.Config(keep_alive=bool_0)
    str_0 = "SANIC_WORKER_PROCESS"
    none_type_1 = config_0.__setattr__(str_0, config_0)
    none_type_2 = config_0.register_type(none_type_0)
    bool_1 = True
    config_1 = module_0.Config(keep_alive=config_0)
    none_type_3 = config_0.__setitem__(str_0, bool_0)
    module_0.Config(bool_1, bool_1)


def test_case_7():
    str_0 = "responded"
    config_0 = module_0.Config()
    str_1 = "@6vX\rFVW0UJ*oKhs'G5"
    none_type_0 = config_0.__setitem__(str_1, str_0)
    float_0 = -1619.135
    none_type_1 = None
    var_0 = module_1.isclass(none_type_1)
    none_type_2 = config_0.register_type(var_0)
    var_0.__new__(none_type_1, none_type_2, var_0, float_0)


def test_case_8():
    none_type_0 = None
    bool_0 = False
    config_0 = module_0.Config(keep_alive=bool_0)
    none_type_1 = config_0.register_type(none_type_0)
    str_0 = config_0.__str__()
    var_0 = config_0.load_environment_vars()
    str_1 = ";!!f\x0c,"
    none_type_2 = config_0.__setattr__(str_1, str_1)
    var_1 = config_0.update_config(config_0)
    config_1 = module_0.Config(converters=config_0)
    none_type_3 = None
    config_0.update_config(none_type_3)


def test_case_9():
    bool_0 = False
    config_0 = module_0.Config(keep_alive=bool_0)
    str_0 = "SANIC_WORKER_PROCESS"
    none_type_0 = config_0.__setattr__(str_0, config_0)
    config_0.__getattr__(config_0)


def test_case_10():
    config_0 = module_0.Config()
    none_type_0 = None
    config_0.update_config(none_type_0)


def test_case_11():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_12():
    config_0 = module_0.Config()
    bytes_0 = b"\x87\x95h\x82*\xdbD"
    config_0.update_config(bytes_0)


def test_case_13():
    int_0 = 1272
    module_0.Config(env_prefix=int_0)


def test_case_14():
    none_type_0 = None
    bool_0 = False
    config_0 = module_0.Config(keep_alive=bool_0)
    str_0 = "SANIC_WORKER_PROCESS"
    none_type_1 = config_0.__setattr__(str_0, config_0)
    none_type_2 = config_0.register_type(none_type_1)
    config_0.register_type(none_type_0)


def test_case_15():
    none_type_0 = None
    bool_0 = False
    config_0 = module_0.Config(keep_alive=bool_0)
    str_0 = "SANIC_WORKER_PROCESS"
    none_type_1 = config_0.__setattr__(str_0, config_0)
    none_type_2 = None
    none_type_3 = config_0.register_type(none_type_2)
    str_1 = none_type_0.__str__()
    var_0 = config_0.load_environment_vars()
    str_2 = "LOCAL_CERT_CREATOR"
    config_0.__setattr__(str_2, str_2)


def test_case_16():
    str_0 = "P"
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=str_0, converters=none_type_0)
    bytes_0 = b"}Y7\xe9k\xd2\xc3t\xd186\x95"
    bytes_0.__new__(config_0, str_0, bytes_0, none_type_0)
