# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import inspect as module_1


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    str_0 = "c-6Y7j(,&"
    tuple_0 = module_1.isdatadescriptor(str_0)
    none_type_0 = None
    config_0 = module_0.Config(keep_alive=none_type_0, converters=str_0)
    config_0.update_config(tuple_0)


def test_case_2():
    bool_0 = False
    config_0 = module_0.Config(keep_alive=bool_0)


def test_case_3():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0)


def test_case_4():
    str_0 = "c-67j(,&"
    bool_0 = False
    config_0 = module_0.Config(keep_alive=bool_0)
    list_0 = [config_0, config_0, str_0]
    none_type_0 = config_0.register_type(list_0)
    config_0.__getattr__(bool_0)


def test_case_5():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0)
    config_0.update_config(none_type_0)


def test_case_6():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_7():
    bytes_0 = b"Network Authentication Required"
    var_0 = module_1.getmembers(bytes_0)
    module_0.Config(converters=bytes_0)


def test_case_8():
    str_0 = "c-67j(,&"
    bool_0 = False
    config_0 = module_0.Config(keep_alive=bool_0)
    list_0 = [config_0, config_0, str_0]
    none_type_0 = config_0.register_type(list_0)


def test_case_9():
    none_type_0 = None
    var_0 = module_1.isclass(none_type_0)
    str_0 = "0W'}\t-'AV[0\\j^GR"
    config_0 = module_0.Config(env_prefix=str_0)
    config_0.update_config(var_0)


def test_case_10():
    config_0 = module_0.Config()
    config_0.__getattr__(config_0)


def test_case_11():
    str_0 = "c-=Yj(,&"
    tuple_0 = ()
    bool_0 = True
    config_0 = module_0.Config(keep_alive=bool_0)
    none_type_0 = config_0.register_type(tuple_0)
    config_0.update_config(str_0)


def test_case_12():
    tuple_0 = ()
    config_0 = module_0.Config()
    config_1 = module_0.Config(config_0)
    var_0 = config_0.update_config(config_0)
    config_1.__setattr__(var_0, tuple_0)


def test_case_13():
    str_0 = "c-67j(,&"
    bool_0 = False
    config_0 = module_0.Config(keep_alive=bool_0)
    list_0 = [config_0, config_0, str_0]
    none_type_0 = config_0.register_type(list_0)
    none_type_1 = config_0.__setitem__(str_0, config_0)


def test_case_14():
    str_0 = "c-67j(,&"
    bool_0 = False
    config_0 = module_0.Config(keep_alive=bool_0)
    var_0 = config_0.update_config(config_0)
    str_1 = "_FALLBACK_ERROR_FORMAT"
    dict_0 = {str_0: str_0, str_1: str_0, str_1: str_1}
    module_0.Config(dict_0, var_0, bool_0, converters=str_0)


def test_case_15():
    str_0 = ""
    config_0 = module_0.Config(keep_alive=str_0)
    config_0.load_environment_vars(str_0)
