# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import inspect as module_1
import sanic.utils as module_2


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    config_0 = module_0.Config()
    bool_0 = False
    set_0 = {bool_0, bool_0}
    config_1 = module_0.Config(converters=set_0)


def test_case_2():
    float_0 = 0.0
    list_0 = [float_0]
    var_0 = module_1.isdatadescriptor(list_0)
    var_1 = var_0.__bool__()
    config_0 = module_0.Config(env_prefix=var_1, keep_alive=float_0)
    config_1 = module_0.Config()
    module_2.load_module_from_file_location(list_0, **config_0)


def test_case_3():
    bytes_0 = b"Not Acceptable"
    module_0.Config(env_prefix=bytes_0)


def test_case_4():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    tuple_0 = (bool_0, dict_0)
    module_0.Config(tuple_0, keep_alive=bool_0)


def test_case_5():
    none_type_0 = None
    set_0 = set()
    config_0 = module_0.Config(set_0, converters=set_0)
    config_0.__getattr__(none_type_0)


def test_case_6():
    config_0 = module_0.Config()
    bool_0 = False
    set_0 = {bool_0, bool_0}
    config_1 = module_0.Config(converters=set_0)
    config_0.__getattr__(set_0)


def test_case_7():
    none_type_0 = None
    config_0 = module_0.Config()
    config_0.update_config(none_type_0)


def test_case_8():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_9():
    config_0 = module_0.Config()
    bool_0 = True
    str_0 = "Qal'ym)MEe\nx9PPZ"
    none_type_0 = config_0.__setitem__(str_0, str_0)
    set_0 = {bool_0, bool_0}
    config_1 = module_0.Config(converters=set_0)


def test_case_10():
    config_0 = module_0.Config()
    none_type_0 = config_0.register_type(config_0)
    none_type_1 = config_0.update(**config_0)
    config_0.register_type(config_0)


def test_case_11():
    config_0 = module_0.Config()
    none_type_0 = config_0.update(**config_0)
    none_type_1 = config_0.register_type(config_0)
    bytes_0 = b"\x1ed\xfbvD\x82\xa3x\x8e\x06\xb6O\x93\xb4@\xed"
    config_0.update_config(bytes_0)


def test_case_12():
    str_0 = "LOCAL_CERT_CREATOR"
    str_1 = "cHC3]=YQ"
    dict_0 = {str_0: str_0, str_1: str_0}
    none_type_0 = None
    config_0 = module_0.Config(dict_0, keep_alive=none_type_0, converters=dict_0)
    config_0.update_config(dict_0)
