# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import inspect as module_1


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    int_0 = -1273
    set_0 = {int_0, int_0, int_0}
    config_0 = module_0.Config(keep_alive=set_0)
    var_0 = config_0.update_config(config_0)
    tuple_0 = ()
    var_1 = module_1.getmembers(tuple_0, tuple_0)
    var_1.__bool__()


def test_case_2():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0)


def test_case_3():
    bool_0 = True
    module_0.Config(bool_0, bool_0)


def test_case_4():
    float_0 = 805.0365652379492
    config_0 = module_0.Config()
    var_0 = config_0.load_environment_vars()
    config_0.__getattr__(float_0)


def test_case_5():
    config_0 = module_0.Config()
    config_0.__getattr__(config_0)


def test_case_6():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_7():
    float_0 = 805.0365652379492
    config_0 = module_0.Config()
    config_0.update_config(float_0)


def test_case_8():
    bool_0 = False
    str_0 = 'u-".&H6\n`YJr8M" vE'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: bool_0}
    config_0 = module_0.Config(dict_0, keep_alive=bool_0)
    none_type_0 = None
    none_type_1 = config_0.register_type(none_type_0)
    list_0 = [bool_0, bool_0, bool_0]
    var_0 = config_0.update_config(dict_0)
    var_1 = module_1.isdatadescriptor(bool_0)
    var_2 = list_0.__repr__()
    var_2.__getattr__(list_0)


def test_case_9():
    config_0 = module_0.Config()
    str_0 = '*M5="t2nK%up3:T1'
    var_0 = config_0.load_environment_vars()
    var_1 = module_1.isclass(config_0)
    none_type_0 = config_0.__setitem__(str_0, str_0)
    none_type_1 = config_0.update(**config_0)
    config_0.update_config(none_type_1)


def test_case_10():
    config_0 = module_0.Config()
    str_0 = '*M5="t2nK%up3:T1'
    none_type_0 = config_0.update()
    none_type_1 = config_0.__setitem__(str_0, str_0)
    bool_0 = True
    none_type_2 = config_0.register_type(bool_0)
    config_0.update_config(str_0)


def test_case_11():
    bool_0 = True
    module_0.Config(keep_alive=bool_0, converters=bool_0)


def test_case_12():
    int_0 = -1311
    module_0.Config(env_prefix=int_0)


def test_case_13():
    config_0 = module_0.Config()
    str_0 = '*M5="t2nK%up3:T1'
    none_type_0 = config_0.update()
    none_type_1 = config_0.__setitem__(str_0, str_0)
    bool_0 = True
    none_type_2 = config_0.register_type(bool_0)
    config_0.register_type(bool_0)


def test_case_14():
    none_type_0 = None
    none_type_1 = None
    config_0 = module_0.Config(keep_alive=none_type_1)
    none_type_2 = config_0.register_type(none_type_0)
    config_1 = module_0.Config()
    str_0 = '*M5="t2nK%up3:T1'
    none_type_3 = config_1.update()
    var_0 = config_0.load_environment_vars()
    none_type_4 = config_1.__setitem__(str_0, str_0)
    none_type_5 = config_1.update(**config_1)
    none_type_6 = None
    config_2 = module_0.Config(none_type_5, keep_alive=none_type_1, converters=str_0)
    config_3 = module_0.Config(env_prefix=none_type_0, converters=none_type_5)
    var_1 = module_1.isclass(none_type_2)
    var_1.__new__(none_type_3, none_type_6, config_1, none_type_2, **config_2)


def test_case_15():
    none_type_0 = None
    config_0 = module_0.Config(keep_alive=none_type_0)
    none_type_1 = config_0.register_type(none_type_0)
    str_0 = "LOCAL_CERT_CREATOR"
    none_type_2 = config_0.update()
    config_0.__setitem__(str_0, str_0)
