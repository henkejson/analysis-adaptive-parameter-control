# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import inspect as module_1


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0, converters=none_type_0)


def test_case_2():
    config_0 = module_0.Config()
    none_type_0 = config_0.register_type(config_0)
    var_0 = config_0.update_config(config_0)
    config_1 = module_0.Config(config_0, keep_alive=none_type_0, converters=config_0)
    none_type_1 = config_0.register_type(config_1)
    none_type_2 = config_1.update()
    none_type_3 = config_0.register_type(var_0)
    module_0.Config(env_prefix=config_0)


def test_case_3():
    config_0 = module_0.Config()
    str_0 = "Retrieve a URL for a given view name.\n\n        Same as `sanic.Sanic.url_for`, but automatically determine `scheme`\n        and `netloc` base on the request. Since this method is aiming\n        to generate correct schema & netloc, `_external` is implied.\n\n        Args:\n            view_name (str): The view name to generate URL for.\n            **kwargs: Arbitrary keyword arguments to build URL query string.\n\n        Returns:\n            str: The generated URL.\n        "
    config_0.__getattr__(str_0)


def test_case_4():
    str_0 = '"^P07w]R Vsv\x0b'
    list_0 = []
    config_0 = module_0.Config(env_prefix=str_0)
    var_0 = config_0.load_environment_vars()
    var_1 = module_1.isdatadescriptor(list_0)
    config_1 = module_0.Config(env_prefix=var_0)
    var_1.__setattr__(str_0, str_0)


def test_case_5():
    str_0 = "E\\UE;!Bcb"
    var_0 = module_1.isdatadescriptor(str_0)
    config_0 = module_0.Config(keep_alive=var_0, converters=var_0)
    var_1 = var_0.__repr__()
    var_1.__subclasscheck__(str_0, str_0)


def test_case_6():
    config_0 = module_0.Config()
    none_type_0 = config_0.update_config(config_0)


def test_case_7():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0, converters=none_type_0)
    config_0.update_config(none_type_0)


def test_case_8():
    config_0 = module_0.Config()
    config_0.__getattr__(config_0)


def test_case_9():
    config_0 = module_0.Config()
    str_0 = "4o"
    none_type_0 = config_0.__setitem__(str_0, str_0)
    none_type_1 = config_0.register_type(config_0)
    var_0 = config_0.update_config(config_0)
    var_1 = config_0.load_environment_vars()
    var_2 = module_1.isclass(var_0)


def test_case_10():
    config_0 = module_0.Config()
    none_type_0 = config_0.register_type(config_0)
    config_0.update_config(none_type_0)


def test_case_11():
    int_0 = -252
    list_0 = [int_0, int_0, int_0]
    module_0.Config(converters=list_0)


def test_case_12():
    config_0 = module_0.Config()
    str_0 = "4o"
    none_type_0 = config_0.__setitem__(str_0, str_0)
    none_type_1 = config_0.register_type(config_0)
    var_0 = config_0.update_config(config_0)
    var_1 = config_0.load_environment_vars()
    config_0.update_config(str_0)


def test_case_13():
    config_0 = module_0.Config()
    str_0 = "&mrk"
    none_type_0 = None
    none_type_1 = config_0.__setitem__(str_0, none_type_0)
    str_1 = "LOCAL_CERT_CREATOR"
    config_0.__setattr__(str_1, none_type_0)


def test_case_14():
    config_0 = module_0.Config()
    str_0 = "S"
    none_type_0 = config_0.__setitem__(str_0, str_0)
    none_type_1 = config_0.register_type(config_0)
    var_0 = module_0.Config(none_type_1, str_0, none_type_0)
    var_1 = config_0.load_environment_vars()
    var_2 = config_0.update_config(var_0)
    var_1.log_response()
