# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import inspect as module_1
import sanic.http.stream as module_2


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    none_type_0 = None
    float_0 = -1458.83
    var_0 = module_1.isclass(float_0)
    config_0 = module_0.Config(var_0, keep_alive=var_0)
    config_0.load_environment_vars(none_type_0)


def test_case_2():
    str_0 = "L"
    config_0 = module_0.Config(env_prefix=str_0)


def test_case_3():
    bytes_0 = b"\xcf\xce\xc0\xaf\xe5\xbfw\xec\x9c\xa7\xf5"
    module_0.Config(bytes_0, bytes_0)


def test_case_4():
    str_0 = "L"
    none_type_0 = None
    var_0 = module_1.isclass(none_type_0)
    config_0 = module_0.Config(
        env_prefix=str_0, keep_alive=none_type_0, converters=var_0
    )
    var_1 = config_0.load_environment_vars()
    none_type_1 = config_0.register_type(var_0)
    var_2 = config_0.update_config(config_0)
    config_0.__getattr__(none_type_1)


def test_case_5():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_6():
    int_0 = 0
    none_type_0 = None
    config_0 = module_0.Config(int_0, none_type_0, none_type_0, converters=none_type_0)


def test_case_7():
    config_0 = module_0.Config()
    int_0 = 680
    config_0.update_config(int_0)


def test_case_8():
    str_0 = "L"
    none_type_0 = None
    var_0 = module_1.isclass(none_type_0)
    config_0 = module_0.Config(
        env_prefix=str_0, keep_alive=none_type_0, converters=var_0
    )
    config_1 = module_0.Config()
    none_type_1 = config_1.register_type(var_0)
    var_1 = config_1.update_config(config_0)
    config_0.__getattr__(config_0)


def test_case_9():
    config_0 = module_0.Config()
    int_0 = 680
    none_type_0 = config_0.register_type(int_0)
    var_0 = config_0.update_config(config_0)


def test_case_10():
    str_0 = "LQX<E cpl0^N~7D=FjuF"
    config_0 = module_0.Config()
    str_1 = "AUTO_EXTEND"
    none_type_0 = config_0.__setattr__(str_0, config_0)
    config_0.update_config(str_1)


def test_case_11():
    str_0 = "L"
    none_type_0 = None
    module_0.Config(env_prefix=str_0, keep_alive=none_type_0, converters=str_0)


def test_case_12():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    module_0.Config(bool_0, converters=tuple_0)


def test_case_13():
    str_0 = "_FALLBACK_ERROR_FORMAT"
    dict_0 = {str_0: str_0}
    module_0.Config(dict_0)


def test_case_14():
    none_type_0 = None
    var_0 = module_1.isclass(none_type_0)
    str_0 = "_"
    config_0 = module_0.Config(env_prefix=str_0)
    config_1 = module_0.Config()
    config_2 = module_0.Config(converters=var_0)
    none_type_1 = config_2.register_type(var_0)
    stream_0 = module_2.Stream()
    config_2.update_config(stream_0)
