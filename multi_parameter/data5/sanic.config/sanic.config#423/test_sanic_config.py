# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import inspect as module_1


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    str_0 = "I\t@$rzQcu"
    config_0 = module_0.Config(env_prefix=str_0, keep_alive=str_0)
    var_0 = config_0.load_environment_vars()


def test_case_2():
    str_0 = "u*b~V"
    str_1 = "1-;D{Hx"
    str_2 = "**;CVJU"
    str_3 = "_FALLBACK_ERROR_FORMAT"
    dict_0 = {str_0: str_0, str_1: str_0, str_2: str_1, str_3: str_1}
    none_type_0 = None
    module_0.Config(dict_0, none_type_0, converters=none_type_0)


def test_case_3():
    str_0 = "F!V-\x0bcJ#W=UwE/-=k)_"
    str_1 = "I\t@$[$Qcu"
    config_0 = module_0.Config(env_prefix=str_1, keep_alive=str_1)
    var_0 = config_0.load_environment_vars()
    config_0.__getattr__(str_0)


def test_case_4():
    str_0 = "I\t@$rzQcu"
    config_0 = module_0.Config(env_prefix=str_0, keep_alive=str_0)
    none_type_0 = config_0.update(**config_0)
    none_type_1 = config_0.register_type(none_type_0)
    var_0 = config_0.load_environment_vars()


def test_case_5():
    str_0 = "I\t@$rzQcu"
    config_0 = module_0.Config(env_prefix=str_0, keep_alive=str_0)
    bool_0 = False
    none_type_0 = config_0.register_type(bool_0)
    none_type_1 = config_0.__setitem__(str_0, str_0)
    none_type_2 = config_0.update(**config_0)
    var_0 = config_0.load_environment_vars()
    none_type_3 = config_0.register_type(none_type_2)
    config_0.update_config(none_type_2)


def test_case_6():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0)
    config_1 = module_0.Config(converters=none_type_0)


def test_case_7():
    str_0 = "I\t@$rzQcu"
    config_0 = module_0.Config(env_prefix=str_0, keep_alive=str_0)
    config_0.__getattr__(config_0)


def test_case_8():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_9():
    config_0 = module_0.Config()
    int_0 = 1627
    module_0.Config(converters=int_0)


def test_case_10():
    str_0 = "I\t@$rzQcu"
    config_0 = module_0.Config(env_prefix=str_0, keep_alive=str_0)
    bool_0 = False
    none_type_0 = config_0.register_type(bool_0)
    none_type_1 = config_0.update(**config_0)
    var_0 = config_0.load_environment_vars()
    none_type_2 = config_0.register_type(none_type_1)
    config_0.register_type(none_type_1)


def test_case_11():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)
    config_1 = module_0.Config(config_0, converters=config_0)
    var_1 = module_1.isdatadescriptor(config_0)
    str_0 = "L"
    config_2 = module_0.Config(env_prefix=str_0, keep_alive=config_0)
    var_2 = module_1.getmembers(config_1, var_0)
    var_3 = config_0.update_config(config_0)
    str_1 = "I\t@$rzQcu"
    config_3 = module_0.Config(env_prefix=str_1, keep_alive=str_1)
    var_4 = module_1.isdatadescriptor(var_0)
    str_0.__new__(var_2, str_0, var_1, config_0)


def test_case_12():
    str_0 = "I\t@$rzQcu"
    config_0 = module_0.Config(env_prefix=str_0, keep_alive=str_0)
    bool_0 = False
    none_type_0 = config_0.update()
    none_type_1 = config_0.register_type(bool_0)
    config_0.update_config(str_0)


def test_case_13():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0)
    config_0.update_config(none_type_0)


def test_case_14():
    config_0 = module_0.Config()
    var_0 = module_1.isdatadescriptor(config_0)
    none_type_0 = config_0.register_type(var_0)
    str_0 = "LOCAL_CERT_CREATOR"
    var_1 = var_0.__bool__()
    config_0.__setattr__(str_0, var_1)


def test_case_15():
    config_0 = module_0.Config()
    str_0 = config_0.__str__()
    config_1 = module_0.Config(config_0, converters=config_0)
    var_0 = module_1.isdatadescriptor(config_0)
    var_1 = config_1.update_config(config_0)
    str_1 = "L"
    config_2 = module_0.Config(env_prefix=str_1, keep_alive=config_0)
    dict_0 = {}
    bool_0 = False
    config_3 = module_0.Config(var_1, converters=bool_0)
    var_2 = config_3.update_config(dict_0)
    var_3 = module_1.getmembers(var_0)
    config_1.load_environment_vars(str_1)
