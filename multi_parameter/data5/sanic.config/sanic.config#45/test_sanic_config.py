# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import sanic.constants as module_1


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    str_0 = "~}_\\tMO1aF65RtrLxIzW"
    module_0.Config(env_prefix=str_0, keep_alive=str_0, converters=str_0)


def test_case_2():
    str_0 = "P"
    config_0 = module_0.Config(env_prefix=str_0)


def test_case_3():
    str_0 = "alt-svc"
    str_1 = 'e=F6lE"$80^>pgpNjA}>'
    str_2 = "  Subcommands"
    str_3 = "xm.sty&qC6!3/"
    dict_0 = {str_0: str_0, str_1: str_1, str_2: str_2, str_3: str_1}
    module_0.Config(dict_0, dict_0)


def test_case_4():
    bytes_0 = b""
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0, converters=none_type_0)
    config_0.__getattr__(bytes_0)


def test_case_5():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_6():
    config_0 = module_0.Config()
    list_0 = [config_0, config_0, config_0]
    config_1 = module_0.Config(config_0)
    int_0 = -565
    str_0 = "backlog"
    bytes_0 = b"\xa0<1\xb8\x8d\x930\x9f\x0f\x8d#\xc3%"
    none_type_0 = config_1.__setattr__(str_0, bytes_0)
    none_type_1 = config_1.register_type(int_0)
    config_0.__getattr__(list_0)


def test_case_7():
    str_0 = "GXygx8=;;\t)^MR?O<a~"
    config_0 = module_0.Config(keep_alive=str_0)


def test_case_8():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)
    config_0.update_config(var_0)


def test_case_9():
    config_0 = module_0.Config()
    config_1 = module_0.Config(converters=config_0)
    str_0 = "backlog"
    bytes_0 = b"\xa0<1\xb8\x8d\x930\x9f\x0f\x8d#\xc3%"
    none_type_0 = config_1.__setattr__(str_0, config_0)
    none_type_1 = config_0.register_type(bytes_0)
    config_0.__getattr__(config_0)


def test_case_10():
    config_0 = module_0.Config()
    var_0 = module_1.LocalCertCreator.TRUSTME
    config_0.update_config(var_0)


def test_case_11():
    str_0 = "P"
    config_0 = module_0.Config(env_prefix=str_0)
    module_0.Config(config_0, str_0, converters=str_0)
