# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import inspect as module_1
import sanic.http.stream as module_2


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    float_0 = 145.702512
    config_0 = module_0.Config()
    module_0.Config(converters=float_0)


def test_case_2():
    none_type_0 = None
    str_0 = "yxz3Owv]"
    dict_0 = {str_0: str_0, str_0: str_0}
    bool_0 = True
    config_0 = module_0.Config(dict_0, keep_alive=bool_0)
    config_0.__getattr__(none_type_0)


def test_case_3():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0)
    var_0 = config_0.update_config(config_0)
    none_type_1 = config_0.update(**config_0)
    config_0.update(*var_0, **config_0)


def test_case_4():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_5():
    config_0 = module_0.Config()
    none_type_0 = None
    config_0.update_config(none_type_0)


def test_case_6():
    none_type_0 = None
    config_0 = module_1.isclass(none_type_0)
    config_1 = module_0.Config()
    stream_0 = module_2.Stream()
    none_type_1 = config_1.register_type(stream_0)


def test_case_7():
    config_0 = module_0.Config()
    config_0.__getattr__(config_0)


def test_case_8():
    config_0 = module_0.Config()
    config_0.__setitem__(config_0, config_0)


def test_case_9():
    none_type_0 = None
    str_0 = "lost"
    str_1 = ""
    config_0 = module_0.Config(env_prefix=str_0, keep_alive=none_type_0)
    stream_0 = module_2.Stream()
    var_0 = module_1.isclass(none_type_0)
    var_0.__instancecheck__(str_1, config_0)


def test_case_10():
    str_0 = "Build a URL based on a view name and the values provided.\n\n        This method constructs URLs for a given view name, taking into account\n        various special keyword arguments that can be used to modify the resulting\n        URL. It can handle internal routing as well as external URLs with different\n        schemes.\n\n        There are several special keyword arguments that can be used to modify\n        the URL that is built. They each begin with an underscore. They are:\n\n        - `_anchor`\n        - `_external`\n        - `_host`\n        - `_server`\n        - `_scheme`\n\n        Args:\n            view_name (str): String referencing the view name.\n            _anchor (str): Adds an \"#anchor\" to the end.\n            _scheme (str): Should be either \"http\" or \"https\", default is \"http\".\n            _external (bool): Whether to return the path or a full URL with scheme and host.\n            _host (str): Used when one or more hosts are defined for a route to tell Sanic which to use.\n            _server (str): If not using \"_host\", this will be used for defining the hostname of the URL.\n            **kwargs: Keys and values that are used to build request parameters and\n                    query string arguments.\n\n        Raises:\n            URLBuildError: If there are issues with constructing the URL.\n\n        Returns:\n            str: The built URL.\n\n        Examples:\n            Building a URL for a specific view with parameters:\n            ```python\n            url_for('view_name', param1='value1', param2='value2')\n            # /view-name?param1=value1&param2=value2\n            ```\n\n            Creating an external URL with a specific scheme and anchor:\n            ```python\n            url_for('view_name', _scheme='https', _external=True, _anchor='section1')\n            # https://example.com/view-name#section1\n            ```\n\n            Creating a URL with a specific host:\n            ```python\n            url_for('view_name', _host='subdomain.example.com')\n            # http://subdomain.example.com/view-name\n        "
    module_0.Config(env_prefix=str_0, converters=str_0)


def test_case_11():
    config_0 = module_0.Config()
    list_0 = module_1.getmembers(config_0)
    config_1 = module_0.Config(keep_alive=list_0, converters=list_0)
    none_type_0 = None
    none_type_1 = config_1.register_type(none_type_0)
    config_0.update_config(none_type_1)


def test_case_12():
    config_0 = module_0.Config()
    str_0 = "WwB\r!fbg*#"
    config_0.update_config(str_0)


def test_case_13():
    str_0 = ""
    config_0 = module_0.Config(env_prefix=str_0, converters=str_0)
    config_0.load_environment_vars(str_0)
