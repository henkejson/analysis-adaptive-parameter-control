# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import inspect as module_1


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    config_0 = module_0.Config()
    str_0 = "};s8>n"
    none_type_0 = None
    none_type_1 = config_0.__setattr__(str_0, none_type_0)
    str_1 = "R"
    none_type_2 = config_0.__setitem__(str_1, none_type_1)
    var_0 = module_1.isclass(str_0)
    config_1 = module_0.Config(var_0, keep_alive=str_0)


def test_case_2():
    str_0 = "key-value-table smalltext"
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=str_0)
    config_1 = module_0.Config(none_type_0, keep_alive=none_type_0)
    none_type_1 = config_1.register_type(none_type_0)


def test_case_3():
    none_type_0 = None
    config_0 = module_0.Config(none_type_0)
    config_1 = module_0.Config(converters=none_type_0)
    config_2 = module_0.Config(config_1, none_type_0, converters=none_type_0)
    config_2.__setitem__(none_type_0, none_type_0)


def test_case_4():
    str_0 = "@"
    str_1 = "\x0b3b,A="
    dict_0 = {str_1: str_1, str_1: str_1}
    bool_0 = True
    config_0 = module_0.Config(dict_0, keep_alive=bool_0)
    config_0.update_config(str_0)


def test_case_5():
    config_0 = module_0.Config()
    str_0 = "};s8>n"
    none_type_0 = None
    none_type_1 = config_0.__setattr__(str_0, none_type_0)
    none_type_2 = config_0.register_type(config_0)


def test_case_6():
    config_0 = module_0.Config()
    str_0 = "};s8>n"
    none_type_0 = None
    config_1 = module_0.Config(converters=str_0)
    config_2 = module_0.Config(converters=none_type_0)
    var_0 = config_2.load_environment_vars()
    config_1.__getattr__(config_2)


def test_case_7():
    config_0 = module_0.Config()
    none_type_0 = None
    config_0.update_config(none_type_0)


def test_case_8():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_9():
    none_type_0 = None
    config_0 = module_0.Config(none_type_0)
    str_0 = "backslashreplace"
    none_type_1 = config_0.register_type(none_type_0)
    config_0.__getattr__(str_0)


def test_case_10():
    str_0 = "key-value-table smalltext"
    module_0.Config(converters=str_0)
