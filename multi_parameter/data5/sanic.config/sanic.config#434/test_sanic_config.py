# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import abc as module_1
import sanic.helpers as module_2
import sanic.constants as module_3


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    config_0 = module_0.Config()
    none_type_0 = None
    config_1 = module_0.Config(none_type_0, none_type_0, none_type_0)
    module_1.ABCMeta()


def test_case_2():
    config_0 = module_0.Config()
    var_0 = config_0.load_environment_vars()
    none_type_0 = None
    config_1 = module_0.Config(none_type_0, none_type_0, none_type_0)
    none_type_1 = config_0.register_type(none_type_0)
    config_2 = module_0.Config(config_0)


def test_case_3():
    config_0 = module_0.Config()
    default_0 = module_2.Default()
    str_0 = "LOCAL_CERT_CREATOR"
    config_0.__setitem__(str_0, default_0)


def test_case_4():
    none_type_0 = None
    config_0 = module_0.Config(keep_alive=none_type_0, converters=none_type_0)
    config_0.__getattr__(config_0)


def test_case_5():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)
    var_1 = var_0.__bool__()
    config_0.__getattr__(var_1)


def test_case_6():
    config_0 = module_0.Config()
    none_type_0 = None
    config_0.update_config(none_type_0)


def test_case_7():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_8():
    config_0 = module_0.Config()
    str_0 = '" for parameter `'
    bytes_0 = b"\x92\xca\xe8\xa8\x7f\xc9\x8e\x17\xcb\x02\\Y\xe9I"
    none_type_0 = config_0.register_type(str_0)
    config_0.update_config(bytes_0)


def test_case_9():
    config_0 = module_0.Config()
    var_0 = module_3.LocalCertCreator.MKCERT
    config_1 = module_0.Config(env_prefix=var_0, converters=config_0)
    var_1 = config_1.update_config(config_0)
    config_1.__getattr__(config_1)


def test_case_10():
    config_0 = module_0.Config()
    config_1 = module_0.Config(config_0, keep_alive=config_0, converters=config_0)
    var_0 = config_1.update_config(config_0)
    config_0.__new__(config_1, config_0, config_0, config_1, **config_0)


def test_case_11():
    config_0 = module_0.Config()
    config_1 = module_0.Config()
    none_type_0 = config_1.register_type(config_1)
    str_0 = ";Fy\nPswFx|3$#uR)NrSu"
    none_type_1 = config_1.__setitem__(str_0, config_0)
    config_1.register_type(config_1)
