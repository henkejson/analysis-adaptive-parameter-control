# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import sanic.http.stream as module_1
import inspect as module_2
import sanic.constants as module_3
import sanic.utils as module_4


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    bool_0 = False
    config_0 = module_0.Config(bool_0, bool_0, bool_0)


def test_case_2():
    bytes_0 = b"\x03"
    none_type_0 = None
    module_0.Config(bytes_0, keep_alive=none_type_0, converters=bytes_0)


def test_case_3():
    none_type_0 = None
    config_0 = module_0.Config()
    config_0.__getattr__(none_type_0)


def test_case_4():
    config_0 = module_0.Config()
    config_0.__getattr__(config_0)


def test_case_5():
    bool_0 = False
    config_0 = module_0.Config(keep_alive=bool_0)
    config_0.update_config(bool_0)


def test_case_6():
    none_type_0 = None
    config_0 = module_0.Config(converters=none_type_0)
    config_1 = module_0.Config(keep_alive=none_type_0)
    config_1.__setitem__(config_1, none_type_0)


def test_case_7():
    bool_0 = False
    config_0 = module_0.Config(keep_alive=bool_0)
    var_0 = config_0.update_config(config_0)


def test_case_8():
    float_0 = 1060.721125
    module_0.Config(converters=float_0)


def test_case_9():
    str_0 = "+^tH8.s^T2batN?l\nw/"
    str_1 = ")Wxxa8yRI4kQtNP..9"
    str_2 = "Run theHserver with an interactivy shell %ession"
    dict_0 = {str_0: str_0, str_1: str_1, str_2: str_1}
    stream_0 = module_1.Stream()
    var_0 = module_2.isclass(dict_0)
    var_1 = module_3.LocalCertCreator.TRUSTME
    config_0 = module_0.Config()
    var_2 = var_1.__repr__()
    none_type_0 = config_0.__setitem__(var_2, var_1)
    config_0.update_config(var_1)


def test_case_10():
    none_type_0 = None
    var_0 = module_2.isclass(none_type_0)
    var_1 = var_0.__bool__()
    str_0 = "N"
    none_type_1 = None
    config_0 = module_0.Config(env_prefix=str_0, keep_alive=none_type_1)
    bytes_0 = b"\x99\x05Gl\xdc\x9a;\xf1r\xf1\xd2\x86C\x17<\x18"
    module_4.load_module_from_file_location(bytes_0)


def test_case_11():
    bool_0 = False
    config_0 = module_0.Config(keep_alive=bool_0)
    var_0 = module_0.Config(keep_alive=config_0, converters=config_0)
    var_0.register(var_0, var_0)


def test_case_12():
    none_type_0 = None
    config_0 = module_0.Config(converters=none_type_0)
    var_0 = config_0.update_config(config_0)
    none_type_1 = config_0.register_type(var_0)
    config_0.register_type(var_0)
