# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import inspect as module_1


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    str_0 = "HTTP version"
    module_0.Config(converters=str_0)


def test_case_2():
    bool_0 = False
    config_0 = module_0.Config(bool_0, keep_alive=bool_0)
    var_0 = module_1.getmembers(bool_0)
    none_type_0 = config_0.update()
    bool_0.register_type(var_0)


def test_case_3():
    str_0 = "="
    dict_0 = {str_0: str_0}
    module_0.Config(dict_0, dict_0)


def test_case_4():
    config_0 = module_0.Config()
    config_0.__getattr__(config_0)


def test_case_5():
    config_0 = module_0.Config()
    config_0.__setitem__(config_0, config_0)


def test_case_6():
    complex_0 = 1390.8409 - 518.47j
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0)
    config_0.update_config(complex_0)


def test_case_7():
    config_0 = module_0.Config()
    none_type_0 = config_0.update(**config_0)
    config_0.init_for_request()


def test_case_8():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_9():
    config_0 = module_0.Config()
    str_0 = "?:\\kYCzsyvGF|nm["
    none_type_0 = config_0.__setitem__(str_0, config_0)
    config_0.update_config(str_0)


def test_case_10():
    config_0 = module_0.Config()
    config_1 = module_0.Config(converters=config_0)
    var_0 = config_0.load_environment_vars()


def test_case_11():
    config_0 = module_0.Config()
    config_1 = module_1.isclass(config_0)
    config_0.update_config(config_1)


def test_case_12():
    config_0 = module_0.Config()
    none_type_0 = config_0.update()
    str_0 = "LOCAL_CERT_CREATOR"
    config_0.__setitem__(str_0, none_type_0)


def test_case_13():
    bool_0 = False
    str_0 = '\n        For creating a signal handler, used similar to a route handler:\n\n        .. code-block:: python\n\n            @app.signal("foo.bar.<thing>")\n            async def signal_handler(thing, **kwargs):\n                print(f"[signal_handler] {thing=}", kwargs)\n\n        :param event: Representation of the event in ``one.two.three`` form\n        :type event: str\n        :param apply: For lazy evaluation, defaults to ``True``\n        :type apply: bool, optional\n        :param condition: For use with the ``condition`` argument in dispatch\n            filtering, defaults to ``None``\n        :param exclusive: When ``True``, the signal can only be dispatched\n            when the condition has been met. When ``False``, the signal can\n            be dispatched either with or without it. *THIS IS INAPPLICABLE TO\n            BLUEPRINT SIGNALS. THEY ARE ALWAYS NON-EXCLUSIVE*, defaults\n            to ``True``\n        :type condition: Dict[str, Any], optional\n        '
    str_1 = "_FALLBACK_ERROR_FORMAT"
    dict_0 = {str_0: bool_0, str_0: bool_0, str_1: str_1, str_1: str_1}
    module_0.Config(dict_0)
