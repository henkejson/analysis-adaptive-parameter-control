# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import inspect as module_1


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    int_0 = -3449
    bool_0 = True
    module_0.Config(env_prefix=int_0, keep_alive=bool_0)


def test_case_2():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0, converters=none_type_0)


def test_case_3():
    str_0 = "9H>SR:x]9.x"
    config_0 = module_0.Config(env_prefix=str_0)
    none_type_0 = None
    config_1 = module_0.Config(config_0, none_type_0, none_type_0)
    list_0 = [config_0]
    none_type_1 = config_0.update(*list_0, **config_0)
    str_1 = "3;M#NeO\x0bX8ywg<j)\x0c?"
    config_0.__getattr__(str_1)


def test_case_4():
    str_0 = "9H>SR:x]9.x"
    config_0 = module_0.Config(env_prefix=str_0)
    str_1 = "protocol.connection_lost"
    str_2 = "m.*$]hB,0Q1SP*^Q("
    none_type_0 = config_0.__setattr__(str_2, str_2)
    config_0.__getattr__(str_1)


def test_case_5():
    str_0 = "H"
    config_0 = module_0.Config(env_prefix=str_0)


def test_case_6():
    none_type_0 = None
    var_0 = module_1.getmembers(none_type_0, none_type_0)
    module_0.Config(env_prefix=var_0, keep_alive=none_type_0, converters=var_0)


def test_case_7():
    str_0 = "9H>SR:x]9.x"
    config_0 = module_0.Config(env_prefix=str_0)
    list_0 = [config_0]
    none_type_0 = config_0.update(*list_0, **config_0)
    none_type_1 = None
    var_0 = module_1.isclass(none_type_1)
    var_1 = var_0.__bool__()
    module_0.Config(config_0, var_0, converters=str_0)


def test_case_8():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_9():
    none_type_0 = None
    config_0 = module_0.Config(none_type_0, none_type_0, none_type_0)
    config_0.update_config(none_type_0)


def test_case_10():
    str_0 = "9H>SR:x]9.x"
    str_1 = "LOCAL_CERT_CREATOR"
    none_type_0 = None
    config_0 = module_0.Config(keep_alive=none_type_0)
    config_0.__setattr__(str_1, str_0)


def test_case_11():
    str_0 = "9H>SR:x]9.x"
    config_0 = module_0.Config(env_prefix=str_0)
    str_1 = "WFm-0B"
    none_type_0 = config_0.__setattr__(str_1, str_0)
    bytes_0 = b"\x83\xac\xab\xe8nR\x87\xc1\xe6\x94\xfb\xfb\xe9"
    config_0.update_config(bytes_0)


def test_case_12():
    str_0 = "9H>SR:x]9.x"
    config_0 = module_0.Config(env_prefix=str_0)
    config_0.__getattr__(config_0)


def test_case_13():
    str_0 = "H"
    config_0 = module_0.Config(env_prefix=str_0)
    str_1 = "WFm-0B"
    none_type_0 = config_0.__setattr__(str_1, str_0)
    bool_0 = False
    none_type_1 = config_0.register_type(bool_0)
    none_type_2 = config_0.__setattr__(str_1, str_1)
    config_0.load_environment_vars(str_0)


def test_case_14():
    str_0 = "_"
    config_0 = module_0.Config(env_prefix=str_0)
    str_1 = "WFm-0B"
    none_type_0 = config_0.__setattr__(str_1, str_0)
    bool_0 = False
    none_type_1 = config_0.register_type(bool_0)
    none_type_2 = config_0.__setattr__(str_1, str_1)
    var_0 = config_0.update_config(config_0)
    config_0.update_config(none_type_0)
