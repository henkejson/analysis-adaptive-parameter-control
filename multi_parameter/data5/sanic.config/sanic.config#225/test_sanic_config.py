# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import sanic.helpers as module_1


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    bool_0 = False
    config_0 = module_0.Config(env_prefix=bool_0)


def test_case_2():
    bool_0 = False
    config_0 = module_0.Config(env_prefix=bool_0)
    none_type_0 = None
    config_0.__getattr__(none_type_0)


def test_case_3():
    config_0 = module_0.Config()
    none_type_0 = config_0.register_type(config_0)


def test_case_4():
    str_0 = "at>hM)"
    config_0 = module_0.Config(env_prefix=str_0)
    var_0 = config_0.update_config(config_0)
    config_0.__setitem__(var_0, var_0)


def test_case_5():
    bool_0 = True
    module_0.Config(env_prefix=bool_0)


def test_case_6():
    bool_0 = False
    config_0 = module_0.Config(keep_alive=bool_0)


def test_case_7():
    str_0 = "417 Expectation Failed\n\n    Args:\n        message (Optional[Union[str, bytes]], optional): The message to be sent to the client. If `None`\n            then the HTTP status 'Bad Request' will be sent. Defaults to `None`.\n        quiet (Optional[bool], optional): When `True`, the error traceback will be suppressed\n            from the logs. Defaults to `None`.\n        context (Optional[Dict[str, Any]], optional): Additional mapping of key/value data that will be\n            sent to the client upon exception. Defaults to `None`.\n        extra (Optional[Dict[str, Any]], optional): Additional mapping of key/value data that will NOT be\n            sent to the client when in PRODUCTION mode. Defaults to `None`.\n        headers (Optional[Dict[str, Any]], optional): Additional headers that should be sent with the HTTP\n            response. Defaults to `None`.\n    "
    bool_0 = False
    str_1 = '"([^"]*)"'
    dict_0 = {str_0: bool_0, str_1: str_0}
    config_0 = module_0.Config(dict_0, keep_alive=bool_0)
    none_type_0 = config_0.update(**config_0)
    default_0 = module_1.Default()
    str_2 = "'Y\x0b9==M\"WY'CHOk|R<"
    config_1 = module_0.Config(env_prefix=str_2)
    none_type_1 = config_0.register_type(bool_0)
    none_type_2 = None
    none_type_3 = config_1.__setitem__(str_2, none_type_2)
    config_1.__getattr__(none_type_2)


def test_case_8():
    bool_0 = False
    config_0 = module_0.Config(env_prefix=bool_0)
    config_0.update_config(bool_0)


def test_case_9():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_10():
    str_0 = "at>hM)"
    config_0 = module_0.Config(env_prefix=str_0)
    var_0 = config_0.update_config(config_0)
    config_0.__getattr__(config_0)


def test_case_11():
    str_0 = "at>hM)"
    bool_0 = False
    config_0 = module_0.Config(keep_alive=bool_0, converters=str_0)
    config_0.update_config(str_0)


def test_case_12():
    none_type_0 = None
    bytes_0 = b"I=L\xfbi:\xce\xf5\x14{-\xabS,"
    config_0 = module_0.Config(none_type_0)
    config_1 = module_0.Config(converters=bytes_0)
    none_type_1 = config_1.register_type(none_type_0)


def test_case_13():
    str_0 = "417 Expectation Failed\n\n    Args:\n        message (Optional[Union[str, bytes]], optional): The message to be sent to the client. If `None`\n            then the HTTP status 'Bad Request' will be sent. Defaults to `None`.\n        quiet (Optional[bool], optional): When `True`, the error traceback will be suppressed\n            from the logs. Defaults to `None`.\n        context (Optional[Dict[str, Any]], optional): Additional mapping of key/value data that will be\n            sent to the client upon exception. Defaults to `None`.\n        extra (Optional[Dict[str, Any]], optional): Additional mapping of key/value data that will NOT be\n            sent to the client when in PRODUCTION mode. Defaults to `None`.\n        headers (Optional[Dict[str, Any]], optional): Additional headers that should be sent with the HTTP\n            response. Defaults to `None`.\n    "
    bool_0 = True
    dict_0 = {str_0: bool_0, str_0: str_0}
    config_0 = module_0.Config(dict_0, keep_alive=bool_0)
    none_type_0 = config_0.update(**config_0)
    none_type_1 = config_0.update()
    str_1 = "'Y\x0b9==M\"WY'CHOk|R<"
    config_1 = module_0.Config(env_prefix=str_1)
    int_0 = 1538
    none_type_2 = config_0.register_type(int_0)
    config_0.register_type(int_0)


def test_case_14():
    set_0 = set()
    str_0 = "LOCAL_CERT_CREATOR"
    str_1 = "m!*vtNmK.@?3"
    dict_0 = {str_0: set_0, str_1: set_0}
    str_2 = 'W rt"\t=%v0oJ'
    config_0 = module_0.Config(env_prefix=str_2)
    config_0.update(**dict_0)
