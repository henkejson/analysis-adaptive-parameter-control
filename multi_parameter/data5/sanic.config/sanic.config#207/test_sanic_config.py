# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import sanic.helpers as module_1


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    bool_0 = True
    module_0.Config(env_prefix=bool_0, keep_alive=bool_0)


def test_case_2():
    str_0 = "E\\`"
    none_type_0 = None
    module_0.Config(str_0, converters=none_type_0)


def test_case_3():
    config_0 = module_0.Config()
    none_type_0 = config_0.update(**config_0)


def test_case_4():
    config_0 = module_0.Config()
    none_type_0 = config_0.update_config(config_0)


def test_case_5():
    bool_0 = False
    bool_1 = False
    config_0 = module_0.Config(env_prefix=bool_1, keep_alive=bool_1)
    none_type_0 = None
    config_0.__setitem__(none_type_0, bool_0)


def test_case_6():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)
    config_0.init_for_request()


def test_case_7():
    bool_0 = True
    module_0.Config(converters=bool_0)


def test_case_8():
    str_0 = "O\\y\x0b~8cIl<VuU"
    str_1 = "Extends the response's raw_body with the given values, ensuring that body is kept up to date.\n\n        This can only be used if raw_body is a list.\n\n        Args:\n            value (Any): The values to extend with\n\n        Raises:\n            SanicException: If the body is not a list\n        "
    dict_0 = {str_0: str_0, str_1: str_0}
    config_0 = module_0.Config()
    none_type_0 = config_0.__setitem__(str_1, str_0)
    config_0.__getattr__(dict_0)


def test_case_9():
    default_0 = module_1.Default()
    config_0 = module_0.Config()
    none_type_0 = config_0.register_type(config_0)
    float_0 = 825.2304
    bool_0 = True
    module_0.Config(env_prefix=float_0, keep_alive=bool_0, converters=float_0)


def test_case_10():
    config_0 = module_0.Config()
    none_type_0 = config_0.update(**config_0)
    config_0.update_config(none_type_0)


def test_case_11():
    none_type_0 = None
    config_0 = module_0.Config(none_type_0)
    none_type_1 = config_0.register_type(none_type_0)
    config_0.register_type(none_type_0)


def test_case_12():
    str_0 = "vc[?/1"
    none_type_0 = None
    config_0 = module_0.Config(none_type_0)
    none_type_1 = config_0.register_type(none_type_0)
    config_0.update_config(str_0)


def test_case_13():
    default_0 = module_1.Default()
    config_0 = module_0.Config()
    var_0 = config_0.update_config(default_0)
    var_1 = default_0.__repr__()
    module_0.Config(env_prefix=config_0, keep_alive=config_0, converters=config_0)
