# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import inspect as module_1


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    bool_0 = True
    config_0 = module_0.Config(keep_alive=bool_0)
    config_1 = module_0.Config()
    config_1.__getattr__(config_1)


def test_case_2():
    bytes_0 = b"R\xd8\xdc\x02\x1fBY\x80\x159\t\xd4\x16\xeb"
    str_0 = "_D"
    bool_0 = False
    config_0 = module_0.Config(env_prefix=str_0, keep_alive=bool_0)
    set_0 = {str_0, bool_0}
    bytes_0.__instancecheck__(set_0, config_0)


def test_case_3():
    bool_0 = True
    module_0.Config(bool_0, converters=bool_0)


def test_case_4():
    config_0 = module_0.Config()
    var_0 = module_1.getmembers(config_0)
    config_0.update_config(var_0)


def test_case_5():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_6():
    str_0 = "Cookie key contains illegal characters"
    module_0.Config(converters=str_0)


def test_case_7():
    config_0 = module_0.Config()
    str_0 = "Webscoket about_pings should only be called after connection state is changed to CLOSED"
    none_type_0 = None
    none_type_1 = config_0.__setitem__(str_0, none_type_0)
    module_0.DescriptorMeta(config_0)


def test_case_8():
    str_0 = ">bxR\nA$t~lY"
    bool_0 = False
    config_0 = module_0.Config(env_prefix=bool_0)
    bytes_0 = b"@\xad\xd1\x13i}{\x86\xe0\x90"
    var_0 = module_1.isclass(bytes_0)
    module_0.DescriptorMeta(str_0)


def test_case_9():
    str_0 = "zIx+^>$jijbyAY!64"
    config_0 = module_0.Config()
    config_0.update_config(str_0)


def test_case_10():
    none_type_0 = None
    config_0 = module_0.Config()
    config_1 = module_0.Config(keep_alive=none_type_0, converters=config_0)
    none_type_1 = config_0.update(**config_0)
    var_0 = config_0.load_environment_vars()
    bool_0 = False
    none_type_2 = config_0.register_type(bool_0)


def test_case_11():
    bool_0 = False
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0, converters=bool_0)
    str_0 = "LOCAL_CERT_CREATOR"
    config_0.__setitem__(str_0, bool_0)
