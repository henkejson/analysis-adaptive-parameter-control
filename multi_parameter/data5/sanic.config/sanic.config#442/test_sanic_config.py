# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import inspect as module_1
import sanic.helpers as module_2


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    str_0 = "\r,h\t5>c"
    str_1 = ">V,aNl\nZTT\rg&1g\roS>["
    config_0 = module_0.Config(env_prefix=str_0)
    var_0 = module_1.isclass(str_1)
    config_0.update_config(str_1)


def test_case_2():
    str_0 = "\r,h\t5>c"
    config_0 = module_0.Config(env_prefix=str_0)
    config_0.register(config_0, config_0)


def test_case_3():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)
    config_0.update_config(var_0)


def test_case_4():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_5():
    config_0 = module_0.Config()
    str_0 = "G\\(6|\n#a(P"
    none_type_0 = config_0.__setitem__(str_0, config_0)
    var_0 = config_0.update_config(config_0)
    config_0.update_config(var_0)


def test_case_6():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0, converters=none_type_0)
    var_0 = config_0.update_config(config_0)
    config_0.__getattr__(config_0)


def test_case_7():
    str_0 = "_FALLBACK_ERROR_FORMAT"
    int_0 = -592
    str_1 = "websocket_ping_timeout"
    none_type_0 = None
    str_2 = "TOUCHUP"
    dict_0 = {str_0: int_0, str_1: none_type_0, str_2: str_0}
    module_0.Config(dict_0, none_type_0)


def test_case_8():
    none_type_0 = None
    config_0 = module_0.Config()
    none_type_1 = config_0.register_type(none_type_0)
    config_1 = module_0.Config()
    default_0 = module_2.Default()


def test_case_9():
    str_0 = "Webscoket about_pings should only be called after connection state is changed to CLOSED"
    bool_0 = False
    config_0 = module_0.Config(env_prefix=str_0, keep_alive=bool_0)
    none_type_0 = None
    none_type_1 = config_0.register_type(str_0)
    config_0.update_config(none_type_0)


def test_case_10():
    none_type_0 = None
    int_0 = 544
    module_0.Config(env_prefix=none_type_0, converters=int_0)


def test_case_11():
    none_type_0 = None
    config_0 = module_0.Config()
    none_type_1 = config_0.register_type(none_type_0)
    config_0.register_type(none_type_1)


def test_case_12():
    str_0 = "qv;}Om{K> 6A"
    none_type_0 = None
    config_0 = module_0.Config(none_type_0, none_type_0, none_type_0, converters=str_0)
    bool_0 = True
    none_type_1 = config_0.register_type(bool_0)
    config_0.update_config(none_type_0)
