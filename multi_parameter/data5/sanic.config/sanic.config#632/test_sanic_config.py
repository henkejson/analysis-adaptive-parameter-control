# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import sanic.http.stream as module_1
import inspect as module_2


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    none_type_0 = None
    str_0 = "500 Internal Server Error\n\n    An exception used by Sanic internals when unable to build a URL.\n\n    Args:\n        message (Optional[Union[str, bytes]], optional): The message to be sent to the client. If `None`\n            then the HTTP status 'Bad Request' will be sent. Defaults to `None`.\n        quiet (Optional[bool], optional): When `True`, the error traceback will be suppressed\n            from the logs. Defaults to `None`.\n        context (Optional[Dict[str, Any]], optional): Additional mapping of key/value data that will be\n            sent to the client upon exception. Defaults to `None`.\n        extra (Optional[Dict[str, Any]], optional): Additional mapping of key/value data that will NOT be\n            sent to the client when in PRODUCTION mode. Defaults to `None`.\n        headers (Optional[Dict[str, Any]], optional): Additional headers that should be sent with the HTTP\n            response. Defaults to `None`.\n    "
    config_0 = module_0.Config(env_prefix=str_0, keep_alive=str_0)
    config_0.__getattr__(none_type_0)


def test_case_2():
    none_type_0 = None
    config_0 = module_0.Config(none_type_0, none_type_0)


def test_case_3():
    bool_0 = True
    module_0.Config(bool_0)


def test_case_4():
    none_type_0 = None
    config_0 = module_0.Config(none_type_0, none_type_0)
    config_0.update_config(none_type_0)


def test_case_5():
    stream_0 = module_1.Stream()
    bytes_0 = b"2Qn\x96\x19"
    str_0 = "ii<&pNtm"
    config_0 = module_0.Config(env_prefix=str_0)
    config_0.update_config(bytes_0)


def test_case_6():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_7():
    config_0 = module_0.Config()
    none_type_0 = config_0.register_type(config_0)
    config_0.update_config(none_type_0)


def test_case_8():
    str_0 = "L$*ZG~w_"
    config_0 = module_0.Config()
    none_type_0 = config_0.__setitem__(str_0, str_0)
    bool_0 = True
    module_0.Config(bool_0)


def test_case_9():
    none_type_0 = None
    config_0 = module_0.Config(none_type_0, converters=none_type_0)
    config_0.__getattr__(config_0)


def test_case_10():
    bytes_0 = b"Not Implemented"
    module_0.Config(keep_alive=bytes_0, converters=bytes_0)


def test_case_11():
    config_0 = module_0.Config()
    str_0 = "2.g0S)&dt=8!l\n"
    bytes_0 = b"\xd6\xac\xd3z\x95\x15\xa8\xaeB\r\xe4X"
    config_1 = module_0.Config(env_prefix=str_0, converters=bytes_0)
    var_0 = config_0.update_config(config_0)
    none_type_0 = None
    config_0.update_config(none_type_0)


def test_case_12():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)
    str_0 = "LOCAL_CERT_CREATOR"
    config_0.__setitem__(str_0, var_0)


def test_case_13():
    none_type_0 = None
    config_0 = module_0.Config(none_type_0, none_type_0, converters=none_type_0)
    var_0 = module_2.getmembers(config_0, none_type_0)
    list_0 = [config_0, config_0, var_0]
    none_type_1 = config_0.update(*list_0)
    var_0.load_environment_vars(none_type_0)
