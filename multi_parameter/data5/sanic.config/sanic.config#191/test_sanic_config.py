# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import inspect as module_1
import builtins as module_2


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    str_0 = "{Z7\ts"
    config_0 = module_0.Config(converters=str_0)


def test_case_2():
    float_0 = 3290.7
    bool_0 = False
    config_0 = module_0.Config(keep_alive=bool_0)
    config_0.update_config(float_0)


def test_case_3():
    none_type_0 = None
    list_0 = [none_type_0]
    config_0 = module_0.Config(none_type_0, keep_alive=none_type_0)
    none_type_1 = config_0.register_type(list_0)
    config_1 = module_0.Config(none_type_1, none_type_1)
    config_1.update(*none_type_1, **config_0)


def test_case_4():
    str_0 = "l$`aHi"
    dict_0 = {str_0: str_0}
    module_0.Config(dict_0, dict_0)


def test_case_5():
    config_0 = module_0.Config()
    module_1.getmembers(config_0, config_0)


def test_case_6():
    object_0 = module_2.object()
    config_0 = module_0.Config()
    config_0.__getattr__(config_0)


def test_case_7():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_8():
    none_type_0 = None
    config_0 = module_0.Config(keep_alive=none_type_0)
    config_0.update_config(none_type_0)


def test_case_9():
    str_0 = "pW$45\\ts9}L8\n|;,"
    config_0 = module_0.Config(converters=str_0)
    var_0 = config_0.update_config(config_0)
    config_0.update_config(str_0)


def test_case_10():
    str_0 = "pW$45\\ts9}L\n|;,"
    config_0 = module_0.Config(converters=str_0)
    var_0 = module_1.isclass(str_0)
    str_1 = "LOCAL_CERT_CREATOR"
    config_0.__setitem__(str_1, var_0)


def test_case_11():
    str_0 = "Get the Blueprint object at the specified index.\n\n        This method returns a blueprint inside the group specified by\n        an index value. This will enable indexing, splice and slicing\n        of the blueprint group like we can do with regular list/tuple.\n\n        This method is provided to ensure backward compatibility with\n        any of the pre-existing usage that might break.\n\n        Returns:\n            Blueprint: Blueprint object at the specified index.\n\n        Raises:\n            IndexError: If the index is out of range.\n        "
    bool_0 = True
    module_0.Config(env_prefix=str_0, keep_alive=bool_0, converters=str_0)
