# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import inspect as module_1


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    list_0 = []
    none_type_0 = None
    tuple_0 = ()
    list_1 = [list_0, none_type_0, tuple_0]
    config_0 = module_0.Config(converters=list_1)
    config_0.update_config(list_1)


def test_case_2():
    str_0 = 'V\t"k\x0c1$-a~ar_s$Ki'
    config_0 = module_0.Config(keep_alive=str_0)


def test_case_3():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0, keep_alive=none_type_0)


def test_case_4():
    config_0 = module_0.Config()
    none_type_0 = None
    config_1 = module_0.Config(config_0, none_type_0)
    config_1.update_config(none_type_0)


def test_case_5():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_6():
    list_0 = []
    none_type_0 = None
    tuple_0 = ()
    list_1 = [list_0, none_type_0, tuple_0]
    config_0 = module_0.Config(converters=list_1)
    str_0 = ""
    none_type_1 = config_0.update(*list_0, **config_0)
    config_1 = module_0.Config(keep_alive=none_type_1, converters=none_type_1)
    config_0.update_config(str_0)


def test_case_7():
    str_0 = "L"
    config_0 = module_0.Config(env_prefix=str_0)
    config_0.create_empty_request()


def test_case_8():
    none_type_0 = None
    config_0 = module_0.Config(converters=none_type_0)
    config_0.update_config(none_type_0)


def test_case_9():
    list_0 = []
    none_type_0 = None
    tuple_0 = ()
    list_1 = [list_0, none_type_0, tuple_0]
    config_0 = module_0.Config(converters=list_1)
    var_0 = config_0.update_config(config_0)
    config_0.__getattr__(list_1)


def test_case_10():
    str_0 = "L"
    config_0 = module_0.Config(env_prefix=str_0)


def test_case_11():
    list_0 = []
    none_type_0 = None
    tuple_0 = ()
    list_1 = [list_0, none_type_0, tuple_0, tuple_0, list_0]
    module_0.Config(converters=list_1)


def test_case_12():
    list_0 = []
    none_type_0 = None
    tuple_0 = ()
    list_1 = [list_0, none_type_0, tuple_0]
    config_0 = module_0.Config(converters=list_1)
    none_type_1 = module_1.isdatadescriptor(list_1)
    var_0 = config_0.update_config(config_0)
    str_0 = "L"
    config_1 = module_0.Config(env_prefix=str_0)
    config_2 = module_0.Config(
        env_prefix=none_type_0, keep_alive=none_type_1, converters=none_type_1
    )
    var_1 = config_2.update_config(config_2)
    config_0.load_environment_vars(str_0)
