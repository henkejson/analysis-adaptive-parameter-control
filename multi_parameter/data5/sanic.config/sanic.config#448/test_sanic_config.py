# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import inspect as module_1
import abc as module_2
import builtins as module_3


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)
    var_1 = module_1.isclass(var_0)
    config_1 = module_0.Config(var_1, keep_alive=var_1, converters=config_0)
    config_1.load_environment_vars(var_0)


def test_case_2():
    none_type_0 = None
    var_0 = module_1.isclass(none_type_0)
    config_0 = module_0.Config(keep_alive=var_0)
    config_0.__getattr__(none_type_0)


def test_case_3():
    str_0 = "P"
    config_0 = module_0.Config(env_prefix=str_0)


def test_case_4():
    config_0 = module_0.Config()
    none_type_0 = config_0.register_type(config_0)
    config_0.update_config(none_type_0)


def test_case_5():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)
    var_1 = module_0.Config(env_prefix=var_0, converters=var_0)
    module_2.ABCMeta()


def test_case_6():
    config_0 = module_0.Config()
    none_type_0 = config_0.register_type(config_0)
    config_1 = module_0.Config()
    config_1.__getattr__(config_0)


def test_case_7():
    dict_0 = {}
    object_0 = module_3.object(**dict_0)
    bytes_0 = b"Service Unavailable"
    module_0.Config(env_prefix=object_0, converters=bytes_0)


def test_case_8():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_9():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)
    var_1 = var_0.__repr__()
    module_0.Config(var_1, keep_alive=var_1, converters=config_0)


def test_case_10():
    int_0 = 982
    str_0 = "P"
    config_0 = module_0.Config(env_prefix=str_0, keep_alive=int_0)
    config_1 = module_0.Config(converters=str_0)
    str_1 = "_nit"
    str_2 = ">~[f$hbj6"
    none_type_0 = config_1.__setitem__(str_2, config_0)
    var_0 = config_1.update_config(config_0)
    config_0.update_config(str_1)


def test_case_11():
    str_0 = "P"
    config_0 = module_0.Config()
    bytes_0 = b",\xa9*\x1fJ\xa3\xd7\xd8\xe3\xfb\xb7\xda\x98\xdc\xeb\xe4z\x00\x98"
    none_type_0 = config_0.register_type(config_0)
    module_0.Config(env_prefix=str_0, keep_alive=bytes_0, converters=config_0)
