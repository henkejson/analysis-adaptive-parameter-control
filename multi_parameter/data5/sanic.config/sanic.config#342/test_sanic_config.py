# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import inspect as module_1


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    config_0 = module_0.Config()
    none_type_0 = config_0.register_type(config_0)
    module_0.Config(env_prefix=config_0)


def test_case_2():
    config_0 = module_0.Config()
    none_type_0 = config_0.register_type(config_0)
    var_0 = module_1.getmembers(config_0)
    var_1 = config_0.update_config(config_0)
    var_0.update(*var_1)


def test_case_3():
    config_0 = module_0.Config()
    none_type_0 = None
    config_0.update_config(none_type_0)


def test_case_4():
    bytes_0 = b":\x8e\x12\xbeS\xe3\xc4\x07\x08C\xa00~"
    none_type_0 = None
    config_0 = module_0.Config(keep_alive=none_type_0)
    config_0.update_config(bytes_0)


def test_case_5():
    config_0 = module_0.Config()
    dict_0 = config_0.update_config(config_0)


def test_case_6():
    bytes_0 = b":\x8e\x12\xbeS\xe3\xc4\x07\x08C\xa00~"
    config_0 = module_0.Config(converters=bytes_0)
    none_type_0 = None
    config_1 = module_0.Config(converters=bytes_0)
    config_2 = module_0.Config(
        env_prefix=none_type_0, keep_alive=bytes_0, converters=none_type_0
    )
    config_1.load_environment_vars(config_1)


def test_case_7():
    none_type_0 = None
    config_0 = module_0.Config(keep_alive=none_type_0)
    config_1 = module_0.Config(converters=config_0)
    config_1.update_config(none_type_0)


def test_case_8():
    float_0 = 2109.736
    config_0 = module_0.Config(keep_alive=float_0)


def test_case_9():
    config_0 = module_0.Config()
    config_0.__getattr__(config_0)


def test_case_10():
    bool_0 = True
    module_0.Config(bool_0)


def test_case_11():
    config_0 = module_0.Config()
    var_0 = module_1.isclass(config_0)
    config_0.__setitem__(var_0, config_0)


def test_case_12():
    none_type_0 = None
    config_0 = module_0.Config(keep_alive=none_type_0)
    str_0 = "USE_UVLOOP"
    none_type_1 = config_0.__setitem__(str_0, str_0)
    dict_0 = {none_type_1: str_0}
    none_type_2 = config_0.register_type(dict_0)
    config_1 = module_0.Config(none_type_2, keep_alive=none_type_0, converters=config_0)
    var_0 = config_0.load_environment_vars()
    none_type_3 = config_0.register_type(var_0)
    config_0.register_type(var_0)
