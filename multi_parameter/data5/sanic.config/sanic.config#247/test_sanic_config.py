# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import sanic.http.http1 as module_1
import sanic.constants as module_2


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    config_0 = module_0.Config()
    none_type_0 = config_0.register_type(config_0)
    config_0.register_type(config_0)


def test_case_2():
    str_0 = "PROXIES_COUNT"
    config_0 = module_0.Config(env_prefix=str_0)
    var_0 = config_0.update_config(config_0)


def test_case_3():
    none_type_0 = None
    config_0 = module_0.Config(none_type_0, converters=none_type_0)
    config_0.update_config(none_type_0)


def test_case_4():
    none_type_0 = None
    config_0 = module_0.Config(converters=none_type_0)
    config_1 = module_0.Config(keep_alive=none_type_0, converters=none_type_0)
    config_0.__getattr__(config_0)


def test_case_5():
    list_0 = []
    config_0 = module_0.Config(keep_alive=list_0)
    config_0.update_config(list_0)


def test_case_6():
    str_0 = "PROXIES_COUNT"
    config_0 = module_0.Config(env_prefix=str_0)


def test_case_7():
    none_type_0 = None
    config_0 = module_0.Config(none_type_0, none_type_0, converters=none_type_0)


def test_case_8():
    bytes_0 = b"\x94d\xc2"
    none_type_0 = None
    config_0 = module_0.Config(none_type_0)
    config_0.update_config(bytes_0)


def test_case_9():
    list_0 = []
    config_0 = module_0.Config(keep_alive=list_0)
    str_0 = "|"
    config_1 = module_0.Config(list_0, str_0, converters=config_0)
    module_1.Http(list_0)


def test_case_10():
    config_0 = module_0.Config()
    list_0 = []
    config_1 = module_0.Config(keep_alive=list_0)
    config_2 = module_0.Config(config_0, converters=list_0)
    var_0 = config_2.update_config(config_1)
    var_1 = config_2.load_environment_vars()
    module_1.Http(list_0)


def test_case_11():
    config_0 = module_0.Config()
    none_type_0 = config_0.register_type(config_0)
    var_0 = module_2.LocalCertCreator.AUTO
    list_0 = []
    config_1 = module_0.Config(keep_alive=list_0)
    none_type_1 = config_0.__setitem__(var_0, none_type_0)
    list_1 = [config_0]
    none_type_2 = config_1.update(*list_1)
    config_1.update_config(list_0)
