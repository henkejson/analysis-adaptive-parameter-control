# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import inspect as module_1
import sanic.helpers as module_2


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    bytes_0 = b"\x0e0\x04\xa8\xe2\x0e\xba\x9c\xc0!\\$C\x91"
    module_0.Config(env_prefix=bytes_0, converters=bytes_0)


def test_case_2():
    bool_0 = False
    config_0 = module_0.Config(keep_alive=bool_0)
    none_type_0 = config_0.register_type(bool_0)


def test_case_3():
    str_0 = ""
    var_0 = module_1.isdatadescriptor(str_0)
    config_0 = module_0.Config(env_prefix=var_0, converters=var_0)
    var_1 = config_0.update_config(config_0)
    var_1.register(var_0, var_0)


def test_case_4():
    str_0 = ""
    str_1 = "A9`o?SIo4J-gl4"
    int_0 = -650
    dict_0 = {str_0: str_0, str_0: str_0, str_1: int_0}
    config_0 = module_0.Config(dict_0)


def test_case_5():
    config_0 = module_0.Config()
    var_0 = module_1.getmembers(config_0)
    config_0.update_config(var_0)


def test_case_6():
    default_0 = module_2.Default()
    bytes_0 = b"\x11y\x7f\x1c\x00h\xc3\x99\xbf\x03\xe1\x1a\xb3u0\x9e'c"
    config_0 = module_0.Config()
    config_0.update_config(bytes_0)


def test_case_7():
    str_0 = "\r}5\t\x0b#7M]OH?/"
    config_0 = module_0.Config(env_prefix=str_0)
    module_0.DescriptorMeta(str_0, *str_0)


def test_case_8():
    config_0 = module_0.Config()
    config_0.__getattr__(config_0)


def test_case_9():
    config_0 = module_0.Config()
    var_0 = config_0.load_environment_vars()
    config_0.update_config(var_0)


def test_case_10():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_11():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)
    none_type_0 = config_0.update()
    config_1 = module_0.Config()
    config_1.__setitem__(config_1, config_0)


def test_case_12():
    config_0 = module_0.Config()
    config_1 = module_0.Config(config_0, converters=config_0)
    var_0 = config_0.load_environment_vars()
    var_1 = config_1.load_environment_vars()
    var_1.register(config_0, config_0)
