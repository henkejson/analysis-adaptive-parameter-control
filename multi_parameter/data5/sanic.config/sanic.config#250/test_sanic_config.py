# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import inspect as module_1
import builtins as module_2


def test_case_0():
    bool_0 = True
    module_0.DescriptorMeta(bool_0)


def test_case_1():
    bool_0 = False
    config_0 = module_0.Config(keep_alive=bool_0)


def test_case_2():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0)


def test_case_3():
    str_0 = ""
    str_1 = 'Delete a cookie\n\n        This will effectively set it as Max-Age: 0, which a browser should\n        interpret it to mean: "delete the cookie".\n\n        Since it is a browser/client implementation, your results may vary\n        depending upon which client is being used.\n\n        See [Cookies](/en/guide/basics/cookies.html)\n\n        Args:\n            key (str): The key to be deleted\n            path (str, optional): Path of the cookie. Defaults to `"/"`.\n            domain (Optional[str], optional): Domain of the cookie. Defaults to `None`.\n            host_prefix (bool, optional): Whether to add __Host- as a prefix to the key. This requires that path="/", domain=None, and secure=True. Defaults to `False`.\n            secure_prefix (bool, optional): Whether to add __Secure- as a prefix to the key. This requires that secure=True. Defaults to `False`.\n        '
    dict_0 = {str_0: str_0, str_1: str_1, str_1: str_0, str_1: str_1}
    none_type_0 = None
    config_0 = module_0.Config(dict_0, keep_alive=none_type_0)


def test_case_4():
    config_0 = module_0.Config()
    config_0.__getattr__(config_0)


def test_case_5():
    config_0 = module_0.Config()
    str_0 = "paredaccept"
    var_0 = config_0.load_environment_vars(str_0)
    str_1 = "[p<_%Bd^_3 6"
    none_type_0 = config_0.__setitem__(str_1, var_0)
    var_0.__setitem__(str_1, str_1)


def test_case_6():
    bool_0 = True
    module_0.Config(converters=bool_0)


def test_case_7():
    none_type_0 = None
    config_0 = module_0.Config(keep_alive=none_type_0, converters=none_type_0)
    config_0.update_config(none_type_0)


def test_case_8():
    config_0 = module_0.Config()
    str_0 = "paredaccept"
    config_0.update_config(str_0)


def test_case_9():
    int_0 = 502
    var_0 = module_1.isclass(int_0)
    config_0 = module_0.Config(keep_alive=var_0, converters=var_0)
    var_1 = module_2.object()
    config_0.__getattr__(var_0)


def test_case_10():
    none_type_0 = None
    config_0 = module_0.Config(keep_alive=none_type_0, converters=none_type_0)
    none_type_1 = config_0.update(**config_0)


def test_case_11():
    config_0 = module_0.Config()
    str_0 = "paredaccept"
    int_0 = 144
    none_type_0 = None
    none_type_1 = config_0.__setattr__(str_0, int_0)
    str_1 = "[p<_%Bd^_3 6"
    none_type_2 = config_0.update_config(config_0)
    none_type_3 = config_0.__setitem__(str_1, str_0)
    var_0 = module_1.getmembers(int_0)
    var_0.__getattr__(none_type_0)


def test_case_12():
    none_type_0 = None
    none_type_1 = None
    config_0 = module_0.Config(keep_alive=none_type_0, converters=none_type_1)
    none_type_2 = config_0.register_type(none_type_1)
    none_type_3 = config_0.update(**config_0)
    config_0.update_config(none_type_1)


def test_case_13():
    bytes_0 = b"8'\xaf,\xe1\xa6\x84\xa5 \xa8\x10\xc9^\xa3\x94"
    module_0.Config(env_prefix=bytes_0)


def test_case_14():
    none_type_0 = None
    config_0 = module_0.Config(none_type_0, none_type_0)
    int_0 = 502
    var_0 = module_1.getmembers(int_0)
    config_1 = module_0.Config(keep_alive=var_0, converters=var_0)
    var_0.load_environment_vars()


def test_case_15():
    str_0 = "i*<:d0Ji9UTNeY"
    bytes_0 = b"Precondition Required"
    module_0.Config(env_prefix=str_0, converters=bytes_0)
