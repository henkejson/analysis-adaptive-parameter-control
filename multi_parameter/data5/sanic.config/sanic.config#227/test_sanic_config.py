# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    config_0 = module_0.Config()
    bytes_0 = b"\xcf\x92\xb8h\x93"
    var_0 = config_0.update_config(config_0)
    bool_0 = True
    none_type_0 = None
    config_1 = module_0.Config(none_type_0, none_type_0, converters=bytes_0)
    config_2 = module_0.Config(config_0, converters=none_type_0)
    str_0 = "G"
    config_3 = module_0.Config(env_prefix=str_0)
    config_3.update_config(bool_0)


def test_case_2():
    bytes_0 = b"\xcf\x92\xb8h\x93"
    config_0 = module_0.Config(keep_alive=bytes_0, converters=bytes_0)
    var_0 = config_0.update_config(config_0)
    config_1 = module_0.Config(var_0, var_0, converters=bytes_0)
    str_0 = "G"
    var_1 = config_1.load_environment_vars()
    config_2 = module_0.Config(env_prefix=str_0)
    config_2.__getattr__(var_1)


def test_case_3():
    none_type_0 = None
    config_0 = module_0.Config()
    config_0.update_config(none_type_0)


def test_case_4():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_5():
    str_0 = "F5B5*GROws\x0bk8%V}"
    module_0.Config(env_prefix=str_0, converters=str_0)


def test_case_6():
    config_0 = module_0.Config()
    config_0.__getattr__(config_0)


def test_case_7():
    str_0 = "G"
    config_0 = module_0.Config(env_prefix=str_0)


def test_case_8():
    str_0 = "VBd[p"
    config_0 = module_0.Config(keep_alive=str_0)
    str_1 = "\x0b\t"
    config_1 = module_0.Config(converters=str_1)
    var_0 = config_1.load_environment_vars()


def test_case_9():
    bytes_0 = b"\x85\x92\xb8\xbav\x93"
    none_type_0 = None
    config_0 = module_0.Config(none_type_0, none_type_0, converters=bytes_0)
    str_0 = "G"
    config_0.load_environment_vars(str_0)


def test_case_10():
    str_0 = "UNKNOWN"
    config_0 = module_0.Config()
    config_0.update_config(str_0)


def test_case_11():
    str_0 = "LOCAL_CERT_CREATOR"
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0)
    config_0.__setitem__(str_0, str_0)
