# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    str_0 = "*C^k%J"
    bool_0 = False
    config_0 = module_0.Config(env_prefix=str_0, keep_alive=bool_0)
    none_type_0 = config_0.update(**config_0)
    config_1 = module_0.Config()
    config_1.update_config(str_0)


def test_case_2():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.Config(env_prefix=tuple_0)


def test_case_3():
    bytes_0 = b"\xd0\x02:\xd7\xcc\x15\xaf\xa8\x8e\xf3\xdb6"
    str_0 = "y7"
    dict_0 = {str_0: str_0, str_0: str_0}
    none_type_0 = None
    config_0 = module_0.Config(dict_0, str_0, converters=none_type_0)
    none_type_1 = config_0.register_type(bytes_0)
    config_0.update_config(none_type_1)


def test_case_4():
    config_0 = module_0.Config()
    none_type_0 = None
    config_0.update_config(none_type_0)


def test_case_5():
    config_0 = module_0.Config()
    none_type_0 = config_0.update_config(config_0)


def test_case_6():
    str_0 = "*C^k%J"
    config_0 = module_0.Config(converters=str_0)


def test_case_7():
    str_0 = "The following objects are available for your convenience:"
    none_type_0 = None
    config_0 = module_0.Config(none_type_0)
    none_type_1 = config_0.__setitem__(str_0, str_0)


def test_case_8():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0, keep_alive=none_type_0)
    var_0 = config_0.update_config(config_0)


def test_case_9():
    config_0 = module_0.Config()
    config_0.log_response()


def test_case_10():
    str_0 = "ig\x0bobVbQR1RAE"
    bool_0 = False
    config_0 = module_0.Config(env_prefix=str_0, keep_alive=bool_0)
    config_0.__getattr__(config_0)


def test_case_11():
    str_0 = "r&'v\\b%nkQ%"
    module_0.Config(converters=str_0)


def test_case_12():
    str_0 = "*C^k%J"
    bool_0 = False
    config_0 = module_0.Config(env_prefix=str_0, keep_alive=bool_0)
    str_1 = "LOCAL_CERT_CREATOR"
    config_0.__setattr__(str_1, str_1)


def test_case_13():
    str_0 = "L"
    module_0.Config(env_prefix=str_0, keep_alive=str_0, converters=str_0)
