# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import inspect as module_1
import sanic.constants as module_2


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    bytes_0 = b"\xd8\x92]\xd9\xc3\x8f\xe9\x0b\xabgnC\x1c"
    config_0 = module_0.Config(keep_alive=bytes_0)
    none_type_0 = None
    config_1 = module_0.Config(keep_alive=none_type_0)
    config_0.__getattr__(config_0)


def test_case_2():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0)


def test_case_3():
    str_0 = "Parse `query_string` using `urllib.parse.parse_qsl`.\n\n        This methods is used by `query_args` propertyn but can be used\n        directly if you need to change default parameters.\n\n        Args:\n            keep_blank_values (bool): Flag indicating whether blank values in\n                percent-encoded queries should be treated as blank strings.\n                A `True` value indicates that blanks should be retained as\n                blank strings. The default `False` value indicates that\n                blank values are to be ignored and treated as if they were\n                not included.\n            strict_parsing (bool): Flag indicating what to do with\n                parsing errors. If `False` (the default), errors are\n                silently ignored. If `True`, errors raise a\n                `ValueError` exception.\n            encoding (str): Specify how to decode percent-encoded sequences\n                into Unicode characters, as accepted by the\n                `bytes.decode()` method.\n            errors (str): Specify how to decode percent-encoded sequences\n                into Unicode characters, as accepted by the\n                `bytes.decode()` method.\n\n        Returns:\n            list: A list of tuples containing the parsed arguments.\n        "
    module_0.Config(str_0, str_0, converters=str_0)


def test_case_4():
    none_type_0 = None
    config_0 = module_0.Config(keep_alive=none_type_0)
    var_0 = config_0.update_config(config_0)
    var_1 = module_1.getmembers(config_0)


def test_case_5():
    config_0 = module_0.Config()
    config_0.__setitem__(config_0, config_0)


def test_case_6():
    local_cert_creator_0 = module_2.LocalCertCreator.AUTO
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=local_cert_creator_0, keep_alive=none_type_0)


def test_case_7():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_8():
    config_0 = module_0.Config()
    int_0 = 4166
    config_0.update_config(int_0)


def test_case_9():
    none_type_0 = None
    config_0 = module_0.Config(keep_alive=none_type_0)
    none_type_1 = config_0.register_type(config_0)
    var_0 = config_0.update_config(config_0)


def test_case_10():
    none_type_0 = None
    config_0 = module_0.Config(keep_alive=none_type_0)
    none_type_1 = config_0.register_type(none_type_0)
    var_0 = config_0.update_config(config_0)
    config_1 = module_0.Config(converters=config_0)
    config_0.update_config(none_type_0)


def test_case_11():
    none_type_0 = None
    config_0 = module_0.Config(keep_alive=none_type_0)
    none_type_1 = config_0.register_type(none_type_0)
    config_0.register_type(none_type_1)


def test_case_12():
    none_type_0 = None
    config_0 = module_0.Config(keep_alive=none_type_0)
    none_type_1 = config_0.register_type(none_type_0)
    str_0 = "INSPECTOR_PORT"
    config_0.update_config(str_0)


def test_case_13():
    none_type_0 = None
    config_0 = module_0.Config(keep_alive=none_type_0)
    none_type_1 = config_0.register_type(none_type_0)
    str_0 = "LOCAL_CERT_CREATOR"
    config_0.__setitem__(str_0, none_type_1)


def test_case_14():
    str_0 = ""
    config_0 = module_0.Config(env_prefix=str_0)
    config_0.load_environment_vars(str_0)
