# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import inspect as module_1


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    bytes_0 = b"\xc6\x9e\xf7.N\xa56C\xa9\xdeJ\xdb"
    int_0 = -1776
    dict_0 = {bytes_0: bytes_0, bytes_0: int_0, int_0: int_0}
    dict_1 = {}
    config_0 = module_0.Config(dict_1, dict_1)
    none_type_0 = config_0.register_type(dict_0)


def test_case_2():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)
    var_1 = config_0.load_environment_vars()
    config_1 = module_0.Config(converters=var_1)
    none_type_0 = config_1.register_type(var_1)
    var_2 = module_1.getmembers(config_0)


def test_case_3():
    none_type_0 = None
    none_type_1 = None
    config_0 = module_0.Config(
        none_type_0, none_type_1, none_type_1, converters=none_type_1
    )
    set_0 = set()
    var_0 = module_1.isdatadescriptor(set_0)
    str_0 = "$"
    none_type_2 = config_0.__setitem__(str_0, none_type_0)
    module_0.Config(env_prefix=config_0, keep_alive=var_0)


def test_case_4():
    config_0 = module_0.Config()
    str_0 = "R"
    none_type_0 = config_0.__setitem__(str_0, config_0)


def test_case_5():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_6():
    config_0 = module_0.Config()
    config_1 = module_0.Config(config_0)
    module_0.DescriptorMeta(config_0)


def test_case_7():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)
    config_0.__getattr__(config_0)


def test_case_8():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)
    config_0.update_config(var_0)


def test_case_9():
    none_type_0 = None
    str_0 = "<#aC#sWE"
    module_0.Config(none_type_0, converters=str_0)


def test_case_10():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)
    config_1 = module_0.Config()
    none_type_0 = config_0.register_type(var_0)
    none_type_1 = None
    str_0 = "nmmG'."
    none_type_2 = config_0.__setattr__(str_0, none_type_1)
    var_1 = module_0.Config()
    config_2 = module_0.Config(converters=var_1)
    config_0.register_type(none_type_2)


def test_case_11():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)
    str_0 = "nmmG'."
    config_0.update_config(str_0)


def test_case_12():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)
    str_0 = "LOCAL_CERT_CREATOR"
    config_0.__setattr__(str_0, config_0)


def test_case_13():
    config_0 = module_0.Config()
    str_0 = "H"
    none_type_0 = config_0.__setattr__(str_0, str_0)
    var_0 = config_0.load_environment_vars(str_0)
    config_1 = module_0.Config()
    var_0.register_type(str_0)


def test_case_14():
    config_0 = module_0.Config()
    complex_0 = 2877.40055 + 4988.8j
    none_type_0 = config_0.register_type(complex_0)
    str_0 = "nmmG'."
    str_1 = "H"
    none_type_1 = config_0.__setattr__(str_1, str_0)
    config_0.load_environment_vars(str_1)
