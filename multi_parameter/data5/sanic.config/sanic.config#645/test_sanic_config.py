# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    bytes_0 = b"\xbd\xe7\xdb\xc2,\x05\xc5\xee\xfa\xe8\xea\x08\x83\xdey\xd5E\xcc"
    config_0 = module_0.Config(converters=bytes_0)
    none_type_0 = config_0.update(**config_0)
    config_1 = module_0.Config()


def test_case_2():
    none_type_0 = None
    config_0 = module_0.Config(none_type_0, converters=none_type_0)
    bool_0 = True
    none_type_1 = None
    config_1 = module_0.Config(converters=none_type_1)
    config_2 = module_0.Config(keep_alive=bool_0)
    module_0.DescriptorMeta(config_2)


def test_case_3():
    none_type_0 = None
    config_0 = module_0.Config(none_type_0, converters=none_type_0)
    config_1 = module_0.Config(env_prefix=none_type_0)
    config_0.__getattr__(none_type_0)


def test_case_4():
    bytes_0 = b"\xbd\xe7\xdb\xc2,\x05\xc5\xee\xfa\xe8\xea\x08\x83\xdey\xd5E\xcc"
    config_0 = module_0.Config(converters=bytes_0)
    none_type_0 = config_0.update(**config_0)
    config_0.__getattr__(bytes_0)


def test_case_5():
    bool_0 = True
    config_0 = module_0.Config()
    config_0.update_config(bool_0)


def test_case_6():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_7():
    str_0 = '"n6sQ\\3l13cr^'
    str_1 = "LOCAL_CERT_CREATOR"
    dict_0 = {str_0: str_0}
    none_type_0 = None
    config_0 = module_0.Config(dict_0, keep_alive=none_type_0)
    config_0.__setitem__(str_1, str_1)


def test_case_8():
    none_type_0 = None
    config_0 = module_0.Config(none_type_0, converters=none_type_0)
    config_0.__getattr__(config_0)


def test_case_9():
    str_0 = '"n6sQ\\3l13cr^'
    none_type_0 = None
    module_0.Config(env_prefix=str_0, keep_alive=none_type_0, converters=str_0)


def test_case_10():
    str_0 = "INSPECTOR_API_KEY"
    bool_0 = False
    config_0 = module_0.Config(env_prefix=str_0, keep_alive=bool_0)
    bytes_0 = b"\xbd\xe7\xdb\xc2,\x05\xc5\xee\xfa\xe8\xea\x08\x83\xdey\xd5E\xcc"
    bool_1 = True
    config_1 = module_0.Config(converters=bytes_0)
    none_type_0 = config_1.update(**config_1)
    var_0 = config_1.update_config(config_1)
    config_1.update_config(bool_1)


def test_case_11():
    bytes_0 = b"\xbd\xe7\xdb\xc2,\x05\xc5\xee\xfa\xe8\xea\x08\x83\xdey\xd5E\xcc"
    config_0 = module_0.Config(converters=bytes_0)
    var_0 = config_0.update_config(config_0)
    config_1 = module_0.Config(config_0, converters=var_0)
    none_type_0 = config_1.update()
    str_0 = var_0.__str__()
    bytes_0.__subclasscheck__(bytes_0, none_type_0)


def test_case_12():
    bytes_0 = b"\xbd\xe7\xdb\xc2,\x05\xc5\xee\xfa\xe8\xea\x08\x83\xdey\xd5E\xcc"
    config_0 = module_0.Config(converters=bytes_0)
    none_type_0 = config_0.update(**config_0)
    config_0.update_config(bytes_0)


def test_case_13():
    bytes_0 = b"\xbd\xe7\xdb\xc2,\x05\xc5\xee\xfa\xe8\xea\x08\x83\xdey\xd5E\xcc"
    str_0 = ""
    config_0 = module_0.Config(converters=bytes_0)
    config_0.load_environment_vars(str_0)
