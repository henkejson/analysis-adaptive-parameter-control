# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import inspect as module_1


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    bytes_0 = b"y\xaa\x85\xb0\xa1c}\xe2\x0b\x7f"
    bool_0 = True
    config_0 = module_0.Config(keep_alive=bool_0)
    config_0.__getattr__(bytes_0)


def test_case_2():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0)


def test_case_3():
    none_type_0 = None
    config_0 = module_0.Config(keep_alive=none_type_0, converters=none_type_0)
    none_type_1 = config_0.register_type(config_0)
    config_0.__subclasscheck__(none_type_1, none_type_0)


def test_case_4():
    none_type_0 = None
    config_0 = module_0.Config(none_type_0, converters=none_type_0)
    str_0 = "WEBSOCKET_MAX_SIZE"
    none_type_1 = config_0.__setattr__(str_0, str_0)
    str_1 = ",4uHS&}\\wk^$e"
    none_type_2 = config_0.__setitem__(str_1, none_type_0)
    none_type_3 = None
    none_type_4 = config_0.register_type(config_0)
    config_0.update_config(none_type_3)


def test_case_5():
    none_type_0 = None
    config_0 = module_0.Config(converters=none_type_0)
    config_1 = module_0.Config(keep_alive=none_type_0, converters=none_type_0)
    none_type_1 = config_0.update()
    var_0 = config_0.update_config(config_0)
    list_0 = [none_type_1, none_type_0, config_0, config_1]
    module_0.Config(env_prefix=list_0, keep_alive=none_type_1)


def test_case_6():
    bytes_0 = b"\xd0\xd6\x1eXO\x1c\x08\xd4/\xee\xa9\xc1\xa8E"
    var_0 = module_1.isdatadescriptor(bytes_0)
    bytes_1 = b"\xee\x1f\xf7"
    module_0.Config(bytes_1)


def test_case_7():
    none_type_0 = None
    config_0 = module_0.Config(converters=none_type_0)
    config_1 = module_0.Config(keep_alive=none_type_0, converters=none_type_0)
    config_1.__getattr__(config_1)


def test_case_8():
    none_type_0 = None
    config_0 = module_0.Config(env_prefix=none_type_0)
    var_0 = config_0.update_config(config_0)


def test_case_9():
    bool_0 = False
    config_0 = module_0.Config()
    config_0.update_config(bool_0)


def test_case_10():
    none_type_0 = None
    config_0 = module_0.Config(converters=none_type_0)
    config_1 = module_0.Config(keep_alive=none_type_0, converters=none_type_0)
    none_type_1 = config_0.update()
    var_0 = config_0.update_config(config_0)
    config_2 = module_0.Config(converters=config_1)
    none_type_2 = config_2.register_type(none_type_0)
    var_0.load_environment_vars()


def test_case_11():
    none_type_0 = None
    config_0 = module_0.Config(keep_alive=none_type_0, converters=none_type_0)
    none_type_1 = config_0.register_type(config_0)
    str_0 = "]}9nnl.by646]o4"
    config_1 = module_0.Config(env_prefix=none_type_1)
    config_1.update_config(str_0)


def test_case_12():
    none_type_0 = None
    config_0 = module_0.Config(none_type_0, converters=none_type_0)
    none_type_1 = config_0.update(**config_0)
    var_0 = module_1.isclass(none_type_1)
    none_type_2 = config_0.register_type(var_0)
    config_0.register_type(var_0)


def test_case_13():
    none_type_0 = None
    config_0 = module_0.Config(none_type_0, converters=none_type_0)
    var_0 = module_1.getmembers(config_0)
    list_0 = [var_0, config_0, var_0, var_0, var_0]
    none_type_1 = config_0.update(*list_0)
    list_0.respond(var_0)


def test_case_14():
    none_type_0 = None
    config_0 = module_0.Config(none_type_0, converters=none_type_0)
    str_0 = "LOCAL_CERT_CREATOR"
    config_0.__setitem__(str_0, none_type_0)


def test_case_15():
    none_type_0 = None
    config_0 = module_0.Config(none_type_0, converters=none_type_0)
    var_0 = module_1.getmembers(config_0)
    list_0 = [var_0, var_0, var_0]
    none_type_1 = config_0.update(*list_0)
    none_type_2 = config_0.update(*list_0)
    var_0.respond(var_0)


def test_case_16():
    none_type_0 = None
    config_0 = module_0.Config(none_type_0, converters=none_type_0)
    var_0 = module_1.getmembers(config_0)
    none_type_1 = config_0.update(**config_0)
    list_0 = [var_0, var_0, var_0]
    none_type_2 = config_0.update(*list_0)
    config_1 = module_0.Config(config_0, none_type_0, var_0, converters=none_type_1)
    dict_0 = {}
    config_2 = module_0.Config(dict_0)
    var_0.respond(config_1)
