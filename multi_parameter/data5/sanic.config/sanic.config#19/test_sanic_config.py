# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    bool_0 = False
    str_0 = "\x0c8|n\n_%/SFX\\~b\np"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.Config(bool_0, str_0, converters=list_0)


def test_case_2():
    bool_0 = False
    config_0 = module_0.Config(env_prefix=bool_0, keep_alive=bool_0)
    config_1 = module_0.Config(config_0, keep_alive=bool_0)
    config_1.__getattr__(bool_0)


def test_case_3():
    str_0 = "H"
    none_type_0 = None
    config_0 = module_0.Config(none_type_0, str_0, converters=none_type_0)


def test_case_4():
    bool_0 = False
    config_0 = module_0.Config()
    config_0.__getattr__(bool_0)


def test_case_5():
    none_type_0 = None
    config_0 = module_0.Config(keep_alive=none_type_0)
    config_0.__getattr__(config_0)


def test_case_6():
    none_type_0 = None
    config_0 = module_0.Config(keep_alive=none_type_0)
    str_0 = "SSL dict needs filenames for cert and key."
    none_type_1 = config_0.__setattr__(str_0, none_type_0)
    none_type_2 = config_0.register_type(none_type_0)
    config_1 = module_0.Config(keep_alive=none_type_0, converters=none_type_0)


def test_case_7():
    none_type_0 = None
    config_0 = module_0.Config()
    config_0.update_config(none_type_0)


def test_case_8():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_9():
    bool_0 = False
    config_0 = module_0.Config(env_prefix=bool_0, keep_alive=bool_0)
    str_0 = "\\"
    none_type_0 = config_0.__setitem__(str_0, bool_0)
    bytes_0 = b"\xd5\xa4\xeb"
    config_0.update_config(bytes_0)


def test_case_10():
    none_type_0 = None
    config_0 = module_0.Config(keep_alive=none_type_0)
    config_1 = module_0.Config(none_type_0, converters=config_0)
    config_0.__getattr__(config_0)


def test_case_11():
    config_0 = module_0.Config()
    none_type_0 = None
    str_0 = "LOCAL_CERT_CREATOR"
    config_0.__setattr__(str_0, none_type_0)


def test_case_12():
    none_type_0 = None
    config_0 = module_0.Config(keep_alive=none_type_0)
    config_1 = module_0.Config(env_prefix=none_type_0)
    none_type_1 = config_0.register_type(none_type_0)
    str_0 = "H"
    none_type_2 = config_0.update()
    var_0 = config_1.update_config(config_1)
    config_0.load_environment_vars(str_0)
