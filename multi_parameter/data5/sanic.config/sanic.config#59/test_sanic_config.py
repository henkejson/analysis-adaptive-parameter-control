# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sanic.config as module_0
import inspect as module_1


def test_case_0():
    config_0 = module_0.Config()


def test_case_1():
    bool_0 = True
    config_0 = module_0.Config(keep_alive=bool_0)
    var_0 = config_0.update_config(config_0)
    var_1 = module_1.getmembers(config_0)
    none_type_0 = config_0.register_type(config_0)
    config_1 = module_0.Config()
    config_2 = module_0.Config(converters=var_1)
    module_0.Config(var_1, var_1)


def test_case_2():
    bool_0 = True
    config_0 = module_0.Config(keep_alive=bool_0)
    var_0 = config_0.update_config(config_0)
    var_1 = module_1.getmembers(config_0)
    var_2 = var_1.__repr__()
    module_0.Config(env_prefix=bool_0, keep_alive=var_2)


def test_case_3():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)
    config_0.update_config(var_0)


def test_case_4():
    config_0 = module_0.Config()
    var_0 = config_0.update_config(config_0)


def test_case_5():
    bool_0 = True
    config_0 = module_0.Config(keep_alive=bool_0)
    var_0 = config_0.update_config(config_0)
    config_1 = module_0.Config()
    var_1 = module_1.getmembers(config_0)
    none_type_0 = config_1.register_type(config_1)
    config_2 = module_0.Config()
    var_2 = config_2.load_environment_vars()
    var_3 = var_2.__repr__()
    config_2.update(*var_1)


def test_case_6():
    config_0 = module_0.Config()
    str_0 = "=q^b=~OSo^"
    none_type_0 = config_0.__setitem__(str_0, config_0)
    var_0 = config_0.update_config(config_0)


def test_case_7():
    bool_0 = False
    config_0 = module_0.Config(keep_alive=bool_0)
    var_0 = config_0.update_config(config_0)
    config_1 = module_0.Config()
    none_type_0 = module_1.getmembers(config_0)
    var_1 = config_0.load_environment_vars()
    config_2 = module_0.Config()
    var_2 = var_0.__bool__()
    config_3 = module_0.Config(env_prefix=bool_0)


def test_case_8():
    set_0 = set()
    bool_0 = True
    config_0 = module_0.Config(keep_alive=bool_0)
    var_0 = config_0.update_config(config_0)
    config_1 = module_0.Config()
    var_1 = module_1.getmembers(config_0)
    config_1.__getattr__(set_0)


def test_case_9():
    bool_0 = True
    config_0 = module_0.Config(keep_alive=bool_0)
    var_0 = config_0.update_config(config_0)
    var_1 = module_1.getmembers(config_0)
    none_type_0 = config_0.register_type(config_0)
    str_0 = "Zd}i_~+Ig59y}\r}{"
    var_2 = var_0.__repr__()
    config_0.update_config(str_0)


def test_case_10():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_0.Config(keep_alive=none_type_0, converters=list_0)


def test_case_11():
    bool_0 = True
    config_0 = module_0.Config(keep_alive=bool_0)
    var_0 = module_1.getmembers(config_0)
    list_0 = [var_0, var_0, config_0]
    none_type_0 = config_0.update(*list_0)
    none_type_0.load_environment_vars(var_0)


def test_case_12():
    bytes_0 = b"U\xf4`\xff*\xb3\xd1\xd4\xfe\xd7\xa9\xdf\xa1\xef\\\xad\xc8"
    set_0 = {bytes_0, bytes_0, bytes_0}
    config_0 = module_0.Config(keep_alive=set_0, converters=bytes_0)
    bool_0 = True
    config_1 = module_0.Config(keep_alive=bool_0)
    str_0 = "LOCAL_CERT_CREATOR"
    config_0.__setitem__(str_0, bytes_0)
