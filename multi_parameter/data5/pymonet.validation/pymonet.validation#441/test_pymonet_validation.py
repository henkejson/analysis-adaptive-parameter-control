# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    str_0 = "Aj8VA_F=eU"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(str_0)


def test_case_1():
    bytes_0 = b"\xda\xef\x07\xd8\x1a\xba\xba\xd5t\x9b\xe7\xb4\x88\xd0"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()


def test_case_2():
    str_0 = "7@v!v2S18l)u8(/uDTIX"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()


def test_case_3():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_maybe()
    validation_0.ap(var_0)


def test_case_4():
    str_0 = "qx6 L-(U"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()


def test_case_5():
    str_0 = 'qZd\\"0;'
    validation_0 = module_0.Validation(str_0, str_0)


def test_case_6():
    str_0 = "$Ka*0"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.is_fail()


def test_case_7():
    str_0 = ".bH\x0b+Oc<J'L-IeK{M"
    validation_0 = module_0.Validation(str_0, str_0)
    validation_0.map(validation_0)


def test_case_8():
    bytes_0 = b"\x8f\xef\x07\xd8\x1a\x89\xba\xd5t\x9b\xe7\xb4\x88\xd0"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_0.bind(validation_0)


def test_case_9():
    str_0 = "C6?BG#%es"
    validation_0 = module_0.Validation(str_0, str_0)
    validation_0.ap(validation_0)


def test_case_10():
    str_0 = "qxI -W-(U"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_box()
    validation_1 = module_0.Validation(str_0, str_0)


def test_case_11():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_lazy()


def test_case_12():
    int_0 = 0
    validation_0 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_box()
    var_2 = var_1.to_either()
    var_3 = var_2.to_try()
    validation_1 = module_0.Validation(var_3, var_2)


def test_case_13():
    str_0 = "_zpyWH\rRB&jw`a3m3"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_try()


def test_case_14():
    bytes_0 = b"Iv\xc3\x96cJ2\xd8"
    bool_0 = True
    validation_0 = module_0.Validation(bytes_0, bool_0)
    var_0 = validation_0.__eq__(validation_0)
    var_0.bind(var_0)


def test_case_15():
    bytes_0 = b"Iv\xc3\x96cJ2\xd8"
    none_type_0 = None
    validation_0 = module_0.Validation(bytes_0, none_type_0)
    bool_0 = False
    validation_1 = module_0.Validation(bytes_0, bool_0)
    var_0 = validation_0.__eq__(validation_1)
    var_0.to_box()


def test_case_16():
    none_type_0 = None
    int_0 = -950
    validation_0 = module_0.Validation(none_type_0, int_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.__str__()
    none_type_1 = None
    tuple_0 = ()
    validation_1 = module_0.Validation(tuple_0, tuple_0)
    var_2 = validation_1.to_either()
    var_3 = var_2.to_maybe()
    var_3.bind(none_type_1)


def test_case_17():
    str_0 = ".bH\x0b+Oc<J'L-IeK{M"
    list_0 = []
    validation_0 = module_0.Validation(str_0, list_0)
    var_0 = validation_0.__str__()
    var_0.to_maybe()
