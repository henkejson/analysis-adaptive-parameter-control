# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    str_0 = "SzL$%&{ m5x\nkEqe4>"
    tuple_0 = ()
    none_type_0 = None
    validation_0 = module_0.Validation(tuple_0, none_type_0)
    var_0 = validation_0.__eq__(str_0)
    none_type_0.to_try()


def test_case_1():
    bytes_0 = b"j2\xd5\xe1\x81\x94w\xd7k"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.__str__()


def test_case_2():
    bytes_0 = b""
    str_0 = "qF.\x0ba0<\nv_;C"
    set_0 = {str_0, str_0}
    validation_0 = module_0.Validation(set_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.__eq__(bytes_0)


def test_case_3():
    bytes_0 = b"\xc4f\xc8\x03\xac\xfb\xde\x9dD\xe5/\xd6\xde\xe8\xbb\xf4l\x0e"
    validation_0 = module_0.Validation(bytes_0, bytes_0)


def test_case_4():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.to_either()


def test_case_5():
    bytes_0 = b'\x7f\x01\x1e\x8a\xfc\x9e\xb6F\xdb\xa6"\x07\xf3\x80'
    bytes_1 = b"\xa6O\\\x9dwq\xfa'\x8d\x9d\x80zz\xbf\xaf"
    validation_0 = module_0.Validation(bytes_1, bytes_1)
    var_0 = validation_0.is_fail()
    var_0.map(bytes_0)


def test_case_6():
    str_0 = "SzL$%&{ m5x\nkEqe4>"
    tuple_0 = ()
    none_type_0 = None
    validation_0 = module_0.Validation(tuple_0, none_type_0)
    var_0 = validation_0.__eq__(str_0)
    validation_0.map(var_0)


def test_case_7():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.bind(bool_0)


def test_case_8():
    bool_0 = False
    none_type_0 = None
    validation_0 = module_0.Validation(bool_0, none_type_0)
    validation_0.ap(validation_0)


def test_case_9():
    bytes_0 = b"\xc4f\xc8\x03\xac\xfb\xde\x9dD\xe5/\xd6\xde\xe8\xbb\xf4l\x0e"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    validation_0 = module_0.Validation(bytes_0, dict_0)
    var_0 = validation_0.to_maybe()
    validation_1 = module_0.Validation(bytes_0, bytes_0)
    var_1 = validation_1.to_either()
    var_2 = validation_1.to_box()
    var_2.is_fail()


def test_case_10():
    str_0 = "\n        Take function, store it and call with Task value during calling fork function.\n        Return result of called.\n\n        :param fn: mapper function\n        :type fn: Function(value) -> Task[reject, mapped_value]\n        :returns:  new Task with mapper resolve attribute\n        :rtype: Task[reject, mapped_value]\n        "
    tuple_0 = ()
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.__eq__(tuple_0)
    var_2 = var_1.__eq__(str_0)
    var_2.to_maybe()


def test_case_11():
    bytes_0 = b"\xc4f\xc8\x03\xac\xfb\xde\x9dD\xe5/\xd6\xde\xe8\xbb\xf4l\x0e"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    validation_0 = module_0.Validation(bytes_0, dict_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.__eq__(validation_0)
    var_2 = var_0.to_try()
    validation_1 = module_0.Validation(bytes_0, bytes_0)
    var_3 = validation_1.to_either()
    var_4 = var_3.__str__()
    var_5 = var_0.ap(var_2)
    var_5.to_either()


def test_case_12():
    int_0 = 16
    dict_0 = {int_0: int_0}
    validation_0 = module_0.Validation(int_0, dict_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_lazy()
    validation_1 = module_0.Validation(dict_0, dict_0)
    var_2 = validation_1.to_try()
    var_3 = validation_1.is_success()


def test_case_13():
    bytes_0 = b"\xc4f\xc8\x03\xac\xfb\xde\x9dD\xe5/\xd6\xde\xe8\xbb\xf4l\x0e"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    validation_0 = module_0.Validation(bytes_0, dict_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.__eq__(validation_0)
    var_2 = var_0.to_try()
    validation_1 = module_0.Validation(bytes_0, bytes_0)
    var_3 = dict_0.__str__()
    dict_0.to_try()


def test_case_14():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    none_type_0 = None
    var_0 = validation_0.__eq__(none_type_0)
    var_1 = validation_0.to_try()
    var_2 = validation_0.to_maybe()
    var_3 = var_2.__str__()
    var_4 = validation_0.to_either()
    var_3.to_box()


def test_case_15():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_lazy()
    var_0.to_lazy()


def test_case_16():
    bytes_0 = b"\xc4f\xc8\x03\xac\xfb\xde\x9dD\xe5/\xd6\xde\xe8\xbb\xf4l\x0e"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    validation_0 = module_0.Validation(bytes_0, dict_0)
    none_type_0 = None
    var_0 = validation_0.to_try()
    var_1 = validation_0.to_maybe()
    var_2 = validation_0.__eq__(validation_0)
    var_3 = var_1.to_try()
    validation_1 = module_0.Validation(dict_0, dict_0)
    var_4 = validation_1.to_either()
    var_5 = validation_1.__str__()
    var_6 = var_1.bind(none_type_0)
    var_7 = var_2.__str__()
    validation_2 = module_0.Validation(validation_0, none_type_0)
    var_8 = validation_2.to_lazy()
    var_9 = validation_0.__eq__(validation_2)
    var_10 = var_9.__str__()
