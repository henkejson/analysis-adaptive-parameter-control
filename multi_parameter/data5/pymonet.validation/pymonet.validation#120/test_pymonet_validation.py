# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    none_type_0 = None
    set_0 = set()
    none_type_1 = None
    validation_0 = module_0.Validation(set_0, none_type_1)
    var_0 = validation_0.__eq__(none_type_0)
    var_0.to_either()


def test_case_1():
    bool_0 = True
    tuple_0 = ()
    validation_0 = module_0.Validation(bool_0, tuple_0)
    var_0 = validation_0.__str__()
    var_1 = var_0.__eq__(bool_0)
    var_1.is_success()


def test_case_2():
    bytes_0 = b")V\xebc\x13\nl\x05\xab"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_try()
    var_1 = validation_0.to_either()
    var_2 = var_0.map(var_1)
    var_0.is_fail()


def test_case_3():
    tuple_0 = ()
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, tuple_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.__str__()
    var_1.bind(none_type_0)


def test_case_4():
    str_0 = ",q+"
    set_0 = {str_0}
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_maybe()
    var_0.to_maybe()


def test_case_5():
    bytes_0 = b"\x95v\x92e^"
    validation_0 = module_0.Validation(bytes_0, bytes_0)


def test_case_6():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.to_maybe()


def test_case_7():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.is_fail()


def test_case_8():
    bool_0 = False
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.map(bool_0)


def test_case_9():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)
    complex_0 = 562 + 18.535947j
    validation_1 = module_0.Validation(complex_0, complex_0)
    validation_1.bind(validation_1)


def test_case_10():
    none_type_0 = None
    none_type_1 = None
    validation_0 = module_0.Validation(none_type_1, none_type_1)
    validation_0.ap(none_type_0)


def test_case_11():
    int_0 = 1
    validation_0 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.__eq__(validation_0)
    validation_0.bind(var_1)


def test_case_12():
    bytes_0 = b"\x90\x9d\xb4F%\xd1\xe9\x99\xf9\xe5\xf5\\~\xab\xc0a\xf8\xf4\xa0\xde"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    bytes_1 = b"\xe1"
    var_0 = validation_0.to_lazy()
    var_1 = var_0.__eq__(var_0)
    bool_0 = True
    validation_1 = module_0.Validation(bool_0, bool_0)
    var_2 = validation_1.to_lazy()
    var_3 = var_2.to_try()
    var_3.bind(bytes_1)


def test_case_13():
    int_0 = 1147
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.to_try()


def test_case_14():
    int_0 = 1
    validation_0 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.__eq__(validation_0)
    int_0.is_fail()


def test_case_15():
    str_0 = "/1("
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    bytes_0 = b"\x93\xaf"
    dict_0 = {}
    tuple_0 = (dict_0,)
    validation_1 = module_0.Validation(tuple_0, tuple_0)
    var_1 = validation_1.to_box()
    var_2 = var_1.to_try()
    var_2.ap(bytes_0)


def test_case_16():
    tuple_0 = ()
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, tuple_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_lazy()
    var_2 = validation_0.__str__()
    var_2.to_lazy()


def test_case_17():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_try()
    var_1 = validation_0.__eq__(validation_0)
    validation_1 = module_0.Validation(var_1, validation_0)
    var_2 = validation_1.to_box()
    var_3 = validation_1.__eq__(validation_0)
    var_3.bind(var_1)
