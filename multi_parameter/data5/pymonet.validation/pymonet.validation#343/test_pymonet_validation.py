# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bool_0 = True
    bool_1 = False
    validation_0 = module_0.Validation(bool_1, bool_1)
    var_0 = validation_0.__eq__(bool_0)
    validation_0.__str__()


def test_case_1():
    bytes_0 = b"|4\x80\xd66Cr"
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.__eq__(bytes_0)
    var_1.to_lazy()


def test_case_2():
    bytes_0 = b"\xde y\x89\r"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_lazy()
    var_2 = var_1.to_box()
    var_1.is_fail()


def test_case_3():
    bytes_0 = b"\x92?\x8b\x00~Q\x88\xc7\x81n\xb1\xe3E\x1e\x00\xe1&-\x9d"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()


def test_case_4():
    float_0 = -213.932949
    validation_0 = module_0.Validation(float_0, float_0)


def test_case_5():
    str_0 = "\n        Transform Either to Maybe.\n\n        :returns: Empty Maybe\n        :rtype: Maybe[None]\n        "
    str_1 = ")Id}_uj2Yt\nlr"
    validation_0 = module_0.Validation(str_0, str_1)
    var_0 = validation_0.to_maybe()
    validation_1 = module_0.Validation(str_1, str_1)
    var_1 = var_0.to_either()
    validation_0.map(var_0)


def test_case_6():
    tuple_0 = ()
    none_type_0 = None
    none_type_1 = None
    validation_0 = module_0.Validation(tuple_0, none_type_1)
    validation_0.bind(none_type_0)


def test_case_7():
    bytes_0 = b"e(s\x02\xd8\x9f*\x8b\xa4\x91\xc0\xd8\xb12\xf3L"
    none_type_0 = None
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_0.ap(none_type_0)


def test_case_8():
    bytes_0 = b"\x92?\x8b\x00~Q\x88\xc7\x81n\xb1\xe3E\x1e\x00\xe1&-\x9d"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.__str__()
    var_2 = validation_0.to_maybe()


def test_case_9():
    str_0 = "\t,JxpP@l6XT"
    none_type_0 = None
    validation_0 = module_0.Validation(str_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.to_box()
    var_0.to_lazy()


def test_case_10():
    int_0 = 3798
    validation_0 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_try()
    validation_1 = module_0.Validation(var_0, var_0)
    var_2 = validation_1.__eq__(validation_1)
    validation_1.is_success()


def test_case_11():
    bytes_0 = b"9\xbb\x9e\t\xe5X\x00\xcf\x95_"
    str_0 = '"2IZ8 RNi/|fk1ki{*K'
    validation_0 = module_0.Validation(str_0, bytes_0)
    var_0 = validation_0.to_try()
    validation_1 = module_0.Validation(bytes_0, str_0)
    var_1 = validation_1.to_maybe()
    var_2 = validation_1.to_maybe()
    var_3 = var_2.__str__()
    var_3.to_maybe()


def test_case_12():
    complex_0 = -372.17767 + 4639.87j
    str_0 = "ROHgBHn2L1|4?\\Zd"
    validation_0 = module_0.Validation(complex_0, str_0)
    var_0 = validation_0.__str__()
    var_0.is_fail()


def test_case_13():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.is_fail()


def test_case_14():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.__str__()
    var_0.is_fail()


def test_case_15():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_0.is_success()


def test_case_16():
    none_type_0 = None
    none_type_1 = None
    set_0 = set()
    tuple_0 = ()
    validation_0 = module_0.Validation(none_type_0, tuple_0)
    validation_1 = module_0.Validation(none_type_1, set_0)
    var_0 = validation_1.to_maybe()
    var_1 = var_0.to_box()
    var_2 = var_1.to_maybe()
    var_2.ap(none_type_0)


def test_case_17():
    int_0 = 3798
    validation_0 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_try()
    validation_1 = module_0.Validation(var_0, var_0)
    var_2 = validation_1.__eq__(validation_1)
    var_3 = validation_0.__eq__(validation_1)
    var_3.to_try()
