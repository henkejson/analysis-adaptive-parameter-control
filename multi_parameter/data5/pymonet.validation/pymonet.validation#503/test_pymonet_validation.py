# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0
import builtins as module_1


def test_case_0():
    int_0 = 0
    complex_0 = -180.36105 + 1052.601912j
    float_0 = -47.5
    str_0 = "3ME4@d\x0cW"
    tuple_0 = (complex_0, complex_0, float_0, str_0)
    validation_0 = module_0.Validation(tuple_0, float_0)
    var_0 = validation_0.__eq__(int_0)


def test_case_1():
    bool_0 = True
    bool_1 = True
    dict_0 = {bool_1: bool_1, bool_1: bool_1, bool_1: bool_1}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.__str__()
    var_0.bind(bool_0)


def test_case_2():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_3():
    int_0 = 1752
    str_0 = "\n    Maybe type is the most common way of representing nothingness (or the null type).\n    Maybe is effectively abstract and has two concrete subtypes: Box (also Some) and Nothing.\n    "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.is_success()
    var_0.bind(int_0)


def test_case_4():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.is_fail()


def test_case_5():
    none_type_0 = None
    bytes_0 = b"\xb4\xb2$\x8e\xda\xde\xa3"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    validation_0 = module_0.Validation(set_0, bytes_0)
    validation_0.map(none_type_0)


def test_case_6():
    str_0 = "\t#N \x0bOmaJmN.BC;T"
    validation_0 = module_0.Validation(str_0, str_0)
    none_type_0 = None
    validation_1 = module_0.Validation(str_0, none_type_0)
    validation_1.bind(str_0)


def test_case_7():
    int_0 = 2408
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.ap(int_0)


def test_case_8():
    bytes_0 = b"\x8c$\xf7\xeegbt\\\xf4\x13"
    str_0 = "\n        Transform Maybe to Either.\n\n        :returns: Right monad with previous value when Maybe is not empty, in other case Left with None\n        :rtype: Either[A | None]\n        "
    validation_0 = module_0.Validation(str_0, bytes_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.__str__()
    var_1.to_try()


def test_case_9():
    str_0 = "tY10\x0b2Xn"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.__eq__(validation_0)
    var_2 = validation_0.to_try()
    var_3 = var_1.__eq__(validation_0)
    bytes_0 = b"\xdb\x8fy\xbb"
    var_1.map(bytes_0)


def test_case_10():
    float_0 = -729.5956
    validation_0 = module_0.Validation(float_0, float_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_try()
    var_2 = var_0.to_try()
    var_3 = var_0.to_try()
    var_4 = var_0.__str__()
    var_1.to_try()


def test_case_11():
    bool_0 = True
    bool_1 = False
    tuple_0 = (bool_0, bool_1)
    int_0 = 725
    validation_0 = module_0.Validation(tuple_0, int_0)
    validation_0.to_try()


def test_case_12():
    str_0 = "'|tbo8F`% k[Hv\nwJZ\\J"
    bool_0 = True
    set_0 = set()
    tuple_0 = (str_0, bool_0, set_0)
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_either()
    var_0.is_success()


def test_case_13():
    bool_0 = True
    bool_1 = True
    dict_0 = {bool_1: bool_1, bool_1: bool_1, bool_1: bool_1}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.bind(bool_0)
    validation_1 = module_0.Validation(bool_1, bool_1)


def test_case_14():
    list_0 = []
    list_1 = []
    validation_0 = module_0.Validation(list_0, list_1)
    var_0 = validation_0.__str__()
    var_0.to_either()


def test_case_15():
    str_0 = "pHa0NK"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_try()
    object_0 = module_1.object()
    object_0.map(var_0)


def test_case_16():
    bool_0 = False
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_box()
    var_2 = var_1.to_lazy()
    var_3 = var_2.map(bool_0)
    validation_1 = module_0.Validation(var_3, var_3)
    var_4 = validation_1.to_lazy()
    none_type_0 = None
    str_0 = "One[value={}]"
    none_type_1 = None
    validation_2 = module_0.Validation(str_0, none_type_1)
    var_5 = validation_2.__eq__(none_type_0)
    var_5.is_success()


def test_case_17():
    bytes_0 = b"2\x8f+\x90\xc1\x07H\xf6\xa9\x9b\xfdT\x13\xd8\xe5\x0e+/"
    str_0 = "\n        Transform Maybe to Either.\n\n        :returns: Right monad with previous value when Maybe is not empty, in other case Left with None\n        :rtype: Either[A | None]\n        "
    validation_0 = module_0.Validation(str_0, bytes_0)
    var_0 = bytes_0.__str__()
    var_1 = validation_0.is_success()
    bytes_1 = b""
    validation_1 = module_0.Validation(bytes_1, bytes_1)
    var_2 = validation_1.to_maybe()
    var_3 = var_2.to_lazy()
    var_3.is_success()


def test_case_18():
    str_0 = "Hns4\n@PW^7[@;xf\x0b>?"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.__eq__(validation_0)
    var_2 = validation_0.to_try()
    var_3 = validation_0.to_maybe()
    var_4 = var_2.__str__()
    var_5 = var_3.to_either()
    var_6 = var_5.to_box()
    var_7 = var_4.__eq__(str_0)
    var_8 = validation_0.to_lazy()
    var_9 = module_0.Validation(validation_0, var_2)
    list_0 = [str_0, str_0, str_0, str_0]
    validation_1 = module_0.Validation(list_0, str_0)
    var_10 = validation_1.to_maybe()
    var_11 = validation_0.__eq__(var_9)
    validation_2 = module_0.Validation(var_8, var_10)
    var_1.to_lazy()
