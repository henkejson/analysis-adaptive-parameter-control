# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    validation_1 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.__eq__(validation_0)
    var_0.to_box()


def test_case_1():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.__eq__(bool_0)
    var_2 = var_0.to_try()


def test_case_2():
    str_0 = "%Ht\r{6"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    tuple_0 = ()
    validation_1 = module_0.Validation(tuple_0, tuple_0)
    validation_2 = module_0.Validation(tuple_0, tuple_0)
    var_1 = validation_1.__eq__(validation_1)
    var_1.to_box()


def test_case_3():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_either()
    validation_1 = module_0.Validation(var_0, tuple_0)
    str_0 = ","
    tuple_1 = (var_0, str_0, str_0)
    var_1 = validation_1.to_maybe()
    var_2 = module_0.Validation(str_0, tuple_1)
    var_3 = var_1.to_try()


def test_case_4():
    bool_0 = True
    bytes_0 = b"\xa5D*\xe1\xe5+A\xc5L\xeb\xea\xa7\xa3\x11~\xd2"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.__eq__(bool_0)
    var_1.to_lazy()


def test_case_5():
    bool_0 = False
    bool_0.to_try()


def test_case_6():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)


def test_case_7():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    validation_1 = module_0.Validation(validation_0, validation_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.__eq__(tuple_0)
    validation_1.to_maybe()


def test_case_8():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.is_fail()
    validation_1 = module_0.Validation(var_0, tuple_0)
    tuple_1 = (var_0, tuple_0, tuple_0)
    var_1 = validation_1.__eq__(tuple_1)
    var_2 = validation_1.to_maybe()
    var_3 = validation_0.to_try()


def test_case_9():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(none_type_0)
    validation_0.map(none_type_0)


def test_case_10():
    bytes_0 = b"U *P\xcb\x14\x0f\x00:\x0ej\x82\x0e\xf1A\xfc5#\x174"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_0.bind(bytes_0)


def test_case_11():
    float_0 = 428.4
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.ap(float_0)


def test_case_12():
    none_type_0 = None
    bytes_0 = b"(?\xbd?\x9a6\x1b\xf3\xfa\x05\xa4\x01\xe3"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    validation_0 = module_0.Validation(set_0, bytes_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.ap(none_type_0)
    var_1.is_success()


def test_case_13():
    str_0 = ">eVH\nD=$:"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, str_0)
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_box()
    var_2 = validation_1.__eq__(validation_0)
    validation_1.is_success()


def test_case_14():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    validation_1 = module_0.Validation(validation_0, validation_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.__eq__(tuple_0)
    var_2 = validation_0.to_maybe()
    validation_1.to_try()


def test_case_15():
    tuple_0 = ()
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, tuple_0)
    validation_1 = module_0.Validation(tuple_0, none_type_0)
    var_0 = validation_0.to_box()
    var_1 = validation_1.__eq__(var_0)
    var_2 = validation_0.__str__()
    var_2.is_fail()


def test_case_16():
    float_0 = -3308.94881
    validation_0 = module_0.Validation(float_0, float_0)
    bool_0 = False
    str_0 = "\n        Take function (A) -> B and applied this function on current Validation value.\n\n        :param mapper: mapper function\n        :type mapper: Function(A) -> B\n        :returns: new Validation with mapped value and previous errors\n        :rtype: Validation[B, List[E]]\n        "
    validation_1 = module_0.Validation(str_0, str_0)
    var_0 = validation_1.to_maybe()
    var_1 = var_0.bind(bool_0)
