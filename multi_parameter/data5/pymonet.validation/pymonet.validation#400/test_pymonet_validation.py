# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bytes_0 = b"M\x9a\xe1>\x89}^\x12?u\xf9y\xd6\x1a \xa6m"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_0.bind(bytes_0)


def test_case_1():
    float_0 = -514.1182177049166
    none_type_0 = None
    validation_0 = module_0.Validation(float_0, none_type_0)
    var_0 = validation_0.__eq__(none_type_0)


def test_case_2():
    str_0 = "\n        :returns: True\n        :rtype: Boolean\n        "
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    tuple_0 = (bool_0, set_0)
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_lazy()
    var_2 = var_1.__eq__(str_0)


def test_case_3():
    bytes_0 = b"\x14\x7f\x8a1<\x87\xfb\xf0x\xb3\x8b\xb5c\xb8I\x9e\x9a"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()


def test_case_4():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)


def test_case_5():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.__str__()


def test_case_6():
    bytes_0 = b"\xaa\x9a\xc4>\xbd}^\x12?u\xf9y\xd6\x1aT"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.is_fail()


def test_case_7():
    bytes_0 = b"\xeb\xd4\xa5ke8\x10\xaf'\xde\x83\x17kBZw!p"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    none_type_0 = None
    validation_0.map(none_type_0)


def test_case_8():
    float_0 = -998.8136866144741
    validation_0 = module_0.Validation(float_0, float_0)
    validation_0.bind(float_0)


def test_case_9():
    bytes_0 = b"\xdas\x16kwP\x1d\x80\x14d\xf9qG\xc3\xd8\x0b\x13\xf1"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_0.ap(validation_0)


def test_case_10():
    bytes_0 = b"\xaa\x1d\xdc\x9a\xc4>\xbd}^\x12?u\xf9y\xd6\x1aT"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_box()


def test_case_11():
    float_0 = -1242.252
    none_type_0 = None
    validation_0 = module_0.Validation(float_0, none_type_0)
    var_0 = validation_0.to_lazy()


def test_case_12():
    bytes_0 = b"M\x9a\xe1>\x89}^\x12?u\xf9y\xd6\x1a \xa6m"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.to_lazy()
    var_2 = var_1.to_maybe()
    var_3 = validation_0.__eq__(var_2)
    var_4 = var_3.__eq__(var_3)
    var_5 = var_3.__eq__(var_3)
    var_1.is_success()


def test_case_13():
    bytes_0 = b"M\x9a\t>\x89}^\x97?u\xf9y\xd6\x1a \xa6m"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_try()
    validation_0.ap(validation_0)


def test_case_14():
    none_type_0 = None
    bytes_0 = b"M\x9a\xe1>\x89}^\x12?u\xf9y\xd6\x1a \xa6m"
    set_0 = set()
    validation_0 = module_0.Validation(none_type_0, set_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_either()
    var_2 = var_1.to_maybe()
    var_3 = validation_0.to_try()
    var_4 = validation_0.__str__()
    var_5 = var_2.__eq__(bytes_0)
    var_6 = var_3.__eq__(var_0)
    var_5.bind(var_2)


def test_case_15():
    bytes_0 = b"\xeb\xd4\xa5ke8\x10\xaf'\xde\x83\x17\xfa\x13w\x0cp"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    validation_1 = module_0.Validation(var_0, bytes_0)


def test_case_16():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_either()
    dict_0 = {}
    validation_0.ap(dict_0)


def test_case_17():
    bytes_0 = b"\x1er<\xd7\xaf3\x16\xd1\xd16\xd1+Dy\xa8"
    none_type_0 = None
    validation_0 = module_0.Validation(bytes_0, none_type_0)
    var_0 = validation_0.to_lazy()
    validation_1 = module_0.Validation(bytes_0, bytes_0)
    var_1 = validation_0.__eq__(validation_1)
    var_2 = validation_1.to_box()
    var_0.to_lazy()
