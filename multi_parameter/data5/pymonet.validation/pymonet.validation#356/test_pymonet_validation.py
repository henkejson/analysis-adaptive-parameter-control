# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    dict_0 = {}
    none_type_0 = None
    int_0 = 1
    validation_0 = module_0.Validation(int_0, none_type_0)
    var_0 = validation_0.__eq__(dict_0)
    var_0.to_lazy()


def test_case_1():
    none_type_0 = None
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.__str__()
    var_0.map(none_type_0)


def test_case_2():
    bytes_0 = b"|^8\xc8\xeb\x8e\xc5p_\xb0rEa\xb4O\x17OX_\xf2"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.is_success()
    var_2 = validation_0.__str__()
    var_3 = var_2.__str__()
    var_3.is_success()


def test_case_3():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_lazy()
    var_2 = var_1.to_try()
    var_3 = validation_0.to_box()
    var_4 = validation_0.__str__()
    var_2.to_try()


def test_case_4():
    str_0 = "C5Ef+y"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()


def test_case_5():
    str_0 = "C5Ef+y"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.to_maybe()


def test_case_6():
    str_0 = "C5Ef+y"
    validation_0 = module_0.Validation(str_0, str_0)


def test_case_7():
    str_0 = "L,ZMNjZ:-"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.to_try()
    none_type_0 = None
    var_2 = validation_0.is_fail()
    var_3 = validation_0.__eq__(validation_0)
    var_4 = validation_0.to_lazy()
    tuple_0 = (var_4,)
    none_type_0.ap(tuple_0)


def test_case_8():
    str_0 = '"2RZ\tg'
    list_0 = [str_0, str_0, str_0]
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_try()
    validation_0.map(str_0)


def test_case_9():
    none_type_0 = None
    int_0 = 0
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.bind(none_type_0)


def test_case_10():
    bool_0 = True
    int_0 = 1682
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.ap(int_0)


def test_case_11():
    bytes_0 = b"|^8\xc8\xeb\x8e\xc5p_\xb0rEa\xb4O\x17OX_\xf2"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = module_0.Validation(validation_0, bytes_0)
    var_1 = validation_0.to_lazy()
    var_2 = var_0.to_maybe()


def test_case_12():
    str_0 = "L,ZMNjZ:-"
    validation_0 = module_0.Validation(str_0, str_0)
    complex_0 = 1469 - 1362.3j
    var_0 = validation_0.is_success()
    var_1 = validation_0.__eq__(validation_0)
    var_1.bind(complex_0)


def test_case_13():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = module_0.Validation(none_type_0, validation_0)
    var_1 = validation_0.__eq__(var_0)
    validation_0.map(none_type_0)


def test_case_14():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.__eq__(set_0)
    var_2 = validation_0.to_maybe()
    var_3 = validation_0.__str__()
    var_1.to_try()
