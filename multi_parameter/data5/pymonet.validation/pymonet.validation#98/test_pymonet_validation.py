# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    list_0 = []
    str_0 = "AJ((bqH<oY>"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(list_0)
    var_0.is_success()


def test_case_1():
    bool_0 = False
    list_0 = [bool_0]
    validation_0 = module_0.Validation(bool_0, list_0)
    var_0 = validation_0.__str__()
    var_0.to_lazy()


def test_case_2():
    bytes_0 = b"m\xe1\xb4|\x7f\x98"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_try()
    var_1.is_fail()


def test_case_3():
    str_0 = 'QYsV\x0b["n~`9Tn'
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.map(var_0)
    var_2 = var_1.to_either()
    var_3 = validation_0.to_box()
    var_4 = var_3.to_try()


def test_case_4():
    int_0 = 4407
    validation_0 = module_0.Validation(int_0, int_0)


def test_case_5():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.is_fail()


def test_case_6():
    int_0 = 2886
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.map(int_0)


def test_case_7():
    str_0 = ".;"
    list_0 = []
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.is_success()
    var_2 = validation_0.__eq__(list_0)
    validation_0.bind(var_2)


def test_case_8():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    validation_0 = module_0.Validation(bool_0, dict_0)
    var_0 = validation_0.is_success()
    var_1 = validation_0.to_maybe()
    var_2 = var_1.to_lazy()
    var_3 = validation_0.to_maybe()
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    validation_1.ap(validation_1)


def test_case_9():
    str_0 = "$a.h'!&%`t\x0boW"
    none_type_0 = None
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_try()
    var_0.ap(none_type_0)


def test_case_10():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.__str__()
    var_0.is_success()


def test_case_11():
    str_0 = ".;"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.is_fail()
    var_1 = validation_0.to_lazy()
    var_2 = var_1.to_maybe()
    var_3 = var_2.to_try()
    var_3.is_fail()


def test_case_12():
    none_type_0 = None
    bool_0 = False
    int_0 = -1075
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_1 = module_0.Validation(none_type_0, bool_0)
    validation_0.map(int_0)


def test_case_13():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.__eq__(list_0)
    var_1.is_success()


def test_case_14():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    tuple_0 = ()
    validation_1 = module_0.Validation(validation_0, tuple_0)
    var_0 = validation_1.to_either()
    var_0.is_success()


def test_case_15():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    str_0 = ".;"
    list_0 = []
    var_0 = validation_0.__eq__(list_0)
    validation_1 = module_0.Validation(str_0, str_0)
    var_1 = validation_1.to_either()
    var_2 = var_1.to_maybe()
    var_3 = validation_1.__eq__(validation_0)
    var_4 = var_2.ap(var_2)
    var_5 = var_1.__str__()
    var_3.is_success()
