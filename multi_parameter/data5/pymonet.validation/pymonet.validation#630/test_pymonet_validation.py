# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0
import builtins as module_1


def test_case_0():
    complex_0 = 1747.723075 - 1412.3990103161373j
    validation_0 = module_0.Validation(complex_0, complex_0)
    var_0 = validation_0.__eq__(validation_0)


def test_case_1():
    bytes_0 = b"r\x8d\x9c\xed\x8c\n\xe0^iF"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(bytes_0)
    var_1 = var_0.__eq__(none_type_0)
    var_2 = module_1.object()
    var_3 = validation_0.to_lazy()
    none_type_0.is_success()


def test_case_2():
    none_type_0 = None
    str_0 = "\n        Transform Box into successfull Try.\n\n        :returns: successfull Try monad with previous value\n        :rtype: Try[A]\n        "
    validation_0 = module_0.Validation(none_type_0, str_0)
    var_0 = validation_0.__eq__(none_type_0)
    var_1 = validation_0.to_maybe()
    none_type_1 = None
    bytes_0 = b"\x14'BH\xb7\xad\x9fu1"
    bool_0 = False
    validation_1 = module_0.Validation(bool_0, var_1)
    int_0 = -41
    var_2 = validation_0.__str__()
    set_0 = {none_type_1, int_0, bytes_0, var_2}
    validation_0.bind(set_0)


def test_case_3():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.__str__()
    var_2 = validation_0.is_success()
    var_0.map(var_2)


def test_case_4():
    str_0 = ""
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    var_0.is_fail()


def test_case_5():
    int_0 = -1240
    int_0.to_maybe()


def test_case_6():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_7():
    complex_0 = 1747.723075 - 1412j
    validation_0 = module_0.Validation(complex_0, complex_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_0.to_maybe()


def test_case_8():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_lazy()
    validation_0.is_fail()


def test_case_9():
    none_type_0 = None
    str_0 = "\n        Transform Box into successfull Try.\n\n        :returns: successfull Try monad with previous value\n        :rtype: Try[A]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_try()
    validation_0.map(none_type_0)


def test_case_10():
    bytes_0 = b"\x1b\x81\xab\xb3Z\xce"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.bind(bytes_0)


def test_case_11():
    complex_0 = -5377.9541 - 1352.9j
    validation_0 = module_0.Validation(complex_0, complex_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_0.ap(validation_0)


def test_case_12():
    bool_0 = True
    list_0 = [bool_0]
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_box()
    tuple_0 = ()
    none_type_1 = None
    validation_1 = module_0.Validation(tuple_0, none_type_1)
    validation_1.ap(list_0)


def test_case_13():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    validation_0 = module_0.Validation(set_0, bool_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_box()
    var_1.to_box()


def test_case_14():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.is_success()
    var_2 = validation_0.is_success()
    var_3 = var_2.__str__()
    var_3.map(var_2)


def test_case_15():
    bytes_0 = b"\x80Ih\xfb\x84(\x9c\x1f\x1b\xc1%\xeb>"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.to_either()
    var_2 = var_0.__str__()
    var_3 = var_1.to_maybe()
    var_4 = var_3.__str__()
    var_4.to_box()


def test_case_16():
    bytes_0 = b"\xef\x80\t \xee\xcd\xa7X\xc8W\x16!\xccT\x1c"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    bool_0 = True
    validation_1 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_1.to_lazy()
    var_1 = var_0.ap(validation_0)
    var_2 = var_1.to_try()
    bool_1 = False
    validation_2 = module_0.Validation(bool_1, bool_1)
    var_3 = validation_0.__eq__(validation_1)
    var_4 = validation_2.__eq__(validation_2)
    validation_2.is_fail()
