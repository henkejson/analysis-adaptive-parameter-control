# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    validation_1 = module_0.Validation(list_0, validation_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_lazy()
    validation_2 = module_0.Validation(list_0, list_0)
    validation_2.bind(validation_2)


def test_case_1():
    bool_0 = True
    bytes_0 = b"\x8d[@fJ#$In\x9f\x00"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(bool_0)
    var_0.to_maybe()


def test_case_2():
    int_0 = 433
    validation_0 = module_0.Validation(int_0, int_0)
    bytes_0 = b"\xa9\xcb \xa2\x98,\xa1\x84\xaf<"
    validation_1 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_1.to_maybe()
    var_1 = validation_1.to_maybe()
    var_2 = validation_1.to_either()
    int_1 = 245
    validation_1.ap(int_1)


def test_case_3():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_4():
    str_0 = "))UD"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    var_0.is_success()


def test_case_5():
    none_type_0 = None
    bytes_0 = b"\xaa\x17\xa2\xde\xe2N\xf0\xe9\x11\xf2^"
    tuple_0 = (bytes_0, bytes_0, bytes_0)
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.is_fail()
    var_0.bind(none_type_0)


def test_case_6():
    float_0 = 797.467
    set_0 = set()
    float_1 = 917.0
    validation_0 = module_0.Validation(set_0, float_0)
    set_1 = {float_1, float_0}
    validation_1 = module_0.Validation(set_1, set_1)
    var_0 = validation_1.__eq__(set_0)
    validation_2 = module_0.Validation(float_1, var_0)
    validation_1.map(var_0)


def test_case_7():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    validation_0.bind(validation_0)


def test_case_8():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_box()
    var_0.bind(none_type_0)


def test_case_9():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_try()
    var_1.to_maybe()


def test_case_10():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    validation_1 = module_0.Validation(list_0, validation_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_try()
    var_1.to_lazy()


def test_case_11():
    str_0 = "\n        Take function and applied this function on current Validation value and returns folder result.\n\n        :param mapper: mapper function\n        :type mapper: Function(A) -> Validation[B, E]\n        :returns: new Validation with mapped value\n        :rtype: Validation[B, E]\n        "
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_lazy()
    var_2 = var_1.bind(str_0)
    var_3 = validation_0.to_box()
    var_4 = validation_0.to_box()
    var_5 = validation_0.__eq__(set_0)
    var_6 = validation_0.to_maybe()
    var_7 = validation_0.is_fail()
    var_8 = var_6.to_try()
    var_9 = validation_0.to_try()
    var_10 = var_6.__eq__(str_0)
    var_11 = validation_0.to_either()
    var_3.map(var_6)


def test_case_12():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_maybe()
    validation_1 = module_0.Validation(list_0, validation_0)
    var_1 = validation_0.__eq__(validation_0)
    var_2 = validation_0.to_try()
    var_2.to_lazy()


def test_case_13():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.is_fail()
    var_1 = validation_0.__str__()
    var_1.to_try()


def test_case_14():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.is_fail()
    validation_1 = module_0.Validation(list_0, validation_0)
    validation_2 = module_0.Validation(list_0, var_0)
    var_1 = validation_2.__eq__(validation_0)
    validation_2.to_try()
