# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bool_0 = True
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(bool_0)
    var_0.to_either()


def test_case_1():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_2():
    bytes_0 = b""
    none_type_0 = None
    validation_0 = module_0.Validation(bytes_0, none_type_0)
    validation_0.to_try()


def test_case_3():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.is_fail()


def test_case_4():
    str_0 = "Validation.fail[{}, {}]"
    validation_0 = module_0.Validation(str_0, str_0)
    bytes_0 = b'\xcdr<\xa5"\x12\x1c\xca\xa6\xca7'
    dict_0 = {bytes_0: bytes_0}
    bool_0 = False
    none_type_0 = None
    validation_1 = module_0.Validation(bool_0, none_type_0)
    validation_1.map(dict_0)


def test_case_5():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(bool_0)
    var_1 = validation_0.__eq__(validation_0)
    var_2 = validation_0.to_box()
    validation_0.bind(bool_0)


def test_case_6():
    none_type_0 = None
    none_type_1 = None
    validation_0 = module_0.Validation(none_type_1, none_type_1)
    validation_0.ap(none_type_0)


def test_case_7():
    bool_0 = False
    int_0 = 13
    tuple_0 = (bool_0, int_0)
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_box()


def test_case_8():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    validation_0 = module_0.Validation(dict_0, dict_0)
    bytes_0 = b"}\xf3\xe2\xb4\x8b\xcb\xa9\xd8\xe1da;#\x06\xd7IR"
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_either()
    var_2 = validation_0.__eq__(bytes_0)
    var_3 = validation_0.__str__()
    var_3.to_maybe()


def test_case_9():
    bytes_0 = b"\x18\x14PQa\x927x+\\"
    list_0 = [bytes_0, bytes_0, bytes_0]
    bool_0 = False
    int_0 = 13
    tuple_0 = (bool_0, int_0)
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.__str__()
    var_0.map(list_0)


def test_case_10():
    bool_0 = False
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    none_type_0 = None
    list_0 = [validation_0, none_type_0]
    var_0 = validation_0.__eq__(list_0)
    var_1 = validation_0.to_lazy()
    validation_1 = module_0.Validation(bool_0, var_0)
    validation_2 = module_0.Validation(var_0, dict_0)
    var_2 = validation_2.to_try()
    var_3 = var_1.to_either()
    var_4 = validation_0.__eq__(var_3)
    var_5 = validation_0.__str__()
    var_6 = validation_2.is_fail()
    bool_1 = True
    var_7 = var_0.__eq__(bool_1)
    var_8 = validation_2.to_either()
    var_7.to_maybe()


def test_case_11():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    validation_0 = module_0.Validation(dict_0, dict_0)
    bytes_0 = b"}\xf3\xe2\xb4\x8b\xcb\xa9\xd8\xe1da;#\x06\xd7IR"
    validation_1 = module_0.Validation(dict_0, bytes_0)
    none_type_0 = None
    validation_2 = module_0.Validation(bytes_0, none_type_0)
    var_0 = validation_0.to_try()
    var_1 = validation_0.to_either()
    var_2 = var_0.__eq__(none_type_0)
    var_3 = validation_0.__str__()
    var_2.is_fail()


def test_case_12():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(validation_0)
    var_0.to_lazy()


def test_case_13():
    bool_0 = False
    none_type_0 = None
    bytes_0 = b"X\xc4\xeck\xe9z\x8b\xc3\xca\x0c\xa8\x04\xd0\xdb\r\x17\x1a9"
    bool_1 = False
    validation_0 = module_0.Validation(bool_1, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.map(bool_0)
    var_2 = var_1.map(bytes_0)
    validation_1 = module_0.Validation(bytes_0, bytes_0)
    var_3 = validation_1.to_try()
    var_4 = var_3.__str__()
    var_5 = var_4.__eq__(none_type_0)
    var_5.to_try()


def test_case_14():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    none_type_0 = None
    validation_1 = module_0.Validation(bool_0, none_type_0)
    var_0 = validation_0.__eq__(validation_1)
    var_1 = validation_0.to_lazy()
    bytes_0 = b"\xc1e\x98\xe81\xa6\xf6EOl\xef\x9f}\xb5\x7f"
    validation_2 = module_0.Validation(validation_0, bytes_0)
    validation_3 = module_0.Validation(none_type_0, none_type_0)
    var_2 = validation_1.to_box()
    var_3 = var_2.to_try()
    var_3.to_either()


def test_case_15():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_maybe()
    var_0.is_fail()
