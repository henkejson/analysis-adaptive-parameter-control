# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bytes_0 = b"$\x93K\xc7\xb0"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)
    var_0.is_success()


def test_case_1():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(bool_0)
    var_0.is_success()


def test_case_2():
    bytes_0 = b"Z<\x0b\xa9\xd2\xff\x1c"
    list_0 = [bytes_0, bytes_0, bytes_0]
    tuple_0 = (bytes_0, list_0, list_0)
    validation_0 = module_0.Validation(tuple_0, list_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_lazy()
    validation_1 = module_0.Validation(tuple_0, list_0)
    var_2 = validation_1.is_fail()
    var_3 = var_2.__str__()
    var_4 = validation_1.to_maybe()
    var_5 = validation_1.to_lazy()
    var_5.is_fail()


def test_case_3():
    str_0 = "RE\taO$r`U'?(m"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, str_0)
    var_0 = validation_0.to_either()
    validation_1 = module_0.Validation(var_0, var_0)
    validation_1.to_maybe()


def test_case_4():
    bytes_0 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.__str__()
    var_2 = validation_0.to_either()


def test_case_5():
    int_0 = 2737
    validation_0 = module_0.Validation(int_0, int_0)


def test_case_6():
    str_0 = 'bC!F>s"0'
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.is_fail()
    var_0.to_maybe()


def test_case_7():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.map(validation_0)


def test_case_8():
    bool_0 = False
    none_type_0 = None
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.bind(none_type_0)


def test_case_9():
    bool_0 = False
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.ap(bool_0)


def test_case_10():
    tuple_0 = ()
    none_type_0 = None
    validation_0 = module_0.Validation(tuple_0, none_type_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.to_either()
    var_2 = var_1.to_box()
    var_3 = var_2.to_maybe()
    var_4 = var_3.to_either()
    var_5 = var_4.to_maybe()
    var_6 = var_5.to_lazy()
    var_7 = var_6.bind(none_type_0)
    var_8 = var_7.ap(none_type_0)
    var_8.to_box()


def test_case_11():
    str_0 = "$/z\n\t*\\Ph<!V;A+<"
    none_type_0 = None
    validation_0 = module_0.Validation(str_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_either()
    var_2 = var_1.to_lazy()
    var_3 = var_2.to_try()
    var_3.to_either()


def test_case_12():
    bytes_0 = b"\xef\x86\x03\xb5\x14\xb3\xe8Ph\xfa_Z"
    none_type_0 = None
    validation_0 = module_0.Validation(bytes_0, none_type_0)
    validation_0.to_try()


def test_case_13():
    str_0 = ']B"=+JvPUZOmXYl}A_g'
    bytes_0 = b"\xa8\xee\tL"
    validation_0 = module_0.Validation(str_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.__eq__(validation_0)
    var_2 = validation_0.is_fail()
    var_3 = validation_0.to_box()
    var_4 = var_0.ap(str_0)
    var_5 = validation_0.__str__()
    validation_1 = module_0.Validation(var_2, var_0)
    var_6 = validation_1.__eq__(validation_0)
    var_2.map(str_0)
