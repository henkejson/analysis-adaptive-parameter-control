# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bytes_0 = b"{\x91\xc0\x83"
    bytes_1 = b"\x94h\xa7\x97t\xec\x9e\x98\xbe"
    validation_0 = module_0.Validation(bytes_1, bytes_0)
    validation_1 = module_0.Validation(bytes_0, bytes_1)
    var_0 = validation_1.__eq__(bytes_0)
    var_1 = validation_0.to_maybe()
    var_2 = validation_0.__str__()
    var_2.to_either()


def test_case_1():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.to_either()
    var_2 = validation_0.to_box()
    var_3 = validation_0.is_fail()
    var_3.is_success()


def test_case_2():
    bytes_0 = b"{\x91\xc0\x83"
    bytes_1 = b"\x94h\xa7\x97t\xec\x9e\x98\xbe"
    validation_0 = module_0.Validation(bytes_1, bytes_0)
    validation_1 = module_0.Validation(bytes_0, bytes_1)
    var_0 = validation_0.to_either()
    var_1 = validation_1.__eq__(bytes_0)
    var_2 = validation_0.to_maybe()
    var_3 = validation_1.to_lazy()
    var_4 = var_1.__str__()
    var_5 = validation_0.__str__()
    var_5.to_either()


def test_case_3():
    tuple_0 = ()
    bytes_0 = b"\x94h\xa7\x97t\xec\x9e\x98\xbe"
    validation_0 = module_0.Validation(bytes_0, tuple_0)
    validation_1 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_1.__eq__(bytes_0)
    var_1 = validation_0.to_maybe()
    var_2 = validation_1.to_lazy()
    var_3 = var_0.__str__()
    var_4 = validation_0.__str__()
    var_4.to_either()


def test_case_4():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)


def test_case_5():
    float_0 = -2864.07
    validation_0 = module_0.Validation(float_0, float_0)
    validation_0.to_maybe()


def test_case_6():
    bytes_0 = b"\xfa\xb9\xb9\x9fb%a\x01\xdb\x07\xde\xaa\xdb\xc7\xe5$\xc7\xc4M"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_lazy()
    bytes_1 = b"\xad\xd3;^KF\x18j\xca7?\xd7"
    validation_1 = module_0.Validation(bytes_0, bytes_1)
    var_1 = validation_1.to_either()
    var_2 = validation_1.to_try()
    var_3 = var_1.to_lazy()
    bytes_2 = b"\xb7\xcf\xf39$\xfd.k\xb4|L\xddze"
    none_type_0 = None
    validation_2 = module_0.Validation(none_type_0, bytes_1)
    var_4 = validation_2.to_try()
    var_5 = validation_2.is_fail()
    var_6 = var_1.to_try()
    validation_3 = module_0.Validation(bytes_1, bytes_2)
    validation_3.ap(bytes_0)


def test_case_7():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.map(none_type_0)


def test_case_8():
    bool_0 = False
    bool_1 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.bind(bool_1)


def test_case_9():
    int_0 = 0
    tuple_0 = (int_0,)
    bool_0 = True
    validation_0 = module_0.Validation(int_0, bool_0)
    validation_0.ap(tuple_0)


def test_case_10():
    bytes_0 = b"\xa6$\x82"
    dict_0 = {bytes_0: bytes_0}
    validation_0 = module_0.Validation(dict_0, bytes_0)
    var_0 = validation_0.to_box()
    var_0.is_fail()


def test_case_11():
    float_0 = -2059.569
    float_1 = -2870.83500920246
    var_0 = module_0.Validation(float_1, float_1)
    var_1 = var_0.to_lazy()
    var_2 = var_1.map(float_0)


def test_case_12():
    str_0 = '}to";`'
    int_0 = 1
    str_1 = "E/"
    validation_0 = module_0.Validation(str_1, str_1)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_maybe()
    var_2 = var_1.__eq__(int_0)
    var_3 = var_2.__str__()
    var_4 = var_3.__eq__(str_0)
    var_4.is_fail()


def test_case_13():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.to_try()


def test_case_14():
    tuple_0 = ()
    var_0 = tuple_0.__str__()
    validation_0 = module_0.Validation(var_0, var_0)
    var_1 = validation_0.__eq__(validation_0)
    var_2 = validation_0.to_maybe()
    var_3 = var_2.__str__()
    var_4 = var_3.__str__()
    var_4.to_either()


def test_case_15():
    bytes_0 = b"{\x91\xc0\x83"
    bytes_1 = b"\x94h\xa7\x97t\xec\x9e\x98\xbe"
    validation_0 = module_0.Validation(bytes_1, bytes_0)
    none_type_0 = None
    validation_1 = module_0.Validation(bytes_0, none_type_0)
    var_0 = validation_1.__eq__(validation_0)
    var_0.to_maybe()
