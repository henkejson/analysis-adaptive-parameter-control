# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bytes_0 = b"[\xf68v\x9b"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(bytes_0)


def test_case_1():
    str_0 = ""
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    validation_0.map(str_0)


def test_case_2():
    bytes_0 = b"NJiT\xba\x8b\xb3#\x97BO5+w\x11E"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()


def test_case_3():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_either()
    bytes_0 = b"\x0b\xbd\xe4\xa0\x87\xc7\xe7iH6\x8aQ\xb1\x01\x8d\xa6c5"
    str_0 = "\n        Take mapper function and return new instance of Right with mapped value.\n\n        :param mapper: function to apply on Right value\n        :type mapper: Function(A) -> B\n        :returns: new Right with result of mapper\n        :rtype: Right[B]\n        "
    validation_1 = module_0.Validation(str_0, bytes_0)


def test_case_4():
    str_0 = ">?"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()


def test_case_5():
    bytes_0 = b"\x0b\xbd\xe4\xa0f\xc7\xe7iH6\x8aQ\xb1\x01\x8d\xa6c5"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()


def test_case_6():
    str_0 = ":uU&[&}GA5"
    validation_0 = module_0.Validation(str_0, str_0)


def test_case_7():
    bytes_0 = b"\x0b\xbd\xe4\xa0f\xc7\xe7iH6\x8aQ\xb1\x01\x8d\xa6c5"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_try()


def test_case_8():
    str_0 = ".Z[)u^m\n;3A8)rGTpM&"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.is_fail()


def test_case_9():
    str_0 = "b"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.map(str_0)


def test_case_10():
    bytes_0 = b"[\xf68v\x9b"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_0.bind(validation_0)


def test_case_11():
    str_0 = "\nW&[X!GA5"
    validation_0 = module_0.Validation(str_0, str_0)
    validation_0.ap(str_0)


def test_case_12():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_box()


def test_case_13():
    str_0 = ":uW&[&}GA5"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_lazy()


def test_case_14():
    str_0 = "z3J=^<aUS"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_either()


def test_case_15():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(validation_0)


def test_case_16():
    str_0 = "?"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_either()
    var_2 = validation_0.to_maybe()
    validation_1 = module_0.Validation(var_2, var_2)
    var_3 = var_2.to_lazy()
    var_4 = var_2.to_box()
    var_5 = var_4.to_maybe()
    var_6 = var_2.to_try()
    var_7 = validation_0.__eq__(validation_1)


def test_case_17():
    str_0 = ""
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(str_0)
    var_1 = validation_0.to_maybe()
    var_2 = validation_0.to_either()
    var_3 = var_2.__eq__(var_1)
    validation_1 = module_0.Validation(validation_0, validation_0)
    var_1.is_fail()
