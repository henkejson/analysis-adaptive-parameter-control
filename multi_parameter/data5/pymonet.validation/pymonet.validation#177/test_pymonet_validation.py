# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bytes_0 = b"\x91\xde\xa5\xfd"
    bytes_1 = b"\xbe\x16\xb7\xf9$\xe3\xd7\\\xb5\x90."
    validation_0 = module_0.Validation(bytes_1, bytes_1)
    var_0 = validation_0.__eq__(bytes_0)
    var_1 = validation_0.to_maybe()
    var_1.is_success()


def test_case_1():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_either()
    validation_0.ap(set_0)


def test_case_2():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_3():
    bytes_0 = b"O3\x86\xeb"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.__eq__(validation_0)


def test_case_4():
    bytes_0 = b"\x91\xde\xa5\xfd"
    str_0 = "\\)P@$I.)<^0\x0c93\\mX2"
    validation_0 = module_0.Validation(str_0, str_0)
    bytes_1 = b"\xbe\x16\xb7\xf9$\xe3\xd7\\\xb5\x90."
    validation_1 = module_0.Validation(bytes_0, bytes_1)
    var_0 = validation_1.__eq__(validation_1)
    var_1 = validation_1.to_either()
    var_2 = validation_1.to_maybe()
    var_3 = validation_1.is_fail()
    var_4 = validation_1.to_maybe()
    var_5 = validation_1.is_success()


def test_case_5():
    float_0 = -3678.0
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.map(float_0)


def test_case_6():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    bool_1 = False
    validation_0 = module_0.Validation(bool_1, list_0)
    var_0 = validation_0.__str__()
    validation_0.bind(var_0)


def test_case_7():
    bytes_0 = b"\xbe\x16\xb7\xf9$\xe3\xd7\\\xb5\x90."
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, bytes_0)
    var_0 = validation_0.__str__()
    validation_0.ap(var_0)


def test_case_8():
    bytes_0 = b"\x91\xde\xa5\xfd"
    str_0 = "\\)P@$I.)<^0\x0c93\\mX2"
    validation_0 = module_0.Validation(str_0, str_0)
    bytes_1 = b"\xbe\x16\xb7\xf9$\xe3\xd7\\\xb5\x90."
    validation_1 = module_0.Validation(bytes_0, bytes_1)
    var_0 = validation_1.__eq__(validation_1)
    var_1 = validation_1.to_either()
    var_2 = validation_1.to_maybe()
    var_3 = validation_0.to_box()
    var_4 = var_2.map(validation_1)


def test_case_9():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_either()
    var_2 = var_1.to_lazy()
    var_2.to_lazy()


def test_case_10():
    bool_0 = False
    bytes_0 = b"\x80\x19"
    tuple_0 = (bytes_0,)
    dict_0 = {tuple_0: bytes_0, bytes_0: tuple_0, tuple_0: bytes_0}
    validation_0 = module_0.Validation(dict_0, tuple_0)
    var_0 = validation_0.to_try()
    var_1 = var_0.bind(bool_0)
    var_1.is_success()


def test_case_11():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)


def test_case_12():
    bytes_0 = b"\xbe\x16\xb7\xf9$\xe3\xd7\\\xb5\x90."
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.is_success()
    var_1 = validation_0.to_maybe()
    var_1.is_success()


def test_case_13():
    bytes_0 = b"\x91\xde\xa5\xfd"
    bytes_1 = b"\xbe\x16\xb7\xf9$\xe3\xd7\\\xb5\x90."
    validation_0 = module_0.Validation(bytes_0, bytes_1)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_either()
    var_2 = validation_0.to_maybe()
    var_2.is_success()


def test_case_14():
    complex_0 = -1818 - 1585.3578j
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_1 = module_0.Validation(complex_0, validation_0)
    var_0 = validation_1.__eq__(validation_0)
    var_1 = validation_0.to_lazy()
    validation_0.to_maybe()


def test_case_15():
    list_0 = []
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, list_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.__eq__(var_0)
    var_2 = validation_0.to_maybe()
    var_1.to_either()
