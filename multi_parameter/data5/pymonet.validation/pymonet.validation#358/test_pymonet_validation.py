# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    int_0 = -1146
    validation_0 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.__eq__(validation_0)


def test_case_1():
    bool_0 = True
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(bool_0)


def test_case_2():
    bytes_0 = b"^\xba\xee\x82e-\xad\x14o"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()


def test_case_3():
    float_0 = -3468.3
    str_0 = "IZeNk!7"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.map(float_0)
    bool_0 = False
    validation_1 = module_0.Validation(bool_0, bool_0)
    str_1 = ""
    validation_2 = module_0.Validation(str_1, str_1)
    var_2 = validation_2.to_try()
    var_3 = validation_2.to_maybe()
    var_4 = var_3.to_box()
    var_5 = var_4.__eq__(var_4)
    var_6 = var_3.__eq__(float_0)
    var_6.to_lazy()


def test_case_4():
    int_0 = -1162
    validation_0 = module_0.Validation(int_0, int_0)


def test_case_5():
    none_type_0 = None
    bytes_0 = b"\x97C$\x8d"
    validation_0 = module_0.Validation(none_type_0, bytes_0)
    var_0 = validation_0.is_fail()
    var_1 = validation_0.__str__()
    var_1.is_fail()


def test_case_6():
    bytes_0 = b"\xb9\x8cu\xe6\x8a\x9dq\x16\n/\x00R\x1e\xa4Gy\\\x9c\x80"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(bytes_0)
    var_1 = validation_0.is_fail()
    var_2 = validation_0.__eq__(var_0)
    validation_1 = module_0.Validation(var_0, var_0)
    var_3 = validation_0.to_either()
    validation_1.map(var_0)


def test_case_7():
    float_0 = 151.9953
    dict_0 = {float_0: float_0, float_0: float_0}
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    validation_0.bind(dict_0)


def test_case_8():
    bytes_0 = b"\xb9\x8cu\xe6\x8a\x9dq\x16\n/\x00R\x1e\xa4Gy\\\x9c\x80"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_try()
    bytes_1 = b"D\xd4]\x1e\x88\xa9\x8b\xaft\\2L\xe0b\x8eC:"
    validation_1 = module_0.Validation(validation_0, bytes_0)
    var_2 = validation_0.to_either()
    var_3 = var_1.__eq__(validation_1)
    var_4 = var_3.__eq__(bytes_1)
    validation_2 = module_0.Validation(var_4, var_2)
    var_5 = validation_0.__eq__(var_4)
    validation_3 = module_0.Validation(var_3, var_4)
    var_6 = validation_0.__str__()
    validation_1.ap(validation_3)


def test_case_9():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_box()
    var_0.is_fail()


def test_case_10():
    int_0 = -1146
    validation_0 = module_0.Validation(int_0, int_0)
    validation_1 = module_0.Validation(int_0, int_0)
    var_0 = validation_1.__eq__(validation_0)
    var_1 = validation_1.to_lazy()
    validation_2 = module_0.Validation(var_1, var_0)
    var_2 = var_1.ap(int_0)
    var_1.to_lazy()


def test_case_11():
    bytes_0 = b"\xb9\x8cu\xe6\x8a\x9dq\x16\n/\x00R\x1e\xa4Gy\\\x9c\x80"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(bytes_0)
    validation_1 = module_0.Validation(var_0, var_0)
    var_1 = validation_0.to_either()
    validation_2 = module_0.Validation(var_1, validation_0)
    validation_3 = module_0.Validation(var_0, var_0)
    var_2 = validation_0.__str__()
    var_3 = validation_0.to_try()
    var_3.to_lazy()


def test_case_12():
    none_type_0 = None
    bytes_0 = b"\x97C$\x8d"
    validation_0 = module_0.Validation(none_type_0, bytes_0)
    var_0 = validation_0.__str__()
    var_0.is_fail()


def test_case_13():
    bytes_0 = b"^\xba\xee\x82e-\xad\x14o"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_maybe()
    var_1.is_fail()


def test_case_14():
    str_0 = "IZeENk!7"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_try()
    bool_0 = False
    validation_1 = var_0.__eq__(bool_0)
    str_1 = ""
    validation_2 = module_0.Validation(str_1, str_1)
    var_2 = validation_2.to_try()
    var_3 = validation_2.to_maybe()
    var_4 = var_3.to_box()
    var_5 = var_4.__eq__(var_4)
    var_1.is_success()


def test_case_15():
    bytes_0 = b"\xb9\x8cu\xe6\x8a\x9dq\x16\n/\x00R\x1e\xa4Gy\\\x9c\x80"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(bytes_0)
    var_1 = validation_0.to_maybe()
    var_2 = validation_0.__eq__(var_0)
    validation_1 = module_0.Validation(var_0, bytes_0)
    var_3 = validation_1.to_either()
    validation_2 = module_0.Validation(var_1, var_3)
    var_4 = validation_0.__eq__(validation_2)
    validation_3 = module_0.Validation(bytes_0, var_0)
    var_5 = validation_0.__str__()
    var_6 = validation_3.__eq__(var_2)
    validation_4 = module_0.Validation(var_6, var_6)
    var_7 = var_4.__str__()
    var_8 = validation_4.to_box()
    var_9 = validation_1.to_box()
    var_10 = validation_1.to_either()


def test_case_16():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_either()
    var_2 = var_0.__str__()
    var_2.to_try()
