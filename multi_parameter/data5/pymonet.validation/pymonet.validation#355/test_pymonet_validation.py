# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    list_0 = []
    bool_0 = False
    bool_1 = False
    tuple_0 = (list_0, bool_0, bool_1)
    int_0 = 1778
    none_type_0 = None
    validation_0 = module_0.Validation(int_0, none_type_0)
    var_0 = validation_0.__eq__(tuple_0)
    var_0.to_lazy()


def test_case_1():
    none_type_0 = None
    list_0 = []
    list_1 = [list_0]
    validation_0 = module_0.Validation(list_1, list_0)
    var_0 = validation_0.__str__()
    var_0.map(none_type_0)


def test_case_2():
    str_0 = "ol-OVb,y"
    validation_0 = module_0.Validation(str_0, str_0)
    dict_0 = {}
    list_0 = [dict_0]
    bytes_0 = b""
    var_0 = validation_0.__str__()
    validation_1 = module_0.Validation(list_0, bytes_0)
    dict_0.to_either()


def test_case_3():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.is_success()
    var_1 = validation_0.__eq__(validation_0)
    var_2 = validation_0.to_either()


def test_case_4():
    bool_0 = True
    set_0 = {bool_0}
    tuple_0 = (set_0,)
    validation_0 = module_0.Validation(tuple_0, set_0)
    var_0 = validation_0.to_either()
    var_0.is_success()


def test_case_5():
    bytes_0 = b"\x95$\x8f"
    dict_0 = {}
    validation_0 = module_0.Validation(bytes_0, dict_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_either()
    var_2 = var_0.__eq__(var_1)
    var_3 = var_1.to_try()
    var_1.map(bytes_0)


def test_case_6():
    none_type_0 = None
    var_0 = none_type_0.__str__()


def test_case_7():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_8():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.to_try()


def test_case_9():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.is_fail()
    var_1 = validation_0.is_success()
    bytes_0 = b"w\xd5\x94\xd8X\xc5\xdd\xfd\xed\xbas\x10I"
    var_2 = var_1.__eq__(bytes_0)
    var_1.to_box()


def test_case_10():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.map(validation_0)


def test_case_11():
    str_0 = "\\gIF}+k?X"
    str_1 = "3.>+\rxi!t4@\x0c+"
    validation_0 = module_0.Validation(str_1, str_1)
    validation_0.bind(str_0)


def test_case_12():
    int_0 = -717
    int_1 = 1102
    none_type_0 = None
    validation_0 = module_0.Validation(int_1, int_0)
    validation_1 = module_0.Validation(int_1, none_type_0)
    validation_1.ap(int_0)


def test_case_13():
    str_0 = "\n        Transform Box into Validation.\n\n        :returns: successfull Validation monad with previous value\n        :rtype: Validation[A, []]\n        "
    set_0 = {str_0}
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_box()
    var_0.is_fail()


def test_case_14():
    str_0 = 'sw\\4<"/}o2ltv5uS>tcS'
    none_type_0 = None
    float_0 = -3341.4
    validation_0 = module_0.Validation(float_0, str_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.__eq__(none_type_0)
    validation_1 = module_0.Validation(str_0, none_type_0)


def test_case_15():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.__eq__(validation_0)
    var_0.is_fail()


def test_case_16():
    str_0 = "YflVw+hPRcDneeH](Tk"
    dict_0 = {str_0: str_0, str_0: str_0}
    validation_0 = module_0.Validation(dict_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.__eq__(dict_0)
    var_2 = var_1.__str__()
    var_1.to_lazy()


def test_case_17():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.map(none_type_0)
    var_1.to_either()


def test_case_18():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_maybe()
    var_1 = module_0.Validation(validation_0, var_0)
    var_2 = var_1.__eq__(validation_0)
    var_3 = validation_0.to_either()
    var_4 = validation_0.to_box()
    validation_1 = module_0.Validation(set_0, var_3)
    validation_1.to_try()
