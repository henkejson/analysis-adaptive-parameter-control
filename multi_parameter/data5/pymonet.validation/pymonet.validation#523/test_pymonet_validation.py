# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0
import builtins as module_1


def test_case_0():
    bool_0 = True
    none_type_0 = None
    validation_0 = module_0.Validation(bool_0, none_type_0)
    var_0 = validation_0.__eq__(none_type_0)


def test_case_1():
    bytes_0 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.__str__()
    validation_0.map(bytes_0)


def test_case_2():
    bytes_0 = b"S"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.__str__()
    validation_0.map(bytes_0)


def test_case_3():
    float_0 = 562.632
    validation_0 = module_0.Validation(float_0, float_0)


def test_case_4():
    int_0 = 568
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.to_either()


def test_case_5():
    str_0 = "Validation.success[{}]"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.is_fail()
    var_0.to_maybe()


def test_case_6():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.map(none_type_0)


def test_case_7():
    bytes_0 = b"S"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_lazy()
    validation_0.bind(var_0)


def test_case_8():
    list_0 = []
    bytes_0 = b"S"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(list_0)
    bool_0 = True
    bytes_1 = b"m1gn\xfd\x97"
    tuple_0 = (bool_0, bool_0, bool_0, bytes_1)
    list_1 = [tuple_0, bytes_1]
    var_1 = validation_0.to_maybe()
    validation_1 = module_0.Validation(list_1, bool_0)
    validation_0.ap(bytes_1)


def test_case_9():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_either()
    var_2 = validation_0.to_lazy()
    var_3 = validation_0.__eq__(none_type_0)
    var_4 = var_2.to_try()
    complex_0 = 1985.2386 + 2559.345j
    var_5 = validation_0.to_box()
    var_6 = var_1.to_box()
    validation_1 = module_0.Validation(complex_0, var_5)
    validation_1.is_success()


def test_case_10():
    float_0 = 2034.2
    validation_0 = module_0.Validation(float_0, float_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.__str__()
    var_1.is_fail()


def test_case_11():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_either()
    var_2 = var_1.__eq__(none_type_0)
    var_2.to_lazy()


def test_case_12():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_try()
    var_0.is_success()


def test_case_13():
    list_0 = []
    bytes_0 = b"S"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    bytes_1 = b"\t\x17\x91\xdb\x0f\xcd\xc41-\xe5"
    tuple_0 = (list_0, list_0, list_0, bytes_1)
    list_1 = [tuple_0, bytes_1]
    validation_1 = module_0.Validation(list_1, bytes_1)
    var_0 = validation_1.to_maybe()
    var_1 = var_0.to_try()
    var_1.to_either()


def test_case_14():
    bytes_0 = b"&\xeb"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    var_0.to_box()


def test_case_15():
    bool_0 = False
    none_type_0 = None
    validation_0 = module_0.Validation(bool_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_0.is_success()


def test_case_16():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    tuple_0 = ()
    validation_1 = module_0.Validation(none_type_0, tuple_0)
    var_0 = validation_1.__eq__(validation_0)
    var_0.is_success()


def test_case_17():
    list_0 = []
    bytes_0 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(list_0)
    bytes_1 = b"m1gn\xfd\x97"
    tuple_0 = (var_0, var_0, var_0, bytes_1)
    list_1 = [tuple_0, bytes_1]
    var_1 = var_0.__eq__(list_0)
    var_2 = validation_0.to_maybe()
    validation_1 = module_0.Validation(list_1, var_0)
    var_3 = module_0.Validation(var_1, var_2)
    validation_1.to_maybe()


def test_case_18():
    list_0 = []
    bytes_0 = b"S"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.is_success()
    validation_1 = module_0.Validation(bytes_0, list_0)
    var_1 = module_1.object()
    var_2 = validation_1.__str__()
    var_3 = var_1.__str__()
    var_1.to_lazy()
