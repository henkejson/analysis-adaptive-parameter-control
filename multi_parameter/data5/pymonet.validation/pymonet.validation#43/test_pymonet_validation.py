# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0
import builtins as module_1


def test_case_0():
    float_0 = -1975.5978
    validation_0 = module_0.Validation(float_0, float_0)
    var_0 = validation_0.__eq__(validation_0)
    var_0.is_fail()


def test_case_1():
    int_0 = 1
    validation_0 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.__eq__(int_0)
    validation_0.is_fail()


def test_case_2():
    bytes_0 = b"\x18\xeb\x9d\xeb|\xeb/\x8c\xb6\xb0I\xaf\x85\x94G.\x90\x91"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    none_type_0 = None
    validation_1 = module_0.Validation(var_0, none_type_0)
    validation_1.is_success()


def test_case_3():
    bytes_0 = b'$\xf7\xb7\x8b\xbfW"a\x91\xa6\xfa\x99C\xecY\xdc\xe1|K'
    bool_0 = True
    list_0 = [bytes_0, bytes_0, bool_0, bool_0]
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_lazy()
    var_1.is_fail()


def test_case_4():
    bytes_0 = b"B\x16Q\x8f\x91T\xf0"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.to_maybe()
    var_2 = var_0.bind(var_1)


def test_case_5():
    int_0 = -1024
    int_0.to_box()


def test_case_6():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)


def test_case_7():
    bytes_0 = b"\x00\xe5\x9b\x020\x91Fn\xca=\xfd\xf7\xe2M\xf5\x11"
    none_type_0 = None
    validation_0 = module_0.Validation(bytes_0, none_type_0)
    validation_0.is_fail()


def test_case_8():
    int_0 = 1730
    complex_0 = -4583.9 + 3947.56761j
    int_1 = 2236
    tuple_0 = (int_1, complex_0)
    validation_0 = module_0.Validation(complex_0, tuple_0)
    validation_0.map(int_0)


def test_case_9():
    object_0 = module_1.object()
    str_0 = "Left[T]"
    tuple_0 = (str_0,)
    float_0 = -3130.88
    list_0 = [object_0]
    tuple_1 = (float_0, float_0, list_0)
    validation_0 = module_0.Validation(tuple_0, tuple_1)
    validation_1 = module_0.Validation(tuple_0, str_0)
    var_0 = validation_1.to_maybe()
    var_1 = var_0.map(var_0)
    validation_1.bind(object_0)


def test_case_10():
    bytes_0 = b"T`\xce\xff22\xcf\xeb\xd18\xcb\x04\x0fG5\xa0\xcbG"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_maybe()
    validation_0.ap(dict_0)


def test_case_11():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    validation_0 = module_0.Validation(dict_0, bool_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.to_maybe()
    var_2 = var_1.__eq__(bool_0)
    var_2.to_maybe()


def test_case_12():
    str_0 = "rsi\\Mo\x0b'Ho~"
    set_0 = {str_0, str_0}
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, set_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_maybe()
    var_2 = var_1.to_box()
    var_3 = var_2.to_maybe()
    var_3.to_maybe()


def test_case_13():
    bool_0 = True
    none_type_0 = None
    validation_0 = module_0.Validation(bool_0, none_type_0)
    validation_0.to_try()


def test_case_14():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.__str__()
    var_0.to_lazy()


def test_case_15():
    int_0 = -1024
    bytes_0 = b"\xe0\x02"
    tuple_0 = (int_0, bytes_0)
    set_0 = {bytes_0, int_0, tuple_0, int_0}
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.ap(tuple_0)
    var_2 = var_1.map(int_0)
    var_3 = var_2.map(bytes_0)
    var_4 = var_3.bind(var_1)
    var_5 = var_4.to_either()
    float_0 = -1422.46
    validation_1 = module_0.Validation(float_0, float_0)
    validation_2 = module_0.Validation(var_2, var_0)
    var_6 = validation_2.__eq__(validation_1)
    var_7 = var_2.ap(var_6)
    var_7.to_maybe()


def test_case_16():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_maybe()
    str_0 = "trD6b'qA']"
    var_1 = var_0.__eq__(validation_0)
    validation_0.bind(str_0)


def test_case_17():
    int_0 = -1024
    bytes_0 = b"\xe0\x02"
    tuple_0 = (int_0, bytes_0)
    dict_0 = {}
    validation_0 = module_0.Validation(tuple_0, dict_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_maybe()
    var_1.ap(dict_0)
