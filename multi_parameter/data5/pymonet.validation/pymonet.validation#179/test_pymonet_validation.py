# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0
import builtins as module_1


def test_case_0():
    int_0 = 0
    validation_0 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.__eq__(int_0)
    var_0.to_box()


def test_case_1():
    bool_0 = True
    str_0 = "0u8?8\x0cH,xyv$@ST\\"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.__eq__(bool_0)
    var_2 = validation_0.is_success()
    var_2.to_box()


def test_case_2():
    str_0 = "A/q&@vOMm.l"
    validation_0 = module_0.Validation(str_0, str_0)


def test_case_3():
    int_0 = -906
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.__str__()


def test_case_4():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.is_fail()


def test_case_5():
    complex_0 = 4619.802 + 1573.702431j
    validation_0 = module_0.Validation(complex_0, complex_0)
    validation_0.map(complex_0)


def test_case_6():
    bytes_0 = b"\x1e=9\x8e\x82\xf6\xbc\x88FFp\xf2"
    set_0 = {bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0, bytes_0]
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.bind(list_0)


def test_case_7():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.to_lazy()
    var_2 = var_1.__str__()
    str_0 = "/\x0c\\H\\Ucgki'OTZ|U3\rZ)"
    bytes_0 = b"\xec\xcf\xd5\x15Kc\xbe[,\xa1\x82\x97\xe3I\x12"
    validation_1 = module_0.Validation(bytes_0, bytes_0)
    validation_2 = module_0.Validation(validation_1, validation_1)
    validation_2.ap(str_0)


def test_case_8():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_lazy()


def test_case_9():
    bool_0 = True
    bool_1 = True
    validation_0 = module_0.Validation(bool_1, bool_1)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_try()
    var_1.map(bool_0)


def test_case_10():
    str_0 = "4"
    none_type_0 = None
    validation_0 = module_0.Validation(str_0, none_type_0)
    validation_0.to_try()


def test_case_11():
    none_type_0 = None
    object_0 = module_1.object()
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_0.to_maybe()


def test_case_12():
    str_0 = 'P=Q"kaD_cd'
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    var_1 = var_0.__str__()
    var_1.to_either()


def test_case_13():
    dict_0 = {}
    none_type_0 = None
    object_0 = module_1.object()
    validation_0 = module_0.Validation(none_type_0, dict_0)
    var_0 = validation_0.__eq__(validation_0)
    bool_0 = False
    var_1 = validation_0.__str__()
    validation_0.ap(bool_0)


def test_case_14():
    dict_0 = {}
    none_type_0 = None
    object_0 = module_1.object()
    validation_0 = module_0.Validation(none_type_0, dict_0)
    var_0 = validation_0.to_either()
    validation_0.ap(var_0)


def test_case_15():
    float_0 = 171.2282
    dict_0 = {float_0: float_0}
    none_type_0 = None
    object_0 = module_1.object()
    validation_0 = module_0.Validation(none_type_0, dict_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.__eq__(validation_0)
    bool_0 = False
    validation_0.ap(bool_0)


def test_case_16():
    dict_0 = {}
    none_type_0 = None
    object_0 = module_1.object()
    validation_0 = module_0.Validation(none_type_0, dict_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.__eq__(validation_0)
    bool_0 = False
    var_2 = validation_0.to_maybe()
    bool_0.to_either()


def test_case_17():
    float_0 = 171.2282
    dict_0 = {}
    none_type_0 = None
    object_0 = module_1.object()
    validation_0 = module_0.Validation(none_type_0, dict_0)
    validation_1 = module_0.Validation(float_0, none_type_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.__eq__(validation_1)
    var_1.bind(var_1)
