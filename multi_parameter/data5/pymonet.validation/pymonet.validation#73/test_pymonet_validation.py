# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0
import builtins as module_1


def test_case_0():
    float_0 = 4044.0
    list_0 = []
    bytes_0 = b"pJ=\xb4\xdc\xd1Cx\x8d05jc\xf8\xf3\x99\x1bK\t\xe7"
    set_0 = {bytes_0, bytes_0, bytes_0}
    validation_0 = module_0.Validation(set_0, bytes_0)
    var_0 = validation_0.__eq__(list_0)
    var_0.bind(float_0)


def test_case_1():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.__str__()
    var_0.to_either()


def test_case_2():
    tuple_0 = ()
    str_0 = ","
    validation_0 = module_0.Validation(str_0, tuple_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_box()
    var_2 = var_1.to_lazy()
    var_2.is_fail()


def test_case_3():
    bool_0 = False
    str_0 = "WZ;SB,u"
    list_0 = [str_0, str_0]
    validation_0 = module_0.Validation(list_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_lazy()
    var_2 = var_1.to_either()
    list_1 = [var_2, str_0]
    validation_1 = module_0.Validation(list_1, var_1)
    validation_1.map(bool_0)


def test_case_4():
    str_0 = "9)F;pwILd5\x0bV.EJQu:6"
    none_type_0 = None
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    var_1 = var_0.ap(none_type_0)
    var_2 = validation_1.__eq__(var_1)
    var_3 = validation_0.to_maybe()
    validation_2 = module_0.Validation(none_type_0, str_0)
    var_4 = validation_2.to_try()
    var_5 = var_0.map(var_4)
    str_1 = ""
    validation_3 = module_0.Validation(str_1, str_1)
    var_4.is_fail()


def test_case_5():
    bytes_0 = b"\xd16wi\xf7\x86\x15\xb3G\xc6}\x17"
    validation_0 = module_0.Validation(bytes_0, bytes_0)


def test_case_6():
    object_0 = module_1.object()
    validation_0 = module_0.Validation(object_0, object_0)
    validation_0.to_either()


def test_case_7():
    bytes_0 = b"\xb94\xa5\x9b\x14\xfb\x9c:p\xb5\xecK\x00k\xce"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.is_fail()
    var_0.to_lazy()


def test_case_8():
    str_0 = "94Ph1#%|y[\r8>m"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, str_0)
    validation_0.bind(str_0)


def test_case_9():
    int_0 = -1391
    validation_0 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.to_lazy()
    validation_0.ap(var_0)


def test_case_10():
    bytes_0 = b"\xde\x15\x85\xc1\xcf6a"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.__str__()
    var_2 = var_1.__str__()
    var_2.to_maybe()


def test_case_11():
    float_0 = 706.069154
    set_0 = {float_0, float_0}
    none_type_0 = None
    validation_0 = module_0.Validation(set_0, none_type_0)
    validation_1 = module_0.Validation(validation_0, float_0)
    var_0 = validation_1.to_lazy()
    var_1 = var_0.__str__()


def test_case_12():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_box()
    var_1.to_box()


def test_case_13():
    int_0 = 383
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.to_try()


def test_case_14():
    str_0 = "{ypAl^U@5%mVC{Fk"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()


def test_case_15():
    set_0 = set()
    int_0 = -66
    validation_0 = module_0.Validation(int_0, set_0)
    var_0 = validation_0.to_maybe()


def test_case_16():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)
    var_0.to_maybe()


def test_case_17():
    str_0 = "9)F;pwILd5\x0bV.EJQu:6"
    none_type_0 = None
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.__eq__(var_0)
    var_2 = var_0.to_lazy()
    validation_1 = module_0.Validation(str_0, none_type_0)
    var_3 = validation_0.__eq__(validation_1)
    validation_1.to_maybe()
