# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    str_0 = "\n    Return the first element of the list which matches the keys, or None if no element matches.\n\n    :param collection: collection to search\n    :type collection: List[A]\n    :param key: function to decide witch element should be found\n    :type key: Function(A) -> Boolean\n    :returns: element of collection or None\n    :rtype: A | None\n    "
    str_1 = "$I"
    validation_0 = module_0.Validation(str_1, str_1)
    var_0 = validation_0.__eq__(str_0)
    var_0.to_either()


def test_case_1():
    str_0 = 'dZVLSar\\"\\ywXcK'
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.__str__()
    var_2 = var_0.__eq__(str_0)


def test_case_2():
    str_0 = "lJiL[8UVG,E^h["
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    var_0.is_success()


def test_case_3():
    str_0 = "P5Qggj?vJKS<;X\rXZ"
    validation_0 = module_0.Validation(str_0, str_0)


def test_case_4():
    bool_0 = True
    none_type_0 = None
    validation_0 = module_0.Validation(bool_0, none_type_0)
    validation_0.to_maybe()


def test_case_5():
    str_0 = 'dZVLSar\\"\\ywXcK'
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.is_fail()
    var_1 = validation_0.to_maybe()
    var_2 = var_1.to_try()
    var_3 = var_1.to_try()
    var_4 = validation_0.__eq__(str_0)
    str_1 = "$I"
    var_5 = validation_0.is_fail()
    validation_1 = module_0.Validation(var_2, var_5)
    var_6 = validation_0.__eq__(str_1)


def test_case_6():
    bytes_0 = b"e\x0bD\xa8\x0e]a\xb9\xd7\x9e~\xaa\xf8\xd2"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_0.map(bytes_0)


def test_case_7():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.bind(none_type_0)


def test_case_8():
    str_0 = "$I"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    none_type_0 = None
    validation_0.ap(none_type_0)


def test_case_9():
    str_0 = 'dZVLSar\\"\\ywXcK'
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.to_maybe()
    var_2 = validation_0.is_success()
    var_3 = var_0.map(var_2)
    var_4 = var_3.to_box()
    var_5 = validation_0.__str__()
    var_6 = validation_0.to_box()
    var_6.is_success()


def test_case_10():
    str_0 = 'dZVLSar\\"\\ywXcK'
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.map(str_0)
    var_2 = var_1.ap(var_0)
    bytes_0 = b"`F\xd6\x1b`]\xd2\xe8\x95\xd9\xefGD\n\xfc\xea\xc7"
    var_3 = var_2.__eq__(bytes_0)
    var_4 = validation_0.to_lazy()
    var_5 = var_4.to_either()


def test_case_11():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.to_try()


def test_case_12():
    str_0 = 'dZVLSar\\"\\ywXcK'
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.__str__()
    var_2 = validation_0.__eq__(validation_0)


def test_case_13():
    bool_0 = True
    tuple_0 = ()
    dict_0 = {bool_0: tuple_0, bool_0: bool_0}
    float_0 = -990.946383
    tuple_1 = (dict_0, float_0)
    tuple_2 = ()
    validation_0 = module_0.Validation(tuple_1, tuple_2)
    var_0 = validation_0.to_either()
    var_0.is_success()


def test_case_14():
    str_0 = 'dZVLSar\\"\\ywXcK'
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.map(str_0)
    str_1 = "$I"
    validation_1 = module_0.Validation(str_1, str_1)
    var_2 = validation_1.__eq__(validation_0)


def test_case_15():
    str_0 = ""
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    var_0.map(str_0)


def test_case_16():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.__str__()
    var_0.to_maybe()
