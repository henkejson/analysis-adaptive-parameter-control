# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    str_0 = "[L^\\?4]N-<:G9\\{3dB#="
    none_type_0 = None
    validation_0 = module_0.Validation(str_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)


def test_case_1():
    str_0 = "od_^o3><"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, str_0)
    var_0 = validation_0.__eq__(none_type_0)


def test_case_2():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    validation_1 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_try()


def test_case_3():
    str_0 = "`k5J/5v-F`4!<~,"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()


def test_case_4():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    validation_1 = module_0.Validation(set_0, set_0)
    var_0 = validation_1.to_lazy()
    var_1 = validation_1.__str__()
    var_2 = validation_1.to_maybe()
    var_3 = validation_1.is_fail()
    var_3.to_try()


def test_case_5():
    str_0 = "``Q&DZx:5}q5rJ."
    validation_0 = module_0.Validation(str_0, str_0)


def test_case_6():
    str_0 = "od_^o3><"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, str_0)
    var_0 = validation_0.is_fail()
    validation_1 = module_0.Validation(validation_0, validation_0)


def test_case_7():
    str_0 = "Validat=on.fail[b'B*WH\\xf1S\\xe4\\x05@', b'B*WH\\xf1S\\xe4\\x05@']"
    validation_0 = module_0.Validation(str_0, str_0)
    none_type_0 = None
    validation_0.map(none_type_0)


def test_case_8():
    float_0 = -710.16
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.bind(float_0)


def test_case_9():
    str_0 = "`k5J/5v-F`4!<~,"
    validation_0 = module_0.Validation(str_0, str_0)
    validation_0.ap(str_0)


def test_case_10():
    str_0 = "od_^osw"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_box()


def test_case_11():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_lazy()


def test_case_12():
    str_0 = "^jEez>+T7"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_either()
    var_1.map(str_0)


def test_case_13():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    validation_1 = validation_0.to_either()
    bool_0 = False
    bytes_0 = b"\x80"
    validation_2 = module_0.Validation(validation_0, bool_0)
    var_0 = validation_2.__eq__(bytes_0)
    var_1 = validation_2.to_lazy()
    var_2 = validation_0.__str__()
    var_3 = validation_1.__str__()
    var_0.to_box()


def test_case_14():
    str_0 = "?fI1eK\\l'n\"'S~x2J"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, str_0)
    var_0 = validation_0.__str__()
    var_0.bind(none_type_0)


def test_case_15():
    bytes_0 = b"h\xbezc\x91C"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_box()


def test_case_16():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    validation_1 = module_0.Validation(set_0, set_0)
    var_0 = validation_1.to_lazy()
    validation_2 = module_0.Validation(set_0, var_0)
    var_1 = validation_1.__eq__(validation_2)
    var_1.to_lazy()
