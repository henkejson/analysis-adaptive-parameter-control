# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0
import builtins as module_1


def test_case_0():
    bool_0 = True
    int_0 = 1129
    validation_0 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.__eq__(bool_0)
    var_0.to_lazy()


def test_case_1():
    bool_0 = True
    bytes_0 = b"\xc0]%\xe7QnC\x04.\xc0\xda\x96\xe8\xdf\xc7l"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, bytes_0)
    var_0 = validation_0.to_maybe()
    none_type_1 = None
    validation_1 = module_0.Validation(bool_0, none_type_1)
    var_1 = validation_1.__eq__(bool_0)
    var_1.to_maybe()


def test_case_2():
    int_0 = -1833
    validation_0 = module_0.Validation(int_0, int_0)


def test_case_3():
    int_0 = -1833
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.to_try()


def test_case_4():
    int_0 = 1
    str_0 = "L8azy[T, W]"
    none_type_0 = None
    validation_0 = module_0.Validation(int_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = none_type_0.__str__()
    var_2 = validation_0.is_fail()
    var_3 = var_1.__eq__(var_2)
    var_4 = var_0.to_lazy()


def test_case_5():
    object_0 = module_1.object()
    str_0 = "Lazy[T, W]"
    validation_0 = module_0.Validation(object_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.is_success()
    var_2 = validation_0.__str__()
    var_3 = validation_0.__eq__(object_0)
    var_4 = validation_0.__eq__(validation_0)
    validation_0.map(var_1)


def test_case_6():
    str_0 = "\t=|R%~@"
    dict_0 = {str_0: str_0}
    validation_0 = module_0.Validation(dict_0, str_0)
    validation_0.bind(validation_0)


def test_case_7():
    bool_0 = True
    str_0 = "D+h#[h7"
    validation_0 = module_0.Validation(bool_0, str_0)
    validation_0.ap(bool_0)


def test_case_8():
    none_type_0 = None
    int_0 = -2439
    validation_0 = module_0.Validation(none_type_0, int_0)
    var_0 = validation_0.to_box()
    validation_0.ap(int_0)


def test_case_9():
    float_0 = -4366.0198
    validation_0 = module_0.Validation(float_0, float_0)
    var_0 = validation_0.to_lazy()


def test_case_10():
    object_0 = module_1.object()
    int_0 = 1
    str_0 = "Lazy[T, W]"
    none_type_0 = None
    validation_0 = module_0.Validation(str_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.bind(int_0)
    var_2 = var_1.bind(int_0)
    var_3 = var_2.map(object_0)
    var_3.to_box()


def test_case_11():
    object_0 = module_1.object()
    str_0 = "Lazy[T, W]"
    validation_0 = module_0.Validation(object_0, str_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.__eq__(validation_0)
    var_1.to_lazy()


def test_case_12():
    tuple_0 = ()
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, tuple_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.__str__()
    var_1.to_maybe()


def test_case_13():
    object_0 = module_1.object()
    str_0 = "Lazy[T, W]"
    validation_0 = module_0.Validation(object_0, str_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_lazy()


def test_case_14():
    bytes_0 = b"\xc0]%\xe7QnC\x04.\xc0\xda\x96\xe8\xdf\xc7l"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, bytes_0)
    none_type_1 = None
    none_type_2 = None
    validation_1 = module_0.Validation(none_type_1, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_box()
    var_2 = validation_1.__eq__(none_type_2)
    var_3 = validation_0.__str__()
    var_4 = var_1.to_either()
    validation_0.bind(var_4)


def test_case_15():
    object_0 = module_1.object()
    str_0 = "Lazy[T, W]"
    validation_0 = module_0.Validation(object_0, str_0)
    var_0 = validation_0.__str__()
    str_1 = "Lazy[T, W]"
    bool_0 = True
    validation_1 = module_0.Validation(str_1, bool_0)
    validation_2 = module_0.Validation(validation_1, var_0)
    var_1 = validation_2.__eq__(validation_0)
    validation_1.__str__()


def test_case_16():
    int_0 = -1833
    tuple_0 = ()
    validation_0 = module_0.Validation(int_0, tuple_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_either()
    var_1.to_either()


def test_case_17():
    int_0 = -1833
    tuple_0 = ()
    validation_0 = module_0.Validation(int_0, tuple_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_maybe()
    var_2 = var_1.to_either()
    var_2.to_either()
