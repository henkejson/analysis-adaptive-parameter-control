# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.__eq__(bool_0)
    var_1.to_either()


def test_case_1():
    none_type_0 = None
    bytes_0 = b""
    validation_0 = module_0.Validation(none_type_0, bytes_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.is_fail()
    var_2 = var_1.__eq__(var_1)
    var_3 = validation_0.__str__()
    var_4 = validation_0.to_box()
    var_4.bind(bytes_0)


def test_case_2():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.__eq__(validation_0)
    var_0.to_lazy()


def test_case_3():
    none_type_0 = None
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_either()
    var_0.map(none_type_0)


def test_case_4():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_either()
    var_0.is_fail()


def test_case_5():
    bytes_0 = b"QE\x06"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_0.to_maybe()


def test_case_6():
    bool_0 = True
    bool_0.to_lazy()


def test_case_7():
    str_0 = "nH\niAP9.[^S"
    validation_0 = module_0.Validation(str_0, str_0)


def test_case_8():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.to_maybe()


def test_case_9():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.is_fail()


def test_case_10():
    set_0 = set()
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.map(set_0)


def test_case_11():
    str_0 = "q6SQHm\\O2"
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.bind(str_0)


def test_case_12():
    int_0 = 4742
    int_1 = -568
    none_type_0 = None
    validation_0 = module_0.Validation(int_1, none_type_0)
    validation_0.ap(int_0)


def test_case_13():
    str_0 = "9P:rBR\x0b#b+k[EL3Z"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, str_0)
    var_0 = validation_0.to_box()
    var_0.is_success()


def test_case_14():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.__eq__(validation_0)


def test_case_15():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.__eq__(validation_0)
    var_2 = validation_0.to_lazy()
    var_3 = var_2.to_try()


def test_case_16():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.__eq__(validation_0)
    var_2 = validation_0.to_try()
    var_3 = var_2.bind(var_2)
    var_4 = validation_0.to_lazy()
    var_5 = var_4.to_try()


def test_case_17():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.__eq__(validation_0)


def test_case_18():
    bytes_0 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_0.ap(var_0)


def test_case_19():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    validation_0 = module_0.Validation(dict_0, dict_0)
    validation_1 = module_0.Validation(validation_0, validation_0)
    var_0 = validation_0.__eq__(validation_1)
    var_0.to_try()
