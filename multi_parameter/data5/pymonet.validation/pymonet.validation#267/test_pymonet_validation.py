# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bool_0 = False
    bool_1 = False
    validation_0 = module_0.Validation(bool_1, bool_1)
    var_0 = validation_0.__eq__(bool_0)
    var_0.is_success()


def test_case_1():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.__str__()
    var_0.is_fail()


def test_case_2():
    dict_0 = {}
    bytes_0 = b".j,b\xaf\xf9 \xa7w y\xca\xa3\x86\xdb{\xeb\xa04\x7f"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    var_0.map(dict_0)


def test_case_3():
    float_0 = 4344.0
    str_0 = "LL9&QE4CF}+"
    validation_0 = module_0.Validation(float_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_lazy()


def test_case_4():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.is_fail()
    var_1 = validation_0.to_maybe()
    var_0.to_either()


def test_case_5():
    bytes_0 = b"d\x86\xd4.\xa7\x13[\xd0S\x06\xda\x8b.m\x05"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()


def test_case_6():
    bool_0 = False
    bool_0.is_success()


def test_case_7():
    int_0 = 15
    validation_0 = module_0.Validation(int_0, int_0)


def test_case_8():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.to_maybe()


def test_case_9():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.is_fail()


def test_case_10():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.map(none_type_0)


def test_case_11():
    bool_0 = False
    str_0 = "lL/}6>CTAo\t?"
    validation_0 = module_0.Validation(str_0, str_0)
    validation_0.bind(bool_0)


def test_case_12():
    int_0 = 3467
    str_0 = "[5V"
    validation_0 = module_0.Validation(str_0, str_0)
    validation_0.ap(int_0)


def test_case_13():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_box()


def test_case_14():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_try()
    var_1.to_maybe()


def test_case_15():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.to_try()


def test_case_16():
    str_0 = "#*"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_box()
    var_0.to_maybe()


def test_case_17():
    bytes_0 = b'\x96\xe4\xb3\xea"?\xb9a\xd4\xa7\xa2c`'
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.to_either()
    str_0 = "G{/y2'FdW2R,AO>gZ2_"
    validation_1 = module_0.Validation(str_0, str_0)
    var_2 = validation_1.to_maybe()
    var_3 = validation_1.to_maybe()
    var_4 = var_3.ap(validation_1)
    float_0 = 2340.974755
    validation_2 = module_0.Validation(str_0, var_4)
    validation_3 = module_0.Validation(str_0, validation_0)
    var_5 = validation_0.__eq__(float_0)
    var_6 = validation_2.__eq__(validation_3)
    var_7 = validation_0.is_success()
    var_4.is_success()


def test_case_18():
    bytes_0 = b'\x96\xe4\xb3\xea"?\xb9a\xd4\xa7\xa2c`'
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.to_either()
    var_2 = validation_0.__str__()
    tuple_0 = ()
    validation_1 = module_0.Validation(validation_0, tuple_0)
    var_3 = validation_0.to_maybe()
    var_4 = var_3.ap(tuple_0)
    var_5 = var_4.to_try()
    float_0 = 4344.0
    str_0 = "LL9&QE4CF}+"
    validation_2 = module_0.Validation(float_0, str_0)
    var_6 = validation_1.to_try()
    validation_3 = module_0.Validation(var_6, var_5)
    var_7 = validation_1.to_either()
    var_8 = var_1.__eq__(var_1)
    var_9 = validation_0.__eq__(var_1)
    var_9.is_success()
