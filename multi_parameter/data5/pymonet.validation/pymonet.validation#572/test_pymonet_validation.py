# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    int_0 = -4032
    validation_0 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_0.to_try()


def test_case_1():
    str_0 = ")=j<OX*2\\b[8#e!2x=E"
    none_type_0 = None
    bool_0 = True
    list_0 = [bool_0, str_0]
    validation_0 = module_0.Validation(bool_0, list_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_maybe()
    var_2 = validation_0.__eq__(none_type_0)
    var_2.is_success()


def test_case_2():
    str_0 = '<-$&V8Tr(:HV*xG)"f1q'
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.is_fail()
    var_1 = validation_0.__str__()
    var_2 = validation_0.__str__()
    var_3 = var_1.__eq__(str_0)


def test_case_3():
    bytes_0 = b"\xa6)U\xd4*@"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()


def test_case_4():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_5():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.to_either()


def test_case_6():
    str_0 = ")=j<OX*2\\b[8#e!2x=E"
    float_0 = 2166.982
    bool_0 = True
    list_0 = [float_0, str_0]
    validation_0 = module_0.Validation(bool_0, list_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.to_either()
    var_2 = validation_0.to_maybe()
    var_3 = var_1.to_lazy()
    var_4 = var_2.__eq__(list_0)
    var_1.ap(validation_0)


def test_case_7():
    float_0 = -797.3002
    bytes_0 = b"\x1f\xb9\x7f\xc7\x1a\x96\x84\xa69\xbdT_\xa2\x94gy\xa1\xa3\x97\xb2"
    set_0 = set()
    tuple_0 = (float_0, bytes_0, set_0)
    validation_0 = module_0.Validation(tuple_0, bytes_0)
    var_0 = validation_0.to_try()
    int_0 = 2605
    validation_0.bind(int_0)


def test_case_8():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.ap(none_type_0)


def test_case_9():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.to_either()
    var_2 = var_1.to_box()
    var_3 = var_2.__str__()
    var_4 = var_3.__str__()
    var_4.is_fail()


def test_case_10():
    bytes_0 = b"\xcd\x17\xe3\xe9r\x06s\xd2\xec\xa7\x1a\xdewy("
    bytes_1 = b"\x9b\xc6QsW\xa0l \xaf]\xa6\xda\x12\xdcK"
    none_type_0 = None
    validation_0 = module_0.Validation(bytes_1, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_either()
    var_2 = var_1.to_box()
    var_3 = var_2.__str__()
    var_3.ap(bytes_0)


def test_case_11():
    int_0 = -4032
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.to_try()


def test_case_12():
    none_type_0 = None
    bool_0 = True
    list_0 = []
    validation_0 = module_0.Validation(bool_0, list_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.to_either()
    var_2 = validation_0.to_maybe()
    var_3 = validation_0.__eq__(none_type_0)
    var_3.is_success()


def test_case_13():
    str_0 = '<-$&V8Tr(:HV*xG)"f1q'
    validation_0 = module_0.Validation(str_0, str_0)
    validation_1 = module_0.Validation(validation_0, str_0)
    var_0 = validation_0.is_fail()
    bool_0 = True
    var_1 = validation_0.__str__()
    var_2 = validation_0.to_either()
    validation_2 = module_0.Validation(validation_0, bool_0)
    var_3 = validation_0.__eq__(validation_2)
    var_3.to_try()


def test_case_14():
    str_0 = ""
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_try()
    bool_0 = True
    var_1 = validation_0.__str__()
    var_2 = validation_0.to_either()
    validation_1 = module_0.Validation(validation_0, bool_0)
    var_3 = validation_0.to_try()
    var_4 = validation_0.to_either()
    var_5 = validation_1.__eq__(validation_1)
    none_type_0 = None
    var_6 = validation_1.__eq__(none_type_0)
    validation_1.bind(var_2)
