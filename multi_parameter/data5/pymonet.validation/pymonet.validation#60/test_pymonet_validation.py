# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bytes_0 = b"?\xa0(\xce\xec\xbc\xfc\xd7|\xf4\x9eC\xd940\x97"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.__str__()
    var_2 = validation_0.__eq__(validation_0)
    validation_1 = module_0.Validation(var_2, var_2)
    validation_2 = module_0.Validation(var_1, var_1)
    var_3 = validation_1.to_box()
    var_3.to_box()


def test_case_1():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.__eq__(bool_0)
    var_0.is_success()


def test_case_2():
    list_0 = []
    int_0 = -1546
    validation_0 = module_0.Validation(int_0, int_0)
    validation_1 = module_0.Validation(list_0, list_0)
    var_0 = validation_1.__str__()
    var_0.to_try()


def test_case_3():
    bytes_0 = b'\xe4\xe4I"\x91\xcf\xa6H\xf9=W\xc7\x05\xcd\x8c\xfd'
    int_0 = -1492
    validation_0 = module_0.Validation(int_0, bytes_0)
    var_0 = validation_0.__str__()
    var_0.to_try()


def test_case_4():
    int_0 = 2715
    bytes_0 = b"axK\xe4G\x11e\xd3"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.__eq__(int_0)
    bytes_0.to_try()


def test_case_5():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_6():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.to_maybe()


def test_case_7():
    bytes_0 = b"?\xa0(\xce\xec\xbc\xfc\xd7|\xf4\x9eC\xd940\x97"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(bytes_0)
    var_1 = validation_0.__eq__(validation_0)
    none_type_0 = None
    none_type_1 = None
    validation_1 = module_0.Validation(none_type_1, none_type_1)
    validation_2 = module_0.Validation(none_type_0, none_type_1)
    var_2 = validation_0.is_success()
    validation_2.is_fail()


def test_case_8():
    str_0 = ""
    complex_0 = -4166.171 - 1115.524577j
    validation_0 = module_0.Validation(str_0, complex_0)
    validation_0.map(complex_0)


def test_case_9():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.bind(none_type_0)


def test_case_10():
    int_0 = 2169
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.ap(validation_0)


def test_case_11():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_box()


def test_case_12():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_lazy()
    var_0.is_success()


def test_case_13():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_try()
    var_1.is_success()


def test_case_14():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.to_try()


def test_case_15():
    bytes_0 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    bool_0 = False
    validation_0.ap(bool_0)


def test_case_16():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.__str__()
    var_1.bind(list_0)


def test_case_17():
    bytes_0 = b"?\xa0(\xce\xec\xbc\xfc\xd7|\xf4\x9eC\xd940\x97"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.__str__()
    var_2 = validation_0.__eq__(validation_0)
    validation_1 = module_0.Validation(var_2, var_2)
    validation_2 = module_0.Validation(var_0, var_1)
    var_3 = var_0.__eq__(var_1)
    var_4 = validation_2.__eq__(validation_1)
    var_5 = validation_2.is_success()
    var_6 = var_0.to_lazy()
    var_1.to_lazy()
