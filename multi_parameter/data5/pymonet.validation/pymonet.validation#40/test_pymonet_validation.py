# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bytes_0 = b"\xec\xe1\xa8\xc3\x14\x89\x8e\xb2"
    bytes_1 = b"t\x92\xccQc^\xef\xae\xcaR>\x82\xfd\x02\xd0\xd9\xc6\xda\x04"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_lazy()
    validation_1 = module_0.Validation(bytes_1, bytes_1)
    var_1 = validation_1.__eq__(var_0)
    var_1.to_lazy()


def test_case_1():
    bytes_0 = b"t\x92\xccQc^\xef\xae\xcaR>\x82\xfd\x02\xd0\xd9\xc6\xda\x04"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()


def test_case_2():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_3():
    bytes_0 = b"t\x92\xccQc\xef\xae\xcaR>\x82\xfd\x02\xd0\xd9\xc6\xda\x04"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.is_fail()


def test_case_4():
    none_type_0 = None
    none_type_1 = None
    validation_0 = module_0.Validation(none_type_1, none_type_1)
    validation_0.map(none_type_0)


def test_case_5():
    str_0 = 'grY"e+Ny\rC\r!g*,da'
    set_0 = {str_0, str_0, str_0, str_0}
    validation_0 = module_0.Validation(str_0, set_0)
    validation_0.bind(str_0)


def test_case_6():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.ap(validation_0)


def test_case_7():
    bytes_0 = b"\xec\xe1\xa8\xc3\x14\x89\x8e\xb2"
    int_0 = -2382
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.__eq__(int_0)
    var_2 = validation_0.to_either()
    var_3 = validation_0.is_success()
    var_4 = validation_0.__eq__(var_2)
    validation_1 = module_0.Validation(bytes_0, bytes_0)
    var_5 = var_3.__eq__(var_3)
    validation_2 = module_0.Validation(bytes_0, bytes_0)
    var_6 = validation_0.is_fail()
    var_7 = var_1.__eq__(validation_2)
    var_8 = validation_0.__str__()
    var_9 = var_4.__eq__(var_3)
    bool_0 = True
    validation_3 = module_0.Validation(bool_0, var_5)
    var_10 = validation_2.to_maybe()
    var_4.to_box()


def test_case_8():
    bytes_0 = b"\xec\xe1\xa8\xc3\x14\x89\x8e\xb2"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.is_fail()
    var_1.to_lazy()


def test_case_9():
    int_0 = 2765
    validation_0 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_either()
    var_2 = var_1.__str__()
    str_0 = "h3h[r.}g#E)@"
    str_1 = "pSdyv5K>`fEWu"
    set_0 = {str_0, str_1, str_1, str_0}
    bool_0 = True
    none_type_0 = None
    validation_1 = module_0.Validation(bool_0, none_type_0)
    validation_1.ap(set_0)


def test_case_10():
    int_0 = 3303
    dict_0 = {int_0: int_0, int_0: int_0}
    validation_0 = module_0.Validation(int_0, dict_0)
    var_0 = validation_0.to_try()
    var_0.to_try()


def test_case_11():
    bytes_0 = b"\xec\xe1\xa8\xc3\x14\x89\x8e\xb2"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.__str__()
    var_2 = validation_0.to_lazy()


def test_case_12():
    bytes_0 = b"\xec\xe1\xa8\xc3\x14\x89\x8e\xb2"
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bytes_0)
    var_0 = validation_0.to_either()


def test_case_13():
    bytes_0 = b"\xec\xe1\xa8\xc3\x14\x89\x8e\xb2"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_either()
    var_0.to_box()


def test_case_14():
    bytes_0 = b"\xec\xe1\xa8\xc3\x14\x89\x8e\xb2"
    int_0 = -2382
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_1 = module_0.Validation(int_0, validation_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.is_success()
    var_2 = var_0.map(var_0)
    var_3 = validation_0.__eq__(var_0)
    bytes_1 = b"t\x92\xccQc^\xef\xae\xcaR>\x82\xfd\x02\xd0\xd9\xc6\xda\x04"
    validation_2 = module_0.Validation(bytes_0, bytes_0)
    var_4 = var_1.__eq__(var_1)
    var_5 = validation_2.to_lazy()
    validation_3 = module_0.Validation(bytes_1, bytes_1)
    var_6 = validation_2.to_lazy()
    var_7 = validation_1.__eq__(validation_3)
    var_8 = validation_0.__str__()
    validation_4 = module_0.Validation(var_5, var_2)
    var_3.map(var_1)


def test_case_15():
    bool_0 = False
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.__str__()
    validation_0.ap(bool_0)


def test_case_16():
    bool_0 = False
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.is_fail()
    var_2 = validation_0.is_success()
    validation_0.map(bool_0)


def test_case_17():
    bytes_0 = b"\xecx$b\xe5RwRXD\xe2,P\xbd"
    str_0 = ""
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_box()
    var_2 = validation_0.is_fail()
    validation_1 = module_0.Validation(validation_0, bytes_0)
    bool_0 = False
    validation_2 = module_0.Validation(bool_0, bool_0)
    validation_2.ap(validation_2)
