# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0
import builtins as module_1


def test_case_0():
    str_0 = "mK*Y,5M`5i\"\nsXe'c@QL"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_maybe()
    str_0.ap(var_0)


def test_case_1():
    bytes_0 = b"\xea\x84\xfe\xb5\xeai\na"
    str_0 = "mK*Y,5M`5i\"\nsXe'c@QL"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.bind(bytes_0)
    var_1.is_fail()


def test_case_2():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)


def test_case_3():
    bytes_0 = b"\x1b\\\x852\xf5\x02M8\xf2f\xd9\xf1\xcc"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.__str__()


def test_case_4():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.is_fail()
    var_1 = var_0.__str__()


def test_case_5():
    bytes_0 = b"\xf4A\x8dB\xafQ\x16\xd9\x1a\xa4z:\r\x02"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_0.map(validation_0)


def test_case_6():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_0.bind(none_type_0)


def test_case_7():
    bool_0 = False
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.ap(bool_0)


def test_case_8():
    bytes_0 = b"\x84g\xe8k+Dn.P\x83\xa7\x86W~\x98\x8eIN"
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.to_maybe()
    var_1.map(bytes_0)


def test_case_9():
    complex_0 = -495.2899 + 2539.3j
    validation_0 = module_0.Validation(complex_0, complex_0)
    var_0 = validation_0.to_lazy()
    validation_0.to_try()


def test_case_10():
    int_0 = 3397
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.bind(int_0)
    var_2 = var_1.to_try()
    var_2.is_success()


def test_case_11():
    bytes_0 = b"!\x81\r\x98"
    bytes_1 = b"4\xd1\xf0\xd7\xbcN\x9d\x08s\xd7(\x84\x1d\x8e\xe8\xf7`"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, bytes_0)
    var_0 = validation_0.__eq__(none_type_0)
    validation_0.map(bytes_1)


def test_case_12():
    str_0 = ""
    bytes_0 = b"\xc1\xb18\x85\xfd\xfa\x83\xe87\x92\xe5\xe3\xd2\xf4\xfd"
    none_type_0 = None
    validation_0 = module_0.Validation(bytes_0, none_type_0)
    validation_1 = module_0.Validation(str_0, str_0)
    var_0 = validation_1.to_maybe()
    var_0.is_success()


def test_case_13():
    bytes_0 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.__str__()
    var_2 = validation_0.to_either()
    module_1.object(*bytes_0, **var_2)


def test_case_14():
    bytes_0 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_try()
    var_1 = module_0.Validation(validation_0, var_0)
    var_2 = validation_0.__eq__(var_1)
    var_3 = validation_0.__eq__(bytes_0)
    var_4 = validation_0.to_either()
    var_5 = validation_0.to_try()
    var_4.bind(var_3)
