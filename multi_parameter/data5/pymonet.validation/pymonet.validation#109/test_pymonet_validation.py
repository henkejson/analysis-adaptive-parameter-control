# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bool_0 = False
    bool_1 = False
    none_type_0 = None
    validation_0 = module_0.Validation(bool_0, bool_1)
    var_0 = validation_0.__eq__(none_type_0)
    var_1 = var_0.__eq__(bool_0)
    validation_0.to_either()


def test_case_1():
    bool_0 = True
    tuple_0 = (bool_0, bool_0, bool_0)
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_maybe()
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, none_type_0)


def test_case_2():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)


def test_case_3():
    int_0 = 1335
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.is_success()


def test_case_4():
    bytes_0 = b"E\xde\x03+\x0e~\xb5U\xd2E\xc2\xe7\x07\x8f"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, bytes_0)
    var_0 = validation_0.is_fail()
    var_1 = validation_0.__str__()
    var_1.is_fail()


def test_case_5():
    bool_0 = True
    bytes_0 = b"E\xde\x03+\x0e~\xb5U\xd2E\xc2\xe7\x07\x8f"
    none_type_0 = None
    validation_0 = module_0.Validation(bytes_0, none_type_0)
    validation_0.map(bool_0)


def test_case_6():
    bool_0 = False
    float_0 = -2971.45
    validation_0 = module_0.Validation(float_0, float_0)
    validation_0.bind(bool_0)


def test_case_7():
    str_0 = "\n    Max is a Monoid that will combines 2 numbers, resulting in the largest of the two.\n    "
    str_1 = "'\x0c/fU7\t+$*l9"
    validation_0 = module_0.Validation(str_1, str_1)
    validation_0.ap(str_0)


def test_case_8():
    int_0 = 1206
    validation_0 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.to_box()
    var_0.is_fail()


def test_case_9():
    none_type_0 = None
    str_0 = "0q@):_atU_A;4"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.ap(none_type_0)
    var_1.is_success()


def test_case_10():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    validation_0.to_try()


def test_case_11():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.map(validation_0)
    var_1.to_either()


def test_case_12():
    float_0 = 1709.96546
    validation_0 = module_0.Validation(float_0, float_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_0.to_try()


def test_case_13():
    float_0 = 1709.96546
    validation_0 = module_0.Validation(float_0, float_0)
    var_0 = validation_0.__eq__(float_0)
    none_type_0 = None
    none_type_1 = None
    validation_1 = module_0.Validation(none_type_1, validation_0)
    var_1 = validation_0.__eq__(validation_1)
    var_2 = validation_1.__eq__(validation_1)
    var_0.map(none_type_0)


def test_case_14():
    str_0 = "c_\"\x0bPB'r,'I&"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    var_0.is_fail()


def test_case_15():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.__str__()
    var_0.bind(tuple_0)


def test_case_16():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_either()
    none_type_0 = None
    none_type_1 = None
    validation_1 = module_0.Validation(none_type_1, none_type_1)
    var_1 = validation_1.to_box()
    var_1.map(none_type_0)


def test_case_17():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.to_lazy()
    validation_0.map(var_1)
