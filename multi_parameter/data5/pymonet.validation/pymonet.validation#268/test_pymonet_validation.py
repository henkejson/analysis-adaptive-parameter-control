# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    str_0 = "m6_a"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.__str__()
    validation_0.ap(str_0)


def test_case_1():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.__eq__(set_0)
    var_1 = validation_0.is_success()
    var_2 = validation_0.__str__()
    var_3 = validation_0.is_fail()
    var_3.to_try()


def test_case_2():
    bytes_0 = b"Y\xce\xa7\x12\x9b\xc77\x9d\xab\xaa>"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    var_0.to_either()


def test_case_3():
    str_0 = "m6_a"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, str_0)
    var_0 = validation_0.to_either()


def test_case_4():
    none_type_0 = None
    dict_0 = {}
    validation_0 = module_0.Validation(none_type_0, dict_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.is_success()
    var_0.to_maybe()


def test_case_5():
    str_0 = "m6_a"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()


def test_case_6():
    str_0 = ">*ms"
    validation_0 = module_0.Validation(str_0, str_0)


def test_case_7():
    int_0 = -443
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.is_fail()


def test_case_8():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.map(bool_0)


def test_case_9():
    str_0 = "\n        Call success_callback function with monad value when monad is successfully.\n\n        :params success_callback: function to apply with monad value.\n        :type success_callback: Function(A)\n        :returns: self\n        :rtype: Try[A]\n        "
    set_0 = {str_0, str_0}
    none_type_0 = None
    validation_0 = module_0.Validation(set_0, str_0)
    validation_0.bind(none_type_0)


def test_case_10():
    str_0 = "m8"
    validation_0 = module_0.Validation(str_0, str_0)
    validation_0.ap(str_0)


def test_case_11():
    str_0 = ">*ms"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.to_either()
    var_2 = var_1.to_try()


def test_case_12():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_lazy()
    var_0.to_lazy()


def test_case_13():
    int_0 = -50
    validation_0 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_try()
    var_1.is_fail()


def test_case_14():
    int_0 = -2966
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.to_try()


def test_case_15():
    float_0 = -1627.2942
    validation_0 = module_0.Validation(float_0, float_0)
    str_0 = "rb%D5 c3q.{]^[5_"
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_1.to_lazy()
    var_1 = var_0.ap(str_0)
    complex_0 = -4125.24 + 2701.148686j
    validation_2 = module_0.Validation(complex_0, complex_0)
    var_2 = validation_2.to_lazy()
    validation_3 = module_0.Validation(var_0, none_type_0)
    var_3 = validation_1.__eq__(validation_0)
    var_4 = var_1.to_try()
    validation_3.ap(validation_2)


def test_case_16():
    str_0 = ""
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.to_either()
    var_2 = var_0.ap(str_0)
    var_3 = validation_0.to_lazy()
    var_4 = var_2.to_try()
    var_0.is_fail()
