# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    none_type_0 = None
    bytes_0 = b"\xddz\xea\xcdXZ\x01\x92\xde\x98N"
    validation_0 = module_0.Validation(none_type_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.__eq__(validation_0)
    var_2 = validation_0.to_either()
    var_3 = var_2.to_try()


def test_case_1():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(none_type_0)
    validation_0.is_success()


def test_case_2():
    float_0 = -2386.564
    list_0 = [float_0, float_0, float_0]
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.__str__()


def test_case_3():
    bytes_0 = b"B\xd5\xf7\x08\x1az\xbbFY\xec04\x04\\\x82{\xb3-cM"
    complex_0 = 1672.9 + 270j
    validation_0 = module_0.Validation(complex_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.is_success()
    var_1.to_either()


def test_case_4():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)


def test_case_5():
    int_0 = 884
    none_type_0 = None
    validation_0 = module_0.Validation(int_0, none_type_0)
    validation_0.is_fail()


def test_case_6():
    bytes_0 = b"B\xd5\xf7\x08\x1az\xbbFY\xec04\x04\\\x82{\xb3-cM"
    complex_0 = 1672.9 + 270j
    validation_0 = module_0.Validation(complex_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.is_success()
    bool_0 = False
    validation_0.map(bool_0)


def test_case_7():
    float_0 = -47.6
    validation_0 = module_0.Validation(float_0, float_0)
    validation_0.bind(float_0)


def test_case_8():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.ap(none_type_0)


def test_case_9():
    none_type_0 = None
    bytes_0 = b"\xddz\xea\xcdXZ\x01\x92\xde\x98N"
    validation_0 = module_0.Validation(none_type_0, bytes_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.to_box()
    var_2 = validation_0.__eq__(validation_0)
    var_3 = validation_0.to_either()
    var_4 = var_3.to_try()
    var_5 = var_1.to_try()
    var_6 = var_3.to_lazy()
    var_5.to_box()


def test_case_10():
    none_type_0 = None
    bytes_0 = b"\xddz\xea\xcdXZ\x01\x92\xde\x98N"
    validation_0 = module_0.Validation(none_type_0, bytes_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.__str__()
    var_2 = validation_0.__eq__(validation_0)
    var_3 = validation_0.to_either()
    var_4 = validation_0.to_try()
    validation_1 = module_0.Validation(var_3, var_1)


def test_case_11():
    bytes_0 = b"\x97\xe1\xb0v\xbe\x14l\xa6\xcaB\xc8v\x81\xcc\xde"
    str_0 = "\n    In mathematics and computer science, currying is the technique of translating the evaluation of a function.\n    It that takes multiple arguments (or a tuple of arguments) into evaluating a sequence of functions.\n    each with a single argument.\n    "
    validation_0 = module_0.Validation(bytes_0, str_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_either()
    var_1.is_fail()


def test_case_12():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    bytes_0 = b"R\xd6\x1f`"
    var_0 = validation_0.to_lazy()
    validation_1 = module_0.Validation(bytes_0, bytes_0)
    var_1 = validation_1.__eq__(validation_0)
    var_2 = var_0.map(validation_1)
    var_3 = validation_1.to_try()
    var_3.to_lazy()


def test_case_13():
    tuple_0 = ()
    none_type_0 = None
    none_type_1 = None
    validation_0 = module_0.Validation(none_type_0, tuple_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.__str__()
    var_2 = validation_0.__eq__(none_type_0)
    var_3 = validation_0.to_maybe()
    var_4 = var_3.to_try()
    var_5 = validation_0.to_lazy()
    var_3.map(none_type_1)


def test_case_14():
    tuple_0 = ()
    none_type_0 = None
    complex_0 = 1670.518083 + 2417.037j
    validation_0 = module_0.Validation(none_type_0, tuple_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.__str__()
    var_1.ap(complex_0)
