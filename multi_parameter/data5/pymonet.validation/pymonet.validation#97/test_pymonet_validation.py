# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    set_0 = set()
    float_0 = -389.40858569734945
    none_type_0 = None
    validation_0 = module_0.Validation(set_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_1 = module_0.Validation(float_0, float_0)


def test_case_1():
    none_type_0 = None
    float_0 = 1565.0
    validation_0 = module_0.Validation(float_0, float_0)
    var_0 = validation_0.__eq__(none_type_0)
    none_type_1 = None
    validation_1 = module_0.Validation(none_type_1, none_type_1)
    var_1 = validation_1.__eq__(none_type_1)
    var_2 = validation_1.to_box()
    var_3 = var_2.to_either()
    var_2.bind(var_2)


def test_case_2():
    int_0 = 156
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_try()
    var_2 = var_1.__eq__(int_0)
    var_3 = var_1.__eq__(validation_0)
    var_4 = var_2.__str__()
    var_2.to_maybe()


def test_case_3():
    str_0 = "__N{b[_Mb5#0FN%;/R"
    set_0 = {str_0}
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.bind(validation_0)
    var_2 = var_0.__eq__(set_0)
    var_3 = var_2.__eq__(var_0)
    var_0.is_fail()


def test_case_4():
    dict_0 = {}
    none_type_0 = None
    validation_0 = module_0.Validation(dict_0, none_type_0)
    validation_1 = module_0.Validation(validation_0, dict_0)
    var_0 = validation_1.to_maybe()
    var_1 = var_0.to_either()
    var_2 = var_1.to_try()
    var_2.bind(dict_0)


def test_case_5():
    int_0 = -253
    list_0 = [int_0, int_0, int_0]
    tuple_0 = (list_0,)
    validation_0 = module_0.Validation(tuple_0, list_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_try()
    var_1.to_box()


def test_case_6():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_7():
    bytes_0 = b"\xf0u\x89\xca\xbc\x83B\xc7\xbc\xd7dM\xb0\xda\x9d\x17"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.is_fail()


def test_case_8():
    bool_0 = False
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.map(bool_0)


def test_case_9():
    int_0 = 4142
    bool_0 = True
    str_0 = "+gV+"
    validation_0 = module_0.Validation(bool_0, str_0)
    validation_0.bind(int_0)


def test_case_10():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    none_type_0 = None
    validation_0.ap(none_type_0)


def test_case_11():
    complex_0 = 4198.6 + 1092.82j
    dict_0 = {complex_0: complex_0}
    tuple_0 = (dict_0,)
    tuple_1 = ()
    validation_0 = module_0.Validation(tuple_1, tuple_1)
    var_0 = validation_0.__eq__(tuple_0)
    var_1 = validation_0.to_lazy()
    var_2 = var_1.to_maybe()
    var_2.bind(tuple_0)


def test_case_12():
    bytes_0 = b"\xb8\x8di\xde5\xc5FS\x19&"
    complex_0 = 1117.73 - 2150.4j
    tuple_0 = (complex_0,)
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_try()
    var_1 = var_0.__eq__(bytes_0)
    var_1.to_box()


def test_case_13():
    bytes_0 = b"\x0f\xb9f\xfc\xc4\x1f<\xe9"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, bytes_0)
    var_0 = validation_0.__str__()
    var_0.map(bytes_0)


def test_case_14():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_either()
    var_0.bind(var_0)


def test_case_15():
    bytes_0 = b"\x94|\t8\xb4kV\x8c\xab\x80\x11:6S7\xbe\x0e"
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_try()
    validation_1 = module_0.Validation(validation_0, validation_0)
    var_1 = validation_0.__eq__(validation_1)
    validation_2 = module_0.Validation(validation_1, bytes_0)
    var_2 = validation_0.to_try()
    var_3 = validation_0.__eq__(var_1)
    var_4 = validation_2.to_box()
    validation_1.__str__()
