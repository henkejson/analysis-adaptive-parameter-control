# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    int_0 = -1368
    validation_0 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.__eq__(int_0)


def test_case_1():
    int_0 = -2134
    validation_0 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.to_box()
    str_0 = "\n        Returns first element of ImmutableList that passed\n        info argument returns True\n\n        :param fn: function to call with ImmutableList value\n        :type fn: Function(A) -> bool\n        :returns: A\n        "
    validation_1 = module_0.Validation(str_0, str_0)
    var_1 = validation_1.__eq__(validation_0)
    var_2 = var_0.to_try()
    var_3 = validation_1.__str__()
    var_0.bind(var_3)


def test_case_2():
    none_type_0 = None
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.__eq__(none_type_0)
    var_1 = validation_0.to_either()
    validation_0.bind(var_0)


def test_case_3():
    set_0 = set()
    list_0 = [set_0, set_0]
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_either()
    var_0.is_success()


def test_case_4():
    set_0 = set()
    none_type_0 = None
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_maybe()
    validation_0.ap(none_type_0)


def test_case_5():
    none_type_0 = None
    bytes_0 = b"q\x02\x8bu\xf1\xf4\x83maB\nu\x93"
    validation_0 = module_0.Validation(none_type_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_0.is_fail()


def test_case_6():
    int_0 = -212
    validation_0 = module_0.Validation(int_0, int_0)


def test_case_7():
    float_0 = 1857.9
    validation_0 = module_0.Validation(float_0, float_0)
    validation_0.to_maybe()


def test_case_8():
    int_0 = 2594
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.is_fail()


def test_case_9():
    str_0 = "\n        Returns first element of ImmutableList that passed\n        info argument returns True\n\n        :param fn: function to call with ImmutableList value\n        :type fn: Function(A) -> bool\n        :returns: A\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.is_success()
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    validation_1.map(var_0)


def test_case_10():
    none_type_0 = None
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    validation_1.bind(bool_0)


def test_case_11():
    int_0 = -93
    str_0 = "\n        Transform Validation to Try.\n\n        :returns: Lazy monad with function returning Validation value\n        :rtype: Lazy[Function() -> (A | None)]\n        "
    dict_0 = {int_0: str_0}
    tuple_0 = (dict_0,)
    list_0 = [tuple_0, tuple_0, int_0, dict_0]
    bytes_0 = b"V\xb2\xe4\xa3 3\xe6"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_0.ap(list_0)


def test_case_12():
    int_0 = 425
    none_type_0 = None
    validation_0 = module_0.Validation(int_0, none_type_0)
    var_0 = validation_0.to_box()
    none_type_1 = None
    validation_1 = module_0.Validation(int_0, none_type_1)
    validation_1.to_maybe()


def test_case_13():
    none_type_0 = None
    float_0 = -415.7521
    validation_0 = module_0.Validation(float_0, float_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.ap(none_type_0)
    var_1.is_fail()


def test_case_14():
    list_0 = []
    bytes_0 = b"&\xae\xf1"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_either()
    var_1.bind(list_0)


def test_case_15():
    bytes_0 = b"\x99\xbd\xdc\t\xd9\xe8C\x15"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_try()
    var_0.to_either()


def test_case_16():
    none_type_0 = None
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.__eq__(none_type_0)
    var_1 = validation_0.to_either()
    var_2 = validation_0.__str__()
    validation_0.bind(var_0)
