# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    none_type_0 = None
    complex_0 = -947 + 422.23j
    validation_0 = module_0.Validation(complex_0, complex_0)
    var_0 = validation_0.__eq__(none_type_0)
    validation_0.__str__()


def test_case_1():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_maybe()
    none_type_0 = None
    validation_1 = validation_0.to_either()
    var_1 = validation_1.__eq__(none_type_0)
    var_2 = validation_1.__str__()
    var_3 = validation_1.to_lazy()
    var_4 = var_3.map(none_type_0)
    var_1.ap(var_3)


def test_case_2():
    complex_0 = 1730.5 - 3454.75j
    dict_0 = {
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
    }
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_maybe()


def test_case_3():
    complex_0 = -947 + 422.23j
    var_0 = complex_0.__str__()


def test_case_4():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)


def test_case_5():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.is_fail()


def test_case_6():
    none_type_0 = None
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.map(none_type_0)


def test_case_7():
    int_0 = -2737
    bool_0 = True
    bool_1 = True
    validation_0 = module_0.Validation(bool_0, bool_1)
    validation_0.bind(int_0)


def test_case_8():
    str_0 = "^7!r!,v<;w~G4i"
    float_0 = 1561.77
    validation_0 = module_0.Validation(float_0, float_0)
    validation_0.ap(str_0)


def test_case_9():
    list_0 = []
    int_0 = 604
    str_0 = "2\x0b&(5"
    none_type_0 = None
    validation_0 = module_0.Validation(str_0, none_type_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.to_box()
    var_2 = validation_0.__eq__(int_0)
    var_2.bind(list_0)


def test_case_10():
    bytes_0 = b"3_P\x01\x8d\xee\xbf\xdaP=\x07W4"
    none_type_0 = None
    int_0 = -1571
    set_0 = {int_0, int_0}
    validation_0 = module_0.Validation(set_0, int_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.map(none_type_0)
    var_2 = var_1.bind(bytes_0)
    var_2.to_maybe()


def test_case_11():
    bytes_0 = b"d\x90\xef4\xf1m\x96\xb8\xe5"
    str_0 = "2ZD\x0b]N<"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_try()
    var_1 = var_0.map(bytes_0)
    var_1.to_try()


def test_case_12():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_maybe()
    none_type_0 = None
    var_1 = list_0.__eq__(none_type_0)
    var_2 = validation_0.__str__()
    var_3 = var_0.to_lazy()
    var_4 = var_3.map(none_type_0)
    var_1.ap(var_3)


def test_case_13():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_maybe()
    validation_1 = module_0.Validation(var_0, list_0)
    var_1 = validation_1.__eq__(validation_1)
    var_2 = var_0.__str__()
    var_2.to_lazy()


def test_case_14():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_maybe()
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, validation_0)
    var_1 = validation_1.__eq__(validation_0)
    validation_1.__str__()


def test_case_15():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_maybe()
    complex_0 = 4177.913 + 2706.131894j
    var_2 = validation_0.__eq__(complex_0)
    var_3 = validation_0.__str__()
    validation_0.map(var_2)
