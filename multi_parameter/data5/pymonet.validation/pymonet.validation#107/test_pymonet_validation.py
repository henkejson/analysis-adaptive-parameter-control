# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_either()
    complex_0 = -1025.834 - 2043.1106804752287j
    validation_1 = module_0.Validation(list_0, complex_0)
    var_1 = validation_1.__eq__(list_0)
    validation_1.to_maybe()


def test_case_1():
    str_0 = "miM\r-RS"
    int_0 = -12
    tuple_0 = (str_0, str_0, int_0)
    validation_0 = module_0.Validation(tuple_0, str_0)
    var_0 = validation_0.__str__()
    var_0.to_try()


def test_case_2():
    bytes_0 = b"\xfe.W\x81\xca\x82\xbdk\xdd?\x99"
    validation_0 = module_0.Validation(bytes_0, bytes_0)


def test_case_3():
    bytes_0 = b"a\xb4u\xeb\x07\xa0\xc9"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_try()


def test_case_4():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.is_fail()


def test_case_5():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.map(validation_0)


def test_case_6():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_maybe()
    complex_0 = -1025.834 - 2043.111j
    validation_1 = module_0.Validation(list_0, complex_0)
    var_1 = validation_1.__eq__(list_0)
    validation_1.bind(list_0)


def test_case_7():
    set_0 = set()
    none_type_0 = None
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_box()
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    validation_1.ap(set_0)


def test_case_8():
    int_0 = 1
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_box()
    var_1.ap(int_0)


def test_case_9():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    none_type_0 = None
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.to_either()
    complex_0 = -1024.1932445919388 - 2043.111j
    validation_1 = module_0.Validation(list_0, none_type_0)
    var_2 = var_1.__eq__(complex_0)
    var_3 = validation_0.__str__()
    var_3.to_lazy()


def test_case_10():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.to_either()
    validation_1 = module_0.Validation(list_0, var_0)
    var_2 = validation_1.__eq__(list_0)
    var_3 = validation_1.__eq__(validation_0)


def test_case_11():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, list_0)
    var_0 = validation_1.to_either()
    validation_2 = module_0.Validation(var_0, list_0)
    var_1 = var_0.__eq__(validation_0)
    var_2 = validation_2.to_lazy()
    var_3 = validation_1.__eq__(var_1)
    var_4 = validation_2.__eq__(validation_2)


def test_case_12():
    str_0 = "\n        :param semigroup: other semigroup to concat\n        :type semigroup: Sum[B]\n        :returns: new Sum with sum of concat semigroups values\n        :rtype: Sum[A]\n        "
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    validation_0 = module_0.Validation(dict_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.__str__()
    var_1.to_box()


def test_case_13():
    str_0 = "4\x0bc)j"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.is_success()
    var_2 = validation_0.is_success()
    var_3 = var_0.__str__()
    var_4 = var_0.ap(var_3)
    validation_1 = module_0.Validation(var_2, var_2)
    validation_0.bind(str_0)
