# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    int_0 = 1638
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(int_0)
    validation_0.map(validation_0)


def test_case_1():
    str_0 = "SqIg?\x0bwg4m+7+!=6AM"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()


def test_case_2():
    complex_0 = 4313 + 759.537j
    bool_0 = True
    bytes_0 = b"\xc7\xe0\xb0\x87\xfb\xdd\x8c \xc8\x8cp\x02!\x0f\\"
    validation_0 = module_0.Validation(bool_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_maybe()
    validation_1 = module_0.Validation(complex_0, complex_0)
    validation_1.is_success()


def test_case_3():
    bytes_0 = b"#\xf7\xbc\xbf]_v\x87\x8e\xff^\x01\x1d\x11kb\x9e"
    list_0 = []
    validation_0 = module_0.Validation(list_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_maybe()
    validation_1 = module_0.Validation(bytes_0, var_0)
    var_1.is_success()


def test_case_4():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_5():
    str_0 = "!\nt2h={:;oFIX#`w"
    bytes_0 = b",\x86f\xec"
    bool_0 = False
    tuple_0 = (str_0, bytes_0, bool_0, bool_0)
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.is_fail()


def test_case_6():
    bool_0 = True
    float_0 = -1989.912684
    validation_0 = module_0.Validation(float_0, float_0)
    validation_0.map(bool_0)


def test_case_7():
    int_0 = -1778
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, int_0)
    none_type_1 = None
    int_1 = -1624
    validation_1 = module_0.Validation(int_1, int_1)
    validation_1.bind(none_type_1)


def test_case_8():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    validation_0.ap(validation_0)


def test_case_9():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_box()
    validation_0.to_either()


def test_case_10():
    bool_0 = False
    int_0 = 0
    validation_0 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.to_lazy()
    var_1 = bool_0.__str__()


def test_case_11():
    bool_0 = True
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, bool_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_either()
    var_1.is_success()


def test_case_12():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.to_try()


def test_case_13():
    none_type_0 = None
    bool_0 = True
    bytes_0 = b"\xc9(\xc7\xe2\xc8Y;\xb4\x1a\xa6\x9f"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = var_0.__eq__(bool_0)
    var_2 = none_type_0.__eq__(none_type_0)
    var_3 = var_2.__eq__(var_0)
    var_3.bind(var_3)


def test_case_14():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.__eq__(set_0)
    var_2 = validation_0.to_box()
    var_1.is_fail()


def test_case_15():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.__str__()
    bytes_0 = b"\x12\x14{"
    var_1 = validation_0.is_success()
    bool_0 = True
    validation_1 = module_0.Validation(bool_0, bytes_0)
    var_2 = validation_1.__eq__(validation_1)
    var_3 = validation_1.__str__()
    var_4 = var_3.__eq__(bytes_0)
    var_2.is_fail()


def test_case_16():
    set_0 = set()
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, set_0)
    var_0 = validation_0.__eq__(set_0)
    var_1 = validation_0.to_maybe()
    var_2 = var_1.__str__()
    var_3 = var_1.__eq__(var_2)
    var_2.is_fail()


def test_case_17():
    set_0 = set()
    bool_0 = True
    bytes_0 = b"\xc9(\xc7\xe2\xc8Y;\xb4\x1a\xa6\x9f"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_1 = module_0.Validation(bool_0, set_0)
    var_0 = validation_0.__eq__(validation_1)
    var_1 = validation_0.__str__()
    var_1.to_box()
