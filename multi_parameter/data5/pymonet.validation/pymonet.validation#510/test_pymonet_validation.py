# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0
import builtins as module_1


def test_case_0():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.__eq__(validation_0)
    var_1.to_box()


def test_case_1():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.is_fail()
    var_1 = validation_0.__eq__(var_0)
    var_2 = validation_0.__eq__(validation_0)
    var_0.is_fail()


def test_case_2():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.__eq__(var_0)
    var_2 = validation_0.__str__()
    var_3 = validation_0.__eq__(var_0)
    list_0.to_maybe()


def test_case_3():
    object_0 = module_1.object()
    set_0 = {object_0, object_0, object_0}
    validation_0 = module_0.Validation(object_0, set_0)
    var_0 = validation_0.__eq__(object_0)
    var_1 = validation_0.to_either()
    var_2 = validation_0.to_box()
    float_0 = 4625.241
    dict_0 = {
        object_0: object_0,
        object_0: object_0,
        object_0: object_0,
        float_0: float_0,
    }
    var_3 = validation_0.to_box()
    tuple_0 = (object_0, dict_0)
    tuple_0.ap(var_3)


def test_case_4():
    none_type_0 = None
    none_type_0.map(none_type_0)


def test_case_5():
    list_0 = []
    var_0 = module_0.Validation(list_0, list_0)


def test_case_6():
    int_0 = -3339
    bool_0 = False
    bool_1 = False
    validation_0 = module_0.Validation(int_0, bool_1)
    validation_0.map(bool_0)


def test_case_7():
    int_0 = -487
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.bind(validation_0)


def test_case_8():
    none_type_0 = None
    none_type_1 = None
    validation_0 = module_0.Validation(none_type_1, none_type_1)
    validation_0.ap(none_type_0)


def test_case_9():
    none_type_0 = None
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.__eq__(none_type_0)
    var_2 = validation_0.__eq__(validation_0)
    var_2.to_maybe()


def test_case_10():
    bool_0 = True
    str_0 = "d:]j>zI\x0c[S"
    bytes_0 = b"\xfa\xd3\xf08F\xf9\xa4\xc3@8\xa8nL"
    list_0 = [bytes_0, bytes_0]
    tuple_0 = (bytes_0, list_0)
    list_1 = [tuple_0, list_0, tuple_0]
    validation_0 = module_0.Validation(list_1, list_1)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_try()
    bytes_1 = b"\xc8|\xc6\x95\t\x1f\xa4"
    var_2 = var_0.bind(bytes_1)
    var_3 = var_1.__str__()
    var_4 = var_1.__eq__(str_0)
    var_4.bind(bool_0)


def test_case_11():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.to_try()


def test_case_12():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.__eq__(validation_0)
    var_2 = validation_0.__eq__(validation_0)
    var_3 = validation_0.to_maybe()
    var_2.to_box()


def test_case_13():
    object_0 = module_1.object()
    set_0 = {object_0, object_0, object_0}
    validation_0 = module_0.Validation(object_0, set_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.to_either()
    var_2 = var_0.to_box()
    var_3 = validation_0.to_box()
    var_2.to_box()


def test_case_14():
    bytes_0 = b"\xf0\xd8o\xeb\xf15\xc1\xb5\xd1l\x06\xdc;\x14\xeb\xd5"
    list_0 = [bytes_0, bytes_0, bytes_0]
    validation_0 = module_0.Validation(bytes_0, list_0)
    var_0 = validation_0.__str__()
    var_0.map(list_0)


def test_case_15():
    none_type_0 = None
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = module_0.Validation(none_type_0, none_type_0)
    var_1 = validation_0.__eq__(var_0)
    var_0.to_maybe()
