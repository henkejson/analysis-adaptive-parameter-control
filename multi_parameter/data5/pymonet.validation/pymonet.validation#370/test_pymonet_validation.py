# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bytes_0 = b"W\xd4\x81"
    dict_0 = {}
    bool_0 = False
    validation_0 = module_0.Validation(dict_0, bool_0)
    var_0 = validation_0.__eq__(bytes_0)


def test_case_1():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.__str__()
    bool_0 = True
    var_1 = validation_0.is_fail()
    tuple_0 = (var_0, var_1)
    int_0 = 3854
    tuple_1 = (var_0, bool_0, tuple_0, int_0)
    validation_1 = module_0.Validation(var_0, tuple_1)
    dict_0.to_maybe()


def test_case_2():
    bytes_0 = b"\x8f\x92\x15\xc0\xdc\xcd\xdc\xf7/\x89_\x85\x15*"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    var_0.to_try()


def test_case_3():
    dict_0 = {}
    bytes_0 = b"\xeb\xcbO\x89\xe6\xda)\x88\xc2\xf5{\xde"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.__eq__(dict_0)
    var_2 = var_1.__str__()
    var_1.to_box()


def test_case_4():
    str_0 = "\n        Transform Either to Try.\n\n        :returns: Lazy monad with function returning previous value\n        :rtype: Lazy[Function() -> A]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_either()
    var_2 = var_1.to_lazy()
    var_3 = var_1.to_try()
    var_4 = var_1.__str__()
    var_4.is_fail()


def test_case_5():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)


def test_case_6():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.to_maybe()


def test_case_7():
    int_0 = -716
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.is_fail()


def test_case_8():
    str_0 = "<["
    validation_0 = module_0.Validation(str_0, str_0)
    validation_0.map(str_0)


def test_case_9():
    int_0 = 742
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.bind(int_0)


def test_case_10():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    str_0 = "\r_yNkAwxvp TT;;>"
    validation_1 = validation_0.to_box()
    var_0 = validation_1.to_try()
    var_1 = var_0.__eq__(str_0)
    none_type_1 = None
    tuple_0 = ()
    validation_2 = module_0.Validation(tuple_0, tuple_0)
    var_2 = validation_2.__eq__(none_type_1)
    validation_0.ap(none_type_1)


def test_case_11():
    bytes_0 = b"\x95\xba\xf2\x18\nd\xc1M"
    bytes_1 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_1)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_try()


def test_case_12():
    bytes_0 = b'\xd7\xf8a"@\xf6^\xae'
    bytes_1 = b"T\x8fo\xcd"
    validation_0 = module_0.Validation(bytes_0, bytes_1)
    var_0 = validation_0.to_try()
    var_0.to_try()


def test_case_13():
    str_0 = "aW#q"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    str_1 = "J*X"
    validation_1 = module_0.Validation(str_1, str_1)
    var_0 = validation_1.__eq__(validation_1)
    var_1 = var_0.__eq__(str_0)
    none_type_1 = None
    validation_0.map(none_type_1)


def test_case_14():
    bytes_0 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.__eq__(bytes_0)
    var_1.ap(var_1)


def test_case_15():
    str_0 = "aW#q"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    str_1 = "J*X"
    validation_1 = module_0.Validation(str_1, str_1)
    var_0 = validation_1.to_try()
    var_1 = var_0.__eq__(str_0)
    none_type_1 = None
    tuple_0 = ()
    validation_2 = module_0.Validation(tuple_0, tuple_0)
    var_2 = validation_2.__eq__(none_type_1)
    validation_3 = module_0.Validation(str_0, var_0)
    var_3 = validation_2.to_maybe()
    var_0.is_success()


def test_case_16():
    bool_0 = False
    set_0 = {bool_0}
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_maybe()
    bytes_0 = b"W\xd4\x81"
    validation_1 = module_0.Validation(var_0, bytes_0)
    var_1 = validation_0.__eq__(validation_1)
    var_2 = validation_0.__eq__(var_0)
    var_3 = var_0.to_box()
    var_2.to_try()
