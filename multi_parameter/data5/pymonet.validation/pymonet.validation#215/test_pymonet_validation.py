# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    int_0 = -1881
    set_0 = {int_0}
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(set_0)
    var_0.to_try()


def test_case_1():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_either()
    var_0.is_success()


def test_case_2():
    str_0 = "\na   Rxturn increased by 1 argument.\n\n    :paramvalue:\n    :Type valuec Int\n    :returns:\n    :rtype: Int\n    "
    none_type_0 = None
    validation_0 = module_0.Validation(str_0, none_type_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.to_box()
    var_2 = var_1.to_either()
    validation_1 = module_0.Validation(str_0, str_0)
    var_3 = validation_1.to_either()
    var_4 = var_3.__str__()
    var_5 = validation_1.to_maybe()
    var_6 = var_3.__eq__(validation_1)
    var_7 = validation_1.is_fail()
    var_8 = var_3.__str__()
    var_4.to_either()


def test_case_3():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)


def test_case_4():
    str_0 = 'U"'
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()


def test_case_5():
    int_0 = 1
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.is_fail()


def test_case_6():
    str_0 = "\n        Returns new ImmutableList with each element mapped into\n        result of argument called with each element of ImmutableList\n\n        :param fn: function to call with ImmutableList value\n        :type fn: Function(A) -> B\n        :returns: ImmutableList[B]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    validation_0.map(str_0)


def test_case_7():
    bytes_0 = b",]\x93\xb11'\xda:\xa3\x89\x19\xc3\xa3\xd1"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.bind(bytes_0)


def test_case_8():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    validation_0.ap(list_0)


def test_case_9():
    none_type_0 = None
    float_0 = 1151.35377
    set_0 = {float_0, float_0}
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_box()
    var_0.map(none_type_0)


def test_case_10():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_either()


def test_case_11():
    bytes_0 = b"\x84"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    tuple_0 = (set_0,)
    validation_0 = module_0.Validation(tuple_0, bytes_0)
    var_0 = validation_0.to_try()
    var_0.is_success()


def test_case_12():
    bytes_0 = b"nm\x14\x1e+\xd4@M\xa2\xb1\xa6\x81"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.__str__()
    var_2 = validation_0.to_try()
    var_2.to_either()


def test_case_13():
    set_0 = set()
    none_type_0 = None
    validation_0 = module_0.Validation(set_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)


def test_case_14():
    dict_0 = {}
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, dict_0)
    var_0 = validation_0.to_maybe()


def test_case_15():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.__str__()
    var_0.to_try()


def test_case_16():
    bool_0 = True
    bytes_0 = b"nm\x14\x1e+\xd4@M\xa2\xb1\xa6\x81"
    none_type_0 = None
    validation_0 = module_0.Validation(bytes_0, bool_0)
    var_0 = validation_0.__eq__(none_type_0)
    validation_1 = module_0.Validation(bytes_0, bytes_0)
    var_1 = validation_1.__eq__(validation_1)
    var_2 = validation_1.to_maybe()
    var_3 = validation_1.__str__()
    validation_2 = module_0.Validation(var_0, var_3)
    var_4 = validation_1.to_try()
    var_5 = validation_2.__eq__(validation_1)
    var_4.to_either()
