# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    float_0 = -1150.0
    validation_0 = module_0.Validation(float_0, float_0)
    var_0 = validation_0.__eq__(float_0)


def test_case_1():
    bytes_0 = b"\xa5\x1f\xe4\xbb\xe9C\xe8\xbf\x9d\xaaL\x06H\x9d\n]\xf1"
    set_0 = set()
    validation_0 = module_0.Validation(bytes_0, set_0)
    var_0 = validation_0.__str__()
    var_0.to_maybe()


def test_case_2():
    bytes_0 = b"1=Y\xe6\xef\x81!\xaa\xd3"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()


def test_case_3():
    str_0 = "\n        Take function and applied this function on current Validation value and returns folder result.\n\n        :param mapper: mapper function\n        :type mapper: Function(A) -> Validation[B, E]\n        :returns: new Validation with mapped value\n        :rtype: Validation[B, E]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()


def test_case_4():
    bytes_0 = b"\x9ff!\x10\x8fnkVX?\x03\xe4{\xed"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.to_try()
    var_1.is_fail()


def test_case_5():
    bytes_0 = b"1=\x81\xef\x81!\x11\xd8\xd3\xb6"
    var_0 = bytes_0.__str__()


def test_case_6():
    float_0 = -1150.9893
    validation_0 = module_0.Validation(float_0, float_0)


def test_case_7():
    int_0 = -2854
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.to_try()


def test_case_8():
    float_0 = -2306.3424114527247
    validation_0 = module_0.Validation(float_0, float_0)
    validation_0.is_fail()


def test_case_9():
    none_type_0 = None
    float_0 = -1584.939
    validation_0 = module_0.Validation(float_0, float_0)
    validation_0.map(none_type_0)


def test_case_10():
    float_0 = -1150.99
    validation_0 = module_0.Validation(float_0, float_0)
    validation_0.bind(float_0)


def test_case_11():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.ap(none_type_0)


def test_case_12():
    float_0 = -2302.0
    validation_0 = module_0.Validation(float_0, float_0)
    var_0 = validation_0.to_box()


def test_case_13():
    int_0 = -336
    validation_0 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_box()


def test_case_14():
    float_0 = -1052.0
    validation_0 = module_0.Validation(float_0, float_0)
    var_0 = validation_0.__eq__(validation_0)


def test_case_15():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.is_fail()
    var_2 = var_1.__str__()
    var_3 = validation_0.to_either()
    var_4 = var_1.__str__()
    var_5 = var_0.__eq__(var_4)
    var_6 = var_0.to_box()
    var_7 = var_6.__eq__(validation_0)
    var_1.map(var_6)


def test_case_16():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_maybe()
    var_0.ap(var_0)


def test_case_17():
    bytes_0 = b"1=\x81\xef\x81!\x11\xd8\xd3\xb6"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(bytes_0)
    var_1 = validation_0.to_box()
    var_2 = validation_0.__str__()
    var_3 = validation_0.to_maybe()
    validation_1 = module_0.Validation(bytes_0, var_3)
    var_4 = validation_0.to_lazy()
    var_5 = validation_0.__eq__(validation_1)
    var_6 = var_4.__str__()
    var_0.to_either()
