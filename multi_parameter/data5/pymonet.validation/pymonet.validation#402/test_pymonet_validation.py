# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bytes_0 = b"\xa9%\x88\xe5\x1dP}."
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)


def test_case_1():
    bytes_0 = b"\x9evOo\x0cw\x96\x98!\xf4K"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    none_type_0 = None
    var_0 = validation_0.__eq__(none_type_0)


def test_case_2():
    complex_0 = -1822.0831 + 1850.100421j
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.__str__()
    var_0.bind(complex_0)


def test_case_3():
    bytes_0 = b"4\xa2\x83\xd4\x9d\xa0\x94\x9c\xf5\xc6\xda\x8clV\x08\x11\xe8\xec"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.__eq__(bytes_0)


def test_case_4():
    none_type_0 = None
    none_type_0.is_fail()


def test_case_5():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_6():
    bytes_0 = b"\xc4l\xe1\xad\x90\x1a1S0\xc1b\xd2\x86\x92\x06\xe9\tS\xd9"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()


def test_case_7():
    bytes_0 = b"\xaa\xb5tj\xa3"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.is_fail()


def test_case_8():
    bytes_0 = b"P\xf0\x7f\x86i"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_0.map(validation_0)


def test_case_9():
    bytes_0 = b"\x8aK\xa0\xed\xf7\x176\xdf\xb8\xec>n\xae}w\x80"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_0.bind(validation_0)


def test_case_10():
    bytes_0 = b"\x0e\xe3<\xb8\xd8\xff\xc1\x9f\xc2\xea\xa4\xea\xe6\xacI\xb1\x13Vu"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_0.ap(bytes_0)


def test_case_11():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_box()


def test_case_12():
    bytes_0 = b",\x04\xbd\x01\x16h\x8c"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_lazy()


def test_case_13():
    str_0 = "]l?[t\x0c<G} .<Od3<QJ%*"
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.to_lazy()
    var_2 = var_1.to_try()
    var_2.map(str_0)


def test_case_14():
    bytes_0 = b"4\xa2\x83\xd4\x9d\xa0\x9c\xf5\xda\x8cl\xf7\x11\xfc\xec"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_try()


def test_case_15():
    bytes_0 = b"\xaa\x0f'McM\xd4"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()


def test_case_16():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.to_lazy()
    list_0 = []
    validation_1 = module_0.Validation(var_0, var_1)
    validation_2 = module_0.Validation(list_0, var_1)
    var_2 = validation_2.__eq__(validation_0)
    var_3 = validation_0.to_lazy()
    var_2.is_fail()


def test_case_17():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.__eq__(var_0)
    var_2 = validation_0.to_either()
    var_1.is_fail()
