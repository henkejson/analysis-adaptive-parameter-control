# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    str_0 = "\n        :returns: Copy of self\n        :rtype: Left[A]\n        "
    bytes_0 = b"\x18r\x9e6S\xb36;8\x96\xb5'&\xa9\x90"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(str_0)
    validation_1 = module_0.Validation(var_0, str_0)


def test_case_1():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.__str__()
    var_0.to_maybe()


def test_case_2():
    str_0 = "Min[value={}]"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.is_fail()
    validation_1 = validation_0.__str__()
    var_1 = validation_1.__str__()
    validation_1.ap(validation_0)


def test_case_3():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.__str__()
    var_2 = validation_0.is_success()
    var_3 = validation_0.to_maybe()
    var_4 = validation_0.__str__()
    var_5 = validation_0.is_fail()
    var_6 = validation_0.to_either()
    var_6.is_fail()


def test_case_4():
    int_0 = 2410
    none_type_0 = None
    validation_0 = module_0.Validation(int_0, none_type_0)
    var_0 = validation_0.to_box()
    bool_0 = True
    validation_1 = module_0.Validation(int_0, int_0)
    str_0 = "f|p"
    validation_2 = module_0.Validation(str_0, str_0)
    var_1 = validation_2.to_either()
    var_2 = validation_2.to_lazy()
    var_3 = var_1.bind(bool_0)
    var_4 = var_3.to_maybe()
    var_5 = var_2.to_maybe()
    var_5.ap(bool_0)


def test_case_5():
    str_0 = "\n        :returns: Copy of self|        :rtype: Left[A]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()


def test_case_6():
    dict_0 = {}
    dict_0.is_success()


def test_case_7():
    dict_0 = {}
    var_0 = module_0.Validation(dict_0, dict_0)


def test_case_8():
    float_0 = 1660.0405
    validation_0 = module_0.Validation(float_0, float_0)
    validation_0.to_maybe()


def test_case_9():
    list_0 = []
    bool_0 = False
    tuple_0 = (list_0, list_0, list_0, bool_0)
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.is_success()
    var_1 = validation_0.is_fail()
    var_2 = var_1.__str__()


def test_case_10():
    str_0 = "XH\\)Q%F>W:]"
    none_type_0 = None
    validation_0 = module_0.Validation(str_0, none_type_0)
    validation_0.map(str_0)


def test_case_11():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.bind(none_type_0)


def test_case_12():
    bytes_0 = b"rw6ZS:6;8\x96\xb5'&t\x90"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_0.ap(validation_0)


def test_case_13():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_box()
    validation_0.bind(var_0)


def test_case_14():
    bytes_0 = b"dV\xb7\xf3"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_lazy()
    validation_1 = module_0.Validation(bytes_0, bytes_0)
    validation_2 = module_0.Validation(bytes_0, validation_0)
    bytes_1 = b"\x18r\x9e6S\xb36;8\x96\xb5'&\xa9\x90"
    var_1 = module_0.Validation(validation_1, bytes_1)
    validation_3 = module_0.Validation(bytes_0, validation_2)


def test_case_15():
    bytes_0 = b""
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.map(bytes_0)
    var_1.to_box()


def test_case_16():
    bytes_0 = b"\xcf\xba\xe1js\x81\xf2\xe1\xbeN\xb6\xe6\x17x"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_try()
    var_0.to_either()


def test_case_17():
    str_0 = "\n        :returns: Copy of self\n        :rtype: Left[A]\n        "
    none_type_0 = None
    validation_0 = module_0.Validation(str_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)
    var_0.to_either()


def test_case_18():
    bytes_0 = b"\x87"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    bytes_1 = b"\x18r\x9e6S\xb36;8\x96\xb5'&\xa9\x90"
    validation_1 = module_0.Validation(bytes_0, bytes_1)
    var_0 = validation_0.__eq__(validation_1)
    var_1 = validation_1.is_fail()
    var_1.to_lazy()
