# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_0.is_fail()


def test_case_1():
    bytes_0 = b";&[\xc72\x01z0Q\x11\xc7\xce^\xa9\xef\xcc\xd7\xb4u0"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_maybe()
    var_2 = var_1.to_lazy()
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    var_3 = validation_1.to_lazy()
    validation_2 = module_0.Validation(var_3, validation_1)
    var_4 = validation_2.__eq__(var_2)
    var_4.is_fail()


def test_case_2():
    bytes_0 = b"\xd7\xff~"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    dict_1 = {}
    validation_1 = module_0.Validation(dict_1, dict_1)
    var_1 = validation_1.to_lazy()
    var_2 = var_1.ap(dict_0)
    validation_2 = module_0.Validation(var_2, var_1)
    validation_2.map(validation_0)


def test_case_3():
    none_type_0 = None
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_maybe()
    var_0.bind(none_type_0)


def test_case_4():
    set_0 = set()
    int_0 = -169
    set_1 = {int_0}
    tuple_0 = (int_0, set_1, int_0)
    list_0 = [set_1, tuple_0, set_1, tuple_0]
    validation_0 = module_0.Validation(tuple_0, list_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.ap(set_0)
    var_2 = var_0.__str__()
    var_2.to_lazy()


def test_case_5():
    bytes_0 = b"\x93\x9f\xe9Qd4\xa2\xa9\x9d\xab\xe6\xfa\x0f#"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.to_lazy()
    var_2 = validation_0.to_maybe()
    none_type_0 = None
    var_3 = validation_0.to_lazy()
    tuple_0 = (var_1,)
    validation_1 = module_0.Validation(tuple_0, bytes_0)
    var_4 = var_1.__eq__(none_type_0)
    var_2.is_fail()


def test_case_6():
    int_0 = 329
    var_0 = int_0.__str__()


def test_case_7():
    int_0 = 325
    var_0 = module_0.Validation(int_0, int_0)


def test_case_8():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.to_maybe()


def test_case_9():
    bytes_0 = b"\xcb\t\x8f\x94s^"
    float_0 = -1224.5
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: float_0}
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.is_fail()
    var_0.ap(dict_0)


def test_case_10():
    bytes_0 = b"\x93\x9f\xe9Qd4\xa2\xa9\x9d\xab\xe6\xfa\x0f#"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_0.map(bytes_0)


def test_case_11():
    bytes_0 = b";&[\xc72\x01z0Q\x11\xc7\xce^\xa9\xef\xcc\xd7\xb4u0"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_maybe()
    var_2 = var_1.to_lazy()
    none_type_0 = None
    none_type_1 = None
    validation_1 = module_0.Validation(none_type_1, none_type_1)
    var_3 = validation_1.to_lazy()
    validation_2 = module_0.Validation(var_3, validation_1)
    validation_2.bind(none_type_0)


def test_case_12():
    str_0 = "\n        Return monad value.\n\n        :returns: monad value\n        :rtype: A\n        "
    none_type_0 = None
    validation_0 = module_0.Validation(str_0, none_type_0)
    bool_0 = False
    validation_1 = module_0.Validation(bool_0, bool_0)
    validation_2 = module_0.Validation(validation_1, bool_0)
    validation_0.ap(none_type_0)


def test_case_13():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_box()
    var_0.is_fail()


def test_case_14():
    tuple_0 = ()
    bytes_0 = b"O\xd4\xaeH\x8eV\x8f*\xa9\xdbRe4\xfc)3\xba\xa2\x03"
    validation_0 = module_0.Validation(tuple_0, bytes_0)
    var_0 = validation_0.to_try()
    var_0.to_lazy()


def test_case_15():
    bytes_0 = b"\xd7\xff~"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    dict_1 = {}
    validation_1 = module_0.Validation(dict_1, dict_1)
    var_1 = validation_1.to_lazy()
    var_2 = var_1.ap(dict_0)
    validation_2 = module_0.Validation(var_2, var_1)
    var_3 = validation_1.__str__()
    var_4 = var_2.__eq__(dict_0)
    validation_2.__str__()


def test_case_16():
    bytes_0 = b"\xd7\xff~"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    dict_1 = {}
    validation_1 = module_0.Validation(dict_1, dict_1)
    var_1 = validation_1.to_lazy()
    var_2 = var_1.ap(dict_0)
    validation_2 = module_0.Validation(var_2, var_1)
    validation_3 = module_0.Validation(var_1, dict_1)
    var_3 = var_1.map(validation_0)
    var_4 = var_3.__str__()
    var_5 = validation_0.__eq__(validation_1)
    var_6 = var_3.__str__()
    var_6.to_maybe()


def test_case_17():
    bytes_0 = b"\xd7\xff~"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    dict_1 = {}
    validation_1 = module_0.Validation(dict_1, dict_1)
    var_1 = validation_1.to_lazy()
    var_2 = var_1.ap(dict_0)
    validation_2 = module_0.Validation(var_2, var_1)
    validation_3 = module_0.Validation(var_1, dict_1)
    var_3 = var_1.map(validation_0)
    var_4 = var_3.__str__()
    var_5 = validation_0.__eq__(var_3)
    var_6 = validation_3.__str__()
    var_7 = validation_3.to_maybe()
