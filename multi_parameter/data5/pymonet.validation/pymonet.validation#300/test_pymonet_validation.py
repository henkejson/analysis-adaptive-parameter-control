# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    set_0 = set()
    str_0 = ""
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(set_0)


def test_case_1():
    set_0 = set()
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, set_0)
    var_0 = validation_0.__str__()
    var_0.to_lazy()


def test_case_2():
    bytes_0 = b"o8\nDo\x9dv\x81\xf5\n\xcd\xbb\x81\xa8\x11\xd4{@\xf2("
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_either()
    var_0.is_success()


def test_case_3():
    bytes_0 = b"+\x94\xd8U0y\xeb"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.__str__()


def test_case_4():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)


def test_case_5():
    int_0 = 3168
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.is_success()


def test_case_6():
    str_0 = "uk~Xh!"
    bool_0 = False
    str_1 = "[lqd*M\\)Hl&$]9iD\r"
    tuple_0 = (str_0, bool_0, str_1)
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.is_fail()


def test_case_7():
    bytes_0 = b"\\h\x90\x95\xb6\xbc\xa7\xd6\xcc"
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.map(bytes_0)


def test_case_8():
    bytes_0 = b"o8\nDo\x9dv\x81\xf5\n\xcd\xbb\x81\xa8\x11\xd4{@\xf2("
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    list_1 = [list_0, list_0, list_0, list_0]
    validation_0 = module_0.Validation(list_1, list_1)
    var_0 = validation_0.to_either()
    validation_0.bind(bytes_0)


def test_case_9():
    int_0 = -718
    set_0 = {int_0, int_0}
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.ap(int_0)
    var_2 = validation_0.__eq__(var_0)
    var_3 = var_0.ap(int_0)
    bool_0 = True
    validation_0.ap(bool_0)


def test_case_10():
    str_0 = "ImmutableList[U]"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.to_either()
    validation_0.bind(validation_0)


def test_case_11():
    int_0 = -718
    none_type_0 = None
    validation_0 = module_0.Validation(int_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_lazy()


def test_case_12():
    str_0 = "All[value={}]"
    list_0 = [str_0]
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_maybe()
    var_1.bind(list_0)


def test_case_13():
    int_0 = -718
    set_0 = {int_0, int_0}
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.ap(int_0)
    none_type_0 = None
    validation_1 = module_0.Validation(int_0, none_type_0)
    var_2 = validation_1.__eq__(validation_1)
    validation_1.to_try()


def test_case_14():
    int_0 = -718
    none_type_0 = None
    validation_0 = module_0.Validation(int_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)


def test_case_15():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.__str__()
    var_2 = validation_0.to_either()
    var_3 = validation_0.__eq__(validation_0)
    var_1.to_box()


def test_case_16():
    int_0 = -4635
    set_0 = {int_0, int_0}
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.ap(int_0)
    none_type_0 = None
    validation_1 = module_0.Validation(int_0, none_type_0)
    var_2 = validation_1.__eq__(validation_0)
    var_3 = validation_0.__eq__(var_1)
    var_2.bind(var_1)
