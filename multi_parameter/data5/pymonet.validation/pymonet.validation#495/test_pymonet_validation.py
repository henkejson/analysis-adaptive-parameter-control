# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    float_0 = -425.95
    var_0 = validation_0.__eq__(float_0)
    dict_0 = {float_0: float_0}
    validation_1 = module_0.Validation(none_type_0, validation_0)
    validation_2 = module_0.Validation(dict_0, dict_0)
    validation_2.ap(none_type_0)


def test_case_1():
    str_0 = "\n        Returns new ImmutableList with elements from previous one\n        and argument value on the end of list\n\n        :param new_element: element to append on the end of list\n        :type fn: A\n        :returns: ImmutableList[A]\n        "
    list_0 = []
    validation_0 = module_0.Validation(str_0, list_0)
    var_0 = validation_0.to_either()
    validation_1 = module_0.Validation(str_0, list_0)
    var_1 = validation_1.__str__()
    var_2 = validation_1.to_maybe()
    var_3 = var_2.to_either()
    var_4 = var_0.__str__()
    var_4.to_lazy()


def test_case_2():
    str_0 = "\n        Returns new ImmutableList with elements from previous one\n        and argument value on the end of list\n\n        :param new_element: element to append on the end of list\n        :type fn: A\n        :returns: ImmutableList[A]\n        "
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, str_0)
    var_0 = validation_0.__eq__(none_type_0)
    validation_1 = module_0.Validation(none_type_0, validation_0)
    var_1 = validation_0.__str__()
    none_type_0.to_maybe()


def test_case_3():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    float_0 = -425.95
    var_0 = validation_0.__eq__(float_0)
    dict_0 = {float_0: float_0}
    validation_1 = module_0.Validation(none_type_0, validation_0)
    validation_2 = module_0.Validation(dict_0, dict_0)
    validation_3 = module_0.Validation(var_0, var_0)
    var_1 = validation_2.to_either()
    var_2 = var_1.__eq__(validation_3)
    validation_1.to_maybe()


def test_case_4():
    bool_0 = False
    none_type_0 = None
    set_0 = {none_type_0}
    validation_0 = module_0.Validation(none_type_0, set_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.to_lazy()
    var_2 = validation_0.__eq__(validation_0)
    var_3 = var_1.__eq__(bool_0)
    var_4 = validation_0.to_lazy()
    var_4.is_fail()


def test_case_5():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)


def test_case_6():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.to_either()


def test_case_7():
    str_0 = "\n        :returns: Copy of self\n        :rtype: Left[A]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.is_fail()
    var_0.to_box()


def test_case_8():
    dict_0 = {}
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.map(dict_0)


def test_case_9():
    int_0 = 1
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, int_0)
    validation_0.bind(int_0)


def test_case_10():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_1 = module_0.Validation(none_type_0, validation_0)
    validation_2 = module_0.Validation(var_0, var_0)
    validation_2.ap(none_type_0)


def test_case_11():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_box()
    var_0.to_box()


def test_case_12():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    float_0 = -425.95
    var_0 = validation_0.__eq__(float_0)
    dict_0 = {float_0: float_0}
    validation_1 = module_0.Validation(none_type_0, validation_0)
    validation_2 = module_0.Validation(dict_0, dict_0)
    validation_3 = module_0.Validation(var_0, var_0)
    var_1 = validation_1.to_lazy()
    var_2 = validation_2.to_either()
    var_0.is_success()


def test_case_13():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_box()
    var_1.to_box()


def test_case_14():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.to_try()


def test_case_15():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_1 = module_0.Validation(none_type_0, validation_0)
    var_0.ap(none_type_0)


def test_case_16():
    str_0 = "\n        Returns new ImmutableList with elements from previous one\n        and argument value on the end of list\n\n        :param new_element: element to append on the end of list\n        :type fn: A\n        :returns: ImmutableList[A]\n        "
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_lazy()
    var_2 = validation_0.__eq__(none_type_0)
    validation_1 = module_0.Validation(var_0, validation_0)
    var_3 = module_0.Validation(str_0, var_0)
    var_4 = validation_1.__eq__(var_3)
    var_5 = var_0.to_box()
    var_5.bind(str_0)
