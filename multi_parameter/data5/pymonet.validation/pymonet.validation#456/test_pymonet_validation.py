# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    str_0 = "\n        :returns: Copy of self\n        :rtype: Left[A]\n        "
    dict_0 = {str_0: str_0, str_0: str_0}
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, dict_0)
    var_0 = validation_0.__eq__(dict_0)
    var_0.is_success()


def test_case_1():
    str_0 = ")??"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    var_0.is_fail()


def test_case_2():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_3():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.to_try()


def test_case_4():
    float_0 = 1871.5034
    validation_0 = module_0.Validation(float_0, float_0)
    validation_0.is_fail()


def test_case_5():
    str_0 = '(a\x0c/-#hf\n]d"S\\c&5#<\\'
    bytes_0 = b"ia\xac\xdd\x1d`\xc5\xfe\xfbx\x1a\xee\xff"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_0.map(str_0)


def test_case_6():
    bytes_0 = b"FA\xfa7L"
    none_type_0 = None
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bytes_0)
    validation_0.bind(none_type_0)


def test_case_7():
    bool_0 = False
    bool_1 = True
    dict_0 = {bool_1: bool_0, bool_1: bool_1}
    validation_0 = module_0.Validation(bool_1, bool_1)
    validation_0.ap(dict_0)


def test_case_8():
    none_type_0 = None
    bool_0 = False
    none_type_1 = None
    validation_0 = module_0.Validation(bool_0, none_type_1)
    var_0 = validation_0.to_box()
    var_1 = var_0.to_try()
    var_1.ap(none_type_0)


def test_case_9():
    str_0 = "\n        :returns: Copy of self\n        :rtype: Left[A]\n        "
    dict_0 = {str_0: str_0, str_0: str_0}
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, dict_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.__eq__(dict_0)
    var_1.is_success()


def test_case_10():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.__str__()
    set_0.is_success()


def test_case_11():
    str_0 = "^A][5wy0WNb"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.bind(str_0)
    var_2 = var_1.__str__()
    var_3 = var_2.__str__()
    validation_1 = module_0.Validation(str_0, var_3)
    var_4 = validation_1.__str__()
    var_4.to_lazy()


def test_case_12():
    bytes_0 = b"\xa53\x8a\xa2\xb10"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.is_success()
    bool_0 = True
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    var_1 = module_0.Validation(bool_0, validation_0)
    var_2 = var_1.to_lazy()
    var_3 = var_2.to_either()
    var_4 = var_3.to_maybe()
    var_4.bind(var_3)


def test_case_13():
    int_0 = 2824
    validation_0 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.__eq__(validation_0)
    var_0.to_lazy()


def test_case_14():
    bytes_0 = b"\xa53\x8d\xa2\xb1\xc9"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()


def test_case_15():
    bytes_0 = b"\xa53\x8d\xa2\xb1\xc9"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_1.__eq__(validation_0)
    var_1 = validation_1.__eq__(var_0)
    var_2 = validation_0.to_lazy()
    var_3 = var_2.map(var_1)
    var_1.to_either()


def test_case_16():
    bool_0 = True
    bytes_0 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    bool_1 = True
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    var_1 = validation_1.__eq__(bool_1)
    var_2 = validation_0.to_maybe()
    validation_1.map(bool_0)
