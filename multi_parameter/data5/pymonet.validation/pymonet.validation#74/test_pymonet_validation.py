# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_1 = module_0.Validation(none_type_0, validation_0)
    var_0 = validation_1.__eq__(validation_0)
    var_1 = validation_1.to_lazy()
    var_2 = validation_0.to_box()
    validation_0.is_success()


def test_case_1():
    str_0 = ""
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    validation_1 = module_0.Validation(validation_0, var_0)


def test_case_2():
    bytes_0 = b"6\xde$\xf3\xde\xea\xb47=\xdf\xc2"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.is_success()


def test_case_3():
    float_0 = 470.0
    validation_0 = module_0.Validation(float_0, float_0)


def test_case_4():
    none_type_0 = None
    none_type_1 = None
    validation_0 = module_0.Validation(none_type_0, none_type_1)
    validation_0.is_fail()


def test_case_5():
    float_0 = 1242.89
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.map(float_0)


def test_case_6():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.bind(none_type_0)


def test_case_7():
    int_0 = 92
    set_0 = {int_0, int_0, int_0}
    bool_0 = True
    none_type_0 = None
    validation_0 = module_0.Validation(bool_0, none_type_0)
    validation_0.ap(set_0)


def test_case_8():
    bytes_0 = b"6\xde$\xf3\xde\xb47=\xdf\xc2"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.__str__()
    var_2 = validation_0.is_success()
    var_3 = validation_0.to_box()
    var_4 = var_3.to_either()


def test_case_9():
    str_0 = "Q^"
    complex_0 = 2055.31196 - 4110.06743j
    validation_0 = module_0.Validation(str_0, complex_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_try()
    var_1.is_success()


def test_case_10():
    str_0 = "rdXV8["
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(str_0)
    var_1 = validation_0.to_try()
    float_0 = -685.390542
    var_2 = validation_0.__eq__(str_0)
    none_type_0 = None
    validation_1 = module_0.Validation(float_0, none_type_0)
    validation_1.to_try()


def test_case_11():
    none_type_0 = None
    bytes_0 = b"\xd8\xa7(\x8c\xfbL\xa5\x80S\xdaG5\xb7{<\xbc\x0e\xe9*"
    tuple_0 = (bytes_0,)
    validation_0 = module_0.Validation(none_type_0, tuple_0)
    var_0 = validation_0.__str__()


def test_case_12():
    bytes_0 = b"6\xde$\xf3\xde\xea\xb47=\xdf\xc2"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.__eq__(validation_0)
    var_1.to_box()


def test_case_13():
    bytes_0 = b"\xa2\x94\xc1,"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.__str__()
    var_2 = module_0.Validation(var_1, bytes_0)
    var_3 = var_2.to_either()


def test_case_14():
    str_0 = ""
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    validation_1 = module_0.Validation(validation_0, var_0)


def test_case_15():
    bytes_0 = b"&|w{\xbf\x9d\x8ck\xca"
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.__str__()
    var_0.ap(bytes_0)
