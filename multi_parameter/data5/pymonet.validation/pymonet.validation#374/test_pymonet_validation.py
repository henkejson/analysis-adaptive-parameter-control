# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    float_0 = -1945.6181
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(float_0)
    var_0.map(validation_0)


def test_case_1():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_lazy()
    var_2 = validation_0.__eq__(validation_0)
    var_3 = validation_0.__eq__(var_1)
    validation_1 = module_0.Validation(var_1, tuple_0)
    var_4 = validation_1.to_lazy()
    var_5 = validation_0.to_either()
    var_0.to_either()


def test_case_2():
    str_0 = "=!Y(-"
    list_0 = [str_0, str_0]
    validation_0 = module_0.Validation(str_0, list_0)
    var_0 = validation_0.is_success()
    var_1 = validation_0.to_either()
    var_2 = var_1.to_maybe()
    var_3 = var_2.to_either()
    var_4 = validation_0.to_box()
    var_5 = var_1.__eq__(var_2)
    var_6 = var_1.to_try()
    none_type_0 = None
    var_7 = validation_0.__eq__(none_type_0)
    list_0.to_box()


def test_case_3():
    set_0 = set()
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, set_0)
    var_0 = validation_0.to_maybe()
    var_0.to_maybe()


def test_case_4():
    str_0 = "y+oC7^L\t)"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()


def test_case_5():
    str_0 = "y+oC7^L\t)"
    validation_0 = module_0.Validation(str_0, str_0)


def test_case_6():
    int_0 = 6731
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.to_maybe()


def test_case_7():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.is_fail()


def test_case_8():
    int_0 = 1
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.map(int_0)


def test_case_9():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    list_0 = [tuple_0, validation_0]
    var_0 = validation_0.__eq__(list_0)
    validation_1 = module_0.Validation(list_0, tuple_0)
    var_1 = validation_1.to_lazy()
    var_2 = validation_1.to_either()
    validation_1.bind(validation_1)


def test_case_10():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_0.ap(validation_0)


def test_case_11():
    int_0 = -3195
    validation_0 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.to_lazy()
    var_1.to_lazy()


def test_case_12():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_lazy()
    var_2 = validation_0.__eq__(validation_0)
    var_2.map(var_2)


def test_case_13():
    set_0 = set()
    none_type_0 = None
    validation_0 = module_0.Validation(set_0, none_type_0)
    validation_0.to_try()


def test_case_14():
    complex_0 = 232.31707 + 521.28j
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.bind(complex_0)
    var_1.to_maybe()


def test_case_15():
    str_0 = "\n        :returns: Copy of self\n        :rtype: Left[A]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    var_0.to_maybe()


def test_case_16():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.__str__()
    var_1 = module_0.Validation(var_0, var_0)
    var_2 = validation_0.__eq__(validation_0)
    var_3 = validation_0.__eq__(var_1)
    validation_1 = module_0.Validation(var_1, tuple_0)
    var_4 = validation_1.to_lazy()
    var_5 = var_0.__eq__(var_2)
    var_6 = validation_0.to_either()
    var_0.to_either()
