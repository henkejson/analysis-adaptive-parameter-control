# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    complex_0 = -6.78497710402694 - 687.52j
    validation_0 = module_0.Validation(complex_0, complex_0)
    none_type_0 = None
    var_0 = validation_0.__eq__(none_type_0)


def test_case_1():
    bytes_0 = b"\x00lf\xb7\xca\xcf\x0ec\x1b\xde\x8b\xcd3t+"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()


def test_case_2():
    bytes_0 = b"yK\xfd\xfb,\xa1\xe8t\xf4\xf9\x07Y\x86"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    validation_1 = module_0.Validation(bytes_0, bytes_0)


def test_case_3():
    none_type_0 = None
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.__eq__(none_type_0)
    dict_0 = {}
    validation_1 = module_0.Validation(validation_0, validation_0)
    validation_2 = module_0.Validation(dict_0, dict_0)
    var_1 = validation_2.to_box()
    var_2 = var_1.to_maybe()
    validation_3 = module_0.Validation(tuple_0, var_1)
    int_0 = 1301
    bytes_0 = b"0\xac\x08\x83u)\x06P\x03"
    tuple_1 = (int_0, bytes_0, var_2)
    validation_4 = module_0.Validation(var_0, tuple_1)
    var_3 = validation_0.to_maybe()
    var_4 = var_3.__str__()
    float_0 = 427.79292
    var_5 = var_1.to_maybe()
    var_6 = var_5.__eq__(float_0)
    validation_5 = module_0.Validation(tuple_0, var_0)
    var_7 = validation_0.is_success()
    var_8 = validation_2.is_fail()
    var_1.is_fail()


def test_case_4():
    str_0 = "\n        Take function and applied this function with monad value and returns function result.\n\n        :params binder: function to apply on monad value\n        :type binder: Function(A) -> Try[B]\n        :returns: for successfully result of binder, othercase copy of self\n        :rtype: Try[B]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.to_either()
    var_0.is_fail()


def test_case_5():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_6():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.to_maybe()


def test_case_7():
    bytes_0 = b"S"
    none_type_0 = None
    validation_0 = module_0.Validation(bytes_0, none_type_0)
    validation_0.is_fail()


def test_case_8():
    bytes_0 = b"\x91<"
    none_type_0 = None
    validation_0 = module_0.Validation(bytes_0, none_type_0)
    validation_0.map(validation_0)


def test_case_9():
    bytes_0 = b"yK\xfd\xfb,\xa1\xe8t\xf4\xf9\x07Y\x86"
    none_type_0 = None
    validation_0 = module_0.Validation(bytes_0, none_type_0)
    validation_0.bind(bytes_0)


def test_case_10():
    float_0 = -1694.6269683081389
    validation_0 = module_0.Validation(float_0, float_0)
    validation_0.ap(float_0)


def test_case_11():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_box()


def test_case_12():
    str_0 = "$"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_lazy()


def test_case_13():
    int_0 = -2980
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.to_try()


def test_case_14():
    bytes_0 = b"yK\xfd\xfb,\xa1\xe8t\xf4\xf9\x07Y\x86"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = var_0.__eq__(validation_0)
    var_0.to_lazy()


def test_case_15():
    bytes_0 = b"E\x05"
    none_type_0 = None
    validation_0 = module_0.Validation(bytes_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_maybe()
    var_1.to_maybe()


def test_case_16():
    none_type_0 = None
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.__eq__(none_type_0)
    dict_0 = {}
    var_1 = validation_0.to_box()
    var_2 = validation_0.to_try()
    validation_1 = module_0.Validation(validation_0, validation_0)
    validation_2 = module_0.Validation(dict_0, dict_0)
    var_3 = validation_2.to_box()
    var_4 = var_3.to_maybe()
    validation_3 = module_0.Validation(tuple_0, var_3)
    str_0 = ">KF?b]6znHz'oJOMh#^"
    var_5 = validation_1.__eq__(validation_2)
    validation_4 = module_0.Validation(str_0, str_0)
    var_3.is_success()


def test_case_17():
    none_type_0 = None
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.__eq__(none_type_0)
    validation_1 = module_0.Validation(validation_0, validation_0)
    validation_2 = validation_0.__str__()
    validation_2.to_box()


def test_case_18():
    none_type_0 = None
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.__eq__(none_type_0)
    dict_0 = {}
    validation_1 = module_0.Validation(validation_0, validation_0)
    validation_2 = module_0.Validation(dict_0, dict_0)
    var_1 = validation_0.to_either()
    validation_1.bind(tuple_0)
