# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    set_0 = set()
    str_0 = "xt)\\XX])"
    none_type_0 = None
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.__eq__(none_type_0)
    validation_1 = module_0.Validation(set_0, var_1)
    tuple_0 = (set_0, var_0)
    validation_2 = module_0.Validation(tuple_0, set_0)
    var_2 = validation_2.__str__()
    validation_3 = module_0.Validation(var_1, var_1)
    var_3 = validation_2.is_fail()
    var_4 = var_3.__eq__(var_1)
    var_5 = validation_3.__eq__(var_3)
    var_4.to_lazy()


def test_case_1():
    str_0 = "X5Jivd]?Q30"
    list_0 = [str_0, str_0]
    validation_0 = module_0.Validation(str_0, list_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.__str__()
    var_1.to_box()


def test_case_2():
    str_0 = "$*2jhP|yB;Unkan~RR7F"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.__str__()
    var_2 = var_1.__eq__(str_0)
    var_2.is_success()


def test_case_3():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_box()
    var_2 = var_0.to_box()
    var_3 = var_2.to_maybe()
    var_3.map(dict_0)


def test_case_4():
    float_0 = 442.23
    validation_0 = module_0.Validation(float_0, float_0)


def test_case_5():
    str_0 = "~Ja*l3HtkpqHhw6$wA"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.is_fail()


def test_case_6():
    float_0 = 3186.45632
    validation_0 = module_0.Validation(float_0, float_0)
    var_0 = validation_0.to_box()
    validation_0.map(float_0)


def test_case_7():
    int_0 = 1509
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    validation_1.bind(int_0)


def test_case_8():
    str_0 = "$*2jhP|yBXUnkan~RR7F"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.__str__()
    var_2 = validation_0.is_success()
    validation_1 = module_0.Validation(var_0, var_0)
    var_3 = validation_0.to_try()
    var_4 = validation_0.__eq__(validation_0)
    validation_1.ap(validation_0)


def test_case_9():
    str_0 = "/"
    str_1 = "\n        Transform Either to Try.\n\n        :returns: resolved Try monad with previous value. Right is resolved successfully, Left not.\n        :rtype: Box[A]\n        "
    none_type_0 = None
    validation_0 = module_0.Validation(str_1, none_type_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.__eq__(str_0)
    var_1.to_lazy()


def test_case_10():
    int_0 = 1
    bytes_0 = b"\xc4>}g\xecqY\x9da]U\xfaf\xaa\x08%\xf2\xc5"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_maybe()
    var_2 = var_1.__eq__(int_0)
    var_2.to_box()


def test_case_11():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.to_try()


def test_case_12():
    str_0 = "$*2jhP|yB;Unkan~RR7F"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(str_0)
    var_0.to_try()


def test_case_13():
    dict_0 = {}
    bool_0 = True
    bool_1 = False
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_box()
    var_2 = var_1.__str__()
    validation_1 = module_0.Validation(var_2, var_2)
    var_3 = var_1.__eq__(bool_0)
    var_4 = validation_0.to_box()
    var_4.map(bool_1)


def test_case_14():
    str_0 = "$*2jhP|yB;Unkan~RR7F"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.__str__()
    var_2 = var_0.to_try()
    validation_1 = module_0.Validation(var_1, var_0)
    validation_2 = module_0.Validation(var_0, var_2)
    var_3 = validation_1.__eq__(validation_0)
    var_3.to_either()
