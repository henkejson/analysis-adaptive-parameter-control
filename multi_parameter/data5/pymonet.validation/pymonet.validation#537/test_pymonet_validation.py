# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    none_type_0 = None
    str_0 = "8BAT* X)l=\\'"
    list_0 = [str_0]
    tuple_0 = (str_0, list_0)
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.__eq__(none_type_0)
    var_0.is_fail()


def test_case_1():
    str_0 = "x.ur:|Maty'*"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    var_0.to_try()


def test_case_2():
    bool_0 = False
    none_type_0 = None
    list_0 = [none_type_0]
    validation_0 = module_0.Validation(none_type_0, list_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_box()
    var_2 = var_1.to_either()
    var_1.bind(bool_0)


def test_case_3():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    set_0 = set()
    list_0 = [set_0, set_0]
    tuple_0 = (list_0,)
    validation_1 = module_0.Validation(tuple_0, set_0)
    var_0 = validation_1.to_maybe()
    var_1 = var_0.to_either()
    var_2 = var_1.to_box()
    var_3 = var_2.__str__()
    bool_1 = False
    set_1 = {bool_1}
    none_type_0 = None
    validation_2 = module_0.Validation(set_1, none_type_0)
    validation_2.ap(var_3)


def test_case_4():
    str_0 = "R|9J>nF,5H9zM4G\r|'bq"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    bool_0 = False
    validation_1 = module_0.Validation(bool_0, bool_0)
    var_1 = validation_0.to_try()
    var_1.to_try()


def test_case_5():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)


def test_case_6():
    int_0 = -3704
    set_0 = {int_0}
    validation_0 = module_0.Validation(set_0, int_0)
    validation_0.is_fail()


def test_case_7():
    none_type_0 = None
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.map(none_type_0)


def test_case_8():
    bool_0 = True
    bytes_0 = b"\xee\x19%7'\x13.\xbf\x87l"
    validation_0 = module_0.Validation(bool_0, bytes_0)
    validation_0.bind(bytes_0)


def test_case_9():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    validation_0 = module_0.Validation(set_0, bool_0)
    var_0 = validation_0.to_lazy()
    validation_0.ap(bool_0)


def test_case_10():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_box()
    var_0.is_success()


def test_case_11():
    list_0 = []
    dict_0 = {}
    validation_0 = module_0.Validation(list_0, dict_0)
    var_0 = validation_0.__eq__(list_0)
    var_1 = validation_0.to_lazy()
    var_2 = validation_0.to_lazy()
    var_3 = var_2.to_box()
    validation_1 = module_0.Validation(dict_0, list_0)
    var_4 = validation_1.to_try()
    var_5 = var_1.__eq__(var_3)
    var_4.to_box()


def test_case_12():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    set_0 = set()
    list_0 = [set_0, set_0]
    tuple_0 = (list_0,)
    validation_1 = module_0.Validation(tuple_0, set_0)
    var_0 = validation_1.to_maybe()
    var_1 = module_0.Validation(var_0, validation_0)
    var_2 = validation_1.to_either()
    var_3 = var_2.__str__()
    bool_1 = False
    set_1 = {bool_1}
    none_type_0 = None
    validation_2 = module_0.Validation(set_1, none_type_0)
    validation_2.ap(var_3)


def test_case_13():
    complex_0 = 1895.96 - 2011.2j
    validation_0 = module_0.Validation(complex_0, complex_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_0.to_maybe()


def test_case_14():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    set_0 = set()
    list_0 = [set_0, set_0]
    tuple_0 = (list_0,)
    validation_1 = module_0.Validation(tuple_0, set_0)
    var_0 = validation_1.to_maybe()
    var_1 = var_0.to_either()
    var_2 = module_0.Validation(var_0, set_0)
    var_3 = var_2.__str__()


def test_case_15():
    complex_0 = 1868.918204565274 - 2011.2j
    validation_0 = module_0.Validation(complex_0, complex_0)
    var_0 = module_0.Validation(validation_0, validation_0)
    var_1 = validation_0.__eq__(validation_0)
    var_2 = validation_0.__eq__(var_0)
    validation_0.map(var_2)
