# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    tuple_0 = ()
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(tuple_0)
    var_1 = var_0.__str__()
    var_2 = var_1.__str__()


def test_case_1():
    str_0 = "T"
    validation_0 = module_0.Validation(str_0, str_0)
    validation_1 = module_0.Validation(validation_0, str_0)
    var_0 = validation_0.__str__()
    var_0.bind(validation_0)


def test_case_2():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_maybe()
    validation_1 = module_0.Validation(var_1, var_0)
    validation_1.is_success()


def test_case_3():
    str_0 = "\n        Call success_callback function with monad value when monad is not successfully.\n\n        :params fail_callback: function to apply with monad value.\n        :type fail_callback: Function(A)\n        :returns: self\n        :rtype: Try[A]\n        "
    str_1 = "1\t`T%:g-^FT~RU\t<1M"
    validation_0 = module_0.Validation(str_1, str_1)
    validation_1 = module_0.Validation(str_0, validation_0)
    validation_2 = module_0.Validation(str_0, str_0)
    var_0 = validation_2.is_success()
    var_1 = validation_2.to_either()
    var_2 = validation_2.to_maybe()
    var_3 = var_2.__str__()
    var_4 = var_2.map(var_2)
    var_5 = var_2.to_lazy()
    validation_1.to_try()


def test_case_4():
    bytes_0 = b"e\xf5\x0e\xd0C\xd8\xe8J\xdc\xc6M\xbb\x98$"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_0.to_maybe()


def test_case_5():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)


def test_case_6():
    str_0 = ".nXyd/6UM8>|Po"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.is_success()


def test_case_7():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    validation_0.is_fail()


def test_case_8():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    tuple_0 = (list_0,)
    tuple_1 = (bool_0, tuple_0, bool_0)
    bool_1 = False
    validation_0 = module_0.Validation(bool_1, bool_1)
    validation_0.map(tuple_1)


def test_case_9():
    bytes_0 = b"\x98]\xc6\xfb^\xb8"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.is_success()
    var_1 = validation_0.to_maybe()
    validation_0.bind(var_0)


def test_case_10():
    none_type_0 = None
    str_0 = "Z?||Qp-t;&"
    validation_0 = module_0.Validation(str_0, str_0)
    validation_0.ap(none_type_0)


def test_case_11():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.__str__()
    var_1.is_fail()


def test_case_12():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_try()
    bool_0 = True
    validation_1 = module_0.Validation(bool_0, bool_0)
    var_1 = validation_1.__eq__(tuple_0)
    var_0.to_either()


def test_case_13():
    str_0 = "D"
    validation_0 = module_0.Validation(str_0, str_0)
    none_type_0 = None
    validation_1 = module_0.Validation(validation_0, none_type_0)
    var_0 = validation_0.__eq__(validation_1)
    validation_2 = module_0.Validation(str_0, none_type_0)
    var_0.to_try()


def test_case_14():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.__str__()
    var_0.to_box()


def test_case_15():
    str_0 = ""
    validation_0 = module_0.Validation(str_0, str_0)
    none_type_0 = None
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.__eq__(none_type_0)
    validation_1 = module_0.Validation(str_0, validation_0)
    validation_1.is_success()


def test_case_16():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_either()
    var_1.is_fail()


def test_case_17():
    str_0 = ""
    validation_0 = module_0.Validation(str_0, str_0)
    none_type_0 = None
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.__eq__(none_type_0)
    var_2 = validation_0.to_maybe()
    var_0.to_either()
