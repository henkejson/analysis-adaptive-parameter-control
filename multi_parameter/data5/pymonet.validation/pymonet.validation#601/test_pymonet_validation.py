# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    none_type_0 = None
    str_0 = " ,K"
    validation_0 = module_0.Validation(none_type_0, str_0)
    var_0 = validation_0.__eq__(none_type_0)
    var_1 = validation_0.to_either()
    bool_0 = True
    validation_1 = module_0.Validation(bool_0, var_1)
    validation_1.to_either()


def test_case_1():
    bytes_0 = b"\x91\xc3"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.is_success()
    var_1 = var_0.__str__()
    var_2 = validation_0.__str__()
    var_2.to_maybe()


def test_case_2():
    bytes_0 = b"\xbd\x81i|M\xe3\xec\xa5\x8b\xed/\x19\xc1\x07\xbb"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_0.is_success()


def test_case_3():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_maybe()
    var_0.to_maybe()


def test_case_4():
    none_type_0 = None
    int_0 = 661
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.map(int_0)
    var_2 = var_1.map(none_type_0)
    var_2.to_maybe()


def test_case_5():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_6():
    int_0 = 1
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.__str__()


def test_case_7():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.is_fail()


def test_case_8():
    str_0 = "\n    All is a Monoid that will combine 2 values of any type using logical conjunction on their coerced Boolean values.\n    "
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.map(str_0)


def test_case_9():
    str_0 = "X"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(str_0)
    validation_1 = module_0.Validation(validation_0, str_0)
    var_1 = validation_0.__str__()
    var_2 = validation_1.__str__()
    validation_0.bind(var_1)


def test_case_10():
    bool_0 = False
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.ap(bool_0)


def test_case_11():
    bytes_0 = b"\x84+\xe1\xff\x10\ru\xde\x84\xd3\t`\x08`\xa2\x0c\x81\xec\x9f\xcf"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_box()
    var_0.ap(bytes_0)


def test_case_12():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_lazy()


def test_case_13():
    bytes_0 = b"\xc2\xb4\x06#"
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_box()
    var_1.bind(bytes_0)


def test_case_14():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.to_try()


def test_case_15():
    str_0 = ""
    none_type_0 = None
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    var_0.ap(none_type_0)


def test_case_16():
    none_type_0 = None
    str_0 = " ,K"
    validation_0 = module_0.Validation(str_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_0.to_either()


def test_case_17():
    str_0 = ""
    none_type_0 = None
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(str_0)
    validation_1 = module_0.Validation(none_type_0, validation_0)
    var_1 = validation_0.__str__()
    var_0.ap(var_0)


def test_case_18():
    str_0 = "X"
    none_type_0 = None
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(str_0)
    validation_1 = module_0.Validation(none_type_0, validation_0)
    var_1 = validation_0.__eq__(validation_1)
    validation_2 = module_0.Validation(none_type_0, var_1)
    var_2 = var_1.__eq__(none_type_0)
    var_0.to_try()
