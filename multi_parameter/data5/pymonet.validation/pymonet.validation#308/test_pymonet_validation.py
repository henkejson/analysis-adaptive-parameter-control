# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.__eq__(var_0)


def test_case_1():
    bytes_0 = b"\x0c\xd7\xa5\x0fO\x98\xa8\xd40\x7f\x8d\xb9\x11"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_try()
    var_1.is_success()


def test_case_2():
    bytes_0 = b"\x0c\xd7\xa5\x0fO\x98\xa8\xd40\x7f\x8d\xb9\x11"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.to_either()
    var_2 = var_1.to_try()
    var_2.is_success()


def test_case_3():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)


def test_case_4():
    int_0 = -341
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.__str__()


def test_case_5():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.is_fail()


def test_case_6():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_try()
    var_1 = validation_0.__eq__(validation_0)
    validation_1 = module_0.Validation(var_1, validation_0)
    validation_1.map(var_1)


def test_case_7():
    tuple_0 = ()
    int_0 = -1968
    validation_0 = module_0.Validation(tuple_0, int_0)
    validation_0.bind(tuple_0)


def test_case_8():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_lazy()
    var_2 = validation_0.to_either()
    var_3 = validation_0.__eq__(validation_0)
    validation_1 = module_0.Validation(var_3, validation_0)
    var_4 = validation_0.to_either()
    var_5 = validation_1.__eq__(validation_1)
    var_6 = validation_0.to_box()
    validation_2 = module_0.Validation(var_6, var_3)
    validation_2.ap(validation_2)


def test_case_9():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_box()


def test_case_10():
    int_0 = 810
    none_type_0 = None
    validation_0 = module_0.Validation(int_0, none_type_0)
    var_0 = validation_0.to_lazy()
    validation_0.is_fail()


def test_case_11():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_try()
    var_1 = validation_0.__eq__(validation_0)
    validation_1 = module_0.Validation(var_1, validation_0)
    var_2 = validation_1.__eq__(tuple_0)
    validation_1.is_fail()


def test_case_12():
    bytes_0 = b"\x0c\xd7\xa5\x0fO\x98\xa8\xd40\x7f\x8d\xb9\x11"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()


def test_case_13():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.__eq__(tuple_0)
    var_2 = validation_0.__eq__(validation_0)
    validation_1 = module_0.Validation(var_2, validation_0)
    var_3 = validation_1.__eq__(tuple_0)
    validation_1.is_fail()


def test_case_14():
    int_0 = 810
    none_type_0 = None
    validation_0 = module_0.Validation(int_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.__eq__(var_0)
    var_2 = var_0.to_maybe()
    var_2.to_maybe()


def test_case_15():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_maybe()


def test_case_16():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.__eq__(tuple_0)
    var_2 = validation_0.to_either()
    var_0.to_maybe()


def test_case_17():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    validation_1 = module_0.Validation(validation_0, validation_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_1.__eq__(validation_0)
    validation_1.to_either()
