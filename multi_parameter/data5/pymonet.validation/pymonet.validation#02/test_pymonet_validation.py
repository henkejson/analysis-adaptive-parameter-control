# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_1 = module_0.Validation(validation_0, validation_0)
    var_0 = validation_1.__eq__(validation_1)
    validation_1.is_fail()


def test_case_1():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    complex_0 = 87.56 - 4385.1491j
    var_0 = validation_0.__eq__(complex_0)
    validation_0.to_either()


def test_case_2():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.__str__()


def test_case_3():
    none_type_0 = None
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_box()
    var_1.ap(none_type_0)


def test_case_4():
    bytes_0 = b'Ij6\xf5"\xfc\xb2_y'
    none_type_0 = None
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(none_type_0)
    var_1 = validation_0.to_either()
    var_2 = validation_0.to_try()
    var_3 = var_1.to_box()
    validation_1 = module_0.Validation(var_2, validation_0)
    var_0.ap(validation_0)


def test_case_5():
    int_0 = 1
    tuple_0 = ()
    validation_0 = module_0.Validation(int_0, tuple_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_either()
    bytes_0 = b"\x99\xd6Rv\xcc\x8f\x1f4:\xc2%Y\x04\xd1A\x9e"
    validation_1 = module_0.Validation(bytes_0, bytes_0)
    var_2 = validation_1.to_either()
    var_3 = var_2.bind(var_2)
    var_4 = var_2.to_try()
    var_4.ap(var_2)


def test_case_6():
    bytes_0 = b"s3\xa4\xe3B1\xb7\x14"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    validation_0.map(validation_0)


def test_case_7():
    none_type_0 = None
    none_type_0.is_fail()


def test_case_8():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_9():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.is_fail()
    var_0.is_fail()


def test_case_10():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_box()
    validation_1 = module_0.Validation(bool_0, bool_0)
    none_type_0 = None
    validation_1.bind(none_type_0)


def test_case_11():
    none_type_0 = None
    str_0 = "MiZ4"
    validation_0 = module_0.Validation(str_0, str_0)
    validation_0.ap(none_type_0)


def test_case_12():
    bytes_0 = b"\x91\xe5\x0e\xbe\x030\x8d\xf4\xa6\x93\xd1\xdbc9\x19\x80\x03\x1f\x83\xd4"
    none_type_0 = None
    validation_0 = module_0.Validation(bytes_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_either()
    var_1.is_success()


def test_case_13():
    none_type_0 = None
    list_0 = []
    validation_0 = module_0.Validation(none_type_0, list_0)
    var_0 = validation_0.to_try()
    var_0.to_try()


def test_case_14():
    bool_0 = False
    none_type_0 = None
    bool_1 = False
    dict_0 = {bool_1: bool_1}
    validation_0 = module_0.Validation(none_type_0, dict_0)
    var_0 = validation_0.__str__()
    var_1 = var_0.__str__()
    var_2 = var_1.__eq__(bool_0)
    var_2.to_box()


def test_case_15():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    none_type_0 = None
    validation_1 = module_0.Validation(validation_0, none_type_0)
    var_0 = validation_1.to_box()
    validation_2 = module_0.Validation(var_0, validation_1)
    int_0 = -267
    validation_3 = module_0.Validation(int_0, none_type_0)
    var_1 = validation_3.__eq__(validation_2)
    validation_1.is_fail()
