# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.__eq__(validation_0)
    list_0.to_try()


def test_case_1():
    str_0 = "Ei5}RvV'\x0c"
    bytes_0 = b"\x13\xffA\xd2:\x962\xac\x0b\xbc\xd7\xd5\xc2\xcfQ\xe9\x8eB\xb3"
    validation_0 = module_0.Validation(str_0, bytes_0)
    var_0 = validation_0.__eq__(bytes_0)
    var_0.is_fail()


def test_case_2():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.__str__()
    var_0.to_try()


def test_case_3():
    bytes_0 = b"=\x8d\x83\x1f\xdb\xad\xfd"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, bytes_0)
    var_0 = validation_0.__str__()
    var_1 = var_0.__eq__(none_type_0)
    var_1.to_either()


def test_case_4():
    str_0 = "NK\rS"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_box()
    var_2 = var_1.to_lazy()
    bool_0 = True
    validation_1 = module_0.Validation(var_1, bool_0)
    var_3 = var_0.__eq__(validation_1)
    var_3.map(var_1)


def test_case_5():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    validation_1 = module_0.Validation(validation_0, validation_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.to_maybe()
    var_2 = validation_0.__str__()
    var_2.bind(var_0)


def test_case_6():
    bytes_0 = b"\xedR.\x15\x96\xcfs\xc9\xac\x83\n\xadgh\x1c\xd3\xf3"
    int_0 = 1
    set_0 = {int_0, int_0}
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_try()
    var_1.ap(bytes_0)


def test_case_7():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_8():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_try()
    var_1 = validation_0.to_either()


def test_case_9():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.is_fail()


def test_case_10():
    str_0 = "+f"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.is_success()
    var_1 = var_0.__str__()
    var_2 = validation_0.__str__()
    none_type_0 = None
    validation_0.map(none_type_0)


def test_case_11():
    float_0 = -1079.24
    validation_0 = module_0.Validation(float_0, float_0)
    validation_0.bind(float_0)


def test_case_12():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_0.ap(var_0)


def test_case_13():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    list_1 = [list_0, list_0]
    validation_0 = module_0.Validation(list_1, list_1)
    var_0 = validation_0.to_box()
    var_0.to_box()


def test_case_14():
    str_0 = "Ei5}RvV'\x0c"
    bytes_0 = b"\x13\xffA\xd2:\x962\xac\x0b\xbc\xd7\xd5\xc2\xcfQ\xe9\x8eB\xb3"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, bytes_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_try()
    validation_1 = module_0.Validation(validation_0, str_0)
    var_2 = validation_0.is_fail()
    var_1.ap(validation_1)


def test_case_15():
    bool_0 = False
    none_type_0 = None
    validation_0 = module_0.Validation(bool_0, none_type_0)
    none_type_1 = None
    bytes_0 = b"\xe0}}\x1e\xe8[\xf2b\x9e\x9aZ.>"
    validation_1 = module_0.Validation(none_type_1, bytes_0)
    var_0 = validation_1.__eq__(validation_0)
    var_1 = var_0.__str__()
    var_2 = validation_1.is_success()
    validation_1.bind(bytes_0)
