# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bytes_0 = b"\xda 3\xd0\x9d\xf3(\xb6\x82\xe3\xa2?\xb3\x14pB\x8eof"
    tuple_0 = (bytes_0,)
    validation_0 = module_0.Validation(tuple_0, bytes_0)
    var_0 = validation_0.__eq__(tuple_0)
    var_1 = validation_0.__eq__(validation_0)


def test_case_1():
    bool_0 = True
    str_0 = "\n        Transform Maybe to Try.\n\n        :returns: Lazy monad with function returning previous value in other case Left with None\n        :rtype: Lazy[Function() -> (A | None)]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    validation_1 = module_0.Validation(bool_0, bool_0)
    var_1 = validation_1.to_lazy()
    validation_1.to_either()


def test_case_2():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.__eq__(var_0)
    var_2 = var_1.__str__()
    var_3 = validation_0.to_either()
    var_0.to_box()


def test_case_3():
    dict_0 = {}
    str_0 = "\n    First is a Monoid that will always return the first, value when 2 First instances are combined.\n    "
    list_0 = [str_0, str_0]
    validation_0 = module_0.Validation(list_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.__str__()
    var_1.bind(dict_0)


def test_case_4():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_maybe()
    var_0.map(tuple_0)


def test_case_5():
    bytes_0 = b"\xaf\x8a\x06"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.__str__()
    var_1.to_lazy()


def test_case_6():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_7():
    bytes_0 = b"\xfdC\xdd\xf7d))\x8b@\x89&\x00"
    int_0 = 507
    validation_0 = module_0.Validation(bytes_0, int_0)
    validation_0.__str__()


def test_case_8():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.is_fail()


def test_case_9():
    str_0 = "Y5}+|sJ*6"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    none_type_0 = None
    set_0 = {none_type_0, none_type_0, none_type_0, none_type_0}
    bytes_0 = b"\x96E+\xe6\xae"
    tuple_0 = (set_0, bytes_0)
    validation_0 = module_0.Validation(none_type_0, tuple_0)
    validation_0.map(dict_0)


def test_case_10():
    float_0 = -1569.892
    str_0 = "|"
    validation_0 = module_0.Validation(str_0, str_0)
    validation_0.bind(float_0)


def test_case_11():
    str_0 = "\n    In mathematics, a semigroup is an algebraic structure\n    consisting of a set together with an associative binary operation.\n    A semigroup generalizes a monoid in that there might not exist an identity element.\n    It also (originally) generalized a group (a monoid with all inverses)\n    to a type where every element did not have to have an inverse, this the name semigroup.\n    "
    none_type_0 = None
    validation_0 = module_0.Validation(str_0, none_type_0)
    validation_0.ap(str_0)


def test_case_12():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_box()


def test_case_13():
    int_0 = 1
    validation_0 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_try()
    validation_0.is_fail()


def test_case_14():
    float_0 = 3376.26
    validation_0 = module_0.Validation(float_0, float_0)
    validation_0.to_try()


def test_case_15():
    bytes_0 = b"Jp\xc7\xccwwb\x92\x86\x81\x9e\xb6\x1c\xaaEf\xf3"
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.__str__()
    none_type_0 = None
    validation_1 = module_0.Validation(bytes_0, none_type_0)
    var_1 = validation_1.to_lazy()
    var_0.to_either()


def test_case_16():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    validation_1 = module_0.Validation(validation_0, validation_0)
    var_0 = validation_1.__eq__(validation_1)
    var_1 = validation_0.__eq__(validation_1)
    var_2 = var_0.__str__()
    var_3 = var_1.__eq__(validation_1)
    validation_1.to_maybe()
