# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0
import builtins as module_1


def test_case_0():
    none_type_0 = None
    str_0 = "Q%a?bsnI6v\x0bXP+p]"
    none_type_1 = None
    validation_0 = module_0.Validation(none_type_1, none_type_1)
    var_0 = validation_0.__eq__(str_0)
    var_1 = var_0.__eq__(none_type_0)
    var_1.to_maybe()


def test_case_1():
    bytes_0 = b"\xfc~(\xb5\xb3\x0e\x88d83\x0eEPl\x94\x87\xe4w\xbf"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.to_either()
    validation_1 = module_0.Validation(validation_0, var_0)
    var_2 = var_0.bind(var_0)
    var_3 = validation_0.__str__()
    validation_2 = module_0.Validation(var_2, var_2)


def test_case_2():
    bool_0 = True
    tuple_0 = (bool_0,)
    bytes_0 = b"\xfc~(\xc5\xb5\xb3\x0e\x88d83\x0eEPl\x94\x87\xe4w\xbf"
    validation_0 = module_0.Validation(tuple_0, bytes_0)
    var_0 = validation_0.to_either()
    validation_1 = module_0.Validation(validation_0, tuple_0)


def test_case_3():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_4():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.to_maybe()


def test_case_5():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    validation_0 = module_0.Validation(bool_0, dict_0)
    var_0 = validation_0.is_fail()
    var_0.to_box()


def test_case_6():
    str_0 = "9'i/_0By*_)?"
    bytes_0 = b"\x99\x82\xdfy\xc1\x8d"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    none_type_0 = None
    int_0 = 1
    validation_1 = module_0.Validation(none_type_0, int_0)
    validation_0.map(str_0)


def test_case_7():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    validation_1.bind(none_type_0)


def test_case_8():
    bool_0 = True
    tuple_0 = (bool_0,)
    bytes_0 = b"K\xbb4\xa9[\x0c\x9aYJ"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(bool_0)
    validation_0.ap(tuple_0)


def test_case_9():
    str_0 = "Q%a?bsnI6v\x0bXP+p]"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(str_0)
    var_1 = validation_0.to_box()
    var_2 = var_0.__eq__(none_type_0)
    var_0.map(str_0)


def test_case_10():
    set_0 = set()
    list_0 = [set_0]
    validation_0 = module_0.Validation(list_0, set_0)
    var_0 = validation_0.to_lazy()


def test_case_11():
    float_0 = -1339.75
    validation_0 = module_0.Validation(float_0, float_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_try()
    var_1.to_try()


def test_case_12():
    bool_0 = True
    tuple_0 = (bool_0,)
    bytes_0 = b"K\xbb4\xa9[\x0c\x9aYJ"
    validation_0 = module_0.Validation(bytes_0, tuple_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.to_try()
    var_2 = validation_0.__str__()
    bytes_1 = b"\xfc~(\xb5\xb3\x0e\x88d83\x0eEPl\x94\x87\xe4w\xbf"
    validation_1 = module_0.Validation(tuple_0, bytes_1)
    var_3 = validation_0.to_lazy()
    var_4 = validation_1.to_either()
    validation_2 = module_0.Validation(var_3, var_1)
    var_5 = validation_0.to_lazy()
    var_0.to_box()


def test_case_13():
    str_0 = "\n        Transform Either to Maybe.\n\n        :returns: Empty Maybe\n        :rtype: Maybe[None]\n        "
    str_1 = "p\x0b}AcTY`AE@l\n7gLxb_<"
    validation_0 = module_0.Validation(str_0, str_1)
    var_0 = validation_0.to_lazy()
    str_2 = "Q%a?bsnI6v\x0bXP+p]"
    var_1 = var_0.to_box()
    validation_1 = module_0.Validation(validation_0, str_0)
    var_2 = var_0.map(validation_1)
    var_3 = var_2.__eq__(str_2)
    var_4 = var_2.ap(var_3)
    var_5 = var_4.__eq__(str_1)
    var_6 = validation_0.to_maybe()
    var_3.bind(var_4)


def test_case_14():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)
    var_0.ap(var_0)


def test_case_15():
    str_0 = "AEP"
    bytes_0 = b"K\xbb4\xa9[\x0c\x9aYJ"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    none_type_0 = None
    validation_1 = module_0.Validation(str_0, none_type_0)
    var_0 = validation_0.__eq__(validation_1)
    validation_1.ap(none_type_0)


def test_case_16():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_maybe()
    bool_0 = False
    str_0 = "AEP"
    validation_1 = module_0.Validation(bool_0, str_0)
    var_1 = validation_1.to_either()
    var_2 = var_1.to_maybe()
    var_3 = var_1.bind(bool_0)
    bytes_0 = b"K\xbb4\xa9[\x0c\x9aYJ"
    validation_2 = module_0.Validation(bytes_0, bytes_0)
    var_4 = validation_2.__eq__(bool_0)
    set_0.to_either()


def test_case_17():
    str_0 = "!{B!h3[U9p=\\za"
    int_0 = -526
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.__str__()
    var_1 = var_0.__eq__(int_0)
    var_1.bind(str_0)


def test_case_18():
    bool_0 = True
    tuple_0 = (bool_0,)
    bytes_0 = b"K\xbb4\xa9[\x0c\x9aYJ"
    validation_0 = module_0.Validation(bytes_0, tuple_0)
    var_0 = validation_0.to_box()
    bool_1 = True
    var_1 = validation_0.__eq__(bool_1)
    var_2 = validation_0.__str__()
    none_type_0 = None
    set_0 = set()
    validation_1 = module_0.Validation(none_type_0, set_0)
    var_3 = validation_1.to_lazy()
    var_4 = validation_1.to_either()
    validation_2 = module_0.Validation(var_1, bool_1)
    module_1.object(*var_1)
