# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.__eq__(var_0)


def test_case_1():
    bytes_0 = b"L\r\xa8yf"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    bytes_1 = b"?{\xea.mt,\xb4\x84a?\xb9\x9e"
    var_0 = validation_0.__str__()
    validation_1 = module_0.Validation(bytes_1, bytes_1)
    var_1 = validation_1.to_either()


def test_case_2():
    str_0 = "\n        Call success_callback function with monad value when monad is not successfully.\n\n        :params fail_callback: function to apply with monad value.\n        :type fail_callback: Function(A)\n        :returns: self\n        :rtype: Try[A]\n        "
    str_0.to_either()


def test_case_3():
    str_0 = "\n        Call success_callback function with monad value when monad is not successfully.\n\n        :params fail_callback: function to apply with monad value.\n        :type fail_callback: Function(A)\n        :returns: self\n        :rtype: Try[A]\n        "
    var_0 = module_0.Validation(str_0, str_0)


def test_case_4():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    list_0 = [dict_0, bool_0]
    validation_0 = module_0.Validation(list_0, dict_0)
    var_0 = validation_0.is_success()
    var_0.to_lazy()


def test_case_5():
    str_0 = "1fk?b"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.is_fail()
    var_0.to_lazy()


def test_case_6():
    bytes_0 = b"\xab\x87\x8ad"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.map(bytes_0)


def test_case_7():
    none_type_0 = None
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0}
    validation_0 = module_0.Validation(dict_0, tuple_0)
    var_0 = validation_0.__eq__(none_type_0)
    var_1 = validation_0.to_lazy()
    var_2 = validation_0.__eq__(none_type_0)
    var_3 = validation_0.to_maybe()
    var_4 = var_1.to_try()
    validation_0.bind(none_type_0)


def test_case_8():
    bool_0 = True
    bool_1 = True
    set_0 = {bool_1, bool_1}
    bytes_0 = b"\x17\xda\x99\xce\x04"
    tuple_0 = (bool_1, set_0, bytes_0)
    validation_0 = module_0.Validation(tuple_0, bool_1)
    validation_0.ap(bool_0)


def test_case_9():
    none_type_0 = None
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0}
    validation_0 = module_0.Validation(dict_0, tuple_0)
    var_0 = validation_0.__eq__(none_type_0)
    var_1 = validation_0.to_lazy()
    var_2 = validation_0.__eq__(none_type_0)
    var_3 = var_1.to_try()
    var_4 = validation_0.to_box()
    var_5 = var_2.__eq__(var_2)


def test_case_10():
    none_type_0 = None
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0}
    validation_0 = module_0.Validation(dict_0, tuple_0)
    var_0 = validation_0.__eq__(none_type_0)
    var_1 = validation_0.to_maybe()
    var_2 = validation_0.to_try()
    var_3 = var_0.__str__()
    var_0.to_either()


def test_case_11():
    none_type_0 = None
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0}
    validation_0 = module_0.Validation(dict_0, tuple_0)
    var_0 = validation_0.__eq__(none_type_0)
    var_1 = var_0.__str__()
    var_2 = validation_0.to_maybe()
    var_3 = validation_0.to_lazy()
    var_4 = var_2.__eq__(var_3)
    var_5 = var_3.to_try()
    var_6 = var_3.to_box()
    var_7 = validation_0.__eq__(var_6)


def test_case_12():
    str_0 = "\n        Call success_callback function with monad value when monad is not successfully.\n\n        :params fail_callback: function to apply with monad value.\n        :type fail_callback: Function(A)\n        :returns: self\n        :rtype: Try[A]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_either()
    var_2 = var_1.to_box()
    var_3 = var_2.__str__()
    var_4 = validation_0.to_lazy()
    var_5 = var_1.to_maybe()
    var_5.is_fail()


def test_case_13():
    none_type_0 = None
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0}
    validation_0 = module_0.Validation(dict_0, tuple_0)
    var_0 = validation_0.__eq__(none_type_0)
    var_1 = validation_0.to_either()
    var_2 = var_1.to_box()
    var_3 = validation_0.__str__()
    var_3.to_lazy()


def test_case_14():
    str_0 = "\n        Call success_callback function with monad value when monad is not successfully.\n\n        :params fail_callback: function to apply with monad value.\n        :type fail_callback: Function(A)\n        :returns: self\n        :rtype: Try[A]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.__eq__(validation_0)
    var_2 = validation_0.to_maybe()
    var_3 = validation_0.is_success()
    var_3.to_try()


def test_case_15():
    str_0 = "\n        Call success_callback function with monad value when monad is not successfully.\n\n        :params fail_callback: function to apply with monad value.\n        :type fail_callback: Function(A)\n        :returns: self\n        :rtype: Try[A]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    str_1 = "^-]h}`a"
    validation_1 = module_0.Validation(validation_0, str_1)
    var_0 = validation_1.__eq__(validation_0)
    var_1 = var_0.__str__()
    var_2 = var_0.__eq__(str_0)
    var_0.to_try()
