# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0
import builtins as module_1


def test_case_0():
    bytes_0 = b"\x00\\\x98\xc6|%\xed\x14\xc1\xe6"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.__eq__(bytes_0)
    var_1.map(var_1)


def test_case_1():
    str_0 = "\n    Min is a Monoid that will combines 2 numbers, resulting in the smallest of the two.\n    "
    bool_0 = True
    bytes_0 = b"F\xd4\xdb\xde;Cd"
    validation_0 = module_0.Validation(bool_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.map(str_0)
    dict_0 = {}
    validation_1 = module_0.Validation(dict_0, dict_0)
    var_2 = validation_1.__str__()
    module_1.object(**var_2)


def test_case_2():
    bytes_0 = b"\xdb\x1c\x06+\x88\xee\xff\xa6\xf2[\xdc\x98"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.__eq__(validation_0)
    var_2 = validation_0.__str__()


def test_case_3():
    bytes_0 = b"\xdb\x1c\x06%+\x88\xee\r\xa6\xf2[\xdc\x98"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_either()


def test_case_4():
    str_0 = "}\tSx1{!? m};c7q"
    list_0 = [str_0, str_0]
    validation_0 = module_0.Validation(list_0, str_0)
    bytes_0 = b"\xa9\xd8\x99\x82\xdfur\xb1\xaeW\x1a\xb8\xd6\x85"
    var_0 = validation_0.to_maybe()
    validation_1 = module_0.Validation(bytes_0, bytes_0)


def test_case_5():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_6():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.is_success()


def test_case_7():
    bytes_0 = b"\xdb\x1c\x06+\x88\xee\xff\xa6\xf2[\xdc\x98"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = module_0.Validation(validation_0, bytes_0)
    var_1 = validation_0.__eq__(validation_0)
    var_2 = validation_0.__str__()
    var_3 = validation_0.is_fail()


def test_case_8():
    bytes_0 = b"\x00\\\x98\xc6|%\xed\x14\xc1'\xfb\xfd\xe6"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = module_0.Validation(bytes_0, var_0)
    var_2 = validation_0.__str__()
    var_1.map(var_2)


def test_case_9():
    none_type_0 = None
    object_0 = module_1.object()
    validation_0 = module_0.Validation(object_0, object_0)
    validation_0.bind(none_type_0)


def test_case_10():
    int_0 = -269
    set_0 = {int_0, int_0, int_0}
    int_1 = -1981
    list_0 = [int_1, int_1, int_1, int_1]
    none_type_0 = None
    validation_0 = module_0.Validation(list_0, none_type_0)
    validation_0.ap(set_0)


def test_case_11():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    bytes_0 = b"\xf9C\xf1\xc4\x96\x06\x8bH\xf2AM\x8c\xe1\xb4\xbc\xf5"
    validation_1 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_1.to_box()
    validation_2 = module_0.Validation(bytes_0, bytes_0)
    var_1 = validation_2.to_either()


def test_case_12():
    bytes_0 = b"\xdb\x1c\x06+\x88\xee\xff\xa6\xf2[\xdc\x98"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.__eq__(validation_0)


def test_case_13():
    bytes_0 = b"\xdb\x1c\x06+\x88\xee\xff\xa6\xf2[\xdc\x98"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.__eq__(validation_0)
    var_2 = validation_0.__str__()
    var_3 = validation_0.to_either()
    var_4 = var_0.to_try()


def test_case_14():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.to_try()


def test_case_15():
    bytes_0 = b"\xdb\x1c\x06%+\x88\xee\r\xa6\xf2[\xdc\x98"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)


def test_case_16():
    str_0 = "-C?: H'5n&YYmJQo|rs"
    dict_0 = {}
    validation_0 = module_0.Validation(str_0, dict_0)
    var_0 = validation_0.__eq__(dict_0)
    int_0 = -568
    validation_1 = module_0.Validation(int_0, var_0)
    var_1 = validation_0.to_either()
    var_2 = validation_0.to_maybe()
    var_3 = validation_1.to_box()
    str_0.to_either()


def test_case_17():
    bytes_0 = b"\xdb\x1c\x06+\x88\xee\xff\xa6\xf2[\xdc\x98"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.__eq__(validation_0)
    var_2 = validation_0.__str__()
    validation_1 = module_0.Validation(validation_0, var_2)
    var_3 = validation_1.to_either()
    var_4 = validation_1.__eq__(validation_0)
