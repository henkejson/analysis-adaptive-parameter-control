# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bytes_0 = b"l<\xaa\x11\xd3\xcdy\n\xbf\x13\xfc\xbb-"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)
    var_0.to_try()


def test_case_1():
    bytes_0 = b"\xcd \xbb\xe8\xb6\xb2K\x9bL\x97\xa0\xc4\x91\xa5\xce"
    bool_0 = False
    none_type_0 = None
    validation_0 = module_0.Validation(bool_0, none_type_0)
    validation_1 = module_0.Validation(validation_0, bytes_0)
    var_0 = validation_1.__eq__(bytes_0)


def test_case_2():
    bytes_0 = b"\xcd \xbb\xe8\xb6\x1d\x03$\xb2K\x9bLm\xa0\xc4\x91\xa5\xce^"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()


def test_case_3():
    none_type_0 = None
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_either()
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    var_1 = validation_1.to_box()
    var_1.map(validation_1)


def test_case_4():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_5():
    bytes_0 = b"\xcd \xbb\xe8\xb6\x1d\x03$\xb2K\x9bL\x97\xa0\xc4\x91\xa5\xce"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()


def test_case_6():
    float_0 = -819.6296465196749
    validation_0 = module_0.Validation(float_0, float_0)
    validation_0.is_fail()


def test_case_7():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.map(bool_0)


def test_case_8():
    str_0 = "BBaZ#eJ4:Gj\r~"
    validation_0 = module_0.Validation(str_0, str_0)
    validation_0.bind(str_0)


def test_case_9():
    bytes_0 = b"\xcd \xbb\xe8\xb6\xb2K\x9bL\x97\xa0\xc4\x91\xa5\xce"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    validation_0.ap(var_0)


def test_case_10():
    str_0 = "\n        Transform Box into Lazy with returning value function.\n\n        :returns: not folded Lazy monad with function returning previous value\n        :rtype: Lazy[Function(() -> A)]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_box()


def test_case_11():
    bytes_0 = b"\x81\xb7N\xfc\x0f\x8d\x0f4\xbam9\xb8"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_lazy()


def test_case_12():
    complex_0 = 221.52 + 53.908225j
    none_type_0 = None
    none_type_1 = None
    validation_0 = module_0.Validation(none_type_1, none_type_1)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_either()
    var_2 = var_1.__eq__(none_type_0)
    var_2.ap(complex_0)


def test_case_13():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_try()


def test_case_14():
    str_0 = "i_"
    set_0 = {str_0, str_0, str_0}
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_maybe()
    var_0.is_fail()


def test_case_15():
    bytes_0 = b"l<\xaa\x11\xd3\xcdy\n\xbf\x13\xfc\xbb-"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_1 = module_0.Validation(bytes_0, bytes_0)
    validation_2 = module_0.Validation(validation_0, validation_1)
    bool_0 = False
    var_0 = validation_0.__eq__(bool_0)
    var_1 = module_0.Validation(validation_2, var_0)
    var_2 = validation_1.__eq__(var_1)
    int_0 = 2695
    var_3 = validation_2.__eq__(int_0)
    var_4 = var_0.__eq__(var_2)
    var_3.ap(var_4)


def test_case_16():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.__str__()
    var_0.is_success()


def test_case_17():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.to_lazy()
