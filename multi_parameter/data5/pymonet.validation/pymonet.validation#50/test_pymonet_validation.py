# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0
import builtins as module_1


def test_case_0():
    bool_0 = False
    str_0 = "\n        :param semigroup: other semigroup to concat\n        :type semigroup: Max[B]\n        :returns: new Max with largest value\n        :rtype: Max[A | B]\n        "
    set_0 = {str_0}
    validation_0 = module_0.Validation(set_0, str_0)
    var_0 = validation_0.__eq__(bool_0)
    var_0.is_fail()


def test_case_1():
    bool_0 = True
    list_0 = [bool_0]
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.__str__()
    var_0.to_box()


def test_case_2():
    str_0 = "fi[O"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.to_either()
    var_2 = var_1.map(validation_0)
    module_1.object(*var_0)


def test_case_3():
    str_0 = "OJxJ'OFJS"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    var_0.is_success()


def test_case_4():
    str_0 = "b5,dEoUf\t%"
    validation_0 = module_0.Validation(str_0, str_0)


def test_case_5():
    bool_0 = True
    none_type_0 = None
    validation_0 = module_0.Validation(bool_0, none_type_0)
    validation_0.to_maybe()


def test_case_6():
    bool_0 = True
    bool_1 = False
    bytes_0 = b"\xa0<"
    int_0 = -4743
    tuple_0 = (bool_1, bytes_0, int_0)
    validation_0 = module_0.Validation(tuple_0, int_0)
    validation_1 = module_0.Validation(validation_0, tuple_0)
    var_0 = validation_1.is_fail()
    var_0.ap(bool_0)


def test_case_7():
    set_0 = set()
    str_0 = "fi[O"
    validation_0 = module_0.Validation(str_0, str_0)
    validation_0.map(set_0)


def test_case_8():
    str_0 = "YBlL}_b4Lzy\x0bGVBM"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_box()
    validation_0.bind(str_0)


def test_case_9():
    none_type_0 = None
    bytes_0 = b"=Y\xc6\xf0\xbb2E\x03\x93\xbca\x00`x\x19\xe5\x95\xa5\xb8"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_0.ap(none_type_0)


def test_case_10():
    int_0 = -1615
    validation_0 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.to_box()
    var_0.is_fail()


def test_case_11():
    str_0 = "\x0b'\x0cRp"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_try()
    validation_1 = module_0.Validation(str_0, str_0)
    var_1 = validation_1.__str__()
    var_2 = validation_1.__eq__(var_1)
    var_3 = validation_1.__str__()
    var_3.map(str_0)


def test_case_12():
    str_0 = "fi[O"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.to_either()
    var_2 = var_1.map(validation_0)
    var_3 = var_0.to_try()
    var_4 = var_2.map(var_0)
    list_0 = [var_0]
    module_1.object(*list_0)


def test_case_13():
    str_0 = "\x0b'\x0cRp"
    bytes_0 = b"\x9bSj\xfd"
    validation_0 = module_0.Validation(bytes_0, str_0)
    var_0 = validation_0.__eq__(validation_0)
    var_0.to_try()


def test_case_14():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_lazy()
    bool_0 = True
    var_2 = var_1.__str__()
    validation_1 = module_0.Validation(bool_0, bool_0)
    validation_1.to_try()


def test_case_15():
    none_type_0 = None
    dict_0 = {}
    validation_0 = module_0.Validation(none_type_0, dict_0)
    var_0 = validation_0.to_either()
    str_0 = "\x0b'\x0cRp"
    validation_1 = module_0.Validation(str_0, str_0)
    var_1 = var_0.to_lazy()
    var_2 = validation_1.__str__()
    var_3 = validation_1.__eq__(var_2)
    var_4 = validation_1.__str__()
    var_4.map(str_0)


def test_case_16():
    set_0 = set()
    str_0 = "fi[O"
    none_type_0 = None
    dict_0 = {}
    validation_0 = module_0.Validation(none_type_0, dict_0)
    var_0 = validation_0.to_maybe()
    validation_1 = module_0.Validation(str_0, str_0)
    validation_1.map(set_0)


def test_case_17():
    str_0 = "h0RAC`DOZ{wS\x0b`%&$#"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    validation_1 = module_0.Validation(var_0, var_0)
    var_1 = validation_1.__eq__(validation_0)
    validation_1.__str__()
