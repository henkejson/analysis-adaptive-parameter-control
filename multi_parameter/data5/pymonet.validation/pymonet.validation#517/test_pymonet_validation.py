# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0
import builtins as module_1


def test_case_0():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(none_type_0)
    object_0 = module_1.object()
    var_1 = validation_0.to_lazy()
    var_0.to_lazy()


def test_case_1():
    dict_0 = {}
    bytes_0 = b"tH\xcd\x13\xc8t\x82\x07"
    int_0 = 1
    set_0 = {bytes_0, int_0, int_0}
    validation_0 = module_0.Validation(dict_0, set_0)
    var_0 = validation_0.__str__()
    bool_0 = True
    dict_1 = {int_0: int_0, bytes_0: bool_0, bytes_0: bool_0}
    tuple_0 = (bytes_0, int_0, dict_1)
    none_type_0 = None
    validation_1 = module_0.Validation(tuple_0, none_type_0)
    validation_1.is_fail()


def test_case_2():
    bytes_0 = b"\x94\x89\xb7Y\x98la\x9e\xb9\xe2\xe6"
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_maybe()
    var_1.map(bytes_0)


def test_case_3():
    bytes_0 = b"\xe8{EjU\xfaL\x85%\x9dM]\xf4(\x05ge(\x1c["
    float_0 = 3945.322813
    dict_0 = {float_0: float_0, float_0: float_0}
    validation_0 = module_0.Validation(float_0, dict_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_either()
    var_2 = var_1.bind(bytes_0)
    var_3 = var_2.to_lazy()
    validation_1 = module_0.Validation(dict_0, dict_0)
    var_4 = validation_1.to_either()
    var_5 = var_4.to_lazy()
    var_6 = var_5.map(bytes_0)
    var_6.to_lazy()


def test_case_4():
    bool_0 = True
    bool_0.to_lazy()


def test_case_5():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_6():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.to_try()


def test_case_7():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.is_fail()


def test_case_8():
    none_type_0 = None
    none_type_1 = None
    validation_0 = module_0.Validation(none_type_1, none_type_1)
    validation_0.map(none_type_0)


def test_case_9():
    int_0 = 546
    validation_0 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.to_box()
    validation_1 = module_0.Validation(int_0, int_0)
    validation_1.bind(int_0)


def test_case_10():
    none_type_0 = None
    complex_0 = -1748.2 - 890.7j
    validation_0 = module_0.Validation(complex_0, complex_0)
    validation_0.ap(none_type_0)


def test_case_11():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    none_type_0 = None
    validation_0 = module_0.Validation(dict_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_0.is_fail()


def test_case_12():
    str_0 = "p+a6_"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_box()
    var_0.to_lazy()


def test_case_13():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_0.to_try()


def test_case_14():
    none_type_0 = None
    tuple_0 = ()
    bytes_0 = b"$g*\xe4\xf1"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    validation_0 = module_0.Validation(tuple_0, dict_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_box()
    validation_1 = module_0.Validation(validation_0, none_type_0)
    var_2 = validation_1.__eq__(validation_0)
    validation_1.map(bytes_0)


def test_case_15():
    complex_0 = -1610.13 + 1695.4261j
    tuple_0 = ()
    bytes_0 = b"$g*\xe4\xf1"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    validation_0 = module_0.Validation(dict_0, tuple_0)
    var_0 = validation_0.to_maybe()
    var_0.bind(complex_0)


def test_case_16():
    bytes_0 = b"\x94\x89\xb7Y\x98la\x9e\xb9\xe2\xe6"
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_either()
    var_2 = var_1.to_maybe()
    var_2.map(bytes_0)
