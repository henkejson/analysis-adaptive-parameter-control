# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    int_0 = -2031
    str_0 = "EzL>ukb.zHkOafyr\r1"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(int_0)
    tuple_0 = (str_0, int_0, str_0)
    validation_1 = module_0.Validation(var_0, tuple_0)
    var_1 = validation_1.is_success()
    var_1.to_lazy()


def test_case_1():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.__str__()
    var_2 = var_1.__eq__(var_1)
    var_0.to_either()


def test_case_2():
    none_type_0 = None
    bytes_0 = b"w\x83\x80n\xfdb\xef^\xba\x1a\x94s"
    set_0 = {none_type_0, none_type_0, bytes_0, bytes_0}
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.__str__()
    var_0.to_maybe()


def test_case_3():
    str_0 = 'S-"!'
    tuple_0 = (str_0,)
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    dict_0 = {}
    validation_1 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_either()
    var_1 = validation_1.to_lazy()
    var_2 = validation_0.to_lazy()
    var_2.to_lazy()


def test_case_4():
    str_0 = "\n        :param semigroup: other semigroup to concat\n        :type semigroup: First[B]\n        :returns: new First with first value\n        :rtype: First[A]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.__str__()


def test_case_5():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)


def test_case_6():
    bool_0 = False
    bool_1 = True
    set_0 = {bool_0, bool_1, bool_0, bool_0}
    dict_0 = {bool_1: bool_1, bool_0: set_0, bool_1: bool_0}
    tuple_0 = (bool_0, dict_0)
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.is_fail()


def test_case_7():
    bytes_0 = b""
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.map(bytes_0)


def test_case_8():
    tuple_0 = ()
    none_type_0 = None
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    validation_0.bind(none_type_0)


def test_case_9():
    none_type_0 = None
    str_0 = "rM(m,E'%q&7Ox"
    bytes_0 = b"\xc2\xfb\xe5w\x06\x0e\x1f\xea"
    validation_0 = module_0.Validation(str_0, bytes_0)
    validation_0.ap(none_type_0)


def test_case_10():
    bool_0 = True
    str_0 = "rVqGbT[VLXO`Ap'w"
    tuple_0 = (bool_0, str_0)
    bytes_0 = b"#GfX=\xd55\xf5A\xd9\xa6"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.__eq__(tuple_0)
    var_1.to_maybe()


def test_case_11():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    validation_0 = module_0.Validation(list_0, bool_0)
    var_0 = validation_0.to_lazy()
    var_0.to_lazy()


def test_case_12():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_try()
    var_1 = validation_0.__eq__(validation_0)
    var_2 = validation_0.__str__()
    var_0.is_fail()


def test_case_13():
    int_0 = 1
    none_type_0 = None
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_either()
    var_2 = var_1.__eq__(none_type_0)
    var_3 = var_2.__eq__(int_0)
    validation_1 = module_0.Validation(var_1, var_2)
    var_4 = validation_1.to_box()
    var_5 = var_1.to_box()
    var_5.is_success()


def test_case_14():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.__str__()
    var_1.is_fail()


def test_case_15():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.__eq__(validation_0)
    var_2 = validation_0.__str__()
    var_3 = module_0.Validation(validation_0, var_2)
    var_2.to_either()


def test_case_16():
    float_0 = -1035.0174
    set_0 = {float_0, float_0, float_0}
    validation_0 = module_0.Validation(set_0, float_0)
    str_0 = "-\\h\x0cbB"
    tuple_0 = ()
    validation_1 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.__eq__(validation_1)
    var_1 = validation_1.__eq__(validation_1)
    var_2 = validation_1.__str__()
    var_3 = str_0.__eq__(str_0)
    var_3.to_maybe()
