# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    int_0 = -747
    validation_0 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.__eq__(validation_0)
    var_2 = var_0.__eq__(var_0)
    var_3 = var_2.__str__()
    validation_0.is_fail()


def test_case_1():
    bool_0 = True
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(bool_0)
    validation_0.to_either()


def test_case_2():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.__str__()
    var_0.is_fail()


def test_case_3():
    bool_0 = True
    bool_1 = False
    bytes_0 = b"+\xc5\x86s\xc7\x98\xf1\x1d\x0f\xf2y5\x1eH\xccI7"
    tuple_0 = (bool_1, bytes_0)
    none_type_0 = None
    validation_0 = module_0.Validation(tuple_0, bool_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.__eq__(none_type_0)
    validation_1 = module_0.Validation(tuple_0, bytes_0)
    var_2 = validation_1.to_try()
    var_3 = validation_1.to_box()
    var_4 = var_2.map(bytes_0)
    var_5 = validation_1.__str__()
    validation_2 = module_0.Validation(bytes_0, tuple_0)
    var_6 = validation_2.to_maybe()
    var_7 = var_6.__eq__(var_5)
    var_8 = validation_1.__eq__(bool_0)
    var_9 = var_6.ap(bytes_0)
    var_10 = validation_1.to_either()
    var_11 = var_9.to_box()
    var_12 = var_9.to_lazy()
    var_13 = validation_1.to_either()
    var_14 = validation_2.to_either()
    var_14.to_either()


def test_case_4():
    bool_0 = True
    bytes_0 = b"+\xc5\x86s\xc7\x98\xf1\x1d\x0f\xf2y5\x1eH\xccI7"
    tuple_0 = (bool_0, bytes_0)
    validation_0 = module_0.Validation(bytes_0, tuple_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.ap(bytes_0)
    var_2 = var_1.to_box()
    var_3 = var_1.to_lazy()
    var_4 = validation_0.to_either()
    var_4.to_either()


def test_case_5():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)


def test_case_6():
    str_0 = "iWM@"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_try()


def test_case_7():
    none_type_0 = None
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.map(none_type_0)


def test_case_8():
    int_0 = -1238
    bytes_0 = b"\xab\x8f\x88\x80\xfc\x89\xc9\xad~\x8d.\x85M\xa1"
    none_type_0 = None
    validation_0 = module_0.Validation(bytes_0, none_type_0)
    validation_0.bind(int_0)


def test_case_9():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.ap(validation_0)


def test_case_10():
    none_type_0 = None
    str_0 = "iWM@"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.to_try()
    var_1.bind(none_type_0)


def test_case_11():
    bytes_0 = b"&\xacV\tR"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.to_either()
    var_2 = validation_0.to_lazy()
    var_3 = var_2.to_either()
    var_4 = var_2.to_maybe()
    var_5 = var_2.to_box()
    var_5.to_box()


def test_case_12():
    dict_0 = {}
    none_type_0 = None
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.__eq__(none_type_0)
    var_1 = validation_0.to_maybe()
    var_2 = validation_0.to_lazy()
    validation_1 = module_0.Validation(var_2, var_1)
    var_3 = validation_0.is_fail()
    var_4 = validation_0.to_box()
    validation_1.ap(none_type_0)


def test_case_13():
    int_0 = -747
    none_type_0 = None
    validation_0 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.__eq__(none_type_0)
    var_1 = validation_0.to_lazy()
    validation_1 = module_0.Validation(validation_0, var_0)
    var_2 = validation_0.__eq__(validation_1)
    var_3 = validation_1.__eq__(int_0)
    var_4 = var_3.__eq__(var_3)
    var_5 = var_4.__eq__(var_1)
    var_6 = var_3.__str__()
    validation_2 = module_0.Validation(var_4, none_type_0)
    validation_1.to_try()


def test_case_14():
    int_0 = -828
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_either()
    var_0.map(int_0)
