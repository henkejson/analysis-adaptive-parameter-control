# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    str_0 = 'PHJYHVrYM;G"fV8d'
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(validation_0)


def test_case_1():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_box()
    validation_1 = module_0.Validation(validation_0, bool_0)
    var_1 = module_0.Validation(validation_0, validation_1)
    var_2 = var_1.__eq__(validation_0)
    validation_0.is_success()


def test_case_2():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.is_fail()
    var_1 = validation_0.__str__()
    var_2 = validation_0.__str__()
    var_2.to_maybe()


def test_case_3():
    bytes_0 = b"d\xd9|\xdc\xcdl\xb2\xb067`\xe5bW\xd6"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    none_type_0 = None
    var_1 = var_0.__eq__(validation_0)
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    var_2 = validation_0.__eq__(var_1)
    none_type_1 = None
    validation_2 = module_0.Validation(none_type_1, validation_0)
    var_3 = validation_0.is_success()
    var_4 = validation_0.is_fail()
    validation_2.bind(var_3)


def test_case_4():
    bytes_0 = b"#\x8epj\x0c\x13-lA\xfbO\xdb\xc6\xde3\xa3"
    str_0 = "_y/+63q"
    dict_0 = {str_0: str_0}
    tuple_0 = (dict_0,)
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.bind(bytes_0)
    var_1.is_success()


def test_case_5():
    str_0 = 'PHJYHBlr_YM;G"fV8d'
    str_0.to_try()


def test_case_6():
    str_0 = 'PHJYHVrYM;G"fV8d'
    var_0 = module_0.Validation(str_0, str_0)


def test_case_7():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.to_maybe()


def test_case_8():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.is_fail()
    var_1 = var_0.__str__()
    var_1.to_either()


def test_case_9():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.__eq__(validation_0)
    var_2 = validation_0.to_lazy()
    validation_0.map(var_2)


def test_case_10():
    list_0 = []
    bytes_0 = b'"0/\x03'
    none_type_0 = None
    validation_0 = module_0.Validation(bytes_0, none_type_0)
    validation_0.bind(list_0)


def test_case_11():
    int_0 = -2959
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.ap(int_0)


def test_case_12():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.to_either()


def test_case_13():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.__eq__(validation_0)
    var_2 = validation_0.to_lazy()
    var_3 = var_2.to_maybe()


def test_case_14():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_0.to_try()


def test_case_15():
    tuple_0 = ()
    str_0 = "~{Cmq*!dLh2*P~CbF"
    dict_0 = {}
    tuple_1 = (tuple_0, str_0, dict_0)
    validation_0 = module_0.Validation(tuple_1, tuple_1)
    var_0 = validation_0.to_either()
    var_1 = var_0.ap(dict_0)
    var_2 = var_1.map(dict_0)
    var_3 = var_2.ap(str_0)
    var_4 = var_3.to_box()
    var_5 = var_4.__eq__(dict_0)
    var_6 = var_5.__eq__(tuple_1)
    var_6.bind(dict_0)


def test_case_16():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.is_success()
    var_1 = validation_0.to_maybe()
    var_2 = validation_0.to_try()
    var_2.is_fail()


def test_case_17():
    bytes_0 = b"\xab\x93\xca\xf4\xca\xbej\x88\x99"
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_either()
    var_0.map(bytes_0)
