# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bool_0 = True
    bytes_0 = b"\x87[N"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(bool_0)


def test_case_1():
    bytes_0 = b"\x7f,\x15\xf1\xad%e"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_try()
    var_1 = validation_0.to_either()
    var_2 = validation_0.to_maybe()


def test_case_2():
    bytes_0 = b"\x7f,\x15\xf1\xad%e"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()


def test_case_3():
    str_0 = "?("
    validation_0 = module_0.Validation(str_0, str_0)


def test_case_4():
    bytes_0 = b'Br\xa4\x7f#\x83 "y\xe7Z'
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    bool_0 = True
    var_1 = validation_0.to_either()
    var_2 = var_1.to_box()
    var_3 = var_2.__eq__(var_2)
    var_4 = var_2.__eq__(bytes_0)
    validation_1 = module_0.Validation(bool_0, var_2)
    var_5 = var_1.__eq__(bytes_0)
    validation_2 = module_0.Validation(bool_0, var_0)
    var_6 = var_0.to_try()
    var_7 = var_1.to_try()
    validation_2.is_fail()


def test_case_5():
    complex_0 = 6241.07533 + 1205j
    validation_0 = module_0.Validation(complex_0, complex_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.to_lazy()
    str_0 = "\n]NB+#5"
    tuple_0 = (str_0,)
    str_1 = "\n        Transform Maybe to Box.\n\n        :returns: Box monad with previous value when Maybe is not empty, in other case Box with None\n        :rtype: Box[A | None]\n        "
    list_0 = []
    validation_1 = module_0.Validation(str_1, list_0)
    validation_1.map(tuple_0)


def test_case_6():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.__str__()
    validation_0.bind(dict_0)


def test_case_7():
    complex_0 = 6241.07533 + 1205j
    validation_0 = module_0.Validation(complex_0, complex_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.to_lazy()
    var_2 = validation_0.__eq__(complex_0)
    validation_0.ap(var_1)


def test_case_8():
    str_0 = "Maybu[NoUeG"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_try()
    var_2 = var_1.__str__()
    list_0 = [validation_0, str_0, var_1, str_0]
    validation_1 = module_0.Validation(var_2, list_0)
    var_3 = validation_1.to_maybe()
    var_4 = validation_0.to_box()


def test_case_9():
    int_0 = -5031
    none_type_0 = None
    validation_0 = module_0.Validation(int_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_0.is_success()


def test_case_10():
    bytes_0 = b"\xae\x05\xf0"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    bytes_1 = b"\x7f,\x15\xf1\xad%e"
    validation_0 = module_0.Validation(bytes_1, bytes_1)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.bind(list_0)
    var_2 = var_1.to_try()
    var_2.is_success()


def test_case_11():
    bytes_0 = b'Br\xa4\x7f#\x83 "y\xe7Z'
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__eq__(bytes_0)
    validation_1 = module_0.Validation(var_0, bytes_0)
    var_1 = validation_1.to_either()
    var_2 = var_1.to_box()
    none_type_0 = None
    none_type_1 = None
    var_3 = var_2.__eq__(none_type_1)
    validation_2 = module_0.Validation(var_3, validation_1)
    var_4 = var_3.__eq__(var_3)
    validation_3 = module_0.Validation(none_type_0, var_3)
    var_5 = validation_2.__eq__(validation_2)
    var_0.is_success()


def test_case_12():
    bytes_0 = b'Br\xa4\x7f#\x83 "y\xe7Z'
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_either()
    var_2 = var_1.to_box()
    var_3 = validation_0.__eq__(var_1)
    var_4 = var_2.__eq__(var_1)
    validation_1 = module_0.Validation(var_4, var_0)
    var_5 = var_4.__eq__(var_4)
    var_6 = validation_1.to_try()
    var_6.to_try()


def test_case_13():
    bytes_0 = b'Br\xa4\x7f#\x83 "y\xe7Z'
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, bytes_0)
    var_1 = validation_0.__eq__(validation_0)
    var_2 = validation_0.__str__()
    validation_2 = module_0.Validation(none_type_0, validation_0)
    var_3 = validation_1.to_either()
    var_4 = validation_0.to_box()
    var_5 = validation_2.to_box()
    var_6 = validation_0.__eq__(validation_2)
    var_7 = validation_0.__eq__(var_5)
    validation_3 = module_0.Validation(var_2, validation_2)
    validation_3.to_either()


def test_case_14():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    bytes_0 = b"\x05f\x00\xe6\x9d\t*\x93\xc5\x04\t."
    var_0 = validation_0.to_maybe()
    validation_1 = module_0.Validation(bytes_0, bytes_0)
    var_1 = validation_1.to_maybe()
    var_2 = validation_1.is_fail()
    var_2.to_maybe()


def test_case_15():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_lazy()
