# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0
import builtins as module_1


def test_case_0():
    complex_0 = -1930 + 181.72j
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, complex_0)
    var_0 = validation_0.__eq__(complex_0)
    validation_0.ap(validation_0)


def test_case_1():
    none_type_0 = None
    none_type_0.to_maybe()


def test_case_2():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_3():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.to_maybe()


def test_case_4():
    complex_0 = -1930 + 181.72j
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, complex_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.to_lazy()
    validation_0.is_fail()


def test_case_5():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.map(validation_0)


def test_case_6():
    str_0 = "3w-tQ:Cn\nkeL"
    validation_0 = module_0.Validation(str_0, str_0)
    validation_0.bind(str_0)


def test_case_7():
    bool_0 = False
    none_type_0 = None
    validation_0 = module_0.Validation(bool_0, none_type_0)
    validation_0.ap(bool_0)


def test_case_8():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_box()


def test_case_9():
    tuple_0 = ()
    dict_0 = {}
    none_type_0 = None
    validation_0 = module_0.Validation(dict_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_box()
    var_1.map(tuple_0)


def test_case_10():
    str_0 = "\n        Returns Lazy with function returning argument.\n\n        :param value: value to return by Lazy constructor_fn\n        :type value: Any\n        :returns: Lazy with function returning argument\n        :rtype: Lazy[Function() -> A]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_try()
    var_0.to_box()


def test_case_11():
    complex_0 = -1930 + 181.72j
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, complex_0)
    var_0 = validation_0.__eq__(validation_0)
    var_0.ap(validation_0)


def test_case_12():
    object_0 = module_1.object()
    float_0 = -711.691
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.__str__()
    var_2 = var_0.to_lazy()
    var_3 = var_2.bind(object_0)


def test_case_13():
    list_0 = []
    var_0 = list_0.__eq__(list_0)
    validation_0 = module_0.Validation(list_0, list_0)
    var_1 = validation_0.to_maybe()
    var_2 = validation_0.is_success()
    var_3 = validation_0.__eq__(var_0)
    validation_1 = module_0.Validation(list_0, var_2)
    var_4 = var_2.__eq__(var_3)
    var_2.ap(var_3)


def test_case_14():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_maybe()
    var_0.is_fail()


def test_case_15():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_either()
    var_0.is_fail()


def test_case_16():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.__str__()
    var_0.to_lazy()


def test_case_17():
    complex_0 = -1930 + 181.72j
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, complex_0)
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(validation_1)
    var_1 = validation_0.__eq__(validation_0)
    var_2 = validation_0.to_lazy()
    validation_2 = module_0.Validation(validation_0, complex_0)
    validation_0.is_success()


def test_case_18():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    tuple_0 = (list_0,)
    none_type_0 = None
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.__str__()
    var_1.ap(none_type_0)
