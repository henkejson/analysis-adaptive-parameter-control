# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0
import builtins as module_1


def test_case_0():
    str_0 = "\n        Transform Box into not empty Maybe.\n\n        :returns: non empty Maybe monad with previous value\n        :rtype: Maybe[A]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(str_0)
    var_1 = validation_0.__eq__(validation_0)
    var_2 = validation_0.to_try()


def test_case_1():
    tuple_0 = ()
    complex_0 = 1459.10473 - 303.39j
    validation_0 = module_0.Validation(complex_0, tuple_0)
    var_0 = validation_0.__str__()
    var_0.to_either()


def test_case_2():
    str_0 = "\n 5      TraQsform Box into not empty Maybe.\n\n:       :returns: non empty Maybe monad with previous value\n        :rtye: Maybe[]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    validation_1 = module_0.Validation(validation_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.__eq__(validation_0)
    var_2 = validation_0.__str__()
    validation_2 = module_0.Validation(validation_0, var_1)


def test_case_3():
    str_0 = "\n    One is a Monoid that will combine 2 values of any type using logical disjunction OR on their coerced Boolean values.\n    "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()


def test_case_4():
    str_0 = "Try[value={}, is_success={}]"
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_box()
    var_1.ap(str_0)


def test_case_5():
    str_0 = "\n    Maybe type is the most common way of representing nothingness (or the null type).\n    Maybe is effectively abstract and has two concrete subtypes: Box (also Some) and Nothing.\n    "
    tuple_0 = (str_0,)
    validation_0 = module_0.Validation(tuple_0, str_0)
    var_0 = validation_0.to_maybe()
    validation_0.map(tuple_0)


def test_case_6():
    bytes_0 = b"\xef"
    validation_0 = module_0.Validation(bytes_0, bytes_0)


def test_case_7():
    str_0 = "\n        Transform Box into not empty Maybe.\n\n        :returns: non empty Maybe monad with previous value\n        :rtype: Maybe[A]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(str_0)
    var_1 = validation_0.__eq__(validation_0)
    var_2 = validation_0.to_try()
    validation_1 = module_0.Validation(validation_0, var_2)
    validation_1.is_fail()


def test_case_8():
    none_type_0 = None
    bytes_0 = b"\xef"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_0.bind(none_type_0)


def test_case_9():
    complex_0 = 1802.803494 + 1224.74437j
    str_0 = "*c7'sW?j-6.Yn0~%CQ3G"
    set_0 = {str_0, str_0}
    list_0 = [set_0]
    validation_0 = module_0.Validation(list_0, str_0)
    validation_0.ap(complex_0)


def test_case_10():
    str_0 = "\n        :param semigroup: other semigroup to concat\n        :type semigroup: Max[B]\n        :returns: new Max with largest value\n        :rtype: Max[A | B]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_box()
    var_2 = validation_0.to_maybe()
    var_2.is_fail()


def test_case_11():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_0.is_success()


def test_case_12():
    object_0 = module_1.object()
    validation_0 = module_0.Validation(object_0, object_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_either()
    var_1.to_either()


def test_case_13():
    str_0 = "\n        Transform Box into not empty Maybe.\n\n        :returns: non empty Maybe monad with previous value\n        :rtype: Maybe[A]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(validation_0)
    var_0.to_try()


def test_case_14():
    str_0 = ""
    str_1 = ""
    validation_0 = module_0.Validation(str_0, str_1)
    var_0 = validation_0.to_either()
    var_1 = validation_0.__eq__(validation_0)
    var_2 = validation_0.to_try()
    var_3 = validation_0.is_success()
    validation_1 = module_0.Validation(validation_0, var_2)
    validation_1.is_fail()


def test_case_15():
    str_0 = "\n        Transform Box into not empty Maybe.\n\n        :returns: non empty Maybe monad with previous value\n        :rtype: Maybe[A]\n        "
    list_0 = []
    validation_0 = module_0.Validation(str_0, list_0)
    none_type_0 = None
    validation_1 = module_0.Validation(str_0, none_type_0)
    var_0 = validation_0.to_either()
    var_1 = validation_1.__eq__(validation_0)
    var_2 = var_1.__str__()
    validation_2 = module_0.Validation(var_2, str_0)
