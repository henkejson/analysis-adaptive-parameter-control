# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    none_type_0 = None
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    validation_0 = module_0.Validation(none_type_0, tuple_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = var_0.__eq__(none_type_0)
    var_1.to_either()


def test_case_1():
    bool_0 = True
    tuple_0 = ()
    set_0 = {tuple_0}
    list_0 = [set_0, set_0]
    none_type_0 = None
    validation_0 = module_0.Validation(list_0, none_type_0)
    var_0 = validation_0.__eq__(bool_0)
    var_0.to_either()


def test_case_2():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_lazy()
    var_1.is_fail()


def test_case_3():
    bytes_0 = b"\x92\x1eU\xd3{?58_\x9f\xbe"
    bytes_1 = b"\x15!\x11I\x95Jx\x9fJ"
    list_0 = [bytes_1, bytes_1]
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.__eq__(bytes_0)
    var_1.to_try()


def test_case_4():
    bytes_0 = b"\x92\x1eU\xd3{?58_\x9f\xbe"
    bytes_1 = b"\x15!\x11I\x95Jx\x9fJ"
    list_0 = [bytes_1, bytes_1]
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.__eq__(bytes_0)
    var_2 = module_0.Validation(var_1, bytes_1)
    var_3 = var_2.to_maybe()
    var_3.is_fail()


def test_case_5():
    str_0 = "X: 7O}{dtp;(jX}Hc"
    validation_0 = module_0.Validation(str_0, str_0)


def test_case_6():
    str_0 = "7yH=["
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.is_fail()
    var_0.to_try()


def test_case_7():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    validation_0.map(dict_0)


def test_case_8():
    str_0 = "\n        Transform Validation to Maybe.\n\n        :returns: Maybe with Validation Value when Validation has no errors, in other case empty Maybe\n        :rtype: Maybe[A | None]\n        "
    float_0 = -3197.0
    none_type_0 = None
    validation_0 = module_0.Validation(float_0, none_type_0)
    validation_0.bind(str_0)


def test_case_9():
    bool_0 = True
    str_0 = "H\tG$+oc"
    dict_0 = {str_0: str_0}
    validation_0 = module_0.Validation(dict_0, str_0)
    validation_0.ap(bool_0)


def test_case_10():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    tuple_0 = (bool_0,)
    var_0 = validation_0.to_box()
    validation_0.bind(tuple_0)


def test_case_11():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    none_type_0 = None
    validation_0 = module_0.Validation(set_0, none_type_0)
    var_0 = validation_0.to_lazy()
    int_0 = 1337
    validation_1 = module_0.Validation(int_0, int_0)
    validation_1.to_maybe()


def test_case_12():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_try()
    var_1.is_success()


def test_case_13():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.to_try()


def test_case_14():
    none_type_0 = None
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    validation_0 = module_0.Validation(none_type_0, tuple_0)
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_1.__eq__(validation_0)
    var_1 = var_0.__eq__(none_type_0)
    var_1.to_either()


def test_case_15():
    tuple_0 = ()
    set_0 = {tuple_0}
    list_0 = [set_0, set_0]
    validation_0 = module_0.Validation(list_0, tuple_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_lazy()
    var_2 = var_1.__eq__(tuple_0)
    var_2.to_try()


def test_case_16():
    bytes_0 = b"\x15!\x11I\x95Jx\x9fJ"
    list_0 = [bytes_0, bytes_0]
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_lazy()
    list_1 = []
    var_2 = var_1.ap(list_1)
    var_3 = var_2.to_try()
    var_4 = var_1.__eq__(bytes_0)
    var_4.is_success()


def test_case_17():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.__str__()
    var_0.is_success()
