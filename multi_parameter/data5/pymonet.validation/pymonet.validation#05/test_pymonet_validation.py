# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    none_type_0 = None
    bytes_0 = b"\xe6\t<:\xc4\xc4\x82*!}\xf2\xab\xda"
    none_type_1 = None
    validation_0 = module_0.Validation(bytes_0, none_type_0)
    validation_1 = module_0.Validation(none_type_0, validation_0)
    var_0 = validation_1.__eq__(validation_0)
    var_0.ap(none_type_1)


def test_case_1():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    str_0 = "\n        :param semigroup: other semigroup to concat\n        :type semigroup: One[B]\n        :returns: new One with first truly value or last falsy\n        :rtype: One[A | B]\n        "
    validation_1 = module_0.Validation(str_0, str_0)
    var_0 = validation_1.__str__()
    var_1 = validation_1.to_maybe()
    var_2 = validation_1.__eq__(str_0)
    validation_2 = module_0.Validation(str_0, str_0)
    var_3 = validation_2.to_box()
    validation_3 = module_0.Validation(var_3, var_2)
    var_3.is_success()


def test_case_2():
    bytes_0 = b"QCvK`g\xf8\x19\xcc{C8=\xa1\xe3s|D\x9f"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    var_0.bind(bytes_0)


def test_case_3():
    str_0 = "y9"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    validation_1 = validation_0.to_try()
    var_1 = validation_0.to_maybe()
    var_2 = var_0.bind(var_0)
    validation_0.bind(validation_0)


def test_case_4():
    none_type_0 = None
    bytes_0 = b"\xf1\xd5\x15z\xe5\xc7m\xbe\xec\xf38\xb5\x88\xfb\xf3AQk\x9f\xac"
    list_0 = [none_type_0, bytes_0]
    list_1 = []
    validation_0 = module_0.Validation(list_0, list_1)
    var_0 = validation_0.to_maybe()
    var_0.is_success()


def test_case_5():
    str_0 = "y9"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    tuple_0 = ()
    validation_1 = module_0.Validation(tuple_0, tuple_0)
    validation_0.bind(validation_0)


def test_case_6():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)


def test_case_7():
    bytes_0 = b"\xc8\x08\x17\x9e"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.is_success()
    var_0.to_try()


def test_case_8():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.is_fail()


def test_case_9():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.map(none_type_0)


def test_case_10():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.ap(none_type_0)


def test_case_11():
    none_type_0 = None
    float_0 = 2063.76809
    validation_0 = module_0.Validation(float_0, float_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.bind(none_type_0)
    var_1.to_lazy()


def test_case_12():
    bool_0 = False
    set_0 = {bool_0}
    bool_1 = True
    validation_0 = module_0.Validation(set_0, bool_1)
    validation_0.to_try()


def test_case_13():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(validation_0)
    var_0.bind(bool_0)


def test_case_14():
    str_0 = "\n        :param semigroup: other semigroup to concat\n        :type semigroup: One[B]\n        :returns: new One with first truly value or last falsy\n        :rtype: One[A | B]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_maybe()
    var_2 = validation_0.__eq__(str_0)
    validation_1 = module_0.Validation(str_0, str_0)
    none_type_0 = None
    validation_2 = module_0.Validation(var_1, none_type_0)
    var_3 = validation_0.to_lazy()
    var_4 = var_3.ap(var_3)
    var_5 = var_3.to_maybe()
    validation_2.to_maybe()


def test_case_15():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    validation_1 = validation_0.__str__()
    var_0 = validation_1.__str__()
    validation_1.to_maybe()


def test_case_16():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_either()
