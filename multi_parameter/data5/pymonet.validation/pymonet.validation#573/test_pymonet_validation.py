# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bytes_0 = b"\xc6sk\xfe"
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(bytes_0)


def test_case_1():
    bytes_0 = b"\x19\xd0"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_lazy()
    var_2 = var_1.bind(var_1)
    validation_1 = module_0.Validation(var_0, validation_0)
    var_0.is_success()


def test_case_2():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0}
    validation_0 = module_0.Validation(tuple_0, dict_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.__str__()
    var_1.to_box()


def test_case_3():
    str_0 = "CsT 2GTy4\rb?qQUC;D"
    validation_0 = module_0.Validation(str_0, str_0)


def test_case_4():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.to_try()


def test_case_5():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0}
    set_0 = {tuple_0, tuple_0, tuple_0}
    tuple_1 = (dict_0, set_0, set_0)
    validation_0 = module_0.Validation(tuple_1, dict_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.__str__()
    var_2 = validation_0.to_try()
    var_3 = validation_0.is_fail()


def test_case_6():
    bool_0 = True
    bytes_0 = b"`\xc0\\"
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.map(bytes_0)


def test_case_7():
    int_0 = -33
    set_0 = {int_0}
    validation_0 = module_0.Validation(set_0, int_0)
    validation_0.bind(int_0)


def test_case_8():
    none_type_0 = None
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    validation_0.ap(none_type_0)


def test_case_9():
    int_0 = 1
    set_0 = {int_0}
    validation_0 = module_0.Validation(set_0, int_0)
    var_0 = validation_0.to_box()
    var_0.is_success()


def test_case_10():
    str_0 = '_z"L'
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, str_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.to_lazy()
    var_2 = validation_0.to_maybe()
    var_3 = var_2.to_try()
    var_4 = var_1.to_try()
    var_3.to_try()


def test_case_11():
    str_0 = "CsT 2GTy4\rb?qQUC;D"
    none_type_0 = None
    validation_0 = module_0.Validation(str_0, none_type_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_0.map(validation_0)


def test_case_12():
    str_0 = "CsT 2GTy4\rb?qQUC;D"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, str_0)
    var_0 = validation_0.to_either()
    bytes_0 = b"\xea"
    none_type_0.map(bytes_0)


def test_case_13():
    float_0 = -520.66
    str_0 = "'Xu'i+jyb\\~i_kw,["
    validation_0 = module_0.Validation(float_0, str_0)
    var_0 = validation_0.__str__()
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, validation_0)
    var_1 = validation_1.__eq__(validation_0)
    var_2 = validation_1.to_lazy()
    var_3 = validation_0.to_lazy()
    var_4 = var_3.__str__()
    var_4.map(var_2)


def test_case_14():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_maybe()
    str_0 = "CsT 2GTy4\rb?qQUC;D"
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, str_0)
    var_1 = validation_1.to_maybe()
    var_2 = validation_1.to_either()
    var_3 = validation_1.__eq__(validation_1)
    var_4 = validation_1.__str__()
    var_5 = var_1.map(var_2)
    var_6 = validation_1.to_try()
    var_7 = validation_1.to_try()
    var_6.ap(none_type_0)


def test_case_15():
    none_type_0 = None
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_either()
    var_0.map(none_type_0)


def test_case_16():
    bytes_0 = b"\xb6\x95\x9d"
    bytes_1 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_1)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_lazy()
    var_2 = var_1.map(var_0)
    var_0.to_maybe()
