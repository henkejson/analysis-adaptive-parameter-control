# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0
import builtins as module_1


def test_case_0():
    bytes_0 = b"\xe4O\xe3\x05\xcaw\xbb\xd3\xb1\x1d_ `"
    str_0 = "\tn@"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(bytes_0)
    var_0.is_fail()


def test_case_1():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    validation_0 = module_0.Validation(none_type_0, list_0)
    var_0 = validation_0.__str__()
    var_0.is_fail()


def test_case_2():
    str_0 = "\tn@"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.to_either()


def test_case_3():
    bytes_0 = b"G\xf8x"
    validation_0 = module_0.Validation(bytes_0, bytes_0)


def test_case_4():
    str_0 = "\tn@"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.to_either()
    var_2 = validation_0.is_fail()
    var_3 = validation_0.is_fail()


def test_case_5():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    none_type_0 = None
    validation_0.map(none_type_0)


def test_case_6():
    bytes_0 = b"\xfcO\xbc\x9a\xdd"
    complex_0 = 2546.866 - 302j
    int_0 = 3554
    dict_0 = {complex_0: complex_0, complex_0: complex_0, complex_0: int_0}
    validation_0 = module_0.Validation(int_0, complex_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.to_try()
    validation_1 = module_0.Validation(dict_0, int_0)
    validation_1.bind(bytes_0)


def test_case_7():
    dict_0 = {}
    bytes_0 = b"\xdc@I"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_0.ap(dict_0)


def test_case_8():
    bytes_0 = b"\xe4O\xe3\x05\xcaw\xbb\xd3\xb1\x1d_ `"
    str_0 = "\tn@"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(bytes_0)
    var_1 = validation_0.to_maybe()
    var_2 = validation_0.to_either()
    validation_1 = module_0.Validation(var_0, var_2)
    var_3 = validation_1.to_lazy()
    var_3.is_fail()


def test_case_9():
    float_0 = -3567.0
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.bind(float_0)
    var_1.to_box()


def test_case_10():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.to_try()


def test_case_11():
    str_0 = "\tn@"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(validation_0)
    var_0.to_box()


def test_case_12():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.__str__()
    var_0.is_fail()


def test_case_13():
    none_type_0 = None
    str_0 = "\tn@"
    validation_0 = module_0.Validation(str_0, str_0)
    str_1 = "\tn@"
    validation_1 = module_0.Validation(str_1, none_type_0)
    var_0 = validation_0.is_success()
    var_1 = validation_0.__eq__(validation_1)
    validation_1.is_fail()


def test_case_14():
    object_0 = module_1.object()
    bool_0 = True
    tuple_0 = ()
    validation_0 = module_0.Validation(bool_0, tuple_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_lazy()
    var_2 = var_1.to_box()
    var_3 = var_2.__str__()
    var_4 = var_3.__str__()
    var_4.bind(object_0)


def test_case_15():
    bytes_0 = b"\xe4O\xe3\x05\xcaw\xbb\xd3\xb1\x1d_ `"
    str_0 = ""
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(bytes_0)
    var_1 = validation_0.to_maybe()
    var_2 = validation_0.to_either()
    var_3 = validation_0.is_fail()
    validation_1 = module_0.Validation(var_1, bytes_0)
    var_4 = validation_0.to_lazy()
    var_2.is_fail()
