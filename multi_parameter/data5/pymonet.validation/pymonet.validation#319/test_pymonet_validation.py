# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bytes_0 = b""
    bool_0 = True
    dict_0 = {bytes_0: bool_0, bool_0: bool_0, bytes_0: bytes_0, bool_0: bool_0}
    validation_0 = module_0.Validation(bool_0, dict_0)
    var_0 = validation_0.__eq__(bytes_0)
    bool_0.to_maybe()


def test_case_1():
    bytes_0 = b"\xd5\x0b(\x86W\xc9n&`\x118/,xl3\x94\xde"
    float_0 = 525.6053472697027
    set_0 = {float_0, float_0, bytes_0, float_0}
    validation_0 = module_0.Validation(float_0, set_0)
    var_0 = validation_0.__str__()
    bool_0 = False
    validation_0.ap(bool_0)


def test_case_2():
    bool_0 = False
    bytes_0 = b"\x0f\xcc.\x8b\xb7s/\x8f\xe8+@\x17=\x95\xb75\xc6"
    validation_0 = module_0.Validation(bool_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.to_either()
    var_2 = validation_0.__eq__(var_1)
    validation_1 = module_0.Validation(var_2, var_1)


def test_case_3():
    str_0 = "P%\rL="
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_lazy()
    var_1.to_lazy()


def test_case_4():
    complex_0 = 4765.4816 - 748.76j
    validation_0 = module_0.Validation(complex_0, complex_0)


def test_case_5():
    bytes_0 = b"\x9fi\xa7\x8a\x9a\xe8\x16\x95\xd5\xf9\xabD~\xc8gZ\xeck"
    bool_0 = False
    set_0 = {bytes_0, bytes_0, bool_0, bytes_0}
    bytes_1 = b"\x0f\xcc.\x8b\xb7s/\x8f\xe8+@\x17=\x95\xb75\xc6"
    validation_0 = module_0.Validation(set_0, bytes_1)
    var_0 = validation_0.to_maybe()
    var_1 = validation_0.__str__()
    var_2 = validation_0.to_either()
    var_3 = validation_0.__eq__(bytes_0)
    validation_1 = module_0.Validation(var_3, var_1)
    var_4 = validation_1.is_fail()


def test_case_6():
    float_0 = 2951.48105
    validation_0 = module_0.Validation(float_0, float_0)
    validation_0.map(float_0)


def test_case_7():
    bytes_0 = b"\x1c\xf8~\x07\x17:\xfa\xc7\xb2oyC\xe5"
    none_type_0 = None
    validation_0 = module_0.Validation(bytes_0, none_type_0)
    bool_0 = True
    validation_0.bind(bool_0)


def test_case_8():
    str_0 = "P%\rL="
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    validation_0.ap(str_0)


def test_case_9():
    float_0 = 526.0
    set_0 = {float_0, float_0, float_0}
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_box()
    var_2 = var_1.__str__()
    var_3 = validation_0.is_success()
    var_2.to_lazy()


def test_case_10():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_0.is_success()


def test_case_11():
    int_0 = -460
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0}
    dict_1 = {tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: dict_0}
    validation_0 = module_0.Validation(dict_1, dict_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.bind(int_0)
    var_1.to_maybe()


def test_case_12():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.to_try()


def test_case_13():
    bytes_0 = b"\xd5\x0b(\x86W\xc9n&`\x118/,xl3\x94\xde"
    float_0 = 526.0
    set_0 = {float_0, float_0, float_0}
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.is_fail()
    validation_1 = module_0.Validation(bytes_0, var_0)
    var_1 = validation_0.__eq__(validation_1)
    var_2 = var_0.__str__()
    var_0.is_success()


def test_case_14():
    bytes_0 = b"\xd5\x0b(\x86W\xc9n&`\x118/,xl3\x94\xde"
    float_0 = 526.0
    set_0 = {float_0, float_0, float_0}
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.is_fail()
    validation_1 = module_0.Validation(bytes_0, var_0)
    var_1 = validation_1.__eq__(validation_1)
    validation_0.map(float_0)


def test_case_15():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.__str__()
    var_1.to_box()


def test_case_16():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_try()
    var_2 = validation_0.to_maybe()
    var_3 = validation_0.is_fail()
    var_3.is_fail()
