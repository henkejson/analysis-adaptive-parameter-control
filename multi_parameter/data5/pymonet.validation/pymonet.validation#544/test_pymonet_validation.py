# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    none_type_0 = None
    bytes_0 = b"\x9b+c\x88"
    bool_0 = True
    str_0 = "ab2"
    validation_0 = module_0.Validation(none_type_0, bool_0)
    validation_1 = module_0.Validation(str_0, bytes_0)
    var_0 = validation_1.__eq__(validation_0)
    validation_0.map(var_0)


def test_case_1():
    str_0 = "[J\x0b:0)"
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.__eq__(str_0)
    var_0.to_maybe()


def test_case_2():
    dict_0 = {}
    float_0 = -461.0793
    validation_0 = module_0.Validation(float_0, dict_0)
    var_0 = validation_0.__str__()
    var_0.to_lazy()


def test_case_3():
    str_0 = "gXyy7L[hk$f"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, str_0)
    var_0 = validation_0.__str__()
    var_1 = var_0.__eq__(str_0)


def test_case_4():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_box()
    var_1.is_success()


def test_case_5():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    validation_0 = module_0.Validation(bool_0, tuple_0)
    var_0 = validation_0.to_either()
    var_0.to_either()


def test_case_6():
    int_0 = 0
    validation_0 = module_0.Validation(int_0, int_0)


def test_case_7():
    int_0 = -1001
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.__str__()


def test_case_8():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.is_fail()


def test_case_9():
    bool_0 = True
    none_type_0 = None
    bytes_0 = b"o\xab\x14_\x92\xf1x\xef\xfa\xcb\xc7~?Q\x0c\xb2s\n"
    validation_0 = module_0.Validation(bool_0, bytes_0)
    var_0 = validation_0.__eq__(none_type_0)
    validation_0.map(bool_0)


def test_case_10():
    int_0 = -1115
    bytes_0 = b"\xc7 b\xca\xe7\xbb\x17Z\x1aa\n#\x8d"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_0.bind(int_0)


def test_case_11():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.ap(none_type_0)


def test_case_12():
    bool_0 = False
    set_0 = {bool_0}
    validation_0 = module_0.Validation(bool_0, set_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.to_try()
    var_2 = var_0.to_try()
    validation_1 = module_0.Validation(set_0, bool_0)
    validation_2 = module_0.Validation(set_0, set_0)
    var_3 = var_1.__str__()
    var_4 = validation_2.__eq__(set_0)
    var_2.to_try()


def test_case_13():
    str_0 = "\n    Function for return function depended on first function argument\n    cond get list of two-item tuples,\n    first is condition_function, second is execute_function.\n    Returns this execute_function witch first condition_function return truly value.\n\n    :param condition_list: list of two-item tuples (condition_function, execute_function)\n    :type condition_list: List[(Function, Function)]\n    :returns: Returns this execute_function witch first condition_function return truly value\n    :rtype: Function\n    "
    set_0 = {str_0}
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, str_0)
    validation_1 = module_0.Validation(set_0, str_0)
    var_0 = validation_1.to_lazy()
    var_0.is_fail()


def test_case_14():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    int_0 = 429
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.is_success()
    validation_0.map(int_0)


def test_case_15():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_maybe()


def test_case_16():
    none_type_0 = None
    bool_0 = True
    set_0 = {bool_0}
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.bind(none_type_0)
    var_2 = var_1.map(validation_0)
    var_3 = var_2.to_either()
    bool_1 = False
    validation_1 = module_0.Validation(bool_1, bool_1)
    validation_1.to_maybe()


def test_case_17():
    bool_0 = False
    set_0 = {bool_0}
    validation_0 = module_0.Validation(bool_0, set_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_box()
    validation_1 = module_0.Validation(bool_0, var_1)
    var_2 = validation_0.__eq__(validation_1)
    var_2.to_maybe()
