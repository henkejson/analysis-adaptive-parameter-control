# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    int_0 = -2679
    none_type_0 = None
    validation_0 = module_0.Validation(int_0, none_type_0)
    var_0 = validation_0.__eq__(none_type_0)
    validation_0.to_either()


def test_case_1():
    str_0 = "\n        If Maybe is empty return default_value, in other case.\n\n        :param default_value: value to return if Maybe is empty\n        :type default_value: Any\n        :returns: value of Maybe or default_value\n        :rtype: A\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()


def test_case_2():
    str_0 = "7*WMAn.4+<bHtR>/hT;"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()


def test_case_3():
    str_0 = "yj5&[HR;<2]"
    list_0 = [str_0, str_0, str_0, str_0]
    validation_0 = module_0.Validation(list_0, list_0)
    tuple_0 = ()
    var_0 = validation_0.to_lazy()
    validation_1 = module_0.Validation(tuple_0, tuple_0)
    var_1 = validation_1.to_lazy()
    var_2 = validation_1.to_try()
    var_3 = validation_1.to_maybe()
    var_4 = validation_1.is_success()
    var_5 = var_4.__eq__(list_0)
    var_2.map(list_0)


def test_case_4():
    str_0 = "\n        Transform Box into Lazy with returning value function.\n\n        :returns: not folded Lazy monad with function returning previous value\n        :rtype: Lazy[Function(() -> A)]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    bytes_0 = b"\xa6A3"
    str_1 = "5B*y-B\rD"
    validation_1 = module_0.Validation(str_1, validation_0)
    validation_2 = module_0.Validation(bytes_0, bytes_0)
    var_1 = validation_2.to_maybe()
    var_2 = validation_0.to_try()
    var_3 = validation_2.is_success()
    var_4 = var_1.bind(str_0)
    var_3.map(var_4)


def test_case_5():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)


def test_case_6():
    bool_0 = False
    none_type_0 = None
    validation_0 = module_0.Validation(bool_0, none_type_0)
    validation_0.is_success()


def test_case_7():
    int_0 = 75
    none_type_0 = None
    validation_0 = module_0.Validation(int_0, none_type_0)
    validation_0.is_fail()


def test_case_8():
    bytes_0 = b"\xd5\xe9\x00"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    bool_0 = True
    validation_0.map(bool_0)


def test_case_9():
    str_0 = "\n        If Maybe is empty return default_value, in other case.\n\n        :param default_value: value to return if Maybe is empty\n        :type default_value: Any\n        :returns: value of Maybe or default_value\n        :rtype: A\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.__str__()
    validation_1 = module_0.Validation(var_1, var_1)
    var_2 = validation_1.is_fail()
    validation_1.bind(validation_1)


def test_case_10():
    bool_0 = True
    none_type_0 = None
    validation_0 = module_0.Validation(bool_0, none_type_0)
    var_0 = validation_0.to_box()
    var_0.is_fail()


def test_case_11():
    str_0 = "<6UI&Y/nK5-).vz"
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.to_box()
    var_2 = var_1.__str__()
    var_3 = var_0.bind(str_0)
    var_3.to_either()


def test_case_12():
    float_0 = 1271.0
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(none_type_0)
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    validation_1.ap(float_0)


def test_case_13():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_try()
    var_2 = validation_0.to_try()


def test_case_14():
    str_0 = "\n        If Maybe is empty return default_value, in other case.\n\n        :param default_value: value to return if Maybe is empty\n        :type default_value: Any\n        :returns: value of Maybe or default_value\n        :rtype: A\n        "
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    validation_0 = module_0.Validation(dict_0, str_0)
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.__eq__(validation_1)
    validation_0.bind(str_0)


def test_case_15():
    str_0 = ""
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    validation_0 = module_0.Validation(dict_0, str_0)
    var_0 = validation_0.__eq__(validation_0)
    var_1 = validation_0.__str__()
    validation_1 = module_0.Validation(var_0, dict_0)
    var_2 = validation_0.to_maybe()
    var_3 = validation_1.to_either()
    validation_2 = module_0.Validation(str_0, var_0)
    validation_3 = module_0.Validation(validation_2, str_0)
    var_4 = validation_3.to_lazy()
    var_5 = var_4.__str__()
    var_0.to_either()
