# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0
import builtins as module_1


def test_case_0():
    bool_0 = False
    str_0 = ""
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, str_0)
    var_0 = validation_0.__eq__(bool_0)
    var_0.to_try()


def test_case_1():
    bytes_0 = b"\x9c\xa37_\xc9s\x19\xe7A\x07\xa1)\xb5p|"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    var_0.to_box()


def test_case_2():
    int_0 = -1421
    str_0 = "\n    Min is a Monoid that will combines 2 numbers, resulting in the smallest of the two.\n    "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_try()
    var_2 = var_1.map(int_0)


def test_case_3():
    str_0 = "\n    Min is a Monoid that will combines 2 numbers, resulting in the smallest of the two.\n    "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.__str__()
    var_1.to_maybe()


def test_case_4():
    str_0 = "D1M\nt<Jp\\xd "
    validation_0 = module_0.Validation(str_0, str_0)


def test_case_5():
    str_0 = "#v)8bN1W"
    none_type_0 = None
    validation_0 = module_0.Validation(str_0, none_type_0)
    validation_0.to_try()


def test_case_6():
    bytes_0 = b"0\x9e\xa3X\xef"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_1 = var_0.to_box()
    var_2 = validation_0.is_fail()
    var_3 = validation_0.to_maybe()
    var_4 = var_3.bind(validation_0)
    var_5 = validation_0.to_either()


def test_case_7():
    int_0 = -950
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.map(int_0)


def test_case_8():
    bytes_0 = b"0\x9e\xa3X\xef"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    none_type_0 = None
    var_0 = validation_0.to_maybe()
    validation_0.bind(none_type_0)


def test_case_9():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.is_fail()
    var_2 = validation_0.to_box()
    var_3 = validation_0.__eq__(validation_0)
    validation_1 = module_0.Validation(validation_0, var_0)
    var_4 = validation_1.is_fail()
    var_5 = validation_0.to_either()
    validation_0.ap(var_2)


def test_case_10():
    str_0 = "!"
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_box()
    var_2 = validation_0.__eq__(validation_0)
    str_0.bind(str_0)


def test_case_11():
    bool_0 = True
    list_0 = [bool_0]
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    str_0 = ""
    list_1 = [bool_0, str_0, dict_0, list_0]
    list_2 = []
    validation_0 = module_0.Validation(list_1, list_2)
    var_0 = validation_0.is_fail()
    var_1 = validation_0.__str__()
    var_2 = validation_0.__eq__(list_0)
    var_3 = validation_0.to_maybe()
    var_4 = validation_0.to_either()
    var_5 = validation_0.to_lazy()


def test_case_12():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_either()
    none_type_1 = None
    list_0 = []
    validation_1 = module_0.Validation(list_0, none_type_1)
    validation_1.__str__()


def test_case_13():
    float_0 = -3956.21
    str_0 = ""
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(float_0)
    var_1 = validation_0.to_maybe()
    var_2 = validation_0.to_maybe()
    var_3 = var_1.__str__()
    var_1.to_maybe()


def test_case_14():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    str_0 = "!"
    list_1 = []
    validation_0 = module_0.Validation(list_1, list_1)
    var_0 = validation_0.__str__()
    var_1 = validation_0.to_box()
    object_0 = module_1.object(*list_1)
    var_2 = validation_0.to_box()
    validation_1 = module_0.Validation(var_2, str_0)
    var_3 = validation_0.__eq__(validation_1)
    validation_2 = module_0.Validation(var_2, list_0)
    var_4 = validation_2.is_fail()
    var_0.to_either()
