# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    str_0 = "TG\n4Z"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__eq__(validation_0)


def test_case_1():
    none_type_0 = None
    float_0 = -2352.0
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, none_type_0)
    var_0 = validation_0.__eq__(float_0)
    var_0.map(none_type_0)


def test_case_2():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.__str__()
    var_0.to_either()


def test_case_3():
    float_0 = -830.32
    set_0 = {float_0, float_0, float_0, float_0}
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.to_either()
    var_1 = var_0.to_maybe()
    var_0.is_fail()


def test_case_4():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.to_maybe()


def test_case_5():
    bytes_0 = b"m<\r\xe4)zj\x03B\xe7\xdf\xf6Q\x81Ukl "
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_maybe()
    var_0.is_success()


def test_case_6():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)


def test_case_7():
    str_0 = "TG\n4Z"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.__str__()
    var_2 = validation_0.to_try()
    var_3 = validation_0.is_fail()


def test_case_8():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    validation_0.map(none_type_0)


def test_case_9():
    tuple_0 = ()
    float_0 = 2624.2183
    dict_0 = {float_0: float_0}
    none_type_0 = None
    validation_0 = module_0.Validation(dict_0, none_type_0)
    validation_0.bind(tuple_0)


def test_case_10():
    complex_0 = -1703.9709 + 1821.15776j
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.ap(complex_0)


def test_case_11():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    var_0 = validation_0.to_box()
    var_0.to_box()


def test_case_12():
    str_0 = "TG\n4Z"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.__eq__(validation_0)
    var_1.to_try()


def test_case_13():
    bool_0 = False
    bytes_0 = b"\xb7\xab\x1e7"
    validation_0 = module_0.Validation(bytes_0, bool_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_either()
    var_2 = var_1.to_try()
    var_3 = var_2.__str__()
    var_3.to_box()


def test_case_14():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_either()
    validation_0.ap(list_0)


def test_case_15():
    bool_0 = True
    list_0 = [bool_0]
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.__str__()


def test_case_16():
    bool_0 = False
    none_type_0 = None
    validation_0 = module_0.Validation(bool_0, none_type_0)
    validation_1 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_1.__eq__(validation_0)
    var_1 = validation_1.__eq__(validation_1)
    var_2 = var_1.__str__()
    validation_1.to_try()
