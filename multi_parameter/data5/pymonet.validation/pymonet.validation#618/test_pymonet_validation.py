# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0
import builtins as module_1


def test_case_0():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_box()
    tuple_0 = (list_0, list_0)
    var_1 = validation_0.__eq__(list_0)
    validation_1 = module_0.Validation(tuple_0, list_0)
    var_2 = validation_1.__eq__(validation_1)
    var_3 = validation_0.is_success()


def test_case_1():
    bytes_0 = b"y1\xd7\t\xc9"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()


def test_case_2():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.is_success()
    var_2 = validation_0.__eq__(list_0)
    validation_1 = module_0.Validation(var_1, list_0)
    var_3 = validation_1.to_maybe()
    var_4 = validation_1.__eq__(validation_0)
    var_5 = validation_1.to_try()
    var_6 = validation_1.to_either()
    var_7 = validation_0.is_success()


def test_case_3():
    bool_0 = True
    tuple_0 = (bool_0,)
    object_0 = module_1.object()
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, tuple_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.is_success()
    var_1.is_fail()


def test_case_4():
    list_0 = []
    tuple_0 = (list_0, list_0)
    var_0 = list_0.__eq__(list_0)
    validation_0 = module_0.Validation(tuple_0, list_0)
    var_1 = validation_0.to_maybe()
    var_2 = validation_0.__eq__(validation_0)
    var_3 = var_2.__eq__(var_2)
    var_3.is_success()


def test_case_5():
    bool_0 = False
    bytes_0 = b""
    str_0 = "\n        Evaluate function and memoize her output or return memoized value when function was evaluated.\n\n        :returns: result of function in Lazy\n        :rtype: A\n        "
    tuple_0 = (bool_0, bytes_0, bytes_0, str_0)
    none_type_0 = None
    validation_0 = module_0.Validation(tuple_0, str_0)
    var_0 = validation_0.__eq__(str_0)
    validation_1 = module_0.Validation(var_0, none_type_0)
    var_1 = validation_0.to_maybe()
    validation_1.is_fail()


def test_case_6():
    list_0 = []
    var_0 = module_0.Validation(list_0, list_0)


def test_case_7():
    str_0 = "^:ZU_>pNtM"
    dict_0 = {str_0: str_0}
    list_0 = [dict_0, str_0]
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.is_success()
    var_0.to_either()


def test_case_8():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    none_type_0 = None
    validation_0.map(none_type_0)


def test_case_9():
    str_0 = "\n        Transform Lazy into successful Validation with constructor_fn result.\n\n        :returns: successfull Validation monad with previous value\n        :rtype: Validation[A, []]\n        "
    complex_0 = -652.59152 - 131.53j
    validation_0 = module_0.Validation(complex_0, complex_0)
    validation_0.bind(str_0)


def test_case_10():
    str_0 = "\n        Applies the function inside the Maybe[A] structure to another applicative type for notempty Maybe.\n        For empty returns copy of itself\n\n        :param applicative: applicative contains function\n        :type applicative: Maybe[B]\n        :returns: new Maybe with result of contains function\n        :rtype: Maybe[A(B) | None]\n        "
    validation_0 = module_0.Validation(str_0, str_0)
    float_0 = 2878.7713
    validation_0.ap(float_0)


def test_case_11():
    none_type_0 = None
    complex_0 = 528.1 + 252.32786j
    dict_0 = {complex_0: complex_0}
    bytes_0 = b"\x04\xf1\xab\x15\xb0:\x83^<\xda\xae"
    validation_0 = module_0.Validation(dict_0, bytes_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.__str__()
    var_2 = var_1.__eq__(none_type_0)
    var_2.to_lazy()


def test_case_12():
    bool_0 = True
    tuple_0 = (bool_0,)
    complex_0 = 2993.1 + 691j
    str_0 = "ImmutableList: you can not add any other instace than ImmutableList"
    tuple_1 = (complex_0, str_0)
    validation_0 = module_0.Validation(tuple_1, tuple_1)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_try()
    var_1.map(tuple_0)


def test_case_13():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_box()
    tuple_0 = validation_0.is_success()
    var_1 = validation_0.__eq__(list_0)
    validation_1 = module_0.Validation(tuple_0, list_0)
    var_2 = validation_1.to_maybe()
    var_3 = validation_1.__eq__(validation_0)
    var_4 = validation_1.to_try()
    var_5 = validation_0.is_success()


def test_case_14():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_box()
    tuple_0 = (list_0, list_0)
    validation_1 = module_0.Validation(tuple_0, list_0)
    var_1 = validation_1.to_maybe()
    var_2 = validation_1.to_try()
    var_3 = validation_1.__str__()
    var_4 = validation_1.__eq__(validation_1)
    var_5 = validation_0.is_success()


def test_case_15():
    list_0 = []
    validation_0 = module_0.Validation(list_0, list_0)
    var_0 = validation_0.to_box()
    tuple_0 = (list_0, list_0)
    var_1 = validation_0.__eq__(list_0)
    var_2 = var_1.__eq__(list_0)
    validation_1 = module_0.Validation(tuple_0, validation_0)
    var_3 = var_0.to_maybe()
    var_4 = validation_1.__eq__(validation_0)
    var_5 = var_0.to_try()
    var_2.is_success()
