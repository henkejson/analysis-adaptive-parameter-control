# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    str_0 = '"'
    validation_0 = module_0.Validation(str_0, str_0)
    none_type_0 = None
    var_0 = validation_0.__eq__(none_type_0)
    var_1 = var_0.__eq__(validation_0)
    var_0.to_box()


def test_case_1():
    set_0 = set()
    validation_0 = module_0.Validation(set_0, set_0)
    var_0 = validation_0.is_success()
    var_1 = validation_0.__str__()
    var_2 = validation_0.to_maybe()
    var_1.to_maybe()


def test_case_2():
    str_0 = "\n    One is a Monoid that will combine 2 values of any type using logical disjunction OR on their coerced Boolean values.\n    "
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_box()
    validation_1 = module_0.Validation(str_0, str_0)
    var_1 = validation_1.is_fail()
    var_2 = validation_1.is_success()
    var_3 = validation_1.__str__()


def test_case_3():
    str_0 = '"'
    validation_0 = module_0.Validation(str_0, str_0)
    none_type_0 = None
    var_0 = validation_0.__eq__(none_type_0)
    var_1 = validation_0.to_either()
    var_0.to_box()


def test_case_4():
    bytes_0 = b"\xda\x1c$\xfc\xac"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.to_maybe()
    validation_0.bind(bytes_0)


def test_case_5():
    bool_0 = True
    var_0 = bool_0.__str__()


def test_case_6():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)


def test_case_7():
    int_0 = 681
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.to_try()


def test_case_8():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    var_0 = validation_0.is_fail()


def test_case_9():
    str_0 = ""
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.__eq__(validation_0)
    var_2 = module_0.Validation(str_0, var_0)
    var_3 = var_0.to_maybe()
    var_4 = var_2.__eq__(validation_0)
    validation_0.map(var_4)


def test_case_10():
    bool_0 = True
    bytes_0 = b"\xa2\x18\x05"
    none_type_0 = None
    validation_0 = module_0.Validation(bytes_0, none_type_0)
    validation_0.bind(bool_0)


def test_case_11():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    str_0 = "aZPsKp\tUNk)wHW-WgS\\D"
    validation_1 = module_0.Validation(str_0, str_0)
    validation_1.ap(validation_0)


def test_case_12():
    int_0 = -1759
    validation_0 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.to_try()
    var_1.to_try()


def test_case_13():
    float_0 = 367.109676
    str_0 = "Map[value={}]"
    dict_0 = {str_0: str_0}
    validation_0 = module_0.Validation(str_0, float_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.ap(dict_0)
    var_2 = var_1.ap(float_0)
    var_3 = var_2.ap(float_0)
    var_3.to_box()


def test_case_14():
    int_0 = -2765
    validation_0 = module_0.Validation(int_0, int_0)
    var_0 = validation_0.to_box()
    var_1 = validation_0.__eq__(validation_0)
    var_1.bind(var_1)


def test_case_15():
    float_0 = 367.109676
    str_0 = "Map[value={}]"
    dict_0 = {str_0: str_0}
    validation_0 = module_0.Validation(str_0, float_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_box()
    var_2 = var_0.ap(dict_0)
    var_3 = var_2.ap(float_0)
    var_4 = var_2.ap(var_2)
    var_5 = var_3.ap(float_0)
    var_5.to_box()


def test_case_16():
    str_0 = ""
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.__eq__(validation_0)
    var_0.to_either()
