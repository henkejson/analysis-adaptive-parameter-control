# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    bytes_0 = b"Q@F"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.is_fail()
    var_1 = validation_0.to_maybe()
    validation_1 = module_0.Validation(var_1, validation_0)
    var_2 = validation_0.__eq__(validation_1)
    validation_1.ap(validation_1)


def test_case_1():
    float_0 = 737.710926
    none_type_0 = None
    validation_0 = module_0.Validation(float_0, none_type_0)
    var_0 = validation_0.__eq__(float_0)
    var_1 = validation_0.to_box()


def test_case_2():
    str_0 = "e?eK3zvv{"
    list_0 = []
    validation_0 = module_0.Validation(str_0, list_0)
    var_0 = validation_0.__str__()
    var_1 = var_0.__eq__(list_0)
    var_1.to_either()


def test_case_3():
    int_0 = -108
    bool_0 = False
    str_0 = "J>W\tt7}2W=\r;/"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    var_1 = var_0.__eq__(int_0)
    var_2 = var_0.__eq__(bool_0)
    var_2.ap(var_2)


def test_case_4():
    bytes_0 = b"Q@F"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, bytes_0)
    validation_1 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_1.to_maybe()
    validation_2 = module_0.Validation(var_0, validation_1)
    var_1 = validation_1.__eq__(validation_2)
    var_2 = validation_0.to_either()
    var_1.to_box()


def test_case_5():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)


def test_case_6():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.to_maybe()


def test_case_7():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.is_fail()


def test_case_8():
    bytes_0 = b"Q@F"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_1 = module_0.Validation(bytes_0, bytes_0)
    var_1 = validation_1.to_maybe()
    validation_2 = module_0.Validation(var_1, validation_1)
    var_2 = validation_1.__eq__(validation_2)
    bool_0 = True
    var_3 = validation_0.to_either()
    validation_0.map(bool_0)


def test_case_9():
    complex_0 = 2311.6591 - 1140.307745j
    tuple_0 = ()
    list_0 = [tuple_0]
    validation_0 = module_0.Validation(complex_0, list_0)
    bool_0 = False
    validation_1 = module_0.Validation(bool_0, bool_0)
    validation_1.bind(validation_1)


def test_case_10():
    dict_0 = {}
    int_0 = -4077
    validation_0 = module_0.Validation(int_0, int_0)
    validation_0.ap(dict_0)


def test_case_11():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_0.to_box()
    var_1 = var_0.to_try()
    var_1.to_try()


def test_case_12():
    none_type_0 = None
    bytes_0 = b"r\x9b\x8cZ7x\xea\xf3\x9a\xa7"
    validation_0 = module_0.Validation(none_type_0, bytes_0)
    var_0 = validation_0.to_try()
    var_1 = validation_0.to_lazy()
    var_2 = var_1.to_box()
    var_3 = var_2.to_lazy()
    var_3.is_fail()


def test_case_13():
    bytes_0 = b"Q@F"
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, bytes_0)
    var_0 = validation_0.__eq__(validation_0)
    validation_1 = module_0.Validation(bytes_0, bytes_0)
    var_1 = validation_1.to_maybe()
    validation_2 = module_0.Validation(var_1, validation_1)
    var_2 = validation_1.__eq__(validation_2)
    var_3 = validation_0.to_either()
    validation_2.ap(validation_2)


def test_case_14():
    bytes_0 = b""
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.to_either()
    var_0.bind(bytes_0)


def test_case_15():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    none_type_1 = None
    dict_0 = {}
    validation_1 = module_0.Validation(validation_0, dict_0)
    var_0 = validation_0.__eq__(dict_0)
    int_0 = -3941
    validation_2 = module_0.Validation(int_0, int_0)
    var_1 = validation_1.to_maybe()
    validation_3 = module_0.Validation(none_type_1, validation_1)
    var_2 = validation_3.__eq__(validation_3)
    validation_0.to_either()
