# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.validation as module_0


def test_case_0():
    complex_0 = 910.77105 - 2382j
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, complex_0)
    var_0 = validation_0.to_box()
    validation_1 = module_0.Validation(none_type_0, complex_0)
    var_1 = validation_1.__eq__(validation_1)
    validation_1.is_fail()


def test_case_1():
    str_0 = "Ny3js"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    none_type_0 = None
    var_1 = validation_0.__eq__(none_type_0)
    var_2 = var_0.__eq__(var_1)
    var_2.to_try()


def test_case_2():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)


def test_case_3():
    bytes_0 = b"YD\xf7\xf3>&\xf8\x05\xcfb\x8d\xcdF\x89\xfe\x8eKd\xac"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    var_0 = validation_0.__str__()
    var_0.to_either()


def test_case_4():
    str_0 = "Ny3js"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.__str__()
    none_type_0 = None
    var_1 = validation_0.__eq__(none_type_0)
    var_2 = validation_0.is_fail()
    validation_0.map(var_2)


def test_case_5():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.bind(validation_0)


def test_case_6():
    none_type_0 = None
    bytes_0 = b"\xdb\x98\x84\x93a\xf5{^\xf9\x8d"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    validation_0.ap(none_type_0)


def test_case_7():
    bool_0 = True
    str_0 = "Ny3js"
    validation_0 = module_0.Validation(str_0, str_0)
    none_type_0 = None
    var_0 = validation_0.to_try()
    var_1 = var_0.map(none_type_0)
    var_2 = validation_0.to_either()
    none_type_1 = None
    var_3 = validation_0.__eq__(none_type_1)
    var_4 = validation_0.to_lazy()
    var_5 = var_2.__eq__(bool_0)
    var_6 = var_2.map(bool_0)
    var_5.to_try()


def test_case_8():
    str_0 = "\x0c"
    none_type_0 = None
    validation_0 = module_0.Validation(str_0, none_type_0)
    var_0 = validation_0.to_lazy()
    var_1 = var_0.to_either()
    var_2 = var_1.to_try()
    validation_1 = module_0.Validation(str_0, str_0)
    none_type_1 = None
    tuple_0 = ()
    validation_2 = module_0.Validation(tuple_0, tuple_0)
    validation_2.bind(none_type_1)


def test_case_9():
    str_0 = ""
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    var_1 = validation_0.__eq__(validation_0)
    none_type_0 = None
    var_2 = validation_0.__eq__(none_type_0)
    str_1 = "\x0c[K.lWiMj1|X;"
    var_3 = var_0.__eq__(str_1)
    var_4 = validation_0.to_maybe()
    var_5 = validation_0.__str__()
    var_6 = var_0.to_box()
    var_5.to_either()


def test_case_10():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    validation_0.to_try()


def test_case_11():
    str_0 = "MU\n>B4;=|n\\?T>bL&bI"
    bytes_0 = b"$\xa8>\xbb\xb8\x83\xb8"
    validation_0 = module_0.Validation(bytes_0, str_0)
    var_0 = validation_0.is_fail()
    none_type_0 = None
    validation_1 = validation_0.to_maybe()
    var_1 = validation_1.__eq__(none_type_0)
    var_2 = validation_1.to_box()


def test_case_12():
    set_0 = set()
    bool_0 = False
    dict_0 = {}
    tuple_0 = (set_0, bool_0, bool_0, dict_0)
    set_1 = set()
    list_0 = [set_1]
    validation_0 = module_0.Validation(list_0, set_1)
    var_0 = validation_0.__str__()
    var_1 = var_0.__eq__(tuple_0)
    var_1.to_either()


def test_case_13():
    str_0 = "Ny3js"
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_either()
    validation_1 = module_0.Validation(str_0, var_0)
    var_1 = validation_1.__eq__(validation_0)
    validation_1.to_try()
