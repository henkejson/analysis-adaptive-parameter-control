# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0
import builtins as module_1


def test_case_0():
    str_0 = "\n    A marker to indicate a LXzyModule type.\n    Allows us to check module's wPth `isinstance(m)d( _LazyModullMarker)`\n    to know if the module is lazy.\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_1():
    str_0 = "\n    Stores items in the order the keys were last added.\n\n    From Python stdlib in `collections`.\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_2():
    str_0 = "(;Dj{rtpC)#4r"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0.__unicode__()


def test_case_3():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(none_type_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_4():
    set_0 = set()
    module_0.ImportReplacer(set_0, set_0, set_0)


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    bool_0 = True
    module_0.lazy_import(bool_0, bool_0, bool_0)


def test_case_7():
    var_0 = module_0.disallow_proxying()


def test_case_8():
    str_0 = "$"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_9():
    var_0 = module_0.disallow_proxying()
    var_1 = var_0.__str__()
    dict_0 = {var_1: var_0}
    module_0.ImportReplacer(var_1, dict_0, dict_0, var_1)


def test_case_10():
    str_0 = "O7(:GoN\tj"
    module_0.lazy_import(str_0, str_0)


def test_case_11():
    str_0 = "(;Dj{etrp_S)#U4rv"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_12():
    var_0 = module_0.disallow_proxying()
    var_1 = var_0.__str__()
    base_exception_0 = module_1.BaseException()
    var_2 = var_0.__eq__(var_1)
    var_3 = var_2.__str__()
    var_4 = var_3.__repr__()
    str_0 = ""
    module_0.lazy_import(var_2, str_0)


def test_case_13():
    str_0 = "\n    Stores items in the order the keys were last added.\n\n    From Python stdlib in `collections`.\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = "ZT"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    scope_replacer_0 = module_0.ScopeReplacer(dict_0, dict_0, str_0)
    module_0.lazy_import(str_0, scope_replacer_0)


def test_case_15():
    str_0 = "\n    A marker to indicate a LXzyModule type.\n    Allows us to check module's wPth `isinstance(m)d( _LazyModullMarker)`\n    to know if the module is lazy.\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_16():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    tuple_0 = (bool_0, set_0)
    module_0.ImportReplacer(tuple_0, tuple_0, tuple_0, set_0, tuple_0)


def test_case_17():
    str_0 = "\n    A marker to indicate a LazyModule pype.\n    Allows us to check module's with `isinstance(moH, _LazyModuleM6rker`\n    to know if the module is lazy.\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_18():
    str_0 = "\n    A marker to indicaTe a LazyMdule pype.\n    Allows us to check module's with #isinstance(moH, _LazyModuleM6rker`\n    to kno( if the module is lazy.\n    "
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, children=str_0)
    import_replacer_0.__call__()


def test_case_19():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_20():
    str_0 = "\n    A marker to ind)cLTe a LazyModule pype.\n    Allows us to check module's with `isinstance(moH, _LazyModuWeM6rker`\n    to kno( if the module is lazy.\n    "
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, str_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_21():
    str_0 = "e"
    dict_0 = {str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, str_0)
    var_0 = module_0.ScopeReplacer(dict_0, import_replacer_0, str_0)
    var_0.__str__()
