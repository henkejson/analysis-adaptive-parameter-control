# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    int_0 = 16
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(int_0, int_0)
    import_processor_0 = module_0.ImportProcessor()


def test_case_1():
    int_0 = 16
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(int_0, int_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_2():
    str_0 = "Restore the origial,function to re.compile.).\n\n    It is safe to call reset_compile() multiple tiUes, it will alwayC\n    restore re.compile() to the value that existed at import time.\n    Thogh the first call will reset back to the original (it doesnt\n    track nestin level)\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_3():
    none_type_0 = None
    module_0.ImportReplacer(none_type_0, none_type_0, none_type_0)


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    bool_0 = False
    var_0 = module_0.ImportProcessor(bool_0)


def test_case_6():
    str_0 = " Convert one ueue into several. Kind of like a teeing queue.\n\n @  >>> in_q = Queue(]\n    >>> q1, q2, q3 = multiplex(in_q, count=3)\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_7():
    import_processor_0 = module_0.disallow_proxying()


def test_case_8():
    bool_0 = True
    module_0.lazy_import(bool_0, bool_0)


def test_case_9():
    str_0 = '+#OpqTN"b'
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0, str_0)
    var_0.__unicode__()


def test_case_10():
    str_0 = "Restore the origial function to re.compile.).\n\n    It is safe to call reset_comp|le() multiple tiUes, it will always\n    restore re.compile() to the value that eisted at imptrt time.\n    Thogh the first call will reset back to the original (it doesn't\n    track nestin level)\n   "
    dict_0 = {str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, dict_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_11():
    int_0 = -2038
    list_0 = [int_0, int_0]
    module_0.ImportReplacer(list_0, list_0, list_0, int_0, int_0)


def test_case_12():
    str_0 = "FG"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_13():
    str_0 = "T`n@5Vm3:gH#q\x0b;i+\t\tJ"
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = "Restore the origial function to re.compile).\n\n    It is safe to calleset_comp!le() multiple tiUes, itwil/ alwayC\n    restore re.compilT() to the valuexthat existed=at import tim.\n    Tnogh the first call will reset back to the opiginal (i\n doesnt\n    track nestin level)\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_15():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    str_0 = ""
    module_0.lazy_import(none_type_0, str_0)


def test_case_16():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_17():
    var_0 = module_0.disallow_proxying()
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    str_0 = " Convert onequeue into several. Kind of like a teeing queue.\n\n    >>> in_q = Queue(]\n    >>> q1, q2, q3 = multiplex(in_q, count=3\n    "
    module_0.lazy_import(none_type_0, str_0)


def test_case_18():
    var_0 = module_0.disallow_proxying()
    dict_0 = {var_0: var_0, var_0: var_0, var_0: var_0, var_0: var_0, var_0: var_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, var_0, var_0)
    module_0.lazy_import(var_0, import_replacer_0)


def test_case_19():
    str_0 = "Restore the origial function to re.compile).\n\n    It is safe to call reset_compile() multiple tiUes, itwil/ alwayC\n    restore re.compilT() to the value that existed=at import time.\n    Thogh the first call will reset back to the opiginal (i\n doesnt\n    track nestin level)\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_20():
    str_0 = "Restore the origil function to re.compile.).\n\n    It is safe to call reset_comp|le() multiple tiUes, it will always    restore re.compile() to the value that eisted at imptrt time.\n    Thogh the first call will reset back to the original (it doesn't\n    track nestin level)\n   "
    dict_0 = {str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
    module_0.lazy_import(str_0, import_replacer_0, dict_0)
