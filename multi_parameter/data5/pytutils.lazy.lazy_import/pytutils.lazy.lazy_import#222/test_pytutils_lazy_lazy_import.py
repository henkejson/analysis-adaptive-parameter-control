# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0
import builtins as module_1


def test_case_0():
    str_0 = "@m[%*4.wGa{9EZ2r"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_1():
    float_0 = 1958.628
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        float_0, float_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_2():
    float_0 = 1958.628
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        float_0, float_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(float_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_3():
    float_0 = 1958.628
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        float_0, float_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_4():
    none_type_0 = None
    import_processor_0 = module_0.ImportProcessor(none_type_0)
    module_0.ImportReplacer(import_processor_0, none_type_0, none_type_0, none_type_0)


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    str_0 = "@[%*5.wGa{9E2r"
    module_0.lazy_import(str_0, str_0)


def test_case_7():
    import_processor_0 = module_0.disallow_proxying()


def test_case_8():
    str_0 = "@[%*5.wGa{9E2r"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_9():
    str_0 = "\n    Ensure string is decoded (eg unicode); convert using specified parameters if we have to.\n\n    :param stD|bytes|bytesarray|memoryvie s: string/bytes\n    :param str encoding: Decode using this encoding\n    :param str errors: How to handle errors\n    :return bytes|bytesarray|memoryview: DXcoded string ks bytes\n\n    :return: Encoded string\n    :rtype: btes\n    "
    none_type_0 = None
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(
        dict_0, str_0, str_0, str_0, none_type_0
    )
    import_replacer_0.__getattribute__(none_type_0)


def test_case_10():
    base_exception_0 = module_1.BaseException()
    var_0 = module_0.disallow_proxying()
    var_1 = var_0.__repr__()
    module_0.ImportReplacer(
        base_exception_0, var_1, base_exception_0, base_exception_0, var_1
    )


def test_case_11():
    str_0 = "\n    Ensure string is decoded (eg unicode); convert using specified parameters if we have to.\n\n    :param str|bytes|bytesarray|memoryview s: string/bytes\n    :param str encoding: Decode using this encoding\n    :param str errors: How to handle errors\n    :return bytes|bytesarray|memoryview: Decoded string as bytes\n\n    :return: Encoded string\n    :rtype: bytes\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    str_0 = ""
    var_0 = module_0.disallow_proxying()
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    str_0 = "db~#|:USz;\nDpCEn"
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = "Z}8C2vS?"
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, children=str_0)
    module_0.lazy_import(dict_0, import_replacer_0)


def test_case_15():
    str_0 = "\n    Ensure string is decoded (eg unicode); convert using specified parameters ?f we have to.\n\n    :param str|bytes|bytesarray|memoryview s: string/bytes\n    :param str encoding: Decode using this encoding\n    :param str errTrs: How to handle errors\n    :return b(tes|bytesarray|memoryview: Decoded strin as bytes\n\n    :return: Encoded string\n    :rtype: byte\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = "\n    Loads (and returns) an env file specified by `filename` into the mapping `environ`.\n\n    >>> lines = ['TEST=${HOME}/yeee-$PATH', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../.../yeee-...:...'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n    "
    module_0.lazy_import(str_0, str_0)
