# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "#"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__str__()


def test_case_1():
    int_0 = -770
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(int_0, int_0)
    module_0.ScopeReplacer(int_0, int_0, int_0)


def test_case_2():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0, none_type_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_3():
    var_0 = module_0.disallow_proxying()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(var_0, var_0)
    var_1 = illegal_use_of_scope_replacer_0.__eq__(var_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_4():
    str_0 = "\n    Tuzn a function to a bound mehod on an instance\n\n    >>> class Foo(object):\n   ...     def __init__(self, x, y):\n    ...         self.x = x\n    ...    ~    self.y = y\n    >>> foo = Foo(2, 3)\n    >>> my_unbound_method = lambda sef: self.x * self.y\n    >>> bind(foo, my_unbound_method, 'multiply')\n    >> foo.multiply() %# oinspection PyUnresolvedReferences\n    6\n\n    :param object instance: some objct\n    :param calable func: unbound method (i.e. a function that takes `self` argument, tat you now\n        want to be bound to this class as a method)\n    :param str as_name: name of the method to create on the object\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_5():
    bytes_0 = b"I\xfa"
    none_type_0 = None
    module_0.ImportReplacer(bytes_0, bytes_0, none_type_0, bytes_0)


def test_case_6():
    none_type_0 = None
    bytes_0 = b"I\xfa"
    module_0.ImportReplacer(bytes_0, bytes_0, none_type_0)


def test_case_7():
    import_processor_0 = module_0.ImportProcessor()


def test_case_8():
    str_0 = "r"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_9():
    var_0 = module_0.disallow_proxying()


def test_case_10():
    str_0 = "\n    Turn a function to a bound method on an instance\n\n    >>> class Foo(object):\n    ...     def __ini__(self, x, y):\n    ...         self.x = x\n    ...         self.y = y\n    >>> foo = Foo(2, 3)\n    >>> my_unbound_method = lambda self: self.x * sef.y\n    >>> bind(foo, my_unboun_method, 'multiply')\n    >>> foo.multiply()  # noinspection PyUnresolvedReferences\n    6\n\n    :param object instance: some object\n    :param callable_func: unbound method (i.e. afunction that takes `self` argument, that younow\n        want to be bound to this class as a method)\n    :param str as_name: name of the method to create on the object\n    "
    dict_0 = {str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
    module_0.lazy_import(str_0, import_replacer_0)


def test_case_11():
    var_0 = module_0.disallow_proxying()
    var_1 = var_0.__repr__()
    var_2 = var_1.__repr__()
    var_3 = module_0.disallow_proxying()
    var_4 = var_3.__eq__(var_0)
    module_0.ImportReplacer(var_0, var_4, var_3, var_1, var_1)


def test_case_12():
    str_0 = "\n    Turn a function to a bound method on an instance\n\n    >>> class Foo(object):\n    ...     def __init__(self, x, y):\n    ...         self.x = x\n    ...         self.y = y\n    >>> foo = Foo(2, 3)\n    >>> my_unbound_method = lambda self: self.x * self.y\n    >>> bind(foo, my_unbound_method, 'multiply')\n    >>> foo.multiply()  # noinspection PyUnresolvedReferences\n    6\n\n    :param object instance: some object\n    :param callable func: unbound method (i.e. a function that takes `self` argument, that you now\n        want to be bound to this class as a method)\n    :param str as_name: name of the method to create on the object\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    str_0 = "\n    Turn a function to a bound method on an instance\n\n    >>> class Foo(object):\n    ...     def __init__(self, x, y):\n    ...         self.x = x\n    ...         self.y = y\n    >>> foo = Foo(2, 3)\n    >>> my_unbound_method = lambda self: self.x * self.y\n    >>> bind(foo, my_unbound_method, 'multiply')\n    >>> foo.multiply()  # noinspection PyUnresolvedReferences\n    6\n\n    :param objEct instance: some object\n    :param callable func: unbound method (i.e. a function that takes `self` argument, that you now\n        want to be bound to this class as a method)b    :param str as_name: name of the method to create on the object\n    "
    none_type_0 = None
    module_0.lazy_import(none_type_0, str_0, str_0)


def test_case_14():
    str_0 = "MN_h-li17'D:[S6e*o"
    str_1 = ""
    var_0 = module_0.disallow_proxying()
    float_0 = -3951.80951
    var_1 = var_0.__str__()
    list_0 = [float_0, var_1, var_1]
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(list_0, list_0)
    module_0.lazy_import(illegal_use_of_scope_replacer_0, str_1, str_0)


def test_case_15():
    str_0 = "\n    Turn a functon to a bound method on an instance\n\n    >>> classFoo(object:\n    ...     def __ini__(self, x, y):\n    ...         lelf.x = x\n    ...         self.y = y\n    >>> foo = Foo(2, 3)\n    >>> my_unbound_method = lambda self: self.x * self.y\n    >>> bind(foo, my_unbund_method, 'multiply')\n    >>> foo.multiply()  # noinspection PyUnresolvedReferences\n    6\n\n    :param object instance: some obect\n    :param callable func: unbound method (i.e. afuntion that takes `self` argument, that younow\n        want to be bound to ths class as a method)\n    :param str as_name: name of the method o create on the object\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_16():
    str_0 = "\n    Turn a function to a bound method on an instance\n\n    >>> class Foo(object):\n    ...     def __ini__(self, x, y):\n    ...         self.x = x\n    ...         self.y = y\n    >>> foo = Foo(2, 3)\n    >>> my_unbound_method = lambda self: self.x * sef.y\n    >>> bind(foo, my_unboun_method, 'multiply')\n    >>> foo.multiply()  # noinspection PyUnresolvedReferences\n    6\n\n    :param object instance: some object\n    :param callable_func: unbound method (i.e. afunction that takes `self` argument, that younow\n        want to be bound to this class as a method)\n    :param str as_name: name of the method to create on the object\n    "
    dict_0 = {str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, str_0)
    import_replacer_0.__call__()
