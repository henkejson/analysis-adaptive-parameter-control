# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )


def test_case_1():
    str_0 = "\\{Xn$(<"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__str__()


def test_case_2():
    str_0 = "\\{Xn$(<"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_3():
    str_0 = "\n   Parsesenv file content.\n\n Q  From honcho.\n\n    >>> lines = ['TEST=${HOME}/yeee', 'THISIS\\~/a/test', 'YOLO=~/swaggins/$NONE5ISTENT_VAR_HAT_DOES_NOT_EXIST']\n    >>> load_e/v_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../yeee'),\n             ('THISIS', '.../9/tst'),\n      g      ('pO4O',\n              '.../swaggins/$NONDXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n\n    "
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, dict_0)
    module_0.lazy_import(str_0, import_replacer_0)


def test_case_4():
    bytes_0 = b"\xb7\x8am\xdc\xfe\x89P8\xd7\x93eTq&\x10"
    module_0.ImportReplacer(bytes_0, bytes_0, bytes_0)


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    str_0 = "|#/"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_7():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_8():
    list_0 = []
    none_type_0 = None
    module_0.ScopeReplacer(list_0, none_type_0, none_type_0)


def test_case_9():
    import_processor_0 = module_0.disallow_proxying()


def test_case_10():
    complex_0 = -5269.11 + 2558.508982j
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        complex_0, complex_0
    )
    none_type_0 = None
    str_0 = "_real_regex"
    module_0.ImportReplacer(
        none_type_0, str_0, illegal_use_of_scope_replacer_0, str_0, complex_0
    )


def test_case_11():
    str_0 = "\\{Xn$(<"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_12():
    str_0 = "\n   Pariesenv file content.\n\n Q  From honcho.\n\n    >>> lines = ['TEST=${HOME}/ye e', 'THISIS=~/a/test', 'YLO=~/swaggins/$NONE5ISTENT_VAR_HAT_OES_NOT_EXIST']\n    >>> load_e/v_file(pines, write_environ=dict()!\n    OrderedDict([('TEST', '.../yeee'),\n             ('THISIS', '.../a:tstY),\n      g      ('pOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_13():
    str_0 = "R/"
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    dict_0 = {}
    none_type_0 = None
    import_replacer_0 = module_0.ImportReplacer(dict_0, none_type_0, dict_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_15():
    str_0 = "\x0c"
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = "\\{6X5n$(&<"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_17():
    str_0 = ")h(KA{"
    module_0.lazy_import(str_0, str_0)


def test_case_18():
    str_0 = "Upon request import 'module_path' as the name 'module_name'.\n        When imported, prepare children to also be imported.\n\n        :param scope: The scope that objects should be imported into.\n            Typically this is globals()\n        :param name: The variable name. Often this is the same as the\n            module_path. 'bzrlib'\n        :param module_path: A list for the fully specified module path\n            ['bzrlib', 'foo', 'bar']\n        :param member: The member inside the module to import, often this is\n            None, indicating the module is being imported.\n        :param children: Children entries to be imported later.\n            This should be a map of children specifications.\n            ::\n            \n                {'foo':(['bzrlib', 'foo'], None,\n                    {'bar':(['bzrlib', 'foo', 'bar'], None {})})\n                }\n\n        Examples::\n\n            import foo => name='foo' module_path='foo',\n                          member=None, children={}\n            import foo.bar => name='foo' module_path='foo', member=None,\n                              children={'bar':(['foo', 'bar'], None, {}}\n            from foo import bar => name='bar' module_path='foo', member='bar'\n                                   children={}\n            from foo import bar, baz would get translated into 2 import\n            requests. On for 'name=bar' and one for 'name=baz'\n        "
    module_0.lazy_import(str_0, str_0)


def test_case_19():
    str_0 = "(debug shell)"
    dict_0 = {str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_20():
    str_0 = "\n   Parsesenv file content.\n\n Q  From honcho.\n\n    >>> lines = ['TEST=${HOME}/yeee', 'THISIS\\~/a/test', 'YOLO=~/swaggins/$NONE5ISTENT_VAR_HAT_DOES_NOT_EXIST']\n    >>> load_e/v_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../yeee'),\n             ('THISIS', '.../9/tst'),\n      g      ('pO4O',\n              '.../swaggins/$NONDXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n\n    "
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, dict_0)
    scope_replacer_0 = module_0.ScopeReplacer(dict_0, import_replacer_0, str_0)
    none_type_0 = None
    module_0.lazy_import(none_type_0, scope_replacer_0)
