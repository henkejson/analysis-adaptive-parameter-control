# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "gZ%qsj~m'#}"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_1():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_2():
    str_0 = "gZ%qsj~m'#}"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_3():
    str_0 = "Create a temporary object in the secified scope.\n        Once used, a real object will be placed in the scope.\n\n        :param scope: The scope the objectshould appear in\n       :param factory: A callable that will create the reas object.\n           It will be passed (self, scope, name)\n       :param name:The variable name in the given scope.\n        "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    module_0.lazy_import(illegal_use_of_scope_replacer_0, str_0)


def test_case_4():
    none_type_0 = None
    var_0 = module_0.disallow_proxying()
    module_0.ImportReplacer(none_type_0, none_type_0, none_type_0)


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    set_0 = set()
    module_0.lazy_import(set_0, set_0, set_0)


def test_case_7():
    str_0 = "pR(j^C'l8N8"
    module_0.lazy_import(str_0, str_0)


def test_case_8():
    str_0 = "gZ_qsj~m'#}"
    module_0.lazy_import(str_0, str_0)


def test_case_9():
    var_0 = module_0.disallow_proxying()


def test_case_10():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_11():
    bytes_0 = b"\xd9\xdf\x1f\xcc\x84n\xfd\xf7\xde\x1d\xc3\xf4\x83\x9bw#\xb7\xff\xa9"
    module_0.ScopeReplacer(bytes_0, bytes_0, bytes_0)


def test_case_12():
    str_0 = "d9VIgcT&$u`\x0bxfr"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_13():
    str_0 = "Create a temporary object in the specified scope.\n        Once used, a real object will be placed in the scope.\n\n        :param scope: The scope the object should appear in\n        :param factory: A callable that will create the real object.\n            It will be passed (self, scope, name)\n        :param name: The variable name in the given scope.\n        "
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = "}Y`1i!\nl._E1hd7t^L"
    dict_0 = {str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_15():
    str_0 = "}Y`i\nl._E1h~7^L"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, str_0)
    import_replacer_0.__getattribute__(str_0)


def test_case_16():
    str_0 = "njAOJX*<Ms&O{/]H\x0bOb"
    str_1 = 'rS\x0c#&e\n"\t'
    module_0.ImportReplacer(str_1, str_1, str_1, str_0, str_1)


def test_case_17():
    str_0 = ""
    module_0.lazy_import(str_0, str_0)


def test_case_18():
    str_0 = "\n    Parses env file content.\n\n    From honcho.\n\n    >>> lines = ['TEST=${HOME}/yeee', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../yeee'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_19():
    str_0 = "=5Q.{qO(\tc&+\n\te'Z"
    module_0.lazy_import(str_0, str_0)
