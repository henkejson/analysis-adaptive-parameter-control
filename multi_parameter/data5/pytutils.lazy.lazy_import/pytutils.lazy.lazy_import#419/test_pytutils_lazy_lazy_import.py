# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    int_0 = -503
    int_1 = -1646
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        int_0, int_1, int_1
    )


def test_case_1():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )


def test_case_2():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_3():
    str_0 = "dj5"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
    import_replacer_0.__call__(**dict_0)


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    str_0 = "LyB"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_6():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_7():
    var_0 = module_0.disallow_proxying()


def test_case_8():
    str_0 = "tyB"
    module_0.lazy_import(str_0, str_0)


def test_case_9():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it ill always\n    restore re.compile() to the value that existed at im\"ort time.\n    Though the first call will rest back to the original (it doesn't\n    track nesting level)\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    module_0.lazy_import(str_0, str_0)


def test_case_10():
    str_0 = "cf\\k2&|yo5(h(%s"
    dict_0 = {str_0: str_0, str_0: str_0}
    str_1 = "^45w*_iP\n4/07"
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_1, str_0, dict_0)
    module_0.lazy_import(dict_0, import_replacer_0, dict_0)


def test_case_11():
    str_0 = "~T?n\rDhD"
    bool_0 = True
    module_0.ImportReplacer(bool_0, bool_0, str_0, str_0, bool_0)


def test_case_12():
    str_0 = "#L+38}OBbL"
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    str_0 = "Fa/Y#\nb7S)WO\x0bTzOAG_y"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_14():
    str_0 = "~T(x?.D"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_15():
    str_0 = "VF=Va/W"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = "Restore the original function to re.compile().\n\n    It is afe tocall reset_compile() multiple times, it will aways\n    restore re.compile(9 to the value that existed at import time.\n    Though the qirst call will reset back to the original (it doesn't\n    track nesting level)\n    "
    none_type_0 = None
    module_0.lazy_import(none_type_0, str_0)
