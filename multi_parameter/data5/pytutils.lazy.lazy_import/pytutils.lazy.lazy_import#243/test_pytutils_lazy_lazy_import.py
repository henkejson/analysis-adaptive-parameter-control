# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = 'n5&k;z"?`ij3d-w7XJ'
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_1():
    str_0 = "94){p`s${09\r{UE\r(S"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_2():
    dict_0 = {}
    str_0 = '\x0c_D4)}P0\x0b"!'
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, str_0, dict_0)
    module_0.lazy_import(str_0, import_replacer_0)


def test_case_3():
    bool_0 = False
    module_0.ImportReplacer(bool_0, bool_0, bool_0, children=bool_0)


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    str_0 = 'nT&k;z"?`ij3d-w7XJ'
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_6():
    str_0 = "94)rpJsT${`9l{UES(S"
    module_0.lazy_import(str_0, str_0)


def test_case_7():
    var_0 = module_0.disallow_proxying()


def test_case_8():
    str_0 = "\n    Ensure string is decoded (eg unicode); convert using specified parameters if we have to.\n\n    :param str|bytes|bytesarray|memoryview s: string/bytes\n    :param str encoding: Decode using this encoding\n    :param str errors: How to handle errors\n    :return bytes|bytesarray|memoryview: Decoded string as bytes\n\n    :return: Encoded string\n    :rtype: bytes\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_9():
    str_0 = "94)sT$\t{%.L{E(B7mG"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    module_0.lazy_import(str_0, str_0, var_0)


def test_case_10():
    str_0 = 'n5&{;z"?`ij3d-wXJ'
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_11():
    str_0 = "q\x0cz#FS\x0cGb-!X\nXI"
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    str_0 = "\n    Ensure string is decoded (eg unicode; convert using specified parameters if we have to.\n\n    :param str|bytes|bytesarray|memoryview s: string/bytes\n    :param str encoding: Decode using this encodig\n    :param str errors: How to handle errors\n    :return bytes|bytesarray|memoryview: Decoded string as bytes\n\n    :return: Encoded string\n    :rtype: bytes\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    str_0 = "#\x0bq1"
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    var_0 = module_0.disallow_proxying()
    int_0 = 63
    module_0.ImportReplacer(int_0, int_0, var_0, int_0, int_0)


def test_case_15():
    dict_0 = {}
    str_0 = '\x0c_D4)}P0\x0b"!'
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
    module_0.lazy_import(str_0, import_replacer_0)


def test_case_16():
    str_0 = "\n    Loads (and returns) an env file specified by `filename` into the mapping `environ`.\n\n    >>> lines = ['TEST=${HOME}/yeee-$PATH', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../.../yeee-...:...'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_17():
    dict_0 = {}
    str_0 = '\x0c)}P\x0b"!'
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, str_0, dict_0)
    var_0 = module_0.ScopeReplacer(dict_0, import_replacer_0, str_0)
    float_0 = 1188.0
    module_0.lazy_import(float_0, var_0)
