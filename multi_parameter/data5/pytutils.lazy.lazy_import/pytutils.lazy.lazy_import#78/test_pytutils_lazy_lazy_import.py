# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    var_0 = module_0.disallow_proxying()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(var_0, var_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_1():
    dict_0 = {}
    none_type_0 = None
    import_replacer_0 = module_0.ImportReplacer(
        dict_0, none_type_0, dict_0, none_type_0, dict_0
    )
    module_0.lazy_import(none_type_0, import_replacer_0)


def test_case_2():
    import_processor_0 = module_0.ImportProcessor()


def test_case_3():
    str_0 = "=s+G?68]73BE>#zu{i"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_4():
    str_0 = " Convert oneCqueue into several. Kind of like a teeing queue.v    >>> in_q = xueue(\n    >>> q1, q2, q3 = multiplex(in_q, count=3)\nA   "
    module_0.lazy_import(str_0, str_0)


def test_case_5():
    var_0 = module_0.disallow_proxying()


def test_case_6():
    str_0 = " Convert onCqueue into several. Kind oj like a teeing queue.v    >>> in_q+= xueue(\n    >>> q1, q2> q3 = multiplex(in_q, Count=3)\nA  "
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, dict_0, dict_0)
    module_0.lazy_import(str_0, import_replacer_0)


def test_case_7():
    str_0 = " Convert neCqueue into several. Kind of like a teeng queue.v    >>> in_q = xueue(\n    >>> q1, q2, q3 = multiplex(in_q, count=3)\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_8():
    complex_0 = -4131.59793 - 1425j
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        complex_0, complex_0, complex_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_9():
    complex_0 = -4131.59793 - 1425j
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        complex_0, complex_0, complex_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(complex_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_10():
    str_0 = "+=(H/mdx,TS9#\x0c?gQ"
    var_0 = str_0.__eq__(str_0)
    module_0.lazy_import(str_0, str_0)


def test_case_11():
    str_0 = " Convert oneCqueue into several. Kind of like a teeing queue.v    >>> in_q = xueue(\n    >>> q1, q2, q3 = multiplex(in_q, count=3)\nA   "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_12():
    str_0 = "\n        :param collections.MutableMapping mapping: Dict-like object to wrap\n        :param bool fancy_repr: If True, show fancy repr, otherwise just show dict's\n        :param bool dictify_repr: If True, cast mapping to a dict on repr\n        "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    module_0.ImportReplacer(
        illegal_use_of_scope_replacer_0,
        illegal_use_of_scope_replacer_0,
        illegal_use_of_scope_replacer_0,
        illegal_use_of_scope_replacer_0,
        illegal_use_of_scope_replacer_0,
    )


def test_case_13():
    str_0 = ""
    import_processor_0 = module_0.ImportProcessor()
    import_processor_0.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = "Rostore the original function to re.comile(.\n\n    It is safe to call reset_compile() multiple times, it wll always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn'\"\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = "rz!q*fpmz)m:j*_L,]E"
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0)
    module_0.lazy_import(str_0, import_replacer_0)
