# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    int_0 = -323
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        int_0, int_0, int_0
    )
    illegal_use_of_scope_replacer_0.__str__()


def test_case_1():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0, none_type_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_2():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(none_type_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_3():
    str_0 = "m"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, children=dict_0)
    module_0.lazy_import(str_0, import_replacer_0)


def test_case_4():
    none_type_0 = None
    int_0 = 1413
    module_0.ImportReplacer(int_0, int_0, none_type_0, int_0)


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    str_0 = "m"
    module_0.lazy_import(str_0, str_0)


def test_case_7():
    var_0 = module_0.disallow_proxying()


def test_case_8():
    none_type_0 = None
    var_0 = module_0.disallow_proxying()
    set_0 = {var_0, var_0}
    module_0.ImportReplacer(none_type_0, none_type_0, var_0, set_0, set_0)


def test_case_9():
    str_0 = "m"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_10():
    str_0 = "E7IJQ:kP\n"
    module_0.lazy_import(str_0, str_0)


def test_case_11():
    var_0 = module_0.disallow_proxying()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        var_0, var_0, var_0
    )
    var_1 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    str_0 = "r"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_12():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_13():
    str_0 = "Invalid pattern(s) found. %(msg)s"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_14():
    str_0 = "rN,EEUXW,4q2BcJ7#:X?"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_15():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_comple() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n   Though the first call will reset back to the original (it doesn't\n    track nesting level\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = ""
    module_0.lazy_import(str_0, str_0)


def test_case_17():
    str_0 = "Restor the original function to re.compile(.\n\n    It is safe to call reset_compile(w multiple times, it will always\n    rstore re.compile() to the value that existed at import time.\n   Though the fi<st cal will rset back to the original (it doesn't\n    track nesting level)\n   "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_18():
    str_0 = 'uv4v>w9).L}"z=Hy'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, dict_0)
    import_replacer_0.__setattr__(str_0, dict_0)


def test_case_19():
    str_0 = "P9  <n}^F1"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, children=dict_0)
    var_0 = module_0.ScopeReplacer(dict_0, import_replacer_0, import_replacer_0)
    var_0.__str__()
