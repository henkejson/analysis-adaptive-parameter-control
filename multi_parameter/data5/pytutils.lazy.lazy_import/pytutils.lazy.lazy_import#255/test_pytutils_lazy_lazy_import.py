# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    var_0 = module_0.disallow_proxying()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(var_0, var_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_1():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reseZ_compile() multiple times, it will always\n    restorepre.compile() to the value that exsted at import time.\n    Though the first call will reRt back to the origina {it doesn't\n    track nesting leNel)\n    "
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_1 = var_0.__eq__(str_0)
    var_0.__str__()


def test_case_2():
    str_0 = "utf8"
    dict_0 = {str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
    module_0.lazy_import(str_0, str_0)


def test_case_3():
    import_processor_0 = module_0.ImportProcessor()


def test_case_4():
    str_0 = "Mj>D\\54C"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_5():
    str_0 = "\n    Fetch arbitrary node from a tree-like mapping structure with traversal help:\n    Dimension can be specified via ':'\n\n    Arguments:\n        mapping collections.Mapping: Mapping to fetch from\n        key str|unicode: Key to lookup, allowing for : notation\n        default object: Default value. If set to `:module:_sentinel`, raise KeyError if not found.\n        parent bool: If True, return parent node. Defaults to False.\n\n    Returns:\n        object: Value at specified key\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_6():
    str_0 = ""
    module_0.lazy_import(str_0, str_0)


def test_case_7():
    var_0 = module_0.disallow_proxying()


def test_case_8():
    str_0 = "W1;#vHgHu5L#-3\r"
    module_0.lazy_import(str_0, str_0)


def test_case_9():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0, none_type_0
    )
    module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0, illegal_use_of_scope_replacer_0
    )


def test_case_10():
    str_0 = "_%s_lazy_%sl"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, dict_0)
    import_replacer_0.__getattribute__(import_replacer_0)


def test_case_11():
    str_0 = "Restore the original function to re.comple).\n\n    It is safe to call reseZ_compile() multiple times, it wll always\n    restorepre.compile() to the value that existed at import tie.\n    Though the first call will rest back to the original(it doesn't\n    track nesting level)\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_12():
    bytes_0 = b"u\x05\xca\xd0\xda\xc8il\x01\x98\x90\x11\\\xff\x99"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bytes_0, bytes_0, bytes_0
    )
    module_0.ImportReplacer(
        bytes_0,
        illegal_use_of_scope_replacer_0,
        bytes_0,
        illegal_use_of_scope_replacer_0,
        bytes_0,
    )


def test_case_13():
    str_0 = "@yI(Q"
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = "()"
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reseZ_compile() multiple times, it will always\n    restorepre.compile() to the value that existed at import time.\n    Though the first call will rest back to the original (it doesn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reseZ_com7ile( multiple times, it will always\n    restorepre.ompile() to the value that existed at import time.\n    Though the first call will est back to the original (it doesn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_17():
    str_0 = "utf&8"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
    import_replacer_0.__getattribute__(dict_0)


def test_case_18():
    dict_0 = {}
    float_0 = -2442.713994
    import_replacer_0 = module_0.ImportReplacer(dict_0, float_0, dict_0)
    none_type_0 = None
    scope_replacer_0 = module_0.ScopeReplacer(dict_0, import_replacer_0, none_type_0)
    scope_replacer_0.__call__()
