# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    set_0 = set()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        set_0, set_0, set_0
    )


def test_case_1():
    set_0 = set()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        set_0, set_0, set_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_2():
    str_0 = "Re=tore the original function to re.compile().\n\n   It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_3():
    str_0 = "\x0c4W1y\r\tt Ui$J"
    module_0.ImportReplacer(str_0, str_0, str_0, str_0)


def test_case_4():
    set_0 = module_0.disallow_proxying()
    none_type_0 = None
    module_0.ImportReplacer(set_0, none_type_0, none_type_0, set_0)


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    str_0 = "\x0c4W1y0\r\tt Ui$J"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_7():
    var_0 = module_0.disallow_proxying()


def test_case_8():
    str_0 = "\x0c4W1y0\r\tti$J"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_9():
    str_0 = "3lL8#6.h*$b+:wl"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_10():
    str_0 = "\x0c4W1y0\r\tti$J"
    float_0 = 51.9
    list_0 = [str_0, str_0, float_0]
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, list_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    var_1 = var_0.__repr__()


def test_case_11():
    var_0 = module_0.disallow_proxying()
    str_0 = ""
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    str_0 = "\nUtilities to work with files.\n"
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    str_0 = "Upon request import 'module_path' as the name 'module_name'.\n        When imported, prepare children to also be imported.\n\n        :param scope: The scope that objects should be imported into.\n            Typically this is globals()\n        :param name: The variable name. Often this is the same as the\n            module_path. 'bzrlib'\n        :param module_path: A list for the fully specified module path\n            ['bzrlib', 'foo', 'bar']\n        :param member: The member inside the module to import, often this is\n            None, indicating the module is being imported.\n        :param children: Children entries to be imported later.\n            This should be a map of children specifications.\n            ::\n            \n                {'foo':(['bzrlib', 'foo'], None,\n                    {'bar':(['bzrlib', 'foo', 'bar'], None {})})\n                }\n\n        Examples::\n\n            import foo => name='foo' module_path='foo',\n                          member=None, children={}\n            import foo.bar => name='foo' module_path='foo', member=None,\n                              children={'bar':(['foo', 'bar'], None, {}}\n            from foo import bar => name='bar' module_path='foo', member='bar'\n                                   children={}\n            from foo import bar, baz would get translated into 2 import\n            requests. On for 'name=bar' and one for 'name=baz'\n        "
    var_0 = module_0.disallow_proxying()
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_14():
    str_0 = "<(>:a%yf)tq>:^"
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_16():
    str_0 = "Re=tore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, t will always\n    restore re.compile() to the value that Rxisted at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, dict_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_17():
    bytes_0 = b"\xff\xed\x10\xab\xb0\x12H\xe9\xcc\xd2\x91\x9f\x15:\xe0\xad\x1e"
    module_0.ImportReplacer(bytes_0, bytes_0, bytes_0, bytes_0, bytes_0)


def test_case_18():
    str_0 = "Re=tore the original functionto be.compile().\n    It is sfe to callReset_compile(L multipletimes, it will always\n    reshore re.compile() to {he value<that existed at i4por! time.\n    Though the first call will reset back to the original (it doesn't\n   track nestiW lvel)\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_19():
    str_0 = "RJ1\x0c>\\"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0)
    module_0.lazy_import(str_0, import_replacer_0)
