# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    float_0 = 1488.706
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        float_0, float_0, float_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_1():
    int_0 = 1113
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        int_0, int_0, none_type_0
    )


def test_case_2():
    var_0 = module_0.disallow_proxying()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        var_0, var_0, var_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_3():
    str_0 = "S>VXt|#9[TCGJEVq{B"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_4():
    str_0 = "\n    Iterate over running totals, ie [a,b,c,d] -> func( func( func(a, b), c), d) with eachfunc result yielded.\n    Func is operator.add by default.\n\n    >>> list(accumulate([1,2,3,4,5]))\n    [1, 3, 6, 10, 15]\n    >>> list(accumulate([1,2,3,4,5], operator.mul))\n    [1, 2, 6, 24, 120]\n\n    :param iterable: Iterable\n    :param func: meth&d (default=operator.add) to call for each pair of (last call result or first item, next item)\n    :return generator: Generator\n    "
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, children=dict_0)
    module_0.lazy_import(dict_0, import_replacer_0)


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    str_0 = "J4)\\=(f#J"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_7():
    str_0 = "\n    Iterate over running totals, ie [a,b,c,d] -> func( func( func(a, b), c), d) with each func result yielded.\n    Func is operator.add by default.\n\n    >>> list(accumulate([1,2,3,4,5]))\n    [1, 3, 6, 10, 15]\n    >>> list(accumulate([1,2,3,4,5], operator.mul))\n    [1, 2, 6, 24, 120]\n\n    :param iterable: Iterable\n    :param func: method (default=operator.add) to call for each pair of (last call result or first item, next item)\n    :return generator: Generator\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_8():
    str_0 = "86O.'N(qX$G((xE\x0c3\\2/"
    module_0.lazy_import(str_0, str_0)


def test_case_9():
    import_processor_0 = module_0.disallow_proxying()


def test_case_10():
    str_0 = "J4)\\=(f#J"
    module_0.lazy_import(str_0, str_0)


def test_case_11():
    str_0 = "\n    Iterate over running totals, ie [a,b,c,d] -> func( func( func(a, b), c), d) with eachfunc result yielded.\n    Func is operator.add by default.\n\n    >>> list(accumulate([1,2,3,4,5]))\n    [1, 3, 6, 10, 15]\n    >>> list(accumulate([1,2,3,4,5], operator.mul))\n    [1, 2, 6, 24, 120]\n\n    :param iterable: Iterable\n    :param func: meth&d (default=operator.add) to call for each pair of (last call result or first item, next item)\n    :return generator: Ge}erator\n    "
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, str_0)
    module_0.lazy_import(dict_0, str_0)


def test_case_12():
    float_0 = -576.203454
    module_0.ImportReplacer(float_0, float_0, float_0, float_0, float_0)


def test_case_13():
    str_0 = 'p\t*f"HD !'
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_14():
    str_0 = "__copy__"
    import_processor_0 = module_0.ImportProcessor()
    str_1 = ""
    module_0.lazy_import(str_0, str_1)


def test_case_15():
    str_0 = "  & Iterate over running totals,Vie [a,b,c,d] -> func( func func(a, b), c), d) with each func result yielded.\n    Func is operator.add by default.\n\n    >>> list(accumulate([1,2,3,4,5]K)\n    [@, 3, 6, 10, 15]\n    >>> list(accudulate([1,2,3,4,5], operator.mul))\n 3  [1, 2, 6, 24, 120]\n\n    :(aram iterable: Iterable\n  e :param func: metod (default=operator.add) to call for each pair of (last call result or first item, nFxt item)\n    :return6generator: Generator\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_16():
    str_0 = "  & Iterate over running totals,Vie [a,b,c,d] -> func( func func(a, b), c), d)Vwith each func result yielded.\n    Func is operator.add by dfault.\n\n    >>> list(accumulate([1,2,3,4,5]K)\n    [@, 3, 6, 10, 15]\n    >>> list(accudulate([1,2,3,4,5], operator.mul))\n 3  [1, 2, 6, 24, 10]\n\n    :(aram iterable: Iterable\n  e :param func: metod (default=operator.add) to call for each pair of (last call result or first item, nxt item\n    :return6generator: Generator\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_17():
    str_0 = "\n    Iterate over running totals, ie [a,b,c,d] -> func( func( func(a, b), c), d) with eachfunc result yielded.\n    Func is operator.add by default.\n\n    >>> list(accumulate([1,2,3,4,5]))\n    [1, 3, 6, 10, 15]\n    >>> list(accumulate([1,2,3,4,5], operator.mul))\n    [1, 2, 6, 24, 120]\n\n    :param iterable: Iterable\n    :param func: meth&d (default=operator.add) to call for each pair of (last call result or first item, next item)\n    :return generator: Ge}erator\n    "
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, str_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)
