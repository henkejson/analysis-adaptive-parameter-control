# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "\n    Decorator to dedupe it's outut iterable automatically.\n\n    :param f: Wrapped meth\n    :param instance: wrapt provided property for decorating hydrated class instances (unused)    :param args: Passthrough args\n    :param kwargs: Passthroug kwargs\n    :return decorator: Decorator metod that ingests iterables and dedupes hem iteratively.\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_1():
    str_0 = "G?: @5a"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0.__repr__()


def test_case_2():
    none_type_0 = None
    import_processor_0 = module_0.ImportProcessor()
    module_0.ImportReplacer(none_type_0, none_type_0, import_processor_0, none_type_0)


def test_case_3():
    import_processor_0 = module_0.ImportProcessor()


def test_case_4():
    str_0 = "PHC9nQL8QM]$z`"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_5():
    str_0 = "x%ZqbNK ,2=+ `\x0b\x0c?U"
    module_0.lazy_import(str_0, str_0)


def test_case_6():
    var_0 = module_0.disallow_proxying()


def test_case_7():
    str_0 = "PHC9nQL8QM]$z`"
    module_0.ImportReplacer(str_0, str_0, str_0, str_0)


def test_case_8():
    str_0 = "\n    Decorator to dedupe it's outut iterable automatically.\n\n    :param f: Wrapped meth\n    :param instance: wrapt provided property for decorating hydrated class instances (unused)    :param args: Passthrough args\n    :param kwargs: Passthroug kwargs\n    :return decorator: Decorator metod that ingests iterables and dedupes hem iteratively.\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_9():
    str_0 = "\n    Decorator to dedupe it's output iterable automatically.\n\n    :param f: Wrapped meth\n    :param instance: wrapt provided property for decorating hydrated class instances (unused)\n    :param args: Passthrough args\n    :param kwargs: Passthrough kwargs\n    :return decorator: Decorator method that ingests iterables and dedupes them iteratively.\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_10():
    str_0 = "W\x0b%?3Q(pg|-#\np?"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_11():
    str_0 = "z)})X{,\n[Y\x0cSA\t(|_"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_12():
    import_processor_0 = module_0.ImportProcessor()
    str_0 = ""
    import_processor_1 = module_0.ImportProcessor()
    import_processor_1.lazy_import(str_0, str_0)


def test_case_13():
    str_0 = "search"
    none_type_0 = None
    module_0.ImportReplacer(str_0, str_0, none_type_0, str_0, str_0)


def test_case_14():
    str_0 = "\n    Decorator to dedupe it's outut iterable automatically.\n\n    :param f: Wrapped meth\n    :param instance: wrapt provided property for decorating hydrated class instances (unused)    :param args: Passthrough args\n    :param kwargs: Passthroug kwargs\n    :return decorator: Decorator metod that ingests iterables and dedupes hem iteratively.\n    "
    dict_0 = {str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, children=dict_0)
    module_0.lazy_import(dict_0, import_replacer_0)


def test_case_15():
    str_0 = "\x0bgIyT2#>v0jx}er"
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = "W\x0b%?3Q(pg|-#\np?"
    module_0.lazy_import(str_0, str_0)


def test_case_17():
    str_0 = "\n  X Decorator to dedupe it's \x0butput iterable autogatically.\n(    :param f: Wrapped meth\n    :param instance: wraptprovided property for decorating hydrated class instances (unused)\n    :param args: Passthrough args\n    :param kwargs: Passthrough kwargs\n    :return decorator: Decorator method that ingests iterables and dedupes Them iteratively.\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_18():
    str_0 = "\n    Decoratoj to dedupe it's outut iterable automatical]y.\n\n    :param f: Wrapped meth\n    :param inst-nce: wrapt provided property for decorating hydrated clas~ instances (unused)    :param args: Passthrough args\n    :param kwargs: Passthroug kwargs\n    :return decorator:dDecorator meod that ingsts iterables and dedupes hem iterativel^.\n    "
    dict_0 = {str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, str_0)
    module_0.lazy_import(dict_0, import_replacer_0)
