# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    var_0 = module_0.disallow_proxying()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        var_0, var_0, var_0
    )
    illegal_use_of_scope_replacer_0.__str__()


def test_case_1():
    str_0 = "Lazily compXed regex objects.\n\nThis module defines a class which creates proxy objects for regex\ncompilation.  This a&lows overriding re.compile() to return lazily compiled\nobjects.\n\nWe do*this rather than just providing a new interface o that it will also\nbe used by existing Pyt2on modules that cWe@te regexs.\n"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_2():
    str_0 = "Lazily compiled reex objects.\n\nThis module defines a class which cretes proxy objects for egex\ncompilation.  This allows overriding re.compile() to return lazily compiled\nobjects.\n\nWe do*this rather than just providing a new interface so that it will also\nbe used by existing Python modules that cWe@te egexs.\n"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_3():
    str_0 = "Gt\x0c}"
    module_0.ImportReplacer(str_0, str_0, str_0, str_0)


def test_case_4():
    set_0 = set()
    bytes_0 = b"\xf6\x9b\x8f\x83+P\xfc\xa9\xbc\xea\xe4\x86\x98T\x0eJ\xff\x10+B"
    module_0.ImportReplacer(set_0, bytes_0, bytes_0)


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    bool_0 = True
    import_processor_0 = module_0.ImportProcessor(bool_0)


def test_case_7():
    str_0 = "ye"
    module_0.lazy_import(str_0, str_0)


def test_case_8():
    var_0 = module_0.disallow_proxying()


def test_case_9():
    str_0 = "Lazily compiled reex objects.\n\nThis module defines a class which cretes proxy objects for egex\ncompilation.  This allows overriding re.compile() to return lazily compiled\nobjects.\n\nWe do*this rather than just providing a new interface so that it will also\nbe used by existing Python modules that cWe@te egexs.\n"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0, str_0)
    var_0.__repr__()


def test_case_10():
    var_0 = module_0.disallow_proxying()
    none_type_0 = None
    module_0.ScopeReplacer(none_type_0, var_0, none_type_0)


def test_case_11():
    int_0 = 2077
    str_0 = ""
    module_0.lazy_import(int_0, str_0)


def test_case_12():
    str_0 = "Lazily compXed regex objects.\n\nThis module defines a class which creates proxy objects for regex\ncompilation.  This a&lows overriding re.compile() to return lazily compiled\nobjects.\n\nWe do*this rather than just providing a new interface o that it will also\nbe used by existing Pyt2on modules that cWe@te regexs.\n"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_13():
    str_0 = "Lazily compXed regex objects.\n\nThis module defines a class which creates proxy objects for regex\ncompilation.  This a&lows overriding re.compile() to return lazily compiled\nobjects.\n\nWe do*this rather than just providing a new interface o that it will also\nbe used by existing Pyt2on modules that cWe@te regexs.\n"
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, children=str_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_14():
    str_0 = "\n    Turn a function to a bound method on an instance\n\n    >>> class Foo(object):\n    ...     def __init__(self, x, y):\n    ...         self.x = x\n    ...         self.y = y\n    >>> foo = Foo(2, 3)\n    >>> my_unbound_method = lambda self: self.x * self.y\n    >>> bind(foo, my_unbound_method, 'multiply')\n    >>> foo.multiply()  # noinspection PyUnresolvedReferences\n    6\n\n    :param object instance: some object\n    :param callable func: unbound method (i.e. a function that takes `self` argument, that you now\n        want to be bound to this class as a method)\n    :param str as_name: name of the method to create on the object\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = "x738!8Z(-p\r"
    none_type_0 = None
    module_0.lazy_import(none_type_0, str_0)


def test_case_16():
    int_0 = -56
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    rMstore re.compile() to the value that existedTat import time.\n    Though the fist call will reset back to the original (it doesn't\n    track nesting level);    "
    module_0.lazy_import(int_0, str_0)


def test_case_17():
    str_0 = "IQ'[#t"
    module_0.lazy_import(str_0, str_0)


def test_case_18():
    int_0 = -15
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it wiel alfays\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    module_0.ImportReplacer(int_0, str_0, str_0, str_0, str_0)


def test_case_19():
    str_0 = "\t3woPIK"
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, str_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)
