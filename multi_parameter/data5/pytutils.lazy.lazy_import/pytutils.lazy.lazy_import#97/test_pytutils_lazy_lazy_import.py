# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0
import builtins as module_1


def test_case_0():
    str_0 = "T\\(\n)"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__str__()


def test_case_1():
    str_0 = "r"
    none_type_0 = None
    var_0 = module_0.IllegalUseOfScopeReplacer(none_type_0, str_0)


def test_case_2():
    str_0 = "\n    Walks up a domain by subdomain.\n\n    >>> split_domain_into_subdomains('this.is.a.test.skywww.net')\n    ['this.is.a.test.skywww.net', 'is.a.test.skywww.net', 'a.test.skywww.net', 'test.skywww.net', 'skywww.net']\n\n    "
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0.__unicode__()


def test_case_3():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    scope_replacer_0 = module_0.ScopeReplacer(dict_0, bool_0, bool_0)
    scope_replacer_0.__setattr__(dict_0, dict_0)


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()
    str_0 = "\\\\(.)"
    module_0.ImportReplacer(import_processor_0, str_0, str_0, import_processor_0)


def test_case_5():
    none_type_0 = None
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(
        dict_0, none_type_0, dict_0, none_type_0, none_type_0
    )
    import_replacer_0.__getattribute__(none_type_0)


def test_case_6():
    str_0 = "yo$.X*+X=Fl"
    dict_0 = {
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
    }
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0)
    module_1.object(**import_replacer_0)


def test_case_7():
    import_processor_0 = module_0.ImportProcessor()


def test_case_8():
    str_0 = "B()"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_9():
    str_0 = "\\\\()"
    module_0.lazy_import(str_0, str_0)


def test_case_10():
    str_0 = "k-T()"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_11():
    import_processor_0 = module_0.disallow_proxying()


def test_case_12():
    none_type_0 = None
    module_0.lazy_import(none_type_0, none_type_0, none_type_0)


def test_case_13():
    str_0 = 'E2U,z\x0c;"NMqB\x0b'
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = "T\\(\n)"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_15():
    str_0 = ""
    none_type_0 = None
    module_0.lazy_import(str_0, str_0, none_type_0)


def test_case_16():
    str_0 = "\n=j3j&,"
    module_0.lazy_import(str_0, str_0)


def test_case_17():
    str_0 = "5\rA@$#Bww:"
    module_0.lazy_import(str_0, str_0)


def test_case_18():
    str_0 = "|Q'(XfG\n7<E]B1OY"
    module_0.lazy_import(str_0, str_0)


def test_case_19():
    str_0 = "T\\(\n)"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_20():
    import_processor_0 = module_0.ImportProcessor()
    str_0 = "\\\\(.)"
    bytes_0 = b"\xfeF\x98\xb0\xc1l\xc6\xb9\xfa\x9e\xdbq\xff\x81Z\x85Q\xff"
    import_processor_1 = module_0.ImportProcessor(str_0)
    module_0.ImportReplacer(str_0, bytes_0, str_0, str_0, import_processor_0)


def test_case_21():
    str_0 = "\\\\(:\n)"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_22():
    str_0 = "yo$.X*+XFl"
    dict_0 = {
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
    }
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, dict_0)
    none_type_0 = None
    import_replacer_0.__setattr__(str_0, none_type_0)
