# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "console16m"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    module_0.lazy_import(str_0, str_0)


def test_case_1():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )


def test_case_2():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_3():
    str_0 = "\n    Parses env file content.\n\n    From honcho.\n\n    >>> lines = ['TEST=${HOME}/yeee', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../yeee'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_4():
    str_0 = '"\n    Deduplicates an iterator iteratively using hashed values in a set.\n    Not exactly memory efficient because of that of course.\n    If you have a large dataset with high cardinality look at HyperLogLog instead.\n\n    :return generator: Iterator of deduplicated results.\n    '
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_5():
    str_0 = "O\nTxU\\*:8q2^Vv&!o"
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, dict_0)
    import_replacer_0.__call__(**dict_0)


def test_case_6():
    none_type_0 = None
    module_0.ImportReplacer(none_type_0, none_type_0, none_type_0)


def test_case_7():
    import_processor_0 = module_0.ImportProcessor()


def test_case_8():
    str_0 = "\x0b0"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_9():
    var_0 = module_0.disallow_proxying()


def test_case_10():
    str_0 = ""
    dict_0 = {str_0: str_0, str_0: str_0}
    import_processor_0 = module_0.ImportProcessor()
    import_processor_0.lazy_import(dict_0, str_0)


def test_case_11():
    str_0 = "\n\n    >>> log = logging.getLogger(__name__)\n    >>> configure()\n    >>> log.info('test')\n\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    str_0 = "BU,7XH6oWw>ilz^b(:"
    none_type_0 = None
    module_0.lazy_import(none_type_0, str_0, str_0)


def test_case_13():
    str_0 = "\n    Parses env file content.\n\n    From honcho.\n\n    >>> lines = ['TEST=${HOME}/yeee', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../yeee'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = "U,7X=Hj6oWw>i)lz^b(:"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.ImportReplacer(str_0, str_0, str_0, dict_0, str_0)


def test_case_15():
    str_0 = "6#"
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = "\n    Parses env file content.\n\n    From honcho.\n\n    >>> lines = ['TEST=${HOME}/yeee', THISIS=~/a/test', 'OLO=~/s'aggins/$NONEISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> oad_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../#eeeY),\n             ('THISIS', '.../atest'),\n             ( YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DES_NOT_EXIST')])\n\n  > "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_17():
    str_0 = "O\nTxU\\*:8q2^Vv&!o"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    scope_replacer_0 = module_0.ScopeReplacer(dict_0, str_0, str_0)
    module_0.lazy_import(str_0, scope_replacer_0)


def test_case_18():
    str_0 = "'r|v)r^D|Gm({"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    none_type_0 = None
    import_replacer_0 = module_0.ImportReplacer(
        dict_0, str_0, dict_0, children=none_type_0
    )
    module_0.lazy_import(import_replacer_0, import_replacer_0)
