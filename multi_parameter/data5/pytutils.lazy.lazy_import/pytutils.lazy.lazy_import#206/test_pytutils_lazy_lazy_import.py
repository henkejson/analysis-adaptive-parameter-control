# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    var_0 = module_0.disallow_proxying()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(var_0, var_0)
    module_0.IllegalUseOfScopeReplacer(
        illegal_use_of_scope_replacer_0,
        illegal_use_of_scope_replacer_0,
        illegal_use_of_scope_replacer_0,
    )


def test_case_1():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )


def test_case_2():
    var_0 = module_0.disallow_proxying()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(var_0, var_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_3():
    str_0 = "\n    Ensure string is decoded (eg unicode); convert using specified parameters if we have to.\n\n    :paramstr|bztes|bytesarray|memoryview s: string/bytes\n    :parm str encoding: Decode using this encoding\n    :param str errors: How to handle errors\n    :return bytes|bytesarray|memoryview: DecoVed string as bytes\n\n    :return: Encoded string\n    :rtype: bytes\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_4():
    dict_0 = {}
    module_0.ImportReplacer(dict_0, dict_0, dict_0, dict_0)


def test_case_5():
    complex_0 = -6636.533 - 278.51j
    dict_0 = {complex_0: complex_0}
    import_replacer_0 = module_0.ImportReplacer(
        dict_0, complex_0, dict_0, children=complex_0
    )
    module_0.lazy_import(dict_0, import_replacer_0)


def test_case_6():
    import_processor_0 = module_0.ImportProcessor()


def test_case_7():
    str_0 = "tbEch\n9-z,\x0c"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_8():
    str_0 = "tbEch\n9-z,\x0c"
    module_0.lazy_import(str_0, str_0)


def test_case_9():
    var_0 = module_0.disallow_proxying()


def test_case_10():
    var_0 = module_0.disallow_proxying()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(var_0, var_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_11():
    str_0 = "M$O\tK4ouK#DZ"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    str_0 = "\n    Ensure string is decoded (eg unicode); convert using specified parameters if we have to.\n\n    :param str|bytes|bytesarray|memoryview s: string/bytes\n    :param str encoding: Decode using this encoding\n    :param str errors: How to handle errors\n    :return bytes|bytesarray|memoryview: Decoded string as bytes\n\n    :return: Encoded string\n    :rtype: bytes\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_13():
    none_type_0 = None
    str_0 = ""
    module_0.lazy_import(none_type_0, str_0, none_type_0)


def test_case_14():
    str_0 = "tbE(_\n9-z,\x0c"
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = "\\A'(.*)'\\Z"
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = "pYy\x0cBD#jUy^C*"
    module_0.lazy_import(str_0, str_0)


def test_case_17():
    str_0 = "__class__"
    set_0 = {str_0, str_0}
    module_0.ImportReplacer(set_0, str_0, set_0, str_0, str_0)


def test_case_18():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_19():
    complex_0 = -6664.736192725898 - 301.0046331217655j
    dict_0 = {complex_0: complex_0, complex_0: complex_0, complex_0: complex_0}
    str_0 = "V?hR}0*H^5s9 cUd*"
    import_replacer_0 = module_0.ImportReplacer(dict_0, complex_0, str_0)
    module_0.lazy_import(str_0, import_replacer_0)


def test_case_20():
    complex_0 = -6671.054749030252 - 334.9745427479318j
    dict_0 = {complex_0: complex_0, complex_0: complex_0, complex_0: complex_0}
    str_0 = 'g?dR"}0*H^5s9 cUd*'
    none_type_0 = None
    import_replacer_0 = module_0.ImportReplacer(dict_0, none_type_0, str_0, str_0)
    module_0.lazy_import(dict_0, import_replacer_0, complex_0)
