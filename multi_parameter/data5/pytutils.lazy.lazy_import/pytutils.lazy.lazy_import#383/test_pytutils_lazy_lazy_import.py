# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import builtins as module_0
import pytutils.lazy.lazy_import as module_1


def test_case_0():
    base_exception_0 = module_0.BaseException()
    illegal_use_of_scope_replacer_0 = module_1.IllegalUseOfScopeReplacer(
        base_exception_0, base_exception_0
    )
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_1():
    int_0 = 15
    illegal_use_of_scope_replacer_0 = module_1.IllegalUseOfScopeReplacer(
        int_0, int_0, int_0
    )
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_2():
    str_0 = "Lazily compiled regex objects.\n\nThis module defines a class which creates proxy objects for regex\ncompilation.  This allows overriding re.compile() to return lazily compiled\nobjects.\n\nWe do this rather than just providing a new interface so !hat it will also\nbe used by existing Python modules that create regexs.\n"
    illegal_use_of_scope_replacer_0 = module_1.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_3():
    bool_0 = True
    none_type_0 = None
    module_1.ImportReplacer(bool_0, none_type_0, none_type_0, bool_0)


def test_case_4():
    str_0 = "qd:^P'HT"
    bool_0 = False
    module_1.ImportReplacer(str_0, bool_0, bool_0)


def test_case_5():
    import_processor_0 = module_1.ImportProcessor()


def test_case_6():
    str_0 = "(@3cQ\t:_k\r"
    module_1.lazy_import(str_0, str_0, str_0)


def test_case_7():
    str_0 = "<$\nLQ2{Z!\n~#z}="
    module_1.lazy_import(str_0, str_0, str_0)


def test_case_8():
    str_0 = "(@3cQ\t:_k\r"
    module_1.lazy_import(str_0, str_0)


def test_case_9():
    import_processor_0 = module_1.disallow_proxying()


def test_case_10():
    base_exception_0 = module_1.disallow_proxying()
    illegal_use_of_scope_replacer_0 = module_1.IllegalUseOfScopeReplacer(
        base_exception_0, base_exception_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_11():
    str_0 = "Lazily compiled regex objects.\n\nThis module defines a class which creates proxy objects for regex\ncompilation.  This allows overriding re.compile() to return lazily compiled\nobjects.\n\nWe do this rather than just providing a new interface so that it will also\nbe used by existing Python modules that create regexs.\n"
    module_1.lazy_import(str_0, str_0)


def test_case_12():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple tims, it will always\n    restore re.compile() to the value that xisted at import time.\n    Though the first call will reset backto the original (it doesn't\n    track nesting lvel)\n    "
    illegal_use_of_scope_replacer_0 = module_1.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_13():
    exception_0 = module_0.Exception()
    str_0 = "*:I9*bu<+05:G"
    module_1.ImportReplacer(str_0, str_0, str_0, str_0, str_0)


def test_case_14():
    str_0 = "#a\x0cRL/mL"
    import_processor_0 = module_1.ImportProcessor()
    import_processor_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = 'e"(V!L@/#\nVS2U!\tzuF'
    module_1.lazy_import(str_0, str_0)


def test_case_16():
    var_0 = module_1.disallow_proxying()
    dict_0 = {var_0: var_0, var_0: var_0, var_0: var_0, var_0: var_0}
    import_replacer_0 = module_1.ImportReplacer(dict_0, var_0, var_0)
    module_1.lazy_import(var_0, import_replacer_0)


def test_case_17():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    module_1.lazy_import(str_0, str_0)


def test_case_18():
    var_0 = module_1.disallow_proxying()
    var_1 = var_0.__str__()
    dict_0 = {var_0: var_0, var_0: var_0, var_0: var_0, var_0: var_0}
    import_replacer_0 = module_1.ImportReplacer(dict_0, var_0, var_1)
    module_1.lazy_import(import_replacer_0, import_replacer_0)
