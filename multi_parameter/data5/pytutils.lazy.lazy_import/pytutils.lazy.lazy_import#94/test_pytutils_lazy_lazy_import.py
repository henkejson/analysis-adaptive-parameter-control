# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0
import builtins as module_1


def test_case_0():
    str_0 = "m"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_1():
    base_exception_0 = module_1.BaseException()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        base_exception_0, base_exception_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_2():
    str_0 = "\n    Decorator to dedupe it's output iterable automatically.\n\n    :param f: Wrapped meth\n    :param instance: wrapt provided property for decorating hydrated class instances (un\nsed)\n    :param args: Passthrough args\n    :param kwargs: Passthrough kwargs\n    :return decorator: Decorator method that ingests iterables and dedupes them iteratively.\n    "
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, str_0)
    import_replacer_0.__setattr__(str_0, str_0)


def test_case_3():
    none_type_0 = None
    module_0.ImportReplacer(none_type_0, none_type_0, none_type_0)


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    str_0 = "Z\tvwAb\t7}leCS"
    import_processor_0 = module_0.ImportProcessor(str_0)


def test_case_6():
    str_0 = "m"
    module_0.lazy_import(str_0, str_0)


def test_case_7():
    str_0 = "\n    Decorator to dedupe it's output iterable automatically.\n\n    :param f: Wrapped meth\n    :param instance: wrapt provided property for decorating hydrated class instances (un\nsed)    :param args: Passthrough args\n    :param kwargs: Passthrough kwargs\n    :return decorator Decorator method that ingests iterables and dedupes them iteratively.\n    "
    none_type_0 = None
    module_0.lazy_import(str_0, str_0, none_type_0)


def test_case_8():
    var_0 = module_0.disallow_proxying()


def test_case_9():
    str_0 = "\n    Decorator to dedupe it's output iterable automatically.\n\n    :param f: Wrapped meth\n    :param instance: wrapt provided property for decorating hydrated class instances (unused)\n    :param args: Passthrough args\n    :param kwargs: Passthrough kwargs\n    :return decorator: Decorator method that ingests iterables and dedupes them iteratively.\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_10():
    str_0 = "\n    Decorator to dedupe it's output iterable automatically.\n\n    :param f: Wrapped meth\n    :param instance: wrapt provided property for decorating hydrated class instances (un\nsed)\n    :param args: Passthrough args\n    :param kwargs: Passthrough kwargs\n    :return decorator: Decorator method that ingests iterables and dedupes them iteratively.\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_11():
    base_exception_0 = module_0.disallow_proxying()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        base_exception_0, base_exception_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(base_exception_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_12():
    str_0 = "pprint"
    module_0.ImportReplacer(str_0, str_0, str_0, str_0, str_0)


def test_case_13():
    str_0 = "\n    Lazy/Cached property.\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_14():
    str_0 = ""
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_15():
    str_0 = "0#6S`YrNs\\ff/"
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    bool_0 = False
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(bool_0, bool_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_17():
    str_0 = "\nUtilities to work with files.\n"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0)
    module_0.lazy_import(dict_0, import_replacer_0)


def test_case_18():
    str_0 = "\n(   Decorator to dedupe it's output iterable automatically.\n\n    :paramf: Wrapped meth\n    :param instance: wrapt provided property for decorating hydra\\ed class instances (un\nsed)\n    :param args: Passthrough args\n    :param kwargs: Passthrough kwargs\n    :return decorator: Decorator method that ingests iterables and dedupes them iteratively.\n    "
    module_0.lazy_import(str_0, str_0)
