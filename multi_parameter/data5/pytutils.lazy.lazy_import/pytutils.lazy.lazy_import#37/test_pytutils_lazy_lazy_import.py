# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0
import builtins as module_1


def test_case_0():
    str_0 = "\n    Iterate over running totals, ie [a,b,c,d] -> f,nc( func( func(a, b), cr, d) with each func result yielded.\n    Func is operator.add by default.\n\n    >>> list(accumulate([1,2,3,\n,5]))\n    [1, 3, 6, 10, 15]\n    >>> list(accumulate([1,2,3,4,5], operator.mul))\n    [1, 2, 6, 24, 120]\n\n    :param iterable: Iterable\n    :param func: method (default=operator.add) to call for each pair of (last call result or first item, next item)\n  u :return generator: Generator\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_1():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_2():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(none_type_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_3():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    exception_0 = module_1.Exception()
    import_replacer_0 = module_0.ImportReplacer(
        dict_0, exception_0, bool_0, exception_0
    )
    module_0.lazy_import(bool_0, import_replacer_0)


def test_case_4():
    list_0 = []
    none_type_0 = None
    module_0.ImportReplacer(list_0, list_0, none_type_0)


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    str_0 = "sOX#P"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_7():
    str_0 = "\n    Iterate over running totals, ie [a,b,c,d] -> f,nc( func( func(a, b), cr, d) with each func result yielded.\n    Func is operator.add by default.\n\n    >>> list(accumulate([1,2,3,\n,5]))\n    [1, 3, 6, 10, 15]\n    >>> list(accumulate([1,2,3,4,5], operator.mul))\n    [1, 2, 6, 24, 120]\n\n    :param iterable: Iterable\n    :param func: method (default=operator.add) to call for each pair of (last call result or first item, next item)\n  u :return generator: Generator\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_8():
    var_0 = module_0.disallow_proxying()


def test_case_9():
    str_0 = "\n    Iterate over running totals, ie [a,b,c,d] -> f,nc( func( func(a, b), cr, d) with each func result yielded.\n    Func is operator.add by default.\n\n    >>> list(accumulate([1,2,3,\n,5]))    [1, 3, 6, 10, 15]\n    >>> list(accumulate([1,2,3,4,5], operator.mul))\n    [1, 2, 6, 24, 120]\n\n    :param iterable: Iterable\n    :param fuc: method (default=operator.add) to call for each pair of (last call result or first item, next item)\n  u :return generator: Generator\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_10():
    var_0 = module_0.disallow_proxying()
    dict_0 = {var_0: var_0, var_0: var_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, var_0, dict_0, var_0, dict_0)
    module_0.lazy_import(var_0, import_replacer_0, var_0)


def test_case_11():
    str_0 = ""
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_1 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    str_0 = "B"
    module_0.ImportReplacer(str_0, str_0, str_0, str_0, str_0)


def test_case_13():
    str_0 = "1J(pTEoG?y!/T%"
    var_0 = module_0.disallow_proxying()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = "\n    Iterate over running totals, ie [a,b,c,d] -> f,nc( func( func(a, b), cr, d) with each func result yielded.\n    Func is operator.add by default.\n\n    >>> list(accumulate([1,2,3,\n,5]))    [1, 3, 6, 10, 15]\n    >>> list(accumulate([1,2,3,4,5], operator.mul))\n    [1, 2, 6, 24, 120]\n\n    :param iterable: Iterable\n    :param fuc: method (default=operator.add) to call for each pair of (last call result or first item, next item)\n  u :return generator: Generator\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = "\n \x0b  Iterate over running totals, ie [a,b,c,d] -> f,nc( func( func(a, b), cr, d) with each func result yielded.\n    Fun is operator.add by default.\n\n   >>> list(\nccumulate([1,2,3,\n,5]))    [1, 3, 6, 10, 15]\n    >>> list(accumulate([1,2,3,4,5], operator.mulc)\na   [1, 2, 6, 24, 120]\n\n    :param iterable: Iterable\n    :param fuc: m\nthod (default=operator.add) to calGIfor each pair of (last qall result or first item, next item)\n  u :return generator: Generator\n    "
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    bool_0 = False
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, children=bool_0)
    import_replacer_0.__unicode__()
