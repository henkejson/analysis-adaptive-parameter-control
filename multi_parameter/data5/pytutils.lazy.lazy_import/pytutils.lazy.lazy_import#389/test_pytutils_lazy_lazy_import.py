# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "y\\"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0.__repr__()


def test_case_1():
    none_type_0 = None
    set_0 = {none_type_0}
    module_0.ImportReplacer(none_type_0, none_type_0, none_type_0, children=set_0)


def test_case_2():
    import_processor_0 = module_0.ImportProcessor()


def test_case_3():
    str_0 = "O"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_4():
    list_0 = module_0.disallow_proxying()


def test_case_5():
    str_0 = 'g\nR(7\nrDu-V3b`+{c"rH'
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_6():
    str_0 = "h>?PiGEH0\rl4lI\r"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_7():
    str_0 = "O"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_8():
    str_0 = "P!"
    none_type_0 = None
    dict_0 = {none_type_0: str_0, str_0: none_type_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(
        dict_0, str_0, str_0, str_0, none_type_0
    )
    import_replacer_0.__call__(**none_type_0)


def test_case_9():
    str_0 = "y\\"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_10():
    var_0 = module_0.disallow_proxying()
    str_0 = ""
    none_type_0 = None
    module_0.lazy_import(str_0, str_0, none_type_0)


def test_case_11():
    str_0 = "\n    Turn a function to a bound method on an instance\n\n    >>> class Foo(object):\n    ...     def __init__(self, x, y):\n    ...         self.x = x\n    ...         self.y = y\n    >>> foo = Foo(2, 3)\n    >>> my_unbound_method = lambda self: self.x * self.y\n    >>> bind(foo, my_unbound_method, 'multiply')\n    >>> foo.multiply()  # noinspection PyUnresolvedReferences\n    6\n\n    :param object instance: some object\n    :param callable func: unbound method (i.e. a function that takes `self` argument, that you now\n        want to be bound to this class as a method)\n    :param str as_name: name of the method to create on the object\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    str_0 = 'o"#et'
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    bytes_0 = b"\xca\xea\xc0`U"
    bool_0 = False
    bytes_1 = b"\xbab\xd2"
    module_0.ImportReplacer(bool_0, bytes_1, bytes_0, bytes_0, bytes_1)


def test_case_14():
    dict_0 = {}
    none_type_0 = None
    scope_replacer_0 = module_0.ScopeReplacer(dict_0, dict_0, none_type_0)
    module_0.lazy_import(dict_0, scope_replacer_0)


def test_case_15():
    str_0 = "\n    Turn a function to a bound method on an instance\n\n    >>> class Foo(object):\n    ...     def __init__(self, x, y):\n    ...         self.x = x\n    ...         self.y = y\n    >>> foo = Foo(2, 3)\n    >>> my_unbound_method = lambda self: self.x * self.y\n    >>> bind(foo, my_unbound_method, 'multiply')\n    >>> foo.multiply()  # noinspection PyUnresolvedReferences\n    6\n\n    :param object instance: some object\n    :param callable func: unbound method (i.e. a function that takes `self` argument, that you now\n        want to be bound to this class as a method)\n    :param str as_name: name of the method to create on the object\n    "
    complex_0 = -297.2818 - 1746.163j
    dict_0 = {str_0: str_0, str_0: str_0, str_0: complex_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, complex_0, str_0)
    import_replacer_0.__setattr__(complex_0, complex_0)
