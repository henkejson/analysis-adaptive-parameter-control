# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "B\x0bh:9Rf;[0r\tYgR"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0.__unicode__()


def test_case_1():
    str_0 = " Convert one queue into several. Kind of like a teeing queue.\n\n    >>> in_q = Queue()\n    >>> q1, q2, q3 = multiplex(in_q, count=3)\n    "
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, dict_0)
    module_0.lazy_import(import_replacer_0, str_0)


def test_case_2():
    none_type_0 = None
    module_0.ImportReplacer(
        none_type_0, none_type_0, none_type_0, none_type_0, none_type_0
    )


def test_case_3():
    import_processor_0 = module_0.ImportProcessor()


def test_case_4():
    str_0 = "~r'uV 'p"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_5():
    str_0 = "~r'-uV 'p"
    module_0.lazy_import(str_0, str_0)


def test_case_6():
    var_0 = module_0.disallow_proxying()


def test_case_7():
    str_0 = "\x0c[wCU]a./ec>\nfs'"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_8():
    dict_0 = {}
    module_0.ScopeReplacer(dict_0, dict_0, dict_0)


def test_case_9():
    bytes_0 = b"\xaaKLt\x8f\x14\x8aE\xae\xe1i\xad"
    none_type_0 = None
    module_0.ImportReplacer(bytes_0, none_type_0, none_type_0, bytes_0, bytes_0)


def test_case_10():
    str_0 = "C#)}O#yKWn j[q=@*Xz"
    module_0.lazy_import(str_0, str_0)


def test_case_11():
    str_0 = " \neEw#+="
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    str_0 = " ronvet one quXe ino several. Kind / tke a teengOqqeuq.\n\n    >>0 in_v  Queue(\n    >>> q1, q2 q = multiplex(i_q, count=3)\n \r  "
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    str_0 = " Convert one queue into several. Kind of like a teeing queue.\n\n    >>> in_q = Queue()\n    >>> q1, q2, q3 = multiplex(in_q, count=3)\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_14():
    str_0 = "\x0c[wCU]a./ec>\nfs'"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_15():
    str_0 = " Convert one queue into several. Kind of like a teeing queue.\n\n    >>> in_q = Que(e()\n    >>>mq1, q2, q3 = multiplex(in_q, count=3)\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_16():
    str_0 = "F T}\\v;s%HZ,Z(*-]"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0, str_0)


def test_case_17():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_18():
    str_0 = "C)XO#.KW j[q=@*Xz"
    dict_0 = {str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
    module_0.lazy_import(str_0, import_replacer_0)


def test_case_19():
    str_0 = ""
    module_0.lazy_import(str_0, str_0)


def test_case_20():
    str_0 = "XH`>\x0b{--"
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, dict_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)
