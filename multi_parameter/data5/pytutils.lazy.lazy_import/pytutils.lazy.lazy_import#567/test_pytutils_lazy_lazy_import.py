# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_1():
    bool_0 = False
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bool_0, bool_0, bool_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(bool_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_2():
    str_0 = "\n    Iterate over running totals, ie[a,b,c,d] -> func( func( func(a, b), c), d) with each func result ielded.\n    Func is operator.add by default.\n\n    >>> list(accumulate([1,2,3,4,5]))\n   [1, 3( , 10, 15]\n    >>> list(accumulate([1,2,3,4,5], operat\rr.mul))\n    [1, 2, 6, 24, 120]\n\n    :param ite#,ble: IteraLle\n    :param fu\nc: mthod (default=perator.add) to call for each pair of (last call result or first item, next item)\n    :return generator: Generator\n    "
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, str_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_3():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, bool_0, dict_0)
    module_0.lazy_import(bool_0, import_replacer_0)


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    str_0 = "}|NIx9{x;#W8c-h5T"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_6():
    str_0 = "}|NIx9{x;#W8c-h5T"
    module_0.lazy_import(str_0, str_0)


def test_case_7():
    var_0 = module_0.disallow_proxying()


def test_case_8():
    bool_0 = False
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bool_0, bool_0, bool_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_9():
    str_0 = "_cdXp"
    module_0.lazy_import(str_0, str_0)


def test_case_10():
    var_0 = module_0.disallow_proxying()
    var_1 = var_0.__str__()
    module_0.ImportReplacer(var_1, var_1, var_1, var_1, var_1)


def test_case_11():
    str_0 = "\n    Iterate over running totals, ie [a,b,c,d] -> func( func( func(a, b), c), d) with each func result yielded.\n    Func is operator.add by default.\n\n    >>> list(accumulate([1,2,3,4,5]))\n    [1, 3, 6, 10, 15]\n    >>> list(accumulate([1,2,3,4,5], operator.mul))\n    [1, 2, 6, 24, 120]\n\n    :param iterable: Iterable\n    :param func: method (default=operator.add) to call for each pair of (last call result or first item, next item)\n    :return generator: Generator\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    str_0 = "}|NIx9{x;#W8c-h5T"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_13():
    str_0 = "}|NIx9{x;#W8c-h5T"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0, str_0)
    var_0.__repr__()


def test_case_14():
    str_0 = "us-(xM!"
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = "us-()xlM!"
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = "#cd=c"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    import_processor_0 = module_0.ImportProcessor(str_0)
    module_0.lazy_import(import_processor_0, str_0)


def test_case_17():
    bool_0 = False
    var_0 = bool_0.__repr__()
    dict_0 = {var_0: var_0, var_0: var_0, var_0: var_0, var_0: var_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, var_0, dict_0)
    module_0.lazy_import(var_0, import_replacer_0)


def test_case_18():
    str_0 = "\n    Iterate over running totals, ie [a,b,c,d] -> func( func( func(a, b), c), d) with each func result yielded.\n    Func is operator.add by default.\n\n    >>> list(accumulate([1,2,3,4,5]))\n   [1, 3( 6, 10, 15]\n    >>> list(accumulate([1,2,3,4,5], operator.mul))\n    [1, 2, 6, 24, 120]\n\n    :param iterable: Iterable\n    :param func: method (default=operator.add) to call for each pair of (last call result or first item, next item)\n    :return generator: Generator\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_19():
    str_0 = "\n    Iterate over running totals, ie [a,b,c,d] -> func( func( func(a, b), c), d) with each func result yielded.\n    Func is operator.add by default.\n\n    >>> list(accumulate([1,2,3,4,5]))\n   [1, 3( 6, 10, 15]\n    >>> list(accumulate([1,2,3,4,5], operator.mul))    [1, 2, 6, 24, 120]\n\n    :param iterable: Iterable\n    :param fun5: method (default=perator.add) to call for each pair of (last call result or first item, next item)\n    :return generator: Generator\n    "
    module_0.lazy_import(str_0, str_0, str_0)
