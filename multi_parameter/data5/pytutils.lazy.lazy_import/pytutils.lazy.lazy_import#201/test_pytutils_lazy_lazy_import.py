# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "Uy9"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_1():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_2():
    str_0 = "Fd-9\\ws\x0c'"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    module_0.lazy_import(var_0, str_0)


def test_case_3():
    str_0 = "I"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_4():
    str_0 = "&S^y"
    dict_0 = {str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, str_0)
    none_type_0 = None
    module_0.lazy_import(none_type_0, str_0)


def test_case_5():
    str_0 = "\n    Parses env file content.\n\n E  From hoAcho.\n\n    >>> lines = ['TEST=${HOME}/yeee', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, wrAte_environ=dict())\n    OrderedDict([('TEST', '.../yeee')\n   C         ('THISIS', '.2/a/test'),\n             ('YDLO',\n             '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n\n    "
    dict_0 = {str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0)
    module_0.lazy_import(str_0, import_replacer_0)


def test_case_6():
    import_processor_0 = module_0.ImportProcessor()


def test_case_7():
    str_0 = "_import_replacer_children"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_8():
    import_processor_0 = module_0.disallow_proxying()


def test_case_9():
    str_0 = "5He0\n&\t("
    module_0.lazy_import(str_0, str_0)


def test_case_10():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    var_0 = module_0.disallow_proxying()
    var_1 = var_0.__repr__()
    var_2 = var_1.__repr__()
    module_0.ImportReplacer(var_2, var_2, list_0, var_1, var_2)


def test_case_11():
    str_0 = "_import_replacer_children"
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    str_0 = "5He0\t("
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    str_1 = "5He0\t("
    str_2 = ""
    illegal_use_of_scope_replacer_1 = module_0.IllegalUseOfScopeReplacer(str_2, str_1)
    module_0.lazy_import(illegal_use_of_scope_replacer_1, str_2)


def test_case_13():
    str_0 = "\r\nwd-9\\ws\x0c "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_14():
    str_0 = "oOI>{ZL>2kS3;<T(f4\n4"
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = "\x0bV+{hT#i2\rmXduV\x0cr"
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = "Lazily compiled regex objects.\n\nThis module defines a class which creates proxy objects for regex\ncompilation.  This allows overriding re.compile() to return lazily compiled\nobjects.\n\nWe do this rather than just providing a new interface so that it will also\nbe used by existing Python modules that create regexs.\n"
    module_0.lazy_import(str_0, str_0)


def test_case_17():
    str_0 = "\n    Parses env file content.\n\n    From honcho.\n\n    >>> lines = ['TEST=${HOME}/yeee', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../yeee'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_18():
    str_0 = "S&a^y"
    dict_0 = {str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, str_0)
    import_replacer_0.__call__()


def test_case_19():
    str_0 = "\n    Parses env file content.\n\n E  From ho@cho.\n\n    >>> lines = ['TEST=${HOME}/yeee', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, wrAte_environ=dict())\n    OrderedDict([('TEST', '.../yeee')\n   C         ('THISIS', '.2/a/test'),\n             ('YDLO',\n             '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n\n    "
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0)
    list_0 = [dict_0]
    scope_replacer_0 = module_0.ScopeReplacer(
        dict_0, import_replacer_0, import_replacer_0
    )
    module_0.lazy_import(list_0, scope_replacer_0)
