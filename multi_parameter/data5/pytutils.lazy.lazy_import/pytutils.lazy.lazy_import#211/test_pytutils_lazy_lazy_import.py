# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "datefmt"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_1():
    var_0 = module_0.disallow_proxying()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(var_0, var_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_2():
    str_0 = "E(LZ-?z0(.*)!Z"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    module_0.lazy_import(str_0, str_0)


def test_case_3():
    str_0 = "2bn\x0c"
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
    import_replacer_0.__setattr__(dict_0, str_0)


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    str_0 = "datefmt"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_6():
    str_0 = "datefmt"
    module_0.lazy_import(str_0, str_0)


def test_case_7():
    var_0 = module_0.disallow_proxying()


def test_case_8():
    str_0 = "datefmt"
    module_0.ScopeReplacer(str_0, str_0, str_0)


def test_case_9():
    str_0 = "\\A([A-Za-z_0-9]+)=(.*)\\Z"
    module_0.ImportReplacer(str_0, str_0, str_0, str_0)


def test_case_10():
    str_0 = "\n    Context manager that times it's execution.\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_11():
    str_0 = "(LZ-?z0(.)!Z"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_12():
    str_0 = "\\([A-Za-0-9]=(.*\n)\\Z"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_13():
    str_0 = "\\A([A-Za-z_0-9]+)=(.*)\\Z"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_14():
    str_0 = "L=IIjpohNt~`%qB5ql"
    illegal_use_of_scope_replacer_0 = module_0.disallow_proxying()
    var_0 = module_0.disallow_proxying()
    str_1 = 'J;P)qlWdv.C=/O"JdVG\\'
    import_processor_0 = module_0.ImportProcessor()
    module_0.ImportReplacer(
        illegal_use_of_scope_replacer_0, str_0, import_processor_0, str_1, str_0
    )


def test_case_15():
    str_0 = "#8g)Fp^J\n}."
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_16():
    complex_0 = 477.7936 - 1421.23383j
    str_0 = ""
    str_1 = "\n            Override __getattribute__ to hide the implementation details.\n            "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        complex_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_1)
    import_processor_0 = module_0.ImportProcessor()
    import_processor_1 = module_0.ImportProcessor()
    import_processor_1.lazy_import(str_1, str_0)


def test_case_17():
    str_0 = "Create lazy imports for all of the imports in text.\n\n    This is typically used as something like::\n\n        from bzrlib.lazy_import import lazy_import\n        lazy_import(globals(), '''\n        from bzrlib import (\n            foo,\n            bar,\n            baz,\n            )\n        import bzrlib.branch\n        import bzrlib.transport\n        ''')\n\n    Then 'foo, bar, baz' and 'bzrlib' will exist as lazy-loaded\n    objects which will be replaced with a real object on first use.\n\n    In general, it is best to only load modules in this way. This is\n    because other objects (functions/classes/variables) are frequently\n    used without accessing a member, which means we cannot tell they\n    have been used.\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_18():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    scope_replacer_0 = module_0.ScopeReplacer(dict_0, bool_0, bool_0)
    module_0.lazy_import(dict_0, scope_replacer_0)
