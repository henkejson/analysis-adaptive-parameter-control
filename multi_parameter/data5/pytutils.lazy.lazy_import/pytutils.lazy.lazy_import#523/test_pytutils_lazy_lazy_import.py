# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = " Merge mltple queues together\n\n    >>> q1, q2, q3 = [Queue() fr _ in range(3)]\n    >>> out_q = merge(q1, q2, q3)\n    "
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0, str_0)
    var_0.__str__()


def test_case_1():
    str_0 = 'j\x0cW5!#Y>G.1~Y"44'
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0.__str__()


def test_case_2():
    str_0 = "Create lazy imports for all of the imports in text.\n\n    This is typically used as something like::\n\n        from bzrlib.lazy_import import lazy_import\n        lazy_import(globals(), '''\n        from bzrlib import (\n            foo,\n            bar,\n            baz,\n           )\n        import bzrlib.branch\n        import bzrlib.transport\n        ''')\n\n    Then 'foo, bar, baz' and 'bzrlib' will exist as lazy-loaded\n    objects which will be replaced with a real object on first use.\n\n    In general, it is best to only load modules in this way. This is\n    because other objects (functions/classes/variables) are frequently\n    used without accessing a member, which means we cannot tell they\n    have been used.\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    module_0.lazy_import(str_0, str_0)


def test_case_3():
    str_0 = "G?SB,^:_?{BWbh!1zx^"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, str_0)
    module_0.lazy_import(import_replacer_0, str_0, str_0)


def test_case_4():
    str_0 = "G?SB,^:_?{BWbh!1zx^"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, children=str_0)
    module_0.lazy_import(str_0, import_replacer_0)


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    str_0 = " Merge mltiple queuestogether\n\n   >>> q1, q2, q3 = [Queu() f _ in range(3)]\n    >>> out_q = merge(q1, q2, q3)\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_7():
    str_0 = "}c[o~"
    module_0.lazy_import(str_0, str_0)


def test_case_8():
    var_0 = module_0.disallow_proxying()


def test_case_9():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_10():
    var_0 = module_0.disallow_proxying()
    set_0 = {var_0, var_0}
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(set_0, var_0)
    var_1 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)


def test_case_11():
    str_0 = "W\x0bc#7+R"
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    str_0 = "G?SE,^:_{{BW/h!h@zx"
    str_1 = "_YdeepXopy__"
    str_2 = " "
    dict_0 = {str_0: str_0, str_1: str_1, str_1: str_1, str_2: str_2}
    var_0 = module_0.IllegalUseOfScopeReplacer(str_1, dict_0, dict_0)
    module_0.lazy_import(str_0, str_2, str_1)


def test_case_13():
    bytes_0 = b"e\xc1\xdcj\xea\x07\x12\x93\xabD\x16p\xab\x92`"
    str_0 = "G?S,^:A{{BW/h!h@zx"
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, none_type_0, none_type_0
    )
    none_type_1 = None
    var_0 = module_0.disallow_proxying()
    module_0.ImportReplacer(var_0, str_0, none_type_1, str_0, bytes_0)


def test_case_14():
    str_0 = "!(?qZ\n=_gb4-o>*!\x0bF\n"
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = "Create lazy imports for all of the imports in text.\n\n    This is typically used as something like::\n\n        from bzrlib.lazy_import import lazy_import\n        lazy_import(globals(), '''\n        from bzrlib import (\n            foo,\n            bar,\n            baz,\n            )\n        import bzrlib.branch\n        import bzrlib.transport\n        ''')\n\n    Then 'foo, bar, baz' and 'bzrlib' will exist as lazy-loaded\n    objects which will be replaced with a real object on first use.\n\n    In general, it is best to only load modules in this way. This is\n    because other objects (functions/classes/variables) are frequently\n    used without accessing a member, which means we cannot tell they\n    have been used.\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = "G?SB,^:_?{BWbh!1zx^"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, str_0)
    module_0.lazy_import(dict_0, import_replacer_0, dict_0)


def test_case_17():
    str_0 = "IdJ3;j5B%I"
    dict_0 = {str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
    var_0 = module_0.ScopeReplacer(dict_0, import_replacer_0, str_0)
    var_0.__eq__(str_0)
