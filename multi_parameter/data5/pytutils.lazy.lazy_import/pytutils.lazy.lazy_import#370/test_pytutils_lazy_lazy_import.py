# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    int_0 = 569
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(int_0, int_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_1():
    int_0 = 569
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        int_0, int_0, int_0
    )
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_2():
    str_0 = "Restore he oiginal funcion to re.compie().\n\n    It is saf to call rest_compile() multiple times, it will alMays\n    estore re.compile(6 to the value that exsted at import time.\n   Though the fist cal will yoset back to the original (it doesn't\n    track nesting level)\n    "
    dict_0 = {str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, str_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_3():
    none_type_0 = None
    module_0.ImportReplacer(none_type_0, none_type_0, none_type_0)


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    int_0 = -524
    import_processor_0 = module_0.ImportProcessor(int_0)


def test_case_6():
    str_0 = "D.Mf9Qkx"
    module_0.lazy_import(str_0, str_0)


def test_case_7():
    var_0 = module_0.disallow_proxying()


def test_case_8():
    set_0 = set()
    int_0 = 1840
    module_0.ImportReplacer(set_0, set_0, set_0, set_0, int_0)


def test_case_9():
    str_0 = "Restore the original function to re.compile(.\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original(it doesn'\n    track nesting level)\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_10():
    int_0 = 569
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(int_0, int_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_11():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)_    "
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    str_0 = "AFO$#J<g8)\x0c($F])}4\tB"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_14():
    str_0 = ""
    list_0 = module_0.disallow_proxying()
    float_0 = -1863.948
    module_0.lazy_import(str_0, str_0, float_0)


def test_case_15():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will alMays\n    restore re.compile(6 to the value that existed at import time.\n   Though the first call will roset back to the original (it doesn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    scope_replacer_0 = module_0.ScopeReplacer(dict_0, dict_0, bool_0)
    scope_replacer_0.lazy_import(scope_replacer_0, scope_replacer_0)


def test_case_17():
    str_0 = "nr\nvT_5A0%e>"
    dict_0 = {str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0)
    import_replacer_0.__setattr__(str_0, import_replacer_0)
