# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "(deyug s%ell)"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_1():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0, none_type_0
    )


def test_case_2():
    str_0 = "pprint"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_3():
    dict_0 = {}
    str_0 = "9<"
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, dict_0)
    import_replacer_0.__call__(*str_0)


def test_case_4():
    var_0 = module_0.disallow_proxying()
    module_0.ImportReplacer(var_0, var_0, var_0, children=var_0)


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    str_0 = "|FF1*\x0cM)e(r?s+ekF?"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_7():
    import_processor_0 = module_0.disallow_proxying()


def test_case_8():
    bool_0 = False
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(bool_0, bool_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_9():
    none_type_0 = None
    module_0.lazy_import(none_type_0, none_type_0)


def test_case_10():
    bool_0 = False
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(bool_0, bool_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(bool_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_11():
    str_0 = "~k?z("
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_12():
    str_0 = "ppri^it"
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    bool_0 = True
    module_0.ImportReplacer(bool_0, bool_0, bool_0, bool_0, bool_0)


def test_case_14():
    int_0 = -384
    str_0 = ""
    module_0.lazy_import(int_0, str_0)


def test_case_15():
    str_0 = "\n    Lazy/Cached class property that stores separate instances per class/inheritor so there's no overlap.\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = "L/Cj#\x0bW3Exj"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_17():
    dict_0 = {}
    none_type_0 = None
    scope_replacer_0 = module_0.ScopeReplacer(dict_0, dict_0, none_type_0)
    module_0.lazy_import(none_type_0, scope_replacer_0, dict_0)


def test_case_18():
    str_0 = "Y5{f^:U(\rXi\nS^-K"
    module_0.lazy_import(str_0, str_0)


def test_case_19():
    str_0 = "(deyug\n/%ell)"
    module_0.lazy_import(str_0, str_0)


def test_case_20():
    dict_0 = {}
    str_0 = "9<"
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, children=str_0)
    import_replacer_0.__call__()


def test_case_21():
    dict_0 = {}
    str_0 = "9<"
    none_type_0 = None
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, none_type_0)
    var_0 = module_0.ScopeReplacer(dict_0, import_replacer_0, none_type_0)
    var_0.__unicode__()
