# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "+)4.(Ecg/2=!"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0, str_0)
    var_0.__unicode__()


def test_case_1():
    set_0 = set()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(set_0, set_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_2():
    str_0 = "fqIa UoZ6;Si.DKc"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    module_0.lazy_import(str_0, str_0)


def test_case_3():
    str_0 = "Vy0%*G"
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, str_0)
    module_0.lazy_import(dict_0, import_replacer_0)


def test_case_4():
    none_type_0 = None
    module_0.ImportReplacer(none_type_0, none_type_0, none_type_0, children=none_type_0)


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    str_0 = "C6d9E/0hC"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_7():
    str_0 = "C6d9E/0hC"
    module_0.lazy_import(str_0, str_0)


def test_case_8():
    var_0 = module_0.disallow_proxying()


def test_case_9():
    str_0 = "\"-^'SEN>#("
    module_0.lazy_import(str_0, str_0)


def test_case_10():
    str_0 = ""
    none_type_0 = None
    import_processor_0 = module_0.ImportProcessor()
    module_0.lazy_import(none_type_0, str_0)


def test_case_11():
    str_0 = "\nW*}t"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_12():
    str_0 = "("
    none_type_0 = None
    module_0.lazy_import(none_type_0, str_0)


def test_case_13():
    str_0 = "+)4.(Ecg/2=!"
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    float_0 = -1000.0349603915275
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(
        dict_0, float_0, float_0, children=float_0
    )
    module_0.lazy_import(dict_0, import_replacer_0)


def test_case_16():
    str_0 = "("
    none_type_0 = None
    none_type_1 = None
    int_0 = 2
    set_0 = {none_type_0, none_type_1}
    module_0.ImportReplacer(int_0, int_0, set_0, set_0, str_0)


def test_case_17():
    str_0 = "+)4.(Ecg/2=!"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = module_0.disallow_proxying()
    var_1 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)


def test_case_18():
    str_0 = "Restope the original function torecompile().\n\n    t is safe to call reset_comple( mulaiple times, it will always\n    r\rstore recompile() to the value that existed at importPtime.\n    Though the first call will reEet back to the original (it doesn't\n    track nesing level)\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_19():
    str_0 = " :V#f>v1ZTQEKoPbe#j"
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, children=dict_0)
    module_0.lazy_import(dict_0, import_replacer_0)
