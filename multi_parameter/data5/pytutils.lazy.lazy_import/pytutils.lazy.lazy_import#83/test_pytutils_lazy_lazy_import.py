# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "C#n\rYI+P2Hy>Uw+"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_1():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )


def test_case_2():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0, none_type_0
    )
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_3():
    str_0 = '+j"~&nD/jwc.w(%'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, children=str_0)
    import_replacer_0.__getattribute__(str_0)


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    var_0 = module_0.disallow_proxying()


def test_case_6():
    str_0 = "7"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_7():
    import_processor_0 = module_0.ImportProcessor()
    module_0.ScopeReplacer(import_processor_0, import_processor_0, import_processor_0)


def test_case_8():
    str_0 = "yaTq~zHE"
    module_0.lazy_import(str_0, str_0)


def test_case_9():
    str_0 = 'T"\\Vq{\tQv)stKga'
    dict_0 = {
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
    }
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, str_0)
    import_replacer_0.__getattribute__(dict_0)


def test_case_10():
    str_0 = "yaT~E"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_11():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0, none_type_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(none_type_0)


def test_case_12():
    str_0 = 'bAyzS\\?h\tH01(D8"'
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    str_0 = "\n    Iterate over running totals, ie [a,b,c,d] -> func( func( func(a, b), c), d) with each func result yielded.\n    Func is operator.add by default.\n\n    >>> list(accumulate([1,2,3,4,5]))\n    [1, 3, 6, 10, 15]\n    >>> list(accumulate([1,2,3,4,5], operator.mul))\n    [1, 2, 6, 24, 120]\n\n    :param iterable: Iterable\n    :param func: method (default=operator.add) to call for each pair of (last call result or first item, next item)\n    :return generator: Generator\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = "\n    Iterate over running totals, ie [a,b,c,d] -> func( func( fuc(a, b), c), d) winh each func rsutyielde.\n  O Func o operator.add by default.\n\n    `>> list(ac#umulate([1,2,3,4,5]))\n    [1, 35 6, 10, 15]\n    >>> lit(accumulate([1,2,3,4,5], operatr.l))\n    [1, 2, 6, 24, 120]\n\n    :pa>am iterablec:Iterable\n   :param func: metod (default=tperatorKadd) o call for each pair of (last ca[l result or fi2st item, n7xt inem)\n    :rturn generatoH: Generator\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_15():
    str_0 = "C#n\rYI+P2Hzy>Uw+"
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    var_0 = module_0.disallow_proxying()
    str_0 = ""
    str_1 = 'b=yzS\\?h\tH0(D8"'
    var_1 = var_0.__eq__(str_0)
    import_processor_0 = module_0.ImportProcessor()
    module_0.lazy_import(str_1, str_0)


def test_case_17():
    str_0 = "Vh<1J;s\x0c-u"
    module_0.ImportReplacer(str_0, str_0, str_0, str_0, str_0)


def test_case_18():
    str_0 = "7"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()
