# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    hough the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__str__()


def test_case_1():
    str_0 = "Cannot supply both a member and children"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    module_0.lazy_import(str_0, str_0)


def test_case_2():
    str_0 = "Cannot supply both a membe and chldren"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_3():
    str_0 = "Cannot supply both a membe and chldren"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_4():
    str_0 = "Restore the or7ginal function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compife() to the value that existed at import time.\n    Though th firs call will reset back to the original (it doesn't\n    track nesting level)\n    "
    dict_0 = {str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, str_0)
    module_0.lazy_import(str_0, import_replacer_0)


def test_case_5():
    var_0 = module_0.disallow_proxying()
    dict_0 = {var_0: var_0, var_0: var_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, var_0, var_0, var_0)
    module_0.lazy_import(dict_0, import_replacer_0, dict_0)


def test_case_6():
    import_processor_0 = module_0.ImportProcessor()


def test_case_7():
    str_0 = "\n    Ensure string is encoded as byteslike; convert using specified parameters if we have to.\n\n    :param str|bytes|bytesarray|memoryview s: string/byteslike\n    :param str encoding: Decode using this encoding\n    :param str errors: How to handle errors\n    :return bytes|bytesarray|memoryview: Encoded string as str\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_8():
    str_0 = "*9"
    module_0.lazy_import(str_0, str_0)


def test_case_9():
    var_0 = module_0.disallow_proxying()


def test_case_10():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_11():
    var_0 = module_0.disallow_proxying()
    var_1 = var_0.__repr__()
    var_2 = var_0.__str__()
    module_0.ImportReplacer(var_2, var_2, var_1, var_1, var_2)


def test_case_12():
    str_0 = "("
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    hough the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_14():
    str_0 = ""
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = '"\n#Y;Kn2tKI"o*qiHb~'
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = "Sp4b)pbyM1;(@\nWi]`"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_17():
    str_0 = "Sprb/pbye1;(@\nWX]`"
    module_0.lazy_import(str_0, str_0)


def test_case_18():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_19():
    str_0 = "maqtC;GVfF\nJc@rmJ\x0bO"
    dict_0 = {str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0)
    module_0.lazy_import(dict_0, import_replacer_0)


def test_case_20():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though th firs call will reset back to the original (it doesn't\n    track nesting level)\n    "
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    none_type_0 = None
    list_0 = []
    scope_replacer_0 = module_0.ScopeReplacer(dict_0, str_0, str_0)
    scope_replacer_1 = module_0.ScopeReplacer(dict_0, scope_replacer_0, none_type_0)
    scope_replacer_1.__call__(*list_0, **none_type_0)
