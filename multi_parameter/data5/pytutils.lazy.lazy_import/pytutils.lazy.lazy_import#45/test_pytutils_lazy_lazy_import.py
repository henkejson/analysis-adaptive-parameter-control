# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    var_0 = module_0.disallow_proxying()
    var_1 = module_0.IllegalUseOfScopeReplacer(var_0, var_0, var_0)
    module_0.IllegalUseOfScopeReplacer(var_0, var_1, var_1)


def test_case_1():
    bool_0 = False
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(bool_0, bool_0)


def test_case_2():
    str_0 = "z*]lNl@/nt|84Y0#oY"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_3():
    str_0 = "z*]lNl@/nt|84Y0#oY"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_4():
    str_0 = "hrG;^ \nF"
    bool_0 = True
    dict_0 = {str_0: bool_0, str_0: bool_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, bool_0, bool_0, dict_0)
    module_0.lazy_import(str_0, import_replacer_0)


def test_case_5():
    var_0 = module_0.disallow_proxying()
    dict_0 = {var_0: var_0, var_0: var_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, var_0, var_0, children=dict_0)
    module_0.lazy_import(dict_0, import_replacer_0)


def test_case_6():
    import_processor_0 = module_0.ImportProcessor()


def test_case_7():
    str_0 = "~ta>?"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_8():
    bool_0 = False
    none_type_0 = None
    module_0.ScopeReplacer(bool_0, none_type_0, bool_0)


def test_case_9():
    set_0 = module_0.disallow_proxying()


def test_case_10():
    int_0 = 2123
    module_0.ImportReplacer(int_0, int_0, int_0, int_0, int_0)


def test_case_11():
    str_0 = "\n    Turn a function to a bound method on an instance\n\n    >>> class Foo(object):\n    ...     def __init__(self, x, y):\n    ...         self.x = x\n    ...         self.y = y\n    >>> foo= Foo(2, 3)\n    >>> my_unbound_method = lambda self: self.x * self.y\n    >>> bind(foo, my_unbound_method, 'multiply')\n    >>> foo.multiply()  # noinspection PyUnresolvedReferences\n    6\n\n    :param object instance: some object\n    :param callable func: unbound method (i.e. a function that takes `self` argument, that you now\n        want to be bound to this class as a method)    :param str as_name: name of the metod to create on the object\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    str_0 = "\n    Turn a function to a bound method on an instance\n\n    >>> class Foo(object):\n    ...     def __init__(self, x, y):\n    ...         self.x = x\n    ...         self.y = y\n    >>> foo = Foo(2, 3)\n    >>> my_unbound_method = lambda self: self.x * self.y\n    >>> bind(foo, my_unbound_method, 'multiply')\n    >>> foo.multiply()  # noinspection PyUnresolvedReferences\n    6\n\n    :param object instance: some object\n    :param callable func: unbound method (i.e. a function that takes `self` argument, that you now\n        want to be bound to this class as a method)\n    :param str as_name: name of the method to create on the object\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    var_0 = module_0.disallow_proxying()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        var_0, var_0, var_0
    )
    var_1 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    module_0.IllegalUseOfScopeReplacer(
        var_0, illegal_use_of_scope_replacer_0, illegal_use_of_scope_replacer_0
    )


def test_case_14():
    str_0 = '#eD"i`T\\'
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = "hrG;^ \nF"
    bool_0 = False
    dict_0 = {str_0: bool_0, str_0: bool_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, children=bool_0)
    module_0.lazy_import(str_0, import_replacer_0)


def test_case_16():
    str_0 = "hrG;^ \nF"
    bool_0 = True
    dict_0 = {str_0: bool_0, str_0: bool_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, children=bool_0)
    var_0 = module_0.ScopeReplacer(dict_0, import_replacer_0, str_0)
    module_0.lazy_import(str_0, var_0)


def test_case_17():
    str_0 = "hrG;^ \nF"
    bool_0 = False
    dict_0 = {str_0: bool_0, str_0: bool_0}
    none_type_0 = None
    import_replacer_0 = module_0.ImportReplacer(
        dict_0, str_0, str_0, str_0, none_type_0
    )
    module_0.lazy_import(str_0, import_replacer_0, bool_0)
