# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0
import builtins as module_1


def test_case_0():
    str_0 = " import r"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0, str_0)
    module_0.lazy_import(str_0, str_0)


def test_case_1():
    str_0 = " import rKQ"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_2():
    bool_0 = False
    module_0.ImportReplacer(bool_0, bool_0, bool_0, bool_0)


def test_case_3():
    bool_0 = True
    module_0.ImportReplacer(bool_0, bool_0, bool_0)


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    float_0 = -2088.7
    import_processor_0 = module_0.ImportProcessor(float_0)


def test_case_6():
    str_0 = "&B;J=c'/FPD4"
    module_0.lazy_import(str_0, str_0)


def test_case_7():
    var_0 = module_0.disallow_proxying()


def test_case_8():
    base_exception_0 = module_1.BaseException()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        base_exception_0, base_exception_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_9():
    bool_0 = True
    module_0.lazy_import(bool_0, bool_0)


def test_case_10():
    str_0 = '5)*9ujuuk_-pbC $0\rk"'
    bytes_0 = b"0\xf9"
    module_0.ImportReplacer(str_0, str_0, str_0, str_0, bytes_0)


def test_case_11():
    str_0 = " import rKQ"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_12():
    str_0 = " import l,]"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    module_0.lazy_import(illegal_use_of_scope_replacer_0, str_0)


def test_case_13():
    str_0 = " import r"
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = "P(\n 8"
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = "\n    Update and/or insert query parameters in a URL.\n\n    >>> update_query_params('http://example.com?foo=bar&biz=baz', dict(foo='stuff'))\n    'http://example.com?...foo=stuff...'\n\n    :param url: URL\n    :type url: str\n    :param kwargs: Query parameters\n    :type kwargs: dict\n    :return: Modified URL\n    :rtype: str\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_16():
    str_0 = " imp#rt r"
    module_0.lazy_import(str_0, str_0)


def test_case_17():
    bytes_0 = b"\x0f\xa7#+\xafe\xe3"
    dict_0 = {bytes_0: bytes_0}
    scope_replacer_0 = module_0.ScopeReplacer(dict_0, bytes_0, bytes_0)
    scope_replacer_0.__call__()


def test_case_18():
    str_0 = "\nimport ,.\x0co\n^q"
    module_0.lazy_import(str_0, str_0)


def test_case_19():
    str_0 = "Upon request import 'module_path' as the name 'module_name'.\n        When imported, prepare children to also be imported.\n\n        :param scope: The scope that objects should be imported into.\n            Typically this is globals()\n        :param name: The variable name. Often this is the same as the\n            module_path. 'bzrlib'\n        :param module_path: A list for the fully specified module path\n            ['bzrlib', 'foo', 'bar']\n        :param member: The member inside the module to import, often this is\n            None, indicating the module is being imported.\n        :param children: Children entries to be imported later.\n            This should be a map of children specifications.\n            ::\n            \n                {'foo':(['bzrlib', 'foo'], None,\n                    {'bar':(['bzrlib', 'foo', 'bar'], None {})})\n                }\n\n        Examples::\n\n            import foo => name='foo' module_path='foo',\n                          member=None, children={}\n            import foo.bar => name='foo' module_path='foo', member=None,\n                              children={'bar':(['foo', 'bar'], None, {}}\n            from foo import bar => name='bar' module_path='foo', member='bar'\n                                   children={}\n            from foo import bar, baz would get translated into 2 import\n            requests. On for 'name=bar' and one for 'name=baz'\n        "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_20():
    str_0 = "\nimpor)t .,$.H\x0c\nA^"
    dict_0 = {str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_21():
    str_0 = " import 6,.\x0co\n^"
    module_0.lazy_import(str_0, str_0)


def test_case_22():
    str_0 = "\nimpor)t .,.\x0co\nA^"
    module_0.lazy_import(str_0, str_0)


def test_case_23():
    str_0 = "\nimpor)t .,.H\x0c\nA^"
    dict_0 = {str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, str_0)
    module_0.lazy_import(str_0, import_replacer_0)


def test_case_24():
    str_0 = "\nimpor)t .,.\x0c\nA\x0cV^"
    module_0.lazy_import(str_0, str_0)
