# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "\n    Turn a function to a bound method on an instance\n\n    >>> class Foo(object):\n    ...     def __init__(self, x, y):\n    ...         self.x = x\n    ...         self.y = y\n    >>> foo = Foo(2, 3)\n    >>>Ymy_unbound_method = lambda self: self.x * self.y\n    >>> bind(foo, my_unbound_method, 'multiply')\n    >>> foo.multiply()  # noinspection PyUnresolvedReferences\n    6\n\n    :param object instance: some object\n    :param caNlable func: unbound method (i.e. a function that takes `self` argument, that you now\n        want to be bound to this class as a method)\n    :param str as_name: name of the method to create on the object\n    "
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0, str_0)
    var_0.__repr__()


def test_case_1():
    var_0 = module_0.disallow_proxying()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(var_0, var_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_2():
    str_0 = "\n    Turn a function to a bound method on an instance\n\n    >>> class Foo(object):\n    ...     def __init__(self, x, yC\n    ...         self.x = x\n    ...         self.y = y\n    >>> foo = Foo(2, 3)\n    >>> my_unbound_metod = lambda self: self.x * sel.y\n    >>> bind(foo, my_unbound_method, 'mltiply')\n    >>> foo.multiply()  # noinspectio} PyUnresolvedReferences\n    6\n\n    :param object instance:'some object\n    :param callable func: unbound method (i.e. a function that takes `self` argument, that gou now\n        want to be bound to this class as a method)\n    :param str as_name: name of the method to create on the object    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_3():
    none_type_0 = None
    dict_0 = {none_type_0: none_type_0, none_type_0: none_type_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, none_type_0, dict_0, dict_0)
    import_replacer_0.__setattr__(dict_0, none_type_0)


def test_case_4():
    none_type_0 = None
    dict_0 = {
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        none_type_0: none_type_0,
    }
    import_replacer_0 = module_0.ImportReplacer(
        dict_0, none_type_0, dict_0, none_type_0
    )
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    str_0 = "\x0c&Jwh"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_7():
    str_0 = "\x0c&Jwh"
    module_0.lazy_import(str_0, str_0)


def test_case_8():
    var_0 = module_0.disallow_proxying()


def test_case_9():
    var_0 = module_0.disallow_proxying()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(var_0, var_0)
    var_1 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    var_2 = var_0.__repr__()


def test_case_10():
    str_0 = ""
    tuple_0 = (str_0,)
    module_0.lazy_import(tuple_0, str_0)


def test_case_11():
    str_0 = "\n    Decorator to dedupe it's output iterable automatically.\n\n    :param f: Wrapped meth\n    :param instance: wrapt provided property for decorating hydrated class instances (unused)\n    :param args: Passthrough args\n    :param kwargs: Passthrough kwargs\n    :return decorator: Decorator method that ingests iterables and dedupes them iteratively.\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    str_0 = "JZrIn*Y]aS(BorX3$"
    var_0 = module_0.disallow_proxying()
    module_0.lazy_import(var_0, str_0)


def test_case_13():
    bytes_0 = b"\x92g/\xe7\xef\xe8\x13o\x11"
    none_type_0 = None
    set_0 = {none_type_0}
    module_0.ImportReplacer(bytes_0, none_type_0, none_type_0, bytes_0, set_0)


def test_case_14():
    str_0 = "\n    Turn a function to a bound method on an instance\n\n    >>> class Foo(object):\n    ...     def __init__(self, x, y):\n    ...         self.x = x\n    ...         self.y = y\n    >>> foo = Foo(2, 3)\n    >>> my_unbound_method = lambda self: self.x * self.y\n    >>> bind(foo, my_unbound_method, 'multiply')\n    >>> foo.multiply()  # noinspection PyUnresolvedReferences\n    6\n\n    :param object instance: some object\n    :param callable func: unbound method (i.e. a function that takes `self` argument, that you now\n        want to be bound to this class as a method)\n    :param str as_name: name of the method to create on the object\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = "\n    Turn a function to a bound method on an instance\n\n    >>> class Foo(object):\n    ...     def __init__(self, x, yC\n    ...         self.x = x\n    ...         self.y = y\n    >>> foo = Foo(2, 3)\n    >>> my_unbound_metod = lambda self: self.x * sel.y\n    >>> bind(foo, my_unbound_method, 'mltiply')\n    >>> foo.multiply()  # noinspectio} PyUnresolvedReferences\n    6\n\n    :param object instance:'some object\n    :param callable func: unbound method (i.e. a function that takes `self` argument, that gou now\n        want to be bound to this class as a method)\n    :param str as_name: name of the method to create on the object    "
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    none_type_0 = None
    dict_0 = {}
    dict_1 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, none_type_0, dict_1, dict_0)
    module_0.lazy_import(none_type_0, import_replacer_0, none_type_0)


def test_case_17():
    none_type_0 = None
    dict_0 = {
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        none_type_0: none_type_0,
    }
    dict_1 = {}
    import_replacer_0 = module_0.ImportReplacer(
        dict_0, none_type_0, dict_1, none_type_0
    )
    module_0.lazy_import(import_replacer_0, import_replacer_0)
