# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "Q#4C2?B"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0, str_0)
    var_0.__str__()


def test_case_1():
    tuple_0 = ()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        tuple_0, tuple_0, tuple_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_2():
    tuple_0 = module_0.disallow_proxying()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        tuple_0, tuple_0, tuple_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(tuple_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_3():
    str_0 = "Restore the original function to re.cmpile().\n\n    It is safe to call reset_compile( multiple times, it will always\n    restore re.compile() to the value that xisted at import time.\n    Though the first call will reset back o the original (it doesn't\n    tak nesting level)\n   "
    dict_0 = {str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, dict_0)
    module_0.lazy_import(import_replacer_0, str_0)


def test_case_4():
    str_0 = "Restore the original function to re.cmpile().\n\n    It is safe to call reset_compile( multiple times, it will always\n    restore re.compile() to the value that xisted at import time.\n    Though the first call will reset back o the original (it doesn't\n    tak nesting level)\n   "
    dict_0 = {str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    str_0 = "3G{C2?B"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_7():
    import_processor_0 = module_0.disallow_proxying()


def test_case_8():
    none_type_0 = None
    module_0.lazy_import(none_type_0, none_type_0)


def test_case_9():
    str_0 = "3G{C2?B"
    module_0.lazy_import(str_0, str_0)


def test_case_10():
    str_0 = "(&n3|pk<\x0c4"
    module_0.lazy_import(str_0, str_0)


def test_case_11():
    int_0 = -3725
    import_processor_0 = module_0.ImportProcessor()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(int_0, int_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(int_0)
    module_0.ImportReplacer(var_0, int_0, import_processor_0, var_0, var_0)


def test_case_12():
    str_0 = "Q#4C2?B"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_13():
    str_0 = "\n    Lazy/Cached property.\n m Z"
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = "\n    Proxies access to an existing dict-like object.\n\n    >>> a = dict(whoa=True, hello=[1,2,3], why='always')\n    >>> b = ProxyMutableAttrDict(a)\n\n    Nice reprs:\n\n    >>> b\n    <ProxyMutableAttrDict {'whoa': True, 'hello': [1, 2, 3], 'why': 'always'}>\n\n    Setting works as you'd expect:\n\n    >>> b['nice'] = False\n    >>> b['whoa'] = 'yeee'\n    >>> b\n    <ProxyMutableAttrDict {'whoa': 'yeee', 'hello': [1, 2, 3], 'why': 'always', 'nice': False}>\n\n    Checking that the changes are in fact being performed on the proxied object:\n\n    >>> a\n    {'whoa': 'yeee', 'hello': [1, 2, 3], 'why': 'always', 'nice': False}\n\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    var_0 = module_0.disallow_proxying()
    float_0 = -3492.9628684104255
    import_processor_0 = var_0.__str__()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        var_0, import_processor_0
    )
    var_1 = var_0.__eq__(float_0)
    bytes_0 = b"&>\x0e\x84\x9e(\xa1\xc0"
    str_0 = "#&n3|k<\x0c\x0c"
    illegal_use_of_scope_replacer_1 = module_0.IllegalUseOfScopeReplacer(
        str_0, bytes_0, import_processor_0
    )
    var_2 = var_1.__eq__(illegal_use_of_scope_replacer_1)
    module_0.lazy_import(illegal_use_of_scope_replacer_0, str_0)


def test_case_16():
    str_0 = "Q#4C2?B"
    module_0.lazy_import(str_0, str_0)


def test_case_17():
    str_0 = "eN119$(\n|\n`\\a\x0cy{x x"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_18():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_19():
    str_0 = "Restore the original function to re.cmpile().\n\n    It is safe to call reset_compile( multiple times, it will always\n    restore re.compile() to the value that xisted at import time.\n    Though the first call will reset back o the original (it doesn't\n    tak nesting level)\n   "
    dict_0 = {str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, dict_0)
    module_0.lazy_import(str_0, import_replacer_0)


def test_case_20():
    str_0 = "tHu cbG"
    dict_0 = {str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, dict_0)
    scope_replacer_0 = module_0.ScopeReplacer(
        dict_0, import_replacer_0, import_replacer_0
    )
    var_0 = dict_0.__eq__(scope_replacer_0)
    scope_replacer_0.__getattribute__(import_replacer_0)
