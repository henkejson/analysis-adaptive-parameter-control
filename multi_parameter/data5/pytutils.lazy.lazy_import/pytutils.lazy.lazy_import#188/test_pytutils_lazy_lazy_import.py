# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    float_0 = -87.314736
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        float_0, float_0
    )


def test_case_1():
    var_0 = module_0.disallow_proxying()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(var_0, var_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_2():
    dict_0 = {}
    module_0.ImportReplacer(dict_0, dict_0, dict_0, dict_0)


def test_case_3():
    str_0 = ""
    none_type_0 = None
    module_0.ImportReplacer(str_0, str_0, str_0, none_type_0)


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    dict_0 = {}
    import_processor_0 = module_0.ImportProcessor(dict_0)


def test_case_6():
    str_0 = "-9kLPL"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_7():
    var_0 = module_0.disallow_proxying()


def test_case_8():
    str_0 = "5Jk72^1zwNYh}slkRqU"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0.__repr__()


def test_case_9():
    float_0 = -87.314736
    var_0 = module_0.IllegalUseOfScopeReplacer(float_0, float_0)
    module_0.ScopeReplacer(var_0, float_0, float_0)


def test_case_10():
    str_0 = "]\t;4\x0b>^#gXxB"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_11():
    str_0 = "5Jk72^1zwNYh}slkRqU"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_12():
    str_0 = "Lazily compiled regex objects.\n\nThis module defines a class which creates proxy objects for regex\ncompilation.  This allows overriding re.compile() to return lazily compiled\nobjects.\n\nWe do this rather than just providing a new interface so that it will also\nbe used by existing Python modules that create regexs.\n"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__str__()


def test_case_13():
    var_0 = module_0.disallow_proxying()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(var_0, var_0)
    var_1 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_14():
    var_0 = module_0.disallow_proxying()
    str_0 = "#*q"
    dict_0 = {str_0: str_0, str_0: var_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, var_0, str_0, children=dict_0)
    module_0.lazy_import(import_replacer_0, str_0)


def test_case_15():
    str_0 = "Lazily compiled regex objects.\n\nThis module defines a class which creates proxy objects for regex\ncompilation.  This allows overriding re.compile() to return lazily compiled\nobjects.\n\nWe do this rather than just providing a new interface so that it will also\nbe used by existing Python modules that create regexs.\n"
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    var_0 = module_0.disallow_proxying()
    dict_0 = {var_0: var_0, var_0: var_0, var_0: var_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, var_0, var_0, children=var_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_17():
    str_0 = "i6A];c"
    dict_0 = {str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, children=dict_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_18():
    var_0 = module_0.disallow_proxying()
    str_0 = "-9kLPL"
    dict_0 = {str_0: str_0, str_0: var_0, str_0: str_0}
    module_0.ImportReplacer(str_0, var_0, var_0, dict_0, str_0)


def test_case_19():
    str_0 = "KET<t\x0b;9pR((\nEU"
    module_0.lazy_import(str_0, str_0)


def test_case_20():
    str_0 = "\n    Turn a function to a bound method on an instance\n\n    >>> class Foo(object):\n    ...     def __init__(self, x, y):\n    ...         self.x = x\n    ...         self.y = y\n    >>> foo = Foo(2, 3)\n    >>> my_unbound_method = lambda self: self.x * self.y\n    >>> bind(foo, my_unbound_method, 'muliply')\n    >>> foo.multiply()  # noinsection PyUnresolvedReferences\n    6\n\n    :param object instance: some object\n    :param callable func: unbound mthod (i.e. a function that takes `self` argument, that you now\n       want to be bound to this class as a method)\n    :param str as_name: name of the method to create on the object\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_21():
    str_0 = "t&_-"
    dict_0 = {str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, dict_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_22():
    str_0 = ":bt_"
    dict_0 = {str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, dict_0)
    var_0 = module_0.ScopeReplacer(dict_0, import_replacer_0, import_replacer_0)
    var_0.__getattribute__(import_replacer_0)
