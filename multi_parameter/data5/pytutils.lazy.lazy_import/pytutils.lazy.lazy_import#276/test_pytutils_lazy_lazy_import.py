# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "\n    Efficiently Hdvance an iterator n-steps ahead. If n is none, consume entirely.\n    Consumes at C level (and therefore speed) in cpython.\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_1():
    str_0 = 'R%kLpZ,dLf^"_'
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_2():
    str_0 = "\n    Efficietly advace an iteator n-steps ahad. f n is none, consume enti@ely.\n    Consumes at Cflevel (and therefore peed) incpytho.\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_3():
    str_0 = "\n    Efficiently advance an iterator n-steps ahead. If n is none, consume entirely.\n    Consumes at Cflevel (and therefore speed) in cpython.\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_4():
    var_0 = module_0.disallow_proxying()
    dict_0 = {var_0: var_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, var_0, var_0, dict_0)
    module_0.lazy_import(dict_0, import_replacer_0)


def test_case_5():
    bytes_0 = b"\xfb\xf8*\xe2\x02\x8d"
    module_0.ImportReplacer(bytes_0, bytes_0, bytes_0)


def test_case_6():
    import_processor_0 = module_0.ImportProcessor()


def test_case_7():
    str_0 = "\n    Efficiently advance an iterator n-steps ahead. If n is none, consume entirely.\n    Consumes at Cflevel (and therefore speed) in cpython.\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_8():
    str_0 = 'R%kLpZ,\x0bLf^"_'
    module_0.lazy_import(str_0, str_0)


def test_case_9():
    import_processor_0 = module_0.disallow_proxying()


def test_case_10():
    str_0 = 'AC"\x0bd3qF.xgQ(\n=s#X^;'
    module_0.lazy_import(str_0, str_0)


def test_case_11():
    none_type_0 = None
    none_type_1 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_1, none_type_1, none_type_1
    )
    var_0 = none_type_1.__repr__()
    module_0.ImportReplacer(
        var_0, none_type_0, none_type_0, illegal_use_of_scope_replacer_0, var_0
    )


def test_case_12():
    str_0 = "#<ls'[$\tgk"
    none_type_0 = None
    module_0.lazy_import(none_type_0, str_0)


def test_case_13():
    str_0 = "\n    Efficiently advance an iterator n-steps ahead. If n is none, consume entirely.\n    Consumes at Cflevel (and therefore speed) in cpython.\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = "\n    Ef(iciently advance an iterator n-steps aheadt If n is none, consume entirely.\n    Consumes at C level (a d therefore spee)) in cpython.\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    var_0 = module_0.disallow_proxying()
    var_1 = var_0.__str__()
    dict_0 = {
        var_1: var_0,
        var_1: var_0,
        var_0: var_0,
        var_0: var_0,
        var_1: var_0,
        var_0: var_1,
        var_0: var_0,
        var_0: var_1,
        var_0: var_0,
        var_0: var_0,
        var_0: var_1,
    }
    import_replacer_0 = module_0.ImportReplacer(dict_0, var_0, var_1)
    module_0.lazy_import(var_1, import_replacer_0)


def test_case_16():
    var_0 = module_0.disallow_proxying()
    var_1 = var_0.__str__()
    dict_0 = {var_1: var_1}
    import_replacer_0 = module_0.ImportReplacer(dict_0, var_0, var_1, dict_0)
    module_0.lazy_import(var_1, import_replacer_0, var_1)


def test_case_17():
    str_0 = "\n    Loads (and returns) an env file specified by `filename` into the mapping `environ`.\n\n    >>> lines = ['TEST=${HOME}/yeee-$PATH', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../.../yeee-...:...'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n    "
    module_0.lazy_import(str_0, str_0, str_0)
