# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "N3%"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0, str_0)
    var_0.__unicode__()


def test_case_1():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_2():
    bool_0 = True
    module_0.ImportReplacer(bool_0, bool_0, bool_0, children=bool_0)


def test_case_3():
    import_processor_0 = module_0.ImportProcessor()


def test_case_4():
    str_0 = "N.\x0c7}zG8\x0cb\n)LjuquG"
    module_0.lazy_import(str_0, str_0)


def test_case_5():
    var_0 = module_0.disallow_proxying()


def test_case_6():
    str_0 = "NJ3J"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_7():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(none_type_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_8():
    str_0 = "\n ~  Lazy/Cached\x0cproperty.\n dk"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_9():
    dict_0 = {}
    str_0 = ""
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, str_0)
    import_replacer_0.__getattribute__(dict_0)


def test_case_10():
    str_0 = "Ugm"
    module_0.ImportReplacer(str_0, str_0, str_0, str_0, str_0)


def test_case_11():
    str_0 = ""
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    str_0 = "\n    Lazy/Cached property.\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    str_0 = "\n   >>> m = AttrDc;(Fmg=TXue, whoa'des'\n  ) "
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = "gKvqC[){eR}H:C(oY*M`"
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = '=\r]"%A#`P#(*z$d^c'
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = "\n    Loads (and returns) an env file specified by `filename` into the mapping `environ`.\n\n    >>> lines = ['TEST=${HOME}/yeee-$PATH', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines,\twrite_environ=dict())\n    OrderedDict([('TEST', 'y../.../yeee-...:...'Z,\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggns/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_17():
    str_0 = "JZzeDNM(H_Pn{nuMf}"
    module_0.lazy_import(str_0, str_0)


def test_case_18():
    dict_0 = {}
    str_0 = ""
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0)
    import_replacer_0.__getattribute__(str_0)
