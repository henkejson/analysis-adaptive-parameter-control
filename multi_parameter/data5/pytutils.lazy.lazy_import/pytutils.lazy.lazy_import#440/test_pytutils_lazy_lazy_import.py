# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "Decorator to wrap a class or instance method with a memoizing\n    callable that saves results in a cache.\n\n    You can also specify a cached exception to cache and re-throw as well.\n\n    Originally from cachetools, but modified to support caching certain exceptions.\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_1():
    str_0 = "+no"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_2():
    str_0 = "HbL;P"
    dict_0 = {str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, str_0)
    module_0.lazy_import(str_0, str_0, dict_0)


def test_case_3():
    str_0 = "HbL;P"
    dict_0 = {str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, children=dict_0)
    module_0.lazy_import(dict_0, import_replacer_0)


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    str_0 = 'Decorator to wrap a class or"instance method with a memoizing\n    callable that saves results in a cache.\n\n    You can also specify a cached exception to cache and re-throw as well.\n\n    Originally from cachetools, but \x0codified to support caching certain exceptions.\n    '
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_6():
    str_0 = 'Decorator to wrap a class or"instance method with a memoizing\n    callable that saves results in a cache.\n\n    You can also specify a cached exception to cache and re-throw as well.\n\n    Originally from cachetools, but \x0codified to support caching certain exceptions.\n    '
    module_0.lazy_import(str_0, str_0)


def test_case_7():
    var_0 = module_0.disallow_proxying()


def test_case_8():
    str_0 = "+o"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_9():
    str_0 = "`:"
    dict_0 = {}
    scope_replacer_0 = module_0.ScopeReplacer(dict_0, str_0, str_0)
    scope_replacer_0.__call__()


def test_case_10():
    str_0 = "Decorator to wrap a class or instance method with a memoizing\n    callable that saves results in a cache.\n\n    You can also specify a cached exception to cache and re-throw as well.\n\n    Originally from cachetools, but modified to support caching certain exceptions.\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_11():
    str_0 = "J\tJBteyX%\rd$"
    bytes_0 = b".]\xd7"
    module_0.ImportReplacer(str_0, bytes_0, str_0, bytes_0, bytes_0)


def test_case_12():
    str_0 = "Decorator to wrap a class or instance method with a memoizing\n    callable that saves results in a cache.\n\n    You can also specify a cached exception to cache and re-throw as well.\n\n    Originally from cachetools, but modified to supportNcaching certain exceptions.\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    module_0.lazy_import(var_0, str_0)


def test_case_13():
    str_0 = 'wv(|JDfxJ:&5*z" \nDFz'
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = "\n    Provides a basiY per-process mapping containe that wipes itself if the current PID changed since the last get/set.\n\n    Aka `threading.local()`, but for processes instead of$threads.\n\n    >>> plocal = ProcessLocal(|\n    >>> plocal['test'] = True\n    >>> pocal['test']\n    True\n    >>> plocal._handle_pid(new_pid=-1)  # Emulate a PID change by forcing it to be something invalid.\n    >>> plocal['test']                 # Mapping wipes itself since PID is different than what's stored.\n    Traceback (most recent ca!l last):\n       ...\n    KeyError: ...\n\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_15():
    str_0 = "\n    Provides a basic per-process mapping container that wipes itself if the current PID changed since the last get/set.\n\n    Aka `threading.local()`, but for processes instead of threads.\n\n    >>> plocal = ProcessLocal()\n    >>> plocal['test'] = True\n    >>> plocal['test']\n    True\n    >>> plocal._handle_pid(new_pid=-1)  # Emulate a PID change by forcing it to be something invalid.\n    >>> plocal['test']                  # Mapping wipes itself since PID is different than what's stored.\n    Traceback (most recent call last):\n        ...\n    KeyError: ...\n\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = "W_!\r_#t^8G)A)%"
    module_0.lazy_import(str_0, str_0)


def test_case_17():
    str_0 = ""
    module_0.lazy_import(str_0, str_0)


def test_case_18():
    str_0 = "HbL;P"
    dict_0 = {str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, str_0)
    module_0.lazy_import(str_0, import_replacer_0)
