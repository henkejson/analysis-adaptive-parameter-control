# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0
import builtins as module_1


def test_case_0():
    bytes_0 = b"\xb8\xd5\x07\xe1\xda&Sc{\xe7Z\xc9\xbb{\xae\xe7"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bytes_0, bytes_0
    )


def test_case_1():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_2():
    str_0 = "y^H{"
    dict_0 = {str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, dict_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_3():
    exception_0 = module_1.Exception()
    module_0.ImportReplacer(exception_0, exception_0, exception_0)


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    exception_0 = module_0.disallow_proxying()


def test_case_6():
    str_0 = "%(asct\nme)s| %(name)s%(processName)s[%(process)d]-%(threadName)s[%(thread)d]: %(message)s @%(funcName)s:%(lineno)d #%(levelname)s"
    module_0.lazy_import(str_0, str_0)


def test_case_7():
    str_0 = "9;u"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_8():
    str_0 = "\n        This is primarily\n        "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__str__()


def test_case_9():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(none_type_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_10():
    str_0 = "\n        This is primarily\n        "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_11():
    str_0 = "{uWmFmX"
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    none_type_0 = None
    var_0 = module_0.disallow_proxying()
    var_1 = module_1.Exception()
    float_0 = 3030.2868
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, float_0
    )
    var_2 = illegal_use_of_scope_replacer_0.__eq__(none_type_0)
    var_3 = var_2.__repr__()
    var_4 = var_1.__str__()
    var_5 = var_4.__eq__(var_2)
    module_0.lazy_import(var_0, var_4)


def test_case_13():
    str_0 = "\n        This is primarily\n        "
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    bytes_0 = b"\x1f\xb8\xec\xdb\xd6Q\xacjo\xb8\xdeF\x96\xd3\xb1H\x14\xa7\xfe\xc2"
    import_processor_0 = module_0.ImportProcessor()
    none_type_0 = None
    module_0.ImportReplacer(bytes_0, bytes_0, none_type_0, bytes_0, bytes_0)


def test_case_15():
    str_0 = "\\)j((G"
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    import_replacer_0 = module_0.ImportReplacer(list_0, bool_0, list_0, children=list_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_17():
    str_0 = "Create lazy imports for all of the imports in text.\n\n    This is typically used as something like::\n\n        from bzrlib.lazy_import import lazy_import\n        lazy_import(globals(), '''\n        from bzrlib import (\n            foo,\n            bar,\n            baz,\n            )\n        import bzrlib.branch\n        import bzrlib.transport\n        ''')\n\n    Then 'foo, bar, baz' and 'bzrlib' will exist as lazy-loaded\n    objects which will be replaced with a real object on first use.\n\n    In general, it is best to only load modules in this way. This is\n    because other objects (functions/classes/variables) are frequently\n    used without accessing a member, which means we cannot tell they\n    have been used.\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_18():
    str_0 = '^&D*")'
    dict_0 = {str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
    import_replacer_0.__call__()
