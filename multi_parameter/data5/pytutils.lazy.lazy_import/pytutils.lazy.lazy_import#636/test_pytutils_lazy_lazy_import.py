# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0
import builtins as module_1


def test_case_0():
    str_0 = "eHb7ePpja17ew"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0, str_0)
    var_0.__repr__()


def test_case_1():
    str_0 = "@[H*e]7%\nN"
    set_0 = {str_0, str_0}
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(set_0, set_0)


def test_case_2():
    set_0 = set()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(set_0, set_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_3():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_4():
    tuple_0 = ()
    dict_0 = {
        tuple_0: tuple_0,
        tuple_0: tuple_0,
        tuple_0: tuple_0,
        tuple_0: tuple_0,
        tuple_0: tuple_0,
    }
    import_replacer_0 = module_0.ImportReplacer(dict_0, tuple_0, tuple_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_5():
    str_0 = ""
    dict_0 = {str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, dict_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_6():
    import_processor_0 = module_0.ImportProcessor()


def test_case_7():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n   restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_8():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the vXlue that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)}    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_9():
    var_0 = module_0.disallow_proxying()


def test_case_10():
    str_0 = "[H*e]7%\nN"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0.__repr__()


def test_case_11():
    str_0 = "[*]1\n"
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    str_0 = ""
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    str_0 = "oh/XbS/1\t%8!:uOwI"
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, none_type_0, str_0
    )
    exception_0 = module_1.Exception()
    var_0 = exception_0.__str__()
    module_0.ImportReplacer(none_type_0, str_0, str_0, var_0, exception_0)


def test_case_14():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_1 = var_0.__eq__(var_0)
    var_0.__repr__()


def test_case_15():
    str_0 = "),z31~jqwi\\}dI$L#5"
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = "Restore the original function to re.compile().\n\n    It is saf% to call reset_compile() multiple times, it will always\n   restore re.compile( to the value that existed at import time.\n    Though the fiJst call will reset back to the original (i doesn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0)
