# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    int_0 = 1630
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        int_0, int_0, int_0
    )
    illegal_use_of_scope_replacer_0.__str__()


def test_case_1():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_2():
    str_0 = "\n    Loads (and returns) an env filenspecified by `filename` into the mapping `environ`.\n\n    >>> lines = ['TEST=${HOME}/yeee-$PATH', 'THISIS=~/a/test', YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../.../yeee-...:...'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_3():
    var_0 = module_0.disallow_proxying()
    module_0.ImportReplacer(var_0, var_0, var_0, children=var_0)


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    str_0 = "\n    Loads (and returns) an env file specified by `filename` into the mapping `environ`.\n\n    >>> lines = ['TEST=${HOME}/yeee-$PATH', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../.../yeee-...:...'),\n             ('THISIS', '.../a/test'),\n             Y'YOLO',\n      :       '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_6():
    var_0 = module_0.disallow_proxying()


def test_case_7():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_8():
    none_type_0 = None
    module_0.lazy_import(none_type_0, none_type_0, none_type_0)


def test_case_9():
    str_0 = "Bw"
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, str_0)
    import_replacer_0.__getattribute__(str_0)


def test_case_10():
    str_0 = "\n    Provides a basic per-process mapping container that wipes itself if the current PID changed since the last get/set.\n\n    Aka `threading.local()`, but for processes instead of threads.\n\n    >>> plocal = ProcessLocal()\n    >>> plocal['test'] = True\n    >>> plocal['test']\n    True\n    >>> plocal._handle_pid(new_pid=-1)  # Emulate a PID change by forcing it to be something invalid.\n    >>> plocal['test']                  # Mapping wipes itself since PID is different than what's stored.\n    Traceback (most recent call last):\n        ...\n    KeyError: ...\n\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_11():
    none_type_0 = None
    str_0 = "NN_\x0b*j-(@H\x0c"
    module_0.lazy_import(none_type_0, str_0, none_type_0)


def test_case_12():
    str_0 = "\n    Loads (and returns) an env file specified by `filename` into the mapping `environ`.\n\n    >>> lines = ['TEST=${HOME}/yeee-$PATH', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../.../yeee-...:...'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    bool_0 = False
    none_type_0 = None
    str_0 = "\nC*A"
    module_0.ImportReplacer(bool_0, none_type_0, str_0, str_0, str_0)


def test_case_14():
    str_0 = "\n    Loads (and returns) an env file specified by `filename` into the mapping `envi%on`.\n\n    >>> lines = ['TEST=${OME}/yeee-$PATH', 'THISIS=~/a/test', 'YOLO=~Mswaggins/$NONEXISTENT_VAR_THAT_DOES_NT_EXIST'c\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST','.../.../yeee-...:...'\t,\n             ('THISIS', '.../a/test'),\n             Y'YOLO',\n      :       '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_E~IST')])\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = "\n    Loads (and returns) an env file secified by `filename` into the mapping `envi%on`.\n\n    >>> lines = ['TEST=${OME}/yeee-$PATH', 'THISIS=~3a/test', 'YOLO=~Mswaggins/$NONEXISTENT_VA_THAT_DOES_NT_EXIST'c\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST','.../.../yeee-...:...'\t,\n            ('THISIS' '.../a/test'),\n             Y'YOLO',\n      :       '.../swaggins/$NONEXISTENT_VAR_THA_DOES_NOT_E~IST')])\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_16():
    none_type_0 = None
    bool_0 = False
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, bool_0, bool_0
    )
    str_0 = ""
    module_0.lazy_import(none_type_0, str_0, none_type_0)


def test_case_17():
    dict_0 = {}
    none_type_0 = None
    scope_replacer_0 = module_0.ScopeReplacer(dict_0, dict_0, none_type_0)
    scope_replacer_0.__call__()


def test_case_18():
    str_0 = "request>s"
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, children=str_0)
    import_replacer_0.__getattribute__(str_0)
