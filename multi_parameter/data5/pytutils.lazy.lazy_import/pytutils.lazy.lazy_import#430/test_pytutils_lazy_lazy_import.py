# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "Convert the given text into a bunch of azy import objects.\n\n        This takes!} text string, which should be similar to ormal python\n        impot markup.\n        "
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0, str_0)
    var_0.__unicode__()


def test_case_1():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0, none_type_0
    )
    var_0 = module_0.disallow_proxying()


def test_case_2():
    bool_0 = False
    var_0 = module_0.IllegalUseOfScopeReplacer(bool_0, bool_0)
    var_0.__repr__()


def test_case_3():
    bool_0 = False
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(bool_0, bool_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(bool_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_4():
    dict_0 = {}
    var_0 = dict_0.__str__()
    import_replacer_0 = module_0.ImportReplacer(dict_0, var_0, var_0)
    module_0.lazy_import(dict_0, var_0)


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    import_processor_0 = module_0.disallow_proxying()


def test_case_7():
    str_0 = "\n    An ordered dictionary can be combined with the Counter class so that the counter remembers the order elements are\n    first encountered.\n\n    From Python stdlib in `collections`.\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_8():
    dict_0 = {}
    var_0 = module_0.IllegalUseOfScopeReplacer(dict_0, dict_0)
    var_1 = var_0.__eq__(var_0)
    var_0.__repr__()


def test_case_9():
    dict_0 = {}
    var_0 = dict_0.__str__()
    import_replacer_0 = module_0.ImportReplacer(dict_0, var_0, dict_0, var_0)
    module_0.lazy_import(import_replacer_0, var_0)


def test_case_10():
    str_0 = "z7}8~u&GHGW"
    module_0.ImportReplacer(str_0, str_0, str_0, str_0, str_0)


def test_case_11():
    dict_0 = {}
    var_0 = dict_0.__str__()
    import_replacer_0 = module_0.ImportReplacer(dict_0, var_0, var_0)
    module_0.lazy_import(var_0, import_replacer_0)


def test_case_12():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0, none_type_0
    )
    import_processor_0 = module_0.ImportProcessor()
    str_0 = ""
    import_processor_0.lazy_import(import_processor_0, str_0)


def test_case_13():
    str_0 = 'I3"_x@jF^-:1\n}Ufc-#'
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = "cl_am}(Q{anae}Z\n"
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = "%(bg_black)s%(log_color)s[%(asctime)s] [%(name)s/%(process)d] %(message)s %(blue)s@%(funcName)s:%(lineno)d #%(levelname)s%(reset)s"
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = "\n    Parses env file content.\n\n    From honcho.\n\n    >>> lines = ['TEST=${HOME}/yeee', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../yeee'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_17():
    str_0 = "Hcl_game}(Q{anae\nT"
    module_0.lazy_import(str_0, str_0)


def test_case_18():
    dict_0 = {}
    var_0 = dict_0.__str__()
    import_replacer_0 = module_0.ImportReplacer(dict_0, var_0, var_0, var_0)
    module_0.lazy_import(dict_0, import_replacer_0)
