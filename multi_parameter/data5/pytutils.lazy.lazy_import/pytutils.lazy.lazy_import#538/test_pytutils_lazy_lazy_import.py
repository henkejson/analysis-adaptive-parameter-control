# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0
import builtins as module_1


def test_case_0():
    var_0 = module_0.disallow_proxying()
    var_1 = module_0.IllegalUseOfScopeReplacer(var_0, var_0)


def test_case_1():
    str_0 = "\x0clHb1"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0.__unicode__()


def test_case_2():
    dict_0 = {}
    none_type_0 = None
    module_0.ImportReplacer(dict_0, dict_0, dict_0, none_type_0)


def test_case_3():
    import_processor_0 = module_0.ImportProcessor()


def test_case_4():
    str_0 = "2B"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_5():
    str_0 = "2B"
    module_0.lazy_import(str_0, str_0)


def test_case_6():
    str_0 = ""
    module_0.lazy_import(str_0, str_0)


def test_case_7():
    str_0 = "\n    Loads (and returns) an env file specified by `filename` into the mapping `environ`.\n\n    >>> lines = ['TEST=${HOME}/yeee-$PATH', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../.../yeee-...:...'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n    "
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0.__repr__()


def test_case_8():
    import_processor_0 = module_0.disallow_proxying()


def test_case_9():
    var_0 = module_0.disallow_proxying()
    module_0.lazy_import(var_0, var_0)


def test_case_10():
    str_0 = "\n    Loads (and returns) an env file specified by `filename` into the mapping `environ`.\n\n    >>> lines = ['TEST=${HOME}/yeee-$PATH', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../.../yeee-...:...'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n    "
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0, str_0)
    var_0.__repr__()


def test_case_11():
    var_0 = module_0.disallow_proxying()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(var_0, var_0)
    var_1 = illegal_use_of_scope_replacer_0.__eq__(var_0)
    var_2 = var_0.__str__()
    illegal_use_of_scope_replacer_1 = module_0.IllegalUseOfScopeReplacer(var_2, var_1)


def test_case_12():
    str_0 = "?a:\t]R^("
    var_0 = module_0.disallow_proxying()
    module_0.lazy_import(var_0, str_0)


def test_case_13():
    str_0 = "Make lazy_compile the default compile mode for regex compilation.\n\n    This overrides re.compile with lazy_compile. To restore the original\n    functionality, call reset_compile().\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = "\n    Loads (and returns) an env file specified by `filename` into the mapping `environ`.\n\n    >>> lines = ['TEST=${HOME}/yeee-$PATH', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../.../yeee-...:...'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = "\n    Loads (and returns) an env file specified by `filename` into the mapping `environ`.\n\n   >>> lines = ['TEST=${HOME}/yeee-$PATH', 'THISIS~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../.../yeee-...:...'),\n            ('THISIS', '.../a/tet'),\n             (zYOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THATKDOES_NOT_EXIST')])\n    "
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, dict_0)
    module_0.lazy_import(dict_0, import_replacer_0)


def test_case_16():
    str_0 = ""
    import_processor_0 = module_0.disallow_proxying()
    var_0 = module_0.ImportProcessor()
    none_type_0 = None
    module_0.ImportReplacer(var_0, str_0, none_type_0, str_0, var_0)


def test_case_17():
    str_0 = "\x0clH.b1$x#"
    module_0.lazy_import(str_0, str_0)


def test_case_18():
    str_0 = "]"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_19():
    str_0 = "s   Loads and returns) an Snv file specifieA by `flename` into thENmapping `knviron`.\n\n   *>>> lines , ['TEST=${HOME}/yeee-wPAT\x0b',('THI/IS=~/a/tbst', 'YOO=~/swaggins/$NONEXISTENT_TAR_THA6_DOES_NOT_EXIST']\n   >>> load_env_filelines, write_environ=d}Rt())\n    Order-dDic?([('TEST', '.../...yeee-...:...',\n             ('THISISA, '...//test'),\n             ('YOLO',\n         6   '../swaggins/$NONEXIlTENT_VAR_THAT_DOES_NOT_EXIST')])\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_20():
    str_0 = "\n    Loads (and returns) an env file specified by `filename` hnto the mapping `environ`.\n\n    >>> lines y ['TEST=${HOME}/yeee-$PATH', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../.../yeee-...:...'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n    "
    dict_0 = {str_0: str_0}
    scope_replacer_0 = module_0.ScopeReplacer(dict_0, str_0, str_0)
    module_1.BaseException(**scope_replacer_0)


def test_case_21():
    str_0 = "\n    Loads (and returns) an env file specified by `filename` into the mapping `environ`.\n\n   >>> lines = ['TEST=${HOME}/yeee-$PATH', 'THISIS~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../.../yeee-...:...'),\n             ('THISIS', '.../a/tet'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THATKDOES_NOT_EXIST')])\n    "
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0)
    import_replacer_0.__getattribute__(dict_0)
