# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0
import builtins as module_1


def test_case_0():
    str_0 = "f8GG3M%B~arZ~s("
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_1 = var_0.__eq__(var_0)


def test_case_1():
    str_0 = "f8GG3M%B~arZ~s("
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_2():
    str_0 = 'md\n1~eWu-l"'
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_3():
    var_0 = module_0.disallow_proxying()
    dict_0 = {var_0: var_0, var_0: var_0, var_0: var_0}
    complex_0 = -1076.556945 + 102.50812949876811j
    import_replacer_0 = module_0.ImportReplacer(dict_0, var_0, var_0, complex_0)
    module_0.lazy_import(dict_0, import_replacer_0)


def test_case_4():
    none_type_0 = None
    module_0.ImportReplacer(none_type_0, none_type_0, none_type_0, none_type_0)


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    str_0 = "?\x0cO$q\x0b1oS"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_7():
    str_0 = "f8GG3M%B~arZ~("
    module_0.lazy_import(str_0, str_0)


def test_case_8():
    var_0 = module_0.disallow_proxying()


def test_case_9():
    var_0 = module_0.disallow_proxying()
    module_0.lazy_import(var_0, var_0, var_0)


def test_case_10():
    set_0 = set()
    bytes_0 = b"\x95Nf2\x9e\xaa\xad8\xd9\xdd\xb4@^\xab\x8d\x05"
    module_0.ImportReplacer(set_0, set_0, set_0, bytes_0, bytes_0)


def test_case_11():
    object_0 = module_1.object()
    dict_0 = {
        object_0: object_0,
        object_0: object_0,
        object_0: object_0,
        object_0: object_0,
    }
    import_replacer_0 = module_0.ImportReplacer(dict_0, object_0, dict_0)
    module_0.lazy_import(object_0, import_replacer_0)


def test_case_12():
    str_0 = 'md\n1~eWu-l"'
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__str__()


def test_case_13():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_14():
    str_0 = "?\x0cO$q\x0b1oS"
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    exception_0 = module_1.Exception()
    var_0 = exception_0.__str__()
    module_0.lazy_import(var_0, var_0)


def test_case_16():
    str_0 = "\n    Iterate over running totals, ie [a,b,c,d] -> func( func( func(a, b), c), d) with each func result yielded.\n    Func is operator.add by default.\n\n    >>> list(accumulate([1,2,3,4,5]))\n    [1, 3, 6, 10, 15]\n    >>> list(accumulate([1,2,3,4,5], operator.mul))\n    [1, 2, 6, 24, 120]\n\n    :param iterable: Iterable\n    :param func: method (default=operator.add) to call for each pair of (last call result or first item, next item)\n    :return generator: Generator\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_17():
    str_0 = "5,Q4^;dopNAhF?rk*n#P"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_18():
    str_0 = "KSh(\na{>3-7kOgtyd"
    module_0.lazy_import(str_0, str_0)


def test_case_19():
    str_0 = "2    Iterae over runing totLls, ie@[a,b,c,d] - Wunc( func( func(a/ b), c), d) with each func result yielded.\n    Func is operator.add by default.\n\n    >>> list(accumulae([1,2,3,4,5]n\n    [1, 3, 6, 10, ]5]\n    >>> lisK(accumulate([1,2,3,4,5], operator.mul)\n    [1, 2, x, 24, 120]\n\n    :param iterable: Iterable\n    :param func: methoJ (default=operator.add) tohcall for each pair of (last call result or first item, next item)\n    :return generator: Generator\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_20():
    str_0 = "\n    Iterate over running totals, ie [a,b,c,d] -> func( func( func(a, b), c), d) with each func result yielded.\n    Func is operator.add by default.\n\n    >>> list(accumulate([1,2,3,4,5]))\n    [1, 3, 6, 10, 15]\n    >>> list(accumulate([1,2,3,4,5], operator.mul))\n    [1, 2, 6, 24, 120]\n\n    :param iterable: Iterable\n    :param func: method (default=operator.add) to call for each pair of (last call result or first item, next item)\n    :return generator: Generator\n    "
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
    module_0.lazy_import(dict_0, import_replacer_0)


def test_case_21():
    str_0 = "55)YMyhdekOUPk"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    bool_0 = True
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, bool_0)
    module_0.lazy_import(str_0, import_replacer_0)
