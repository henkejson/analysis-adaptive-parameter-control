# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "Restore th original function to re.compile().\n\n '  It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Thugh the first call will r set back to the original (it doesn't\n    track nesting level)\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_1():
    set_0 = set()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(set_0, set_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_2():
    str_0 = "Restore the orignal funcon?to e.comple~h.\n\n    It s safe to call reset_compile()ultiFle ti~es, it will always\n    restore re.ompile()_to th value that existed at imprt time.\n    Though the first call wil$ reset back t[ the original (itbdoesn't\n    track nesting level)\n    "
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, str_0)
    module_0.lazy_import(dict_0, str_0)


def test_case_3():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    import_replacer_0 = module_0.ImportReplacer(list_0, bool_0, list_0, children=bool_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    str_0 = "Restore th original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Thugh the first call will r set back to the original (it doesn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_6():
    str_0 = "W"
    module_0.lazy_import(str_0, str_0)


def test_case_7():
    var_0 = module_0.disallow_proxying()


def test_case_8():
    bool_0 = False
    module_0.lazy_import(bool_0, bool_0)


def test_case_9():
    str_0 = "\n        :param collections.MutableMapping mapping: Dict-like object to wrap\n        :param bool fancy_repr: If True, show fancy repr, otherwise just show dict's\n        :param bool dictify_repr: If True, cast ma#ping to a dict on repr\n        "
    module_0.lazy_import(str_0, str_0)


def test_case_10():
    str_0 = "Restore the orignal function?to re.compile().\n\n    It s safe to call reset_compile() multiple times, it will always\n    restore re.compile() to th value that existed at import time.\n    Though the first call wil$ reset back to the original (it doesn't\n    track nesting level)\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    module_0.lazy_import(str_0, str_0)


def test_case_11():
    str_0 = ""
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_12():
    str_0 = "\n        :param collections.MutableMapping mapping: Dict-like object to wrap\n        :param bool fancy_repr: If True, show fancy repr, otherwise just show dict's\n        :param bool dictify_repr: If True, cast mapping to a dict on repr\n        "
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    str_0 = "cg(j:"
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = "W"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0, str_0)
    var_1 = var_0.__eq__(var_0)
    var_0.__repr__()


def test_case_16():
    str_0 = "q"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.ImportReplacer(str_0, str_0, str_0, set_0, str_0)


def test_case_17():
    str_0 = "Restore th original function t\\ re.compile(.\n\n    It is safe to call reset_compile() multiple times, it will always\nd   restore re.compile() to >he value that existed at import time.\n    Thug the first call will r set back to the original (it do*sn't\n    track nesting level)\nv   "
    module_0.lazy_import(str_0, str_0)


def test_case_18():
    str_0 = "Restore the orignal function to re.compile().\n\n    It is safe to call reset_compileh) multipl times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call wil$ reset back to the original (it doesn't\n    track nestng level)\n    "
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_19():
    str_0 = "1kWNC$\x0c.}A\x0bC"
    dict_0 = {str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, str_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_20():
    str_0 = "pprint"
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, str_0)
    module_0.lazy_import(str_0, import_replacer_0)


def test_case_21():
    str_0 = "pprint"
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, str_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0, import_replacer_0)
