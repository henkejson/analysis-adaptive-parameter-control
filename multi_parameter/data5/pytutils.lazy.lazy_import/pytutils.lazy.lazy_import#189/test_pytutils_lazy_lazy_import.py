# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0, none_type_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_1():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0, none_type_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(none_type_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_2():
    str_0 = "W4]&V+P;U=r||-V"
    dict_0 = {str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, dict_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_3():
    var_0 = module_0.disallow_proxying()
    dict_0 = {var_0: var_0, var_0: var_0, var_0: var_0, var_0: var_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, var_0, var_0)
    import_replacer_0.__setattr__(var_0, var_0)


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    int_0 = -2737
    module_0.lazy_import(int_0, int_0, int_0)


def test_case_6():
    str_0 = "TY9J\x0b#G~Z{"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_7():
    str_0 = "IjyjAg6="
    dict_0 = {str_0: str_0, str_0: str_0}
    scope_replacer_0 = module_0.ScopeReplacer(dict_0, dict_0, str_0)
    module_0.lazy_import(str_0, str_0, dict_0)


def test_case_8():
    import_processor_0 = module_0.disallow_proxying()


def test_case_9():
    var_0 = module_0.disallow_proxying()
    var_1 = var_0.__str__()
    bool_0 = False
    float_0 = 433.731456
    module_0.ImportReplacer(bool_0, bool_0, bool_0, bool_0, float_0)


def test_case_10():
    str_0 = "*8"
    module_0.lazy_import(str_0, str_0)


def test_case_11():
    str_0 = "Disallow lazily imported modules to be used as proxies.\n\n    Calling this function might cause problems with concurrent imports\n    in multithreaded environments, but will help detecting wasteful\n    indirection, so it should be called when executing unit tests.\n\n    Only lazy imports that happen after this call are affected.\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    str_0 = "\n    Ensure string is decoded (eg unicode); convert using specified parameters if we have to.\n\n    :param str|bytes|bytesarray|memoryview s: string/bytes\n    :param str encoding: Decode using this encoding\n    :param str errors: How to handle errors\n    :return bytes|bytesarray|memoryview: Decoded string as bytes\n\n    :return: Encoded string\n    :rtype: bytes\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_13():
    str_0 = "#"
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, none_type_0
    )
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_14():
    str_0 = "NNJQYGJ|5Fkm]\tB"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_15():
    str_0 = '1"P,JB2(b\x0cUob{$\nTY'
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = "\\A'(.*)'\\Z"
    module_0.lazy_import(str_0, str_0)


def test_case_17():
    str_0 = "1NP,JB2(b\x0cU1b\n$\nTY=)"
    module_0.lazy_import(str_0, str_0)


def test_case_18():
    str_0 = "W4]&V+P;U=r||-V"
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, children=dict_0)
    module_0.lazy_import(dict_0, import_replacer_0)
