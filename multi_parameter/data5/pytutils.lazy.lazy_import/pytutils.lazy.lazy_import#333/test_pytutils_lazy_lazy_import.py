# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0
import builtins as module_1


def test_case_0():
    str_0 = ">O"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0, str_0)
    var_0.__repr__()


def test_case_1():
    str_0 = "($'a,|BQ\\Oi![=x|X"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    module_0.lazy_import(str_0, str_0)


def test_case_2():
    str_0 = ">O"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_3():
    str_0 = "%s(%r)"
    dict_0 = {str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, children=dict_0)
    module_0.lazy_import(str_0, import_replacer_0)


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    str_0 = "f;8#QPf\x0b\x0b%d\n7@zM{n"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_6():
    tuple_0 = module_0.disallow_proxying()


def test_case_7():
    str_0 = '"\n    Deduplicates an iterator iteratively using hashed values in a set.\n    Not exactly memory efficient because of that of course.\n    If you have a large dataset with high cardinality look at HyperLog}og instead.\n\n    :return generator: Iterator of deduplicated results.\n  F '
    module_0.lazy_import(str_0, str_0)


def test_case_8():
    str_0 = "%s(%r)"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, dict_0)
    import_replacer_0.__call__(*import_replacer_0, **import_replacer_0)


def test_case_9():
    bool_0 = False
    bool_1 = True
    none_type_0 = None
    exception_0 = module_1.Exception()
    tuple_0 = (exception_0, bool_0)
    int_0 = -679
    module_0.ImportReplacer(bool_1, bool_1, none_type_0, tuple_0, int_0)


def test_case_10():
    str_0 = ""
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_11():
    str_0 = "f;8#QPf\x0b\x0b%d\n7@zM{n"
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    str_0 = ">O"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_13():
    str_0 = "($'a,|BQ\\Oi![=x|X"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_14():
    str_0 = "\r~kTak>%( 81eD)@xo"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_15():
    str_0 = "\n    Parses env file content.\n\n    From honcho.\n\n    >>> lines = ['TEST=${HOME}/yeee', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../yeee'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_16():
    str_0 = "\n    Parses env file content.\n\n   From honcho.\n\n    >>> lines = ['TEST=${HOME}/yeee', 'THIIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../yeee'),\n        H    ('THISIS', '.../a/test'),\n        v    ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n\n    "
    str_1 = "Upon request import 'module_path' as the name 'module_name'.\n        When imported, prepare children to also be imported.\n\n        :param scope: The scope that objects should be imported into.\n            Typically this is globals()\n        :param name: The variable name. Often this is the same as the\n            module_path. 'bzrlib'\n        :param module_path: A list for the fully specified module path\n            ['bzrlib', 'foo', 'bar']\n        :param member: The member inside the module to import, often this is\n            None, indicating the module is being imported.\n        :param children: Children entries to be imported later.\n            This should be a map of children specifications.\n            ::\n            \n                {'foo':(['bzrlib', 'foo'], None,\n                    {'bar':(['bzrlib', 'foo', 'bar'], None {})})\n                }\n\n        Examples::\n\n            import foo => name='foo' module_path='foo',\n                          member=None, children={}\n            import foo.bar => name='foo' module_path='foo', member=None,\n                              children={'bar':(['foo', 'bar'], None, {}}\n            from foo import bar => name='bar' module_path='foo', member='bar'\n                                   children={}\n            from foo import bar, baz would get translated into 2 import\n            requests. On for 'name=bar' and one for 'name=baz'\n        "
    module_0.lazy_import(str_0, str_1, str_0)


def test_case_17():
    str_0 = "%s(%r)"
    var_0 = module_0.disallow_proxying()
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, str_0)
    var_1 = module_0.ScopeReplacer(dict_0, import_replacer_0, var_0)
    module_0.lazy_import(var_1, import_replacer_0, var_1)
