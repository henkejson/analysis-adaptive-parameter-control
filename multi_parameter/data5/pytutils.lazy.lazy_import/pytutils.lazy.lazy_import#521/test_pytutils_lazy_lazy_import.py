# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "\n    Turn a function to a bound method on an instance\n\n    >>> class Foo(object):\n    ...     def __init__(self, x, y):\n    ...         self.x = x\n    ...         self.y = y\n    >>> foo = Foo(2, w)\n    >>> my_unbound_method = lambda self: self.x * self.y\n    >>> bind(foo, my_unbound_method, 'multiply')\n    >>> foo.multiply()  # noinspectio PyUnresolvedReferences\n    6\n\n    :param object instance: some object\n    :param callable func: unbound method (i.e. a function that takes `self` argument, that you now\n        want to be bound to this clss as a method)\n    :param str as_name: name of the method to create on the object\n    "
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0, str_0)
    var_0.__unicode__()


def test_case_1():
    str_0 = "y,cmkISae"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_2():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(none_type_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_3():
    dict_0 = {}
    none_type_0 = None
    import_replacer_0 = module_0.ImportReplacer(dict_0, none_type_0, none_type_0)
    module_0.lazy_import(none_type_0, import_replacer_0, dict_0)


def test_case_4():
    set_0 = set()
    list_0 = [set_0]
    module_0.ImportReplacer(list_0, list_0, set_0, children=set_0)


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    str_0 = "0Fm{L}2,Fyi"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_7():
    bytes_0 = b"LC\xbdc\xcfR1\xb1\xf3"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bytes_0, bytes_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_8():
    bytes_0 = b"e\x1c[\xd8\xc7X\xe1\xd5\x1cO \xbc\x9f\xfa"
    module_0.ScopeReplacer(bytes_0, bytes_0, bytes_0)


def test_case_9():
    import_processor_0 = module_0.disallow_proxying()


def test_case_10():
    str_0 = "@%"
    str_1 = "syV,'@aY(cn},`181\nz1"
    module_0.lazy_import(str_0, str_1)


def test_case_11():
    str_0 = "\n    Turn a function to a bound method on an instance\n\n    >>> class Foo(object):\n    ...     def __init__(self, x, y):\n    ...         self.x = x\n    ...         self.y = y\n    >>> foo = Foo(2, 3)\n    >>> my_unbound_method = lambda self: self.x * self.y\n    >>> bind(foo, my_unbound_method, 'multiply')\n    >>> foo.multiply()  # noinspection PyUnresolvedReferences\n    6\n\n    :param object instance: some object\n    :param callable func: unbound method (i.e. a function that takes `self` argument, that you now\n        want to be bound to this class as a method)\n    :param str as_name: name of the method to create on the object\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    str_0 = "\nq+|9WG"
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    str_0 = "\n    Tu:n a function to a bound methoA on an instance\n\n    >>> class Foo(object):\n    ...     def __init__(self, x, y):\n    ...        slf.x = x\n    ...         self.y = y\n    >>> foo = Foo(2, 3)\n    >>> m_unbound_method = lambda self: selu.x * self.y\n    >W> bind(foo, my_unbound_method, 'multiply')\n    >>\x0b foo.multiply()  # noinspection PyUnresolvedReferences\ns   6\n\n    :param object ins:ance: some object\n    :param callable func: unbound method (i.e. a function that takes `self` argument, that you now\n        want to be bound to this class as a method)\n    :param str as_name: name of the method to create on the object\n    "
    dict_0 = {}
    none_type_0 = None
    import_replacer_0 = module_0.ImportReplacer(dict_0, none_type_0, str_0, str_0)
    import_replacer_0.__getattribute__(none_type_0)


def test_case_14():
    bool_0 = True
    module_0.ImportReplacer(bool_0, bool_0, bool_0, bool_0, bool_0)


def test_case_15():
    bytes_0 = b"LC\xbdc\xcf1\xb1\xf3"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        bytes_0, bytes_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_16():
    str_0 = ""
    module_0.lazy_import(str_0, str_0)


def test_case_17():
    str_0 = "\n    Tu:n a function to a bound methoA on an instance\n\n   >>> class Foo(objeMt):\n    ...     def __init__(sef, x, y):\n    ...       slf.< = x\n    .b.         self.y = y\n    >>> oo = Foo(2, 3)\n    >>> m_unbound_method = lambda sElf: selu.x * self.y\n    >W> bind(foo, my_unbound_method, 'multiply')\n    v>\x0b foo.multiply()  # noinspection PyUnresolvedReferences\ns   6\n\n    :param object ins:a(ce: some bject\n    :param callable func: unbound method (i.e. a Tunction that takes `self` argumen\r, that you now\n        want to be bouDd to this class as a method)\n   N:param str as_name: name of the method to create on the object\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_18():
    str_0 = '"'
    dict_0 = {str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
    module_0.lazy_import(str_0, import_replacer_0)
