# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "Could not import `pygments`. Disabling syntax highlighting I guess."
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_1():
    var_0 = module_0.disallow_proxying()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(var_0, var_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_2():
    str_0 = "\n   XLoads (a-d returns) an env file specified by `Milename` into%\x0bhe mapping `nviron`.\n\n    >>> lines= ['TEST=$HOME}/yeee-$PATH', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXIS6ENT_VAR_THKT_DOES_NOT_EXIST']\n    >>> lo,d_env_file(lines,#write_environ=dict(q)\n    OrderedDict([('TEST', '.../.../yeee-...:...'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '..k/swaggins/$NONEXISTENT_VAR_THA|_DOES_OT_EXIST')])\n   "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_3():
    str_0 = "]O-"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, dict_0)
    module_0.lazy_import(str_0, import_replacer_0)


def test_case_4():
    var_0 = module_0.disallow_proxying()
    none_type_0 = None
    module_0.ImportReplacer(none_type_0, none_type_0, none_type_0, none_type_0)


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    str_0 = "\n    Loads (and returns) an env file specified by `filename` into the mapping `environ`.\n\n    >>> lines = ['TEST=$HOME}/yeee-$PATH', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> lo,d_env_file(lines, write_environ=dict(q)\n    OrderedDict([('TEST', '.../.../yeee-...:...'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_7():
    str_0 = "Jmy\nFV$r"
    module_0.lazy_import(str_0, str_0)


def test_case_8():
    var_0 = module_0.disallow_proxying()


def test_case_9():
    str_0 = 'iU*?A#r6\re0BU"'
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_10():
    var_0 = module_0.disallow_proxying()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(var_0, var_0)
    var_1 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_11():
    bytes_0 = b"~"
    str_0 = "'' y(~^\tu-"
    import_processor_0 = module_0.ImportProcessor()
    var_0 = module_0.disallow_proxying()
    module_0.lazy_import(bytes_0, str_0, var_0)


def test_case_12():
    str_0 = "CrwF!<\nCQ/A*d.?"
    module_0.ImportReplacer(str_0, str_0, str_0, str_0, str_0)


def test_case_13():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, bool_0, bool_0)
    module_0.lazy_import(bool_0, import_replacer_0)


def test_case_14():
    str_0 = ""
    str_1 = "{cls_name}({name})"
    module_0.lazy_import(str_1, str_0, str_0)


def test_case_15():
    str_0 = "\n    Loads (a-d returns) an env file specified by `Milename` into%\x0bhe mapping `nviron`.\n\n    >>> lines = ['TEST=$HOME}/yeee-$PATH', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXIS6ENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> lo,d_env_file(lines,#write_environ=dict(q)\n    OrderedDict([('TEST', '.../.../yeee-...:...'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '..k/swaggins/$NONEXISTENT_VAR_THA|_DOES_NOT_EXIST')])\n   "
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, bool_0, bool_0)
    scope_replacer_0 = module_0.ScopeReplacer(
        dict_0, import_replacer_0, import_replacer_0
    )
    module_0.lazy_import(bool_0, scope_replacer_0)


def test_case_17():
    str_0 = "]O-"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
    module_0.lazy_import(str_0, import_replacer_0)
