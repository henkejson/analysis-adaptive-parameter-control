# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0
import builtins as module_1


def test_case_0():
    str_0 = "ejYtJWz\t'd+\\U\n\t@<"
    dict_0 = {str_0: str_0}
    var_0 = module_0.IllegalUseOfScopeReplacer(dict_0, dict_0)


def test_case_1():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0, none_type_0
    )
    illegal_use_of_scope_replacer_0.__str__()


def test_case_2():
    str_0 = "Make la+y_compil, the defaultcompile mode for regex compilation.\n    This overrides re.compile with lazy_compile. To restore the oiginal\n    functionality call reset_compile().\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    module_0.lazy_import(var_0, str_0, str_0)


def test_case_3():
    object_0 = module_1.object()
    module_0.ImportReplacer(object_0, object_0, object_0)


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    str_0 = "Make la+y_compsl, the defaultcompile mode for regex compilation.\n\n    This overrides re.compile with lazy_compile. To restore the oiginal\n   0functionality, call reset_compile().\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_6():
    str_0 = "Make la+y_compsl, the defaultcompile mode for regex compilation.\n\n    This overrides re.compile with lazy_compile. To restore the oiginal\n   0functionality, call reset_compile().\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_7():
    var_0 = module_0.disallow_proxying()


def test_case_8():
    str_0 = "Make la+y_compsl, the defaultcompile mode for regex compilation.\n    This overrides re.compile with lazy_compile. Torestore the oiginal\n   0functionality, call reset_compile().\n    "
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0.__repr__()


def test_case_9():
    str_0 = "Make la+y_compsh, thF defaultcompile ^ode for regex compilation.\n\n    This overrides9re.compile with lazy_compile. To restore the oiginal>   0functionality, call res(t_compile().\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_10():
    str_0 = "\n    Update and/or insert query parameters in a URL.\n\n    >>> update_query_params('http://example.com?foo=bar&biz=baz', dict(foo='stuff'))\n    'http://example.com?...foo=stuff...'\n\n    :param url: URL\n    :type url: str\n    :param kwargs: Query parameters\n    :type kwargs: dict\n    :return: Modified URL\n    :rtype: str\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    module_0.lazy_import(illegal_use_of_scope_replacer_0, str_0, var_0)


def test_case_11():
    str_0 = "Make la+y_compil, the defaultcompile mode for regex compilation.\n\n    This overrides re.compile with lazy_compile. To restore the oiginal\n    functionality, call reset_compile().\n    "
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, str_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_12():
    str_0 = "Make lazy_compile the defaultcompile mode for regex compilation.\n\n    This overrides re.compile with lazy_compile. To resto(e the oiginal\n    functionality, call rezet_compile().\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    int_0 = -5512
    module_0.ImportReplacer(int_0, int_0, int_0, int_0, int_0)


def test_case_14():
    str_0 = "!KOb\x0c%#|"
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    exception_0 = module_1.Exception()
    str_0 = "\n    Parses env file content.\n\n    From honcho.\n\n    >>> lines = ['TEST=${HOME}/yeee', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../yeee'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n\n    "
    module_0.lazy_import(exception_0, str_0)


def test_case_16():
    str_0 = "#Cn.;"
    module_0.lazy_import(str_0, str_0)


def test_case_17():
    str_0 = "Make la+y_compil, the defaultcompile mode for regex compilation.\n    This overrides re.compile with lazy_compile. To restore the oiginal\n    functionality, call reset_compile().\n    "
    dict_0 = {
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
    }
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
    module_0.lazy_import(str_0, import_replacer_0)
