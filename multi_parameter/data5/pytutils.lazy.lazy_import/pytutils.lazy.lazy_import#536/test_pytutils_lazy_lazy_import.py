# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    import_processor_0 = module_0.ImportProcessor()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        import_processor_0, import_processor_0, import_processor_0
    )
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_1():
    var_0 = module_0.disallow_proxying()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(var_0, var_0)
    var_1 = var_0.__repr__()


def test_case_2():
    import_processor_0 = module_0.ImportProcessor()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        import_processor_0, import_processor_0
    )
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_3():
    import_processor_0 = module_0.ImportProcessor()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        import_processor_0, import_processor_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(import_processor_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_4():
    dict_0 = {}
    str_0 = "v\\"
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, str_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_5():
    complex_0 = 4068.00083 - 1387.9j
    none_type_0 = None
    module_0.ImportReplacer(none_type_0, none_type_0, complex_0)


def test_case_6():
    import_processor_0 = module_0.ImportProcessor()


def test_case_7():
    str_0 = "%Q"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_8():
    var_0 = module_0.disallow_proxying()


def test_case_9():
    var_0 = module_0.disallow_proxying()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(var_0, var_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_10():
    str_0 = "0tK8`8R X\x0bd2.3OP\riK\\"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_11():
    var_0 = module_0.disallow_proxying()
    dict_0 = {var_0: var_0, var_0: var_0, var_0: var_0, var_0: var_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, var_0, dict_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)


def test_case_12():
    str_0 = ",6K.Ve(\n6V3jF+O(<"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_13():
    str_0 = "#"
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = "This converts a 'from foo import bar' string into an import map.\n\n        :param from_str: The import string to process\n        "
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = "T#Wxy?\\_.<;"
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    import_processor_0 = module_0.ImportProcessor()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        import_processor_0, import_processor_0
    )
    none_type_0 = None
    module_0.ImportReplacer(
        none_type_0,
        import_processor_0,
        illegal_use_of_scope_replacer_0,
        illegal_use_of_scope_replacer_0,
        import_processor_0,
    )


def test_case_17():
    str_0 = "Restore the original function Go re.compile().\n\n    It is safe to call reset_compile() mu_tiple times, it will always\n    restore re.compile() to the value thal existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_18():
    dict_0 = {}
    str_0 = "v\\"
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
    module_0.lazy_import(dict_0, import_replacer_0)
