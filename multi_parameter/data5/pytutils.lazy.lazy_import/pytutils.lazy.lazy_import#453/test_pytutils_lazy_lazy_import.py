# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = ";Y\n\rN[o8R$hda\x0c{"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0.__unicode__()


def test_case_1():
    str_0 = "Vf7Q.8htWn&OG|u]H;"
    dict_0 = {str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, dict_0)
    module_0.lazy_import(str_0, str_0)


def test_case_2():
    var_0 = module_0.disallow_proxying()
    dict_0 = {var_0: var_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, var_0, dict_0, var_0)
    module_0.lazy_import(var_0, import_replacer_0)


def test_case_3():
    import_processor_0 = module_0.ImportProcessor()


def test_case_4():
    str_0 = "c<N:(5\n*PXOr&Md-O\x0b2@"
    list_0 = [str_0, str_0, str_0, str_0, str_0, str_0, str_0]
    module_0.lazy_import(list_0, str_0)


def test_case_5():
    str_0 = "consolex"
    module_0.lazy_import(str_0, str_0)


def test_case_6():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_7():
    import_processor_0 = module_0.disallow_proxying()


def test_case_8():
    int_0 = -7153
    var_0 = module_0.disallow_proxying()
    int_1 = 1006
    module_0.ImportReplacer(var_0, int_0, int_1, int_1, int_1)


def test_case_9():
    str_0 = "ScopeReplacer object %(name)r was used incorrectly: %(msg)s%(extra)s"
    module_0.lazy_import(str_0, str_0)


def test_case_10():
    str_0 = "\n    Parses env file content.\n\n    From honcho.\n\n    >>> lines = ['TEST=${HOME}/yeee', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../yeee'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_11():
    int_0 = 961
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        int_0, int_0, int_0
    )
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_12():
    str_0 = ";<\n\rN[o8R$hd7a\x0c{"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_13():
    str_0 = "'1H\"k}sSZmV"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    module_0.lazy_import(str_0, str_0, var_0)


def test_case_14():
    str_0 = "n"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_15():
    str_0 = "ScopeReplacer obj#ct %(name)r was used incorrectly: %(msg)s%(extra)s"
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    none_type_0 = None
    str_0 = ""
    module_0.lazy_import(none_type_0, str_0)


def test_case_17():
    str_0 = "nq eXR,{`\n"
    module_0.lazy_import(str_0, str_0)


def test_case_18():
    str_0 = "Create lazy imports for all of the imports in text.\n\n    This is typically used as something like::\n\n        from bzrlib.lazy_import import lazy_import\n        lazy_import(globals(), '''\n        from bzrlib import (\n            foo,\n            bar,\n            baz,\n            )\n        import bzrlib.branch\n        import bzrlib.transport\n        ''')\n\n    Then 'foo, bar, baz' and 'bzrlib' will exist as lazy-loaded\n    objects which will be replaced with a real object on first use.\n\n    In general, it is best to only load modules in this way. This is\n    because other objects (functions/classes/variables) are frequently\n    used without accessing a member, which means we cannot tell they\n    have been used.\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_19():
    str_0 = "ts3]U1YMjR{l"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, dict_0)
    module_0.lazy_import(dict_0, import_replacer_0)


def test_case_20():
    str_0 = "Y6zL\x0c/"
    dict_0 = {str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0)
    import_replacer_0.__setattr__(import_replacer_0, dict_0)
