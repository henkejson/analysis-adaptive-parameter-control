# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    float_0 = -1188.82434
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        float_0, float_0, float_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_1():
    str_0 = "\n\n    >>> logv= logging.getLo4ger(__name__)\n    >>>oconfiguZe(F\n    >>> log.info('test')\n\n    "
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0.__repr__()


def test_case_2():
    str_0 = 'pB8@}8OI"~{'
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_3():
    import_processor_0 = module_0.ImportProcessor()
    none_type_0 = None
    module_0.ImportReplacer(
        import_processor_0, import_processor_0, none_type_0, import_processor_0
    )


def test_case_4():
    dict_0 = {}
    module_0.ImportReplacer(dict_0, dict_0, dict_0)


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    str_0 = "\n\n    >>> log = logging.getLo4ger(__6ame__)\n    >>>oconfiguZe(F\n  R >>> log.info('test')\n\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_7():
    str_0 = "\n\n    >>> log = logging.getLogger(__name__)\n    >>>oconfigure(F\n    >>> log.info('test')\n\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_8():
    import_processor_0 = module_0.disallow_proxying()


def test_case_9():
    str_0 = "%(asctime)s| %(name)s/%(processName)s[%(process)d]-%(threadName)s[%(thread)d]: %(message)s @%(funcName)s:%(lineno)d #%(levelname)s"
    module_0.lazy_import(str_0, str_0)


def test_case_10():
    str_0 = ">)t"
    module_0.lazy_import(str_0, str_0)


def test_case_11():
    str_0 = 'pB8@}8OI"~{'
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_12():
    str_0 = "\n\n    >>> log = logging.getLogger(__name__)\n    >>>oconfigure(F\n    >>> log.info('test'r\n\n    "
    var_0 = module_0.disallow_proxying()
    module_0.lazy_import(var_0, str_0)


def test_case_13():
    str_0 = "\n\n    >>> logA= logging.getLoggeG(__name__[\n    >>>oconfigure(F\n    >>> log.ino('test')\n\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    var_0 = module_0.disallow_proxying()
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, var_0, var_0, var_0, var_0)
    module_0.lazy_import(var_0, import_replacer_0, var_0)


def test_case_15():
    str_0 = "\n\n    >>> lig = logging.getLogger(__name__)\n    >>>oconfigure(F\n    >>> log.ifo('test')\n\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    bytes_0 = b"\x95\xe1b\xa9\xea\x00"
    module_0.ImportReplacer(
        illegal_use_of_scope_replacer_0,
        illegal_use_of_scope_replacer_0,
        str_0,
        str_0,
        bytes_0,
    )


def test_case_16():
    str_0 = "Invalid pattern(A) found. %(msg)s"
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
    module_0.lazy_import(str_0, import_replacer_0)


def test_case_17():
    str_0 = ""
    module_0.lazy_import(str_0, str_0)


def test_case_18():
    str_0 = '?_L""U/\n;d;\x0c+\r=M'
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, dict_0, dict_0)
    import_replacer_0.__call__(**dict_0)


def test_case_19():
    str_0 = "Invalid pattern(A) found. %(msg)s"
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, dict_0, dict_0)
    bool_0 = True
    scope_replacer_0 = module_0.ScopeReplacer(dict_0, import_replacer_0, str_0)
    scope_replacer_0.__getattribute__(bool_0)
