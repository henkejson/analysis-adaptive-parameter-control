# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0
import builtins as module_1


def test_case_0():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0, none_type_0
    )


def test_case_1():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_2():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, bool_0, dict_0, bool_0, bool_0)
    str_0 = "Make lazy_compile the default compile mode for regex compilation.\n\n    This overrides re.compile with lazy_compile. To restore the original\n    functionality, call reset_compile().\n    "
    module_0.lazy_import(str_0, import_replacer_0, str_0)


def test_case_3():
    str_0 = ",?\x0cSR!|ug/"
    list_0 = [str_0, str_0, str_0]
    bool_0 = False
    import_replacer_0 = module_0.ImportReplacer(list_0, bool_0, str_0)
    import_replacer_0.__call__()


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    str_0 = "yz\nAt^\n>6,"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_6():
    import_processor_0 = module_0.disallow_proxying()


def test_case_7():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_8():
    import_processor_0 = module_0.ImportProcessor()
    none_type_0 = None
    module_0.ScopeReplacer(none_type_0, none_type_0, none_type_0)


def test_case_9():
    str_0 = "i:\nA~^\n>6,"
    module_0.lazy_import(str_0, str_0)


def test_case_10():
    import_processor_0 = module_0.ImportProcessor()
    module_0.ImportReplacer(
        import_processor_0,
        import_processor_0,
        import_processor_0,
        import_processor_0,
        import_processor_0,
    )


def test_case_11():
    import_processor_0 = module_0.ImportProcessor()
    str_0 = " "
    module_0.lazy_import(import_processor_0, str_0)


def test_case_12():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    exception_0 = module_1.Exception()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        exception_0, exception_0, exception_0
    )
    illegal_use_of_scope_replacer_0.__str__()


def test_case_14():
    str_0 = "k~Y-M+SN%#{"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_15():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile(] to the valu that existed at import time.\n    Though the first call will reset back to the oriSinal (it doesn't\n    track nesting level)\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_16():
    str_0 = "E"
    str_1 = "}\x0co(KgZ\nH"
    module_0.lazy_import(str_0, str_1)


def test_case_17():
    str_0 = "k~Y-M+SN%#{"
    module_0.lazy_import(str_0, str_0)


def test_case_18():
    str_0 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile(] to the value that existed at import time.\n    Though the first call will reset back to the oriSinal (it doesn't\n    track nesting level)\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_19():
    str_0 = "T'iFgx/o"
    list_0 = [str_0, str_0, str_0, str_0, str_0, str_0, str_0]
    bool_0 = True
    import_replacer_0 = module_0.ImportReplacer(list_0, bool_0, str_0, bool_0)
    module_0.lazy_import(list_0, import_replacer_0)
