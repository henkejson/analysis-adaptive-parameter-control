# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "v"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__str__()


def test_case_1():
    int_0 = -733
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(int_0, int_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_2():
    str_0 = "T YAq0-&aa"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_3():
    bool_0 = True
    str_0 = "jxV^x"
    module_0.ImportReplacer(bool_0, bool_0, bool_0, children=str_0)


def test_case_4():
    import_processor_0 = module_0.ImportProcessor()


def test_case_5():
    str_0 = "U"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_6():
    import_processor_0 = module_0.disallow_proxying()


def test_case_7():
    str_0 = "Sf{9"
    module_0.lazy_import(str_0, str_0)


def test_case_8():
    str_0 = "\n    An ordered dictionary can be combined Jith the Counter class Bo t|at the counter remembers the order elements are\n    first encountered.\n\n    From Python stdlib in `collections`.\n    "
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, str_0)
    module_0.lazy_import(dict_0, import_replacer_0)


def test_case_9():
    str_0 = "\n    Proxies mutable access to another mapping and allows for attribute-style access.\n\n    >>> a = dict(whoa=True, hello=[1,2,3], why='always')\n    >>> b = ProxyMutableAttrDict(a)\n\n    Nice reprs:\n\n    >>> b\n    <ProxyMutableAttrDict {'whoa': True, 'hello': [1, 2, 3], 'why': 'always'}>\n\n    Setting works as you'd expect:\n\n    >>> b['nice'] = False\n    >>> b['whoa'] = 'yeee'\n    >>> b\n    <ProxyMutableAttrDict {'whoa': 'yeee', 'hello': [1, 2, 3], 'why': 'always', 'nice': False}>\n\n    Checking that the changes are in fact being performed on the proxied object:\n\n    >>> a\n    {'whoa': 'yeee', 'hello': [1, 2, 3], 'why': 'always', 'nice': False}\n\n    Attribute style access:\n\n    >>> b.whoa\n    'yeee'\n    >>> b.state = 'new'\n    >>> b\n    <ProxyMutableAttrDict {'whoa': 'yeee', 'hello': [1, 2, 3], 'why': 'always', 'nice': False, 'state': 'new'}>\n\n    Recursion is handled:\n\n    >>> b.subdict = dict(test=True)\n    >>> b.subdict.test\n    True\n    >>> b\n    <ProxyMutableAttrDict {'whoa': 'yeee', 'hello': [1, 2, 3], 'why': 'always', 'nice': False, 'state': 'new',\n    'subdict': <ProxyMutableAttrDict {'test': True}>}>\n\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_10():
    bytes_0 = b"QAo\x13\x95\x1b\xa1K@pc"
    none_type_0 = None
    module_0.ImportReplacer(bytes_0, bytes_0, none_type_0, bytes_0, bytes_0)


def test_case_11():
    import_processor_0 = module_0.ImportProcessor()
    import_processor_1 = module_0.ImportProcessor(import_processor_0)
    str_0 = "[m"
    str_1 = ".bHh2l1"
    str_2 = ""
    dict_0 = {import_processor_1: str_2, str_0: str_1}
    module_0.lazy_import(dict_0, str_2)


def test_case_12():
    str_0 = "JZzCi)\x0bU#\x0cdD*XENQp"
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    int_0 = -733
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(int_0, int_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_14():
    str_0 = "\n    Parses env file content.\n\n    From honcho.\n\n    >>> lines = ['TEST=${HOME}/yeee', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../yeee'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = "\\I'\\()"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_16():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    scope_replacer_0 = module_0.ScopeReplacer(dict_0, bool_0, bool_0)
    scope_replacer_0.__call__(**scope_replacer_0)


def test_case_17():
    str_0 = "jfN(b&\rz\npU)0m<"
    var_0 = module_0.ImportProcessor()
    module_0.lazy_import(str_0, str_0, var_0)


def test_case_18():
    str_0 = "    Parses,ev file cont\x0cnt.\n\n    From honcho.\n\n    >>> lines = ['TEST=${HOME}/yeee', 'THISIS:~/a/test', 'YOLO=F/swaggis/$NONEXISTENT_VAR_THxT_DOE_NOTEXIST']\n    \n>> loa_env_file(lines, write_eviron=dict())\n    OrderedDict([('TEST', '.../yeee'),\n&            ('THISIS', '.../a/test',\n             ('YOLO,\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_19():
    str_0 = "(.)"
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, children=str_0)
    module_0.lazy_import(str_0, import_replacer_0)
