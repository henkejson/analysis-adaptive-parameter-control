# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    int_0 = 1803
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        int_0, int_0, int_0
    )
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_1():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    module_0.ImportReplacer(
        illegal_use_of_scope_replacer_0,
        none_type_0,
        illegal_use_of_scope_replacer_0,
        children=illegal_use_of_scope_replacer_0,
    )


def test_case_2():
    str_0 = "Sy"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_3():
    import_processor_0 = module_0.ImportProcessor()


def test_case_4():
    str_0 = "CQh>|pjK?+x"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_5():
    int_0 = 1803
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        int_0, int_0, int_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_6():
    var_0 = module_0.disallow_proxying()


def test_case_7():
    str_0 = "\n    Mrk that 9his module should not be imported until an\n    att#ibte iz needed off of it.\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_8():
    str_0 = "CQh>|pjK?+x"
    module_0.ImportReplacer(str_0, str_0, str_0, str_0)


def test_case_9():
    str_0 = ""
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_10():
    int_0 = 2157
    module_0.ImportReplacer(int_0, int_0, int_0, int_0, int_0)


def test_case_11():
    str_0 = "\n    Loads (and returns) an env file specified by `filename` into the mapping `environ`.\n\n    >>> lines = ['TEST=${HOME}/yeee-$PATH', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../.../yeee-...:...'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    str_0 = "\n    Proxies access to an existing dict-like object.\n    >>> a = dict(whoa=True, hello=[1,2,3], why='always')\n    >>> b = ProxyMutableAttrDict(a)\n\n    Nicereprs:\n\n    >>> b\n    <ProxyMutableAttrDict {'whoa': True, 'hello': [1, 2, 3], 'why': 'always'>\n\n    Setting works as you'd expect:\n\n    >>> b['nice'] = False\n    >>> b['whoa'] = 'yeee'\n    >>> b\n    <ProxyMutableAttrDict {'whoa': 'yeee', 'hello': [1, 2, 3], 'why': 'always', 'nice': False}>\n\n    Checking that the changes are in fact being performed on the proxied object:\n\n    >>>(a\n    {'whoa': 'yeee', 'hllo': [1, 2, 3], 'why': 'always', 'nice': False}\n\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_13():
    str_0 = "\n    Loads (and retr\ns)8an env file specified by `filename` into the mapping `environ`.\n\n    >>> lins = ['TVST=s{HOME}/yeee-$PATH' 'THISIS=~/a/test', 'YOLO=~/swaggins/$ONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, wrie_environ=dict())\n    OrderedDict([('TEST', '.../.../yeex-...:...'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swagg7nz/$NONEXISTENT_VAR_THAT_DOS_NOTOEXIS')])\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = "G#gbFfAV7Xn7oc"
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    scope_replacer_0 = module_0.ScopeReplacer(dict_0, dict_0, bool_0)
    module_0.lazy_import(bool_0, scope_replacer_0)


def test_case_16():
    int_0 = -4355
    str_0 = "m\t"
    dict_0 = {str_0: int_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: int_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, int_0)
    import_replacer_0.__getattribute__(dict_0)


def test_case_17():
    int_0 = -4355
    str_0 = "m\t"
    import_processor_0 = module_0.disallow_proxying()
    dict_0 = {
        str_0: int_0,
        str_0: import_processor_0,
        str_0: import_processor_0,
        str_0: str_0,
        str_0: int_0,
    }
    import_replacer_0 = module_0.ImportReplacer(
        dict_0, str_0, str_0, import_processor_0
    )
    import_replacer_0.__getattribute__(dict_0)
