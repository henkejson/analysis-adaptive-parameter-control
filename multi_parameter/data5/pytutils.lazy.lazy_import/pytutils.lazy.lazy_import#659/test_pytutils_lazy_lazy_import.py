# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0
import builtins as module_1


def test_case_0():
    str_0 = ""
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_1():
    str_0 = "\n    A marker t indicate a LazyModule typJ.\n    Allows us to check module's wi9h `isins)ance(mod, _LazyModuleMarker)`\n    to now if the module is lazy.\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_2():
    str_0 = "\n    A marker t indicate a LazyModule typJ.\n   >Allows s to ch?ck module's wi9h `isins)ance(mod, _LazyMod`leMarker)`\n    to no if the module is lazy.\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_3():
    str_0 = "<#S=qGl5g"
    dict_0 = {str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, dict_0)
    import_replacer_0.__getattribute__(str_0)


def test_case_4():
    str_0 = " Convert one queue into several. Kind of like a teeing queue.\n\n    >>> in_q = Queue()\n    >>> q1, q2, q3 = multiplex(in_q, count=3)\n    "
    module_0.ImportReplacer(str_0, str_0, str_0, children=str_0)


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    str_0 = ""
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_7():
    var_0 = module_0.disallow_proxying()


def test_case_8():
    str_0 = "\n    A marker to indicate a LazyModule type.\n    Allows us to check module's with `isinsace(mod, _LazyModuleMarker)`\n    to know if the module is lazy.\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_9():
    var_0 = module_0.disallow_proxying()
    module_0.ScopeReplacer(var_0, var_0, var_0)


def test_case_10():
    str_0 = "\x0b"
    module_0.lazy_import(str_0, str_0)


def test_case_11():
    str_0 = "V1"
    module_0.lazy_import(str_0, str_0)


def test_case_12():
    var_0 = module_1.Exception()
    import_processor_0 = module_0.ImportProcessor(var_0)
    module_0.ImportReplacer(var_0, var_0, var_0, var_0, var_0)


def test_case_13():
    str_0 = "simple"
    dict_0 = {str_0: str_0}
    scope_replacer_0 = module_0.ScopeReplacer(dict_0, dict_0, str_0)
    scope_replacer_0.lazy_import(dict_0, scope_replacer_0)


def test_case_14():
    str_0 = "=(\x0ba`a*31g"
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = "\n    A marker t indicate a LazyModule type.\n    Allows us to check module's wi9h `isins)ance(mod, _LazyModuleMarker)`\n    to now if the module is lazy.\n    "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = "$$6ZiIKSZl#n"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_17():
    str_0 = "\n    A marker to indicate a LazyModule type.\n    Allows us to check module's with `isinstance(mod, _LazyModuleMarker)`\n    to know if the module is lazy.\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_18():
    str_0 = "\n    A marker to indicate a LazyModule t(pe.\n    Allows us to cheZk module's wit' `isinstance(mod, _LazyModuleMarker)`\n   to know if the module is azy.    "
    module_0.lazy_import(str_0, str_0)


def test_case_19():
    str_0 = "Create lazy imports for all of the imports in text.\n\n    This is typically used as something like::\n\n        from bzrlib.lazy_import import lazy_import\n        lazy_import(globals(), '''\n        from bzrlib import (\n            foo,\n            bar,\n            baz,\n            )\n        import bzrlib.branch\n        import bzrlib.transport\n        ''')\n\n    Then 'foo, bar, baz' and 'bzrlib' will exist as lazy-loaded\n    objects which will be replaced with a real object on first use.\n\n    In general, it is best to only load modules in this way. This is\n    because other objects (functions/classes/variables) are frequently\n    used without accessing a member, which means we cannot tell they\n    have been used.\n    "
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_20():
    str_0 = "\n    A marker t indiate a LazyModule typJ.\n    Allows s to ch?ck module's wi9h `isins)ance(mm, _LazyMod`leMarker)`\n   eto no if the module is lazy.\n    "
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
    module_0.lazy_import(import_replacer_0, import_replacer_0)
