# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytutils.lazy.lazy_import as module_0


def test_case_0():
    str_0 = "q#Fs?\x0cM<:r"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    module_0.lazy_import(str_0, str_0)


def test_case_1():
    str_0 = "7"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    module_0.lazy_import(str_0, str_0)


def test_case_2():
    str_0 = "7"
    var_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0.__str__()


def test_case_3():
    dict_0 = {}
    str_0 = "?"
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, dict_0, dict_0)
    import_replacer_0.__getattribute__(import_replacer_0)


def test_case_4():
    bool_0 = False
    none_type_0 = None
    module_0.ImportReplacer(bool_0, bool_0, none_type_0, children=none_type_0)


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    import_processor_0 = module_0.ImportProcessor()
    import_processor_1 = module_0.ImportProcessor(import_processor_0)


def test_case_7():
    str_0 = "7"
    module_0.lazy_import(str_0, str_0)


def test_case_8():
    str_0 = "#V{<DLeP8^C,ukw"
    module_0.lazy_import(str_0, str_0)


def test_case_9():
    dict_0 = module_0.disallow_proxying()
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(dict_0, dict_0)
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_10():
    import_processor_0 = module_0.disallow_proxying()


def test_case_11():
    bool_0 = True
    module_0.lazy_import(bool_0, bool_0)


def test_case_12():
    str_0 = "3h#Ffs?\x0cM:r\n"
    module_0.lazy_import(str_0, str_0)


def test_case_13():
    dict_0 = {}
    str_0 = "7"
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, children=str_0)
    import_replacer_0.__setattr__(dict_0, import_replacer_0)


def test_case_14():
    str_0 = "\n    Turn a function to a bound method on an instance\n\n    >>> class Foo(object):\n    ...     def __init__(self, x, y):\n    ...         self.x = x\n    ...         self.y = y\n    >>> foo = Foo(2, 3)\n    >>> my_unbound_method = lambda self: self.x * self.y\n    >>> bind(foo, my_unbound_method, 'multiply')\n    >>> foo.multiply()  # noinspection PyUnresolvedReferences\n    6\n\n    :param object instance: some object\n    :param callable func: unbound method (i.e. a function that takes `self` argument, that you now\n        want to be bound to this class as a method)\n    :param str as_name: name of the method to create on the object\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_15():
    str_0 = "\\A'(.*)'\\Z"
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = "\n    Turn a function to a bound method onCan instance\n\n    >>> class Foo(object):\n    ...     def _dinit__(self, x, y):\n    ...         self.x = x\n    ...         self.y = y\n    >>> foo = Foo(2, 3&\n    >>> my_unbound_metJod = lambda selK: self.x * self.y\n    >>> bind(foo, my_unbound_method, 'multiply')\n    >>> foo.multiply()  # noinspection PyUnresolvedReferences\n    6\n\n    :param object instance: some objeNt\n    :param callable func: unbound method (i.e. a function that takes `self` arguWent, that you now\n        want to be bound to this class as a method)\n    :param sr as_name: name of the method to create on the object\n %  "
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    module_0.lazy_import(str_0, str_0)


def test_case_17():
    str_0 = "\n    Parses env file content.\n\n    From honcho.\n\n    >>> lines = ['TEST=${HOME}/yeee', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NO?_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../yeee'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT.VAR_THAT_DOES_NOT_EXIST')][\n\n [  "
    var_0 = module_0.disallow_proxying()
    module_0.lazy_import(var_0, str_0)


def test_case_18():
    bool_0 = True
    module_0.ImportReplacer(bool_0, bool_0, bool_0, bool_0, bool_0)


def test_case_19():
    str_0 = "\n    Turn a function to a bound method onCan instance\n\n    >>> class Foo(object):\n    ...     def _dinit__(self, x, y):\n    ...         self.x = x\n    ...         self.y = y\n    >>> foo = Foo(2, 3&\n    >>> my_unbound_metJod = lambda selK: self.x * self.y\n    >>> bind(foo, my_unbound_method, 'multiply')\n    >>> foo.multiply()  # noinspection PyUnresolvedReferences\n    6\n\n    :param object instance: some objeNt\n    :param callable func: unbound method (i.e. a function that takes `self` arguWent, that you now\n        want to be bound to this class as a method)\n    :param sr as_name: name of the method to create on the object\n %  "
    module_0.lazy_import(str_0, str_0)


def test_case_20():
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        none_type_0, none_type_0
    )
    var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__unicode__()
