# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import typed_ast._ast3 as module_0
import py_backwards.transformers.yield_from as module_1
import typed_ast.ast3 as module_2


def test_case_0():
    bit_or_0 = module_0.BitOr()
    yield_from_transformer_0 = module_1.YieldFromTransformer(bit_or_0)
    yield_from_transformer_0.visit(yield_from_transformer_0)


def test_case_1():
    bit_or_0 = module_0.BitOr()
    yield_from_transformer_0 = module_1.YieldFromTransformer(bit_or_0)


def test_case_2():
    none_type_0 = None
    yield_from_transformer_0 = module_1.YieldFromTransformer(none_type_0)
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    async_function_def_0 = module_0.AsyncFunctionDef(*list_0)
    a_s_t_0 = yield_from_transformer_0.visit(async_function_def_0)


def test_case_3():
    none_type_0 = None
    yield_from_transformer_0 = module_1.YieldFromTransformer(none_type_0)
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    str_0 = "zMn~\n2`yLTcMnVQ|%fYp"
    dict_0 = {
        str_0: none_type_0,
        str_0: none_type_0,
        str_0: none_type_0,
        str_0: none_type_0,
    }
    async_function_def_0 = module_0.AsyncFunctionDef(*list_0, **dict_0)
    a_s_t_0 = yield_from_transformer_0.visit(async_function_def_0)
    var_0 = module_2.iter_child_nodes(str_0)
    var_1 = module_2.dump(a_s_t_0, include_attributes=none_type_0)
    yield_from_transformer_1 = module_1.YieldFromTransformer(var_0)
    var_2 = module_2.parse(var_1)
    a_s_t_1 = yield_from_transformer_1.visit(var_2)
    module_0.If(**var_2)
