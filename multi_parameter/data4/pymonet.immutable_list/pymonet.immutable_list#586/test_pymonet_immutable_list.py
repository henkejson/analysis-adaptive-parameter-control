# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.immutable_list as module_0
import typing as module_1


def test_case_0():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.reduce(immutable_list_0, immutable_list_0)
    bool_0 = var_0.__eq__(var_0)
    immutable_list_0.filter(immutable_list_0)


def test_case_1():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = module_0.ImmutableList(
        immutable_list_0, immutable_list_0, immutable_list_0
    )
    bool_0 = immutable_list_0.__eq__(immutable_list_1)
    immutable_list_1.find(immutable_list_1)


def test_case_2():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_1.find(immutable_list_1)


def test_case_3():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = module_0.ImmutableList()
    var_0 = immutable_list_1.__len__()
    immutable_list_2 = immutable_list_1.append(immutable_list_1)
    var_1 = immutable_list_1.to_list()
    immutable_list_2.__add__(var_1)


def test_case_4():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.__len__()
    var_1 = immutable_list_0.find(var_0)
    immutable_list_0.filter(immutable_list_0)


def test_case_5():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = module_0.ImmutableList(
        immutable_list_0, immutable_list_0, immutable_list_0
    )
    immutable_list_2 = immutable_list_1.__len__()
    immutable_list_1.find(immutable_list_1)


def test_case_6():
    immutable_list_0 = module_0.ImmutableList()
    str_0 = immutable_list_0.__str__()
    immutable_list_1 = module_0.ImmutableList(
        immutable_list_0, immutable_list_0, immutable_list_0
    )
    immutable_list_1.find(immutable_list_1)


def test_case_7():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = module_0.ImmutableList(
        immutable_list_0, immutable_list_0, immutable_list_0
    )
    immutable_list_2 = immutable_list_1.to_list()
    immutable_list_1.find(immutable_list_1)


def test_case_8():
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(is_empty=bool_0)
    str_0 = "By\x0cZ]L/Du7+3\n"
    immutable_list_1 = module_0.ImmutableList(str_0)
    generic_0 = module_1.Generic()
    var_0 = immutable_list_0.to_list()
    str_1 = immutable_list_1.__str__()
    str_2 = immutable_list_1.__str__()
    str_3 = immutable_list_1.__str__()
    var_1 = immutable_list_1.__len__()
    immutable_list_1.map(var_1)


def test_case_9():
    bool_0 = True
    bytes_0 = b"?e,\r\x99f\x90\xfa\x15C#^"
    list_0 = [bytes_0, bytes_0]
    immutable_list_0 = module_0.ImmutableList(tail=list_0)
    immutable_list_0.map(bool_0)


def test_case_10():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_0.filter(immutable_list_0)


def test_case_11():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.__add__(immutable_list_0)
    var_0 = immutable_list_0.find(immutable_list_0)
    immutable_list_1.filter(var_0)


def test_case_12():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.find(immutable_list_0)
    immutable_list_0.filter(immutable_list_0)


def test_case_13():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = module_0.ImmutableList(
        immutable_list_0, immutable_list_0, immutable_list_0
    )
    immutable_list_1.find(immutable_list_1)


def test_case_14():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.reduce(immutable_list_0, immutable_list_0)
    var_1 = immutable_list_0.find(var_0)
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)


def test_case_15():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.reduce(immutable_list_0, immutable_list_0)
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_1.reduce(var_0, var_0)


def test_case_16():
    immutable_list_0 = module_0.ImmutableList()


def test_case_17():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = module_0.ImmutableList(
        immutable_list_0, immutable_list_0, immutable_list_0
    )
    immutable_list_2 = immutable_list_0.append(immutable_list_0)
    immutable_list_1.find(immutable_list_1)


def test_case_18():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = module_0.ImmutableList(
        immutable_list_0, immutable_list_0, immutable_list_0
    )
    immutable_list_2 = immutable_list_1.__add__(immutable_list_1)
    immutable_list_1.find(immutable_list_1)


def test_case_19():
    str_0 = "\n    Data type for storage any type of data\n    "
    set_0 = {str_0, str_0, str_0}
    none_type_0 = None
    str_1 = "\n        Transform Either to Maybe.\n\n        :returns: Maybe with previous value\n        :rtype: Maybe[A]\n        "
    immutable_list_0 = module_0.ImmutableList(str_1)
    immutable_list_0.reduce(set_0, none_type_0)


def test_case_20():
    str_0 = "\n        Transform Lazy into Box with constructor_fn result.\n\n        :returns: Box monad with constructor_fn result\n        :rtype: Box[A]\n        "
    immutable_list_0 = module_0.ImmutableList(str_0, is_empty=str_0)
    var_0 = immutable_list_0.__len__()
    immutable_list_0.find(var_0)


def test_case_21():
    str_0 = "\n        Transform Lazy into Box with constructor_fn result.\n\n        :returns: Box monad with constructor_fn result\n        :rtype: Box[A]\n        "
    immutable_list_0 = module_0.ImmutableList(str_0, is_empty=str_0)
    immutable_list_0.find(str_0)


def test_case_22():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.__add__(immutable_list_0)
    bool_0 = immutable_list_0.__eq__(var_0)
    var_1 = immutable_list_0.find(var_0)
    immutable_list_0.filter(var_0)
