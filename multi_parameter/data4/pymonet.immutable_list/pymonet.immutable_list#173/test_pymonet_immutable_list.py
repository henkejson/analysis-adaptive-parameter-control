# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.immutable_list as module_0
import builtins as module_1


def test_case_0():
    immutable_list_0 = module_0.ImmutableList()
    bool_0 = immutable_list_0.__eq__(immutable_list_0)
    immutable_list_1 = immutable_list_0.unshift(bool_0)
    immutable_list_1.find(bool_0)


def test_case_1():
    object_0 = module_1.object()
    str_0 = "\n        :returns: False\n        :rtype: Boolean        "
    immutable_list_0 = module_0.ImmutableList(tail=str_0)
    bool_0 = immutable_list_0.__eq__(object_0)
    var_0 = immutable_list_0.find(bool_0)
    immutable_list_0.filter(str_0)


def test_case_2():
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(bool_0)
    var_0 = immutable_list_0.unshift(bool_0)
    immutable_list_0.find(var_0)


def test_case_3():
    immutable_list_0 = module_0.ImmutableList()
    none_type_0 = None
    str_0 = "\n        If Maybe is empty return new empty Maybe, in other case\n        takes mapper function and returns result of mapper.\n\n        :param mapper: function to call with Maybe.value\n        :type mapper: Function(A) -> Maybe[B]\n        :returns: Maybe[B | None]\n        "
    immutable_list_1 = module_0.ImmutableList(tail=none_type_0, is_empty=str_0)
    var_0 = immutable_list_1.__len__()
    var_1 = immutable_list_1.reduce(var_0, immutable_list_1)
    var_2 = immutable_list_0.reduce(var_1, none_type_0)
    immutable_list_2 = module_0.ImmutableList()
    immutable_list_3 = immutable_list_2.append(immutable_list_0)
    str_1 = immutable_list_1.__str__()
    int_0 = 2138
    var_1.__add__(int_0)


def test_case_4():
    immutable_list_0 = module_0.ImmutableList()
    generic_0 = immutable_list_0.to_list()
    var_0 = immutable_list_0.__len__()
    immutable_list_0.filter(generic_0)


def test_case_5():
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(bool_0)
    str_0 = immutable_list_0.__len__()
    immutable_list_0.find(immutable_list_0)


def test_case_6():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.to_list()
    immutable_list_1 = module_0.ImmutableList(is_empty=var_0)


def test_case_7():
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(bool_0)
    immutable_list_1 = immutable_list_0.unshift(bool_0)
    var_0 = immutable_list_1.to_list()
    immutable_list_0.find(immutable_list_1)


def test_case_8():
    complex_0 = -32.0759 + 204.474j
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(none_type_0)
    immutable_list_0.map(complex_0)


def test_case_9():
    none_type_0 = None
    tuple_0 = ()
    immutable_list_0 = module_0.ImmutableList(tail=tuple_0)
    immutable_list_0.map(none_type_0)


def test_case_10():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_0.filter(immutable_list_0)


def test_case_11():
    str_0 = "\n        :returns: False\n        :rtype: Boolean\n        "
    immutable_list_0 = module_0.ImmutableList(tail=str_0)
    immutable_list_0.filter(immutable_list_0)


def test_case_12():
    str_0 = "\n        :returns: False\n        :rtype: Boolean\n        "
    immutable_list_0 = module_0.ImmutableList(tail=str_0)
    var_0 = immutable_list_0.find(immutable_list_0)
    immutable_list_0.filter(immutable_list_0)


def test_case_13():
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(bool_0)
    immutable_list_0.find(immutable_list_0)


def test_case_14():
    str_0 = "\n        :returns: False\n        :rtype: Boolean\n        "
    immutable_list_0 = module_0.ImmutableList(tail=str_0)
    var_0 = immutable_list_0.find(immutable_list_0)
    var_1 = immutable_list_0.reduce(str_0, var_0)
    immutable_list_0.filter(var_1)


def test_case_15():
    bytes_0 = b"\x8f\xbb\xad\xf0\x84>\x05\x875\x9a\x89\x04N\xa2\xd8\x97\xdd_"
    int_0 = -2920
    immutable_list_0 = module_0.ImmutableList(bytes_0)
    immutable_list_0.reduce(bytes_0, int_0)


def test_case_16():
    immutable_list_0 = module_0.ImmutableList()


def test_case_17():
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(bool_0)
    str_0 = immutable_list_0.__str__()
    immutable_list_0.find(immutable_list_0)


def test_case_18():
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(bool_0)
    immutable_list_1 = immutable_list_0.append(bool_0)
    immutable_list_0.find(immutable_list_0)


def test_case_19():
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(bool_0)
    immutable_list_1 = immutable_list_0.unshift(bool_0)
    immutable_list_2 = immutable_list_1.__add__(immutable_list_1)
    immutable_list_0.find(immutable_list_1)


def test_case_20():
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(bool_0)
    immutable_list_1 = immutable_list_0.append(bool_0)
    var_0 = immutable_list_1.__len__()
    immutable_list_2 = module_0.ImmutableList(bool_0, bool_0)


def test_case_21():
    bool_0 = False
    int_0 = 4367
    immutable_list_0 = module_0.ImmutableList()
    bool_1 = immutable_list_0.__eq__(immutable_list_0)
    var_0 = immutable_list_0.find(bool_0)
    immutable_list_1 = immutable_list_0.unshift(int_0)
    bytes_0 = b"5\x00\xa5\x0c\x8e"
    dict_0 = {bytes_0: bytes_0}
    immutable_list_1.reduce(dict_0, immutable_list_0)


def test_case_22():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(none_type_0)
    str_0 = "\n        :returns: False\n        :rtype: Boolean\n        "
    immutable_list_1 = module_0.ImmutableList(tail=str_0)
    var_0 = immutable_list_0.find(str_0)
    bool_0 = immutable_list_1.__eq__(immutable_list_0)
    var_1 = immutable_list_1.__len__()
    var_2 = immutable_list_1.find(var_1)
    immutable_list_1.filter(immutable_list_1)


def test_case_23():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0, object_0: object_0, object_0: object_0}
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(dict_0, none_type_0)
    immutable_list_1 = immutable_list_0.unshift(object_0)
    bool_0 = immutable_list_1.__eq__(immutable_list_0)
    immutable_list_0.find(immutable_list_0)
