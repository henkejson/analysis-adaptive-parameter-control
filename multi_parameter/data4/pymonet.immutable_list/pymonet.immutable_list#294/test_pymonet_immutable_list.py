# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.immutable_list as module_0


def test_case_0():
    immutable_list_0 = module_0.ImmutableList()
    bool_0 = immutable_list_0.__eq__(immutable_list_0)
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_1.find(immutable_list_1)


def test_case_1():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    bool_0 = immutable_list_0.__eq__(immutable_list_1)
    immutable_list_1.find(bool_0)


def test_case_2():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)


def test_case_3():
    str_0 = "bYzY)`T`lqWCW]|5mTtF"
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_0.__add__(str_0)


def test_case_4():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    var_0 = immutable_list_0.__len__()
    immutable_list_1.find(immutable_list_1)


def test_case_5():
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(is_empty=bool_0)
    str_0 = immutable_list_0.__str__()


def test_case_6():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    var_0 = immutable_list_1.to_list()
    immutable_list_1.find(var_0)


def test_case_7():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_0.map(immutable_list_0)


def test_case_8():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList()
    bool_0 = False
    var_0 = immutable_list_0.find(none_type_0)
    none_type_1 = None
    immutable_list_1 = module_0.ImmutableList(none_type_1)
    immutable_list_2 = immutable_list_0.append(none_type_0)
    immutable_list_3 = module_0.ImmutableList(is_empty=none_type_1)
    var_1 = immutable_list_1.reduce(var_0, bool_0)
    immutable_list_2.map(immutable_list_1)


def test_case_9():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_0.filter(immutable_list_0)


def test_case_10():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    var_0 = immutable_list_0.find(immutable_list_0)
    immutable_list_1.filter(immutable_list_0)


def test_case_11():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.find(immutable_list_0)
    var_0.filter(var_0)


def test_case_12():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_1.find(immutable_list_1)


def test_case_13():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.reduce(immutable_list_0, immutable_list_0)
    var_0 = immutable_list_1.find(immutable_list_1)
    immutable_list_1.filter(var_0)


def test_case_14():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.__len__()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    var_1 = immutable_list_1.to_list()
    immutable_list_1.reduce(var_0, immutable_list_0)


def test_case_15():
    immutable_list_0 = module_0.ImmutableList()


def test_case_16():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.append(immutable_list_0)
    var_0 = immutable_list_1.find(immutable_list_1)
    immutable_list_1.filter(var_0)


def test_case_17():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_2 = immutable_list_1.append(immutable_list_1)
    immutable_list_1.find(immutable_list_1)


def test_case_18():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = module_0.ImmutableList(
        immutable_list_0, is_empty=immutable_list_0
    )
    immutable_list_1.find(immutable_list_1)


def test_case_19():
    str_0 = "\n    Function for return function depended on first function argument\n    cond get list of two-item tuples,\n    first is condition_function, second is execute_function.\n    Returns this execute_function witch first condition_function return truly value.\n\n    :param condition_list: list of two-item tuples (condition_function, execute_function)\n    :type condition_list: List[(Function, Function)]\n    :returns: Returns this execute_function witch first condition_function return truly value\n    :rtype: Function\n    "
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(str_0, none_type_0)
    immutable_list_0.reduce(immutable_list_0, str_0)


def test_case_20():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(tail=none_type_0, is_empty=none_type_0)
    immutable_list_1 = immutable_list_0.unshift(none_type_0)
    immutable_list_2 = immutable_list_0.append(immutable_list_0)
    immutable_list_3 = immutable_list_2.append(immutable_list_0)
    var_0 = immutable_list_3.to_list()
    var_1 = immutable_list_0.find(var_0)
    bool_0 = immutable_list_2.__eq__(immutable_list_1)
    immutable_list_0.__add__(none_type_0)


def test_case_21():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    var_0 = immutable_list_1.__len__()
    immutable_list_1.find(immutable_list_1)


def test_case_22():
    str_0 = "\n    Function for return function depended on first function argument\n    cond get list of two-item tuples,\n    first is condition_function, second is execute_function.\n    Returns this execute_function witch first condition_function return truly value.\n\n    :param condition_list: list of two-item tuples (condition_function, execute_function)\n    :type condition_list: List[(Function, Function)]\n    :returns: Returns this execute_function witch first condition_function return truly value\n    :rtype: Function\n    "
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(str_0, none_type_0)
    var_0 = immutable_list_0.__len__()
    immutable_list_0.find(immutable_list_0)
