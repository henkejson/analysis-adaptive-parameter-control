# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.immutable_list as module_0


def test_case_0():
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(bool_0)
    immutable_list_1 = immutable_list_0.unshift(bool_0)
    bool_1 = immutable_list_0.__eq__(immutable_list_1)
    immutable_list_0.find(immutable_list_1)


def test_case_1():
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(bool_0)
    bool_1 = immutable_list_0.__eq__(bool_0)
    immutable_list_0.find(immutable_list_0)


def test_case_2():
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(bool_0)
    immutable_list_1 = immutable_list_0.append(bool_0)
    immutable_list_0.find(immutable_list_0)


def test_case_3():
    int_0 = 82
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(tail=int_0, is_empty=bool_0)
    immutable_list_0.__add__(int_0)


def test_case_4():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(none_type_0)
    var_0 = immutable_list_0.__len__()
    var_0.__len__()


def test_case_5():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.to_list()
    immutable_list_0.filter(var_0)


def test_case_6():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0, tuple_0}
    str_0 = "Sum"
    tuple_1 = (tuple_0, set_0, str_0, set_0)
    str_1 = "\n        Two Lazy are equals where both are evaluated both have the same value and constructor functions.\n        "
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(str_1)
    var_0 = immutable_list_1.to_list()
    var_0.unshift(tuple_1)


def test_case_7():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_0.map(immutable_list_0)


def test_case_8():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_0.filter(immutable_list_0)


def test_case_9():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(tail=none_type_0)
    immutable_list_1 = immutable_list_0.unshift(none_type_0)
    var_0 = immutable_list_0.find(immutable_list_0)
    immutable_list_2 = immutable_list_1.unshift(none_type_0)
    immutable_list_1.filter(immutable_list_0)


def test_case_10():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.find(immutable_list_0)
    immutable_list_0.map(var_0)


def test_case_11():
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(bool_0)
    immutable_list_0.find(immutable_list_0)


def test_case_12():
    immutable_list_0 = module_0.ImmutableList()
    none_type_0 = None
    var_0 = immutable_list_0.find(none_type_0)
    bool_0 = immutable_list_0.__eq__(none_type_0)
    var_1 = immutable_list_0.reduce(var_0, none_type_0)
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_0.filter(immutable_list_1)


def test_case_13():
    bool_0 = True
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(tail=bool_0)
    immutable_list_1 = module_0.ImmutableList(bool_0, immutable_list_0)
    immutable_list_1.reduce(bool_0, none_type_0)


def test_case_14():
    immutable_list_0 = module_0.ImmutableList()


def test_case_15():
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(bool_0)
    str_0 = immutable_list_0.__str__()
    immutable_list_0.find(bool_0)


def test_case_16():
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(bool_0)
    var_0 = immutable_list_0.unshift(bool_0)
    immutable_list_0.find(var_0)


def test_case_17():
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(tail=bool_0, is_empty=bool_0)
    immutable_list_1 = immutable_list_0.append(immutable_list_0)
    immutable_list_2 = module_0.ImmutableList(bool_0)
    immutable_list_2.find(immutable_list_2)


def test_case_18():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.to_list()
    bool_0 = immutable_list_0.__eq__(immutable_list_0)
    var_1 = immutable_list_0.__len__()
    bool_1 = immutable_list_0.__eq__(var_1)
    bool_2 = False
    set_0 = {bool_2}
    int_0 = 220
    immutable_list_1 = module_0.ImmutableList(int_0)
    immutable_list_1.reduce(set_0, set_0)


def test_case_19():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.__len__()
    bool_0 = immutable_list_0.__eq__(immutable_list_0)
    immutable_list_0.map(var_0)


def test_case_20():
    none_type_0 = None
    bytes_0 = b"\x90O\x9a\x81eM/\xd4/\x06\x0fk\xb5\xde\xa7V\xef\x1c"
    list_0 = [bytes_0]
    none_type_1 = None
    immutable_list_0 = module_0.ImmutableList(none_type_1, none_type_1)
    immutable_list_1 = immutable_list_0.append(list_0)
    var_0 = immutable_list_1.find(none_type_1)
    var_1 = immutable_list_1.reduce(var_0, var_0)
    immutable_list_1.map(none_type_0)


def test_case_21():
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(bool_0)
    var_0 = immutable_list_0.__len__()
    immutable_list_0.find(var_0)


def test_case_22():
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(bool_0)
    immutable_list_1 = immutable_list_0.append(bool_0)
    var_0 = immutable_list_1.__len__()
    immutable_list_0.find(var_0)


def test_case_23():
    str_0 = "\n        Transform Maybe to Try.\n\n        :returns: successfully Try with previous value when Maybe is not empty, othercase not successfully Try with None\n        :rtype: Try[A]\n        "
    immutable_list_0 = module_0.ImmutableList(tail=str_0)
    immutable_list_1 = immutable_list_0.unshift(str_0)
    bool_0 = immutable_list_1.__eq__(immutable_list_0)
    immutable_list_1.find(immutable_list_0)


def test_case_24():
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(bool_0)
    immutable_list_1 = immutable_list_0.append(bool_0)
    immutable_list_1.find(immutable_list_0)
