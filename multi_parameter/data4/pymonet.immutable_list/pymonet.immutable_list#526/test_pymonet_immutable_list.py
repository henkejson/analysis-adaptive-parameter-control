# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.immutable_list as module_0
import typing as module_1


def test_case_0():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    bool_0 = immutable_list_0.__eq__(immutable_list_1)
    immutable_list_1.find(immutable_list_0)


def test_case_1():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_1.find(immutable_list_0)


def test_case_2():
    int_0 = 334
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_0.__add__(int_0)


def test_case_3():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.__len__()
    immutable_list_1 = module_0.ImmutableList(tail=immutable_list_0)


def test_case_4():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    str_0 = immutable_list_0.__str__()
    var_0 = immutable_list_1.__len__()
    var_1 = immutable_list_0.find(var_0)
    immutable_list_1.filter(var_1)


def test_case_5():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.to_list()


def test_case_6():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    str_0 = immutable_list_0.__str__()
    str_1 = immutable_list_0.__str__()
    immutable_list_2 = immutable_list_1.unshift(immutable_list_1)
    str_2 = immutable_list_2.__str__()
    immutable_list_2.filter(immutable_list_2)


def test_case_7():
    set_0 = set()
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(none_type_0)
    immutable_list_0.map(set_0)


def test_case_8():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.append(immutable_list_0)
    immutable_list_1.map(none_type_0)


def test_case_9():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_0.filter(immutable_list_0)


def test_case_10():
    str_0 = "^Vhx8m<"
    immutable_list_0 = module_0.ImmutableList(str_0, is_empty=str_0)
    none_type_0 = None
    immutable_list_0.find(none_type_0)


def test_case_11():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    var_0 = immutable_list_0.reduce(immutable_list_1, immutable_list_0)
    immutable_list_1.find(immutable_list_0)


def test_case_12():
    none_type_0 = None
    list_0 = []
    immutable_list_0 = module_0.ImmutableList(list_0, is_empty=list_0)
    immutable_list_0.reduce(none_type_0, none_type_0)


def test_case_13():
    immutable_list_0 = module_0.ImmutableList()


def test_case_14():
    immutable_list_0 = module_0.ImmutableList()
    str_0 = immutable_list_0.__str__()


def test_case_15():
    immutable_list_0 = module_0.ImmutableList()
    bool_0 = immutable_list_0.__eq__(immutable_list_0)
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_1.find(immutable_list_1)


def test_case_16():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_2 = immutable_list_1.__add__(immutable_list_1)
    immutable_list_1.find(immutable_list_0)


def test_case_17():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    int_0 = 1064
    set_0 = {int_0}
    str_0 = "\n        Return monad value when is successfully.\n        Othercase return default_value argument.\n\n        :params default_value: value to return when monad is not successfully.\n        :type default_value: B\n        :returns: monad value\n        :rtype: A | B\n        "
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(str_0, none_type_0)
    var_0 = immutable_list_0.__len__()
    immutable_list_1 = var_0.__add__(set_0)
    immutable_list_1.unshift(list_0)


def test_case_18():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.append(immutable_list_0)
    immutable_list_2 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_3 = immutable_list_2.unshift(immutable_list_1)
    immutable_list_4 = immutable_list_1.unshift(immutable_list_1)
    immutable_list_5 = immutable_list_0.unshift(immutable_list_2)
    bool_0 = immutable_list_2.__eq__(immutable_list_3)
    immutable_list_2.find(immutable_list_5)


def test_case_19():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    str_0 = immutable_list_0.__str__()
    str_1 = immutable_list_0.__str__()
    immutable_list_2 = immutable_list_0.unshift(none_type_0)
    immutable_list_3 = immutable_list_2.unshift(none_type_0)
    bool_0 = immutable_list_2.__eq__(none_type_0)
    immutable_list_4 = immutable_list_1.unshift(immutable_list_1)
    immutable_list_5 = immutable_list_0.append(none_type_0)
    immutable_list_6 = module_0.ImmutableList(none_type_0)
    bytes_0 = b"n\x18\x8e\x9c\x16ul\xa9"
    var_0 = immutable_list_1.__len__()
    var_1 = module_1.Generic()
    immutable_list_4.reduce(bytes_0, immutable_list_4)
