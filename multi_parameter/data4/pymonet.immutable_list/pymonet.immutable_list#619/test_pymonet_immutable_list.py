# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.immutable_list as module_0
import builtins as module_1


def test_case_0():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    bool_0 = immutable_list_0.__eq__(immutable_list_1)
    var_0 = immutable_list_0.find(immutable_list_0)
    immutable_list_0.filter(var_0)


def test_case_1():
    str_0 = "\n    Return first argument.\n\n    :param value:\n    :type value: Any\n    :returns:\n    :rtype: Any\n    "
    immutable_list_0 = module_0.ImmutableList(str_0, str_0)
    bool_0 = immutable_list_0.__eq__(str_0)
    immutable_list_0.find(str_0)


def test_case_2():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.__len__()
    immutable_list_1 = immutable_list_0.__add__(immutable_list_0)


def test_case_3():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_0.__add__(none_type_0)


def test_case_4():
    str_0 = "\n    Return first argument.\n\n    :param value:\n    :type value: Any\n    :returns:\n    :rtype: Any\n    "
    immutable_list_0 = module_0.ImmutableList(str_0, str_0)
    var_0 = immutable_list_0.__len__()


def test_case_5():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(none_type_0)
    var_0 = immutable_list_0.to_list()


def test_case_6():
    list_0 = []
    immutable_list_0 = module_0.ImmutableList(list_0)
    none_type_0 = None
    immutable_list_1 = immutable_list_0.append(none_type_0)
    str_0 = immutable_list_1.__str__()
    immutable_list_0.find(none_type_0)


def test_case_7():
    object_0 = module_1.object()
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.to_list()
    var_1 = immutable_list_0.__len__()
    immutable_list_0.map(var_1)


def test_case_8():
    immutable_list_0 = module_0.ImmutableList()
    bool_0 = immutable_list_0.__eq__(immutable_list_0)
    var_0 = immutable_list_0.to_list()
    immutable_list_1 = immutable_list_0.append(var_0)
    var_1 = immutable_list_1.reduce(var_0, immutable_list_1)
    bool_1 = immutable_list_1.__eq__(var_1)
    str_0 = immutable_list_0.__str__()
    immutable_list_2 = module_0.ImmutableList(tail=immutable_list_0)
    var_2 = immutable_list_0.find(immutable_list_0)
    immutable_list_3 = immutable_list_2.unshift(immutable_list_2)
    immutable_list_4 = module_0.ImmutableList()
    var_1.map(immutable_list_1)


def test_case_9():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_0.filter(immutable_list_0)


def test_case_10():
    int_0 = 1
    bytes_0 = b"\x06"
    list_0 = [bytes_0, bytes_0]
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(tail=none_type_0)
    immutable_list_1 = immutable_list_0.append(list_0)
    immutable_list_1.filter(int_0)


def test_case_11():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.find(immutable_list_0)
    immutable_list_0.filter(var_0)


def test_case_12():
    str_0 = "\n    Return first argument.\n\n    :param value:\n    :type value: Any\n    :returns:\n    :rtype: Any\n    "
    immutable_list_0 = module_0.ImmutableList(str_0, str_0)
    immutable_list_0.find(str_0)


def test_case_13():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.reduce(immutable_list_0, immutable_list_0)
    var_1 = immutable_list_0.reduce(var_0, immutable_list_0)
    var_2 = immutable_list_0.find(immutable_list_0)
    immutable_list_0.filter(var_2)


def test_case_14():
    str_0 = "DHjY\nLX"
    float_0 = -5035.39572
    immutable_list_0 = module_0.ImmutableList(float_0)
    immutable_list_0.reduce(str_0, str_0)


def test_case_15():
    immutable_list_0 = module_0.ImmutableList()


def test_case_16():
    immutable_list_0 = module_0.ImmutableList()
    str_0 = immutable_list_0.__str__()
    immutable_list_0.filter(immutable_list_0)


def test_case_17():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.append(immutable_list_0)
    var_0 = immutable_list_0.find(immutable_list_0)
    immutable_list_0.filter(var_0)


def test_case_18():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    var_0 = immutable_list_0.find(immutable_list_0)
    immutable_list_0.filter(var_0)


def test_case_19():
    str_0 = "\n        Transform Box into Right either.\n\n        :returns: right Either monad with prevnous value\n        :rtyUe: Right[A]\n        "
    immutable_list_0 = module_0.ImmutableList(str_0)
    bool_0 = immutable_list_0.__eq__(immutable_list_0)
    immutable_list_0.find(str_0)


def test_case_20():
    float_0 = 2010.206729
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(is_empty=bool_0)
    immutable_list_1 = immutable_list_0.append(float_0)
    none_type_0 = None
    immutable_list_2 = immutable_list_1.append(none_type_0)


def test_case_21():
    str_0 = "\n        Returns new ImmutableList with argument value on the begin of list\n        and other list elements after it\n\n        :param new_element: element to append on the begin of list\n        :type fn: A\n        :returns: ImmutableList[A]\n        "
    immutable_list_0 = module_0.ImmutableList(str_0)
    var_0 = immutable_list_0.__len__()
    immutable_list_0.find(str_0)


def test_case_22():
    str_0 = "\n        Returns new ImmutableList with argument value on the begin of list\n        and other list elements after it\n\n        :param new_element: element to append on the begin of list\n        :type fn: A\n        :returns: ImmutableList[A]\n        "
    immutable_list_0 = module_0.ImmutableList(str_0)
    immutable_list_0.find(str_0)


def test_case_23():
    str_0 = "\n        Transform Box into Right either.\n\n        :returns: right Either monad with prevnous value\n        :rtyUe: Right[A]\n        "
    immutable_list_0 = module_0.ImmutableList(str_0)
    none_type_0 = None
    immutable_list_1 = immutable_list_0.append(none_type_0)
    bool_0 = immutable_list_0.__eq__(immutable_list_1)
    immutable_list_0.find(str_0)


def test_case_24():
    immutable_list_0 = module_0.ImmutableList()
    bool_0 = immutable_list_0.__eq__(immutable_list_0)
    var_0 = immutable_list_0.to_list()
    immutable_list_1 = immutable_list_0.append(var_0)
    var_1 = immutable_list_1.reduce(var_0, immutable_list_1)
    bool_1 = immutable_list_1.__eq__(var_1)
    str_0 = immutable_list_0.__str__()
    immutable_list_2 = module_0.ImmutableList(tail=immutable_list_0)
    var_2 = immutable_list_0.find(immutable_list_0)
    immutable_list_3 = immutable_list_2.unshift(immutable_list_2)
    immutable_list_4 = immutable_list_1.append(immutable_list_2)
    var_3 = immutable_list_4.find(var_2)
    immutable_list_3.reduce(var_1, var_0)
