# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.immutable_list as module_0


def test_case_0():
    bytes_0 = b"\x1f\x1d\xc0M\xc8-\x8bz"
    immutable_list_0 = module_0.ImmutableList(bytes_0)
    bool_0 = immutable_list_0.__eq__(immutable_list_0)
    immutable_list_0.find(immutable_list_0)


def test_case_1():
    immutable_list_0 = module_0.ImmutableList()
    float_0 = 742.519028
    str_0 = immutable_list_0.__str__()
    bool_0 = immutable_list_0.__eq__(float_0)


def test_case_2():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.__add__(immutable_list_0)


def test_case_3():
    int_0 = 890
    list_0 = []
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(tail=list_0, is_empty=none_type_0)
    immutable_list_0.__add__(int_0)


def test_case_4():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.__len__()


def test_case_5():
    bytes_0 = b"\x1f\x1d\xc0M\xc8-\x8bz"
    immutable_list_0 = module_0.ImmutableList(bytes_0)
    bool_0 = immutable_list_0.__len__()
    immutable_list_0.find(immutable_list_0)


def test_case_6():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.to_list()


def test_case_7():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.reduce(immutable_list_0, immutable_list_0)
    immutable_list_1 = immutable_list_0.unshift(var_0)
    var_1 = immutable_list_1.to_list()
    immutable_list_1.find(var_0)


def test_case_8():
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(is_empty=bool_0)
    immutable_list_1 = module_0.ImmutableList()
    str_0 = immutable_list_1.__str__()
    var_0 = immutable_list_1.to_list()
    immutable_list_1.map(immutable_list_1)


def test_case_9():
    immutable_list_0 = module_0.ImmutableList()
    str_0 = immutable_list_0.__str__()
    var_0 = immutable_list_0.__len__()
    immutable_list_1 = immutable_list_0.append(var_0)
    bool_0 = var_0.__eq__(immutable_list_1)
    immutable_list_1.map(var_0)


def test_case_10():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_0.filter(immutable_list_0)


def test_case_11():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.find(immutable_list_0)
    bool_0 = immutable_list_0.__eq__(immutable_list_0)
    float_0 = 742.519028
    immutable_list_1 = immutable_list_0.unshift(float_0)
    var_1 = immutable_list_0.__len__()
    immutable_list_2 = immutable_list_1.append(float_0)
    immutable_list_2.filter(var_1)


def test_case_12():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.find(immutable_list_0)
    float_0 = 742.519028
    immutable_list_1 = immutable_list_0.unshift(float_0)
    immutable_list_1.find(float_0)


def test_case_13():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_1.find(immutable_list_1)


def test_case_14():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.reduce(immutable_list_0, immutable_list_0)
    immutable_list_1 = immutable_list_0.unshift(var_0)
    immutable_list_1.find(var_0)


def test_case_15():
    str_0 = "\n        Transform Either to Maybe.\n\n        :returns: Maybe with previous value\n        :rtype: Maybe[A]\n        "
    bytes_0 = b"\x1f\xb9\xc0l\xc8-\x86Jz"
    immutable_list_0 = module_0.ImmutableList(bytes_0)
    immutable_list_0.reduce(str_0, str_0)


def test_case_16():
    immutable_list_0 = module_0.ImmutableList()


def test_case_17():
    immutable_list_0 = module_0.ImmutableList()
    str_0 = immutable_list_0.__str__()
    var_0 = immutable_list_0.__len__()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)


def test_case_18():
    immutable_list_0 = module_0.ImmutableList()
    float_0 = 742.519028
    immutable_list_1 = immutable_list_0.unshift(float_0)
    immutable_list_2 = immutable_list_1.append(immutable_list_0)
    immutable_list_1.find(float_0)


def test_case_19():
    float_0 = 494.79
    immutable_list_0 = module_0.ImmutableList()
    bool_0 = False
    immutable_list_1 = module_0.ImmutableList(is_empty=bool_0)
    immutable_list_2 = immutable_list_1.__add__(immutable_list_0)
    immutable_list_3 = module_0.ImmutableList(float_0)
    immutable_list_4 = immutable_list_3.unshift(immutable_list_3)
    immutable_list_4.reduce(immutable_list_3, immutable_list_3)


def test_case_20():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.reduce(immutable_list_0, immutable_list_0)
    immutable_list_1 = module_0.ImmutableList(tail=var_0)
    float_0 = 742.519028
    immutable_list_2 = immutable_list_1.__add__(immutable_list_0)
    immutable_list_3 = immutable_list_2.append(float_0)
    bool_0 = immutable_list_3.__eq__(var_0)
    var_1 = immutable_list_3.find(float_0)
    immutable_list_3.filter(float_0)


def test_case_21():
    immutable_list_0 = module_0.ImmutableList()
    float_0 = 742.519028
    immutable_list_1 = immutable_list_0.unshift(float_0)
    immutable_list_2 = immutable_list_1.append(immutable_list_0)
    var_0 = immutable_list_1.__len__()
    immutable_list_1.find(float_0)


def test_case_22():
    bytes_0 = b"\x1f\x1d\xc0M\xc8-\x8bz"
    immutable_list_0 = module_0.ImmutableList(bytes_0)
    immutable_list_0.find(immutable_list_0)


def test_case_23():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_2 = immutable_list_1.__add__(immutable_list_0)
    bool_0 = immutable_list_1.__eq__(immutable_list_0)
    var_0 = immutable_list_0.__len__()
    var_1 = immutable_list_2.to_list()
    immutable_list_2.find(immutable_list_2)
