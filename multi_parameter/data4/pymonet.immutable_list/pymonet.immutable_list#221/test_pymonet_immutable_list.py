# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.immutable_list as module_0


def test_case_0():
    immutable_list_0 = module_0.ImmutableList()
    none_type_0 = None
    immutable_list_1 = module_0.ImmutableList(tail=none_type_0)
    immutable_list_2 = immutable_list_0.__add__(immutable_list_0)
    bool_0 = immutable_list_2.__eq__(immutable_list_0)


def test_case_1():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_1.find(immutable_list_0)


def test_case_2():
    none_type_0 = None
    none_type_1 = None
    immutable_list_0 = module_0.ImmutableList(none_type_1, none_type_1, none_type_1)
    immutable_list_0.__add__(none_type_0)


def test_case_3():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(none_type_0)
    var_0 = immutable_list_0.__len__()
    var_0.to_list()


def test_case_4():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_2 = immutable_list_1.__len__()
    immutable_list_1.find(immutable_list_0)


def test_case_5():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.to_list()


def test_case_6():
    immutable_list_0 = module_0.ImmutableList()
    str_0 = immutable_list_0.__str__()
    immutable_list_1 = immutable_list_0.append(str_0)
    immutable_list_2 = immutable_list_0.unshift(immutable_list_0)
    var_0 = immutable_list_1.to_list()
    var_1 = immutable_list_0.reduce(var_0, immutable_list_2)
    immutable_list_2.find(immutable_list_0)


def test_case_7():
    bool_0 = True
    int_0 = 2729
    immutable_list_0 = module_0.ImmutableList(int_0)
    immutable_list_0.map(bool_0)


def test_case_8():
    immutable_list_0 = module_0.ImmutableList()
    str_0 = immutable_list_0.__str__()
    immutable_list_1 = immutable_list_0.__add__(immutable_list_0)
    var_0 = immutable_list_0.__len__()
    immutable_list_1.map(var_0)


def test_case_9():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_0.filter(immutable_list_0)


def test_case_10():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.reduce(immutable_list_0, immutable_list_0)
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    var_1 = var_0.find(var_0)
    immutable_list_1.find(var_0)


def test_case_11():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.to_list()
    var_1 = immutable_list_0.reduce(var_0, var_0)


def test_case_12():
    str_0 = "\n        If Maybe is empty return default_value, in other case.\n\n        :param default_value: value to return if Maybe is empty\n        :type default_value: Any\n        :returns: value of Maybe or default_value\n        :rtype: A\n        "
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.reduce(none_type_0, immutable_list_0)
    immutable_list_1 = immutable_list_0.unshift(str_0)
    immutable_list_2 = immutable_list_1.append(str_0)
    immutable_list_2.reduce(none_type_0, str_0)


def test_case_13():
    immutable_list_0 = module_0.ImmutableList()


def test_case_14():
    immutable_list_0 = module_0.ImmutableList()
    str_0 = immutable_list_0.__str__()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_1.find(immutable_list_0)


def test_case_15():
    immutable_list_0 = module_0.ImmutableList()
    str_0 = immutable_list_0.__str__()
    immutable_list_1 = immutable_list_0.append(str_0)
    immutable_list_2 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_2.find(immutable_list_0)


def test_case_16():
    none_type_0 = None
    float_0 = 477.436
    none_type_1 = None
    immutable_list_0 = module_0.ImmutableList(float_0, none_type_1)
    immutable_list_1 = immutable_list_0.unshift(none_type_0)
    bytes_0 = b"\x14\xef\x14\xe3nsq\x85\x16\x993\xb0\xd0=\xea\xf5H\x98\xc6R"
    immutable_list_2 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_3 = module_0.ImmutableList(bytes_0, bytes_0)
    bool_0 = immutable_list_3.__eq__(immutable_list_0)
    immutable_list_3.find(immutable_list_1)


def test_case_17():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_2 = immutable_list_1.__add__(immutable_list_0)
    immutable_list_1.find(immutable_list_0)


def test_case_18():
    str_0 = "\n        Returns True when errors list are not empty.\n\n        :returns: True for empty errors not list\n        :rtype: Boolean\n        "
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(str_0, is_empty=none_type_0)
    var_0 = immutable_list_0.__len__()
    immutable_list_0.find(var_0)


def test_case_19():
    str_0 = "\n        Returns True when errors list are not empty.\n\n        :returns: True for empty errors not list\n        :rtype: Boolean\n        "
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(str_0, is_empty=none_type_0)
    immutable_list_0.find(none_type_0)


def test_case_20():
    float_0 = -521.46607
    immutable_list_0 = module_0.ImmutableList(float_0)
    immutable_list_1 = module_0.ImmutableList()
    immutable_list_0.reduce(immutable_list_0, immutable_list_1)


def test_case_21():
    immutable_list_0 = module_0.ImmutableList()
    bool_0 = immutable_list_0.__eq__(immutable_list_0)
    var_0 = immutable_list_0.reduce(immutable_list_0, immutable_list_0)
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_1.find(var_0)


def test_case_22():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(none_type_0)
    var_0 = immutable_list_1.find(none_type_0)
    var_1 = immutable_list_0.to_list()
    var_2 = immutable_list_0.find(var_1)
    immutable_list_1.filter(var_2)
