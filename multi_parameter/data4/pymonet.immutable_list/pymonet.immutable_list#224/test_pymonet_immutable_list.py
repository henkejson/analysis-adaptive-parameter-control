# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.immutable_list as module_0


def test_case_0():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(is_empty=none_type_0)
    bool_0 = immutable_list_0.__eq__(immutable_list_0)
    immutable_list_1 = module_0.ImmutableList(immutable_list_0)
    immutable_list_1.find(immutable_list_0)


def test_case_1():
    str_0 = "3Lr3"
    immutable_list_0 = module_0.ImmutableList(str_0)
    bool_0 = immutable_list_0.__eq__(str_0)
    immutable_list_0.find(bool_0)


def test_case_2():
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(bool_0)


def test_case_3():
    tuple_0 = ()
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(tuple_0, is_empty=bool_0)
    immutable_list_0.__add__(bool_0)


def test_case_4():
    none_type_0 = None
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(none_type_0, is_empty=bool_0)
    bool_1 = immutable_list_0.__eq__(immutable_list_0)
    var_0 = immutable_list_0.__len__()
    immutable_list_1 = module_0.ImmutableList()


def test_case_5():
    str_0 = "3r3"
    immutable_list_0 = module_0.ImmutableList(str_0)
    var_0 = immutable_list_0.__len__()
    immutable_list_0.find(var_0)


def test_case_6():
    none_type_0 = None
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(none_type_0, none_type_0, bool_0)
    var_0 = immutable_list_0.to_list()


def test_case_7():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(is_empty=none_type_0)
    immutable_list_1 = immutable_list_0.unshift(none_type_0)
    var_0 = immutable_list_1.to_list()
    immutable_list_2 = immutable_list_1.append(none_type_0)
    immutable_list_3 = module_0.ImmutableList(immutable_list_1)
    immutable_list_3.find(immutable_list_2)


def test_case_8():
    none_type_0 = None
    none_type_1 = None
    immutable_list_0 = module_0.ImmutableList(tail=none_type_1)
    immutable_list_0.map(none_type_0)


def test_case_9():
    none_type_0 = None
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(none_type_0, none_type_0, bool_0)
    none_type_1 = None
    none_type_2 = None
    complex_0 = -2562.16 - 56.3j
    bool_1 = immutable_list_0.__eq__(complex_0)
    immutable_list_1 = module_0.ImmutableList(is_empty=none_type_1)
    bool_2 = True
    immutable_list_2 = module_0.ImmutableList(tail=complex_0, is_empty=bool_2)
    var_0 = immutable_list_1.to_list()
    immutable_list_2.map(none_type_2)


def test_case_10():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_0.filter(immutable_list_0)


def test_case_11():
    none_type_0 = None
    bool_0 = False
    immutable_list_0 = module_0.ImmutableList(none_type_0, is_empty=bool_0)
    immutable_list_1 = module_0.ImmutableList()
    immutable_list_2 = immutable_list_1.__add__(immutable_list_0)
    var_0 = immutable_list_2.to_list()
    var_1 = immutable_list_0.to_list()
    immutable_list_2.filter(var_1)


def test_case_12():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(is_empty=none_type_0)
    var_0 = immutable_list_0.find(immutable_list_0)
    immutable_list_1 = module_0.ImmutableList(immutable_list_0)
    immutable_list_1.find(immutable_list_0)


def test_case_13():
    str_0 = "3r3"
    immutable_list_0 = module_0.ImmutableList(str_0)
    immutable_list_0.find(immutable_list_0)


def test_case_14():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(is_empty=none_type_0)
    immutable_list_1 = immutable_list_0.unshift(none_type_0)
    var_0 = immutable_list_1.reduce(immutable_list_1, immutable_list_1)
    immutable_list_2 = module_0.ImmutableList(immutable_list_1)
    immutable_list_2.find(var_0)


def test_case_15():
    str_0 = "\n        Take function, store it and call with Task value during calling fork function.\n        Return new Task with result of called.\n\n        :param fn: mapper function\n        :type fn: Function(value) -> B\n        :returns: new Task with mapped resolve attribute\n        :rtype: Task[Function(resolve, reject -> A | B]\n        "
    immutable_list_0 = module_0.ImmutableList(str_0, str_0)
    var_0 = immutable_list_0.__len__()
    immutable_list_0.reduce(var_0, immutable_list_0)


def test_case_16():
    immutable_list_0 = module_0.ImmutableList()


def test_case_17():
    str_0 = "rN"
    immutable_list_0 = module_0.ImmutableList(str_0)
    str_1 = immutable_list_0.__str__()
    var_0 = immutable_list_0.__len__()
    immutable_list_0.find(var_0)


def test_case_18():
    none_type_0 = None
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(is_empty=bool_0)
    immutable_list_1 = immutable_list_0.append(none_type_0)


def test_case_19():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(is_empty=none_type_0)
    immutable_list_1 = immutable_list_0.unshift(none_type_0)
    immutable_list_2 = module_0.ImmutableList(immutable_list_1)
    immutable_list_3 = immutable_list_2.__add__(immutable_list_0)
    bool_0 = immutable_list_0.__eq__(immutable_list_3)
    immutable_list_2.find(none_type_0)


def test_case_20():
    str_0 = "\n        Take function, store it and call with Task value during calling fork function.\n        Return new Task with result of called.\n\n        :param fn: mapper function\n        :type fn: Function(value) -> B\n        :returns: new Task with mapped resolve attribute\n        :rtype: Task[Function(resolve, reject -> A | B]\n        "
    immutable_list_0 = module_0.ImmutableList(str_0, str_0)
    var_0 = immutable_list_0.__len__()
    immutable_list_0.find(immutable_list_0)


def test_case_21():
    bool_0 = False
    none_type_0 = None
    bool_1 = False
    immutable_list_0 = module_0.ImmutableList(bool_0, is_empty=bool_1)
    immutable_list_0.reduce(none_type_0, bool_0)


def test_case_22():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(is_empty=none_type_0)
    immutable_list_1 = immutable_list_0.unshift(none_type_0)
    var_0 = immutable_list_1.reduce(none_type_0, immutable_list_0)
    immutable_list_2 = immutable_list_1.append(none_type_0)
    immutable_list_3 = module_0.ImmutableList(immutable_list_1)
    immutable_list_3.find(immutable_list_2)


def test_case_23():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(is_empty=none_type_0)
    immutable_list_1 = immutable_list_0.unshift(none_type_0)
    var_0 = immutable_list_1.reduce(immutable_list_1, immutable_list_1)
    immutable_list_2 = module_0.ImmutableList(immutable_list_1)
    bool_0 = immutable_list_0.__eq__(var_0)
    immutable_list_2.find(var_0)
