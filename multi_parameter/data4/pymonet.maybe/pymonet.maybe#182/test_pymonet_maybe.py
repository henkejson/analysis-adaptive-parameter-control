# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    bool_0 = True
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    bool_2 = maybe_0.__eq__(bool_0)
    bool_0.to_lazy()


def test_case_3():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.map(bool_0)
    var_2 = maybe_0.to_validation()
    var_3 = var_1.to_box()


def test_case_4():
    str_0 = "ez] |$S|/+>{"
    maybe_0 = module_0.Maybe(str_0, str_0)
    bytes_0 = b"\xe9\x10\xbaH\x9c\x03\xb7pA"
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1.map(bytes_0)


def test_case_5():
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.ap(bool_0)
    var_1 = maybe_0.filter(none_type_0)
    float_0 = 785.63
    var_2 = maybe_0.filter(float_0)
    var_3 = var_0.to_try()
    var_4 = maybe_0.bind(var_0)


def test_case_6():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(bool_0, bool_1)
    bool_2 = maybe_1.__eq__(bool_0)
    var_0 = maybe_1.to_box()
    var_1 = maybe_1.to_lazy()
    var_2 = maybe_1.to_either()
    var_3 = var_1.to_either()
    maybe_1.bind(var_3)


def test_case_7():
    none_type_0 = None
    bool_0 = False
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_1, bool_1)
    var_0 = maybe_0.ap(bool_0)
    var_1 = var_0.get_or_else(none_type_0)
    var_1.to_lazy()


def test_case_8():
    bytes_0 = b"j\xb1z\xe7\xe8\x16\xa4K\t'\xd4"
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_validation()
    bool_0 = False
    maybe_1 = module_0.Maybe(bytes_0, bool_0)
    bool_1 = maybe_1.__eq__(maybe_1)
    maybe_1.ap(maybe_0)


def test_case_9():
    none_type_0 = None
    bool_0 = False
    dict_0 = {}
    bool_1 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_1)
    var_0 = maybe_0.filter(bool_0)
    var_1 = var_0.to_either()
    var_2 = var_1.to_box()
    var_2.bind(dict_0)


def test_case_10():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    maybe_0.filter(maybe_0)


def test_case_11():
    int_0 = 609
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.get_or_else(int_0)


def test_case_12():
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.get_or_else(bool_0)
    var_0.to_lazy()


def test_case_13():
    none_type_0 = None
    int_0 = 0
    int_1 = 0
    maybe_0 = module_0.Maybe(int_0, int_1)
    var_0 = maybe_0.to_box()
    var_0.bind(none_type_0)


def test_case_14():
    bytes_0 = b"\xa9\x8f\xd6$\xf76\x85\xbb\x9d\xe0\xba"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_lazy()


def test_case_15():
    str_0 = "4mKcz\\s"
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.get_or_else(str_0)
    maybe_1 = module_0.Maybe(str_0, str_0)
    var_1 = maybe_1.to_try()
    var_1.to_either()


def test_case_16():
    bool_0 = False
    set_0 = {bool_0}
    none_type_0 = None
    maybe_0 = module_0.Maybe(set_0, none_type_0)
    var_0 = maybe_0.to_try()
    var_0.to_either()


def test_case_17():
    bytes_0 = b"j\xb1z\xe7\xe8\x16\xa4K\t'\xd4"
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.to_validation()
    maybe_1 = module_0.Maybe(bytes_0, var_0)
    var_2 = maybe_0.to_box()
    var_3 = maybe_1.filter(var_1)
    var_4 = var_3.map(none_type_0)
    bool_0 = maybe_0.__eq__(var_4)
    maybe_0.filter(maybe_1)


def test_case_18():
    bytes_0 = b"j\xb1z\xe7\xe8\x16\xa4K\t'\xd4"
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    bool_0.to_either()


def test_case_19():
    bytes_0 = b"j\xb1z\xaa\xe7\xe8\x16\xa4K\t'\xd4"
    str_0 = "\n        Returns Lazy with function returning argument.\n\n        :param value: value to return by Lazy constructor_fn\n        :type value: Any\n        :returns: Lazy with function returning argument\n        :rtype: Lazy[Function() -> A]\n        "
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, str_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.to_validation()
    maybe_1 = module_0.Maybe(bytes_0, var_1)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_2 = var_1.to_box()
    var_3 = maybe_0.map(var_2)
    var_4 = var_0.to_either()
    var_5 = var_1.to_either()
    var_6 = var_3.filter(var_5)
