# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1


def test_case_0():
    bytes_0 = b"\x87\x86\xe8q\xac\xe8\xbb\x81\xa9\xec8N"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    bool_0 = True
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.map(bool_1)
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    bool_2 = maybe_1.__eq__(maybe_0)


def test_case_3():
    bytes_0 = b"\x97r\xeb\x99\x17M\xe8m\xef\x86\x85\xfb\xb5\x7f\xabv"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.filter(maybe_0)
    bool_0 = var_0.__eq__(bytes_0)
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    maybe_1.filter(maybe_1)


def test_case_4():
    generic_0 = module_1.Generic()
    list_0 = [generic_0, generic_0]
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_try()
    list_1 = [var_0, var_0]
    bool_1 = False
    maybe_1 = module_0.Maybe(list_1, bool_1)
    maybe_1.map(list_0)


def test_case_5():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_0.bind(bool_0)


def test_case_6():
    tuple_0 = ()
    int_0 = 594
    bool_0 = True
    set_0 = {bool_0}
    maybe_0 = module_0.Maybe(set_0, bool_0)
    var_0 = maybe_0.filter(int_0)
    var_1 = var_0.ap(tuple_0)
    var_2 = var_1.to_box()
    var_3 = var_2.to_validation()


def test_case_7():
    bytes_0 = b"-(\xf7\xb9\xa6\xed\x12\x10{C\xec\xefk\xb5"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_lazy()
    bytes_1 = b"c3\xf2\t,@\xf0"
    set_0 = {bytes_1, bytes_1, bytes_1, bytes_1}
    bool_0 = False
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    maybe_1.ap(set_0)


def test_case_8():
    bytes_0 = b"GB6\x89\xb9\xda\xff"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.get_or_else(maybe_0)


def test_case_9():
    complex_0 = 1293.7 + 5191.31185j
    int_0 = 1033
    bool_0 = False
    maybe_0 = module_0.Maybe(int_0, bool_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(complex_0, bool_1)
    var_0 = maybe_1.to_either()
    bool_2 = maybe_1.__eq__(bool_1)
    var_1 = maybe_1.get_or_else(complex_0)
    var_2 = maybe_1.get_or_else(maybe_1)
    var_3 = maybe_1.to_box()
    var_1.to_validation()


def test_case_10():
    int_0 = 1
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_box()


def test_case_11():
    int_0 = 2684
    bool_0 = False
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_lazy()


def test_case_12():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_box()
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)


def test_case_13():
    bytes_0 = b"\x87\x86\xe8q\xac\xe8\xbb\x81\xa9\xec8N"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_lazy()


def test_case_14():
    int_0 = -247
    none_type_0 = None
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.map(none_type_0)
    bool_0 = False
    maybe_1 = module_0.Maybe(int_0, bool_0)
    var_1 = maybe_1.to_lazy()
    var_2 = var_1.to_box()
    var_3 = var_1.to_validation()
    maybe_2 = module_0.Maybe(int_0, bool_0)
    var_4 = maybe_2.to_box()
    maybe_2.filter(var_1)


def test_case_15():
    bytes_0 = b"\x97r\xeb\x99\x17M\xe8m\xef\x86\x85\xfb\xb5\x7f\xabv"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    bool_0 = maybe_0.to_try()
    var_0 = maybe_0.filter(bool_0)
    bool_1 = var_0.__eq__(bytes_0)
    maybe_1 = module_0.Maybe(bool_1, bool_1)
    maybe_1.filter(maybe_1)


def test_case_16():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_try()


def test_case_17():
    bytes_0 = b"P\xfd\x7f?%]\x8c\x1d\xcf\xc8\x94e\x97\x0ck\x85\xcd\x03\xaa"
    bool_0 = False
    generic_0 = module_1.Generic()
    set_0 = {bytes_0, bool_0, generic_0, generic_0}
    maybe_0 = module_0.Maybe(set_0, generic_0)
    var_0 = maybe_0.to_validation()
    list_0 = [generic_0]
    bool_1 = var_0.__eq__(list_0)


def test_case_18():
    complex_0 = 1293.7 + 5191.31185j
    int_0 = 1033
    bool_0 = False
    maybe_0 = module_0.Maybe(int_0, bool_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(complex_0, bool_1)
    var_0 = maybe_1.to_either()
    bool_2 = maybe_1.__eq__(bool_1)
    var_1 = maybe_1.get_or_else(complex_0)
    var_2 = maybe_1.get_or_else(maybe_1)
    var_3 = maybe_1.to_validation()
    var_4 = maybe_1.to_try()
    var_3.bind(maybe_1)


def test_case_19():
    bytes_0 = b"GB6\x89\xb9\xda\xff"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.bind(bytes_0)


def test_case_20():
    bytes_0 = b"\x97r\xeb\x99\x17M\xe8m\xef\x86\x85\xfb\xb5\x7f\xabv"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.filter(bool_0)
    bool_1 = var_0.__eq__(bytes_0)
    maybe_1 = module_0.Maybe(bool_1, bool_1)
    maybe_1.filter(maybe_1)


def test_case_21():
    int_0 = -247
    none_type_0 = None
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.map(none_type_0)
    bool_0 = var_0.__eq__(int_0)
    maybe_1 = module_0.Maybe(int_0, maybe_0)
    var_1 = maybe_1.to_lazy()
    var_2 = var_1.to_box()
    var_3 = var_1.to_validation()
    maybe_2 = module_0.Maybe(int_0, bool_0)
    var_4 = maybe_2.to_box()
    maybe_2.filter(var_1)


def test_case_22():
    int_0 = 1033
    bool_0 = False
    maybe_0 = module_0.Maybe(int_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.get_or_else(bool_1)
    maybe_0.ap(var_0)
