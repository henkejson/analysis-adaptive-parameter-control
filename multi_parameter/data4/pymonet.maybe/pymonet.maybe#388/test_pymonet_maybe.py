# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    int_0 = 406
    int_1 = -5558
    maybe_0 = module_0.Maybe(int_1, int_1)
    var_0 = maybe_0.map(int_0)
    bool_0 = maybe_0.__eq__(int_1)
    var_1 = maybe_0.to_lazy()
    var_1.filter(var_1)


def test_case_3():
    none_type_0 = None
    none_type_1 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_1, bool_0)
    var_0 = maybe_0.map(none_type_0)


def test_case_4():
    str_0 = "*@"
    maybe_0 = module_0.Maybe(str_0, str_0)
    bool_0 = False
    maybe_1 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_1.to_validation()
    var_1 = maybe_1.to_try()
    var_2 = maybe_1.to_lazy()
    var_3 = maybe_1.to_either()
    var_4 = var_3.to_box()
    maybe_1.map(maybe_0)


def test_case_5():
    bytes_0 = b"\x8c|\xed"
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.bind(bytes_0)
    var_1 = var_0.get_or_else(bytes_0)
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    maybe_1 = module_0.Maybe(dict_0, bytes_0)
    var_2 = maybe_1.to_try()
    int_0 = -2957
    set_0 = {int_0, int_0, int_0}
    maybe_2 = module_0.Maybe(set_0, int_0)
    var_3 = maybe_2.to_box()


def test_case_6():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.to_try()
    maybe_0.bind(none_type_0)


def test_case_7():
    int_0 = 406
    int_1 = -5558
    maybe_0 = module_0.Maybe(int_1, int_1)
    var_0 = maybe_0.map(int_0)
    var_1 = maybe_0.filter(int_0)
    bool_0 = var_1.__eq__(var_0)
    var_2 = var_0.ap(var_0)
    var_3 = var_0.to_box()
    var_4 = maybe_0.get_or_else(var_3)
    var_3.to_box()


def test_case_8():
    generic_0 = module_1.Generic()
    complex_0 = -2958.8 - 157.013j
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.ap(complex_0)


def test_case_9():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.filter(maybe_0)


def test_case_10():
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.filter(bool_0)


def test_case_11():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(bool_1, bool_1)
    var_0 = maybe_1.get_or_else(bool_1)
    var_0.to_try()


def test_case_12():
    str_0 = "ga7w|&~liZ7m,u:qd(x`"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    var_1 = var_0.to_try()
    none_type_0 = None
    var_2 = var_0.filter(none_type_0)
    tuple_0 = ()
    var_3 = maybe_0.to_either()
    maybe_1 = module_0.Maybe(var_1, tuple_0)
    var_4 = var_1.filter(var_0)
    var_5 = maybe_1.to_try()


def test_case_13():
    none_type_0 = None
    none_type_1 = None
    maybe_0 = module_0.Maybe(none_type_1, none_type_1)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_lazy()
    var_2 = var_1.to_try()
    var_2.ap(none_type_0)


def test_case_14():
    set_0 = set()
    str_0 = "\n        Transform Box into Validation.\n\n        :returns: failed Validation monad with previous value as error\n        :rtype: Validation[None, [A]]\n        "
    float_0 = 1169.36
    maybe_0 = module_0.Maybe(str_0, float_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_either()
    var_1.get_or_else(set_0)


def test_case_15():
    none_type_0 = None
    complex_0 = -2423.71209 + 3272.6962j
    maybe_0 = module_0.Maybe(complex_0, complex_0)
    var_0 = maybe_0.to_validation()
    var_0.map(none_type_0)


def test_case_16():
    bool_0 = False
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_validation()
    var_1 = var_0.to_box()
    var_1.to_box()


def test_case_17():
    tuple_0 = ()
    maybe_0 = module_0.Maybe(tuple_0, tuple_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_try()
    maybe_1 = module_0.Maybe(tuple_0, tuple_0)
    var_2 = maybe_1.to_try()
    bool_0 = False
    var_3 = maybe_1.to_either()
    bool_1 = False
    maybe_2 = module_0.Maybe(bool_0, bool_1)
    none_type_0 = None
    var_4 = maybe_2.get_or_else(none_type_0)
    var_5 = maybe_2.get_or_else(var_3)
    var_5.get_or_else(maybe_2)


def test_case_18():
    str_0 = "\\3OB\n]a8ns\\1m<\n3v?"
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    maybe_1 = module_0.Maybe(maybe_0, maybe_0)
    none_type_0 = None
    maybe_2 = module_0.Maybe(none_type_0, none_type_0)
    maybe_3 = module_0.Maybe(maybe_1, maybe_1)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_1.filter(var_0)
    var_2 = maybe_2.to_lazy()
    var_3 = maybe_0.ap(bool_0)
    bool_1 = maybe_2.__eq__(var_2)
    var_4 = maybe_2.to_validation()
    bool_2 = maybe_2.__eq__(maybe_0)
    bool_3 = maybe_2.__eq__(maybe_2)
    var_5 = maybe_0.to_either()
    var_4.ap(maybe_1)
