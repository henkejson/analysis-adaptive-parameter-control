# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import builtins as module_1
import typing as module_2


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    none_type_0 = None
    float_0 = -4622.51094
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.filter(float_0)
    bool_1 = var_0.__eq__(var_0)
    var_1 = var_0.to_box()
    var_2 = maybe_0.to_either()


def test_case_3():
    object_0 = module_1.object()
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.filter(bool_0)
    bool_1 = maybe_0.__eq__(object_0)
    var_1 = maybe_0.to_box()
    var_2 = var_1.to_either()


def test_case_4():
    bool_0 = False
    str_0 = '/\r""'
    maybe_0 = module_0.Maybe(bool_0, str_0)
    var_0 = maybe_0.map(str_0)
    var_1 = var_0.to_either()
    none_type_0 = None
    dict_0 = {str_0: none_type_0, str_0: none_type_0}
    module_2.Generic(**dict_0)


def test_case_5():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    maybe_0.map(var_0)


def test_case_6():
    str_0 = "hP\rH;ek$NjUh"
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.get_or_else(var_0)
    var_2 = maybe_0.bind(var_0)


def test_case_7():
    none_type_0 = None
    int_0 = -446
    bool_0 = False
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    bool_2 = maybe_0.__eq__(int_0)
    bool_3 = False
    maybe_1 = module_0.Maybe(none_type_0, bool_3)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_1.get_or_else(maybe_1)
    maybe_1.bind(var_0)


def test_case_8():
    str_0 = "hP\rH;ek$NjUh"
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.ap(str_0)
    var_1 = maybe_0.to_validation()
    var_2 = var_1.to_either()
    var_3 = var_0.bind(str_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(str_0, bool_1)
    var_4 = maybe_0.to_either()
    var_5 = var_3.filter(var_4)
    var_6 = var_4.to_try()


def test_case_9():
    float_0 = 377.0
    bytes_0 = b"y\xf3\xd9z;w\x91\xbe\x9d\x17S\x11"
    none_type_0 = None
    maybe_0 = module_0.Maybe(bytes_0, none_type_0)
    maybe_0.ap(float_0)


def test_case_10():
    bytes_0 = b"\xdc/y\xce\xaa\x9c@\xef\xc0\xec\xcd\xc4i\xa5\xcfq\xd6\x89"
    float_0 = 1849.7677
    maybe_0 = module_0.Maybe(float_0, bytes_0)
    var_0 = maybe_0.filter(bytes_0)
    var_1 = maybe_0.to_try()
    var_2 = var_0.to_either()
    var_3 = var_0.to_box()


def test_case_11():
    none_type_0 = None
    str_0 = ""
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    maybe_0.filter(none_type_0)


def test_case_12():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_either()
    maybe_0.ap(none_type_0)


def test_case_13():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.get_or_else(none_type_0)
    var_2 = maybe_0.to_box()
    var_3 = var_2.to_either()
    maybe_0.ap(var_0)


def test_case_14():
    bool_0 = True
    str_0 = "Lazy[T, U]"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.to_validation()
    var_2 = maybe_0.bind(var_1)
    var_1.map(bool_0)


def test_case_15():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.to_box()
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    var_2 = maybe_0.to_box()
    none_type_0 = None
    var_3 = maybe_1.get_or_else(none_type_0)
    set_0 = {bool_0}
    var_4 = maybe_0.get_or_else(set_0)
    bool_1 = var_2.__eq__(var_3)
    var_5 = maybe_1.to_lazy()
    var_6 = var_5.map(var_0)


def test_case_16():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_try()


def test_case_17():
    bytes_0 = b"\x1b\x0b\xb8\x88-\x91"
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    bool_1 = maybe_0.__eq__(bool_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.bind(var_0)
    var_2 = var_1.ap(var_0)
    var_3 = var_1.filter(maybe_0)
    var_4 = maybe_0.filter(maybe_0)
    var_5 = maybe_0.ap(bytes_0)
    var_6 = var_1.map(var_1)
    bool_2 = var_0.__eq__(var_1)
    var_7 = var_3.map(bytes_0)
    var_8 = maybe_0.to_lazy()
    bool_3 = var_6.__eq__(var_0)
    var_9 = maybe_0.to_box()
    var_10 = maybe_0.bind(var_0)
    var_11 = var_8.to_try()
    maybe_1 = module_0.Maybe(var_10, bool_1)
    maybe_1.filter(var_11)


def test_case_18():
    int_0 = 303
    bool_0 = True
    none_type_0 = None
    int_1 = -354
    maybe_0 = module_0.Maybe(none_type_0, int_1)
    var_0 = maybe_0.bind(bool_0)
    var_1 = var_0.bind(none_type_0)
    var_2 = var_1.get_or_else(int_0)
    var_3 = maybe_0.filter(var_2)
    bool_1 = var_3.__eq__(maybe_0)
    var_2.to_box()


def test_case_19():
    bool_0 = True
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    bool_2 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_try()
    bool_3 = maybe_0.__eq__(bool_0)
    maybe_0.filter(bool_0)


def test_case_20():
    bytes_0 = b"\x1b\x0b\xbc\xb8\x88-\x91\xc3"
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    bool_1 = maybe_0.__eq__(bool_0)
    var_0 = maybe_0.to_try()
    bool_2 = maybe_0.__eq__(bytes_0)
    maybe_1 = module_0.Maybe(var_0, bool_1)
    var_1 = maybe_0.ap(bytes_0)
    var_2 = var_0.get_or_else(maybe_1)
    var_3 = maybe_0.filter(var_2)
    bool_3 = maybe_0.__eq__(maybe_1)
    var_4 = maybe_0.to_try()
    var_5 = var_3.to_lazy()
    var_6 = maybe_0.to_box()
    bool_4 = var_4.__eq__(var_4)
    var_7 = var_1.to_box()
    var_8 = var_0.bind(var_6)
    var_9 = var_2.to_try()
    var_10 = var_8.bind(var_9)
    var_11 = maybe_1.to_lazy()
    var_12 = var_1.to_try()
    var_13 = var_5.to_box()
    bool_5 = maybe_0.__eq__(maybe_0)
    var_14 = var_1.get_or_else(var_11)
    var_15 = maybe_1.to_try()
    var_16 = maybe_0.bind(var_6)
    var_17 = var_11.to_try()
    var_15.to_box()
