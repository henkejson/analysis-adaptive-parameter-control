# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1


def test_case_0():
    float_0 = 2494.693
    maybe_0 = module_0.Maybe(float_0, float_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    bool_1 = maybe_0.__eq__(bool_0)
    bool_2 = False
    maybe_1 = module_0.Maybe(bool_2, none_type_0)


def test_case_3():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.map(none_type_0)


def test_case_4():
    str_0 = "?3[\\"
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    maybe_0.map(str_0)


def test_case_5():
    int_0 = -36
    maybe_0 = module_0.Maybe(int_0, int_0)
    none_type_0 = None
    bool_0 = maybe_0.__eq__(none_type_0)
    var_0 = maybe_0.bind(bool_0)
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    var_1 = var_0.filter(bool_0)
    maybe_1.filter(bool_0)


def test_case_6():
    bytes_0 = b"\x14\x08j\xa4~\xb3m\xe1\xeb\\r\x89\xc6\x9e\xdf\tm["
    bool_0 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    maybe_1 = module_0.Maybe(bytes_0, bytes_0)
    none_type_0 = None
    bool_1 = False
    var_0 = maybe_1.ap(maybe_1)
    maybe_2 = module_0.Maybe(bytes_0, bool_1)
    maybe_2.bind(none_type_0)


def test_case_7():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_validation()
    var_1 = var_0.to_either()
    var_2 = var_1.to_box()
    var_3 = var_2.to_lazy()
    complex_0 = 3619.359 + 265.480064j
    str_0 = "R9E?7{lwu<$i"
    complex_1 = 2323 - 1667.4039j
    bool_0 = True
    maybe_1 = module_0.Maybe(complex_1, bool_0)
    var_4 = maybe_1.get_or_else(str_0)
    var_5 = maybe_1.ap(maybe_1)
    bool_1 = var_4.__eq__(var_4)
    var_4.map(complex_0)


def test_case_8():
    generic_0 = module_1.Generic()
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    maybe_0.ap(generic_0)


def test_case_9():
    int_0 = -36
    maybe_0 = module_0.Maybe(int_0, int_0)
    none_type_0 = None
    bool_0 = maybe_0.__eq__(none_type_0)
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.filter(bool_0)
    maybe_1.filter(bool_0)


def test_case_10():
    int_0 = -36
    maybe_0 = module_0.Maybe(int_0, int_0)
    none_type_0 = None
    bool_0 = maybe_0.__eq__(none_type_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.get_or_else(int_0)
    var_1 = maybe_0.bind(var_0)
    var_2 = var_1.to_try()
    var_3 = var_1.to_validation()
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    bool_2 = True
    var_4 = var_1.filter(bool_2)
    maybe_1.filter(bool_0)


def test_case_11():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    none_type_1 = None
    bool_0 = maybe_0.__eq__(maybe_0)
    bool_1 = maybe_0.get_or_else(none_type_0)
    bool_2 = False
    maybe_1 = module_0.Maybe(none_type_1, bool_2)
    var_0 = maybe_1.to_box()
    maybe_1.filter(var_0)


def test_case_12():
    int_0 = -36
    maybe_0 = module_0.Maybe(int_0, int_0)
    none_type_0 = None
    bool_0 = maybe_0.__eq__(none_type_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.bind(maybe_0)
    var_1 = var_0.to_try()
    var_2 = var_0.to_validation()
    var_3 = maybe_0.to_either()
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    bool_2 = True
    var_4 = var_0.filter(bool_2)
    maybe_1.filter(var_3)


def test_case_13():
    int_0 = -36
    maybe_0 = module_0.Maybe(int_0, int_0)
    none_type_0 = None
    bool_0 = maybe_0.__eq__(none_type_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.get_or_else(int_0)
    var_1 = maybe_0.bind(var_0)
    var_2 = var_1.to_try()
    var_3 = maybe_0.to_try()
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    bool_2 = True
    var_4 = var_1.filter(bool_2)
    var_5 = maybe_1.to_either()
    maybe_1.filter(maybe_0)


def test_case_14():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_box()
    var_0.to_box()


def test_case_15():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    none_type_1 = None
    bool_0 = maybe_0.__eq__(maybe_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    bool_2 = False
    maybe_1 = module_0.Maybe(none_type_1, bool_2)
    var_0 = maybe_1.to_box()
    maybe_1.filter(var_0)


def test_case_16():
    bool_0 = True
    bytes_0 = b"\xb1\xcd\xbf]\xf4cy\x10\xc4\xd0\xca\r\xa4c!\x06"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_try()
    var_0.get_or_else(bool_0)


def test_case_17():
    bytes_0 = b"\xd2Z"
    none_type_0 = None
    maybe_0 = module_0.Maybe(bytes_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_validation()
    var_1.filter(var_1)


def test_case_18():
    int_0 = -36
    maybe_0 = module_0.Maybe(int_0, int_0)
    none_type_0 = None
    bool_0 = maybe_0.__eq__(none_type_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.bind(bool_0)
    var_1 = var_0.to_try()
    var_2 = var_0.to_validation()
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    bool_2 = True
    var_3 = var_0.filter(bool_2)
    maybe_1.filter(bool_0)


def test_case_19():
    bool_0 = False
    str_0 = "\n        Returns new ImmutableList with argument value on the begin of list\n        and other list elements after it\n\n        :param new_element: element to append on the begin of list\n        :type fn: A\n        :returns: ImmutableList[A]\n        "
    tuple_0 = (bool_0, str_0, str_0)
    bool_1 = False
    maybe_0 = module_0.Maybe(tuple_0, bool_1)
    var_0 = maybe_0.to_try()
    var_0.to_validation()


def test_case_20():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = var_0.to_lazy()
    dict_0 = {}
    maybe_1 = module_0.Maybe(dict_0, bool_0)


def test_case_21():
    int_0 = 0
    tuple_0 = (int_0,)
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.to_validation()
    var_1.ap(tuple_0)


def test_case_22():
    int_0 = -36
    maybe_0 = module_0.Maybe(int_0, int_0)
    none_type_0 = None
    var_0 = maybe_0.ap(none_type_0)
    var_1 = maybe_0.filter(var_0)
    bool_0 = maybe_0.__eq__(var_1)
    bool_1 = var_0.__eq__(var_1)
    var_2 = var_1.get_or_else(var_0)
    var_3 = var_0.bind(var_2)
    var_4 = var_2.to_try()
    var_5 = var_3.to_try()
    var_6 = var_5.get_or_else(int_0)
    var_6.to_validation()
