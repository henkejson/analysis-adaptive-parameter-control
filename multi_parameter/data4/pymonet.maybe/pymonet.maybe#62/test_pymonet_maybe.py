# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import builtins as module_1
import typing as module_2


def test_case_0():
    complex_0 = -1539.0497 - 2131j
    maybe_0 = module_0.Maybe(complex_0, complex_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    var_1 = var_0.to_validation()
    var_2 = maybe_0.to_try()
    float_0 = -1491.3
    bool_1 = var_0.__eq__(bool_0)
    var_3 = var_0.to_box()
    var_4 = var_0.get_or_else(maybe_0)
    bool_2 = False
    var_5 = maybe_0.to_either()
    maybe_1 = module_0.Maybe(float_0, bool_2)
    var_6 = maybe_0.get_or_else(bool_0)
    var_7 = maybe_1.to_either()
    maybe_1.filter(maybe_1)


def test_case_3():
    str_0 = "\n        Take function and applied this function with monad value and returns function result.\n\n        :params binder: function to apply on monad value\n        :type binder: Function(A) -> Try[B]\n        :returns: for successfully result of binder, othercase copy of self\n        :rtype: Try[B]\n        "
    str_1 = "Maybe[T]"
    float_0 = 5624.758092
    tuple_0 = (float_0, float_0)
    int_0 = -1287
    maybe_0 = module_0.Maybe(tuple_0, int_0)
    var_0 = maybe_0.map(str_1)
    var_1 = var_0.to_lazy()
    var_1.get_or_else(str_0)


def test_case_4():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_either()
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    maybe_1.ap(maybe_1)


def test_case_5():
    str_0 = "Y8o"
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.map(str_0)
    var_1 = var_0.ap(str_0)
    var_2 = var_1.to_validation()
    set_0 = {str_0}
    bool_1 = False
    none_type_0 = None
    bool_2 = False
    var_3 = var_0.ap(set_0)
    var_4 = maybe_0.bind(var_3)
    maybe_1 = module_0.Maybe(none_type_0, bool_2)
    var_5 = var_2.to_lazy()
    var_6 = maybe_1.get_or_else(bool_1)
    var_6.ap(set_0)


def test_case_6():
    bool_0 = False
    list_0 = [bool_0]
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_0, list_0)
    var_0 = maybe_0.to_lazy()
    bool_1 = var_0.__eq__(none_type_0)
    bytes_0 = b"&\\K\x9a\n\x16"
    bool_2 = False
    maybe_1 = module_0.Maybe(bytes_0, bool_2)
    maybe_1.bind(none_type_0)


def test_case_7():
    bool_0 = True
    list_0 = [bool_0]
    complex_0 = -330.12 + 1152j
    bytes_0 = b"\xc0\x92r\xb9\xf7\xe6\xbb3d\x83\xdb\xf9"
    tuple_0 = (complex_0, bytes_0, complex_0)
    bool_1 = True
    maybe_0 = module_0.Maybe(tuple_0, bool_1)
    var_0 = maybe_0.ap(list_0)
    var_1 = var_0.to_try()


def test_case_8():
    bool_0 = True
    bool_1 = False
    bool_2 = False
    maybe_0 = module_0.Maybe(bool_1, bool_2)
    bool_3 = True
    maybe_1 = module_0.Maybe(bool_0, bool_3)
    bool_4 = True
    var_0 = maybe_1.filter(bool_4)
    maybe_0.filter(bool_1)


def test_case_9():
    int_0 = -3886
    bool_0 = False
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.to_box()
    maybe_0.filter(var_0)


def test_case_10():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.get_or_else(bool_0)
    var_0.bind(bool_0)


def test_case_11():
    set_0 = set()
    bool_0 = True
    maybe_0 = module_0.Maybe(set_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_lazy()
    var_2 = var_1.to_box()


def test_case_12():
    none_type_0 = None
    bool_0 = False
    none_type_1 = None
    maybe_0 = module_0.Maybe(bool_0, none_type_1)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_either()
    bool_1 = var_1.__eq__(none_type_0)


def test_case_13():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.to_box()
    var_2 = maybe_0.to_lazy()
    maybe_0.map(maybe_0)


def test_case_14():
    object_0 = module_1.object()
    maybe_0 = module_0.Maybe(object_0, object_0)
    bytes_0 = b"\xa7\x02D\xba"
    bool_0 = False
    maybe_1 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_1.to_try()
    var_0.to_try()


def test_case_15():
    generic_0 = module_2.Generic()
    bool_0 = True
    int_0 = 1
    bool_1 = False
    maybe_0 = module_0.Maybe(int_0, bool_1)
    var_0 = maybe_0.to_validation()
    var_0.get_or_else(bool_0)


def test_case_16():
    float_0 = -1990.4026
    list_0 = [float_0]
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(list_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.bind(none_type_0)
    var_1.to_validation()


def test_case_17():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.map(none_type_0)
    var_1.to_either()


def test_case_18():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    var_1 = var_0.to_validation()
    var_2 = maybe_0.to_try()
    float_0 = -1491.3
    var_3 = var_0.to_box()
    var_4 = var_0.get_or_else(maybe_0)
    bool_1 = False
    var_5 = maybe_0.to_either()
    bool_2 = maybe_0.__eq__(maybe_0)
    maybe_1 = module_0.Maybe(float_0, bool_1)
    var_6 = maybe_0.get_or_else(bool_0)
    object_0 = module_1.object()
    maybe_1.filter(maybe_1)


def test_case_19():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.map(bool_0)
    var_1 = maybe_0.to_validation()
    var_2 = var_0.map(bool_0)
    bool_1 = False
    var_3 = var_0.get_or_else(maybe_0)
    bool_2 = False
    var_4 = var_2.to_lazy()
    var_5 = var_2.get_or_else(var_1)
    maybe_1 = module_0.Maybe(bool_1, bool_2)
    maybe_2 = module_0.Maybe(bool_0, var_5)
    var_6 = var_3.to_box()
    none_type_0 = None
    var_7 = maybe_0.filter(bool_1)
    var_8 = var_3.to_either()
    bool_3 = maybe_2.__eq__(bool_0)
    var_9 = var_0.to_box()
    maybe_3 = module_0.Maybe(none_type_0, none_type_0)
    var_10 = maybe_2.map(maybe_3)
    var_11 = var_10.get_or_else(maybe_0)
    var_12 = var_11.ap(var_10)
    var_13 = maybe_0.bind(var_8)
    var_14 = maybe_0.ap(maybe_0)
    bool_4 = maybe_3.__eq__(var_14)


def test_case_20():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.map(bool_0)
    var_1 = maybe_0.to_validation()
    var_2 = var_0.map(bool_0)
    bool_1 = False
    var_3 = var_0.get_or_else(maybe_0)
    bool_2 = False
    var_4 = var_2.to_lazy()
    maybe_1 = module_0.Maybe(bool_1, bool_2)
    bool_3 = True
    maybe_2 = module_0.Maybe(bool_0, bool_3)
    var_5 = var_3.to_box()
    var_6 = maybe_2.ap(var_1)
    var_7 = maybe_0.filter(bool_1)
    var_8 = var_5.to_either()
    bool_4 = maybe_1.__eq__(maybe_1)
    var_9 = var_7.to_box()
    maybe_3 = module_0.Maybe(var_4, bool_1)
    var_10 = var_0.get_or_else(var_9)
    var_10.map(var_5)
