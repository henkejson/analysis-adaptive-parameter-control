# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    dict_0 = {}
    maybe_0 = module_0.Maybe(dict_0, dict_0)


def test_case_2():
    float_0 = -1799.0
    bool_0 = True
    maybe_0 = module_0.Maybe(float_0, bool_0)
    bool_1 = maybe_0.__eq__(bool_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.filter(var_0)
    bool_2 = True
    maybe_1 = module_0.Maybe(bool_1, bool_2)
    var_2 = maybe_1.filter(var_0)
    var_3 = maybe_0.to_validation()
    var_4 = maybe_1.bind(float_0)
    var_5 = maybe_0.ap(var_0)
    var_6 = var_0.to_validation()
    var_7 = var_3.to_lazy()


def test_case_3():
    str_0 = "-AAe"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    var_1 = maybe_0.map(str_0)
    var_2 = var_1.bind(str_0)
    var_3 = maybe_0.to_try()
    var_4 = maybe_0.to_validation()
    var_5 = var_1.to_validation()
    var_6 = var_2.to_lazy()
    var_6.to_lazy()


def test_case_4():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    str_0 = "o\n5*x"
    bool_1 = True
    maybe_1 = module_0.Maybe(str_0, bool_1)
    var_0 = maybe_1.to_box()
    var_0.ap(maybe_0)


def test_case_5():
    none_type_0 = None
    float_0 = -2571.0
    maybe_0 = module_0.Maybe(float_0, float_0)
    var_0 = maybe_0.bind(none_type_0)
    var_1 = var_0.to_either()


def test_case_6():
    dict_0 = {}
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.bind(dict_0)


def test_case_7():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    int_0 = -415
    bool_0 = True
    maybe_1 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_1.ap(maybe_1)
    var_1 = maybe_1.to_validation()
    bool_1 = True
    var_2 = var_0.filter(bool_1)
    maybe_0.filter(maybe_0)


def test_case_8():
    bool_0 = True
    str_0 = "\n        :param semigroup: other semigroup to concat\n        :type semigroup: Min[B]\n        :returns: new Min with smallest value\n        :rtype: Min[A | B]\n        "
    list_0 = [bool_0, bool_0, str_0, str_0]
    maybe_0 = module_0.Maybe(list_0, bool_0)
    maybe_1 = module_0.Maybe(list_0, bool_0)
    var_0 = maybe_0.ap(maybe_0)
    var_1 = maybe_0.bind(var_0)
    bool_1 = False
    maybe_2 = module_0.Maybe(bool_1, bool_1)
    maybe_2.ap(list_0)


def test_case_9():
    int_0 = -415
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.filter(bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)


def test_case_10():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_either()
    maybe_0.filter(var_0)


def test_case_11():
    bytes_0 = b"M\x03\x05ym\xd7\x06\x18\xa04?\x07*\xd1"
    bool_0 = False
    float_0 = -113.0
    set_0 = {float_0, float_0, float_0}
    maybe_0 = module_0.Maybe(set_0, float_0)
    var_0 = maybe_0.get_or_else(bool_0)
    bool_1 = var_0.__eq__(bytes_0)


def test_case_12():
    int_0 = 2495
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.to_either()
    var_2 = maybe_0.to_lazy()
    var_3 = maybe_0.to_either()
    var_4 = maybe_0.to_validation()
    var_5 = var_4.to_lazy()


def test_case_13():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_either()


def test_case_14():
    complex_0 = 1670.8 - 296.167656j
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(complex_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_lazy()
    var_2 = var_1.to_either()
    var_3 = var_2.to_lazy()
    var_4 = var_3.to_validation()
    bool_1 = var_3.__eq__(var_1)
    var_4.filter(none_type_0)


def test_case_15():
    str_0 = "\n        :returns: Copy of self\n        :rtype: Left[A]\n        "
    none_type_0 = None
    maybe_0 = module_0.Maybe(str_0, none_type_0)
    var_0 = maybe_0.to_box()
    var_0.to_box()


def test_case_16():
    float_0 = -1799.0
    bool_0 = False
    maybe_0 = module_0.Maybe(float_0, bool_0)
    bool_1 = maybe_0.__eq__(bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.get_or_else(maybe_0)
    var_2 = var_0.to_box()
    var_1.to_validation()


def test_case_17():
    float_0 = -442.10427
    none_type_0 = None
    maybe_0 = module_0.Maybe(float_0, none_type_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.to_validation()
    var_2 = maybe_0.to_try()


def test_case_18():
    float_0 = 1472.517027
    bool_0 = False
    maybe_0 = module_0.Maybe(float_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = var_0.to_box()


def test_case_19():
    str_0 = "Te+b7AE$k-\t9Y;P)@e."
    set_0 = {str_0, str_0, str_0}
    maybe_0 = module_0.Maybe(set_0, set_0)
    var_0 = maybe_0.to_lazy()
    maybe_1 = module_0.Maybe(var_0, maybe_0)
    var_1 = maybe_0.filter(var_0)
    var_2 = maybe_1.get_or_else(set_0)
    var_3 = maybe_0.map(var_2)
    var_4 = maybe_0.to_validation()
    var_5 = var_0.bind(var_0)
    var_6 = var_5.map(var_1)
    var_6.to_either()


def test_case_20():
    int_0 = -415
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)


def test_case_21():
    bytes_0 = b"\x9a_J\xb2\x0b\x18"
    int_0 = -415
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.bind(maybe_0)
    var_1 = maybe_0.to_try()
    maybe_1 = module_0.Maybe(int_0, var_1)
    var_2 = maybe_1.ap(maybe_1)
    bool_0 = maybe_0.__eq__(var_2)
    var_3 = maybe_1.get_or_else(bytes_0)
    var_4 = var_2.ap(maybe_1)
    var_5 = maybe_1.ap(bytes_0)
    var_6 = var_1.filter(bool_0)
    var_7 = maybe_0.to_validation()
    var_8 = var_5.to_lazy()
    var_1.to_either()


def test_case_22():
    int_0 = 182
    none_type_0 = None
    maybe_0 = module_0.Maybe(int_0, none_type_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.to_lazy()
    bool_0 = maybe_0.__eq__(maybe_0)
    dict_0 = {int_0: int_0, int_0: int_0}
    bool_1 = True
    maybe_1 = module_0.Maybe(dict_0, bool_1)
    bool_2 = var_1.__eq__(int_0)
    maybe_2 = module_0.Maybe(maybe_1, var_0)
    var_2 = maybe_0.get_or_else(none_type_0)
    var_0.filter(var_0)
