# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    generic_0 = module_1.Generic()
    var_0 = maybe_0.to_validation()


def test_case_3():
    generic_0 = module_1.Generic()
    maybe_0 = module_0.Maybe(generic_0, generic_0)
    none_type_0 = None
    bool_0 = maybe_0.__eq__(none_type_0)
    var_0 = maybe_0.to_lazy()
    var_0.to_lazy()


def test_case_4():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    complex_0 = 1672.61 + 1990.410777j
    bool_1 = maybe_0.__eq__(maybe_0)
    generic_0 = module_1.Generic()
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_1.filter(var_0)
    var_2 = var_1.filter(maybe_0)
    maybe_2 = module_0.Maybe(none_type_0, var_0)
    var_3 = maybe_2.filter(complex_0)
    var_4 = var_3.filter(complex_0)
    var_5 = var_4.filter(maybe_2)
    bool_2 = var_3.__eq__(var_0)
    var_6 = var_5.to_lazy()
    none_type_1 = None
    maybe_3 = module_0.Maybe(bool_0, var_3)
    var_7 = var_2.bind(generic_0)
    var_8 = maybe_0.bind(bool_2)
    bool_3 = False
    maybe_4 = module_0.Maybe(bool_1, none_type_1)
    var_9 = maybe_0.map(bool_3)
    var_10 = var_3.to_either()
    var_11 = maybe_2.to_lazy()
    maybe_4.bind(bool_3)


def test_case_5():
    float_0 = 1022.6175
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.map(float_0)


def test_case_6():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.to_lazy()
    var_2 = maybe_0.bind(var_1)
    var_3 = maybe_0.to_lazy()


def test_case_7():
    tuple_0 = ()
    bool_0 = False
    maybe_0 = module_0.Maybe(tuple_0, bool_0)
    maybe_0.bind(tuple_0)


def test_case_8():
    int_0 = 2058
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.ap(int_0)


def test_case_9():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    complex_0 = 1672.61 + 1990.410777j
    bool_1 = maybe_0.__eq__(maybe_0)
    generic_0 = module_1.Generic()
    tuple_0 = (complex_0, generic_0)
    bytes_0 = b"S{\x11L\xa7\x90nA\xcf\xc1\xaa"
    bool_2 = False
    maybe_1 = module_0.Maybe(bytes_0, bool_2)
    maybe_2 = module_0.Maybe(maybe_1, tuple_0)
    maybe_1.ap(tuple_0)


def test_case_10():
    bytes_0 = b"\x8b&\x0bo\xb0\xc6"
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.filter(bytes_0)
    var_1 = var_0.ap(bytes_0)
    var_2 = var_1.get_or_else(var_1)
    var_3 = var_1.to_validation()
    var_3.get_or_else(bytes_0)


def test_case_11():
    bytes_0 = b"\x8b&\x0bo\xb0\xc6"
    bool_0 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.to_box()
    maybe_0.filter(bytes_0)


def test_case_12():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.get_or_else(none_type_0)
    var_1.to_try()


def test_case_13():
    str_0 = "Box[value={}]"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.to_either()
    bool_0 = False
    bool_1 = False
    maybe_1 = module_0.Maybe(bool_0, bool_1)
    var_1 = maybe_1.to_box()
    var_2 = maybe_1.to_validation()
    var_3 = maybe_1.get_or_else(bool_0)
    maybe_1.map(var_3)


def test_case_14():
    bool_0 = True
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_either()
    var_0.ap(bool_0)


def test_case_15():
    int_0 = 86
    bool_0 = False
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.to_box()
    var_2 = maybe_0.to_validation()
    bool_1 = True
    str_0 = "\n>$+(n0^c:d"
    maybe_1 = module_0.Maybe(str_0, str_0)
    var_3 = var_1.to_either()
    var_4 = maybe_1.to_box()
    var_5 = var_0.to_either()
    var_6 = var_1.to_try()
    var_7 = maybe_1.ap(bool_1)
    var_8 = var_7.to_validation()
    var_9 = var_8.to_lazy()
    var_10 = var_9.to_validation()
    var_11 = var_9.ap(maybe_1)
    var_12 = var_9.to_validation()


def test_case_16():
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_0, none_type_0)
    var_0 = maybe_0.to_validation()
    complex_0 = 1172.1 - 3088.5j
    maybe_1 = module_0.Maybe(complex_0, complex_0)
    var_1 = maybe_1.bind(var_0)
    var_2 = maybe_1.to_try()
    maybe_0.map(maybe_0)


def test_case_17():
    bool_0 = False
    bool_1 = True
    none_type_0 = None
    set_0 = {bool_1, bool_1, none_type_0}
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_box()
    var_1.get_or_else(set_0)


def test_case_18():
    bool_0 = True
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    bool_2 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_either()
    var_0.ap(bool_0)


def test_case_19():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    complex_0 = 1672.61 + 1990.410777j
    bool_1 = maybe_0.__eq__(maybe_0)
    generic_0 = module_1.Generic()
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    bytes_0 = b"\x14\xe8\xfc\x00u\xbe\xb2\x08s?\xe2%\x8f\xf4\x1b"
    maybe_2 = module_0.Maybe(maybe_0, bytes_0)
    bool_2 = maybe_1.__eq__(maybe_2)
    var_0 = maybe_1.to_validation()
    var_1 = maybe_1.filter(var_0)
    var_2 = maybe_0.to_box()
    var_3 = var_1.get_or_else(complex_0)
    maybe_3 = module_0.Maybe(none_type_0, var_0)
    var_4 = maybe_3.filter(complex_0)
    var_5 = var_4.filter(complex_0)
    var_6 = var_5.filter(maybe_3)
    bool_3 = var_4.__eq__(var_0)
    var_7 = var_6.to_lazy()
    maybe_4 = module_0.Maybe(none_type_0, bool_0)
    var_8 = var_1.bind(generic_0)
    var_9 = maybe_4.bind(var_7)
    var_2.ap(bool_0)
