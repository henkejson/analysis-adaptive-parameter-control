# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1


def test_case_0():
    int_0 = 426
    maybe_0 = module_0.Maybe(int_0, int_0)


def test_case_1():
    tuple_0 = ()
    maybe_0 = module_0.Maybe(tuple_0, tuple_0)


def test_case_2():
    str_0 = "g53"
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    var_1 = var_0.to_validation()
    bool_1 = maybe_0.__eq__(maybe_0)
    var_2 = var_0.to_lazy()
    var_3 = var_0.bind(var_0)
    var_4 = maybe_0.to_box()
    var_5 = var_4.to_validation()
    var_6 = var_1.to_either()
    var_5.get_or_else(str_0)


def test_case_3():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    maybe_0 = module_0.Maybe(set_0, bool_0)
    var_0 = maybe_0.map(set_0)
    str_0 = 'ql0f,bWu"9.4O 5'
    bool_1 = maybe_0.__eq__(str_0)
    var_1 = maybe_0.filter(maybe_0)
    var_2 = var_1.to_try()
    bool_2 = False
    maybe_1 = module_0.Maybe(maybe_0, bool_2)
    maybe_1.filter(var_0)


def test_case_4():
    list_0 = []
    str_0 = "\n        Returns Lazy with function returning argument.\n\n        :param value: value to return by Lazy constructor_fn\n        :type value: Any\n        :returns: Lazy with function returning argument\n        :rtype: Lazy[Function() -> A]\n        "
    maybe_0 = module_0.Maybe(list_0, str_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_1.ap(maybe_0)


def test_case_5():
    str_0 = ""
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_validation()
    bool_1 = maybe_0.__eq__(bool_0)
    var_1 = var_0.to_either()
    generic_0 = module_1.Generic()
    bool_2 = var_0.__eq__(bool_1)
    maybe_0.ap(maybe_0)


def test_case_6():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    maybe_0 = module_0.Maybe(set_0, bool_0)
    var_0 = maybe_0.bind(maybe_0)
    var_1 = var_0.filter(maybe_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(maybe_0, bool_1)
    maybe_1.filter(maybe_0)


def test_case_7():
    bytes_0 = b"\xcf\x1a\xddl.\x01#LR\x9e"
    set_0 = {bytes_0, bytes_0}
    str_0 = "mfvxMmrGSbAI8"
    none_type_0 = None
    maybe_0 = module_0.Maybe(str_0, none_type_0)
    maybe_0.bind(set_0)


def test_case_8():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    maybe_0 = module_0.Maybe(set_0, bool_0)
    var_0 = maybe_0.filter(maybe_0)
    var_1 = var_0.to_try()
    var_2 = maybe_0.ap(bool_0)
    int_0 = -3507
    maybe_1 = module_0.Maybe(var_0, int_0)
    var_3 = maybe_0.to_box()


def test_case_9():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    maybe_0 = module_0.Maybe(set_0, bool_0)
    var_0 = maybe_0.filter(maybe_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(maybe_0, bool_1)
    maybe_1.filter(maybe_0)


def test_case_10():
    set_0 = set()
    bool_0 = True
    bool_1 = False
    maybe_0 = module_0.Maybe(set_0, bool_1)
    var_0 = maybe_0.get_or_else(bool_0)
    var_0.to_either()


def test_case_11():
    float_0 = 1010.3
    maybe_0 = module_0.Maybe(float_0, float_0)
    var_0 = maybe_0.to_either()


def test_case_12():
    float_0 = -3367.38
    none_type_0 = None
    maybe_0 = module_0.Maybe(float_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.to_either()
    var_2 = var_0.ap(float_0)
    var_2.filter(var_2)


def test_case_13():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.to_box()
    maybe_0.ap(maybe_0)


def test_case_14():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    maybe_0 = module_0.Maybe(set_0, bool_0)
    var_0 = maybe_0.map(set_0)
    str_0 = 'ql0f,bWu"9.4O 5'
    bool_1 = maybe_0.__eq__(str_0)
    var_1 = maybe_0.filter(maybe_0)
    var_2 = var_0.to_lazy()
    bool_2 = False
    maybe_1 = module_0.Maybe(maybe_0, bool_2)
    maybe_1.filter(var_0)


def test_case_15():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_lazy()
    maybe_0.filter(var_0)


def test_case_16():
    int_0 = -345
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.to_try()
    var_0.to_box()


def test_case_17():
    tuple_0 = ()
    maybe_0 = module_0.Maybe(tuple_0, tuple_0)
    var_0 = maybe_0.to_try()


def test_case_18():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    maybe_0 = module_0.Maybe(set_0, bool_0)
    var_0 = maybe_0.filter(maybe_0)
    var_1 = maybe_0.to_validation()
    bool_1 = False
    maybe_1 = module_0.Maybe(maybe_0, bool_1)
    maybe_1.filter(maybe_0)


def test_case_19():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_validation()


def test_case_20():
    bool_0 = True
    set_0 = set()
    maybe_0 = module_0.Maybe(set_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.map(set_0)
    str_0 = 'ql0f,bWu"9.4O 5'
    bool_1 = maybe_0.__eq__(str_0)
    var_2 = maybe_0.filter(maybe_0)
    var_3 = maybe_0.ap(bool_1)
    var_4 = var_3.to_box()
    var_5 = var_3.to_lazy()
    var_6 = var_3.to_try()
    var_7 = var_5.to_either()
    bool_2 = False
    maybe_1 = module_0.Maybe(var_5, bool_2)
    var_8 = var_2.to_validation()
    var_9 = var_8.to_box()
    maybe_1.filter(var_5)


def test_case_21():
    none_type_0 = None
    int_0 = 1
    maybe_0 = module_0.Maybe(int_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_try()
    var_1.to_validation()


def test_case_22():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    maybe_0 = module_0.Maybe(set_0, bool_0)
    str_0 = 'ql0f,bWu"9.4O 5'
    bool_1 = maybe_0.__eq__(str_0)
    var_0 = maybe_0.filter(maybe_0)
    var_1 = var_0.to_try()
    var_2 = maybe_0.ap(bool_1)
    var_3 = var_2.to_box()
    var_4 = var_2.to_lazy()
    maybe_1 = module_0.Maybe(var_1, var_1)
    var_5 = var_1.filter(set_0)
    var_6 = var_2.map(var_2)
    var_7 = maybe_1.map(maybe_1)
    int_0 = -3507
    maybe_2 = module_0.Maybe(var_0, int_0)
    var_8 = maybe_1.ap(var_4)
    var_9 = maybe_1.ap(maybe_1)
    var_10 = maybe_2.bind(str_0)
    var_11 = maybe_0.ap(int_0)
    var_12 = var_1.get_or_else(var_10)
    maybe_3 = module_0.Maybe(maybe_1, int_0)
    var_13 = var_7.bind(bool_1)
    var_14 = maybe_0.to_either()
    bool_2 = var_14.__eq__(maybe_3)
    var_15 = maybe_2.to_either()
    bool_3 = var_10.__eq__(maybe_2)


def test_case_23():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    bool_1 = False
    maybe_0 = module_0.Maybe(set_0, bool_1)
    bool_2 = maybe_0.__eq__(maybe_0)
    maybe_0.filter(bool_2)
