# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1


def test_case_0():
    str_0 = "\x0b}f"
    maybe_0 = module_0.Maybe(str_0, str_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    str_0 = "\x0bf"
    maybe_0 = module_0.Maybe(str_0, str_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.bind(maybe_0)
    none_type_0 = None
    bool_1 = var_0.__eq__(none_type_0)
    var_1 = var_0.ap(maybe_0)
    var_2 = var_1.map(none_type_0)
    var_3 = var_0.filter(var_1)
    var_4 = maybe_0.to_try()
    var_5 = var_2.to_box()
    var_6 = var_1.to_lazy()
    var_7 = var_0.to_validation()
    var_8 = var_3.to_either()
    var_9 = var_8.to_validation()


def test_case_3():
    str_0 = "\x0b}f"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.bind(maybe_0)
    none_type_0 = None
    var_1 = var_0.filter(none_type_0)
    maybe_1 = module_0.Maybe(var_1, none_type_0)
    var_2 = maybe_1.ap(var_1)
    maybe_1.filter(var_0)


def test_case_4():
    dict_0 = {}
    bool_0 = False
    maybe_0 = module_0.Maybe(dict_0, bool_0)
    var_0 = maybe_0.to_either()
    str_0 = "z"
    str_1 = "sFJ>s#C"
    none_type_0 = None
    maybe_1 = module_0.Maybe(str_1, none_type_0)
    maybe_1.map(str_0)


def test_case_5():
    str_0 = "\x0b}f"
    maybe_0 = module_0.Maybe(str_0, str_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.bind(maybe_0)
    var_1 = var_0.filter(var_0)
    var_2 = var_0.to_box()
    var_3 = maybe_0.filter(maybe_0)


def test_case_6():
    bool_0 = True
    int_0 = 2127
    bool_1 = False
    maybe_0 = module_0.Maybe(int_0, bool_1)
    maybe_0.bind(bool_0)


def test_case_7():
    str_0 = "\x0b}f"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.ap(maybe_0)
    var_1 = maybe_0.to_validation()
    var_2 = maybe_0.filter(var_1)


def test_case_8():
    str_0 = "\x0b}f"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.filter(var_0)


def test_case_9():
    str_0 = "\x0b}f"
    maybe_0 = module_0.Maybe(str_0, str_0)
    none_type_0 = None
    var_0 = maybe_0.filter(none_type_0)
    maybe_1 = module_0.Maybe(var_0, none_type_0)
    maybe_1.filter(maybe_1)


def test_case_10():
    str_0 = "\x0b}f"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.to_box()
    var_2 = maybe_0.get_or_else(var_0)
    var_3 = var_2.to_try()
    var_1.to_box()


def test_case_11():
    str_0 = "ROq2JSrv"
    bool_0 = False
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_1, bool_1)
    var_0 = maybe_0.get_or_else(bool_0)
    var_0.get_or_else(str_0)


def test_case_12():
    float_0 = 1925.661157
    bool_0 = True
    maybe_0 = module_0.Maybe(float_0, bool_0)
    var_0 = maybe_0.to_either()
    var_0.filter(bool_0)


def test_case_13():
    str_0 = "\x0b}f"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.bind(maybe_0)
    none_type_0 = None
    var_1 = var_0.filter(none_type_0)
    var_2 = maybe_0.bind(str_0)
    maybe_1 = module_0.Maybe(var_1, none_type_0)
    var_3 = maybe_1.to_either()
    maybe_1.filter(var_0)


def test_case_14():
    str_0 = "\x0b}f"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.to_validation()
    var_2 = maybe_0.filter(var_1)


def test_case_15():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_box()
    int_0 = -2283
    maybe_1 = module_0.Maybe(none_type_0, int_0)
    var_1 = maybe_1.bind(var_0)
    var_2 = var_1.to_box()
    var_3 = maybe_0.to_validation()


def test_case_16():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = True
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_1.to_lazy()


def test_case_17():
    str_0 = "\n        Returns Lazy with function returning argument.\n\n        :param value: value to return by Lazy constructor_fn\n        :type value: Any\n        :returns: Lazy with function returning argument\n        :rtype: Lazy[Function() -> A]\n        "
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_lazy()
    maybe_1 = module_0.Maybe(var_0, var_0)


def test_case_18():
    str_0 = "\x0bf"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.bind(maybe_0)
    none_type_0 = None
    var_1 = var_0.filter(none_type_0)
    var_2 = var_0.to_try()
    var_3 = maybe_0.to_validation()
    maybe_1 = module_0.Maybe(var_1, none_type_0)
    maybe_1.filter(var_0)


def test_case_19():
    generic_0 = module_1.Generic()
    bool_0 = False
    maybe_0 = module_0.Maybe(generic_0, bool_0)
    var_0 = maybe_0.to_try()
    var_0.to_validation()


def test_case_20():
    str_0 = "\x0b}f"
    str_0.filter(str_0)


def test_case_21():
    int_0 = 1153
    none_type_0 = None
    str_0 = "OfedlH"
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.ap(none_type_0)
    var_1 = var_0.filter(int_0)
    var_2 = var_1.to_lazy()
    var_3 = var_2.to_try()
    var_4 = var_0.to_either()
    var_5 = var_1.to_validation()


def test_case_22():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_either()
    var_1.ap(none_type_0)


def test_case_23():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    bool_1 = maybe_0.__eq__(maybe_1)
    bool_2 = maybe_1.__eq__(none_type_0)
    maybe_2 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_2.to_validation()
    var_1 = maybe_2.to_lazy()
    maybe_2.ap(var_0)


def test_case_24():
    str_0 = "\x0b}f"
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    none_type_0 = None
    maybe_0.bind(none_type_0)
