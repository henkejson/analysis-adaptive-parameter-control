# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    dict_0 = {}
    bool_0 = False
    maybe_0 = module_0.Maybe(dict_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    maybe_0.map(bool_0)


def test_case_3():
    int_0 = 1783
    bool_0 = False
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.to_try()
    bytes_0 = b"\xcc,_\xdc.Xk\x83\xae\xdb\xbe\xc1\xdfE\xe5\xef\xda\xa4\xd5"
    bool_1 = maybe_0.__eq__(var_0)
    list_0 = []
    maybe_1 = module_0.Maybe(int_0, list_0)
    maybe_1.filter(bytes_0)


def test_case_4():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.to_try()
    var_2 = maybe_0.map(var_1)
    var_3 = var_2.filter(bool_0)


def test_case_5():
    float_0 = 3290.123661
    maybe_0 = module_0.Maybe(float_0, float_0)
    var_0 = maybe_0.filter(float_0)
    var_1 = var_0.to_box()
    var_2 = maybe_0.bind(var_1)
    float_0.map(float_0)


def test_case_6():
    str_0 = "\n        Take function and call constructor function passing returned value to fn function.\n\n        It's only way to call function store in Lazy\n        :param fn: Function(constructor_fn) -> B\n        :returns: result od folder function\n        :rtype: B\n        "
    bytes_0 = b"8\x18\xe7(\x8b\x1c42 Lh\xa1.\xcd\x8c*"
    set_0 = {bytes_0, bytes_0, bytes_0}
    maybe_0 = module_0.Maybe(set_0, set_0)
    var_0 = maybe_0.get_or_else(str_0)
    bool_0 = True
    bool_1 = False
    maybe_1 = module_0.Maybe(bool_0, bool_1)
    maybe_1.bind(var_0)


def test_case_7():
    str_0 = '\\B_N4}.\nbf[>;nqt"T'
    bool_0 = True
    bool_1 = True
    maybe_0 = module_0.Maybe(str_0, bool_1)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.ap(maybe_0)
    int_0 = 1783
    maybe_1 = module_0.Maybe(int_0, bool_0)
    var_2 = maybe_0.bind(maybe_0)
    var_3 = maybe_0.map(var_1)
    bool_2 = var_2.__eq__(var_3)
    var_4 = var_3.filter(var_1)


def test_case_8():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_1 = maybe_1.ap(var_0)
    var_1.filter(var_0)


def test_case_9():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.filter(bool_0)
    list_0 = []
    maybe_1 = module_0.Maybe(list_0, list_0)
    maybe_1.filter(var_0)


def test_case_10():
    str_0 = "PGp9WL)R"
    tuple_0 = ()
    list_0 = [str_0, str_0, tuple_0]
    tuple_1 = (str_0, list_0)
    complex_0 = -1689 + 1217.581j
    maybe_0 = module_0.Maybe(complex_0, complex_0)
    var_0 = maybe_0.get_or_else(tuple_1)


def test_case_11():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.get_or_else(var_0)
    var_2 = maybe_0.to_try()
    var_1.to_try()


def test_case_12():
    float_0 = 3290.123661
    maybe_0 = module_0.Maybe(float_0, float_0)
    var_0 = maybe_0.filter(float_0)
    var_1 = var_0.to_box()
    var_2 = maybe_0.bind(var_1)
    var_3 = var_2.to_lazy()
    var_4 = var_3.map(var_3)
    var_5 = var_2.get_or_else(var_4)
    var_6 = var_1.to_lazy()
    var_7 = var_6.to_try()
    var_8 = var_0.to_either()


def test_case_13():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    maybe_0 = module_0.Maybe(list_0, bool_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_box()


def test_case_14():
    int_0 = 1783
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.filter(int_0)
    bytes_0 = b"\xcc,_\xdc.Xk\x83\xae\xdb\xbe\xc1\xdfE\xe5\xef\xda\xa4\xd5"
    bool_1 = maybe_0.to_box()
    list_0 = []
    maybe_1 = module_0.Maybe(int_0, list_0)
    maybe_1.filter(bytes_0)


def test_case_15():
    str_0 = "#\r\rh"
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_box()
    var_0.to_box()


def test_case_16():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_validation()
    bool_1 = True
    maybe_1 = module_0.Maybe(bool_1, bool_1)
    var_1 = maybe_1.map(var_0)
    var_2 = var_1.to_either()
    var_3 = var_2.to_box()
    var_3.to_box()


def test_case_17():
    tuple_0 = ()
    int_0 = 810
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.to_validation()
    var_2 = maybe_0.to_try()
    maybe_1 = module_0.Maybe(var_0, var_0)
    none_type_0 = None
    maybe_2 = module_0.Maybe(none_type_0, none_type_0)
    var_3 = maybe_2.get_or_else(tuple_0)
    bool_1 = maybe_2.__eq__(maybe_2)
    var_4 = maybe_1.to_either()
    var_5 = maybe_2.to_either()
    var_6 = maybe_2.to_validation()


def test_case_18():
    bool_0 = False
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_try()
    var_1.to_box()


def test_case_19():
    str_0 = "\n        Take function and call constructor function passing returned value to fn function.\n\n        It's only way to call function store in Lazy\n        :param fn: Function(constructor_fn) -> B\n        :returns: result od folder function\n        :rtype: B\n        "
    bytes_0 = b"8\x18\xe7(\x8b\x1c42 Lh\xa1.\xcd\x8c*"
    set_0 = {bytes_0, bytes_0, bytes_0}
    maybe_0 = module_0.Maybe(set_0, set_0)
    var_0 = maybe_0.get_or_else(str_0)
    var_1 = maybe_0.map(var_0)
    var_2 = var_1.to_either()
    var_3 = maybe_0.to_box()
    var_4 = var_3.ap(maybe_0)
    var_5 = var_4.to_lazy()
    var_6 = var_5.to_either()
    var_6.map(var_4)


def test_case_20():
    int_0 = 1783
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.filter(int_0)
    bytes_0 = b"\xcc,_\xdc.Xk\x83\xae\xdb\xbe\xc1\xdfE\xe5\xef\xda\xa4\xd5"
    bool_1 = maybe_0.__eq__(var_0)
    list_0 = []
    maybe_1 = module_0.Maybe(int_0, list_0)
    maybe_1.filter(bytes_0)


def test_case_21():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    generic_0 = module_1.Generic()
    bool_1 = True
    maybe_0 = module_0.Maybe(set_0, bool_1)
    var_0 = maybe_0.filter(set_0)
    var_1 = maybe_0.ap(bool_1)
    var_2 = maybe_0.map(var_1)
    var_3 = var_2.filter(var_2)
    var_4 = var_1.to_either()
    var_5 = var_1.map(var_0)
    bool_2 = var_3.__eq__(maybe_0)
    var_6 = var_3.to_lazy()
    var_7 = var_3.bind(var_4)
    var_8 = var_5.to_validation()
    var_9 = var_7.to_either()
    maybe_1 = module_0.Maybe(var_9, bool_0)
    bool_3 = var_5.__eq__(maybe_1)
