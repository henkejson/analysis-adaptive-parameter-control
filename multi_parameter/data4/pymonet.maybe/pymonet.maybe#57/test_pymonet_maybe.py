# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    bool_0 = False
    bool_1 = False
    bool_2 = False
    maybe_0 = module_0.Maybe(bool_0, bool_2)
    var_0 = maybe_0.to_try()
    maybe_1 = module_0.Maybe(bool_0, bool_1)
    var_1 = maybe_1.get_or_else(bool_0)
    var_2 = maybe_0.to_box()
    var_3 = maybe_0.get_or_else(var_0)
    var_4 = maybe_0.get_or_else(var_1)
    bool_3 = maybe_0.__eq__(var_4)


def test_case_3():
    bool_0 = False
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    dict_0 = {bool_0: maybe_0}
    none_type_0 = None
    var_0 = maybe_0.ap(none_type_0)
    var_1 = maybe_0.to_lazy()
    var_2 = maybe_0.filter(var_1)
    var_3 = maybe_0.ap(dict_0)
    var_4 = maybe_0.map(var_3)


def test_case_4():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_0.ap(maybe_0)


def test_case_5():
    float_0 = 221.16
    bool_0 = True
    maybe_0 = module_0.Maybe(float_0, bool_0)
    none_type_0 = None
    var_0 = maybe_0.get_or_else(none_type_0)
    var_1 = maybe_0.to_box()
    var_2 = maybe_0.bind(var_1)
    var_0.to_try()


def test_case_6():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.bind(maybe_0)


def test_case_7():
    float_0 = 515.0
    str_0 = "\n        :param fork: function to call during fork\n        :type fork: Function(reject, resolve) -> Any\n        "
    list_0 = [str_0]
    maybe_0 = module_0.Maybe(list_0, str_0)
    var_0 = maybe_0.ap(float_0)


def test_case_8():
    bool_0 = False
    str_0 = "`>(MM~@%1[CR"
    set_0 = {str_0}
    tuple_0 = (set_0,)
    bool_1 = False
    maybe_0 = module_0.Maybe(tuple_0, bool_1)
    maybe_0.ap(bool_0)


def test_case_9():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.filter(bool_0)
    var_1 = var_0.to_lazy()


def test_case_10():
    bytes_0 = b"w\x04\x14\xf9\x99}\x1fj\n\xf7\xa6^\x9b\xf1`\xd2`\xd1ue"
    int_0 = 1880
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.filter(bytes_0)
    var_1 = var_0.to_validation()
    bytes_1 = b"\x9a\x98\x82\x88E\x9f\xeb"
    bool_0 = False
    maybe_1 = module_0.Maybe(bytes_1, bool_0)
    maybe_1.filter(var_1)


def test_case_11():
    complex_0 = -2827.9166 - 598.7316j
    maybe_0 = module_0.Maybe(complex_0, complex_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.to_either()
    var_2 = maybe_0.to_validation()
    var_3 = var_1.to_lazy()
    bool_0 = var_1.__eq__(maybe_0)
    var_4 = var_3.to_either()
    var_5 = var_4.to_try()
    var_5.to_box()


def test_case_12():
    bool_0 = False
    bool_1 = False
    bool_2 = False
    maybe_0 = module_0.Maybe(bool_0, bool_2)
    var_0 = maybe_0.to_try()
    maybe_1 = module_0.Maybe(bool_0, bool_1)
    var_1 = maybe_1.to_lazy()
    var_2 = maybe_1.get_or_else(bool_0)
    var_3 = maybe_0.to_either()
    bool_3 = var_2.__eq__(maybe_1)
    var_4 = maybe_1.to_lazy()
    var_5 = var_3.to_validation()
    maybe_0.filter(var_5)


def test_case_13():
    bool_0 = True
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_box()


def test_case_14():
    float_0 = 3199.0
    maybe_0 = module_0.Maybe(float_0, float_0)
    var_0 = maybe_0.to_lazy()


def test_case_15():
    bool_0 = False
    bool_1 = False
    bool_2 = False
    maybe_0 = module_0.Maybe(bool_0, bool_2)
    var_0 = maybe_0.to_try()
    maybe_1 = module_0.Maybe(bool_0, bool_1)
    var_1 = maybe_1.to_lazy()
    var_2 = maybe_1.to_box()
    bool_3 = False
    maybe_2 = module_0.Maybe(bool_0, bool_3)


def test_case_16():
    complex_0 = 529.79 + 178.03194j
    maybe_0 = module_0.Maybe(complex_0, complex_0)
    var_0 = maybe_0.to_try()
    var_0.ap(complex_0)


def test_case_17():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_try()
    bool_0 = maybe_0.__eq__(maybe_0)
    var_1 = maybe_0.to_try()
    var_1.to_try()


def test_case_18():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_box()
    bool_1 = maybe_0.__eq__(var_0)
    maybe_1 = module_0.Maybe(bool_0, var_0)
    var_1 = maybe_1.to_either()
    var_2 = maybe_1.map(none_type_0)
    var_3 = maybe_1.ap(maybe_0)
    maybe_2 = module_0.Maybe(var_0, none_type_0)
    var_4 = maybe_0.to_box()
    bool_2 = var_0.__eq__(maybe_1)
    var_5 = var_2.filter(bool_1)
    var_6 = maybe_2.to_validation()
    maybe_2.filter(var_6)


def test_case_19():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.to_box()
    bool_1 = maybe_0.__eq__(var_0)
    var_2 = var_0.to_try()
    bool_2 = maybe_0.__eq__(bool_1)
    var_3 = maybe_0.to_box()
    var_2.to_try()


def test_case_20():
    str_0 = "BL|Ka?o8\n"
    dict_0 = {str_0: str_0, str_0: str_0}
    bytes_0 = b"e0\xd7\xacu\x18"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.map(dict_0)
    var_1 = var_0.to_try()
    maybe_1 = module_0.Maybe(var_1, var_1)
    var_2 = maybe_1.get_or_else(maybe_1)
    bool_0 = var_2.__eq__(var_2)
    var_3 = maybe_1.to_try()
    maybe_2 = module_0.Maybe(var_1, bool_0)
    var_4 = var_0.to_lazy()
    var_5 = var_4.to_either()
    var_4.get_or_else(var_5)


def test_case_21():
    str_0 = "t"
    dict_0 = {str_0: str_0, str_0: str_0}
    bytes_0 = b"e0\xd7\xacu\x18"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_try()
    maybe_1 = module_0.Maybe(var_0, var_0)
    var_1 = maybe_1.get_or_else(maybe_1)
    bool_0 = var_1.__eq__(var_1)
    var_2 = maybe_1.to_box()
    var_3 = maybe_1.map(var_0)
    maybe_2 = module_0.Maybe(var_0, str_0)
    var_4 = var_3.to_either()
    var_5 = maybe_0.map(var_1)
    maybe_3 = module_0.Maybe(var_3, var_0)
    var_6 = maybe_1.bind(var_2)
    maybe_4 = module_0.Maybe(dict_0, dict_0)
    var_7 = var_5.to_either()
    bool_1 = var_1.__eq__(var_5)
    var_8 = var_1.to_lazy()
    var_9 = var_1.to_validation()
    var_10 = var_3.filter(var_8)
    var_11 = maybe_1.to_lazy()
