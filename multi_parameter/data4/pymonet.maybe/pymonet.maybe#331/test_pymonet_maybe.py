# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    bytes_0 = b"\x16p"
    float_0 = 770.846
    maybe_0 = module_0.Maybe(float_0, float_0)
    none_type_0 = None
    var_0 = maybe_0.filter(none_type_0)
    var_1 = var_0.get_or_else(bytes_0)
    var_2 = maybe_0.map(var_1)
    var_3 = var_2.to_lazy()
    var_4 = var_0.bind(var_3)
    bool_0 = var_0.__eq__(var_2)
    bool_1 = maybe_0.ap(var_1)
    var_5 = maybe_0.map(bool_1)
    var_6 = var_5.ap(none_type_0)
    var_7 = var_4.to_lazy()
    var_8 = var_0.to_box()
    var_9 = var_3.map(var_4)
    maybe_1 = module_0.Maybe(bool_0, var_3)
    var_10 = maybe_1.get_or_else(bool_1)
    var_11 = var_7.map(var_6)


def test_case_3():
    bytes_0 = b"\x16p"
    float_0 = 770.846
    maybe_0 = module_0.Maybe(float_0, float_0)
    var_0 = maybe_0.filter(bytes_0)
    bool_0 = True
    maybe_1 = module_0.Maybe(maybe_0, bool_0)
    bool_1 = maybe_0.__eq__(bytes_0)
    var_1 = maybe_0.to_lazy()
    maybe_2 = maybe_0.bind(bool_0)
    var_2 = maybe_0.filter(bool_0)


def test_case_4():
    bytes_0 = b"j\x0b%g*\x94\xa2TXM9c-e\x04P\x96"
    str_0 = "\n        Take mapper function and return new instance of Left with the same value.\n\n        :returns: Copy of self\n        :rtype: Left[A]\n        "
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.to_box()
    tuple_0 = (str_0,)
    maybe_1 = module_0.Maybe(tuple_0, tuple_0)
    var_1 = var_0.to_either()
    var_2 = maybe_1.filter(tuple_0)
    var_3 = maybe_1.ap(str_0)
    var_4 = var_3.to_validation()
    var_5 = var_4.to_box()
    var_6 = var_3.to_validation()
    var_7 = maybe_1.get_or_else(var_3)
    var_8 = var_5.to_validation()
    var_9 = var_7.get_or_else(var_4)
    var_10 = maybe_1.map(bytes_0)
    var_11 = var_10.to_box()
    var_12 = var_2.filter(var_0)


def test_case_5():
    list_0 = []
    maybe_0 = module_0.Maybe(list_0, list_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.to_box()
    maybe_0.ap(maybe_0)


def test_case_6():
    bytes_0 = b"Z\xdb\x908\xa0"
    none_type_0 = None
    maybe_0 = module_0.Maybe(bytes_0, none_type_0)
    maybe_0.bind(maybe_0)


def test_case_7():
    float_0 = 770.846
    maybe_0 = module_0.Maybe(float_0, float_0)
    none_type_0 = None
    var_0 = maybe_0.filter(none_type_0)
    bool_0 = True
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    var_1 = maybe_1.to_lazy()
    var_2 = maybe_1.bind(var_1)
    bool_1 = var_1.__eq__(var_1)
    bool_2 = var_1.__eq__(maybe_1)
    var_3 = maybe_0.ap(bool_2)
    var_4 = var_2.to_box()
    var_4.get_or_else(bool_0)


def test_case_8():
    none_type_0 = None
    none_type_1 = None
    maybe_0 = module_0.Maybe(none_type_1, none_type_1)
    var_0 = maybe_0.to_box()
    maybe_0.filter(none_type_0)


def test_case_9():
    bytes_0 = b"\x16p"
    float_0 = 770.846
    maybe_0 = module_0.Maybe(float_0, float_0)
    none_type_0 = None
    var_0 = maybe_0.filter(none_type_0)
    bool_0 = True
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = maybe_0.__eq__(bytes_0)
    var_1 = maybe_0.get_or_else(var_0)
    var_2 = maybe_0.to_lazy()
    maybe_2 = module_0.Maybe(bytes_0, bytes_0)
    var_3 = var_2.to_either()
    bool_2 = var_3.__eq__(bool_1)


def test_case_10():
    none_type_0 = None
    bytes_0 = b"\xa5\xd6e\xea\xc8\xb3l`\x15:\xe7\x9aE"
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.get_or_else(bytes_0)
    var_0.to_try()


def test_case_11():
    bool_0 = False
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_either()


def test_case_12():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_box()
    var_2 = maybe_0.to_either()
    var_3 = var_1.to_validation()
    var_3.map(none_type_0)


def test_case_13():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_box()
    float_0 = 1346.5
    bytes_0 = b"`<\x84"
    maybe_1 = module_0.Maybe(bytes_0, bytes_0)
    var_1 = maybe_1.to_either()
    var_1.get_or_else(float_0)


def test_case_14():
    str_0 = "W7~y\rV\nX9A*"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_either()
    str_1 = "6:Yhg!K8#"
    maybe_1 = module_0.Maybe(var_1, str_1)
    str_2 = "\n        Take function Function(A) -> B and returns new Lazy with mapped result of Lazy constructor function.\n        Both mapper end constructor will be called only during calling fold method.\n\n        :param mapper: mapper function\n        :type mapper: Function(A) -> B\n        :returns: Lazy with mapped value\n        :rtype: Lazy[Function() -> B)]\n        "
    maybe_2 = module_0.Maybe(str_2, str_2)


def test_case_15():
    bytes_0 = b"\x13P\xf53\xb6Q\xa1Z\x89U\xb0"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_either()
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_1 = maybe_1.to_lazy()
    var_2 = var_1.to_either()
    var_2.filter(var_0)


def test_case_16():
    str_0 = "\x0clB^3_7f1\\sb1wa#}"
    complex_0 = 1081.4 - 2978.49j
    bool_0 = True
    maybe_0 = module_0.Maybe(complex_0, bool_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.to_try()
    var_2 = var_1.bind(str_0)


def test_case_17():
    tuple_0 = ()
    maybe_0 = module_0.Maybe(tuple_0, tuple_0)
    var_0 = maybe_0.to_try()
    var_0.to_lazy()


def test_case_18():
    bytes_0 = b"j\x0b%g*\x94\xa2TXM9c-e\x04P\x96"
    str_0 = "\n        Take mapper function and return new instance of Left with the same value.\n\n        :returns: Copy of self\n        :rtype: Left[A]\n        "
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.to_box()
    tuple_0 = (str_0,)
    maybe_1 = module_0.Maybe(tuple_0, tuple_0)
    var_1 = var_0.to_either()
    var_2 = maybe_1.filter(tuple_0)
    var_3 = maybe_1.ap(str_0)
    var_4 = var_3.to_validation()
    var_5 = var_4.to_box()
    var_6 = var_3.to_validation()
    var_7 = maybe_1.get_or_else(var_3)
    var_8 = var_5.to_validation()
    var_9 = var_7.to_lazy()
    maybe_2 = module_0.Maybe(var_5, var_0)
    var_10 = var_7.to_either()


def test_case_19():
    none_type_0 = None
    bytes_0 = b"un\xf2jh\x11\x99\xaa\xd7"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.ap(maybe_0)
    var_1 = maybe_0.filter(none_type_0)
    var_2 = maybe_0.to_box()
    maybe_1 = module_0.Maybe(maybe_0, maybe_0)
    var_3 = maybe_1.to_try()
    var_4 = maybe_0.map(none_type_0)
    var_5 = var_2.ap(var_4)
    var_6 = var_4.to_either()
    bool_0 = maybe_1.__eq__(var_4)
    var_7 = maybe_1.ap(var_3)
    var_8 = var_2.to_either()
    var_9 = var_8.to_lazy()
    var_10 = var_4.map(var_7)
    var_11 = maybe_1.to_box()
    maybe_2 = module_0.Maybe(var_5, var_6)
    var_12 = maybe_0.to_try()
    var_13 = var_9.map(none_type_0)
    bool_1 = maybe_1.__eq__(bytes_0)
    var_14 = maybe_2.to_lazy()
    var_15 = var_0.bind(var_5)
    var_16 = var_1.filter(var_6)
