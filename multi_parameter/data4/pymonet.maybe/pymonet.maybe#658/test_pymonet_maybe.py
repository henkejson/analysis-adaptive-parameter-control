# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    int_0 = -1794
    maybe_0 = module_0.Maybe(int_0, int_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.to_either()
    var_2 = maybe_0.to_lazy()
    maybe_0.map(var_0)


def test_case_3():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = True
    none_type_1 = None
    maybe_1 = module_0.Maybe(none_type_1, bool_0)
    var_0 = maybe_1.ap(bool_0)
    var_1 = var_0.to_box()
    bool_1 = maybe_1.__eq__(bool_0)
    var_1.get_or_else(none_type_1)


def test_case_4():
    bytes_0 = b"\xde\xc4\xa8\xdc\xcd\xbbVEb\xca\x9c\xcc\xb7^&\xf6\xcd\xc7"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.map(bytes_0)
    bool_0 = True
    bool_1 = False
    maybe_1 = module_0.Maybe(bool_0, bool_1)
    var_1 = maybe_1.get_or_else(bytes_0)
    var_2 = maybe_1.to_try()


def test_case_5():
    none_type_0 = None
    bytes_0 = b"\rA\xb6\xb6"
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.ap(bytes_0)
    bool_1 = var_0.__eq__(var_0)
    var_1 = var_0.bind(none_type_0)
    bool_2 = var_1.__eq__(none_type_0)
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    maybe_1 = module_0.Maybe(list_0, bytes_0)
    var_2 = maybe_1.to_lazy()
    var_3 = maybe_1.to_lazy()
    var_3.filter(none_type_0)


def test_case_6():
    none_type_0 = None
    none_type_1 = None
    maybe_0 = module_0.Maybe(none_type_1, none_type_1)
    maybe_0.bind(none_type_0)


def test_case_7():
    bool_0 = True
    complex_0 = 3528.184 + 1842.9958j
    bool_1 = False
    set_0 = {bool_1, bool_1, bool_1, bool_1}
    list_0 = [set_0]
    maybe_0 = module_0.Maybe(list_0, set_0)
    var_0 = maybe_0.ap(complex_0)
    var_1 = var_0.map(bool_0)
    var_2 = var_1.to_try()
    var_2.to_either()


def test_case_8():
    bool_0 = False
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_0.ap(none_type_0)


def test_case_9():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.filter(bool_0)
    var_1 = var_0.to_either()


def test_case_10():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.filter(maybe_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(bool_0, bool_1)
    var_1 = var_0.to_validation()
    maybe_1.filter(var_1)


def test_case_11():
    bool_0 = False
    set_0 = {bool_0}
    tuple_0 = ()
    int_0 = 1364
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.get_or_else(tuple_0)
    var_0.get_or_else(set_0)


def test_case_12():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_either()
    var_0.get_or_else(none_type_0)


def test_case_13():
    bool_0 = True
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_1, bool_1)
    var_0 = maybe_0.to_box()
    var_0.bind(bool_0)


def test_case_14():
    float_0 = -1128.64
    bool_0 = False
    maybe_0 = module_0.Maybe(float_0, bool_0)
    var_0 = maybe_0.to_box()


def test_case_15():
    bytes_0 = b"\x8e\xf3\xbe\xc5\x11MkvN\xee\x8e\x9bw\x97\xf8"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_box()


def test_case_16():
    int_0 = 704
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.to_try()
    var_0.to_either()


def test_case_17():
    bytes_0 = b"\xd7\x87\xb1m\xe3\xce\xf5\xb3\x82"
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_validation()
    var_0.get_or_else(bytes_0)


def test_case_18():
    bool_0 = False
    bool_0.to_box()


def test_case_19():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.filter(maybe_0)
    bool_2 = False
    maybe_1 = module_0.Maybe(bool_1, bool_2)
    var_1 = var_0.to_box()
    maybe_1.filter(var_1)


def test_case_20():
    none_type_0 = None
    int_0 = -1921
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.get_or_else(int_0)
    var_1 = maybe_0.to_lazy()
    bool_0 = True
    var_2 = var_1.map(bool_0)
    var_3 = var_1.to_box()


def test_case_21():
    bytes_0 = b"\xde\xc4\xa8\xdc\xcd\xbbVEb\xca\x9c\xcc\xb7^&\xf6\xcd\xc7"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.map(bytes_0)
    bool_0 = var_0.__eq__(maybe_0)
    var_1 = var_0.to_lazy()
    var_2 = var_0.bind(var_1)
    bool_1 = True
    maybe_1 = module_0.Maybe(bytes_0, bool_1)
    var_3 = maybe_1.to_box()
    var_4 = var_0.bind(var_1)
    var_5 = var_2.map(var_3)
    var_6 = maybe_0.to_try()
    var_7 = var_2.to_lazy()
    maybe_2 = module_0.Maybe(var_6, var_6)
    var_6.ap(var_6)
