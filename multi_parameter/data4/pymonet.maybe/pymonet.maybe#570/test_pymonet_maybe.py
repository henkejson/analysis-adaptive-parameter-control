# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1


def test_case_0():
    int_0 = -774
    maybe_0 = module_0.Maybe(int_0, int_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    float_0 = -80.0
    none_type_0 = None
    none_type_1 = None
    maybe_0 = module_0.Maybe(float_0, float_0)
    var_0 = maybe_0.ap(float_0)
    var_1 = var_0.filter(float_0)
    var_2 = var_1.ap(none_type_1)
    var_3 = var_2.map(none_type_0)
    var_4 = maybe_0.get_or_else(float_0)
    float_1 = -430.3746751481931
    bool_0 = False
    maybe_1 = module_0.Maybe(float_1, bool_0)
    bool_1 = maybe_1.__eq__(maybe_1)
    var_5 = maybe_1.to_validation()
    var_5.filter(var_0)


def test_case_3():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.to_box()
    var_2 = maybe_0.to_try()
    bool_0 = maybe_0.__eq__(var_2)
    int_0 = 1786
    var_3 = maybe_0.to_lazy()
    bool_1 = True
    maybe_1 = module_0.Maybe(int_0, bool_1)
    var_4 = maybe_1.get_or_else(var_1)
    maybe_2 = module_0.Maybe(maybe_0, bool_1)


def test_case_4():
    str_0 = "Q7qj"
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.map(str_0)
    var_2 = var_1.to_lazy()
    var_3 = var_1.to_either()
    var_4 = maybe_0.filter(var_2)


def test_case_5():
    complex_0 = 330.32823 + 397j
    none_type_0 = None
    maybe_0 = module_0.Maybe(complex_0, complex_0)
    var_0 = maybe_0.map(none_type_0)
    var_1 = var_0.filter(complex_0)
    var_2 = var_1.to_either()
    var_3 = var_2.to_validation()
    var_4 = var_3.to_lazy()
    var_5 = var_4.to_validation()
    none_type_1 = None
    maybe_1 = module_0.Maybe(complex_0, none_type_1)
    maybe_1.map(var_5)


def test_case_6():
    complex_0 = -554.069594 + 176j
    maybe_0 = module_0.Maybe(complex_0, complex_0)
    var_0 = maybe_0.bind(complex_0)
    var_1 = var_0.to_try()
    var_1.to_try()


def test_case_7():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    maybe_0.bind(var_0)


def test_case_8():
    dict_0 = {}
    int_0 = 1968
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.ap(dict_0)
    var_1 = var_0.to_lazy()
    var_2 = var_1.to_box()


def test_case_9():
    str_0 = "[&Pk->,<\x0cN&XF6#C"
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_0.ap(str_0)


def test_case_10():
    none_type_0 = None
    list_0 = []
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, list_0)
    maybe_0.filter(bool_0)


def test_case_11():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.filter(bool_1)
    var_1 = maybe_0.ap(maybe_1)
    var_2 = var_0.get_or_else(var_0)
    var_3 = maybe_0.to_try()
    maybe_1.filter(var_2)


def test_case_12():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.get_or_else(none_type_0)
    var_0.ap(none_type_0)


def test_case_13():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_either()
    maybe_0.filter(none_type_0)


def test_case_14():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_box()
    var_0.map(none_type_0)


def test_case_15():
    complex_0 = 1921.223 - 456.3587j
    bool_0 = True
    maybe_0 = module_0.Maybe(complex_0, bool_0)
    var_0 = maybe_0.to_try()


def test_case_16():
    tuple_0 = ()
    maybe_0 = module_0.Maybe(tuple_0, tuple_0)
    var_0 = maybe_0.to_try()
    var_0.to_validation()


def test_case_17():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.ap(bool_0)
    var_1 = maybe_0.to_validation()
    var_2 = var_1.to_box()
    var_3 = var_1.to_box()
    maybe_1 = module_0.Maybe(maybe_0, var_3)


def test_case_18():
    int_0 = 937
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_try()
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_2 = maybe_1.to_validation()
    var_2.map(var_1)


def test_case_19():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.get_or_else(bool_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(var_0, bool_1)
    var_1 = maybe_0.filter(bool_1)
    var_2 = maybe_1.to_lazy()
    var_3 = maybe_0.ap(maybe_1)
    var_4 = var_1.get_or_else(var_1)
    var_5 = var_2.to_try()
    maybe_1.filter(var_2)


def test_case_20():
    float_0 = -80.0
    none_type_0 = None
    maybe_0 = module_0.Maybe(float_0, float_0)
    var_0 = maybe_0.ap(float_0)
    var_1 = var_0.filter(float_0)
    var_2 = var_1.ap(none_type_0)
    var_3 = var_2.map(var_2)
    var_4 = maybe_0.get_or_else(float_0)
    maybe_1 = module_0.Maybe(var_4, var_2)
    bool_0 = maybe_1.__eq__(var_0)
    var_5 = var_0.to_lazy()
    var_4.ap(var_1)


def test_case_21():
    float_0 = -78.65098596365421
    bool_0 = False
    maybe_0 = module_0.Maybe(float_0, bool_0)
    var_0 = maybe_0.to_try()
    none_type_0 = None
    none_type_1 = None
    maybe_1 = module_0.Maybe(float_0, float_0)
    var_1 = maybe_1.ap(float_0)
    var_2 = var_1.filter(float_0)
    var_3 = var_2.ap(none_type_1)
    var_4 = var_3.map(none_type_0)
    var_5 = var_4.map(var_0)
    var_6 = var_2.to_box()
    bool_1 = True
    maybe_2 = module_0.Maybe(var_1, bool_1)
    bool_2 = maybe_2.__eq__(maybe_2)
    var_7 = maybe_2.to_validation()
    complex_0 = -245.7682 - 1137.723j
    var_8 = maybe_2.get_or_else(complex_0)
    generic_0 = module_1.Generic()
    var_9 = var_1.ap(complex_0)
    bool_3 = var_0.__eq__(var_7)
    var_10 = var_5.to_box()
    bool_4 = False
    maybe_3 = module_0.Maybe(bool_3, bool_4)
    var_11 = var_2.to_try()
    maybe_3.filter(var_4)
