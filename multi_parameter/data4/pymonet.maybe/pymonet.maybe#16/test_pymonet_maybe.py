# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    tuple_0 = ()
    maybe_0 = module_0.Maybe(tuple_0, tuple_0)


def test_case_2():
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_0, none_type_0)
    var_0 = maybe_0.to_box()
    bool_1 = maybe_0.__eq__(maybe_0)
    maybe_0.filter(var_0)


def test_case_3():
    bool_0 = False
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_0, none_type_0)
    var_0 = maybe_0.get_or_else(bool_0)
    int_0 = -2515
    maybe_1 = module_0.Maybe(var_0, int_0)
    bool_1 = maybe_1.__eq__(none_type_0)
    var_1 = maybe_1.filter(none_type_0)
    var_0.to_box()


def test_case_4():
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_0, none_type_0)
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_1.map(maybe_0)
    var_1 = var_0.filter(bool_0)
    maybe_0.filter(none_type_0)


def test_case_5():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_validation()
    var_2 = maybe_0.to_box()
    var_3 = var_2.to_lazy()
    maybe_0.map(var_0)


def test_case_6():
    complex_0 = 272 - 2706.696j
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.filter(complex_0)
    var_1 = var_0.ap(none_type_0)
    var_2 = var_1.bind(complex_0)
    var_3 = var_2.get_or_else(complex_0)
    var_3.to_box()


def test_case_7():
    int_0 = -1405
    bool_0 = False
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.to_box()
    str_0 = "wW0r8<b99%Tx{!&i"
    bool_1 = False
    maybe_1 = module_0.Maybe(bool_1, bool_1)
    maybe_1.ap(str_0)


def test_case_8():
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_0, none_type_0)
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_1.filter(bool_0)
    maybe_0.filter(none_type_0)


def test_case_9():
    complex_0 = 272 - 2706.696j
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.filter(complex_0)
    var_1 = var_0.ap(none_type_0)
    var_2 = var_1.bind(complex_0)
    var_3 = var_2.filter(var_1)
    var_4 = maybe_0.to_box()
    var_5 = var_1.to_either()


def test_case_10():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.to_box()
    var_2 = maybe_0.to_validation()
    var_3 = var_2.to_box()
    var_4 = var_3.to_either()


def test_case_11():
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_0, none_type_0)
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_1.filter(bool_0)
    var_1 = var_0.to_box()
    maybe_0.filter(none_type_0)


def test_case_12():
    tuple_0 = ()
    maybe_0 = module_0.Maybe(tuple_0, tuple_0)
    var_0 = maybe_0.to_box()


def test_case_13():
    bytes_0 = b"\xe5\xd0f\xdcVdT\x11\x98\x83]@O"
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.bind(bytes_0)
    var_1 = var_0.bind(var_0)
    var_2 = var_0.to_validation()
    var_3 = var_0.filter(var_2)
    var_4 = var_3.bind(var_2)
    list_0 = [bytes_0, bytes_0, bytes_0]
    bool_1 = var_0.__eq__(var_0)
    var_5 = maybe_0.bind(var_2)
    var_6 = maybe_0.to_lazy()
    maybe_1 = module_0.Maybe(list_0, list_0)
    var_7 = maybe_0.to_either()
    var_8 = maybe_0.to_box()
    var_9 = var_3.to_either()


def test_case_14():
    int_0 = 517
    bytes_0 = b"y"
    bool_0 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_either()
    var_2 = var_1.to_lazy()
    var_3 = var_2.ap(int_0)


def test_case_15():
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_0, none_type_0)
    var_0 = maybe_0.get_or_else(bool_0)
    bool_1 = True
    maybe_1 = module_0.Maybe(bool_0, bool_1)
    var_1 = maybe_1.map(var_0)
    var_2 = var_1.filter(bool_0)
    var_3 = var_2.to_either()
    var_4 = maybe_1.to_try()
    var_5 = var_4.filter(var_0)
    var_6 = var_3.to_box()
    var_7 = var_6.to_either()


def test_case_16():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.to_box()
    var_2 = maybe_0.to_try()
    var_3 = var_0.to_try()
    var_2.ap(var_2)


def test_case_17():
    none_type_0 = None
    none_type_1 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_1, bool_0)
    var_0 = maybe_0.bind(none_type_0)
    var_1 = var_0.to_validation()
    var_2 = var_0.to_box()
    var_3 = var_1.to_box()
    var_4 = var_0.bind(var_3)
    var_5 = maybe_0.to_box()
    var_5.get_or_else(none_type_0)


def test_case_18():
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_0, none_type_0)
    var_0 = maybe_0.get_or_else(bool_0)
    int_0 = -2515
    maybe_1 = module_0.Maybe(maybe_0, int_0)
    var_1 = maybe_1.to_box()
    bool_1 = maybe_1.__eq__(maybe_0)
    var_2 = maybe_1.filter(bool_0)
    var_0.to_lazy()


def test_case_19():
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_0, none_type_0)
    bool_1 = True
    maybe_1 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_1.map(maybe_0)
    var_1 = var_0.filter(bool_0)
    var_2 = maybe_1.to_box()
    var_3 = maybe_1.ap(none_type_0)
    bool_2 = var_3.__eq__(var_0)
    maybe_0.filter(none_type_0)


def test_case_20():
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_0, none_type_0)
    var_0 = maybe_0.to_box()
    bool_1 = False
    maybe_1 = module_0.Maybe(none_type_0, bool_1)
    maybe_1.bind(none_type_0)


def test_case_21():
    bytes_0 = b"NO{"
    str_0 = "\n    Return increased by 1 argument.\n\n    :param value:\n    :type value: Int\n    :returns:\n    :rtype: Int\n    "
    set_0 = {str_0, str_0}
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_validation()
    var_1 = var_0.to_try()
    maybe_1 = module_0.Maybe(set_0, set_0)
    var_2 = maybe_1.to_lazy()
    var_3 = var_2.to_validation()
    var_4 = var_3.to_lazy()
    var_5 = var_4.to_either()
    var_6 = var_5.to_lazy()
    bool_0 = var_6.__eq__(bytes_0)
    str_1 = '"mB\t^HCWE{R14'
    bool_1 = True
    maybe_2 = module_0.Maybe(str_1, bool_1)
    var_4.to_lazy()
