# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    float_0 = 1762.67
    maybe_0 = module_0.Maybe(float_0, float_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    bool_0 = False
    none_type_0 = None
    bool_1 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_1)
    bool_2 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.ap(none_type_0)
    var_1 = maybe_0.to_lazy()
    var_1.get_or_else(bool_0)


def test_case_3():
    str_0 = "4,R"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.to_lazy()
    bool_0 = maybe_0.__eq__(var_0)
    var_1 = maybe_0.to_lazy()
    var_2 = var_1.to_either()
    float_0 = 86.457
    set_0 = {float_0, float_0}
    int_0 = -1239
    bool_1 = True
    maybe_1 = module_0.Maybe(int_0, bool_1)
    var_3 = maybe_1.to_lazy()
    var_4 = maybe_0.to_box()
    var_5 = var_3.bind(set_0)
    var_5.filter(var_2)


def test_case_4():
    none_type_0 = None
    str_0 = "Hk-~k#Qj qNvUU\rtv:`"
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.map(var_0)
    var_2 = maybe_0.map(none_type_0)
    var_3 = var_2.get_or_else(none_type_0)


def test_case_5():
    bytes_0 = b"\xdd\xea\xae\xfdY\xd8\xaf\xa3"
    bool_0 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    maybe_0.map(bool_1)


def test_case_6():
    str_0 = "\n        Transform Box into Lazy with returning value function.\n\n        :returns: not folded Lazy monad with function returning previous value\n        :rtype: Lazy[Function(() -> A)]\n        "
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    none_type_0 = None
    var_0 = maybe_0.filter(str_0)
    var_1 = maybe_0.to_try()
    var_2 = var_0.get_or_else(var_1)
    var_3 = maybe_0.ap(none_type_0)
    var_4 = maybe_0.bind(var_3)
    var_5 = var_1.map(var_1)
    var_6 = maybe_0.get_or_else(none_type_0)
    var_7 = var_3.to_validation()
    maybe_1 = module_0.Maybe(var_6, str_0)
    var_7.filter(var_0)


def test_case_7():
    int_0 = 1
    bool_0 = False
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.to_lazy()
    maybe_0.bind(var_0)


def test_case_8():
    bytes_0 = b"\x82\xa7/\x01\x8140\xed"
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.to_box()
    var_2 = maybe_0.filter(bytes_0)
    var_3 = maybe_0.map(var_0)
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    var_4 = maybe_0.ap(var_3)
    var_5 = maybe_0.filter(var_4)
    var_6 = var_2.filter(var_4)


def test_case_9():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, none_type_0)
    maybe_0.ap(none_type_0)


def test_case_10():
    bool_0 = False
    str_0 = "\n        Method executes a reducer function\n        on each element of the array, resulting in a single output value.\n\n        :param fn: function to call with ImmutableList value\n        :type fn: Function(A, B) -> A\n        :returns: A\n        "
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.filter(bool_0)
    var_1 = var_0.to_try()
    var_1.to_box()


def test_case_11():
    complex_0 = -1637.0017 + 1618.5j
    bytes_0 = b"X\x9a\xa0A\x81L\xa1\x96\xb5\xca\x9bG\x0c\xbb\xb6%\xdb'w"
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.get_or_else(bytes_0)
    var_0.ap(complex_0)


def test_case_12():
    bytes_0 = b"o\x80\xeew\xd5\xa0\xba\\e\xc3\xe2\x8c/\xb7\x02G"
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_lazy()
    var_2 = var_0.to_validation()
    var_2.get_or_else(bytes_0)


def test_case_13():
    int_0 = -1715
    bool_0 = False
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.to_either()


def test_case_14():
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_0, none_type_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_try()
    var_1.to_lazy()


def test_case_15():
    str_0 = "4,R"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_either()
    float_0 = 86.457
    set_0 = {float_0, float_0}
    int_0 = -1251
    bool_0 = True
    maybe_1 = module_0.Maybe(int_0, bool_0)
    var_2 = maybe_1.to_lazy()
    var_3 = var_2.bind(set_0)
    var_3.filter(var_1)


def test_case_16():
    tuple_0 = ()
    none_type_0 = None
    maybe_0 = module_0.Maybe(tuple_0, tuple_0)
    bool_0 = False
    var_0 = maybe_0.to_box()
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    var_1 = maybe_1.to_try()
    maybe_1.map(maybe_1)


def test_case_17():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = var_0.to_try()
    bool_1 = False
    maybe_1 = module_0.Maybe(none_type_0, bool_1)
    var_2 = maybe_1.to_validation()
    var_3 = var_2.to_try()
    var_3.map(var_2)


def test_case_18():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_validation()


def test_case_19():
    int_0 = 3996
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, none_type_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.to_lazy()
    bool_1 = True
    var_2 = maybe_0.to_either()
    maybe_1 = module_0.Maybe(none_type_0, bool_1)
    var_3 = maybe_1.to_validation()
    var_4 = var_1.to_try()
    var_3.ap(int_0)


def test_case_20():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.filter(maybe_0)


def test_case_21():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.to_either()
    var_2 = maybe_0.map(var_1)
    maybe_1 = module_0.Maybe(var_1, var_1)
    var_3 = maybe_0.map(bool_0)
    var_4 = var_2.bind(var_1)
    var_5 = maybe_0.bind(var_2)
    maybe_2 = module_0.Maybe(bool_0, bool_0)
    var_6 = maybe_0.to_either()
    var_7 = maybe_0.bind(var_6)
    var_8 = maybe_2.bind(var_0)
    maybe_3 = module_0.Maybe(maybe_2, bool_0)
    var_9 = var_2.filter(var_0)
    bool_1 = var_5.__eq__(maybe_3)
    bool_2 = var_4.__eq__(maybe_1)
    var_10 = var_8.to_validation()
    var_11 = var_6.bind(maybe_2)
    var_6.filter(var_6)
