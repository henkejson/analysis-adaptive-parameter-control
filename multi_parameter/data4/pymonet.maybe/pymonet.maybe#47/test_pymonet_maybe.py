# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    set_0 = set()
    maybe_0 = module_0.Maybe(set_0, set_0)


def test_case_2():
    bytes_0 = b"r\xf2"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    var_1 = var_0.to_lazy()


def test_case_3():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1 = module_0.Maybe(none_type_0, maybe_0)
    bool_0 = maybe_0.__eq__(maybe_1)
    var_0 = maybe_1.get_or_else(maybe_0)
    var_1 = var_0.to_lazy()


def test_case_4():
    float_0 = 1692.869
    maybe_0 = module_0.Maybe(float_0, float_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.map(var_0)
    var_2 = maybe_0.to_box()
    list_0 = []
    maybe_1 = module_0.Maybe(list_0, list_0)


def test_case_5():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = False
    var_0 = maybe_0.get_or_else(none_type_0)
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    var_1 = maybe_0.to_either()
    var_2 = maybe_1.to_lazy()
    bool_1 = maybe_1.__eq__(maybe_0)
    maybe_2 = module_0.Maybe(none_type_0, bool_1)
    maybe_0.map(var_2)


def test_case_6():
    bytes_0 = b"r\xf2"
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.ap(maybe_0)
    bool_1 = maybe_0.__eq__(var_0)
    var_1 = maybe_0.filter(var_0)
    var_2 = var_1.ap(maybe_0)
    var_3 = var_2.to_lazy()
    var_4 = var_2.map(var_3)
    var_5 = var_0.ap(bool_0)
    var_6 = var_4.to_lazy()
    var_7 = var_1.ap(var_1)
    var_8 = var_4.bind(var_6)
    var_9 = var_4.filter(var_3)
    maybe_1 = module_0.Maybe(bool_0, var_0)
    var_10 = var_8.to_either()
    bool_2 = False
    var_11 = var_0.ap(bool_2)
    var_12 = var_11.to_lazy()


def test_case_7():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = True
    maybe_1 = module_0.Maybe(none_type_0, bool_1)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.to_box()
    maybe_0.bind(var_0)


def test_case_8():
    generic_0 = module_1.Generic()
    none_type_0 = None
    int_0 = 1
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.ap(none_type_0)
    var_1 = var_0.to_validation()
    var_1.map(generic_0)


def test_case_9():
    none_type_0 = None
    bool_0 = True
    bool_1 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    str_0 = "\n        Returns new ImmutableList with elements from previous one\n        and argument value on the end of list\n\n        :param new_element: element to append on the end of list\n        :type fn: A\n        :returns: ImmutableList[A]\n        "
    var_0 = maybe_0.ap(str_0)
    bool_2 = var_0.__eq__(none_type_0)
    bool_3 = maybe_0.__eq__(bool_1)
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_1 = maybe_0.filter(var_0)
    var_2 = maybe_1.ap(var_0)
    var_3 = maybe_1.to_lazy()
    var_4 = var_0.map(var_0)


def test_case_10():
    bytes_0 = b"r\xf2"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    var_1 = var_0.get_or_else(bool_0)
    var_2 = maybe_0.ap(maybe_0)
    var_3 = var_2.filter(var_2)


def test_case_11():
    set_0 = set()
    maybe_0 = module_0.Maybe(set_0, set_0)
    maybe_0.filter(maybe_0)


def test_case_12():
    str_0 = "1$@`y{H"
    tuple_0 = ()
    maybe_0 = module_0.Maybe(tuple_0, tuple_0)
    var_0 = maybe_0.get_or_else(str_0)
    var_0.to_either()


def test_case_13():
    bytes_0 = b"r\xf2"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.ap(maybe_0)
    bool_0 = maybe_0.__eq__(bytes_0)
    maybe_1 = module_0.Maybe(var_0, maybe_0)
    var_1 = var_0.filter(var_0)
    var_2 = maybe_0.ap(maybe_1)
    var_3 = maybe_0.to_lazy()
    var_4 = var_1.map(var_2)
    var_5 = var_2.to_either()
    var_6 = maybe_0.ap(var_1)


def test_case_14():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_box()
    maybe_1 = module_0.Maybe(var_0, none_type_0)
    var_2 = var_0.to_either()
    none_type_1 = None
    var_3 = var_0.to_box()
    var_4 = maybe_0.to_box()
    none_type_2 = None
    bool_0 = True
    maybe_2 = module_0.Maybe(var_4, bool_0)
    var_5 = var_0.ap(none_type_2)
    bool_1 = var_5.__eq__(var_2)
    bool_2 = var_2.__eq__(var_2)
    maybe_3 = module_0.Maybe(none_type_2, none_type_2)
    maybe_3.filter(none_type_1)


def test_case_15():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_try()
    var_0.to_try()


def test_case_16():
    none_type_0 = None
    int_0 = 95
    bool_0 = False
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_0.bind(none_type_0)


def test_case_17():
    float_0 = -3498.0
    maybe_0 = module_0.Maybe(float_0, float_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.to_lazy()
    var_2 = var_0.to_box()


def test_case_18():
    bytes_0 = b"r\xf2"
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.ap(maybe_0)
    bool_1 = maybe_0.__eq__(var_0)
    bool_2 = False
    maybe_1 = module_0.Maybe(bool_1, bool_2)
    var_1 = maybe_0.filter(maybe_1)
    var_2 = maybe_1.ap(maybe_0)
    var_3 = maybe_0.ap(var_1)
    bool_3 = var_1.__eq__(var_3)
    bool_4 = maybe_1.__eq__(maybe_1)
    maybe_2 = module_0.Maybe(maybe_0, bytes_0)
    var_4 = var_0.get_or_else(var_0)
    maybe_1.filter(var_2)
