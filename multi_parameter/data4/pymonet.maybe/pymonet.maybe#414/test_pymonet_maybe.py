# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    bool_0 = True
    object_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    bool_0 = False
    object_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    str_0 = 'j/(vEth$m"W\x0b^G{\\3'
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    maybe_1 = module_0.Maybe(maybe_0, bool_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_1.to_lazy()
    bool_1 = maybe_0.__eq__(bool_0)
    var_2 = maybe_0.get_or_else(maybe_1)
    var_3 = maybe_0.filter(maybe_0)
    var_4 = var_2.filter(var_2)
    var_5 = var_4.ap(var_4)
    var_6 = maybe_1.to_box()
    var_7 = maybe_1.to_either()
    maybe_2 = module_0.Maybe(maybe_1, var_7)
    bool_2 = var_4.__eq__(maybe_0)
    var_6.to_box()


def test_case_3():
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.bind(none_type_0)
    var_1 = var_0.to_validation()
    var_2 = var_0.get_or_else(maybe_0)
    bool_1 = var_1.__eq__(var_2)
    var_3 = var_1.to_box()
    maybe_1 = module_0.Maybe(var_1, bool_0)
    var_4 = maybe_1.to_validation()
    bool_2 = maybe_1.__eq__(var_4)


def test_case_4():
    int_0 = -674
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.map(int_0)
    var_1 = var_0.to_try()
    var_1.to_box()


def test_case_5():
    float_0 = 594.2941
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_0.map(float_0)


def test_case_6():
    none_type_0 = None
    none_type_1 = None
    maybe_0 = module_0.Maybe(none_type_1, none_type_1)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_try()
    var_2 = maybe_0.to_lazy()
    maybe_0.bind(none_type_0)


def test_case_7():
    str_0 = 'j/(vEth$m"W\x0b^G{\\3'
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.bind(maybe_0)
    var_2 = maybe_0.filter(maybe_0)
    var_3 = maybe_0.ap(var_1)
    bool_1 = False
    maybe_1 = module_0.Maybe(maybe_0, bool_1)
    maybe_1.filter(bool_0)


def test_case_8():
    int_0 = 5323
    bool_0 = False
    maybe_0 = module_0.Maybe(int_0, bool_0)
    none_type_0 = None
    maybe_0.ap(none_type_0)


def test_case_9():
    complex_0 = 3092.50906 - 853.33j
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.filter(complex_0)


def test_case_10():
    set_0 = set()
    str_0 = "Ef"
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.get_or_else(set_0)


def test_case_11():
    bytes_0 = b"\xd8\xcc<\r\xf3\xbc\x80\xdd\xea"
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.to_either()


def test_case_12():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_either()


def test_case_13():
    str_0 = "W!\\`vD;yaG"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.to_box()


def test_case_14():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_box()
    none_type_1 = None
    maybe_1 = module_0.Maybe(none_type_1, none_type_1)
    var_1 = maybe_1.to_box()
    var_2 = var_1.to_lazy()
    var_2.filter(var_0)


def test_case_15():
    str_0 = 'j/(vEth$m"W\x0b^G{\\3'
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.map(var_0)
    maybe_1 = module_0.Maybe(maybe_0, bool_0)
    var_2 = maybe_1.to_lazy()
    var_3 = maybe_0.filter(maybe_0)
    var_4 = var_2.to_try()
    var_5 = var_3.filter(maybe_0)
    var_6 = var_3.to_validation()
    var_7 = var_5.ap(var_1)
    bool_1 = False
    maybe_2 = module_0.Maybe(var_4, bool_1)
    maybe_2.filter(bool_0)


def test_case_16():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_box()
    var_2 = var_1.to_try()
    var_2.to_box()


def test_case_17():
    list_0 = []
    str_0 = ")\tfZF"
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, list_0)
    maybe_1 = module_0.Maybe(str_0, none_type_0)
    var_0 = maybe_1.to_lazy()
    var_1 = maybe_0.to_try()
    var_1.to_validation()


def test_case_18():
    bool_0 = False
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    str_0 = 'Ulu\r\x0cu;1/r"'
    maybe_1 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_1.to_validation()
    var_0.ap(maybe_0)


def test_case_19():
    none_type_0 = None
    float_0 = 4960.0
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_validation()
    bool_0 = True
    maybe_1 = module_0.Maybe(float_0, bool_0)
    var_1 = maybe_1.ap(none_type_0)
    var_2 = var_1.map(var_0)
    var_3 = var_2.to_box()
    var_4 = var_3.to_try()
    maybe_2 = module_0.Maybe(none_type_0, none_type_0)
    maybe_2.filter(var_4)


def test_case_20():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = var_0.to_box()
    bool_1 = True
    maybe_1 = module_0.Maybe(none_type_0, bool_1)
    var_2 = maybe_1.to_box()
    str_0 = "QdHjU!pq(3-2+M.\x0bqCd&"
    complex_0 = 1568.574231 - 3294.8111j
    maybe_2 = module_0.Maybe(str_0, complex_0)
    var_3 = maybe_1.to_box()
    var_4 = maybe_1.to_validation()
    bool_2 = maybe_2.__eq__(maybe_1)
    var_5 = maybe_2.to_try()
    var_6 = var_5.map(var_5)
    var_7 = maybe_2.filter(var_5)
    var_8 = maybe_1.to_validation()
    var_6.to_lazy()


def test_case_21():
    str_0 = 'j/(vEth$m"W\x0b^G{\\3'
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.get_or_else(str_0)
    maybe_0.map(var_0)
