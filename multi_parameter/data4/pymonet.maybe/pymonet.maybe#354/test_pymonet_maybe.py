# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1


def test_case_0():
    int_0 = 80
    maybe_0 = module_0.Maybe(int_0, int_0)


def test_case_1():
    set_0 = set()
    maybe_0 = module_0.Maybe(set_0, set_0)


def test_case_2():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_lazy()
    var_0.to_lazy()


def test_case_3():
    float_0 = 1398.6406
    bool_0 = False
    maybe_0 = module_0.Maybe(float_0, bool_0)
    bool_1 = True
    maybe_1 = module_0.Maybe(bool_1, float_0)
    bool_2 = maybe_0.__eq__(bool_0)
    bool_3 = False
    maybe_2 = module_0.Maybe(bool_2, bool_3)
    var_0 = maybe_2.to_validation()


def test_case_4():
    int_0 = 91
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    none_type_0 = None
    var_0 = maybe_0.map(bool_0)
    var_1 = maybe_0.get_or_else(none_type_0)
    var_2 = maybe_0.to_either()
    var_3 = var_2.to_try()
    var_3.to_validation()


def test_case_5():
    int_0 = -1703
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    maybe_0.map(int_0)


def test_case_6():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, maybe_0)
    var_0 = maybe_1.filter(none_type_0)
    var_1 = var_0.to_lazy()
    bool_1 = True
    var_2 = var_0.bind(var_0)
    maybe_0.filter(bool_1)


def test_case_7():
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.bind(bool_0)


def test_case_8():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.ap(bool_0)
    var_1 = var_0.to_lazy()
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    bool_1 = maybe_1.__eq__(bool_0)
    var_2 = maybe_1.to_either()
    var_3 = var_2.ap(var_2)
    var_4 = maybe_1.ap(bool_0)
    var_5 = maybe_1.ap(var_2)


def test_case_9():
    dict_0 = {}
    generic_0 = module_1.Generic(**dict_0)
    tuple_0 = ()
    bool_0 = False
    maybe_0 = module_0.Maybe(tuple_0, bool_0)
    maybe_0.ap(generic_0)


def test_case_10():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    none_type_0 = None
    var_0 = maybe_0.get_or_else(none_type_0)


def test_case_11():
    set_0 = set()
    maybe_0 = module_0.Maybe(set_0, set_0)
    var_0 = maybe_0.to_either()


def test_case_12():
    bool_0 = True
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_1, bool_1)
    var_0 = maybe_0.to_either()
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    var_1 = maybe_1.filter(var_0)
    var_2 = maybe_0.to_try()
    tuple_0 = ()
    maybe_2 = module_0.Maybe(tuple_0, bool_0)
    var_3 = maybe_2.bind(bool_0)
    maybe_3 = module_0.Maybe(var_2, var_2)
    bool_2 = maybe_2.__eq__(maybe_2)
    var_4 = var_3.to_box()
    maybe_0.filter(var_0)


def test_case_13():
    none_type_0 = None
    none_type_1 = None
    maybe_0 = module_0.Maybe(none_type_1, none_type_1)
    var_0 = maybe_0.to_box()
    var_0.map(none_type_0)


def test_case_14():
    str_0 = "s.P#rI"
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_lazy()


def test_case_15():
    float_0 = 1584.032135
    set_0 = {float_0, float_0}
    bool_0 = True
    maybe_0 = module_0.Maybe(set_0, bool_0)
    var_0 = maybe_0.to_try()
    var_0.to_box()


def test_case_16():
    set_0 = set()
    maybe_0 = module_0.Maybe(set_0, set_0)
    var_0 = maybe_0.to_try()


def test_case_17():
    str_0 = "o"
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_0.to_validation()


def test_case_18():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_either()
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, var_0)
    var_1 = maybe_1.filter(var_0)
    var_2 = var_1.to_lazy()
    var_3 = var_2.to_try()
    var_4 = var_1.bind(var_1)
    var_5 = var_4.ap(var_4)
    var_6 = var_4.to_lazy()
    bool_1 = var_4.__eq__(var_4)
    maybe_0.filter(var_0)


def test_case_19():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_either()
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, var_0)
    var_1 = maybe_1.filter(var_0)
    var_2 = var_1.to_lazy()
    var_3 = var_1.bind(var_1)
    var_4 = var_3.ap(var_3)
    bool_1 = var_3.__eq__(var_3)
    maybe_0.filter(var_0)


def test_case_20():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(none_type_0, bool_1)
    var_0 = maybe_1.to_lazy()
    var_1 = var_0.to_box()
    maybe_0.filter(bool_0)


def test_case_21():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_either()
    none_type_0 = None
    maybe_2 = module_0.Maybe(none_type_0, bool_0)
    var_1 = maybe_2.filter(var_0)
    var_2 = var_1.to_lazy()
    var_3 = var_2.to_try()
    tuple_0 = ()
    bool_2 = True
    maybe_3 = module_0.Maybe(tuple_0, bool_2)
    var_4 = maybe_3.bind(bool_0)
    var_5 = maybe_3.ap(var_4)
    var_6 = var_4.to_lazy()
    none_type_1 = None
    maybe_4 = module_0.Maybe(none_type_1, none_type_1)
    bool_3 = maybe_3.__eq__(maybe_3)
    var_7 = maybe_4.to_try()
    var_8 = var_1.to_try()
    bool_4 = maybe_3.__eq__(maybe_1)
    maybe_1.filter(var_5)
