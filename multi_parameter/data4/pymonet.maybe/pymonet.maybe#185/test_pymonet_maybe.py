# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    bool_0 = True
    list_0 = []
    maybe_0 = module_0.Maybe(list_0, list_0)
    var_0 = maybe_0.to_lazy()
    int_0 = 670
    var_1 = var_0.bind(bool_0)
    bool_1 = True
    bool_2 = maybe_0.__eq__(maybe_0)
    maybe_1 = module_0.Maybe(int_0, bool_1)
    var_2 = maybe_1.to_lazy()
    var_2.get_or_else(var_0)


def test_case_3():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    maybe_0 = module_0.Maybe(dict_0, bool_0)
    none_type_0 = None
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.filter(var_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(none_type_0, bool_1)
    var_2 = maybe_0.to_lazy()
    bool_2 = maybe_0.__eq__(dict_0)
    var_3 = maybe_0.to_try()
    maybe_1.filter(var_2)


def test_case_4():
    float_0 = -632.87
    list_0 = [float_0]
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    none_type_0 = None
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.bind(var_0)
    var_2 = maybe_0.map(none_type_0)
    var_3 = var_2.to_validation()
    var_4 = maybe_0.to_validation()
    var_5 = maybe_0.to_try()
    var_6 = maybe_0.to_try()
    var_7 = maybe_0.to_box()
    var_8 = maybe_0.to_lazy()
    var_9 = maybe_0.to_try()
    var_4.ap(list_0)


def test_case_5():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    maybe_1.map(maybe_1)


def test_case_6():
    set_0 = set()
    bool_0 = True
    maybe_0 = module_0.Maybe(set_0, bool_0)
    var_0 = maybe_0.filter(maybe_0)
    bool_1 = True
    bool_2 = False
    var_1 = var_0.to_box()
    maybe_1 = module_0.Maybe(bool_1, bool_2)
    maybe_2 = module_0.Maybe(set_0, bool_1)
    var_2 = maybe_1.to_lazy()
    var_3 = maybe_2.bind(bool_1)
    maybe_1.filter(bool_0)


def test_case_7():
    bool_0 = True
    bool_1 = False
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_1.to_lazy()
    maybe_1.bind(var_0)


def test_case_8():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    maybe_0 = module_0.Maybe(dict_0, bool_0)
    none_type_0 = None
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.filter(var_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(none_type_0, bool_1)
    var_2 = maybe_0.to_lazy()
    bool_2 = maybe_0.ap(var_2)
    var_3 = maybe_0.to_try()
    maybe_1.filter(var_2)


def test_case_9():
    bytes_0 = b"\xc8\xe0"
    int_0 = -1692
    bool_0 = False
    maybe_0 = module_0.Maybe(int_0, bool_0)
    maybe_0.ap(bytes_0)


def test_case_10():
    set_0 = set()
    bool_0 = True
    maybe_0 = module_0.Maybe(set_0, bool_0)
    var_0 = maybe_0.filter(maybe_0)
    bool_1 = True
    bool_2 = False
    maybe_1 = module_0.Maybe(bool_1, bool_2)
    var_1 = maybe_1.to_lazy()
    var_2 = var_1.bind(bool_1)
    maybe_1.filter(bool_0)


def test_case_11():
    bytes_0 = b"osh\xb8\x90\xea4"
    none_type_0 = None
    list_0 = []
    bool_0 = True
    maybe_0 = module_0.Maybe(list_0, bool_0)
    var_0 = maybe_0.filter(none_type_0)
    set_0 = {bool_0, bool_0, bool_0}
    maybe_1 = module_0.Maybe(bytes_0, set_0)
    var_1 = var_0.get_or_else(bytes_0)
    bool_1 = True
    bytes_1 = b"\xb9fs\xbb\xef\xab\xadx\xc6\xf27M\xb8\xb8\xdf\x18\xb2 \x02"
    tuple_0 = (bool_1, bool_1, bytes_1)
    dict_0 = {tuple_0: bytes_1, bytes_1: bytes_1, tuple_0: tuple_0, bytes_1: bool_1}
    list_1 = [dict_0]
    maybe_2 = module_0.Maybe(list_1, bytes_1)


def test_case_12():
    str_0 = "_h tBH=4=\njzDh0zKscT"
    none_type_0 = None
    none_type_1 = None
    maybe_0 = module_0.Maybe(none_type_1, none_type_1)
    var_0 = maybe_0.get_or_else(str_0)
    var_0.get_or_else(none_type_0)


def test_case_13():
    none_type_0 = None
    float_0 = -2450.0
    bool_0 = True
    maybe_0 = module_0.Maybe(float_0, bool_0)
    var_0 = maybe_0.to_either()
    maybe_1 = module_0.Maybe(var_0, bool_0)
    var_1 = maybe_1.ap(none_type_0)
    var_2 = var_1.to_try()
    var_2.to_validation()


def test_case_14():
    bytes_0 = b"\x9f\xc1\xa4z\xcbK\xfb\x1d\xa8\x86_\xbbMm\xeb"
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_try()
    var_1.map(bytes_0)


def test_case_15():
    set_0 = set()
    bool_0 = True
    maybe_0 = module_0.Maybe(set_0, bool_0)
    var_0 = maybe_0.filter(maybe_0)
    bool_1 = True
    bool_2 = False
    maybe_1 = module_0.Maybe(bool_1, bool_2)
    var_1 = maybe_1.to_lazy()
    var_2 = var_1.bind(bool_1)
    var_3 = maybe_0.to_box()
    maybe_1.filter(bool_0)


def test_case_16():
    str_0 = 'SP$}rw"Xvm'
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_box()
    var_0.ap(str_0)


def test_case_17():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_try()
    var_0.bind(var_0)


def test_case_18():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    maybe_0 = module_0.Maybe(dict_0, bool_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    bool_1 = var_0.__eq__(bool_0)
    var_1 = maybe_0.to_try()
    var_2 = var_0.filter(bool_1)
    bool_2 = False
    maybe_1 = module_0.Maybe(bool_0, bool_1)
    var_3 = var_1.bind(bool_2)
    var_4 = maybe_1.to_validation()
    var_5 = var_0.to_try()
    var_6 = var_2.bind(var_5)
    var_7 = var_0.map(bool_0)
    var_8 = maybe_1.to_try()
    var_9 = var_5.bind(var_0)
    var_10 = var_7.map(var_4)
    var_11 = var_10.to_try()
    maybe_1.filter(maybe_0)


def test_case_19():
    none_type_0 = None
    dict_0 = {}
    bool_0 = True
    maybe_0 = module_0.Maybe(dict_0, bool_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_try()
    var_2 = var_1.get_or_else(none_type_0)
    complex_0 = -1140.03 + 1731.64j
    dict_1 = {
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
    }
    bool_1 = True
    maybe_1 = module_0.Maybe(dict_1, bool_1)
    var_3 = maybe_1.to_lazy()
    var_4 = var_3.to_try()
    var_4.to_either()


def test_case_20():
    str_0 = "\n        Transform Maybe to Box.\n\n        :returns: Box monad with previous value when Maybe is not empty, in other case Box with None\n        :rtype: Box[A | None]\n        "
    none_type_0 = None
    maybe_0 = module_0.Maybe(str_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_validation()
    var_2 = var_1.to_box()
    var_3 = var_2.to_lazy()
    var_4 = var_2.to_validation()
    var_5 = var_4.to_lazy()
    var_6 = var_3.to_either()
    var_4.filter(var_1)


def test_case_21():
    bytes_0 = b"\x85\x83,\x18\xbf\x11|\xb1v\xde\xc5["
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_lazy()
    bool_0 = maybe_0.__eq__(maybe_0)
    var_1 = maybe_0.ap(bytes_0)
    var_0.filter(var_1)


def test_case_22():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_1 = module_0.Maybe(dict_0, maybe_0)
    bool_1 = maybe_0.__eq__(maybe_1)
    var_0 = maybe_1.to_try()
    var_1 = maybe_1.filter(var_0)
    bool_2 = False
    bool_3 = True
    maybe_2 = module_0.Maybe(maybe_1, bool_3)
    var_2 = maybe_1.to_box()
    var_3 = var_0.get_or_else(bool_0)
    maybe_3 = module_0.Maybe(bool_1, bool_2)
    bool_4 = True
    maybe_4 = module_0.Maybe(bool_3, bool_4)
    var_4 = maybe_0.bind(var_2)
    var_0.to_validation()
