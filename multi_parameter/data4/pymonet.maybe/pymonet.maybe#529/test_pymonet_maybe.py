# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    int_0 = 634
    maybe_0 = module_0.Maybe(int_0, int_0)


def test_case_1():
    set_0 = set()
    maybe_0 = module_0.Maybe(set_0, set_0)


def test_case_2():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_try()
    bool_1 = maybe_0.__eq__(maybe_0)
    var_1 = maybe_0.to_validation()
    var_1.ap(bool_0)


def test_case_3():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_either()
    str_0 = "/Kf7Bk\x0b1miFZmu610\x0ci@"
    bool_0 = False
    maybe_1 = module_0.Maybe(str_0, bool_0)
    bool_1 = maybe_1.__eq__(var_0)


def test_case_4():
    str_0 = "Q%"
    bool_0 = False
    float_0 = 1014.9229
    bool_1 = True
    maybe_0 = module_0.Maybe(float_0, bool_1)
    var_0 = maybe_0.ap(str_0)
    var_1 = var_0.map(bool_0)
    var_2 = var_1.to_box()
    var_2.bind(bool_0)


def test_case_5():
    str_0 = "\n        It takes as a parameter function returning another Validation.\n        Function is called with Validation value and returns new Validation with previous value\n        and concated new and old errors.\n\n        :param monad: monad contains function\n        :type monad: Function(A) -> Validation[Any, List[E]]\n        :returns: new validation with stored errors\n        :rtype: Validation[A, List[E]]\n        "
    list_0 = [str_0, str_0, str_0]
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.ap(list_0)
    var_1 = var_0.to_validation()
    bool_1 = False
    maybe_1 = module_0.Maybe(str_0, bool_1)
    var_2 = maybe_1.to_try()
    maybe_1.map(str_0)


def test_case_6():
    str_0 = "|STwh"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.filter(str_0)
    var_1 = var_0.to_try()
    set_0 = {str_0}
    var_2 = maybe_0.bind(var_1)
    bool_0 = False
    maybe_1 = module_0.Maybe(set_0, bool_0)
    var_3 = var_0.to_try()
    var_3.to_lazy()


def test_case_7():
    bytes_0 = b"\xc5j\xc3\xe7VK!\x1e\xcf$\xc6\xbb#\x83\xf3"
    bool_0 = True
    bytes_1 = b"\xfd"
    maybe_0 = module_0.Maybe(bytes_1, bytes_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.bind(bytes_0)
    var_2 = var_0.to_lazy()
    var_3 = var_2.to_box()
    var_4 = var_3.to_lazy()
    var_5 = var_4.ap(bool_0)
    maybe_1 = module_0.Maybe(bytes_0, bytes_0)
    none_type_0 = None
    var_6 = maybe_1.filter(var_4)
    var_7 = maybe_1.filter(none_type_0)
    var_8 = var_7.to_lazy()
    var_9 = var_7.filter(var_8)
    bool_1 = var_7.__eq__(var_2)
    var_10 = var_1.to_try()
    var_11 = var_3.ap(maybe_1)
    bool_2 = var_9.__eq__(var_11)
    var_12 = var_11.ap(var_2)
    str_0 = "cA2iV~dq,BG@##/"
    bool_3 = False
    maybe_2 = module_0.Maybe(str_0, bool_3)
    var_13 = var_2.to_box()
    maybe_3 = module_0.Maybe(maybe_0, bool_1)
    maybe_3.bind(var_11)


def test_case_8():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.ap(var_0)
    var_0.map(var_1)


def test_case_9():
    int_0 = -998
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_0.ap(int_0)


def test_case_10():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_either()
    maybe_0.filter(none_type_0)


def test_case_11():
    str_0 = "W"
    list_0 = [str_0]
    bool_0 = True
    bytes_0 = b"\xd7\x1a\xd2Z\xaf\xa8\x90\x86\xc0\x7f\x9fz\xa6\x97Z\x0b/"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.get_or_else(bool_0)
    var_0.ap(list_0)


def test_case_12():
    none_type_0 = None
    none_type_1 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_1, bool_0)
    var_0 = maybe_0.get_or_else(none_type_0)
    var_0.to_validation()


def test_case_13():
    none_type_0 = None
    complex_0 = -642.8415 - 1133.5j
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.map(complex_0)
    var_1 = var_0.to_either()
    bool_1 = var_1.__eq__(bool_0)


def test_case_14():
    complex_0 = 2321 + 1201.8j
    float_0 = -6147.132
    bool_0 = False
    maybe_0 = module_0.Maybe(float_0, bool_0)
    var_0 = maybe_0.to_box()
    var_0.bind(complex_0)


def test_case_15():
    bool_0 = False
    none_type_0 = None
    bool_1 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_1)
    var_0 = maybe_0.ap(bool_0)
    var_1 = var_0.to_lazy()
    var_1.to_lazy()


def test_case_16():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_try()
    var_0.to_either()


def test_case_17():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_try()
    bool_1 = var_0.__eq__(maybe_0)
    var_1 = maybe_0.to_validation()
    var_1.ap(bool_0)


def test_case_18():
    none_type_0 = None
    bytes_0 = b"&\x8e\xe99pE)\xf4\xad<"
    none_type_1 = None
    maybe_0 = module_0.Maybe(bytes_0, none_type_1)
    var_0 = maybe_0.to_validation()
    var_0.filter(none_type_0)


def test_case_19():
    set_0 = set()
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.bind(set_0)
    var_1.to_validation()


def test_case_20():
    bytes_0 = b"\xc5j\xc3\xe7VK\xc8\x1e\xcf$\xc6\xbb#\x83\xf3"
    bool_0 = True
    bytes_1 = b"\xfd"
    maybe_0 = module_0.Maybe(bytes_1, bytes_0)
    var_0 = maybe_0.ap(maybe_0)
    var_1 = maybe_0.to_lazy()
    var_2 = var_1.to_box()
    var_3 = var_2.to_lazy()
    var_4 = var_3.ap(bool_0)
    bool_1 = var_4.__eq__(bytes_0)
    maybe_1 = module_0.Maybe(bytes_0, bytes_0)
    none_type_0 = None
    var_5 = maybe_1.filter(none_type_0)
    var_6 = var_5.to_lazy()
    var_7 = var_5.filter(var_6)
    bool_2 = var_7.__eq__(bytes_0)
    bool_3 = var_7.__eq__(var_0)
    var_8 = maybe_1.to_try()
    var_9 = var_2.ap(var_0)
    var_4.to_validation()


def test_case_21():
    bytes_0 = b"\xc5j\xc3\xe7VK\xc8\x1e\xcf$\xc6\xbb#\x83\xf3"
    bool_0 = True
    bytes_1 = b""
    maybe_0 = module_0.Maybe(bytes_1, bytes_0)
    var_0 = maybe_0.bind(maybe_0)
    var_1 = maybe_0.to_lazy()
    var_2 = var_1.to_box()
    var_3 = var_0.to_lazy()
    var_4 = var_3.ap(bool_0)
    bool_1 = maybe_0.__eq__(var_0)
    maybe_1 = module_0.Maybe(var_0, var_3)
    var_3.filter(bool_0)


def test_case_22():
    complex_0 = 1362.18147 + 2766.091616j
    list_0 = [complex_0, complex_0, complex_0]
    bool_0 = True
    maybe_0 = module_0.Maybe(complex_0, bool_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    var_1 = maybe_0.ap(complex_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(complex_0, none_type_0)
    bool_1 = maybe_1.__eq__(maybe_1)
    var_2 = maybe_1.get_or_else(list_0)
    var_3 = maybe_1.to_either()
    var_3.filter(list_0)
