# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1


def test_case_0():
    int_0 = 2039
    maybe_0 = module_0.Maybe(int_0, int_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    var_1 = maybe_0.to_validation()
    var_1.to_validation()


def test_case_3():
    set_0 = set()
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.ap(maybe_0)
    var_1 = var_0.ap(var_0)
    var_2 = var_1.bind(set_0)
    var_3 = var_0.filter(none_type_0)
    var_4 = var_3.bind(bool_0)
    bool_1 = var_2.__eq__(maybe_0)
    var_5 = var_0.to_box()
    var_6 = var_0.to_validation()
    var_7 = var_1.to_box()
    bool_2 = maybe_0.__eq__(var_7)
    maybe_1 = module_0.Maybe(var_7, set_0)
    maybe_1.filter(maybe_0)


def test_case_4():
    bool_0 = True
    tuple_0 = (bool_0,)
    none_type_0 = None
    float_0 = 1544.3
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.map(none_type_0)
    var_1 = var_0.map(tuple_0)
    bool_1 = var_1.__eq__(float_0)
    bool_2 = var_0.__eq__(none_type_0)
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    var_2 = maybe_1.to_box()
    var_3 = var_1.ap(bool_0)
    var_4 = var_2.to_validation()
    bool_3 = maybe_0.__eq__(bool_2)
    dict_0 = {bool_1: float_0}
    bool_4 = var_4.__eq__(dict_0)
    var_4.to_validation()


def test_case_5():
    none_type_0 = None
    bytes_0 = b"c{\xd95\x98Y\x8b\x19\xc4\xaa\xe8"
    set_0 = {bytes_0, bytes_0, bytes_0}
    bool_0 = False
    maybe_0 = module_0.Maybe(set_0, bool_0)
    maybe_0.map(none_type_0)


def test_case_6():
    bytes_0 = b"{"
    str_0 = "]?[&QQM:~T5"
    dict_0 = {bytes_0: str_0, bytes_0: str_0}
    bool_0 = False
    maybe_0 = module_0.Maybe(dict_0, bool_0)
    var_0 = maybe_0.to_lazy()
    maybe_0.bind(maybe_0)


def test_case_7():
    list_0 = []
    bytes_0 = b"Ee\xf9\x03("
    bool_0 = False
    bytes_1 = b"\xe7\xa0Z\x9d\x04:\xb3\x0eN"
    maybe_0 = module_0.Maybe(bool_0, bytes_1)
    var_0 = maybe_0.ap(bytes_0)
    var_1 = var_0.ap(list_0)


def test_case_8():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_0.ap(bool_0)


def test_case_9():
    int_0 = 2493
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_either()
    maybe_1 = module_0.Maybe(int_0, bool_0)
    var_1 = maybe_1.to_try()
    var_2 = maybe_0.to_lazy()
    var_3 = maybe_1.filter(var_1)


def test_case_10():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    var_1 = maybe_0.to_validation()
    maybe_0.filter(var_1)


def test_case_11():
    float_0 = 2392.0
    maybe_0 = module_0.Maybe(float_0, float_0)
    list_0 = [maybe_0]
    maybe_1 = module_0.Maybe(list_0, list_0)
    none_type_0 = None
    bool_0 = True
    maybe_2 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_2.get_or_else(maybe_1)
    var_1 = var_0.to_validation()
    var_1.to_validation()


def test_case_12():
    int_0 = -677
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.get_or_else(int_0)


def test_case_13():
    str_0 = "Lazy[T, W]"
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_try()
    var_1.ap(str_0)


def test_case_14():
    complex_0 = 580.6 + 2192.1621j
    maybe_0 = module_0.Maybe(complex_0, complex_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_validation()
    var_1.to_validation()


def test_case_15():
    str_0 = "\nr7O\nh~"
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_box()
    var_0.map(str_0)


def test_case_16():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_0.to_lazy()


def test_case_17():
    str_0 = "&Aq07_\x0cx*?CuF"
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = var_0.to_lazy()
    var_2 = var_1.to_box()
    var_3 = var_1.map(var_0)
    var_0.to_validation()


def test_case_18():
    dict_0 = {}
    list_0 = [dict_0, dict_0]
    list_1 = [list_0, dict_0, list_0]
    maybe_0 = module_0.Maybe(list_1, list_1)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_try()
    var_1.to_lazy()


def test_case_19():
    bool_0 = False
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_validation()
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    var_1 = maybe_1.to_lazy()
    var_2 = var_1.map(var_0)
    var_3 = var_2.to_try()
    none_type_1 = None
    maybe_2 = module_0.Maybe(none_type_1, bool_0)
    var_4 = maybe_2.to_lazy()
    var_4.get_or_else(bool_0)


def test_case_20():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    var_1 = maybe_0.to_try()
    var_2 = maybe_0.to_validation()
    tuple_0 = ()
    maybe_0.ap(tuple_0)


def test_case_21():
    set_0 = set()
    none_type_0 = None
    generic_0 = module_1.Generic()
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.filter(generic_0)
    var_1 = maybe_0.ap(generic_0)
    var_2 = var_1.ap(none_type_0)
    var_3 = var_2.bind(set_0)
    var_4 = var_1.filter(none_type_0)
    var_5 = var_4.to_try()
    var_6 = maybe_0.to_box()
    maybe_1 = module_0.Maybe(var_5, var_5)
    bool_1 = var_4.__eq__(set_0)
    var_7 = var_6.to_try()
    var_8 = var_2.to_box()
    var_9 = var_1.ap(bool_1)
    maybe_2 = module_0.Maybe(none_type_0, maybe_0)
    bool_2 = maybe_2.__eq__(var_7)
    maybe_3 = module_0.Maybe(var_7, var_6)
    var_10 = var_2.bind(maybe_3)
    var_11 = var_3.to_box()
    var_12 = var_6.ap(var_5)
    var_13 = var_10.to_lazy()
    bool_3 = var_3.__eq__(maybe_1)
    var_12.to_box()
