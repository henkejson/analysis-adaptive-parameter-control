# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import builtins as module_1


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    complex_0 = -271.578 + 485.9j
    bool_0 = True
    maybe_0 = module_0.Maybe(complex_0, bool_0)
    var_0 = maybe_0.to_lazy()
    bool_1 = True
    maybe_1 = module_0.Maybe(complex_0, bool_1)
    var_1 = maybe_0.filter(var_0)
    bool_2 = maybe_0.__eq__(var_1)
    maybe_2 = module_0.Maybe(var_0, var_0)
    var_2 = var_1.to_box()
    bool_3 = var_0.__eq__(var_0)
    var_3 = var_0.ap(var_2)
    var_4 = var_2.to_lazy()


def test_case_3():
    complex_0 = -271.578 + 485.9j
    bool_0 = True
    maybe_0 = module_0.Maybe(complex_0, bool_0)
    var_0 = maybe_0.map(complex_0)
    maybe_1 = module_0.Maybe(complex_0, bool_0)
    var_1 = maybe_0.filter(var_0)
    bool_1 = False
    var_2 = maybe_1.to_box()
    bool_2 = maybe_0.__eq__(var_1)
    maybe_2 = module_0.Maybe(complex_0, bool_1)
    var_3 = var_0.to_box()
    bool_3 = maybe_1.__eq__(complex_0)
    var_4 = maybe_2.to_box()
    var_5 = maybe_1.bind(var_0)
    maybe_2.filter(bool_2)


def test_case_4():
    object_0 = module_1.object()
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.ap(none_type_0)
    var_2 = var_0.to_validation()
    bool_0 = var_2.__eq__(object_0)
    var_3 = maybe_0.to_try()
    maybe_0.map(var_3)


def test_case_5():
    int_0 = 0
    bytes_0 = b"X\x83=\xed\x12r\xf9\x15K"
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.bind(int_0)
    float_0 = 2001.775132
    bool_1 = True
    maybe_1 = module_0.Maybe(float_0, bool_1)
    var_1 = maybe_1.get_or_else(var_0)


def test_case_6():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_validation()
    maybe_0.bind(var_0)


def test_case_7():
    bool_0 = False
    float_0 = -2177.836
    maybe_0 = module_0.Maybe(float_0, float_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.ap(bool_0)
    var_2 = maybe_0.get_or_else(var_0)
    var_0.get_or_else(var_0)


def test_case_8():
    bool_0 = True
    none_type_0 = None
    bool_1 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_1)
    var_0 = maybe_0.to_either()
    maybe_0.ap(bool_0)


def test_case_9():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_lazy()
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    var_1 = maybe_0.filter(var_0)
    bool_1 = False
    maybe_2 = module_0.Maybe(var_0, bool_1)
    var_2 = var_0.to_box()
    var_3 = var_0.to_box()
    var_4 = maybe_1.bind(var_0)
    maybe_2.filter(var_2)


def test_case_10():
    str_0 = "\n    In mathematics, a semigroup is an algebraic structure\n    consisting of a set together with an associative binary operation.\n    A semigroup generalizes a monoid in that there might not exist an identity element.\n    It also (originally) generalized a group (a monoid with all inverses)\n    to a type where every element did not have to have an inverse, this the name semigroup.\n    "
    none_type_0 = None
    maybe_0 = module_0.Maybe(str_0, none_type_0)
    complex_0 = 2270.51524 - 1870j
    none_type_1 = None
    maybe_1 = module_0.Maybe(complex_0, none_type_1)
    var_0 = maybe_1.to_lazy()
    maybe_1.filter(var_0)


def test_case_11():
    complex_0 = -271.578 + 485.9j
    bool_0 = True
    maybe_0 = module_0.Maybe(complex_0, bool_0)
    var_0 = maybe_0.to_lazy()
    bool_1 = True
    maybe_1 = module_0.Maybe(complex_0, bool_1)
    var_1 = maybe_0.filter(var_0)
    var_2 = var_0.to_either()
    none_type_0 = None
    maybe_2 = module_0.Maybe(complex_0, none_type_0)
    var_3 = maybe_2.get_or_else(maybe_0)
    bool_2 = False
    var_4 = maybe_1.to_try()
    bool_3 = maybe_0.__eq__(var_1)
    maybe_3 = module_0.Maybe(complex_0, bool_2)
    var_5 = var_0.to_box()
    bool_4 = maybe_1.__eq__(complex_0)
    var_6 = var_0.to_box()
    var_7 = maybe_3.to_box()
    var_8 = maybe_1.bind(var_0)
    var_9 = maybe_1.to_either()
    maybe_3.filter(bool_3)


def test_case_12():
    bytes_0 = b"\x90t\xc74a\xd7\xccw*"
    str_0 = "eOx"
    maybe_0 = module_0.Maybe(bytes_0, str_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_try()
    var_1.to_try()


def test_case_13():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.filter(var_0)
    bool_1 = False
    var_2 = maybe_0.to_box()
    var_3 = var_1.to_try()
    bool_2 = maybe_0.__eq__(var_1)
    maybe_1 = module_0.Maybe(bool_2, bool_1)
    var_4 = var_0.to_box()
    bool_3 = bool_0.__eq__(var_3)
    var_5 = maybe_1.to_box()
    var_6 = var_0.bind(var_0)
    maybe_1.filter(bool_2)


def test_case_14():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_lazy()


def test_case_15():
    str_0 = "\n    Map is a Semigroup that will always return contated all values inside Map value\n    "
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.to_validation()


def test_case_16():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_validation()
    list_0 = [maybe_0, none_type_0, none_type_0, var_0]
    var_1 = var_0.to_lazy()
    bool_0 = var_0.__eq__(var_1)
    maybe_1 = module_0.Maybe(maybe_0, list_0)
    var_0.bind(maybe_0)


def test_case_17():
    complex_0 = -271.578 + 485.9j
    bool_0 = True
    maybe_0 = module_0.Maybe(complex_0, bool_0)
    var_0 = maybe_0.to_lazy()
    bool_1 = False
    maybe_1 = module_0.Maybe(var_0, bool_1)
    var_1 = maybe_0.filter(var_0)
    var_2 = var_0.to_try()
    bool_2 = maybe_1.__eq__(maybe_0)
    maybe_2 = module_0.Maybe(var_2, var_2)
    var_2.to_box()


def test_case_18():
    complex_0 = -271.578 + 485.9j
    bool_0 = False
    maybe_0 = module_0.Maybe(complex_0, bool_0)
    var_0 = maybe_0.to_lazy()
    bool_1 = True
    maybe_1 = module_0.Maybe(complex_0, bool_1)
    var_1 = maybe_0.to_lazy()
    bool_2 = maybe_0.__eq__(maybe_0)
    maybe_0.filter(var_0)
