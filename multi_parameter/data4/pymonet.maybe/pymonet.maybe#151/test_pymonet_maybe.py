# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1
import builtins as module_2


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    set_0 = set()
    maybe_0 = module_0.Maybe(set_0, set_0)


def test_case_2():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    list_0 = []
    maybe_1 = module_0.Maybe(list_0, list_0)
    bool_1 = maybe_1.__eq__(maybe_1)
    var_0 = maybe_1.to_try()
    var_1 = maybe_0.filter(var_0)
    maybe_1.filter(bool_1)


def test_case_3():
    bytes_0 = b"\x1c\xcbu\xf0O\xfc+\x1fS\x87c\xbe"
    bool_0 = True
    generic_0 = module_1.Generic()
    maybe_0 = module_0.Maybe(generic_0, bool_0)
    bool_1 = maybe_0.__eq__(bytes_0)
    var_0 = maybe_0.get_or_else(generic_0)
    var_1 = maybe_0.to_lazy()
    var_2 = var_1.to_box()
    bool_2 = True
    maybe_1 = module_0.Maybe(var_1, bool_2)
    var_3 = maybe_1.filter(var_0)
    var_0.get_or_else(var_0)


def test_case_4():
    bytes_0 = b"\xbd"
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = True
    maybe_1 = module_0.Maybe(bytes_0, bool_1)
    var_0 = maybe_1.map(maybe_1)
    var_1 = maybe_1.to_try()
    object_0 = module_2.object()
    var_2 = maybe_1.filter(bytes_0)
    var_3 = var_2.to_box()


def test_case_5():
    bytes_0 = b'W.\x00\xd5#.W\xe6\xcc\x1c\xd4\xf4"9\xbe\x97)\xe8'
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    maybe_0.map(bytes_0)


def test_case_6():
    list_0 = []
    maybe_0 = module_0.Maybe(list_0, list_0)
    var_0 = maybe_0.to_try()
    str_0 = "6leg+\x0c*REq%fX Lr\tw"
    bool_0 = False
    maybe_1 = module_0.Maybe(str_0, bool_0)
    var_1 = maybe_1.to_try()
    none_type_0 = None
    maybe_2 = module_0.Maybe(none_type_0, none_type_0)
    bool_1 = True
    maybe_3 = module_0.Maybe(maybe_2, bool_1)
    var_2 = maybe_3.ap(var_1)
    var_3 = var_2.bind(var_0)
    var_4 = var_3.to_either()


def test_case_7():
    bytes_0 = b"\x1c\xcbu\xf0O\xfc+\x1fS\x87c\xbe"
    bool_0 = False
    generic_0 = module_1.Generic()
    maybe_0 = module_0.Maybe(generic_0, bool_0)
    bool_1 = maybe_0.__eq__(bytes_0)
    maybe_0.bind(bool_1)


def test_case_8():
    bool_0 = False
    int_0 = -2137
    bool_1 = False
    maybe_0 = module_0.Maybe(int_0, bool_1)
    maybe_0.ap(bool_0)


def test_case_9():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.filter(none_type_0)
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_1 = maybe_1.to_lazy()


def test_case_10():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    list_0 = []
    maybe_1 = module_0.Maybe(list_0, list_0)
    var_0 = maybe_0.filter(maybe_1)
    maybe_1.filter(maybe_0)


def test_case_11():
    str_0 = "0@~z}U%\x0c]\x0b(S::"
    complex_0 = 326 + 1309.12j
    maybe_0 = module_0.Maybe(complex_0, complex_0)
    var_0 = maybe_0.to_try()
    int_0 = -2778
    maybe_1 = module_0.Maybe(int_0, var_0)
    var_1 = maybe_1.filter(var_0)
    var_2 = var_1.get_or_else(str_0)
    var_2.to_box()


def test_case_12():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    var_1 = maybe_0.to_box()


def test_case_13():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_either()
    var_0.to_either()


def test_case_14():
    bool_0 = True
    tuple_0 = (bool_0,)
    maybe_0 = module_0.Maybe(tuple_0, bool_0)
    var_0 = maybe_0.to_box()
    maybe_1 = module_0.Maybe(var_0, tuple_0)
    var_1 = maybe_1.to_try()
    maybe_2 = module_0.Maybe(var_1, var_0)
    var_2 = maybe_2.to_lazy()


def test_case_15():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()


def test_case_16():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_try()


def test_case_17():
    none_type_0 = None
    int_0 = -2128
    maybe_0 = module_0.Maybe(int_0, none_type_0)
    var_0 = maybe_0.to_try()


def test_case_18():
    bytes_0 = b"U"
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = True
    maybe_1 = module_0.Maybe(bytes_0, bool_1)
    var_0 = maybe_1.map(maybe_1)
    var_1 = maybe_1.to_try()
    var_2 = maybe_1.to_either()
    var_3 = var_0.to_validation()
    var_4 = maybe_1.to_box()
    var_5 = maybe_1.filter(var_4)
    var_6 = var_5.to_box()
    var_4.to_box()


def test_case_19():
    set_0 = set()
    bool_0 = False
    maybe_0 = module_0.Maybe(set_0, bool_0)
    var_0 = maybe_0.to_box()
    maybe_1 = module_0.Maybe(set_0, set_0)
    var_1 = maybe_1.to_validation()
    maybe_1.ap(var_0)


def test_case_20():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_either()


def test_case_21():
    bytes_0 = b"H\xa9\xb4\xc5"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    bool_0 = True
    maybe_0 = module_0.Maybe(dict_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_validation()
    var_2 = var_1.to_box()
    maybe_1 = module_0.Maybe(var_1, var_1)
    var_3 = var_0.to_try()
    bool_1 = True
    maybe_2 = module_0.Maybe(dict_0, bool_1)
    var_3.to_lazy()


def test_case_22():
    str_0 = "\n        Returns failed Validation with None as value and errors list.\n\n        :params errors: list of errors to store\n        :type value: List[E]\n        :returns: Failed Validation\n        :rtype: Validation[None, List[E]]\n        "
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_validation()
    none_type_0 = None
    var_1 = maybe_0.to_validation()
    maybe_1 = module_0.Maybe(str_0, none_type_0)
    var_2 = var_0.to_try()
    var_3 = module_0.Maybe(var_1, var_1)
    bool_1 = maybe_0.__eq__(var_3)
    maybe_2 = module_0.Maybe(var_0, var_2)
    var_4 = maybe_0.to_lazy()
    var_5 = maybe_0.filter(var_3)
    var_6 = maybe_0.to_either()
    var_2.to_box()


def test_case_23():
    bool_0 = True
    tuple_0 = (bool_0,)
    maybe_0 = module_0.Maybe(tuple_0, bool_0)
    none_type_0 = None
    var_0 = maybe_0.get_or_else(maybe_0)
    var_1 = maybe_0.bind(var_0)
    var_2 = var_1.to_box()
    maybe_1 = module_0.Maybe(maybe_0, var_2)
    var_3 = var_0.map(var_2)
    var_4 = var_3.ap(none_type_0)
    bool_1 = var_3.__eq__(var_4)
    var_5 = var_3.to_either()
    var_6 = var_2.to_try()
    var_7 = maybe_1.to_validation()
    var_8 = var_4.to_box()
    var_9 = var_4.to_validation()
    bytes_0 = b"\xe5"
    var_2.get_or_else(bytes_0)
