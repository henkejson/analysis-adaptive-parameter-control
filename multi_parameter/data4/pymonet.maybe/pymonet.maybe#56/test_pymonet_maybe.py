# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import builtins as module_0
import pymonet.maybe as module_1


def test_case_0():
    object_0 = module_0.object()
    maybe_0 = module_1.Maybe(object_0, object_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_1.Maybe(none_type_0, none_type_0)


def test_case_2():
    dict_0 = {}
    bool_0 = False
    maybe_0 = module_1.Maybe(dict_0, bool_0)
    var_0 = maybe_0.to_box()
    maybe_1 = module_1.Maybe(dict_0, bool_0)
    var_1 = maybe_1.to_box()
    none_type_0 = None
    bool_1 = maybe_1.__eq__(none_type_0)


def test_case_3():
    int_0 = 1
    bool_0 = True
    maybe_0 = module_1.Maybe(int_0, bool_0)
    bool_1 = maybe_0.__eq__(int_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.map(int_0)
    var_2 = maybe_0.get_or_else(int_0)
    var_3 = var_1.bind(var_0)
    var_4 = var_1.filter(bool_0)
    none_type_0 = None
    var_5 = var_1.get_or_else(none_type_0)
    var_5.to_either()


def test_case_4():
    none_type_0 = None
    maybe_0 = module_1.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_validation()
    maybe_0.ap(maybe_0)


def test_case_5():
    dict_0 = {}
    bytes_0 = b"\x89"
    bytes_1 = b"\x99\xceP;%\xb7\x04{\x18\xf9d\nv\x8d\xce\xd2\xfd\xff\xea\xe8"
    bool_0 = True
    maybe_0 = module_1.Maybe(bytes_1, bool_0)
    var_0 = maybe_0.ap(dict_0)
    var_1 = maybe_0.bind(bytes_0)
    var_2 = var_1.to_validation()
    var_3 = var_2.to_either()
    var_4 = var_2.to_either()
    var_4.filter(dict_0)


def test_case_6():
    str_0 = "\x0bV2[Bb$6I_f>g\x0c\n"
    bytes_0 = b"\xc2\xbfE"
    none_type_0 = None
    maybe_0 = module_1.Maybe(bytes_0, none_type_0)
    maybe_1 = module_1.Maybe(bytes_0, none_type_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_1.get_or_else(str_0)
    maybe_0.bind(var_1)


def test_case_7():
    bytes_0 = b"\xda\xa1"
    maybe_0 = module_1.Maybe(bytes_0, bytes_0)
    tuple_0 = ()
    maybe_1 = module_1.Maybe(tuple_0, tuple_0)
    maybe_1.filter(maybe_0)


def test_case_8():
    int_0 = -438
    none_type_0 = None
    none_type_1 = None
    bool_0 = True
    maybe_0 = module_1.Maybe(none_type_1, bool_0)
    var_0 = maybe_0.ap(none_type_0)
    var_1 = var_0.to_validation()
    var_2 = var_0.get_or_else(var_1)
    var_3 = var_0.to_lazy()
    var_3.filter(int_0)


def test_case_9():
    none_type_0 = None
    str_0 = "\n        Returns new ImmutableList with elements from previous one\n        and argument value on the end of list\n\n        :param new_element: element to append on the end of list\n        :type fn: A\n        :returns: ImmutableList[A]\n        "
    bool_0 = False
    maybe_0 = module_1.Maybe(str_0, bool_0)
    var_0 = maybe_0.get_or_else(none_type_0)
    var_0.to_validation()


def test_case_10():
    bytes_0 = b"\xda\xa1"
    maybe_0 = module_1.Maybe(bytes_0, bytes_0)
    list_0 = [bytes_0]
    var_0 = maybe_0.filter(list_0)
    tuple_0 = ()
    maybe_1 = module_1.Maybe(tuple_0, tuple_0)
    var_1 = maybe_0.to_either()
    maybe_1.filter(var_1)


def test_case_11():
    none_type_0 = None
    maybe_0 = module_1.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_either()


def test_case_12():
    bool_0 = False
    maybe_0 = module_1.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_0.to_lazy()


def test_case_13():
    bytes_0 = b"\xba^-\x87\x8cK\xab\x1a\x9an~\xb4\xd9\xc8\x1f\xef\xf2Xh"
    tuple_0 = (bytes_0,)
    bool_0 = False
    maybe_0 = module_1.Maybe(tuple_0, bool_0)
    int_0 = 1970
    maybe_1 = module_1.Maybe(int_0, int_0)
    var_0 = maybe_1.to_try()


def test_case_14():
    bool_0 = False
    bool_1 = True
    maybe_0 = module_1.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_try()
    maybe_1 = module_1.Maybe(bool_0, bool_0)
    var_1 = maybe_1.to_try()
    maybe_1.filter(var_1)


def test_case_15():
    bytes_0 = b"\xda\xa1"
    maybe_0 = module_1.Maybe(bytes_0, bytes_0)
    list_0 = [bytes_0]
    var_0 = maybe_0.filter(list_0)
    tuple_0 = ()
    maybe_1 = module_1.Maybe(tuple_0, tuple_0)
    maybe_1.filter(tuple_0)


def test_case_16():
    str_0 = "w6kItHg LF"
    maybe_0 = module_1.Maybe(str_0, str_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_either()
    var_2 = var_1.to_validation()
    var_3 = var_2.to_either()
    var_3.get_or_else(str_0)


def test_case_17():
    bytes_0 = b"\x94\xd8"
    bool_0 = False
    maybe_0 = module_1.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_either()
    var_2 = var_0.bind(bytes_0)
    var_1.map(var_1)


def test_case_18():
    str_0 = "w6kItH LF"
    maybe_0 = module_1.Maybe(str_0, str_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.to_validation()
    var_2 = maybe_0.map(str_0)
    var_3 = var_2.get_or_else(str_0)
    maybe_1 = module_1.Maybe(str_0, str_0)
    bool_0 = maybe_1.__eq__(maybe_1)
    var_4 = maybe_1.to_validation()
    var_5 = maybe_1.ap(str_0)
    var_6 = maybe_1.to_lazy()
    var_4.map(var_4)


def test_case_19():
    bool_0 = False
    none_type_0 = None
    maybe_0 = module_1.Maybe(bool_0, none_type_0)
    bool_1 = True
    maybe_1 = module_1.Maybe(none_type_0, bool_1)
    bool_2 = maybe_0.__eq__(maybe_1)
    var_0 = maybe_0.to_box()
    maybe_0.filter(var_0)


def test_case_20():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_1.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_box()
    bool_1 = maybe_0.__eq__(maybe_0)
    var_0.to_lazy()
