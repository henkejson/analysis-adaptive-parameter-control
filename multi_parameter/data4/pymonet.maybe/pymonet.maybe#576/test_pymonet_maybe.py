# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1
import builtins as module_2


def test_case_0():
    bytes_0 = b"y\xfec\x90\x9e\x0e\xe3\xc5\xcf"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    str_0 = "K"
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.bind(none_type_0)
    var_1 = var_0.to_lazy()
    var_2 = var_1.to_validation()
    var_3 = var_2.to_box()
    maybe_1 = module_0.Maybe(str_0, bool_0)
    bool_1 = maybe_1.__eq__(maybe_1)
    var_4 = maybe_1.to_try()


def test_case_3():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.map(none_type_0)
    var_1 = maybe_0.get_or_else(var_0)
    var_2 = var_1.to_box()
    var_3 = maybe_0.to_either()
    var_4 = var_2.to_try()
    bool_1 = maybe_0.__eq__(var_4)
    maybe_1 = maybe_0.map(var_3)
    var_4.to_box()


def test_case_4():
    bool_0 = False
    int_0 = -505
    none_type_0 = None
    maybe_0 = module_0.Maybe(int_0, none_type_0)
    maybe_0.map(bool_0)


def test_case_5():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_validation()
    maybe_0.bind(var_0)


def test_case_6():
    none_type_0 = None
    str_0 = "fiXEGf20p)"
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.bind(str_0)
    var_1 = var_0.ap(none_type_0)
    var_2 = var_1.to_box()


def test_case_7():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    maybe_0.ap(none_type_0)


def test_case_8():
    int_0 = 783
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.to_either()
    generic_0 = module_1.Generic()
    maybe_1 = module_0.Maybe(generic_0, generic_0)
    var_1 = maybe_1.to_try()
    var_2 = var_0.to_try()
    var_3 = maybe_0.filter(var_0)
    var_4 = maybe_0.to_box()
    var_5 = maybe_1.filter(maybe_1)
    var_6 = var_5.to_try()


def test_case_9():
    int_0 = -2481
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    maybe_0.filter(int_0)


def test_case_10():
    bool_0 = False
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_1, bool_1)
    var_0 = maybe_0.get_or_else(bool_0)
    var_1 = maybe_0.to_either()
    var_0.to_either()


def test_case_11():
    int_0 = -726
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_validation()
    var_1.to_validation()


def test_case_12():
    int_0 = 1
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_0, none_type_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_lazy()
    var_2 = var_1.to_box()
    var_2.map(int_0)


def test_case_13():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    var_1 = maybe_0.map(var_0)
    var_2 = maybe_0.filter(var_0)
    bytes_0 = b"y\xfec\x90\x9e\x0e\xe3\xc5\xcf"
    var_3 = var_2.ap(var_0)
    bool_1 = var_3.__eq__(maybe_0)
    var_4 = var_0.filter(bool_0)
    maybe_1 = module_0.Maybe(bytes_0, bool_1)
    maybe_2 = module_0.Maybe(var_0, maybe_1)
    bool_2 = False
    maybe_3 = module_0.Maybe(bool_1, bool_2)
    var_5 = var_4.to_either()
    var_6 = maybe_0.filter(var_3)
    var_7 = maybe_3.to_either()
    maybe_4 = module_0.Maybe(var_2, var_7)
    var_8 = var_0.to_either()
    var_9 = maybe_3.to_validation()
    var_10 = maybe_3.to_lazy()
    var_11 = var_3.map(var_10)
    var_12 = var_3.to_try()
    var_13 = var_0.to_try()
    var_14 = var_8.to_box()


def test_case_14():
    str_0 = "lMW(6owD.{od5oS"
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_try()
    var_1 = var_0.bind(str_0)
    var_1.to_either()


def test_case_15():
    object_0 = module_2.object()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    maybe_0 = module_0.Maybe(list_0, bool_0)
    var_0 = maybe_0.to_try()
    bool_1 = var_0.__eq__(object_0)


def test_case_16():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_validation()


def test_case_17():
    str_0 = "\n    Perform left-to-right function composition.\n\n    :param value: argument of first applied function\n    :type value: Any\n    :param functions: list of functions to applied from left-to-right\n    :type functions: List[Function]\n    :returns: result of all functions\n    :rtype: Any\n    "
    none_type_0 = None
    maybe_0 = module_0.Maybe(str_0, none_type_0)
    var_0 = maybe_0.to_validation()


def test_case_18():
    int_0 = 0
    bool_0 = False
    maybe_0 = module_0.Maybe(int_0, bool_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(int_0, bool_1)
    var_0 = maybe_1.to_lazy()
    bool_2 = var_0.__eq__(bool_1)
    var_1 = maybe_1.to_try()
    var_2 = var_0.to_try()
    var_0.filter(var_2)


def test_case_19():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.get_or_else(var_0)
    var_2 = var_1.to_box()
    var_3 = maybe_0.to_either()
    var_4 = var_2.to_lazy()
    var_5 = var_2.to_try()
    var_6 = var_4.to_validation()
    bool_1 = maybe_0.__eq__(var_5)
    bool_2 = False
    maybe_1 = module_0.Maybe(bool_2, var_3)
    bool_3 = maybe_0.__eq__(maybe_1)
    maybe_2 = module_0.Maybe(var_2, var_6)
    var_7 = var_1.bind(var_1)


def test_case_20():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_try()
    bool_1 = True
    none_type_1 = None
    maybe_1 = module_0.Maybe(none_type_1, none_type_1)
    var_1 = var_0.get_or_else(bool_0)
    maybe_1.bind(bool_1)
