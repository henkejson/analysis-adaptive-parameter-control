# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    bool_2 = maybe_0.__eq__(bool_0)
    var_0 = maybe_0.to_try()
    maybe_1 = module_0.Maybe(bool_0, maybe_0)
    bool_3 = True
    maybe_2 = module_0.Maybe(var_0, bool_3)
    var_1 = maybe_0.to_lazy()
    var_2 = maybe_0.map(var_1)


def test_case_3():
    int_0 = -545
    str_0 = "s11[*jtC~!lk:pu"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.map(int_0)


def test_case_4():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_try()
    int_0 = -2125
    maybe_0.map(int_0)


def test_case_5():
    float_0 = 70.311
    none_type_0 = None
    str_0 = "o*45b+;OQ"
    maybe_0 = module_0.Maybe(float_0, str_0)
    var_0 = maybe_0.filter(none_type_0)
    var_1 = maybe_0.ap(none_type_0)
    var_2 = var_0.ap(float_0)
    var_3 = var_2.bind(float_0)
    var_4 = var_3.ap(float_0)
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    var_5 = var_1.to_lazy()
    maybe_1 = module_0.Maybe(dict_0, dict_0)


def test_case_6():
    bool_0 = True
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_either()
    maybe_0.bind(var_0)


def test_case_7():
    int_0 = -1938
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.ap(int_0)
    var_1 = var_0.to_try()
    var_2 = maybe_0.filter(var_1)
    var_3 = maybe_0.filter(bool_0)
    var_4 = maybe_0.to_lazy()
    maybe_1 = module_0.Maybe(var_0, maybe_0)
    var_5 = var_3.get_or_else(var_4)


def test_case_8():
    none_type_0 = None
    none_type_1 = None
    maybe_0 = module_0.Maybe(none_type_1, none_type_1)
    maybe_0.ap(none_type_0)


def test_case_9():
    int_0 = 298
    int_1 = -1938
    maybe_0 = module_0.Maybe(int_1, int_0)
    var_0 = maybe_0.filter(int_0)
    var_1 = var_0.to_try()


def test_case_10():
    int_0 = -2230
    int_1 = -1938
    bool_0 = False
    maybe_0 = module_0.Maybe(int_1, bool_0)
    maybe_0.filter(int_0)


def test_case_11():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.get_or_else(maybe_0)
    maybe_1 = module_0.Maybe(maybe_0, none_type_0)
    var_1 = maybe_1.to_either()
    var_2 = var_1.to_try()
    var_3 = var_1.to_try()
    var_1.get_or_else(var_3)


def test_case_12():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.bind(var_0)
    var_2 = maybe_1.get_or_else(none_type_0)
    var_2.to_either()


def test_case_13():
    float_0 = 70.311
    none_type_0 = None
    str_0 = "o*45b+;OQ"
    maybe_0 = module_0.Maybe(float_0, str_0)
    var_0 = maybe_0.filter(none_type_0)
    var_1 = maybe_0.ap(none_type_0)
    var_2 = var_1.to_either()
    var_3 = var_0.ap(float_0)
    var_4 = var_3.bind(float_0)
    var_5 = var_4.ap(float_0)
    bool_0 = var_1.__eq__(var_3)
    var_6 = var_5.to_box()
    var_7 = var_1.to_lazy()


def test_case_14():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = module_0.Maybe(maybe_0, bool_0)
    var_1 = var_0.to_either()


def test_case_15():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_box()


def test_case_16():
    str_0 = '\x0c/Qmt.|1{$Fs|jX"f|hy'
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.map(var_0)


def test_case_17():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_either()


def test_case_18():
    list_0 = []
    complex_0 = -1698.83 - 620j
    maybe_0 = module_0.Maybe(list_0, complex_0)
    var_0 = maybe_0.to_try()


def test_case_19():
    bytes_0 = b"\xc5-B*jE\xf6\x93\x94X\xa4\xc8ozZ\xdf"
    tuple_0 = (bytes_0,)
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_validation()
    var_0.get_or_else(tuple_0)


def test_case_20():
    str_0 = "\n        Transform Validation to Box.\n\n        :returns: Box with Validation value\n        :rtype: Box[A]\n        "
    set_0 = {str_0, str_0, str_0}
    bool_0 = False
    maybe_0 = module_0.Maybe(set_0, bool_0)
    var_0 = maybe_0.to_validation()
    maybe_0.bind(var_0)


def test_case_21():
    float_0 = -2420.83
    bool_0 = False
    bytes_0 = b"8\xc43\xc5\x02)"
    maybe_0 = module_0.Maybe(bool_0, bytes_0)
    var_0 = maybe_0.bind(bool_0)
    var_1 = var_0.filter(float_0)
    var_2 = var_1.to_either()
    none_type_0 = None
    var_3 = var_0.to_lazy()
    var_4 = var_3.to_either()
    bytes_1 = b"\x16\xb6`/\x01"
    bool_1 = True
    maybe_1 = module_0.Maybe(float_0, bool_1)
    var_5 = var_0.to_box()
    var_6 = maybe_1.filter(bytes_1)
    bool_2 = False
    maybe_2 = module_0.Maybe(none_type_0, bool_2)
    var_3.to_lazy()


def test_case_22():
    float_0 = 1794.0
    maybe_0 = module_0.Maybe(float_0, float_0)
    var_0 = maybe_0.ap(maybe_0)
    var_1 = maybe_0.filter(var_0)
    none_type_0 = None
    var_2 = var_0.ap(none_type_0)
    var_3 = maybe_0.to_lazy()
    var_4 = var_2.to_box()
    var_5 = maybe_0.bind(var_3)
    bool_0 = var_2.__eq__(maybe_0)
    bool_1 = True
    maybe_1 = module_0.Maybe(var_2, bool_1)
    var_6 = var_3.to_try()
    var_7 = var_5.to_box()
    var_8 = maybe_0.to_lazy()
    var_9 = var_8.bind(var_7)
    var_10 = var_1.to_validation()
    var_11 = var_2.to_box()
    var_12 = var_11.to_validation()
    var_3.to_lazy()


def test_case_23():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.to_try()
    maybe_0.filter(var_1)
