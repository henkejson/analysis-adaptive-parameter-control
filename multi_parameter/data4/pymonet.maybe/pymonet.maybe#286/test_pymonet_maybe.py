# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1


def test_case_0():
    int_0 = -1719
    maybe_0 = module_0.Maybe(int_0, int_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.ap(bool_0)
    var_1 = maybe_0.filter(maybe_0)
    var_2 = var_1.map(var_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_3 = maybe_1.to_either()
    bool_1 = maybe_0.__eq__(var_0)
    maybe_1.filter(bool_1)


def test_case_3():
    none_type_0 = None
    bool_0 = False
    bool_1 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_1)
    bool_2 = True
    var_0 = maybe_0.ap(bool_2)
    var_1 = maybe_0.bind(bool_0)
    var_2 = maybe_0.to_try()
    bool_3 = var_1.__eq__(var_2)
    var_3 = maybe_0.to_either()
    maybe_1 = module_0.Maybe(none_type_0, bool_0)


def test_case_4():
    str_0 = "fcE\rbP]<$&Se&"
    int_0 = 1420
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.map(str_0)


def test_case_5():
    list_0 = []
    int_0 = 0
    maybe_0 = module_0.Maybe(int_0, int_0)
    maybe_0.map(list_0)


def test_case_6():
    str_0 = "\n        Transform Validation to Either.\n\n        :returns: Right monad with previous value when Validation has no errors, in other case Left with errors list\n        :rtype: Right[A] | Left[E]\n        "
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_box()
    maybe_1 = module_0.Maybe(str_0, str_0)
    var_1 = maybe_1.to_either()
    var_2 = maybe_1.to_either()
    var_3 = var_2.ap(var_2)
    var_4 = var_3.ap(maybe_1)
    var_5 = maybe_1.bind(str_0)


def test_case_7():
    str_0 = "&L@]7>"
    dict_0 = {str_0: str_0}
    maybe_0 = module_0.Maybe(dict_0, str_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_1.to_validation()
    maybe_1.bind(var_0)


def test_case_8():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.ap(bool_0)
    var_1 = maybe_0.filter(maybe_0)
    var_2 = var_1.map(var_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_3 = maybe_1.to_either()
    maybe_1.filter(var_0)


def test_case_9():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    none_type_0 = None
    maybe_0.ap(none_type_0)


def test_case_10():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.filter(maybe_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1.filter(bool_0)


def test_case_11():
    str_0 = "sh:>0wE\x0c;"
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    maybe_0.filter(maybe_0)


def test_case_12():
    none_type_0 = None
    str_0 = "\n        :param semigroup: other semigroup to concat\n        :type semigroup: Map[B]\n        :returns: new Map with concated all values\n        :rtype: Map[A]\n        "
    complex_0 = -2431.5 + 760.15028j
    bool_0 = True
    maybe_0 = module_0.Maybe(complex_0, bool_0)
    var_0 = maybe_0.get_or_else(str_0)
    var_0.filter(none_type_0)


def test_case_13():
    generic_0 = module_1.Generic()
    list_0 = []
    bool_0 = False
    maybe_0 = module_0.Maybe(list_0, bool_0)
    var_0 = maybe_0.get_or_else(generic_0)


def test_case_14():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.filter(maybe_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_1 = maybe_1.to_either()
    maybe_1.filter(bool_0)


def test_case_15():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_either()
    tuple_0 = ()
    float_0 = -994.774
    maybe_1 = module_0.Maybe(float_0, float_0)
    var_1 = maybe_1.to_box()
    var_1.filter(tuple_0)


def test_case_16():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = maybe_0.__eq__(bool_0)
    var_0 = maybe_0.ap(bool_0)
    var_1 = maybe_0.filter(maybe_0)
    var_2 = var_1.ap(bool_1)
    var_3 = var_1.map(var_0)
    maybe_1 = module_0.Maybe(var_2, bool_1)
    var_4 = var_1.map(maybe_1)
    var_5 = var_4.to_lazy()
    none_type_0 = None
    maybe_2 = module_0.Maybe(none_type_0, none_type_0)
    var_6 = maybe_2.to_either()
    var_7 = var_2.to_lazy()
    maybe_2.filter(bool_0)


def test_case_17():
    list_0 = []
    maybe_0 = module_0.Maybe(list_0, list_0)
    var_0 = maybe_0.to_lazy()
    bool_0 = True
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    bool_1 = maybe_1.__eq__(bool_0)
    var_1 = maybe_1.filter(maybe_1)
    var_2 = var_1.ap(bool_1)
    var_3 = var_1.map(bool_0)
    var_4 = var_1.map(maybe_0)
    var_5 = var_3.get_or_else(var_0)
    str_0 = "iIk^I"
    maybe_2 = module_0.Maybe(str_0, str_0)
    var_6 = maybe_2.to_either()
    var_7 = maybe_2.ap(str_0)
    none_type_0 = None
    maybe_3 = module_0.Maybe(none_type_0, none_type_0)
    var_8 = maybe_2.to_lazy()
    var_9 = maybe_2.bind(var_8)
    bool_2 = maybe_1.__eq__(maybe_1)
    maybe_3.filter(bool_2)


def test_case_18():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_try()
    tuple_0 = ()
    set_0 = set()
    none_type_1 = None
    maybe_1 = module_0.Maybe(set_0, none_type_1)
    var_1 = maybe_1.get_or_else(tuple_0)
    var_1.to_validation()


def test_case_19():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.filter(maybe_0)
    var_1 = var_0.map(bool_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_2 = maybe_1.to_either()
    var_3 = var_0.to_validation()
    maybe_1.filter(var_3)


def test_case_20():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_either()
    tuple_0 = ()
    maybe_1 = module_0.Maybe(tuple_0, tuple_0)
    var_1 = maybe_1.to_validation()
    var_2 = var_1.to_box()
    var_3 = var_2.to_try()
    var_3.map(var_0)


def test_case_21():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    maybe_0 = module_0.Maybe(none_type_0, list_0)
    var_0 = maybe_0.get_or_else(none_type_0)
    var_1 = maybe_0.ap(list_0)
    var_2 = maybe_0.map(var_1)
    var_3 = maybe_0.to_box()
    var_4 = var_1.to_box()
    bool_0 = True
    bool_1 = False
    maybe_1 = module_0.Maybe(bool_0, bool_1)
    var_5 = var_2.map(var_4)
    var_6 = maybe_1.to_lazy()
    var_7 = var_6.to_try()
    var_7.to_validation()


def test_case_22():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = maybe_0.__eq__(bool_0)
    var_0 = maybe_0.ap(bool_0)
    var_1 = maybe_0.filter(maybe_0)
    var_2 = var_1.map(var_0)
    str_0 = "iIk^I"
    maybe_1 = module_0.Maybe(str_0, str_0)
    var_3 = maybe_1.to_either()
    var_4 = maybe_1.to_box()
    var_5 = maybe_1.ap(var_4)
    none_type_0 = None
    maybe_2 = module_0.Maybe(none_type_0, none_type_0)
    var_6 = maybe_2.to_either()
    var_7 = maybe_1.to_lazy()
    var_8 = var_6.to_lazy()
    var_9 = var_3.bind(str_0)
    bool_2 = maybe_2.__eq__(maybe_2)
    maybe_2.filter(var_3)


def test_case_23():
    str_0 = "i}xN?J"
    maybe_0 = module_0.Maybe(str_0, str_0)
    bool_0 = maybe_0.__eq__(str_0)
    var_0 = maybe_0.bind(bool_0)
    var_1 = var_0.map(str_0)
    var_2 = var_1.to_box()
    var_3 = maybe_0.ap(maybe_0)
    var_4 = maybe_0.bind(str_0)
    var_5 = var_3.get_or_else(var_3)
    bool_1 = var_3.__eq__(str_0)
    var_6 = var_4.to_validation()
    var_7 = maybe_0.to_try()
    var_8 = var_4.to_box()
    var_9 = var_4.to_either()
    var_10 = maybe_0.to_try()
    var_11 = maybe_0.to_lazy()
    var_12 = var_0.filter(var_9)
    var_13 = maybe_0.to_try()
    var_14 = maybe_0.to_lazy()
    var_15 = var_13.bind(var_14)
    var_16 = var_3.to_validation()
    var_17 = var_13.filter(var_10)
    var_18 = var_14.to_validation()
    var_13.ap(maybe_0)


def test_case_24():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = maybe_0.__eq__(bool_0)
    var_0 = maybe_0.ap(bool_1)
    var_1 = maybe_0.filter(maybe_0)
    var_2 = var_1.ap(var_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(bool_0, maybe_0)
    var_3 = maybe_0.ap(none_type_0)
    var_4 = var_2.filter(maybe_1)
    bool_2 = maybe_1.__eq__(var_1)
    var_5 = var_4.map(var_3)
    var_6 = var_4.to_box()
    var_7 = var_6.to_lazy()
    var_8 = var_7.map(var_3)
    var_9 = maybe_1.ap(bool_1)
    var_10 = var_6.to_either()
    var_11 = var_5.to_validation()
    var_11.get_or_else(var_2)
