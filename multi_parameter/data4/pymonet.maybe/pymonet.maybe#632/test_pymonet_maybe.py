# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import builtins as module_1


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    int_0 = -1193
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.to_lazy()
    bool_1 = maybe_0.__eq__(maybe_0)
    var_1 = maybe_0.to_either()
    var_2 = var_0.to_box()
    var_3 = maybe_0.ap(bool_1)
    maybe_1 = module_0.Maybe(var_1, bool_0)
    var_4 = var_1.bind(var_1)
    var_4.get_or_else(maybe_0)


def test_case_3():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = maybe_0.__eq__(bool_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.ap(var_0)
    var_2 = var_1.to_either()
    var_3 = var_1.to_either()
    var_4 = var_1.to_validation()
    var_5 = maybe_0.to_lazy()
    var_6 = var_1.map(var_2)


def test_case_4():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    bool_1 = False
    maybe_2 = module_0.Maybe(none_type_0, bool_1)
    maybe_1.map(none_type_0)


def test_case_5():
    int_0 = -1193
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.to_lazy()
    bool_1 = maybe_0.__eq__(maybe_0)
    var_1 = maybe_0.to_either()
    var_2 = maybe_0.to_box()
    var_3 = maybe_0.ap(var_0)
    maybe_1 = module_0.Maybe(var_3, int_0)
    var_4 = maybe_0.bind(var_0)
    complex_0 = 1546.220076 - 2413.9318j
    var_5 = var_3.get_or_else(complex_0)
    bool_2 = var_3.__eq__(maybe_1)


def test_case_6():
    none_type_0 = None
    str_0 = "'&iK6]\x0bIlSZ`f~I"
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.ap(none_type_0)


def test_case_7():
    tuple_0 = ()
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    maybe_0.ap(tuple_0)


def test_case_8():
    bool_0 = True
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    maybe_1 = module_0.Maybe(maybe_0, bool_0)
    var_0 = maybe_1.filter(maybe_1)
    maybe_0.filter(bool_1)


def test_case_9():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.filter(none_type_0)


def test_case_10():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.get_or_else(none_type_0)
    var_1 = maybe_0.to_box()
    var_2 = maybe_0.get_or_else(none_type_0)


def test_case_11():
    dict_0 = {}
    bool_0 = False
    maybe_0 = module_0.Maybe(dict_0, bool_0)
    str_0 = "\n        Transform Lazy into not empty Maybe with constructor_fn result.\n\n        :returns: not empty Maybe monad with constructor_fn result\n        :rtype: Maybe[A]\n        "
    bool_1 = False
    var_0 = maybe_0.get_or_else(str_0)
    bool_2 = var_0.__eq__(str_0)
    maybe_1 = module_0.Maybe(str_0, bool_1)


def test_case_12():
    bool_0 = False
    bytes_0 = b"\x88#\xc7\xb3/\x8d\xc92\xd2"
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.to_either()
    var_0.filter(bool_0)


def test_case_13():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    none_type_0 = None
    bool_0 = False
    str_0 = "\n    Perform right-to-left function composition.\n\n    :param value: argument of first applied function\n    :type value: Any\n    :param functions: list of functions to applied from right-to-left\n    :type functions: List[Function]\n    :returns: result of all functions\n    :rtype: Any\n    "
    dict_1 = {bool_0: bool_0, bool_0: bool_0, bool_0: str_0}
    maybe_0 = module_0.Maybe(dict_1, bool_0)
    var_0 = maybe_0.to_box()
    var_0.get_or_else(none_type_0)


def test_case_14():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()


def test_case_15():
    bool_0 = True
    bool_1 = False
    bool_2 = True
    maybe_0 = module_0.Maybe(bool_1, bool_2)
    var_0 = maybe_0.to_try()
    maybe_1 = module_0.Maybe(var_0, var_0)
    var_1 = maybe_1.to_validation()
    var_2 = var_1.to_box()
    var_2.bind(bool_0)


def test_case_16():
    list_0 = []
    bool_0 = False
    bool_1 = False
    maybe_0 = module_0.Maybe(list_0, bool_1)
    var_0 = maybe_0.to_try()
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    bool_2 = False
    maybe_1 = module_0.Maybe(dict_0, bool_2)
    var_1 = maybe_1.to_validation()
    var_2 = var_1.to_try()
    dict_0.bind(var_2)


def test_case_17():
    complex_0 = 2875.8 - 1627.79j
    maybe_0 = module_0.Maybe(complex_0, complex_0)
    var_0 = maybe_0.to_validation()
    var_1 = var_0.to_try()
    var_1.to_validation()


def test_case_18():
    set_0 = set()
    maybe_0 = module_0.Maybe(set_0, set_0)
    var_0 = maybe_0.to_validation()
    var_0.bind(set_0)


def test_case_19():
    int_0 = -1193
    bool_0 = False
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.to_lazy()
    bool_1 = maybe_0.__eq__(maybe_0)
    var_1 = var_0.to_box()
    var_2 = var_0.to_box()
    maybe_1 = module_0.Maybe(var_1, maybe_0)
    none_type_0 = None
    maybe_2 = module_0.Maybe(none_type_0, var_1)
    var_3 = maybe_2.to_try()
    var_3.to_try()


def test_case_20():
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    none_type_1 = None
    var_0 = maybe_0.to_box()
    maybe_1 = module_0.Maybe(bool_0, none_type_0)
    var_1 = maybe_0.to_validation()
    var_2 = maybe_1.to_try()
    bool_1 = var_1.__eq__(maybe_1)
    var_3 = var_1.to_lazy()
    maybe_2 = module_0.Maybe(maybe_0, none_type_1)
    var_4 = maybe_0.map(maybe_1)
    maybe_2.bind(maybe_0)
