# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1


def test_case_0():
    bytes_0 = b"\xd3\xfa:\xd4[\xd1\xd8k*yI\x1fS+\x9f"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_box()


def test_case_3():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    int_0 = 397
    bool_1 = maybe_0.__eq__(int_0)
    maybe_0.ap(none_type_0)


def test_case_4():
    none_type_0 = None
    float_0 = 984.447194
    bool_0 = True
    maybe_0 = module_0.Maybe(float_0, bool_0)
    var_0 = maybe_0.map(none_type_0)
    var_1 = var_0.to_validation()
    var_1.to_validation()


def test_case_5():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    maybe_0.ap(maybe_0)


def test_case_6():
    none_type_0 = None
    bool_0 = False
    bool_1 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_1)
    var_0 = maybe_0.ap(none_type_0)
    var_1 = var_0.bind(var_0)
    var_2 = var_1.filter(none_type_0)
    var_3 = maybe_0.to_try()
    maybe_1 = module_0.Maybe(var_1, bool_0)
    var_4 = var_2.to_lazy()
    maybe_1.filter(var_3)


def test_case_7():
    bool_0 = True
    bool_1 = True
    bool_2 = False
    maybe_0 = module_0.Maybe(bool_1, bool_2)
    var_0 = maybe_0.get_or_else(bool_0)
    maybe_0.bind(var_0)


def test_case_8():
    bool_0 = True
    bytes_0 = b"\x8b\xeeZ\xa1_<\x83\x96\x9azW\xf7\xff\x0b\xce;\xdf\xcf\xda\x19"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.ap(bool_0)
    var_1 = var_0.to_validation()
    var_2 = var_1.to_box()
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_3 = maybe_1.to_either()
    var_4 = maybe_1.to_lazy()
    maybe_2 = module_0.Maybe(none_type_0, none_type_0)


def test_case_9():
    none_type_0 = None
    bool_0 = False
    bool_1 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_1)
    var_0 = maybe_0.get_or_else(maybe_0)
    var_1 = var_0.filter(none_type_0)
    maybe_1 = module_0.Maybe(maybe_0, bool_0)
    var_2 = var_1.to_lazy()
    maybe_1.filter(var_0)


def test_case_10():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.filter(maybe_0)


def test_case_11():
    none_type_0 = None
    complex_0 = -1436.02 + 110.21j
    none_type_1 = None
    maybe_0 = module_0.Maybe(complex_0, none_type_1)
    var_0 = maybe_0.get_or_else(none_type_0)
    var_0.to_box()


def test_case_12():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_either()


def test_case_13():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_either()
    none_type_1 = None
    maybe_1 = module_0.Maybe(none_type_1, none_type_1)
    maybe_1.filter(var_0)


def test_case_14():
    complex_0 = -3124.950175 - 984.13j
    bytes_0 = b"\x87\xe5"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_box()
    var_0.map(complex_0)


def test_case_15():
    str_0 = "4"
    list_0 = []
    maybe_0 = module_0.Maybe(str_0, list_0)
    var_0 = maybe_0.to_lazy()
    generic_0 = module_1.Generic()
    bool_0 = False
    maybe_1 = module_0.Maybe(generic_0, bool_0)
    var_1 = maybe_1.to_lazy()
    var_2 = maybe_1.to_try()


def test_case_16():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.to_validation()
    var_0.get_or_else(var_0)


def test_case_17():
    none_type_0 = None
    bool_0 = False
    bool_1 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_1)
    var_0 = maybe_0.ap(none_type_0)
    var_1 = maybe_0.ap(bool_0)
    var_2 = var_0.to_validation()
    var_3 = var_1.bind(var_0)
    var_4 = var_3.to_lazy()
    var_5 = var_1.filter(none_type_0)
    var_6 = var_1.filter(var_5)
    var_7 = var_4.to_try()
    bool_2 = var_5.__eq__(var_1)
    var_8 = maybe_0.to_validation()
    var_9 = var_1.filter(var_1)
    maybe_1 = module_0.Maybe(var_3, bool_0)
    var_10 = var_1.to_try()
    var_11 = var_5.to_lazy()
    maybe_1.filter(var_9)


def test_case_18():
    none_type_0 = None
    bool_0 = False
    bool_1 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_1)
    var_0 = maybe_0.get_or_else(maybe_0)
    var_1 = var_0.filter(none_type_0)
    bool_2 = var_1.__eq__(var_0)
    maybe_1 = module_0.Maybe(maybe_0, bool_0)
    maybe_1.filter(var_0)


def test_case_19():
    str_0 = "9l*A7.1!e7"
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.filter(var_0)
    bool_1 = var_0.__eq__(var_0)
    var_2 = var_1.map(var_0)
    bool_2 = maybe_0.__eq__(maybe_0)
    var_3 = var_0.to_lazy()
    var_4 = var_1.to_box()
    var_5 = var_0.map(var_1)
    none_type_0 = None
    var_6 = var_1.to_lazy()
    bool_3 = var_1.to_try()
    var_7 = var_1.filter(var_6)
    var_8 = module_0.Maybe(maybe_0, var_3)
    bool_4 = maybe_0.__eq__(var_8)
    var_9 = maybe_0.get_or_else(none_type_0)
    var_10 = var_8.get_or_else(var_9)
    var_6.to_lazy()


def test_case_20():
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_try()
    var_2 = var_0.to_validation()
    var_2.bind(var_0)
