# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1


def test_case_0():
    float_0 = -1106.3
    maybe_0 = module_0.Maybe(float_0, float_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    generic_0 = module_1.Generic()
    bytes_0 = b""
    none_type_0 = None
    maybe_0 = module_0.Maybe(bytes_0, none_type_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    maybe_0.ap(maybe_0)


def test_case_3():
    int_0 = 738
    maybe_0 = module_0.Maybe(int_0, int_0)
    bool_0 = maybe_0.__eq__(int_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_try()
    var_1 = var_0.get_or_else(int_0)
    var_1.to_either()


def test_case_4():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.map(bool_0)
    var_1 = var_0.to_validation()
    var_2 = maybe_0.to_validation()
    var_3 = var_1.to_box()
    var_4 = maybe_0.filter(var_1)
    var_5 = var_0.filter(var_0)
    var_6 = var_2.to_either()
    var_7 = var_4.bind(var_3)
    generic_0 = module_1.Generic()
    var_8 = var_3.to_either()


def test_case_5():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(bool_0, none_type_0)
    var_0 = maybe_1.to_try()
    var_1 = maybe_0.to_lazy()
    set_0 = {none_type_0}
    bool_1 = maybe_0.__eq__(set_0)
    var_2 = maybe_1.to_validation()
    maybe_1.map(var_1)


def test_case_6():
    bytes_0 = b"g\xaf\x9a\x06\xcc"
    tuple_0 = (bytes_0, bytes_0, bytes_0)
    str_0 = "6%8?"
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.bind(tuple_0)
    var_1 = var_0.to_try()
    var_1.to_validation()


def test_case_7():
    bool_0 = True
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.get_or_else(bool_0)
    var_1 = maybe_0.get_or_else(bool_0)
    maybe_0.bind(bool_1)


def test_case_8():
    bytes_0 = b"\xf6\x93vI\x1a\xd9t\xadVW\x87<\n"
    str_0 = "b#U4e.&3,#NFtf "
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.ap(bytes_0)


def test_case_9():
    bytes_0 = b"(,\xc3%\x05S\xa8\xbe\x06\xc3"
    bytes_1 = b""
    bool_0 = False
    maybe_0 = module_0.Maybe(bytes_1, bool_0)
    bool_1 = maybe_0.__eq__(bytes_0)
    maybe_0.ap(bytes_0)


def test_case_10():
    str_0 = "Twh'/8t~E9V^~'\t1`^j"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.get_or_else(str_0)
    var_1 = maybe_0.filter(str_0)
    var_2 = maybe_0.ap(maybe_0)
    var_3 = maybe_0.ap(var_1)
    var_4 = var_2.to_box()
    var_5 = maybe_0.to_try()


def test_case_11():
    complex_0 = -2409 - 2441.08152j
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.filter(complex_0)


def test_case_12():
    complex_0 = 3569.426 - 65.79j
    maybe_0 = module_0.Maybe(complex_0, complex_0)
    none_type_0 = None
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_try()
    var_2 = maybe_0.get_or_else(none_type_0)
    var_3 = maybe_0.to_lazy()
    var_4 = maybe_0.to_box()


def test_case_13():
    bytes_0 = b"r\x05\xd9\x1b"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_either()
    var_0.to_either()


def test_case_14():
    float_0 = -129.09992
    bool_0 = False
    maybe_0 = module_0.Maybe(float_0, bool_0)
    var_0 = maybe_0.to_either()
    bool_1 = False
    maybe_1 = module_0.Maybe(var_0, bool_1)


def test_case_15():
    str_0 = "\x0b_4}56=N?ZMQtJ?4]ubg"
    set_0 = set()
    bool_0 = True
    maybe_0 = module_0.Maybe(set_0, bool_0)
    var_0 = maybe_0.to_box()
    var_0.get_or_else(str_0)


def test_case_16():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_box()
    var_0.to_box()


def test_case_17():
    bool_0 = True
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_try()


def test_case_18():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.get_or_else(bool_0)
    var_1 = maybe_0.map(bool_0)
    var_2 = maybe_0.ap(maybe_0)
    var_3 = var_1.map(var_2)
    var_4 = var_1.to_lazy()
    var_5 = maybe_0.to_lazy()
    var_6 = var_1.to_validation()
    var_7 = maybe_0.to_validation()
    bool_1 = var_6.__eq__(var_6)
    var_8 = maybe_0.to_lazy()
    var_9 = maybe_0.bind(var_2)
    bool_2 = var_1.__eq__(var_8)
    var_10 = var_9.to_either()
    maybe_1 = module_0.Maybe(var_0, bool_2)
    bool_3 = var_7.__eq__(var_3)
    var_11 = var_2.to_lazy()
    generic_0 = module_1.Generic()
    var_12 = var_3.filter(var_7)
    maybe_2 = module_0.Maybe(var_8, var_4)
    var_13 = var_1.bind(var_11)
    var_14 = var_2.bind(var_11)
    var_15 = var_11.to_try()
    var_5.filter(maybe_0)


def test_case_19():
    none_type_0 = None
    bytes_0 = b""
    maybe_0 = module_0.Maybe(bytes_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_box()
    var_2 = var_1.to_validation()
    var_2.to_validation()


def test_case_20():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.get_or_else(bool_0)
    var_1 = maybe_0.map(bool_0)
    var_2 = var_1.to_either()
    set_0 = {bool_0}
    var_3 = maybe_0.ap(set_0)
    var_4 = var_1.map(var_3)
    var_5 = var_1.to_lazy()
    var_6 = maybe_0.to_lazy()
    var_7 = var_1.to_validation()
    var_8 = module_0.Maybe(maybe_0, var_7)
    bool_1 = var_7.__eq__(var_7)
    var_9 = maybe_0.to_lazy()
    var_10 = maybe_0.bind(var_3)
    bool_2 = var_1.__eq__(var_9)
    var_11 = var_10.to_either()
    maybe_1 = module_0.Maybe(var_0, bool_2)
    bool_3 = var_8.__eq__(var_4)
    bool_4 = False
    var_12 = var_3.bind(bool_4)
    var_13 = var_3.to_lazy()
    var_14 = var_4.to_box()
    generic_0 = module_1.Generic()
    var_15 = maybe_1.to_lazy()
    var_16 = var_4.filter(var_8)
    maybe_2 = module_0.Maybe(var_9, var_5)
    var_17 = var_1.bind(var_13)
    var_18 = var_3.bind(var_13)
    maybe_1.filter(var_17)
