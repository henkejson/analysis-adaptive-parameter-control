# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    float_0 = -1322.4
    maybe_0 = module_0.Maybe(float_0, float_0)


def test_case_1():
    tuple_0 = ()
    maybe_0 = module_0.Maybe(tuple_0, tuple_0)


def test_case_2():
    dict_0 = {}
    maybe_0 = module_0.Maybe(dict_0, dict_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    maybe_1 = module_0.Maybe(bool_0, dict_0)
    var_0 = maybe_0.to_either()
    var_0.filter(maybe_0)


def test_case_3():
    str_0 = "sL4]Zd:AY\x0c.)N|lV3~#"
    set_0 = {str_0, str_0}
    bool_0 = False
    bool_1 = True
    maybe_0 = module_0.Maybe(set_0, bool_1)
    var_0 = maybe_0.filter(bool_0)
    maybe_1 = module_0.Maybe(set_0, bool_0)
    bool_2 = maybe_1.__eq__(str_0)
    maybe_1.filter(bool_0)


def test_case_4():
    complex_0 = 963.67276 + 3203.5717j
    maybe_0 = module_0.Maybe(complex_0, complex_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.ap(maybe_0)
    var_2 = maybe_0.to_either()
    var_3 = maybe_0.filter(var_2)
    var_4 = var_2.to_lazy()
    var_5 = var_2.to_box()
    var_6 = var_0.bind(var_4)
    var_7 = maybe_0.bind(maybe_0)
    var_8 = var_2.to_try()
    var_9 = var_8.bind(var_1)
    maybe_1 = module_0.Maybe(var_0, var_9)
    var_10 = var_3.map(var_4)
    var_11 = var_1.to_try()
    var_9.ap(var_11)


def test_case_5():
    set_0 = set()
    maybe_0 = module_0.Maybe(set_0, set_0)
    var_0 = maybe_0.to_try()
    maybe_0.map(var_0)


def test_case_6():
    complex_0 = 963.67276 + 3203.5717j
    maybe_0 = module_0.Maybe(complex_0, complex_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.ap(maybe_0)
    var_2 = maybe_0.to_either()
    var_3 = maybe_0.filter(var_2)
    var_4 = var_2.to_lazy()
    var_5 = var_1.bind(var_2)
    var_2.get_or_else(complex_0)


def test_case_7():
    tuple_0 = ()
    float_0 = -4333.05
    bool_0 = False
    maybe_0 = module_0.Maybe(tuple_0, bool_0)
    maybe_0.bind(float_0)


def test_case_8():
    str_0 = "Left[T]"
    str_1 = "\n    The Either type represents values with two possibilities: B value of type Either[A, B] is either Left[A or Right[B]\n    But not both in the same time.\n    "
    str_2 = "`\\qz^wacp>_`p+/lZ"
    list_0 = [str_1, str_2, str_0]
    bool_0 = False
    maybe_0 = module_0.Maybe(list_0, bool_0)
    maybe_0.ap(str_2)


def test_case_9():
    str_0 = "sL4]Zd:AY\x0c.)N|lV3~#"
    set_0 = {str_0, str_0}
    bool_0 = False
    maybe_0 = module_0.Maybe(set_0, set_0)
    var_0 = maybe_0.filter(bool_0)
    maybe_1 = module_0.Maybe(set_0, bool_0)
    maybe_1.filter(bool_0)


def test_case_10():
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.get_or_else(none_type_0)
    var_0.to_either()


def test_case_11():
    int_0 = -1352
    none_type_0 = None
    maybe_0 = module_0.Maybe(int_0, none_type_0)
    var_0 = maybe_0.get_or_else(none_type_0)
    maybe_0.bind(var_0)


def test_case_12():
    tuple_0 = ()
    str_0 = "`9%'l,J+Jb&"
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_box()
    var_0.ap(tuple_0)


def test_case_13():
    dict_0 = {}
    maybe_0 = module_0.Maybe(dict_0, dict_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    maybe_1 = maybe_0.to_box()
    var_0 = maybe_0.to_either()
    var_0.filter(maybe_0)


def test_case_14():
    str_0 = "sL4]Zd:AY\x0c.)N|lV3~#"
    set_0 = {str_0, str_0}
    bool_0 = False
    bool_1 = True
    maybe_0 = module_0.Maybe(set_0, bool_1)
    var_0 = maybe_0.filter(bool_0)
    var_1 = var_0.to_lazy()
    maybe_1 = module_0.Maybe(set_0, bool_0)
    bool_2 = maybe_1.__eq__(str_0)
    maybe_1.filter(bool_0)


def test_case_15():
    str_0 = "Q*3N"
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_validation()
    bool_1 = var_0.__eq__(bool_0)
    var_1 = maybe_0.to_lazy()
    var_2 = maybe_0.to_try()
    var_2.bind(var_2)


def test_case_16():
    str_0 = "-mg25 "
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_0, none_type_0)
    var_0 = maybe_0.to_box()
    none_type_1 = None
    bool_1 = True
    maybe_1 = module_0.Maybe(none_type_1, bool_1)
    var_1 = maybe_1.bind(var_0)
    maybe_2 = module_0.Maybe(str_0, bool_0)
    maybe_3 = module_0.Maybe(str_0, str_0)
    var_2 = maybe_3.filter(str_0)
    var_3 = var_2.get_or_else(str_0)
    maybe_4 = module_0.Maybe(str_0, str_0)
    var_4 = maybe_4.to_try()
    var_5 = var_4.get_or_else(var_4)


def test_case_17():
    bytes_0 = b"\xa8\xc4\x85\r\xc0Q"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.to_validation()
    var_2 = var_1.to_lazy()
    var_1.get_or_else(maybe_0)


def test_case_18():
    bool_0 = True
    dict_0 = {}
    tuple_0 = (bool_0, dict_0)
    none_type_0 = None
    bool_1 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_1)
    var_0 = maybe_0.to_validation()
    bool_2 = var_0.__eq__(tuple_0)


def test_case_19():
    int_0 = 1451
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    tuple_0 = ()
    bool_1 = tuple_0.__eq__(int_0)
    var_0 = maybe_0.get_or_else(tuple_0)
    var_1 = maybe_0.to_lazy()
    var_2 = maybe_0.to_try()
    var_3 = var_1.to_either()
    var_2.ap(bool_1)


def test_case_20():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.bind(bool_0)
    var_1 = maybe_0.filter(maybe_0)
    var_2 = var_1.to_try()
    var_3 = var_1.map(var_2)
    var_4 = var_2.map(bool_0)
    var_5 = var_2.bind(bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    var_6 = var_1.get_or_else(var_2)
    var_7 = maybe_0.ap(var_2)
    var_8 = var_3.to_try()
    var_9 = maybe_0.to_try()
    var_10 = var_5.bind(var_2)
    var_2.to_lazy()


def test_case_21():
    bytes_0 = b"B\xbd\xe3Ye\xa0\xd9\xab\x16@W"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.ap(bytes_0)
    var_1 = var_0.bind(var_0)
    var_2 = var_0.to_lazy()
    var_3 = var_0.bind(bytes_0)
    bool_0 = var_3.__eq__(maybe_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(var_2, bool_1)
    var_4 = maybe_1.to_either()
    var_2.filter(maybe_0)


def test_case_22():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    int_0 = -2149
    var_0 = maybe_0.to_lazy()
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    bool_0 = False
    maybe_1 = module_0.Maybe(int_0, bool_0)
    var_1 = maybe_1.to_validation()
    none_type_1 = None
    maybe_2 = module_0.Maybe(none_type_1, int_0)
    var_2 = var_0.to_try()
    var_3 = maybe_2.to_try()
    var_3.ap(dict_0)
