# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.to_lazy()


def test_case_3():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.to_box()
    maybe_1 = module_0.Maybe(none_type_0, var_0)
    bool_0 = maybe_1.__eq__(var_0)
    var_1.bind(var_1)


def test_case_4():
    int_0 = 2431
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.ap(maybe_0)
    bool_0 = True
    maybe_1 = module_0.Maybe(var_0, bool_0)
    var_2 = var_1.to_validation()
    var_3 = var_1.get_or_else(maybe_0)
    var_4 = var_1.to_lazy()


def test_case_5():
    bytes_0 = b"\x97"
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    bool_0 = False
    maybe_1 = module_0.Maybe(bytes_0, bool_0)
    maybe_1.map(bytes_0)


def test_case_6():
    bytes_0 = b"\x03\x98M%rL\xb3"
    dict_0 = {}
    generic_0 = module_1.Generic(**dict_0)
    maybe_0 = module_0.Maybe(bytes_0, generic_0)
    var_0 = maybe_0.map(bytes_0)
    var_1 = var_0.bind(var_0)
    var_2 = var_0.ap(dict_0)
    var_3 = var_2.filter(var_2)
    bool_0 = False
    maybe_1 = module_0.Maybe(dict_0, bool_0)
    maybe_1.filter(bytes_0)


def test_case_7():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    int_0 = -1446
    maybe_1 = module_0.Maybe(int_0, int_0)
    bool_1 = maybe_1.__eq__(maybe_1)
    maybe_0.bind(bool_1)


def test_case_8():
    bytes_0 = b"\x03\x98M%rL\xb3"
    dict_0 = {}
    generic_0 = module_1.Generic(**dict_0)
    maybe_0 = module_0.Maybe(bytes_0, generic_0)
    var_0 = maybe_0.map(bytes_0)
    var_1 = var_0.ap(dict_0)
    var_2 = var_1.filter(var_1)
    bool_0 = False
    maybe_1 = module_0.Maybe(dict_0, bool_0)
    maybe_1.filter(bytes_0)


def test_case_9():
    bool_0 = False
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_validation()
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    maybe_1.ap(bool_0)


def test_case_10():
    bool_0 = True
    none_type_0 = None
    bool_1 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_1)
    var_0 = maybe_0.to_validation()
    bool_2 = True
    maybe_1 = module_0.Maybe(var_0, bool_2)
    var_1 = maybe_1.filter(bool_0)
    var_2 = var_1.to_either()


def test_case_11():
    int_0 = 555
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.get_or_else(int_0)
    var_0.to_box()


def test_case_12():
    bool_0 = True
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.to_either()
    var_0.to_try()


def test_case_13():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    int_0 = -1446
    maybe_1 = module_0.Maybe(int_0, int_0)
    bool_1 = maybe_1.__eq__(maybe_1)
    var_0 = maybe_1.to_box()
    var_1 = maybe_1.to_lazy()


def test_case_14():
    bytes_0 = b"\xfa\xcf"
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    maybe_1 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_1.map(bytes_0)
    var_1 = var_0.ap(maybe_1)
    var_2 = var_1.to_try()
    none_type_1 = None
    var_3 = maybe_1.ap(none_type_1)
    var_4 = maybe_1.map(var_3)
    none_type_2 = None
    var_5 = maybe_1.map(maybe_1)
    var_6 = var_3.to_lazy()
    maybe_2 = module_0.Maybe(none_type_2, maybe_1)
    var_7 = maybe_1.to_box()


def test_case_15():
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_0, none_type_0)
    var_0 = maybe_0.to_try()
    var_0.to_try()


def test_case_16():
    int_0 = -1466
    dict_0 = {int_0: int_0}
    maybe_0 = module_0.Maybe(dict_0, dict_0)
    var_0 = maybe_0.to_validation()
    var_1 = var_0.to_box()
    float_0 = -154.9412
    bool_0 = True
    maybe_1 = module_0.Maybe(float_0, bool_0)


def test_case_17():
    str_0 = "\n        Take function (A) -> B and applied this function on current Validation value.\n\n        :param mapper: mapper function\n        :type mapper: Function(A) -> B\n        :returns: new Validation with mapped value and previous errors\n        :rtype: Validation[B, List[E]]\n        "
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_validation()


def test_case_18():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.bind(bool_0)
    bool_1 = True
    maybe_1 = maybe_0.filter(var_0)
    maybe_2 = module_0.Maybe(bool_0, bool_1)
    var_2 = var_0.to_validation()
    var_1.get_or_else(bool_1)


def test_case_19():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_box()
    maybe_1 = module_0.Maybe(maybe_0, none_type_0)
    var_1 = maybe_1.to_lazy()
    var_2 = var_1.to_box()
    var_3 = var_2.to_either()
    var_3.get_or_else(none_type_0)


def test_case_20():
    int_0 = -651
    none_type_0 = None
    bool_0 = False
    bool_1 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_1)
    var_0 = maybe_0.ap(bool_0)
    var_1 = var_0.ap(bool_0)
    var_2 = var_0.filter(var_1)
    bool_2 = var_2.__eq__(none_type_0)
    str_0 = "bEiPG0`wF.)!"
    var_3 = var_1.ap(str_0)
    var_4 = var_1.map(maybe_0)
    var_5 = var_2.ap(var_1)
    bool_3 = var_1.__eq__(var_4)
    bool_4 = var_0.__eq__(str_0)
    var_6 = var_3.ap(var_0)
    maybe_1 = module_0.Maybe(str_0, int_0)
    var_7 = var_2.to_validation()
    var_8 = var_6.filter(str_0)
    bool_5 = maybe_1.__eq__(var_3)
    var_9 = var_5.map(var_5)
    var_10 = var_2.bind(var_1)
    var_11 = var_10.to_either()
    var_12 = var_3.filter(none_type_0)
