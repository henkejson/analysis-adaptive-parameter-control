# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import builtins as module_1


def test_case_0():
    int_0 = 2758
    maybe_0 = module_0.Maybe(int_0, int_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    tuple_0 = ()
    bool_0 = True
    maybe_0 = module_0.Maybe(tuple_0, bool_0)
    bool_1 = tuple_0.__eq__(maybe_0)
    var_0 = maybe_0.to_try()
    bool_2 = maybe_0.__eq__(var_0)


def test_case_3():
    tuple_0 = ()
    bool_0 = True
    maybe_0 = module_0.Maybe(tuple_0, bool_0)
    var_0 = maybe_0.map(bool_0)
    bool_1 = tuple_0.__eq__(maybe_0)
    var_1 = maybe_0.to_try()
    bool_2 = maybe_0.__eq__(bool_1)


def test_case_4():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, none_type_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.to_either()
    maybe_0.map(var_1)


def test_case_5():
    float_0 = 2203.81088
    maybe_0 = module_0.Maybe(float_0, float_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.bind(var_0)


def test_case_6():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.bind(none_type_0)


def test_case_7():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.ap(none_type_0)
    str_0 = "Vb"
    maybe_1 = module_0.Maybe(str_0, str_0)
    var_1 = maybe_1.to_try()
    var_1.to_lazy()


def test_case_8():
    str_0 = "\nXFW,!^&"
    str_1 = "0XRuI,mE(,Gm\to12rj"
    object_0 = module_1.object()
    bool_0 = True
    maybe_0 = module_0.Maybe(object_0, bool_0)
    var_0 = maybe_0.to_try()
    var_1 = var_0.map(str_1)
    var_2 = var_1.get_or_else(str_0)
    none_type_0 = None
    dict_0 = {}
    bool_1 = False
    maybe_1 = module_0.Maybe(dict_0, bool_1)
    var_3 = maybe_1.get_or_else(none_type_0)
    set_0 = set()
    none_type_1 = None
    maybe_2 = module_0.Maybe(none_type_1, none_type_1)
    maybe_2.ap(set_0)


def test_case_9():
    tuple_0 = ()
    bool_0 = True
    maybe_0 = module_0.Maybe(tuple_0, bool_0)
    var_0 = maybe_0.map(bool_0)
    bool_1 = tuple_0.__eq__(maybe_0)
    var_1 = var_0.filter(maybe_0)
    bool_2 = maybe_0.__eq__(bool_1)


def test_case_10():
    none_type_0 = None
    none_type_1 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_1, bool_0)
    maybe_0.filter(none_type_0)


def test_case_11():
    tuple_0 = ()
    bool_0 = True
    maybe_0 = module_0.Maybe(tuple_0, bool_0)
    var_0 = maybe_0.get_or_else(tuple_0)
    var_1 = maybe_0.filter(var_0)
    var_2 = var_1.to_validation()
    var_3 = maybe_0.map(var_2)
    var_2.ap(bool_0)


def test_case_12():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.get_or_else(bool_0)
    var_0.filter(bool_0)


def test_case_13():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = maybe_0.__eq__(none_type_0)
    var_0 = maybe_0.filter(none_type_0)
    var_1 = maybe_0.to_validation()
    var_2 = maybe_0.to_either()
    var_3 = maybe_0.ap(maybe_0)
    var_4 = var_2.map(var_2)
    var_2.filter(var_3)


def test_case_14():
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_0, none_type_0)
    var_0 = maybe_0.to_either()
    bytes_0 = b"^"
    maybe_1 = module_0.Maybe(bytes_0, bytes_0)
    var_1 = maybe_1.to_validation()
    var_1.map(var_1)


def test_case_15():
    float_0 = 5152.425
    bool_0 = True
    maybe_0 = module_0.Maybe(float_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_try()


def test_case_16():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = False
    str_0 = "\n    Maybe type is the most common way of representing nothingness (or the null type).\n    Maybe is effectively abstract and has two concrete subtypes: Box (also Some) and Nothing.\n    "
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.to_try()
    maybe_1 = module_0.Maybe(str_0, bool_0)
    var_2 = maybe_1.to_try()
    var_3 = maybe_1.get_or_else(var_2)
    var_4 = var_2.get_or_else(maybe_1)
    maybe_2 = module_0.Maybe(var_3, bool_1)
    var_5 = maybe_2.to_box()
    var_1.to_try()


def test_case_17():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_either()
    var_1.to_either()


def test_case_18():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_try()
    var_0.to_try()


def test_case_19():
    float_0 = 974.820145
    list_0 = [float_0, float_0, float_0, float_0]
    complex_0 = 392.9 - 1145j
    bool_0 = True
    maybe_0 = module_0.Maybe(complex_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = var_0.to_lazy()
    var_1.get_or_else(list_0)


def test_case_20():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    maybe_0 = module_0.Maybe(dict_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_0.bind(var_0)


def test_case_21():
    bool_0 = False
    bool_0.to_validation()


def test_case_22():
    int_0 = -68
    int_1 = -2962
    bool_0 = True
    maybe_0 = module_0.Maybe(int_1, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_box()
    var_1.map(int_0)


def test_case_23():
    tuple_0 = ()
    bool_0 = True
    maybe_0 = module_0.Maybe(tuple_0, bool_0)
    var_0 = maybe_0.map(bool_0)
    var_1 = var_0.filter(bool_0)
    var_2 = maybe_0.to_try()
    bool_1 = var_2.__eq__(maybe_0)
    bool_2 = maybe_0.__eq__(var_1)


def test_case_24():
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.ap(bool_0)
    var_1 = maybe_0.filter(var_0)
    var_2 = var_1.to_validation()
    maybe_1 = module_0.Maybe(bool_1, var_2)
    var_3 = maybe_1.to_either()
    var_4 = maybe_0.map(var_2)
    var_5 = maybe_0.map(var_0)
    var_6 = var_4.bind(var_0)
    var_7 = var_6.map(none_type_0)
    var_8 = var_7.filter(var_5)
    var_9 = var_0.to_try()
    bool_2 = var_0.__eq__(var_4)
    bool_3 = var_5.__eq__(maybe_1)


def test_case_25():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    maybe_0.filter(maybe_0)
