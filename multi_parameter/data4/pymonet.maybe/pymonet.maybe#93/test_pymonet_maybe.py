# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    bytes_0 = b"\xf4\xb9\xe45\x17{\xf5\x96\xb1S\xd7v`X\xe5s\x9bz\xe9"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = True
    maybe_1 = module_0.Maybe(bool_1, bool_1)
    var_0 = maybe_1.filter(bool_0)
    var_1 = var_0.get_or_else(maybe_0)
    var_2 = maybe_1.to_validation()
    bool_2 = maybe_1.__eq__(maybe_1)
    maybe_2 = module_0.Maybe(bool_1, bool_0)
    bool_3 = maybe_2.__eq__(bool_1)
    var_3 = maybe_2.to_lazy()
    var_1.filter(var_1)


def test_case_3():
    bytes_0 = b"\x1b\xd9E\t\xa1+N!G\xf6\x92g\xd3"
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = maybe_0.__eq__(bytes_0)


def test_case_4():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.bind(none_type_0)
    var_1 = var_0.to_validation()
    var_2 = maybe_0.filter(var_1)
    bool_1 = var_1.__eq__(var_0)
    var_3 = var_2.to_box()
    var_4 = var_3.to_lazy()
    var_5 = var_0.bind(var_4)
    var_6 = maybe_0.get_or_else(none_type_0)
    var_7 = var_0.map(none_type_0)
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_8 = maybe_1.to_validation()
    var_9 = var_8.to_either()
    var_10 = var_9.to_lazy()
    var_11 = var_8.to_either()
    var_12 = maybe_1.to_try()


def test_case_5():
    str_0 = "\n    Last is a Monoid that will always return the lastest, value when 2 Last instances are combined.\n    "
    none_type_0 = None
    maybe_0 = module_0.Maybe(str_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.bind(var_0)
    maybe_0.map(var_0)


def test_case_6():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.bind(none_type_0)


def test_case_7():
    none_type_0 = None
    int_0 = 334
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.ap(none_type_0)
    var_1 = var_0.to_validation()
    int_1 = 463
    bool_1 = True
    maybe_1 = module_0.Maybe(int_1, bool_1)


def test_case_8():
    str_0 = "\n        Applies the function inside the Box[A] structure to another applicative type.\n\n        :param applicative: applicative contains function\n        :type applicative: Box[B]\n        :returns: new Box with result of contains function\n        :rtype: Box[A(B)]\n        "
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    maybe_0.ap(str_0)


def test_case_9():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = True
    maybe_1 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_1.filter(maybe_0)
    var_1 = var_0.get_or_else(maybe_0)
    var_1.filter(var_1)


def test_case_10():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_validation()
    maybe_0.filter(var_0)


def test_case_11():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.get_or_else(none_type_0)
    var_0.to_try()


def test_case_12():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = True
    maybe_1 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_1.filter(maybe_0)
    var_1 = var_0.get_or_else(maybe_0)
    var_2 = maybe_1.to_validation()
    var_3 = var_0.to_either()
    var_1.filter(var_1)


def test_case_13():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.bind(none_type_0)
    var_1 = var_0.to_validation()
    var_2 = maybe_0.filter(var_1)
    bool_1 = var_1.__eq__(var_0)
    var_3 = var_2.to_box()
    var_4 = var_0.bind(var_2)
    var_5 = maybe_0.get_or_else(none_type_0)
    var_6 = var_0.map(none_type_0)
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_7 = maybe_1.to_either()
    var_7.get_or_else(var_1)


def test_case_14():
    int_0 = -1047
    bool_0 = False
    maybe_0 = module_0.Maybe(int_0, bool_0)
    bool_1 = True
    maybe_1 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_1.to_box()
    var_1 = maybe_1.filter(var_0)
    bool_2 = True
    var_2 = var_1.get_or_else(maybe_0)
    var_3 = maybe_1.to_validation()
    maybe_2 = module_0.Maybe(int_0, bool_2)
    var_4 = var_1.to_try()
    var_5 = maybe_2.to_lazy()
    var_2.filter(int_0)


def test_case_15():
    set_0 = set()
    bool_0 = False
    maybe_0 = module_0.Maybe(set_0, bool_0)
    var_0 = maybe_0.to_box()


def test_case_16():
    bool_0 = True
    float_0 = -164.190548
    bool_1 = True
    maybe_0 = module_0.Maybe(float_0, bool_1)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_either()
    var_2 = var_1.to_box()
    var_2.get_or_else(bool_0)


def test_case_17():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = True
    maybe_1 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_1.filter(maybe_0)
    var_1 = var_0.get_or_else(maybe_0)
    var_2 = var_0.to_try()
    var_1.filter(var_1)


def test_case_18():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = True
    maybe_1 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_1.filter(maybe_0)
    bool_2 = True
    var_1 = var_0.get_or_else(maybe_0)
    maybe_2 = module_0.Maybe(bool_2, bool_2)
    var_2 = maybe_0.to_try()
    var_1.filter(var_1)


def test_case_19():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.to_lazy()
    var_2 = var_1.to_try()
    var_3 = var_1.to_validation()
    none_type_1 = None
    maybe_1 = module_0.Maybe(none_type_1, none_type_1)
    var_4 = maybe_1.to_either()
    var_3.bind(var_1)


def test_case_20():
    bytes_0 = b"\xa2"
    bool_0 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    maybe_0.ap(bytes_0)


def test_case_21():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    str_0 = "v,Jr"
    var_0 = maybe_0.bind(str_0)
    var_1 = maybe_0.filter(var_0)
    var_2 = maybe_0.to_box()
    complex_0 = 1473.29 + 1541.22j
    var_3 = maybe_0.filter(complex_0)
    var_4 = maybe_0.to_try()
    none_type_1 = None
    var_5 = var_4.get_or_else(maybe_0)
    maybe_1 = module_0.Maybe(var_3, var_3)
    var_6 = maybe_1.ap(var_4)
    var_7 = var_0.filter(var_6)
    bool_1 = var_7.__eq__(maybe_1)
    var_8 = maybe_1.map(none_type_1)
    var_9 = maybe_0.to_try()
    bool_2 = False
    bool_3 = maybe_0.__eq__(var_9)
    maybe_2 = module_0.Maybe(maybe_1, bool_2)
    bool_4 = True
    maybe_3 = module_0.Maybe(complex_0, bool_4)
    var_10 = maybe_3.to_validation()
    var_11 = var_4.map(var_9)
    maybe_4 = module_0.Maybe(var_9, bool_0)
    var_12 = var_7.to_validation()
    var_13 = maybe_2.to_try()
    bool_5 = True
    maybe_5 = module_0.Maybe(var_5, bool_5)
    var_14 = maybe_5.to_try()
    var_15 = maybe_4.bind(var_10)
    maybe_6 = module_0.Maybe(maybe_0, var_3)
    bool_6 = False
    maybe_7 = module_0.Maybe(var_9, bool_6)
    var_16 = maybe_7.to_either()
