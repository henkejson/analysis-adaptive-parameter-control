# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import builtins as module_1


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_either()
    bool_1 = maybe_0.__eq__(bool_0)
    var_1 = var_0.to_lazy()
    bool_2 = True
    maybe_1 = module_0.Maybe(bool_0, bool_2)
    var_2 = maybe_0.to_lazy()
    var_2.to_lazy()


def test_case_3():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    none_type_0 = None
    var_0 = maybe_0.map(none_type_0)
    var_1 = maybe_0.filter(none_type_0)
    var_2 = var_1.filter(maybe_0)
    bool_1 = var_1.__eq__(var_1)
    var_3 = var_2.to_try()
    var_4 = var_2.bind(bool_1)
    var_3.ap(bool_0)


def test_case_4():
    int_0 = -4208
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_0.map(int_0)


def test_case_5():
    bytes_0 = b"6\xcf\x02b\x8f\xea6\xa7\xf6\x0f?\x82\xcf9\xf2V/}\xb0"
    set_0 = set()
    bool_0 = False
    maybe_0 = module_0.Maybe(set_0, bool_0)
    maybe_0.bind(bytes_0)


def test_case_6():
    str_0 = '\r9]N_]"UjJI\x0bGTU'
    str_1 = "E}dpU"
    maybe_0 = module_0.Maybe(str_0, str_1)
    var_0 = maybe_0.ap(str_0)
    var_1 = var_0.to_try()
    var_1.to_try()


def test_case_7():
    bytes_0 = b"\x05\xe3\xcf\x054I5\xcb\xa8\x1d\x85\xb7\x150\x1cqd\t\x84"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_validation()
    none_type_0 = None
    bool_0 = False
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    maybe_1.ap(bytes_0)


def test_case_8():
    bytes_0 = b"\\\x10\xdf*"
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.filter(maybe_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1.filter(none_type_0)


def test_case_9():
    bytes_0 = b"\xb3\x982\xf1P\t-"
    bool_0 = False
    bool_1 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_1)
    var_0 = maybe_0.to_either()
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    maybe_1.filter(bytes_0)


def test_case_10():
    int_0 = -3616
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.to_either()
    bool_0 = var_0.__eq__(int_0)
    int_1 = -1573
    maybe_1 = module_0.Maybe(int_0, int_1)
    var_1 = maybe_1.to_either()
    var_2 = maybe_1.get_or_else(int_0)


def test_case_11():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    none_type_0 = None
    var_0 = maybe_0.map(none_type_0)
    var_1 = maybe_0.filter(none_type_0)
    var_2 = var_0.to_either()
    bool_1 = maybe_0.__eq__(bool_0)
    var_3 = var_1.to_try()
    maybe_1 = module_0.Maybe(bool_1, bool_1)
    var_4 = maybe_1.get_or_else(none_type_0)
    var_5 = maybe_0.to_either()
    var_6 = maybe_0.bind(maybe_0)
    maybe_1.filter(var_6)


def test_case_12():
    bytes_0 = b"\\\x10\xdf*"
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.filter(maybe_0)
    var_1 = var_0.to_box()
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1.filter(var_1)


def test_case_13():
    bytes_0 = b"t\xa3\xdf\xf8#!cP,\x15L\x12\xe6v!\x1d\xa8\x8a"
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_box()
    var_0.map(bytes_0)


def test_case_14():
    bool_0 = True
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.to_try()
    var_2 = var_0.bind(maybe_0)
    var_3 = maybe_0.to_box()
    var_0.filter(var_0)


def test_case_15():
    str_0 = "<"
    none_type_0 = None
    maybe_0 = module_0.Maybe(str_0, none_type_0)
    var_0 = maybe_0.to_try()
    none_type_1 = None
    maybe_1 = module_0.Maybe(none_type_1, none_type_1)
    var_1 = maybe_1.to_try()
    var_2 = maybe_1.get_or_else(maybe_1)
    maybe_1.map(var_2)


def test_case_16():
    object_0 = module_1.object()
    bool_0 = True
    maybe_0 = module_0.Maybe(object_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = var_0.to_either()
    var_2 = var_1.to_try()


def test_case_17():
    int_0 = 0
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.to_validation()


def test_case_18():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    none_type_0 = None
    var_0 = maybe_0.map(none_type_0)
    var_1 = maybe_0.filter(none_type_0)
    var_2 = maybe_0.to_either()
    var_3 = var_0.to_try()
    var_4 = maybe_0.to_try()
    var_5 = var_0.to_lazy()
    var_6 = var_5.to_box()
    var_7 = var_5.to_try()
    maybe_1 = module_0.Maybe(var_5, var_6)
    var_8 = var_7.get_or_else(var_7)
    var_9 = var_7.get_or_else(maybe_0)
    var_9.map(var_5)


def test_case_19():
    complex_0 = -1616.79 + 193.78691j
    maybe_0 = module_0.Maybe(complex_0, complex_0)
    bool_0 = False
    var_0 = maybe_0.get_or_else(bool_0)
    none_type_0 = None
    var_1 = maybe_0.to_either()
    bool_1 = False
    maybe_1 = module_0.Maybe(bool_0, bool_1)
    var_2 = maybe_1.to_lazy()
    var_3 = var_2.to_try()
    var_3.ap(none_type_0)


def test_case_20():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    none_type_0 = None
    var_0 = maybe_0.map(none_type_0)
    var_1 = maybe_0.filter(none_type_0)
    var_2 = maybe_0.to_either()
    bool_1 = maybe_0.__eq__(bool_0)
    var_3 = var_1.to_try()
    var_4 = maybe_0.to_either()
    var_5 = maybe_0.bind(maybe_0)
    var_6 = maybe_0.ap(bool_1)
    bool_2 = False
    maybe_1 = module_0.Maybe(var_5, bool_2)
    var_7 = var_2.bind(var_3)
    var_8 = var_6.to_lazy()
    var_9 = var_7.to_validation()
    var_10 = var_0.to_try()
    var_11 = var_6.to_try()
    var_12 = var_7.to_box()
    bool_3 = maybe_1.__eq__(var_0)
    int_0 = -1681
    var_4.get_or_else(int_0)


def test_case_21():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    none_type_0 = None
    var_0 = maybe_0.map(none_type_0)
    maybe_1 = module_0.Maybe(bool_0, none_type_0)
    var_1 = maybe_1.get_or_else(bool_0)
    bool_1 = maybe_1.__eq__(maybe_1)
    var_1.to_try()
