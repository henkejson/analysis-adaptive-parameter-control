# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1
import builtins as module_2


def test_case_0():
    complex_0 = -1876.003001 + 3619.5352j
    maybe_0 = module_0.Maybe(complex_0, complex_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    complex_0 = 2599.8383 + 388.23303j
    maybe_0 = module_0.Maybe(complex_0, complex_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.to_box()
    var_2 = maybe_0.to_try()
    var_3 = maybe_0.to_box()
    var_4 = var_1.to_either()
    var_5 = var_4.to_box()
    var_6 = maybe_0.to_box()


def test_case_3():
    int_0 = 859
    maybe_0 = module_0.Maybe(int_0, int_0)
    bool_0 = maybe_0.__eq__(int_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_box()
    var_2 = maybe_0.to_box()
    var_3 = maybe_0.to_either()
    var_4 = var_3.to_box()
    var_2.to_box()


def test_case_4():
    bytes_0 = b",eQh\xe5\x83\xd4\x19\x82\xbd\x83\xaa\xdc"
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bytes_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.ap(var_0)
    var_2 = maybe_0.map(var_1)
    var_3 = maybe_0.to_box()
    var_4 = maybe_0.filter(var_3)
    maybe_1 = module_0.Maybe(bytes_0, bool_0)
    var_5 = maybe_0.ap(maybe_1)


def test_case_5():
    bool_0 = False
    none_type_0 = None
    bool_1 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_1)
    var_0 = maybe_0.to_try()
    maybe_0.map(bool_0)


def test_case_6():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = var_0.to_lazy()
    int_0 = 1
    bool_1 = True
    maybe_1 = module_0.Maybe(int_0, bool_1)
    var_2 = maybe_1.bind(var_1)


def test_case_7():
    bool_0 = False
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    maybe_0.bind(bool_0)


def test_case_8():
    int_0 = 485
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, int_0)
    bytes_0 = b"T=s\xed\xbb"
    var_0 = maybe_0.bind(maybe_0)
    bool_0 = False
    maybe_1 = module_0.Maybe(bytes_0, bool_0)
    maybe_1.ap(none_type_0)


def test_case_9():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.filter(bool_0)


def test_case_10():
    list_0 = []
    bool_0 = True
    maybe_0 = module_0.Maybe(list_0, bool_0)
    var_0 = maybe_0.filter(list_0)
    maybe_1 = module_0.Maybe(list_0, list_0)
    maybe_1.filter(maybe_1)


def test_case_11():
    int_0 = 859
    maybe_0 = module_0.Maybe(int_0, int_0)
    bool_0 = maybe_0.__eq__(int_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.to_either()
    var_2 = var_1.to_box()
    var_3 = maybe_0.to_box()
    var_4 = maybe_0.ap(var_1)
    var_5 = maybe_0.filter(var_0)
    var_6 = var_5.get_or_else(bool_0)
    var_7 = var_3.to_either()
    var_8 = var_4.to_lazy()
    bool_1 = var_8.__eq__(var_0)
    var_6.to_either()


def test_case_12():
    none_type_0 = None
    int_0 = 0
    bool_0 = False
    bool_1 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_1)
    maybe_1 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_1.to_box()
    var_1 = maybe_1.get_or_else(none_type_0)
    var_1.to_either()


def test_case_13():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_either()


def test_case_14():
    bytes_0 = b"\xfe\xeeT\xe05\xd3\x155v\xf7\xa8s\x19\xd1\xd2L\xd1\xc5"
    none_type_0 = None
    maybe_0 = module_0.Maybe(bytes_0, none_type_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_lazy()
    generic_0 = module_1.Generic()
    var_0.map(generic_0)


def test_case_15():
    int_0 = 859
    maybe_0 = module_0.Maybe(int_0, int_0)
    bool_0 = maybe_0.__eq__(int_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.to_either()
    var_2 = var_1.to_box()
    var_3 = maybe_0.to_box()
    var_4 = maybe_0.to_either()
    var_5 = var_4.to_box()
    var_6 = var_4.ap(var_4)


def test_case_16():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()


def test_case_17():
    bytes_0 = b"\xfd-\x1d\xfaq\x94(d\xf3\x92Z\x85\x8d\x1b\xd3"
    none_type_0 = None
    none_type_1 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_1, bool_0)
    var_0 = maybe_0.ap(none_type_0)
    var_1 = var_0.to_validation()
    var_1.get_or_else(bytes_0)


def test_case_18():
    int_0 = 859
    maybe_0 = module_0.Maybe(int_0, int_0)
    bool_0 = maybe_0.__eq__(int_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_box()
    var_2 = maybe_0.to_either()
    var_3 = var_2.to_box()
    var_4 = maybe_0.to_box()
    var_5 = maybe_0.ap(var_2)
    var_6 = maybe_0.filter(var_0)
    var_7 = var_5.filter(var_2)
    maybe_1 = module_0.Maybe(var_6, var_2)
    var_8 = var_6.get_or_else(bool_0)
    var_9 = var_4.to_either()
    bool_1 = var_9.__eq__(var_4)
    var_10 = var_5.to_lazy()
    var_8.to_either()


def test_case_19():
    bytes_0 = b"\x01\x80\x01\x95\xf0(\xe9\xb8\xd6x\xc8\xff\xd0\xfaU_~\\\xa3\x9e"
    dict_0 = {bytes_0: bytes_0}
    object_0 = module_2.object()
    bool_0 = False
    maybe_0 = module_0.Maybe(object_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_box()
    var_1.ap(dict_0)


def test_case_20():
    int_0 = 859
    maybe_0 = module_0.Maybe(int_0, int_0)
    bool_0 = maybe_0.__eq__(int_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.to_either()
    var_2 = var_1.to_box()
    var_3 = maybe_0.ap(var_1)
    var_4 = maybe_0.filter(var_0)
    var_5 = var_3.filter(var_1)
    maybe_1 = module_0.Maybe(var_4, var_1)
    var_6 = var_4.get_or_else(bool_0)
    var_7 = var_2.to_either()
    var_8 = var_3.to_either()
    var_9 = maybe_0.to_lazy()
    bool_1 = maybe_1.__eq__(maybe_0)
    var_8.to_either()


def test_case_21():
    list_0 = []
    bool_0 = True
    maybe_0 = module_0.Maybe(list_0, bool_0)
    var_0 = maybe_0.filter(list_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(bool_1, bool_1)
    none_type_0 = None
    maybe_2 = module_0.Maybe(none_type_0, bool_1)
    var_1 = maybe_2.get_or_else(none_type_0)
    maybe_3 = module_0.Maybe(bool_1, bool_1)
    bool_2 = maybe_3.__eq__(maybe_1)
    maybe_3.filter(maybe_3)
