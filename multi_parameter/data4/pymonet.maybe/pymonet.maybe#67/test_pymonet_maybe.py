# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    str_0 = "CA+j\rC:B>*!BQR cQ|"
    maybe_0 = module_0.Maybe(str_0, str_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    none_type_0 = None
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.map(bool_0)
    var_2 = maybe_0.map(none_type_0)
    var_3 = var_2.to_either()
    bool_1 = var_1.__eq__(var_1)
    var_4 = var_2.ap(bool_0)
    var_5 = var_1.map(var_3)
    var_6 = var_5.filter(var_4)
    var_7 = maybe_0.to_box()
    maybe_1 = module_0.Maybe(var_4, none_type_0)
    maybe_1.filter(var_0)


def test_case_3():
    none_type_0 = None
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    maybe_0 = module_0.Maybe(list_0, list_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_box()
    var_2 = maybe_0.ap(none_type_0)
    str_0 = "x\ty!\x0cW<"
    bool_1 = var_2.__eq__(bool_0)
    var_3 = var_0.to_validation()
    var_4 = maybe_0.get_or_else(str_0)
    var_5 = var_0.to_box()
    var_6 = var_2.to_box()
    maybe_1 = module_0.Maybe(var_5, maybe_0)


def test_case_4():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    none_type_0 = None
    var_0 = maybe_0.map(none_type_0)
    var_1 = var_0.to_either()
    var_2 = var_0.to_lazy()
    bool_1 = var_1.__eq__(var_1)
    var_3 = var_0.ap(bool_0)
    var_4 = var_0.map(var_1)
    var_5 = var_4.filter(var_3)
    var_6 = var_0.to_box()
    var_7 = maybe_0.to_box()
    maybe_1 = module_0.Maybe(var_3, none_type_0)
    maybe_1.filter(var_7)


def test_case_5():
    none_type_0 = None
    list_0 = []
    maybe_0 = module_0.Maybe(list_0, list_0)
    maybe_0.map(none_type_0)


def test_case_6():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.ap(maybe_0)
    var_1 = maybe_0.bind(var_0)
    var_2 = maybe_0.to_validation()
    var_2.map(bool_0)


def test_case_7():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    maybe_0.bind(maybe_0)


def test_case_8():
    bool_0 = True
    int_0 = -403
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_1, bool_1)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_lazy()
    var_2 = var_1.to_box()
    tuple_0 = (var_2, var_1)
    maybe_1 = module_0.Maybe(bool_1, tuple_0)
    var_3 = maybe_1.ap(int_0)
    var_4 = var_3.get_or_else(bool_0)
    var_4.to_validation()


def test_case_9():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.filter(none_type_0)


def test_case_10():
    bytes_0 = b"\x81\xf6S\xaf\xef\x88\xae=\x94\xbf\x15\xaa\x01\x9cJ"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.get_or_else(bytes_0)


def test_case_11():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, none_type_0)
    var_0 = maybe_0.get_or_else(none_type_0)
    var_0.to_validation()


def test_case_12():
    str_0 = "All"
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_lazy()
    var_2 = var_1.map(str_0)


def test_case_13():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_either()


def test_case_14():
    str_0 = "\n        Take function (A) -> b and applied this function on current box value and returns new box with mapped value.\n\n        :param mapper: mapper function\n        :type mapper: Function(A) -> B\n        :returns: new box with mapped value\n        :rtype: Box[B]\n        "
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    dict_0 = {str_0: str_0, str_0: str_0}
    bool_1 = True
    maybe_1 = module_0.Maybe(dict_0, bool_1)
    var_0 = maybe_1.to_box()
    var_1 = var_0.to_try()


def test_case_15():
    str_0 = "=A E\x0cG~~0J$D8}Pf"
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_try()
    none_type_0 = None
    bool_1 = maybe_0.__eq__(none_type_0)
    var_1 = var_0.map(var_0)
    var_2 = maybe_0.to_either()
    maybe_1 = module_0.Maybe(none_type_0, var_2)
    bool_2 = maybe_1.__eq__(bool_0)
    bool_3 = False
    maybe_2 = module_0.Maybe(var_2, bool_3)
    var_3 = maybe_2.to_box()
    var_4 = var_2.map(var_3)
    maybe_3 = module_0.Maybe(bool_2, maybe_2)
    var_5 = maybe_0.to_try()
    bool_4 = False
    maybe_4 = module_0.Maybe(none_type_0, bool_4)
    var_6 = var_3.to_try()
    var_6.map(var_3)


def test_case_16():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_try()
    set_0 = set()
    bool_0 = True
    maybe_1 = module_0.Maybe(set_0, bool_0)
    var_1 = maybe_1.to_lazy()
    var_2 = var_1.to_either()
    var_2.bind(var_0)


def test_case_17():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_lazy()


def test_case_18():
    bytes_0 = b"\x81\xf6S\xaf\xef\x88\xae=\x94\xbf\x15\xaa\x01\x9cJ"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_try()
    var_0.to_box()


def test_case_19():
    bool_0 = False
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_1.to_either()
    var_1 = maybe_1.to_try()
    var_1.to_validation()


def test_case_20():
    none_type_0 = None
    none_type_1 = None
    maybe_0 = module_0.Maybe(none_type_1, none_type_1)
    var_0 = maybe_0.to_validation()
    var_0.get_or_else(none_type_0)


def test_case_21():
    bool_0 = False
    int_0 = 0
    maybe_0 = module_0.Maybe(bool_0, int_0)
    bool_1 = True
    maybe_0.ap(bool_1)


def test_case_22():
    bool_0 = True
    list_0 = []
    maybe_0 = module_0.Maybe(bool_0, list_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_try()
    var_1.map(bool_0)


def test_case_23():
    bool_0 = False
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    bool_2 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_validation()
    maybe_0.filter(bool_0)


def test_case_24():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    none_type_0 = None
    var_0 = maybe_0.to_try()
    bool_1 = True
    maybe_1 = module_0.Maybe(none_type_0, bool_1)
    var_1 = maybe_0.to_either()
    var_2 = maybe_0.map(bool_0)
    var_3 = maybe_0.bind(var_0)
    var_4 = maybe_0.map(none_type_0)
    var_5 = maybe_0.to_lazy()
    var_6 = var_5.map(var_1)
    var_7 = var_1.to_box()
    maybe_2 = module_0.Maybe(bool_1, var_1)
    var_8 = maybe_2.map(var_7)
    var_9 = maybe_2.to_either()
    bool_2 = maybe_2.__eq__(maybe_0)
    var_10 = var_2.map(maybe_1)
    var_11 = maybe_2.ap(bool_2)
    var_12 = var_6.map(var_4)
    var_13 = var_8.filter(bool_2)
    var_14 = var_9.to_box()
    var_15 = var_14.to_lazy()
    var_16 = maybe_2.bind(var_15)
    var_17 = var_9.bind(var_9)
    var_18 = maybe_2.get_or_else(none_type_0)
    var_19 = var_4.to_validation()
    var_20 = var_17.to_lazy()
    var_21 = maybe_0.to_try()
