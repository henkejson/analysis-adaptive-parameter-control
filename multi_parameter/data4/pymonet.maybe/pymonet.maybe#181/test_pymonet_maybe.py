# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    int_0 = 951
    maybe_0 = module_0.Maybe(int_0, int_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    maybe_0.filter(none_type_0)


def test_case_3():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_try()
    int_0 = 2922
    maybe_1 = module_0.Maybe(int_0, int_0)
    var_1 = maybe_1.map(var_0)
    none_type_1 = None
    maybe_2 = module_0.Maybe(none_type_1, none_type_1)
    bool_0 = maybe_2.__eq__(none_type_1)
    var_0.to_try()


def test_case_4():
    bytes_0 = b""
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_0.map(bytes_0)


def test_case_5():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_box()
    bool_1 = False
    set_0 = {bool_1, bool_1, bool_1, bool_1}
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_1 = var_0.to_lazy()
    bool_2 = maybe_1.__eq__(set_0)
    var_2 = maybe_0.bind(var_0)
    var_3 = var_2.bind(var_0)
    var_4 = maybe_0.filter(var_1)
    var_5 = var_1.to_box()
    bool_3 = maybe_1.__eq__(set_0)
    var_6 = var_3.map(bool_3)
    var_7 = var_3.filter(var_1)
    tuple_0 = (var_4,)
    var_8 = var_4.bind(tuple_0)
    var_9 = var_8.to_lazy()
    bool_4 = var_2.__eq__(set_0)


def test_case_6():
    int_0 = 1260
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_either()
    bool_1 = False
    maybe_1 = module_0.Maybe(int_0, bool_1)
    maybe_1.bind(var_0)


def test_case_7():
    none_type_0 = None
    bytes_0 = b"\xfe3sw\xf24\x1d!G\xd1\xf8\xa1\xdaPf@"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    bool_0 = True
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_1.ap(maybe_0)
    var_1 = var_0.ap(none_type_0)
    var_2 = var_1.to_either()
    var_2.to_either()


def test_case_8():
    bool_0 = True
    set_0 = {bool_0}
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.ap(set_0)


def test_case_9():
    none_type_0 = None
    bool_0 = none_type_0.__eq__(none_type_0)
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.filter(var_0)
    var_2 = var_1.to_try()


def test_case_10():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    complex_0 = 774.47363 + 3269j
    maybe_0.filter(complex_0)


def test_case_11():
    str_0 = "\n        Returns new ImmutableList with each element mapped into\n        result of argument called with each element of ImmutableList\n\n        :param fn: function to call with ImmutableList value\n        :type fn: Function(A) -> B\n        :returns: ImmutableList[B]\n        "
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, str_0)
    var_0 = maybe_0.ap(str_0)
    var_1 = var_0.get_or_else(str_0)
    var_1.ap(bool_0)


def test_case_12():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.get_or_else(bool_0)
    var_0.filter(bool_0)


def test_case_13():
    bool_0 = False
    set_0 = {bool_0}
    maybe_0 = module_0.Maybe(set_0, bool_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_box()


def test_case_14():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_box()
    bool_1 = False
    set_0 = {bool_1, bool_1, bool_1, bool_1}
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1.filter(set_0)


def test_case_15():
    tuple_0 = ()
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_validation()
    tuple_0.to_validation()


def test_case_16():
    bool_0 = False
    int_0 = 2623
    tuple_0 = (bool_0, int_0)
    none_type_0 = None
    set_0 = {none_type_0}
    maybe_0 = module_0.Maybe(none_type_0, set_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.bind(tuple_0)
    var_2 = var_1.to_try()
    var_2.to_either()


def test_case_17():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_lazy()
    maybe_1 = module_0.Maybe(var_0, var_0)
    var_1 = var_0.to_either()
    var_1.filter(var_0)


def test_case_18():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_try()


def test_case_19():
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = var_0.to_try()
    var_1.ap(bool_0)


def test_case_20():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, none_type_0)
    var_0 = maybe_0.to_validation()
    bool_1 = False
    maybe_0.filter(bool_1)


def test_case_21():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = True
    var_0 = maybe_0.ap(bool_1)
    bool_2 = maybe_0.__eq__(var_0)
    bool_3 = var_0.__eq__(none_type_0)
    var_1 = maybe_0.to_box()
    var_2 = var_0.get_or_else(bool_0)
    var_3 = maybe_0.filter(maybe_0)
    var_4 = var_1.to_either()
    var_5 = maybe_0.get_or_else(maybe_0)
    var_6 = maybe_0.to_lazy()
    var_7 = maybe_0.to_either()
    var_8 = var_7.to_validation()
    var_9 = var_0.get_or_else(var_0)
    bool_4 = False
    int_0 = -1919
    maybe_1 = module_0.Maybe(int_0, int_0)
    var_10 = maybe_1.bind(bool_4)
    bool_5 = var_10.__eq__(var_5)
    var_11 = var_7.to_lazy()
    bytes_0 = b"E\xcd"
    maybe_2 = module_0.Maybe(bytes_0, int_0)
    var_12 = maybe_2.to_try()
    var_13 = maybe_2.filter(bytes_0)
    var_14 = var_6.to_try()


def test_case_22():
    str_0 = "\n        Returns new ImmutableList with each element mapped into\n        result of argument called with each element of ImmutableList\n\n        :param fn: function to call with ImmutableList value\n        :type fn: Function(A) -> B\n        :returns: ImmutableList[B]\n        "
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, str_0)
    var_0 = maybe_0.filter(bool_0)
    bool_1 = maybe_0.__eq__(var_0)
    var_1 = var_0.to_either()
    maybe_1 = module_0.Maybe(maybe_0, maybe_0)
    bool_2 = False
    maybe_2 = module_0.Maybe(maybe_1, bool_2)
    var_2 = maybe_2.to_lazy()
    var_3 = maybe_0.map(var_0)
    str_1 = "KA^k~\x0cz7~2"
    var_4 = var_1.map(var_3)
    var_5 = maybe_0.ap(str_1)
    maybe_2.filter(var_2)
