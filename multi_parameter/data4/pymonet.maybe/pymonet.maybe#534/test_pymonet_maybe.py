# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    str_0 = "zjDY!Wf|M\x0b'pO{JfvgV "
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.bind(var_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_2 = maybe_0.map(str_0)
    bool_1 = maybe_0.__eq__(bool_0)
    var_3 = maybe_0.map(str_0)


def test_case_3():
    bool_0 = False
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_0, none_type_0)
    maybe_0.map(none_type_0)


def test_case_4():
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_0, none_type_0)
    maybe_0.bind(maybe_0)


def test_case_5():
    str_0 = "zjDY!Wf|M\x0b'pO{JfvgV "
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.ap(str_0)
    var_1 = maybe_0.bind(var_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_2 = maybe_0.map(str_0)
    bool_1 = maybe_0.__eq__(bool_0)
    var_3 = module_0.Maybe(bool_1, bool_0)


def test_case_6():
    int_0 = -323
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_either()
    maybe_0.ap(int_0)


def test_case_7():
    none_type_0 = None
    bool_0 = False
    none_type_1 = None
    none_type_2 = None
    bool_1 = True
    maybe_0 = module_0.Maybe(none_type_2, bool_1)
    var_0 = maybe_0.filter(none_type_1)
    var_1 = maybe_0.to_validation()
    var_2 = maybe_0.filter(var_1)
    var_3 = var_0.ap(bool_0)
    var_4 = var_3.get_or_else(none_type_0)
    var_5 = var_0.to_either()


def test_case_8():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    str_0 = "9*-9BUD:\t[;1}yEzdi%"
    bool_0 = True
    maybe_1 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_1.get_or_else(maybe_1)
    var_1 = var_0.to_either()
    var_2 = var_0.filter(var_0)
    var_3 = maybe_1.to_try()
    var_4 = var_2.to_lazy()
    maybe_0.filter(var_4)


def test_case_9():
    str_0 = "\n        Returns True when errors list are empty.\n\n        :returns: True for empty errors list\n        :rtype: Boolean\n        "
    int_0 = -32
    tuple_0 = (int_0,)
    maybe_0 = module_0.Maybe(tuple_0, tuple_0)
    var_0 = maybe_0.get_or_else(str_0)
    var_0.to_lazy()


def test_case_10():
    none_type_0 = None
    none_type_1 = None
    str_0 = "\n        :param semigroup: other semigroup to concat\n        :type semigroup: Map[B]\n        :returns: new Map with concated all values\n        :rtype: Map[A]\n        "
    none_type_2 = None
    maybe_0 = module_0.Maybe(str_0, none_type_2)
    var_0 = maybe_0.get_or_else(none_type_1)
    var_0.map(none_type_0)


def test_case_11():
    int_0 = 2656
    bool_0 = False
    list_0 = [bool_0, bool_0]
    maybe_0 = module_0.Maybe(list_0, list_0)
    var_0 = maybe_0.to_either()
    var_0.filter(int_0)


def test_case_12():
    bytes_0 = b"n#`)"
    bool_0 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.to_try()


def test_case_13():
    str_0 = "zjDY!Wf|M\x0b'pO{JfvgV "
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.bind(var_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_2 = maybe_0.map(str_0)
    var_3 = maybe_0.to_either()
    var_4 = maybe_0.to_lazy()
    var_5 = maybe_0.to_box()
    var_6 = var_3.to_validation()
    var_7 = var_3.to_lazy()
    var_4.to_lazy()


def test_case_14():
    complex_0 = -995.632 + 2486.6098j
    list_0 = [complex_0, complex_0, complex_0]
    int_0 = 2896
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.to_validation()
    none_type_0 = None
    maybe_1 = module_0.Maybe(int_0, none_type_0)
    var_1 = maybe_1.get_or_else(list_0)
    none_type_1 = None
    maybe_2 = module_0.Maybe(list_0, none_type_1)
    var_2 = maybe_2.to_validation()
    bytes_0 = b"\xfd\x1ekg\xc9\xb7W\x1f"
    maybe_3 = module_0.Maybe(none_type_1, none_type_1)
    maybe_4 = module_0.Maybe(bytes_0, bytes_0)
    var_3 = maybe_4.to_lazy()
    var_4 = maybe_2.to_box()
    str_0 = "9*-9BUD:\t[;1}yEzdi%"
    var_5 = maybe_4.filter(var_2)
    bool_0 = True
    maybe_5 = module_0.Maybe(str_0, bool_0)
    var_6 = maybe_5.map(maybe_5)
    bool_1 = maybe_5.__eq__(maybe_5)
    maybe_6 = module_0.Maybe(maybe_2, complex_0)
    maybe_2.ap(bool_1)


def test_case_15():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    maybe_0 = module_0.Maybe(dict_0, dict_0)
    var_0 = maybe_0.map(none_type_0)
    var_1 = var_0.to_lazy()
    var_2 = var_1.to_validation()
    var_2.ap(bool_0)


def test_case_16():
    dict_0 = {}
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_either()
    var_2 = var_1.to_validation()
    var_2.ap(dict_0)


def test_case_17():
    bytes_0 = b"\x01\xb7n\xd1y3|1w9t\xdd\x0e\x04\xdaen\xd4\xb5"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.get_or_else(bytes_0)
    set_0 = {bytes_0}
    var_0.ap(set_0)


def test_case_18():
    int_0 = 1608
    none_type_0 = None
    maybe_0 = module_0.Maybe(int_0, none_type_0)
    var_0 = maybe_0.to_validation()
    var_0.get_or_else(int_0)


def test_case_19():
    str_0 = "K|C\tyYlXqb{pG"
    set_0 = {str_0, str_0}
    bool_0 = True
    none_type_0 = None
    bool_1 = False
    maybe_0 = module_0.Maybe(str_0, bool_1)
    maybe_1 = module_0.Maybe(bool_0, str_0)
    maybe_2 = module_0.Maybe(none_type_0, maybe_1)
    bool_2 = maybe_2.__eq__(maybe_1)
    var_0 = maybe_2.get_or_else(set_0)
    bool_3 = maybe_1.__eq__(none_type_0)
    maybe_3 = module_0.Maybe(set_0, bool_0)
    var_1 = maybe_2.get_or_else(var_0)
    var_1.to_lazy()


def test_case_20():
    complex_0 = -995.632 + 2487j
    list_0 = [complex_0, complex_0, complex_0]
    maybe_0 = module_0.Maybe(complex_0, complex_0)
    var_0 = maybe_0.to_validation()
    none_type_0 = None
    maybe_1 = module_0.Maybe(list_0, none_type_0)
    var_1 = maybe_1.to_validation()
    bytes_0 = b"\xfd\x1ekg\xc9\xb7W\x1f"
    maybe_2 = module_0.Maybe(none_type_0, none_type_0)
    maybe_3 = module_0.Maybe(bytes_0, bytes_0)
    var_2 = maybe_1.to_box()
    str_0 = "9*-9BUD:\t[;1}yEzdi%"
    var_3 = maybe_3.filter(var_1)
    bool_0 = True
    maybe_4 = module_0.Maybe(str_0, bool_0)
    var_4 = maybe_4.map(maybe_4)
    bool_1 = maybe_4.__eq__(maybe_4)
    maybe_5 = module_0.Maybe(maybe_1, complex_0)
    bool_2 = maybe_2.__eq__(maybe_2)
    bool_3 = True
    var_5 = maybe_4.get_or_else(maybe_4)
    maybe_6 = module_0.Maybe(bool_3, bool_3)
    var_6 = maybe_6.to_lazy()
    var_7 = maybe_6.ap(bool_0)
    var_8 = maybe_6.bind(bool_3)
    var_9 = maybe_2.ap(var_6)
    var_10 = var_5.to_either()
    var_11 = var_5.filter(var_4)
    var_6.to_lazy()
