# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    str_0 = "Last[value={}]"
    maybe_0 = module_0.Maybe(str_0, str_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    maybe_1 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.filter(maybe_1)
    var_1 = var_0.filter(str_0)
    var_2 = var_0.map(maybe_1)
    str_0.bind(maybe_1)


def test_case_3():
    int_0 = 6518
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.to_box()
    none_type_0 = None
    var_1 = var_0.to_either()
    bool_1 = maybe_0.__eq__(var_0)
    var_1.ap(none_type_0)


def test_case_4():
    bool_0 = False
    complex_0 = 2387.811 - 2606.50069j
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_validation()
    bool_1 = False
    maybe_1 = module_0.Maybe(complex_0, bool_1)
    maybe_1.map(bool_0)


def test_case_5():
    none_type_0 = None
    int_0 = 688
    set_0 = {int_0}
    float_0 = 1645.413062
    maybe_0 = module_0.Maybe(float_0, float_0)
    var_0 = maybe_0.bind(float_0)
    var_1 = maybe_0.to_either()
    tuple_0 = (maybe_0, var_1, var_1)
    list_0 = [var_1, maybe_0, tuple_0]
    maybe_1 = module_0.Maybe(list_0, list_0)
    var_2 = maybe_1.get_or_else(set_0)
    var_2.ap(none_type_0)


def test_case_6():
    none_type_0 = None
    none_type_1 = None
    none_type_2 = None
    float_0 = 2903.39787
    maybe_0 = module_0.Maybe(float_0, float_0)
    var_0 = maybe_0.ap(none_type_2)
    var_1 = var_0.bind(none_type_1)
    var_2 = var_1.to_try()
    var_3 = var_2.map(none_type_0)
    var_3.to_box()


def test_case_7():
    str_0 = "Ps+$"
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    maybe_0 = module_0.Maybe(dict_0, none_type_0)
    maybe_0.ap(str_0)


def test_case_8():
    str_0 = "iKj`Vo7.Zyf_XVJ"
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.filter(str_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(str_0, bool_1)
    maybe_1.filter(bool_1)


def test_case_9():
    int_0 = 6518
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.to_box()
    none_type_0 = None
    var_1 = maybe_0.to_validation()
    var_2 = maybe_0.get_or_else(none_type_0)


def test_case_10():
    none_type_0 = None
    none_type_1 = None
    maybe_0 = module_0.Maybe(none_type_1, none_type_1)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.get_or_else(none_type_0)
    str_0 = "q(\re,i(=l@>]ExH"
    none_type_2 = None
    maybe_1 = module_0.Maybe(str_0, none_type_2)
    var_2 = maybe_1.to_lazy()
    var_1.bind(var_2)


def test_case_11():
    str_0 = "\n        Returns new ImmutableList with each element mapped into\n        result of argument called with each element of ImmutableList\n\n        :param fn: function to call with ImmutableList value\n        :type fn: Function(A) -> B\n        :returns: ImmutableList[B]\n        "
    dict_0 = {str_0: str_0, str_0: str_0}
    maybe_0 = module_0.Maybe(dict_0, dict_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_lazy()
    var_1.to_lazy()


def test_case_12():
    none_type_0 = None
    none_type_1 = None
    maybe_0 = module_0.Maybe(none_type_1, none_type_1)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.to_either()
    var_1.bind(none_type_0)


def test_case_13():
    tuple_0 = ()
    maybe_0 = module_0.Maybe(tuple_0, tuple_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_lazy()
    bool_1 = False
    maybe_1 = module_0.Maybe(bool_0, bool_1)
    var_2 = maybe_1.to_validation()
    var_3 = var_1.to_either()
    var_4 = var_2.to_box()
    var_5 = var_1.ap(bool_1)
    var_5.to_box()


def test_case_14():
    bytes_0 = b"x\xe3\xe9\x12u\x9a\xd0\xf7\r\xfa+\xa7\xae\x1a6\xd5"
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_validation()


def test_case_15():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    bool_1 = False
    maybe_0 = module_0.Maybe(dict_0, bool_1)
    var_0 = maybe_0.to_lazy()
    complex_0 = -2188.470948 - 2184.5914j
    complex_1 = -1007.5 - 90j
    bool_2 = True
    maybe_1 = module_0.Maybe(complex_1, bool_2)
    var_1 = maybe_1.get_or_else(complex_0)
    var_1.to_box()


def test_case_16():
    bytes_0 = b"\xd2\x13"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    none_type_0 = None
    bool_0 = True
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_1.to_try()
    var_1 = var_0.get_or_else(maybe_0)


def test_case_17():
    tuple_0 = ()
    maybe_0 = module_0.Maybe(tuple_0, tuple_0)
    var_0 = maybe_0.to_try()
    bool_0 = maybe_0.__eq__(var_0)
    var_0.filter(var_0)


def test_case_18():
    str_0 = "\tjN]Ya+u?"
    bytes_0 = b"N"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_validation()
    var_0.get_or_else(str_0)


def test_case_19():
    none_type_0 = None
    none_type_1 = None
    maybe_0 = module_0.Maybe(none_type_1, none_type_1)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.get_or_else(none_type_0)
    str_0 = "q(\re,i(=l@>]ExH"
    none_type_2 = None
    maybe_1 = module_0.Maybe(str_0, none_type_2)
    var_2 = maybe_1.to_lazy()
    var_3 = var_2.to_box()
    var_1.bind(var_2)


def test_case_20():
    int_0 = 0
    maybe_0 = module_0.Maybe(int_0, int_0)
    none_type_0 = None
    maybe_0.bind(none_type_0)


def test_case_21():
    bytes_0 = b"<wF"
    str_0 = "Last[value={}]"
    maybe_0 = module_0.Maybe(str_0, str_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    maybe_1 = module_0.Maybe(bytes_0, maybe_0)
    bool_1 = maybe_0.__eq__(maybe_1)
    var_0 = maybe_1.to_lazy()
    bool_2 = False
    var_1 = maybe_1.to_box()
    var_1.filter(bool_2)
