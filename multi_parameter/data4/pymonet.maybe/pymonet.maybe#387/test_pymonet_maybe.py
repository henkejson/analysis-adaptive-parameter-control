# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    maybe_0.ap(none_type_0)


def test_case_3():
    float_0 = 59.04312
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.ap(float_0)
    bool_1 = maybe_0.__eq__(var_0)
    var_0.filter(bool_0)


def test_case_4():
    complex_0 = 214.273 - 3590.07907j
    maybe_0 = module_0.Maybe(complex_0, complex_0)
    var_0 = maybe_0.filter(complex_0)
    bool_0 = False
    maybe_1 = module_0.Maybe(maybe_0, bool_0)
    var_1 = maybe_0.get_or_else(complex_0)
    var_2 = maybe_0.map(bool_0)
    maybe_1.filter(var_2)


def test_case_5():
    none_type_0 = None
    list_0 = [none_type_0]
    maybe_0 = module_0.Maybe(list_0, list_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.to_either()
    var_2 = var_0.to_lazy()
    var_3 = var_2.to_box()
    var_4 = var_3.to_either()
    var_5 = var_4.to_lazy()
    bool_0 = False
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    var_6 = maybe_1.to_try()
    var_7 = maybe_1.to_validation()
    var_8 = var_4.to_try()
    maybe_1.map(var_7)


def test_case_6():
    str_0 = "xC\noV[[q9"
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0]
    bool_0 = True
    tuple_1 = (tuple_0, list_0, tuple_0, bool_0)
    maybe_0 = module_0.Maybe(tuple_1, list_0)
    var_0 = maybe_0.bind(str_0)
    var_1 = var_0.to_validation()
    var_2 = var_1.to_either()
    var_3 = var_2.to_box()


def test_case_7():
    none_type_0 = None
    none_type_1 = None
    maybe_0 = module_0.Maybe(none_type_1, none_type_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_lazy()
    maybe_0.bind(var_1)


def test_case_8():
    complex_0 = 1018.33873 + 2349j
    maybe_0 = module_0.Maybe(complex_0, complex_0)
    var_0 = maybe_0.filter(complex_0)
    bool_0 = False
    maybe_1 = module_0.Maybe(maybe_0, bool_0)
    var_1 = maybe_0.ap(maybe_0)
    maybe_1.filter(maybe_0)


def test_case_9():
    complex_0 = 214.273 - 3590.07907j
    maybe_0 = module_0.Maybe(complex_0, complex_0)
    var_0 = maybe_0.filter(complex_0)
    bool_0 = False
    maybe_1 = module_0.Maybe(maybe_0, bool_0)
    maybe_1.filter(var_0)


def test_case_10():
    bool_0 = True
    str_0 = "\n        :param semigroup: other semigroup to concat\n        :type semigroup: First[B]\n        :returns: new First with first value\n        :rtype: First[A]\n        "
    set_0 = {str_0, str_0}
    bool_1 = True
    maybe_0 = module_0.Maybe(set_0, bool_1)
    var_0 = maybe_0.get_or_else(bool_0)


def test_case_11():
    int_0 = -2927
    list_0 = [int_0, int_0, int_0]
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.get_or_else(list_0)
    var_0.to_either()


def test_case_12():
    complex_0 = 2156.00053 + 887.004741j
    maybe_0 = module_0.Maybe(complex_0, complex_0)
    var_0 = maybe_0.filter(complex_0)
    bool_0 = False
    maybe_1 = module_0.Maybe(maybe_0, bool_0)
    var_1 = var_0.to_try()
    var_2 = maybe_0.to_either()
    maybe_1.filter(var_2)


def test_case_13():
    complex_0 = 1447 + 1052.864j
    bool_0 = False
    maybe_0 = module_0.Maybe(complex_0, bool_0)
    var_0 = maybe_0.to_either()
    var_0.get_or_else(var_0)


def test_case_14():
    complex_0 = 214.273 - 3590.07907j
    maybe_0 = module_0.Maybe(complex_0, complex_0)
    var_0 = maybe_0.filter(complex_0)
    bool_0 = False
    maybe_1 = module_0.Maybe(maybe_0, bool_0)
    var_1 = maybe_0.to_box()
    var_2 = maybe_0.map(bool_0)
    maybe_1.filter(var_2)


def test_case_15():
    complex_0 = 214.273 - 3590.07907j
    maybe_0 = module_0.Maybe(complex_0, complex_0)
    var_0 = maybe_0.filter(complex_0)
    bool_0 = False
    maybe_1 = module_0.Maybe(maybe_0, bool_0)
    var_1 = maybe_1.to_box()
    var_2 = maybe_0.map(bool_0)
    maybe_1.filter(var_2)


def test_case_16():
    complex_0 = 214.273 - 3590.07907j
    maybe_0 = module_0.Maybe(complex_0, complex_0)
    var_0 = maybe_0.filter(complex_0)
    bool_0 = False
    maybe_1 = module_0.Maybe(maybe_0, bool_0)
    var_1 = var_0.to_lazy()
    maybe_1.filter(var_0)


def test_case_17():
    str_0 = "V6UX\x0byu4_6fGb;\x0bpBbs"
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_validation()
    var_2 = var_1.to_lazy()
    bool_1 = False
    maybe_1 = module_0.Maybe(str_0, bool_1)
    var_3 = maybe_1.to_try()


def test_case_18():
    complex_0 = 2156.00053 + 887.004741j
    maybe_0 = module_0.Maybe(complex_0, complex_0)
    var_0 = maybe_0.filter(complex_0)
    bool_0 = False
    maybe_1 = module_0.Maybe(maybe_0, bool_0)
    var_1 = var_0.to_try()
    var_2 = maybe_0.map(bool_0)
    maybe_1.filter(var_2)


def test_case_19():
    int_0 = -2718
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_0.filter(int_0)


def test_case_20():
    complex_0 = 3773.553357 - 603.860929j
    bool_0 = False
    maybe_0 = module_0.Maybe(complex_0, bool_0)
    var_0 = maybe_0.to_validation()


def test_case_21():
    list_0 = []
    complex_0 = 1052.28346 - 2107.83j
    list_1 = [complex_0]
    list_2 = [list_1]
    maybe_0 = module_0.Maybe(list_2, complex_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_box()
    var_1.get_or_else(list_0)


def test_case_22():
    complex_0 = 214.273 - 3590.07907j
    maybe_0 = module_0.Maybe(complex_0, complex_0)
    var_0 = maybe_0.filter(complex_0)
    bool_0 = False
    maybe_1 = module_0.Maybe(maybe_0, bool_0)
    var_1 = maybe_0.get_or_else(complex_0)
    bool_1 = maybe_1.__eq__(maybe_1)
    maybe_1.filter(var_1)


def test_case_23():
    none_type_0 = None
    float_0 = 788.0
    maybe_0 = module_0.Maybe(float_0, float_0)
    var_0 = maybe_0.ap(none_type_0)
    bool_0 = var_0.__eq__(maybe_0)
    var_1 = maybe_0.get_or_else(bool_0)
    var_2 = var_0.filter(var_0)
    maybe_1 = module_0.Maybe(none_type_0, maybe_0)
    var_1.to_validation()
