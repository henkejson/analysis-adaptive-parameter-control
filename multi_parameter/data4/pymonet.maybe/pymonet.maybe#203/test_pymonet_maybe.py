# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1


def test_case_0():
    str_0 = '?7qOe"Vg`\x0b3k\x0bG\\OUq!'
    maybe_0 = module_0.Maybe(str_0, str_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = maybe_1.__eq__(maybe_0)
    maybe_2 = module_0.Maybe(none_type_0, none_type_0)


def test_case_3():
    none_type_0 = None
    generic_0 = module_1.Generic()
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_either()
    bool_0 = maybe_0.__eq__(generic_0)
    bool_1 = maybe_0.__eq__(generic_0)
    var_2 = var_0.bind(bool_0)
    var_1.bind(generic_0)


def test_case_4():
    bool_0 = True
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.map(bool_0)
    var_1 = var_0.ap(bool_0)
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    var_2 = maybe_1.to_try()
    var_2.to_box()


def test_case_5():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    maybe_0.map(none_type_0)


def test_case_6():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    none_type_0 = None
    bool_2 = True
    var_0 = maybe_1.get_or_else(maybe_1)
    var_1 = maybe_1.filter(var_0)
    var_2 = maybe_0.to_try()
    var_3 = maybe_1.bind(var_2)
    maybe_2 = module_0.Maybe(none_type_0, bool_2)
    var_4 = maybe_2.to_box()
    maybe_3 = module_0.Maybe(none_type_0, maybe_2)
    var_5 = maybe_0.bind(var_4)


def test_case_7():
    dict_0 = {}
    generic_0 = module_1.Generic(**dict_0)
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.bind(generic_0)


def test_case_8():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.ap(none_type_0)


def test_case_9():
    bool_0 = False
    str_0 = "r>\n\x0b3axfm; \x0c9\tj(d"
    bool_1 = True
    bool_2 = True
    maybe_0 = module_0.Maybe(bool_1, bool_2)
    var_0 = maybe_0.filter(str_0)
    var_1 = var_0.to_box()
    bool_3 = var_1.__eq__(bool_0)


def test_case_10():
    bytes_0 = b"\xa9\x8f\xcd\xc4u\xa2"
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_0.filter(bytes_0)


def test_case_11():
    tuple_0 = ()
    bool_0 = True
    maybe_0 = module_0.Maybe(tuple_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.to_validation()
    var_2 = maybe_0.filter(var_1)
    var_3 = var_2.get_or_else(var_0)
    bool_1 = var_1.__eq__(var_3)


def test_case_12():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.get_or_else(none_type_0)
    var_0.to_lazy()


def test_case_13():
    str_0 = "\x0c>j@}f,uX@+qXW\x0bP<e"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.to_either()


def test_case_14():
    int_0 = 0
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_try()
    var_2 = var_0.to_lazy()


def test_case_15():
    tuple_0 = ()
    bool_0 = True
    maybe_0 = module_0.Maybe(tuple_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.to_validation()
    maybe_1 = module_0.Maybe(var_1, var_1)
    var_1.to_validation()


def test_case_16():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.to_validation()


def test_case_17():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_1.get_or_else(bool_1)
    var_1 = maybe_0.filter(maybe_0)
    var_2 = var_1.ap(var_0)
    var_3 = var_2.to_lazy()
    var_4 = var_1.to_try()
    var_5 = maybe_0.bind(var_0)
    maybe_2 = module_0.Maybe(maybe_1, var_0)
    bool_2 = True
    maybe_3 = module_0.Maybe(maybe_2, bool_2)
    var_0.bind(maybe_1)


def test_case_18():
    bool_0 = False
    str_0 = "r>\n\x0b3axfm; \x0c9\tj(d"
    maybe_0 = module_0.Maybe(str_0, str_0)
    var_0 = maybe_0.to_try()
    bool_1 = False
    bool_2 = True
    maybe_1 = module_0.Maybe(bool_1, bool_2)
    var_1 = maybe_1.filter(str_0)
    var_2 = var_1.to_box()
    bool_3 = var_2.__eq__(bool_0)


def test_case_19():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_1 = module_0.Maybe(maybe_0, maybe_0)
    var_0 = maybe_0.to_try()
    bool_1 = maybe_0.__eq__(var_0)
    none_type_0 = None
    var_1 = var_0.get_or_else(none_type_0)
    maybe_2 = module_0.Maybe(var_1, var_1)
    maybe_2.filter(var_0)


def test_case_20():
    complex_0 = -319 + 484.399j
    dict_0 = {complex_0: complex_0, complex_0: complex_0, complex_0: complex_0}
    maybe_0 = module_0.Maybe(dict_0, dict_0)
    var_0 = maybe_0.to_validation()
    var_1 = var_0.to_try()
    var_1.ap(maybe_0)


def test_case_21():
    bytes_0 = b"(\xd2\x98`C\x9a\x84%\xabG\x83\x94%\xe1\x1d\xfa\xbc\x82\x80\xab"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.map(bytes_0)
    maybe_1 = module_0.Maybe(maybe_0, maybe_0)
    var_1 = maybe_0.get_or_else(maybe_0)
    var_2 = var_0.to_validation()
    var_3 = var_0.map(var_2)
    var_4 = maybe_0.to_lazy()
    bool_0 = var_0.__eq__(maybe_0)
    var_5 = var_4.to_try()
    var_5.to_lazy()
