# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import builtins as module_1
import typing as module_2


def test_case_0():
    bytes_0 = b"\xfe;gk6"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    object_0 = module_1.object()
    maybe_0 = module_0.Maybe(object_0, object_0)
    bool_0 = False
    maybe_1 = module_0.Maybe(object_0, bool_0)
    var_0 = maybe_0.ap(maybe_0)
    var_1 = maybe_0.bind(var_0)
    bool_1 = maybe_1.__eq__(maybe_1)
    bool_2 = maybe_1.__eq__(object_0)
    bool_3 = True
    maybe_1.map(bool_3)


def test_case_3():
    bool_0 = False
    float_0 = -202.0
    bool_1 = True
    maybe_0 = module_0.Maybe(float_0, bool_1)
    var_0 = maybe_0.map(bool_0)
    var_1 = var_0.to_lazy()
    var_2 = var_1.to_validation()


def test_case_4():
    str_0 = "\n        Applies the function inside the Maybe[A] structure to another applicative type for notempty Maybe.\n        For empty returns copy of itself\n\n        :param applicative: applicative contains function\n        :type applicative: Maybe[B]\n        :returns: new Maybe with result of contains function\n        :rtype: Maybe[A(B) | None]\n        "
    dict_0 = {str_0: str_0}
    bool_0 = False
    maybe_0 = module_0.Maybe(dict_0, bool_0)
    maybe_0.ap(maybe_0)


def test_case_5():
    int_0 = 0
    float_0 = 1049.349
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    maybe_0 = module_0.Maybe(dict_0, int_0)
    bool_0 = True
    maybe_1 = module_0.Maybe(dict_0, bool_0)
    var_0 = maybe_1.bind(int_0)


def test_case_6():
    bytes_0 = b"a\x9f\xad]7\x15j]\xbb!\x06\x95\x91%\xd7("
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.bind(bytes_0)


def test_case_7():
    str_0 = '`^r9vfX[<nUk-,heMj"='
    str_1 = "1fBn pN%]tl"
    bool_0 = True
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_1, bool_1)
    var_0 = maybe_0.to_box()
    maybe_1 = module_0.Maybe(str_1, bool_0)
    var_1 = maybe_1.ap(var_0)
    var_2 = maybe_1.filter(str_0)
    var_3 = var_2.filter(var_0)


def test_case_8():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.filter(maybe_0)


def test_case_9():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0}
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.get_or_else(dict_0)
    var_0.to_validation()


def test_case_10():
    bool_0 = False
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.get_or_else(none_type_0)
    var_0.to_box()


def test_case_11():
    int_0 = -3048
    list_0 = [int_0]
    float_0 = -3565.9614
    maybe_0 = module_0.Maybe(float_0, float_0)
    var_0 = maybe_0.to_either()
    var_0.filter(list_0)


def test_case_12():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    dict_1 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: dict_0}
    maybe_0 = module_0.Maybe(dict_1, bool_0)
    var_0 = maybe_0.to_either()
    list_0 = [var_0, var_0, dict_0, dict_0]
    module_2.Generic(**list_0)


def test_case_13():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_lazy()
    var_1.to_lazy()


def test_case_14():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.get_or_else(none_type_0)
    maybe_1 = module_0.Maybe(maybe_0, var_0)
    var_0.map(var_1)


def test_case_15():
    generic_0 = module_2.Generic()
    list_0 = [generic_0, generic_0, generic_0]
    bytes_0 = b"\xfe;g\xaa6"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_lazy()
    bool_0 = var_0.__eq__(list_0)


def test_case_16():
    int_0 = 0
    str_0 = '`^r9vfX[<nUk-,heMj"='
    maybe_0 = module_0.Maybe(str_0, int_0)
    var_0 = maybe_0.to_lazy()
    var_0.to_lazy()


def test_case_17():
    float_0 = 506.420523
    maybe_0 = module_0.Maybe(float_0, float_0)
    none_type_0 = None
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.to_either()
    var_2 = maybe_0.map(var_1)
    bool_0 = True
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    var_3 = maybe_1.to_lazy()
    var_4 = maybe_0.filter(maybe_0)
    var_5 = var_4.map(var_3)
    var_6 = maybe_1.to_try()
    var_7 = maybe_0.get_or_else(var_6)
    var_8 = maybe_1.filter(float_0)
    var_9 = maybe_1.to_validation()
    var_10 = var_0.to_lazy()
    var_11 = var_10.ap(var_1)
    maybe_2 = module_0.Maybe(var_1, var_7)
    var_12 = var_3.to_box()
    var_13 = var_12.to_lazy()
    var_11.to_either()


def test_case_18():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_try()


def test_case_19():
    bytes_0 = b"Oqn\xfer\xe1\xff\xa5k\xa4h\xaf\xd3C#\xbed\x86\xb3"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    var_0 = maybe_0.to_validation()
    var_0.map(bytes_0)


def test_case_20():
    none_type_0 = None
    bool_0 = False
    var_0 = module_0.Maybe(none_type_0, bool_0)
    var_1 = var_0.to_validation()
    var_0.filter(var_1)


def test_case_21():
    float_0 = 506.420523
    maybe_0 = module_0.Maybe(float_0, float_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.map(float_0)
    var_2 = maybe_0.to_either()
    var_3 = maybe_0.map(var_2)
    bool_0 = False
    bool_1 = maybe_0.__eq__(maybe_0)
    maybe_1 = module_0.Maybe(var_1, bool_0)
    var_4 = maybe_1.to_lazy()
    var_5 = maybe_0.filter(maybe_0)
    var_6 = maybe_1.to_try()
    var_7 = maybe_0.get_or_else(var_6)
    var_8 = var_4.to_either()
    maybe_1.filter(float_0)


def test_case_22():
    float_0 = 3.9825
    maybe_0 = module_0.Maybe(float_0, float_0)
    var_0 = maybe_0.to_box()
    bool_0 = False
    bool_1 = maybe_0.__eq__(maybe_0)
    maybe_1 = module_0.Maybe(var_0, bool_0)
    var_1 = maybe_0.filter(maybe_0)
    maybe_1.filter(float_0)


def test_case_23():
    float_0 = 506.420523
    maybe_0 = module_0.Maybe(float_0, float_0)
    none_type_0 = None
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.to_either()
    var_2 = maybe_0.map(var_1)
    bool_0 = True
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    var_3 = maybe_1.to_lazy()
    var_4 = maybe_0.filter(maybe_0)
    var_5 = var_4.map(var_3)
    generic_0 = module_2.Generic()
    bool_1 = var_5.__eq__(generic_0)
    var_6 = var_4.to_try()
    bool_2 = maybe_0.__eq__(maybe_1)
    var_7 = maybe_0.map(var_3)
    var_8 = var_6.bind(maybe_1)
    var_9 = maybe_1.to_try()
    var_10 = var_8.bind(var_6)
    var_10.to_try()
