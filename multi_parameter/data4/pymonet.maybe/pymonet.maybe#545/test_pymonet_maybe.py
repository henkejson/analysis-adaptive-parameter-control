# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0
import typing as module_1


def test_case_0():
    str_0 = "\t0C"
    maybe_0 = module_0.Maybe(str_0, str_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    bytes_0 = b"\xf1\x1a\x8a\xd1A\x1aE\xfb"
    bytes_1 = b"\x02\xa8\x99\xb2"
    tuple_0 = (bytes_0, bytes_1)
    maybe_0 = module_0.Maybe(tuple_0, tuple_0)
    var_0 = maybe_0.ap(tuple_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_1 = maybe_0.to_lazy()
    tuple_0.to_validation()


def test_case_3():
    none_type_0 = None
    int_0 = -3902
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.ap(none_type_0)
    bool_0 = var_1.__eq__(var_1)
    var_2 = maybe_0.to_lazy()
    bool_1 = var_1.__eq__(bool_0)
    var_3 = var_0.to_either()
    var_4 = maybe_0.to_either()
    var_5 = var_4.bind(var_0)
    var_6 = var_0.to_lazy()


def test_case_4():
    none_type_0 = None
    none_type_1 = None
    int_0 = 814
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.bind(none_type_1)
    var_1 = var_0.map(none_type_0)
    maybe_1 = module_0.Maybe(var_1, none_type_0)


def test_case_5():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    none_type_0 = None
    maybe_0.map(none_type_0)


def test_case_6():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_0.ap(bool_0)


def test_case_7():
    bool_0 = True
    generic_0 = module_1.Generic()
    bool_1 = True
    maybe_0 = module_0.Maybe(generic_0, bool_1)
    var_0 = maybe_0.filter(bool_0)
    var_1 = var_0.to_box()


def test_case_8():
    bool_0 = True
    tuple_0 = (bool_0,)
    bytes_0 = b"\xd9\xb588\x98\xef\xa9\xe5\x15\xb7b\x9e^\xdaR\x8b\x97"
    bool_1 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_1)
    maybe_0.filter(tuple_0)


def test_case_9():
    none_type_0 = None
    int_0 = -3913
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.ap(none_type_0)
    bool_0 = var_1.__eq__(var_1)
    var_2 = maybe_0.to_lazy()
    var_3 = var_1.ap(var_1)
    var_4 = var_1.get_or_else(bool_0)
    var_4.bind(var_1)


def test_case_10():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_either()
    maybe_1 = module_0.Maybe(none_type_0, bool_0)
    var_1 = maybe_1.get_or_else(none_type_0)
    var_1.to_either()


def test_case_11():
    none_type_0 = None
    int_0 = -3913
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.ap(none_type_0)
    bool_0 = var_1.__eq__(var_1)
    var_2 = maybe_0.to_lazy()
    bool_1 = var_0.__eq__(var_1)
    var_3 = maybe_0.to_either()
    var_4 = var_1.bind(maybe_0)
    var_5 = maybe_0.to_lazy()


def test_case_12():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    maybe_0 = module_0.Maybe(dict_0, bool_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_try()
    var_1.ap(bool_0)


def test_case_13():
    str_0 = "\t0C"
    maybe_0 = module_0.Maybe(str_0, str_0)
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0}
    tuple_1 = (dict_0,)
    maybe_1 = module_0.Maybe(tuple_1, tuple_0)
    var_0 = maybe_1.to_box()
    var_1 = var_0.to_lazy()
    var_2 = var_1.map(maybe_0)


def test_case_14():
    bytes_0 = b"\xfb\x8b)BK\xff\xd2\x99H\x90\xd4!^"
    int_0 = -1000
    none_type_0 = None
    maybe_0 = module_0.Maybe(int_0, none_type_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_try()
    var_1.filter(bytes_0)


def test_case_15():
    none_type_0 = None
    int_0 = -3913
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.ap(none_type_0)
    bool_0 = var_1.__eq__(var_1)
    var_2 = maybe_0.to_lazy()
    bool_1 = var_1.__eq__(var_1)
    var_3 = maybe_0.to_either()
    var_4 = maybe_0.to_either()
    var_5 = var_4.bind(var_3)
    var_6 = var_1.to_try()


def test_case_16():
    generic_0 = module_1.Generic()
    bool_0 = False
    maybe_0 = module_0.Maybe(generic_0, bool_0)
    var_0 = maybe_0.to_try()
    var_0.to_either()


def test_case_17():
    bytes_0 = b"\xf1\x1a\x8a\xd1A\x1aE\xfb"
    bytes_1 = b"\x02\xa8\x99\xb2"
    tuple_0 = (bytes_0, bytes_1)
    maybe_0 = module_0.Maybe(tuple_0, tuple_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.ap(tuple_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_2 = maybe_0.to_lazy()
    var_3 = var_1.bind(var_2)


def test_case_18():
    dict_0 = {}
    maybe_0 = module_0.Maybe(dict_0, dict_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.ap(dict_0)
    var_2 = maybe_0.to_validation()
    bool_0 = False
    maybe_1 = module_0.Maybe(dict_0, bool_0)
    var_3 = maybe_1.to_lazy()
    var_4 = var_3.to_box()
    var_5 = var_1.to_try()
    var_6 = maybe_1.to_either()
    var_7 = maybe_1.to_box()
    var_8 = var_3.map(var_4)
    var_9 = var_3.to_either()
    var_10 = var_7.to_either()
    var_11 = maybe_0.to_box()
    var_10.filter(var_7)


def test_case_19():
    none_type_0 = None
    int_0 = -3913
    maybe_0 = module_0.Maybe(int_0, int_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.ap(none_type_0)
    bool_0 = var_1.__eq__(var_1)
    var_2 = maybe_0.to_lazy()
    bool_1 = var_1.__eq__(var_1)
    var_3 = maybe_0.to_either()
    var_4 = maybe_0.to_either()
    var_5 = var_4.bind(var_3)
    var_6 = var_2.to_try()


def test_case_20():
    none_type_0 = None
    list_0 = [none_type_0]
    maybe_0 = module_0.Maybe(list_0, list_0)
    var_0 = maybe_0.filter(none_type_0)
    bool_0 = maybe_0.__eq__(var_0)
    var_1 = var_0.ap(none_type_0)
    var_2 = var_1.map(var_1)
    var_3 = var_1.ap(none_type_0)
    var_4 = var_1.to_box()
    var_5 = var_3.to_either()
    var_5.to_either()


def test_case_21():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.filter(bool_0)
    var_1 = maybe_0.to_validation()
    var_2 = var_0.to_box()
    bool_1 = var_0.__eq__(var_2)
    bool_2 = var_0.__eq__(bool_0)
    str_0 = "P7N+@::Mc<QP\rw&,{\n"
    bool_3 = maybe_0.__eq__(bool_0)
    var_3 = maybe_0.to_lazy()
    list_0 = [bool_0, str_0, str_0]
    maybe_1 = module_0.Maybe(list_0, bool_0)
    var_4 = var_0.to_either()
    dict_0 = {}
    maybe_2 = module_0.Maybe(var_1, dict_0)
    var_5 = maybe_1.to_lazy()
    var_6 = maybe_1.ap(var_5)
    var_7 = var_0.filter(var_6)
    var_8 = var_7.to_either()
    var_9 = var_5.to_validation()
    var_10 = var_9.to_box()
    none_type_0 = None
    var_11 = maybe_1.ap(none_type_0)
    var_12 = var_6.bind(maybe_0)
    maybe_3 = module_0.Maybe(var_2, bool_3)
    var_13 = maybe_2.ap(var_11)
    var_14 = var_5.to_try()
    var_15 = var_3.bind(var_6)
    var_16 = var_10.to_either()
    var_17 = var_0.to_either()
    int_0 = 244
    bool_4 = False
    maybe_4 = module_0.Maybe(var_0, bool_4)
    maybe_4.bind(int_0)


def test_case_22():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.to_validation()
    var_2 = var_0.to_box()
    bool_1 = var_0.__eq__(var_2)
    bool_2 = var_0.__eq__(bool_0)
    bool_3 = maybe_0.__eq__(maybe_0)
    str_0 = "P7N+@::Mc<QP\rw&,{\n"
    bool_4 = maybe_0.__eq__(bool_0)
    var_3 = maybe_0.to_lazy()
    list_0 = [bool_0, str_0, str_0]
    maybe_1 = module_0.Maybe(list_0, bool_0)
    var_0.to_either()
