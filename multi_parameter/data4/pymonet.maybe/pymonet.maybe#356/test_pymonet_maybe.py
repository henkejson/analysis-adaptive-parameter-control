# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    int_0 = -3406
    maybe_0 = module_0.Maybe(int_0, int_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    none_type_0 = None
    bytes_0 = b",3\xdbF\x82\xe4\x1b\x9c\x8c/\x83\xd0\xd9\xc8N\xc1\x1d"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    maybe_0 = module_0.Maybe(dict_0, dict_0)
    var_0 = maybe_0.map(none_type_0)
    bool_0 = var_0.__eq__(var_0)
    var_1 = maybe_0.map(var_0)
    bool_1 = maybe_0.__eq__(var_0)
    var_2 = var_1.ap(bytes_0)
    bool_2 = maybe_0.__eq__(var_0)
    var_3 = maybe_0.to_either()
    var_4 = var_0.filter(dict_0)
    var_5 = maybe_0.to_box()
    var_6 = maybe_0.to_lazy()
    var_7 = maybe_0.to_either()
    var_8 = var_4.to_lazy()
    var_9 = var_0.bind(var_8)
    var_10 = var_5.to_validation()
    var_11 = var_0.to_validation()
    var_12 = var_8.to_box()
    var_13 = var_3.to_validation()
    var_14 = var_7.to_lazy()
    var_15 = var_0.get_or_else(var_14)


def test_case_3():
    bytes_0 = b"\xc2A\xfa=\xfb\x9f10\xe0\xeaS\xd2-;\xb3\x8e\x7f\xcc[\xbf"
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_1 = module_0.Maybe(bytes_0, maybe_0)
    bool_1 = maybe_0.__eq__(bool_0)
    var_0 = maybe_1.filter(bool_0)
    var_1 = maybe_0.get_or_else(maybe_0)
    maybe_0.filter(var_1)


def test_case_4():
    bool_0 = False
    bytes_0 = b"$\x95\xbe6x\x03\xb9\xb5q("
    bool_1 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_1)
    bool_2 = False
    maybe_1 = module_0.Maybe(bool_1, bool_2)
    var_0 = maybe_0.map(bool_0)
    var_1 = maybe_0.to_try()
    var_2 = var_0.map(var_1)
    var_3 = maybe_0.to_either()
    var_4 = var_0.filter(var_3)
    var_5 = var_2.to_validation()


def test_case_5():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_try()
    maybe_0.map(none_type_0)


def test_case_6():
    bytes_0 = b"\xc2A\xfa=\xfb\x9f10\xe0\xeaS\xd2-;\xb3\x8e\x7f\xcc[\xbf"
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_1 = module_0.Maybe(bytes_0, maybe_0)
    bool_1 = maybe_0.__eq__(bool_0)
    var_0 = maybe_1.filter(bool_0)
    var_1 = maybe_1.bind(bool_1)
    var_2 = var_1.get_or_else(var_1)
    maybe_2 = module_0.Maybe(bytes_0, bool_0)
    maybe_2.filter(var_2)


def test_case_7():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.ap(maybe_0)
    var_1 = var_0.ap(bool_0)


def test_case_8():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.ap(none_type_0)


def test_case_9():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.filter(maybe_0)


def test_case_10():
    none_type_0 = None
    bytes_0 = b"S\x0e&\xc0\x8cX\x97"
    none_type_1 = None
    maybe_0 = module_0.Maybe(bytes_0, none_type_1)
    maybe_0.filter(none_type_0)


def test_case_11():
    tuple_0 = ()
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.get_or_else(tuple_0)
    var_0.to_box()


def test_case_12():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_either()


def test_case_13():
    bool_0 = True
    int_0 = 1
    bool_1 = True
    maybe_0 = module_0.Maybe(int_0, bool_1)
    var_0 = maybe_0.to_box()
    var_0.map(bool_0)


def test_case_14():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_try()
    var_1 = maybe_0.to_either()
    var_2 = maybe_0.to_box()
    var_3 = var_2.to_lazy()
    var_3.get_or_else(var_3)


def test_case_15():
    bytes_0 = b"_\x13q{\x08NnNO\xe4\xbe\x84\xe9\xa9\x19:\x95"
    str_0 = "\n        Transform Either to Try.\n\n        :returns: resolved Try monad with previous value. Right is resolved successfully, Left not.\n        :rtype: Box[A]\n        "
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.filter(bytes_0)
    var_1 = maybe_0.to_lazy()
    var_2 = maybe_0.map(var_1)
    var_1.to_lazy()


def test_case_16():
    bool_0 = True
    bool_1 = False
    maybe_0 = module_0.Maybe(bool_1, bool_1)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_validation()
    var_1.ap(bool_0)


def test_case_17():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_try()


def test_case_18():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_0.ap(bool_0)


def test_case_19():
    bool_0 = True
    int_0 = 3277
    bool_1 = False
    maybe_0 = module_0.Maybe(int_0, bool_1)
    var_0 = maybe_0.to_validation()
    var_1 = var_0.to_lazy()
    bool_2 = var_1.__eq__(bool_0)


def test_case_20():
    bytes_0 = b"_\x13q{\x08NnNO\xe4\xbe\x84\xe9\xa9\x19:\x95"
    str_0 = "\n        Transform Either to Try.\n\n        :returns: resolved Try monad with previous value. Right is resolved successfully, Left not.\n        :rtype: Box[A]\n        "
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.filter(bytes_0)
    float_0 = -1526.0
    list_0 = [float_0]
    tuple_0 = (float_0, list_0, var_0)
    maybe_1 = module_0.Maybe(var_0, tuple_0)
    var_1 = maybe_0.to_lazy()
    var_2 = maybe_0.map(var_1)
    var_3 = maybe_1.to_either()
    var_4 = var_3.to_lazy()
    var_5 = var_4.to_either()
    var_6 = var_1.to_box()
    var_7 = var_5.to_box()
    var_7.to_box()


def test_case_21():
    float_0 = 2260.8
    bool_0 = False
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_either()
    bool_1 = maybe_0.__eq__(maybe_0)
    maybe_1 = module_0.Maybe(float_0, bool_0)
    var_1 = maybe_1.to_either()
    var_2 = var_1.to_try()
    var_3 = maybe_1.to_either()
    var_1.to_either()


def test_case_22():
    complex_0 = -1117 - 1823.0791j
    bytes_0 = b"\xc2A\xfa=\xfb\x9f10\xe0\xeaS\xd2-;\xb3\x8e\x7f\xcc[\xbf"
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_1 = module_0.Maybe(bytes_0, maybe_0)
    bool_1 = maybe_0.__eq__(bool_0)
    var_0 = maybe_1.to_validation()
    var_1 = maybe_1.bind(var_0)
    var_2 = var_1.to_either()
    var_3 = maybe_0.to_lazy()
    bool_2 = True
    maybe_2 = module_0.Maybe(complex_0, bool_2)
    maybe_3 = module_0.Maybe(bytes_0, bool_0)
    var_4 = var_2.to_validation()
    maybe_3.bind(maybe_3)
