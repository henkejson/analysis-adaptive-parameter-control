# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    int_0 = -1509
    maybe_0 = module_0.Maybe(int_0, int_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    maybe_1 = module_0.Maybe(none_type_0, bool_1)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.map(var_0)
    var_2 = var_1.ap(maybe_1)
    var_3 = var_1.to_box()
    bool_2 = var_1.__eq__(bool_1)
    var_3.filter(var_2)


def test_case_3():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.get_or_else(none_type_0)
    var_1 = maybe_0.to_either()
    bool_0 = maybe_0.__eq__(var_0)
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_2 = maybe_1.to_try()
    var_2.to_validation()


def test_case_4():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = maybe_0.__eq__(none_type_0)
    var_0 = maybe_0.map(bool_0)
    var_1 = maybe_0.to_box()
    bool_2 = maybe_0.__eq__(none_type_0)
    var_2 = maybe_0.filter(maybe_0)
    var_3 = maybe_0.ap(none_type_0)
    var_4 = var_2.ap(maybe_0)


def test_case_5():
    str_0 = "DIl\r-?"
    float_0 = 312.063433
    bool_0 = False
    maybe_0 = module_0.Maybe(float_0, bool_0)
    bool_1 = maybe_0.__eq__(str_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    maybe_1.map(maybe_1)


def test_case_6():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.bind(bool_0)
    var_1 = var_0.bind(none_type_0)
    var_2 = maybe_0.get_or_else(var_1)
    var_3 = maybe_0.to_box()
    var_4 = var_1.filter(var_3)
    bool_1 = var_0.__eq__(var_4)
    var_5 = var_4.to_lazy()
    bool_2 = maybe_0.__eq__(var_5)
    var_6 = var_4.to_either()
    maybe_1.filter(var_2)


def test_case_7():
    float_0 = -1925.9003
    bool_0 = False
    maybe_0 = module_0.Maybe(float_0, bool_0)
    maybe_0.bind(bool_0)


def test_case_8():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.ap(none_type_0)
    var_1 = var_0.filter(none_type_0)
    bool_1 = var_1.ap(var_0)
    maybe_1.filter(maybe_0)


def test_case_9():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    none_type_0 = None
    maybe_0.ap(none_type_0)


def test_case_10():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.filter(none_type_0)
    maybe_1.filter(maybe_0)


def test_case_11():
    str_0 = "&uE?1mV;?}UAoxlb6-eB"
    bytes_0 = b"J\xa6\xf6\x05\t\xd6"
    maybe_0 = module_0.Maybe(bytes_0, bytes_0)
    bool_0 = True
    maybe_1 = module_0.Maybe(maybe_0, bool_0)
    var_0 = maybe_1.filter(str_0)
    var_1 = var_0.to_validation()
    list_0 = [var_1]
    none_type_0 = None
    none_type_1 = None
    int_0 = -4745
    maybe_2 = module_0.Maybe(none_type_1, int_0)
    var_2 = maybe_2.get_or_else(none_type_0)
    var_2.ap(list_0)


def test_case_12():
    str_0 = "KyD"
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_try()
    maybe_1 = module_0.Maybe(var_1, var_0)
    var_2 = maybe_1.to_either()
    var_2.to_either()


def test_case_13():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_either()
    var_1 = var_0.to_try()
    var_1.to_either()


def test_case_14():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_box()
    none_type_0 = None
    var_1 = maybe_0.ap(none_type_0)
    var_0.to_box()


def test_case_15():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_validation()
    var_2 = var_1.to_lazy()
    tuple_0 = ()
    bool_1 = False
    maybe_1 = module_0.Maybe(tuple_0, bool_1)
    maybe_1.bind(var_2)


def test_case_16():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_0.get_or_else(none_type_0)


def test_case_17():
    str_0 = "\n        Take function, store it and call with Task value during calling fork function.\n        Return new Task with result of called.\n\n        :param fn: mapper function\n        :type fn: Function(value) -> B\n        :returns: new Task with mapped resolve attribute\n        :rtype: Task[Function(resolve, reject -> A | B]\n        "
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.to_either()
    var_1.to_either()


def test_case_18():
    list_0 = []
    str_0 = "\n    Perform left-to-right function composition.\n\n    :param value: argument of first applied function\n    :type value: Any\n    :param functions: list of functions to applied from left-to-right\n    :type functions: List[Function]\n    :returns: result of all functions\n    :rtype: Any\n    "
    maybe_0 = module_0.Maybe(list_0, str_0)
    var_0 = maybe_0.to_try()
    list_0.get_or_else(list_0)


def test_case_19():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_try()
    var_0.to_try()


def test_case_20():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.filter(none_type_0)
    var_1 = maybe_0.to_validation()
    maybe_1.filter(maybe_0)


def test_case_21():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_1.to_validation()
    var_1 = maybe_0.ap(none_type_0)
    var_2 = var_1.filter(none_type_0)
    bool_1 = var_0.__eq__(var_2)
    maybe_1.filter(maybe_0)


def test_case_22():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_try()
    var_0.map(none_type_0)


def test_case_23():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_1.to_validation()
    var_1 = maybe_0.ap(none_type_0)
    var_2 = maybe_0.to_box()
    var_3 = var_1.filter(var_2)
    bool_1 = var_0.__eq__(var_3)
    bool_2 = maybe_0.__eq__(maybe_1)
    var_4 = var_3.to_either()
    maybe_1.filter(maybe_0)
