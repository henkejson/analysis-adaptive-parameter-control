# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pymonet.maybe as module_0


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)


def test_case_2():
    int_0 = 1
    bytes_0 = b"\x0cO\xbbW]\x11\xf9\xe7\x88\x86\x0b\x15"
    maybe_0 = module_0.Maybe(int_0, bytes_0)
    var_0 = maybe_0.to_box()
    maybe_1 = module_0.Maybe(bytes_0, bytes_0)
    var_1 = maybe_1.filter(int_0)
    bool_0 = maybe_1.__eq__(maybe_1)
    var_2 = maybe_1.map(int_0)
    var_3 = maybe_0.to_try()
    var_4 = maybe_0.to_box()
    tuple_0 = ()
    var_5 = var_4.to_validation()
    var_6 = var_5.to_try()
    maybe_2 = module_0.Maybe(tuple_0, tuple_0)
    var_7 = maybe_2.to_lazy()
    var_8 = var_7.to_validation()
    var_0.get_or_else(tuple_0)


def test_case_3():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.get_or_else(bool_0)
    bool_1 = maybe_0.__eq__(var_0)
    var_1 = maybe_0.filter(var_0)
    var_2 = var_1.get_or_else(bool_1)
    var_3 = maybe_0.filter(var_0)
    bool_2 = False
    maybe_1 = module_0.Maybe(var_0, bool_2)
    maybe_1.filter(var_2)


def test_case_4():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_validation()
    bool_1 = maybe_0.__eq__(bool_0)
    var_1 = maybe_0.get_or_else(bool_0)
    var_2 = maybe_0.to_validation()
    var_3 = maybe_0.map(var_2)
    var_4 = var_3.filter(maybe_0)
    var_5 = maybe_0.to_try()
    var_6 = var_5.get_or_else(bool_1)
    var_7 = maybe_0.to_try()
    var_8 = var_4.ap(var_6)
    var_9 = maybe_0.filter(var_7)
    bool_2 = False
    maybe_1 = module_0.Maybe(var_7, bool_2)
    maybe_1.filter(var_8)


def test_case_5():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    maybe_0.map(none_type_0)


def test_case_6():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.get_or_else(bool_0)
    bool_1 = maybe_0.__eq__(var_0)
    var_1 = maybe_0.filter(var_0)
    var_2 = var_1.get_or_else(bool_1)
    var_3 = maybe_0.bind(maybe_0)
    var_4 = maybe_0.filter(var_0)
    bool_2 = False
    maybe_1 = module_0.Maybe(var_0, bool_2)
    maybe_1.filter(var_2)


def test_case_7():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.to_try()
    maybe_0.bind(var_0)


def test_case_8():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_validation()
    var_1 = maybe_0.ap(bool_0)
    var_2 = var_1.filter(bool_0)


def test_case_9():
    int_0 = 2219
    bool_0 = False
    maybe_0 = module_0.Maybe(int_0, bool_0)
    maybe_0.ap(int_0)


def test_case_10():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    maybe_0.filter(none_type_0)


def test_case_11():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_1 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_1.get_or_else(bool_0)
    var_1 = maybe_0.filter(maybe_1)
    bool_1 = False
    maybe_2 = module_0.Maybe(var_1, bool_1)
    maybe_2.filter(var_0)


def test_case_12():
    none_type_0 = None
    int_0 = 1
    list_0 = [int_0, int_0, int_0]
    none_type_1 = None
    maybe_0 = module_0.Maybe(list_0, none_type_1)
    var_0 = maybe_0.get_or_else(none_type_0)
    var_0.to_validation()


def test_case_13():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_either()
    var_1 = maybe_0.to_try()
    var_1.to_validation()


def test_case_14():
    bool_0 = True
    none_type_0 = None
    maybe_0 = module_0.Maybe(bool_0, none_type_0)
    var_0 = maybe_0.to_either()
    var_0.to_either()


def test_case_15():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.to_try()
    var_2 = var_1.filter(bool_0)


def test_case_16():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_box()
    maybe_0.filter(var_0)


def test_case_17():
    str_0 = "\n        :param semigroup: other semigroup to concat\n        :type semigroup: One[B]\n        :returns: new One with first truly value or last falsy\n        :rtype: One[A | B]\n        "
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, str_0)
    var_0 = maybe_0.to_lazy()
    var_0.get_or_else(str_0)


def test_case_18():
    int_0 = 1600
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = var_0.ap(int_0)


def test_case_19():
    tuple_0 = ()
    maybe_0 = module_0.Maybe(tuple_0, tuple_0)
    none_type_0 = None
    maybe_1 = module_0.Maybe(none_type_0, none_type_0)
    var_0 = maybe_1.to_lazy()
    var_1 = var_0.map(var_0)
    var_2 = maybe_1.to_try()
    tuple_1 = (maybe_1,)
    var_3 = var_0.to_box()
    maybe_2 = module_0.Maybe(tuple_1, none_type_0)
    bool_0 = var_2.__eq__(var_2)
    var_4 = maybe_2.get_or_else(none_type_0)
    tuple_1.bind(var_0)


def test_case_20():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.to_lazy()
    var_2 = var_1.to_validation()
    var_3 = maybe_0.filter(var_1)
    var_4 = var_0.to_validation()
    var_2.get_or_else(var_4)


def test_case_21():
    none_type_0 = None
    maybe_0 = module_0.Maybe(none_type_0, none_type_0)
    bool_0 = maybe_0.__eq__(maybe_0)
    var_0 = maybe_0.to_box()
    var_1 = var_0.to_try()
    var_2 = maybe_0.to_lazy()
    var_2.filter(var_1)


def test_case_22():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = True
    maybe_1 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_1.to_validation()
    var_1 = module_0.Maybe(maybe_1, var_0)
    var_2 = maybe_1.get_or_else(bool_1)
    bool_2 = maybe_1.__eq__(var_1)
    var_3 = maybe_1.to_validation()
    var_4 = maybe_1.map(var_3)
    var_5 = var_4.filter(maybe_1)
    var_6 = maybe_1.to_try()
    var_7 = maybe_1.map(var_1)
    var_8 = var_6.get_or_else(bool_2)
    var_9 = maybe_1.to_try()
    var_10 = maybe_1.bind(var_6)
    var_3.ap(var_9)
