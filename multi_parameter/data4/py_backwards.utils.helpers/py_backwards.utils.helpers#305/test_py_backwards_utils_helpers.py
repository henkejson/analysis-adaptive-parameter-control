# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import py_backwards.utils.helpers as module_0
import re as module_1


def test_case_0():
    variables_generator_0 = module_0.VariablesGenerator()
    none_type_0 = module_0.debug(variables_generator_0)


def test_case_1():
    variables_generator_0 = module_0.VariablesGenerator()


def test_case_2():
    none_type_0 = None
    callable_0 = module_0.eager(none_type_0)
    bool_0 = False
    none_type_1 = module_0.debug(bool_0)


def test_case_3():
    complex_0 = 1957 - 2176.683397j
    module_0.get_source(complex_0)


def test_case_4():
    bytes_0 = b"\xacYSn\xc5h.\x0c\x97\xb8X\xcb"
    variables_generator_0 = module_0.VariablesGenerator()
    none_type_0 = module_0.debug(variables_generator_0)
    none_type_1 = None
    none_type_2 = module_0.warn(none_type_1)
    var_0 = module_1.split(bytes_0, bytes_0)


def test_case_5():
    str_0 = "filter"
    none_type_0 = None
    variables_generator_0 = module_0.VariablesGenerator()
    variables_generator_1 = module_0.VariablesGenerator()
    dict_0 = {str_0: none_type_0, str_0: none_type_0, str_0: none_type_0}
    callable_0 = module_0.eager(str_0)
    none_type_1 = module_0.warn(callable_0)
    none_type_2 = module_0.debug(dict_0)
    callable_0.__call__(variables_generator_1, dict_0)
