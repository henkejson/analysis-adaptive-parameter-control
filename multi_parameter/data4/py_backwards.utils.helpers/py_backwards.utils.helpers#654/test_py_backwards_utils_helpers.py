# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import py_backwards.utils.helpers as module_0
import re as module_1


def test_case_0():
    variables_generator_0 = module_0.VariablesGenerator()
    none_type_0 = module_0.debug(variables_generator_0)


def test_case_1():
    variables_generator_0 = module_0.VariablesGenerator()


def test_case_2():
    bytes_0 = b"\xf3\x08\x01\xc5"
    callable_0 = module_0.eager(bytes_0)
    none_type_0 = module_0.debug(callable_0)


def test_case_3():
    bool_0 = False
    variables_generator_0 = module_0.VariablesGenerator()
    callable_0 = module_0.eager(bool_0)
    variables_generator_1 = module_0.VariablesGenerator()
    callable_1 = module_0.eager(variables_generator_1)
    none_type_0 = None
    var_0 = module_1.purge()
    callable_1.__call__(
        var_0, bool_0, qualname=bool_0, type=none_type_0, start=none_type_0
    )


def test_case_4():
    dict_0 = {}
    none_type_0 = module_0.warn(dict_0)
    list_0 = [dict_0]
    none_type_1 = module_0.warn(list_0)
    module_0.get_source(list_0)


def test_case_5():
    str_0 = "&R>o@DQ!"
    variables_generator_0 = module_0.VariablesGenerator()
    dict_0 = {str_0: str_0}
    none_type_0 = module_0.warn(str_0)
    module_0.VariablesGenerator(**dict_0)
