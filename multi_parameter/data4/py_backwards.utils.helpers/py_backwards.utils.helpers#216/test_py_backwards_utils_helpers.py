# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import py_backwards.utils.helpers as module_0
import re as module_1


def test_case_0():
    int_0 = 4
    none_type_0 = module_0.debug(int_0)


def test_case_1():
    variables_generator_0 = module_0.VariablesGenerator()


def test_case_2():
    bool_0 = True
    none_type_0 = None
    int_0 = 5
    callable_0 = module_0.eager(none_type_0)
    none_type_1 = module_0.debug(int_0)
    callable_1 = module_0.eager(bool_0)
    none_type_2 = module_0.warn(callable_0)
    none_type_3 = module_0.debug(int_0)
    variables_generator_0 = module_0.VariablesGenerator()
    module_0.get_source(callable_0)


def test_case_3():
    none_type_0 = None
    module_0.get_source(none_type_0)


def test_case_4():
    str_0 = "Prepends module with:\n        from __future__ import absolute_import\n        from __future__ import division\n        from __future__ import print_function\n        from __future__ import unicode_literals\n            \n    "
    none_type_0 = module_0.warn(str_0)
    none_type_1 = module_0.warn(str_0)
    none_type_2 = module_0.debug(none_type_0)
    variables_generator_0 = module_0.VariablesGenerator()
    module_1.escape(variables_generator_0)


def test_case_5():
    none_type_0 = None
    str_0 = "*f:\\65<sGmw"
    none_type_1 = module_0.warn(str_0)
    callable_0 = module_0.eager(none_type_0)
    callable_0.__call__(str_0, callable_0, none_type_1, qualname=none_type_1)
