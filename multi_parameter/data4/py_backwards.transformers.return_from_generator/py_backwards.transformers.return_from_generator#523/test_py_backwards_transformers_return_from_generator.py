# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import typed_ast._ast3 as module_0
import py_backwards.transformers.return_from_generator as module_1
import typed_ast.ast3 as module_2


def test_case_0():
    expr_0 = module_0.expr()
    return_from_generator_transformer_0 = module_1.ReturnFromGeneratorTransformer(
        expr_0
    )


def test_case_1():
    str_0 = "aI`#-zrdU!W&"
    list_0 = [str_0, str_0, str_0, str_0]
    try_0 = module_0.Try(*list_0)
    return_from_generator_transformer_0 = module_1.ReturnFromGeneratorTransformer(try_0)
    function_def_0 = return_from_generator_transformer_0.visit_FunctionDef(try_0)


def test_case_2():
    str_0 = "Qa"
    list_0 = [str_0, str_0, str_0, str_0]
    try_0 = module_0.Try(*list_0)
    try_1 = module_0.Try(*str_0)
    return_from_generator_transformer_0 = module_1.ReturnFromGeneratorTransformer(try_1)
    var_0 = module_2.parse(str_0)
    function_def_0 = return_from_generator_transformer_0.visit_FunctionDef(var_0)
    var_1 = module_2.iter_fields(str_0)
    var_0.visit(var_0)


def test_case_3():
    str_0 = ""
    list_0 = [str_0, str_0, str_0, str_0]
    try_0 = module_0.Try(*list_0)
    suite_0 = module_0.Suite()
    return_from_generator_transformer_0 = module_1.ReturnFromGeneratorTransformer(
        suite_0
    )
    try_1 = module_0.Try(*str_0)
    return_from_generator_transformer_1 = module_1.ReturnFromGeneratorTransformer(try_1)
    var_0 = module_2.parse(str_0)
    function_def_0 = return_from_generator_transformer_1.visit_FunctionDef(var_0)
    return_from_generator_transformer_2 = module_2.fix_missing_locations(var_0)
    var_1 = module_0.Del()
    var_0.visit(var_0)
