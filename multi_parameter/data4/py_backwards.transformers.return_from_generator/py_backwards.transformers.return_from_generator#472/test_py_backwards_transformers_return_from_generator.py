# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import typed_ast._ast3 as module_0
import py_backwards.transformers.return_from_generator as module_1
import typed_ast.ast3 as module_2


def test_case_0():
    operator_0 = module_0.operator()
    return_from_generator_transformer_0 = module_1.ReturnFromGeneratorTransformer(
        operator_0
    )


def test_case_1():
    bytes_0 = b"\xb3m\xba^\xe8\x93\x18UT(\xfc\xe9\x94K\xde\xb4"
    return_from_generator_transformer_0 = module_1.ReturnFromGeneratorTransformer(
        bytes_0
    )
    list_0 = [bytes_0, bytes_0, bytes_0, return_from_generator_transformer_0]
    function_def_0 = module_0.FunctionDef(*list_0)
    function_def_1 = return_from_generator_transformer_0.visit_FunctionDef(
        function_def_0
    )


def test_case_2():
    bytes_0 = b""
    return_from_generator_transformer_0 = module_1.ReturnFromGeneratorTransformer(
        bytes_0
    )
    list_0 = [
        bytes_0,
        bytes_0,
        bytes_0,
        bytes_0,
        bytes_0,
        return_from_generator_transformer_0,
    ]
    function_def_0 = module_0.FunctionDef(*list_0)
    function_def_1 = return_from_generator_transformer_0.visit_FunctionDef(
        function_def_0
    )


def test_case_3():
    str_0 = "_2hM"
    none_type_0 = None
    none_type_1 = None
    return_from_generator_transformer_0 = module_1.ReturnFromGeneratorTransformer(
        none_type_1
    )
    var_0 = module_2.parse(str_0)
    function_def_0 = return_from_generator_transformer_0.visit_FunctionDef(var_0)
    return_from_generator_transformer_0.visit(none_type_0)
